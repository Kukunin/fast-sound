
var FastSound = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(FastSound) {
  FastSound = FastSound || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof FastSound !== 'undefined' ? FastSound : {};


// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message





// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
    }
};






var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];






// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 66368,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5309248,
    DYNAMIC_BASE = 5309248,
    DYNAMICTOP_PTR = 66176;



var TOTAL_STACK = 5242880;

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;









// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_INITIAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;














function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what = 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 66360;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 66352;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

   

   

   

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = __getExecutableName();
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }

  
    

  
  
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        return low;
      }};function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___sys_munmap(addr, len) {
      return syscallMunmap(addr, len);
    }function ___syscall91(a0,a1
  ) {
  return ___sys_munmap(a0,a1);
  }

  
  
   
  
   
  
     

  
  function _fd_close(fd) {
      return 0;
    }function ___wasi_fd_close(a0
  ) {
  return _fd_close(a0);
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    }function ___wasi_fd_read(a0,a1,a2,a3
  ) {
  return _fd_read(a0,a1,a2,a3);
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  }function ___wasi_fd_seek(a0,a1,a2,a3,a4
  ) {
  return _fd_seek(a0,a1,a2,a3,a4);
  }

  
  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)]=num
      return 0;
    }function ___wasi_fd_write(a0,a1,a2,a3
  ) {
  return _fd_write(a0,a1,a2,a3);
  }

  function _abort() {
      abort();
    }

   

   

   

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



  
  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }function _llvm_exp2_f64(a0
  ) {
  return _llvm_exp2_f32(a0);
  }

  
  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }function _llvm_log10_f64(a0
  ) {
  return _llvm_log10_f32(a0);
  }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }
  
   

   

   

  
  
    

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
var ASSERTIONS = false;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array,Math_floor,Math_ceil


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "___buildEnvironment": ___buildEnvironment, "___map_file": ___map_file, "___sys_munmap": ___sys_munmap, "___syscall91": ___syscall91, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__addDays": __addDays, "__arraySum": __arraySum, "__getExecutableName": __getExecutableName, "__isLeapYear": __isLeapYear, "_abort": _abort, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_getenv": _getenv, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_exp2_f64": _llvm_exp2_f64, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_strftime": _strftime, "_strftime_l": _strftime_l, "abort": abort, "getTempRet0": getTempRet0, "setTempRet0": setTempRet0, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_exp=global.Math.exp,
  Math_log=global.Math.log,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  ___buildEnvironment=env.___buildEnvironment,
  ___map_file=env.___map_file,
  ___sys_munmap=env.___sys_munmap,
  ___syscall91=env.___syscall91,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __addDays=env.__addDays,
  __arraySum=env.__arraySum,
  __getExecutableName=env.__getExecutableName,
  __isLeapYear=env.__isLeapYear,
  _abort=env._abort,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _getenv=env._getenv,
  _llvm_exp2_f32=env._llvm_exp2_f32,
  _llvm_exp2_f64=env._llvm_exp2_f64,
  _llvm_log10_f32=env._llvm_log10_f32,
  _llvm_log10_f64=env._llvm_log10_f64,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _llvm_trap=env._llvm_trap,
  _strftime=env._strftime,
  _strftime_l=env._strftime_l,
  STACKTOP = 66368,
  STACK_MAX = 5309248,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _opus_encode_native($st, $pcm, $frame_size, $data, $out_data_bytes, $lsb_depth, $analysis_pcm, $analysis_size, $c2, $analysis_channels, $downmix) {
 $st = $st | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $data = $data | 0;
 $out_data_bytes = $out_data_bytes | 0;
 $lsb_depth = $lsb_depth | 0;
 $analysis_pcm = $analysis_pcm | 0;
 $analysis_size = $analysis_size | 0;
 $c2 = $c2 | 0;
 $analysis_channels = $analysis_channels | 0;
 $downmix = $downmix | 0;
 var $$$i$i = 0.0, $$min_detected_bandwidth$0 = 0, $$mul123$i = 0.0, $$mux1530 = 0, $$op$i$i = 0.0, $$ph = 0, $$pr = 0, $$pr1486 = 0, $$pre$i25$i = 0, $$pre1600 = 0, $$pre1605 = 0, $$pre1607 = 0, $$pre1608 = 0, $$pre328 = 0, $$pre329 = 0, $$pre864$i$i = 0.0, $$pre865$i$i = 0.0, $$pre866$i$i = 0.0, $$pre867$i$i = 0.0, $$pre868$i$i = 0.0, $$pre869$i$i = 0.0, $$pre870$i$i = 0.0, $$pre871$i$i = 0.0, $$pre872$i$i = 0.0, $$pre874$i$i = 0.0, $$pre875$i$i = 0.0, $$pre876$i$i = 0.0, $$pre877$i$i = 0.0, $$pre878$i$i = 0.0, $$pre879$i$i = 0.0, $$pre880$i$i = 0.0, $$pre881$i$i = 0.0, $$pre882$i$i = 0.0, $$pre883$i$i = 0.0, $$pre884$i$i = 0.0, $$pre885$i$i = 0.0, $$sink = 0, $$sink1655 = 0, $$sink1656 = 0, $$sink1657 = 0, $10 = 0.0, $101 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $118 = 0.0, $12 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $14 = 0, $150 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $158 = 0.0, $165 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $19 = 0, $20 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $23 = 0, $24 = 0, $244 = 0.0, $246 = 0.0, $248 = 0.0, $25 = 0.0, $250 = 0.0, $252 = 0.0, $254 = 0.0, $256 = 0.0, $258 = 0.0, $26 = 0.0, $265 = 0.0, $268 = 0.0, $271 = 0.0, $275 = 0.0, $278 = 0.0, $281 = 0.0, $287 = 0.0, $290 = 0.0, $291 = 0.0, $295 = 0.0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $305 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $322 = 0.0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0, $333 = 0.0, $334 = 0.0, $336 = 0, $34 = 0, $341 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $363 = 0.0, $365 = 0.0, $367 = 0, $368 = 0, $37 = 0.0, $370 = 0, $371 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0.0, $382 = 0, $383 = 0, $384 = 0, $386 = 0, $389 = 0, $39 = 0.0, $390 = 0, $392 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0.0, $400 = 0, $402 = 0, $404 = 0, $405 = 0, $408 = 0, $409 = 0, $413 = 0, $419 = 0, $420 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $436 = 0, $438 = 0, $442 = 0, $449 = 0, $455 = 0, $458 = 0, $461 = 0, $462 = 0, $464 = 0, $467 = 0, $469 = 0, $47 = 0.0, $470 = 0, $472 = 0, $475 = 0, $478 = 0.0, $479 = 0.0, $480 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $496 = 0, $498 = 0, $50 = 0.0, $500 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $508 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0.0, $514 = 0, $516 = 0, $517 = 0, $518 = 0, $52 = 0.0, $521 = 0, $522 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0.0, $530 = 0, $532 = 0, $533 = 0.0, $535 = 0.0, $539 = 0, $542 = 0, $543 = 0, $546 = 0, $549 = 0, $552 = 0, $556 = 0, $559 = 0, $56 = 0.0, $561 = 0, $562 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $58 = 0.0, $580 = 0, $581 = 0, $583 = 0.0, $585 = 0.0, $589 = 0, $59 = 0.0, $593 = 0, $594 = 0, $596 = 0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0, $605 = 0, $606 = 0, $607 = 0, $61 = 0.0, $610 = 0, $612 = 0, $613 = 0, $616 = 0, $618 = 0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $625 = 0, $626 = 0, $627 = 0, $63 = 0.0, $630 = 0, $632 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $644 = 0, $645 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $655 = 0, $657 = 0, $658 = 0, $66 = 0.0, $661 = 0, $663 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0.0, $671 = 0, $672 = 0, $678 = 0, $679 = 0, $689 = 0, $692 = 0, $693 = 0, $697 = 0, $699 = 0, $70 = 0, $701 = 0, $704 = 0, $71 = 0.0, $710 = 0.0, $712 = 0.0, $713 = 0, $714 = 0, $72 = 0.0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0.0, $75 = 0.0, $77 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $89 = 0.0, $91 = 0.0, $93 = 0.0, $95 = 0.0, $97 = 0.0, $99 = 0.0, $E379$0$lcssa$i$i = 0.0, $E379$0812$i$i = 0.0, $E883$0$lcssa$i$i = 0.0, $E883$0792$i$i = 0.0, $E_count$i$i = 0, $Etracker$i$i = 0, $Fs$i$i = 0, $Fs10$i = 0, $Fs113$pre$phiZ2D = 0, $Fs2$i = 0, $HB_gain$01634 = 0.0, $HB_gain$1 = 0.0, $LBRR_coded = 0, $XX$i = 0, $XY$i = 0, $YY$i = 0, $above_max_pitch$0794$i$i = 0.0, $above_max_pitch$2$i$i = 0.0, $activity$0 = 0, $activity$i$i = 0, $add$i$i = 0.0, $add$i$i$i = 0.0, $add$i$i1002 = 0.0, $add$i$i1129 = 0.0, $add$i$i138 = 0, $add$i$i203 = 0, $add$i1108 = 0, $add$i1153 = 0.0, $add$i1293 = 0, $add$i27$i = 0.0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr122$i$i = 0, $add$ptr1357 = 0, $add$ptr7 = 0, $add$ptr7$i = 0, $add$ptr7$i81 = 0, $add$ptr89$i = 0, $add$ptr90$i = 0, $add$ptr910 = 0, $add1009$i$i = 0.0, $add1126$15$i$1$i = 0.0, $add1126$15$i$2$i = 0.0, $add1126$15$i$3$i = 0.0, $add1126$15$i$i = 0.0, $add1151$1$i$i = 0.0, $add1151$10$i$i = 0.0, $add1151$11$i$i = 0.0, $add1151$12$i$i = 0.0, $add1151$13$i$i = 0.0, $add1151$14$i$i = 0.0, $add1151$15$i$i = 0.0, $add1151$2$i$i = 0.0, $add1151$3$i$i = 0.0, $add1151$4$i$i = 0.0, $add1151$5$i$i = 0.0, $add1151$6$i$i = 0.0, $add1151$7$i$i = 0.0, $add1151$8$i$i = 0.0, $add1151$9$i$i = 0.0, $add1151$i$i = 0.0, $add1207$1$i$i = 0.0, $add1207$2$i$i = 0.0, $add1207$i$i = 0.0, $add1214$1$i$i = 0.0, $add1214$2$i$i = 0.0, $add1214$i$i = 0.0, $add1262$1$i$i = 0.0, $add1262$2$i$i = 0.0, $add1262$3$i$i = 0.0, $add1262$i$i = 0.0, $add1311$1$i$i = 0.0, $add1311$2$i$i = 0.0, $add1311$3$i$i = 0.0, $add1311$4$i$i = 0.0, $add1311$5$i$i = 0.0, $add1311$6$i$i = 0.0, $add1311$8$i$i = 0.0, $add1311$i$i = 0.0, $add153$i = 0.0, $add16$i = 0.0, $add188$i$i = 0.0, $add2$i1161 = 0, $add2$i1175 = 0, $add20$i1145 = 0.0, $add200$i$i = 0.0, $add206$i$i = 0.0, $add2108 = 0, $add217$i$i = 0.0, $add25$i = 0.0, $add25$i1343 = 0.0, $add3$i$i = 0, $add308$i$i = 0.0, $add32$i = 0, $add391 = 0, $add40$i = 0.0, $add414$i$i = 0.0, $add415$i$i = 0.0, $add425$i$i = 0.0, $add430$i$i = 0.0, $add444$i$i = 0.0, $add447$i$i = 0.0, $add545$$i$i = 0.0, $add545$i$i = 0.0, $add57$1$i$i = 0.0, $add57$i$i = 0.0, $add581$4 = 0, $add581$6 = 0, $add584$1$i$i = 0.0, $add584$2$i$i = 0.0, $add584$3$i$i = 0.0, $add584$4$i$i = 0.0, $add584$5$i$i = 0.0, $add584$6$i$i = 0.0, $add584$i$i = 0.0, $add6$i = 0, $add628$i$i = 0.0, $add63$i = 0.0, $add63$i$i = 0.0, $add65$i$i = 0, $add67$i71 = 0.0, $add687$i$i = 0.0, $add71$i = 0.0, $add734$i$i = 0.0, $add843$17$i$i = 0.0, $add9$i = 0, $add912 = 0, $add919$i$i = 0.0, $add951 = 0, $analysis_info = 0, $analysis_offset$i = 0, $analysis_read_pos_bak$01461 = 0, $analysis_read_pos_bak$01462 = 0, $analysis_read_subframe_bak$01463 = 0, $analysis_read_subframe_bak$01464 = 0, $and$i100 = 0, $and25$i = 0, $application = 0, $arraydecay = 0, $arraydecay1389$i$i = 0, $arraydecay52$i$i = 0, $arrayidx$i$i15 = 0, $arrayidx10$i1385 = 0, $arrayidx1012$i$i = 0, $arrayidx1055$i$i = 0, $arrayidx1124$1$i$i = 0, $arrayidx1124$10$phi$trans$insert$i$i = 0, $arrayidx1124$11$phi$trans$insert$i$i = 0, $arrayidx1124$12$phi$trans$insert$i$i = 0, $arrayidx1124$13$phi$trans$insert$i$i = 0, $arrayidx1124$14$i$i = 0, $arrayidx1124$15$i$i = 0, $arrayidx1124$2$phi$trans$insert$i$i = 0, $arrayidx1124$3$phi$trans$insert$i$i = 0, $arrayidx1124$4$phi$trans$insert$i$i = 0, $arrayidx1124$5$phi$trans$insert$i$i = 0, $arrayidx1124$6$phi$trans$insert$i$i = 0, $arrayidx1124$7$phi$trans$insert$i$i = 0, $arrayidx1124$8$phi$trans$insert$i$i = 0, $arrayidx1124$9$phi$trans$insert$i$i = 0, $arrayidx1206$1$i$i = 0, $arrayidx1206$2$i$i = 0, $arrayidx1206$3$i$i = 0, $arrayidx1206$i$i = 0, $arrayidx1210$1$i$i = 0, $arrayidx1210$2$i$i = 0, $arrayidx1210$3$i$i = 0, $arrayidx1210$i$i = 0, $arrayidx1213$1$i$i = 0, $arrayidx1213$2$i$i = 0, $arrayidx1213$3$i$i = 0, $arrayidx1213$i$i = 0, $arrayidx1219$1$i$i = 0, $arrayidx1219$2$i$i = 0, $arrayidx1219$3$i$i = 0, $arrayidx1219$i$i = 0, $arrayidx1222$1$i$i = 0, $arrayidx1222$2$i$i = 0, $arrayidx1222$3$i$i = 0, $arrayidx1222$i$i = 0, $arrayidx1225$1$i$i = 0, $arrayidx1225$2$i$i = 0, $arrayidx1225$3$i$i = 0, $arrayidx1264$1$i$i = 0, $arrayidx1264$2$i$i = 0, $arrayidx1264$3$i$i = 0, $arrayidx1264$i$i = 0, $arrayidx1292$1$i$i = 0, $arrayidx1292$2$i$i = 0, $arrayidx1292$i$i = 0, $arrayidx13$i = 0, $arrayidx1305$1$i$i = 0, $arrayidx1305$2$i$i = 0, $arrayidx1305$3$i$i = 0, $arrayidx1305$4$i$i = 0, $arrayidx1305$5$i$i = 0, $arrayidx1305$6$i$i = 0, $arrayidx1305$7$i$i = 0, $arrayidx1305$8$i$i = 0, $arrayidx1305$i$i = 0, $arrayidx1335$4$i$i = 0, $arrayidx1335$5$i$i = 0, $arrayidx1335$6$i$i = 0, $arrayidx1335$7$i$i = 0, $arrayidx1338$4$i$i = 0, $arrayidx1338$5$i$i = 0, $arrayidx1338$6$i$i = 0, $arrayidx1338$7$i$i = 0, $arrayidx1341$4$i$i = 0, $arrayidx1341$5$i$i = 0, $arrayidx1341$6$i$i = 0, $arrayidx1341$7$i$i = 0, $arrayidx1346$4$i$i = 0, $arrayidx1346$5$i$i = 0, $arrayidx1346$6$i$i = 0, $arrayidx1346$7$i$i = 0, $arrayidx135$i$i = 0, $arrayidx1367$1$i$i = 0, $arrayidx1367$2$i$i = 0, $arrayidx1367$3$i$i = 0, $arrayidx1367$4$i$i = 0, $arrayidx1367$5$i$i = 0, $arrayidx1367$6$i$i = 0, $arrayidx1367$7$i$i = 0, $arrayidx1367$8$i$i = 0, $arrayidx1367$i$i = 0, $arrayidx1375$i$i = 0, $arrayidx1378$i$i = 0, $arrayidx1380$i$i = 0, $arrayidx1383$i$i = 0, $arrayidx1386$i$i = 0, $arrayidx1394$i$i = 0, $arrayidx209$i$i = 0, $arrayidx211$i$i = 0, $arrayidx234$i$i = 0, $arrayidx24$i$i = 0, $arrayidx24$i21$i = 0, $arrayidx260$phi$trans$insert$i$i = 0, $arrayidx27$i = 0, $arrayidx27$i1345 = 0, $arrayidx296$i$i = 0, $arrayidx3$i = 0, $arrayidx318$1$i$i = 0, $arrayidx318$10$i$i = 0, $arrayidx318$11$i$i = 0, $arrayidx318$12$i$i = 0, $arrayidx318$13$i$i = 0, $arrayidx318$14$i$i = 0, $arrayidx318$15$i$i = 0, $arrayidx318$16$i$i = 0, $arrayidx318$17$i$i = 0, $arrayidx318$2$i$i = 0, $arrayidx318$3$i$i = 0, $arrayidx318$4$i$i = 0, $arrayidx318$5$i$i = 0, $arrayidx318$6$i$i = 0, $arrayidx318$7$i$i = 0, $arrayidx318$8$i$i = 0, $arrayidx318$9$i$i = 0, $arrayidx318$i$i = 0, $arrayidx319$1$i$i = 0, $arrayidx319$10$i$i = 0, $arrayidx319$11$i$i = 0, $arrayidx319$12$i$i = 0, $arrayidx319$13$i$i = 0, $arrayidx319$14$i$i = 0, $arrayidx319$15$i$i = 0, $arrayidx319$16$i$i = 0, $arrayidx319$17$i$i = 0, $arrayidx319$2$i$i = 0, $arrayidx319$3$i$i = 0, $arrayidx319$4$i$i = 0, $arrayidx319$5$i$i = 0, $arrayidx319$6$i$i = 0, $arrayidx319$7$i$i = 0, $arrayidx319$8$i$i = 0, $arrayidx319$9$i$i = 0, $arrayidx319$i$i = 0, $arrayidx33$i = 0, $arrayidx33$i1349 = 0, $arrayidx34$i$i = 0, $arrayidx35$i1397 = 0, $arrayidx38$i = 0, $arrayidx46$us$i1363 = 0, $arrayidx472$i$i = 0, $arrayidx474$i$i = 0, $arrayidx480$phi$trans$insert$i$i = 0, $arrayidx480$pre$phi$i$iZ2D = 0, $arrayidx613$i$i = 0, $arrayidx7$i$i = 0, $arrayidx7$us$i$i$i = 0, $arrayidx7$us$i113$i$i = 0, $arrayidx7$us$i136$i$i = 0, $arrayidx7$us$i159$i$i = 0, $arrayidx7$us$i211$i$i = 0, $arrayidx7$us$i90$i$i = 0, $arrayidx733$phi$trans$insert$i$i = 0, $arrayidx735$i$i = 0, $arrayidx74$i$i = 0, $arrayidx748$phi$trans$insert$i$i = 0, $arrayidx750$i$i = 0, $arrayidx8$i1231 = 0, $arrayidx8$i1329 = 0, $arrayidx82$i$i = 0, $arrayidx937$i$i = 0, $arrayidx962 = 0, $auto_bandwidth = 0, $b$1830$i$i = 0, $b$2810$i$i = 0, $b$3809$i$i = 0, $b$4808$i$i = 0, $b$6799$i$i = 0, $band_log2$i$i = 0, $band_tonality$i$i = 0, $bandwidth$0797$i$i = 0, $bandwidth$1$i$i = 0, $bandwidth$2$i$i = 0, $bandwidth$3$i$i = 0, $bandwidth$3$off$i$i = 0, $bandwidth$4$i$i = 0, $bandwidth$i$i = 0, $bandwidth561$1$ph = 0, $bandwidth614 = 0, $bandwidth632$phi$trans$insert = 0, $bandwidth632$pre$phiZ2D = 0, $bandwidth_mask$0798$i$i = 0.0, $bandwidth_span$0$lcssa$i$i = 0, $below_max_pitch$0795$i$i = 0.0, $bitrate_bps = 0, $bw$0 = 0, $c$0$us$i1358 = 0, $c$01553 = 0, $call$i$i = 0.0, $call1953 = 0, $celt_mode = 0, $celt_to_silk$0 = 0, $celt_to_silk$1 = 0, $celt_to_silk$3$ph = 0, $celt_to_silk$4 = 0, $channels = 0, $channels101 = 0, $cmp$i = 0, $cmp$i1015 = 0, $cmp1$i$i1127 = 0, $cmp1006$i$i = 0, $cmp1027 = 0, $cmp1090 = 0, $cmp1100 = 0, $cmp1687 = 0, $cmp1772 = 0, $cmp20$i$i = 0, $cmp242 = 0, $cmp255$i = 0, $cmp255$i1318 = 0, $cmp28$i1565 = 0, $cmp30$i = 0, $cmp31$i$i = 0, $cmp325 = 0, $cmp459 = 0, $cmp4591617 = 0, $cmp473 = 0, $cmp477 = 0, $cmp553$not = 0, $cmp5531625 = 0, $cmp5531626 = 0, $cmp6$i$i = 0, $cmp639 = 0, $cmp7$i$i$i = 0, $cmp7$i$i$i$i = 0, $cmp7$i$i183$i$i = 0, $cmp819 = 0, $cmp929$i$i = 0, $complexity = 0, $cond = 0, $cond$i1113 = 0, $cond$i119 = 0, $cond$i1246 = 0.0, $cond$i1250 = 0.0, $cond$i1250$peel = 0.0, $cond$i1309 = 0, $cond$i147 = 0, $cond1008$i$i = 0.0, $cond1101$i$i = 0.0, $cond1119 = 0.0, $cond1197$i$i = 0, $cond137$i$i = 0.0, $cond15$i$i$i = 0.0, $cond168$i = 0.0, $cond1794 = 0, $cond1800 = 0, $cond199$i$i = 0.0, $cond205$i$i = 0.0, $cond236$i$i = 0.0, $cond241 = 0, $cond242$i$i = 0.0, $cond247 = 0, $cond248$i$i = 0.0, $cond293$i$i = 0.0, $cond342 = 0, $cond413 = 0, $cond44 = 0.0, $cond607$i$i = 0.0, $cond70$1$i$i = 0, $cond70$i$i = 0, $cond763 = 0, $cond79$i = 0.0, $cond88$i = 0.0, $cond9$i$i = 0.0, $cond97$i = 0.0, $conv$i20$i$i$i = 0, $conv$i20$i$i$i180 = 0, $conv$i20$i$i$i277 = 0, $conv$i993 = 0.0, $conv10$i = 0, $conv10$i$i$i = 0, $conv10$i$i$i$i = 0, $conv10$i$i189$i$i = 0, $conv1140 = 0, $conv1140$div1144 = 0, $conv1140$div1144$pn = 0, $conv150$i = 0.0, $conv23$i = 0, $conv386 = 0, $conv453$i$i = 0.0, $conv71$i = 0, $conv798$i$i = 0, $conv966$i$i = 0.0, $count$i$i = 0, $curr_bandwidth$0 = 0, $curr_bandwidth$2 = 0, $dec$us$i = 0, $dec$us42$i = 0, $dec2104 = 0, $delay_buffer = 0, $delay_compensation$0 = 0, $desiredInternalSampleRate1191 = 0, $detected_bandwidth = 0, $div = 0, $div$i = 0.0, $div$i$i18 = 0.0, $div$i$i235 = 0, $div$i11 = 0, $div$i1138 = 0.0, $div$i1158 = 0, $div$i1172 = 0, $div$i1221 = 0, $div$i1315 = 0, $div$i1372 = 0, $div$i41 = 0, $div$sub$i = 0, $div1$i = 0, $div1$i1316 = 0, $div1$i1373 = 0, $div102$i$i = 0.0, $div1144 = 0, $div1168$i$i = 0.0, $div1173$i$i = 0.0, $div1173$mul1174$i$i = 0.0, $div118 = 0, $div124 = 0, $div124$cond = 0, $div13$i = 0, $div13$i1307 = 0, $div1302 = 0, $div1328 = 0, $div136$i = 0.0, $div139 = 0, $div1454 = 0, $div1542 = 0, $div15421496 = 0, $div15421499 = 0, $div17$i$i = 0.0, $div175$i$i = 0.0, $div175$prob_min$0$i$i = 0.0, $div189$i$i = 0.0, $div1990 = 0, $div1992 = 0, $div2$i = 0, $div2035 = 0, $div2068 = 0, $div219$i$i = 0.0, $div219$prob_min$1$i$i = 0.0, $div4$i = 0, $div4$i1298 = 0, $div596$i$i = 0.0, $div612$i$i = 0.0, $div612$mul614$i$i = 0.0, $div684$i$i = 0.0, $div7$i = 0, $div7$pcm_len$0$i = 0, $div731$i$i = 0.0, $div8$i = 0, $div8$i1036 = 0, $div8$i1057 = 0, $div814 = 0, $div824 = 0, $div877$i$i = 0.0, $div896 = 0, $effective_max_rate$0 = 0, $enc = 0, $enc$idx983$val = 0, $enc$idx985$val = 0, $enc$idx986$val = 0, $enc_frame_size$0 = 0, $encoder_buffer = 0, $end$0 = 0, $end_offs$i = 0, $endband$0 = 0, $equiv$1$i = 0, $equiv$1$i1033 = 0, $equiv$1$i1054 = 0, $equiv$2$i = 0, $equiv$3$i14751621 = 0, $equiv$3$i14751622 = 0, $equiv$3$i1478 = 0, $error$i = 0, $ext$i = 0, $features$i$i = 0, $frame_loudness$0823$i$i = 0.0, $frame_noisiness$0827$i$i = 0.0, $frame_probs$i$i = 0, $frame_rate$0 = 0, $frame_rate$1 = 0, $frame_size$addr$0$i = 0, $frame_stationarity$0825$i$i = 0.0, $frame_tonality$0829$i$i = 0.0, $frame_tonality$1$i$i = 0.0, $framerate$addr$019$i = 0, $framerate$addr$019$i1072 = 0, $framerate$addr$019$i1257 = 0, $framerate$addr$019$i1411 = 0, $h$i$i = 0, $hp_ener_accum$i$i = 0, $hp_freq_smth1$0 = 0, $hybrid_stereo_width_Q14 = 0, $i$0$lcssa$i = 0, $i$012$us$i$i$i = 0, $i$012$us$i112$i$i = 0, $i$012$us$i135$i$i = 0, $i$012$us$i158$i$i = 0, $i$012$us$i210$i$i = 0, $i$012$us$i89$i$i = 0, $i$0124$i = 0, $i$018$i$i = 0, $i$018$i$i$i = 0, $i$020$i$i = 0, $i$04$i = 0, $i$042$lcssa$i = 0, $i$042$lcssa$i1184 = 0, $i$056$i = 0, $i$056$i1321 = 0, $i$060$i = 0, $i$07$i = 0, $i$07$i$i = 0, $i$07$i$i$i = 0, $i$07$i$i999 = 0, $i$0836$i$i = 0, $i$11550 = 0, $i$1232$i$i = 0, $i$1242$i$i = 0, $i$158$i = 0, $i$158$i1337 = 0, $i$158$i1395 = 0, $i$18$i = 0, $i$1835$i$i = 0, $i$21548 = 0, $i$2208$i$i = 0, $i$2240$i$i = 0, $i$254$us$i1360 = 0, $i$2834$i$i = 0, $i$31546 = 0, $i$3238$i$i = 0, $i$4236$i$i = 0, $i$4815$i$i = 0, $i$5234$i$i = 0, $i$6232$i$i = 0, $i$6805$i$i = 0, $i$7793$i$i = 0, $i330$i$i = 0, $i353$1$i$i = 0, $i353$2$i$i = 0, $i353$i$i = 0, $i360$1$i$i = 0, $i360$2$i$i = 0, $i360$i$i = 0, $idx$neg$i216 = 0, $idx$neg$i227 = 0, $idxprom$i$i = 0, $in$i$i = 0, $inc149$i$i = 0, $inc149213$pre$phi$i$iZ2D = 0, $inc159$i$i = 0, $inc21$i$i = 0, $inc39$1$i$i = 0, $inc39$2$i$i = 0, $inc39$i$i = 0, $inc812$i$i = 0, $initialized$i$i = 0, $inmem$i$i = 0, $is_masked$i$i = 0, $is_silence$01465 = 0, $is_silence$addr$0$i = 0, $j$010$us$i$i$i = 0, $j$010$us$i116$i$i = 0, $j$010$us$i139$i$i = 0, $j$010$us$i162$i$i = 0, $j$010$us$i214$i$i = 0, $j$010$us$i93$i$i = 0, $j$0802$i$i = 0, $k$02$i$i = 0, $k$02$i23$i = 0, $layer_out$i$i = 0, $leakage_from$i$i = 0, $leakage_to$i$i = 0, $len$addr$0$i$i = 0, $lfe = 0, $logE$i$i = 0, $lowECount$i$i = 0, $lsb_depth$ = 0, $m0$0$lcssa$i = 0.0, $m0$03$i = 0.0, $m029$0$lcssa$i = 0.0, $m029$07$i = 0.0, $m2$0$lcssa$i = 0.0, $m2$02$i = 0.0, $mask_sum$0$lcssa = 0.0, $mask_sum$01552 = 0.0, $mask_sum$11549 = 0.0, $maxBits = 0, $maxE$0796$i$i = 0.0, $maxInternalSampleRate = 0, $max_data_bytes$0 = 0, $max_data_bytes$01472 = 0, $max_follower$i = 0, $max_frame_tonality$0828$i$i = 0.0, $max_redundancy$0 = 0, $maxval$0$$i$i = 0.0, $maxval$0$lcssa$i$i = 0.0, $maxval$019$i$i = 0.0, $maxval$019$i$i$i = 0.0, $mem_fill$i$i = 0, $min_detected_bandwidth$0 = 0, $mindist$0803$i$i = 0.0, $minval$0$lcssa$i$i = 0.0, $minval$020$i$i = 0.0, $minval$020$i$i$i = 0.0, $mode414 = 0, $mode414$sink = 0, $mode450 = 0, $mode453$pre$phi1614Z2D = 0, $mode453$pre$phiZ2D = 0, $mpos$1$i$i = 0, $mul$i = 0, $mul$i$i$i28 = 0.0, $mul$i$i1126 = 0.0, $mul$i$i1449 = 0, $mul$i1244 = 0.0, $mul$i1248 = 0.0, $mul$i1248$peel = 0.0, $mul$i131$i$i = 0.0, $mul$i177$i$i = 0.0, $mul$i47 = 0, $mul$i720$i$i = 0.0, $mul$i987 = 0, $mul1$i = 0, $mul1$i$i$i = 0.0, $mul1$i1026 = 0, $mul1$i1047 = 0, $mul1$i721$i$i = 0.0, $mul1004$i$i = 0.0, $mul1013$i$i = 0.0, $mul1013$mul1004$i$i = 0.0, $mul1025 = 0, $mul1087 = 0, $mul1092$i$i = 0.0, $mul1104$i$i = 0.0, $mul1174$i$i = 0.0, $mul12$i$i = 0.0, $mul123$i = 0.0, $mul1267 = 0, $mul1354 = 0, $mul1371 = 0, $mul13891544 = 0, $mul1394$peel = 0, $mul146$i$i = 0.0, $mul148$i = 0.0, $mul1591 = 0, $mul16$i = 0, $mul16$i1388 = 0.0, $mul16$i1559 = 0, $mul16$us$i = 0, $mul16$us$i$us$le = 0, $mul16$us31$i = 0, $mul16$us31$i$us$le = 0, $mul160 = 0, $mul172$i = 0.0, $mul173$i$i = 0.0, $mul19$i$i = 0, $mul19$i24$i = 0, $mul208$i$i = 0.0, $mul21$i = 0.0, $mul21$i$i$i = 0.0, $mul21$i1340 = 0.0, $mul21$i744$i$i = 0.0, $mul214$i$i = 0.0, $mul223$i$i = 0.0, $mul23$i$i = 0.0, $mul23$i26$i = 0.0, $mul232$i$i = 0.0, $mul233$i$i = 0.0, $mul26$i1239 = 0, $mul26$i1344 = 0, $mul266 = 0, $mul297$i$i = 0.0, $mul32 = 0.0, $mul328$i$i = 0.0, $mul331$i$i = 0.0, $mul34$i1396 = 0, $mul373$i$i = 0.0, $mul4$i$i = 0.0, $mul40$i = 0, $mul40$i1206 = 0, $mul41$i = 0.0, $mul5$i1227 = 0.0, $mul5$i1324 = 0.0, $mul5$i1379 = 0.0, $mul575 = 0, $mul6$i1142 = 0, $mul608$i$i = 0.0, $mul609$i$i = 0.0, $mul614$i$i = 0.0, $mul641$i$i = 0.0, $mul8$i$i = 0.0, $mul80$i$i = 0.0, $mul823 = 0, $mul83$i$i = 0.0, $mul878$i$i = 0.0, $mul9$i1384 = 0, $mul914 = 0, $mul938$E883$0$i$i = 0.0, $mul938$i$i = 0.0, $mul964$i$i = 0.0, $mul985 = 0, $mul987$i$i = 0.0, $music_prob_max$sink = 0, $nBytes = 0, $nE$0$lcssa$i$i = 0.0, $nE$0814$i$i = 0.0, $nb_compr_bytes$0 = 0, $nb_compr_bytes$1 = 0, $nb_compr_bytes$2 = 0, $nb_frames$i$i = 0, $nb_frames$i$i78 = 0, $nb_no_activity_frames = 0, $nbits_total$i = 0, $noisiness$i$i = 0, $num_multiframes$0 = 0, $offs$i = 0, $offset$025$i = 0, $offset$addr$0$i$i = 0, $or$cond161511 = 0, $or$cond4 = 0, $out$i$i = 0, $packetLossPercentage = 0, $packet_code$0 = 0, $packet_code$1 = 0, $pcm_len$026$i = 0, $peak_signal_energy = 0, $period$0$lcssa$i = 0, $period$0$lcssa$i1080 = 0, $period$0$lcssa$i1265 = 0, $period$0$lcssa$i1419 = 0, $period$018$i = 0, $period$018$i1073 = 0, $period$018$i1258 = 0, $period$018$i1412 = 0, $pmax$0$lcssa$i$i = 0.0, $pmax$0211$i$i = 0.0, $pmin$0$$i$i = 0.0, $pmin$0$lcssa$i$i = 0.0, $pmin$0210$i$i = 0.0, $pos$0$i$i = 0, $pos$2$i$i = 0, $pos$4233$i$i = 0, $pos$5209$i$i = 0, $prefill$0 = 0, $prefill$01623 = 0, $prefill$01624 = 0, $prefill$1 = 0, $prev_HB_gain = 0, $prev_bandwidth$i$i = 0, $prev_mode468 = 0, $prev_tonality$i$i = 0, $prob_avg$0$lcssa$i$i = 0.0, $prob_avg$0217$i$i = 0.0, $prob_count$0$lcssa$i$i = 0.0, $prob_count$0218$i$i = 0.0, $prob_max$0$lcssa$i$i = 0.0, $prob_max$0220$i$i = 0.0, $prob_max$2$i$i = 0.0, $prob_min$0$lcssa$i$i = 0.0, $prob_min$0219$i$i = 0.0, $prob_min$2$i$i = 0.0, $r$i29$i = 0, $r340$1$i$i = 0, $r340$2$i$i = 0, $r340$i$i = 0, $r346$1$i$i = 0, $r346$2$i$i = 0, $r346$i$i = 0, $rangeFinal = 0, $read_pos = 0, $read_subframe = 0, $redundancy$0 = 0, $redundancy$1 = 0, $redundancy$3 = 0, $redundancy$5$ph = 0, $redundancy$6 = 0, $redundancy$71503 = 0, $redundancy_bytes$0 = 0, $redundancy_bytes$0$i = 0, $redundancy_bytes$0$i1314 = 0, $redundancy_bytes$2$ph = 0, $redundancy_bytes$3 = 0, $redundancy_bytes$5 = 0, $redundant_rng = 0, $relativeE$0824$i$i = 0.0, $rem$i = 0, $ret$2 = 0, $ret$3 = 0, $ret$41542 = 0, $ret$5 = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i$i$i = 0.0, $retval$0$i$i$i$i = 0.0, $retval$0$i$i$i$i131 = 0, $retval$0$i$i$i$i174 = 0, $retval$0$i$i$i$i271 = 0, $retval$0$i$i205$i$i = 0.0, $retval$0$i$i51$i = 0.0, $retval$0$i111 = 0, $retval$0$i25$i$i$i = 0, $retval$0$i25$i$i$i189 = 0, $retval$0$i25$i$i$i286 = 0, $retval$0$i756$i$i = 0.0, $retval$2$shrunk$i = 0, $retval$5 = 0, $retval$6 = 0, $rng$i = 0, $shl$i99 = 0, $shl4$i$i = 0, $shl4$i$i202 = 0, $shr = 0, $shr$i$i = 0, $shr$i$i160 = 0, $shr$i$i257 = 0, $shr$i1120 = 0, $shr$i114 = 0, $shr$i142 = 0, $shr$i7$i$i = 0, $shr$i7$i$i163 = 0, $shr$i7$i$i260 = 0, $shr18$i98 = 0, $shr1837 = 0, $shr22$pn$i = 0, $shr7$i = 0, $shr954 = 0, $silk_bw_switch = 0, $silk_mode = 0, $silk_rate$0$i = 0, $silk_rate$0$i1199 = 0, $slope$0826$i$i = 0.0, $smoothed_width$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i1028 = 0, $spec$select$i1049 = 0, $spec$select$i1168 = 0, $spec$select195$i$i = 0, $spec$select196$i$i = 0, $spec$select197$i$i = 0, $spec$select35$i = 0, $spec$select718$i$i = 0, $spec$select957 = 0, $spec$select959 = 0, $spec$select965 = 0, $spec$select975 = 0, $spec$select976 = 0, $spec$store$select1$1$i$i = 0, $spec$store$select1$2$i$i = 0, $spec$store$select1$i$i = 0, $spec$store$select5215$i$i = 0, $spec$store$select5222$i$i = 0, $spec_variability$0804$i$i = 0.0, $srate$0 = 0.0, $stereo_width$0 = 0.0, $storage$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i$i = 0.0, $storemerge954 = 0, $stream_channels322 = 0, $stream_channels332 = 0, $stream_channels346 = 0, $stream_channels350$pre$phiZ2D = 0, $sub$i$i = 0.0, $sub$i$i$i = 0.0, $sub$i$i20 = 0, $sub$i1018 = 0, $sub$i1118 = 0, $sub$i1139 = 0.0, $sub$i115 = 0, $sub$i1374 = 0.0, $sub$i143 = 0, $sub$i39$i = 0.0, $sub$i45 = 0.0, $sub$i5$i = 0, $sub$i8 = 0, $sub$us$i = 0, $sub$us$i$us$le = 0, $sub$us24$i = 0, $sub$us24$i$us$le = 0, $sub10$i = 0, $sub10$i1088 = 0, $sub10$i1273 = 0, $sub10$i1427 = 0, $sub100$i$i = 0, $sub103$i$i = 0.0, $sub1093$i$i = 0.0, $sub1224$1$i$i = 0.0, $sub1224$2$i$i = 0.0, $sub1224$3$i$i = 0.0, $sub1224$i$i = 0.0, $sub1233$i$i = 0.0, $sub1278 = 0, $sub1285 = 0, $sub1290$i$i = 0.0, $sub13$i$i$i = 0.0, $sub13$i$i$i$i = 0.0, $sub13$i$i192$i$i = 0.0, $sub133$i$i = 0, $sub15$i = 0, $sub156$i = 0.0, $sub1840 = 0, $sub185$i$i = 0, $sub194$i$i = 0.0, $sub2$i1375 = 0.0, $sub2$i239 = 0, $sub2$i46 = 0, $sub2004 = 0, $sub206$i$i = 0.0, $sub21$i = 0, $sub21$i1125 = 0, $sub210$i$i = 0.0, $sub212$i$i = 0.0, $sub215$i$i = 0.0, $sub216$i$i = 0.0, $sub219$i$i = 0.0, $sub227$i$i = 0.0, $sub297$i$i = 0.0, $sub298$i$i = 0.0, $sub319$i$i = 0.0, $sub34$i = 0, $sub34$i1041 = 0, $sub37$i = 0, $sub37$i1185 = 0, $sub373 = 0.0, $sub393$i$i = 0, $sub4$i13 = 0, $sub499$i$i = 0.0, $sub517$$i$i = 0.0, $sub517$i$i = 0.0, $sub672$i$i = 0.0, $sub702$i$i = 0.0, $sub704$i$i = 0.0, $sub749$i$i = 0.0, $sub770$i$i = 0.0, $sub783$i$i = 0.0, $sub841$1$i$i = 0.0, $sub841$10$i$i = 0.0, $sub841$11$i$i = 0.0, $sub841$12$i$i = 0.0, $sub841$13$i$i = 0.0, $sub841$14$i$i = 0.0, $sub841$15$i$i = 0.0, $sub841$16$i$i = 0.0, $sub841$17$i$i = 0.0, $sub841$2$i$i = 0.0, $sub841$3$i$i = 0.0, $sub841$4$i$i = 0.0, $sub841$5$i$i = 0.0, $sub841$6$i$i = 0.0, $sub841$7$i$i = 0.0, $sub841$8$i$i = 0.0, $sub841$9$i$i = 0.0, $sub841$i$i = 0.0, $sub868$i$i = 0, $sub891 = 0, $sub891$div896 = 0, $sub897$i$i = 0, $sub911 = 0, $sub936$i$i = 0.0, $sub943 = 0, $tE$0$lcssa$i$i = 0.0, $tE$0813$i$i = 0.0, $threshold$1 = 0, $toMono = 0, $to_celt$0 = 0, $tobool$i116 = 0, $tobool$i144 = 0, $tobool114 = 0, $tobool1263 = 0, $tobool1507 = 0, $tobool18221505 = 0, $tobool1872 = 0, $tobool18721510 = 0, $tobool312$i$i = 0, $tobool541467 = 0, $tobool592 = 0, $toc$0$in$i = 0, $toc$0$in$i1100 = 0, $toc$0$in$i1285 = 0, $toc$0$in$i1439 = 0, $tocmode$2 = 0, $tonality$i$i = 0, $tonality$i15$i = 0, $tonality1199$i$i = 0, $tonality2$i$i = 0, $tonality_avg$0$lcssa$i$i = 0.0, $tonality_count$0$lcssa$i$i = 0.0, $tonality_max$0$$1$i$i = 0.0, $tonality_max$0$$i$i = 0.0, $tonality_max$0$lcssa$i$i = 0.0, $tonality_slope$i$i = 0, $use_dtx = 0, $use_vbr = 0, $val$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $variable_HP_smth2_Q15 = 0, $vla = 0, $vla1016 = 0, $vla1543 = 0, $vla15431491 = 0, $vla15431491$alloca_mul = 0, $vla15431493 = 0, $vla15431497 = 0, $vla15431500 = 0, $voice_est$0 = 0, $vpos$0$i$i = 0, $vpos$1221$i$i = 0, $write_pos$i$i = 0, $x$addr$0$i$i$i = 0.0, $x$addr$0$i$i$i$i = 0.0, $x$addr$0$i$i185$i$i = 0.0, $x$sroa$4$0$copyload$i$i = 0.0, $xx$0$lcssa133$i = 0.0, $xx$0127$i = 0.0, $xx$1$i = 0.0, $xy$0$lcssa$i = 0.0, $xy$0$lcssa$i$i = 0.0, $xy$0$lcssa$i$i$i = 0.0, $xy$0$lcssa$i$i1006 = 0.0, $xy$0$lcssa132$i = 0.0, $xy$0126$i = 0.0, $xy$08$i = 0.0, $xy$08$i$i = 0.0, $xy$08$i$i$i = 0.0, $xy$08$i$i998 = 0.0, $xy$1$i = 0.0, $yy$0$lcssa131$i = 0.0, $yy$0125$i = 0.0, $yy$1$i = 0.0, $z$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $52$looptemp = 0.0, $i$2834$i$i$looptemp = 0, $70$looptemp = 0, $b$1830$i$i$looptemp = 0, $107$looptemp = 0, $112$looptemp = 0, $152$looptemp = 0, $b$6799$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12640 | 0;
 $vararg_buffer82 = sp + 12488 | 0;
 $vararg_buffer79 = sp + 12480 | 0;
 $vararg_buffer76 = sp + 12472 | 0;
 $vararg_buffer73 = sp + 12464 | 0;
 $vararg_buffer70 = sp + 12456 | 0;
 $vararg_buffer68 = sp + 12448 | 0;
 $vararg_buffer65 = sp + 12440 | 0;
 $vararg_buffer62 = sp + 12432 | 0;
 $vararg_buffer59 = sp + 12424 | 0;
 $vararg_buffer57 = sp + 12416 | 0;
 $vararg_buffer54 = sp + 12112 | 0;
 $vararg_buffer52 = sp + 12104 | 0;
 $vararg_buffer49 = sp + 12096 | 0;
 $vararg_buffer46 = sp + 12088 | 0;
 $vararg_buffer43 = sp + 12080 | 0;
 $vararg_buffer40 = sp + 12072 | 0;
 $vararg_buffer37 = sp + 12064 | 0;
 $vararg_buffer34 = sp + 12056 | 0;
 $vararg_buffer31 = sp + 12048 | 0;
 $vararg_buffer28 = sp + 12040 | 0;
 $vararg_buffer25 = sp + 12032 | 0;
 $vararg_buffer22 = sp + 12024 | 0;
 $vararg_buffer19 = sp + 12016 | 0;
 $vararg_buffer16 = sp + 12008 | 0;
 $vararg_buffer13 = sp + 12e3 | 0;
 $vararg_buffer10 = sp + 11992 | 0;
 $vararg_buffer7 = sp + 11984 | 0;
 $vararg_buffer4 = sp + 11976 | 0;
 $vararg_buffer1 = sp + 11968 | 0;
 $vararg_buffer = sp + 11664 | 0;
 $z$i$i = sp + 11536 | 0;
 $r$i29$i = sp + 11408 | 0;
 $h$i$i = sp + 11280 | 0;
 $band_tonality$i$i = sp + 11200 | 0;
 $logE$i$i = sp + 11120 | 0;
 $features$i$i = sp + 11008 | 0;
 $frame_probs$i$i = sp + 12624 | 0;
 $is_masked$i$i = sp + 10928 | 0;
 $tonality2$i$i = sp + 9968 | 0;
 $band_log2$i$i = sp + 9888 | 0;
 $leakage_from$i$i = sp + 9808 | 0;
 $leakage_to$i$i = sp + 9728 | 0;
 $layer_out$i$i = sp + 9600 | 0;
 $in$i$i = sp + 5760 | 0;
 $out$i$i = sp + 1920 | 0;
 $tonality$i$i = sp + 960 | 0;
 $noisiness$i$i = sp;
 $nBytes = sp + 12616 | 0;
 $enc = sp + 12568 | 0;
 $redundant_rng = sp + 12564 | 0;
 $celt_mode = sp + 12560 | 0;
 $analysis_info = sp + 12496 | 0;
 HEAP32[$redundant_rng >> 2] = 0;
 $cond = ($out_data_bytes | 0) < 1276 ? $out_data_bytes : 1276;
 $rangeFinal = $st + 18136 | 0;
 HEAP32[$rangeFinal >> 2] = 0;
 if (($frame_size | 0) < 1 | ($cond | 0) < 1) {
  $retval$6 = -1;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 if (($cond | 0) == 1) if ((HEAP32[$st + 144 >> 2] | 0) == ($frame_size * 10 | 0)) {
  $retval$6 = -2;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 $add$ptr = $st + (HEAP32[$st + 4 >> 2] | 0) | 0;
 $add$ptr7 = $st + (HEAP32[$st >> 2] | 0) | 0;
 $application = $st + 108 | 0;
 if ((HEAP32[$application >> 2] | 0) == 2051) $delay_compensation$0 = 0; else $delay_compensation$0 = HEAP32[$st + 116 >> 2] | 0;
 $6 = HEAP32[$st + 168 >> 2] | 0;
 $lsb_depth$ = ($6 | 0) > ($lsb_depth | 0) ? $lsb_depth : $6;
 HEAP32[$vararg_buffer >> 2] = $celt_mode;
 _opus_custom_encoder_ctl($add$ptr7, 10015, $vararg_buffer) | 0;
 HEAP32[$analysis_info >> 2] = 0;
 $silk_mode = $st + 8 | 0;
 $complexity = $st + 44 | 0;
 if ((HEAP32[$complexity >> 2] | 0) > 6) {
  $8 = HEAP32[$st + 144 >> 2] | 0;
  if (($8 | 0) > 15999) {
   $channels = $st + 112 | 0;
   $mul$i = Math_imul(HEAP32[$channels >> 2] | 0, $frame_size) | 0;
   if (($mul$i | 0) > 0) {
    $i$018$i$i = 0;
    $maxval$019$i$i = 0.0;
    $minval$020$i$i = 0.0;
    while (1) {
     $10 = +HEAPF32[$pcm + ($i$018$i$i << 2) >> 2];
     $maxval$0$$i$i = $maxval$019$i$i > $10 ? $maxval$019$i$i : $10;
     $cond9$i$i = $minval$020$i$i < $10 ? $minval$020$i$i : $10;
     $i$018$i$i = $i$018$i$i + 1 | 0;
     if (($i$018$i$i | 0) == ($mul$i | 0)) {
      $maxval$0$lcssa$i$i = $maxval$0$$i$i;
      $minval$0$lcssa$i$i = $cond9$i$i;
      break;
     } else {
      $maxval$019$i$i = $maxval$0$$i$i;
      $minval$020$i$i = $cond9$i$i;
     }
    }
   } else {
    $maxval$0$lcssa$i$i = 0.0;
    $minval$0$lcssa$i$i = 0.0;
   }
   $sub$i$i = -$minval$0$lcssa$i$i;
   $div$i = 1.0 / +(1 << $lsb_depth$ | 0);
   $cmp$i = !(($maxval$0$lcssa$i$i > $sub$i$i ? $maxval$0$lcssa$i$i : $sub$i$i) <= $div$i);
   $read_pos = $st + 7636 | 0;
   $11 = HEAP32[$read_pos >> 2] | 0;
   $read_subframe = $st + 7640 | 0;
   $12 = HEAP32[$read_subframe >> 2] | 0;
   $13 = HEAP32[$celt_mode >> 2] | 0;
   $sub$i8 = $analysis_size & -2;
   if (!$analysis_pcm) {
    $299 = $11;
    $301 = $12;
   } else {
    $div$i11 = ($8 * 95 | 0) / 50 | 0;
    $div$sub$i = ($div$i11 | 0) < ($sub$i8 | 0) ? $div$i11 : $sub$i8;
    $analysis_offset$i = $st + 7628 | 0;
    $14 = HEAP32[$analysis_offset$i >> 2] | 0;
    $sub4$i13 = $div$sub$i - $14 | 0;
    if (($sub4$i13 | 0) > 0) {
     $div7$i = ($8 | 0) / 50 | 0;
     $initialized$i$i = $st + 7648 | 0;
     $mem_fill$i$i = $st + 5960 | 0;
     $count$i$i = $st + 7624 | 0;
     $Fs$i$i = $st + 196 | 0;
     $arrayidx$i$i15 = $13 + 72 | 0;
     $inmem$i$i = $st + 3080 | 0;
     $arraydecay52$i$i = $st + 7780 | 0;
     $hp_ener_accum$i$i = $st + 7644 | 0;
     $write_pos$i$i = $st + 7632 | 0;
     $add$ptr122$i$i = $st + 5e3 | 0;
     $arrayidx135$i$i = $st + 4040 | 0;
     $arrayidx260$phi$trans$insert$i$i = $tonality2$i$i + 8 | 0;
     $arrayidx318$i$i = $st + 7196 | 0;
     $arrayidx319$i$i = $st + 7268 | 0;
     $arrayidx318$1$i$i = $st + 7200 | 0;
     $arrayidx319$1$i$i = $st + 7272 | 0;
     $arrayidx318$2$i$i = $st + 7204 | 0;
     $arrayidx319$2$i$i = $st + 7276 | 0;
     $arrayidx318$3$i$i = $st + 7208 | 0;
     $arrayidx319$3$i$i = $st + 7280 | 0;
     $arrayidx318$4$i$i = $st + 7212 | 0;
     $arrayidx319$4$i$i = $st + 7284 | 0;
     $arrayidx318$5$i$i = $st + 7216 | 0;
     $arrayidx319$5$i$i = $st + 7288 | 0;
     $arrayidx318$6$i$i = $st + 7220 | 0;
     $arrayidx319$6$i$i = $st + 7292 | 0;
     $arrayidx318$7$i$i = $st + 7224 | 0;
     $arrayidx319$7$i$i = $st + 7296 | 0;
     $arrayidx318$8$i$i = $st + 7228 | 0;
     $arrayidx319$8$i$i = $st + 7300 | 0;
     $arrayidx318$9$i$i = $st + 7232 | 0;
     $arrayidx319$9$i$i = $st + 7304 | 0;
     $arrayidx318$10$i$i = $st + 7236 | 0;
     $arrayidx319$10$i$i = $st + 7308 | 0;
     $arrayidx318$11$i$i = $st + 7240 | 0;
     $arrayidx319$11$i$i = $st + 7312 | 0;
     $arrayidx318$12$i$i = $st + 7244 | 0;
     $arrayidx319$12$i$i = $st + 7316 | 0;
     $arrayidx318$13$i$i = $st + 7248 | 0;
     $arrayidx319$13$i$i = $st + 7320 | 0;
     $arrayidx318$14$i$i = $st + 7252 | 0;
     $arrayidx319$14$i$i = $st + 7324 | 0;
     $arrayidx318$15$i$i = $st + 7256 | 0;
     $arrayidx319$15$i$i = $st + 7328 | 0;
     $arrayidx318$16$i$i = $st + 7260 | 0;
     $arrayidx319$16$i$i = $st + 7332 | 0;
     $arrayidx318$17$i$i = $st + 7264 | 0;
     $arrayidx319$17$i$i = $st + 7336 | 0;
     $i330$i$i = $out$i$i + 4 | 0;
     $r340$i$i = $out$i$i + 8 | 0;
     $r346$i$i = $out$i$i + 3832 | 0;
     $i353$i$i = $out$i$i + 12 | 0;
     $i360$i$i = $out$i$i + 3836 | 0;
     $r340$1$i$i = $out$i$i + 16 | 0;
     $r346$1$i$i = $out$i$i + 3824 | 0;
     $i353$1$i$i = $out$i$i + 20 | 0;
     $i360$1$i$i = $out$i$i + 3828 | 0;
     $r340$2$i$i = $out$i$i + 24 | 0;
     $r346$2$i$i = $out$i$i + 3816 | 0;
     $i353$2$i$i = $out$i$i + 28 | 0;
     $i360$2$i$i = $out$i$i + 3820 | 0;
     $E_count$i$i = $st + 7620 | 0;
     $arrayidx733$phi$trans$insert$i$i = $leakage_from$i$i + 68 | 0;
     $arrayidx748$phi$trans$insert$i$i = $leakage_to$i$i + 68 | 0;
     $sub868$i$i = $lsb_depth$ + -8 | 0;
     $div877$i$i = 5.699999746866524e-04 / +(1 << (($sub868$i$i | 0) > 0 ? $sub868$i$i : 0) | 0);
     $mul878$i$i = $div877$i$i * $div877$i$i;
     $mul964$i$i = $mul878$i$i * 3.0;
     $prev_bandwidth$i$i = $st + 6040 | 0;
     $arrayidx1012$i$i = $st + 7412 | 0;
     $arrayidx1055$i$i = $is_masked$i$i + 72 | 0;
     $Etracker$i$i = $st + 7612 | 0;
     $lowECount$i$i = $st + 7616 | 0;
     $arrayidx1124$2$phi$trans$insert$i$i = $logE$i$i + 8 | 0;
     $arrayidx1124$3$phi$trans$insert$i$i = $logE$i$i + 12 | 0;
     $arrayidx1124$4$phi$trans$insert$i$i = $logE$i$i + 16 | 0;
     $arrayidx1124$5$phi$trans$insert$i$i = $logE$i$i + 20 | 0;
     $arrayidx1124$6$phi$trans$insert$i$i = $logE$i$i + 24 | 0;
     $arrayidx1124$7$phi$trans$insert$i$i = $logE$i$i + 28 | 0;
     $arrayidx1124$8$phi$trans$insert$i$i = $logE$i$i + 32 | 0;
     $arrayidx1124$9$phi$trans$insert$i$i = $logE$i$i + 36 | 0;
     $arrayidx1124$10$phi$trans$insert$i$i = $logE$i$i + 40 | 0;
     $arrayidx1124$11$phi$trans$insert$i$i = $logE$i$i + 44 | 0;
     $arrayidx1124$12$phi$trans$insert$i$i = $logE$i$i + 48 | 0;
     $arrayidx1124$13$phi$trans$insert$i$i = $logE$i$i + 52 | 0;
     $arrayidx1124$1$i$i = $logE$i$i + 4 | 0;
     $arrayidx1124$14$i$i = $logE$i$i + 56 | 0;
     $arrayidx1124$15$i$i = $logE$i$i + 60 | 0;
     $prev_tonality$i$i = $st + 6036 | 0;
     $arrayidx1206$i$i = $st + 7512 | 0;
     $arrayidx1210$i$i = $st + 7416 | 0;
     $arrayidx1213$i$i = $st + 7480 | 0;
     $arrayidx1219$i$i = $st + 7448 | 0;
     $arrayidx1222$i$i = $st + 7544 | 0;
     $arrayidx1206$1$i$i = $st + 7516 | 0;
     $arrayidx1210$1$i$i = $st + 7420 | 0;
     $arrayidx1213$1$i$i = $st + 7484 | 0;
     $arrayidx1219$1$i$i = $st + 7452 | 0;
     $arrayidx1222$1$i$i = $st + 7548 | 0;
     $arrayidx1225$1$i$i = $features$i$i + 4 | 0;
     $arrayidx1206$2$i$i = $st + 7520 | 0;
     $arrayidx1210$2$i$i = $st + 7424 | 0;
     $arrayidx1213$2$i$i = $st + 7488 | 0;
     $arrayidx1219$2$i$i = $st + 7456 | 0;
     $arrayidx1222$2$i$i = $st + 7552 | 0;
     $arrayidx1225$2$i$i = $features$i$i + 8 | 0;
     $arrayidx1206$3$i$i = $st + 7524 | 0;
     $arrayidx1210$3$i$i = $st + 7428 | 0;
     $arrayidx1213$3$i$i = $st + 7492 | 0;
     $arrayidx1219$3$i$i = $st + 7460 | 0;
     $arrayidx1222$3$i$i = $st + 7556 | 0;
     $arrayidx1225$3$i$i = $features$i$i + 12 | 0;
     $arrayidx1264$i$i = $features$i$i + 16 | 0;
     $arrayidx1264$1$i$i = $features$i$i + 20 | 0;
     $arrayidx1264$2$i$i = $features$i$i + 24 | 0;
     $arrayidx1264$3$i$i = $features$i$i + 28 | 0;
     $arrayidx1292$i$i = $features$i$i + 32 | 0;
     $arrayidx1292$1$i$i = $features$i$i + 36 | 0;
     $arrayidx1292$2$i$i = $features$i$i + 40 | 0;
     $arrayidx1305$i$i = $st + 7576 | 0;
     $arrayidx1305$1$i$i = $st + 7580 | 0;
     $arrayidx1305$2$i$i = $st + 7584 | 0;
     $arrayidx1305$3$i$i = $st + 7588 | 0;
     $arrayidx1305$4$i$i = $st + 7592 | 0;
     $arrayidx1305$5$i$i = $st + 7596 | 0;
     $arrayidx1305$6$i$i = $st + 7600 | 0;
     $arrayidx1305$7$i$i = $st + 7604 | 0;
     $arrayidx1305$8$i$i = $st + 7608 | 0;
     $arrayidx1335$4$i$i = $st + 7496 | 0;
     $arrayidx1338$4$i$i = $st + 7528 | 0;
     $arrayidx1341$4$i$i = $st + 7464 | 0;
     $arrayidx1346$4$i$i = $st + 7432 | 0;
     $arrayidx1335$5$i$i = $st + 7500 | 0;
     $arrayidx1338$5$i$i = $st + 7532 | 0;
     $arrayidx1341$5$i$i = $st + 7468 | 0;
     $arrayidx1346$5$i$i = $st + 7436 | 0;
     $arrayidx1335$6$i$i = $st + 7504 | 0;
     $arrayidx1338$6$i$i = $st + 7536 | 0;
     $arrayidx1341$6$i$i = $st + 7472 | 0;
     $arrayidx1346$6$i$i = $st + 7440 | 0;
     $arrayidx1335$7$i$i = $st + 7508 | 0;
     $arrayidx1338$7$i$i = $st + 7540 | 0;
     $arrayidx1341$7$i$i = $st + 7476 | 0;
     $arrayidx1346$7$i$i = $st + 7444 | 0;
     $arrayidx1367$i$i = $features$i$i + 44 | 0;
     $arrayidx1367$1$i$i = $features$i$i + 48 | 0;
     $arrayidx1367$2$i$i = $features$i$i + 52 | 0;
     $arrayidx1367$3$i$i = $features$i$i + 56 | 0;
     $arrayidx1367$4$i$i = $features$i$i + 60 | 0;
     $arrayidx1367$5$i$i = $features$i$i + 64 | 0;
     $arrayidx1367$6$i$i = $features$i$i + 68 | 0;
     $arrayidx1367$7$i$i = $features$i$i + 72 | 0;
     $arrayidx1367$8$i$i = $features$i$i + 76 | 0;
     $arrayidx1375$i$i = $features$i$i + 80 | 0;
     $arrayidx1378$i$i = $features$i$i + 84 | 0;
     $arrayidx1380$i$i = $features$i$i + 88 | 0;
     $arrayidx1383$i$i = $features$i$i + 92 | 0;
     $arrayidx1386$i$i = $features$i$i + 96 | 0;
     $arraydecay1389$i$i = $st + 7652 | 0;
     $arrayidx1394$i$i = $frame_probs$i$i + 4 | 0;
     $offset$025$i = $14;
     $pcm_len$026$i = $sub4$i13;
     while (1) {
      $div7$pcm_len$0$i = ($pcm_len$026$i | 0) > ($div7$i | 0) ? $div7$i : $pcm_len$026$i;
      if (!(HEAP32[$initialized$i$i >> 2] | 0)) {
       HEAP32[$mem_fill$i$i >> 2] = 240;
       HEAP32[$initialized$i$i >> 2] = 1;
      }
      $17 = HEAP32[$count$i$i >> 2] | 0;
      $$op$i$i = 1.0 / +($17 + 1 | 0);
      $div$i$i18 = ($17 | 0) > 9 ? .10000000149011612 : $$op$i$i;
      $div17$i$i = ($17 | 0) > 24 ? .03999999910593033 : $$op$i$i;
      $cmp20$i$i = ($17 | 0) > 99;
      $cmp31$i$i = ($17 | 0) < 2;
      $19 = HEAP32[$Fs$i$i >> 2] | 0;
      L28 : do if (($19 | 0) < 48e3) {
       switch ($19 | 0) {
       case 16e3:
        break;
       default:
        {
         $len$addr$0$i$i = $div7$pcm_len$0$i;
         $offset$addr$0$i$i = $offset$025$i;
         break L28;
        }
       }
       $len$addr$0$i$i = ($div7$pcm_len$0$i * 3 | 0) / 2 | 0;
       $offset$addr$0$i$i = ($offset$025$i * 3 | 0) / 2 | 0;
      } else {
       switch ($19 | 0) {
       case 48e3:
        break;
       default:
        {
         $len$addr$0$i$i = $div7$pcm_len$0$i;
         $offset$addr$0$i$i = $offset$025$i;
         break L28;
        }
       }
       $len$addr$0$i$i = ($div7$pcm_len$0$i | 0) / 2 | 0;
       $offset$addr$0$i$i = ($offset$025$i | 0) / 2 | 0;
      } while (0);
      $20 = HEAP32[$arrayidx$i$i15 >> 2] | 0;
      $21 = HEAP32[$mem_fill$i$i >> 2] | 0;
      $sub$i$i20 = 720 - $21 | 0;
      $call$i$i = +_downmix_and_resample($downmix, $analysis_pcm, $st + 3080 + ($21 << 2) | 0, $arraydecay52$i$i, ($len$addr$0$i$i | 0) < ($sub$i$i20 | 0) ? $len$addr$0$i$i : $sub$i$i20, $offset$addr$0$i$i, $c2, $analysis_channels, $19);
      $add63$i$i = $call$i$i + +HEAPF32[$hp_ener_accum$i$i >> 2];
      HEAPF32[$hp_ener_accum$i$i >> 2] = $add63$i$i;
      $23 = HEAP32[$mem_fill$i$i >> 2] | 0;
      $add65$i$i = $23 + $len$addr$0$i$i | 0;
      if (($add65$i$i | 0) < 720) HEAP32[$mem_fill$i$i >> 2] = $add65$i$i; else {
       $24 = HEAP32[$write_pos$i$i >> 2] | 0;
       HEAP32[$write_pos$i$i >> 2] = (($24 | 0) > 98 ? -99 : 1) + $24;
       $i$018$i$i$i = 0;
       $maxval$019$i$i$i = 0.0;
       $minval$020$i$i$i = 0.0;
       do {
        $25 = +HEAPF32[$st + 3080 + ($i$018$i$i$i << 2) >> 2];
        $maxval$019$i$i$i = $maxval$019$i$i$i > $25 ? $maxval$019$i$i$i : $25;
        $minval$020$i$i$i = $minval$020$i$i$i < $25 ? $minval$020$i$i$i : $25;
        $i$018$i$i$i = $i$018$i$i$i + 1 | 0;
       } while (($i$018$i$i$i | 0) != 720);
       $sub$i$i$i = -$minval$020$i$i$i;
       $cond15$i$i$i = $maxval$019$i$i$i > $sub$i$i$i ? $maxval$019$i$i$i : $sub$i$i$i;
       $i$0836$i$i = 0;
       do {
        $26 = +HEAPF32[27968 + ($i$0836$i$i << 2) >> 2];
        HEAPF32[$in$i$i + ($i$0836$i$i << 3) >> 2] = $26 * +HEAPF32[$st + 3080 + ($i$0836$i$i << 2) >> 2];
        HEAPF32[$in$i$i + ($i$0836$i$i << 3) + 4 >> 2] = $26 * +HEAPF32[$st + 3080 + ($i$0836$i$i + 240 << 2) >> 2];
        $sub100$i$i = 480 - $i$0836$i$i + -1 | 0;
        HEAPF32[$in$i$i + ($sub100$i$i << 3) >> 2] = $26 * +HEAPF32[$st + 3080 + ($sub100$i$i << 2) >> 2];
        HEAPF32[$in$i$i + ($sub100$i$i << 3) + 4 >> 2] = $26 * +HEAPF32[$st + 3080 + (719 - $i$0836$i$i << 2) >> 2];
        $i$0836$i$i = $i$0836$i$i + 1 | 0;
       } while (($i$0836$i$i | 0) != 240);
       $arrayidx74$i$i = $st + 7792 + ($24 << 6) | 0;
       _memcpy($inmem$i$i | 0, $add$ptr122$i$i | 0, 960) | 0;
       $sub133$i$i = $len$addr$0$i$i + -720 + $23 | 0;
       HEAPF32[$hp_ener_accum$i$i >> 2] = +_downmix_and_resample($downmix, $analysis_pcm, $arrayidx135$i$i, $arraydecay52$i$i, $sub133$i$i, $offset$addr$0$i$i + 720 - $23 | 0, $c2, $analysis_channels, HEAP32[$Fs$i$i >> 2] | 0);
       HEAP32[$mem_fill$i$i >> 2] = $sub133$i$i + 240;
       do if (!($cond15$i$i$i <= $div$i)) {
        $33 = +HEAPF32[$20 + 4 >> 2];
        $34 = HEAP32[$20 >> 2] | 0;
        if (($34 | 0) > 0) {
         $$pre$i25$i = HEAP32[$20 + 44 >> 2] | 0;
         $i$020$i$i = 0;
         do {
          $x$sroa$4$0$copyload$i$i = +HEAPF32[$in$i$i + ($i$020$i$i << 3) + 4 >> 2];
          $idxprom$i$i = HEAP16[$$pre$i25$i + ($i$020$i$i << 1) >> 1] | 0;
          HEAPF32[$out$i$i + ($idxprom$i$i << 3) >> 2] = $33 * +HEAPF32[$in$i$i + ($i$020$i$i << 3) >> 2];
          HEAPF32[$out$i$i + ($idxprom$i$i << 3) + 4 >> 2] = $33 * $x$sroa$4$0$copyload$i$i;
          $i$020$i$i = $i$020$i$i + 1 | 0;
         } while (($i$020$i$i | 0) != ($34 | 0));
        }
        _opus_fft_impl($20, $out$i$i);
        $36 = +HEAPF32[$out$i$i >> 2];
        if ($36 != $36 | 0.0 != 0.0) {
         HEAP32[$arrayidx74$i$i >> 2] = 0;
         break;
        }
        $i$1835$i$i = 1;
        do {
         $37 = +HEAPF32[$out$i$i + ($i$1835$i$i << 3) >> 2];
         $sub185$i$i = 480 - $i$1835$i$i | 0;
         $38 = +HEAPF32[$out$i$i + ($sub185$i$i << 3) >> 2];
         $add188$i$i = $37 + $38;
         $39 = +HEAPF32[$out$i$i + ($i$1835$i$i << 3) + 4 >> 2];
         $40 = +HEAPF32[$out$i$i + ($sub185$i$i << 3) + 4 >> 2];
         $sub194$i$i = $39 - $40;
         $add200$i$i = $39 + $40;
         $sub206$i$i = $38 - $37;
         $mul$i$i$i28 = $add188$i$i * $add188$i$i;
         $mul1$i$i$i = $sub194$i$i * $sub194$i$i;
         do if ($mul$i$i$i28 + $mul1$i$i$i < 1.000000045813705e-18) $retval$0$i$i$i = 0.0; else if ($mul$i$i$i28 < $mul1$i$i$i) {
          $retval$0$i$i$i = ($sub194$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + -($add188$i$i * $sub194$i$i * ($mul$i$i$i28 * .43157973885536194 + $mul1$i$i$i)) / (($mul$i$i$i28 * .6784840226173401 + $mul1$i$i$i) * ($mul$i$i$i28 * .0859554186463356 + $mul1$i$i$i));
          break;
         } else {
          $mul21$i$i$i = $add188$i$i * $sub194$i$i;
          $retval$0$i$i$i = ($sub194$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + $mul21$i$i$i * ($mul$i$i$i28 + $mul1$i$i$i * .43157973885536194) / (($mul$i$i$i28 + $mul1$i$i$i * .6784840226173401) * ($mul$i$i$i28 + $mul1$i$i$i * .0859554186463356)) - ($mul21$i$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
          break;
         } while (0);
         $mul208$i$i = $retval$0$i$i$i * .15915493667125702;
         $arrayidx209$i$i = $st + 200 + ($i$1835$i$i << 2) | 0;
         $sub210$i$i = $mul208$i$i - +HEAPF32[$arrayidx209$i$i >> 2];
         $arrayidx211$i$i = $st + 1160 + ($i$1835$i$i << 2) | 0;
         $sub212$i$i = $sub210$i$i - +HEAPF32[$arrayidx211$i$i >> 2];
         $mul$i720$i$i = $add200$i$i * $add200$i$i;
         $mul1$i721$i$i = $sub206$i$i * $sub206$i$i;
         do if ($mul1$i721$i$i + $mul$i720$i$i < 1.000000045813705e-18) $retval$0$i756$i$i = 0.0; else if ($mul$i720$i$i < $mul1$i721$i$i) {
          $retval$0$i756$i$i = ($sub206$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + -($sub206$i$i * $add200$i$i * ($mul1$i721$i$i + $mul$i720$i$i * .43157973885536194)) / (($mul1$i721$i$i + $mul$i720$i$i * .6784840226173401) * ($mul1$i721$i$i + $mul$i720$i$i * .0859554186463356));
          break;
         } else {
          $mul21$i744$i$i = $sub206$i$i * $add200$i$i;
          $retval$0$i756$i$i = ($sub206$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + $mul21$i744$i$i * ($mul1$i721$i$i * .43157973885536194 + $mul$i720$i$i) / (($mul1$i721$i$i * .6784840226173401 + $mul$i720$i$i) * ($mul1$i721$i$i * .0859554186463356 + $mul$i720$i$i)) - ($mul21$i744$i$i < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
          break;
         } while (0);
         $mul214$i$i = $retval$0$i756$i$i * .15915493667125702;
         $sub215$i$i = $mul214$i$i - $mul208$i$i;
         $sub216$i$i = $sub215$i$i - $sub210$i$i;
         $sub219$i$i = $sub212$i$i - +(_lrintf($sub212$i$i) | 0);
         $47 = +Math_abs(+$sub219$i$i);
         $mul223$i$i = $sub219$i$i * $sub219$i$i;
         $sub227$i$i = $sub216$i$i - +(_lrintf($sub216$i$i) | 0);
         HEAPF32[$noisiness$i$i + ($i$1835$i$i << 2) >> 2] = $47 + +Math_abs(+$sub227$i$i);
         $mul232$i$i = $sub227$i$i * $sub227$i$i;
         $mul233$i$i = $mul232$i$i * $mul232$i$i;
         $arrayidx234$i$i = $st + 2120 + ($i$1835$i$i << 2) | 0;
         HEAPF32[$tonality$i$i + ($i$1835$i$i << 2) >> 2] = 1.0 / ((+HEAPF32[$arrayidx234$i$i >> 2] + $mul223$i$i * $mul223$i$i + $mul233$i$i * 2.0) * .25 * 62341.81640625 + 1.0) + -.014999999664723873;
         HEAPF32[$tonality2$i$i + ($i$1835$i$i << 2) >> 2] = 1.0 / ($mul233$i$i * 62341.81640625 + 1.0) + -.014999999664723873;
         HEAPF32[$arrayidx209$i$i >> 2] = $mul214$i$i;
         HEAPF32[$arrayidx211$i$i >> 2] = $sub215$i$i;
         HEAPF32[$arrayidx234$i$i >> 2] = $mul233$i$i;
         $i$1835$i$i = $i$1835$i$i + 1 | 0;
        } while (($i$1835$i$i | 0) != 240);
        $52 = +HEAPF32[$arrayidx260$phi$trans$insert$i$i >> 2];
        $i$2834$i$i = 2;
        do {
         $50 = +HEAPF32[$tonality2$i$i + ($i$2834$i$i + -1 << 2) >> 2];
         $i$2834$i$i$looptemp = $i$2834$i$i;
         $i$2834$i$i = $i$2834$i$i + 1 | 0;
         $52$looptemp = $52;
         $52 = +HEAPF32[$tonality2$i$i + ($i$2834$i$i << 2) >> 2];
         $$$i$i = $50 > $52 ? $50 : $52;
         $arrayidx296$i$i = $tonality$i$i + ($i$2834$i$i$looptemp << 2) | 0;
         $53 = +HEAPF32[$arrayidx296$i$i >> 2];
         $sub297$i$i = ($52$looptemp < $$$i$i ? $52$looptemp : $$$i$i) + -.10000000149011612;
         HEAPF32[$arrayidx296$i$i >> 2] = ($53 > $sub297$i$i ? $53 : $sub297$i$i) * .8999999761581421;
        } while (($i$2834$i$i | 0) != 239);
        $activity$i$i = $st + 7792 + ($24 << 6) + 16 | 0;
        HEAPF32[$activity$i$i >> 2] = 0.0;
        $tobool312$i$i = (HEAP32[$count$i$i >> 2] | 0) == 0;
        if ($tobool312$i$i) {
         HEAPF32[$arrayidx318$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$1$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$1$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$2$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$2$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$3$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$3$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$4$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$4$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$5$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$5$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$6$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$6$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$7$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$7$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$8$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$8$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$9$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$9$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$10$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$10$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$11$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$11$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$12$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$12$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$13$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$13$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$14$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$14$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$15$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$15$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$16$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$16$i$i >> 2] = -1.0e10;
         HEAPF32[$arrayidx318$17$i$i >> 2] = 1.0e10;
         HEAPF32[$arrayidx319$17$i$i >> 2] = -1.0e10;
        }
        $mul328$i$i = $36 * 2.0;
        $mul331$i$i = +HEAPF32[$i330$i$i >> 2] * 2.0;
        $56 = +HEAPF32[$r340$i$i >> 2];
        $57 = +HEAPF32[$r346$i$i >> 2];
        $58 = +HEAPF32[$i353$i$i >> 2];
        $59 = +HEAPF32[$i360$i$i >> 2];
        $60 = +HEAPF32[$r340$1$i$i >> 2];
        $61 = +HEAPF32[$r346$1$i$i >> 2];
        $62 = +HEAPF32[$i353$1$i$i >> 2];
        $63 = +HEAPF32[$i360$1$i$i >> 2];
        $64 = +HEAPF32[$r340$2$i$i >> 2];
        $65 = +HEAPF32[$r346$2$i$i >> 2];
        $66 = +HEAPF32[$i353$2$i$i >> 2];
        $67 = +HEAPF32[$i360$2$i$i >> 2];
        $mul373$i$i = +Math_log(+($mul328$i$i * $mul328$i$i + $mul331$i$i * $mul331$i$i + ($56 * $56 + $57 * $57 + $58 * $58 + $59 * $59) + ($60 * $60 + $61 * $61 + $62 * $62 + $63 * $63) + ($64 * $64 + $65 * $65 + $66 * $66 + $67 * $67) + 1.000000013351432e-10)) * .7213475108146667;
        HEAPF32[$band_log2$i$i >> 2] = $mul373$i$i;
        $70 = 4;
        $b$1830$i$i = 0;
        $frame_loudness$0823$i$i = 0.0;
        $frame_noisiness$0827$i$i = 0.0;
        $frame_stationarity$0825$i$i = 0.0;
        $frame_tonality$0829$i$i = 0.0;
        $max_frame_tonality$0828$i$i = 0.0;
        $relativeE$0824$i$i = 0.0;
        $slope$0826$i$i = 0.0;
        while (1) {
         $b$1830$i$i$looptemp = $b$1830$i$i;
         $b$1830$i$i = $b$1830$i$i + 1 | 0;
         $70$looptemp = $70;
         $70 = HEAP32[28928 + ($b$1830$i$i << 2) >> 2] | 0;
         if (($70$looptemp | 0) < ($70 | 0)) {
          $E379$0812$i$i = 0.0;
          $i$4815$i$i = $70$looptemp;
          $nE$0814$i$i = 0.0;
          $tE$0813$i$i = 0.0;
          while (1) {
           $71 = +HEAPF32[$out$i$i + ($i$4815$i$i << 3) >> 2];
           $sub393$i$i = 480 - $i$4815$i$i | 0;
           $72 = +HEAPF32[$out$i$i + ($sub393$i$i << 3) >> 2];
           $73 = +HEAPF32[$out$i$i + ($i$4815$i$i << 3) + 4 >> 2];
           $74 = +HEAPF32[$out$i$i + ($sub393$i$i << 3) + 4 >> 2];
           $add414$i$i = $71 * $71 + $72 * $72 + $73 * $73 + $74 * $74;
           $add415$i$i = $E379$0812$i$i + $add414$i$i;
           $75 = +HEAPF32[$tonality$i$i + ($i$4815$i$i << 2) >> 2];
           $add425$i$i = $tE$0813$i$i + $add414$i$i * ($75 < 0.0 ? 0.0 : $75);
           $add430$i$i = $nE$0814$i$i + $add414$i$i * 2.0 * (.5 - +HEAPF32[$noisiness$i$i + ($i$4815$i$i << 2) >> 2]);
           $i$4815$i$i = $i$4815$i$i + 1 | 0;
           if (($i$4815$i$i | 0) == ($70 | 0)) {
            $E379$0$lcssa$i$i = $add415$i$i;
            $nE$0$lcssa$i$i = $add430$i$i;
            $tE$0$lcssa$i$i = $add425$i$i;
            break;
           } else {
            $E379$0812$i$i = $add415$i$i;
            $nE$0814$i$i = $add430$i$i;
            $tE$0813$i$i = $add425$i$i;
           }
          }
         } else {
          $E379$0$lcssa$i$i = 0.0;
          $nE$0$lcssa$i$i = 0.0;
          $tE$0$lcssa$i$i = 0.0;
         }
         if (!($E379$0$lcssa$i$i < 1.0e9) | ($E379$0$lcssa$i$i != $E379$0$lcssa$i$i | 0.0 != 0.0)) {
          label = 64;
          break;
         }
         $77 = HEAP32[$E_count$i$i >> 2] | 0;
         HEAPF32[$st + 6044 + ($77 * 72 | 0) + ($b$1830$i$i$looptemp << 2) >> 2] = $E379$0$lcssa$i$i;
         $add444$i$i = $E379$0$lcssa$i$i + 1.0000000036274937e-15;
         $frame_noisiness$0827$i$i = $frame_noisiness$0827$i$i + $nE$0$lcssa$i$i / $add444$i$i;
         $add447$i$i = $E379$0$lcssa$i$i + 1.000000013351432e-10;
         $frame_loudness$0823$i$i = $frame_loudness$0823$i$i + +Math_sqrt(+$add447$i$i);
         $conv453$i$i = +Math_log(+$add447$i$i);
         HEAPF32[$logE$i$i + ($b$1830$i$i$looptemp << 2) >> 2] = $conv453$i$i;
         HEAPF32[$band_log2$i$i + ($b$1830$i$i << 2) >> 2] = $conv453$i$i * .7213475108146667;
         HEAPF32[$st + 6620 + ($77 * 72 | 0) + ($b$1830$i$i$looptemp << 2) >> 2] = $conv453$i$i;
         $arrayidx474$i$i = $st + 7268 + ($b$1830$i$i$looptemp << 2) | 0;
         if ($tobool312$i$i) {
          $arrayidx472$i$i = $st + 7196 + ($b$1830$i$i$looptemp << 2) | 0;
          HEAPF32[$arrayidx472$i$i >> 2] = $conv453$i$i;
          HEAPF32[$arrayidx474$i$i >> 2] = $conv453$i$i;
          $80 = $conv453$i$i;
          $81 = $conv453$i$i;
          $arrayidx480$pre$phi$i$iZ2D = $arrayidx472$i$i;
         } else {
          $arrayidx480$phi$trans$insert$i$i = $st + 7196 + ($b$1830$i$i$looptemp << 2) | 0;
          $80 = +HEAPF32[$arrayidx474$i$i >> 2];
          $81 = +HEAPF32[$arrayidx480$phi$trans$insert$i$i >> 2];
          $arrayidx480$pre$phi$i$iZ2D = $arrayidx480$phi$trans$insert$i$i;
         }
         do if ($81 + 7.5 < $80) if ($80 - $conv453$i$i > $conv453$i$i - $81) {
          $sub499$i$i = $80 + -.009999999776482582;
          HEAPF32[$arrayidx474$i$i >> 2] = $sub499$i$i;
          $82 = $sub499$i$i;
          break;
         } else {
          HEAPF32[$arrayidx480$pre$phi$i$iZ2D >> 2] = $81 + .009999999776482582;
          $82 = $80;
          break;
         } else $82 = $80; while (0);
         do if ($82 < $conv453$i$i) {
          HEAPF32[$arrayidx474$i$i >> 2] = $conv453$i$i;
          $sub517$i$i = $conv453$i$i + -15.0;
          $83 = +HEAPF32[$arrayidx480$pre$phi$i$iZ2D >> 2];
          $sub517$$i$i = $sub517$i$i > $83 ? $sub517$i$i : $83;
          HEAPF32[$arrayidx480$pre$phi$i$iZ2D >> 2] = $sub517$$i$i;
          $85 = $sub517$$i$i;
          $86 = $conv453$i$i;
         } else {
          $84 = +HEAPF32[$arrayidx480$pre$phi$i$iZ2D >> 2];
          $add545$i$i = $conv453$i$i + 15.0;
          $add545$$i$i = $add545$i$i < $82 ? $add545$i$i : $82;
          if (!($84 > $conv453$i$i)) {
           $85 = $84;
           $86 = $82;
           break;
          }
          HEAPF32[$arrayidx480$pre$phi$i$iZ2D >> 2] = $conv453$i$i;
          HEAPF32[$arrayidx474$i$i >> 2] = $add545$$i$i;
          $85 = $conv453$i$i;
          $86 = $add545$$i$i;
         } while (0);
         $87 = +HEAPF32[$st + 6044 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$i$i = +Math_sqrt(+$87) + 0.0;
         $89 = +HEAPF32[$st + 6116 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$1$i$i = $add584$i$i + +Math_sqrt(+$89);
         $91 = +HEAPF32[$st + 6188 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$2$i$i = $add584$1$i$i + +Math_sqrt(+$91);
         $93 = +HEAPF32[$st + 6260 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$3$i$i = $add584$2$i$i + +Math_sqrt(+$93);
         $95 = +HEAPF32[$st + 6332 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$4$i$i = $add584$3$i$i + +Math_sqrt(+$95);
         $97 = +HEAPF32[$st + 6404 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$5$i$i = $add584$4$i$i + +Math_sqrt(+$97);
         $99 = +HEAPF32[$st + 6476 + ($b$1830$i$i$looptemp << 2) >> 2];
         $add584$6$i$i = $add584$5$i$i + +Math_sqrt(+$99);
         $101 = +HEAPF32[$st + 6548 + ($b$1830$i$i$looptemp << 2) >> 2];
         $relativeE$0824$i$i = $relativeE$0824$i$i + ($conv453$i$i - $85) / ($86 - $85 + 9.999999747378752e-06);
         $div596$i$i = ($add584$6$i$i + +Math_sqrt(+$101)) / +Math_sqrt(+(($87 + 0.0 + $89 + $91 + $93 + $95 + $97 + $99 + $101) * 8.0 + 1.0e-15));
         $cond607$i$i = $div596$i$i > .9900000095367432 ? .9900000095367432 : $div596$i$i;
         $mul608$i$i = $cond607$i$i * $cond607$i$i;
         $mul609$i$i = $mul608$i$i * $mul608$i$i;
         $frame_stationarity$0825$i$i = $frame_stationarity$0825$i$i + $mul609$i$i;
         $div612$i$i = $tE$0$lcssa$i$i / $add444$i$i;
         $arrayidx613$i$i = $st + 5964 + ($b$1830$i$i$looptemp << 2) | 0;
         $mul614$i$i = +HEAPF32[$arrayidx613$i$i >> 2] * $mul609$i$i;
         $div612$mul614$i$i = $div612$i$i > $mul614$i$i ? $div612$i$i : $mul614$i$i;
         HEAPF32[$band_tonality$i$i + ($b$1830$i$i$looptemp << 2) >> 2] = $div612$mul614$i$i;
         $add628$i$i = $frame_tonality$0829$i$i + $div612$mul614$i$i;
         if ($b$1830$i$i$looptemp >>> 0 > 8) $frame_tonality$1$i$i = $add628$i$i - +HEAPF32[$band_tonality$i$i + ($b$1830$i$i$looptemp + -9 << 2) >> 2]; else $frame_tonality$1$i$i = $add628$i$i;
         $mul641$i$i = (+($b$1830$i$i$looptemp + -18 | 0) * .029999999329447746 + 1.0) * $frame_tonality$1$i$i;
         $max_frame_tonality$0828$i$i = $max_frame_tonality$0828$i$i > $mul641$i$i ? $max_frame_tonality$0828$i$i : $mul641$i$i;
         $slope$0826$i$i = $slope$0826$i$i + $div612$mul614$i$i * +($b$1830$i$i$looptemp + -8 | 0);
         HEAPF32[$arrayidx613$i$i >> 2] = $div612$mul614$i$i;
         if ($b$1830$i$i >>> 0 >= 18) break; else $frame_tonality$0829$i$i = $frame_tonality$1$i$i;
        }
        if ((label | 0) == 64) {
         label = 0;
         HEAP32[$arrayidx74$i$i >> 2] = 0;
         break;
        }
        HEAPF32[$leakage_from$i$i >> 2] = $mul373$i$i;
        $sub672$i$i = $mul373$i$i + -2.5;
        HEAPF32[$leakage_to$i$i >> 2] = $sub672$i$i;
        $107 = 4;
        $108 = $mul373$i$i;
        $110 = $sub672$i$i;
        $b$2810$i$i = 1;
        do {
         $107$looptemp = $107;
         $107 = HEAP32[28928 + ($b$2810$i$i << 2) >> 2] | 0;
         $div684$i$i = +($107 - $107$looptemp | 0) * 2.0 * .25;
         $add687$i$i = $108 + $div684$i$i;
         $109 = +HEAPF32[$band_log2$i$i + ($b$2810$i$i << 2) >> 2];
         $108 = $add687$i$i < $109 ? $add687$i$i : $109;
         HEAPF32[$leakage_from$i$i + ($b$2810$i$i << 2) >> 2] = $108;
         $sub702$i$i = $110 - $div684$i$i;
         $sub704$i$i = $109 + -2.5;
         $110 = $sub702$i$i > $sub704$i$i ? $sub702$i$i : $sub704$i$i;
         HEAPF32[$leakage_to$i$i + ($b$2810$i$i << 2) >> 2] = $110;
         $b$2810$i$i = $b$2810$i$i + 1 | 0;
        } while (($b$2810$i$i | 0) != 19);
        $112 = 192;
        $113 = +HEAPF32[$arrayidx733$phi$trans$insert$i$i >> 2];
        $115 = +HEAPF32[$arrayidx748$phi$trans$insert$i$i >> 2];
        $b$3809$i$i = 16;
        while (1) {
         $112$looptemp = $112;
         $112 = HEAP32[28928 + ($b$3809$i$i << 2) >> 2] | 0;
         $div731$i$i = +($112$looptemp - $112 | 0) * 2.0 * .25;
         $add734$i$i = $113 + $div731$i$i;
         $arrayidx735$i$i = $leakage_from$i$i + ($b$3809$i$i << 2) | 0;
         $114 = +HEAPF32[$arrayidx735$i$i >> 2];
         $113 = $add734$i$i < $114 ? $add734$i$i : $114;
         HEAPF32[$arrayidx735$i$i >> 2] = $113;
         $sub749$i$i = $115 - $div731$i$i;
         $arrayidx750$i$i = $leakage_to$i$i + ($b$3809$i$i << 2) | 0;
         $116 = +HEAPF32[$arrayidx750$i$i >> 2];
         $115 = $sub749$i$i > $116 ? $sub749$i$i : $116;
         HEAPF32[$arrayidx750$i$i >> 2] = $115;
         if (!$b$3809$i$i) break; else $b$3809$i$i = $b$3809$i$i + -1 | 0;
        }
        $118 = $mul373$i$i;
        $b$4808$i$i = 0;
        while (1) {
         $sub770$i$i = +HEAPF32[$leakage_to$i$i + ($b$4808$i$i << 2) >> 2] - $118;
         $sub783$i$i = $118 - (+HEAPF32[$leakage_from$i$i + ($b$4808$i$i << 2) >> 2] + 2.5);
         $conv798$i$i = ~~+Math_floor(+((($sub770$i$i < 0.0 ? 0.0 : $sub770$i$i) + ($sub783$i$i < 0.0 ? 0.0 : $sub783$i$i)) * 64.0 + .5));
         HEAP8[$st + 7792 + ($24 << 6) + 44 + $b$4808$i$i >> 0] = ($conv798$i$i | 0) < 255 ? $conv798$i$i : 255;
         $inc812$i$i = $b$4808$i$i + 1 | 0;
         if (($inc812$i$i | 0) == 19) break;
         $118 = +HEAPF32[$band_log2$i$i + ($inc812$i$i << 2) >> 2];
         $b$4808$i$i = $inc812$i$i;
        }
        $i$6805$i$i = 0;
        $spec_variability$0804$i$i = 0.0;
        do {
         $$pre864$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 20 >> 2];
         $$pre865$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 24 >> 2];
         $$pre866$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 28 >> 2];
         $$pre867$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 32 >> 2];
         $$pre868$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 36 >> 2];
         $$pre869$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 40 >> 2];
         $$pre870$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 44 >> 2];
         $$pre871$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 48 >> 2];
         $$pre872$i$i = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 52 >> 2];
         $122 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) >> 2];
         $123 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 4 >> 2];
         $124 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 8 >> 2];
         $125 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 12 >> 2];
         $126 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 16 >> 2];
         $127 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 56 >> 2];
         $128 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 60 >> 2];
         $129 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 64 >> 2];
         $130 = +HEAPF32[$st + 6620 + ($i$6805$i$i * 72 | 0) + 68 >> 2];
         $j$0802$i$i = 0;
         $mindist$0803$i$i = 999999986991104.0;
         do {
          $sub841$i$i = $122 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) >> 2];
          $sub841$1$i$i = $123 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 4 >> 2];
          $sub841$2$i$i = $124 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 8 >> 2];
          $sub841$3$i$i = $125 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 12 >> 2];
          $sub841$4$i$i = $126 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 16 >> 2];
          $sub841$5$i$i = $$pre864$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 20 >> 2];
          $sub841$6$i$i = $$pre865$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 24 >> 2];
          $sub841$7$i$i = $$pre866$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 28 >> 2];
          $sub841$8$i$i = $$pre867$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 32 >> 2];
          $sub841$9$i$i = $$pre868$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 36 >> 2];
          $sub841$10$i$i = $$pre869$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 40 >> 2];
          $sub841$11$i$i = $$pre870$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 44 >> 2];
          $sub841$12$i$i = $$pre871$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 48 >> 2];
          $sub841$13$i$i = $$pre872$i$i - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 52 >> 2];
          $sub841$14$i$i = $127 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 56 >> 2];
          $sub841$15$i$i = $128 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 60 >> 2];
          $sub841$16$i$i = $129 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 64 >> 2];
          $sub841$17$i$i = $130 - +HEAPF32[$st + 6620 + ($j$0802$i$i * 72 | 0) + 68 >> 2];
          $add843$17$i$i = $sub841$i$i * $sub841$i$i + 0.0 + $sub841$1$i$i * $sub841$1$i$i + $sub841$2$i$i * $sub841$2$i$i + $sub841$3$i$i * $sub841$3$i$i + $sub841$4$i$i * $sub841$4$i$i + $sub841$5$i$i * $sub841$5$i$i + $sub841$6$i$i * $sub841$6$i$i + $sub841$7$i$i * $sub841$7$i$i + $sub841$8$i$i * $sub841$8$i$i + $sub841$9$i$i * $sub841$9$i$i + $sub841$10$i$i * $sub841$10$i$i + $sub841$11$i$i * $sub841$11$i$i + $sub841$12$i$i * $sub841$12$i$i + $sub841$13$i$i * $sub841$13$i$i + $sub841$14$i$i * $sub841$14$i$i + $sub841$15$i$i * $sub841$15$i$i + $sub841$16$i$i * $sub841$16$i$i + $sub841$17$i$i * $sub841$17$i$i;
          $mindist$0803$i$i = ($j$0802$i$i | 0) == ($i$6805$i$i | 0) | $mindist$0803$i$i < $add843$17$i$i ? $mindist$0803$i$i : $add843$17$i$i;
          $j$0802$i$i = $j$0802$i$i + 1 | 0;
         } while (($j$0802$i$i | 0) != 8);
         $spec_variability$0804$i$i = $spec_variability$0804$i$i + $mindist$0803$i$i;
         $i$6805$i$i = $i$6805$i$i + 1 | 0;
        } while (($i$6805$i$i | 0) != 8);
        $sub936$i$i = $cmp31$i$i ? 0.0 : $cmp20$i$i ? .9900000095367432 : 1.0 - $$op$i$i;
        $150 = HEAP32[$prev_bandwidth$i$i >> 2] | 0;
        $152 = 4;
        $above_max_pitch$0794$i$i = 0.0;
        $b$6799$i$i = 0;
        $bandwidth$0797$i$i = 0;
        $bandwidth_mask$0798$i$i = 0.0;
        $below_max_pitch$0795$i$i = 0.0;
        $maxE$0796$i$i = 0.0;
        while (1) {
         $b$6799$i$i$looptemp = $b$6799$i$i;
         $b$6799$i$i = $b$6799$i$i + 1 | 0;
         $152$looptemp = $152;
         $152 = HEAP32[28928 + ($b$6799$i$i << 2) >> 2] | 0;
         if (($152 | 0) > ($152$looptemp | 0)) {
          $E883$0792$i$i = 0.0;
          $i$7793$i$i = $152$looptemp;
          while (1) {
           $153 = +HEAPF32[$out$i$i + ($i$7793$i$i << 3) >> 2];
           $sub897$i$i = 480 - $i$7793$i$i | 0;
           $154 = +HEAPF32[$out$i$i + ($sub897$i$i << 3) >> 2];
           $155 = +HEAPF32[$out$i$i + ($i$7793$i$i << 3) + 4 >> 2];
           $156 = +HEAPF32[$out$i$i + ($sub897$i$i << 3) + 4 >> 2];
           $add919$i$i = $E883$0792$i$i + ($153 * $153 + $154 * $154 + $155 * $155 + $156 * $156);
           $i$7793$i$i = $i$7793$i$i + 1 | 0;
           if (($i$7793$i$i | 0) == ($152 | 0)) {
            $E883$0$lcssa$i$i = $add919$i$i;
            break;
           } else $E883$0792$i$i = $add919$i$i;
          }
         } else $E883$0$lcssa$i$i = 0.0;
         $maxE$0796$i$i = $maxE$0796$i$i > $E883$0$lcssa$i$i ? $maxE$0796$i$i : $E883$0$lcssa$i$i;
         $cmp929$i$i = $b$6799$i$i$looptemp >>> 0 < 11;
         $above_max_pitch$0794$i$i = $cmp929$i$i ? $above_max_pitch$0794$i$i : $above_max_pitch$0794$i$i + $E883$0$lcssa$i$i;
         $below_max_pitch$0795$i$i = $cmp929$i$i ? $below_max_pitch$0795$i$i + $E883$0$lcssa$i$i : $below_max_pitch$0795$i$i;
         $arrayidx937$i$i = $st + 7340 + ($b$6799$i$i$looptemp << 2) | 0;
         $mul938$i$i = $sub936$i$i * +HEAPF32[$arrayidx937$i$i >> 2];
         $mul938$E883$0$i$i = $mul938$i$i > $E883$0$lcssa$i$i ? $mul938$i$i : $E883$0$lcssa$i$i;
         HEAPF32[$arrayidx937$i$i >> 2] = $mul938$E883$0$i$i;
         if ($E883$0$lcssa$i$i * 1.0e9 > $maxE$0796$i$i) {
          $conv966$i$i = +($152 - $152$looptemp | 0);
          $bandwidth$1$i$i = ($E883$0$lcssa$i$i > $mul878$i$i * $conv966$i$i ? 1 : ($E883$0$lcssa$i$i > $mul938$E883$0$i$i ? $E883$0$lcssa$i$i : $mul938$E883$0$i$i) > $mul964$i$i * $conv966$i$i) ? $b$6799$i$i : $bandwidth$0797$i$i;
         } else $bandwidth$1$i$i = $bandwidth$0797$i$i;
         HEAP32[$is_masked$i$i + ($b$6799$i$i$looptemp << 2) >> 2] = $E883$0$lcssa$i$i < $bandwidth_mask$0798$i$i * (($150 | 0) > ($b$6799$i$i$looptemp | 0) ? .009999999776482582 : .05000000074505806) & 1;
         $mul987$i$i = $bandwidth_mask$0798$i$i * .05000000074505806;
         $bandwidth_mask$0798$i$i = $mul987$i$i > $E883$0$lcssa$i$i ? $mul987$i$i : $E883$0$lcssa$i$i;
         if (($b$6799$i$i | 0) == 18) break; else $bandwidth$0797$i$i = $bandwidth$1$i$i;
        }
        $158 = +Math_sqrt(+($spec_variability$0804$i$i * .125 / 18.0));
        if ((HEAP32[$Fs$i$i >> 2] | 0) == 48e3) {
         $mul1004$i$i = $add63$i$i * 2.7777778450399637e-04;
         $cmp1006$i$i = ($150 | 0) == 20;
         $cond1008$i$i = $cmp1006$i$i ? 10.0 : 30.0;
         $add1009$i$i = $mul1004$i$i + $above_max_pitch$0794$i$i;
         $mul1013$i$i = $sub936$i$i * +HEAPF32[$arrayidx1012$i$i >> 2];
         $mul1013$mul1004$i$i = $mul1013$i$i > $mul1004$i$i ? $mul1013$i$i : $mul1004$i$i;
         HEAPF32[$arrayidx1012$i$i >> 2] = $mul1013$mul1004$i$i;
         if (($mul1004$i$i > $mul1013$mul1004$i$i ? $mul1004$i$i : $mul1013$mul1004$i$i) > $mul878$i$i * ($cond1008$i$i * 3.0) * 160.0) label = 87; else if ($mul1004$i$i > $mul878$i$i * $cond1008$i$i * 160.0) label = 87; else $bandwidth$2$i$i = $bandwidth$1$i$i;
         if ((label | 0) == 87) {
          label = 0;
          $bandwidth$2$i$i = 20;
         }
         HEAP32[$arrayidx1055$i$i >> 2] = $mul1004$i$i < ($cmp1006$i$i ? .009999999776482582 : .05000000074505806) * $bandwidth_mask$0798$i$i & 1;
         $above_max_pitch$2$i$i = $add1009$i$i;
         $bandwidth$3$i$i = $bandwidth$2$i$i;
        } else {
         $above_max_pitch$2$i$i = $above_max_pitch$0794$i$i;
         $bandwidth$3$i$i = $bandwidth$1$i$i;
        }
        HEAPF32[$st + 7792 + ($24 << 6) + 40 >> 2] = $above_max_pitch$2$i$i > $below_max_pitch$0795$i$i ? $below_max_pitch$0795$i$i / $above_max_pitch$2$i$i : 1.0;
        do if (($bandwidth$3$i$i | 0) == 20) $bandwidth$4$i$i = (HEAP32[$arrayidx1055$i$i >> 2] | 0) == 0 ? 20 : 18; else {
         $bandwidth$3$off$i$i = $bandwidth$3$i$i + -1 | 0;
         if ($bandwidth$3$off$i$i >>> 0 >= 18) {
          $bandwidth$4$i$i = $bandwidth$3$i$i;
          break;
         }
         $bandwidth$4$i$i = (HEAP32[$is_masked$i$i + ($bandwidth$3$off$i$i << 2) >> 2] | 0) == 0 ? $bandwidth$3$i$i : $bandwidth$3$off$i$i;
        } while (0);
        $165 = HEAP32[$count$i$i >> 2] | 0;
        $mul1092$i$i = +_llvm_log10_f64(+$frame_loudness$0823$i$i) * 20.0;
        $sub1093$i$i = +HEAPF32[$Etracker$i$i >> 2] + -.003000000026077032;
        $cond1101$i$i = $sub1093$i$i > $mul1092$i$i ? $sub1093$i$i : $mul1092$i$i;
        HEAPF32[$Etracker$i$i >> 2] = $cond1101$i$i;
        $mul1104$i$i = (1.0 - $div17$i$i) * +HEAPF32[$lowECount$i$i >> 2];
        $storemerge$i$i = $mul1092$i$i < $cond1101$i$i + -30.0 ? $div17$i$i + $mul1104$i$i : $mul1104$i$i;
        HEAPF32[$lowECount$i$i >> 2] = $storemerge$i$i;
        $$pre874$i$i = +HEAPF32[$arrayidx1124$2$phi$trans$insert$i$i >> 2];
        $$pre875$i$i = +HEAPF32[$arrayidx1124$3$phi$trans$insert$i$i >> 2];
        $$pre876$i$i = +HEAPF32[$arrayidx1124$4$phi$trans$insert$i$i >> 2];
        $$pre877$i$i = +HEAPF32[$arrayidx1124$5$phi$trans$insert$i$i >> 2];
        $$pre878$i$i = +HEAPF32[$arrayidx1124$6$phi$trans$insert$i$i >> 2];
        $$pre879$i$i = +HEAPF32[$arrayidx1124$7$phi$trans$insert$i$i >> 2];
        $$pre880$i$i = +HEAPF32[$arrayidx1124$8$phi$trans$insert$i$i >> 2];
        $$pre881$i$i = +HEAPF32[$arrayidx1124$9$phi$trans$insert$i$i >> 2];
        $$pre882$i$i = +HEAPF32[$arrayidx1124$10$phi$trans$insert$i$i >> 2];
        $$pre883$i$i = +HEAPF32[$arrayidx1124$11$phi$trans$insert$i$i >> 2];
        $$pre884$i$i = +HEAPF32[$arrayidx1124$12$phi$trans$insert$i$i >> 2];
        $$pre885$i$i = +HEAPF32[$arrayidx1124$13$phi$trans$insert$i$i >> 2];
        $169 = +HEAPF32[$logE$i$i >> 2];
        $170 = +HEAPF32[$arrayidx1124$1$i$i >> 2];
        $171 = +HEAPF32[$arrayidx1124$14$i$i >> 2];
        $172 = +HEAPF32[$arrayidx1124$15$i$i >> 2];
        $add1126$15$i$i = $169 * .25 + 0.0 + $170 * .25 + $$pre874$i$i * .25 + $$pre875$i$i * .25 + $$pre876$i$i * .25 + $$pre877$i$i * .25 + $$pre878$i$i * .25 + $$pre879$i$i * .25 + $$pre880$i$i * .25 + $$pre881$i$i * .25 + $$pre882$i$i * .25 + $$pre883$i$i * .25 + $$pre884$i$i * .25 + $$pre885$i$i * .25 + $171 * .25 + $172 * .25;
        $add1126$15$i$1$i = $169 * .3518509864807129 + 0.0 + $170 * .3383300006389618 + $$pre874$i$i * .31180599331855774 + $$pre875$i$i * .2732999920845032 + $$pre876$i$i * .22429199516773224 + $$pre877$i$i * .1666640043258667 + $$pre878$i$i * .10263100266456604 + $$pre879$i$i * .03465399891138077 + $$pre880$i$i * -.03465399891138077 + $$pre881$i$i * -.10263100266456604 + $$pre882$i$i * -.1666640043258667 + $$pre883$i$i * -.22429199516773224 + $$pre884$i$i * -.2732999920845032 + $$pre885$i$i * -.31180599331855774 + $171 * -.3383300006389618 + $172 * -.3518509864807129;
        $add1126$15$i$2$i = $169 * .34676000475883484 + 0.0 + $170 * .2939690053462982 + $$pre874$i$i * .19642400741577148 + $$pre875$i$i * .06897500157356262 + $$pre876$i$i * -.06897500157356262 + $$pre877$i$i * -.19642400741577148 + $$pre878$i$i * -.2939690053462982 + $$pre879$i$i * -.34676000475883484 + $$pre880$i$i * -.34676000475883484 + $$pre881$i$i * -.2939690053462982 + $$pre882$i$i * -.19642400741577148 + $$pre883$i$i * -.06897500157356262 + $$pre884$i$i * .06897500157356262 + $$pre885$i$i * .19642400741577148 + $171 * .2939690053462982 + $172 * .34676000475883484;
        $add1126$15$i$3$i = $169 * .3383300006389618 + 0.0 + $170 * .22429199516773224 + $$pre874$i$i * .03465399891138077 + $$pre875$i$i * -.1666640043258667 + $$pre876$i$i * -.31180599331855774 + $$pre877$i$i * -.3518509864807129 + $$pre878$i$i * -.2732999920845032 + $$pre879$i$i * -.10263100266456604 + $$pre880$i$i * .10263100266456604 + $$pre881$i$i * .2732999920845032 + $$pre882$i$i * .3518509864807129 + $$pre883$i$i * .31180599331855774 + $$pre884$i$i * .1666640043258667 + $$pre885$i$i * -.03465399891138077 + $171 * -.22429199516773224 + $172 * -.3383300006389618;
        $add1151$i$i = +HEAPF32[$arrayidx319$i$i >> 2] + +HEAPF32[$arrayidx318$i$i >> 2];
        $add1151$1$i$i = +HEAPF32[$arrayidx319$1$i$i >> 2] + +HEAPF32[$arrayidx318$1$i$i >> 2];
        $add1151$2$i$i = +HEAPF32[$arrayidx319$2$i$i >> 2] + +HEAPF32[$arrayidx318$2$i$i >> 2];
        $add1151$3$i$i = +HEAPF32[$arrayidx319$3$i$i >> 2] + +HEAPF32[$arrayidx318$3$i$i >> 2];
        $add1151$4$i$i = +HEAPF32[$arrayidx319$4$i$i >> 2] + +HEAPF32[$arrayidx318$4$i$i >> 2];
        $add1151$5$i$i = +HEAPF32[$arrayidx319$5$i$i >> 2] + +HEAPF32[$arrayidx318$5$i$i >> 2];
        $add1151$6$i$i = +HEAPF32[$arrayidx319$6$i$i >> 2] + +HEAPF32[$arrayidx318$6$i$i >> 2];
        $add1151$7$i$i = +HEAPF32[$arrayidx319$7$i$i >> 2] + +HEAPF32[$arrayidx318$7$i$i >> 2];
        $add1151$8$i$i = +HEAPF32[$arrayidx319$8$i$i >> 2] + +HEAPF32[$arrayidx318$8$i$i >> 2];
        $add1151$9$i$i = +HEAPF32[$arrayidx319$9$i$i >> 2] + +HEAPF32[$arrayidx318$9$i$i >> 2];
        $add1151$10$i$i = +HEAPF32[$arrayidx319$10$i$i >> 2] + +HEAPF32[$arrayidx318$10$i$i >> 2];
        $add1151$11$i$i = +HEAPF32[$arrayidx319$11$i$i >> 2] + +HEAPF32[$arrayidx318$11$i$i >> 2];
        $add1151$12$i$i = +HEAPF32[$arrayidx319$12$i$i >> 2] + +HEAPF32[$arrayidx318$12$i$i >> 2];
        $add1151$13$i$i = +HEAPF32[$arrayidx319$13$i$i >> 2] + +HEAPF32[$arrayidx318$13$i$i >> 2];
        $add1151$14$i$i = +HEAPF32[$arrayidx319$14$i$i >> 2] + +HEAPF32[$arrayidx318$14$i$i >> 2];
        $add1151$15$i$i = +HEAPF32[$arrayidx319$15$i$i >> 2] + +HEAPF32[$arrayidx318$15$i$i >> 2];
        $spec$select718$i$i = ($165 | 0) < 3 ? 20 : $bandwidth$4$i$i;
        $div1168$i$i = $frame_noisiness$0827$i$i / 18.0;
        HEAPF32[$activity$i$i >> 2] = $div1168$i$i + (1.0 - $div1168$i$i) * (($165 | 0) < 10 ? .5 : $relativeE$0824$i$i / 18.0);
        $div1173$i$i = $max_frame_tonality$0828$i$i / 9.0;
        $mul1174$i$i = +HEAPF32[$prev_tonality$i$i >> 2] * .800000011920929;
        $div1173$mul1174$i$i = $div1173$i$i > $mul1174$i$i ? $div1173$i$i : $mul1174$i$i;
        HEAPF32[$prev_tonality$i$i >> 2] = $div1173$mul1174$i$i;
        $tonality_slope$i$i = $st + 7792 + ($24 << 6) + 8 | 0;
        HEAPF32[$tonality_slope$i$i >> 2] = $slope$0826$i$i * .015625;
        HEAP32[$E_count$i$i >> 2] = ((HEAP32[$E_count$i$i >> 2] | 0) + 1 | 0) % 8 | 0;
        $cond1197$i$i = ($165 | 0) < 9999 ? $165 + 1 | 0 : 1e4;
        HEAP32[$count$i$i >> 2] = $cond1197$i$i;
        $tonality1199$i$i = $st + 7792 + ($24 << 6) + 4 | 0;
        HEAPF32[$tonality1199$i$i >> 2] = $div1173$mul1174$i$i;
        $203 = +HEAPF32[$arrayidx1206$i$i >> 2];
        $add1207$i$i = $add1126$15$i$i + $203;
        $204 = +HEAPF32[$arrayidx1210$i$i >> 2];
        $205 = +HEAPF32[$arrayidx1213$i$i >> 2];
        $add1214$i$i = $204 + $205;
        $206 = +HEAPF32[$arrayidx1219$i$i >> 2];
        $207 = +HEAPF32[$arrayidx1222$i$i >> 2];
        $sub1224$i$i = $206 * .6969299912452698 + ($add1214$i$i * .49195000529289246 - $add1207$i$i * .12298999726772308) - $207 * 1.4349000453948975;
        HEAPF32[$features$i$i >> 2] = $sub1224$i$i;
        $208 = +HEAPF32[$arrayidx1206$1$i$i >> 2];
        $add1207$1$i$i = $add1126$15$i$1$i + $208;
        $209 = +HEAPF32[$arrayidx1210$1$i$i >> 2];
        $210 = +HEAPF32[$arrayidx1213$1$i$i >> 2];
        $add1214$1$i$i = $209 + $210;
        $211 = +HEAPF32[$arrayidx1219$1$i$i >> 2];
        $212 = +HEAPF32[$arrayidx1222$1$i$i >> 2];
        $sub1224$1$i$i = $211 * .6969299912452698 + ($add1214$1$i$i * .49195000529289246 - $add1207$1$i$i * .12298999726772308) - $212 * 1.4349000453948975;
        HEAPF32[$arrayidx1225$1$i$i >> 2] = $sub1224$1$i$i;
        $213 = +HEAPF32[$arrayidx1206$2$i$i >> 2];
        $add1207$2$i$i = $add1126$15$i$2$i + $213;
        $214 = +HEAPF32[$arrayidx1210$2$i$i >> 2];
        $215 = +HEAPF32[$arrayidx1213$2$i$i >> 2];
        $add1214$2$i$i = $214 + $215;
        $216 = +HEAPF32[$arrayidx1219$2$i$i >> 2];
        $217 = +HEAPF32[$arrayidx1222$2$i$i >> 2];
        $sub1224$2$i$i = $216 * .6969299912452698 + ($add1214$2$i$i * .49195000529289246 - $add1207$2$i$i * .12298999726772308) - $217 * 1.4349000453948975;
        HEAPF32[$arrayidx1225$2$i$i >> 2] = $sub1224$2$i$i;
        $218 = +HEAPF32[$arrayidx1206$3$i$i >> 2];
        $219 = +HEAPF32[$arrayidx1210$3$i$i >> 2];
        $220 = +HEAPF32[$arrayidx1213$3$i$i >> 2];
        $221 = +HEAPF32[$arrayidx1219$3$i$i >> 2];
        $222 = +HEAPF32[$arrayidx1222$3$i$i >> 2];
        $sub1224$3$i$i = $221 * .6969299912452698 + (($219 + $220) * .49195000529289246 - ($add1126$15$i$3$i + $218) * .12298999726772308) - $222 * 1.4349000453948975;
        HEAPF32[$arrayidx1225$3$i$i >> 2] = $sub1224$3$i$i;
        $sub1233$i$i = 1.0 - $div$i$i18;
        HEAPF32[$arrayidx1222$i$i >> 2] = $div$i$i18 * $add1126$15$i$i + $sub1233$i$i * $207;
        HEAPF32[$arrayidx1222$1$i$i >> 2] = $div$i$i18 * $add1126$15$i$1$i + $sub1233$i$i * $212;
        HEAPF32[$arrayidx1222$2$i$i >> 2] = $div$i$i18 * $add1126$15$i$2$i + $sub1233$i$i * $217;
        HEAPF32[$arrayidx1222$3$i$i >> 2] = $div$i$i18 * $add1126$15$i$3$i + $sub1233$i$i * $222;
        $add1262$i$i = ($add1126$15$i$i - $203) * .6324599981307983 + ($204 - $205) * .31622999906539917;
        HEAPF32[$arrayidx1264$i$i >> 2] = $add1262$i$i;
        $add1262$1$i$i = ($add1126$15$i$1$i - $208) * .6324599981307983 + ($209 - $210) * .31622999906539917;
        HEAPF32[$arrayidx1264$1$i$i >> 2] = $add1262$1$i$i;
        $add1262$2$i$i = ($add1126$15$i$2$i - $213) * .6324599981307983 + ($214 - $215) * .31622999906539917;
        HEAPF32[$arrayidx1264$2$i$i >> 2] = $add1262$2$i$i;
        $add1262$3$i$i = ($add1126$15$i$3$i - $218) * .6324599981307983 + ($219 - $220) * .31622999906539917;
        HEAPF32[$arrayidx1264$3$i$i >> 2] = $add1262$3$i$i;
        $sub1290$i$i = $add1207$i$i * .5345199704170227 - $add1214$i$i * .26725998520851135 - $206 * .5345199704170227;
        HEAPF32[$arrayidx1292$i$i >> 2] = $sub1290$i$i;
        HEAPF32[$arrayidx1292$1$i$i >> 2] = $add1207$1$i$i * .5345199704170227 - $add1214$1$i$i * .26725998520851135 - $211 * .5345199704170227;
        HEAPF32[$arrayidx1292$2$i$i >> 2] = $add1207$2$i$i * .5345199704170227 - $add1214$2$i$i * .26725998520851135 - $216 * .5345199704170227;
        $223 = +HEAPF32[$arrayidx1305$i$i >> 2];
        if (($cond1197$i$i | 0) > 5) {
         $add1311$i$i = $sub1224$i$i * ($div$i$i18 * $sub1224$i$i) + $sub1233$i$i * $223;
         HEAPF32[$arrayidx1305$i$i >> 2] = $add1311$i$i;
         $add1311$1$i$i = $sub1224$1$i$i * ($div$i$i18 * $sub1224$1$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$1$i$i >> 2];
         HEAPF32[$arrayidx1305$1$i$i >> 2] = $add1311$1$i$i;
         $add1311$2$i$i = $sub1224$2$i$i * ($div$i$i18 * $sub1224$2$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$2$i$i >> 2];
         HEAPF32[$arrayidx1305$2$i$i >> 2] = $add1311$2$i$i;
         $add1311$3$i$i = $sub1224$3$i$i * ($div$i$i18 * $sub1224$3$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$3$i$i >> 2];
         HEAPF32[$arrayidx1305$3$i$i >> 2] = $add1311$3$i$i;
         $add1311$4$i$i = $add1262$i$i * ($div$i$i18 * $add1262$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$4$i$i >> 2];
         HEAPF32[$arrayidx1305$4$i$i >> 2] = $add1311$4$i$i;
         $add1311$5$i$i = $add1262$1$i$i * ($div$i$i18 * $add1262$1$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$5$i$i >> 2];
         HEAPF32[$arrayidx1305$5$i$i >> 2] = $add1311$5$i$i;
         $add1311$6$i$i = $add1262$2$i$i * ($div$i$i18 * $add1262$2$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$6$i$i >> 2];
         HEAPF32[$arrayidx1305$6$i$i >> 2] = $add1311$6$i$i;
         HEAPF32[$arrayidx1305$7$i$i >> 2] = $add1262$3$i$i * ($div$i$i18 * $add1262$3$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$7$i$i >> 2];
         $add1311$8$i$i = $sub1290$i$i * ($div$i$i18 * $sub1290$i$i) + $sub1233$i$i * +HEAPF32[$arrayidx1305$8$i$i >> 2];
         HEAPF32[$arrayidx1305$8$i$i >> 2] = $add1311$8$i$i;
         $244 = $add1311$i$i;
         $246 = $add1311$1$i$i;
         $248 = $add1311$2$i$i;
         $250 = $add1311$3$i$i;
         $252 = $add1311$4$i$i;
         $254 = $add1311$5$i$i;
         $256 = $add1311$6$i$i;
         $258 = $add1311$8$i$i;
        } else {
         $244 = $223;
         $246 = +HEAPF32[$arrayidx1305$1$i$i >> 2];
         $248 = +HEAPF32[$arrayidx1305$2$i$i >> 2];
         $250 = +HEAPF32[$arrayidx1305$3$i$i >> 2];
         $252 = +HEAPF32[$arrayidx1305$4$i$i >> 2];
         $254 = +HEAPF32[$arrayidx1305$5$i$i >> 2];
         $256 = +HEAPF32[$arrayidx1305$6$i$i >> 2];
         $258 = +HEAPF32[$arrayidx1305$8$i$i >> 2];
        }
        HEAPF32[$features$i$i >> 2] = $add1126$15$i$i - ($add1151$i$i * .125 + 0.0 + $add1151$1$i$i * .125 + $add1151$2$i$i * .125 + $add1151$3$i$i * .125 + $add1151$4$i$i * .125 + $add1151$5$i$i * .125 + $add1151$6$i$i * .125 + $add1151$7$i$i * .125 + $add1151$8$i$i * .125 + $add1151$9$i$i * .125 + $add1151$10$i$i * .125 + $add1151$11$i$i * .125 + $add1151$12$i$i * .125 + $add1151$13$i$i * .125 + $add1151$14$i$i * .125 + $add1151$15$i$i * .125);
        HEAPF32[$arrayidx1225$1$i$i >> 2] = $add1126$15$i$1$i - ($add1151$i$i * .17592549324035645 + 0.0 + $add1151$1$i$i * .1691650003194809 + $add1151$2$i$i * .15590299665927887 + $add1151$3$i$i * .1366499960422516 + $add1151$4$i$i * .11214599758386612 + $add1151$5$i$i * .08333200216293335 + $add1151$6$i$i * .05131550133228302 + $add1151$7$i$i * .017326999455690384 + $add1151$8$i$i * -.017326999455690384 + $add1151$9$i$i * -.05131550133228302 + $add1151$10$i$i * -.08333200216293335 + $add1151$11$i$i * -.11214599758386612 + $add1151$12$i$i * -.1366499960422516 + $add1151$13$i$i * -.15590299665927887 + $add1151$14$i$i * -.1691650003194809 + $add1151$15$i$i * -.17592549324035645);
        HEAPF32[$arrayidx1225$2$i$i >> 2] = $add1126$15$i$2$i - ($add1151$i$i * .17338000237941742 + 0.0 + $add1151$1$i$i * .1469845026731491 + $add1151$2$i$i * .09821200370788574 + $add1151$3$i$i * .03448750078678131 + $add1151$4$i$i * -.03448750078678131 + $add1151$5$i$i * -.09821200370788574 + $add1151$6$i$i * -.1469845026731491 + $add1151$7$i$i * -.17338000237941742 + $add1151$8$i$i * -.17338000237941742 + $add1151$9$i$i * -.1469845026731491 + $add1151$10$i$i * -.09821200370788574 + $add1151$11$i$i * -.03448750078678131 + $add1151$12$i$i * .03448750078678131 + $add1151$13$i$i * .09821200370788574 + $add1151$14$i$i * .1469845026731491 + $add1151$15$i$i * .17338000237941742);
        HEAPF32[$arrayidx1225$3$i$i >> 2] = $add1126$15$i$3$i - ($add1151$i$i * .1691650003194809 + 0.0 + $add1151$1$i$i * .11214599758386612 + $add1151$2$i$i * .017326999455690384 + $add1151$3$i$i * -.08333200216293335 + $add1151$4$i$i * -.15590299665927887 + $add1151$5$i$i * -.17592549324035645 + $add1151$6$i$i * -.1366499960422516 + $add1151$7$i$i * -.05131550133228302 + $add1151$8$i$i * .05131550133228302 + $add1151$9$i$i * .1366499960422516 + $add1151$10$i$i * .17592549324035645 + $add1151$11$i$i * .15590299665927887 + $add1151$12$i$i * .08333200216293335 + $add1151$13$i$i * -.017326999455690384 + $add1151$14$i$i * -.11214599758386612 + $add1151$15$i$i * -.1691650003194809);
        HEAPF32[$arrayidx1206$i$i >> 2] = $205;
        HEAPF32[$arrayidx1213$i$i >> 2] = $206;
        HEAPF32[$arrayidx1219$i$i >> 2] = $204;
        HEAPF32[$arrayidx1210$i$i >> 2] = $add1126$15$i$i;
        HEAPF32[$arrayidx1206$1$i$i >> 2] = $210;
        HEAPF32[$arrayidx1213$1$i$i >> 2] = $211;
        HEAPF32[$arrayidx1219$1$i$i >> 2] = $209;
        HEAPF32[$arrayidx1210$1$i$i >> 2] = $add1126$15$i$1$i;
        HEAPF32[$arrayidx1206$2$i$i >> 2] = $215;
        HEAPF32[$arrayidx1213$2$i$i >> 2] = $216;
        HEAPF32[$arrayidx1219$2$i$i >> 2] = $214;
        HEAPF32[$arrayidx1210$2$i$i >> 2] = $add1126$15$i$2$i;
        HEAPF32[$arrayidx1206$3$i$i >> 2] = $220;
        HEAPF32[$arrayidx1213$3$i$i >> 2] = $221;
        HEAPF32[$arrayidx1219$3$i$i >> 2] = $219;
        HEAPF32[$arrayidx1210$3$i$i >> 2] = $add1126$15$i$3$i;
        HEAP32[$arrayidx1338$4$i$i >> 2] = HEAP32[$arrayidx1335$4$i$i >> 2];
        HEAP32[$arrayidx1335$4$i$i >> 2] = HEAP32[$arrayidx1341$4$i$i >> 2];
        HEAP32[$arrayidx1341$4$i$i >> 2] = HEAP32[$arrayidx1346$4$i$i >> 2];
        HEAPF32[$arrayidx1346$4$i$i >> 2] = $169 * .3266409933567047 + 0.0 + $170 * .13529899716377258 + $$pre874$i$i * -.13529899716377258 + $$pre875$i$i * -.3266409933567047 + $$pre876$i$i * -.3266409933567047 + $$pre877$i$i * -.13529899716377258 + $$pre878$i$i * .13529899716377258 + $$pre879$i$i * .3266409933567047 + $$pre880$i$i * .3266409933567047 + $$pre881$i$i * .13529899716377258 + $$pre882$i$i * -.13529899716377258 + $$pre883$i$i * -.3266409933567047 + $$pre884$i$i * -.3266409933567047 + $$pre885$i$i * -.13529899716377258 + $171 * .13529899716377258 + $172 * .3266409933567047;
        HEAP32[$arrayidx1338$5$i$i >> 2] = HEAP32[$arrayidx1335$5$i$i >> 2];
        HEAP32[$arrayidx1335$5$i$i >> 2] = HEAP32[$arrayidx1341$5$i$i >> 2];
        HEAP32[$arrayidx1341$5$i$i >> 2] = HEAP32[$arrayidx1346$5$i$i >> 2];
        HEAPF32[$arrayidx1346$5$i$i >> 2] = $169 * .31180599331855774 + 0.0 + $170 * .03465399891138077 + $$pre874$i$i * -.2732999920845032 + $$pre875$i$i * -.3383300006389618 + $$pre876$i$i * -.10263100266456604 + $$pre877$i$i * .22429199516773224 + $$pre878$i$i * .3518509864807129 + $$pre879$i$i * .1666640043258667 + $$pre880$i$i * -.1666640043258667 + $$pre881$i$i * -.3518509864807129 + $$pre882$i$i * -.22429199516773224 + $$pre883$i$i * .10263100266456604 + $$pre884$i$i * .3383300006389618 + $$pre885$i$i * .2732999920845032 + $171 * -.03465399891138077 + $172 * -.31180599331855774;
        HEAP32[$arrayidx1338$6$i$i >> 2] = HEAP32[$arrayidx1335$6$i$i >> 2];
        HEAP32[$arrayidx1335$6$i$i >> 2] = HEAP32[$arrayidx1341$6$i$i >> 2];
        HEAP32[$arrayidx1341$6$i$i >> 2] = HEAP32[$arrayidx1346$6$i$i >> 2];
        HEAPF32[$arrayidx1346$6$i$i >> 2] = $169 * .2939690053462982 + 0.0 + $170 * -.06897500157356262 + $$pre874$i$i * -.34676000475883484 + $$pre875$i$i * -.19642400741577148 + $$pre876$i$i * .19642400741577148 + $$pre877$i$i * .34676000475883484 + $$pre878$i$i * .06897500157356262 + $$pre879$i$i * -.2939690053462982 + $$pre880$i$i * -.2939690053462982 + $$pre881$i$i * .06897500157356262 + $$pre882$i$i * .34676000475883484 + $$pre883$i$i * .19642400741577148 + $$pre884$i$i * -.19642400741577148 + $$pre885$i$i * -.34676000475883484 + $171 * -.06897500157356262 + $172 * .2939690053462982;
        HEAP32[$arrayidx1338$7$i$i >> 2] = HEAP32[$arrayidx1335$7$i$i >> 2];
        HEAP32[$arrayidx1335$7$i$i >> 2] = HEAP32[$arrayidx1341$7$i$i >> 2];
        HEAP32[$arrayidx1341$7$i$i >> 2] = HEAP32[$arrayidx1346$7$i$i >> 2];
        HEAPF32[$arrayidx1346$7$i$i >> 2] = $169 * .2732999920845032 + 0.0 + $170 * -.1666640043258667 + $$pre874$i$i * -.3383300006389618 + $$pre875$i$i * .03465399891138077 + $$pre876$i$i * .3518509864807129 + $$pre877$i$i * .10263100266456604 + $$pre878$i$i * -.31180599331855774 + $$pre879$i$i * -.22429199516773224 + $$pre880$i$i * .22429199516773224 + $$pre881$i$i * .31180599331855774 + $$pre882$i$i * -.10263100266456604 + $$pre883$i$i * -.3518509864807129 + $$pre884$i$i * -.03465399891138077 + $$pre885$i$i * .3383300006389618 + $171 * .1666640043258667 + $172 * -.2732999920845032;
        HEAPF32[$arrayidx1367$i$i >> 2] = +Math_sqrt(+$244) + -5.6849470138549805;
        HEAPF32[$arrayidx1367$1$i$i >> 2] = +Math_sqrt(+$246) + -3.475287914276123;
        HEAPF32[$arrayidx1367$2$i$i >> 2] = +Math_sqrt(+$248) + -1.7706340551376343;
        HEAPF32[$arrayidx1367$3$i$i >> 2] = +Math_sqrt(+$250) + -1.599784016609192;
        HEAPF32[$arrayidx1367$4$i$i >> 2] = +Math_sqrt(+$252) + -3.7732150554656982;
        HEAPF32[$arrayidx1367$5$i$i >> 2] = +Math_sqrt(+$254) + -2.1633129119873047;
        HEAPF32[$arrayidx1367$6$i$i >> 2] = +Math_sqrt(+$256) + -1.260756015777588;
        HEAPF32[$arrayidx1367$8$i$i >> 2] = +Math_sqrt(+$258) + -1.9187949895858765;
        HEAPF32[$arrayidx1367$7$i$i >> 2] = $158 + -.7799999713897705;
        HEAPF32[$arrayidx1375$i$i >> 2] = +HEAPF32[$tonality1199$i$i >> 2] + -.15472300350666046;
        HEAPF32[$arrayidx1378$i$i >> 2] = +HEAPF32[$activity$i$i >> 2] + -.7246429920196533;
        HEAPF32[$arrayidx1380$i$i >> 2] = $frame_stationarity$0825$i$i / 18.0 + -.7437170147895813;
        HEAPF32[$arrayidx1383$i$i >> 2] = +HEAPF32[$tonality_slope$i$i >> 2] + .06921599805355072;
        HEAPF32[$arrayidx1386$i$i >> 2] = $storemerge$i$i + -.06792999804019928;
        _compute_dense(44108, $layer_out$i$i, $features$i$i);
        HEAPF32[$z$i$i >> 2] = -42.0;
        HEAPF32[$z$i$i + 4 >> 2] = 20.0;
        HEAPF32[$z$i$i + 8 >> 2] = 16.0;
        HEAPF32[$z$i$i + 12 >> 2] = 0.0;
        HEAPF32[$z$i$i + 16 >> 2] = 105.0;
        HEAPF32[$z$i$i + 20 >> 2] = 60.0;
        HEAPF32[$z$i$i + 24 >> 2] = 1.0;
        HEAPF32[$z$i$i + 28 >> 2] = -97.0;
        HEAPF32[$z$i$i + 32 >> 2] = 24.0;
        HEAPF32[$z$i$i + 36 >> 2] = 60.0;
        HEAPF32[$z$i$i + 40 >> 2] = 18.0;
        HEAPF32[$z$i$i + 44 >> 2] = 13.0;
        HEAPF32[$z$i$i + 48 >> 2] = 62.0;
        HEAPF32[$z$i$i + 52 >> 2] = 25.0;
        HEAPF32[$z$i$i + 56 >> 2] = 127.0;
        HEAPF32[$z$i$i + 60 >> 2] = 34.0;
        HEAPF32[$z$i$i + 64 >> 2] = 79.0;
        HEAPF32[$z$i$i + 68 >> 2] = 55.0;
        HEAPF32[$z$i$i + 72 >> 2] = 118.0;
        HEAPF32[$z$i$i + 76 >> 2] = 127.0;
        HEAPF32[$z$i$i + 80 >> 2] = 95.0;
        HEAPF32[$z$i$i + 84 >> 2] = 31.0;
        HEAPF32[$z$i$i + 88 >> 2] = -4.0;
        HEAPF32[$z$i$i + 92 >> 2] = 87.0;
        $i$012$us$i$i$i = 0;
        do {
         $arrayidx7$us$i$i$i = $z$i$i + ($i$012$us$i$i$i << 2) | 0;
         $265 = +HEAPF32[$arrayidx7$us$i$i$i >> 2];
         $j$010$us$i$i$i = 0;
         do {
          $265 = $265 + +HEAPF32[$layer_out$i$i + ($j$010$us$i$i$i << 2) >> 2] * +(HEAP8[30736 + (($j$010$us$i$i$i * 72 | 0) + $i$012$us$i$i$i) >> 0] | 0);
          $j$010$us$i$i$i = $j$010$us$i$i$i + 1 | 0;
         } while (($j$010$us$i$i$i | 0) != 32);
         HEAPF32[$arrayidx7$us$i$i$i >> 2] = $265;
         $i$012$us$i$i$i = $i$012$us$i$i$i + 1 | 0;
        } while (($i$012$us$i$i$i | 0) != 24);
        $i$012$us$i210$i$i = 0;
        do {
         $arrayidx7$us$i211$i$i = $z$i$i + ($i$012$us$i210$i$i << 2) | 0;
         $268 = +HEAPF32[$arrayidx7$us$i211$i$i >> 2];
         $j$010$us$i214$i$i = 0;
         do {
          $268 = $268 + +HEAPF32[$st + 7652 + ($j$010$us$i214$i$i << 2) >> 2] * +(HEAP8[33040 + (($j$010$us$i214$i$i * 72 | 0) + $i$012$us$i210$i$i) >> 0] | 0);
          $j$010$us$i214$i$i = $j$010$us$i214$i$i + 1 | 0;
         } while (($j$010$us$i214$i$i | 0) != 24);
         HEAPF32[$arrayidx7$us$i211$i$i >> 2] = $268;
         $i$012$us$i210$i$i = $i$012$us$i210$i$i + 1 | 0;
        } while (($i$012$us$i210$i$i | 0) != 24);
        $i$1242$i$i = 0;
        do {
         $arrayidx7$i$i = $z$i$i + ($i$1242$i$i << 2) | 0;
         $mul$i177$i$i = +HEAPF32[$arrayidx7$i$i >> 2] * .0078125 * .5;
         do if ($mul$i177$i$i < 8.0) {
          if (!($mul$i177$i$i > -8.0)) {
           $retval$0$i$i205$i$i = 0.0;
           break;
          }
          if ($mul$i177$i$i != $mul$i177$i$i | 0.0 != 0.0) {
           $retval$0$i$i205$i$i = .5;
           break;
          }
          $cmp7$i$i183$i$i = $mul$i177$i$i < 0.0;
          $x$addr$0$i$i185$i$i = $cmp7$i$i183$i$i ? -$mul$i177$i$i : $mul$i177$i$i;
          $conv10$i$i189$i$i = ~~+Math_floor(+($x$addr$0$i$i185$i$i * 25.0 + .5));
          $sub13$i$i192$i$i = $x$addr$0$i$i185$i$i - +($conv10$i$i189$i$i | 0) * .03999999910593033;
          $271 = +HEAPF32[29008 + ($conv10$i$i189$i$i << 2) >> 2];
          $retval$0$i$i205$i$i = ($cmp7$i$i183$i$i ? -1.0 : 1.0) * ($271 + (1.0 - $sub13$i$i192$i$i * $271) * ($sub13$i$i192$i$i * (1.0 - $271 * $271))) * .5 + .5;
         } else $retval$0$i$i205$i$i = 1.0; while (0);
         HEAPF32[$arrayidx7$i$i >> 2] = $retval$0$i$i205$i$i;
         $i$1242$i$i = $i$1242$i$i + 1 | 0;
        } while (($i$1242$i$i | 0) != 24);
        $i$2240$i$i = 0;
        do {
         HEAPF32[$r$i29$i + ($i$2240$i$i << 2) >> 2] = +(HEAP8[30656 + ($i$2240$i$i + 24) >> 0] | 0);
         $i$2240$i$i = $i$2240$i$i + 1 | 0;
        } while (($i$2240$i$i | 0) != 24);
        $i$012$us$i158$i$i = 0;
        do {
         $arrayidx7$us$i159$i$i = $r$i29$i + ($i$012$us$i158$i$i << 2) | 0;
         $275 = +HEAPF32[$arrayidx7$us$i159$i$i >> 2];
         $j$010$us$i162$i$i = 0;
         do {
          $275 = $275 + +HEAPF32[$layer_out$i$i + ($j$010$us$i162$i$i << 2) >> 2] * +(HEAP8[30760 + (($j$010$us$i162$i$i * 72 | 0) + $i$012$us$i158$i$i) >> 0] | 0);
          $j$010$us$i162$i$i = $j$010$us$i162$i$i + 1 | 0;
         } while (($j$010$us$i162$i$i | 0) != 32);
         HEAPF32[$arrayidx7$us$i159$i$i >> 2] = $275;
         $i$012$us$i158$i$i = $i$012$us$i158$i$i + 1 | 0;
        } while (($i$012$us$i158$i$i | 0) != 24);
        $i$012$us$i135$i$i = 0;
        do {
         $arrayidx7$us$i136$i$i = $r$i29$i + ($i$012$us$i135$i$i << 2) | 0;
         $278 = +HEAPF32[$arrayidx7$us$i136$i$i >> 2];
         $j$010$us$i139$i$i = 0;
         do {
          $278 = $278 + +HEAPF32[$st + 7652 + ($j$010$us$i139$i$i << 2) >> 2] * +(HEAP8[33064 + (($j$010$us$i139$i$i * 72 | 0) + $i$012$us$i135$i$i) >> 0] | 0);
          $j$010$us$i139$i$i = $j$010$us$i139$i$i + 1 | 0;
         } while (($j$010$us$i139$i$i | 0) != 24);
         HEAPF32[$arrayidx7$us$i136$i$i >> 2] = $278;
         $i$012$us$i135$i$i = $i$012$us$i135$i$i + 1 | 0;
        } while (($i$012$us$i135$i$i | 0) != 24);
        $i$3238$i$i = 0;
        do {
         $arrayidx34$i$i = $r$i29$i + ($i$3238$i$i << 2) | 0;
         $mul$i131$i$i = +HEAPF32[$arrayidx34$i$i >> 2] * .0078125 * .5;
         do if ($mul$i131$i$i < 8.0) {
          if (!($mul$i131$i$i > -8.0)) {
           $retval$0$i$i$i$i = 0.0;
           break;
          }
          if ($mul$i131$i$i != $mul$i131$i$i | 0.0 != 0.0) {
           $retval$0$i$i$i$i = .5;
           break;
          }
          $cmp7$i$i$i$i = $mul$i131$i$i < 0.0;
          $x$addr$0$i$i$i$i = $cmp7$i$i$i$i ? -$mul$i131$i$i : $mul$i131$i$i;
          $conv10$i$i$i$i = ~~+Math_floor(+($x$addr$0$i$i$i$i * 25.0 + .5));
          $sub13$i$i$i$i = $x$addr$0$i$i$i$i - +($conv10$i$i$i$i | 0) * .03999999910593033;
          $281 = +HEAPF32[29008 + ($conv10$i$i$i$i << 2) >> 2];
          $retval$0$i$i$i$i = ($cmp7$i$i$i$i ? -1.0 : 1.0) * ($281 + (1.0 - $sub13$i$i$i$i * $281) * ($sub13$i$i$i$i * (1.0 - $281 * $281))) * .5 + .5;
         } else $retval$0$i$i$i$i = 1.0; while (0);
         HEAPF32[$arrayidx34$i$i >> 2] = $retval$0$i$i$i$i;
         $i$3238$i$i = $i$3238$i$i + 1 | 0;
        } while (($i$3238$i$i | 0) != 24);
        $i$4236$i$i = 0;
        do {
         HEAPF32[$h$i$i + ($i$4236$i$i << 2) >> 2] = +(HEAP8[30656 + ($i$4236$i$i + 48) >> 0] | 0);
         $i$4236$i$i = $i$4236$i$i + 1 | 0;
        } while (($i$4236$i$i | 0) != 24);
        $i$5234$i$i = 0;
        do {
         HEAPF32[$vararg_buffer + ($i$5234$i$i << 2) >> 2] = +HEAPF32[$st + 7652 + ($i$5234$i$i << 2) >> 2] * +HEAPF32[$r$i29$i + ($i$5234$i$i << 2) >> 2];
         $i$5234$i$i = $i$5234$i$i + 1 | 0;
        } while (($i$5234$i$i | 0) != 24);
        $i$012$us$i112$i$i = 0;
        do {
         $arrayidx7$us$i113$i$i = $h$i$i + ($i$012$us$i112$i$i << 2) | 0;
         $287 = +HEAPF32[$arrayidx7$us$i113$i$i >> 2];
         $j$010$us$i116$i$i = 0;
         do {
          $287 = $287 + +HEAPF32[$layer_out$i$i + ($j$010$us$i116$i$i << 2) >> 2] * +(HEAP8[30784 + (($j$010$us$i116$i$i * 72 | 0) + $i$012$us$i112$i$i) >> 0] | 0);
          $j$010$us$i116$i$i = $j$010$us$i116$i$i + 1 | 0;
         } while (($j$010$us$i116$i$i | 0) != 32);
         HEAPF32[$arrayidx7$us$i113$i$i >> 2] = $287;
         $i$012$us$i112$i$i = $i$012$us$i112$i$i + 1 | 0;
        } while (($i$012$us$i112$i$i | 0) != 24);
        $i$012$us$i89$i$i = 0;
        do {
         $arrayidx7$us$i90$i$i = $h$i$i + ($i$012$us$i89$i$i << 2) | 0;
         $290 = +HEAPF32[$arrayidx7$us$i90$i$i >> 2];
         $j$010$us$i93$i$i = 0;
         do {
          $290 = $290 + +HEAPF32[$vararg_buffer + ($j$010$us$i93$i$i << 2) >> 2] * +(HEAP8[33088 + (($j$010$us$i93$i$i * 72 | 0) + $i$012$us$i89$i$i) >> 0] | 0);
          $j$010$us$i93$i$i = $j$010$us$i93$i$i + 1 | 0;
         } while (($j$010$us$i93$i$i | 0) != 24);
         HEAPF32[$arrayidx7$us$i90$i$i >> 2] = $290;
         $i$012$us$i89$i$i = $i$012$us$i89$i$i + 1 | 0;
        } while (($i$012$us$i89$i$i | 0) != 24);
        $i$6232$i$i = 0;
        do {
         $291 = +HEAPF32[$z$i$i + ($i$6232$i$i << 2) >> 2];
         $mul80$i$i = $291 * +HEAPF32[$st + 7652 + ($i$6232$i$i << 2) >> 2];
         $sub$i39$i = 1.0 - $291;
         $arrayidx82$i$i = $h$i$i + ($i$6232$i$i << 2) | 0;
         $mul83$i$i = +HEAPF32[$arrayidx82$i$i >> 2] * .0078125;
         do if ($mul83$i$i < 8.0) {
          if (!($mul83$i$i > -8.0)) {
           $retval$0$i$i51$i = -1.0;
           break;
          }
          if ($mul83$i$i != $mul83$i$i | 0.0 != 0.0) {
           $retval$0$i$i51$i = 0.0;
           break;
          }
          $cmp7$i$i$i = $mul83$i$i < 0.0;
          $x$addr$0$i$i$i = $cmp7$i$i$i ? -$mul83$i$i : $mul83$i$i;
          $conv10$i$i$i = ~~+Math_floor(+($x$addr$0$i$i$i * 25.0 + .5));
          $sub13$i$i$i = $x$addr$0$i$i$i - +($conv10$i$i$i | 0) * .03999999910593033;
          $295 = +HEAPF32[29008 + ($conv10$i$i$i << 2) >> 2];
          $retval$0$i$i51$i = ($cmp7$i$i$i ? -1.0 : 1.0) * ($295 + (1.0 - $sub13$i$i$i * $295) * ($sub13$i$i$i * (1.0 - $295 * $295)));
         } else $retval$0$i$i51$i = 1.0; while (0);
         HEAPF32[$arrayidx82$i$i >> 2] = $mul80$i$i + $sub$i39$i * $retval$0$i$i51$i;
         $i$6232$i$i = $i$6232$i$i + 1 | 0;
        } while (($i$6232$i$i | 0) != 24);
        dest = $arraydecay1389$i$i;
        src = $h$i$i;
        stop = dest + 96 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        _compute_dense(44128, $frame_probs$i$i, $arraydecay1389$i$i);
        HEAP32[$st + 7792 + ($24 << 6) + 36 >> 2] = HEAP32[$arrayidx1394$i$i >> 2];
        HEAP32[$st + 7792 + ($24 << 6) + 20 >> 2] = HEAP32[$frame_probs$i$i >> 2];
        HEAP32[$st + 7792 + ($24 << 6) + 32 >> 2] = $spec$select718$i$i;
        HEAP32[$prev_bandwidth$i$i >> 2] = $spec$select718$i$i;
        HEAPF32[$st + 7792 + ($24 << 6) + 12 >> 2] = $div1168$i$i;
        HEAP32[$arrayidx74$i$i >> 2] = 1;
       } else {
        $32 = HEAP32[$write_pos$i$i >> 2] | 0;
        dest = $arrayidx74$i$i;
        src = $st + 7792 + ((($32 | 0) < 2 ? 98 : -2) + $32 << 6) | 0;
        stop = dest + 64 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
       } while (0);
      }
      $pcm_len$026$i = $pcm_len$026$i - $div7$i | 0;
      if (($pcm_len$026$i | 0) <= 0) break; else $offset$025$i = $offset$025$i + $div7$i | 0;
     }
     $$pre328 = HEAP32[$read_pos >> 2] | 0;
     $$pre329 = HEAP32[$read_subframe >> 2] | 0;
    } else {
     $$pre328 = $11;
     $$pre329 = $12;
    }
    HEAP32[$analysis_offset$i >> 2] = $div$sub$i - $frame_size;
    $299 = $$pre328;
    $301 = $$pre329;
   }
   $298 = HEAP32[$st + 7632 >> 2] | 0;
   $sub$i5$i = $298 - $299 | 0;
   $spec$select$i$i = ($sub$i5$i | 0) < 0 ? $sub$i5$i + 100 | 0 : $sub$i5$i;
   $300 = HEAP32[$st + 196 >> 2] | 0;
   $add3$i$i = $301 + (($frame_size | 0) / (($300 | 0) / 400 | 0 | 0) | 0) | 0;
   HEAP32[$read_subframe >> 2] = $add3$i$i;
   if (($add3$i$i | 0) > 7) {
    $302 = ~$add3$i$i;
    $305 = $add3$i$i + (($302 | 0) > -16 ? $302 : -16) + 8 | 0;
    $311 = $299 + ($305 >>> 3) + 1 | 0;
    HEAP32[$read_subframe >> 2] = $add3$i$i + -8 - ($305 & -8);
    HEAP32[$read_pos >> 2] = $311;
    $312 = $311;
   } else $312 = $299;
   if (($312 | 0) > 99) HEAP32[$read_pos >> 2] = $312 + -100;
   if ((($300 | 0) / 50 | 0 | 0) < ($frame_size | 0)) {
    $inc21$i$i = $299 + 1 | 0;
    $pos$0$i$i = ($298 | 0) == ($299 | 0) ? $299 : ($inc21$i$i | 0) == 100 ? 0 : $inc21$i$i;
   } else $pos$0$i$i = $299;
   $spec$select195$i$i = $pos$0$i$i + ((($pos$0$i$i | 0) == ($298 | 0)) << 31 >> 31) | 0;
   $pos$2$i$i = ($spec$select195$i$i | 0) < 0 ? 99 : $spec$select195$i$i;
   dest = $analysis_info;
   src = $st + 7792 + ($pos$2$i$i << 6) | 0;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $313 = HEAP32[$analysis_info >> 2] | 0;
   if ($313 | 0) {
    $tonality$i15$i = $analysis_info + 4 | 0;
    $314 = +HEAPF32[$tonality$i15$i >> 2];
    $bandwidth$i$i = $analysis_info + 32 | 0;
    $inc39$i$i = $pos$2$i$i + 1 | 0;
    $spec$store$select1$i$i = ($inc39$i$i | 0) == 100 ? 0 : $inc39$i$i;
    if (($spec$store$select1$i$i | 0) == ($298 | 0)) {
     $bandwidth_span$0$lcssa$i$i = 6;
     $tonality_avg$0$lcssa$i$i = $314;
     $tonality_count$0$lcssa$i$i = 1.0;
     $tonality_max$0$lcssa$i$i = $314;
    } else {
     $315 = +HEAPF32[$st + 7792 + ($spec$store$select1$i$i << 6) + 4 >> 2];
     $tonality_max$0$$i$i = $314 > $315 ? $314 : $315;
     $add57$i$i = $314 + $315;
     $316 = HEAP32[$bandwidth$i$i >> 2] | 0;
     $317 = HEAP32[$st + 7792 + ($spec$store$select1$i$i << 6) + 32 >> 2] | 0;
     $cond70$i$i = ($316 | 0) > ($317 | 0) ? $316 : $317;
     HEAP32[$bandwidth$i$i >> 2] = $cond70$i$i;
     $inc39$1$i$i = $spec$store$select1$i$i + 1 | 0;
     $spec$store$select1$1$i$i = ($inc39$1$i$i | 0) == 100 ? 0 : $inc39$1$i$i;
     if (($spec$store$select1$1$i$i | 0) == ($298 | 0)) {
      $bandwidth_span$0$lcssa$i$i = 5;
      $tonality_avg$0$lcssa$i$i = $add57$i$i;
      $tonality_count$0$lcssa$i$i = 2.0;
      $tonality_max$0$lcssa$i$i = $tonality_max$0$$i$i;
     } else {
      $326 = +HEAPF32[$st + 7792 + ($spec$store$select1$1$i$i << 6) + 4 >> 2];
      $tonality_max$0$$1$i$i = $tonality_max$0$$i$i > $326 ? $tonality_max$0$$i$i : $326;
      $add57$1$i$i = $add57$i$i + $326;
      $327 = HEAP32[$st + 7792 + ($spec$store$select1$1$i$i << 6) + 32 >> 2] | 0;
      $cond70$1$i$i = ($cond70$i$i | 0) > ($327 | 0) ? $cond70$i$i : $327;
      HEAP32[$bandwidth$i$i >> 2] = $cond70$1$i$i;
      $inc39$2$i$i = $spec$store$select1$1$i$i + 1 | 0;
      $spec$store$select1$2$i$i = ($inc39$2$i$i | 0) == 100 ? 0 : $inc39$2$i$i;
      if (($spec$store$select1$2$i$i | 0) == ($298 | 0)) {
       $bandwidth_span$0$lcssa$i$i = 4;
       $tonality_avg$0$lcssa$i$i = $add57$1$i$i;
       $tonality_count$0$lcssa$i$i = 3.0;
       $tonality_max$0$lcssa$i$i = $tonality_max$0$$1$i$i;
      } else {
       $328 = +HEAPF32[$st + 7792 + ($spec$store$select1$2$i$i << 6) + 4 >> 2];
       $329 = HEAP32[$st + 7792 + ($spec$store$select1$2$i$i << 6) + 32 >> 2] | 0;
       HEAP32[$bandwidth$i$i >> 2] = ($cond70$1$i$i | 0) > ($329 | 0) ? $cond70$1$i$i : $329;
       $bandwidth_span$0$lcssa$i$i = 3;
       $tonality_avg$0$lcssa$i$i = $add57$1$i$i + $328;
       $tonality_count$0$lcssa$i$i = 4.0;
       $tonality_max$0$lcssa$i$i = $tonality_max$0$$1$i$i > $328 ? $tonality_max$0$$1$i$i : $328;
      }
     }
    }
    $i$1232$i$i = 0;
    $pos$4233$i$i = $pos$2$i$i;
    do {
     $pos$4233$i$i = ($pos$4233$i$i | 0) < 1 ? 99 : $pos$4233$i$i + -1 | 0;
     if (($pos$4233$i$i | 0) == ($298 | 0)) break;
     $318 = HEAP32[$bandwidth$i$i >> 2] | 0;
     $319 = HEAP32[$st + 7792 + ($pos$4233$i$i << 6) + 32 >> 2] | 0;
     HEAP32[$bandwidth$i$i >> 2] = ($318 | 0) > ($319 | 0) ? $318 : $319;
     $i$1232$i$i = $i$1232$i$i + 1 | 0;
    } while ($i$1232$i$i >>> 0 < $bandwidth_span$0$lcssa$i$i >>> 0);
    $div102$i$i = $tonality_avg$0$lcssa$i$i / $tonality_count$0$lcssa$i$i;
    $sub103$i$i = $tonality_max$0$lcssa$i$i + -.20000000298023224;
    HEAPF32[$tonality$i15$i >> 2] = $div102$i$i > $sub103$i$i ? $div102$i$i : $sub103$i$i;
    if (($spec$select$i$i | 0) > 15) {
     $spec$select196$i$i = (($pos$2$i$i | 0) > 94 ? -95 : 5) + $pos$2$i$i | 0;
     $inc149213$pre$phi$i$iZ2D = $spec$select196$i$i + 1 | 0;
     $mpos$1$i$i = $spec$select196$i$i;
     $vpos$0$i$i = (($pos$2$i$i | 0) > 98 ? -99 : 1) + $pos$2$i$i | 0;
    } else {
     $inc149213$pre$phi$i$iZ2D = $inc39$i$i;
     $mpos$1$i$i = $pos$2$i$i;
     $vpos$0$i$i = $pos$2$i$i;
    }
    $320 = +HEAPF32[$st + 7792 + ($vpos$0$i$i << 6) + 36 >> 2];
    $cond137$i$i = $320 < .10000000149011612 ? .10000000149011612 : $320;
    $mul146$i$i = +HEAPF32[$st + 7792 + ($mpos$1$i$i << 6) + 20 >> 2] * $cond137$i$i;
    $spec$store$select5215$i$i = ($inc149213$pre$phi$i$iZ2D | 0) == 100 ? 0 : $inc149213$pre$phi$i$iZ2D;
    L245 : do if (($spec$store$select5215$i$i | 0) == ($298 | 0)) {
     $prob_avg$0$lcssa$i$i = $mul146$i$i;
     $prob_count$0$lcssa$i$i = $cond137$i$i;
     $prob_max$0$lcssa$i$i = 0.0;
     $prob_min$0$lcssa$i$i = 1.0;
    } else {
     $prob_avg$0217$i$i = $mul146$i$i;
     $prob_count$0218$i$i = $cond137$i$i;
     $prob_max$0220$i$i = 0.0;
     $prob_min$0219$i$i = 1.0;
     $spec$store$select5222$i$i = $spec$store$select5215$i$i;
     $vpos$1221$i$i = $vpos$0$i$i;
     while (1) {
      $inc159$i$i = $vpos$1221$i$i + 1 | 0;
      $vpos$1221$i$i = ($inc159$i$i | 0) == 100 ? 0 : $inc159$i$i;
      if (($vpos$1221$i$i | 0) == ($298 | 0)) {
       $prob_avg$0$lcssa$i$i = $prob_avg$0217$i$i;
       $prob_count$0$lcssa$i$i = $prob_count$0218$i$i;
       $prob_max$0$lcssa$i$i = $prob_max$0220$i$i;
       $prob_min$0$lcssa$i$i = $prob_min$0219$i$i;
       break L245;
      }
      $322 = +HEAPF32[$st + 7792 + ($vpos$1221$i$i << 6) + 36 >> 2];
      $mul173$i$i = ($320 - $322) * 10.0;
      $div175$i$i = ($prob_avg$0217$i$i - $mul173$i$i) / $prob_count$0218$i$i;
      $div175$prob_min$0$i$i = $div175$i$i < $prob_min$0219$i$i ? $div175$i$i : $prob_min$0219$i$i;
      $div189$i$i = ($prob_avg$0217$i$i + $mul173$i$i) / $prob_count$0218$i$i;
      $cond199$i$i = $div189$i$i > $prob_max$0220$i$i ? $div189$i$i : $prob_max$0220$i$i;
      $cond205$i$i = $322 < .10000000149011612 ? .10000000149011612 : $322;
      $add206$i$i = $prob_count$0218$i$i + $cond205$i$i;
      $add217$i$i = $prob_avg$0217$i$i + +HEAPF32[$st + 7792 + ($spec$store$select5222$i$i << 6) + 20 >> 2] * $cond205$i$i;
      $inc149$i$i = $spec$store$select5222$i$i + 1 | 0;
      $spec$store$select5222$i$i = ($inc149$i$i | 0) == 100 ? 0 : $inc149$i$i;
      if (($spec$store$select5222$i$i | 0) == ($298 | 0)) {
       $prob_avg$0$lcssa$i$i = $add217$i$i;
       $prob_count$0$lcssa$i$i = $add206$i$i;
       $prob_max$0$lcssa$i$i = $cond199$i$i;
       $prob_min$0$lcssa$i$i = $div175$prob_min$0$i$i;
       break;
      } else {
       $prob_avg$0217$i$i = $add217$i$i;
       $prob_count$0218$i$i = $add206$i$i;
       $prob_max$0220$i$i = $cond199$i$i;
       $prob_min$0219$i$i = $div175$prob_min$0$i$i;
      }
     }
    } while (0);
    $div219$i$i = $prob_avg$0$lcssa$i$i / $prob_count$0$lcssa$i$i;
    HEAPF32[$analysis_info + 20 >> 2] = $div219$i$i;
    $div219$prob_min$1$i$i = $div219$i$i < $prob_min$0$lcssa$i$i ? $div219$i$i : $prob_min$0$lcssa$i$i;
    $cond236$i$i = $div219$i$i > $prob_max$0$lcssa$i$i ? $div219$i$i : $prob_max$0$lcssa$i$i;
    $cond242$i$i = $div219$prob_min$1$i$i > 0.0 ? $div219$prob_min$1$i$i : 0.0;
    $cond248$i$i = $cond236$i$i < 1.0 ? $cond236$i$i : 1.0;
    if (($spec$select$i$i | 0) < 10) {
     $324 = HEAP32[$st + 7624 >> 2] | 0;
     if (($324 | 0) > 1) {
      $spec$select197$i$i = ($324 | 0) < 16 ? $324 + -1 | 0 : 15;
      $i$2208$i$i = 0;
      $pmax$0211$i$i = $cond248$i$i;
      $pmin$0210$i$i = $cond242$i$i;
      $pos$5209$i$i = $pos$2$i$i;
      while (1) {
       $pos$5209$i$i = ($pos$5209$i$i | 0) < 1 ? 99 : $pos$5209$i$i + -1 | 0;
       $325 = +HEAPF32[$st + 7792 + ($pos$5209$i$i << 6) + 20 >> 2];
       $pmin$0$$i$i = $pmin$0210$i$i < $325 ? $pmin$0210$i$i : $325;
       $cond293$i$i = $pmax$0211$i$i > $325 ? $pmax$0211$i$i : $325;
       $i$2208$i$i = $i$2208$i$i + 1 | 0;
       if (($i$2208$i$i | 0) >= ($spec$select197$i$i | 0)) {
        $pmax$0$lcssa$i$i = $cond293$i$i;
        $pmin$0$lcssa$i$i = $pmin$0$$i$i;
        break;
       } else {
        $pmax$0211$i$i = $cond293$i$i;
        $pmin$0210$i$i = $pmin$0$$i$i;
       }
      }
     } else {
      $pmax$0$lcssa$i$i = $cond248$i$i;
      $pmin$0$lcssa$i$i = $cond242$i$i;
     }
     $mul297$i$i = $320 * .10000000149011612;
     $sub298$i$i = $pmin$0$lcssa$i$i - $mul297$i$i;
     $add308$i$i = $mul297$i$i + $pmax$0$lcssa$i$i;
     $sub319$i$i = 1.0 - +($spec$select$i$i | 0) * .10000000149011612;
     $prob_max$2$i$i = $cond248$i$i + $sub319$i$i * (($add308$i$i > 1.0 ? 1.0 : $add308$i$i) - $cond248$i$i);
     $prob_min$2$i$i = $cond242$i$i + $sub319$i$i * (($sub298$i$i < 0.0 ? 0.0 : $sub298$i$i) - $cond242$i$i);
    } else {
     $prob_max$2$i$i = $cond248$i$i;
     $prob_min$2$i$i = $cond242$i$i;
    }
    HEAPF32[$analysis_info + 24 >> 2] = $prob_min$2$i$i;
    HEAPF32[$analysis_info + 28 >> 2] = $prob_max$2$i$i;
   }
   if ($cmp$i) if (+HEAPF32[$analysis_info + 36 >> 2] > .10000000149011612) {
    $peak_signal_energy = $st + 18128 | 0;
    $mul32 = +HEAPF32[$peak_signal_energy >> 2] * .9990000128746033;
    $mul$i987 = Math_imul(HEAP32[$channels >> 2] | 0, $frame_size) | 0;
    $cmp6$i$i = ($mul$i987 | 0) > 0;
    if ($cmp6$i$i) {
     $i$07$i$i = 0;
     $xy$08$i$i = 0.0;
     while (1) {
      $333 = +HEAPF32[$pcm + ($i$07$i$i << 2) >> 2];
      $add$i$i = $xy$08$i$i + $333 * $333;
      $i$07$i$i = $i$07$i$i + 1 | 0;
      if (($i$07$i$i | 0) == ($mul$i987 | 0)) {
       $xy$0$lcssa$i$i = $add$i$i;
       break;
      } else $xy$08$i$i = $add$i$i;
     }
    } else $xy$0$lcssa$i$i = 0.0;
    $conv$i993 = +($mul$i987 | 0);
    if ($mul32 > $xy$0$lcssa$i$i / $conv$i993) $cond44 = $mul32; else {
     if ($cmp6$i$i) {
      $i$07$i$i999 = 0;
      $xy$08$i$i998 = 0.0;
      while (1) {
       $334 = +HEAPF32[$pcm + ($i$07$i$i999 << 2) >> 2];
       $add$i$i1002 = $xy$08$i$i998 + $334 * $334;
       $i$07$i$i999 = $i$07$i$i999 + 1 | 0;
       if (($i$07$i$i999 | 0) == ($mul$i987 | 0)) {
        $xy$0$lcssa$i$i1006 = $add$i$i1002;
        break;
       } else $xy$08$i$i998 = $add$i$i1002;
      }
     } else $xy$0$lcssa$i$i1006 = 0.0;
     $cond44 = $xy$0$lcssa$i$i1006 / $conv$i993;
    }
    HEAPF32[$peak_signal_energy >> 2] = $cond44;
    $723 = $313;
    $analysis_read_pos_bak$01462 = $11;
    $analysis_read_subframe_bak$01464 = $12;
    label = 188;
   } else {
    $723 = $313;
    $analysis_read_pos_bak$01462 = $11;
    $analysis_read_subframe_bak$01464 = $12;
    label = 188;
   } else {
    $336 = $313;
    $analysis_read_pos_bak$01461 = $11;
    $analysis_read_subframe_bak$01463 = $12;
    $is_silence$01465 = 1;
    $tobool541467 = 0;
   }
  } else label = 185;
 } else label = 185;
 if ((label | 0) == 185) if (!(HEAP32[$st + 7648 >> 2] | 0)) {
  $723 = 0;
  $analysis_read_pos_bak$01462 = -1;
  $analysis_read_subframe_bak$01464 = -1;
  label = 188;
 } else {
  _memset($st + 200 | 0, 0, 13992) | 0;
  $723 = 0;
  $analysis_read_pos_bak$01462 = -1;
  $analysis_read_subframe_bak$01464 = -1;
  label = 188;
 }
 if ((label | 0) == 188) {
  HEAP32[$st + 140 >> 2] = -1;
  $336 = $723;
  $analysis_read_pos_bak$01461 = $analysis_read_pos_bak$01462;
  $analysis_read_subframe_bak$01463 = $analysis_read_subframe_bak$01464;
  $is_silence$01465 = 0;
  $tobool541467 = 1;
 }
 $detected_bandwidth = $st + 18120 | 0;
 HEAP32[$detected_bandwidth >> 2] = 0;
 if ($336 | 0) {
  if ((HEAP32[$st + 124 >> 2] | 0) == -1e3) {
   switch (HEAP32[$st + 14228 >> 2] | 0) {
   case 0:
    {
     $music_prob_max$sink = $analysis_info + 20 | 0;
     break;
    }
   case 1002:
    {
     $music_prob_max$sink = $analysis_info + 28 | 0;
     break;
    }
   default:
    $music_prob_max$sink = $analysis_info + 24 | 0;
   }
   HEAP32[$st + 140 >> 2] = ~~+Math_floor(+((1.0 - +HEAPF32[$music_prob_max$sink >> 2]) * 100.0 + .5));
  }
  $341 = HEAP32[$analysis_info + 32 >> 2] | 0;
  if (($341 | 0) < 13) $$sink = 1101; else if (($341 | 0) < 15) $$sink = 1102; else if (($341 | 0) < 17) $$sink = 1103; else $$sink = ($341 | 0) < 19 ? 1104 : 1105;
  HEAP32[$detected_bandwidth >> 2] = $$sink;
 }
 $channels101 = $st + 112 | 0;
 if ((HEAP32[$channels101 >> 2] | 0) == 2) if ((HEAP32[$st + 120 >> 2] | 0) == 1) $stereo_width$0 = 0.0; else {
  $div$i41 = (HEAP32[$st + 144 >> 2] | 0) / ($frame_size | 0) | 0;
  $sub$i45 = 1.0 - 25.0 / +((($div$i41 | 0) > 50 ? $div$i41 : 50) | 0);
  $sub2$i46 = $frame_size + -3 | 0;
  if (($frame_size | 0) > 3) {
   $i$0124$i = 0;
   $xx$0127$i = 0.0;
   $xy$0126$i = 0.0;
   $yy$0125$i = 0.0;
   do {
    $mul$i47 = $i$0124$i << 1;
    $346 = +HEAPF32[$pcm + ($mul$i47 << 2) >> 2];
    $347 = +HEAPF32[$pcm + (($mul$i47 | 1) << 2) >> 2];
    $348 = +HEAPF32[$pcm + (($mul$i47 | 2) << 2) >> 2];
    $349 = +HEAPF32[$pcm + (($mul$i47 | 3) << 2) >> 2];
    $350 = +HEAPF32[$pcm + (($mul$i47 | 4) << 2) >> 2];
    $351 = +HEAPF32[$pcm + (($mul$i47 | 5) << 2) >> 2];
    $352 = +HEAPF32[$pcm + (($mul$i47 | 6) << 2) >> 2];
    $353 = +HEAPF32[$pcm + (($mul$i47 | 7) << 2) >> 2];
    $xx$0127$i = $xx$0127$i + ($346 * $346 + $348 * $348 + $350 * $350 + $352 * $352);
    $xy$0126$i = $xy$0126$i + ($346 * $347 + $348 * $349 + $350 * $351 + $352 * $353);
    $yy$0125$i = $yy$0125$i + ($347 * $347 + $349 * $349 + $351 * $351 + $353 * $353);
    $i$0124$i = $i$0124$i + 4 | 0;
   } while (($i$0124$i | 0) < ($sub2$i46 | 0));
   if ($xx$0127$i < 1.0e9) {
    $xx$0$lcssa133$i = $xx$0127$i;
    $xy$0$lcssa132$i = $xy$0126$i;
    $yy$0$lcssa131$i = $yy$0125$i;
    label = 207;
   } else label = 208;
  } else {
   $xx$0$lcssa133$i = 0.0;
   $xy$0$lcssa132$i = 0.0;
   $yy$0$lcssa131$i = 0.0;
   label = 207;
  }
  if ((label | 0) == 207) if ($yy$0$lcssa131$i != $yy$0$lcssa131$i | 0.0 != 0.0 | (!($yy$0$lcssa131$i < 1.0e9) | ($xx$0$lcssa133$i != $xx$0$lcssa133$i | 0.0 != 0.0))) label = 208; else {
   $xx$1$i = $xx$0$lcssa133$i;
   $xy$1$i = $xy$0$lcssa132$i;
   $yy$1$i = $yy$0$lcssa131$i;
  }
  if ((label | 0) == 208) {
   $xx$1$i = 0.0;
   $xy$1$i = 0.0;
   $yy$1$i = 0.0;
  }
  $XX$i = $st + 14260 | 0;
  $354 = +HEAPF32[$XX$i >> 2];
  $add63$i = $354 + $sub$i45 * ($xx$1$i - $354);
  $XY$i = $st + 14264 | 0;
  $355 = +HEAPF32[$XY$i >> 2];
  $add67$i71 = $355 + $sub$i45 * ($xy$1$i - $355);
  $YY$i = $st + 14268 | 0;
  $356 = +HEAPF32[$YY$i >> 2];
  $add71$i = $356 + $sub$i45 * ($yy$1$i - $356);
  $cond79$i = $add63$i < 0.0 ? 0.0 : $add63$i;
  HEAPF32[$XX$i >> 2] = $cond79$i;
  $cond88$i = $add67$i71 < 0.0 ? 0.0 : $add67$i71;
  HEAPF32[$XY$i >> 2] = $cond88$i;
  $cond97$i = $add71$i < 0.0 ? 0.0 : $add71$i;
  HEAPF32[$YY$i >> 2] = $cond97$i;
  if (($cond79$i > $cond97$i ? $cond79$i : $cond97$i) > 7.999999797903001e-04) {
   $357 = +Math_sqrt(+$cond79$i);
   $358 = +Math_sqrt(+$cond97$i);
   $359 = +Math_sqrt(+$357);
   $360 = +Math_sqrt(+$358);
   $mul123$i = $357 * $358;
   $$mul123$i = $cond88$i < $mul123$i ? $cond88$i : $mul123$i;
   HEAPF32[$XY$i >> 2] = $$mul123$i;
   $div136$i = $$mul123$i / ($mul123$i + 1.0000000036274937e-15);
   $mul148$i = +Math_abs(+($359 - $360)) / ($359 + 1.0000000036274937e-15 + $360) * +Math_sqrt(+(1.0 - $div136$i * $div136$i));
   $smoothed_width$i = $st + 14272 | 0;
   $363 = +HEAPF32[$smoothed_width$i >> 2];
   $conv150$i = +($div$i41 | 0);
   $add153$i = $363 + ($mul148$i - $363) / $conv150$i;
   HEAPF32[$smoothed_width$i >> 2] = $add153$i;
   $max_follower$i = $st + 14276 | 0;
   $sub156$i = +HEAPF32[$max_follower$i >> 2] - .019999999552965164 / $conv150$i;
   $cond168$i = $sub156$i > $add153$i ? $sub156$i : $add153$i;
   HEAPF32[$max_follower$i >> 2] = $cond168$i;
   $365 = $cond168$i;
  } else $365 = +HEAPF32[$st + 14276 >> 2];
  $mul172$i = $365 * 20.0;
  $stereo_width$0 = $mul172$i > 1.0 ? 1.0 : $mul172$i;
 } else $stereo_width$0 = 0.0;
 if (!$frame_size) $frame_size$addr$0$i = (HEAP32[$st + 144 >> 2] | 0) / 400 | 0; else $frame_size$addr$0$i = $frame_size;
 $367 = HEAP32[$st + 164 >> 2] | 0;
 switch ($367 | 0) {
 case -1e3:
  {
   $Fs2$i = $st + 144 | 0;
   $368 = HEAP32[$Fs2$i >> 2] | 0;
   $371 = $368;
   $Fs113$pre$phiZ2D = $Fs2$i;
   $retval$0$i = (Math_imul(HEAP32[$channels101 >> 2] | 0, $368) | 0) + (($368 * 60 | 0) / ($frame_size$addr$0$i | 0) | 0) | 0;
   break;
  }
 case -1:
  {
   $Fs10$i = $st + 144 | 0;
   $370 = HEAP32[$Fs10$i >> 2] | 0;
   $371 = $370;
   $Fs113$pre$phiZ2D = $Fs10$i;
   $retval$0$i = (Math_imul($cond << 3, $370) | 0) / ($frame_size$addr$0$i | 0) | 0;
   break;
  }
 default:
  {
   $$pre1608 = $st + 144 | 0;
   $371 = HEAP32[$$pre1608 >> 2] | 0;
   $Fs113$pre$phiZ2D = $$pre1608;
   $retval$0$i = $367;
  }
 }
 $bitrate_bps = $st + 160 | 0;
 HEAP32[$bitrate_bps >> 2] = $retval$0$i;
 $div = ($371 | 0) / ($frame_size | 0) | 0;
 $use_vbr = $st + 148 | 0;
 $tobool114 = (HEAP32[$use_vbr >> 2] | 0) == 0;
 if ($tobool114) {
  $div118 = ($371 * 12 | 0) / ($frame_size | 0) | 0;
  $div124 = ((($div118 | 0) / 2 | 0) + (($retval$0$i * 12 | 0) / 8 | 0) | 0) / ($div118 | 0) | 0;
  $div124$cond = ($div124 | 0) < ($cond | 0) ? $div124 : $cond;
  $div139 = (Math_imul($div118 << 3, $div124$cond) | 0) / 12 | 0;
  HEAP32[$bitrate_bps >> 2] = $div139;
  if (($div124$cond | 0) > 1) {
   $374 = $div139;
   $max_data_bytes$0 = $div124$cond;
   label = 221;
  } else $max_data_bytes$01472 = 1;
 } else {
  $374 = $retval$0$i;
  $max_data_bytes$0 = $cond;
  label = 221;
 }
 do if ((label | 0) == 221) if (($max_data_bytes$0 | 0) < 3 | ($374 | 0) < ($div * 24 | 0)) $max_data_bytes$01472 = $max_data_bytes$0; else {
  $mul160 = Math_imul($max_data_bytes$0, $div) | 0;
  if (($div | 0) < 50) if (($mul160 | 0) < 300 | ($374 | 0) < 2400) {
   $max_data_bytes$01472 = $max_data_bytes$0;
   break;
  }
  $mul266 = $mul160 << 3;
  $382 = HEAP32[$channels101 >> 2] | 0;
  $383 = HEAP32[$complexity >> 2] | 0;
  $packetLossPercentage = $st + 40 | 0;
  $384 = HEAP32[$packetLossPercentage >> 2] | 0;
  $cmp$i1015 = ($div | 0) > 50;
  $sub$i1018 = $div + -50 | 0;
  $mul1$i = Math_imul(($382 * 40 | 0) + 20 | 0, $sub$i1018) | 0;
  $spec$select$i = $374 - ($cmp$i1015 ? $mul1$i : 0) | 0;
  if ($tobool114) $equiv$1$i = $spec$select$i - (($spec$select$i | 0) / 12 | 0) | 0; else $equiv$1$i = $spec$select$i;
  $add6$i = $383 + 90 | 0;
  $div8$i = (Math_imul($equiv$1$i, $add6$i) | 0) / 100 | 0;
  $add32$i = ($384 * 12 | 0) + 20 | 0;
  $sub34$i = $div8$i - ((Math_imul($div8$i, $384) | 0) / ($add32$i | 0) | 0) | 0;
  L334 : do switch (HEAP32[$st + 124 >> 2] | 0) {
  case 3001:
   {
    $voice_est$0 = 127;
    break;
   }
  case 3002:
   {
    $voice_est$0 = 0;
    break;
   }
  default:
   {
    $386 = HEAP32[$st + 140 >> 2] | 0;
    if (($386 | 0) > -1) {
     $shr = $386 * 327 >> 8;
     $voice_est$0 = (HEAP32[$application >> 2] | 0) == 2049 ? (($shr | 0) < 115 ? $shr : 115) : $shr;
     break L334;
    } else {
     $voice_est$0 = (HEAP32[$application >> 2] | 0) == 2048 ? 115 : 48;
     break L334;
    }
   }
  } while (0);
  $389 = HEAP32[$st + 120 >> 2] | 0;
  $cmp325 = ($382 | 0) == 2;
  if (($389 | 0) == -1e3) if ($cmp325) {
   $390 = ((Math_imul($voice_est$0, $voice_est$0) | 0) * 2e3 | 0) >>> 14;
   $stream_channels332 = $st + 14192 | 0;
   $cond342 = ($sub34$i | 0) > (((HEAP32[$stream_channels332 >> 2] | 0) == 2 ? 16e3 : 18e3) + $390 | 0) ? 2 : 1;
   HEAP32[$stream_channels332 >> 2] = $cond342;
   $392 = $cond342;
   $stream_channels350$pre$phiZ2D = $stream_channels332;
  } else label = 259; else if ($cmp325) {
   $stream_channels322 = $st + 14192 | 0;
   HEAP32[$stream_channels322 >> 2] = $389;
   $392 = $389;
   $stream_channels350$pre$phiZ2D = $stream_channels322;
  } else label = 259;
  if ((label | 0) == 259) {
   $stream_channels346 = $st + 14192 | 0;
   HEAP32[$stream_channels346 >> 2] = $382;
   $392 = $382;
   $stream_channels350$pre$phiZ2D = $stream_channels346;
  }
  $mul1$i1026 = Math_imul(($392 * 40 | 0) + 20 | 0, $sub$i1018) | 0;
  $spec$select$i1028 = $374 - ($cmp$i1015 ? $mul1$i1026 : 0) | 0;
  if ($tobool114) $equiv$1$i1033 = $spec$select$i1028 - (($spec$select$i1028 | 0) / 12 | 0) | 0; else $equiv$1$i1033 = $spec$select$i1028;
  $div8$i1036 = (Math_imul($equiv$1$i1033, $add6$i) | 0) / 100 | 0;
  $sub34$i1041 = $div8$i1036 - ((Math_imul($div8$i1036, $384) | 0) / ($add32$i | 0) | 0) | 0;
  $use_dtx = $st + 184 | 0;
  if (!(HEAP32[$use_dtx >> 2] | 0)) $397 = 0; else $397 = (HEAP32[$analysis_info >> 2] | $is_silence$01465 | 0) == 0;
  HEAP32[$st + 56 >> 2] = $397 & 1;
  $398 = HEAP32[$application >> 2] | 0;
  do if (($398 | 0) == 2051) {
   $mode414$sink = $st + 14224 | 0;
   label = 277;
  } else {
   $399 = HEAP32[$st + 136 >> 2] | 0;
   if (($399 | 0) == -1e3) {
    $sub373 = 1.0 - $stereo_width$0;
    $conv386 = ~~($stereo_width$0 * 1.0e4 + $sub373 * 1.0e4);
    $add391 = ((Math_imul(Math_imul($voice_est$0, $voice_est$0) | 0, ~~($stereo_width$0 * 44.0e3 + $sub373 * 64.0e3) - $conv386 | 0) | 0) >> 14) + $conv386 | 0;
    $spec$select959 = ($398 | 0) == 2048 ? $add391 + 8e3 | 0 : $add391;
    $400 = HEAP32[$st + 14228 >> 2] | 0;
    if (($400 | 0) == 1002) $threshold$1 = $spec$select959 + -4e3 | 0; else $threshold$1 = ($400 | 0) > 0 ? $spec$select959 + 4e3 | 0 : $spec$select959;
    $cond413 = ($sub34$i1041 | 0) < ($threshold$1 | 0) ? 1e3 : 1002;
    $mode414 = $st + 14224 | 0;
    HEAP32[$mode414 >> 2] = $cond413;
    do if (!(HEAP32[$st + 48 >> 2] | 0)) $724 = $cond413; else {
     if (($384 | 0) <= (128 - $voice_est$0 >> 4 | 0)) {
      $724 = $cond413;
      break;
     }
     HEAP32[$mode414 >> 2] = 1e3;
     $724 = 1e3;
    } while (0);
    if (($voice_est$0 | 0) > 100 & $397) {
     HEAP32[$mode414 >> 2] = 1e3;
     $725 = 1e3;
    } else $725 = $724;
    if (($max_data_bytes$0 | 0) < ((Math_imul($cmp$i1015 ? 9e3 : 6e3, $frame_size) | 0) / ($371 << 3 | 0) | 0 | 0)) {
     $mode414$sink = $mode414;
     label = 277;
     break;
    } else {
     $402 = $725;
     $mode453$pre$phiZ2D = $mode414;
    }
   } else {
    $mode450 = $st + 14224 | 0;
    HEAP32[$mode450 >> 2] = $399;
    $402 = $399;
    $mode453$pre$phiZ2D = $mode450;
   }
   $cmp459 = (($371 | 0) / 100 | 0 | 0) > ($frame_size | 0);
   if ($cmp459 & ($402 | 0) != 1002) {
    HEAP32[$mode453$pre$phiZ2D >> 2] = 1002;
    $726 = 1002;
    $cmp4591617 = 1;
    $mode453$pre$phi1614Z2D = $mode453$pre$phiZ2D;
   } else {
    $726 = $402;
    $cmp4591617 = $cmp459;
    $mode453$pre$phi1614Z2D = $mode453$pre$phiZ2D;
   }
  } while (0);
  if ((label | 0) == 277) {
   HEAP32[$mode414$sink >> 2] = 1002;
   $726 = 1002;
   $cmp4591617 = (($371 | 0) / 100 | 0 | 0) > ($frame_size | 0);
   $mode453$pre$phi1614Z2D = $mode414$sink;
  }
  $lfe = $st + 176 | 0;
  if (!(HEAP32[$lfe >> 2] | 0)) $405 = $726; else {
   HEAP32[$mode453$pre$phi1614Z2D >> 2] = 1002;
   $405 = 1002;
  }
  $prev_mode468 = $st + 14228 | 0;
  $404 = HEAP32[$prev_mode468 >> 2] | 0;
  do if (($404 | 0) > 0) {
   $cmp473 = ($405 | 0) != 1002;
   $cmp477 = ($404 | 0) == 1002;
   $$mux1530 = ($cmp477 ^ $cmp473 ^ 1) & 1;
   if ($cmp477 | $cmp473) {
    $408 = $405;
    $celt_to_silk$0 = $$mux1530;
    $redundancy$0 = $$mux1530;
    $to_celt$0 = 0;
   } else {
    if ($cmp4591617) {
     $408 = 1002;
     $celt_to_silk$0 = 0;
     $redundancy$0 = 0;
     $to_celt$0 = 0;
     break;
    }
    HEAP32[$mode453$pre$phi1614Z2D >> 2] = $404;
    $408 = $404;
    $celt_to_silk$0 = 0;
    $redundancy$0 = 1;
    $to_celt$0 = 1;
   }
  } else {
   $408 = $405;
   $celt_to_silk$0 = 0;
   $redundancy$0 = 0;
   $to_celt$0 = 0;
  } while (0);
  do if (($392 | 0) == 1) {
   if ((HEAP32[$st + 14232 >> 2] | 0) != 2) {
    label = 291;
    break;
   }
   $toMono = $st + 68 | 0;
   if (HEAP32[$toMono >> 2] | 0) {
    label = 291;
    break;
   }
   if (($404 | 0) == 1002 | ($408 | 0) == 1002) {
    label = 291;
    break;
   }
   HEAP32[$toMono >> 2] = 1;
   HEAP32[$stream_channels350$pre$phiZ2D >> 2] = 2;
   $409 = 2;
  } else label = 291; while (0);
  if ((label | 0) == 291) {
   HEAP32[$st + 68 >> 2] = 0;
   $409 = $392;
  }
  $mul1$i1047 = Math_imul(($409 * 40 | 0) + 20 | 0, $sub$i1018) | 0;
  $spec$select$i1049 = $374 - ($cmp$i1015 ? $mul1$i1047 : 0) | 0;
  if ($tobool114) $equiv$1$i1054 = $spec$select$i1049 - (($spec$select$i1049 | 0) / 12 | 0) | 0; else $equiv$1$i1054 = $spec$select$i1049;
  $div8$i1057 = (Math_imul($equiv$1$i1054, $add6$i) | 0) / 100 | 0;
  do if (($408 | 1 | 0) == 1001) {
   $equiv$2$i = ($383 | 0) < 2 ? ($div8$i1057 << 2 | 0) / 5 | 0 : $div8$i1057;
   $sub21$i = $equiv$2$i - ((Math_imul($equiv$2$i, $384) | 0) / (($384 * 6 | 0) + 10 | 0) | 0) | 0;
   if (($408 | 0) == 1002) {
    $727 = 1002;
    $cmp5531626 = 1;
    $equiv$3$i14751622 = $sub21$i;
    $prefill$01624 = 0;
    label = 306;
   } else {
    $equiv$3$i1478 = $sub21$i;
    label = 300;
   }
  } else {
   if (($408 | 0) != 1002) {
    $equiv$3$i1478 = $div8$i1057 - ((Math_imul($div8$i1057, $384) | 0) / ($add32$i | 0) | 0) | 0;
    label = 300;
    break;
   }
   if (($383 | 0) >= 5) {
    $727 = 1002;
    $cmp5531626 = 1;
    $equiv$3$i14751622 = $div8$i1057;
    $prefill$01624 = 0;
    label = 306;
    break;
   }
   $727 = 1002;
   $cmp5531626 = 1;
   $equiv$3$i14751622 = ($div8$i1057 * 9 | 0) / 10 | 0;
   $prefill$01624 = 0;
   label = 306;
  } while (0);
  do if ((label | 0) == 300) {
   if (($404 | 0) == 1002) {
    _silk_InitEncoder($add$ptr, HEAP32[$st + 180 >> 2] | 0, $vararg_buffer);
    $413 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    $prefill$0 = 1;
   } else {
    $413 = $408;
    $prefill$0 = 0;
   }
   if (($413 | 0) == 1002) {
    $727 = 1002;
    $cmp5531626 = 1;
    $equiv$3$i14751622 = $equiv$3$i1478;
    $prefill$01624 = $prefill$0;
    label = 306;
    break;
   }
   if (HEAP32[$st + 14252 >> 2] | 0) {
    $727 = $413;
    $cmp5531626 = 0;
    $equiv$3$i14751622 = $equiv$3$i1478;
    $prefill$01624 = $prefill$0;
    label = 306;
    break;
   }
   if (HEAP32[$st + 84 >> 2] | 0) {
    $727 = $413;
    $cmp5531626 = 0;
    $equiv$3$i14751622 = $equiv$3$i1478;
    $prefill$01624 = $prefill$0;
    label = 306;
    break;
   }
   $bandwidth632$phi$trans$insert = $st + 14240 | 0;
   $423 = HEAP32[$bandwidth632$phi$trans$insert >> 2] | 0;
   $425 = $413;
   $bandwidth632$pre$phiZ2D = $bandwidth632$phi$trans$insert;
   $cmp5531625 = 0;
   $equiv$3$i14751621 = $equiv$3$i1478;
   $prefill$01623 = $prefill$0;
  } while (0);
  do if ((label | 0) == 306) {
   $mul575 = Math_imul($voice_est$0, $voice_est$0) | 0;
   $add581$4 = (($mul575 * 2500 | 0) >>> 14) + 11e3 | 0;
   $add581$6 = (($mul575 * 2e3 | 0) >>> 14) + 12e3 | 0;
   $tobool592 = (HEAP32[$st + 14252 >> 2] | 0) == 0;
   $auto_bandwidth = $st + 14244 | 0;
   do if ($tobool592) {
    $419 = HEAP32[$auto_bandwidth >> 2] | 0;
    if (($equiv$3$i14751622 | 0) >= ($add581$6 + (($419 | 0) < 1105 ? 2e3 : -2e3) | 0)) {
     $bandwidth561$1$ph = 1105;
     label = 311;
     break;
    }
    if (($equiv$3$i14751622 | 0) >= ($add581$4 + (($419 | 0) < 1104 ? 1e3 : -1e3) | 0)) {
     $bandwidth561$1$ph = 1104;
     label = 311;
     break;
    }
    if (($equiv$3$i14751622 | 0) >= ((($419 | 0) < 1103 ? 9700 : 8300) | 0)) {
     $bandwidth561$1$ph = 1103;
     label = 311;
     break;
    }
    if (($equiv$3$i14751622 | 0) < ((($419 | 0) < 1102 ? 9700 : 8300) | 0)) {
     $bandwidth561$1$ph = 1101;
     label = 311;
    } else $420 = 1103;
   } else {
    if (($equiv$3$i14751622 | 0) >= ($add581$6 | 0)) {
     $bandwidth561$1$ph = 1105;
     label = 311;
     break;
    }
    if (($equiv$3$i14751622 | 0) >= ($add581$4 | 0)) {
     $bandwidth561$1$ph = 1104;
     label = 311;
     break;
    }
    $bandwidth561$1$ph = ($equiv$3$i14751622 | 0) < 9e3 ? 1101 : 1103;
    label = 311;
   } while (0);
   if ((label | 0) == 311) $420 = $bandwidth561$1$ph;
   HEAP32[$auto_bandwidth >> 2] = $420;
   $bandwidth614 = $st + 14240 | 0;
   HEAP32[$bandwidth614 >> 2] = $420;
   if ($cmp5531626 | $tobool592 ^ 1) {
    $423 = $420;
    $425 = $727;
    $bandwidth632$pre$phiZ2D = $bandwidth614;
    $cmp5531625 = $cmp5531626;
    $equiv$3$i14751621 = $equiv$3$i14751622;
    $prefill$01623 = $prefill$01624;
    break;
   }
   if (!(($420 | 0) > 1103 & (HEAP32[$st + 88 >> 2] | 0) == 0)) {
    $423 = $420;
    $425 = $727;
    $bandwidth632$pre$phiZ2D = $bandwidth614;
    $cmp5531625 = 0;
    $equiv$3$i14751621 = $equiv$3$i14751622;
    $prefill$01623 = $prefill$01624;
    break;
   }
   HEAP32[$bandwidth614 >> 2] = 1103;
   $423 = 1103;
   $425 = $727;
   $bandwidth632$pre$phiZ2D = $bandwidth614;
   $cmp5531625 = 0;
   $equiv$3$i14751621 = $equiv$3$i14751622;
   $prefill$01623 = $prefill$01624;
  } while (0);
  $422 = HEAP32[$st + 132 >> 2] | 0;
  if (($423 | 0) > ($422 | 0)) {
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $422;
   $728 = $422;
  } else $728 = $423;
  $424 = HEAP32[$st + 128 >> 2] | 0;
  $cmp639 = ($424 | 0) == -1e3;
  if ($cmp639) $426 = $728; else {
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $424;
   $426 = $424;
  }
  if (($mul160 | 0) < 1875 & ($425 | 0) != 1002) {
   $spec$select965 = ($426 | 0) < 1103 ? $426 : 1103;
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $spec$select965;
   $428 = $spec$select965;
  } else $428 = $426;
  $427 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
  do if (($427 | 0) < 24001) {
   if (($428 | 0) > 1104) {
    HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1104;
    $429 = 1104;
   } else $429 = $428;
   if (($427 | 0) >= 16001) {
    $434 = $429;
    break;
   }
   if (($429 | 0) > 1103) {
    HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1103;
    $430 = 1103;
   } else $430 = $429;
   if (($427 | 0) >= 12001) {
    $434 = $430;
    break;
   }
   if (($430 | 0) > 1102) {
    HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1102;
    $431 = 1102;
   } else $431 = $430;
   if (!(($427 | 0) < 8001 & ($431 | 0) > 1101)) {
    $434 = $431;
    break;
   }
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1101;
   $434 = 1101;
  } else $434 = $428; while (0);
  $432 = HEAP32[$detected_bandwidth >> 2] | 0;
  if (($432 | 0) == 0 | $cmp639 ^ 1) $438 = $434; else {
   $433 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
   $cmp553$not = $cmp5531625 ^ 1;
   do if (($equiv$3$i14751621 | 0) > ($433 * 18e3 | 0) | $cmp553$not) {
    if (!(($equiv$3$i14751621 | 0) > ($433 * 24e3 | 0) | $cmp553$not)) {
     $min_detected_bandwidth$0 = 1102;
     break;
    }
    $min_detected_bandwidth$0 = ($equiv$3$i14751621 | 0) > ($433 * 3e4 | 0) ? (($equiv$3$i14751621 | 0) > ($433 * 44e3 | 0) ? 1105 : 1104) : 1103;
   } else $min_detected_bandwidth$0 = 1101; while (0);
   $$min_detected_bandwidth$0 = ($432 | 0) > ($min_detected_bandwidth$0 | 0) ? $432 : $min_detected_bandwidth$0;
   HEAP32[$detected_bandwidth >> 2] = $$min_detected_bandwidth$0;
   $cond763 = ($434 | 0) < ($$min_detected_bandwidth$0 | 0) ? $434 : $$min_detected_bandwidth$0;
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $cond763;
   $438 = $cond763;
  }
  $436 = HEAP32[$packetLossPercentage >> 2] | 0;
  $LBRR_coded = $st + 52 | 0;
  L458 : do if ($cmp5531625 | ((HEAP32[$st + 48 >> 2] | 0) == 0 | ($436 | 0) == 0)) $retval$2$shrunk$i = 0; else {
   $sub15$i = 125 - (($436 | 0) < 25 ? $436 : 25) | 0;
   $cmp30$i = ($436 | 0) < 6;
   L460 : do switch (HEAP32[$LBRR_coded >> 2] | 0) {
   case 1:
    {
     if ($cmp30$i) {
      $sub$us$i$us$le = $438 << 1;
      $mul16$us$i$us$le = Math_imul((HEAP32[27776 + ($sub$us$i$us$le + -2202 << 2) >> 2] | 0) - (HEAP32[27776 + ($sub$us$i$us$le + -2201 << 2) >> 2] | 0) | 0, $sub15$i) | 0;
      $retval$2$shrunk$i = (((($mul16$us$i$us$le & 65535) * 655 | 0) >>> 16) + (($mul16$us$i$us$le >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0);
      break L458;
     }
     $442 = $438;
     while (1) {
      $sub$us$i = $442 << 1;
      $mul16$us$i = Math_imul((HEAP32[27776 + ($sub$us$i + -2202 << 2) >> 2] | 0) - (HEAP32[27776 + ($sub$us$i + -2201 << 2) >> 2] | 0) | 0, $sub15$i) | 0;
      if ((((($mul16$us$i & 65535) * 655 | 0) >>> 16) + (($mul16$us$i >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0)) {
       $retval$2$shrunk$i = 1;
       break L458;
      }
      if (($442 | 0) <= 1101) break L460;
      $dec$us$i = $442 + -1 | 0;
      HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $dec$us$i;
      $442 = $dec$us$i;
     }
     break;
    }
   case 0:
    {
     if ($cmp30$i) {
      $sub$us24$i$us$le = $438 << 1;
      $mul16$us31$i$us$le = Math_imul((HEAP32[27776 + ($sub$us24$i$us$le + -2201 << 2) >> 2] | 0) + (HEAP32[27776 + ($sub$us24$i$us$le + -2202 << 2) >> 2] | 0) | 0, $sub15$i) | 0;
      $retval$2$shrunk$i = (((($mul16$us31$i$us$le & 65535) * 655 | 0) >>> 16) + (($mul16$us31$i$us$le >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0);
      break L458;
     }
     $449 = $438;
     while (1) {
      $sub$us24$i = $449 << 1;
      $mul16$us31$i = Math_imul((HEAP32[27776 + ($sub$us24$i + -2201 << 2) >> 2] | 0) + (HEAP32[27776 + ($sub$us24$i + -2202 << 2) >> 2] | 0) | 0, $sub15$i) | 0;
      if ((((($mul16$us31$i & 65535) * 655 | 0) >>> 16) + (($mul16$us31$i >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0)) {
       $retval$2$shrunk$i = 1;
       break L458;
      }
      if (($449 | 0) <= 1101) break L460;
      $dec$us42$i = $449 + -1 | 0;
      HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $dec$us42$i;
      $449 = $dec$us42$i;
     }
     break;
    }
   default:
    {
     $mul16$i1559 = Math_imul(HEAP32[27776 + (($438 << 1) + -2202 << 2) >> 2] | 0, $sub15$i) | 0;
     $cmp28$i1565 = (((($mul16$i1559 & 65535) * 655 | 0) >>> 16) + (($mul16$i1559 >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0);
     if ($cmp30$i | $cmp28$i1565) {
      $retval$2$shrunk$i = $cmp28$i1565;
      break L458;
     }
     $455 = $438;
     while (1) {
      if (($455 | 0) <= 1101) break L460;
      $455 = $455 + -1 | 0;
      HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $455;
      $mul16$i = Math_imul(HEAP32[27776 + (($455 << 1) + -2202 << 2) >> 2] | 0, $sub15$i) | 0;
      if ((((($mul16$i & 65535) * 655 | 0) >>> 16) + (($mul16$i >> 16) * 655 | 0) | 0) < ($equiv$3$i14751621 | 0)) {
       $retval$2$shrunk$i = 1;
       break L458;
      }
     }
    }
   } while (0);
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = $438;
   $retval$2$shrunk$i = 0;
  } while (0);
  HEAP32[$LBRR_coded >> 2] = $retval$2$shrunk$i & 1;
  HEAP32[$vararg_buffer1 >> 2] = $lsb_depth$;
  _opus_custom_encoder_ctl($add$ptr7, 4036, $vararg_buffer1) | 0;
  $458 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
  do if (($458 | 0) == 1002) {
   if ((HEAP32[$bandwidth632$pre$phiZ2D >> 2] | 0) != 1102) break;
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1103;
  } while (0);
  if (!(HEAP32[$lfe >> 2] | 0)) {
   $$pr1486 = HEAP32[$bandwidth632$pre$phiZ2D >> 2] | 0;
   if (($458 | 0) == 1e3 & ($$pr1486 | 0) > 1103) {
    $$ph = $$pr1486;
    $$sink1655 = 1001;
    label = 363;
   } else {
    $461 = $$pr1486;
    label = 362;
   }
  } else {
   HEAP32[$bandwidth632$pre$phiZ2D >> 2] = 1101;
   $461 = 1101;
   label = 362;
  }
  if ((label | 0) == 362) if (($461 | 0) < 1104 & ($458 | 0) == 1001) {
   $$ph = $461;
   $$sink1655 = 1e3;
   label = 363;
  } else {
   $$pr = $458;
   $505 = $461;
  }
  if ((label | 0) == 363) {
   HEAP32[$mode453$pre$phi1614Z2D >> 2] = $$sink1655;
   $$pr = $$sink1655;
   $505 = $$ph;
  }
  $462 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
  $div814 = ($462 | 0) / 50 | 0;
  $cmp819 = ($$pr | 0) == 1e3;
  do if (($div814 | 0) >= ($frame_size | 0) | $cmp819) {
   $mul823 = $462 * 3 | 0;
   $div824 = ($mul823 | 0) / 50 | 0;
   if (($div824 | 0) < ($frame_size | 0)) {
    if (!$cmp819) {
     $enc_frame_size$0 = $div814;
     break;
    }
    if ((($462 << 1 | 0) / 25 | 0 | 0) == ($frame_size | 0)) {
     $enc_frame_size$0 = ($462 | 0) / 25 | 0;
     break;
    } else {
     $enc_frame_size$0 = (($mul823 | 0) / 25 | 0 | 0) == ($frame_size | 0) ? $div824 : $div814;
     break;
    }
   }
   $silk_bw_switch = $st + 14248 | 0;
   if (!(HEAP32[$silk_bw_switch >> 2] | 0)) {
    $celt_to_silk$1 = $celt_to_silk$0;
    $prefill$1 = $prefill$01623;
    $redundancy$1 = $redundancy$0;
   } else {
    HEAP32[$silk_bw_switch >> 2] = 0;
    $celt_to_silk$1 = 1;
    $prefill$1 = 2;
    $redundancy$1 = 1;
   }
   $$pre1600 = HEAP32[$bitrate_bps >> 2] | 0;
   if (($redundancy$1 | 0) == 0 | ($$pr | 0) == 1002) {
    $redundancy$3 = 0;
    $redundancy_bytes$0 = 0;
   } else {
    $464 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
    $add$i1108 = ($464 * 40 | 0) + 20 | 0;
    $div4$i = (((Math_imul($add$i1108, 200 - $div | 0) | 0) + $$pre1600 | 0) * 3 | 0) / 3200 | 0;
    $div13$i = ((((($max_data_bytes$0 << 3) - ($add$i1108 << 1) | 0) * 240 | 0) / ((48e3 / ($div | 0) | 0) + 240 | 0) | 0) + $add$i1108 | 0) / 8 | 0;
    $cond$i1113 = ($div4$i | 0) < ($div13$i | 0) ? $div4$i : $div13$i;
    $redundancy_bytes$0$i = ($cond$i1113 | 0) > ($464 << 3 | 4 | 0) ? (($cond$i1113 | 0) < 257 ? $cond$i1113 : 257) : 0;
    $redundancy$3 = ($redundancy_bytes$0$i | 0) == 0 ? 0 : $redundancy$1;
    $redundancy_bytes$0 = $redundancy_bytes$0$i;
   }
   $sub891 = $max_data_bytes$0 - $redundancy_bytes$0 | 0;
   $div896 = (Math_imul($$pre1600, $frame_size) | 0) / ($462 << 3 | 0) | 0;
   $sub891$div896 = ($sub891 | 0) < ($div896 | 0) ? $sub891 : $div896;
   $add$ptr910 = $data + 1 | 0;
   $sub911 = $max_data_bytes$0 + -1 | 0;
   HEAP32[$enc >> 2] = $add$ptr910;
   $end_offs$i = $enc + 8 | 0;
   HEAP32[$end_offs$i >> 2] = 0;
   HEAP32[$enc + 12 >> 2] = 0;
   HEAP32[$enc + 16 >> 2] = 0;
   $nbits_total$i = $enc + 20 | 0;
   HEAP32[$nbits_total$i >> 2] = 33;
   $offs$i = $enc + 24 | 0;
   HEAP32[$offs$i >> 2] = 0;
   $rng$i = $enc + 28 | 0;
   HEAP32[$rng$i >> 2] = -2147483648;
   $rem$i = $enc + 40 | 0;
   HEAP32[$rem$i >> 2] = -1;
   $val$i = $enc + 32 | 0;
   HEAP32[$val$i >> 2] = 0;
   $ext$i = $enc + 36 | 0;
   HEAP32[$ext$i >> 2] = 0;
   $storage$i = $enc + 4 | 0;
   HEAP32[$storage$i >> 2] = $sub911;
   $error$i = $enc + 44 | 0;
   HEAP32[$error$i >> 2] = 0;
   $add912 = $delay_compensation$0 + $frame_size | 0;
   $mul914 = Math_imul(HEAP32[$channels101 >> 2] | 0, $add912) | 0;
   $467 = _llvm_stacksave() | 0;
   $vla = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($mul914 << 2) | 0) + 15 & -16) | 0;
   $delay_buffer = $st + 14280 | 0;
   $encoder_buffer = $st + 172 | 0;
   $469 = HEAP32[$channels101 >> 2] | 0;
   _memcpy($vla | 0, $st + 14280 + ((Math_imul((HEAP32[$encoder_buffer >> 2] | 0) - $delay_compensation$0 | 0, $469) | 0) << 2) | 0, Math_imul($delay_compensation$0 << 2, $469) | 0) | 0;
   $470 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
   if (($470 | 0) == 1002) $hp_freq_smth1$0 = 193536; else $hp_freq_smth1$0 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $variable_HP_smth2_Q15 = $st + 14200 | 0;
   $472 = HEAP32[$variable_HP_smth2_Q15 >> 2] | 0;
   $sub943 = $hp_freq_smth1$0 - $472 | 0;
   $add951 = (($sub943 >> 16) * 983 | 0) + $472 + ((($sub943 & 65535) * 983 | 0) >>> 16) | 0;
   HEAP32[$variable_HP_smth2_Q15 >> 2] = $add951;
   $arrayidx962 = $vla + ((Math_imul($469, $delay_compensation$0) | 0) << 2) | 0;
   $arraydecay = $st + 14208 | 0;
   $475 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
   do if ((HEAP32[$application >> 2] | 0) == 2048) {
    $shr954 = $add951 >> 8;
    do if (($add951 | 0) < 0) $retval$0$i111 = 0; else {
     if (($add951 | 0) > 1015551) {
      $retval$0$i111 = 2147483647;
      break;
     }
     $shr18$i98 = $shr954 >>> 7;
     $shl$i99 = 1 << $shr18$i98;
     $and$i100 = $shr954 & 127;
     if (($add951 | 0) < 524288) $shr22$pn$i = ((Math_imul(Math_imul($and$i100, -174) | 0, 128 - $and$i100 | 0) | 0) >> 16) + $and$i100 << $shr18$i98 >> 7; else $shr22$pn$i = Math_imul(((Math_imul(Math_imul($and$i100, -174) | 0, 128 - $and$i100 | 0) | 0) >> 16) + $and$i100 | 0, $shl$i99 >> 7) | 0;
     $retval$0$i111 = $shr22$pn$i + $shl$i99 | 0;
    } while (0);
    $div2$i = (($retval$0$i111 << 16 >> 16) * 2471 | 0) / (($475 | 0) / 1e3 | 0 | 0) | 0;
    $sub$i1118 = (Math_imul($div2$i, -471) | 0) + 268435456 | 0;
    $shr$i1120 = $sub$i1118 >> 6;
    $shr7$i = $sub$i1118 >> 22;
    $conv10$i = $div2$i << 16 >> 16;
    $sub21$i1125 = (Math_imul($conv10$i, $div2$i >> 16) | 0) + -8388608 + ((Math_imul($conv10$i, $div2$i & 65535) | 0) >> 16) + (Math_imul(($div2$i >> 15) + 1 >> 1, $div2$i) | 0) | 0;
    $conv23$i = $sub21$i1125 << 16 >> 16;
    $and25$i = $shr$i1120 & 65535;
    $conv71$i = $shr$i1120 << 16 >> 16;
    $mul$i$i1126 = +(((Math_imul($conv23$i, $and25$i) | 0) >> 16) + (Math_imul($conv23$i, $shr7$i) | 0) + (Math_imul(($sub21$i1125 >> 15) + 1 >> 1, $shr$i1120) | 0) | 0) * 3.725290298461914e-09;
    $mul4$i$i = +((Math_imul(($sub$i1118 >> 21) + 1 >> 1, $shr$i1120) | 0) + (Math_imul($conv71$i, $shr7$i) | 0) + ((Math_imul($conv71$i, $and25$i) | 0) >> 16) | 0) * 3.725290298461914e-09;
    $mul8$i$i = +($sub$i1118 | 0) * 3.725290298461914e-09;
    $mul12$i$i = +(($div2$i * 942 | 0) + -536870912 | 0) * 3.725290298461914e-09;
    $cmp1$i$i1127 = ($frame_size | 0) > 0;
    if ($cmp1$i$i1127) {
     $arrayidx24$i$i = $st + 14212 | 0;
     $479 = +HEAPF32[$arraydecay >> 2];
     $480 = +HEAPF32[$arrayidx24$i$i >> 2];
     $k$02$i$i = 0;
     do {
      $mul19$i$i = Math_imul($k$02$i$i, $469) | 0;
      $478 = +HEAPF32[$pcm + ($mul19$i$i << 2) >> 2];
      $mul23$i$i = $mul8$i$i * $478;
      $add$i$i1129 = $479 + $mul23$i$i;
      $479 = $mul12$i$i * $478 + ($480 - $mul$i$i1126 * $add$i$i1129);
      HEAPF32[$arraydecay >> 2] = $479;
      $480 = $mul23$i$i - $mul4$i$i * $add$i$i1129 + 1.0000000031710769e-30;
      HEAPF32[$arrayidx24$i$i >> 2] = $480;
      HEAPF32[$arrayidx962 + ($mul19$i$i << 2) >> 2] = $add$i$i1129;
      $k$02$i$i = $k$02$i$i + 1 | 0;
     } while (($k$02$i$i | 0) != ($frame_size | 0));
    }
    if (($469 | 0) != 2) break;
    $add$ptr$i = $pcm + 4 | 0;
    $add$ptr89$i = $st + 14216 | 0;
    $add$ptr90$i = $arrayidx962 + 4 | 0;
    if (!$cmp1$i$i1127) break;
    $arrayidx24$i21$i = $st + 14220 | 0;
    $483 = +HEAPF32[$add$ptr89$i >> 2];
    $484 = +HEAPF32[$arrayidx24$i21$i >> 2];
    $k$02$i23$i = 0;
    do {
     $mul19$i24$i = $k$02$i23$i << 1;
     $482 = +HEAPF32[$add$ptr$i + ($mul19$i24$i << 2) >> 2];
     $mul23$i26$i = $mul8$i$i * $482;
     $add$i27$i = $483 + $mul23$i26$i;
     $483 = $mul12$i$i * $482 + ($484 - $mul$i$i1126 * $add$i27$i);
     HEAPF32[$add$ptr89$i >> 2] = $483;
     $484 = $mul23$i26$i - $mul4$i$i * $add$i27$i + 1.0000000031710769e-30;
     HEAPF32[$arrayidx24$i21$i >> 2] = $484;
     HEAPF32[$add$ptr90$i + ($mul19$i24$i << 2) >> 2] = $add$i27$i;
     $k$02$i23$i = $k$02$i23$i + 1 | 0;
    } while (($k$02$i23$i | 0) != ($frame_size | 0));
   } else {
    $div$i1138 = 18.900001525878906 / +($475 | 0);
    $sub$i1139 = 1.0 - $div$i1138;
    $486 = +HEAPF32[$arraydecay >> 2];
    if (($469 | 0) == 2) {
     $arrayidx3$i = $st + 14216 | 0;
     $487 = +HEAPF32[$arrayidx3$i >> 2];
     if (($frame_size | 0) > 0) {
      $i$04$i = 0;
      $m0$03$i = $486;
      $m2$02$i = $487;
      while (1) {
       $mul6$i1142 = $i$04$i << 1;
       $488 = +HEAPF32[$pcm + ($mul6$i1142 << 2) >> 2];
       $add9$i = $mul6$i1142 | 1;
       $489 = +HEAPF32[$pcm + ($add9$i << 2) >> 2];
       $add16$i = $sub$i1139 * $m0$03$i + ($div$i1138 * $488 + 1.0000000031710769e-30);
       $add20$i1145 = $sub$i1139 * $m2$02$i + ($div$i1138 * $489 + 1.0000000031710769e-30);
       HEAPF32[$arrayidx962 + ($mul6$i1142 << 2) >> 2] = $488 - $m0$03$i;
       HEAPF32[$arrayidx962 + ($add9$i << 2) >> 2] = $489 - $m2$02$i;
       $i$04$i = $i$04$i + 1 | 0;
       if (($i$04$i | 0) == ($frame_size | 0)) {
        $m0$0$lcssa$i = $add16$i;
        $m2$0$lcssa$i = $add20$i1145;
        break;
       } else {
        $m0$03$i = $add16$i;
        $m2$02$i = $add20$i1145;
       }
      }
     } else {
      $m0$0$lcssa$i = $486;
      $m2$0$lcssa$i = $487;
     }
     HEAPF32[$arraydecay >> 2] = $m0$0$lcssa$i;
     HEAPF32[$arrayidx3$i >> 2] = $m2$0$lcssa$i;
     break;
    } else {
     if (($frame_size | 0) > 0) {
      $i$18$i = 0;
      $m029$07$i = $486;
      while (1) {
       $490 = +HEAPF32[$pcm + ($i$18$i << 2) >> 2];
       $add40$i = $sub$i1139 * $m029$07$i + ($div$i1138 * $490 + 1.0000000031710769e-30);
       HEAPF32[$arrayidx962 + ($i$18$i << 2) >> 2] = $490 - $m029$07$i;
       $i$18$i = $i$18$i + 1 | 0;
       if (($i$18$i | 0) == ($frame_size | 0)) {
        $m029$0$lcssa$i = $add40$i;
        break;
       } else $m029$07$i = $add40$i;
      }
     } else $m029$0$lcssa$i = $486;
     HEAPF32[$arraydecay >> 2] = $m029$0$lcssa$i;
     break;
    }
   } while (0);
   $mul985 = Math_imul($469, $frame_size) | 0;
   if (($mul985 | 0) > 0) {
    $i$07$i = 0;
    $xy$08$i = 0.0;
    while (1) {
     $491 = +HEAPF32[$arrayidx962 + ($i$07$i << 2) >> 2];
     $add$i1153 = $xy$08$i + $491 * $491;
     $i$07$i = $i$07$i + 1 | 0;
     if (($i$07$i | 0) == ($mul985 | 0)) {
      $xy$0$lcssa$i = $add$i1153;
      break;
     } else $xy$08$i = $add$i1153;
    }
   } else $xy$0$lcssa$i = 0.0;
   if (!($xy$0$lcssa$i < 1.0e9) | ($xy$0$lcssa$i != $xy$0$lcssa$i | 0.0 != 0.0)) {
    _memset($arrayidx962 | 0, 0, $mul985 << 2 | 0) | 0;
    HEAP32[$arraydecay >> 2] = 0;
    HEAP32[$arraydecay + 4 >> 2] = 0;
    HEAP32[$arraydecay + 8 >> 2] = 0;
    HEAP32[$arraydecay + 12 >> 2] = 0;
    $492 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
   } else $492 = $470;
   do if (($492 | 0) == 1002) {
    $HB_gain$1 = 1.0;
    $celt_to_silk$4 = $celt_to_silk$1;
    $curr_bandwidth$2 = $505;
    $redundancy$6 = $redundancy$3;
    $redundancy_bytes$3 = $redundancy_bytes$0;
    label = 498;
   } else {
    $493 = _llvm_stacksave() | 0;
    $vla1016 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($mul985 << 1) | 0) + 15 & -16) | 0;
    $activity$0 = (HEAP32[$analysis_info >> 2] | 0) == 0 ? -1 : +HEAPF32[$analysis_info + 36 >> 2] >= .10000000149011612 & 1;
    $mul1025 = Math_imul(($sub891$div896 << 3) + -8 | 0, $div) | 0;
    $496 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    $cmp1027 = ($496 | 0) == 1001;
    do if ($cmp1027) {
     $498 = HEAP32[$use_vbr >> 2] | 0;
     $500 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
     $div$i1158 = ($mul1025 | 0) / ($500 | 0) | 0;
     $add2$i1161 = (HEAP32[$LBRR_coded >> 2] << 1) + ((HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) == ($frame_size * 50 | 0) ? 2 : 1) | 0;
     do if (($div$i1158 | 0) < 12e3) {
      $i$042$lcssa$i = 1;
      label = 412;
     } else {
      if (($div$i1158 | 0) < 16e3) {
       $i$042$lcssa$i = 2;
       label = 412;
       break;
      }
      if (($div$i1158 | 0) < 2e4) {
       $i$042$lcssa$i = 3;
       label = 412;
       break;
      }
      if (($div$i1158 | 0) < 24e3) {
       $i$042$lcssa$i = 4;
       label = 412;
       break;
      }
      if (($div$i1158 | 0) < 32e3) {
       $i$042$lcssa$i = 5;
       label = 412;
       break;
      }
      if (($div$i1158 | 0) < 64e3) {
       $i$042$lcssa$i = 6;
       label = 412;
       break;
      }
      $silk_rate$0$i = (HEAP32[27944 + ($add2$i1161 << 2) >> 2] | 0) + (($div$i1158 + -64e3 | 0) / 2 | 0) | 0;
     } while (0);
     if ((label | 0) == 412) {
      $sub37$i = $i$042$lcssa$i + -1 | 0;
      $503 = HEAP32[27824 + ($sub37$i * 20 | 0) >> 2] | 0;
      $504 = HEAP32[27824 + ($i$042$lcssa$i * 20 | 0) >> 2] | 0;
      $silk_rate$0$i = ((Math_imul($504 - $div$i1158 | 0, HEAP32[27824 + ($sub37$i * 20 | 0) + ($add2$i1161 << 2) >> 2] | 0) | 0) + (Math_imul($div$i1158 - $503 | 0, HEAP32[27824 + ($i$042$lcssa$i * 20 | 0) + ($add2$i1161 << 2) >> 2] | 0) | 0) | 0) / ($504 - $503 | 0) | 0;
     }
     $spec$select$i1168 = ($498 | 0) == 0 ? $silk_rate$0$i + 100 | 0 : $silk_rate$0$i;
     $mul40$i = Math_imul(($505 | 0) == 1104 ? $spec$select$i1168 + 300 | 0 : $spec$select$i1168, $500) | 0;
     $spec$select35$i = ($500 | 0) == 2 & ($div$i1158 | 0) > 11999 ? $mul40$i + -1e3 | 0 : $mul40$i;
     HEAP32[$st + 36 >> 2] = $spec$select35$i;
     $506 = HEAP32[$st + 14256 >> 2] | 0;
     if ($506 | 0) {
      $508 = $498;
      $512 = $506;
      $514 = $spec$select35$i;
      label = 421;
      break;
     }
     $521 = $spec$select35$i;
     $HB_gain$01634 = 1.0 - +Math_exp(+(+($spec$select35$i - $mul1025 | 0) * .0009765625 * .6931471805599453));
    } else {
     HEAP32[$st + 36 >> 2] = $mul1025;
     $$pre1605 = HEAP32[$st + 14256 >> 2] | 0;
     if (!$$pre1605) {
      $521 = $mul1025;
      $HB_gain$01634 = 1.0;
      break;
     }
     $508 = HEAP32[$use_vbr >> 2] | 0;
     $512 = $$pre1605;
     $514 = $mul1025;
     label = 421;
    } while (0);
    do if ((label | 0) == 421) {
     if (!$508) {
      $521 = $514;
      $HB_gain$01634 = 1.0;
      break;
     }
     if (HEAP32[$lfe >> 2] | 0) {
      $521 = $514;
      $HB_gain$01634 = 1.0;
      break;
     }
     $510 = HEAP32[$bandwidth632$pre$phiZ2D >> 2] | 0;
     switch ($510 | 0) {
     case 1101:
      {
       $end$0 = 13;
       $srate$0 = 8.0e3;
       break;
      }
     case 1102:
      {
       $end$0 = 15;
       $srate$0 = 12.0e3;
       break;
      }
     default:
      {
       $end$0 = 17;
       $srate$0 = 16.0e3;
      }
     }
     $511 = HEAP32[$channels101 >> 2] | 0;
     if (($511 | 0) > 0) {
      $c$01553 = 0;
      $mask_sum$01552 = 0.0;
      while (1) {
       $mul1087 = $c$01553 * 21 | 0;
       $i$11550 = 0;
       $mask_sum$11549 = $mask_sum$01552;
       do {
        $513 = +HEAPF32[$512 + ($i$11550 + $mul1087 << 2) >> 2];
        $cmp1090 = $513 < .5;
        $cmp1100 = !(($cmp1090 ? $513 : .5) > -2.0);
        $cond1119 = $cmp1100 | $cmp1090 ^ 1 ? ($cmp1100 ? -2.0 : .5) : $513;
        $mask_sum$11549 = $mask_sum$11549 + ($cond1119 > 0.0 ? $cond1119 * .5 : $cond1119);
        $i$11550 = $i$11550 + 1 | 0;
       } while (($i$11550 | 0) != ($end$0 | 0));
       $c$01553 = $c$01553 + 1 | 0;
       if (($c$01553 | 0) == ($511 | 0)) {
        $mask_sum$0$lcssa = $mask_sum$11549;
        break;
       } else $mask_sum$01552 = $mask_sum$11549;
      }
     } else $mask_sum$0$lcssa = 0.0;
     $conv1140 = ~~($srate$0 * ($mask_sum$0$lcssa / +($end$0 | 0) * +($511 | 0) + .20000000298023224));
     $div1144 = (Math_imul($514, -2) | 0) / 3 | 0;
     $conv1140$div1144 = ($div1144 | 0) < ($conv1140 | 0) ? $conv1140 : $div1144;
     if (($510 & -2 | 0) == 1104) $conv1140$div1144$pn = ($conv1140$div1144 * 3 | 0) / 5 | 0; else $conv1140$div1144$pn = $conv1140$div1144;
     $storemerge954 = $conv1140$div1144$pn + $514 | 0;
     HEAP32[$st + 36 >> 2] = $storemerge954;
     $521 = $storemerge954;
     $HB_gain$01634 = 1.0;
    } while (0);
    $516 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
    HEAP32[$st + 32 >> 2] = ($frame_size * 1e3 | 0) / ($516 | 0) | 0;
    $517 = HEAP32[$channels101 >> 2] | 0;
    HEAP32[$silk_mode >> 2] = $517;
    $518 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
    HEAP32[$st + 12 >> 2] = $518;
    L593 : do switch ($505 | 0) {
    case 1101:
     {
      $$sink1656 = 8e3;
      break;
     }
    case 1102:
     {
      $$sink1656 = 12e3;
      break;
     }
    default:
     {
      if (($505 | 0) == 1103 | $cmp1027) {
       $$sink1656 = 16e3;
       break L593;
      }
      _celt_fatal(57274, 57361, 1755);
     }
    } while (0);
    $desiredInternalSampleRate1191 = $st + 28 | 0;
    HEAP32[$desiredInternalSampleRate1191 >> 2] = $$sink1656;
    HEAP32[$st + 24 >> 2] = $cmp1027 ? 16e3 : 8e3;
    $maxInternalSampleRate = $st + 20 | 0;
    HEAP32[$maxInternalSampleRate >> 2] = 16e3;
    do if (($496 | 0) == 1e3) {
     $effective_max_rate$0 = $cmp$i1015 ? ($mul160 << 4 | 0) / 3 | 0 : $mul266;
     if (($effective_max_rate$0 | 0) >= 8e3) break;
     HEAP32[$maxInternalSampleRate >> 2] = 12e3;
     HEAP32[$desiredInternalSampleRate1191 >> 2] = $$sink1656 >>> 0 < 12e3 ? $$sink1656 : 12e3;
     if (($effective_max_rate$0 | 0) >= 7e3) break;
     HEAP32[$maxInternalSampleRate >> 2] = 8e3;
     HEAP32[$desiredInternalSampleRate1191 >> 2] = 8e3;
    } while (0);
    $tobool1263 = (HEAP32[$use_vbr >> 2] | 0) == 0;
    HEAP32[$st + 60 >> 2] = $tobool1263 & 1;
    $mul1267 = $sub911 << 3;
    $maxBits = $st + 64 | 0;
    HEAP32[$maxBits >> 2] = $mul1267;
    do if (($redundancy_bytes$0 | 0) > 1 & ($redundancy$3 | 0) != 0) {
     $sub1278 = $mul1267 - ($redundancy_bytes$0 << 3 | 1) | 0;
     HEAP32[$maxBits >> 2] = $sub1278;
     if (!$cmp1027) {
      $522 = $sub1278;
      break;
     }
     $sub1285 = $sub1278 + -20 | 0;
     HEAP32[$maxBits >> 2] = $sub1285;
     $522 = $sub1285;
    } else $522 = $mul1267; while (0);
    do if ($tobool1263) {
     if (!$cmp1027) break;
     $div1302 = (Math_imul($521, $frame_size) | 0) / ($516 | 0) | 0;
     HEAP32[$maxBits >> 2] = ($522 | 0) < ($div1302 | 0) ? $522 : $div1302;
    } else {
     if (!$cmp1027) break;
     $div1328 = (Math_imul($522, $516) | 0) / ($frame_size | 0) | 0;
     $div$i1172 = ($div1328 | 0) / ($518 | 0) | 0;
     $add2$i1175 = (HEAP32[$LBRR_coded >> 2] << 1) + (($516 | 0) == ($frame_size * 50 | 0) ? 2 : 1) | 0;
     do if (($div$i1172 | 0) < 12e3) {
      $i$042$lcssa$i1184 = 1;
      label = 452;
     } else {
      if (($div$i1172 | 0) < 16e3) {
       $i$042$lcssa$i1184 = 2;
       label = 452;
       break;
      }
      if (($div$i1172 | 0) < 2e4) {
       $i$042$lcssa$i1184 = 3;
       label = 452;
       break;
      }
      if (($div$i1172 | 0) < 24e3) {
       $i$042$lcssa$i1184 = 4;
       label = 452;
       break;
      }
      if (($div$i1172 | 0) < 32e3) {
       $i$042$lcssa$i1184 = 5;
       label = 452;
       break;
      }
      if (($div$i1172 | 0) < 64e3) {
       $i$042$lcssa$i1184 = 6;
       label = 452;
       break;
      }
      $silk_rate$0$i1199 = (HEAP32[27944 + ($add2$i1175 << 2) >> 2] | 0) + (($div$i1172 + -64e3 | 0) / 2 | 0) | 0;
     } while (0);
     if ((label | 0) == 452) {
      $sub37$i1185 = $i$042$lcssa$i1184 + -1 | 0;
      $526 = HEAP32[27824 + ($sub37$i1185 * 20 | 0) >> 2] | 0;
      $527 = HEAP32[27824 + ($i$042$lcssa$i1184 * 20 | 0) >> 2] | 0;
      $silk_rate$0$i1199 = ((Math_imul($527 - $div$i1172 | 0, HEAP32[27824 + ($sub37$i1185 * 20 | 0) + ($add2$i1175 << 2) >> 2] | 0) | 0) + (Math_imul($div$i1172 - $526 | 0, HEAP32[27824 + ($i$042$lcssa$i1184 * 20 | 0) + ($add2$i1175 << 2) >> 2] | 0) | 0) | 0) / ($527 - $526 | 0) | 0;
     }
     $mul40$i1206 = Math_imul(($505 | 0) == 1104 ? $silk_rate$0$i1199 + 300 | 0 : $silk_rate$0$i1199, $518) | 0;
     HEAP32[$maxBits >> 2] = (Math_imul(($518 | 0) == 2 & ($div$i1172 | 0) > 11999 ? $mul40$i1206 + -1e3 | 0 : $mul40$i1206, $frame_size) | 0) / ($516 | 0) | 0;
    } while (0);
    if (!$prefill$1) $539 = $517; else {
     HEAP32[$vararg_buffer1 >> 2] = 0;
     $528 = HEAP32[$encoder_buffer >> 2] | 0;
     $mul1354 = Math_imul($528 - (($516 | 0) / 400 | 0) - (HEAP32[$st + 116 >> 2] | 0) | 0, $517) | 0;
     $add$ptr1357 = $st + 14280 + ($mul1354 << 2) | 0;
     $530 = HEAP32[$celt_mode >> 2] | 0;
     $532 = HEAP32[$530 + 60 >> 2] | 0;
     $div$i1221 = 48e3 / ($516 | 0) | 0;
     $div1$i = (HEAP32[$530 + 4 >> 2] | 0) / ($div$i1221 | 0) | 0;
     $cmp255$i = ($div1$i | 0) > 0;
     do if (($517 | 0) == 1) {
      if (!$cmp255$i) break;
      $i$056$i = 0;
      do {
       $533 = +HEAPF32[$532 + ((Math_imul($i$056$i, $div$i1221) | 0) << 2) >> 2];
       $mul5$i1227 = $533 * $533;
       $arrayidx8$i1231 = $add$ptr1357 + ($i$056$i << 2) | 0;
       HEAPF32[$arrayidx8$i1231 >> 2] = +HEAPF32[$arrayidx8$i1231 >> 2] * ($mul5$i1227 + (1.0 - $mul5$i1227) * 0.0);
       $i$056$i = $i$056$i + 1 | 0;
      } while (($i$056$i | 0) != ($div1$i | 0));
     } else {
      if (!$cmp255$i) break;
      $i$158$i = 0;
      do {
       $535 = +HEAPF32[$532 + ((Math_imul($i$158$i, $div$i1221) | 0) << 2) >> 2];
       $mul21$i = $535 * $535;
       $add25$i = $mul21$i + (1.0 - $mul21$i) * 0.0;
       $mul26$i1239 = $i$158$i << 1;
       $arrayidx27$i = $add$ptr1357 + ($mul26$i1239 << 2) | 0;
       HEAPF32[$arrayidx27$i >> 2] = +HEAPF32[$arrayidx27$i >> 2] * $add25$i;
       $arrayidx33$i = $add$ptr1357 + (($mul26$i1239 | 1) << 2) | 0;
       HEAPF32[$arrayidx33$i >> 2] = +HEAPF32[$arrayidx33$i >> 2] * $add25$i;
       $i$158$i = $i$158$i + 1 | 0;
      } while (($i$158$i | 0) != ($div1$i | 0));
     } while (0);
     _memset($delay_buffer | 0, 0, $mul1354 << 2 | 0) | 0;
     $mul1371 = Math_imul($528, $517) | 0;
     if (($mul1371 | 0) > 0) {
      $i$21548 = 0;
      do {
       $mul$i1244 = +HEAPF32[$st + 14280 + ($i$21548 << 2) >> 2] * 32768.0;
       $cond$i1246 = $mul$i1244 > -32768.0 ? $mul$i1244 : -32768.0;
       HEAP16[$vla1016 + ($i$21548 << 1) >> 1] = _lrintf($cond$i1246 < 32767.0 ? $cond$i1246 : 32767.0) | 0;
       $i$21548 = $i$21548 + 1 | 0;
      } while (($i$21548 | 0) != ($mul1371 | 0));
     }
     _silk_Encode($add$ptr, $silk_mode, $vla1016, $528, 0, $vararg_buffer1, $prefill$1, $activity$0) | 0;
     HEAP32[$st + 72 >> 2] = 0;
     $539 = HEAP32[$channels101 >> 2] | 0;
    }
    $mul13891544 = Math_imul($539, $frame_size) | 0;
    do if (($mul13891544 | 0) > 0) {
     $mul1394$peel = Math_imul($539, $delay_compensation$0) | 0;
     $mul$i1248$peel = +HEAPF32[$vla + ($mul1394$peel << 2) >> 2] * 32768.0;
     $cond$i1250$peel = $mul$i1248$peel > -32768.0 ? $mul$i1248$peel : -32768.0;
     HEAP16[$vla1016 >> 1] = _lrintf($cond$i1250$peel < 32767.0 ? $cond$i1250$peel : 32767.0) | 0;
     if (($mul13891544 | 0) == 1) break;
     $i$31546 = 1;
     do {
      $mul$i1248 = +HEAPF32[$vla + ($mul1394$peel + $i$31546 << 2) >> 2] * 32768.0;
      $cond$i1250 = $mul$i1248 > -32768.0 ? $mul$i1248 : -32768.0;
      HEAP16[$vla1016 + ($i$31546 << 1) >> 1] = _lrintf($cond$i1250 < 32767.0 ? $cond$i1250 : 32767.0) | 0;
      $i$31546 = $i$31546 + 1 | 0;
     } while (($i$31546 | 0) < ($mul13891544 | 0));
    } while (0);
    if (!(_silk_Encode($add$ptr, $silk_mode, $vla1016, $frame_size, $enc, $nBytes, 0, $activity$0) | 0)) {
     $542 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
     $543 = HEAP32[$st + 80 >> 2] | 0;
     L649 : do if (($542 | 0) == 1e3) {
      L651 : do if (($543 | 0) < 12e3) switch ($543 | 0) {
      case 8e3:
       {
        $curr_bandwidth$0 = 1101;
        break L649;
        break;
       }
      default:
       {}
      } else if (($543 | 0) < 16e3) {
       switch ($543 | 0) {
       case 12e3:
        break;
       default:
        break L651;
       }
       $curr_bandwidth$0 = 1102;
       break L649;
      } else {
       switch ($543 | 0) {
       case 16e3:
        break;
       default:
        break L651;
       }
       $curr_bandwidth$0 = 1103;
       break L649;
      } while (0);
      $curr_bandwidth$0 = $505;
     } else {
      if (($543 | 0) == 16e3) {
       $curr_bandwidth$0 = $505;
       break;
      }
      _celt_fatal(57380, 57361, 1863);
     } while (0);
     if (!(HEAP32[$st + 96 >> 2] | 0)) $546 = 0; else $546 = (HEAP32[$st + 18132 >> 2] | 0) == 0;
     HEAP32[$st + 72 >> 2] = $546 & 1;
     if (HEAP32[$nBytes >> 2] | 0) {
      if ($546) {
       $552 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
       $add$i1293 = ($552 * 40 | 0) + 20 | 0;
       $div4$i1298 = (((Math_imul($add$i1293, 200 - $div | 0) | 0) + (HEAP32[$bitrate_bps >> 2] | 0) | 0) * 3 | 0) / 3200 | 0;
       $div13$i1307 = ((((($max_data_bytes$0 << 3) - ($add$i1293 << 1) | 0) * 240 | 0) / ((48e3 / ($div | 0) | 0) + 240 | 0) | 0) + $add$i1293 | 0) / 8 | 0;
       $cond$i1309 = ($div4$i1298 | 0) < ($div13$i1307 | 0) ? $div4$i1298 : $div13$i1307;
       $redundancy_bytes$0$i1314 = ($cond$i1309 | 0) > ($552 << 3 | 4 | 0) ? (($cond$i1309 | 0) < 257 ? $cond$i1309 : 257) : 0;
       HEAP32[$silk_bw_switch >> 2] = 1;
       $celt_to_silk$3$ph = 0;
       $redundancy$5$ph = ($redundancy_bytes$0$i1314 | 0) != 0 & 1;
       $redundancy_bytes$2$ph = $redundancy_bytes$0$i1314;
      } else {
       $celt_to_silk$3$ph = $celt_to_silk$1;
       $redundancy$5$ph = $redundancy$3;
       $redundancy_bytes$2$ph = $redundancy_bytes$0;
      }
      _llvm_stackrestore($493 | 0);
      $HB_gain$1 = $HB_gain$01634;
      $celt_to_silk$4 = $celt_to_silk$3$ph;
      $curr_bandwidth$2 = $curr_bandwidth$0;
      $redundancy$6 = $redundancy$5$ph;
      $redundancy_bytes$3 = $redundancy_bytes$2$ph;
      label = 498;
      break;
     }
     HEAP32[$rangeFinal >> 2] = 0;
     $div1454 = (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) / ($frame_size | 0) | 0;
     $549 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
     if (($div1454 | 0) < 400) {
      $framerate$addr$019$i1257 = $div1454;
      $period$018$i1258 = 0;
      do {
       $framerate$addr$019$i1257 = $framerate$addr$019$i1257 << 1;
       $period$018$i1258 = $period$018$i1258 + 1 | 0;
      } while (($framerate$addr$019$i1257 | 0) < 400);
      $period$0$lcssa$i1265 = $period$018$i1258 << 3;
     } else $period$0$lcssa$i1265 = 0;
     switch ($542 | 0) {
     case 1e3:
      {
       $toc$0$in$i1285 = $period$0$lcssa$i1265 + -16 | ($curr_bandwidth$0 << 5) + 96 & 224;
       break;
      }
     case 1002:
      {
       $sub10$i1273 = $curr_bandwidth$0 + -1102 | 0;
       $toc$0$in$i1285 = (($sub10$i1273 | 0) > 0 ? $sub10$i1273 : 0) << 5 & 96 | $period$0$lcssa$i1265 | 128;
       break;
      }
     default:
      $toc$0$in$i1285 = $curr_bandwidth$0 << 4 | $period$0$lcssa$i1265 + 240 | 96;
     }
     HEAP8[$data >> 0] = $toc$0$in$i1285 | (($549 | 0) == 2 & 1) << 2;
     $retval$0 = 1;
    } else $retval$0 = -3;
    _llvm_stackrestore($493 | 0);
    $retval$5 = $retval$0;
   } while (0);
   L684 : do if ((label | 0) == 498) {
    switch ($curr_bandwidth$2 | 0) {
    case 1101:
     {
      $endband$0 = 13;
      break;
     }
    case 1103:
    case 1102:
     {
      $endband$0 = 17;
      break;
     }
    case 1104:
     {
      $endband$0 = 19;
      break;
     }
    default:
     $endband$0 = 21;
    }
    HEAP32[$vararg_buffer4 >> 2] = $endband$0;
    _opus_custom_encoder_ctl($add$ptr7, 10012, $vararg_buffer4) | 0;
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[$stream_channels350$pre$phiZ2D >> 2];
    _opus_custom_encoder_ctl($add$ptr7, 10008, $vararg_buffer7) | 0;
    HEAP32[$vararg_buffer10 >> 2] = -1;
    _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer10) | 0;
    do if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) == 1e3) {
     $556 = HEAP32[$channels101 >> 2] | 0;
     $vla15431491$alloca_mul = ((Math_imul(HEAP32[$Fs113$pre$phiZ2D >> 2] | 0, $556) | 0) / 400 | 0) << 2;
     $vla15431491 = STACKTOP;
     STACKTOP = STACKTOP + ((1 * $vla15431491$alloca_mul | 0) + 15 & -16) | 0;
     $576 = $556;
     $vla15431493 = $vla15431491;
    } else {
     HEAP32[$vararg_buffer13 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 4006, $vararg_buffer13) | 0;
     HEAP32[$vararg_buffer16 >> 2] = (HEAP32[$st + 76 >> 2] | 0) == 0 ? 2 : 0;
     _opus_custom_encoder_ctl($add$ptr7, 10002, $vararg_buffer16) | 0;
     $559 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
     $tobool1507 = (HEAP32[$use_vbr >> 2] | 0) != 0;
     do if (($559 | 0) == 1001) if ($tobool1507) {
      HEAP32[$vararg_buffer19 >> 2] = (HEAP32[$bitrate_bps >> 2] | 0) - (HEAP32[$st + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer19) | 0;
      HEAP32[$vararg_buffer22 >> 2] = 0;
      _opus_custom_encoder_ctl($add$ptr7, 4020, $vararg_buffer22) | 0;
      label = 510;
      break;
     } else {
      $561 = HEAP32[$channels101 >> 2] | 0;
      $562 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
      $div15421496 = (Math_imul($562, $561) | 0) / 400 | 0;
      $vla15431497 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($div15421496 << 2) | 0) + 15 & -16) | 0;
      $571 = 1001;
      $573 = $562;
      $574 = $561;
      $div15421499 = $div15421496;
      $vla15431500 = $vla15431497;
      break;
     } else {
      if (!$tobool1507) {
       $569 = $559;
       label = 511;
       break;
      }
      HEAP32[$vararg_buffer25 >> 2] = 1;
      _opus_custom_encoder_ctl($add$ptr7, 4006, $vararg_buffer25) | 0;
      HEAP32[$vararg_buffer28 >> 2] = HEAP32[$st + 152 >> 2];
      _opus_custom_encoder_ctl($add$ptr7, 4020, $vararg_buffer28) | 0;
      HEAP32[$vararg_buffer31 >> 2] = HEAP32[$bitrate_bps >> 2];
      _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer31) | 0;
      label = 510;
     } while (0);
     if ((label | 0) == 510) {
      $569 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
      label = 511;
     }
     if ((label | 0) == 511) {
      $567 = HEAP32[$channels101 >> 2] | 0;
      $568 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
      $div1542 = (Math_imul($568, $567) | 0) / 400 | 0;
      $vla1543 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($div1542 << 2) | 0) + 15 & -16) | 0;
      if (($569 | 0) == 1e3) {
       $576 = $567;
       $vla15431493 = $vla1543;
       break;
      } else {
       $571 = $569;
       $573 = $568;
       $574 = $567;
       $div15421499 = $div1542;
       $vla15431500 = $vla1543;
      }
     }
     $570 = HEAP32[$prev_mode468 >> 2] | 0;
     if (!(($571 | 0) != ($570 | 0) & ($570 | 0) > 0)) {
      $576 = $574;
      $vla15431493 = $vla15431500;
      break;
     }
     _memcpy($vla15431500 | 0, $st + 14280 + ((Math_imul((($573 | 0) / -400 | 0) - $delay_compensation$0 + (HEAP32[$encoder_buffer >> 2] | 0) | 0, $574) | 0) << 2) | 0, $div15421499 << 2 | 0) | 0;
     $576 = $574;
     $vla15431493 = $vla15431500;
    } while (0);
    $575 = HEAP32[$encoder_buffer >> 2] | 0;
    $mul1591 = Math_imul($575 - $add912 | 0, $576) | 0;
    if (($mul1591 | 0) > 0) {
     _memmove($delay_buffer | 0, $st + 14280 + ((Math_imul($576, $frame_size) | 0) << 2) | 0, $mul1591 << 2 | 0) | 0;
     _memcpy($st + 14280 + ($mul1591 << 2) | 0, $vla | 0, Math_imul($add912 << 2, $576) | 0) | 0;
    } else _memcpy($delay_buffer | 0, $vla + ((Math_imul($add912 - $575 | 0, $576) | 0) << 2) | 0, Math_imul($576 << 2, $575) | 0) | 0;
    $prev_HB_gain = $st + 14204 | 0;
    $577 = +HEAPF32[$prev_HB_gain >> 2];
    do if ($HB_gain$1 < 1.0 | $577 < 1.0) {
     $578 = HEAP32[$celt_mode >> 2] | 0;
     $580 = HEAP32[$channels101 >> 2] | 0;
     $581 = HEAP32[$578 + 60 >> 2] | 0;
     $div$i1315 = 48e3 / (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) | 0;
     $div1$i1316 = (HEAP32[$578 + 4 >> 2] | 0) / ($div$i1315 | 0) | 0;
     $cmp255$i1318 = ($div1$i1316 | 0) > 0;
     do if (($580 | 0) == 1) {
      if (!$cmp255$i1318) break;
      $i$056$i1321 = 0;
      do {
       $583 = +HEAPF32[$581 + ((Math_imul($i$056$i1321, $div$i1315) | 0) << 2) >> 2];
       $mul5$i1324 = $583 * $583;
       $arrayidx8$i1329 = $vla + ($i$056$i1321 << 2) | 0;
       HEAPF32[$arrayidx8$i1329 >> 2] = +HEAPF32[$arrayidx8$i1329 >> 2] * ($HB_gain$1 * $mul5$i1324 + $577 * (1.0 - $mul5$i1324));
       $i$056$i1321 = $i$056$i1321 + 1 | 0;
      } while (($i$056$i1321 | 0) != ($div1$i1316 | 0));
     } else {
      if (!$cmp255$i1318) break;
      $i$158$i1337 = 0;
      do {
       $585 = +HEAPF32[$581 + ((Math_imul($i$158$i1337, $div$i1315) | 0) << 2) >> 2];
       $mul21$i1340 = $585 * $585;
       $add25$i1343 = $HB_gain$1 * $mul21$i1340 + $577 * (1.0 - $mul21$i1340);
       $mul26$i1344 = $i$158$i1337 << 1;
       $arrayidx27$i1345 = $vla + ($mul26$i1344 << 2) | 0;
       HEAPF32[$arrayidx27$i1345 >> 2] = +HEAPF32[$arrayidx27$i1345 >> 2] * $add25$i1343;
       $arrayidx33$i1349 = $vla + (($mul26$i1344 | 1) << 2) | 0;
       HEAPF32[$arrayidx33$i1349 >> 2] = +HEAPF32[$arrayidx33$i1349 >> 2] * $add25$i1343;
       $i$158$i1337 = $i$158$i1337 + 1 | 0;
      } while (($i$158$i1337 | 0) != ($div1$i1316 | 0));
     } while (0);
     if (($div1$i1316 | 0) >= ($frame_size | 0)) break;
     $c$0$us$i1358 = 0;
     do {
      $i$254$us$i1360 = $div1$i1316;
      do {
       $arrayidx46$us$i1363 = $vla + ((Math_imul($i$254$us$i1360, $580) | 0) + $c$0$us$i1358 << 2) | 0;
       HEAPF32[$arrayidx46$us$i1363 >> 2] = $HB_gain$1 * +HEAPF32[$arrayidx46$us$i1363 >> 2];
       $i$254$us$i1360 = $i$254$us$i1360 + 1 | 0;
      } while (($i$254$us$i1360 | 0) != ($frame_size | 0));
      $c$0$us$i1358 = $c$0$us$i1358 + 1 | 0;
     } while (($c$0$us$i1358 | 0) < ($580 | 0));
    } while (0);
    HEAPF32[$prev_HB_gain >> 2] = $HB_gain$1;
    $589 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    $cmp1687 = ($589 | 0) == 1001;
    if ($cmp1687) {
     if ((HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0) == 1) label = 532;
    } else label = 532;
    if ((label | 0) == 532) {
     do if (($equiv$3$i14751621 | 0) > 32e3) $$sink1657 = 16384; else {
      if (($equiv$3$i14751621 | 0) < 16e3) {
       $$sink1657 = 0;
       break;
      }
      $$sink1657 = 16384 - ((65536e3 - ($equiv$3$i14751621 << 11) | 0) / ($equiv$3$i14751621 + -14e3 | 0) | 0) | 0;
     } while (0);
     HEAP32[$st + 92 >> 2] = $$sink1657;
    }
    do if (!(HEAP32[$st + 14256 >> 2] | 0)) {
     if ((HEAP32[$channels101 >> 2] | 0) != 2) break;
     $hybrid_stereo_width_Q14 = $st + 14196 | 0;
     $593 = HEAP16[$hybrid_stereo_width_Q14 >> 1] | 0;
     $$pre1607 = HEAP32[$st + 92 >> 2] | 0;
     if (!($593 << 16 >> 16 < 16384 | ($$pre1607 | 0) < 16384)) break;
     $594 = HEAP32[$celt_mode >> 2] | 0;
     $596 = HEAP32[$594 + 60 >> 2] | 0;
     $div$i1372 = 48e3 / (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) | 0;
     $div1$i1373 = (HEAP32[$594 + 4 >> 2] | 0) / ($div$i1372 | 0) | 0;
     $sub$i1374 = 1.0 - +($593 << 16 >> 16) * .00006103515625;
     $sub2$i1375 = 1.0 - +($$pre1607 | 0) * .00006103515625;
     if (($div1$i1373 | 0) > 0) {
      $i$060$i = 0;
      do {
       $598 = +HEAPF32[$596 + ((Math_imul($i$060$i, $div$i1372) | 0) << 2) >> 2];
       $mul5$i1379 = $598 * $598;
       $mul9$i1384 = $i$060$i << 1;
       $arrayidx10$i1385 = $vla + ($mul9$i1384 << 2) | 0;
       $599 = +HEAPF32[$arrayidx10$i1385 >> 2];
       $arrayidx13$i = $vla + (($mul9$i1384 | 1) << 2) | 0;
       $600 = +HEAPF32[$arrayidx13$i >> 2];
       $mul16$i1388 = ($sub2$i1375 * $mul5$i1379 + $sub$i1374 * (1.0 - $mul5$i1379)) * (($599 - $600) * .5);
       HEAPF32[$arrayidx10$i1385 >> 2] = $599 - $mul16$i1388;
       HEAPF32[$arrayidx13$i >> 2] = $600 + $mul16$i1388;
       $i$060$i = $i$060$i + 1 | 0;
      } while (($i$060$i | 0) != ($div1$i1373 | 0));
      $i$0$lcssa$i = $div1$i1373;
     } else $i$0$lcssa$i = 0;
     if (($i$0$lcssa$i | 0) < ($frame_size | 0)) {
      $i$158$i1395 = $i$0$lcssa$i;
      do {
       $mul34$i1396 = $i$158$i1395 << 1;
       $arrayidx35$i1397 = $vla + ($mul34$i1396 << 2) | 0;
       $601 = +HEAPF32[$arrayidx35$i1397 >> 2];
       $arrayidx38$i = $vla + (($mul34$i1396 | 1) << 2) | 0;
       $602 = +HEAPF32[$arrayidx38$i >> 2];
       $mul41$i = $sub2$i1375 * (($601 - $602) * .5);
       HEAPF32[$arrayidx35$i1397 >> 2] = $601 - $mul41$i;
       HEAPF32[$arrayidx38$i >> 2] = $602 + $mul41$i;
       $i$158$i1395 = $i$158$i1395 + 1 | 0;
      } while (($i$158$i1395 | 0) != ($frame_size | 0));
     }
     HEAP16[$hybrid_stereo_width_Q14 >> 1] = $$pre1607;
    } while (0);
    do if (($589 | 0) == 1002) label = 603; else {
     $enc$idx985$val = HEAP32[$nbits_total$i >> 2] | 0;
     $enc$idx986$val = HEAP32[$rng$i >> 2] | 0;
     $603 = Math_clz32($enc$idx986$val | 0) | 0;
     if ((($cmp1687 ? 5 : -15) + $enc$idx985$val + $603 | 0) > ($sub911 << 3 | 0)) {
      label = 603;
      break;
     }
     do if ($cmp1687) {
      $shr$i114 = $enc$idx986$val >>> 12;
      $sub$i115 = $enc$idx986$val - $shr$i114 | 0;
      $tobool$i116 = ($redundancy$6 | 0) != 0;
      if ($tobool$i116) HEAP32[$val$i >> 2] = (HEAP32[$val$i >> 2] | 0) + $sub$i115;
      $cond$i119 = $tobool$i116 ? $shr$i114 : $sub$i115;
      HEAP32[$rng$i >> 2] = $cond$i119;
      if ($cond$i119 >>> 0 >= 8388609) {
       $623 = $cond$i119;
       $729 = $enc$idx985$val;
       break;
      }
      $605 = HEAP32[$val$i >> 2] | 0;
      $730 = $enc$idx985$val;
      $731 = $cond$i119;
      while (1) {
       $shr$i$i = $605 >>> 23;
       if (($shr$i$i | 0) == 255) {
        HEAP32[$ext$i >> 2] = (HEAP32[$ext$i >> 2] | 0) + 1;
        $620 = $605;
        $621 = $731;
        $622 = $730;
       } else {
        $shr$i7$i$i = $605 >>> 31;
        $606 = HEAP32[$rem$i >> 2] | 0;
        if (($606 | 0) > -1) {
         $607 = HEAP32[$offs$i >> 2] | 0;
         if (((HEAP32[$end_offs$i >> 2] | 0) + $607 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
          $610 = HEAP32[$enc >> 2] | 0;
          HEAP32[$offs$i >> 2] = $607 + 1;
          HEAP8[$610 + $607 >> 0] = $606 + $shr$i7$i$i;
          $retval$0$i$i$i$i131 = 0;
         } else $retval$0$i$i$i$i131 = -1;
         HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i$i$i131;
        }
        $612 = HEAP32[$ext$i >> 2] | 0;
        if ($612 | 0) {
         $conv$i20$i$i$i = $shr$i7$i$i + 255 & 255;
         $732 = $612;
         do {
          $613 = HEAP32[$offs$i >> 2] | 0;
          if (((HEAP32[$end_offs$i >> 2] | 0) + $613 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
           $616 = HEAP32[$enc >> 2] | 0;
           HEAP32[$offs$i >> 2] = $613 + 1;
           HEAP8[$616 + $613 >> 0] = $conv$i20$i$i$i;
           $618 = HEAP32[$ext$i >> 2] | 0;
           $retval$0$i25$i$i$i = 0;
          } else {
           $618 = $732;
           $retval$0$i25$i$i$i = -1;
          }
          HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i25$i$i$i;
          $732 = $618 + -1 | 0;
          HEAP32[$ext$i >> 2] = $732;
         } while (($732 | 0) != 0);
        }
        HEAP32[$rem$i >> 2] = $shr$i$i & 255;
        $620 = HEAP32[$val$i >> 2] | 0;
        $621 = HEAP32[$rng$i >> 2] | 0;
        $622 = HEAP32[$nbits_total$i >> 2] | 0;
       }
       $605 = $620 << 8 & 2147483392;
       HEAP32[$val$i >> 2] = $605;
       $shl4$i$i = $621 << 8;
       HEAP32[$rng$i >> 2] = $shl4$i$i;
       $add$i$i138 = $622 + 8 | 0;
       HEAP32[$nbits_total$i >> 2] = $add$i$i138;
       if ($shl4$i$i >>> 0 >= 8388609) {
        $623 = $shl4$i$i;
        $729 = $add$i$i138;
        break;
       } else {
        $730 = $add$i$i138;
        $731 = $shl4$i$i;
       }
      }
     } else {
      $623 = $enc$idx986$val;
      $729 = $enc$idx985$val;
     } while (0);
     if (!$redundancy$6) {
      label = 603;
      break;
     }
     $shr$i142 = $623 >>> 1;
     $sub$i143 = $623 - $shr$i142 | 0;
     $tobool$i144 = ($celt_to_silk$4 | 0) != 0;
     if ($tobool$i144) HEAP32[$val$i >> 2] = (HEAP32[$val$i >> 2] | 0) + $sub$i143;
     $cond$i147 = $tobool$i144 ? $shr$i142 : $sub$i143;
     HEAP32[$rng$i >> 2] = $cond$i147;
     if ($cond$i147 >>> 0 < 8388609) {
      $625 = HEAP32[$val$i >> 2] | 0;
      $733 = $729;
      $734 = $cond$i147;
      while (1) {
       $shr$i$i160 = $625 >>> 23;
       if (($shr$i$i160 | 0) == 255) {
        HEAP32[$ext$i >> 2] = (HEAP32[$ext$i >> 2] | 0) + 1;
        $640 = $625;
        $641 = $734;
        $642 = $733;
       } else {
        $shr$i7$i$i163 = $625 >>> 31;
        $626 = HEAP32[$rem$i >> 2] | 0;
        if (($626 | 0) > -1) {
         $627 = HEAP32[$offs$i >> 2] | 0;
         if (((HEAP32[$end_offs$i >> 2] | 0) + $627 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
          $630 = HEAP32[$enc >> 2] | 0;
          HEAP32[$offs$i >> 2] = $627 + 1;
          HEAP8[$630 + $627 >> 0] = $626 + $shr$i7$i$i163;
          $retval$0$i$i$i$i174 = 0;
         } else $retval$0$i$i$i$i174 = -1;
         HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i$i$i174;
        }
        $632 = HEAP32[$ext$i >> 2] | 0;
        if ($632 | 0) {
         $conv$i20$i$i$i180 = $shr$i7$i$i163 + 255 & 255;
         $735 = $632;
         do {
          $633 = HEAP32[$offs$i >> 2] | 0;
          if (((HEAP32[$end_offs$i >> 2] | 0) + $633 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
           $636 = HEAP32[$enc >> 2] | 0;
           HEAP32[$offs$i >> 2] = $633 + 1;
           HEAP8[$636 + $633 >> 0] = $conv$i20$i$i$i180;
           $638 = HEAP32[$ext$i >> 2] | 0;
           $retval$0$i25$i$i$i189 = 0;
          } else {
           $638 = $735;
           $retval$0$i25$i$i$i189 = -1;
          }
          HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i25$i$i$i189;
          $735 = $638 + -1 | 0;
          HEAP32[$ext$i >> 2] = $735;
         } while (($735 | 0) != 0);
        }
        HEAP32[$rem$i >> 2] = $shr$i$i160 & 255;
        $640 = HEAP32[$val$i >> 2] | 0;
        $641 = HEAP32[$rng$i >> 2] | 0;
        $642 = HEAP32[$nbits_total$i >> 2] | 0;
       }
       $625 = $640 << 8 & 2147483392;
       HEAP32[$val$i >> 2] = $625;
       $shl4$i$i202 = $641 << 8;
       HEAP32[$rng$i >> 2] = $shl4$i$i202;
       $add$i$i203 = $642 + 8 | 0;
       HEAP32[$nbits_total$i >> 2] = $add$i$i203;
       if ($shl4$i$i202 >>> 0 >= 8388609) {
        $644 = $shl4$i$i202;
        $enc$idx983$val = $add$i$i203;
        break;
       } else {
        $733 = $add$i$i203;
        $734 = $shl4$i$i202;
       }
      }
     } else {
      $644 = $cond$i147;
      $enc$idx983$val = $729;
     }
     $cmp1772 = (HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) == 1001;
     $645 = Math_clz32($644 | 0) | 0;
     $max_redundancy$0 = $sub911 - ($enc$idx983$val + -32 + ($cmp1772 ? 18 : 7) + $645 >> 3) | 0;
     $cond1794 = ($max_redundancy$0 | 0) < ($redundancy_bytes$3 | 0) ? $max_redundancy$0 : $redundancy_bytes$3;
     $cond1800 = ($cond1794 | 0) > 2 ? $cond1794 : 2;
     $spec$select975 = ($cond1800 | 0) < 257 ? $cond1800 : 257;
     if (!$cmp1772) {
      $redundancy$71503 = $redundancy$6;
      $redundancy_bytes$5 = $spec$select975;
      $tobool18221505 = 1;
      break;
     }
     $div$i$i235 = $644 >>> 8;
     if (($spec$select975 | 0) == 2) $storemerge$i = $644 + (Math_imul($div$i$i235, -255) | 0) | 0; else {
      $sub2$i239 = $644 - (Math_imul($div$i$i235, 258 - $spec$select975 | 0) | 0) | 0;
      HEAP32[$val$i >> 2] = $sub2$i239 + (HEAP32[$val$i >> 2] | 0);
      $storemerge$i = $div$i$i235;
     }
     HEAP32[$rng$i >> 2] = $storemerge$i;
     if ($storemerge$i >>> 0 >= 8388609) {
      $redundancy$71503 = $redundancy$6;
      $redundancy_bytes$5 = $spec$select975;
      $tobool18221505 = 1;
      break;
     }
     $650 = HEAP32[$val$i >> 2] | 0;
     $736 = $enc$idx983$val;
     $737 = $storemerge$i;
     do {
      $shr$i$i257 = $650 >>> 23;
      if (($shr$i$i257 | 0) == 255) {
       HEAP32[$ext$i >> 2] = (HEAP32[$ext$i >> 2] | 0) + 1;
       $665 = $650;
       $666 = $737;
       $667 = $736;
      } else {
       $shr$i7$i$i260 = $650 >>> 31;
       $651 = HEAP32[$rem$i >> 2] | 0;
       if (($651 | 0) > -1) {
        $652 = HEAP32[$offs$i >> 2] | 0;
        if (((HEAP32[$end_offs$i >> 2] | 0) + $652 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
         $655 = HEAP32[$enc >> 2] | 0;
         HEAP32[$offs$i >> 2] = $652 + 1;
         HEAP8[$655 + $652 >> 0] = $651 + $shr$i7$i$i260;
         $retval$0$i$i$i$i271 = 0;
        } else $retval$0$i$i$i$i271 = -1;
        HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i$i$i271;
       }
       $657 = HEAP32[$ext$i >> 2] | 0;
       if ($657 | 0) {
        $conv$i20$i$i$i277 = $shr$i7$i$i260 + 255 & 255;
        $738 = $657;
        do {
         $658 = HEAP32[$offs$i >> 2] | 0;
         if (((HEAP32[$end_offs$i >> 2] | 0) + $658 | 0) >>> 0 < (HEAP32[$storage$i >> 2] | 0) >>> 0) {
          $661 = HEAP32[$enc >> 2] | 0;
          HEAP32[$offs$i >> 2] = $658 + 1;
          HEAP8[$661 + $658 >> 0] = $conv$i20$i$i$i277;
          $663 = HEAP32[$ext$i >> 2] | 0;
          $retval$0$i25$i$i$i286 = 0;
         } else {
          $663 = $738;
          $retval$0$i25$i$i$i286 = -1;
         }
         HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i25$i$i$i286;
         $738 = $663 + -1 | 0;
         HEAP32[$ext$i >> 2] = $738;
        } while (($738 | 0) != 0);
       }
       HEAP32[$rem$i >> 2] = $shr$i$i257 & 255;
       $665 = HEAP32[$val$i >> 2] | 0;
       $666 = HEAP32[$rng$i >> 2] | 0;
       $667 = HEAP32[$nbits_total$i >> 2] | 0;
      }
      $650 = $665 << 8 & 2147483392;
      HEAP32[$val$i >> 2] = $650;
      $737 = $666 << 8;
      HEAP32[$rng$i >> 2] = $737;
      $736 = $667 + 8 | 0;
      HEAP32[$nbits_total$i >> 2] = $736;
     } while ($737 >>> 0 < 8388609);
     $redundancy$71503 = $redundancy$6;
     $redundancy_bytes$5 = $spec$select975;
     $tobool18221505 = 1;
    } while (0);
    if ((label | 0) == 603) {
     HEAP32[$silk_bw_switch >> 2] = 0;
     $redundancy$71503 = 0;
     $redundancy_bytes$5 = 0;
     $tobool18221505 = 0;
    }
    $668 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    $spec$select976 = ($668 | 0) == 1002 ? 0 : 17;
    do if (($668 | 0) == 1e3) {
     $shr1837 = (HEAP32[$nbits_total$i >> 2] | 0) + -25 + (Math_clz32(HEAP32[$rng$i >> 2] | 0) | 0) >> 3;
     _ec_enc_done($enc);
     $nb_compr_bytes$0 = $shr1837;
     $ret$2 = $shr1837;
    } else {
     $sub1840 = $sub911 - $redundancy_bytes$5 | 0;
     $671 = HEAP32[$end_offs$i >> 2] | 0;
     if (($671 + (HEAP32[$offs$i >> 2] | 0) | 0) >>> 0 > $sub1840 >>> 0) _celt_fatal(49175, 49097, 238); else {
      $672 = HEAP32[$enc >> 2] | 0;
      $idx$neg$i216 = 0 - $671 | 0;
      _memmove($672 + $sub1840 + $idx$neg$i216 | 0, $672 + (HEAP32[$storage$i >> 2] | 0) + $idx$neg$i216 | 0, $671 | 0) | 0;
      HEAP32[$storage$i >> 2] = $sub1840;
      $nb_compr_bytes$0 = $sub1840;
      $ret$2 = 0;
      break;
     }
    } while (0);
    do if ($tobool18221505) label = 612; else {
     if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) != 1e3) {
      label = 612;
      break;
     }
     $or$cond161511 = 0;
     $tobool18721510 = ($celt_to_silk$4 | 0) != 0;
    } while (0);
    do if ((label | 0) == 612) {
     HEAP32[$vararg_buffer34 >> 2] = $analysis_info;
     _opus_custom_encoder_ctl($add$ptr7, 10022, $vararg_buffer34) | 0;
     if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) == 1001) {
      HEAP32[$vararg_buffer34 >> 2] = HEAP32[$st + 100 >> 2];
      HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[$st + 104 >> 2];
      HEAP32[$vararg_buffer37 >> 2] = $vararg_buffer34;
      _opus_custom_encoder_ctl($add$ptr7, 10028, $vararg_buffer37) | 0;
     }
     $tobool1872 = ($celt_to_silk$4 | 0) != 0;
     if (!($tobool1872 & $tobool18221505)) {
      $or$cond161511 = 0;
      $tobool18721510 = $tobool1872;
      break;
     }
     HEAP32[$vararg_buffer40 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 10010, $vararg_buffer40) | 0;
     HEAP32[$vararg_buffer43 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 4006, $vararg_buffer43) | 0;
     HEAP32[$vararg_buffer46 >> 2] = -1;
     _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer46) | 0;
     if ((_celt_encode_with_ec($add$ptr7, $vla, (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) / 200 | 0, $add$ptr910 + $nb_compr_bytes$0 | 0, $redundancy_bytes$5, 0) | 0) < 0) {
      $retval$5 = -3;
      break L684;
     }
     HEAP32[$vararg_buffer49 >> 2] = $redundant_rng;
     _opus_custom_encoder_ctl($add$ptr7, 4031, $vararg_buffer49) | 0;
     _opus_custom_encoder_ctl($add$ptr7, 4028, $vararg_buffer52) | 0;
     $or$cond161511 = 1;
     $tobool18721510 = 1;
    } while (0);
    HEAP32[$vararg_buffer54 >> 2] = $spec$select976;
    _opus_custom_encoder_ctl($add$ptr7, 10010, $vararg_buffer54) | 0;
    $678 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    do if (($678 | 0) == 1e3) {
     $nb_compr_bytes$1 = $nb_compr_bytes$0;
     $ret$3 = $ret$2;
    } else {
     $679 = HEAP32[$prev_mode468 >> 2] | 0;
     if (($678 | 0) != ($679 | 0) & ($679 | 0) > 0) {
      _opus_custom_encoder_ctl($add$ptr7, 4028, $vararg_buffer57) | 0;
      _celt_encode_with_ec($add$ptr7, $vla15431493, (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) / 400 | 0, $vararg_buffer54, 2, 0) | 0;
      HEAP32[$vararg_buffer59 >> 2] = 0;
      _opus_custom_encoder_ctl($add$ptr7, 10002, $vararg_buffer59) | 0;
     }
     if (((HEAP32[$nbits_total$i >> 2] | 0) + -32 + (Math_clz32(HEAP32[$rng$i >> 2] | 0) | 0) | 0) > ($nb_compr_bytes$0 << 3 | 0)) {
      $nb_compr_bytes$1 = $nb_compr_bytes$0;
      $ret$3 = $ret$2;
      break;
     }
     do if ($or$cond161511) {
      if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) != 1001) break;
      if (!(HEAP32[$use_vbr >> 2] | 0)) break;
      HEAP32[$vararg_buffer62 >> 2] = (HEAP32[$bitrate_bps >> 2] | 0) - (HEAP32[$st + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer62) | 0;
     } while (0);
     HEAP32[$vararg_buffer65 >> 2] = HEAP32[$use_vbr >> 2];
     _opus_custom_encoder_ctl($add$ptr7, 4006, $vararg_buffer65) | 0;
     $call1953 = _celt_encode_with_ec($add$ptr7, $vla, $frame_size, 0, $nb_compr_bytes$0, $enc) | 0;
     if (($call1953 | 0) < 0) {
      $retval$5 = -3;
      break L684;
     }
     if (!$or$cond161511) {
      $nb_compr_bytes$1 = $nb_compr_bytes$0;
      $ret$3 = $call1953;
      break;
     }
     if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) != 1001) {
      $nb_compr_bytes$1 = $nb_compr_bytes$0;
      $ret$3 = $call1953;
      break;
     }
     if (!(HEAP32[$use_vbr >> 2] | 0)) {
      $nb_compr_bytes$1 = $nb_compr_bytes$0;
      $ret$3 = $call1953;
      break;
     }
     _memmove($add$ptr910 + $call1953 | 0, $add$ptr910 + $nb_compr_bytes$0 | 0, $redundancy_bytes$5 | 0) | 0;
     $nb_compr_bytes$1 = $nb_compr_bytes$0 + $redundancy_bytes$5 | 0;
     $ret$3 = $call1953;
    } while (0);
    do if (!(($redundancy$71503 | 0) == 0 | $tobool18721510)) {
     $689 = HEAP32[$Fs113$pre$phiZ2D >> 2] | 0;
     $div1990 = ($689 | 0) / 200 | 0;
     $div1992 = ($689 | 0) / 400 | 0;
     _opus_custom_encoder_ctl($add$ptr7, 4028, $vararg_buffer68) | 0;
     HEAP32[$vararg_buffer70 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 10010, $vararg_buffer70) | 0;
     HEAP32[$vararg_buffer73 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 10002, $vararg_buffer73) | 0;
     HEAP32[$vararg_buffer76 >> 2] = 0;
     _opus_custom_encoder_ctl($add$ptr7, 4006, $vararg_buffer76) | 0;
     HEAP32[$vararg_buffer79 >> 2] = -1;
     _opus_custom_encoder_ctl($add$ptr7, 4002, $vararg_buffer79) | 0;
     do if ((HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) == 1001) {
      $692 = HEAP32[$end_offs$i >> 2] | 0;
      if (($692 + (HEAP32[$offs$i >> 2] | 0) | 0) >>> 0 > $ret$3 >>> 0) _celt_fatal(49175, 49097, 238); else {
       $693 = HEAP32[$enc >> 2] | 0;
       $idx$neg$i227 = 0 - $692 | 0;
       _memmove($693 + $ret$3 + $idx$neg$i227 | 0, $693 + (HEAP32[$storage$i >> 2] | 0) + $idx$neg$i227 | 0, $692 | 0) | 0;
       HEAP32[$storage$i >> 2] = $ret$3;
       $nb_compr_bytes$2 = $ret$3;
       break;
      }
     } else $nb_compr_bytes$2 = $nb_compr_bytes$1; while (0);
     $sub2004 = $frame_size - $div1990 | 0;
     _celt_encode_with_ec($add$ptr7, $vla + ((Math_imul(HEAP32[$channels101 >> 2] | 0, $sub2004 - $div1992 | 0) | 0) << 2) | 0, $div1992, $vararg_buffer54, 2, 0) | 0;
     if ((_celt_encode_with_ec($add$ptr7, $vla + ((Math_imul(HEAP32[$channels101 >> 2] | 0, $sub2004) | 0) << 2) | 0, $div1990, $add$ptr910 + $nb_compr_bytes$2 | 0, $redundancy_bytes$5, 0) | 0) < 0) {
      $retval$5 = -3;
      break L684;
     } else {
      HEAP32[$vararg_buffer82 >> 2] = $redundant_rng;
      _opus_custom_encoder_ctl($add$ptr7, 4031, $vararg_buffer82) | 0;
      break;
     }
    } while (0);
    $697 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
    $div2035 = (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) / ($frame_size | 0) | 0;
    $699 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
    if (($div2035 | 0) < 400) {
     $framerate$addr$019$i1411 = $div2035;
     $period$018$i1412 = 0;
     do {
      $framerate$addr$019$i1411 = $framerate$addr$019$i1411 << 1;
      $period$018$i1412 = $period$018$i1412 + 1 | 0;
     } while (($framerate$addr$019$i1411 | 0) < 400);
     $period$0$lcssa$i1419 = $period$018$i1412 << 3;
    } else $period$0$lcssa$i1419 = 0;
    switch ($697 | 0) {
    case 1e3:
     {
      $toc$0$in$i1439 = $period$0$lcssa$i1419 + -16 | ($curr_bandwidth$2 << 5) + 96 & 224;
      break;
     }
    case 1002:
     {
      $sub10$i1427 = $curr_bandwidth$2 + -1102 | 0;
      $toc$0$in$i1439 = (($sub10$i1427 | 0) > 0 ? $sub10$i1427 : 0) << 5 & 96 | $period$0$lcssa$i1419 | 128;
      break;
     }
    default:
     $toc$0$in$i1439 = $curr_bandwidth$2 << 4 | $period$0$lcssa$i1419 + 240 | 96;
    }
    HEAP8[$data >> 0] = $toc$0$in$i1439 | (($699 | 0) == 2 & 1) << 2;
    $701 = HEAP32[$rng$i >> 2] | 0;
    HEAP32[$rangeFinal >> 2] = HEAP32[$redundant_rng >> 2] ^ $701;
    if (!$to_celt$0) $storemerge = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0; else $storemerge = 1002;
    HEAP32[$prev_mode468 >> 2] = $storemerge;
    $704 = HEAP32[$stream_channels350$pre$phiZ2D >> 2] | 0;
    HEAP32[$st + 14232 >> 2] = $704;
    HEAP32[$st + 14236 >> 2] = $frame_size;
    HEAP32[$st + 14252 >> 2] = 0;
    do if (!(HEAP32[$use_dtx >> 2] | 0)) label = 669; else {
     if (!(HEAP32[$analysis_info >> 2] | $is_silence$01465)) {
      label = 669;
      break;
     }
     $nb_no_activity_frames = $st + 18124 | 0;
     $710 = +HEAPF32[$st + 18128 >> 2];
     if ($tobool541467 & +HEAPF32[$analysis_info + 36 >> 2] < .10000000149011612) {
      $mul$i$i1449 = Math_imul(HEAP32[$channels101 >> 2] | 0, $frame_size) | 0;
      if (($mul$i$i1449 | 0) > 0) {
       $i$07$i$i$i = 0;
       $xy$08$i$i$i = 0.0;
       while (1) {
        $712 = +HEAPF32[$pcm + ($i$07$i$i$i << 2) >> 2];
        $add$i$i$i = $xy$08$i$i$i + $712 * $712;
        $i$07$i$i$i = $i$07$i$i$i + 1 | 0;
        if (($i$07$i$i$i | 0) == ($mul$i$i1449 | 0)) {
         $xy$0$lcssa$i$i$i = $add$i$i$i;
         break;
        } else $xy$08$i$i$i = $add$i$i$i;
       }
      } else $xy$0$lcssa$i$i$i = 0.0;
      $is_silence$addr$0$i = $xy$0$lcssa$i$i$i / +($mul$i$i1449 | 0) * 316.2300109863281 <= $710 & 1;
     } else $is_silence$addr$0$i = $is_silence$01465;
     if (!$is_silence$addr$0$i) {
      HEAP32[$nb_no_activity_frames >> 2] = 0;
      break;
     }
     $713 = HEAP32[$nb_no_activity_frames >> 2] | 0;
     HEAP32[$nb_no_activity_frames >> 2] = $713 + 1;
     if (($713 | 0) <= 9) break;
     if (($713 | 0) >= 30) {
      HEAP32[$nb_no_activity_frames >> 2] = 10;
      break;
     }
     HEAP32[$rangeFinal >> 2] = 0;
     $714 = HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0;
     $div2068 = (HEAP32[$Fs113$pre$phiZ2D >> 2] | 0) / ($frame_size | 0) | 0;
     if (($div2068 | 0) < 400) {
      $framerate$addr$019$i1072 = $div2068;
      $period$018$i1073 = 0;
      do {
       $framerate$addr$019$i1072 = $framerate$addr$019$i1072 << 1;
       $period$018$i1073 = $period$018$i1073 + 1 | 0;
      } while (($framerate$addr$019$i1072 | 0) < 400);
      $period$0$lcssa$i1080 = $period$018$i1073 << 3;
     } else $period$0$lcssa$i1080 = 0;
     switch ($714 | 0) {
     case 1e3:
      {
       $toc$0$in$i1100 = $period$0$lcssa$i1080 + -16 | ($curr_bandwidth$2 << 5) + 96 & 224;
       break;
      }
     case 1002:
      {
       $sub10$i1088 = $curr_bandwidth$2 + -1102 | 0;
       $toc$0$in$i1100 = (($sub10$i1088 | 0) > 0 ? $sub10$i1088 : 0) << 5 & 96 | $period$0$lcssa$i1080 | 128;
       break;
      }
     default:
      $toc$0$in$i1100 = $curr_bandwidth$2 << 4 | $period$0$lcssa$i1080 + 240 | 96;
     }
     HEAP8[$data >> 0] = $toc$0$in$i1100 | (($704 | 0) == 2 & 1) << 2;
     $retval$5 = 1;
     break L684;
    } while (0);
    if ((label | 0) == 669) HEAP32[$st + 18124 >> 2] = 0;
    L933 : do if (((HEAP32[$nbits_total$i >> 2] | 0) + -32 + (Math_clz32($701 | 0) | 0) | 0) > ($sub911 << 3 | 0)) {
     if (($max_data_bytes$0 | 0) < 2) {
      $retval$5 = -2;
      break L684;
     }
     HEAP8[$add$ptr910 >> 0] = 0;
     HEAP32[$rangeFinal >> 2] = 0;
     $ret$5 = 1;
    } else {
     if (!(($ret$3 | 0) > 2 & (($tobool18221505 | (HEAP32[$mode453$pre$phi1614Z2D >> 2] | 0) != 1e3) ^ 1))) {
      $ret$5 = $ret$3;
      break;
     }
     $ret$41542 = $ret$3;
     while (1) {
      if (HEAP8[$data + $ret$41542 >> 0] | 0) {
       $ret$5 = $ret$41542;
       break L933;
      }
      $dec2104 = $ret$41542 + -1 | 0;
      if (($ret$41542 | 0) > 3) $ret$41542 = $dec2104; else {
       $ret$5 = $dec2104;
       break;
      }
     }
    } while (0);
    $add2108 = $redundancy_bytes$5 + 1 + $ret$5 | 0;
    if (HEAP32[$use_vbr >> 2] | 0) {
     $retval$5 = $add2108;
     break;
    }
    do if (($add2108 | 0) >= 1) {
     if (($add2108 | 0) != ($max_data_bytes$0 | 0)) {
      if (($add2108 | 0) > ($max_data_bytes$0 | 0)) break;
      $nb_frames$i$i = $vararg_buffer54 + 4 | 0;
      HEAP32[$nb_frames$i$i >> 2] = 0;
      $add$ptr7$i = $data + $max_data_bytes$0 + (0 - $add2108) | 0;
      _memmove($add$ptr7$i | 0, $data | 0, $add2108 | 0) | 0;
      if (_opus_repacketizer_cat($vararg_buffer54, $add$ptr7$i, $add2108) | 0) break;
      if ((_opus_repacketizer_out_range_impl($vararg_buffer54, HEAP32[$nb_frames$i$i >> 2] | 0, $data, $max_data_bytes$0, 1) | 0) < 0) break;
     }
     $retval$5 = $max_data_bytes$0;
     break L684;
    } while (0);
    $retval$5 = -3;
   } while (0);
   _llvm_stackrestore($467 | 0);
   $retval$6 = $retval$5;
   STACKTOP = sp;
   return $retval$6 | 0;
  } else $enc_frame_size$0 = $div814; while (0);
  if (($analysis_read_pos_bak$01461 | 0) != -1) {
   HEAP32[$st + 7636 >> 2] = $analysis_read_pos_bak$01461;
   HEAP32[$st + 7640 >> 2] = $analysis_read_subframe_bak$01463;
  }
  $retval$6 = _encode_multiframe_packet($st, $pcm, ($frame_size | 0) / ($enc_frame_size$0 | 0) | 0, $enc_frame_size$0, $data, $out_data_bytes, $to_celt$0, $lsb_depth$) | 0;
  STACKTOP = sp;
  return $retval$6 | 0;
 } while (0);
 $375 = HEAP32[$st + 14224 >> 2] | 0;
 $376 = HEAP32[$st + 14240 >> 2] | 0;
 $spec$select = ($376 | 0) == 0 ? 1101 : $376;
 $spec$select957 = ($div | 0) > 100 ? 1002 : ($375 | 0) == 0 ? 1e3 : $375;
 $or$cond4 = ($div | 0) == 25 & ($spec$select957 | 0) != 1e3;
 $packet_code$0 = $or$cond4 & 1;
 $frame_rate$0 = $or$cond4 ? 50 : $div;
 do if (($frame_rate$0 | 0) < 17) {
  if (($out_data_bytes | 0) != 1) if (!(($spec$select957 | 0) == 1e3 & ($frame_rate$0 | 0) != 10)) {
   $frame_rate$1 = 50;
   $num_multiframes$0 = (50 / ($frame_rate$0 | 0) | 0) & 255;
   $packet_code$1 = 3;
   $tocmode$2 = $spec$select957;
   break;
  }
  $frame_rate$1 = ($frame_rate$0 | 0) == 12 ? 25 : 16;
  $num_multiframes$0 = 0;
  $packet_code$1 = ($frame_rate$0 | 0) < 13 & 1;
  $tocmode$2 = 1e3;
 } else {
  $frame_rate$1 = $frame_rate$0;
  $num_multiframes$0 = 0;
  $packet_code$1 = $packet_code$0;
  $tocmode$2 = $spec$select957;
 } while (0);
 if (($spec$select | 0) > 1103 & ($tocmode$2 | 0) == 1e3) $bw$0 = 1103; else $bw$0 = ($spec$select | 0) == 1102 & ($tocmode$2 | 0) == 1002 ? 1101 : ($spec$select | 0) < 1105 & ($tocmode$2 | 0) == 1001 ? 1104 : $spec$select;
 $377 = HEAP32[$st + 14192 >> 2] | 0;
 if (($frame_rate$1 | 0) < 400) {
  $framerate$addr$019$i = $frame_rate$1;
  $period$018$i = 0;
  do {
   $framerate$addr$019$i = $framerate$addr$019$i << 1;
   $period$018$i = $period$018$i + 1 | 0;
  } while (($framerate$addr$019$i | 0) < 400);
  $period$0$lcssa$i = $period$018$i << 3;
 } else $period$0$lcssa$i = 0;
 switch ($tocmode$2 | 0) {
 case 1e3:
  {
   $toc$0$in$i = $period$0$lcssa$i + -16 | ($bw$0 << 5) + 96 & 224;
   break;
  }
 case 1002:
  {
   $sub10$i = $bw$0 + -1102 | 0;
   $toc$0$in$i = (($sub10$i | 0) > 0 ? $sub10$i : 0) << 5 & 96 | $period$0$lcssa$i | 128;
   break;
  }
 default:
  $toc$0$in$i = $bw$0 << 4 | $period$0$lcssa$i + 240 | 96;
 }
 HEAP8[$data >> 0] = (($377 | 0) == 2 & 1) << 2 | $packet_code$1 | $toc$0$in$i;
 $cond241 = $packet_code$1 >>> 0 < 2 ? 1 : 2;
 $cmp242 = ($max_data_bytes$01472 | 0) > ($cond241 | 0);
 $cond247 = $cmp242 ? $max_data_bytes$01472 : $cond241;
 if (($packet_code$1 | 0) == 3) HEAP8[$data + 1 >> 0] = $num_multiframes$0;
 if (HEAP32[$use_vbr >> 2] | 0) {
  $retval$6 = $cond241;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 do if ($cmp242) {
  $nb_frames$i$i78 = $vararg_buffer + 4 | 0;
  HEAP32[$nb_frames$i$i78 >> 2] = 0;
  $add$ptr7$i81 = $data + $cond247 + (0 - $cond241) | 0;
  _memmove($add$ptr7$i81 | 0, $data | 0, $cond241 | 0) | 0;
  if (!(_opus_repacketizer_cat($vararg_buffer, $add$ptr7$i81, $cond241) | 0)) if ((_opus_repacketizer_out_range_impl($vararg_buffer, HEAP32[$nb_frames$i$i78 >> 2] | 0, $data, $cond247, 1) | 0) >= 0) break;
  $retval$6 = -3;
  STACKTOP = sp;
  return $retval$6 | 0;
 } while (0);
 $retval$6 = $cond247;
 STACKTOP = sp;
 return $retval$6 | 0;
}
function _silk_encode_frame_FLP($psEnc, $pnBytesOut, $psRangeEnc, $condCoding, $maxBits, $useCBR) {
 $psEnc = $psEnc | 0;
 $pnBytesOut = $pnBytesOut | 0;
 $psRangeEnc = $psRangeEnc | 0;
 $condCoding = $condCoding | 0;
 $maxBits = $maxBits | 0;
 $useCBR = $useCBR | 0;
 var $$add660$i$i = 0, $$lcssa$i$i = 0.0, $$lcssa182222$i = 0, $$pr$i$i = 0, $$pr52$i$i = 0, $$pre$i284 = 0, $$pre215$i = 0, $$pre216$i = 0, $$sink$i$i = 0.0, $$sink$i$i276 = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $105 = 0, $11 = 0, $115 = 0, $13 = 0, $135 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $153 = 0.0, $155 = 0.0, $157 = 0.0, $161 = 0, $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $17 = 0, $19 = 0, $190 = 0, $191 = 0, $194 = 0.0, $195 = 0.0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $213 = 0, $216 = 0, $23 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $268 = 0, $269 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $281 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $291 = 0, $293 = 0.0, $295 = 0.0, $296 = 0.0, $299 = 0.0, $3 = 0, $301 = 0.0, $303 = 0.0, $305 = 0.0, $309 = 0.0, $311 = 0.0, $312 = 0.0, $315 = 0.0, $317 = 0.0, $319 = 0.0, $320 = 0, $328 = 0, $334 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $349 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $367 = 0.0, $369 = 0.0, $37 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $391 = 0.0, $392 = 0, $399 = 0, $4 = 0, $400 = 0.0, $410 = 0, $411 = 0, $417 = 0, $423 = 0, $441 = 0, $455 = 0, $463 = 0, $479 = 0, $492 = 0, $493 = 0, $498 = 0, $499 = 0, $5 = 0, $504 = 0, $512 = 0, $513 = 0, $517 = 0, $518 = 0, $521 = 0, $522 = 0, $523 = 0.0, $530 = 0.0, $537 = 0.0, $544 = 0.0, $55 = 0, $554 = 0, $558 = 0, $559 = 0.0, $56 = 0, $561 = 0.0, $565 = 0, $567 = 0, $570 = 0, $573 = 0, $576 = 0, $578 = 0, $579 = 0, $584 = 0, $595 = 0, $596 = 0, $598 = 0, $599 = 0, $600 = 0, $606 = 0, $607 = 0, $608 = 0, $620 = 0, $621 = 0, $630 = 0, $633 = 0, $637 = 0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $A$i = 0, $A_Q28$i$sroa$0$0 = 0, $A_Q28$i$sroa$7$0 = 0, $B_Q28$i$sroa$0$0 = 0, $B_Q28$i$sroa$10$0 = 0, $B_Q28$i$sroa$7$0 = 0, $Btmp$i$i$sroa$0$0$copyload525 = 0.0, $Btmp$i$i$sroa$5$0$copyload529 = 0.0, $Btmp$i$i$sroa$6$0$copyload533 = 0.0, $Btmp$i$i$sroa$7$0$copyload537 = 0.0, $Btmp$i$i$sroa$8$0$copyload541 = 0.0, $CBimax$0545$i$i = 0, $CBimax$2$lcssa$i$i = 0, $CBimax$2524$i$i = 0, $CBimax$3$lcssa$i$i = 0, $CBimax$3516$i$i = 0, $CBimax$3516$us$i$i = 0, $CBimax$4$i$i = 0, $CBimax$4$us$i$i = 0, $CBimax_new$0542$i$i = 0, $CCmax$0548$i$i = 0.0, $CCmax$2525$i$i = 0.0, $CCmax$3$lcssa$i$i = 0.0, $CCmax$3517$i$i = 0.0, $CCmax$3517$us$i$i = 0.0, $CCmax$4$i$i = 0.0, $CCmax$4$us$i$i = 0.0, $CCmax_b$0547$i$i = 0.0, $CCmax_new$0541$i$i = 0.0, $CCmax_new$2$us$i$i = 0.0, $CCmax_new_b$0$i$i = 0.0, $HarmShapeGain$0$i = 0.0, $HarmShapeGain_smth$i = 0, $LBRRprevLastGainIndex$i = 0, $LBRRprevLastGainIndex36$pre$phi$iZ2D = 0, $LF_AR_shp281$i = 0, $LF_MA_shp275$i = 0, $LPC_in_pre$i = 0, $LTPCorr$i = 0, $LTP_res_ptr$039$us$i$i = 0, $LTPredCodGain$i = 0, $Lag_CB_ptr$070$i$i$i = 0, $Lag_CB_ptr$085$i$i$i = 0, $Lag_CB_ptr$1$i$i = 0, $Lag_range_ptr$069$i$i$i = 0, $Lag_range_ptr$084$i$i$i = 0, $Lambda$i = 0, $LastGainIndex$i371 = 0, $LastGainIndex_copy2$0 = 0, $LastGainIndex_copy2$1328 = 0, $NLSF0_Q15$i$i = 0, $NLSFInterpCoef_Q2$i$i = 0, $NLSF_Q15$i = 0, $NLSF_mu_Q20$0$i$i$i = 0, $PERIndex$i = 0, $PredCoef_Q12$i$i = 0, $S0$139$i$i = 0.0, $S0$139$i$i101 = 0.0, $S0$139$i104$i = 0.0, $S0$139$i14$i = 0.0, $S1$140$i$i = 0.0, $S1$140$i$i100 = 0.0, $S1$140$i103$i = 0.0, $S1$140$i13$i = 0.0, $SNR_adj_dB$0$i = 0.0, $SNR_adj_dB$1$i = 0.0, $SNR_adj_dB$1178$i = 0.0, $SNR_adj_dB$1179$i = 0.0, $SNR_dB_Q7$i = 0, $Seed = 0, $Tilt$0$i = 0.0, $Tilt$0224$i = 0.0, $Tilt_smth$i = 0, $Wsig$i = 0, $XXLTP$i = 0, $XX_ptr$027$i$i = 0, $a_fix_Q12$i$i$i = 0, $add$i$i = 0, $add$i$i$i$i = 0, $add$i111$i = 0, $add$i16 = 0, $add$i29$i = 0, $add$i389 = 0, $add$i411 = 0, $add$i5 = 0, $add$i57$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i189 = 0, $add$ptr$i110$i = 0, $add$ptr$i56 = 0, $add$ptr10 = 0, $add$ptr11$i = 0, $add$ptr119$i = 0, $add$ptr120$i = 0, $add$ptr13 = 0, $add$ptr13612 = 0, $add$ptr16$i = 0, $add$ptr18$i$i = 0, $add$ptr19$i = 0, $add$ptr19$us$i$i$i = 0, $add$ptr24$1$i$i = 0, $add$ptr24$2$i$i = 0, $add$ptr24$3$i$i = 0, $add$ptr24$i$i = 0, $add$ptr30$i = 0, $add$ptr31$1$i$i = 0, $add$ptr31$2$i$i = 0, $add$ptr31$3$i$i = 0, $add$ptr31$i$i = 0, $add$ptr337$us$i$i = 0, $add$ptr37$i = 0, $add$ptr6 = 0, $add$ptr93$i$i = 0, $add$ptr98$i$i = 0, $add$us$i141$i = 0, $add1$i$i = 0, $add10$i$i$i = 0, $add100$i = 0.0, $add108$i$i$i = 0, $add117$i = 0, $add12$i$i$i$i = 0, $add12$i$i$i224 = 0, $add12$i258$i$i = 0, $add124$i$i52 = 0.0, $add125$i$i = 0, $add13$i$i = 0, $add14$i$i$i = 0.0, $add14$i$i$i$1 = 0.0, $add14$i$i$i$2 = 0.0, $add14$sink$i = 0, $add140$i = 0, $add178$i$i = 0, $add18$i$i = 0, $add18$i$i107 = 0, $add18$i111$i = 0, $add18$i21$i = 0, $add20$i264$i$i = 0, $add20$us$i$i$i = 0.0, $add23$1$i$i = 0, $add23$2$i$i = 0, $add23$i$i = 0, $add23$i$i$i = 0, $add23$i$i$i$i = 0, $add23$i107$i$i = 0, $add25$i$i = 0, $add25$i$i113 = 0, $add25$i117$i = 0, $add25$i27$i = 0, $add253$i = 0.0, $add26$i$i$i = 0, $add26$i109$i$i = 0, $add262 = 0, $add262$us = 0, $add2734$i$i$i = 0, $add2734$i82$i$i = 0, $add274$i = 0.0, $add28$i$i$i$i = 0.0, $add28$i$i$i234 = 0.0, $add28$i$i82 = 0.0, $add28$i55$i$i = 0.0, $add3$i = 0, $add3$i$i = 0, $add305 = 0, $add31$i$i$i = 0, $add32$i$i118 = 0, $add32$i$i29 = 0, $add32$i123$i = 0, $add32$i33$i = 0, $add323 = 0, $add328 = 0, $add329$us$i$i = 0.0, $add330$i565 = 0.0, $add337$i566 = 0.0, $add373 = 0, $add39$i = 0, $add39$i$i$i = 0.0, $add39$i$i$i$i = 0.0, $add39$i$i$i247 = 0.0, $add39$i$i151$i = 0.0, $add39$i$i82$i = 0.0, $add39$i$i83 = 0.0, $add39$i127$i$i = 0.0, $add39$i157$i$i = 0.0, $add39$i217$i$i = 0.0, $add39$i261$i$i = 0.0, $add39$i352$i$i = 0.0, $add39$i39$i$i = 0.0, $add39$i414$i$i = 0.0, $add39$i47$i$i = 0.0, $add39$i70$i$i = 0.0, $add39$i83$i$i = 0.0, $add39$i99$i$i = 0.0, $add4$i252$i$i = 0, $add43$i$i$i = 0, $add45$i = 0, $add48$us$i$i$i = 0, $add49$i = 0.0, $add5$i$i = 0.0, $add521$i$i = 0, $add53$i$i = 0, $add53$i$i$i = 0, $add538$i$i = 0.0, $add55$i$i = 0.0, $add56$us$i$i$i = 0, $add601$i$i = 0, $add601$us$i$i = 0, $add66$i = 0, $add660$i$i = 0, $add73$i = 0.0, $add8$i$i = 0, $add8$i$i$i = 0, $add8$i23$i = 0, $add8$i96$i$i = 0, $add89$1$i$i = 0, $add89$2$i$i = 0, $add89$i$i = 0, $add9$i$i$i318 = 0, $add9$us$i$i = 0.0, $add933$i$i$i = 0, $add933$i83$i$i = 0, $and$i = 0, $and$i$i$i$i = 0, $and$i$i285 = 0, $and$i2$i = 0, $and$i423 = 0, $and100$i$i = 0, $and16$i$i = 0, $and16$i$i$i = 0, $and27$i$i = 0, $and38$i$i$i = 0, $and5$i$i = 0, $and58$i$i = 0, $arraydecay102$i = 0, $arraydecay103$i = 0, $arraydecay118$i = 0, $arraydecay20$i = 0, $arraydecay21$i = 0, $arraydecay48$i$i458 = 0, $arraydecay57$i = 0, $arraydecay67$i$i$i = 0, $arraydecay72 = 0, $arraydecay73$i$i$i = 0, $arraydecay93$i = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$i$i$i190 = 0, $arrayidx$i$i103$i = 0, $arrayidx$i14$i = 0, $arrayidx$i300 = 0, $arrayidx$i354 = 0, $arrayidx$i43$i = 0, $arrayidx$i59 = 0, $arrayidx$i59$i = 0, $arrayidx$i61$i = 0, $arrayidx$i73$i = 0, $arrayidx1$i7$i$i = 0, $arrayidx11$phi$trans$insert$i$i = 0, $arrayidx117$i$i = 0, $arrayidx12$us$i$i = 0, $arrayidx128$i$i = 0, $arrayidx13$us$i$i = 0, $arrayidx137$i$i$i = 0, $arrayidx14$i$i$i = 0, $arrayidx14$i$i$i259 = 0, $arrayidx14$i41$i$i = 0, $arrayidx1471$i$i$i = 0, $arrayidx153$i = 0, $arrayidx154$i$i = 0, $arrayidx159$i = 0, $arrayidx167$i$i = 0, $arrayidx18$i$i$i = 0, $arrayidx185$i$i = 0, $arrayidx19$i$i$i = 0, $arrayidx2$i$i = 0, $arrayidx2$i$i$i256 = 0, $arrayidx2$i29$i$i = 0, $arrayidx207$i$i = 0, $arrayidx211$i = 0, $arrayidx22$i$i = 0, $arrayidx2287$i$i$i = 0, $arrayidx24$i = 0, $arrayidx245$phi$trans$insert$phi$trans$insert$i$i = 0, $arrayidx25$pre$phi$i$i$iZ2D = 0, $arrayidx251$i$i = 0, $arrayidx269 = 0, $arrayidx27$pre$phi$i$i$iZ2D = 0, $arrayidx273 = 0, $arrayidx28$us$i$i = 0, $arrayidx291$i$i = 0, $arrayidx3$i$i41 = 0, $arrayidx3$i66$i = 0, $arrayidx31$i136$i = 0, $arrayidx34$i137$i = 0, $arrayidx36$i$i$i = 0, $arrayidx4$i$i = 0, $arrayidx4$i$i142 = 0, $arrayidx401$us$i$i = 0, $arrayidx49$us$i$i = 0, $arrayidx49$us$i$us$i = 0, $arrayidx5$i18$i$i = 0, $arrayidx5$i32$i$i = 0, $arrayidx6$i$i143 = 0, $arrayidx6$i$i39 = 0, $arrayidx72$us$i$us$i = 0, $arrayidx8$i20$i$i = 0, $arrayidx8$i34$i$i = 0, $arrayidx8$us$i$i = 0, $arrayidx87$us$phi$trans$insert$i$i = 0, $arrayidx87$us$phi$trans$insert$i$us$i = 0, $arrayidx9$i$i = 0, $auto_corr$i = 0, $basis_ptr$0574$i$i = 0, $best_gain_mult = 0, $best_sum = 0, $buf_ptr$049$i$i$i = 0, $call$i = 0.0, $call$i$i$i = 0, $call$i$i304 = 0.0, $call$i419$i$i = 0, $call$i442$i$i = 0, $call151$i = 0.0, $call25$i$i$i = 0.0, $cbk_size$068$i$i$i = 0, $cbk_size$083$i$i$i = 0, $cbk_size$1$i$i = 0, $cfac$0$lcssa$i$i = 0.0, $cfac$0$lcssa$i$i165 = 0.0, $cfac$0$lcssa$i65$i = 0.0, $cfac$010$i$i = 0.0, $cfac$010$i$i163 = 0.0, $cfac$010$i41$i = 0.0, $cfac$010$i57$i = 0.0, $cmp$i54$i = 0, $cmp1$i55$i = 0, $cmp1037$i$i = 0, $cmp1037$i$i97 = 0, $cmp162$i = 0, $cmp190 = 0, $cmp193 = 0, $cmp207189223$i = 0, $cmp23$i = 0, $cmp23$us$i$i = 0, $cmp23$us$i$us$i = 0, $cmp237$i = 0, $cmp3$i$i46 = 0, $cmp32$i$i = 0, $cmp32$i$i$i$i = 0, $cmp32$i$i$i214 = 0, $cmp32$i$i114$i = 0, $cmp32$i10$i$i = 0, $cmp32$i224$i$i = 0, $cmp32$i315$i$i = 0, $cmp32$i33$i$i = 0, $cmp32$i62$i$i = 0, $cmp325555$i$i = 0, $cmp380$i$i = 0, $cmp412$i$i$i = 0, $cmp412$i163$i$i = 0, $cmp412$i267$i$i = 0, $cmp412$i358$i$i = 0, $cmp426$i$i = 0, $cmp441$i$i = 0, $cmp47 = 0, $cmp5$us$i$i = 0, $cmp544515$i$i = 0, $cmp582$i$i = 0, $cmp582$us$i$i = 0, $cmp60$i = 0, $cmp68$i = 0, $cmp73 = 0, $cmp8$i55$i = 0, $coding_quality$i = 0, $cond$i$i$i = 0, $cond$i21$i = 0, $cond$i497$i$i = 0, $cond$i9$i$i = 0, $cond31$i = 0, $cond518$i$i = 0, $cond75$i$i = 0.0, $contourIndex$i = 0, $conv$1$i$i = 0.0, $conv$2$i$i = 0.0, $conv$i$i = 0, $conv$i$i$i$i192 = 0.0, $conv$i$i$i95$i = 0, $conv$i$i119$i = 0.0, $conv$i$i250 = 0.0, $conv$i$i36$i = 0, $conv$i112$i = 0.0, $conv$i125$i$i = 0.0, $conv$i126$i$i = 0.0, $conv$i13$i$i$i = 0, $conv$i148$i = 0.0, $conv$i15$i$i = 0.0, $conv$i168$i$i = 0.0, $conv$i185$i$i = 0.0, $conv$i20$i$i = 0.0, $conv$i210$i$i = 0.0, $conv$i229$i$i = 0.0, $conv$i271$i$i = 0, $conv$i290$i$i = 0.0, $conv$i3$i = 0.0, $conv$i3$i$i = 0.0, $conv$i320$i$i = 0.0, $conv$i362$i$i = 0, $conv$i38$i$i = 0.0, $conv$i382$i$i = 0.0, $conv$i383 = 0, $conv$i46$i = 0.0, $conv$i463$i$i = 0.0, $conv$i51$i$i = 0.0, $conv$i57 = 0.0, $conv$i67$i$i = 0.0, $conv$i7$i$i = 0.0, $conv$i9$i$i = 0.0, $conv$i95$i$i = 0.0, $conv1$i$i = 0.0, $conv11$i$i = 0, $conv139$i$i = 0.0, $conv14$i$i = 0.0, $conv14$i$i$i$i = 0.0, $conv14$i$i$i226 = 0.0, $conv14$i$i128$i = 0.0, $conv14$i$i59$i = 0.0, $conv14$i104$i$i = 0.0, $conv14$i134$i$i = 0.0, $conv14$i135$i$i = 0.0, $conv14$i16$i$i = 0.0, $conv14$i177$i$i = 0.0, $conv14$i194$i$i = 0.0, $conv14$i219$i$i = 0.0, $conv14$i238$i$i = 0.0, $conv14$i24$i$i = 0.0, $conv14$i24$i$i314 = 0.0, $conv14$i299$i$i = 0.0, $conv14$i329$i$i = 0.0, $conv14$i391$i$i = 0.0, $conv14$i47$i$i = 0.0, $conv14$i60$i$i = 0.0, $conv14$i76$i$i = 0.0, $conv144$i$i = 0.0, $conv15$i392 = 0, $conv16$i = 0.0, $conv16$i$i = 0.0, $conv17$us$i$i$i = 0, $conv17$us$i484$i$i = 0, $conv202$i = 0.0, $conv209 = 0, $conv21$us$i485$i$i = 0, $conv216 = 0, $conv22$i$i = 0.0, $conv22$i$i$i = 0.0, $conv22$i$i$i$i = 0.0, $conv22$i$i$i231 = 0.0, $conv22$i$i133$i = 0.0, $conv22$i$i64$i = 0.0, $conv22$i109$i$i = 0.0, $conv22$i139$i$i = 0.0, $conv22$i140$i$i = 0.0, $conv22$i182$i$i = 0.0, $conv22$i199$i$i = 0.0, $conv22$i21$i$i = 0.0, $conv22$i224$i$i = 0.0, $conv22$i243$i$i = 0.0, $conv22$i29$i$i = 0.0, $conv22$i304$i$i = 0.0, $conv22$i334$i$i = 0.0, $conv22$i396$i$i = 0.0, $conv22$i52$i$i = 0.0, $conv22$i65$i$i = 0.0, $conv22$i81$i$i = 0.0, $conv230$i = 0.0, $conv26$i$i$i = 0.0, $conv260 = 0, $conv260$us = 0, $conv28$i = 0, $conv308 = 0, $conv32$i$i$i = 0, $conv325 = 0, $conv33$i$i = 0.0, $conv335$us$i$i = 0, $conv35$i$i = 0.0, $conv35$i$i$i = 0.0, $conv35$i$i$i$i = 0.0, $conv35$i$i$i245 = 0.0, $conv35$i$i149$i = 0.0, $conv35$i$i80$i = 0.0, $conv35$i125$i$i = 0.0, $conv35$i155$i$i = 0.0, $conv35$i215$i$i = 0.0, $conv35$i259$i$i = 0.0, $conv35$i350$i$i = 0.0, $conv35$i37$i$i = 0.0, $conv35$i412$i$i = 0.0, $conv35$i45$i$i = 0.0, $conv35$i68$i$i = 0.0, $conv35$i81$i$i = 0.0, $conv35$i97$i$i = 0.0, $conv365 = 0, $conv38$us$i$i$i = 0.0, $conv4$i$i$i = 0, $conv40$i$i$i = 0, $conv41$i$i = 0, $conv43$i$i = 0.0, $conv437$i$i = 0.0, $conv46$us$i$i$i = 0.0, $conv52$i$i$i = 0.0, $conv54$i$i$i = 0, $conv6$i$i = 0.0, $conv6$i$i$i = 0.0, $conv6$i$i$i$i = 0.0, $conv6$i$i$i221 = 0.0, $conv6$i$i123$i = 0.0, $conv6$i$i54$i = 0.0, $conv6$i11$i$i = 0.0, $conv6$i129$i$i = 0.0, $conv6$i130$i$i = 0.0, $conv6$i172$i$i = 0.0, $conv6$i189$i$i = 0.0, $conv6$i19$i$i = 0.0, $conv6$i214$i$i = 0.0, $conv6$i233$i$i = 0.0, $conv6$i294$i$i = 0.0, $conv6$i324$i$i = 0.0, $conv6$i386$i$i = 0.0, $conv6$i42$i$i = 0.0, $conv6$i55$i$i = 0.0, $conv6$i71$i$i = 0.0, $conv6$i99$i$i = 0.0, $conv61$i = 0.0, $conv61$i372 = 0, $conv7$i = 0, $conv7$i$i = 0.0, $conv74$i$i$i = 0, $conv83$i$i = 0, $counter$048$i$i$i = 0, $cross_corr$0512$us$i$i = 0.0, $cross_corr_st3$i$i = 0, $d$0575$i$i = 0, $d$1530$i$i = 0, $d_comp$i$i = 0, $d_srch$i$i = 0, $dec54$us$i$i$i = 0, $div = 0, $div$i$i = 0.0, $div$i$i254 = 0.0, $div$i164$i = 0.0, $div$i75 = 0, $div$i82$i = 0.0, $div101$i = 0.0, $div112$i = 0, $div249$i = 0.0, $div273$i = 0.0, $div44$us$i$i = 0.0, $div44$us$i$us$i = 0.0, $div526$i$i = 0.0, $div90$i = 0.0, $div94$i = 0.0, $ec_buf_copy = 0, $ec_prevLagIndex = 0, $ec_prevSignalType = 0, $energies_st3$i$i = 0, $energy$0511$us$i$i = 0.0, $energy$060$us$i$i$i = 0.0, $energy$168$i$i$i = 0.0, $energy_variation$0$lcssa$i = 0.0, $energy_variation$0203$i = 0.0, $exitcond26$i193$i = 0, $exp2$i360 = 0.0, $filt_state$i$i$sroa$17516$0 = 0, $filt_state$i$i$sroa$17516$1 = 0, $filt_state$i$i$sroa$19$0 = 0, $filt_state$i$i$sroa$19$1 = 0, $filt_state$i$i$sroa$19$2 = 0, $first_frame_after_reset$i297 = 0, $found_lower$0 = 0, $found_lower$1319 = 0, $found_upper$0 = 0, $found_upper$1321 = 0, $found_upper$1370 = 0, $frameCounter = 0, $frame_length = 0, $fs_kHz = 0, $fs_kHz606 = 0, $fs_kHz610 = 0, $gain$016$us$i$i = 0.0, $gain$016$us$i$us$i = 0.0, $gainMult_Q8$0 = 0, $gainMult_Q8$1 = 0, $gainMult_lower$0 = 0, $gainMult_lower$1324 = 0, $gainMult_upper$0 = 0, $gainMult_upper$1325 = 0, $gainMult_upper$1372 = 0, $gain_lock = 0, $gainsID$0 = 0, $gainsID$0$lcssa$i415 = 0, $gainsID$0$lcssa$i474 = 0, $gainsID$08$i = 0, $gainsID$08$i406 = 0, $gainsID_lower$0 = 0, $gainsID_lower$1326 = 0, $gainsID_upper$0 = 0, $gainsID_upper$1327 = 0, $gainsID_upper$1373 = 0, $i$0$lcssa$i$i = 0, $i$0$lcssa$i$i$i = 0, $i$0$lcssa$i$i$i$i = 0, $i$0$lcssa$i$i$i238 = 0, $i$0$lcssa$i$i141$i = 0, $i$0$lcssa$i$i293 = 0, $i$0$lcssa$i$i72$i = 0, $i$0$lcssa$i117$i$i = 0, $i$0$lcssa$i147$i$i = 0, $i$0$lcssa$i207$i$i = 0, $i$0$lcssa$i251$i$i = 0, $i$0$lcssa$i29$i$i = 0, $i$0$lcssa$i342$i$i = 0, $i$0$lcssa$i37$i$i = 0, $i$0$lcssa$i404$i$i = 0, $i$0$lcssa$i60$i$i = 0, $i$0$lcssa$i73$i$i = 0, $i$0$lcssa$i89$i$i = 0, $i$010$us$1$i$i = 0, $i$010$us$i$i = 0, $i$011$i$i = 0, $i$011$i$i130 = 0, $i$013$i$i$i = 0, $i$013$i$i$i$i = 0, $i$013$i11$i$i$i = 0, $i$013$i165$i$i = 0, $i$013$i269$i$i = 0, $i$013$i360$i$i = 0, $i$021$i$i = 0, $i$022$i$i = 0, $i$023$i$i$i = 0, $i$031$i$i$i = 0, $i$032$i$i = 0, $i$033$i$i = 0, $i$033$i$i$i = 0, $i$033$i$i$i$i = 0, $i$033$i$i$i217 = 0, $i$033$i$i117$i = 0, $i$033$i$i52$i = 0, $i$033$i123$i$i = 0, $i$033$i124$i$i = 0, $i$033$i13$i$i = 0, $i$033$i166$i$i = 0, $i$033$i183$i$i = 0, $i$033$i208$i$i = 0, $i$033$i227$i$i = 0, $i$033$i288$i$i = 0, $i$033$i318$i$i = 0, $i$033$i36$i$i = 0, $i$033$i380$i$i = 0, $i$033$i49$i$i = 0, $i$033$i5$i$i = 0, $i$033$i65$i$i = 0, $i$033$i93$i$i = 0, $i$034$us$i$i = 0, $i$04$us$i$i = 0, $i$048$i$i$i = 0, $i$050$us$i$i$i = 0, $i$0582$in$i$i = 0, $i$069$i = 0, $i$07$i$i$i = 0, $i$07$i109$i$i = 0, $i$07$i290$i$i = 0, $i$07$i304$i$i = 0, $i$072$i$i$i = 0, $i$09$i$i = 0, $i$09$i$i155 = 0, $i$09$i13$i = 0, $i$09$i42$i = 0, $i$09$i58$i = 0, $i$10543$i$i = 0, $i$120$i$i = 0, $i$129$i$i = 0, $i$129$i$i$i = 0, $i$129$i$i$i$i = 0, $i$129$i$i$i243 = 0, $i$129$i$i147$i = 0, $i$129$i$i78$i = 0, $i$129$i123$i$i = 0, $i$129$i153$i$i = 0, $i$129$i213$i$i = 0, $i$129$i257$i$i = 0, $i$129$i348$i$i = 0, $i$129$i35$i$i = 0, $i$129$i410$i$i = 0, $i$129$i43$i$i = 0, $i$129$i66$i$i = 0, $i$129$i79$i$i = 0, $i$129$i95$i$i = 0, $i$130$i$i = 0, $i$132$i$i = 0, $i$137$us$i$i = 0, $i$1572$i$i = 0, $i$163$us$i$i$i = 0, $i$165$i = 0, $i$170$i$i$i = 0, $i$218$i$i = 0, $i$24$us$i$i = 0, $i$24$us$i$us$i = 0, $i$2569626$i$i = 0, $i$265$us$i$i$i = 0, $i$3346 = 0, $i$3346$us = 0, $i$37$us$i$us$i = 0, $i$4348 = 0, $i$4566$i$i = 0, $i$49$us$i$i = 0, $i$49$us$i$us$i = 0, $i$511$us$i$us$i = 0, $i$5351 = 0, $i$5564$i$i = 0, $i$6563$i$i = 0, $i$7561$i$i = 0, $i$8560$i$i = 0, $i$9538$us$i$i = 0, $idx$neg72$i$i$i = 0, $in$addr$0$i$i$i = 0, $inLen$addr$0$i$i$i = 0, $inc$i$i260 = 0, $inc$i194$i = 0, $inc214$i$i = 0, $inc298$i = 0, $inc298234$i = 0, $inc90$us$i198$i = 0, $inc90$us$i198$us$i = 0, $incdec$ptr$i3$i$i = 0, $incdec$ptr$i3$i$i$1 = 0, $incdec$ptr$i3$i$i$2 = 0, $incdec$ptr131$i$i$i = 0, $ind$014$us$i$i = 0, $ind$014$us$i$us$i = 0, $ind$06$us$i$i = 0, $ind$12$us$i$i = 0, $ind$12$us$i166$i = 0, $ind$12$us$i166$us$i = 0, $indices = 0, $indvars$iv = 0, $indvars$iv$i$i = 0, $indvars$iv$i$i$i = 0, $indvars$iv$i$i136 = 0, $indvars$iv364 = 0, $input_quality$i = 0, $invGains$i = 0, $iter$0 = 0, $iter$015$us$i$i = 0, $iter$015$us$i$us$i = 0, $iter$07$us$i$i = 0, $j$0342 = 0, $j$0342$us = 0, $j$047$us$i$i$i = 0, $j$0554$us$i$i = 0, $j$068$i$i$i = 0, $j$068$in$i$i$i = 0, $j$1$lcssa$us$i$i$i = 0, $j$1539$us$i$i = 0, $j$162$us$i$i$i = 0, $j$169$i$i$i = 0, $j$2519$i$i = 0, $j$2519$us$i$i = 0, $k$011$in$i$i$i = 0, $k$011$in$i416$i$i = 0, $k$011$in$i439$i$i = 0, $k$018$i$i$i$i = 0, $k$0206$i = 0, $k$024$i = 0, $k$028$i$i = 0, $k$028$i$i137 = 0, $k$029$i$i = 0, $k$032$i$i$i = 0, $k$032$i84$i$i = 0, $k$038$i$i = 0, $k$038$i$i102 = 0, $k$038$i105$i = 0, $k$038$i15$i = 0, $k$041$us$i$i = 0, $k$044$i = 0, $k$050$i$i = 0, $k$052$us$i$i$i = 0, $k$0578$i$i = 0, $k$065$i = 0, $k$065$us$i$i$i = 0, $k$07$i407 = 0, $k$07$i8 = 0, $k$07$in$i = 0, $k$07$in$i$i$i = 0, $k$07$in$i429$i$i = 0, $k$07$in$i452$i$i = 0, $k$1201$i = 0, $k$1557$us$i$i = 0, $k$162$i = 0, $k$2190$i = 0, $k$2549$i$i = 0, $k$260$i = 0, $k$3186$i = 0, $k$3513$us$i$i = 0, $k$358$i = 0, $k$4509$i$i = 0, $k$4509$us$i$i = 0, $k$5184$i = 0, $k$5536$i$i = 0, $lag$0546$i$i = 0, $lag$071$i$i$i = 0, $lag$2$i$i = 0, $lagIndex$i = 0, $lag_counter$046$us$i$i$i = 0, $lag_counter$0527$i$i = 0, $lag_counter$059$us$i$i$i = 0, $lag_new$0$lcssa$i$i = 0, $lag_new$0526$i$i = 0, $lag_new$1$lcssa$i$i = 0, $lag_new$1518$i$i = 0, $lag_new$1518$us$i$i = 0, $lag_new$2$i$i = 0, $lag_new$2$us$i$i = 0, $lastGainIndexPrev$i = 0, $length_d_comp$0559$i$i = 0, $length_d_comp$1$i$i = 0, $length_d_srch$0$i$i466 = 0, $length_d_srch$1562$i$i = 0, $length_d_srch$2$i$i = 0, $log_energy_prev$0204$i = 0.0, $ltp_mem_length = 0, $maxabs$03$us$i$i = 0.0, $maxabs$03$us$i165$i = 0.0, $maxabs$03$us$i165$us$i = 0.0, $minInvGain$0$i = 0.0, $mul = 0, $mul$i$i$i = 0, $mul$i1$i = 0, $mul$i32$i = 0, $mul$i56$i = 0, $mul$i58 = 0.0, $mul$i85$i$i = 0, $mul$us$i$i$i = 0, $mul$us$i482$i$i = 0, $mul1$i$i = 0.0, $mul1$i$i262 = 0, $mul1$i61$i = 0.0, $mul10$i$i = 0, $mul109$i = 0, $mul13$i58$i = 0, $mul16$i$i = 0, $mul17$i$i = 0, $mul177$i$i = 0, $mul18$i$i = 0, $mul19$i$i48 = 0, $mul196$i$i = 0.0, $mul199 = 0.0, $mul2$i12$i = 0.0, $mul232$i = 0.0, $mul248 = 0, $mul248$us = 0, $mul28$i$i = 0.0, $mul4$i$i330 = 0, $mul4$i51$i = 0.0, $mul4$i67$i = 0.0, $mul42$us$i489$i$i = 0, $mul438$i$i = 0.0, $mul445$i$i = 0.0, $mul458$i$i = 0.0, $mul480$i$i = 0, $mul536$i$i = 0, $mul54$i = 0, $mul58$i = 0, $mul607 = 0, $mul611 = 0, $mul64$us$i$i$i = 0, $mul8$i = 0.0, $mul80$i$i = 0, $mul91$i90 = 0.0, $n$026$i$i = 0, $n$026$i$i141 = 0, $n$037$i$i = 0, $n$037$us$i$i = 0, $nBits$0 = 0, $nBits$1 = 0, $nBits_lower$0 = 0, $nBits_lower$1322 = 0, $nBits_upper$0 = 0, $nBits_upper$1323 = 0, $nBits_upper$1371 = 0, $nFramesEncoded$i = 0, $nb_cbk_search$067$i$i$i = 0, $nb_cbk_search$082$i$i$i = 0, $nb_cbk_search$1$i$i = 0, $nb_subfr$i169 = 0, $nb_subfr$i73 = 0, $nb_subfr103$pre$phi$iZ2D = 0, $normalizer$0573$i$i = 0.0, $or$cond$i$i = 0, $out$addr$0$i$i$i = 0, $out$addr$1$lcssa$i$i$i = 0, $out$addr$147$i$i$i = 0, $pGains_Q16 = 0, $pGains_Q16$i = 0, $pitchEstimationLPCOrder$i = 0, $pitch_res_ptr$0205$i = 0, $predGain$i = 0, $predictLPCOrder$i = 0, $predictLPCOrder$i$i = 0, $prefillFlag = 0, $prevLag$addr$0$i$i = 0, $prevLag$addr$1$i$i = 0, $prevLag_log2$0$i$i = 0.0, $psRangeEnc$idx294 = 0, $psRangeEnc$idx295 = 0, $ptr2$073$i$i$i = 0, $quantOffsetType$i375 = 0, $quantOffsetType207 = 0, $quantOffsetType84$i = 0, $r_ptr$addr$030$i$i = 0, $refl_coef$i = 0, $res_nrg$1$1$i$i = 0.0, $res_nrg$1$2$i$i = 0.0, $res_nrg$1$i$i = 0.0, $res_pitch = 0, $result$0$lcssa$i$i = 0.0, $result$0$lcssa$i$i$i = 0.0, $result$0$lcssa$i$i$i$i = 0.0, $result$0$lcssa$i$i$i239 = 0.0, $result$0$lcssa$i$i142$i = 0.0, $result$0$lcssa$i$i73$i = 0.0, $result$0$lcssa$i118$i$i = 0.0, $result$0$lcssa$i148$i$i = 0.0, $result$0$lcssa$i208$i$i = 0.0, $result$0$lcssa$i252$i$i = 0.0, $result$0$lcssa$i30$i$i = 0.0, $result$0$lcssa$i343$i$i = 0.0, $result$0$lcssa$i38$i$i = 0.0, $result$0$lcssa$i405$i$i = 0.0, $result$0$lcssa$i61$i$i = 0.0, $result$0$lcssa$i74$i$i = 0.0, $result$0$lcssa$i90$i$i = 0.0, $result$032$i$i$i = 0.0, $result$034$i$i = 0.0, $result$034$i$i$i = 0.0, $result$034$i$i$i$i = 0.0, $result$034$i$i$i216 = 0.0, $result$034$i$i116$i = 0.0, $result$034$i$i51$i = 0.0, $result$034$i12$i$i = 0.0, $result$034$i122$i$i = 0.0, $result$034$i123$i$i = 0.0, $result$034$i165$i$i = 0.0, $result$034$i182$i$i = 0.0, $result$034$i207$i$i = 0.0, $result$034$i226$i$i = 0.0, $result$034$i287$i$i = 0.0, $result$034$i317$i$i = 0.0, $result$034$i35$i$i = 0.0, $result$034$i379$i$i = 0.0, $result$034$i4$i$i = 0.0, $result$034$i48$i$i = 0.0, $result$034$i64$i$i = 0.0, $result$034$i92$i$i = 0.0, $result$1$lcssa$i$i = 0.0, $result$1$lcssa$i$i$i = 0.0, $result$1$lcssa$i$i$i$i = 0.0, $result$1$lcssa$i$i$i249 = 0.0, $result$1$lcssa$i$i155$i = 0.0, $result$1$lcssa$i$i84$i = 0.0, $result$1$lcssa$i103$i$i = 0.0, $result$1$lcssa$i131$i$i = 0.0, $result$1$lcssa$i161$i$i = 0.0, $result$1$lcssa$i221$i$i = 0.0, $result$1$lcssa$i265$i$i = 0.0, $result$1$lcssa$i356$i$i = 0.0, $result$1$lcssa$i418$i$i = 0.0, $result$1$lcssa$i43$i$i = 0.0, $result$1$lcssa$i51$i$i = 0.0, $result$1$lcssa$i74$i$i = 0.0, $result$1$lcssa$i87$i$i = 0.0, $result$130$i$i = 0.0, $result$130$i$i$i = 0.0, $result$130$i$i$i$i = 0.0, $result$130$i$i$i242 = 0.0, $result$130$i$i146$i = 0.0, $result$130$i$i77$i = 0.0, $result$130$i122$i$i = 0.0, $result$130$i152$i$i = 0.0, $result$130$i212$i$i = 0.0, $result$130$i256$i$i = 0.0, $result$130$i34$i$i = 0.0, $result$130$i347$i$i = 0.0, $result$130$i409$i$i = 0.0, $result$130$i42$i$i = 0.0, $result$130$i65$i$i = 0.0, $result$130$i78$i$i = 0.0, $result$130$i94$i$i = 0.0, $retval$0$i = 0, $retval$0$i$i = 0, $retval$0$i445 = 0, $sEncCtrl = 0, $sNSQ = 0, $sNSQ_copy = 0, $sNSQ_copy2 = 0, $sRangeEnc_copy = 0, $sRangeEnc_copy2$sroa$0 = 0, $sRangeEnc_copy2$sroa$6$0 = 0, $sRangeEnc_copy2$sroa$6$0$$sroa_idx85 = 0, $sRangeEnc_copy2$sroa$6$0$copyload = 0, $sRangeEnc_copy2$sroa$6$0$copyload91 = 0, $sRangeEnc_copy2$sroa$6$1 = 0, $sRangeEnc_copy2$sroa$6$2 = 0, $sRangeEnc_copy2$sroa$6$3320 = 0, $sRangeEnc_copy2$sroa$8 = 0, $scevgep$i$i$i = 0, $scevgep$i$i279 = 0, $scevgep$i487$i$i = 0, $scevgep57$i$i$i = 0, $scevgep58$i$i$i = 0, $scevgep71$i$i$i = 0, $scevgep72$i$i$i = 0, $shapeWinLength$i = 0, $shapingLPCOrder$i = 0, $shl$i = 0, $shl$i$i = 0, $shl$i$i$i = 0, $shl$i398 = 0, $shl$i422 = 0, $shl$i88$i$i = 0, $shl15$i$i$i = 0, $shl15$i101$i$i = 0, $shl3$i$i$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i$i = 0, $shr$i$i$i$i = 0, $shr$i$i51 = 0, $shr12$i$i = 0, $shr12$i$i$i = 0, $shr18$i = 0, $shr18$i421 = 0, $shr22$pn$i = 0, $shr22$pn$i442 = 0, $shr23$i$i = 0, $shr327 = 0, $shr34$i$i$i = 0, $shr53$i$i = 0, $shr95$i$i = 0, $signalType$i = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i$i$i = 0, $spec$select$i$i128 = 0, $spec$select$i420$i$i = 0, $spec$select$i443$i$i = 0, $spec$select$i86 = 0.0, $spec$select289 = 0, $spec$select499$i$i = 0, $spec$select500$i$i = 0, $spec$select501$i$i = 0, $speech_activity_Q8229$i = 0, $storemerge = 0, $storemerge$in$i$i = 0, $storemerge396$i$i = 0, $storemerge396$in$i$i = 0, $sub$1$i$i = 0, $sub$2$i$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i$i$i$i = 0, $sub$i$i113$i = 0, $sub$i$i25 = 0.0, $sub$i$i305 = 0.0, $sub$i1$i = 0, $sub$i1$i76 = 0, $sub$i17$i$i = 0, $sub$i223$i$i = 0, $sub$i314$i$i = 0, $sub$i32$i$i = 0, $sub$i33 = 0, $sub$i385 = 0, $sub$i51$i = 0, $sub$i59$i = 0, $sub$i61$i$i = 0, $sub$i71$i = 0, $sub$i71$i449 = 0, $sub$i74$i = 0, $sub$i84$i = 0.0, $sub$i89$i$i = 0, $sub$i9$i$i = 0, $sub1$i170$i = 0, $sub1$i299 = 0, $sub106$1$i$i = 0, $sub106$i$i = 0, $sub111$i = 0, $sub133$i$i$i = 0, $sub15$i = 0.0, $sub16$us$i$i = 0.0, $sub17$i$i$i = 0, $sub17$i102$i$i = 0, $sub2$i = 0, $sub20$us$1$i$i = 0.0, $sub20$us$2$i$i = 0.0, $sub20$us$3$i$i = 0.0, $sub20$us$i$i282 = 0.0, $sub212 = 0, $sub24$i$i = 0.0, $sub24$i$i112 = 0.0, $sub24$i116$i = 0.0, $sub24$i26$i = 0.0, $sub26$1$i$i = 0, $sub26$2$i$i = 0, $sub26$3$i$i = 0, $sub26$i$i = 0, $sub280$i = 0.0, $sub3$i = 0.0, $sub318 = 0, $sub340 = 0, $sub36$1$i$i = 0, $sub36$i$i = 0, $sub39$i$i$i = 0, $sub39$i$i$i205 = 0, $sub4$i$i = 0, $sub44$i$i$i = 0, $sub440$i$i = 0.0, $sub444$i$i = 0.0, $sub5$i$i93 = 0.0, $sub519$i$i = 0, $sub63$us$i$us$i = 0.0, $sub70$1$i$i = 0, $sub70$2$i$i = 0, $sub70$i$i = 0, $sub92$i = 0.0, $subfr_length$i = 0, $subfr_length$i185 = 0, $subfr_length1$i$i = 0, $sum$0$lcssa = 0, $sum$0$lcssa$us = 0, $sum$0343 = 0, $sum$0343$us = 0, $sum_log_gain_Q7$i = 0, $target_ptr$054$us$i$i$i = 0, $target_ptr$0577$i$i = 0, $target_ptr$067$us$i$i$i = 0, $target_ptr$2556$us$i$i = 0, $tmp$0 = 0, $tmp1$035$us$i$i = 0.0, $tobool75 = 0, $transition_frame_no$i = 0, $useInterpolatedNLSFs$i$i = 0, $warping_Q16$i = 0, $xXLTP$i = 0, $xX_ptr$028$i$i = 0, $x_buf = 0, $x_lag_ptr$036$us$i$i = 0, $x_pre_ptr$067$i = 0, $x_ptr$0200$i = 0, $x_ptr$040$us$i$i = 0, $x_ptr$066$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $k$07$in$i$looptemp = 0, $k$028$i$i$looptemp = 0, $k$011$in$i$i$i$looptemp = 0, $k$07$in$i$i$i$looptemp = 0, $k$011$in$i439$i$i$looptemp = 0, $k$011$in$i416$i$i$looptemp = 0, $101$looptemp = 0, $buf_ptr$049$i$i$i$looptemp = 0, $k$07$in$i429$i$i$looptemp = 0, $k$07$in$i452$i$i$looptemp = 0, $i$0582$in$i$i$looptemp = 0, $basis_ptr$0574$i$i$looptemp = 0, $target_ptr$0577$i$i$looptemp = 0, $161$looptemp = 0, $i$6563$i$i$looptemp = 0, $log_energy_prev$0204$i$looptemp = 0.0, $k$028$i$i137$looptemp = 0, $i$021$i$i$looptemp = 0, $305$looptemp = 0.0, $i$511$us$i$us$i$looptemp = 0, $x_lag_ptr$036$us$i$i$looptemp = 0, $i$3346$us$looptemp = 0, $i$3346$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 34208 | 0;
 $pGains_Q16$i = sp + 22704 | 0;
 $PredCoef_Q12$i$i = sp + 21744 | 0;
 $a_fix_Q12$i$i$i = sp + 17392 | 0;
 $NLSF0_Q15$i$i = sp + 16752 | 0;
 $XXLTP$i = sp + 16112 | 0;
 $xXLTP$i = sp + 15792 | 0;
 $invGains$i = sp + 13408 | 0;
 $NLSF_Q15$i = sp + 13136 | 0;
 $LPC_in_pre$i = sp + 11600 | 0;
 $d_srch$i$i = sp + 11504 | 0;
 $d_comp$i$i = sp + 11200 | 0;
 $energies_st3$i$i = sp + 8480 | 0;
 $cross_corr_st3$i$i = sp + 5760 | 0;
 $auto_corr$i = sp + 5680 | 0;
 $A$i = sp + 5616 | 0;
 $refl_coef$i = sp + 5552 | 0;
 $Wsig$i = sp + 4016 | 0;
 $sEncCtrl = sp + 33440 | 0;
 $res_pitch = sp + 1328 | 0;
 $sRangeEnc_copy = sp + 33392 | 0;
 $sRangeEnc_copy2$sroa$0 = sp + 24664 | 0;
 $sRangeEnc_copy2$sroa$8 = sp + 24640 | 0;
 $sNSQ_copy = sp + 29040 | 0;
 $sNSQ_copy2 = sp + 24688 | 0;
 $pGains_Q16 = sp + 1312 | 0;
 $ec_buf_copy = sp + 32 | 0;
 $gain_lock = sp + 16 | 0;
 $best_gain_mult = sp + 34192 | 0;
 $best_sum = sp;
 HEAP32[$gain_lock >> 2] = 0;
 HEAP32[$gain_lock + 4 >> 2] = 0;
 HEAP32[$gain_lock + 8 >> 2] = 0;
 HEAP32[$gain_lock + 12 >> 2] = 0;
 $frameCounter = $psEnc + 4620 | 0;
 $0 = HEAP32[$frameCounter >> 2] | 0;
 HEAP32[$frameCounter >> 2] = $0 + 1;
 $indices = $psEnc + 4736 | 0;
 $Seed = $psEnc + 4770 | 0;
 HEAP8[$Seed >> 0] = $0 & 3;
 $x_buf = $psEnc + 7180 | 0;
 $ltp_mem_length = $psEnc + 4592 | 0;
 $1 = HEAP32[$ltp_mem_length >> 2] | 0;
 $add$ptr = $psEnc + 7180 + ($1 << 2) | 0;
 $add$ptr6 = $res_pitch + ($1 << 2) | 0;
 $add$ptr10 = $psEnc + 5098 | 0;
 $frame_length = $psEnc + 4584 | 0;
 $2 = HEAP32[$frame_length >> 2] | 0;
 $3 = HEAP32[$psEnc + 28 >> 2] | 0;
 do if (!$3) label = 13; else {
  $transition_frame_no$i = $psEnc + 24 | 0;
  $4 = HEAP32[$transition_frame_no$i >> 2] | 0;
  $shl$i = 262144 - ($4 << 10) | 0;
  $shr$i = $shl$i >> 16;
  $sub2$i = $shl$i & 64512;
  do if (($shl$i | 0) < 262144) {
   if (!$sub2$i) {
    $25 = 24960 + ($shr$i << 3) | 0;
    $A_Q28$i$sroa$0$0 = HEAP32[$25 >> 2] | 0;
    $A_Q28$i$sroa$7$0 = HEAP32[$25 + 4 >> 2] | 0;
    $B_Q28$i$sroa$0$0 = HEAP32[24896 + ($shr$i * 12 | 0) >> 2] | 0;
    $B_Q28$i$sroa$10$0 = HEAP32[24896 + ($shr$i * 12 | 0) + 8 >> 2] | 0;
    $B_Q28$i$sroa$7$0 = HEAP32[24896 + ($shr$i * 12 | 0) + 4 >> 2] | 0;
    break;
   }
   $add$i$i = $shr$i + 1 | 0;
   $conv11$i$i = $shl$i << 16 >> 16;
   if ($sub2$i >>> 0 < 32768) {
    $5 = HEAP32[24896 + ($shr$i * 12 | 0) >> 2] | 0;
    $sub$i$i = (HEAP32[24896 + ($add$i$i * 12 | 0) >> 2] | 0) - $5 | 0;
    $add23$i$i = (Math_imul($sub$i$i >> 16, $conv11$i$i) | 0) + $5 + ((Math_imul($sub$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $7 = HEAP32[24896 + ($shr$i * 12 | 0) + 4 >> 2] | 0;
    $sub$1$i$i = (HEAP32[24896 + ($add$i$i * 12 | 0) + 4 >> 2] | 0) - $7 | 0;
    $add23$1$i$i = (Math_imul($sub$1$i$i >> 16, $conv11$i$i) | 0) + $7 + ((Math_imul($sub$1$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $9 = HEAP32[24896 + ($shr$i * 12 | 0) + 8 >> 2] | 0;
    $sub$2$i$i = (HEAP32[24896 + ($add$i$i * 12 | 0) + 8 >> 2] | 0) - $9 | 0;
    $add23$2$i$i = (Math_imul($sub$2$i$i >> 16, $conv11$i$i) | 0) + $9 + ((Math_imul($sub$2$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $11 = HEAP32[24960 + ($shr$i << 3) >> 2] | 0;
    $sub36$i$i = (HEAP32[24960 + ($add$i$i << 3) >> 2] | 0) - $11 | 0;
    $add53$i$i = (Math_imul($sub36$i$i >> 16, $conv11$i$i) | 0) + $11 + ((Math_imul($sub36$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $13 = HEAP32[24960 + ($shr$i << 3) + 4 >> 2] | 0;
    $sub36$1$i$i = (HEAP32[24960 + ($add$i$i << 3) + 4 >> 2] | 0) - $13 | 0;
    $A_Q28$i$sroa$0$0 = $add53$i$i;
    $A_Q28$i$sroa$7$0 = (Math_imul($sub36$1$i$i >> 16, $conv11$i$i) | 0) + $13 + ((Math_imul($sub36$1$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $B_Q28$i$sroa$0$0 = $add23$i$i;
    $B_Q28$i$sroa$10$0 = $add23$2$i$i;
    $B_Q28$i$sroa$7$0 = $add23$1$i$i;
    break;
   } else {
    $15 = HEAP32[24896 + ($add$i$i * 12 | 0) >> 2] | 0;
    $sub70$i$i = $15 - (HEAP32[24896 + ($shr$i * 12 | 0) >> 2] | 0) | 0;
    $add89$i$i = (Math_imul($sub70$i$i >> 16, $conv11$i$i) | 0) + $15 + ((Math_imul($sub70$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $17 = HEAP32[24896 + ($add$i$i * 12 | 0) + 4 >> 2] | 0;
    $sub70$1$i$i = $17 - (HEAP32[24896 + ($shr$i * 12 | 0) + 4 >> 2] | 0) | 0;
    $add89$1$i$i = (Math_imul($sub70$1$i$i >> 16, $conv11$i$i) | 0) + $17 + ((Math_imul($sub70$1$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $19 = HEAP32[24896 + ($add$i$i * 12 | 0) + 8 >> 2] | 0;
    $sub70$2$i$i = $19 - (HEAP32[24896 + ($shr$i * 12 | 0) + 8 >> 2] | 0) | 0;
    $add89$2$i$i = (Math_imul($sub70$2$i$i >> 16, $conv11$i$i) | 0) + $19 + ((Math_imul($sub70$2$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $21 = HEAP32[24960 + ($add$i$i << 3) >> 2] | 0;
    $sub106$i$i = $21 - (HEAP32[24960 + ($shr$i << 3) >> 2] | 0) | 0;
    $add125$i$i = (Math_imul($sub106$i$i >> 16, $conv11$i$i) | 0) + $21 + ((Math_imul($sub106$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $23 = HEAP32[24960 + ($add$i$i << 3) + 4 >> 2] | 0;
    $sub106$1$i$i = $23 - (HEAP32[24960 + ($shr$i << 3) + 4 >> 2] | 0) | 0;
    $A_Q28$i$sroa$0$0 = $add125$i$i;
    $A_Q28$i$sroa$7$0 = (Math_imul($sub106$1$i$i >> 16, $conv11$i$i) | 0) + $23 + ((Math_imul($sub106$1$i$i & 65535, $conv11$i$i) | 0) >> 16) | 0;
    $B_Q28$i$sroa$0$0 = $add89$i$i;
    $B_Q28$i$sroa$10$0 = $add89$2$i$i;
    $B_Q28$i$sroa$7$0 = $add89$1$i$i;
    break;
   }
  } else {
   $A_Q28$i$sroa$0$0 = 35497197;
   $A_Q28$i$sroa$7$0 = 57401098;
   $B_Q28$i$sroa$0$0 = 89306658;
   $B_Q28$i$sroa$10$0 = 89306658;
   $B_Q28$i$sroa$7$0 = 178584282;
  } while (0);
  $add$i5 = $4 + $3 | 0;
  $spec$select$i = ($add$i5 | 0) > 0 ? $add$i5 : 0;
  HEAP32[$transition_frame_no$i >> 2] = ($spec$select$i | 0) < 256 ? $spec$select$i : 256;
  $arraydecay21$i = $psEnc + 16 | 0;
  $sub$i1$i = 0 - $A_Q28$i$sroa$0$0 | 0;
  $and$i2$i = $sub$i1$i & 16383;
  $sub4$i$i = 0 - $A_Q28$i$sroa$7$0 | 0;
  $and5$i$i = $sub4$i$i & 16383;
  if (($2 | 0) <= 0) {
   $fs_kHz606 = $psEnc + 4576 | 0;
   $mul607 = (HEAP32[$fs_kHz606 >> 2] | 0) * 5 | 0;
   $add$ptr13612 = $add$ptr + ($mul607 << 2) | 0;
   $fs_kHz610 = $fs_kHz606;
   $mul611 = $mul607;
   break;
  }
  $arrayidx22$i$i = $psEnc + 20 | 0;
  $conv41$i$i = $sub$i1$i << 2 >> 16;
  $conv83$i$i = $sub4$i$i << 2 >> 16;
  $shr12$i$i = $B_Q28$i$sroa$0$0 >> 16;
  $and16$i$i = $B_Q28$i$sroa$0$0 & 65535;
  $shr53$i$i = $B_Q28$i$sroa$7$0 >> 16;
  $and58$i$i = $B_Q28$i$sroa$7$0 & 65535;
  $shr95$i$i = $B_Q28$i$sroa$10$0 >> 16;
  $and100$i$i = $B_Q28$i$sroa$10$0 & 65535;
  $37 = HEAP32[$arraydecay21$i >> 2] | 0;
  $39 = HEAP32[$arrayidx22$i$i >> 2] | 0;
  $k$050$i$i = 0;
  do {
   $arrayidx9$i$i = $add$ptr10 + ($k$050$i$i << 1) | 0;
   $conv$i$i = HEAP16[$arrayidx9$i$i >> 1] | 0;
   $shl$i$i = (Math_imul($shr12$i$i, $conv$i$i) | 0) + $37 + ((Math_imul($and16$i$i, $conv$i$i) | 0) >> 16) << 2;
   $shr23$i$i = $shl$i$i >> 16;
   $and27$i$i = $shl$i$i & 65532;
   $37 = ((Math_imul($and58$i$i, $conv$i$i) | 0) >> 16) + (Math_imul($shr53$i$i, $conv$i$i) | 0) + ((Math_imul($shr23$i$i, $conv41$i$i) | 0) + $39 + ((Math_imul($and27$i$i, $conv41$i$i) | 0) >> 16) + ((((Math_imul($and27$i$i, $and$i2$i) | 0) >>> 16) + (Math_imul($shr23$i$i, $and$i2$i) | 0) >> 13) + 1 >> 1)) | 0;
   $39 = ((Math_imul($and100$i$i, $conv$i$i) | 0) >> 16) + (Math_imul($shr95$i$i, $conv$i$i) | 0) + (((Math_imul($and27$i$i, $conv83$i$i) | 0) >> 16) + (Math_imul($shr23$i$i, $conv83$i$i) | 0) + ((((Math_imul($and27$i$i, $and5$i$i) | 0) >>> 16) + (Math_imul($shr23$i$i, $and5$i$i) | 0) >> 13) + 1 >> 1)) | 0;
   HEAP16[$arrayidx9$i$i >> 1] = ($shl$i$i | 0) > 536854528 ? 32767 : ($shl$i$i | 0) < -536887295 ? -32768 : ($shl$i$i + 16383 | 0) >>> 14 & 65535;
   $k$050$i$i = $k$050$i$i + 1 | 0;
  } while (($k$050$i$i | 0) != ($2 | 0));
  HEAP32[$arraydecay21$i >> 2] = $37;
  HEAP32[$arrayidx22$i$i >> 2] = $39;
  label = 13;
 } while (0);
 if ((label | 0) == 13) {
  $fs_kHz = $psEnc + 4576 | 0;
  $mul = (HEAP32[$fs_kHz >> 2] | 0) * 5 | 0;
  $add$ptr13 = $add$ptr + ($mul << 2) | 0;
  if (($2 | 0) > 0) {
   $k$07$in$i = $2;
   do {
    $k$07$in$i$looptemp = $k$07$in$i;
    $k$07$in$i = $k$07$in$i + -1 | 0;
    HEAPF32[$add$ptr13 + ($k$07$in$i << 2) >> 2] = +(HEAP16[$psEnc + 5096 + ($k$07$in$i$looptemp << 1) >> 1] | 0);
   } while (($k$07$in$i$looptemp | 0) > 1);
   $add$ptr13612 = $add$ptr13;
   $fs_kHz610 = $fs_kHz;
   $mul611 = $mul;
  } else {
   $add$ptr13612 = $add$ptr13;
   $fs_kHz610 = $fs_kHz;
   $mul611 = $mul;
  }
 }
 $shr = $2 >> 3;
 HEAPF32[$add$ptr13612 >> 2] = +HEAPF32[$add$ptr13612 >> 2] + 9.999999974752427e-07;
 $arrayidx$1 = $add$ptr + ($shr + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$1 >> 2] = +HEAPF32[$arrayidx$1 >> 2] + 9.999999974752427e-07;
 $arrayidx$2 = $add$ptr + (($shr << 1) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$2 >> 2] = +HEAPF32[$arrayidx$2 >> 2] + -9.999999974752427e-07;
 $arrayidx$3 = $add$ptr + (($shr * 3 | 0) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$3 >> 2] = +HEAPF32[$arrayidx$3 >> 2] + -9.999999974752427e-07;
 $arrayidx$4 = $add$ptr + (($shr << 2) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$4 >> 2] = +HEAPF32[$arrayidx$4 >> 2] + 9.999999974752427e-07;
 $arrayidx$5 = $add$ptr + (($shr * 5 | 0) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$5 >> 2] = +HEAPF32[$arrayidx$5 >> 2] + 9.999999974752427e-07;
 $arrayidx$6 = $add$ptr + (($shr * 6 | 0) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$6 >> 2] = +HEAPF32[$arrayidx$6 >> 2] + -9.999999974752427e-07;
 $arrayidx$7 = $add$ptr + (($shr * 7 | 0) + $mul611 << 2) | 0;
 HEAPF32[$arrayidx$7 >> 2] = +HEAPF32[$arrayidx$7 >> 2] + -9.999999974752427e-07;
 $prefillFlag = $psEnc + 4680 | 0;
 L24 : do if (!(HEAP32[$prefillFlag >> 2] | 0)) {
  $55 = HEAP32[$psEnc + 4596 >> 2] | 0;
  $add$i16 = $2 + $55 | 0;
  $add3$i = $add$i16 + $1 | 0;
  $56 = HEAP32[$psEnc + 4548 >> 2] | 0;
  if (($add3$i | 0) < ($56 | 0)) _celt_fatal(53960, 54022, 59);
  $add$ptr$i = $psEnc + 7180 | 0;
  $add$ptr11$i = $add$ptr + ($add$i16 << 2) + (0 - $56 << 2) | 0;
  if ($55 & 3 | 0) _celt_fatal(53611, 53576, 51);
  $div$i$i = 3.1415927410125732 / +($55 + 1 | 0);
  $sub$i$i25 = 2.0 - $div$i$i * $div$i$i;
  $cmp1037$i$i = ($55 | 0) > 0;
  if ($cmp1037$i$i) {
   $S0$139$i$i = 0.0;
   $S1$140$i$i = $div$i$i;
   $k$038$i$i = 0;
   while (1) {
    HEAPF32[$Wsig$i + ($k$038$i$i << 2) >> 2] = ($S0$139$i$i + $S1$140$i$i) * (+HEAPF32[$add$ptr11$i + ($k$038$i$i << 2) >> 2] * .5);
    $add18$i$i = $k$038$i$i | 1;
    HEAPF32[$Wsig$i + ($add18$i$i << 2) >> 2] = $S1$140$i$i * +HEAPF32[$add$ptr11$i + ($add18$i$i << 2) >> 2];
    $sub24$i$i = $sub$i$i25 * $S1$140$i$i - $S0$139$i$i;
    $add25$i$i = $k$038$i$i | 2;
    HEAPF32[$Wsig$i + ($add25$i$i << 2) >> 2] = ($S1$140$i$i + $sub24$i$i) * (+HEAPF32[$add$ptr11$i + ($add25$i$i << 2) >> 2] * .5);
    $add32$i$i29 = $k$038$i$i | 3;
    HEAPF32[$Wsig$i + ($add32$i$i29 << 2) >> 2] = $sub24$i$i * +HEAPF32[$add$ptr11$i + ($add32$i$i29 << 2) >> 2];
    $k$038$i$i = $k$038$i$i + 4 | 0;
    if (($k$038$i$i | 0) >= ($55 | 0)) break; else {
     $S0$139$i$i = $sub24$i$i;
     $S1$140$i$i = $sub$i$i25 * $sub24$i$i - $S1$140$i$i;
    }
   }
  }
  $add$ptr16$i = $Wsig$i + ($55 << 2) | 0;
  $add$ptr19$i = $add$ptr11$i + ($55 << 2) | 0;
  $sub$i33 = $56 - ($55 << 1) | 0;
  _memcpy($add$ptr16$i | 0, $add$ptr19$i | 0, $sub$i33 << 2 | 0) | 0;
  $add$ptr30$i = $add$ptr16$i + ($sub$i33 << 2) | 0;
  $add$ptr37$i = $add$ptr19$i + ($sub$i33 << 2) | 0;
  if ($cmp1037$i$i) {
   $S0$139$i14$i = 1.0;
   $S1$140$i13$i = $sub$i$i25 * .5;
   $k$038$i15$i = 0;
   while (1) {
    HEAPF32[$add$ptr30$i + ($k$038$i15$i << 2) >> 2] = ($S0$139$i14$i + $S1$140$i13$i) * (+HEAPF32[$add$ptr37$i + ($k$038$i15$i << 2) >> 2] * .5);
    $add18$i21$i = $k$038$i15$i | 1;
    HEAPF32[$add$ptr30$i + ($add18$i21$i << 2) >> 2] = $S1$140$i13$i * +HEAPF32[$add$ptr37$i + ($add18$i21$i << 2) >> 2];
    $sub24$i26$i = $sub$i$i25 * $S1$140$i13$i - $S0$139$i14$i;
    $add25$i27$i = $k$038$i15$i | 2;
    HEAPF32[$add$ptr30$i + ($add25$i27$i << 2) >> 2] = ($S1$140$i13$i + $sub24$i26$i) * (+HEAPF32[$add$ptr37$i + ($add25$i27$i << 2) >> 2] * .5);
    $add32$i33$i = $k$038$i15$i | 3;
    HEAPF32[$add$ptr30$i + ($add32$i33$i << 2) >> 2] = $sub24$i26$i * +HEAPF32[$add$ptr37$i + ($add32$i33$i << 2) >> 2];
    $k$038$i15$i = $k$038$i15$i + 4 | 0;
    if (($k$038$i15$i | 0) >= ($55 | 0)) break; else {
     $S0$139$i14$i = $sub24$i26$i;
     $S1$140$i13$i = $sub$i$i25 * $sub24$i26$i - $S1$140$i13$i;
    }
   }
  }
  $pitchEstimationLPCOrder$i = $psEnc + 4648 | 0;
  $65 = HEAP32[$pitchEstimationLPCOrder$i >> 2] | 0;
  $add45$i = $65 + 1 | 0;
  $spec$select$i$i = ($add45$i | 0) > ($56 | 0) ? $56 : $add45$i;
  if (($spec$select$i$i | 0) > 0) {
   $i$011$i$i = 0;
   do {
    HEAPF32[$auto_corr$i + ($i$011$i$i << 2) >> 2] = +_silk_inner_product_FLP($Wsig$i, $Wsig$i + ($i$011$i$i << 2) | 0, $56 - $i$011$i$i | 0);
    $i$011$i$i = $i$011$i$i + 1 | 0;
   } while (($i$011$i$i | 0) < ($spec$select$i$i | 0));
   $66 = +HEAPF32[$auto_corr$i >> 2];
  } else $66 = 0.0;
  $add49$i = $66 + ($66 * 1.0000000474974513e-03 + 1.0);
  HEAPF32[$auto_corr$i >> 2] = $add49$i;
  $call$i = +_silk_schur_FLP($refl_coef$i, $auto_corr$i, $65);
  $predGain$i = $sEncCtrl + 704 | 0;
  HEAPF32[$predGain$i >> 2] = $add49$i / ($call$i > 1.0 ? $call$i : 1.0);
  $67 = HEAP32[$pitchEstimationLPCOrder$i >> 2] | 0;
  if (($67 | 0) > 0) {
   $indvars$iv$i$i = 1;
   $k$028$i$i = 0;
   while (1) {
    $68 = $indvars$iv$i$i >>> 1;
    $69 = +HEAPF32[$refl_coef$i + ($k$028$i$i << 2) >> 2];
    $k$028$i$i$looptemp = $k$028$i$i;
    $k$028$i$i = $k$028$i$i + 1 | 0;
    if ($k$028$i$i & 2147483646 | 0) {
     $sub$i51$i = $k$028$i$i$looptemp + -1 | 0;
     $n$026$i$i = 0;
     do {
      $arrayidx4$i$i = $A$i + ($n$026$i$i << 2) | 0;
      $70 = +HEAPF32[$arrayidx4$i$i >> 2];
      $arrayidx6$i$i39 = $A$i + ($sub$i51$i - $n$026$i$i << 2) | 0;
      $71 = +HEAPF32[$arrayidx6$i$i39 >> 2];
      HEAPF32[$arrayidx4$i$i >> 2] = $70 + $69 * $71;
      HEAPF32[$arrayidx6$i$i39 >> 2] = $71 + $69 * $70;
      $n$026$i$i = $n$026$i$i + 1 | 0;
     } while (($n$026$i$i | 0) != ($68 | 0));
    }
    HEAPF32[$A$i + ($k$028$i$i$looptemp << 2) >> 2] = -$69;
    if (($k$028$i$i | 0) == ($67 | 0)) break; else $indvars$iv$i$i = $indvars$iv$i$i + 1 | 0;
   }
   $sub$i71$i = $67 + -1 | 0;
   if (($67 | 0) > 1) {
    $cfac$010$i$i = .9900000095367432;
    $i$09$i$i = 0;
    while (1) {
     $arrayidx$i73$i = $A$i + ($i$09$i$i << 2) | 0;
     HEAPF32[$arrayidx$i73$i >> 2] = $cfac$010$i$i * +HEAPF32[$arrayidx$i73$i >> 2];
     $mul1$i$i = $cfac$010$i$i * .9900000095367432;
     $i$09$i$i = $i$09$i$i + 1 | 0;
     if (($i$09$i$i | 0) == ($sub$i71$i | 0)) {
      $cfac$0$lcssa$i$i = $mul1$i$i;
      $sub$i71$i449 = $sub$i71$i;
      break;
     } else $cfac$010$i$i = $mul1$i$i;
    }
   } else {
    $cfac$0$lcssa$i$i = .9900000095367432;
    $sub$i71$i449 = $sub$i71$i;
   }
  } else {
   $cfac$0$lcssa$i$i = .9900000095367432;
   $sub$i71$i449 = $67 + -1 | 0;
  }
  $arrayidx3$i$i41 = $A$i + ($sub$i71$i449 << 2) | 0;
  HEAPF32[$arrayidx3$i$i41 >> 2] = $cfac$0$lcssa$i$i * +HEAPF32[$arrayidx3$i$i41 >> 2];
  _silk_LPC_analysis_filter_FLP($res_pitch, $A$i, $add$ptr$i, $add3$i, $67);
  $signalType$i = $psEnc + 4765 | 0;
  do if (!(HEAP8[$signalType$i >> 0] | 0)) label = 265; else if (!(HEAP32[$psEnc + 4664 >> 2] | 0)) {
   $sub92$i = .6000000238418579 - +(HEAP32[$pitchEstimationLPCOrder$i >> 2] | 0) * .004000000189989805 - +(HEAP32[$psEnc + 4532 >> 2] | 0) * .10000000149011612 * .00390625 - +(HEAP8[$psEnc + 4541 >> 0] >> 1 | 0) * .15000000596046448 - +(HEAP32[$psEnc + 4712 >> 2] | 0) * .10000000149011612 * .000030517578125;
   $arraydecay93$i = $sEncCtrl + 228 | 0;
   $lagIndex$i = $psEnc + 4762 | 0;
   $contourIndex$i = $psEnc + 4764 | 0;
   $LTPCorr$i = $psEnc + 10060 | 0;
   $80 = HEAP32[$psEnc + 4544 >> 2] | 0;
   $div101$i = +(HEAP32[$psEnc + 4652 >> 2] | 0) * .0000152587890625;
   $82 = HEAP32[$fs_kHz610 >> 2] | 0;
   $83 = HEAP32[$psEnc + 4644 >> 2] | 0;
   $84 = HEAP32[$psEnc + 4580 >> 2] | 0;
   $cmp$i54$i = ($82 | 0) == 8;
   $cmp1$i55$i = ($82 | 0) == 12;
   $cmp3$i$i46 = ($82 | 0) == 16;
   switch ($82 | 0) {
   case 8:
   case 12:
   case 16:
    break;
   default:
    _celt_fatal(54444, 54506, 112);
   }
   if (($83 | 0) <= -1) _celt_fatal(54543, 54506, 115);
   if (($83 | 0) >= 3) _celt_fatal(54595, 54506, 116);
   $mul$i56$i = $84 * 5 | 0;
   $add$i57$i = $mul$i56$i + 20 | 0;
   $mul10$i$i = Math_imul($add$i57$i, $82) | 0;
   $mul13$i58$i = $add$i57$i << 2;
   $mul16$i$i = $add$i57$i << 3;
   $mul17$i$i = $82 * 5 | 0;
   $mul18$i$i = $82 << 1;
   $mul19$i$i48 = $82 * 18 | 0;
   $sub$i59$i = $mul19$i$i48 + -1 | 0;
   L75 : do if ($cmp3$i$i46) {
    if (($mul10$i$i | 0) > 0) {
     $k$011$in$i$i$i = $mul10$i$i;
     do {
      $k$011$in$i$i$i$looptemp = $k$011$in$i$i$i;
      $k$011$in$i$i$i = $k$011$in$i$i$i + -1 | 0;
      $call$i$i$i = _lrintf(+HEAPF32[$res_pitch + ($k$011$in$i$i$i << 2) >> 2]) | 0;
      $spec$select$i$i$i = ($call$i$i$i | 0) > -32768 ? $call$i$i$i : -32768;
      HEAP16[$pGains_Q16$i + ($k$011$in$i$i$i << 1) >> 1] = ($spec$select$i$i$i | 0) < 32767 ? $spec$select$i$i$i : 32767;
     } while (($k$011$in$i$i$i$looptemp | 0) > 1);
     $shr$i$i$i = $mul10$i$i >> 1;
     if (($mul10$i$i | 0) > 1) {
      $add2734$i$i$i = 0;
      $add933$i$i$i = 0;
      $k$032$i$i$i = 0;
      while (1) {
       $mul$i$i$i = $k$032$i$i$i << 1;
       $shl$i$i$i = HEAP16[$pGains_Q16$i + ($mul$i$i$i << 1) >> 1] << 10;
       $sub$i$i$i = $shl$i$i$i - $add933$i$i$i | 0;
       $add8$i$i$i = ((Math_imul($sub$i$i$i & 65535, -25727) | 0) >> 16) + (Math_imul($sub$i$i$i >> 16, -25727) | 0) + $shl$i$i$i | 0;
       $shl15$i$i$i = HEAP16[$pGains_Q16$i + (($mul$i$i$i | 1) << 1) >> 1] << 10;
       $sub17$i$i$i = $shl15$i$i$i - $add2734$i$i$i | 0;
       $add23$i$i$i = ((($sub17$i$i$i & 65535) * 9872 | 0) >>> 16) + (($sub17$i$i$i >> 16) * 9872 | 0) | 0;
       $add26$i$i$i = $add8$i$i$i + $add2734$i$i$i + $add23$i$i$i | 0;
       HEAP16[$XXLTP$i + ($k$032$i$i$i << 1) >> 1] = ($add26$i$i$i | 0) > 67107839 ? 32767 : ($add26$i$i$i | 0) < -67109888 ? -32768 : (($add26$i$i$i >>> 10) + 1 | 0) >>> 1 & 65535;
       $k$032$i$i$i = $k$032$i$i$i + 1 | 0;
       if (($k$032$i$i$i | 0) >= ($shr$i$i$i | 0)) break; else {
        $add2734$i$i$i = $add23$i$i$i + $shl15$i$i$i | 0;
        $add933$i$i$i = $add8$i$i$i + $sub$i$i$i | 0;
       }
      }
     }
    }
    if (($mul$i56$i | 0) > -20) {
     $k$07$in$i$i$i = $mul16$i$i;
     do {
      $k$07$in$i$i$i$looptemp = $k$07$in$i$i$i;
      $k$07$in$i$i$i = $k$07$in$i$i$i + -1 | 0;
      HEAPF32[$a_fix_Q12$i$i$i + ($k$07$in$i$i$i << 2) >> 2] = +(HEAP16[$XXLTP$i + ($k$07$in$i$i$i << 1) >> 1] | 0);
     } while (($k$07$in$i$i$i$looptemp | 0) > 1);
    }
    label = 82;
   } else {
    if (!$cmp1$i55$i) {
     if (!$cmp$i54$i) _celt_fatal(54647, 54506, 151);
     if (($mul$i56$i | 0) <= -20) {
      label = 85;
      break;
     }
     $k$011$in$i439$i$i = $mul16$i$i;
     while (1) {
      $k$011$in$i439$i$i$looptemp = $k$011$in$i439$i$i;
      $k$011$in$i439$i$i = $k$011$in$i439$i$i + -1 | 0;
      $call$i442$i$i = _lrintf(+HEAPF32[$res_pitch + ($k$011$in$i439$i$i << 2) >> 2]) | 0;
      $spec$select$i443$i$i = ($call$i442$i$i | 0) > -32768 ? $call$i442$i$i : -32768;
      HEAP16[$XXLTP$i + ($k$011$in$i439$i$i << 1) >> 1] = ($spec$select$i443$i$i | 0) < 32767 ? $spec$select$i443$i$i : 32767;
      if (($k$011$in$i439$i$i$looptemp | 0) <= 1) {
       label = 82;
       break L75;
      }
     }
    }
    if (($mul10$i$i | 0) > 0) {
     $k$011$in$i416$i$i = $mul10$i$i;
     do {
      $k$011$in$i416$i$i$looptemp = $k$011$in$i416$i$i;
      $k$011$in$i416$i$i = $k$011$in$i416$i$i + -1 | 0;
      $call$i419$i$i = _lrintf(+HEAPF32[$res_pitch + ($k$011$in$i416$i$i << 2) >> 2]) | 0;
      $spec$select$i420$i$i = ($call$i419$i$i | 0) > -32768 ? $call$i419$i$i : -32768;
      HEAP16[$PredCoef_Q12$i$i + ($k$011$in$i416$i$i << 1) >> 1] = ($spec$select$i420$i$i | 0) < 32767 ? $spec$select$i420$i$i : 32767;
     } while (($k$011$in$i416$i$i$looptemp | 0) > 1);
    }
    $arrayidx1$i7$i$i = $pGains_Q16$i + 16 | 0;
    HEAP32[$pGains_Q16$i >> 2] = 0;
    HEAP32[$pGains_Q16$i + 4 >> 2] = 0;
    HEAP32[$pGains_Q16$i + 8 >> 2] = 0;
    HEAP32[$pGains_Q16$i + 12 >> 2] = 0;
    $filt_state$i$i$sroa$17516$0 = 0;
    $filt_state$i$i$sroa$19$0 = 0;
    $in$addr$0$i$i$i = $PredCoef_Q12$i$i;
    $inLen$addr$0$i$i$i = $mul10$i$i;
    $out$addr$0$i$i$i = $XXLTP$i;
    while (1) {
     $cond$i9$i$i = ($inLen$addr$0$i$i$i | 0) < 480 ? $inLen$addr$0$i$i$i : 480;
     if (($inLen$addr$0$i$i$i | 0) > 0) {
      $100 = $filt_state$i$i$sroa$17516$0;
      $filt_state$i$i$sroa$19$1 = $filt_state$i$i$sroa$19$0;
      $k$018$i$i$i$i = 0;
      while (1) {
       $add$i$i$i$i = (HEAP16[$in$addr$0$i$i$i + ($k$018$i$i$i$i << 1) >> 1] << 8) + $100 | 0;
       HEAP32[$arrayidx1$i7$i$i + ($k$018$i$i$i$i << 2) >> 2] = $add$i$i$i$i;
       $shl3$i$i$i$i = $add$i$i$i$i << 2;
       $shr$i$i$i$i = $shl3$i$i$i$i >> 16;
       $and$i$i$i$i = $shl3$i$i$i$i & 65532;
       $add12$i$i$i$i = (Math_imul($shr$i$i$i$i, -2797) | 0) + $filt_state$i$i$sroa$19$1 + ((Math_imul($and$i$i$i$i, -2797) | 0) >> 16) | 0;
       $add23$i$i$i$i = ((Math_imul($and$i$i$i$i, -6507) | 0) >> 16) + (Math_imul($shr$i$i$i$i, -6507) | 0) | 0;
       $k$018$i$i$i$i = $k$018$i$i$i$i + 1 | 0;
       if (($k$018$i$i$i$i | 0) == ($cond$i9$i$i | 0)) {
        $filt_state$i$i$sroa$17516$1 = $add12$i$i$i$i;
        $filt_state$i$i$sroa$19$2 = $add23$i$i$i$i;
        break;
       } else {
        $100 = $add12$i$i$i$i;
        $filt_state$i$i$sroa$19$1 = $add23$i$i$i$i;
       }
      }
     } else {
      $filt_state$i$i$sroa$17516$1 = $filt_state$i$i$sroa$17516$0;
      $filt_state$i$i$sroa$19$2 = $filt_state$i$i$sroa$19$0;
     }
     if (($cond$i9$i$i | 0) > 2) {
      $101 = HEAP32[$pGains_Q16$i >> 2] | 0;
      $buf_ptr$049$i$i$i = $pGains_Q16$i;
      $counter$048$i$i$i = $cond$i9$i$i;
      $out$addr$147$i$i$i = $out$addr$0$i$i$i;
      while (1) {
       $103 = HEAP32[$buf_ptr$049$i$i$i + 4 >> 2] | 0;
       $shr12$i$i$i = $103 >> 16;
       $and16$i$i$i = $103 & 65535;
       $105 = HEAP32[$buf_ptr$049$i$i$i + 8 >> 2] | 0;
       $add31$i$i$i = ((($105 & 65535) * 8276 | 0) >>> 16) + (($105 >> 16) * 8276 | 0) | 0;
       $buf_ptr$049$i$i$i$looptemp = $buf_ptr$049$i$i$i;
       $buf_ptr$049$i$i$i = $buf_ptr$049$i$i$i + 12 | 0;
       $101$looptemp = $101;
       $101 = HEAP32[$buf_ptr$049$i$i$i >> 2] | 0;
       $shr34$i$i$i = $101 >> 16;
       $and38$i$i$i = $101 & 65535;
       $add43$i$i$i = ((($101$looptemp & 65535) * 4697 | 0) >>> 16) + (($101$looptemp >> 16) * 4697 | 0) + ($shr12$i$i$i * 10739 | 0) + (($and16$i$i$i * 10739 | 0) >>> 16) + $add31$i$i$i + ($shr34$i$i$i * 1567 | 0) + (($and38$i$i$i * 1567 | 0) >>> 16) | 0;
       HEAP16[$out$addr$147$i$i$i >> 1] = ($add43$i$i$i | 0) > 2097119 ? 32767 : ($add43$i$i$i | 0) < -2097184 ? -32768 : (($add43$i$i$i >>> 5) + 1 | 0) >>> 1 & 65535;
       $115 = HEAP32[$buf_ptr$049$i$i$i$looptemp + 16 >> 2] | 0;
       $add108$i$i$i = (($and38$i$i$i * 10739 | 0) >>> 16) + ($shr34$i$i$i * 10739 | 0) + ($shr12$i$i$i * 1567 | 0) + $add31$i$i$i + (($and16$i$i$i * 1567 | 0) >>> 16) + (($115 >> 16) * 4697 | 0) + ((($115 & 65535) * 4697 | 0) >>> 16) | 0;
       $incdec$ptr131$i$i$i = $out$addr$147$i$i$i + 4 | 0;
       HEAP16[$out$addr$147$i$i$i + 2 >> 1] = ($add108$i$i$i | 0) > 2097119 ? 32767 : ($add108$i$i$i | 0) < -2097184 ? -32768 : (($add108$i$i$i >>> 5) + 1 | 0) >>> 1 & 65535;
       if (($counter$048$i$i$i | 0) <= 5) {
        $out$addr$1$lcssa$i$i$i = $incdec$ptr131$i$i$i;
        break;
       } else {
        $counter$048$i$i$i = $counter$048$i$i$i + -3 | 0;
        $out$addr$147$i$i$i = $incdec$ptr131$i$i$i;
       }
      }
     } else $out$addr$1$lcssa$i$i$i = $out$addr$0$i$i$i;
     $sub133$i$i$i = $inLen$addr$0$i$i$i - $cond$i9$i$i | 0;
     if (($sub133$i$i$i | 0) <= 0) break;
     $arrayidx137$i$i$i = $pGains_Q16$i + ($cond$i9$i$i << 2) | 0;
     HEAP32[$pGains_Q16$i >> 2] = HEAP32[$arrayidx137$i$i$i >> 2];
     HEAP32[$pGains_Q16$i + 4 >> 2] = HEAP32[$arrayidx137$i$i$i + 4 >> 2];
     HEAP32[$pGains_Q16$i + 8 >> 2] = HEAP32[$arrayidx137$i$i$i + 8 >> 2];
     HEAP32[$pGains_Q16$i + 12 >> 2] = HEAP32[$arrayidx137$i$i$i + 12 >> 2];
     $filt_state$i$i$sroa$17516$0 = $filt_state$i$i$sroa$17516$1;
     $filt_state$i$i$sroa$19$0 = $filt_state$i$i$sroa$19$2;
     $in$addr$0$i$i$i = $in$addr$0$i$i$i + ($cond$i9$i$i << 1) | 0;
     $inLen$addr$0$i$i$i = $sub133$i$i$i;
     $out$addr$0$i$i$i = $out$addr$1$lcssa$i$i$i;
    }
    if (($mul$i56$i | 0) > -20) {
     $k$07$in$i429$i$i = $mul16$i$i;
     do {
      $k$07$in$i429$i$i$looptemp = $k$07$in$i429$i$i;
      $k$07$in$i429$i$i = $k$07$in$i429$i$i + -1 | 0;
      HEAPF32[$a_fix_Q12$i$i$i + ($k$07$in$i429$i$i << 2) >> 2] = +(HEAP16[$XXLTP$i + ($k$07$in$i429$i$i << 1) >> 1] | 0);
     } while (($k$07$in$i429$i$i$looptemp | 0) > 1);
    }
    label = 82;
   } while (0);
   if ((label | 0) == 82) if (($mul$i56$i | 0) > -20) {
    $add2734$i82$i$i = 0;
    $add933$i83$i$i = 0;
    $k$032$i84$i$i = 0;
    while (1) {
     $mul$i85$i$i = $k$032$i84$i$i << 1;
     $shl$i88$i$i = HEAP16[$XXLTP$i + ($mul$i85$i$i << 1) >> 1] << 10;
     $sub$i89$i$i = $shl$i88$i$i - $add933$i83$i$i | 0;
     $add8$i96$i$i = ((Math_imul($sub$i89$i$i & 65535, -25727) | 0) >> 16) + (Math_imul($sub$i89$i$i >> 16, -25727) | 0) + $shl$i88$i$i | 0;
     $shl15$i101$i$i = HEAP16[$XXLTP$i + (($mul$i85$i$i | 1) << 1) >> 1] << 10;
     $sub17$i102$i$i = $shl15$i101$i$i - $add2734$i82$i$i | 0;
     $add23$i107$i$i = ((($sub17$i102$i$i & 65535) * 9872 | 0) >>> 16) + (($sub17$i102$i$i >> 16) * 9872 | 0) | 0;
     $add26$i109$i$i = $add8$i96$i$i + $add2734$i82$i$i + $add23$i107$i$i | 0;
     HEAP16[$xXLTP$i + ($k$032$i84$i$i << 1) >> 1] = ($add26$i109$i$i | 0) > 67107839 ? 32767 : ($add26$i109$i$i | 0) < -67109888 ? -32768 : (($add26$i109$i$i >>> 10) + 1 | 0) >>> 1 & 65535;
     $k$032$i84$i$i = $k$032$i84$i$i + 1 | 0;
     if (($k$032$i84$i$i | 0) >= ($mul13$i58$i | 0)) break; else {
      $add2734$i82$i$i = $add23$i107$i$i + $shl15$i101$i$i | 0;
      $add933$i83$i$i = $add8$i96$i$i + $sub$i89$i$i | 0;
     }
    }
    $k$07$in$i452$i$i = $mul13$i58$i;
    do {
     $k$07$in$i452$i$i$looptemp = $k$07$in$i452$i$i;
     $k$07$in$i452$i$i = $k$07$in$i452$i$i + -1 | 0;
     HEAPF32[$NLSF0_Q15$i$i + ($k$07$in$i452$i$i << 2) >> 2] = +(HEAP16[$xXLTP$i + ($k$07$in$i452$i$i << 1) >> 1] | 0);
    } while (($k$07$in$i452$i$i$looptemp | 0) > 1);
    $i$0582$in$i$i = $mul13$i58$i;
    do {
     $i$0582$in$i$i$looptemp = $i$0582$in$i$i;
     $i$0582$in$i$i = $i$0582$in$i$i + -1 | 0;
     $arrayidx$i61$i = $NLSF0_Q15$i$i + ($i$0582$in$i$i << 2) | 0;
     $add55$i$i = +HEAPF32[$NLSF0_Q15$i$i + ($i$0582$in$i$i$looptemp + -2 << 2) >> 2] + +(~~+HEAPF32[$arrayidx$i61$i >> 2] | 0);
     do if ($add55$i$i > 32767.0) $cond75$i$i = 32767.0; else {
      if ($add55$i$i < -32768.0) {
       $cond75$i$i = -32768.0;
       break;
      }
      $cond75$i$i = $add55$i$i;
     } while (0);
     HEAPF32[$arrayidx$i61$i >> 2] = +(~~$cond75$i$i << 16 >> 16);
    } while (($i$0582$in$i$i$looptemp | 0) > 2);
    $arraydecay48$i$i458 = $NLSF0_Q15$i$i;
   } else label = 85;
   if ((label | 0) == 85) $arraydecay48$i$i458 = $NLSF0_Q15$i$i;
   $mul80$i$i = $84 << 2;
   _memset($invGains$i | 0, 0, $84 * 596 | 0) | 0;
   $shr$i$i51 = $84 >> 1;
   L143 : do if (($84 | 0) > 1) {
    $add$ptr93$i$i = $NLSF0_Q15$i$i + ($mul13$i58$i << 2) | 0;
    $arrayidx117$i$i = $NLSF_Q15$i + 256 | 0;
    $arrayidx128$i$i = $invGains$i + 32 | 0;
    $k$0578$i$i = 0;
    $target_ptr$0577$i$i = $NLSF0_Q15$i$i + 320 | 0;
    while (1) {
     $target_ptr$0577$i$i$looptemp = $target_ptr$0577$i$i;
     $target_ptr$0577$i$i = $target_ptr$0577$i$i + 160 | 0;
     if ($target_ptr$0577$i$i >>> 0 > $add$ptr93$i$i >>> 0) {
      label = 96;
      break;
     }
     $add$ptr98$i$i = $target_ptr$0577$i$i$looptemp + -32 | 0;
     if ($add$ptr98$i$i >>> 0 < $arraydecay48$i$i458 >>> 0) {
      label = 98;
      break;
     }
     if (($target_ptr$0577$i$i$looptemp + 128 | 0) >>> 0 > $add$ptr93$i$i >>> 0) {
      label = 100;
      break;
     }
     _celt_pitch_xcorr_c($target_ptr$0577$i$i$looptemp, $target_ptr$0577$i$i$looptemp + -288 | 0, $NLSF_Q15$i, 40, 65);
     $135 = +HEAPF32[$arrayidx117$i$i >> 2];
     $i$033$i124$i$i = 0;
     $result$034$i123$i$i = 0.0;
     do {
      $conv$i126$i$i = +HEAPF32[$target_ptr$0577$i$i$looptemp + ($i$033$i124$i$i << 2) >> 2];
      $conv6$i130$i$i = +HEAPF32[$target_ptr$0577$i$i$looptemp + (($i$033$i124$i$i | 1) << 2) >> 2];
      $conv14$i135$i$i = +HEAPF32[$target_ptr$0577$i$i$looptemp + (($i$033$i124$i$i | 2) << 2) >> 2];
      $conv22$i140$i$i = +HEAPF32[$target_ptr$0577$i$i$looptemp + (($i$033$i124$i$i | 3) << 2) >> 2];
      $result$034$i123$i$i = $result$034$i123$i$i + ($conv$i126$i$i * $conv$i126$i$i + $conv6$i130$i$i * $conv6$i130$i$i + $conv14$i135$i$i * $conv14$i135$i$i + $conv22$i140$i$i * $conv22$i140$i$i);
      $i$033$i124$i$i = $i$033$i124$i$i + 4 | 0;
     } while ($i$033$i124$i$i >>> 0 < 37);
     $i$033$i166$i$i = 0;
     $result$034$i165$i$i = 0.0;
     do {
      $conv$i168$i$i = +HEAPF32[$add$ptr98$i$i + ($i$033$i166$i$i << 2) >> 2];
      $conv6$i172$i$i = +HEAPF32[$add$ptr98$i$i + (($i$033$i166$i$i | 1) << 2) >> 2];
      $conv14$i177$i$i = +HEAPF32[$add$ptr98$i$i + (($i$033$i166$i$i | 2) << 2) >> 2];
      $conv22$i182$i$i = +HEAPF32[$add$ptr98$i$i + (($i$033$i166$i$i | 3) << 2) >> 2];
      $result$034$i165$i$i = $result$034$i165$i$i + ($conv$i168$i$i * $conv$i168$i$i + $conv6$i172$i$i * $conv6$i172$i$i + $conv14$i177$i$i * $conv14$i177$i$i + $conv22$i182$i$i * $conv22$i182$i$i);
      $i$033$i166$i$i = $i$033$i166$i$i + 4 | 0;
     } while ($i$033$i166$i$i >>> 0 < 37);
     $add124$i$i52 = $result$034$i123$i$i + $result$034$i165$i$i + 16.0e4;
     HEAPF32[$arrayidx128$i$i >> 2] = +HEAPF32[$arrayidx128$i$i >> 2] + $135 * 2.0 / $add124$i$i52;
     $basis_ptr$0574$i$i = $add$ptr98$i$i;
     $d$0575$i$i = 9;
     $normalizer$0573$i$i = $add124$i$i52;
     do {
      $basis_ptr$0574$i$i$looptemp = $basis_ptr$0574$i$i;
      $basis_ptr$0574$i$i = $basis_ptr$0574$i$i + -4 | 0;
      $conv139$i$i = +HEAPF32[$basis_ptr$0574$i$i >> 2];
      $conv144$i$i = +HEAPF32[$basis_ptr$0574$i$i$looptemp + 156 >> 2];
      $normalizer$0573$i$i = $normalizer$0573$i$i + ($conv139$i$i * $conv139$i$i - $conv144$i$i * $conv144$i$i);
      $arrayidx154$i$i = $invGains$i + ($d$0575$i$i << 2) | 0;
      HEAPF32[$arrayidx154$i$i >> 2] = +HEAPF32[$arrayidx154$i$i >> 2] + +HEAPF32[$NLSF_Q15$i + (72 - $d$0575$i$i << 2) >> 2] * 2.0 / $normalizer$0573$i$i;
      $d$0575$i$i = $d$0575$i$i + 1 | 0;
     } while (($d$0575$i$i | 0) != 73);
     $k$0578$i$i = $k$0578$i$i + 1 | 0;
     if (($k$0578$i$i | 0) >= ($shr$i$i51 | 0)) break L143;
    }
    if ((label | 0) == 96) _celt_fatal(54677, 54506, 173); else if ((label | 0) == 98) _celt_fatal(54757, 54506, 178); else if ((label | 0) == 100) _celt_fatal(54799, 54506, 179);
   } while (0);
   $i$1572$i$i = 72;
   while (1) {
    $arrayidx167$i$i = $invGains$i + ($i$1572$i$i << 2) | 0;
    $149 = +HEAPF32[$arrayidx167$i$i >> 2];
    HEAPF32[$arrayidx167$i$i >> 2] = $149 - $149 * +($i$1572$i$i | 0) * .000244140625;
    if ($i$1572$i$i >>> 0 > 8) $i$1572$i$i = $i$1572$i$i + -1 | 0; else break;
   }
   $mul177$i$i = $83 << 1;
   $add178$i$i = $mul177$i$i + 4 | 0;
   if (($add178$i$i * 3 | 0) >= 25) _celt_fatal(54878, 54506, 218);
   $arrayidx185$i$i = $invGains$i + 32 | 0;
   if (($83 | 0) <= -2) _celt_fatal(55137, 55161, 50);
   if (($83 | 0) > 30) _celt_fatal(55183, 55161, 52);
   $i$072$i$i$i = 0;
   do {
    HEAP32[$d_srch$i$i + ($i$072$i$i$i << 2) >> 2] = $i$072$i$i$i;
    $i$072$i$i$i = $i$072$i$i$i + 1 | 0;
   } while (($i$072$i$i$i | 0) != ($add178$i$i | 0));
   $i$170$i$i$i = 1;
   do {
    $150 = +HEAPF32[$arrayidx185$i$i + ($i$170$i$i$i << 2) >> 2];
    $j$068$in$i$i$i = $i$170$i$i$i;
    while (1) {
     $j$068$i$i$i = $j$068$in$i$i$i + -1 | 0;
     $arrayidx14$i$i$i = $arrayidx185$i$i + ($j$068$i$i$i << 2) | 0;
     $151 = +HEAPF32[$arrayidx14$i$i$i >> 2];
     $arrayidx18$i$i$i = $arrayidx185$i$i + ($j$068$in$i$i$i << 2) | 0;
     if (!($150 > $151)) {
      label = 121;
      break;
     }
     HEAPF32[$arrayidx18$i$i$i >> 2] = $151;
     $arrayidx19$i$i$i = $d_srch$i$i + ($j$068$i$i$i << 2) | 0;
     HEAP32[$d_srch$i$i + ($j$068$in$i$i$i << 2) >> 2] = HEAP32[$arrayidx19$i$i$i >> 2];
     if (($j$068$in$i$i$i | 0) > 1) $j$068$in$i$i$i = $j$068$i$i$i; else {
      $arrayidx25$pre$phi$i$i$iZ2D = $arrayidx14$i$i$i;
      $arrayidx27$pre$phi$i$i$iZ2D = $arrayidx19$i$i$i;
      break;
     }
    }
    if ((label | 0) == 121) {
     label = 0;
     $arrayidx25$pre$phi$i$i$iZ2D = $arrayidx18$i$i$i;
     $arrayidx27$pre$phi$i$i$iZ2D = $d_srch$i$i + ($j$068$in$i$i$i << 2) | 0;
    }
    HEAPF32[$arrayidx25$pre$phi$i$i$iZ2D >> 2] = $150;
    HEAP32[$arrayidx27$pre$phi$i$i$iZ2D >> 2] = $i$170$i$i$i;
    $i$170$i$i$i = $i$170$i$i$i + 1 | 0;
   } while (($i$170$i$i$i | 0) != ($add178$i$i | 0));
   if (($83 | 0) < 31) {
    $arrayidx36$i$i$i = $arrayidx185$i$i + ($mul177$i$i + 3 << 2) | 0;
    $sub39$i$i$i = $mul177$i$i + 2 | 0;
    $i$265$us$i$i$i = $add178$i$i;
    do {
     $153 = +HEAPF32[$arrayidx185$i$i + ($i$265$us$i$i$i << 2) >> 2];
     if ($153 > +HEAPF32[$arrayidx36$i$i$i >> 2]) {
      $j$162$us$i$i$i = $sub39$i$i$i;
      while (1) {
       $155 = +HEAPF32[$arrayidx185$i$i + ($j$162$us$i$i$i << 2) >> 2];
       if (!($153 > $155)) {
        $j$1$lcssa$us$i$i$i = $j$162$us$i$i$i;
        break;
       }
       $add48$us$i$i$i = $j$162$us$i$i$i + 1 | 0;
       HEAPF32[$arrayidx185$i$i + ($add48$us$i$i$i << 2) >> 2] = $155;
       HEAP32[$d_srch$i$i + ($add48$us$i$i$i << 2) >> 2] = HEAP32[$d_srch$i$i + ($j$162$us$i$i$i << 2) >> 2];
       $dec54$us$i$i$i = $j$162$us$i$i$i + -1 | 0;
       if (($j$162$us$i$i$i | 0) > 0) $j$162$us$i$i$i = $dec54$us$i$i$i; else {
        $j$1$lcssa$us$i$i$i = $dec54$us$i$i$i;
        break;
       }
      }
      $add56$us$i$i$i = $j$1$lcssa$us$i$i$i + 1 | 0;
      HEAPF32[$arrayidx185$i$i + ($add56$us$i$i$i << 2) >> 2] = $153;
      HEAP32[$d_srch$i$i + ($add56$us$i$i$i << 2) >> 2] = $i$265$us$i$i$i;
     }
     $i$265$us$i$i$i = $i$265$us$i$i$i + 1 | 0;
    } while (($i$265$us$i$i$i | 0) != 65);
   }
   $157 = +HEAPF32[$arrayidx185$i$i >> 2];
   L200 : do if ($157 < .20000000298023224) {
    _memset($arraydecay93$i | 0, 0, $mul80$i$i | 0) | 0;
    label = 261;
   } else {
    $mul196$i$i = $157 * $div101$i;
    if (!($157 > $mul196$i$i)) _celt_fatal(54934, 54506, 241);
    $i$2569626$i$i = 0;
    while (1) {
     $arrayidx207$i$i = $d_srch$i$i + ($i$2569626$i$i << 2) | 0;
     HEAP32[$arrayidx207$i$i >> 2] = (HEAP32[$arrayidx207$i$i >> 2] << 1) + 16;
     $inc214$i$i = $i$2569626$i$i + 1 | 0;
     if (($inc214$i$i | 0) >= ($add178$i$i | 0)) {
      label = 138;
      break;
     }
     if (+HEAPF32[$invGains$i + ($i$2569626$i$i + 9 << 2) >> 2] > $mul196$i$i) $i$2569626$i$i = $inc214$i$i; else {
      $length_d_srch$0$i$i466 = $inc214$i$i;
      break;
     }
    }
    do if ((label | 0) == 138) {
     if (($83 | 0) > -2) {
      $length_d_srch$0$i$i466 = $add178$i$i;
      break;
     }
     _celt_fatal(54934, 54506, 241);
    } while (0);
    _memset($d_comp$i$i + 22 | 0, 0, 274) | 0;
    $i$4566$i$i = 0;
    do {
     HEAP16[$d_comp$i$i + (HEAP32[$d_srch$i$i + ($i$4566$i$i << 2) >> 2] << 1) >> 1] = 1;
     $i$4566$i$i = $i$4566$i$i + 1 | 0;
    } while (($i$4566$i$i | 0) != ($length_d_srch$0$i$i466 | 0));
    $arrayidx245$phi$trans$insert$phi$trans$insert$i$i = $d_comp$i$i + 290 | 0;
    $161 = HEAP16[$arrayidx245$phi$trans$insert$phi$trans$insert$i$i >> 1] | 0;
    $i$5564$i$i = 146;
    while (1) {
     $161$looptemp = $161;
     $161 = HEAP16[$d_comp$i$i + ($i$5564$i$i + -2 << 1) >> 1] | 0;
     $arrayidx251$i$i = $d_comp$i$i + ($i$5564$i$i << 1) | 0;
     HEAP16[$arrayidx251$i$i >> 1] = ($161 & 65535) + ($161$looptemp & 65535) + (HEAPU16[$arrayidx251$i$i >> 1] | 0);
     if ($i$5564$i$i >>> 0 <= 16) break; else $i$5564$i$i = $i$5564$i$i + -1 | 0;
    }
    $i$6563$i$i = 16;
    $length_d_srch$1562$i$i = 0;
    while (1) {
     $i$6563$i$i$looptemp = $i$6563$i$i;
     $i$6563$i$i = $i$6563$i$i + 1 | 0;
     if ((HEAP16[$d_comp$i$i + ($i$6563$i$i << 1) >> 1] | 0) > 0) {
      HEAP32[$d_srch$i$i + ($length_d_srch$1562$i$i << 2) >> 2] = $i$6563$i$i$looptemp;
      $length_d_srch$2$i$i = $length_d_srch$1562$i$i + 1 | 0;
     } else $length_d_srch$2$i$i = $length_d_srch$1562$i$i;
     if (($i$6563$i$i | 0) == 144) break; else $length_d_srch$1562$i$i = $length_d_srch$2$i$i;
    }
    $165 = HEAP16[$arrayidx245$phi$trans$insert$phi$trans$insert$i$i >> 1] | 0;
    $166 = HEAP16[$d_comp$i$i + 288 >> 1] | 0;
    $i$7561$i$i = 146;
    while (1) {
     $167 = HEAP16[$d_comp$i$i + ($i$7561$i$i + -3 << 1) >> 1] | 0;
     $arrayidx291$i$i = $d_comp$i$i + ($i$7561$i$i << 1) | 0;
     HEAP16[$arrayidx291$i$i >> 1] = ($166 & 65535) + ($165 & 65535) + ($167 & 65535) + (HEAPU16[$arrayidx291$i$i >> 1] | 0);
     if ($i$7561$i$i >>> 0 > 16) {
      $165$phi = $166;
      $166 = $167;
      $i$7561$i$i = $i$7561$i$i + -1 | 0;
      $165 = $165$phi;
     } else break;
    }
    $i$8560$i$i = 16;
    $length_d_comp$0559$i$i = 0;
    while (1) {
     if ((HEAP16[$d_comp$i$i + ($i$8560$i$i << 1) >> 1] | 0) > 0) {
      HEAP16[$d_comp$i$i + ($length_d_comp$0559$i$i << 1) >> 1] = $i$8560$i$i + 65534;
      $length_d_comp$1$i$i = $length_d_comp$0559$i$i + 1 | 0;
     } else $length_d_comp$1$i$i = $length_d_comp$0559$i$i;
     $i$8560$i$i = $i$8560$i$i + 1 | 0;
     if (($i$8560$i$i | 0) == 147) break; else $length_d_comp$0559$i$i = $length_d_comp$1$i$i;
    }
    _memset($invGains$i | 0, 0, 2384) | 0;
    $cmp325555$i$i = ($84 | 0) > 0;
    if ($cmp325555$i$i & ($length_d_comp$1$i$i | 0) > 0) {
     $k$1557$us$i$i = 0;
     $target_ptr$2556$us$i$i = $cmp$i54$i ? $res_pitch + 640 | 0 : $a_fix_Q12$i$i$i + 640 | 0;
     while (1) {
      $i$033$i288$i$i = 0;
      $result$034$i287$i$i = 0.0;
      do {
       $conv$i290$i$i = +HEAPF32[$target_ptr$2556$us$i$i + ($i$033$i288$i$i << 2) >> 2];
       $conv6$i294$i$i = +HEAPF32[$target_ptr$2556$us$i$i + (($i$033$i288$i$i | 1) << 2) >> 2];
       $conv14$i299$i$i = +HEAPF32[$target_ptr$2556$us$i$i + (($i$033$i288$i$i | 2) << 2) >> 2];
       $conv22$i304$i$i = +HEAPF32[$target_ptr$2556$us$i$i + (($i$033$i288$i$i | 3) << 2) >> 2];
       $result$034$i287$i$i = $result$034$i287$i$i + ($conv$i290$i$i * $conv$i290$i$i + $conv6$i294$i$i * $conv6$i294$i$i + $conv14$i299$i$i * $conv14$i299$i$i + $conv22$i304$i$i * $conv22$i304$i$i);
       $i$033$i288$i$i = $i$033$i288$i$i + 4 | 0;
      } while ($i$033$i288$i$i >>> 0 < 37);
      $add329$us$i$i = $result$034$i287$i$i + 1.0;
      $j$0554$us$i$i = 0;
      do {
       $conv335$us$i$i = HEAP16[$d_comp$i$i + ($j$0554$us$i$i << 1) >> 1] | 0;
       $add$ptr337$us$i$i = $target_ptr$2556$us$i$i + (0 - $conv335$us$i$i << 2) | 0;
       $i$031$i$i$i = 0;
       $result$032$i$i$i = 0.0;
       do {
        $add4$i252$i$i = $i$031$i$i$i | 1;
        $add12$i258$i$i = $i$031$i$i$i | 2;
        $add20$i264$i$i = $i$031$i$i$i | 3;
        $result$032$i$i$i = $result$032$i$i$i + (+HEAPF32[$add$ptr337$us$i$i + ($i$031$i$i$i << 2) >> 2] * +HEAPF32[$target_ptr$2556$us$i$i + ($i$031$i$i$i << 2) >> 2] + +HEAPF32[$add$ptr337$us$i$i + ($add4$i252$i$i << 2) >> 2] * +HEAPF32[$target_ptr$2556$us$i$i + ($add4$i252$i$i << 2) >> 2] + +HEAPF32[$add$ptr337$us$i$i + ($add12$i258$i$i << 2) >> 2] * +HEAPF32[$target_ptr$2556$us$i$i + ($add12$i258$i$i << 2) >> 2] + +HEAPF32[$add$ptr337$us$i$i + ($add20$i264$i$i << 2) >> 2] * +HEAPF32[$target_ptr$2556$us$i$i + ($add20$i264$i$i << 2) >> 2]);
        $i$031$i$i$i = $i$031$i$i$i + 4 | 0;
       } while ($i$031$i$i$i >>> 0 < 37);
       if ($result$032$i$i$i > 0.0) {
        $i$033$i208$i$i = 0;
        $result$034$i207$i$i = 0.0;
        do {
         $conv$i210$i$i = +HEAPF32[$add$ptr337$us$i$i + ($i$033$i208$i$i << 2) >> 2];
         $conv6$i214$i$i = +HEAPF32[$add$ptr337$us$i$i + (($i$033$i208$i$i | 1) << 2) >> 2];
         $conv14$i219$i$i = +HEAPF32[$add$ptr337$us$i$i + (($i$033$i208$i$i | 2) << 2) >> 2];
         $conv22$i224$i$i = +HEAPF32[$add$ptr337$us$i$i + (($i$033$i208$i$i | 3) << 2) >> 2];
         $result$034$i207$i$i = $result$034$i207$i$i + ($conv$i210$i$i * $conv$i210$i$i + $conv6$i214$i$i * $conv6$i214$i$i + $conv14$i219$i$i * $conv14$i219$i$i + $conv22$i224$i$i * $conv22$i224$i$i);
         $i$033$i208$i$i = $i$033$i208$i$i + 4 | 0;
        } while ($i$033$i208$i$i >>> 0 < 37);
        $$sink$i$i = $result$032$i$i$i * 2.0 / ($add329$us$i$i + $result$034$i207$i$i);
       } else $$sink$i$i = 0.0;
       HEAPF32[$invGains$i + ($k$1557$us$i$i * 596 | 0) + ($conv335$us$i$i << 2) >> 2] = $$sink$i$i;
       $j$0554$us$i$i = $j$0554$us$i$i + 1 | 0;
      } while (($j$0554$us$i$i | 0) != ($length_d_comp$1$i$i | 0));
      $k$1557$us$i$i = $k$1557$us$i$i + 1 | 0;
      if (($k$1557$us$i$i | 0) == ($84 | 0)) break; else $target_ptr$2556$us$i$i = $target_ptr$2556$us$i$i + 160 | 0;
     }
    }
    if (($80 | 0) > 0) {
     if ($cmp1$i55$i) $prevLag$addr$0$i$i = ($80 << 1 | 0) / 3 | 0; else $prevLag$addr$0$i$i = $80 >>> ($cmp3$i$i46 & 1);
     $prevLag$addr$1$i$i = $prevLag$addr$0$i$i;
     $prevLag_log2$0$i$i = +_llvm_log10_f64(+(+($prevLag$addr$0$i$i | 0))) * 3.32192809488736;
    } else {
     $prevLag$addr$1$i$i = $80;
     $prevLag_log2$0$i$i = 0.0;
    }
    $cmp380$i$i = ($84 | 0) == 4;
    $spec$select499$i$i = $cmp380$i$i ? 11 : 3;
    $spec$select500$i$i = $cmp380$i$i & ($cmp$i54$i & ($83 | 0) > 0) ? 11 : 3;
    $spec$select501$i$i = $cmp380$i$i ? 27072 : 53216;
    do if (($length_d_srch$2$i$i | 0) > 0) {
     $conv437$i$i = +($84 | 0);
     $mul438$i$i = $conv437$i$i * .20000000298023224;
     $cmp441$i$i = ($prevLag$addr$1$i$i | 0) > 0;
     $mul458$i$i = $sub92$i * $conv437$i$i;
     $190 = $spec$select500$i$i << 2;
     $CBimax$0545$i$i = 0;
     $CCmax$0548$i$i = 0.0;
     $CCmax_b$0547$i$i = -1.0e3;
     $k$2549$i$i = 0;
     $lag$0546$i$i = -1;
     while (1) {
      $191 = HEAP32[$d_srch$i$i + ($k$2549$i$i << 2) >> 2] | 0;
      if ($cmp325555$i$i) {
       $j$1539$us$i$i = 0;
       do {
        $arrayidx401$us$i$i = $LPC_in_pre$i + ($j$1539$us$i$i << 2) | 0;
        HEAPF32[$arrayidx401$us$i$i >> 2] = 0.0;
        $194 = 0.0;
        $i$9538$us$i$i = 0;
        do {
         $194 = +HEAPF32[$invGains$i + ($i$9538$us$i$i * 596 | 0) + ($191 + (HEAP8[$spec$select501$i$i + ((Math_imul($i$9538$us$i$i, $spec$select499$i$i) | 0) + $j$1539$us$i$i) >> 0] | 0) << 2) >> 2] + $194;
         $i$9538$us$i$i = $i$9538$us$i$i + 1 | 0;
        } while (($i$9538$us$i$i | 0) != ($84 | 0));
        HEAPF32[$arrayidx401$us$i$i >> 2] = $194;
        $j$1539$us$i$i = $j$1539$us$i$i + 1 | 0;
       } while (($j$1539$us$i$i | 0) != ($spec$select500$i$i | 0));
      } else _memset($LPC_in_pre$i | 0, 0, $190 | 0) | 0;
      $CBimax_new$0542$i$i = 0;
      $CCmax_new$0541$i$i = -1.0e3;
      $i$10543$i$i = 0;
      do {
       $195 = +HEAPF32[$LPC_in_pre$i + ($i$10543$i$i << 2) >> 2];
       $cmp426$i$i = $195 > $CCmax_new$0541$i$i;
       $CCmax_new$0541$i$i = $cmp426$i$i ? $195 : $CCmax_new$0541$i$i;
       $CBimax_new$0542$i$i = $cmp426$i$i ? $i$10543$i$i : $CBimax_new$0542$i$i;
       $i$10543$i$i = $i$10543$i$i + 1 | 0;
      } while (($i$10543$i$i | 0) != ($spec$select500$i$i | 0));
      $conv$i463$i$i = +_llvm_log10_f64(+(+($191 | 0))) * 3.32192809488736;
      $sub440$i$i = $CCmax_new$0541$i$i - $mul438$i$i * $conv$i463$i$i;
      if ($cmp441$i$i) {
       $sub444$i$i = $conv$i463$i$i - $prevLag_log2$0$i$i;
       $mul445$i$i = $sub444$i$i * $sub444$i$i;
       $CCmax_new_b$0$i$i = $sub440$i$i - $mul445$i$i * ($mul438$i$i * +HEAPF32[$LTPCorr$i >> 2]) / ($mul445$i$i + .5);
      } else $CCmax_new_b$0$i$i = $sub440$i$i;
      $or$cond$i$i = $CCmax_new$0541$i$i > $mul458$i$i & $CCmax_new_b$0$i$i > $CCmax_b$0547$i$i;
      $CBimax$0545$i$i = $or$cond$i$i ? $CBimax_new$0542$i$i : $CBimax$0545$i$i;
      $lag$0546$i$i = $or$cond$i$i ? $191 : $lag$0546$i$i;
      $CCmax$0548$i$i = $or$cond$i$i ? $CCmax_new$0541$i$i : $CCmax$0548$i$i;
      $k$2549$i$i = $k$2549$i$i + 1 | 0;
      if (($k$2549$i$i | 0) == ($length_d_srch$2$i$i | 0)) break; else $CCmax_b$0547$i$i = $or$cond$i$i ? $CCmax_new_b$0$i$i : $CCmax_b$0547$i$i;
     }
     if (($lag$0546$i$i | 0) == -1) break;
     HEAPF32[$LTPCorr$i >> 2] = $CCmax$0548$i$i / $conv437$i$i;
     if (($82 | 0) > 8) {
      if ($cmp1$i55$i) {
       $mul480$i$i = ($lag$0546$i$i << 16 >> 16) * 3 | 0;
       $lag$2$i$i = ($mul480$i$i >> 1) + ($mul480$i$i & 1) | 0;
      } else $lag$2$i$i = $lag$0546$i$i << 1;
      if (($mul18$i$i | 0) < ($mul19$i$i48 | 0)) $cond518$i$i = ($lag$2$i$i | 0) < ($mul19$i$i48 | 0) ? (($lag$2$i$i | 0) < ($mul18$i$i | 0) ? $mul18$i$i : $lag$2$i$i) : $sub$i59$i; else $cond518$i$i = ($lag$2$i$i | 0) > ($mul18$i$i | 0) ? $mul18$i$i : ($lag$2$i$i | 0) < ($sub$i59$i | 0) ? $sub$i59$i : $lag$2$i$i;
      $sub519$i$i = $cond518$i$i + -2 | 0;
      $cond$i$i$i = ($sub519$i$i | 0) > ($mul18$i$i | 0) ? $sub519$i$i : $mul18$i$i;
      $add521$i$i = $cond518$i$i + 2 | 0;
      $cond$i497$i$i = ($add521$i$i | 0) < ($sub$i59$i | 0) ? $add521$i$i : $sub$i59$i;
      switch ($84 | 0) {
      case 4:
       {
        $Lag_CB_ptr$070$i$i$i = 27120;
        $Lag_range_ptr$069$i$i$i = 27264 + ($83 << 3) | 0;
        $arraydecay73$i$i$i = $pGains_Q16$i;
        $cbk_size$068$i$i$i = 34;
        $nb_cbk_search$067$i$i$i = HEAP8[53226 + $83 >> 0] | 0;
        break;
       }
      case 2:
       {
        $Lag_CB_ptr$070$i$i$i = 27040;
        $Lag_range_ptr$069$i$i$i = 53222;
        $arraydecay73$i$i$i = $pGains_Q16$i;
        $cbk_size$068$i$i$i = 12;
        $nb_cbk_search$067$i$i$i = 12;
        break;
       }
      default:
       _celt_fatal(54970, 54506, 518);
      }
      $arrayidx1471$i$i$i = $res_pitch + ($82 * 20 << 2) | 0;
      $idx$neg72$i$i$i = 0 - $cond$i$i$i | 0;
      $k$052$us$i$i$i = 0;
      $target_ptr$054$us$i$i$i = $arrayidx1471$i$i$i;
      while (1) {
       $mul$us$i482$i$i = $k$052$us$i$i$i << 1;
       $199 = HEAP8[$Lag_range_ptr$069$i$i$i + $mul$us$i482$i$i >> 0] | 0;
       $conv17$us$i484$i$i = $199 << 24 >> 24;
       $200 = 0 - $conv17$us$i484$i$i | 0;
       $201 = HEAP8[$Lag_range_ptr$069$i$i$i + ($mul$us$i482$i$i | 1) >> 0] | 0;
       $conv21$us$i485$i$i = $201 << 24 >> 24;
       _celt_pitch_xcorr_c($target_ptr$054$us$i$i$i, $target_ptr$054$us$i$i$i + ($idx$neg72$i$i$i << 2) + (0 - $conv21$us$i485$i$i << 2) | 0, $arraydecay73$i$i$i, $mul17$i$i, 1 - $conv17$us$i484$i$i + $conv21$us$i485$i$i | 0);
       if ($199 << 24 >> 24 <= $201 << 24 >> 24) {
        $j$047$us$i$i$i = $conv17$us$i484$i$i;
        $lag_counter$046$us$i$i$i = 0;
        while (1) {
         HEAP32[$PredCoef_Q12$i$i + ($lag_counter$046$us$i$i$i << 2) >> 2] = HEAP32[$pGains_Q16$i + ($conv21$us$i485$i$i - $j$047$us$i$i$i << 2) >> 2];
         if (($j$047$us$i$i$i | 0) < ($conv21$us$i485$i$i | 0)) {
          $j$047$us$i$i$i = $j$047$us$i$i$i + 1 | 0;
          $lag_counter$046$us$i$i$i = $lag_counter$046$us$i$i$i + 1 | 0;
         } else break;
        }
       }
       $mul42$us$i489$i$i = Math_imul($k$052$us$i$i$i, $cbk_size$068$i$i$i) | 0;
       $scevgep57$i$i$i = $PredCoef_Q12$i$i + ($200 << 2) | 0;
       $i$050$us$i$i$i = 0;
       do {
        $scevgep$i487$i$i = $cross_corr_st3$i$i + ($k$052$us$i$i$i * 680 | 0) + ($i$050$us$i$i$i * 20 | 0) | 0;
        $scevgep58$i$i$i = $scevgep57$i$i$i + (HEAP8[$Lag_CB_ptr$070$i$i$i + ($i$050$us$i$i$i + $mul42$us$i489$i$i) >> 0] << 2) | 0;
        HEAP32[$scevgep$i487$i$i >> 2] = HEAP32[$scevgep58$i$i$i >> 2];
        HEAP32[$scevgep$i487$i$i + 4 >> 2] = HEAP32[$scevgep58$i$i$i + 4 >> 2];
        HEAP32[$scevgep$i487$i$i + 8 >> 2] = HEAP32[$scevgep58$i$i$i + 8 >> 2];
        HEAP32[$scevgep$i487$i$i + 12 >> 2] = HEAP32[$scevgep58$i$i$i + 12 >> 2];
        HEAP32[$scevgep$i487$i$i + 16 >> 2] = HEAP32[$scevgep58$i$i$i + 16 >> 2];
        $i$050$us$i$i$i = $i$050$us$i$i$i + 1 | 0;
       } while (($i$050$us$i$i$i | 0) != ($nb_cbk_search$067$i$i$i | 0));
       $k$052$us$i$i$i = $k$052$us$i$i$i + 1 | 0;
       if (($k$052$us$i$i$i | 0) == ($84 | 0)) break; else $target_ptr$054$us$i$i$i = $target_ptr$054$us$i$i$i + ($mul17$i$i << 2) | 0;
      }
      switch ($84 | 0) {
      case 4:
       {
        $Lag_CB_ptr$085$i$i$i = 27120;
        $Lag_range_ptr$084$i$i$i = 27264 + ($83 << 3) | 0;
        $arrayidx2287$i$i$i = $PredCoef_Q12$i$i;
        $cbk_size$083$i$i$i = 34;
        $nb_cbk_search$082$i$i$i = HEAP8[53226 + $83 >> 0] | 0;
        break;
       }
      case 2:
       {
        $Lag_CB_ptr$085$i$i$i = 27040;
        $Lag_range_ptr$084$i$i$i = 53222;
        $arrayidx2287$i$i$i = $PredCoef_Q12$i$i;
        $cbk_size$083$i$i$i = 12;
        $nb_cbk_search$082$i$i$i = 12;
        break;
       }
      default:
       _celt_fatal(54970, 54506, 584);
      }
      $sub$i32$i$i = $mul17$i$i + -3 | 0;
      $cmp32$i33$i$i = ($mul17$i$i | 0) > 3;
      $205 = $mul17$i$i & -4;
      $k$065$us$i$i$i = 0;
      $target_ptr$067$us$i$i$i = $arrayidx1471$i$i$i;
      while (1) {
       $mul$us$i$i$i = $k$065$us$i$i$i << 1;
       $206 = HEAP8[$Lag_range_ptr$084$i$i$i + $mul$us$i$i$i >> 0] | 0;
       $conv17$us$i$i$i = $206 << 24 >> 24;
       $207 = 0 - $conv17$us$i$i$i | 0;
       $add$ptr19$us$i$i$i = $target_ptr$067$us$i$i$i + (0 - ($cond$i$i$i + $conv17$us$i$i$i) << 2) | 0;
       if ($cmp32$i33$i$i) {
        $i$033$i36$i$i = 0;
        $result$034$i35$i$i = 0.0;
        while (1) {
         $conv$i38$i$i = +HEAPF32[$add$ptr19$us$i$i$i + ($i$033$i36$i$i << 2) >> 2];
         $conv6$i42$i$i = +HEAPF32[$add$ptr19$us$i$i$i + (($i$033$i36$i$i | 1) << 2) >> 2];
         $conv14$i47$i$i = +HEAPF32[$add$ptr19$us$i$i$i + (($i$033$i36$i$i | 2) << 2) >> 2];
         $conv22$i52$i$i = +HEAPF32[$add$ptr19$us$i$i$i + (($i$033$i36$i$i | 3) << 2) >> 2];
         $add28$i55$i$i = $result$034$i35$i$i + ($conv$i38$i$i * $conv$i38$i$i + $conv6$i42$i$i * $conv6$i42$i$i + $conv14$i47$i$i * $conv14$i47$i$i + $conv22$i52$i$i * $conv22$i52$i$i);
         $i$033$i36$i$i = $i$033$i36$i$i + 4 | 0;
         if (($i$033$i36$i$i | 0) >= ($sub$i32$i$i | 0)) {
          $i$0$lcssa$i60$i$i = $205;
          $result$0$lcssa$i61$i$i = $add28$i55$i$i;
          break;
         } else $result$034$i35$i$i = $add28$i55$i$i;
        }
       } else {
        $i$0$lcssa$i60$i$i = 0;
        $result$0$lcssa$i61$i$i = 0.0;
       }
       if (($i$0$lcssa$i60$i$i | 0) < ($mul17$i$i | 0)) {
        $i$129$i66$i$i = $i$0$lcssa$i60$i$i;
        $result$130$i65$i$i = $result$0$lcssa$i61$i$i;
        while (1) {
         $conv35$i68$i$i = +HEAPF32[$add$ptr19$us$i$i$i + ($i$129$i66$i$i << 2) >> 2];
         $add39$i70$i$i = $result$130$i65$i$i + $conv35$i68$i$i * $conv35$i68$i$i;
         $i$129$i66$i$i = $i$129$i66$i$i + 1 | 0;
         if (($i$129$i66$i$i | 0) == ($mul17$i$i | 0)) {
          $result$1$lcssa$i74$i$i = $add39$i70$i$i;
          break;
         } else $result$130$i65$i$i = $add39$i70$i$i;
        }
       } else $result$1$lcssa$i74$i$i = $result$0$lcssa$i61$i$i;
       $add20$us$i$i$i = $result$1$lcssa$i74$i$i + .001;
       HEAPF32[$arrayidx2287$i$i$i >> 2] = $add20$us$i$i$i;
       $213 = HEAP8[$Lag_range_ptr$084$i$i$i + ($mul$us$i$i$i | 1) >> 0] | 0;
       if ($213 << 24 >> 24 > $206 << 24 >> 24) {
        $216 = 1 - $conv17$us$i$i$i + ($213 << 24 >> 24) | 0;
        $energy$060$us$i$i$i = $add20$us$i$i$i;
        $lag_counter$059$us$i$i$i = 1;
        do {
         $conv38$us$i$i$i = +HEAPF32[$add$ptr19$us$i$i$i + ($mul17$i$i - $lag_counter$059$us$i$i$i << 2) >> 2];
         $conv46$us$i$i$i = +HEAPF32[$add$ptr19$us$i$i$i + (0 - $lag_counter$059$us$i$i$i << 2) >> 2];
         $energy$060$us$i$i$i = $energy$060$us$i$i$i - $conv38$us$i$i$i * $conv38$us$i$i$i + $conv46$us$i$i$i * $conv46$us$i$i$i;
         HEAPF32[$PredCoef_Q12$i$i + ($lag_counter$059$us$i$i$i << 2) >> 2] = $energy$060$us$i$i$i;
         $lag_counter$059$us$i$i$i = $lag_counter$059$us$i$i$i + 1 | 0;
        } while (($lag_counter$059$us$i$i$i | 0) != ($216 | 0));
       }
       $mul64$us$i$i$i = Math_imul($k$065$us$i$i$i, $cbk_size$083$i$i$i) | 0;
       $scevgep71$i$i$i = $PredCoef_Q12$i$i + ($207 << 2) | 0;
       $i$163$us$i$i$i = 0;
       do {
        $scevgep$i$i$i = $energies_st3$i$i + ($k$065$us$i$i$i * 680 | 0) + ($i$163$us$i$i$i * 20 | 0) | 0;
        $scevgep72$i$i$i = $scevgep71$i$i$i + (HEAP8[$Lag_CB_ptr$085$i$i$i + ($i$163$us$i$i$i + $mul64$us$i$i$i) >> 0] << 2) | 0;
        HEAP32[$scevgep$i$i$i >> 2] = HEAP32[$scevgep72$i$i$i >> 2];
        HEAP32[$scevgep$i$i$i + 4 >> 2] = HEAP32[$scevgep72$i$i$i + 4 >> 2];
        HEAP32[$scevgep$i$i$i + 8 >> 2] = HEAP32[$scevgep72$i$i$i + 8 >> 2];
        HEAP32[$scevgep$i$i$i + 12 >> 2] = HEAP32[$scevgep72$i$i$i + 12 >> 2];
        HEAP32[$scevgep$i$i$i + 16 >> 2] = HEAP32[$scevgep72$i$i$i + 16 >> 2];
        $i$163$us$i$i$i = $i$163$us$i$i$i + 1 | 0;
       } while (($i$163$us$i$i$i | 0) != ($nb_cbk_search$082$i$i$i | 0));
       $k$065$us$i$i$i = $k$065$us$i$i$i + 1 | 0;
       if (($k$065$us$i$i$i | 0) == ($84 | 0)) break; else $target_ptr$067$us$i$i$i = $target_ptr$067$us$i$i$i + ($mul17$i$i << 2) | 0;
      }
      $div526$i$i = .05000000074505806 / +($cond518$i$i | 0);
      if ($cmp380$i$i) {
       $Lag_CB_ptr$1$i$i = 27120;
       $cbk_size$1$i$i = 34;
       $nb_cbk_search$1$i$i = HEAP8[53226 + $83 >> 0] | 0;
      } else {
       $Lag_CB_ptr$1$i$i = 27040;
       $cbk_size$1$i$i = 12;
       $nb_cbk_search$1$i$i = 12;
      }
      $mul536$i$i = Math_imul($mul17$i$i, $84) | 0;
      $sub$i17$i$i = $mul536$i$i + -3 | 0;
      if (($mul536$i$i | 0) > 3) {
       $i$033$i$i$i = 0;
       $result$034$i$i$i = 0.0;
       do {
        $conv$i20$i$i = +HEAPF32[$arrayidx1471$i$i$i + ($i$033$i$i$i << 2) >> 2];
        $conv6$i$i$i = +HEAPF32[$arrayidx1471$i$i$i + (($i$033$i$i$i | 1) << 2) >> 2];
        $conv14$i24$i$i = +HEAPF32[$arrayidx1471$i$i$i + (($i$033$i$i$i | 2) << 2) >> 2];
        $conv22$i$i$i = +HEAPF32[$arrayidx1471$i$i$i + (($i$033$i$i$i | 3) << 2) >> 2];
        $result$034$i$i$i = $result$034$i$i$i + ($conv$i20$i$i * $conv$i20$i$i + $conv6$i$i$i * $conv6$i$i$i + $conv14$i24$i$i * $conv14$i24$i$i + $conv22$i$i$i * $conv22$i$i$i);
        $i$033$i$i$i = $i$033$i$i$i + 4 | 0;
       } while (($i$033$i$i$i | 0) < ($sub$i17$i$i | 0));
       $i$0$lcssa$i$i$i = $mul536$i$i & -4;
       $result$0$lcssa$i$i$i = $result$034$i$i$i;
      } else {
       $i$0$lcssa$i$i$i = 0;
       $result$0$lcssa$i$i$i = 0.0;
      }
      if (($i$0$lcssa$i$i$i | 0) < ($mul536$i$i | 0)) {
       $i$129$i$i$i = $i$0$lcssa$i$i$i;
       $result$130$i$i$i = $result$0$lcssa$i$i$i;
       while (1) {
        $conv35$i$i$i = +HEAPF32[$arrayidx1471$i$i$i + ($i$129$i$i$i << 2) >> 2];
        $add39$i$i$i = $result$130$i$i$i + $conv35$i$i$i * $conv35$i$i$i;
        $i$129$i$i$i = $i$129$i$i$i + 1 | 0;
        if (($i$129$i$i$i | 0) == ($mul536$i$i | 0)) {
         $result$1$lcssa$i$i$i = $add39$i$i$i;
         break;
        } else $result$130$i$i$i = $add39$i$i$i;
       }
      } else $result$1$lcssa$i$i$i = $result$0$lcssa$i$i$i;
      $add538$i$i = $result$1$lcssa$i$i$i + 1.0;
      if (($cond$i$i$i | 0) > ($cond$i497$i$i | 0)) {
       $CBimax$2$lcssa$i$i = 0;
       $lag_new$0$lcssa$i$i = $cond518$i$i;
      } else {
       $cmp544515$i$i = ($nb_cbk_search$1$i$i | 0) > 0;
       $CBimax$2524$i$i = 0;
       $CCmax$2525$i$i = -1.0e3;
       $d$1530$i$i = $cond$i$i$i;
       $lag_counter$0527$i$i = 0;
       $lag_new$0526$i$i = $cond518$i$i;
       while (1) {
        L352 : do if ($cmp544515$i$i) {
         if (!$cmp325555$i$i) {
          $CBimax$3516$i$i = $CBimax$2524$i$i;
          $CCmax$3517$i$i = $CCmax$2525$i$i;
          $j$2519$i$i = 0;
          $lag_new$1518$i$i = $lag_new$0526$i$i;
          while (1) {
           if ($CCmax$3517$i$i < 0.0) {
            $cmp582$i$i = ($d$1530$i$i + (HEAP8[27120 + $j$2519$i$i >> 0] | 0) | 0) < ($mul19$i$i48 | 0);
            $CBimax$4$i$i = $cmp582$i$i ? $j$2519$i$i : $CBimax$3516$i$i;
            $CCmax$4$i$i = $cmp582$i$i ? 0.0 : $CCmax$3517$i$i;
            $lag_new$2$i$i = $cmp582$i$i ? $d$1530$i$i : $lag_new$1518$i$i;
           } else {
            $CBimax$4$i$i = $CBimax$3516$i$i;
            $CCmax$4$i$i = $CCmax$3517$i$i;
            $lag_new$2$i$i = $lag_new$1518$i$i;
           }
           $j$2519$i$i = $j$2519$i$i + 1 | 0;
           if (($j$2519$i$i | 0) == ($nb_cbk_search$1$i$i | 0)) {
            $CBimax$3$lcssa$i$i = $CBimax$4$i$i;
            $CCmax$3$lcssa$i$i = $CCmax$4$i$i;
            $lag_new$1$lcssa$i$i = $lag_new$2$i$i;
            break L352;
           } else {
            $CBimax$3516$i$i = $CBimax$4$i$i;
            $CCmax$3517$i$i = $CCmax$4$i$i;
            $lag_new$1518$i$i = $lag_new$2$i$i;
           }
          }
         }
         $CBimax$3516$us$i$i = $CBimax$2524$i$i;
         $CCmax$3517$us$i$i = $CCmax$2525$i$i;
         $j$2519$us$i$i = 0;
         $lag_new$1518$us$i$i = $lag_new$0526$i$i;
         while (1) {
          $cross_corr$0512$us$i$i = 0.0;
          $energy$0511$us$i$i = $add538$i$i;
          $k$3513$us$i$i = 0;
          do {
           $cross_corr$0512$us$i$i = $cross_corr$0512$us$i$i + +HEAPF32[$cross_corr_st3$i$i + ($k$3513$us$i$i * 680 | 0) + ($j$2519$us$i$i * 20 | 0) + ($lag_counter$0527$i$i << 2) >> 2];
           $energy$0511$us$i$i = $energy$0511$us$i$i + +HEAPF32[$energies_st3$i$i + ($k$3513$us$i$i * 680 | 0) + ($j$2519$us$i$i * 20 | 0) + ($lag_counter$0527$i$i << 2) >> 2];
           $k$3513$us$i$i = $k$3513$us$i$i + 1 | 0;
          } while (($k$3513$us$i$i | 0) != ($84 | 0));
          if ($cross_corr$0512$us$i$i > 0.0) $CCmax_new$2$us$i$i = (1.0 - $div526$i$i * +($j$2519$us$i$i | 0)) * ($cross_corr$0512$us$i$i * 2.0 / $energy$0511$us$i$i); else $CCmax_new$2$us$i$i = 0.0;
          if ($CCmax_new$2$us$i$i > $CCmax$3517$us$i$i) {
           $cmp582$us$i$i = ($d$1530$i$i + (HEAP8[27120 + $j$2519$us$i$i >> 0] | 0) | 0) < ($mul19$i$i48 | 0);
           $CBimax$4$us$i$i = $cmp582$us$i$i ? $j$2519$us$i$i : $CBimax$3516$us$i$i;
           $CCmax$4$us$i$i = $cmp582$us$i$i ? $CCmax_new$2$us$i$i : $CCmax$3517$us$i$i;
           $lag_new$2$us$i$i = $cmp582$us$i$i ? $d$1530$i$i : $lag_new$1518$us$i$i;
          } else {
           $CBimax$4$us$i$i = $CBimax$3516$us$i$i;
           $CCmax$4$us$i$i = $CCmax$3517$us$i$i;
           $lag_new$2$us$i$i = $lag_new$1518$us$i$i;
          }
          $j$2519$us$i$i = $j$2519$us$i$i + 1 | 0;
          if (($j$2519$us$i$i | 0) == ($nb_cbk_search$1$i$i | 0)) {
           $CBimax$3$lcssa$i$i = $CBimax$4$us$i$i;
           $CCmax$3$lcssa$i$i = $CCmax$4$us$i$i;
           $lag_new$1$lcssa$i$i = $lag_new$2$us$i$i;
           break;
          } else {
           $CBimax$3516$us$i$i = $CBimax$4$us$i$i;
           $CCmax$3517$us$i$i = $CCmax$4$us$i$i;
           $lag_new$1518$us$i$i = $lag_new$2$us$i$i;
          }
         }
        } else {
         $CBimax$3$lcssa$i$i = $CBimax$2524$i$i;
         $CCmax$3$lcssa$i$i = $CCmax$2525$i$i;
         $lag_new$1$lcssa$i$i = $lag_new$0526$i$i;
        } while (0);
        if (($d$1530$i$i | 0) < ($cond$i497$i$i | 0)) {
         $CBimax$2524$i$i = $CBimax$3$lcssa$i$i;
         $CCmax$2525$i$i = $CCmax$3$lcssa$i$i;
         $d$1530$i$i = $d$1530$i$i + 1 | 0;
         $lag_counter$0527$i$i = $lag_counter$0527$i$i + 1 | 0;
         $lag_new$0526$i$i = $lag_new$1$lcssa$i$i;
        } else {
         $CBimax$2$lcssa$i$i = $CBimax$3$lcssa$i$i;
         $lag_new$0$lcssa$i$i = $lag_new$1$lcssa$i$i;
         break;
        }
       }
      }
      if ($cmp325555$i$i) if (($mul18$i$i | 0) > ($mul19$i$i48 | 0)) {
       $k$4509$us$i$i = 0;
       do {
        $add601$us$i$i = $lag_new$0$lcssa$i$i + (HEAP8[$Lag_CB_ptr$1$i$i + ((Math_imul($k$4509$us$i$i, $cbk_size$1$i$i) | 0) + $CBimax$2$lcssa$i$i) >> 0] | 0) | 0;
        HEAP32[$sEncCtrl + 228 + ($k$4509$us$i$i << 2) >> 2] = ($add601$us$i$i | 0) > ($mul18$i$i | 0) ? $mul18$i$i : ($add601$us$i$i | 0) < ($mul19$i$i48 | 0) ? $mul19$i$i48 : $add601$us$i$i;
        $k$4509$us$i$i = $k$4509$us$i$i + 1 | 0;
       } while (($k$4509$us$i$i | 0) != ($84 | 0));
      } else {
       $k$4509$i$i = 0;
       do {
        $add601$i$i = $lag_new$0$lcssa$i$i + (HEAP8[$Lag_CB_ptr$1$i$i + ((Math_imul($k$4509$i$i, $cbk_size$1$i$i) | 0) + $CBimax$2$lcssa$i$i) >> 0] | 0) | 0;
        HEAP32[$sEncCtrl + 228 + ($k$4509$i$i << 2) >> 2] = ($add601$i$i | 0) > ($mul19$i$i48 | 0) ? $mul19$i$i48 : ($add601$i$i | 0) < ($mul18$i$i | 0) ? $mul18$i$i : $add601$i$i;
        $k$4509$i$i = $k$4509$i$i + 1 | 0;
       } while (($k$4509$i$i | 0) != ($84 | 0));
      }
      $storemerge$in$i$i = $CBimax$2$lcssa$i$i;
      $storemerge396$in$i$i = $lag_new$0$lcssa$i$i - $mul18$i$i | 0;
     } else {
      if ($cmp325555$i$i) {
       $k$5536$i$i = 0;
       do {
        $add660$i$i = $lag$0546$i$i + (HEAP8[$spec$select501$i$i + ((Math_imul($k$5536$i$i, $spec$select499$i$i) | 0) + $CBimax$0545$i$i) >> 0] | 0) | 0;
        $$add660$i$i = ($add660$i$i | 0) > 16 ? $add660$i$i : 16;
        HEAP32[$sEncCtrl + 228 + ($k$5536$i$i << 2) >> 2] = ($$add660$i$i | 0) < 144 ? $$add660$i$i : 144;
        $k$5536$i$i = $k$5536$i$i + 1 | 0;
       } while (($k$5536$i$i | 0) != ($84 | 0));
      }
      $storemerge$in$i$i = $CBimax$0545$i$i;
      $storemerge396$in$i$i = $lag$0546$i$i + 65520 | 0;
     }
     $storemerge396$i$i = $storemerge396$in$i$i & 65535;
     HEAP16[$lagIndex$i >> 1] = $storemerge396$i$i;
     HEAP8[$contourIndex$i >> 0] = $storemerge$in$i$i;
     if ($storemerge396$i$i << 16 >> 16 > -1) {
      $retval$0$i$i = 1;
      break L200;
     }
     _celt_fatal(55021, 54506, 474);
    } while (0);
    HEAP32[$arraydecay93$i >> 2] = 0;
    HEAP32[$arraydecay93$i + 4 >> 2] = 0;
    HEAP32[$arraydecay93$i + 8 >> 2] = 0;
    HEAP32[$arraydecay93$i + 12 >> 2] = 0;
    label = 261;
   } while (0);
   if ((label | 0) == 261) {
    HEAPF32[$LTPCorr$i >> 2] = 0.0;
    HEAP16[$lagIndex$i >> 1] = 0;
    HEAP8[$contourIndex$i >> 0] = 0;
    $retval$0$i$i = 0;
   }
   if ($retval$0$i$i) {
    HEAP8[$signalType$i >> 0] = 2;
    break;
   } else {
    HEAP8[$signalType$i >> 0] = 1;
    break;
   }
  } else label = 265; while (0);
  if ((label | 0) == 265) {
   $arraydecay118$i = $sEncCtrl + 228 | 0;
   HEAP32[$arraydecay118$i >> 2] = 0;
   HEAP32[$arraydecay118$i + 4 >> 2] = 0;
   HEAP32[$arraydecay118$i + 8 >> 2] = 0;
   HEAP32[$arraydecay118$i + 12 >> 2] = 0;
   HEAP16[$psEnc + 4762 >> 1] = 0;
   HEAP8[$psEnc + 4764 >> 0] = 0;
   HEAPF32[$psEnc + 10060 >> 2] = 0.0;
  }
  $add$ptr$i56 = $add$ptr + (0 - (HEAP32[$psEnc + 4600 >> 2] | 0) << 2) | 0;
  $SNR_dB_Q7$i = $psEnc + 4716 | 0;
  $conv$i57 = +(HEAP32[$SNR_dB_Q7$i >> 2] | 0);
  $mul$i58 = $conv$i57 * .0078125;
  $arrayidx$i59 = $psEnc + 4696 | 0;
  $mul8$i = +((HEAP32[$psEnc + 4700 >> 2] | 0) + (HEAP32[$arrayidx$i59 >> 2] | 0) | 0) * .5 * .000030517578125;
  $input_quality$i = $sEncCtrl + 696 | 0;
  HEAPF32[$input_quality$i >> 2] = $mul8$i;
  $conv1$i$i = 1.0 / (+Math_exp(+-(($mul$i58 + -20.0) * .25)) + 1.0);
  $coding_quality$i = $sEncCtrl + 700 | 0;
  HEAPF32[$coding_quality$i >> 2] = $conv1$i$i;
  if (!(HEAP32[$psEnc + 4676 >> 2] | 0)) {
   $sub15$i = 1.0 - +(HEAP32[$psEnc + 4532 >> 2] | 0) * .00390625;
   $SNR_adj_dB$0$i = $mul$i58 - $sub15$i * (($mul8$i * .5 + .5) * ($conv1$i$i * 2.0) * $sub15$i);
  } else $SNR_adj_dB$0$i = $mul$i58;
  do if ((HEAP8[$signalType$i >> 0] | 0) == 2) {
   $SNR_adj_dB$1178$i = $SNR_adj_dB$0$i + +HEAPF32[$psEnc + 10060 >> 2] * 2.0;
   HEAP8[$psEnc + 4766 >> 0] = 0;
   $$pre216$i = $psEnc + 4580 | 0;
   $256 = HEAP32[$$pre216$i >> 2] | 0;
   $SNR_adj_dB$1179$i = $SNR_adj_dB$1178$i;
   $nb_subfr103$pre$phi$iZ2D = $$pre216$i;
  } else {
   $SNR_adj_dB$1$i = ($conv$i57 * -.4000000059604645 * .0078125 + 6.0) * (1.0 - $mul8$i) + $SNR_adj_dB$0$i;
   $244 = HEAP32[$fs_kHz610 >> 2] | 0;
   $mul54$i = $244 << 1;
   $nb_subfr$i73 = $psEnc + 4580 | 0;
   $245 = HEAP32[$nb_subfr$i73 >> 2] | 0;
   $mul58$i = ($245 << 16 >> 16) * 5 | 0;
   $div$i75 = ($mul58$i | 0) / 2 | 0;
   if (($mul58$i | 0) > 1) {
    $conv61$i = +($mul54$i | 0);
    $sub$i1$i76 = $mul54$i + -3 | 0;
    $cmp32$i$i = ($244 | 0) > 1;
    $246 = $mul54$i & -4;
    $energy_variation$0203$i = 0.0;
    $k$0206$i = 0;
    $log_energy_prev$0204$i = 0.0;
    $pitch_res_ptr$0205$i = $add$ptr6;
    while (1) {
     if ($cmp32$i$i) {
      $i$033$i$i = 0;
      $result$034$i$i = 0.0;
      while (1) {
       $conv$i3$i = +HEAPF32[$pitch_res_ptr$0205$i + ($i$033$i$i << 2) >> 2];
       $conv6$i$i = +HEAPF32[$pitch_res_ptr$0205$i + (($i$033$i$i | 1) << 2) >> 2];
       $conv14$i$i = +HEAPF32[$pitch_res_ptr$0205$i + (($i$033$i$i | 2) << 2) >> 2];
       $conv22$i$i = +HEAPF32[$pitch_res_ptr$0205$i + (($i$033$i$i | 3) << 2) >> 2];
       $add28$i$i82 = $result$034$i$i + ($conv$i3$i * $conv$i3$i + $conv6$i$i * $conv6$i$i + $conv14$i$i * $conv14$i$i + $conv22$i$i * $conv22$i$i);
       $i$033$i$i = $i$033$i$i + 4 | 0;
       if (($i$033$i$i | 0) >= ($sub$i1$i76 | 0)) {
        $i$0$lcssa$i$i = $246;
        $result$0$lcssa$i$i = $add28$i$i82;
        break;
       } else $result$034$i$i = $add28$i$i82;
      }
     } else {
      $i$0$lcssa$i$i = 0;
      $result$0$lcssa$i$i = 0.0;
     }
     if (($i$0$lcssa$i$i | 0) < ($mul54$i | 0)) {
      $i$129$i$i = $i$0$lcssa$i$i;
      $result$130$i$i = $result$0$lcssa$i$i;
      while (1) {
       $conv35$i$i = +HEAPF32[$pitch_res_ptr$0205$i + ($i$129$i$i << 2) >> 2];
       $add39$i$i83 = $result$130$i$i + $conv35$i$i * $conv35$i$i;
       $i$129$i$i = $i$129$i$i + 1 | 0;
       if (($i$129$i$i | 0) == ($mul54$i | 0)) {
        $result$1$lcssa$i$i = $add39$i$i83;
        break;
       } else $result$130$i$i = $add39$i$i83;
      }
     } else $result$1$lcssa$i$i = $result$0$lcssa$i$i;
     $log_energy_prev$0204$i$looptemp = $log_energy_prev$0204$i;
     $log_energy_prev$0204$i = +_llvm_log10_f64(+($conv61$i + $result$1$lcssa$i$i)) * 3.32192809488736;
     $add73$i = $energy_variation$0203$i + +Math_abs(+($log_energy_prev$0204$i - $log_energy_prev$0204$i$looptemp));
     $spec$select$i86 = ($k$0206$i | 0) == 0 ? $energy_variation$0203$i : $add73$i;
     $k$0206$i = $k$0206$i + 1 | 0;
     if (($k$0206$i | 0) == ($div$i75 | 0)) {
      $energy_variation$0$lcssa$i = $spec$select$i86;
      break;
     } else {
      $energy_variation$0203$i = $spec$select$i86;
      $pitch_res_ptr$0205$i = $pitch_res_ptr$0205$i + ($mul54$i << 2) | 0;
     }
    }
   } else $energy_variation$0$lcssa$i = 0.0;
   $quantOffsetType84$i = $psEnc + 4766 | 0;
   if ($energy_variation$0$lcssa$i > +($div$i75 + -1 | 0) * .6000000238418579) {
    HEAP8[$quantOffsetType84$i >> 0] = 0;
    $256 = $245;
    $SNR_adj_dB$1179$i = $SNR_adj_dB$1$i;
    $nb_subfr103$pre$phi$iZ2D = $nb_subfr$i73;
    break;
   } else {
    HEAP8[$quantOffsetType84$i >> 0] = 1;
    $256 = $245;
    $SNR_adj_dB$1179$i = $SNR_adj_dB$1$i;
    $nb_subfr103$pre$phi$iZ2D = $nb_subfr$i73;
    break;
   }
  } while (0);
  $mul91$i90 = +HEAPF32[$predGain$i >> 2] * 1.0000000474974513e-03;
  $div94$i = .9399999976158142 / ($mul91$i90 * $mul91$i90 + 1.0);
  $warping_Q16$i = $psEnc + 4672 | 0;
  $255 = HEAP32[$warping_Q16$i >> 2] | 0;
  $add100$i = +($255 | 0) * .0000152587890625 + $conv1$i$i * .009999999776482582;
  do if (($256 | 0) > 0) {
   $shapeWinLength$i = $psEnc + 4604 | 0;
   $subfr_length$i = $psEnc + 4588 | 0;
   $shapingLPCOrder$i = $psEnc + 4636 | 0;
   $sub5$i$i93 = 1.0 - $add100$i * $add100$i;
   $conv7$i$i = $add100$i;
   $268 = $255;
   $k$1201$i = 0;
   $x_ptr$0200$i = $add$ptr$i56;
   L430 : while (1) {
    $257 = HEAP32[$fs_kHz610 >> 2] | 0;
    $mul109$i = $257 * 3 | 0;
    $258 = HEAP32[$shapeWinLength$i >> 2] | 0;
    $sub111$i = $258 - $mul109$i | 0;
    $div112$i = ($sub111$i | 0) / 2 | 0;
    if ($div112$i & 3 | 0) {
     label = 285;
     break;
    }
    $div$i82$i = 3.1415927410125732 / +($div112$i + 1 | 0);
    $sub$i84$i = 2.0 - $div$i82$i * $div$i82$i;
    $cmp1037$i$i97 = ($sub111$i | 0) > 1;
    if ($cmp1037$i$i97) {
     $S0$139$i$i101 = 0.0;
     $S1$140$i$i100 = $div$i82$i;
     $k$038$i$i102 = 0;
     while (1) {
      HEAPF32[$a_fix_Q12$i$i$i + ($k$038$i$i102 << 2) >> 2] = ($S0$139$i$i101 + $S1$140$i$i100) * (+HEAPF32[$x_ptr$0200$i + ($k$038$i$i102 << 2) >> 2] * .5);
      $add18$i$i107 = $k$038$i$i102 | 1;
      HEAPF32[$a_fix_Q12$i$i$i + ($add18$i$i107 << 2) >> 2] = $S1$140$i$i100 * +HEAPF32[$x_ptr$0200$i + ($add18$i$i107 << 2) >> 2];
      $sub24$i$i112 = $sub$i84$i * $S1$140$i$i100 - $S0$139$i$i101;
      $add25$i$i113 = $k$038$i$i102 | 2;
      HEAPF32[$a_fix_Q12$i$i$i + ($add25$i$i113 << 2) >> 2] = ($S1$140$i$i100 + $sub24$i$i112) * (+HEAPF32[$x_ptr$0200$i + ($add25$i$i113 << 2) >> 2] * .5);
      $add32$i$i118 = $k$038$i$i102 | 3;
      HEAPF32[$a_fix_Q12$i$i$i + ($add32$i$i118 << 2) >> 2] = $sub24$i$i112 * +HEAPF32[$x_ptr$0200$i + ($add32$i$i118 << 2) >> 2];
      $k$038$i$i102 = $k$038$i$i102 + 4 | 0;
      if (($k$038$i$i102 | 0) >= ($div112$i | 0)) break; else {
       $S0$139$i$i101 = $sub24$i$i112;
       $S1$140$i$i100 = $sub$i84$i * $sub24$i$i112 - $S1$140$i$i100;
      }
     }
    }
    _memcpy($a_fix_Q12$i$i$i + ($div112$i << 2) | 0, $x_ptr$0200$i + ($div112$i << 2) | 0, $257 * 12 | 0) | 0;
    $add117$i = $div112$i + $mul109$i | 0;
    $add$ptr119$i = $a_fix_Q12$i$i$i + ($add117$i << 2) | 0;
    $add$ptr120$i = $x_ptr$0200$i + ($add117$i << 2) | 0;
    if ($cmp1037$i$i97) {
     $S0$139$i104$i = 1.0;
     $S1$140$i103$i = $sub$i84$i * .5;
     $k$038$i105$i = 0;
     while (1) {
      HEAPF32[$add$ptr119$i + ($k$038$i105$i << 2) >> 2] = ($S0$139$i104$i + $S1$140$i103$i) * (+HEAPF32[$add$ptr120$i + ($k$038$i105$i << 2) >> 2] * .5);
      $add18$i111$i = $k$038$i105$i | 1;
      HEAPF32[$add$ptr119$i + ($add18$i111$i << 2) >> 2] = $S1$140$i103$i * +HEAPF32[$add$ptr120$i + ($add18$i111$i << 2) >> 2];
      $sub24$i116$i = $sub$i84$i * $S1$140$i103$i - $S0$139$i104$i;
      $add25$i117$i = $k$038$i105$i | 2;
      HEAPF32[$add$ptr119$i + ($add25$i117$i << 2) >> 2] = ($S1$140$i103$i + $sub24$i116$i) * (+HEAPF32[$add$ptr120$i + ($add25$i117$i << 2) >> 2] * .5);
      $add32$i123$i = $k$038$i105$i | 3;
      HEAPF32[$add$ptr119$i + ($add32$i123$i << 2) >> 2] = $sub24$i116$i * +HEAPF32[$add$ptr120$i + ($add32$i123$i << 2) >> 2];
      $k$038$i105$i = $k$038$i105$i + 4 | 0;
      if (($k$038$i105$i | 0) >= ($div112$i | 0)) break; else {
       $S0$139$i104$i = $sub24$i116$i;
       $S1$140$i103$i = $sub$i84$i * $sub24$i116$i - $S1$140$i103$i;
      }
     }
    }
    $x_ptr$0200$i = $x_ptr$0200$i + (HEAP32[$subfr_length$i >> 2] << 2) | 0;
    $269 = HEAP32[$shapingLPCOrder$i >> 2] | 0;
    do if (($268 | 0) > 0) {
     _memset($pGains_Q16$i | 0, 0, 200) | 0;
     _memset($PredCoef_Q12$i$i | 0, 0, 200) | 0;
     if ($269 & 1 | 0) {
      label = 294;
      break L430;
     }
     do if (($258 | 0) > 0) {
      $arrayidx31$i136$i = $pGains_Q16$i + ($269 << 3) | 0;
      $arrayidx34$i137$i = $PredCoef_Q12$i$i + ($269 << 3) | 0;
      if (($269 | 0) <= 0) {
       $281 = +HEAPF64[$arrayidx34$i137$i >> 3];
       $n$037$i$i = 0;
       do {
        $conv$i148$i = +HEAPF32[$a_fix_Q12$i$i$i + ($n$037$i$i << 2) >> 2];
        HEAPF64[$arrayidx31$i136$i >> 3] = $conv$i148$i;
        $281 = $281 + +HEAPF64[$pGains_Q16$i >> 3] * $conv$i148$i;
        $n$037$i$i = $n$037$i$i + 1 | 0;
       } while (($n$037$i$i | 0) != ($258 | 0));
       HEAPF64[$arrayidx34$i137$i >> 3] = $281;
       break;
      }
      $648 = 0.0;
      $n$037$us$i$i = 0;
      do {
       $272 = $648;
       $i$034$us$i$i = 0;
       $tmp1$035$us$i$i = +HEAPF32[$a_fix_Q12$i$i$i + ($n$037$us$i$i << 2) >> 2];
       do {
        $add$us$i141$i = $i$034$us$i$i | 1;
        $arrayidx8$us$i$i = $pGains_Q16$i + ($add$us$i141$i << 3) | 0;
        $271 = +HEAPF64[$arrayidx8$us$i$i >> 3];
        $add9$us$i$i = $272 + ($271 - $tmp1$035$us$i$i) * $conv7$i$i;
        HEAPF64[$pGains_Q16$i + ($i$034$us$i$i << 3) >> 3] = $tmp1$035$us$i$i;
        $273 = +HEAPF64[$pGains_Q16$i >> 3];
        $arrayidx13$us$i$i = $PredCoef_Q12$i$i + ($i$034$us$i$i << 3) | 0;
        HEAPF64[$arrayidx13$us$i$i >> 3] = +HEAPF64[$arrayidx13$us$i$i >> 3] + $tmp1$035$us$i$i * $273;
        $i$034$us$i$i = $i$034$us$i$i + 2 | 0;
        $272 = +HEAPF64[$pGains_Q16$i + ($i$034$us$i$i << 3) >> 3];
        $tmp1$035$us$i$i = $271 + ($272 - $add9$us$i$i) * $conv7$i$i;
        HEAPF64[$arrayidx8$us$i$i >> 3] = $add9$us$i$i;
        $arrayidx28$us$i$i = $PredCoef_Q12$i$i + ($add$us$i141$i << 3) | 0;
        HEAPF64[$arrayidx28$us$i$i >> 3] = $273 * $add9$us$i$i + +HEAPF64[$arrayidx28$us$i$i >> 3];
       } while (($i$034$us$i$i | 0) < ($269 | 0));
       HEAPF64[$arrayidx31$i136$i >> 3] = $tmp1$035$us$i$i;
       $648 = +HEAPF64[$pGains_Q16$i >> 3];
       HEAPF64[$arrayidx34$i137$i >> 3] = +HEAPF64[$arrayidx34$i137$i >> 3] + $tmp1$035$us$i$i * $648;
       $n$037$us$i$i = $n$037$us$i$i + 1 | 0;
      } while (($n$037$us$i$i | 0) != ($258 | 0));
     } while (0);
     if (($269 | 0) >= 0) {
      $i$132$i$i = 0;
      while (1) {
       HEAPF32[$NLSF0_Q15$i$i + ($i$132$i$i << 2) >> 2] = +HEAPF64[$PredCoef_Q12$i$i + ($i$132$i$i << 3) >> 3];
       if (($i$132$i$i | 0) == ($269 | 0)) break; else $i$132$i$i = $i$132$i$i + 1 | 0;
      }
     }
    } else {
     $add140$i = $269 + 1 | 0;
     $spec$select$i$i128 = ($add140$i | 0) > ($258 | 0) ? $258 : $add140$i;
     if (($spec$select$i$i128 | 0) <= 0) break;
     $i$011$i$i130 = 0;
     do {
      HEAPF32[$NLSF0_Q15$i$i + ($i$011$i$i130 << 2) >> 2] = +_silk_inner_product_FLP($a_fix_Q12$i$i$i, $a_fix_Q12$i$i$i + ($i$011$i$i130 << 2) | 0, $258 - $i$011$i$i130 | 0);
      $i$011$i$i130 = $i$011$i$i130 + 1 | 0;
     } while (($i$011$i$i130 | 0) < ($spec$select$i$i128 | 0));
    } while (0);
    $283 = +HEAPF32[$NLSF0_Q15$i$i >> 2];
    HEAPF32[$NLSF0_Q15$i$i >> 2] = $283 + ($283 * 2.9999999242136255e-05 + 1.0);
    $call151$i = +_silk_schur_FLP($XXLTP$i, $NLSF0_Q15$i$i, $269);
    $arrayidx153$i = $sEncCtrl + 244 + ($k$1201$i * 24 << 2) | 0;
    $284 = HEAP32[$shapingLPCOrder$i >> 2] | 0;
    if (($284 | 0) > 0) {
     $indvars$iv$i$i136 = 1;
     $k$028$i$i137 = 0;
     while (1) {
      $285 = $indvars$iv$i$i136 >>> 1;
      $286 = +HEAPF32[$XXLTP$i + ($k$028$i$i137 << 2) >> 2];
      $k$028$i$i137$looptemp = $k$028$i$i137;
      $k$028$i$i137 = $k$028$i$i137 + 1 | 0;
      if ($k$028$i$i137 & 2147483646 | 0) {
       $sub$i74$i = $k$028$i$i137$looptemp + -1 | 0;
       $n$026$i$i141 = 0;
       do {
        $arrayidx4$i$i142 = $arrayidx153$i + ($n$026$i$i141 << 2) | 0;
        $287 = +HEAPF32[$arrayidx4$i$i142 >> 2];
        $arrayidx6$i$i143 = $arrayidx153$i + ($sub$i74$i - $n$026$i$i141 << 2) | 0;
        $288 = +HEAPF32[$arrayidx6$i$i143 >> 2];
        HEAPF32[$arrayidx4$i$i142 >> 2] = $287 + $286 * $288;
        HEAPF32[$arrayidx6$i$i143 >> 2] = $288 + $286 * $287;
        $n$026$i$i141 = $n$026$i$i141 + 1 | 0;
       } while (($n$026$i$i141 | 0) != ($285 | 0));
      }
      HEAPF32[$arrayidx153$i + ($k$028$i$i137$looptemp << 2) >> 2] = -$286;
      if (($k$028$i$i137 | 0) == ($284 | 0)) break; else $indvars$iv$i$i136 = $indvars$iv$i$i136 + 1 | 0;
     }
    }
    $289 = +Math_sqrt(+$call151$i);
    $arrayidx159$i = $sEncCtrl + ($k$1201$i << 2) | 0;
    HEAPF32[$arrayidx159$i >> 2] = $289;
    $268 = HEAP32[$warping_Q16$i >> 2] | 0;
    $cmp162$i = ($268 | 0) > 0;
    $291 = HEAP32[$shapingLPCOrder$i >> 2] | 0;
    $sub1$i170$i = $291 + -1 | 0;
    if ($cmp162$i) {
     $293 = $add100$i * +HEAPF32[$arrayidx153$i + ($sub1$i170$i << 2) >> 2];
     if (($291 | 0) > 1) {
      $295 = $293;
      $i$09$i$i155 = $291 + -2 | 0;
      while (1) {
       $296 = $add100$i * (+HEAPF32[$arrayidx153$i + ($i$09$i$i155 << 2) >> 2] - $295);
       if (($i$09$i$i155 | 0) > 0) {
        $295 = $296;
        $i$09$i$i155 = $i$09$i$i155 + -1 | 0;
       } else {
        $$lcssa$i$i = $296;
        break;
       }
      }
     } else $$lcssa$i$i = $293;
     HEAPF32[$arrayidx159$i >> 2] = $289 * (1.0 / ($$lcssa$i$i + 1.0));
    }
    $cmp8$i55$i = ($291 | 0) > 1;
    if ($cmp8$i55$i) {
     $cfac$010$i57$i = $div94$i;
     $i$09$i58$i = 0;
     while (1) {
      $arrayidx$i59$i = $arrayidx153$i + ($i$09$i58$i << 2) | 0;
      HEAPF32[$arrayidx$i59$i >> 2] = $cfac$010$i57$i * +HEAPF32[$arrayidx$i59$i >> 2];
      $mul1$i61$i = $cfac$010$i57$i * $div94$i;
      $i$09$i58$i = $i$09$i58$i + 1 | 0;
      if (($i$09$i58$i | 0) == ($sub1$i170$i | 0)) {
       $cfac$0$lcssa$i65$i = $mul1$i61$i;
       break;
      } else $cfac$010$i57$i = $mul1$i61$i;
     }
    } else $cfac$0$lcssa$i65$i = $div94$i;
    $arrayidx3$i66$i = $arrayidx153$i + ($sub1$i170$i << 2) | 0;
    $mul4$i67$i = $cfac$0$lcssa$i65$i * +HEAPF32[$arrayidx3$i66$i >> 2];
    HEAPF32[$arrayidx3$i66$i >> 2] = $mul4$i67$i;
    L493 : do if ($cmp162$i) {
     if ($cmp8$i55$i) {
      $299 = $mul4$i67$i;
      $i$021$i$i = $sub1$i170$i;
      do {
       $i$021$i$i$looptemp = $i$021$i$i;
       $i$021$i$i = $i$021$i$i + -1 | 0;
       $arrayidx2$i$i = $arrayidx153$i + ($i$021$i$i << 2) | 0;
       $299 = +HEAPF32[$arrayidx2$i$i >> 2] - $add100$i * $299;
       HEAPF32[$arrayidx2$i$i >> 2] = $299;
      } while (($i$021$i$i$looptemp | 0) > 1);
     }
     $301 = +HEAPF32[$arrayidx153$i >> 2];
     $div$i164$i = $sub5$i$i93 / ($add100$i * $301 + 1.0);
     if (($291 | 0) <= 0) break;
     HEAPF32[$arrayidx153$i >> 2] = $div$i164$i * $301;
     $exitcond26$i193$i = ($291 | 0) == 1;
     if (!$exitcond26$i193$i) {
      $inc$i194$i = 1;
      do {
       $arrayidx11$phi$trans$insert$i$i = $arrayidx153$i + ($inc$i194$i << 2) | 0;
       HEAPF32[$arrayidx11$phi$trans$insert$i$i >> 2] = $div$i164$i * +HEAPF32[$arrayidx11$phi$trans$insert$i$i >> 2];
       $inc$i194$i = $inc$i194$i + 1 | 0;
      } while (($inc$i194$i | 0) != ($291 | 0));
     }
     if (!$cmp8$i55$i) {
      $gain$016$us$i$i = $div$i164$i;
      $ind$014$us$i$i = 0;
      $iter$015$us$i$i = 0;
      while (1) {
       $i$24$us$i$i = 0;
       $ind$12$us$i166$i = $ind$014$us$i$i;
       $maxabs$03$us$i165$i = -1.0;
       do {
        $315 = +Math_abs(+(+HEAPF32[$arrayidx153$i + ($i$24$us$i$i << 2) >> 2]));
        $cmp23$us$i$i = $315 > $maxabs$03$us$i165$i;
        $ind$12$us$i166$i = $cmp23$us$i$i ? $i$24$us$i$i : $ind$12$us$i166$i;
        $maxabs$03$us$i165$i = $cmp23$us$i$i ? $315 : $maxabs$03$us$i165$i;
        $i$24$us$i$i = $i$24$us$i$i + 1 | 0;
       } while (($i$24$us$i$i | 0) != ($291 | 0));
       if ($maxabs$03$us$i165$i <= 3.999000072479248) break L493;
       $div44$us$i$i = 1.0 / $gain$016$us$i$i;
       $i$49$us$i$i = 0;
       do {
        $arrayidx49$us$i$i = $arrayidx153$i + ($i$49$us$i$i << 2) | 0;
        HEAPF32[$arrayidx49$us$i$i >> 2] = $div44$us$i$i * +HEAPF32[$arrayidx49$us$i$i >> 2];
        $i$49$us$i$i = $i$49$us$i$i + 1 | 0;
       } while (($i$49$us$i$i | 0) != ($291 | 0));
       HEAPF32[$arrayidx3$i66$i >> 2] = (.9900000095367432 - (+($iter$015$us$i$i | 0) * .10000000149011612 + .800000011920929) * ($maxabs$03$us$i165$i + -3.999000072479248) / ($maxabs$03$us$i165$i * +($ind$12$us$i166$i + 1 | 0))) * +HEAPF32[$arrayidx3$i66$i >> 2];
       $312 = +HEAPF32[$arrayidx153$i >> 2];
       $gain$016$us$i$i = $sub5$i$i93 / ($add100$i * $312 + 1.0);
       HEAPF32[$arrayidx153$i >> 2] = $gain$016$us$i$i * $312;
       if (!$exitcond26$i193$i) {
        $inc90$us$i198$i = 1;
        do {
         $arrayidx87$us$phi$trans$insert$i$i = $arrayidx153$i + ($inc90$us$i198$i << 2) | 0;
         HEAPF32[$arrayidx87$us$phi$trans$insert$i$i >> 2] = $gain$016$us$i$i * +HEAPF32[$arrayidx87$us$phi$trans$insert$i$i >> 2];
         $inc90$us$i198$i = $inc90$us$i198$i + 1 | 0;
        } while (($inc90$us$i198$i | 0) != ($291 | 0));
       }
       $iter$015$us$i$i = $iter$015$us$i$i + 1 | 0;
       if ($iter$015$us$i$i >>> 0 >= 10) break L493; else $ind$014$us$i$i = $ind$12$us$i166$i;
      }
     }
     $gain$016$us$i$us$i = $div$i164$i;
     $ind$014$us$i$us$i = 0;
     $iter$015$us$i$us$i = 0;
     while (1) {
      $i$24$us$i$us$i = 0;
      $ind$12$us$i166$us$i = $ind$014$us$i$us$i;
      $maxabs$03$us$i165$us$i = -1.0;
      do {
       $303 = +Math_abs(+(+HEAPF32[$arrayidx153$i + ($i$24$us$i$us$i << 2) >> 2]));
       $cmp23$us$i$us$i = $303 > $maxabs$03$us$i165$us$i;
       $ind$12$us$i166$us$i = $cmp23$us$i$us$i ? $i$24$us$i$us$i : $ind$12$us$i166$us$i;
       $maxabs$03$us$i165$us$i = $cmp23$us$i$us$i ? $303 : $maxabs$03$us$i165$us$i;
       $i$24$us$i$us$i = $i$24$us$i$us$i + 1 | 0;
      } while (($i$24$us$i$us$i | 0) != ($291 | 0));
      if ($maxabs$03$us$i165$us$i <= 3.999000072479248) break L493;
      $305 = +HEAPF32[$arrayidx153$i >> 2];
      $i$37$us$i$us$i = 1;
      do {
       $305$looptemp = $305;
       $305 = +HEAPF32[$arrayidx153$i + ($i$37$us$i$us$i << 2) >> 2];
       HEAPF32[$arrayidx153$i + ($i$37$us$i$us$i + -1 << 2) >> 2] = $305$looptemp + $add100$i * $305;
       $i$37$us$i$us$i = $i$37$us$i$us$i + 1 | 0;
      } while (($i$37$us$i$us$i | 0) != ($291 | 0));
      $div44$us$i$us$i = 1.0 / $gain$016$us$i$us$i;
      $i$49$us$i$us$i = 0;
      do {
       $arrayidx49$us$i$us$i = $arrayidx153$i + ($i$49$us$i$us$i << 2) | 0;
       HEAPF32[$arrayidx49$us$i$us$i >> 2] = $div44$us$i$us$i * +HEAPF32[$arrayidx49$us$i$us$i >> 2];
       $i$49$us$i$us$i = $i$49$us$i$us$i + 1 | 0;
      } while (($i$49$us$i$us$i | 0) != ($291 | 0));
      $sub63$us$i$us$i = .9900000095367432 - (+($iter$015$us$i$us$i | 0) * .10000000149011612 + .800000011920929) * ($maxabs$03$us$i165$us$i + -3.999000072479248) / ($maxabs$03$us$i165$us$i * +($ind$12$us$i166$us$i + 1 | 0));
      $cfac$010$i41$i = $sub63$us$i$us$i;
      $i$09$i42$i = 0;
      do {
       $arrayidx$i43$i = $arrayidx153$i + ($i$09$i42$i << 2) | 0;
       HEAPF32[$arrayidx$i43$i >> 2] = $cfac$010$i41$i * +HEAPF32[$arrayidx$i43$i >> 2];
       $cfac$010$i41$i = $cfac$010$i41$i * $sub63$us$i$us$i;
       $i$09$i42$i = $i$09$i42$i + 1 | 0;
      } while (($i$09$i42$i | 0) != ($sub1$i170$i | 0));
      $mul4$i51$i = $cfac$010$i41$i * +HEAPF32[$arrayidx3$i66$i >> 2];
      HEAPF32[$arrayidx3$i66$i >> 2] = $mul4$i51$i;
      $309 = $mul4$i51$i;
      $i$511$us$i$us$i = $sub1$i170$i;
      do {
       $i$511$us$i$us$i$looptemp = $i$511$us$i$us$i;
       $i$511$us$i$us$i = $i$511$us$i$us$i + -1 | 0;
       $arrayidx72$us$i$us$i = $arrayidx153$i + ($i$511$us$i$us$i << 2) | 0;
       $309 = +HEAPF32[$arrayidx72$us$i$us$i >> 2] - $add100$i * $309;
       HEAPF32[$arrayidx72$us$i$us$i >> 2] = $309;
      } while (($i$511$us$i$us$i$looptemp | 0) > 1);
      $311 = +HEAPF32[$arrayidx153$i >> 2];
      $gain$016$us$i$us$i = $sub5$i$i93 / ($add100$i * $311 + 1.0);
      HEAPF32[$arrayidx153$i >> 2] = $gain$016$us$i$us$i * $311;
      if (!$exitcond26$i193$i) {
       $inc90$us$i198$us$i = 1;
       do {
        $arrayidx87$us$phi$trans$insert$i$us$i = $arrayidx153$i + ($inc90$us$i198$us$i << 2) | 0;
        HEAPF32[$arrayidx87$us$phi$trans$insert$i$us$i >> 2] = $gain$016$us$i$us$i * +HEAPF32[$arrayidx87$us$phi$trans$insert$i$us$i >> 2];
        $inc90$us$i198$us$i = $inc90$us$i198$us$i + 1 | 0;
       } while (($inc90$us$i198$us$i | 0) != ($291 | 0));
      }
      $iter$015$us$i$us$i = $iter$015$us$i$us$i + 1 | 0;
      if ($iter$015$us$i$us$i >>> 0 >= 10) break; else $ind$014$us$i$us$i = $ind$12$us$i166$us$i;
     }
    } else {
     if (($291 | 0) <= 0) break;
     $649 = $mul4$i67$i;
     $ind$06$us$i$i = 0;
     $iter$07$us$i$i = 0;
     while (1) {
      $i$04$us$i$i = 0;
      $ind$12$us$i$i = $ind$06$us$i$i;
      $maxabs$03$us$i$i = -1.0;
      do {
       $319 = +Math_abs(+(+HEAPF32[$arrayidx153$i + ($i$04$us$i$i << 2) >> 2]));
       $cmp5$us$i$i = $319 > $maxabs$03$us$i$i;
       $ind$12$us$i$i = $cmp5$us$i$i ? $i$04$us$i$i : $ind$12$us$i$i;
       $maxabs$03$us$i$i = $cmp5$us$i$i ? $319 : $maxabs$03$us$i$i;
       $i$04$us$i$i = $i$04$us$i$i + 1 | 0;
      } while (($i$04$us$i$i | 0) != ($291 | 0));
      if ($maxabs$03$us$i$i <= 3.999000072479248) break L493;
      $sub16$us$i$i = .9900000095367432 - (+($iter$07$us$i$i | 0) * .10000000149011612 + .800000011920929) * ($maxabs$03$us$i$i + -3.999000072479248) / ($maxabs$03$us$i$i * +($ind$12$us$i$i + 1 | 0));
      if ($cmp8$i55$i) {
       $cfac$010$i$i163 = $sub16$us$i$i;
       $i$09$i13$i = 0;
       do {
        $arrayidx$i14$i = $arrayidx153$i + ($i$09$i13$i << 2) | 0;
        HEAPF32[$arrayidx$i14$i >> 2] = $cfac$010$i$i163 * +HEAPF32[$arrayidx$i14$i >> 2];
        $cfac$010$i$i163 = $cfac$010$i$i163 * $sub16$us$i$i;
        $i$09$i13$i = $i$09$i13$i + 1 | 0;
       } while (($i$09$i13$i | 0) != ($sub1$i170$i | 0));
       $317 = +HEAPF32[$arrayidx3$i66$i >> 2];
       $cfac$0$lcssa$i$i165 = $cfac$010$i$i163;
      } else {
       $317 = $649;
       $cfac$0$lcssa$i$i165 = $sub16$us$i$i;
      }
      $649 = $cfac$0$lcssa$i$i165 * $317;
      HEAPF32[$arrayidx3$i66$i >> 2] = $649;
      $iter$07$us$i$i = $iter$07$us$i$i + 1 | 0;
      if ($iter$07$us$i$i >>> 0 >= 10) break; else $ind$06$us$i$i = $ind$12$us$i$i;
     }
    } while (0);
    $k$1201$i = $k$1201$i + 1 | 0;
    $320 = HEAP32[$nb_subfr103$pre$phi$iZ2D >> 2] | 0;
    if (($k$1201$i | 0) >= ($320 | 0)) {
     label = 371;
     break;
    }
   }
   if ((label | 0) == 285) _celt_fatal(53611, 53576, 51); else if ((label | 0) == 294) _celt_fatal(54276, 54313, 49); else if ((label | 0) == 371) {
    $conv202$i = +_llvm_exp2_f64(+($SNR_adj_dB$1179$i * -.1599999964237213));
    if (($320 | 0) <= 0) {
     $$lcssa182222$i = $320;
     $cmp207189223$i = 0;
     break;
    }
    $k$2190$i = 0;
    do {
     $arrayidx211$i = $sEncCtrl + ($k$2190$i << 2) | 0;
     HEAPF32[$arrayidx211$i >> 2] = +HEAPF32[$arrayidx211$i >> 2] * $conv202$i + 1.2483305931091309;
     $k$2190$i = $k$2190$i + 1 | 0;
    } while (($k$2190$i | 0) != ($320 | 0));
    $$lcssa182222$i = $320;
    $cmp207189223$i = 1;
   }
  } else {
   $$lcssa182222$i = $256;
   $cmp207189223$i = 0;
  } while (0);
  $speech_activity_Q8229$i = $psEnc + 4532 | 0;
  $conv230$i = +(HEAP32[$speech_activity_Q8229$i >> 2] | 0);
  $mul232$i = $conv230$i * .00390625 * (((+(HEAP32[$arrayidx$i59 >> 2] | 0) * .000030517578125 + -1.0) * .5 + 1.0) * 4.0);
  $cmp237$i = (HEAP8[$signalType$i >> 0] | 0) == 2;
  L569 : do if ($cmp237$i) {
   if ($cmp207189223$i) {
    $div249$i = .20000000298023224 / +(HEAP32[$fs_kHz610 >> 2] | 0);
    $k$3186$i = 0;
    do {
     $add253$i = $div249$i + 3.0 / +(HEAP32[$sEncCtrl + 228 + ($k$3186$i << 2) >> 2] | 0);
     HEAPF32[$sEncCtrl + 628 + ($k$3186$i << 2) >> 2] = $add253$i + -1.0;
     HEAPF32[$sEncCtrl + 644 + ($k$3186$i << 2) >> 2] = 1.0 - $add253$i - $mul232$i * $add253$i;
     $k$3186$i = $k$3186$i + 1 | 0;
    } while (($k$3186$i | 0) != ($$lcssa182222$i | 0));
   }
   $Tilt$0$i = -.25 - $conv230$i * .26249998807907104 * .00390625;
   label = 384;
  } else {
   $div273$i = 1.2999999523162842 / +(HEAP32[$fs_kHz610 >> 2] | 0);
   $add274$i = $div273$i + -1.0;
   $LF_MA_shp275$i = $sEncCtrl + 628 | 0;
   HEAPF32[$LF_MA_shp275$i >> 2] = $add274$i;
   $sub280$i = 1.0 - $div273$i - $mul232$i * $div273$i * .6000000238418579;
   $LF_AR_shp281$i = $sEncCtrl + 644 | 0;
   HEAPF32[$LF_AR_shp281$i >> 2] = $sub280$i;
   $328 = (HEAPF32[tempDoublePtr >> 2] = $add274$i, HEAP32[tempDoublePtr >> 2] | 0);
   if (($$lcssa182222$i | 0) > 1) {
    HEAPF32[$sEncCtrl + 632 >> 2] = $add274$i;
    HEAPF32[$sEncCtrl + 648 >> 2] = $sub280$i;
    if (($$lcssa182222$i | 0) == 2) {
     $HarmShapeGain$0$i = 0.0;
     $Tilt$0224$i = -.25;
    } else {
     $$pre215$i = $328;
     $inc298234$i = 2;
     while (1) {
      HEAP32[$sEncCtrl + 628 + ($inc298234$i << 2) >> 2] = $$pre215$i;
      HEAP32[$sEncCtrl + 644 + ($inc298234$i << 2) >> 2] = HEAP32[$LF_AR_shp281$i >> 2];
      $inc298$i = $inc298234$i + 1 | 0;
      if (($inc298$i | 0) == ($$lcssa182222$i | 0)) {
       $Tilt$0$i = -.25;
       label = 384;
       break L569;
      }
      $$pre215$i = HEAP32[$LF_MA_shp275$i >> 2] | 0;
      $inc298234$i = $inc298$i;
     }
    }
   } else {
    $HarmShapeGain$0$i = 0.0;
    $Tilt$0224$i = -.25;
   }
  } while (0);
  if ((label | 0) == 384) if ($cmp237$i) {
   $HarmShapeGain$0$i = +Math_sqrt(+(+HEAPF32[$psEnc + 10060 >> 2])) * ((1.0 - (1.0 - +HEAPF32[$coding_quality$i >> 2]) * +HEAPF32[$input_quality$i >> 2]) * .20000000298023224 + .30000001192092896);
   $Tilt$0224$i = $Tilt$0$i;
  } else {
   $HarmShapeGain$0$i = 0.0;
   $Tilt$0224$i = $Tilt$0$i;
  }
  if ($cmp207189223$i) {
   $HarmShapeGain_smth$i = $psEnc + 7172 | 0;
   $Tilt_smth$i = $psEnc + 7176 | 0;
   $add330$i565 = +HEAPF32[$HarmShapeGain_smth$i >> 2];
   $add337$i566 = +HEAPF32[$Tilt_smth$i >> 2];
   $k$5184$i = 0;
   do {
    $add330$i565 = $add330$i565 + ($HarmShapeGain$0$i - $add330$i565) * .4000000059604645;
    HEAPF32[$sEncCtrl + 676 + ($k$5184$i << 2) >> 2] = $add330$i565;
    $add337$i566 = $add337$i566 + ($Tilt$0224$i - $add337$i566) * .4000000059604645;
    HEAPF32[$sEncCtrl + 660 + ($k$5184$i << 2) >> 2] = $add337$i566;
    $k$5184$i = $k$5184$i + 1 | 0;
   } while (($k$5184$i | 0) != ($$lcssa182222$i | 0));
   HEAPF32[$HarmShapeGain_smth$i >> 2] = $add330$i565;
   HEAPF32[$Tilt_smth$i >> 2] = $add337$i566;
  }
  $nb_subfr$i169 = $psEnc + 4580 | 0;
  $334 = HEAP32[$nb_subfr$i169 >> 2] | 0;
  $cmp68$i = ($334 | 0) > 0;
  if ($cmp68$i) {
   $i$069$i = 0;
   do {
    HEAPF32[$invGains$i + ($i$069$i << 2) >> 2] = 1.0 / +HEAPF32[$sEncCtrl + ($i$069$i << 2) >> 2];
    $i$069$i = $i$069$i + 1 | 0;
   } while (($i$069$i | 0) != ($334 | 0));
  }
  do if ((HEAP8[$signalType$i >> 0] | 0) == 2) {
   $predictLPCOrder$i = $psEnc + 4640 | 0;
   $339 = HEAP32[$sEncCtrl + 228 >> 2] | 0;
   if (((HEAP32[$ltp_mem_length >> 2] | 0) - (HEAP32[$predictLPCOrder$i >> 2] | 0) | 0) < ($339 + 2 | 0)) _celt_fatal(54055, 54172, 62);
   $subfr_length$i185 = $psEnc + 4588 | 0;
   $340 = HEAP32[$subfr_length$i185 >> 2] | 0;
   L602 : do if ($cmp68$i) {
    $add1$i$i = $340 + 5 | 0;
    $sub$i$i$i$i = $340 + -3 | 0;
    $cmp32$i$i$i$i = ($340 | 0) > 3;
    $341 = $340 & -4;
    $cmp32$i$i$i214 = ($340 | 0) > -2;
    $342 = $add1$i$i & -4;
    $343 = $339;
    $XX_ptr$027$i$i = $XXLTP$i;
    $k$029$i$i = 0;
    $r_ptr$addr$030$i$i = $add$ptr6;
    $xX_ptr$028$i$i = $xXLTP$i;
    while (1) {
     $add$ptr$i$i189 = $r_ptr$addr$030$i$i + (-2 - $343 << 2) | 0;
     $arrayidx$i$i$i190 = $add$ptr$i$i189 + 16 | 0;
     if ($cmp32$i$i$i$i) {
      $i$033$i$i$i$i = 0;
      $result$034$i$i$i$i = 0.0;
      while (1) {
       $conv$i$i$i$i192 = +HEAPF32[$arrayidx$i$i$i190 + ($i$033$i$i$i$i << 2) >> 2];
       $conv6$i$i$i$i = +HEAPF32[$arrayidx$i$i$i190 + (($i$033$i$i$i$i | 1) << 2) >> 2];
       $conv14$i$i$i$i = +HEAPF32[$arrayidx$i$i$i190 + (($i$033$i$i$i$i | 2) << 2) >> 2];
       $conv22$i$i$i$i = +HEAPF32[$arrayidx$i$i$i190 + (($i$033$i$i$i$i | 3) << 2) >> 2];
       $add28$i$i$i$i = $result$034$i$i$i$i + ($conv$i$i$i$i192 * $conv$i$i$i$i192 + $conv6$i$i$i$i * $conv6$i$i$i$i + $conv14$i$i$i$i * $conv14$i$i$i$i + $conv22$i$i$i$i * $conv22$i$i$i$i);
       $i$033$i$i$i$i = $i$033$i$i$i$i + 4 | 0;
       if (($i$033$i$i$i$i | 0) >= ($sub$i$i$i$i | 0)) {
        $i$0$lcssa$i$i$i$i = $341;
        $result$0$lcssa$i$i$i$i = $add28$i$i$i$i;
        break;
       } else $result$034$i$i$i$i = $add28$i$i$i$i;
      }
     } else {
      $i$0$lcssa$i$i$i$i = 0;
      $result$0$lcssa$i$i$i$i = 0.0;
     }
     if (($i$0$lcssa$i$i$i$i | 0) < ($340 | 0)) {
      $i$129$i$i$i$i = $i$0$lcssa$i$i$i$i;
      $result$130$i$i$i$i = $result$0$lcssa$i$i$i$i;
      while (1) {
       $conv35$i$i$i$i = +HEAPF32[$arrayidx$i$i$i190 + ($i$129$i$i$i$i << 2) >> 2];
       $add39$i$i$i$i = $result$130$i$i$i$i + $conv35$i$i$i$i * $conv35$i$i$i$i;
       $i$129$i$i$i$i = $i$129$i$i$i$i + 1 | 0;
       if (($i$129$i$i$i$i | 0) == ($340 | 0)) {
        $result$1$lcssa$i$i$i$i = $add39$i$i$i$i;
        break;
       } else $result$130$i$i$i$i = $add39$i$i$i$i;
      }
     } else $result$1$lcssa$i$i$i$i = $result$0$lcssa$i$i$i$i;
     HEAPF32[$XX_ptr$027$i$i >> 2] = $result$1$lcssa$i$i$i$i;
     $349 = +HEAPF32[$arrayidx$i$i$i190 + -4 >> 2];
     $350 = +HEAPF32[$arrayidx$i$i$i190 + ($340 + -1 << 2) >> 2];
     $add14$i$i$i = $result$1$lcssa$i$i$i$i + ($349 * $349 - $350 * $350);
     HEAPF32[$XX_ptr$027$i$i + 24 >> 2] = $add14$i$i$i;
     $351 = +HEAPF32[$arrayidx$i$i$i190 + -8 >> 2];
     $352 = +HEAPF32[$arrayidx$i$i$i190 + ($340 + -2 << 2) >> 2];
     $add14$i$i$i$1 = $add14$i$i$i + ($351 * $351 - $352 * $352);
     HEAPF32[$XX_ptr$027$i$i + 48 >> 2] = $add14$i$i$i$1;
     $353 = +HEAPF32[$arrayidx$i$i$i190 + -12 >> 2];
     $354 = +HEAPF32[$arrayidx$i$i$i190 + ($340 + -3 << 2) >> 2];
     $add14$i$i$i$2 = $add14$i$i$i$1 + ($353 * $353 - $354 * $354);
     HEAPF32[$XX_ptr$027$i$i + 72 >> 2] = $add14$i$i$i$2;
     $355 = +HEAPF32[$arrayidx$i$i$i190 + -16 >> 2];
     $356 = +HEAPF32[$arrayidx$i$i$i190 + ($340 + -4 << 2) >> 2];
     HEAPF32[$XX_ptr$027$i$i + 96 >> 2] = $add14$i$i$i$2 + ($355 * $355 - $356 * $356);
     $indvars$iv$i$i$i = 4;
     $lag$071$i$i$i = 1;
     $ptr2$073$i$i$i = $add$ptr$i$i189 + 12 | 0;
     while (1) {
      $call25$i$i$i = +_silk_inner_product_FLP($arrayidx$i$i$i190, $ptr2$073$i$i$i, $340);
      $conv26$i$i$i = $call25$i$i$i;
      HEAPF32[$XX_ptr$027$i$i + ($lag$071$i$i$i * 5 << 2) >> 2] = $conv26$i$i$i;
      HEAPF32[$XX_ptr$027$i$i + ($lag$071$i$i$i << 2) >> 2] = $conv26$i$i$i;
      if (($lag$071$i$i$i | 1 | 0) != 5) {
       $energy$168$i$i$i = $call25$i$i$i;
       $j$169$i$i$i = 1;
       do {
        $sub39$i$i$i205 = 0 - $j$169$i$i$i | 0;
        $sub44$i$i$i = $340 - $j$169$i$i$i | 0;
        $energy$168$i$i$i = $energy$168$i$i$i + (+HEAPF32[$arrayidx$i$i$i190 + ($sub39$i$i$i205 << 2) >> 2] * +HEAPF32[$ptr2$073$i$i$i + ($sub39$i$i$i205 << 2) >> 2] - +HEAPF32[$arrayidx$i$i$i190 + ($sub44$i$i$i << 2) >> 2] * +HEAPF32[$ptr2$073$i$i$i + ($sub44$i$i$i << 2) >> 2]);
        $conv52$i$i$i = $energy$168$i$i$i;
        $add53$i$i$i = $j$169$i$i$i + $lag$071$i$i$i | 0;
        HEAPF32[$XX_ptr$027$i$i + (($add53$i$i$i * 5 | 0) + $j$169$i$i$i << 2) >> 2] = $conv52$i$i$i;
        HEAPF32[$XX_ptr$027$i$i + (($j$169$i$i$i * 5 | 0) + $add53$i$i$i << 2) >> 2] = $conv52$i$i$i;
        $j$169$i$i$i = $j$169$i$i$i + 1 | 0;
       } while (($j$169$i$i$i | 0) != ($indvars$iv$i$i$i | 0));
      }
      $lag$071$i$i$i = $lag$071$i$i$i + 1 | 0;
      if (($lag$071$i$i$i | 0) == 5) break; else {
       $indvars$iv$i$i$i = $indvars$iv$i$i$i + -1 | 0;
       $ptr2$073$i$i$i = $ptr2$073$i$i$i + -4 | 0;
      }
     }
     HEAPF32[$xX_ptr$028$i$i >> 2] = +_silk_inner_product_FLP($arrayidx$i$i$i190, $r_ptr$addr$030$i$i, $340);
     $incdec$ptr$i3$i$i = $arrayidx$i$i$i190 + -4 | 0;
     HEAPF32[$xX_ptr$028$i$i + 4 >> 2] = +_silk_inner_product_FLP($incdec$ptr$i3$i$i, $r_ptr$addr$030$i$i, $340);
     $incdec$ptr$i3$i$i$1 = $incdec$ptr$i3$i$i + -4 | 0;
     HEAPF32[$xX_ptr$028$i$i + 8 >> 2] = +_silk_inner_product_FLP($incdec$ptr$i3$i$i$1, $r_ptr$addr$030$i$i, $340);
     $incdec$ptr$i3$i$i$2 = $incdec$ptr$i3$i$i$1 + -4 | 0;
     HEAPF32[$xX_ptr$028$i$i + 12 >> 2] = +_silk_inner_product_FLP($incdec$ptr$i3$i$i$2, $r_ptr$addr$030$i$i, $340);
     HEAPF32[$xX_ptr$028$i$i + 16 >> 2] = +_silk_inner_product_FLP($incdec$ptr$i3$i$i$2 + -4 | 0, $r_ptr$addr$030$i$i, $340);
     if ($cmp32$i$i$i214) {
      $i$033$i$i$i217 = 0;
      $result$034$i$i$i216 = 0.0;
      while (1) {
       $conv$i9$i$i = +HEAPF32[$r_ptr$addr$030$i$i + ($i$033$i$i$i217 << 2) >> 2];
       $conv6$i$i$i221 = +HEAPF32[$r_ptr$addr$030$i$i + (($i$033$i$i$i217 | 1) << 2) >> 2];
       $add12$i$i$i224 = $i$033$i$i$i217 | 2;
       $conv14$i$i$i226 = +HEAPF32[$r_ptr$addr$030$i$i + ($add12$i$i$i224 << 2) >> 2];
       $conv22$i$i$i231 = +HEAPF32[$r_ptr$addr$030$i$i + (($i$033$i$i$i217 | 3) << 2) >> 2];
       $add28$i$i$i234 = $result$034$i$i$i216 + ($conv$i9$i$i * $conv$i9$i$i + $conv6$i$i$i221 * $conv6$i$i$i221 + $conv14$i$i$i226 * $conv14$i$i$i226 + $conv22$i$i$i231 * $conv22$i$i$i231);
       if (($add12$i$i$i224 | 0) < ($340 | 0)) {
        $i$033$i$i$i217 = $i$033$i$i$i217 + 4 | 0;
        $result$034$i$i$i216 = $add28$i$i$i234;
       } else {
        $i$0$lcssa$i$i$i238 = $342;
        $result$0$lcssa$i$i$i239 = $add28$i$i$i234;
        break;
       }
      }
     } else {
      $i$0$lcssa$i$i$i238 = 0;
      $result$0$lcssa$i$i$i239 = 0.0;
     }
     if (($i$0$lcssa$i$i$i238 | 0) < ($add1$i$i | 0)) {
      $i$129$i$i$i243 = $i$0$lcssa$i$i$i238;
      $result$130$i$i$i242 = $result$0$lcssa$i$i$i239;
      while (1) {
       $conv35$i$i$i245 = +HEAPF32[$r_ptr$addr$030$i$i + ($i$129$i$i$i243 << 2) >> 2];
       $add39$i$i$i247 = $result$130$i$i$i242 + $conv35$i$i$i245 * $conv35$i$i$i245;
       $i$129$i$i$i243 = $i$129$i$i$i243 + 1 | 0;
       if (($i$129$i$i$i243 | 0) == ($add1$i$i | 0)) {
        $result$1$lcssa$i$i$i249 = $add39$i$i$i247;
        break;
       } else $result$130$i$i$i242 = $add39$i$i$i247;
      }
     } else $result$1$lcssa$i$i$i249 = $result$0$lcssa$i$i$i239;
     $conv$i$i250 = $result$1$lcssa$i$i$i249;
     $367 = +HEAPF32[$XX_ptr$027$i$i >> 2];
     $add5$i$i = ($367 + +HEAPF32[$XX_ptr$027$i$i + 96 >> 2]) * .014999999664723873 + 1.0;
     $div$i$i254 = 1.0 / ($add5$i$i < $conv$i$i250 ? $conv$i$i250 : $add5$i$i);
     $369 = $367;
     $i$023$i$i$i = 0;
     while (1) {
      HEAPF32[$XX_ptr$027$i$i + ($i$023$i$i$i << 2) >> 2] = $369 * $div$i$i254;
      $arrayidx2$i29$i$i = $XX_ptr$027$i$i + (($i$023$i$i$i | 1) << 2) | 0;
      HEAPF32[$arrayidx2$i29$i$i >> 2] = +HEAPF32[$arrayidx2$i29$i$i >> 2] * $div$i$i254;
      $arrayidx5$i32$i$i = $XX_ptr$027$i$i + (($i$023$i$i$i | 2) << 2) | 0;
      HEAPF32[$arrayidx5$i32$i$i >> 2] = +HEAPF32[$arrayidx5$i32$i$i >> 2] * $div$i$i254;
      $arrayidx8$i34$i$i = $XX_ptr$027$i$i + (($i$023$i$i$i | 3) << 2) | 0;
      HEAPF32[$arrayidx8$i34$i$i >> 2] = +HEAPF32[$arrayidx8$i34$i$i >> 2] * $div$i$i254;
      $add10$i$i$i = $i$023$i$i$i + 4 | 0;
      if ($add10$i$i$i >>> 0 >= 24) break;
      $369 = +HEAPF32[$XX_ptr$027$i$i + ($add10$i$i$i << 2) >> 2];
      $i$023$i$i$i = $add10$i$i$i;
     }
     $arrayidx14$i41$i$i = $XX_ptr$027$i$i + 96 | 0;
     HEAPF32[$arrayidx14$i41$i$i >> 2] = +HEAPF32[$arrayidx14$i41$i$i >> 2] * $div$i$i254;
     HEAPF32[$xX_ptr$028$i$i >> 2] = +HEAPF32[$xX_ptr$028$i$i >> 2] * $div$i$i254;
     $arrayidx2$i$i$i256 = $xX_ptr$028$i$i + 4 | 0;
     HEAPF32[$arrayidx2$i$i$i256 >> 2] = +HEAPF32[$arrayidx2$i$i$i256 >> 2] * $div$i$i254;
     $arrayidx5$i18$i$i = $xX_ptr$028$i$i + 8 | 0;
     HEAPF32[$arrayidx5$i18$i$i >> 2] = +HEAPF32[$arrayidx5$i18$i$i >> 2] * $div$i$i254;
     $arrayidx8$i20$i$i = $xX_ptr$028$i$i + 12 | 0;
     HEAPF32[$arrayidx8$i20$i$i >> 2] = +HEAPF32[$arrayidx8$i20$i$i >> 2] * $div$i$i254;
     $arrayidx14$i$i$i259 = $xX_ptr$028$i$i + 16 | 0;
     HEAPF32[$arrayidx14$i$i$i259 >> 2] = +HEAPF32[$arrayidx14$i$i$i259 >> 2] * $div$i$i254;
     $inc$i$i260 = $k$029$i$i + 1 | 0;
     if (($inc$i$i260 | 0) == ($334 | 0)) break L602;
     $343 = HEAP32[$sEncCtrl + 228 + ($inc$i$i260 << 2) >> 2] | 0;
     $XX_ptr$027$i$i = $XX_ptr$027$i$i + 100 | 0;
     $k$029$i$i = $inc$i$i260;
     $r_ptr$addr$030$i$i = $r_ptr$addr$030$i$i + ($340 << 2) | 0;
     $xX_ptr$028$i$i = $xX_ptr$028$i$i + 20 | 0;
    }
   } while (0);
   $arraydecay20$i = $psEnc + 4740 | 0;
   $PERIndex$i = $psEnc + 4768 | 0;
   $sum_log_gain_Q7$i = $psEnc + 4656 | 0;
   $LTPredCodGain$i = $sEncCtrl + 708 | 0;
   $mul$i1$i = $334 * 5 | 0;
   $mul1$i$i262 = $334 * 25 | 0;
   if (($mul1$i$i262 | 0) > 0) {
    $i$022$i$i = 0;
    do {
     HEAP32[$a_fix_Q12$i$i$i + ($i$022$i$i << 2) >> 2] = _lrintf(+HEAPF32[$XXLTP$i + ($i$022$i$i << 2) >> 2] * 131072.0) | 0;
     $i$022$i$i = $i$022$i$i + 1 | 0;
    } while (($i$022$i$i | 0) != ($mul1$i$i262 | 0));
   }
   if ($cmp68$i) {
    $i$120$i$i = 0;
    do {
     HEAP32[$NLSF0_Q15$i$i + ($i$120$i$i << 2) >> 2] = _lrintf(+HEAPF32[$xXLTP$i + ($i$120$i$i << 2) >> 2] * 131072.0) | 0;
     $i$120$i$i = $i$120$i$i + 1 | 0;
    } while (($i$120$i$i | 0) < ($mul$i1$i | 0));
    _silk_quant_LTP_gains($PredCoef_Q12$i$i, $arraydecay20$i, $PERIndex$i, $sum_log_gain_Q7$i, $pGains_Q16$i, $a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $340, $334);
    $i$218$i$i = 0;
    do {
     HEAPF32[$sEncCtrl + 144 + ($i$218$i$i << 2) >> 2] = +(HEAP16[$PredCoef_Q12$i$i + ($i$218$i$i << 1) >> 1] | 0) * .00006103515625;
     $i$218$i$i = $i$218$i$i + 1 | 0;
    } while (($i$218$i$i | 0) < ($mul$i1$i | 0));
   } else _silk_quant_LTP_gains($PredCoef_Q12$i$i, $arraydecay20$i, $PERIndex$i, $sum_log_gain_Q7$i, $pGains_Q16$i, $a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $340, $334);
   $mul28$i$i = +(HEAP32[$pGains_Q16$i >> 2] | 0) * .0078125;
   HEAPF32[$LTPredCodGain$i >> 2] = $mul28$i$i;
   do if (!$condCoding) {
    $mul2$i12$i = $mul28$i$i * +((HEAP32[$psEnc + 5744 >> 2] | 0) + (HEAP32[$psEnc + 4616 >> 2] | 0) | 0) * .10000000149011612;
    if ($mul2$i12$i > 2.0) {
     $$sink$i$i276 = 2;
     break;
    }
    if ($mul2$i12$i < 0.0) {
     $$sink$i$i276 = 0;
     break;
    }
    $$sink$i$i276 = ~~$mul2$i12$i;
   } else $$sink$i$i276 = 0; while (0);
   HEAP8[$psEnc + 4769 >> 0] = $$sink$i$i276;
   HEAPF32[$sEncCtrl + 224 >> 2] = +(HEAP16[47592 + ($$sink$i$i276 << 24 >> 24 << 1) >> 1] | 0) * .00006103515625;
   $386 = HEAP32[$predictLPCOrder$i >> 2] | 0;
   $387 = HEAP32[$subfr_length$i185 >> 2] | 0;
   $388 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   if (($388 | 0) <= 0) {
    $411 = $388;
    break;
   }
   $add8$i$i = $386 + $387 | 0;
   if (($add8$i$i | 0) <= 0) {
    $411 = $388;
    break;
   }
   $LTP_res_ptr$039$us$i$i = $LPC_in_pre$i;
   $k$041$us$i$i = 0;
   $x_ptr$040$us$i$i = $add$ptr + (0 - $386 << 2) | 0;
   while (1) {
    $scevgep$i$i279 = $sEncCtrl + 144 + ($k$041$us$i$i * 5 << 2) | 0;
    $391 = +HEAPF32[$invGains$i + ($k$041$us$i$i << 2) >> 2];
    $Btmp$i$i$sroa$0$0$copyload525 = +HEAPF32[$scevgep$i$i279 >> 2];
    $Btmp$i$i$sroa$5$0$copyload529 = +HEAPF32[$scevgep$i$i279 + 4 >> 2];
    $Btmp$i$i$sroa$6$0$copyload533 = +HEAPF32[$scevgep$i$i279 + 8 >> 2];
    $Btmp$i$i$sroa$7$0$copyload537 = +HEAPF32[$scevgep$i$i279 + 12 >> 2];
    $Btmp$i$i$sroa$8$0$copyload541 = +HEAPF32[$scevgep$i$i279 + 16 >> 2];
    $i$137$us$i$i = 0;
    $x_lag_ptr$036$us$i$i = $x_ptr$040$us$i$i + (0 - (HEAP32[$sEncCtrl + 228 + ($k$041$us$i$i << 2) >> 2] | 0) << 2) | 0;
    do {
     $392 = HEAP32[$x_ptr$040$us$i$i + ($i$137$us$i$i << 2) >> 2] | 0;
     $arrayidx12$us$i$i = $LTP_res_ptr$039$us$i$i + ($i$137$us$i$i << 2) | 0;
     HEAP32[$arrayidx12$us$i$i >> 2] = $392;
     $sub20$us$i$i282 = (HEAP32[tempDoublePtr >> 2] = $392, +HEAPF32[tempDoublePtr >> 2]) - $Btmp$i$i$sroa$0$0$copyload525 * +HEAPF32[$x_lag_ptr$036$us$i$i + 8 >> 2];
     HEAPF32[$arrayidx12$us$i$i >> 2] = $sub20$us$i$i282;
     $x_lag_ptr$036$us$i$i$looptemp = $x_lag_ptr$036$us$i$i;
     $x_lag_ptr$036$us$i$i = $x_lag_ptr$036$us$i$i + 4 | 0;
     $sub20$us$1$i$i = $sub20$us$i$i282 - $Btmp$i$i$sroa$5$0$copyload529 * +HEAPF32[$x_lag_ptr$036$us$i$i >> 2];
     HEAPF32[$arrayidx12$us$i$i >> 2] = $sub20$us$1$i$i;
     $sub20$us$2$i$i = $sub20$us$1$i$i - $Btmp$i$i$sroa$6$0$copyload533 * +HEAPF32[$x_lag_ptr$036$us$i$i$looptemp >> 2];
     HEAPF32[$arrayidx12$us$i$i >> 2] = $sub20$us$2$i$i;
     $sub20$us$3$i$i = $sub20$us$2$i$i - $Btmp$i$i$sroa$7$0$copyload537 * +HEAPF32[$x_lag_ptr$036$us$i$i$looptemp + -4 >> 2];
     HEAPF32[$arrayidx12$us$i$i >> 2] = $sub20$us$3$i$i;
     HEAPF32[$arrayidx12$us$i$i >> 2] = $391 * ($sub20$us$3$i$i - $Btmp$i$i$sroa$8$0$copyload541 * +HEAPF32[$x_lag_ptr$036$us$i$i$looptemp + -8 >> 2]);
     $i$137$us$i$i = $i$137$us$i$i + 1 | 0;
    } while (($i$137$us$i$i | 0) != ($add8$i$i | 0));
    $k$041$us$i$i = $k$041$us$i$i + 1 | 0;
    if (($k$041$us$i$i | 0) == ($388 | 0)) {
     $411 = $388;
     break;
    } else {
     $LTP_res_ptr$039$us$i$i = $LTP_res_ptr$039$us$i$i + ($add8$i$i << 2) | 0;
     $x_ptr$040$us$i$i = $x_ptr$040$us$i$i + ($387 << 2) | 0;
    }
   }
  } else {
   if ($cmp68$i) {
    $399 = HEAP32[$psEnc + 4640 >> 2] | 0;
    $$pre$i284 = HEAP32[$psEnc + 4588 >> 2] | 0;
    $add66$i = $399 + $$pre$i284 | 0;
    $i$165$i = 0;
    $x_pre_ptr$067$i = $LPC_in_pre$i;
    $x_ptr$066$i = $add$ptr + (0 - $399 << 2) | 0;
    while (1) {
     $400 = +HEAPF32[$invGains$i + ($i$165$i << 2) >> 2];
     $and$i$i285 = $add66$i & 65532;
     if (!$and$i$i285) $i$0$lcssa$i$i293 = 0; else {
      $i$032$i$i = 0;
      do {
       HEAPF32[$x_pre_ptr$067$i + ($i$032$i$i << 2) >> 2] = +HEAPF32[$x_ptr$066$i + ($i$032$i$i << 2) >> 2] * $400;
       $add3$i$i = $i$032$i$i | 1;
       HEAPF32[$x_pre_ptr$067$i + ($add3$i$i << 2) >> 2] = +HEAPF32[$x_ptr$066$i + ($add3$i$i << 2) >> 2] * $400;
       $add8$i23$i = $i$032$i$i | 2;
       HEAPF32[$x_pre_ptr$067$i + ($add8$i23$i << 2) >> 2] = +HEAPF32[$x_ptr$066$i + ($add8$i23$i << 2) >> 2] * $400;
       $add13$i$i = $i$032$i$i | 3;
       HEAPF32[$x_pre_ptr$067$i + ($add13$i$i << 2) >> 2] = +HEAPF32[$x_ptr$066$i + ($add13$i$i << 2) >> 2] * $400;
       $i$032$i$i = $i$032$i$i + 4 | 0;
      } while ($i$032$i$i >>> 0 < $and$i$i285 >>> 0);
      $i$0$lcssa$i$i293 = $and$i$i285;
     }
     if (($i$0$lcssa$i$i293 | 0) < ($add66$i | 0)) {
      $i$130$i$i = $i$0$lcssa$i$i293;
      do {
       HEAPF32[$x_pre_ptr$067$i + ($i$130$i$i << 2) >> 2] = +HEAPF32[$x_ptr$066$i + ($i$130$i$i << 2) >> 2] * $400;
       $i$130$i$i = $i$130$i$i + 1 | 0;
      } while (($i$130$i$i | 0) != ($add66$i | 0));
     }
     $i$165$i = $i$165$i + 1 | 0;
     if (($i$165$i | 0) == ($334 | 0)) break; else {
      $x_pre_ptr$067$i = $x_pre_ptr$067$i + ($add66$i << 2) | 0;
      $x_ptr$066$i = $x_ptr$066$i + ($$pre$i284 << 2) | 0;
     }
    }
   }
   _memset($sEncCtrl + 144 | 0, 0, $334 * 20 | 0) | 0;
   HEAPF32[$sEncCtrl + 708 >> 2] = 0.0;
   HEAP32[$psEnc + 4656 >> 2] = 0;
   $411 = $334;
  } while (0);
  $first_frame_after_reset$i297 = $psEnc + 4664 | 0;
  if (!(HEAP32[$first_frame_after_reset$i297 >> 2] | 0)) {
   $div90$i = +_llvm_exp2_f64(+(+HEAPF32[$sEncCtrl + 708 >> 2] / 3.0)) / 1.0e4;
   $minInvGain$0$i = $div90$i / (+HEAPF32[$coding_quality$i >> 2] * .75 + .25);
  } else $minInvGain$0$i = .009999999776482582;
  $subfr_length1$i$i = $psEnc + 4588 | 0;
  $predictLPCOrder$i$i = $psEnc + 4640 | 0;
  $410 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
  $add$i29$i = $410 + (HEAP32[$subfr_length1$i$i >> 2] | 0) | 0;
  $NLSFInterpCoef_Q2$i$i = $psEnc + 4767 | 0;
  HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] = 4;
  $call$i$i304 = +_silk_burg_modified_FLP($A$i, $LPC_in_pre$i, $minInvGain$0$i, $add$i29$i, $411, $410);
  $useInterpolatedNLSFs$i$i = $psEnc + 4632 | 0;
  do if (!(HEAP32[$useInterpolatedNLSFs$i$i >> 2] | 0)) label = 499; else {
   if (HEAP32[$first_frame_after_reset$i297 >> 2] | 0) {
    label = 499;
    break;
   }
   if ((HEAP32[$nb_subfr$i169 >> 2] | 0) != 4) {
    label = 499;
    break;
   }
   $mul$i32$i = $add$i29$i << 1;
   $sub$i$i305 = $call$i$i304 - +_silk_burg_modified_FLP($refl_coef$i, $LPC_in_pre$i + ($mul$i32$i << 2) | 0, $minInvGain$0$i, $add$i29$i, 2, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   _silk_A2NLSF_FLP($NLSF_Q15$i, $refl_coef$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $417 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   $cmp412$i$i$i = ($417 | 0) > 0;
   if ($cmp412$i$i$i) {
    $i$013$i$i$i = 0;
    do {
     $conv$i$i36$i = HEAP16[$psEnc + 4500 + ($i$013$i$i$i << 1) >> 1] | 0;
     HEAP16[$NLSF0_Q15$i$i + ($i$013$i$i$i << 1) >> 1] = ((((HEAPU16[$NLSF_Q15$i + ($i$013$i$i$i << 1) >> 1] | 0) - $conv$i$i36$i << 16 >> 16) * 3 | 0) >>> 2) + $conv$i$i36$i;
     $i$013$i$i$i = $i$013$i$i$i + 1 | 0;
    } while (($i$013$i$i$i | 0) != ($417 | 0));
   }
   _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $417);
   if ($cmp412$i$i$i) {
    $i$07$i$i$i = 0;
    do {
     HEAPF32[$refl_coef$i + ($i$07$i$i$i << 2) >> 2] = +(HEAP16[$a_fix_Q12$i$i$i + ($i$07$i$i$i << 1) >> 1] | 0) * .000244140625;
     $i$07$i$i$i = $i$07$i$i$i + 1 | 0;
    } while (($i$07$i$i$i | 0) != ($417 | 0));
   }
   _silk_LPC_analysis_filter_FLP($Wsig$i, $refl_coef$i, $LPC_in_pre$i, $mul$i32$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $423 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   $add$ptr24$i$i = $Wsig$i + ($423 << 2) | 0;
   $sub26$i$i = $add$i29$i - $423 | 0;
   $sub$i61$i$i = $sub26$i$i + -3 | 0;
   $cmp32$i62$i$i = ($sub26$i$i | 0) > 3;
   if ($cmp32$i62$i$i) {
    $i$033$i65$i$i = 0;
    $result$034$i64$i$i = 0.0;
    do {
     $conv$i67$i$i = +HEAPF32[$add$ptr24$i$i + ($i$033$i65$i$i << 2) >> 2];
     $conv6$i71$i$i = +HEAPF32[$add$ptr24$i$i + (($i$033$i65$i$i | 1) << 2) >> 2];
     $conv14$i76$i$i = +HEAPF32[$add$ptr24$i$i + (($i$033$i65$i$i | 2) << 2) >> 2];
     $conv22$i81$i$i = +HEAPF32[$add$ptr24$i$i + (($i$033$i65$i$i | 3) << 2) >> 2];
     $result$034$i64$i$i = $result$034$i64$i$i + ($conv$i67$i$i * $conv$i67$i$i + $conv6$i71$i$i * $conv6$i71$i$i + $conv14$i76$i$i * $conv14$i76$i$i + $conv22$i81$i$i * $conv22$i81$i$i);
     $i$033$i65$i$i = $i$033$i65$i$i + 4 | 0;
    } while (($i$033$i65$i$i | 0) < ($sub$i61$i$i | 0));
    $i$0$lcssa$i89$i$i = $sub26$i$i & -4;
    $result$0$lcssa$i90$i$i = $result$034$i64$i$i;
   } else {
    $i$0$lcssa$i89$i$i = 0;
    $result$0$lcssa$i90$i$i = 0.0;
   }
   if (($i$0$lcssa$i89$i$i | 0) < ($sub26$i$i | 0)) {
    $i$129$i95$i$i = $i$0$lcssa$i89$i$i;
    $result$130$i94$i$i = $result$0$lcssa$i90$i$i;
    while (1) {
     $conv35$i97$i$i = +HEAPF32[$add$ptr24$i$i + ($i$129$i95$i$i << 2) >> 2];
     $add39$i99$i$i = $result$130$i94$i$i + $conv35$i97$i$i * $conv35$i97$i$i;
     $i$129$i95$i$i = $i$129$i95$i$i + 1 | 0;
     if (($i$129$i95$i$i | 0) == ($sub26$i$i | 0)) {
      $result$1$lcssa$i103$i$i = $add39$i99$i$i;
      break;
     } else $result$130$i94$i$i = $add39$i99$i$i;
    }
   } else $result$1$lcssa$i103$i$i = $result$0$lcssa$i90$i$i;
   $add$ptr31$i$i = $add$ptr24$i$i + ($add$i29$i << 2) | 0;
   if ($cmp32$i62$i$i) {
    $i$033$i123$i$i = 0;
    $result$034$i122$i$i = 0.0;
    do {
     $conv$i125$i$i = +HEAPF32[$add$ptr31$i$i + ($i$033$i123$i$i << 2) >> 2];
     $conv6$i129$i$i = +HEAPF32[$add$ptr31$i$i + (($i$033$i123$i$i | 1) << 2) >> 2];
     $conv14$i134$i$i = +HEAPF32[$add$ptr31$i$i + (($i$033$i123$i$i | 2) << 2) >> 2];
     $conv22$i139$i$i = +HEAPF32[$add$ptr31$i$i + (($i$033$i123$i$i | 3) << 2) >> 2];
     $result$034$i122$i$i = $result$034$i122$i$i + ($conv$i125$i$i * $conv$i125$i$i + $conv6$i129$i$i * $conv6$i129$i$i + $conv14$i134$i$i * $conv14$i134$i$i + $conv22$i139$i$i * $conv22$i139$i$i);
     $i$033$i123$i$i = $i$033$i123$i$i + 4 | 0;
    } while (($i$033$i123$i$i | 0) < ($sub$i61$i$i | 0));
    $i$0$lcssa$i147$i$i = $sub26$i$i & -4;
    $result$0$lcssa$i148$i$i = $result$034$i122$i$i;
   } else {
    $i$0$lcssa$i147$i$i = 0;
    $result$0$lcssa$i148$i$i = 0.0;
   }
   if (($i$0$lcssa$i147$i$i | 0) < ($sub26$i$i | 0)) {
    $i$129$i153$i$i = $i$0$lcssa$i147$i$i;
    $result$130$i152$i$i = $result$0$lcssa$i148$i$i;
    while (1) {
     $conv35$i155$i$i = +HEAPF32[$add$ptr31$i$i + ($i$129$i153$i$i << 2) >> 2];
     $add39$i157$i$i = $result$130$i152$i$i + $conv35$i155$i$i * $conv35$i155$i$i;
     $i$129$i153$i$i = $i$129$i153$i$i + 1 | 0;
     if (($i$129$i153$i$i | 0) == ($sub26$i$i | 0)) {
      $result$1$lcssa$i161$i$i = $add39$i157$i$i;
      break;
     } else $result$130$i152$i$i = $add39$i157$i$i;
    }
   } else $result$1$lcssa$i161$i$i = $result$0$lcssa$i148$i$i;
   $conv$i46$i = $result$1$lcssa$i103$i$i + $result$1$lcssa$i161$i$i;
   if ($sub$i$i305 > $conv$i46$i) {
    HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] = 3;
    $res_nrg$1$i$i = $conv$i46$i;
   } else if ($conv$i46$i > 3402823466385288598117041.0e14) {
    label = 499;
    break;
   } else $res_nrg$1$i$i = $sub$i$i305;
   $cmp412$i267$i$i = ($423 | 0) > 0;
   do if ($cmp412$i267$i$i) {
    $i$013$i269$i$i = 0;
    do {
     $conv$i271$i$i = HEAP16[$psEnc + 4500 + ($i$013$i269$i$i << 1) >> 1] | 0;
     HEAP16[$NLSF0_Q15$i$i + ($i$013$i269$i$i << 1) >> 1] = ((HEAPU16[$NLSF_Q15$i + ($i$013$i269$i$i << 1) >> 1] | 0) - $conv$i271$i$i << 16 >> 15 >>> 2) + $conv$i271$i$i;
     $i$013$i269$i$i = $i$013$i269$i$i + 1 | 0;
    } while (($i$013$i269$i$i | 0) != ($423 | 0));
    _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $423);
    if (!$cmp412$i267$i$i) break;
    $i$07$i304$i$i = 0;
    do {
     HEAPF32[$refl_coef$i + ($i$07$i304$i$i << 2) >> 2] = +(HEAP16[$a_fix_Q12$i$i$i + ($i$07$i304$i$i << 1) >> 1] | 0) * .000244140625;
     $i$07$i304$i$i = $i$07$i304$i$i + 1 | 0;
    } while (($i$07$i304$i$i | 0) != ($423 | 0));
   } else _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $423); while (0);
   _silk_LPC_analysis_filter_FLP($Wsig$i, $refl_coef$i, $LPC_in_pre$i, $mul$i32$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $441 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   $add$ptr24$1$i$i = $Wsig$i + ($441 << 2) | 0;
   $sub26$1$i$i = $add$i29$i - $441 | 0;
   $sub$i314$i$i = $sub26$1$i$i + -3 | 0;
   $cmp32$i315$i$i = ($sub26$1$i$i | 0) > 3;
   if ($cmp32$i315$i$i) {
    $i$033$i318$i$i = 0;
    $result$034$i317$i$i = 0.0;
    do {
     $conv$i320$i$i = +HEAPF32[$add$ptr24$1$i$i + ($i$033$i318$i$i << 2) >> 2];
     $conv6$i324$i$i = +HEAPF32[$add$ptr24$1$i$i + (($i$033$i318$i$i | 1) << 2) >> 2];
     $conv14$i329$i$i = +HEAPF32[$add$ptr24$1$i$i + (($i$033$i318$i$i | 2) << 2) >> 2];
     $conv22$i334$i$i = +HEAPF32[$add$ptr24$1$i$i + (($i$033$i318$i$i | 3) << 2) >> 2];
     $result$034$i317$i$i = $result$034$i317$i$i + ($conv$i320$i$i * $conv$i320$i$i + $conv6$i324$i$i * $conv6$i324$i$i + $conv14$i329$i$i * $conv14$i329$i$i + $conv22$i334$i$i * $conv22$i334$i$i);
     $i$033$i318$i$i = $i$033$i318$i$i + 4 | 0;
    } while (($i$033$i318$i$i | 0) < ($sub$i314$i$i | 0));
    $i$0$lcssa$i342$i$i = $sub26$1$i$i & -4;
    $result$0$lcssa$i343$i$i = $result$034$i317$i$i;
   } else {
    $i$0$lcssa$i342$i$i = 0;
    $result$0$lcssa$i343$i$i = 0.0;
   }
   if (($i$0$lcssa$i342$i$i | 0) < ($sub26$1$i$i | 0)) {
    $i$129$i348$i$i = $i$0$lcssa$i342$i$i;
    $result$130$i347$i$i = $result$0$lcssa$i343$i$i;
    while (1) {
     $conv35$i350$i$i = +HEAPF32[$add$ptr24$1$i$i + ($i$129$i348$i$i << 2) >> 2];
     $add39$i352$i$i = $result$130$i347$i$i + $conv35$i350$i$i * $conv35$i350$i$i;
     $i$129$i348$i$i = $i$129$i348$i$i + 1 | 0;
     if (($i$129$i348$i$i | 0) == ($sub26$1$i$i | 0)) {
      $result$1$lcssa$i356$i$i = $add39$i352$i$i;
      break;
     } else $result$130$i347$i$i = $add39$i352$i$i;
    }
   } else $result$1$lcssa$i356$i$i = $result$0$lcssa$i343$i$i;
   $add$ptr31$1$i$i = $add$ptr24$1$i$i + ($add$i29$i << 2) | 0;
   if ($cmp32$i315$i$i) {
    $i$033$i380$i$i = 0;
    $result$034$i379$i$i = 0.0;
    do {
     $conv$i382$i$i = +HEAPF32[$add$ptr31$1$i$i + ($i$033$i380$i$i << 2) >> 2];
     $conv6$i386$i$i = +HEAPF32[$add$ptr31$1$i$i + (($i$033$i380$i$i | 1) << 2) >> 2];
     $conv14$i391$i$i = +HEAPF32[$add$ptr31$1$i$i + (($i$033$i380$i$i | 2) << 2) >> 2];
     $conv22$i396$i$i = +HEAPF32[$add$ptr31$1$i$i + (($i$033$i380$i$i | 3) << 2) >> 2];
     $result$034$i379$i$i = $result$034$i379$i$i + ($conv$i382$i$i * $conv$i382$i$i + $conv6$i386$i$i * $conv6$i386$i$i + $conv14$i391$i$i * $conv14$i391$i$i + $conv22$i396$i$i * $conv22$i396$i$i);
     $i$033$i380$i$i = $i$033$i380$i$i + 4 | 0;
    } while (($i$033$i380$i$i | 0) < ($sub$i314$i$i | 0));
    $i$0$lcssa$i404$i$i = $sub26$1$i$i & -4;
    $result$0$lcssa$i405$i$i = $result$034$i379$i$i;
   } else {
    $i$0$lcssa$i404$i$i = 0;
    $result$0$lcssa$i405$i$i = 0.0;
   }
   if (($i$0$lcssa$i404$i$i | 0) < ($sub26$1$i$i | 0)) {
    $i$129$i410$i$i = $i$0$lcssa$i404$i$i;
    $result$130$i409$i$i = $result$0$lcssa$i405$i$i;
    while (1) {
     $conv35$i412$i$i = +HEAPF32[$add$ptr31$1$i$i + ($i$129$i410$i$i << 2) >> 2];
     $add39$i414$i$i = $result$130$i409$i$i + $conv35$i412$i$i * $conv35$i412$i$i;
     $i$129$i410$i$i = $i$129$i410$i$i + 1 | 0;
     if (($i$129$i410$i$i | 0) == ($sub26$1$i$i | 0)) {
      $result$1$lcssa$i418$i$i = $add39$i414$i$i;
      break;
     } else $result$130$i409$i$i = $add39$i414$i$i;
    }
   } else $result$1$lcssa$i418$i$i = $result$0$lcssa$i405$i$i;
   $conv$1$i$i = $result$1$lcssa$i356$i$i + $result$1$lcssa$i418$i$i;
   if ($res_nrg$1$i$i > $conv$1$i$i) {
    HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] = 2;
    $res_nrg$1$1$i$i = $conv$1$i$i;
   } else if ($conv$i46$i < $conv$1$i$i) {
    label = 499;
    break;
   } else $res_nrg$1$1$i$i = $res_nrg$1$i$i;
   $cmp412$i358$i$i = ($441 | 0) > 0;
   do if ($cmp412$i358$i$i) {
    $i$013$i360$i$i = 0;
    do {
     $conv$i362$i$i = HEAP16[$psEnc + 4500 + ($i$013$i360$i$i << 1) >> 1] | 0;
     HEAP16[$NLSF0_Q15$i$i + ($i$013$i360$i$i << 1) >> 1] = ((HEAPU16[$NLSF_Q15$i + ($i$013$i360$i$i << 1) >> 1] | 0) - $conv$i362$i$i << 16 >> 16 >>> 2) + $conv$i362$i$i;
     $i$013$i360$i$i = $i$013$i360$i$i + 1 | 0;
    } while (($i$013$i360$i$i | 0) != ($441 | 0));
    _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $441);
    if (!$cmp412$i358$i$i) break;
    $i$07$i290$i$i = 0;
    do {
     HEAPF32[$refl_coef$i + ($i$07$i290$i$i << 2) >> 2] = +(HEAP16[$a_fix_Q12$i$i$i + ($i$07$i290$i$i << 1) >> 1] | 0) * .000244140625;
     $i$07$i290$i$i = $i$07$i290$i$i + 1 | 0;
    } while (($i$07$i290$i$i | 0) != ($441 | 0));
   } else _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $441); while (0);
   _silk_LPC_analysis_filter_FLP($Wsig$i, $refl_coef$i, $LPC_in_pre$i, $mul$i32$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $463 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   $add$ptr24$2$i$i = $Wsig$i + ($463 << 2) | 0;
   $sub26$2$i$i = $add$i29$i - $463 | 0;
   $sub$i223$i$i = $sub26$2$i$i + -3 | 0;
   $cmp32$i224$i$i = ($sub26$2$i$i | 0) > 3;
   if ($cmp32$i224$i$i) {
    $i$033$i227$i$i = 0;
    $result$034$i226$i$i = 0.0;
    do {
     $conv$i229$i$i = +HEAPF32[$add$ptr24$2$i$i + ($i$033$i227$i$i << 2) >> 2];
     $conv6$i233$i$i = +HEAPF32[$add$ptr24$2$i$i + (($i$033$i227$i$i | 1) << 2) >> 2];
     $conv14$i238$i$i = +HEAPF32[$add$ptr24$2$i$i + (($i$033$i227$i$i | 2) << 2) >> 2];
     $conv22$i243$i$i = +HEAPF32[$add$ptr24$2$i$i + (($i$033$i227$i$i | 3) << 2) >> 2];
     $result$034$i226$i$i = $result$034$i226$i$i + ($conv$i229$i$i * $conv$i229$i$i + $conv6$i233$i$i * $conv6$i233$i$i + $conv14$i238$i$i * $conv14$i238$i$i + $conv22$i243$i$i * $conv22$i243$i$i);
     $i$033$i227$i$i = $i$033$i227$i$i + 4 | 0;
    } while (($i$033$i227$i$i | 0) < ($sub$i223$i$i | 0));
    $i$0$lcssa$i251$i$i = $sub26$2$i$i & -4;
    $result$0$lcssa$i252$i$i = $result$034$i226$i$i;
   } else {
    $i$0$lcssa$i251$i$i = 0;
    $result$0$lcssa$i252$i$i = 0.0;
   }
   if (($i$0$lcssa$i251$i$i | 0) < ($sub26$2$i$i | 0)) {
    $i$129$i257$i$i = $i$0$lcssa$i251$i$i;
    $result$130$i256$i$i = $result$0$lcssa$i252$i$i;
    while (1) {
     $conv35$i259$i$i = +HEAPF32[$add$ptr24$2$i$i + ($i$129$i257$i$i << 2) >> 2];
     $add39$i261$i$i = $result$130$i256$i$i + $conv35$i259$i$i * $conv35$i259$i$i;
     $i$129$i257$i$i = $i$129$i257$i$i + 1 | 0;
     if (($i$129$i257$i$i | 0) == ($sub26$2$i$i | 0)) {
      $result$1$lcssa$i265$i$i = $add39$i261$i$i;
      break;
     } else $result$130$i256$i$i = $add39$i261$i$i;
    }
   } else $result$1$lcssa$i265$i$i = $result$0$lcssa$i252$i$i;
   $add$ptr31$2$i$i = $add$ptr24$2$i$i + ($add$i29$i << 2) | 0;
   if ($cmp32$i224$i$i) {
    $i$033$i183$i$i = 0;
    $result$034$i182$i$i = 0.0;
    do {
     $conv$i185$i$i = +HEAPF32[$add$ptr31$2$i$i + ($i$033$i183$i$i << 2) >> 2];
     $conv6$i189$i$i = +HEAPF32[$add$ptr31$2$i$i + (($i$033$i183$i$i | 1) << 2) >> 2];
     $conv14$i194$i$i = +HEAPF32[$add$ptr31$2$i$i + (($i$033$i183$i$i | 2) << 2) >> 2];
     $conv22$i199$i$i = +HEAPF32[$add$ptr31$2$i$i + (($i$033$i183$i$i | 3) << 2) >> 2];
     $result$034$i182$i$i = $result$034$i182$i$i + ($conv$i185$i$i * $conv$i185$i$i + $conv6$i189$i$i * $conv6$i189$i$i + $conv14$i194$i$i * $conv14$i194$i$i + $conv22$i199$i$i * $conv22$i199$i$i);
     $i$033$i183$i$i = $i$033$i183$i$i + 4 | 0;
    } while (($i$033$i183$i$i | 0) < ($sub$i223$i$i | 0));
    $i$0$lcssa$i207$i$i = $sub26$2$i$i & -4;
    $result$0$lcssa$i208$i$i = $result$034$i182$i$i;
   } else {
    $i$0$lcssa$i207$i$i = 0;
    $result$0$lcssa$i208$i$i = 0.0;
   }
   if (($i$0$lcssa$i207$i$i | 0) < ($sub26$2$i$i | 0)) {
    $i$129$i213$i$i = $i$0$lcssa$i207$i$i;
    $result$130$i212$i$i = $result$0$lcssa$i208$i$i;
    while (1) {
     $conv35$i215$i$i = +HEAPF32[$add$ptr31$2$i$i + ($i$129$i213$i$i << 2) >> 2];
     $add39$i217$i$i = $result$130$i212$i$i + $conv35$i215$i$i * $conv35$i215$i$i;
     $i$129$i213$i$i = $i$129$i213$i$i + 1 | 0;
     if (($i$129$i213$i$i | 0) == ($sub26$2$i$i | 0)) {
      $result$1$lcssa$i221$i$i = $add39$i217$i$i;
      break;
     } else $result$130$i212$i$i = $add39$i217$i$i;
    }
   } else $result$1$lcssa$i221$i$i = $result$0$lcssa$i208$i$i;
   $conv$2$i$i = $result$1$lcssa$i265$i$i + $result$1$lcssa$i221$i$i;
   if ($res_nrg$1$1$i$i > $conv$2$i$i) {
    HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] = 1;
    $res_nrg$1$2$i$i = $conv$2$i$i;
   } else if ($conv$1$i$i < $conv$2$i$i) {
    label = 499;
    break;
   } else $res_nrg$1$2$i$i = $res_nrg$1$1$i$i;
   $cmp412$i163$i$i = ($463 | 0) > 0;
   do if ($cmp412$i163$i$i) {
    $i$013$i165$i$i = 0;
    do {
     HEAP16[$NLSF0_Q15$i$i + ($i$013$i165$i$i << 1) >> 1] = HEAP16[$psEnc + 4500 + ($i$013$i165$i$i << 1) >> 1] | 0;
     $i$013$i165$i$i = $i$013$i165$i$i + 1 | 0;
    } while (($i$013$i165$i$i | 0) != ($463 | 0));
    _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $463);
    if (!$cmp412$i163$i$i) break;
    $i$07$i109$i$i = 0;
    do {
     HEAPF32[$refl_coef$i + ($i$07$i109$i$i << 2) >> 2] = +(HEAP16[$a_fix_Q12$i$i$i + ($i$07$i109$i$i << 1) >> 1] | 0) * .000244140625;
     $i$07$i109$i$i = $i$07$i109$i$i + 1 | 0;
    } while (($i$07$i109$i$i | 0) != ($463 | 0));
   } else _silk_NLSF2A($a_fix_Q12$i$i$i, $NLSF0_Q15$i$i, $463); while (0);
   _silk_LPC_analysis_filter_FLP($Wsig$i, $refl_coef$i, $LPC_in_pre$i, $mul$i32$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $479 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   $add$ptr24$3$i$i = $Wsig$i + ($479 << 2) | 0;
   $sub26$3$i$i = $add$i29$i - $479 | 0;
   $sub$i9$i$i = $sub26$3$i$i + -3 | 0;
   $cmp32$i10$i$i = ($sub26$3$i$i | 0) > 3;
   if ($cmp32$i10$i$i) {
    $i$033$i13$i$i = 0;
    $result$034$i12$i$i = 0.0;
    do {
     $conv$i15$i$i = +HEAPF32[$add$ptr24$3$i$i + ($i$033$i13$i$i << 2) >> 2];
     $conv6$i19$i$i = +HEAPF32[$add$ptr24$3$i$i + (($i$033$i13$i$i | 1) << 2) >> 2];
     $conv14$i24$i$i314 = +HEAPF32[$add$ptr24$3$i$i + (($i$033$i13$i$i | 2) << 2) >> 2];
     $conv22$i29$i$i = +HEAPF32[$add$ptr24$3$i$i + (($i$033$i13$i$i | 3) << 2) >> 2];
     $result$034$i12$i$i = $result$034$i12$i$i + ($conv$i15$i$i * $conv$i15$i$i + $conv6$i19$i$i * $conv6$i19$i$i + $conv14$i24$i$i314 * $conv14$i24$i$i314 + $conv22$i29$i$i * $conv22$i29$i$i);
     $i$033$i13$i$i = $i$033$i13$i$i + 4 | 0;
    } while (($i$033$i13$i$i | 0) < ($sub$i9$i$i | 0));
    $i$0$lcssa$i37$i$i = $sub26$3$i$i & -4;
    $result$0$lcssa$i38$i$i = $result$034$i12$i$i;
   } else {
    $i$0$lcssa$i37$i$i = 0;
    $result$0$lcssa$i38$i$i = 0.0;
   }
   if (($i$0$lcssa$i37$i$i | 0) < ($sub26$3$i$i | 0)) {
    $i$129$i43$i$i = $i$0$lcssa$i37$i$i;
    $result$130$i42$i$i = $result$0$lcssa$i38$i$i;
    while (1) {
     $conv35$i45$i$i = +HEAPF32[$add$ptr24$3$i$i + ($i$129$i43$i$i << 2) >> 2];
     $add39$i47$i$i = $result$130$i42$i$i + $conv35$i45$i$i * $conv35$i45$i$i;
     $i$129$i43$i$i = $i$129$i43$i$i + 1 | 0;
     if (($i$129$i43$i$i | 0) == ($sub26$3$i$i | 0)) {
      $result$1$lcssa$i51$i$i = $add39$i47$i$i;
      break;
     } else $result$130$i42$i$i = $add39$i47$i$i;
    }
   } else $result$1$lcssa$i51$i$i = $result$0$lcssa$i38$i$i;
   $add$ptr31$3$i$i = $add$ptr24$3$i$i + ($add$i29$i << 2) | 0;
   if ($cmp32$i10$i$i) {
    $i$033$i$i52$i = 0;
    $result$034$i$i51$i = 0.0;
    do {
     $conv$i3$i$i = +HEAPF32[$add$ptr31$3$i$i + ($i$033$i$i52$i << 2) >> 2];
     $conv6$i$i54$i = +HEAPF32[$add$ptr31$3$i$i + (($i$033$i$i52$i | 1) << 2) >> 2];
     $conv14$i$i59$i = +HEAPF32[$add$ptr31$3$i$i + (($i$033$i$i52$i | 2) << 2) >> 2];
     $conv22$i$i64$i = +HEAPF32[$add$ptr31$3$i$i + (($i$033$i$i52$i | 3) << 2) >> 2];
     $result$034$i$i51$i = $result$034$i$i51$i + ($conv$i3$i$i * $conv$i3$i$i + $conv6$i$i54$i * $conv6$i$i54$i + $conv14$i$i59$i * $conv14$i$i59$i + $conv22$i$i64$i * $conv22$i$i64$i);
     $i$033$i$i52$i = $i$033$i$i52$i + 4 | 0;
    } while (($i$033$i$i52$i | 0) < ($sub$i9$i$i | 0));
    $i$0$lcssa$i$i72$i = $sub26$3$i$i & -4;
    $result$0$lcssa$i$i73$i = $result$034$i$i51$i;
   } else {
    $i$0$lcssa$i$i72$i = 0;
    $result$0$lcssa$i$i73$i = 0.0;
   }
   if (($i$0$lcssa$i$i72$i | 0) < ($sub26$3$i$i | 0)) {
    $i$129$i$i78$i = $i$0$lcssa$i$i72$i;
    $result$130$i$i77$i = $result$0$lcssa$i$i73$i;
    while (1) {
     $conv35$i$i80$i = +HEAPF32[$add$ptr31$3$i$i + ($i$129$i$i78$i << 2) >> 2];
     $add39$i$i82$i = $result$130$i$i77$i + $conv35$i$i80$i * $conv35$i$i80$i;
     $i$129$i$i78$i = $i$129$i$i78$i + 1 | 0;
     if (($i$129$i$i78$i | 0) == ($sub26$3$i$i | 0)) {
      $result$1$lcssa$i$i84$i = $add39$i$i82$i;
      break;
     } else $result$130$i$i77$i = $add39$i$i82$i;
    }
   } else $result$1$lcssa$i$i84$i = $result$0$lcssa$i$i73$i;
   if (!($res_nrg$1$2$i$i > $result$1$lcssa$i51$i$i + $result$1$lcssa$i$i84$i)) {
    label = 499;
    break;
   }
   HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] = 0;
   $650 = 0;
   label = 502;
  } while (0);
  do if ((label | 0) == 499) {
   $$pr52$i$i = HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] | 0;
   if ($$pr52$i$i << 24 >> 24 != 4) {
    $650 = $$pr52$i$i;
    label = 502;
    break;
   }
   _silk_A2NLSF_FLP($NLSF_Q15$i, $A$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
   $$pr$i$i = HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] | 0;
   if ($$pr$i$i << 24 >> 24 != 4) {
    $650 = $$pr$i$i;
    label = 502;
    break;
   }
   $492 = HEAP32[$useInterpolatedNLSFs$i$i >> 2] | 0;
   $493 = 4;
  } while (0);
  do if ((label | 0) == 502) {
   $455 = HEAP32[$useInterpolatedNLSFs$i$i >> 2] | 0;
   if (!$455) _celt_fatal(53769, 53934, 103);
   if (HEAP32[$first_frame_after_reset$i297 >> 2] | 0) _celt_fatal(53769, 53934, 103);
   if ((HEAP32[$nb_subfr$i169 >> 2] | 0) == 4) {
    $492 = $455;
    $493 = $650;
    break;
   }
   _celt_fatal(53769, 53934, 103);
  } while (0);
  $arraydecay102$i = $psEnc + 4500 | 0;
  if (!(($492 | 0) == 1 | $493 << 24 >> 24 == 4)) _celt_fatal(52250, 52353, 51);
  $conv4$i$i$i = HEAP32[$speech_activity_Q8229$i >> 2] << 16 >> 16;
  $add9$i$i$i318 = (Math_imul($conv4$i$i$i, -5) | 0) + 3146 + ($conv4$i$i$i * 59246 >> 16) | 0;
  $NLSF_mu_Q20$0$i$i$i = ((HEAP32[$nb_subfr$i169 >> 2] | 0) == 2 ? $add9$i$i$i318 >> 1 : 0) + $add9$i$i$i318 | 0;
  if (($NLSF_mu_Q20$0$i$i$i | 0) <= 0) _celt_fatal(52374, 52353, 63);
  _silk_NLSF_VQ_weights_laroia($NLSF0_Q15$i$i, $NLSF_Q15$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
  do if ((HEAP32[$useInterpolatedNLSFs$i$i >> 2] | 0) == 1) {
   $498 = HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] | 0;
   if ($498 << 24 >> 24 >= 4) {
    $651 = 0;
    break;
   }
   $conv32$i$i$i = $498 << 24 >> 24;
   $499 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   if ($498 << 24 >> 24 <= -1) _celt_fatal(51483, 51515, 45);
   if (($499 | 0) > 0) {
    $i$013$i$i$i$i = 0;
    do {
     $conv$i$i$i95$i = HEAP16[$psEnc + 4500 + ($i$013$i$i$i$i << 1) >> 1] | 0;
     HEAP16[$a_fix_Q12$i$i$i + ($i$013$i$i$i$i << 1) >> 1] = ((Math_imul((HEAPU16[$NLSF_Q15$i + ($i$013$i$i$i$i << 1) >> 1] | 0) - $conv$i$i$i95$i << 16 >> 16, $conv32$i$i$i) | 0) >>> 2) + $conv$i$i$i95$i;
     $i$013$i$i$i$i = $i$013$i$i$i$i + 1 | 0;
    } while (($i$013$i$i$i$i | 0) != ($499 | 0));
   }
   _silk_NLSF_VQ_weights_laroia($pGains_Q16$i, $a_fix_Q12$i$i$i, $499);
   $conv40$i$i$i = HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] | 0;
   $504 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   if (($504 | 0) <= 0) {
    $651 = 1;
    break;
   }
   $conv54$i$i$i = (Math_imul($conv40$i$i$i << 27, $conv40$i$i$i) | 0) >> 16;
   $i$048$i$i$i = 0;
   do {
    $arrayidx$i$i103$i = $NLSF0_Q15$i$i + ($i$048$i$i$i << 1) | 0;
    HEAP16[$arrayidx$i$i103$i >> 1] = ((Math_imul($conv54$i$i$i, HEAP16[$pGains_Q16$i + ($i$048$i$i$i << 1) >> 1] | 0) | 0) >>> 16) + (HEAP16[$arrayidx$i$i103$i >> 1] >> 1);
    $i$048$i$i$i = $i$048$i$i$i + 1 | 0;
   } while (($i$048$i$i$i | 0) != ($504 | 0));
   $651 = 1;
  } else $651 = 0; while (0);
  _silk_NLSF_encode($psEnc + 4744 | 0, $NLSF_Q15$i, HEAP32[$psEnc + 4692 >> 2] | 0, $NLSF0_Q15$i$i, $NLSF_mu_Q20$0$i$i$i, HEAP32[$psEnc + 4660 >> 2] | 0, HEAP8[$signalType$i >> 0] | 0);
  $arraydecay67$i$i$i = $PredCoef_Q12$i$i + 32 | 0;
  _silk_NLSF2A($arraydecay67$i$i$i, $NLSF_Q15$i, HEAP32[$predictLPCOrder$i$i >> 2] | 0);
  do if ($651) {
   $512 = HEAP8[$NLSFInterpCoef_Q2$i$i >> 0] | 0;
   $conv74$i$i$i = $512 << 24 >> 24;
   $513 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   if ($512 << 24 >> 24 <= -1) _celt_fatal(51483, 51515, 45);
   if ($512 << 24 >> 24 >= 5) _celt_fatal(51534, 51515, 46);
   if (($513 | 0) > 0) {
    $i$013$i11$i$i$i = 0;
    do {
     $conv$i13$i$i$i = HEAP16[$psEnc + 4500 + ($i$013$i11$i$i$i << 1) >> 1] | 0;
     HEAP16[$a_fix_Q12$i$i$i + ($i$013$i11$i$i$i << 1) >> 1] = ((Math_imul((HEAPU16[$NLSF_Q15$i + ($i$013$i11$i$i$i << 1) >> 1] | 0) - $conv$i13$i$i$i << 16 >> 16, $conv74$i$i$i) | 0) >>> 2) + $conv$i13$i$i$i;
     $i$013$i11$i$i$i = $i$013$i11$i$i$i + 1 | 0;
    } while (($i$013$i11$i$i$i | 0) != ($513 | 0));
   }
   _silk_NLSF2A($PredCoef_Q12$i$i, $a_fix_Q12$i$i$i, $513);
   $518 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
  } else {
   $517 = HEAP32[$predictLPCOrder$i$i >> 2] | 0;
   if (($517 | 0) < 17) {
    _memcpy($PredCoef_Q12$i$i | 0, $arraydecay67$i$i$i | 0, $517 << 1 | 0) | 0;
    $518 = $517;
    break;
   } else _celt_fatal(52408, 52353, 104);
  } while (0);
  if (($518 | 0) > 0) {
   $i$010$us$i$i = 0;
   do {
    HEAPF32[$sEncCtrl + 16 + ($i$010$us$i$i << 2) >> 2] = +(HEAP16[$PredCoef_Q12$i$i + ($i$010$us$i$i << 1) >> 1] | 0) * .000244140625;
    $i$010$us$i$i = $i$010$us$i$i + 1 | 0;
   } while (($i$010$us$i$i | 0) != ($518 | 0));
   $i$010$us$1$i$i = 0;
   do {
    HEAPF32[$sEncCtrl + 80 + ($i$010$us$1$i$i << 2) >> 2] = +(HEAP16[$PredCoef_Q12$i$i + 32 + ($i$010$us$1$i$i << 1) >> 1] | 0) * .000244140625;
    $i$010$us$1$i$i = $i$010$us$1$i$i + 1 | 0;
   } while (($i$010$us$1$i$i | 0) != ($518 | 0));
  }
  $arraydecay103$i = $sEncCtrl + 712 | 0;
  $521 = HEAP32[$subfr_length1$i$i >> 2] | 0;
  $522 = HEAP32[$nb_subfr$i169 >> 2] | 0;
  $add$ptr$i110$i = $pGains_Q16$i + ($518 << 2) | 0;
  $add$i111$i = $518 + $521 | 0;
  $mul4$i$i330 = $add$i111$i << 1;
  _silk_LPC_analysis_filter_FLP($pGains_Q16$i, $sEncCtrl + 16 | 0, $LPC_in_pre$i, $mul4$i$i330, $518);
  $523 = +HEAPF32[$sEncCtrl >> 2];
  $conv$i112$i = $523 * $523;
  $sub$i$i113$i = $521 + -3 | 0;
  $cmp32$i$i114$i = ($521 | 0) > 3;
  if ($cmp32$i$i114$i) {
   $i$033$i$i117$i = 0;
   $result$034$i$i116$i = 0.0;
   do {
    $conv$i$i119$i = +HEAPF32[$add$ptr$i110$i + ($i$033$i$i117$i << 2) >> 2];
    $conv6$i$i123$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i$i117$i | 1) << 2) >> 2];
    $conv14$i$i128$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i$i117$i | 2) << 2) >> 2];
    $conv22$i$i133$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i$i117$i | 3) << 2) >> 2];
    $result$034$i$i116$i = $result$034$i$i116$i + ($conv$i$i119$i * $conv$i$i119$i + $conv6$i$i123$i * $conv6$i$i123$i + $conv14$i$i128$i * $conv14$i$i128$i + $conv22$i$i133$i * $conv22$i$i133$i);
    $i$033$i$i117$i = $i$033$i$i117$i + 4 | 0;
   } while (($i$033$i$i117$i | 0) < ($sub$i$i113$i | 0));
   $i$0$lcssa$i$i141$i = $521 & -4;
   $result$0$lcssa$i$i142$i = $result$034$i$i116$i;
  } else {
   $i$0$lcssa$i$i141$i = 0;
   $result$0$lcssa$i$i142$i = 0.0;
  }
  if (($i$0$lcssa$i$i141$i | 0) < ($521 | 0)) {
   $i$129$i$i147$i = $i$0$lcssa$i$i141$i;
   $result$130$i$i146$i = $result$0$lcssa$i$i142$i;
   while (1) {
    $conv35$i$i149$i = +HEAPF32[$add$ptr$i110$i + ($i$129$i$i147$i << 2) >> 2];
    $add39$i$i151$i = $result$130$i$i146$i + $conv35$i$i149$i * $conv35$i$i149$i;
    $i$129$i$i147$i = $i$129$i$i147$i + 1 | 0;
    if (($i$129$i$i147$i | 0) == ($521 | 0)) {
     $result$1$lcssa$i$i155$i = $add39$i$i151$i;
     break;
    } else $result$130$i$i146$i = $add39$i$i151$i;
   }
  } else $result$1$lcssa$i$i155$i = $result$0$lcssa$i$i142$i;
  HEAPF32[$arraydecay103$i >> 2] = $result$1$lcssa$i$i155$i * $conv$i112$i;
  $530 = +HEAPF32[$sEncCtrl + 4 >> 2];
  $conv16$i$i = $530 * $530;
  $add$ptr18$i$i = $add$ptr$i110$i + ($add$i111$i << 2) | 0;
  if ($cmp32$i$i114$i) {
   $i$033$i93$i$i = 0;
   $result$034$i92$i$i = 0.0;
   do {
    $conv$i95$i$i = +HEAPF32[$add$ptr18$i$i + ($i$033$i93$i$i << 2) >> 2];
    $conv6$i99$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i93$i$i | 1) << 2) >> 2];
    $conv14$i104$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i93$i$i | 2) << 2) >> 2];
    $conv22$i109$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i93$i$i | 3) << 2) >> 2];
    $result$034$i92$i$i = $result$034$i92$i$i + ($conv$i95$i$i * $conv$i95$i$i + $conv6$i99$i$i * $conv6$i99$i$i + $conv14$i104$i$i * $conv14$i104$i$i + $conv22$i109$i$i * $conv22$i109$i$i);
    $i$033$i93$i$i = $i$033$i93$i$i + 4 | 0;
   } while (($i$033$i93$i$i | 0) < ($sub$i$i113$i | 0));
   $i$0$lcssa$i117$i$i = $521 & -4;
   $result$0$lcssa$i118$i$i = $result$034$i92$i$i;
  } else {
   $i$0$lcssa$i117$i$i = 0;
   $result$0$lcssa$i118$i$i = 0.0;
  }
  if (($i$0$lcssa$i117$i$i | 0) < ($521 | 0)) {
   $i$129$i123$i$i = $i$0$lcssa$i117$i$i;
   $result$130$i122$i$i = $result$0$lcssa$i118$i$i;
   while (1) {
    $conv35$i125$i$i = +HEAPF32[$add$ptr18$i$i + ($i$129$i123$i$i << 2) >> 2];
    $add39$i127$i$i = $result$130$i122$i$i + $conv35$i125$i$i * $conv35$i125$i$i;
    $i$129$i123$i$i = $i$129$i123$i$i + 1 | 0;
    if (($i$129$i123$i$i | 0) == ($521 | 0)) {
     $result$1$lcssa$i131$i$i = $add39$i127$i$i;
     break;
    } else $result$130$i122$i$i = $add39$i127$i$i;
   }
  } else $result$1$lcssa$i131$i$i = $result$0$lcssa$i118$i$i;
  HEAPF32[$sEncCtrl + 716 >> 2] = $result$1$lcssa$i131$i$i * $conv16$i$i;
  if (($522 | 0) == 4) {
   _silk_LPC_analysis_filter_FLP($pGains_Q16$i, $sEncCtrl + 80 | 0, $LPC_in_pre$i + ($mul4$i$i330 << 2) | 0, $mul4$i$i330, $518);
   $537 = +HEAPF32[$sEncCtrl + 8 >> 2];
   $conv33$i$i = $537 * $537;
   if ($cmp32$i$i114$i) {
    $i$033$i49$i$i = 0;
    $result$034$i48$i$i = 0.0;
    do {
     $conv$i51$i$i = +HEAPF32[$add$ptr$i110$i + ($i$033$i49$i$i << 2) >> 2];
     $conv6$i55$i$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i49$i$i | 1) << 2) >> 2];
     $conv14$i60$i$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i49$i$i | 2) << 2) >> 2];
     $conv22$i65$i$i = +HEAPF32[$add$ptr$i110$i + (($i$033$i49$i$i | 3) << 2) >> 2];
     $result$034$i48$i$i = $result$034$i48$i$i + ($conv$i51$i$i * $conv$i51$i$i + $conv6$i55$i$i * $conv6$i55$i$i + $conv14$i60$i$i * $conv14$i60$i$i + $conv22$i65$i$i * $conv22$i65$i$i);
     $i$033$i49$i$i = $i$033$i49$i$i + 4 | 0;
    } while (($i$033$i49$i$i | 0) < ($sub$i$i113$i | 0));
    $i$0$lcssa$i73$i$i = $521 & -4;
    $result$0$lcssa$i74$i$i = $result$034$i48$i$i;
   } else {
    $i$0$lcssa$i73$i$i = 0;
    $result$0$lcssa$i74$i$i = 0.0;
   }
   if (($i$0$lcssa$i73$i$i | 0) < ($521 | 0)) {
    $i$129$i79$i$i = $i$0$lcssa$i73$i$i;
    $result$130$i78$i$i = $result$0$lcssa$i74$i$i;
    while (1) {
     $conv35$i81$i$i = +HEAPF32[$add$ptr$i110$i + ($i$129$i79$i$i << 2) >> 2];
     $add39$i83$i$i = $result$130$i78$i$i + $conv35$i81$i$i * $conv35$i81$i$i;
     $i$129$i79$i$i = $i$129$i79$i$i + 1 | 0;
     if (($i$129$i79$i$i | 0) == ($521 | 0)) {
      $result$1$lcssa$i87$i$i = $add39$i83$i$i;
      break;
     } else $result$130$i78$i$i = $add39$i83$i$i;
    }
   } else $result$1$lcssa$i87$i$i = $result$0$lcssa$i74$i$i;
   HEAPF32[$sEncCtrl + 720 >> 2] = $result$1$lcssa$i87$i$i * $conv33$i$i;
   $544 = +HEAPF32[$sEncCtrl + 12 >> 2];
   $conv43$i$i = $544 * $544;
   if ($cmp32$i$i114$i) {
    $i$033$i5$i$i = 0;
    $result$034$i4$i$i = 0.0;
    do {
     $conv$i7$i$i = +HEAPF32[$add$ptr18$i$i + ($i$033$i5$i$i << 2) >> 2];
     $conv6$i11$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i5$i$i | 1) << 2) >> 2];
     $conv14$i16$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i5$i$i | 2) << 2) >> 2];
     $conv22$i21$i$i = +HEAPF32[$add$ptr18$i$i + (($i$033$i5$i$i | 3) << 2) >> 2];
     $result$034$i4$i$i = $result$034$i4$i$i + ($conv$i7$i$i * $conv$i7$i$i + $conv6$i11$i$i * $conv6$i11$i$i + $conv14$i16$i$i * $conv14$i16$i$i + $conv22$i21$i$i * $conv22$i21$i$i);
     $i$033$i5$i$i = $i$033$i5$i$i + 4 | 0;
    } while (($i$033$i5$i$i | 0) < ($sub$i$i113$i | 0));
    $i$0$lcssa$i29$i$i = $521 & -4;
    $result$0$lcssa$i30$i$i = $result$034$i4$i$i;
   } else {
    $i$0$lcssa$i29$i$i = 0;
    $result$0$lcssa$i30$i$i = 0.0;
   }
   if (($i$0$lcssa$i29$i$i | 0) < ($521 | 0)) {
    $i$129$i35$i$i = $i$0$lcssa$i29$i$i;
    $result$130$i34$i$i = $result$0$lcssa$i30$i$i;
    while (1) {
     $conv35$i37$i$i = +HEAPF32[$add$ptr18$i$i + ($i$129$i35$i$i << 2) >> 2];
     $add39$i39$i$i = $result$130$i34$i$i + $conv35$i37$i$i * $conv35$i37$i$i;
     $i$129$i35$i$i = $i$129$i35$i$i + 1 | 0;
     if (($i$129$i35$i$i | 0) == ($521 | 0)) {
      $result$1$lcssa$i43$i$i = $add39$i39$i$i;
      break;
     } else $result$130$i34$i$i = $add39$i39$i$i;
    }
   } else $result$1$lcssa$i43$i$i = $result$0$lcssa$i30$i$i;
   HEAPF32[$sEncCtrl + 724 >> 2] = $result$1$lcssa$i43$i$i * $conv43$i$i;
  };
  HEAP32[$arraydecay102$i >> 2] = HEAP32[$NLSF_Q15$i >> 2];
  HEAP32[$arraydecay102$i + 4 >> 2] = HEAP32[$NLSF_Q15$i + 4 >> 2];
  HEAP32[$arraydecay102$i + 8 >> 2] = HEAP32[$NLSF_Q15$i + 8 >> 2];
  HEAP32[$arraydecay102$i + 12 >> 2] = HEAP32[$NLSF_Q15$i + 12 >> 2];
  HEAP32[$arraydecay102$i + 16 >> 2] = HEAP32[$NLSF_Q15$i + 16 >> 2];
  HEAP32[$arraydecay102$i + 20 >> 2] = HEAP32[$NLSF_Q15$i + 20 >> 2];
  HEAP32[$arraydecay102$i + 24 >> 2] = HEAP32[$NLSF_Q15$i + 24 >> 2];
  HEAP32[$arraydecay102$i + 28 >> 2] = HEAP32[$NLSF_Q15$i + 28 >> 2];
  do if ((HEAP8[$signalType$i >> 0] | 0) == 2) {
   $sub3$i = 1.0 - 1.0 / (+Math_exp(+-((+HEAPF32[$sEncCtrl + 708 >> 2] + -12.0) * .25)) + 1.0) * .5;
   $554 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   if (($554 | 0) <= 0) {
    $558 = $554;
    break;
   }
   $k$065$i = 0;
   do {
    $arrayidx$i354 = $sEncCtrl + ($k$065$i << 2) | 0;
    HEAPF32[$arrayidx$i354 >> 2] = $sub3$i * +HEAPF32[$arrayidx$i354 >> 2];
    $k$065$i = $k$065$i + 1 | 0;
   } while (($k$065$i | 0) != ($554 | 0));
   $558 = $554;
  } else $558 = HEAP32[$nb_subfr$i169 >> 2] | 0; while (0);
  $exp2$i360 = +_llvm_exp2_f64(+((21.0 - +(HEAP32[$SNR_dB_Q7$i >> 2] | 0) * .0078125) * .33000001311302185));
  $conv16$i = $exp2$i360 / +(HEAP32[$subfr_length1$i$i >> 2] | 0);
  if (($558 | 0) > 0) {
   $k$162$i = 0;
   do {
    $arrayidx24$i = $sEncCtrl + ($k$162$i << 2) | 0;
    $559 = +HEAPF32[$arrayidx24$i >> 2];
    $561 = +Math_sqrt(+($559 * $559 + +HEAPF32[$sEncCtrl + 712 + ($k$162$i << 2) >> 2] * $conv16$i));
    HEAPF32[$arrayidx24$i >> 2] = $561 < 32767.0 ? $561 : 32767.0;
    $k$162$i = $k$162$i + 1 | 0;
   } while (($k$162$i | 0) != ($558 | 0));
   $k$260$i = 0;
   do {
    HEAP32[$pGains_Q16$i + ($k$260$i << 2) >> 2] = ~~(+HEAPF32[$sEncCtrl + ($k$260$i << 2) >> 2] * 65536.0);
    $k$260$i = $k$260$i + 1 | 0;
   } while (($k$260$i | 0) != ($558 | 0));
  }
  _memcpy($sEncCtrl + 728 | 0, $pGains_Q16$i | 0, $558 << 2 | 0) | 0;
  $LastGainIndex$i371 = $psEnc + 7168 | 0;
  $lastGainIndexPrev$i = $sEncCtrl + 744 | 0;
  HEAP8[$lastGainIndexPrev$i >> 0] = HEAP8[$LastGainIndex$i371 >> 0] | 0;
  $arraydecay57$i = $psEnc + 4736 | 0;
  $cmp60$i = ($condCoding | 0) == 2;
  $conv61$i372 = $cmp60$i & 1;
  _silk_gains_quant($arraydecay57$i, $pGains_Q16$i, $LastGainIndex$i371, $conv61$i372, HEAP32[$nb_subfr$i169 >> 2] | 0);
  $565 = HEAP32[$nb_subfr$i169 >> 2] | 0;
  if (($565 | 0) > 0) {
   $k$358$i = 0;
   do {
    HEAPF32[$sEncCtrl + ($k$358$i << 2) >> 2] = +(HEAP32[$pGains_Q16$i + ($k$358$i << 2) >> 2] | 0) * .0000152587890625;
    $k$358$i = $k$358$i + 1 | 0;
   } while (($k$358$i | 0) != ($565 | 0));
  }
  $567 = HEAP8[$signalType$i >> 0] | 0;
  do if ($567 << 24 >> 24 == 2) {
   $quantOffsetType$i375 = $psEnc + 4766 | 0;
   if (+HEAPF32[$sEncCtrl + 708 >> 2] + +(HEAP32[$psEnc + 4712 >> 2] | 0) * .000030517578125 > 1.0) {
    HEAP8[$quantOffsetType$i375 >> 0] = 0;
    $570 = 0;
    break;
   } else {
    HEAP8[$quantOffsetType$i375 >> 0] = 1;
    $570 = 1;
    break;
   }
  } else $570 = HEAP8[$psEnc + 4766 >> 0] | 0; while (0);
  $573 = HEAP32[$speech_activity_Q8229$i >> 2] | 0;
  $Lambda$i = $sEncCtrl + 692 | 0;
  HEAPF32[$Lambda$i >> 2] = +(HEAP16[47584 + ($567 << 24 >> 24 >> 1 << 2) + ($570 << 24 >> 24 << 1) >> 1] | 0) * .0009765625 * .800000011920929 + (1.2000000476837158 - +(HEAP32[$psEnc + 4628 >> 2] | 0) * .05000000074505806 + +($573 | 0) * -.20000000298023224 * .00390625 - +HEAPF32[$input_quality$i >> 2] * .10000000149011612 - +HEAPF32[$coding_quality$i >> 2] * .20000000298023224);
  $nFramesEncoded$i = $psEnc + 5748 | 0;
  $576 = HEAP32[$nFramesEncoded$i >> 2] | 0;
  $arrayidx$i300 = $psEnc + 6100 + ($576 * 36 | 0) | 0;
  if ((HEAP32[$psEnc + 6092 >> 2] | 0) != 0 & ($573 | 0) > 77) {
   HEAP32[$psEnc + 4724 + ($576 << 2) >> 2] = 1;
   _memcpy($a_fix_Q12$i$i$i | 0, $psEnc + 148 | 0, 4352) | 0;
   dest = $arrayidx$i300;
   src = $arraydecay57$i;
   stop = dest + 36 | 0;
   do {
    HEAP16[dest >> 1] = HEAP16[src >> 1] | 0;
    dest = dest + 2 | 0;
    src = src + 2 | 0;
   } while ((dest | 0) < (stop | 0));
   $578 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   _memcpy($PredCoef_Q12$i$i | 0, $sEncCtrl | 0, $578 << 2 | 0) | 0;
   $579 = HEAP32[$nFramesEncoded$i >> 2] | 0;
   do if (!$579) label = 638; else {
    if (!(HEAP32[$psEnc + 4724 + ($579 + -1 << 2) >> 2] | 0)) {
     label = 638;
     break;
    }
    $584 = $578;
    $LBRRprevLastGainIndex36$pre$phi$iZ2D = $psEnc + 4540 | 0;
   } while (0);
   if ((label | 0) == 638) {
    $LBRRprevLastGainIndex$i = $psEnc + 4540 | 0;
    HEAP8[$LBRRprevLastGainIndex$i >> 0] = HEAP8[$LastGainIndex$i371 >> 0] | 0;
    $conv28$i = (HEAP32[$psEnc + 6096 >> 2] | 0) + (HEAPU8[$arrayidx$i300 >> 0] | 0) << 24 >> 24;
    HEAP8[$arrayidx$i300 >> 0] = ($conv28$i | 0) < 63 ? $conv28$i : 63;
    $584 = HEAP32[$nb_subfr$i169 >> 2] | 0;
    $LBRRprevLastGainIndex36$pre$phi$iZ2D = $LBRRprevLastGainIndex$i;
   }
   $cmp23$i = ($584 | 0) > 0;
   do if ($cmp23$i) {
    $k$024$i = 0;
    do {
     $conv$i383 = HEAP8[$psEnc + 6100 + ($576 * 36 | 0) + $k$024$i >> 0] | 0;
     do if (!($k$024$i | $conv61$i372)) {
      $sub$i385 = (HEAP8[$LBRRprevLastGainIndex36$pre$phi$iZ2D >> 0] | 0) + -16 | 0;
      $add14$sink$i = ($sub$i385 | 0) < ($conv$i383 | 0) ? $conv$i383 : $sub$i385;
     } else {
      $add$i389 = $conv$i383 + -4 | 0;
      $conv7$i = HEAP8[$LBRRprevLastGainIndex36$pre$phi$iZ2D >> 0] | 0;
      if (($add$i389 | 0) > ($conv7$i + 8 | 0)) {
       $add14$sink$i = ($add$i389 << 1) + 248 | 0;
       break;
      } else {
       $add14$sink$i = $add$i389 + $conv7$i | 0;
       break;
      }
     } while (0);
     $conv15$i392 = $add14$sink$i & 255;
     $cond31$i = $conv15$i392 << 24 >> 24 > 63 ? 63 : $conv15$i392 << 24 >> 24 > 0 ? $add14$sink$i & 255 : 0;
     HEAP8[$LBRRprevLastGainIndex36$pre$phi$iZ2D >> 0] = $cond31$i;
     $add39$i = ($cond31$i * 29 | 0) + 2090 + (($cond31$i * 7281 | 0) >>> 16) | 0;
     $cond$i21$i = $add39$i >>> 0 < 3967 ? $add39$i : 3967;
     if (($cond$i21$i | 0) > 3966) $retval$0$i = 2147483647; else {
      $shr18$i = $cond$i21$i >>> 7;
      $shl$i398 = 1 << $shr18$i;
      $and$i = $cond$i21$i & 127;
      if (($cond$i21$i | 0) < 2048) $shr22$pn$i = ((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i << $shr18$i >> 7; else $shr22$pn$i = Math_imul(((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i | 0, $shl$i398 >> 7) | 0;
      $retval$0$i = $shr22$pn$i + $shl$i398 | 0;
     }
     HEAP32[$pGains_Q16$i + ($k$024$i << 2) >> 2] = $retval$0$i;
     $k$024$i = $k$024$i + 1 | 0;
    } while (($k$024$i | 0) != ($584 | 0));
    if (!$cmp23$i) break;
    $k$044$i = 0;
    do {
     HEAPF32[$sEncCtrl + ($k$044$i << 2) >> 2] = +(HEAP32[$pGains_Q16$i + ($k$044$i << 2) >> 2] | 0) * .0000152587890625;
     $k$044$i = $k$044$i + 1 | 0;
    } while (($k$044$i | 0) != ($584 | 0));
   } while (0);
   _silk_NSQ_wrapper_FLP($psEnc, $sEncCtrl, $arrayidx$i300, $a_fix_Q12$i$i$i, $psEnc + 6208 + ((HEAP32[$nFramesEncoded$i >> 2] | 0) * 320 | 0) | 0, $add$ptr);
   $595 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   _memcpy($sEncCtrl | 0, $PredCoef_Q12$i$i | 0, $595 << 2 | 0) | 0;
   $596 = $595;
  } else $596 = $565;
  if (($596 | 0) > 0) {
   $gainsID$08$i406 = 0;
   $k$07$i407 = 0;
   while (1) {
    $add$i411 = ($gainsID$08$i406 << 8) + (HEAP8[$psEnc + 4736 + $k$07$i407 >> 0] | 0) | 0;
    $k$07$i407 = $k$07$i407 + 1 | 0;
    if (($k$07$i407 | 0) == ($596 | 0)) {
     $gainsID$0$lcssa$i415 = $add$i411;
     break;
    } else $gainsID$08$i406 = $add$i411;
   }
  } else $gainsID$0$lcssa$i415 = 0;
  dest = $sRangeEnc_copy;
  src = $psRangeEnc;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $sNSQ = $psEnc + 148 | 0;
  _memcpy($sNSQ_copy | 0, $sNSQ | 0, 4352) | 0;
  $598 = HEAP8[$Seed >> 0] | 0;
  $ec_prevLagIndex = $psEnc + 5772 | 0;
  $599 = HEAP16[$ec_prevLagIndex >> 1] | 0;
  $ec_prevSignalType = $psEnc + 5768 | 0;
  $600 = HEAP32[$ec_prevSignalType >> 2] | 0;
  $sub212 = $maxBits + -5 | 0;
  $arraydecay72 = $psEnc + 4772 | 0;
  $quantOffsetType207 = $psEnc + 4766 | 0;
  $psRangeEnc$idx294 = $psRangeEnc + 20 | 0;
  $psRangeEnc$idx295 = $psRangeEnc + 28 | 0;
  $sRangeEnc_copy2$sroa$6$0$$sroa_idx85 = $psRangeEnc + 24 | 0;
  $LastGainIndex_copy2$0 = 0;
  $found_lower$0 = 0;
  $found_upper$0 = 0;
  $gainMult_Q8$0 = 256;
  $gainMult_lower$0 = 0;
  $gainMult_upper$0 = 0;
  $gainsID$0 = $gainsID$0$lcssa$i415;
  $gainsID_lower$0 = -1;
  $gainsID_upper$0 = -1;
  $iter$0 = 0;
  $nBits_lower$0 = 0;
  $nBits_upper$0 = 0;
  $sRangeEnc_copy2$sroa$6$0 = 0;
  L1003 : while (1) {
   $cmp47 = ($gainsID$0 | 0) == ($gainsID_lower$0 | 0);
   do if ($cmp47) {
    $nBits$1 = $nBits_lower$0;
    $sRangeEnc_copy2$sroa$6$2 = $sRangeEnc_copy2$sroa$6$0;
   } else {
    if (($gainsID$0 | 0) == ($gainsID_upper$0 | 0)) {
     $nBits$1 = $nBits_upper$0;
     $sRangeEnc_copy2$sroa$6$2 = $sRangeEnc_copy2$sroa$6$0;
     break;
    }
    if ($iter$0 | 0) {
     dest = $psRangeEnc;
     src = $sRangeEnc_copy;
     stop = dest + 48 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     _memcpy($sNSQ | 0, $sNSQ_copy | 0, 4352) | 0;
     HEAP8[$Seed >> 0] = $598;
     HEAP16[$ec_prevLagIndex >> 1] = $599;
     HEAP32[$ec_prevSignalType >> 2] = $600;
    }
    _silk_NSQ_wrapper_FLP($psEnc, $sEncCtrl, $indices, $sNSQ, $arraydecay72, $add$ptr);
    $cmp73 = ($iter$0 | 0) != 6;
    $tobool75 = ($found_lower$0 | 0) != 0;
    if ($tobool75 | $cmp73) $sRangeEnc_copy2$sroa$6$1 = $sRangeEnc_copy2$sroa$6$0; else {
     HEAP32[$sRangeEnc_copy2$sroa$0 >> 2] = HEAP32[$psRangeEnc >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$0 + 4 >> 2] = HEAP32[$psRangeEnc + 4 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$0 + 8 >> 2] = HEAP32[$psRangeEnc + 8 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$0 + 12 >> 2] = HEAP32[$psRangeEnc + 12 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$0 + 16 >> 2] = HEAP32[$psRangeEnc + 16 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$0 + 20 >> 2] = HEAP32[$psRangeEnc + 20 >> 2];
     $sRangeEnc_copy2$sroa$6$0$copyload = HEAP32[$sRangeEnc_copy2$sroa$6$0$$sroa_idx85 >> 2] | 0;
     HEAP32[$sRangeEnc_copy2$sroa$8 >> 2] = HEAP32[$psRangeEnc$idx295 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$8 + 4 >> 2] = HEAP32[$psRangeEnc$idx295 + 4 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$8 + 8 >> 2] = HEAP32[$psRangeEnc$idx295 + 8 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$8 + 12 >> 2] = HEAP32[$psRangeEnc$idx295 + 12 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$8 + 16 >> 2] = HEAP32[$psRangeEnc$idx295 + 16 >> 2];
     $sRangeEnc_copy2$sroa$6$1 = $sRangeEnc_copy2$sroa$6$0$copyload;
    }
    _silk_encode_indices($psEnc, $psRangeEnc, HEAP32[$nFramesEncoded$i >> 2] | 0, 0, $condCoding);
    _silk_encode_pulses($psRangeEnc, HEAP8[$signalType$i >> 0] | 0, HEAP8[$quantOffsetType207 >> 0] | 0, $arraydecay72, HEAP32[$frame_length >> 2] | 0);
    $sub1$i299 = (HEAP32[$psRangeEnc$idx294 >> 2] | 0) + -32 + (Math_clz32(HEAP32[$psRangeEnc$idx295 >> 2] | 0) | 0) | 0;
    if (($sub1$i299 | 0) > ($maxBits | 0) & (($tobool75 | $cmp73) ^ 1)) {
     HEAP32[$psRangeEnc >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 >> 2];
     HEAP32[$psRangeEnc + 4 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 4 >> 2];
     HEAP32[$psRangeEnc + 8 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 8 >> 2];
     HEAP32[$psRangeEnc + 12 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 12 >> 2];
     HEAP32[$psRangeEnc + 16 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 16 >> 2];
     HEAP32[$psRangeEnc + 20 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 20 >> 2];
     HEAP32[$sRangeEnc_copy2$sroa$6$0$$sroa_idx85 >> 2] = $sRangeEnc_copy2$sroa$6$1;
     HEAP32[$psRangeEnc$idx295 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 >> 2];
     HEAP32[$psRangeEnc$idx295 + 4 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 4 >> 2];
     HEAP32[$psRangeEnc$idx295 + 8 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 8 >> 2];
     HEAP32[$psRangeEnc$idx295 + 12 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 12 >> 2];
     HEAP32[$psRangeEnc$idx295 + 16 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 16 >> 2];
     $606 = HEAP8[$lastGainIndexPrev$i >> 0] | 0;
     HEAP8[$LastGainIndex$i371 >> 0] = $606;
     $607 = HEAP32[$nb_subfr$i169 >> 2] | 0;
     if (($607 | 0) > 0) _memset($arraydecay57$i | 0, 4, $607 | 0) | 0;
     if (!$cmp60$i) HEAP8[$indices >> 0] = $606;
     HEAP16[$ec_prevLagIndex >> 1] = $599;
     HEAP32[$ec_prevSignalType >> 2] = $600;
     $608 = HEAP32[$frame_length >> 2] | 0;
     if (($608 | 0) > 0) _memset($arraydecay72 | 0, 0, $608 | 0) | 0;
     _silk_encode_indices($psEnc, $psRangeEnc, HEAP32[$nFramesEncoded$i >> 2] | 0, 0, $condCoding);
     _silk_encode_pulses($psRangeEnc, HEAP8[$signalType$i >> 0] | 0, HEAP8[$quantOffsetType207 >> 0] | 0, $arraydecay72, HEAP32[$frame_length >> 2] | 0);
     $nBits$0 = (HEAP32[$psRangeEnc$idx294 >> 2] | 0) + -32 + (Math_clz32(HEAP32[$psRangeEnc$idx295 >> 2] | 0) | 0) | 0;
    } else $nBits$0 = $sub1$i299;
    if (($iter$0 | $useCBR | 0) != 0 | ($nBits$0 | 0) > ($maxBits | 0)) {
     $nBits$1 = $nBits$0;
     $sRangeEnc_copy2$sroa$6$2 = $sRangeEnc_copy2$sroa$6$1;
    } else break L24;
   } while (0);
   if (($iter$0 | 0) == 6) break;
   $cmp190 = ($nBits$1 | 0) > ($maxBits | 0);
   L1028 : do if ($cmp190) {
    $cmp193 = ($found_lower$0 | 0) == 0;
    if ($cmp193 & $iter$0 >>> 0 > 1) {
     $mul199 = +HEAPF32[$Lambda$i >> 2] * 1.5;
     HEAPF32[$Lambda$i >> 2] = $mul199 > 1.5 ? $mul199 : 1.5;
     HEAP8[$quantOffsetType207 >> 0] = 0;
     $found_upper$1370 = 0;
     $gainMult_upper$1372 = $gainMult_upper$0;
     $gainsID_upper$1373 = -1;
     $nBits_upper$1371 = $nBits_upper$0;
    } else {
     $conv209 = $gainMult_Q8$0 << 16 >> 16;
     if ($cmp193) {
      $found_upper$1370 = 1;
      $gainMult_upper$1372 = $conv209;
      $gainsID_upper$1373 = $gainsID$0;
      $nBits_upper$1371 = $nBits$1;
     } else {
      $LastGainIndex_copy2$1328 = $LastGainIndex_copy2$0;
      $found_lower$1319 = $found_lower$0;
      $found_upper$1321 = 1;
      $gainMult_lower$1324 = $gainMult_lower$0;
      $gainMult_upper$1325 = $conv209;
      $gainsID_lower$1326 = $gainsID_lower$0;
      $gainsID_upper$1327 = $gainsID$0;
      $nBits_lower$1322 = $nBits_lower$0;
      $nBits_upper$1323 = $nBits$1;
      $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$2;
      break;
     }
    }
    $620 = HEAP32[$nb_subfr$i169 >> 2] | 0;
    if (($620 | 0) <= 0) {
     $LastGainIndex_copy2$1328 = $LastGainIndex_copy2$0;
     $found_lower$1319 = 0;
     $found_upper$1321 = $found_upper$1370;
     $gainMult_lower$1324 = $gainMult_lower$0;
     $gainMult_upper$1325 = $gainMult_upper$1372;
     $gainsID_lower$1326 = $gainsID_lower$0;
     $gainsID_upper$1327 = $gainsID_upper$1373;
     $nBits_lower$1322 = $nBits_lower$0;
     $nBits_upper$1323 = $nBits_upper$1371;
     $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$2;
     break;
    }
    $621 = HEAP32[$subfr_length1$i$i >> 2] | 0;
    if (!$iter$0) {
     $i$3346$us = 0;
     $indvars$iv364 = $621;
     while (1) {
      $mul248$us = Math_imul($621, $i$3346$us) | 0;
      $i$3346$us$looptemp = $i$3346$us;
      $i$3346$us = $i$3346$us + 1 | 0;
      if (($mul248$us | 0) < (Math_imul($621, $i$3346$us) | 0)) {
       $j$0342$us = $mul248$us;
       $sum$0343$us = 0;
       while (1) {
        $conv260$us = HEAP8[$psEnc + 4772 + $j$0342$us >> 0] | 0;
        $add262$us = (($conv260$us | 0) > -1 ? $conv260$us : 0 - $conv260$us | 0) + $sum$0343$us | 0;
        $j$0342$us = $j$0342$us + 1 | 0;
        if (($j$0342$us | 0) == ($indvars$iv364 | 0)) {
         $sum$0$lcssa$us = $add262$us;
         break;
        } else $sum$0343$us = $add262$us;
       }
      } else $sum$0$lcssa$us = 0;
      HEAP32[$best_sum + ($i$3346$us$looptemp << 2) >> 2] = $sum$0$lcssa$us;
      HEAP16[$best_gain_mult + ($i$3346$us$looptemp << 1) >> 1] = $gainMult_Q8$0;
      if (($i$3346$us | 0) == ($620 | 0)) {
       $LastGainIndex_copy2$1328 = $LastGainIndex_copy2$0;
       $found_lower$1319 = 0;
       $found_upper$1321 = $found_upper$1370;
       $gainMult_lower$1324 = $gainMult_lower$0;
       $gainMult_upper$1325 = $gainMult_upper$1372;
       $gainsID_lower$1326 = $gainsID_lower$0;
       $gainsID_upper$1327 = $gainsID_upper$1373;
       $nBits_lower$1322 = $nBits_lower$0;
       $nBits_upper$1323 = $nBits_upper$1371;
       $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$2;
       break L1028;
      } else $indvars$iv364 = $indvars$iv364 + $621 | 0;
     }
    }
    $i$3346 = 0;
    $indvars$iv = $621;
    while (1) {
     $mul248 = Math_imul($621, $i$3346) | 0;
     $i$3346$looptemp = $i$3346;
     $i$3346 = $i$3346 + 1 | 0;
     if (($mul248 | 0) < (Math_imul($621, $i$3346) | 0)) {
      $j$0342 = $mul248;
      $sum$0343 = 0;
      while (1) {
       $conv260 = HEAP8[$psEnc + 4772 + $j$0342 >> 0] | 0;
       $add262 = (($conv260 | 0) > -1 ? $conv260 : 0 - $conv260 | 0) + $sum$0343 | 0;
       $j$0342 = $j$0342 + 1 | 0;
       if (($j$0342 | 0) == ($indvars$iv | 0)) {
        $sum$0$lcssa = $add262;
        break;
       } else $sum$0343 = $add262;
      }
     } else $sum$0$lcssa = 0;
     $arrayidx269 = $best_sum + ($i$3346$looptemp << 2) | 0;
     $arrayidx273 = $gain_lock + ($i$3346$looptemp << 2) | 0;
     do if (($sum$0$lcssa | 0) < (HEAP32[$arrayidx269 >> 2] | 0)) {
      if (HEAP32[$arrayidx273 >> 2] | 0) {
       label = 703;
       break;
      }
      HEAP32[$arrayidx269 >> 2] = $sum$0$lcssa;
      HEAP16[$best_gain_mult + ($i$3346$looptemp << 1) >> 1] = $gainMult_Q8$0;
     } else label = 703; while (0);
     if ((label | 0) == 703) {
      label = 0;
      HEAP32[$arrayidx273 >> 2] = 1;
     }
     if (($i$3346 | 0) == ($620 | 0)) {
      $LastGainIndex_copy2$1328 = $LastGainIndex_copy2$0;
      $found_lower$1319 = 0;
      $found_upper$1321 = $found_upper$1370;
      $gainMult_lower$1324 = $gainMult_lower$0;
      $gainMult_upper$1325 = $gainMult_upper$1372;
      $gainsID_lower$1326 = $gainsID_lower$0;
      $gainsID_upper$1327 = $gainsID_upper$1373;
      $nBits_lower$1322 = $nBits_lower$0;
      $nBits_upper$1323 = $nBits_upper$1371;
      $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$2;
      break;
     } else $indvars$iv = $indvars$iv + $621 | 0;
    }
   } else {
    if (($nBits$1 | 0) >= ($sub212 | 0)) break L24;
    $conv216 = $gainMult_Q8$0 << 16 >> 16;
    if ($cmp47) {
     $LastGainIndex_copy2$1328 = $LastGainIndex_copy2$0;
     $found_lower$1319 = 1;
     $found_upper$1321 = $found_upper$0;
     $gainMult_lower$1324 = $conv216;
     $gainMult_upper$1325 = $gainMult_upper$0;
     $gainsID_lower$1326 = $gainsID$0;
     $gainsID_upper$1327 = $gainsID_upper$0;
     $nBits_lower$1322 = $nBits$1;
     $nBits_upper$1323 = $nBits_upper$0;
     $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$2;
     break;
    };
    HEAP32[$sRangeEnc_copy2$sroa$0 >> 2] = HEAP32[$psRangeEnc >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$0 + 4 >> 2] = HEAP32[$psRangeEnc + 4 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$0 + 8 >> 2] = HEAP32[$psRangeEnc + 8 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$0 + 12 >> 2] = HEAP32[$psRangeEnc + 12 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$0 + 16 >> 2] = HEAP32[$psRangeEnc + 16 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$0 + 20 >> 2] = HEAP32[$psRangeEnc + 20 >> 2];
    $sRangeEnc_copy2$sroa$6$0$copyload91 = HEAP32[$sRangeEnc_copy2$sroa$6$0$$sroa_idx85 >> 2] | 0;
    HEAP32[$sRangeEnc_copy2$sroa$8 >> 2] = HEAP32[$psRangeEnc$idx295 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$8 + 4 >> 2] = HEAP32[$psRangeEnc$idx295 + 4 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$8 + 8 >> 2] = HEAP32[$psRangeEnc$idx295 + 8 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$8 + 12 >> 2] = HEAP32[$psRangeEnc$idx295 + 12 >> 2];
    HEAP32[$sRangeEnc_copy2$sroa$8 + 16 >> 2] = HEAP32[$psRangeEnc$idx295 + 16 >> 2];
    if ($sRangeEnc_copy2$sroa$6$0$copyload91 >>> 0 >= 1276) {
     label = 686;
     break L1003;
    }
    _memcpy($ec_buf_copy | 0, HEAP32[$psRangeEnc >> 2] | 0, $sRangeEnc_copy2$sroa$6$0$copyload91 | 0) | 0;
    _memcpy($sNSQ_copy2 | 0, $sNSQ | 0, 4352) | 0;
    $LastGainIndex_copy2$1328 = HEAP8[$LastGainIndex$i371 >> 0] | 0;
    $found_lower$1319 = 1;
    $found_upper$1321 = $found_upper$0;
    $gainMult_lower$1324 = $conv216;
    $gainMult_upper$1325 = $gainMult_upper$0;
    $gainsID_lower$1326 = $gainsID$0;
    $gainsID_upper$1327 = $gainsID_upper$0;
    $nBits_lower$1322 = $nBits$1;
    $nBits_upper$1323 = $nBits_upper$0;
    $sRangeEnc_copy2$sroa$6$3320 = $sRangeEnc_copy2$sroa$6$0$copyload91;
   } while (0);
   do if (!($found_lower$1319 & $found_upper$1321)) {
    if ($cmp190) {
     if ($gainMult_Q8$0 << 16 >> 16 >= 16384) {
      $gainMult_Q8$1 = 32767;
      break;
     }
     $gainMult_Q8$1 = $gainMult_Q8$0 << 16 >> 16 << 1 & 65535;
     break;
    }
    $div = ($nBits$1 - $maxBits << 7 | 0) / (HEAP32[$frame_length >> 2] | 0) | 0;
    $add305 = $div + 2048 | 0;
    do if (($div | 0) < -2048) $retval$0$i445 = 0; else {
     if (($div | 0) > 1918) {
      $retval$0$i445 = 2147483647;
      break;
     }
     $shr18$i421 = $add305 >>> 7;
     $shl$i422 = 1 << $shr18$i421;
     $and$i423 = $add305 & 127;
     if (($div | 0) < 0) $shr22$pn$i442 = ((Math_imul(Math_imul($and$i423, -174) | 0, 128 - $and$i423 | 0) | 0) >> 16) + $and$i423 << $shr18$i421 >> 7; else $shr22$pn$i442 = Math_imul(((Math_imul(Math_imul($and$i423, -174) | 0, 128 - $and$i423 | 0) | 0) >> 16) + $and$i423 | 0, $shl$i422 >> 7) | 0;
     $retval$0$i445 = $shr22$pn$i442 + $shl$i422 | 0;
    } while (0);
    $conv308 = $gainMult_Q8$0 << 16 >> 16;
    $gainMult_Q8$1 = ((Math_imul($retval$0$i445 & 65535, $conv308) | 0) >>> 16) + (Math_imul($retval$0$i445 >> 16, $conv308) | 0) & 65535;
   } else {
    $sub318 = $gainMult_upper$1325 - $gainMult_lower$1324 | 0;
    $add323 = ((Math_imul($maxBits - $nBits_lower$1322 | 0, $sub318) | 0) / ($nBits_upper$1323 - $nBits_lower$1322 | 0) | 0) + $gainMult_lower$1324 | 0;
    $conv325 = $add323 << 16 >> 16;
    $shr327 = $sub318 >> 2;
    $add328 = $shr327 + $gainMult_lower$1324 | 0;
    if (($conv325 | 0) > ($add328 | 0)) {
     $gainMult_Q8$1 = $add328 & 65535;
     break;
    } else {
     $sub340 = $gainMult_upper$1325 - $shr327 | 0;
     $gainMult_Q8$1 = (($conv325 | 0) < ($sub340 | 0) ? $sub340 : $add323) & 65535;
     break;
    }
   } while (0);
   $630 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   if (($630 | 0) > 0) {
    $i$4348 = 0;
    do {
     if (!(HEAP32[$gain_lock + ($i$4348 << 2) >> 2] | 0)) $tmp$0 = $gainMult_Q8$1; else $tmp$0 = HEAP16[$best_gain_mult + ($i$4348 << 1) >> 1] | 0;
     $633 = HEAP32[$sEncCtrl + 728 + ($i$4348 << 2) >> 2] | 0;
     $conv365 = $tmp$0 << 16 >> 16;
     $add373 = ((Math_imul($633 & 65535, $conv365) | 0) >> 16) + (Math_imul($633 >> 16, $conv365) | 0) | 0;
     $spec$select289 = ($add373 | 0) > -8388608 ? $add373 : -8388608;
     HEAP32[$pGains_Q16 + ($i$4348 << 2) >> 2] = (($spec$select289 | 0) < 8388607 ? $spec$select289 : 8388607) << 8;
     $i$4348 = $i$4348 + 1 | 0;
    } while (($i$4348 | 0) != ($630 | 0));
   }
   HEAP8[$LastGainIndex$i371 >> 0] = HEAP8[$lastGainIndexPrev$i >> 0] | 0;
   _silk_gains_quant($indices, $pGains_Q16, $LastGainIndex$i371, $conv61$i372, $630);
   $637 = HEAP32[$nb_subfr$i169 >> 2] | 0;
   if (($637 | 0) > 0) {
    $gainsID$08$i = 0;
    $k$07$i8 = 0;
    do {
     $gainsID$08$i = ($gainsID$08$i << 8) + (HEAP8[$psEnc + 4736 + $k$07$i8 >> 0] | 0) | 0;
     $k$07$i8 = $k$07$i8 + 1 | 0;
    } while (($k$07$i8 | 0) != ($637 | 0));
    $i$5351 = 0;
    do {
     HEAPF32[$sEncCtrl + ($i$5351 << 2) >> 2] = +(HEAP32[$pGains_Q16 + ($i$5351 << 2) >> 2] | 0) * .0000152587890625;
     $i$5351 = $i$5351 + 1 | 0;
    } while (($i$5351 | 0) != ($637 | 0));
    $gainsID$0$lcssa$i474 = $gainsID$08$i;
   } else $gainsID$0$lcssa$i474 = 0;
   $LastGainIndex_copy2$0 = $LastGainIndex_copy2$1328;
   $found_lower$0 = $found_lower$1319;
   $found_upper$0 = $found_upper$1321;
   $gainMult_Q8$0 = $gainMult_Q8$1;
   $gainMult_lower$0 = $gainMult_lower$1324;
   $gainMult_upper$0 = $gainMult_upper$1325;
   $gainsID$0 = $gainsID$0$lcssa$i474;
   $gainsID_lower$0 = $gainsID_lower$1326;
   $gainsID_upper$0 = $gainsID_upper$1327;
   $iter$0 = $iter$0 + 1 | 0;
   $nBits_lower$0 = $nBits_lower$1322;
   $nBits_upper$0 = $nBits_upper$1323;
   $sRangeEnc_copy2$sroa$6$0 = $sRangeEnc_copy2$sroa$6$3320;
  }
  if ((label | 0) == 686) _celt_fatal(53726, 53696, 281);
  if (!(($found_lower$0 | 0) != 0 & ($cmp47 | ($nBits$1 | 0) > ($maxBits | 0)))) break;
  HEAP32[$psRangeEnc >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 >> 2];
  HEAP32[$psRangeEnc + 4 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 4 >> 2];
  HEAP32[$psRangeEnc + 8 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 8 >> 2];
  HEAP32[$psRangeEnc + 12 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 12 >> 2];
  HEAP32[$psRangeEnc + 16 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 16 >> 2];
  HEAP32[$psRangeEnc + 20 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$0 + 20 >> 2];
  HEAP32[$sRangeEnc_copy2$sroa$6$0$$sroa_idx85 >> 2] = $sRangeEnc_copy2$sroa$6$2;
  HEAP32[$psRangeEnc$idx295 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 >> 2];
  HEAP32[$psRangeEnc$idx295 + 4 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 4 >> 2];
  HEAP32[$psRangeEnc$idx295 + 8 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 8 >> 2];
  HEAP32[$psRangeEnc$idx295 + 12 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 12 >> 2];
  HEAP32[$psRangeEnc$idx295 + 16 >> 2] = HEAP32[$sRangeEnc_copy2$sroa$8 + 16 >> 2];
  if ($sRangeEnc_copy2$sroa$6$2 >>> 0 < 1276) {
   _memcpy(HEAP32[$psRangeEnc >> 2] | 0, $ec_buf_copy | 0, $sRangeEnc_copy2$sroa$6$2 | 0) | 0;
   _memcpy($sNSQ | 0, $sNSQ_copy2 | 0, 4352) | 0;
   HEAP8[$LastGainIndex$i371 >> 0] = $LastGainIndex_copy2$0;
   break;
  } else _celt_fatal(53649, 53696, 251);
 } while (0);
 _memmove($x_buf | 0, $psEnc + 7180 + (HEAP32[$frame_length >> 2] << 2) | 0, ((HEAP32[$fs_kHz610 >> 2] | 0) * 5 | 0) + (HEAP32[$ltp_mem_length >> 2] | 0) << 2 | 0) | 0;
 if (HEAP32[$prefillFlag >> 2] | 0) {
  $storemerge = 0;
  HEAP32[$pnBytesOut >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
 HEAP32[$psEnc + 4544 >> 2] = HEAP32[$sEncCtrl + 228 + ((HEAP32[$psEnc + 4580 >> 2] | 0) + -1 << 2) >> 2];
 HEAP8[$psEnc + 4541 >> 0] = HEAP8[$psEnc + 4765 >> 0] | 0;
 HEAP32[$psEnc + 4664 >> 2] = 0;
 $storemerge = (HEAP32[$psRangeEnc + 20 >> 2] | 0) + -25 + (Math_clz32(HEAP32[$psRangeEnc + 28 >> 2] | 0) | 0) >> 3;
 HEAP32[$pnBytesOut >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}
function _silk_decode_pulses($psRangeDec, $pulses, $signalType, $quantOffsetType, $frame_length) {
 $psRangeDec = $psRangeDec | 0;
 $pulses = $pulses | 0;
 $signalType = $signalType | 0;
 $quantOffsetType = $quantOffsetType | 0;
 $frame_length = $frame_length | 0;
 var $$pre14$i$i = 0, $$pre14$i$i$i = 0, $$pre14$i$i$i718 = 0, $$pre14$i$i110 = 0, $$pre14$i$i110$i = 0, $$pre14$i$i113$i = 0, $$pre14$i$i153 = 0, $$pre14$i$i153$i = 0, $$pre14$i$i157$i = 0, $$pre14$i$i196 = 0, $$pre14$i$i196$i = 0, $$pre14$i$i201$i = 0, $$pre14$i$i239 = 0, $$pre14$i$i239$i = 0, $$pre14$i$i24 = 0, $$pre14$i$i24$i = 0, $$pre14$i$i244$i = 0, $$pre14$i$i27$i = 0, $$pre14$i$i282 = 0, $$pre14$i$i282$i = 0, $$pre14$i$i287$i = 0, $$pre14$i$i325 = 0, $$pre14$i$i325$i = 0, $$pre14$i$i330$i = 0, $$pre14$i$i368 = 0, $$pre14$i$i368$i = 0, $$pre14$i$i373$i = 0, $$pre14$i$i411 = 0, $$pre14$i$i411$i = 0, $$pre14$i$i416$i = 0, $$pre14$i$i454 = 0, $$pre14$i$i454$i = 0, $$pre14$i$i459$i = 0, $$pre14$i$i497 = 0, $$pre14$i$i497$i = 0, $$pre14$i$i502$i = 0, $$pre14$i$i540 = 0, $$pre14$i$i540$i = 0, $$pre14$i$i545$i = 0, $$pre14$i$i583 = 0, $$pre14$i$i583$i = 0, $$pre14$i$i588$i = 0, $$pre14$i$i626 = 0, $$pre14$i$i626$i = 0, $$pre14$i$i67 = 0, $$pre14$i$i67$i = 0, $$pre14$i$i676 = 0, $$pre14$i$i70$i = 0, $$pre14$i$i764 = 0, $$pre14$i$i807 = 0, $0 = 0, $1 = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $128 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $141 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $193 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $203 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $219 = 0, $221 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $233 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $243 = 0, $246 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $259 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $272 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $285 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $298 = 0, $3 = 0, $30 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $311 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $350 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $363 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $376 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $415 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $428 = 0, $43 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $441 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $454 = 0, $457 = 0, $458 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $466 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $479 = 0, $482 = 0, $484 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $492 = 0, $495 = 0, $497 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $505 = 0, $508 = 0, $510 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $52 = 0, $521 = 0, $523 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $531 = 0, $534 = 0, $536 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $544 = 0, $547 = 0, $549 = 0, $55 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $557 = 0, $56 = 0, $560 = 0, $562 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $57 = 0, $570 = 0, $573 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $586 = 0, $588 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $609 = 0, $612 = 0, $614 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $622 = 0, $625 = 0, $627 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $635 = 0, $638 = 0, $640 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $648 = 0, $65 = 0, $651 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $abs_q$051$us = 0, $abs_q$051$us$1 = 0, $abs_q$051$us$10 = 0, $abs_q$051$us$11 = 0, $abs_q$051$us$12 = 0, $abs_q$051$us$13 = 0, $abs_q$051$us$14 = 0, $abs_q$051$us$15 = 0, $abs_q$051$us$2 = 0, $abs_q$051$us$3 = 0, $abs_q$051$us$4 = 0, $abs_q$051$us$5 = 0, $abs_q$051$us$6 = 0, $abs_q$051$us$7 = 0, $abs_q$051$us$8 = 0, $abs_q$051$us$9 = 0, $add$ptr = 0, $and$i = 0, $and7$i$i = 0, $and7$i$i$i734 = 0, $and7$i$i126 = 0, $and7$i$i129$i = 0, $and7$i$i169 = 0, $and7$i$i173$i = 0, $and7$i$i212 = 0, $and7$i$i217$i = 0, $and7$i$i255 = 0, $and7$i$i260$i = 0, $and7$i$i298 = 0, $and7$i$i303$i = 0, $and7$i$i341 = 0, $and7$i$i346$i = 0, $and7$i$i384 = 0, $and7$i$i389$i = 0, $and7$i$i40 = 0, $and7$i$i427 = 0, $and7$i$i432$i = 0, $and7$i$i470 = 0, $and7$i$i475$i = 0, $and7$i$i513 = 0, $and7$i$i518$i = 0, $and7$i$i556 = 0, $and7$i$i561$i = 0, $and7$i$i599 = 0, $and7$i$i604$i = 0, $and7$i$i642 = 0, $and7$i$i692 = 0, $and7$i$i780 = 0, $and7$i$i823 = 0, $and7$i$i83 = 0, $and7$i$i86$i = 0, $arrayidx1$i$i = 0, $arrayidx1$i105$i = 0, $arrayidx1$i117$i = 0, $arrayidx1$i129$i = 0, $arrayidx1$i141$i = 0, $arrayidx1$i153$i = 0, $arrayidx1$i165$i = 0, $arrayidx1$i177$i = 0, $arrayidx1$i189$i = 0, $arrayidx1$i33$i = 0, $arrayidx1$i45$i = 0, $arrayidx1$i57$i = 0, $arrayidx1$i69$i = 0, $arrayidx1$i81$i = 0, $arrayidx1$i93$i = 0, $arrayidx10 = 0, $arrayidx10$i = 0, $arrayidx10265$i = 0, $arrayidx10266$i = 0, $arrayidx13$i = 0, $arrayidx14$i = 0, $arrayidx17$1$i = 0, $arrayidx17$10$i = 0, $arrayidx17$11$i = 0, $arrayidx17$12$i = 0, $arrayidx17$13$i = 0, $arrayidx17$14$i = 0, $arrayidx17$15$i = 0, $arrayidx17$2$i = 0, $arrayidx17$3$i = 0, $arrayidx17$4$i = 0, $arrayidx17$5$i = 0, $arrayidx17$6$i = 0, $arrayidx17$7$i = 0, $arrayidx17$8$i = 0, $arrayidx17$9$i = 0, $arrayidx2$i = 0, $arrayidx21$i = 0, $arrayidx21272$i = 0, $arrayidx22$i = 0, $arrayidx22273$i = 0, $arrayidx22274$i = 0, $arrayidx25$i = 0, $arrayidx26$i = 0, $arrayidx31 = 0, $arrayidx37$i = 0, $arrayidx37284$i = 0, $arrayidx38$i = 0, $arrayidx38285$i = 0, $arrayidx38286$i = 0, $arrayidx41$i = 0, $arrayidx42$i = 0, $arrayidx49$i = 0, $arrayidx49292$i = 0, $arrayidx50$i = 0, $arrayidx50293$i = 0, $arrayidx50294$i = 0, $arrayidx53 = 0, $arrayidx53$i = 0, $arrayidx54$i = 0, $arrayidx58$us$1 = 0, $arrayidx58$us$10 = 0, $arrayidx58$us$11 = 0, $arrayidx58$us$12 = 0, $arrayidx58$us$13 = 0, $arrayidx58$us$14 = 0, $arrayidx58$us$15 = 0, $arrayidx58$us$2 = 0, $arrayidx58$us$3 = 0, $arrayidx58$us$4 = 0, $arrayidx58$us$5 = 0, $arrayidx58$us$6 = 0, $arrayidx58$us$7 = 0, $arrayidx58$us$8 = 0, $arrayidx58$us$9 = 0, $arrayidx74 = 0, $arrayidx8 = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i728 = 0, $cond$i$i$i120 = 0, $cond$i$i$i120$i = 0, $cond$i$i$i123$i = 0, $cond$i$i$i163 = 0, $cond$i$i$i163$i = 0, $cond$i$i$i167$i = 0, $cond$i$i$i206 = 0, $cond$i$i$i206$i = 0, $cond$i$i$i211$i = 0, $cond$i$i$i249 = 0, $cond$i$i$i249$i = 0, $cond$i$i$i254$i = 0, $cond$i$i$i292 = 0, $cond$i$i$i292$i = 0, $cond$i$i$i297$i = 0, $cond$i$i$i335 = 0, $cond$i$i$i335$i = 0, $cond$i$i$i34 = 0, $cond$i$i$i34$i = 0, $cond$i$i$i340$i = 0, $cond$i$i$i37$i = 0, $cond$i$i$i378 = 0, $cond$i$i$i378$i = 0, $cond$i$i$i383$i = 0, $cond$i$i$i421 = 0, $cond$i$i$i421$i = 0, $cond$i$i$i426$i = 0, $cond$i$i$i464 = 0, $cond$i$i$i464$i = 0, $cond$i$i$i469$i = 0, $cond$i$i$i507 = 0, $cond$i$i$i507$i = 0, $cond$i$i$i512$i = 0, $cond$i$i$i550 = 0, $cond$i$i$i550$i = 0, $cond$i$i$i555$i = 0, $cond$i$i$i593 = 0, $cond$i$i$i593$i = 0, $cond$i$i$i598$i = 0, $cond$i$i$i636 = 0, $cond$i$i$i636$i = 0, $cond$i$i$i686 = 0, $cond$i$i$i77 = 0, $cond$i$i$i77$i = 0, $cond$i$i$i774 = 0, $cond$i$i$i80$i = 0, $cond$i$i$i817 = 0, $conv$i739 = 0, $conv12$i = 0, $conv8$i = 0, $i$019$i = 0, $i$060 = 0, $i$157 = 0, $i$255 = 0, $icdf$i = 0, $inc$i$i = 0, $inc$i$i$i = 0, $inc$i$i$i$i = 0, $inc$i$i$i$i724 = 0, $inc$i$i$i116 = 0, $inc$i$i$i116$i = 0, $inc$i$i$i119$i = 0, $inc$i$i$i159 = 0, $inc$i$i$i159$i = 0, $inc$i$i$i163$i = 0, $inc$i$i$i202 = 0, $inc$i$i$i202$i = 0, $inc$i$i$i207$i = 0, $inc$i$i$i245 = 0, $inc$i$i$i245$i = 0, $inc$i$i$i250$i = 0, $inc$i$i$i288 = 0, $inc$i$i$i288$i = 0, $inc$i$i$i293$i = 0, $inc$i$i$i30 = 0, $inc$i$i$i30$i = 0, $inc$i$i$i33$i = 0, $inc$i$i$i331 = 0, $inc$i$i$i331$i = 0, $inc$i$i$i336$i = 0, $inc$i$i$i374 = 0, $inc$i$i$i374$i = 0, $inc$i$i$i379$i = 0, $inc$i$i$i417 = 0, $inc$i$i$i417$i = 0, $inc$i$i$i422$i = 0, $inc$i$i$i460 = 0, $inc$i$i$i460$i = 0, $inc$i$i$i465$i = 0, $inc$i$i$i503 = 0, $inc$i$i$i503$i = 0, $inc$i$i$i508$i = 0, $inc$i$i$i546 = 0, $inc$i$i$i546$i = 0, $inc$i$i$i551$i = 0, $inc$i$i$i589 = 0, $inc$i$i$i589$i = 0, $inc$i$i$i594$i = 0, $inc$i$i$i632 = 0, $inc$i$i$i632$i = 0, $inc$i$i$i682 = 0, $inc$i$i$i73 = 0, $inc$i$i$i73$i = 0, $inc$i$i$i76$i = 0, $inc$i$i$i770 = 0, $inc$i$i$i813 = 0, $inc$i135$i = 0, $inc$i178$i = 0, $inc$i221$i = 0, $inc$i264$i = 0, $inc$i307$i = 0, $inc$i350$i = 0, $inc$i393$i = 0, $inc$i436$i = 0, $inc$i479$i = 0, $inc$i49$i = 0, $inc$i522$i = 0, $inc$i565$i = 0, $inc$i6$i = 0, $inc$i608$i = 0, $inc$i92$i = 0, $iter$068 = 0, $j$052$us = 0, $j$052$us$1 = 0, $j$052$us$10 = 0, $j$052$us$11 = 0, $j$052$us$12 = 0, $j$052$us$13 = 0, $j$052$us$14 = 0, $j$052$us$15 = 0, $j$052$us$2 = 0, $j$052$us$3 = 0, $j$052$us$4 = 0, $j$052$us$5 = 0, $j$052$us$6 = 0, $j$052$us$7 = 0, $j$052$us$8 = 0, $j$052$us$9 = 0, $mul$i = 0, $mul$i$i = 0, $mul$i$i705 = 0, $mul$i12$i = 0, $mul$i138 = 0, $mul$i138$i = 0, $mul$i142$i = 0, $mul$i181 = 0, $mul$i181$i = 0, $mul$i185$i = 0, $mul$i224 = 0, $mul$i224$i = 0, $mul$i229$i = 0, $mul$i267 = 0, $mul$i267$i = 0, $mul$i272$i = 0, $mul$i310 = 0, $mul$i310$i = 0, $mul$i315$i = 0, $mul$i353 = 0, $mul$i353$i = 0, $mul$i358$i = 0, $mul$i396 = 0, $mul$i396$i = 0, $mul$i401$i = 0, $mul$i439 = 0, $mul$i439$i = 0, $mul$i444$i = 0, $mul$i482 = 0, $mul$i482$i = 0, $mul$i487$i = 0, $mul$i52 = 0, $mul$i52$i = 0, $mul$i525 = 0, $mul$i525$i = 0, $mul$i530$i = 0, $mul$i55$i = 0, $mul$i568 = 0, $mul$i568$i = 0, $mul$i573$i = 0, $mul$i611 = 0, $mul$i611$i = 0, $mul$i661 = 0, $mul$i749 = 0, $mul$i792 = 0, $mul$i9 = 0, $mul$i9$i = 0, $mul$i95 = 0, $mul$i95$i = 0, $mul$i98$i = 0, $nLshifts = 0, $nbits_total$i$i = 0, $nbits_total$i$i$i = 0, $nbits_total$i$i799 = 0, $offs$i$i$i = 0, $offs$i$i$i$i = 0, $offs$i$i$i801 = 0, $phitmp215$i = 0, $phitmp218$i = 0, $phitmp220$i = 0, $phitmp221$i = 0, $phitmp224$i = 0, $phitmp226$i = 0, $phitmp227$i = 0, $phitmp229$i = 0, $phitmp230$i = 0, $phitmp232$i = 0, $phitmp233$i = 0, $phitmp236$i = 0, $phitmp239$i = 0, $phitmp241$i = 0, $phitmp242$i = 0, $phitmp245$i = 0, $q_ptr$020$i = 0, $rem$i$i = 0, $rem$i$i$i = 0, $rem$i$i800 = 0, $ret$0$i = 0, $ret$0$i$i = 0, $ret$0$i$i702 = 0, $ret$0$i134 = 0, $ret$0$i134$i = 0, $ret$0$i137$i = 0, $ret$0$i177 = 0, $ret$0$i177$i = 0, $ret$0$i181$i = 0, $ret$0$i220 = 0, $ret$0$i220$i = 0, $ret$0$i225$i = 0, $ret$0$i263 = 0, $ret$0$i263$i = 0, $ret$0$i268$i = 0, $ret$0$i306 = 0, $ret$0$i306$i = 0, $ret$0$i311$i = 0, $ret$0$i349 = 0, $ret$0$i349$i = 0, $ret$0$i354$i = 0, $ret$0$i392 = 0, $ret$0$i392$i = 0, $ret$0$i397$i = 0, $ret$0$i435 = 0, $ret$0$i435$i = 0, $ret$0$i440$i = 0, $ret$0$i478 = 0, $ret$0$i478$i = 0, $ret$0$i48 = 0, $ret$0$i48$i = 0, $ret$0$i483$i = 0, $ret$0$i5 = 0, $ret$0$i5$i = 0, $ret$0$i51$i = 0, $ret$0$i521 = 0, $ret$0$i521$i = 0, $ret$0$i526$i = 0, $ret$0$i564 = 0, $ret$0$i564$i = 0, $ret$0$i569$i = 0, $ret$0$i607 = 0, $ret$0$i607$i = 0, $ret$0$i657 = 0, $ret$0$i745 = 0, $ret$0$i788 = 0, $ret$0$i8$i = 0, $ret$0$i91 = 0, $ret$0$i91$i = 0, $ret$0$i94$i = 0, $rng$i = 0, $s$0$i = 0, $s$0$i$i = 0, $s$0$i$i701 = 0, $s$0$i133 = 0, $s$0$i133$i = 0, $s$0$i136$i = 0, $s$0$i176 = 0, $s$0$i176$i = 0, $s$0$i180$i = 0, $s$0$i219 = 0, $s$0$i219$i = 0, $s$0$i224$i = 0, $s$0$i262 = 0, $s$0$i262$i = 0, $s$0$i267$i = 0, $s$0$i305 = 0, $s$0$i305$i = 0, $s$0$i310$i = 0, $s$0$i348 = 0, $s$0$i348$i = 0, $s$0$i353$i = 0, $s$0$i391 = 0, $s$0$i391$i = 0, $s$0$i396$i = 0, $s$0$i4 = 0, $s$0$i4$i = 0, $s$0$i434 = 0, $s$0$i434$i = 0, $s$0$i439$i = 0, $s$0$i47 = 0, $s$0$i47$i = 0, $s$0$i477 = 0, $s$0$i477$i = 0, $s$0$i482$i = 0, $s$0$i50$i = 0, $s$0$i520 = 0, $s$0$i520$i = 0, $s$0$i525$i = 0, $s$0$i563 = 0, $s$0$i563$i = 0, $s$0$i568$i = 0, $s$0$i606 = 0, $s$0$i606$i = 0, $s$0$i656 = 0, $s$0$i7$i = 0, $s$0$i744 = 0, $s$0$i787 = 0, $s$0$i90 = 0, $s$0$i90$i = 0, $s$0$i93$i = 0, $sext$i738 = 0, $sext212$i = 0, $sext213$i = 0, $shl$i$i = 0, $shl$i$i$i721 = 0, $shl$i$i113 = 0, $shl$i$i116$i = 0, $shl$i$i156 = 0, $shl$i$i160$i = 0, $shl$i$i199 = 0, $shl$i$i204$i = 0, $shl$i$i242 = 0, $shl$i$i247$i = 0, $shl$i$i27 = 0, $shl$i$i285 = 0, $shl$i$i290$i = 0, $shl$i$i328 = 0, $shl$i$i333$i = 0, $shl$i$i371 = 0, $shl$i$i376$i = 0, $shl$i$i414 = 0, $shl$i$i419$i = 0, $shl$i$i457 = 0, $shl$i$i462$i = 0, $shl$i$i500 = 0, $shl$i$i505$i = 0, $shl$i$i543 = 0, $shl$i$i548$i = 0, $shl$i$i586 = 0, $shl$i$i591$i = 0, $shl$i$i629 = 0, $shl$i$i679 = 0, $shl$i$i70 = 0, $shl$i$i73$i = 0, $shl$i$i767 = 0, $shl$i$i810 = 0, $shl$us = 0, $shl$us$1 = 0, $shl$us$10 = 0, $shl$us$11 = 0, $shl$us$12 = 0, $shl$us$13 = 0, $shl$us$14 = 0, $shl$us$15 = 0, $shl$us$2 = 0, $shl$us$3 = 0, $shl$us$4 = 0, $shl$us$5 = 0, $shl$us$6 = 0, $shl$us$7 = 0, $shl$us$8 = 0, $shl$us$9 = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i$i700 = 0, $shr$i132 = 0, $shr$i132$i = 0, $shr$i135$i = 0, $shr$i175 = 0, $shr$i175$i = 0, $shr$i179$i = 0, $shr$i218 = 0, $shr$i218$i = 0, $shr$i223$i = 0, $shr$i261 = 0, $shr$i261$i = 0, $shr$i266$i = 0, $shr$i3 = 0, $shr$i3$i = 0, $shr$i304 = 0, $shr$i304$i = 0, $shr$i309$i = 0, $shr$i347 = 0, $shr$i347$i = 0, $shr$i352$i = 0, $shr$i390 = 0, $shr$i390$i = 0, $shr$i395$i = 0, $shr$i433 = 0, $shr$i433$i = 0, $shr$i438$i = 0, $shr$i46 = 0, $shr$i46$i = 0, $shr$i476 = 0, $shr$i476$i = 0, $shr$i481$i = 0, $shr$i49$i = 0, $shr$i519 = 0, $shr$i519$i = 0, $shr$i524$i = 0, $shr$i562 = 0, $shr$i562$i = 0, $shr$i567$i = 0, $shr$i6$i = 0, $shr$i605 = 0, $shr$i605$i = 0, $shr$i648 = 0, $shr$i655 = 0, $shr$i743 = 0, $shr$i786 = 0, $shr$i89 = 0, $shr$i89$i = 0, $shr$i92$i = 0, $storage$i$i$i$i = 0, $storage$i$i$i802 = 0, $storemerge$i100$i = 0, $storemerge$i112$i = 0, $storemerge$i124276$ph$i = 0, $storemerge$i124276280$i = 0, $storemerge$i124276281$i = 0, $storemerge$i136282$i = 0, $storemerge$i136283$i = 0, $storemerge$i148$i = 0, $storemerge$i160$i = 0, $storemerge$i172290$i = 0, $storemerge$i172291$i = 0, $storemerge$i184$i = 0, $storemerge$i196$i = 0, $storemerge$i40254$ph$i = 0, $storemerge$i40254259$i = 0, $storemerge$i40254260$i = 0, $storemerge$i52263$i = 0, $storemerge$i52264$i = 0, $storemerge$i64$i = 0, $storemerge$i76$i = 0, $storemerge$i88270$i = 0, $storemerge$i88271$i = 0, $sub$i = 0, $sub$i$i = 0, $sub$i101$i = 0, $sub$i12 = 0, $sub$i12$i = 0, $sub$i141 = 0, $sub$i141$i = 0, $sub$i145$i = 0, $sub$i15$i = 0, $sub$i184 = 0, $sub$i184$i = 0, $sub$i189$i = 0, $sub$i227 = 0, $sub$i227$i = 0, $sub$i232$i = 0, $sub$i270 = 0, $sub$i270$i = 0, $sub$i275$i = 0, $sub$i3$i = 0, $sub$i313 = 0, $sub$i313$i = 0, $sub$i318$i = 0, $sub$i356 = 0, $sub$i356$i = 0, $sub$i361$i = 0, $sub$i399 = 0, $sub$i399$i = 0, $sub$i404$i = 0, $sub$i442 = 0, $sub$i442$i = 0, $sub$i447$i = 0, $sub$i485 = 0, $sub$i485$i = 0, $sub$i490$i = 0, $sub$i528 = 0, $sub$i528$i = 0, $sub$i533$i = 0, $sub$i55 = 0, $sub$i55$i = 0, $sub$i571 = 0, $sub$i571$i = 0, $sub$i576$i = 0, $sub$i58$i = 0, $sub$i614 = 0, $sub$i614$i = 0, $sub$i664 = 0, $sub$i752 = 0, $sub$i795 = 0, $sub$i98 = 0, $sub$i98$i = 0, $sub3$i = 0, $sub3$i$i = 0, $sub3$i$i707 = 0, $sub3$i102$i = 0, $sub3$i13 = 0, $sub3$i13$i = 0, $sub3$i142 = 0, $sub3$i142$i = 0, $sub3$i146$i = 0, $sub3$i16$i = 0, $sub3$i185 = 0, $sub3$i185$i = 0, $sub3$i190$i = 0, $sub3$i228 = 0, $sub3$i228$i = 0, $sub3$i233$i = 0, $sub3$i271 = 0, $sub3$i271$i = 0, $sub3$i276$i = 0, $sub3$i314 = 0, $sub3$i314$i = 0, $sub3$i319$i = 0, $sub3$i357 = 0, $sub3$i357$i = 0, $sub3$i362$i = 0, $sub3$i400 = 0, $sub3$i400$i = 0, $sub3$i405$i = 0, $sub3$i443 = 0, $sub3$i443$i = 0, $sub3$i448$i = 0, $sub3$i486 = 0, $sub3$i486$i = 0, $sub3$i491$i = 0, $sub3$i529 = 0, $sub3$i529$i = 0, $sub3$i534$i = 0, $sub3$i56 = 0, $sub3$i56$i = 0, $sub3$i572 = 0, $sub3$i572$i = 0, $sub3$i577$i = 0, $sub3$i59$i = 0, $sub3$i615 = 0, $sub3$i615$i = 0, $sub3$i665 = 0, $sub3$i753 = 0, $sub3$i796 = 0, $sub3$i99 = 0, $sub3$i99$i = 0, $sum_pulses = 0, $val$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $icdf$i = sp + 160 | 0;
 $sum_pulses = sp + 80 | 0;
 $nLshifts = sp;
 $shr = $signalType >> 1;
 $rng$i = $psRangeDec + 28 | 0;
 $0 = HEAP32[$rng$i >> 2] | 0;
 $val$i = $psRangeDec + 32 | 0;
 $1 = HEAP32[$val$i >> 2] | 0;
 $shr$i = $0 >>> 8;
 $ret$0$i = -1;
 $s$0$i = $0;
 while (1) {
  $ret$0$i = $ret$0$i + 1 | 0;
  $mul$i = Math_imul($shr$i, HEAPU8[25488 + ($shr * 9 | 0) + $ret$0$i >> 0] | 0) | 0;
  if ($1 >>> 0 >= $mul$i >>> 0) break; else $s$0$i = $mul$i;
 }
 $sub$i = $1 - $mul$i | 0;
 HEAP32[$val$i >> 2] = $sub$i;
 $sub3$i = $s$0$i - $mul$i | 0;
 HEAP32[$rng$i >> 2] = $sub3$i;
 if ($sub3$i >>> 0 < 8388609) {
  $nbits_total$i$i = $psRangeDec + 20 | 0;
  $rem$i$i = $psRangeDec + 40 | 0;
  $offs$i$i$i = $psRangeDec + 24 | 0;
  $$pre14$i$i = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $11 = $sub$i;
  $3 = HEAP32[$nbits_total$i$i >> 2] | 0;
  $4 = $sub3$i;
  $5 = HEAP32[$offs$i$i$i >> 2] | 0;
  $8 = HEAP32[$rem$i$i >> 2] | 0;
  while (1) {
   $3 = $3 + 8 | 0;
   HEAP32[$nbits_total$i$i >> 2] = $3;
   $shl$i$i = $4 << 8;
   HEAP32[$rng$i >> 2] = $shl$i$i;
   if ($5 >>> 0 < $$pre14$i$i >>> 0) {
    $6 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i = $5 + 1 | 0;
    HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
    $655 = $inc$i$i$i;
    $cond$i$i$i = HEAPU8[$6 + $5 >> 0] | 0;
   } else {
    $655 = $5;
    $cond$i$i$i = 0;
   }
   HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
   $and7$i$i = ($11 << 8 & 2147483392 | ($cond$i$i$i | $8 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i >> 2] = $and7$i$i;
   if ($shl$i$i >>> 0 >= 8388609) {
    $653 = $and7$i$i;
    $654 = $shl$i$i;
    break;
   } else {
    $11 = $and7$i$i;
    $4 = $shl$i$i;
    $5 = $655;
    $8 = $cond$i$i$i;
   }
  }
 } else {
  $653 = $sub$i;
  $654 = $sub3$i;
 }
 if (($frame_length & -16 | 0) < ($frame_length | 0)) if (($frame_length | 0) == 120) {
  $iter$068 = 8;
  label = 12;
 } else _celt_fatal(51420, 50437, 59); else if (($frame_length | 0) > 15) {
  $iter$068 = $frame_length >> 4;
  label = 12;
 }
 if ((label | 0) == 12) {
  $nbits_total$i$i799 = $psRangeDec + 20 | 0;
  $rem$i$i800 = $psRangeDec + 40 | 0;
  $offs$i$i$i801 = $psRangeDec + 24 | 0;
  $storage$i$i$i802 = $psRangeDec + 4 | 0;
  $12 = $654;
  $14 = $653;
  $i$060 = 0;
  while (1) {
   $arrayidx8 = $nLshifts + ($i$060 << 2) | 0;
   HEAP32[$arrayidx8 >> 2] = 0;
   $shr$i786 = $12 >>> 8;
   $ret$0$i788 = -1;
   $s$0$i787 = $12;
   while (1) {
    $ret$0$i788 = $ret$0$i788 + 1 | 0;
    $mul$i792 = Math_imul($shr$i786, HEAPU8[25120 + ($ret$0$i * 18 | 0) + $ret$0$i788 >> 0] | 0) | 0;
    if ($14 >>> 0 >= $mul$i792 >>> 0) break; else $s$0$i787 = $mul$i792;
   }
   $sub$i795 = $14 - $mul$i792 | 0;
   HEAP32[$val$i >> 2] = $sub$i795;
   $sub3$i796 = $s$0$i787 - $mul$i792 | 0;
   HEAP32[$rng$i >> 2] = $sub3$i796;
   if ($sub3$i796 >>> 0 < 8388609) {
    $$pre14$i$i807 = HEAP32[$storage$i$i$i802 >> 2] | 0;
    $15 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
    $16 = $sub3$i796;
    $17 = HEAP32[$offs$i$i$i801 >> 2] | 0;
    $20 = HEAP32[$rem$i$i800 >> 2] | 0;
    $23 = $sub$i795;
    while (1) {
     $15 = $15 + 8 | 0;
     HEAP32[$nbits_total$i$i799 >> 2] = $15;
     $shl$i$i810 = $16 << 8;
     HEAP32[$rng$i >> 2] = $shl$i$i810;
     if ($17 >>> 0 < $$pre14$i$i807 >>> 0) {
      $18 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i813 = $17 + 1 | 0;
      HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i813;
      $658 = $inc$i$i$i813;
      $cond$i$i$i817 = HEAPU8[$18 + $17 >> 0] | 0;
     } else {
      $658 = $17;
      $cond$i$i$i817 = 0;
     }
     HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i817;
     $and7$i$i823 = ($23 << 8 & 2147483392 | ($cond$i$i$i817 | $20 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i >> 2] = $and7$i$i823;
     if ($shl$i$i810 >>> 0 >= 8388609) {
      $656 = $and7$i$i823;
      $657 = $shl$i$i810;
      break;
     } else {
      $16 = $shl$i$i810;
      $17 = $658;
      $20 = $cond$i$i$i817;
      $23 = $and7$i$i823;
     }
    }
   } else {
    $656 = $sub$i795;
    $657 = $sub3$i796;
   }
   $arrayidx10 = $sum_pulses + ($i$060 << 2) | 0;
   HEAP32[$arrayidx10 >> 2] = $ret$0$i788;
   if (($ret$0$i788 | 0) == 17) {
    $24 = 0;
    $25 = $657;
    $27 = $656;
    while (1) {
     $24 = $24 + 1 | 0;
     $add$ptr = 25282 + (($24 | 0) == 10 & 1) | 0;
     $shr$i743 = $25 >>> 8;
     $ret$0$i745 = -1;
     $s$0$i744 = $25;
     while (1) {
      $ret$0$i745 = $ret$0$i745 + 1 | 0;
      $mul$i749 = Math_imul($shr$i743, HEAPU8[$add$ptr + $ret$0$i745 >> 0] | 0) | 0;
      if ($27 >>> 0 >= $mul$i749 >>> 0) break; else $s$0$i744 = $mul$i749;
     }
     $sub$i752 = $27 - $mul$i749 | 0;
     HEAP32[$val$i >> 2] = $sub$i752;
     $sub3$i753 = $s$0$i744 - $mul$i749 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i753;
     if ($sub3$i753 >>> 0 < 8388609) {
      $$pre14$i$i764 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $28 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $29 = $sub3$i753;
      $30 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $33 = HEAP32[$rem$i$i800 >> 2] | 0;
      $36 = $sub$i752;
      while (1) {
       $28 = $28 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $28;
       $shl$i$i767 = $29 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i767;
       if ($30 >>> 0 < $$pre14$i$i764 >>> 0) {
        $31 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i770 = $30 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i770;
        $663 = $inc$i$i$i770;
        $cond$i$i$i774 = HEAPU8[$31 + $30 >> 0] | 0;
       } else {
        $663 = $30;
        $cond$i$i$i774 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i774;
       $and7$i$i780 = ($36 << 8 & 2147483392 | ($cond$i$i$i774 | $33 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i780;
       if ($shl$i$i767 >>> 0 >= 8388609) {
        $661 = $and7$i$i780;
        $662 = $shl$i$i767;
        break;
       } else {
        $29 = $shl$i$i767;
        $30 = $663;
        $33 = $cond$i$i$i774;
        $36 = $and7$i$i780;
       }
      }
     } else {
      $661 = $sub$i752;
      $662 = $sub3$i753;
     }
     if (($ret$0$i745 | 0) != 17) break; else {
      $25 = $662;
      $27 = $661;
     }
    }
    HEAP32[$arrayidx8 >> 2] = $24;
    HEAP32[$arrayidx10 >> 2] = $ret$0$i745;
    $659 = $661;
    $660 = $662;
   } else {
    $659 = $656;
    $660 = $657;
   }
   $i$060 = $i$060 + 1 | 0;
   if (($i$060 | 0) == ($iter$068 | 0)) break; else {
    $12 = $660;
    $14 = $659;
   }
  }
  $i$157 = 0;
  do {
   $37 = HEAP32[$sum_pulses + ($i$157 << 2) >> 2] | 0;
   $arrayidx31 = $pulses + ($i$157 << 16 >> 12 << 1) | 0;
   if (($37 | 0) > 0) {
    $arrayidx1$i$i = 26032 + (HEAPU8[26192 + $37 >> 0] | 0) | 0;
    $39 = HEAP32[$rng$i >> 2] | 0;
    $40 = HEAP32[$val$i >> 2] | 0;
    $shr$i$i700 = $39 >>> 8;
    $ret$0$i$i702 = -1;
    $s$0$i$i701 = $39;
    while (1) {
     $ret$0$i$i702 = $ret$0$i$i702 + 1 | 0;
     $mul$i$i705 = Math_imul($shr$i$i700, HEAPU8[$arrayidx1$i$i + $ret$0$i$i702 >> 0] | 0) | 0;
     if ($40 >>> 0 >= $mul$i$i705 >>> 0) break; else $s$0$i$i701 = $mul$i$i705;
    }
    $sub$i3$i = $40 - $mul$i$i705 | 0;
    HEAP32[$val$i >> 2] = $sub$i3$i;
    $sub3$i$i707 = $s$0$i$i701 - $mul$i$i705 | 0;
    HEAP32[$rng$i >> 2] = $sub3$i$i707;
    if ($sub3$i$i707 >>> 0 < 8388609) {
     $$pre14$i$i$i718 = HEAP32[$storage$i$i$i802 >> 2] | 0;
     $42 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
     $43 = $sub3$i$i707;
     $44 = HEAP32[$offs$i$i$i801 >> 2] | 0;
     $47 = HEAP32[$rem$i$i800 >> 2] | 0;
     $50 = $sub$i3$i;
     while (1) {
      $42 = $42 + 8 | 0;
      HEAP32[$nbits_total$i$i799 >> 2] = $42;
      $shl$i$i$i721 = $43 << 8;
      HEAP32[$rng$i >> 2] = $shl$i$i$i721;
      if ($44 >>> 0 < $$pre14$i$i$i718 >>> 0) {
       $45 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i$i724 = $44 + 1 | 0;
       HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i$i724;
       $664 = $inc$i$i$i$i724;
       $cond$i$i$i$i728 = HEAPU8[$45 + $44 >> 0] | 0;
      } else {
       $664 = $44;
       $cond$i$i$i$i728 = 0;
      }
      HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i$i728;
      $and7$i$i$i734 = ($50 << 8 & 2147483392 | ($cond$i$i$i$i728 | $47 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $and7$i$i$i734;
      if ($shl$i$i$i721 >>> 0 >= 8388609) {
       $52 = $shl$i$i$i721;
       $54 = $and7$i$i$i734;
       break;
      } else {
       $43 = $shl$i$i$i721;
       $44 = $664;
       $47 = $cond$i$i$i$i728;
       $50 = $and7$i$i$i734;
      }
     }
    } else {
     $52 = $sub3$i$i707;
     $54 = $sub$i3$i;
    }
    $phitmp226$i = $37 - $ret$0$i$i702 << 16;
    $phitmp227$i = $phitmp226$i >> 16;
    $sext$i738 = $ret$0$i$i702 << 16;
    $conv$i739 = $sext$i738 >> 16;
    if (($sext$i738 | 0) > 0) {
     $arrayidx1$i33$i = 25872 + (HEAPU8[26192 + $conv$i739 >> 0] | 0) | 0;
     $shr$i567$i = $52 >>> 8;
     $ret$0$i569$i = -1;
     $s$0$i568$i = $52;
     while (1) {
      $ret$0$i569$i = $ret$0$i569$i + 1 | 0;
      $mul$i573$i = Math_imul($shr$i567$i, HEAPU8[$arrayidx1$i33$i + $ret$0$i569$i >> 0] | 0) | 0;
      if ($54 >>> 0 >= $mul$i573$i >>> 0) break; else $s$0$i568$i = $mul$i573$i;
     }
     $sub$i576$i = $54 - $mul$i573$i | 0;
     HEAP32[$val$i >> 2] = $sub$i576$i;
     $sub3$i577$i = $s$0$i568$i - $mul$i573$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i577$i;
     if ($sub3$i577$i >>> 0 < 8388609) {
      $$pre14$i$i588$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $55 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $56 = $sub3$i577$i;
      $57 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $60 = HEAP32[$rem$i$i800 >> 2] | 0;
      $63 = $sub$i576$i;
      while (1) {
       $55 = $55 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $55;
       $shl$i$i591$i = $56 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i591$i;
       if ($57 >>> 0 < $$pre14$i$i588$i >>> 0) {
        $58 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i594$i = $57 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i594$i;
        $667 = $inc$i$i$i594$i;
        $cond$i$i$i598$i = HEAPU8[$58 + $57 >> 0] | 0;
       } else {
        $667 = $57;
        $cond$i$i$i598$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i598$i;
       $and7$i$i604$i = ($63 << 8 & 2147483392 | ($cond$i$i$i598$i | $60 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i604$i;
       if ($shl$i$i591$i >>> 0 >= 8388609) {
        $65 = $shl$i$i591$i;
        $67 = $and7$i$i604$i;
        break;
       } else {
        $56 = $shl$i$i591$i;
        $57 = $667;
        $60 = $cond$i$i$i598$i;
        $63 = $and7$i$i604$i;
       }
      }
     } else {
      $65 = $sub3$i577$i;
      $67 = $sub$i576$i;
     }
     $phitmp218$i = $conv$i739 - $ret$0$i569$i << 16 >> 16;
     $sext212$i = $ret$0$i569$i << 16;
     $conv8$i = $sext212$i >> 16;
     if (($sext212$i | 0) > 0) {
      $arrayidx1$i45$i = 25712 + (HEAPU8[26192 + $conv8$i >> 0] | 0) | 0;
      $shr$i524$i = $65 >>> 8;
      $ret$0$i526$i = -1;
      $s$0$i525$i = $65;
      while (1) {
       $ret$0$i526$i = $ret$0$i526$i + 1 | 0;
       $mul$i530$i = Math_imul($shr$i524$i, HEAPU8[$arrayidx1$i45$i + $ret$0$i526$i >> 0] | 0) | 0;
       if ($67 >>> 0 >= $mul$i530$i >>> 0) break; else $s$0$i525$i = $mul$i530$i;
      }
      $sub$i533$i = $67 - $mul$i530$i | 0;
      HEAP32[$val$i >> 2] = $sub$i533$i;
      $sub3$i534$i = $s$0$i525$i - $mul$i530$i | 0;
      HEAP32[$rng$i >> 2] = $sub3$i534$i;
      if ($sub3$i534$i >>> 0 < 8388609) {
       $$pre14$i$i545$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
       $68 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
       $69 = $sub3$i534$i;
       $70 = HEAP32[$offs$i$i$i801 >> 2] | 0;
       $73 = HEAP32[$rem$i$i800 >> 2] | 0;
       $76 = $sub$i533$i;
       while (1) {
        $68 = $68 + 8 | 0;
        HEAP32[$nbits_total$i$i799 >> 2] = $68;
        $shl$i$i548$i = $69 << 8;
        HEAP32[$rng$i >> 2] = $shl$i$i548$i;
        if ($70 >>> 0 < $$pre14$i$i545$i >>> 0) {
         $71 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i551$i = $70 + 1 | 0;
         HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i551$i;
         $670 = $inc$i$i$i551$i;
         $cond$i$i$i555$i = HEAPU8[$71 + $70 >> 0] | 0;
        } else {
         $670 = $70;
         $cond$i$i$i555$i = 0;
        }
        HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i555$i;
        $and7$i$i561$i = ($76 << 8 & 2147483392 | ($cond$i$i$i555$i | $73 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $and7$i$i561$i;
        if ($shl$i$i548$i >>> 0 >= 8388609) {
         $78 = $shl$i$i548$i;
         $80 = $and7$i$i561$i;
         break;
        } else {
         $69 = $shl$i$i548$i;
         $70 = $670;
         $73 = $cond$i$i$i555$i;
         $76 = $and7$i$i561$i;
        }
       }
      } else {
       $78 = $sub3$i534$i;
       $80 = $sub$i533$i;
      }
      $phitmp215$i = $conv8$i - $ret$0$i526$i << 16 >> 16;
      $arrayidx10$i = $arrayidx31 + 2 | 0;
      $sext213$i = $ret$0$i526$i << 16;
      $conv12$i = $sext213$i >> 16;
      if (($sext213$i | 0) > 0) {
       $arrayidx1$i57$i = 25552 + (HEAPU8[26192 + $conv12$i >> 0] | 0) | 0;
       $shr$i481$i = $78 >>> 8;
       $ret$0$i483$i = -1;
       $s$0$i482$i = $78;
       while (1) {
        $ret$0$i483$i = $ret$0$i483$i + 1 | 0;
        $mul$i487$i = Math_imul($shr$i481$i, HEAPU8[$arrayidx1$i57$i + $ret$0$i483$i >> 0] | 0) | 0;
        if ($80 >>> 0 >= $mul$i487$i >>> 0) break; else $s$0$i482$i = $mul$i487$i;
       }
       $sub$i490$i = $80 - $mul$i487$i | 0;
       HEAP32[$val$i >> 2] = $sub$i490$i;
       $sub3$i491$i = $s$0$i482$i - $mul$i487$i | 0;
       HEAP32[$rng$i >> 2] = $sub3$i491$i;
       if ($sub3$i491$i >>> 0 < 8388609) {
        $$pre14$i$i502$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
        $81 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
        $82 = $sub3$i491$i;
        $83 = HEAP32[$offs$i$i$i801 >> 2] | 0;
        $86 = HEAP32[$rem$i$i800 >> 2] | 0;
        $89 = $sub$i490$i;
        while (1) {
         $81 = $81 + 8 | 0;
         HEAP32[$nbits_total$i$i799 >> 2] = $81;
         $shl$i$i505$i = $82 << 8;
         HEAP32[$rng$i >> 2] = $shl$i$i505$i;
         if ($83 >>> 0 < $$pre14$i$i502$i >>> 0) {
          $84 = HEAP32[$psRangeDec >> 2] | 0;
          $inc$i$i$i508$i = $83 + 1 | 0;
          HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i508$i;
          $673 = $inc$i$i$i508$i;
          $cond$i$i$i512$i = HEAPU8[$84 + $83 >> 0] | 0;
         } else {
          $673 = $83;
          $cond$i$i$i512$i = 0;
         }
         HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i512$i;
         $and7$i$i518$i = ($89 << 8 & 2147483392 | ($cond$i$i$i512$i | $86 << 8) >>> 1 & 255) ^ 255;
         HEAP32[$val$i >> 2] = $and7$i$i518$i;
         if ($shl$i$i505$i >>> 0 >= 8388609) {
          $671 = $and7$i$i518$i;
          $672 = $shl$i$i505$i;
          break;
         } else {
          $82 = $shl$i$i505$i;
          $83 = $673;
          $86 = $cond$i$i$i512$i;
          $89 = $and7$i$i518$i;
         }
        }
       } else {
        $671 = $sub$i490$i;
        $672 = $sub3$i491$i;
       }
       HEAP16[$arrayidx31 >> 1] = $ret$0$i483$i;
       $91 = $672;
       $93 = $671;
       $arrayidx10265$i = $arrayidx10$i;
       $storemerge$i40254259$i = $phitmp218$i;
       $storemerge$i52263$i = $phitmp215$i;
       $storemerge$i64$i = $conv12$i - $ret$0$i483$i & 65535;
      } else {
       $668 = $80;
       $669 = $78;
       $arrayidx10266$i = $arrayidx10$i;
       $storemerge$i40254260$i = $phitmp218$i;
       $storemerge$i52264$i = $phitmp215$i;
       label = 67;
      }
     } else {
      $665 = $67;
      $666 = $65;
      $storemerge$i40254$ph$i = $phitmp218$i;
      label = 50;
     }
    } else {
     $665 = $54;
     $666 = $52;
     $storemerge$i40254$ph$i = 0;
     label = 50;
    }
    if ((label | 0) == 50) {
     label = 0;
     $668 = $665;
     $669 = $666;
     $arrayidx10266$i = $arrayidx31 + 2 | 0;
     $storemerge$i40254260$i = $storemerge$i40254$ph$i;
     $storemerge$i52264$i = 0;
     label = 67;
    }
    if ((label | 0) == 67) {
     label = 0;
     HEAP16[$arrayidx31 >> 1] = 0;
     $91 = $669;
     $93 = $668;
     $arrayidx10265$i = $arrayidx10266$i;
     $storemerge$i40254259$i = $storemerge$i40254260$i;
     $storemerge$i52263$i = $storemerge$i52264$i;
     $storemerge$i64$i = 0;
    }
    HEAP16[$arrayidx10265$i >> 1] = $storemerge$i64$i;
    $arrayidx13$i = $arrayidx31 + 4 | 0;
    $arrayidx14$i = $arrayidx31 + 6 | 0;
    if (($storemerge$i52263$i | 0) > 0) {
     $arrayidx1$i69$i = 25552 + (HEAPU8[26192 + $storemerge$i52263$i >> 0] | 0) | 0;
     $shr$i438$i = $91 >>> 8;
     $ret$0$i440$i = -1;
     $s$0$i439$i = $91;
     while (1) {
      $ret$0$i440$i = $ret$0$i440$i + 1 | 0;
      $mul$i444$i = Math_imul($shr$i438$i, HEAPU8[$arrayidx1$i69$i + $ret$0$i440$i >> 0] | 0) | 0;
      if ($93 >>> 0 >= $mul$i444$i >>> 0) break; else $s$0$i439$i = $mul$i444$i;
     }
     $sub$i447$i = $93 - $mul$i444$i | 0;
     HEAP32[$val$i >> 2] = $sub$i447$i;
     $sub3$i448$i = $s$0$i439$i - $mul$i444$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i448$i;
     if ($sub3$i448$i >>> 0 < 8388609) {
      $$pre14$i$i459$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $102 = $sub$i447$i;
      $94 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $95 = $sub3$i448$i;
      $96 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $99 = HEAP32[$rem$i$i800 >> 2] | 0;
      while (1) {
       $94 = $94 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $94;
       $shl$i$i462$i = $95 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i462$i;
       if ($96 >>> 0 < $$pre14$i$i459$i >>> 0) {
        $97 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i465$i = $96 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i465$i;
        $676 = $inc$i$i$i465$i;
        $cond$i$i$i469$i = HEAPU8[$97 + $96 >> 0] | 0;
       } else {
        $676 = $96;
        $cond$i$i$i469$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i469$i;
       $and7$i$i475$i = ($102 << 8 & 2147483392 | ($cond$i$i$i469$i | $99 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i475$i;
       if ($shl$i$i462$i >>> 0 >= 8388609) {
        $674 = $and7$i$i475$i;
        $675 = $shl$i$i462$i;
        break;
       } else {
        $102 = $and7$i$i475$i;
        $95 = $shl$i$i462$i;
        $96 = $676;
        $99 = $cond$i$i$i469$i;
       }
      }
     } else {
      $674 = $sub$i447$i;
      $675 = $sub3$i448$i;
     }
     HEAP16[$arrayidx13$i >> 1] = $ret$0$i440$i;
     $104 = $675;
     $106 = $674;
     $storemerge$i76$i = $storemerge$i52263$i - $ret$0$i440$i & 65535;
    } else {
     HEAP16[$arrayidx13$i >> 1] = 0;
     $104 = $91;
     $106 = $93;
     $storemerge$i76$i = 0;
    }
    HEAP16[$arrayidx14$i >> 1] = $storemerge$i76$i;
    if (($storemerge$i40254259$i | 0) > 0) {
     $arrayidx1$i81$i = 25712 + (HEAPU8[26192 + $storemerge$i40254259$i >> 0] | 0) | 0;
     $shr$i395$i = $104 >>> 8;
     $ret$0$i397$i = -1;
     $s$0$i396$i = $104;
     while (1) {
      $ret$0$i397$i = $ret$0$i397$i + 1 | 0;
      $mul$i401$i = Math_imul($shr$i395$i, HEAPU8[$arrayidx1$i81$i + $ret$0$i397$i >> 0] | 0) | 0;
      if ($106 >>> 0 >= $mul$i401$i >>> 0) break; else $s$0$i396$i = $mul$i401$i;
     }
     $sub$i404$i = $106 - $mul$i401$i | 0;
     HEAP32[$val$i >> 2] = $sub$i404$i;
     $sub3$i405$i = $s$0$i396$i - $mul$i401$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i405$i;
     if ($sub3$i405$i >>> 0 < 8388609) {
      $$pre14$i$i416$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $107 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $108 = $sub3$i405$i;
      $109 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $112 = HEAP32[$rem$i$i800 >> 2] | 0;
      $115 = $sub$i404$i;
      while (1) {
       $107 = $107 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $107;
       $shl$i$i419$i = $108 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i419$i;
       if ($109 >>> 0 < $$pre14$i$i416$i >>> 0) {
        $110 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i422$i = $109 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i422$i;
        $679 = $inc$i$i$i422$i;
        $cond$i$i$i426$i = HEAPU8[$110 + $109 >> 0] | 0;
       } else {
        $679 = $109;
        $cond$i$i$i426$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i426$i;
       $and7$i$i432$i = ($115 << 8 & 2147483392 | ($cond$i$i$i426$i | $112 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i432$i;
       if ($shl$i$i419$i >>> 0 >= 8388609) {
        $117 = $shl$i$i419$i;
        $119 = $and7$i$i432$i;
        break;
       } else {
        $108 = $shl$i$i419$i;
        $109 = $679;
        $112 = $cond$i$i$i426$i;
        $115 = $and7$i$i432$i;
       }
      }
     } else {
      $117 = $sub3$i405$i;
      $119 = $sub$i404$i;
     }
     $phitmp220$i = $ret$0$i397$i << 16;
     $phitmp221$i = $phitmp220$i >> 16;
     $phitmp224$i = $storemerge$i40254259$i - $ret$0$i397$i << 16 >> 16;
     $arrayidx21$i = $arrayidx31 + 8 | 0;
     $arrayidx22$i = $arrayidx31 + 10 | 0;
     if (($phitmp220$i | 0) > 0) {
      $arrayidx1$i93$i = 25552 + (HEAPU8[26192 + $phitmp221$i >> 0] | 0) | 0;
      $shr$i352$i = $117 >>> 8;
      $ret$0$i354$i = -1;
      $s$0$i353$i = $117;
      while (1) {
       $ret$0$i354$i = $ret$0$i354$i + 1 | 0;
       $mul$i358$i = Math_imul($shr$i352$i, HEAPU8[$arrayidx1$i93$i + $ret$0$i354$i >> 0] | 0) | 0;
       if ($119 >>> 0 >= $mul$i358$i >>> 0) break; else $s$0$i353$i = $mul$i358$i;
      }
      $sub$i361$i = $119 - $mul$i358$i | 0;
      HEAP32[$val$i >> 2] = $sub$i361$i;
      $sub3$i362$i = $s$0$i353$i - $mul$i358$i | 0;
      HEAP32[$rng$i >> 2] = $sub3$i362$i;
      if ($sub3$i362$i >>> 0 < 8388609) {
       $$pre14$i$i373$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
       $120 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
       $121 = $sub3$i362$i;
       $122 = HEAP32[$offs$i$i$i801 >> 2] | 0;
       $125 = HEAP32[$rem$i$i800 >> 2] | 0;
       $128 = $sub$i361$i;
       while (1) {
        $120 = $120 + 8 | 0;
        HEAP32[$nbits_total$i$i799 >> 2] = $120;
        $shl$i$i376$i = $121 << 8;
        HEAP32[$rng$i >> 2] = $shl$i$i376$i;
        if ($122 >>> 0 < $$pre14$i$i373$i >>> 0) {
         $123 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i379$i = $122 + 1 | 0;
         HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i379$i;
         $682 = $inc$i$i$i379$i;
         $cond$i$i$i383$i = HEAPU8[$123 + $122 >> 0] | 0;
        } else {
         $682 = $122;
         $cond$i$i$i383$i = 0;
        }
        HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i383$i;
        $and7$i$i389$i = ($128 << 8 & 2147483392 | ($cond$i$i$i383$i | $125 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $and7$i$i389$i;
        if ($shl$i$i376$i >>> 0 >= 8388609) {
         $680 = $and7$i$i389$i;
         $681 = $shl$i$i376$i;
         break;
        } else {
         $121 = $shl$i$i376$i;
         $122 = $682;
         $125 = $cond$i$i$i383$i;
         $128 = $and7$i$i389$i;
        }
       }
      } else {
       $680 = $sub$i361$i;
       $681 = $sub3$i362$i;
      }
      HEAP16[$arrayidx21$i >> 1] = $ret$0$i354$i;
      $130 = $681;
      $132 = $680;
      $arrayidx22273$i = $arrayidx22$i;
      $storemerge$i100$i = $phitmp221$i - $ret$0$i354$i & 65535;
      $storemerge$i88270$i = $phitmp224$i;
     } else {
      $677 = $119;
      $678 = $117;
      $arrayidx21272$i = $arrayidx21$i;
      $arrayidx22274$i = $arrayidx22$i;
      $storemerge$i88271$i = $phitmp224$i;
      label = 96;
     }
    } else {
     $677 = $106;
     $678 = $104;
     $arrayidx21272$i = $arrayidx31 + 8 | 0;
     $arrayidx22274$i = $arrayidx31 + 10 | 0;
     $storemerge$i88271$i = 0;
     label = 96;
    }
    if ((label | 0) == 96) {
     label = 0;
     HEAP16[$arrayidx21272$i >> 1] = 0;
     $130 = $678;
     $132 = $677;
     $arrayidx22273$i = $arrayidx22274$i;
     $storemerge$i100$i = 0;
     $storemerge$i88270$i = $storemerge$i88271$i;
    }
    HEAP16[$arrayidx22273$i >> 1] = $storemerge$i100$i;
    $arrayidx25$i = $arrayidx31 + 12 | 0;
    $arrayidx26$i = $arrayidx31 + 14 | 0;
    if (($storemerge$i88270$i | 0) > 0) {
     $arrayidx1$i105$i = 25552 + (HEAPU8[26192 + $storemerge$i88270$i >> 0] | 0) | 0;
     $shr$i309$i = $130 >>> 8;
     $ret$0$i311$i = -1;
     $s$0$i310$i = $130;
     while (1) {
      $ret$0$i311$i = $ret$0$i311$i + 1 | 0;
      $mul$i315$i = Math_imul($shr$i309$i, HEAPU8[$arrayidx1$i105$i + $ret$0$i311$i >> 0] | 0) | 0;
      if ($132 >>> 0 >= $mul$i315$i >>> 0) break; else $s$0$i310$i = $mul$i315$i;
     }
     $sub$i318$i = $132 - $mul$i315$i | 0;
     HEAP32[$val$i >> 2] = $sub$i318$i;
     $sub3$i319$i = $s$0$i310$i - $mul$i315$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i319$i;
     if ($sub3$i319$i >>> 0 < 8388609) {
      $$pre14$i$i330$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $133 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $134 = $sub3$i319$i;
      $135 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $138 = HEAP32[$rem$i$i800 >> 2] | 0;
      $141 = $sub$i318$i;
      while (1) {
       $133 = $133 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $133;
       $shl$i$i333$i = $134 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i333$i;
       if ($135 >>> 0 < $$pre14$i$i330$i >>> 0) {
        $136 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i336$i = $135 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i336$i;
        $685 = $inc$i$i$i336$i;
        $cond$i$i$i340$i = HEAPU8[$136 + $135 >> 0] | 0;
       } else {
        $685 = $135;
        $cond$i$i$i340$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i340$i;
       $and7$i$i346$i = ($141 << 8 & 2147483392 | ($cond$i$i$i340$i | $138 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i346$i;
       if ($shl$i$i333$i >>> 0 >= 8388609) {
        $683 = $and7$i$i346$i;
        $684 = $shl$i$i333$i;
        break;
       } else {
        $134 = $shl$i$i333$i;
        $135 = $685;
        $138 = $cond$i$i$i340$i;
        $141 = $and7$i$i346$i;
       }
      }
     } else {
      $683 = $sub$i318$i;
      $684 = $sub3$i319$i;
     }
     HEAP16[$arrayidx25$i >> 1] = $ret$0$i311$i;
     $143 = $684;
     $145 = $683;
     $storemerge$i112$i = $storemerge$i88270$i - $ret$0$i311$i & 65535;
    } else {
     HEAP16[$arrayidx25$i >> 1] = 0;
     $143 = $130;
     $145 = $132;
     $storemerge$i112$i = 0;
    }
    HEAP16[$arrayidx26$i >> 1] = $storemerge$i112$i;
    if (($phitmp226$i | 0) > 0) {
     $arrayidx1$i117$i = 25872 + (HEAPU8[26192 + $phitmp227$i >> 0] | 0) | 0;
     $shr$i266$i = $143 >>> 8;
     $ret$0$i268$i = -1;
     $s$0$i267$i = $143;
     while (1) {
      $ret$0$i268$i = $ret$0$i268$i + 1 | 0;
      $mul$i272$i = Math_imul($shr$i266$i, HEAPU8[$arrayidx1$i117$i + $ret$0$i268$i >> 0] | 0) | 0;
      if ($145 >>> 0 >= $mul$i272$i >>> 0) break; else $s$0$i267$i = $mul$i272$i;
     }
     $sub$i275$i = $145 - $mul$i272$i | 0;
     HEAP32[$val$i >> 2] = $sub$i275$i;
     $sub3$i276$i = $s$0$i267$i - $mul$i272$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i276$i;
     if ($sub3$i276$i >>> 0 < 8388609) {
      $$pre14$i$i287$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $146 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $147 = $sub3$i276$i;
      $148 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $151 = HEAP32[$rem$i$i800 >> 2] | 0;
      $154 = $sub$i275$i;
      while (1) {
       $146 = $146 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $146;
       $shl$i$i290$i = $147 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i290$i;
       if ($148 >>> 0 < $$pre14$i$i287$i >>> 0) {
        $149 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i293$i = $148 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i293$i;
        $688 = $inc$i$i$i293$i;
        $cond$i$i$i297$i = HEAPU8[$149 + $148 >> 0] | 0;
       } else {
        $688 = $148;
        $cond$i$i$i297$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i297$i;
       $and7$i$i303$i = ($154 << 8 & 2147483392 | ($cond$i$i$i297$i | $151 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i303$i;
       if ($shl$i$i290$i >>> 0 >= 8388609) {
        $156 = $shl$i$i290$i;
        $158 = $and7$i$i303$i;
        break;
       } else {
        $147 = $shl$i$i290$i;
        $148 = $688;
        $151 = $cond$i$i$i297$i;
        $154 = $and7$i$i303$i;
       }
      }
     } else {
      $156 = $sub3$i276$i;
      $158 = $sub$i275$i;
     }
     $phitmp229$i = $ret$0$i268$i << 16;
     $phitmp230$i = $phitmp229$i >> 16;
     $phitmp239$i = $phitmp227$i - $ret$0$i268$i << 16 >> 16;
     if (($phitmp229$i | 0) > 0) {
      $arrayidx1$i129$i = 25712 + (HEAPU8[26192 + $phitmp230$i >> 0] | 0) | 0;
      $shr$i223$i = $156 >>> 8;
      $ret$0$i225$i = -1;
      $s$0$i224$i = $156;
      while (1) {
       $ret$0$i225$i = $ret$0$i225$i + 1 | 0;
       $mul$i229$i = Math_imul($shr$i223$i, HEAPU8[$arrayidx1$i129$i + $ret$0$i225$i >> 0] | 0) | 0;
       if ($158 >>> 0 >= $mul$i229$i >>> 0) break; else $s$0$i224$i = $mul$i229$i;
      }
      $sub$i232$i = $158 - $mul$i229$i | 0;
      HEAP32[$val$i >> 2] = $sub$i232$i;
      $sub3$i233$i = $s$0$i224$i - $mul$i229$i | 0;
      HEAP32[$rng$i >> 2] = $sub3$i233$i;
      if ($sub3$i233$i >>> 0 < 8388609) {
       $$pre14$i$i244$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
       $159 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
       $160 = $sub3$i233$i;
       $161 = HEAP32[$offs$i$i$i801 >> 2] | 0;
       $164 = HEAP32[$rem$i$i800 >> 2] | 0;
       $167 = $sub$i232$i;
       while (1) {
        $159 = $159 + 8 | 0;
        HEAP32[$nbits_total$i$i799 >> 2] = $159;
        $shl$i$i247$i = $160 << 8;
        HEAP32[$rng$i >> 2] = $shl$i$i247$i;
        if ($161 >>> 0 < $$pre14$i$i244$i >>> 0) {
         $162 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i250$i = $161 + 1 | 0;
         HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i250$i;
         $691 = $inc$i$i$i250$i;
         $cond$i$i$i254$i = HEAPU8[$162 + $161 >> 0] | 0;
        } else {
         $691 = $161;
         $cond$i$i$i254$i = 0;
        }
        HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i254$i;
        $and7$i$i260$i = ($167 << 8 & 2147483392 | ($cond$i$i$i254$i | $164 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $and7$i$i260$i;
        if ($shl$i$i247$i >>> 0 >= 8388609) {
         $169 = $shl$i$i247$i;
         $171 = $and7$i$i260$i;
         break;
        } else {
         $160 = $shl$i$i247$i;
         $161 = $691;
         $164 = $cond$i$i$i254$i;
         $167 = $and7$i$i260$i;
        }
       }
      } else {
       $169 = $sub3$i233$i;
       $171 = $sub$i232$i;
      }
      $phitmp232$i = $ret$0$i225$i << 16;
      $phitmp233$i = $phitmp232$i >> 16;
      $phitmp236$i = $phitmp230$i - $ret$0$i225$i << 16 >> 16;
      $arrayidx37$i = $arrayidx31 + 16 | 0;
      $arrayidx38$i = $arrayidx31 + 18 | 0;
      if (($phitmp232$i | 0) > 0) {
       $arrayidx1$i141$i = 25552 + (HEAPU8[26192 + $phitmp233$i >> 0] | 0) | 0;
       $shr$i179$i = $169 >>> 8;
       $ret$0$i181$i = -1;
       $s$0$i180$i = $169;
       while (1) {
        $ret$0$i181$i = $ret$0$i181$i + 1 | 0;
        $mul$i185$i = Math_imul($shr$i179$i, HEAPU8[$arrayidx1$i141$i + $ret$0$i181$i >> 0] | 0) | 0;
        if ($171 >>> 0 >= $mul$i185$i >>> 0) break; else $s$0$i180$i = $mul$i185$i;
       }
       $sub$i189$i = $171 - $mul$i185$i | 0;
       HEAP32[$val$i >> 2] = $sub$i189$i;
       $sub3$i190$i = $s$0$i180$i - $mul$i185$i | 0;
       HEAP32[$rng$i >> 2] = $sub3$i190$i;
       if ($sub3$i190$i >>> 0 < 8388609) {
        $$pre14$i$i201$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
        $172 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
        $173 = $sub3$i190$i;
        $174 = HEAP32[$offs$i$i$i801 >> 2] | 0;
        $177 = HEAP32[$rem$i$i800 >> 2] | 0;
        $180 = $sub$i189$i;
        while (1) {
         $172 = $172 + 8 | 0;
         HEAP32[$nbits_total$i$i799 >> 2] = $172;
         $shl$i$i204$i = $173 << 8;
         HEAP32[$rng$i >> 2] = $shl$i$i204$i;
         if ($174 >>> 0 < $$pre14$i$i201$i >>> 0) {
          $175 = HEAP32[$psRangeDec >> 2] | 0;
          $inc$i$i$i207$i = $174 + 1 | 0;
          HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i207$i;
          $694 = $inc$i$i$i207$i;
          $cond$i$i$i211$i = HEAPU8[$175 + $174 >> 0] | 0;
         } else {
          $694 = $174;
          $cond$i$i$i211$i = 0;
         }
         HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i211$i;
         $and7$i$i217$i = ($180 << 8 & 2147483392 | ($cond$i$i$i211$i | $177 << 8) >>> 1 & 255) ^ 255;
         HEAP32[$val$i >> 2] = $and7$i$i217$i;
         if ($shl$i$i204$i >>> 0 >= 8388609) {
          $692 = $and7$i$i217$i;
          $693 = $shl$i$i204$i;
          break;
         } else {
          $173 = $shl$i$i204$i;
          $174 = $694;
          $177 = $cond$i$i$i211$i;
          $180 = $and7$i$i217$i;
         }
        }
       } else {
        $692 = $sub$i189$i;
        $693 = $sub3$i190$i;
       }
       HEAP16[$arrayidx37$i >> 1] = $ret$0$i181$i;
       $182 = $693;
       $184 = $692;
       $arrayidx38285$i = $arrayidx38$i;
       $storemerge$i124276280$i = $phitmp239$i;
       $storemerge$i136282$i = $phitmp236$i;
       $storemerge$i148$i = $phitmp233$i - $ret$0$i181$i & 65535;
      } else {
       $689 = $171;
       $690 = $169;
       $arrayidx37284$i = $arrayidx37$i;
       $arrayidx38286$i = $arrayidx38$i;
       $storemerge$i124276281$i = $phitmp239$i;
       $storemerge$i136283$i = $phitmp236$i;
       label = 133;
      }
     } else {
      $686 = $158;
      $687 = $156;
      $storemerge$i124276$ph$i = $phitmp239$i;
      label = 116;
     }
    } else {
     $686 = $145;
     $687 = $143;
     $storemerge$i124276$ph$i = 0;
     label = 116;
    }
    if ((label | 0) == 116) {
     label = 0;
     $689 = $686;
     $690 = $687;
     $arrayidx37284$i = $arrayidx31 + 16 | 0;
     $arrayidx38286$i = $arrayidx31 + 18 | 0;
     $storemerge$i124276281$i = $storemerge$i124276$ph$i;
     $storemerge$i136283$i = 0;
     label = 133;
    }
    if ((label | 0) == 133) {
     label = 0;
     HEAP16[$arrayidx37284$i >> 1] = 0;
     $182 = $690;
     $184 = $689;
     $arrayidx38285$i = $arrayidx38286$i;
     $storemerge$i124276280$i = $storemerge$i124276281$i;
     $storemerge$i136282$i = $storemerge$i136283$i;
     $storemerge$i148$i = 0;
    }
    HEAP16[$arrayidx38285$i >> 1] = $storemerge$i148$i;
    $arrayidx41$i = $arrayidx31 + 20 | 0;
    $arrayidx42$i = $arrayidx31 + 22 | 0;
    if (($storemerge$i136282$i | 0) > 0) {
     $arrayidx1$i153$i = 25552 + (HEAPU8[26192 + $storemerge$i136282$i >> 0] | 0) | 0;
     $shr$i135$i = $182 >>> 8;
     $ret$0$i137$i = -1;
     $s$0$i136$i = $182;
     while (1) {
      $ret$0$i137$i = $ret$0$i137$i + 1 | 0;
      $mul$i142$i = Math_imul($shr$i135$i, HEAPU8[$arrayidx1$i153$i + $ret$0$i137$i >> 0] | 0) | 0;
      if ($184 >>> 0 >= $mul$i142$i >>> 0) break; else $s$0$i136$i = $mul$i142$i;
     }
     $sub$i145$i = $184 - $mul$i142$i | 0;
     HEAP32[$val$i >> 2] = $sub$i145$i;
     $sub3$i146$i = $s$0$i136$i - $mul$i142$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i146$i;
     if ($sub3$i146$i >>> 0 < 8388609) {
      $$pre14$i$i157$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $185 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $186 = $sub3$i146$i;
      $187 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $190 = HEAP32[$rem$i$i800 >> 2] | 0;
      $193 = $sub$i145$i;
      while (1) {
       $185 = $185 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $185;
       $shl$i$i160$i = $186 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i160$i;
       if ($187 >>> 0 < $$pre14$i$i157$i >>> 0) {
        $188 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i163$i = $187 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i163$i;
        $697 = $inc$i$i$i163$i;
        $cond$i$i$i167$i = HEAPU8[$188 + $187 >> 0] | 0;
       } else {
        $697 = $187;
        $cond$i$i$i167$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i167$i;
       $and7$i$i173$i = ($193 << 8 & 2147483392 | ($cond$i$i$i167$i | $190 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i173$i;
       if ($shl$i$i160$i >>> 0 >= 8388609) {
        $695 = $and7$i$i173$i;
        $696 = $shl$i$i160$i;
        break;
       } else {
        $186 = $shl$i$i160$i;
        $187 = $697;
        $190 = $cond$i$i$i167$i;
        $193 = $and7$i$i173$i;
       }
      }
     } else {
      $695 = $sub$i145$i;
      $696 = $sub3$i146$i;
     }
     HEAP16[$arrayidx41$i >> 1] = $ret$0$i137$i;
     $195 = $696;
     $197 = $695;
     $storemerge$i160$i = $storemerge$i136282$i - $ret$0$i137$i & 65535;
    } else {
     HEAP16[$arrayidx41$i >> 1] = 0;
     $195 = $182;
     $197 = $184;
     $storemerge$i160$i = 0;
    }
    HEAP16[$arrayidx42$i >> 1] = $storemerge$i160$i;
    if (($storemerge$i124276280$i | 0) > 0) {
     $arrayidx1$i165$i = 25712 + (HEAPU8[26192 + $storemerge$i124276280$i >> 0] | 0) | 0;
     $shr$i92$i = $195 >>> 8;
     $ret$0$i94$i = -1;
     $s$0$i93$i = $195;
     while (1) {
      $ret$0$i94$i = $ret$0$i94$i + 1 | 0;
      $mul$i98$i = Math_imul($shr$i92$i, HEAPU8[$arrayidx1$i165$i + $ret$0$i94$i >> 0] | 0) | 0;
      if ($197 >>> 0 >= $mul$i98$i >>> 0) break; else $s$0$i93$i = $mul$i98$i;
     }
     $sub$i101$i = $197 - $mul$i98$i | 0;
     HEAP32[$val$i >> 2] = $sub$i101$i;
     $sub3$i102$i = $s$0$i93$i - $mul$i98$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i102$i;
     if ($sub3$i102$i >>> 0 < 8388609) {
      $$pre14$i$i113$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $198 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $199 = $sub3$i102$i;
      $200 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $203 = HEAP32[$rem$i$i800 >> 2] | 0;
      $206 = $sub$i101$i;
      while (1) {
       $198 = $198 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $198;
       $shl$i$i116$i = $199 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i116$i;
       if ($200 >>> 0 < $$pre14$i$i113$i >>> 0) {
        $201 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i119$i = $200 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i119$i;
        $700 = $inc$i$i$i119$i;
        $cond$i$i$i123$i = HEAPU8[$201 + $200 >> 0] | 0;
       } else {
        $700 = $200;
        $cond$i$i$i123$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i123$i;
       $and7$i$i129$i = ($206 << 8 & 2147483392 | ($cond$i$i$i123$i | $203 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i129$i;
       if ($shl$i$i116$i >>> 0 >= 8388609) {
        $208 = $shl$i$i116$i;
        $210 = $and7$i$i129$i;
        break;
       } else {
        $199 = $shl$i$i116$i;
        $200 = $700;
        $203 = $cond$i$i$i123$i;
        $206 = $and7$i$i129$i;
       }
      }
     } else {
      $208 = $sub3$i102$i;
      $210 = $sub$i101$i;
     }
     $phitmp241$i = $ret$0$i94$i << 16;
     $phitmp242$i = $phitmp241$i >> 16;
     $phitmp245$i = $storemerge$i124276280$i - $ret$0$i94$i << 16 >> 16;
     $arrayidx49$i = $arrayidx31 + 24 | 0;
     $arrayidx50$i = $arrayidx31 + 26 | 0;
     if (($phitmp241$i | 0) > 0) {
      $arrayidx1$i177$i = 25552 + (HEAPU8[26192 + $phitmp242$i >> 0] | 0) | 0;
      $shr$i49$i = $208 >>> 8;
      $ret$0$i51$i = -1;
      $s$0$i50$i = $208;
      while (1) {
       $ret$0$i51$i = $ret$0$i51$i + 1 | 0;
       $mul$i55$i = Math_imul($shr$i49$i, HEAPU8[$arrayidx1$i177$i + $ret$0$i51$i >> 0] | 0) | 0;
       if ($210 >>> 0 >= $mul$i55$i >>> 0) break; else $s$0$i50$i = $mul$i55$i;
      }
      $sub$i58$i = $210 - $mul$i55$i | 0;
      HEAP32[$val$i >> 2] = $sub$i58$i;
      $sub3$i59$i = $s$0$i50$i - $mul$i55$i | 0;
      HEAP32[$rng$i >> 2] = $sub3$i59$i;
      if ($sub3$i59$i >>> 0 < 8388609) {
       $$pre14$i$i70$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
       $211 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
       $212 = $sub3$i59$i;
       $213 = HEAP32[$offs$i$i$i801 >> 2] | 0;
       $216 = HEAP32[$rem$i$i800 >> 2] | 0;
       $219 = $sub$i58$i;
       while (1) {
        $211 = $211 + 8 | 0;
        HEAP32[$nbits_total$i$i799 >> 2] = $211;
        $shl$i$i73$i = $212 << 8;
        HEAP32[$rng$i >> 2] = $shl$i$i73$i;
        if ($213 >>> 0 < $$pre14$i$i70$i >>> 0) {
         $214 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i76$i = $213 + 1 | 0;
         HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i76$i;
         $703 = $inc$i$i$i76$i;
         $cond$i$i$i80$i = HEAPU8[$214 + $213 >> 0] | 0;
        } else {
         $703 = $213;
         $cond$i$i$i80$i = 0;
        }
        HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i80$i;
        $and7$i$i86$i = ($219 << 8 & 2147483392 | ($cond$i$i$i80$i | $216 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $and7$i$i86$i;
        if ($shl$i$i73$i >>> 0 >= 8388609) {
         $701 = $and7$i$i86$i;
         $702 = $shl$i$i73$i;
         break;
        } else {
         $212 = $shl$i$i73$i;
         $213 = $703;
         $216 = $cond$i$i$i80$i;
         $219 = $and7$i$i86$i;
        }
       }
      } else {
       $701 = $sub$i58$i;
       $702 = $sub3$i59$i;
      }
      HEAP16[$arrayidx49$i >> 1] = $ret$0$i51$i;
      $221 = $702;
      $223 = $701;
      $arrayidx50293$i = $arrayidx50$i;
      $storemerge$i172290$i = $phitmp245$i;
      $storemerge$i184$i = $phitmp242$i - $ret$0$i51$i & 65535;
     } else {
      $698 = $210;
      $699 = $208;
      $arrayidx49292$i = $arrayidx49$i;
      $arrayidx50294$i = $arrayidx50$i;
      $storemerge$i172291$i = $phitmp245$i;
      label = 162;
     }
    } else {
     $698 = $197;
     $699 = $195;
     $arrayidx49292$i = $arrayidx31 + 24 | 0;
     $arrayidx50294$i = $arrayidx31 + 26 | 0;
     $storemerge$i172291$i = 0;
     label = 162;
    }
    if ((label | 0) == 162) {
     label = 0;
     HEAP16[$arrayidx49292$i >> 1] = 0;
     $221 = $699;
     $223 = $698;
     $arrayidx50293$i = $arrayidx50294$i;
     $storemerge$i172290$i = $storemerge$i172291$i;
     $storemerge$i184$i = 0;
    }
    HEAP16[$arrayidx50293$i >> 1] = $storemerge$i184$i;
    $arrayidx53$i = $arrayidx31 + 28 | 0;
    $arrayidx54$i = $arrayidx31 + 30 | 0;
    if (($storemerge$i172290$i | 0) > 0) {
     $arrayidx1$i189$i = 25552 + (HEAPU8[26192 + $storemerge$i172290$i >> 0] | 0) | 0;
     $shr$i6$i = $221 >>> 8;
     $ret$0$i8$i = -1;
     $s$0$i7$i = $221;
     while (1) {
      $ret$0$i8$i = $ret$0$i8$i + 1 | 0;
      $mul$i12$i = Math_imul($shr$i6$i, HEAPU8[$arrayidx1$i189$i + $ret$0$i8$i >> 0] | 0) | 0;
      if ($223 >>> 0 >= $mul$i12$i >>> 0) break; else $s$0$i7$i = $mul$i12$i;
     }
     $sub$i15$i = $223 - $mul$i12$i | 0;
     HEAP32[$val$i >> 2] = $sub$i15$i;
     $sub3$i16$i = $s$0$i7$i - $mul$i12$i | 0;
     HEAP32[$rng$i >> 2] = $sub3$i16$i;
     if ($sub3$i16$i >>> 0 < 8388609) {
      $$pre14$i$i27$i = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $224 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $225 = $sub3$i16$i;
      $226 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $229 = HEAP32[$rem$i$i800 >> 2] | 0;
      $232 = $sub$i15$i;
      while (1) {
       $224 = $224 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $224;
       $225 = $225 << 8;
       HEAP32[$rng$i >> 2] = $225;
       if ($226 >>> 0 < $$pre14$i$i27$i >>> 0) {
        $227 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i33$i = $226 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i33$i;
        $704 = $inc$i$i$i33$i;
        $cond$i$i$i37$i = HEAPU8[$227 + $226 >> 0] | 0;
       } else {
        $704 = $226;
        $cond$i$i$i37$i = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i37$i;
       $232 = ($232 << 8 & 2147483392 | ($cond$i$i$i37$i | $229 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $232;
       if ($225 >>> 0 >= 8388609) break; else {
        $226 = $704;
        $229 = $cond$i$i$i37$i;
       }
      }
     }
     HEAP16[$arrayidx53$i >> 1] = $ret$0$i8$i;
     $storemerge$i196$i = $storemerge$i172290$i - $ret$0$i8$i & 65535;
    } else {
     HEAP16[$arrayidx53$i >> 1] = 0;
     $storemerge$i196$i = 0;
    }
    HEAP16[$arrayidx54$i >> 1] = $storemerge$i196$i;
   } else {
    dest = $arrayidx31;
    stop = dest + 32 | 0;
    do {
     HEAP16[dest >> 1] = 0;
     dest = dest + 2 | 0;
    } while ((dest | 0) < (stop | 0));
   }
   $i$157 = $i$157 + 1 | 0;
  } while (($i$157 | 0) != ($iter$068 | 0));
  $i$255 = 0;
  do {
   $233 = HEAP32[$nLshifts + ($i$255 << 2) >> 2] | 0;
   if (($233 | 0) > 0) {
    $arrayidx53 = $pulses + ($i$255 << 16 >> 12 << 1) | 0;
    $235 = HEAP32[$rng$i >> 2] | 0;
    $237 = HEAP32[$val$i >> 2] | 0;
    $abs_q$051$us = HEAP16[$arrayidx53 >> 1] | 0;
    $j$052$us = 0;
    while (1) {
     $shr$i655 = $235 >>> 8;
     $ret$0$i657 = -1;
     $s$0$i656 = $235;
     while (1) {
      $ret$0$i657 = $ret$0$i657 + 1 | 0;
      $mul$i661 = Math_imul($shr$i655, HEAPU8[51892 + $ret$0$i657 >> 0] | 0) | 0;
      if ($237 >>> 0 >= $mul$i661 >>> 0) break; else $s$0$i656 = $mul$i661;
     }
     $shl$us = $abs_q$051$us << 1;
     $sub$i664 = $237 - $mul$i661 | 0;
     HEAP32[$val$i >> 2] = $sub$i664;
     $sub3$i665 = $s$0$i656 - $mul$i661 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i665;
     if ($sub3$i665 >>> 0 < 8388609) {
      $$pre14$i$i676 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $238 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $239 = $sub3$i665;
      $240 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $243 = HEAP32[$rem$i$i800 >> 2] | 0;
      $246 = $sub$i664;
      while (1) {
       $238 = $238 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $238;
       $shl$i$i679 = $239 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i679;
       if ($240 >>> 0 < $$pre14$i$i676 >>> 0) {
        $241 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i682 = $240 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i682;
        $707 = $inc$i$i$i682;
        $cond$i$i$i686 = HEAPU8[$241 + $240 >> 0] | 0;
       } else {
        $707 = $240;
        $cond$i$i$i686 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i686;
       $and7$i$i692 = ($246 << 8 & 2147483392 | ($cond$i$i$i686 | $243 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i692;
       if ($shl$i$i679 >>> 0 >= 8388609) {
        $705 = $and7$i$i692;
        $706 = $shl$i$i679;
        break;
       } else {
        $239 = $shl$i$i679;
        $240 = $707;
        $243 = $cond$i$i$i686;
        $246 = $and7$i$i692;
       }
      }
     } else {
      $705 = $sub$i664;
      $706 = $sub3$i665;
     }
     $abs_q$051$us = $ret$0$i657 + $shl$us | 0;
     $j$052$us = $j$052$us + 1 | 0;
     if (($j$052$us | 0) == ($233 | 0)) break; else {
      $235 = $706;
      $237 = $705;
     }
    }
    HEAP16[$arrayidx53 >> 1] = $abs_q$051$us;
    $arrayidx58$us$1 = $arrayidx53 + 2 | 0;
    $458 = $706;
    $460 = $705;
    $abs_q$051$us$1 = HEAP16[$arrayidx58$us$1 >> 1] | 0;
    $j$052$us$1 = 0;
    while (1) {
     $shr$i605 = $458 >>> 8;
     $ret$0$i607 = -1;
     $s$0$i606 = $458;
     while (1) {
      $ret$0$i607 = $ret$0$i607 + 1 | 0;
      $mul$i611 = Math_imul($shr$i605, HEAPU8[51892 + $ret$0$i607 >> 0] | 0) | 0;
      if ($460 >>> 0 >= $mul$i611 >>> 0) break; else $s$0$i606 = $mul$i611;
     }
     $shl$us$1 = $abs_q$051$us$1 << 1;
     $sub$i614 = $460 - $mul$i611 | 0;
     HEAP32[$val$i >> 2] = $sub$i614;
     $sub3$i615 = $s$0$i606 - $mul$i611 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i615;
     if ($sub3$i615 >>> 0 < 8388609) {
      $$pre14$i$i626 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $461 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $462 = $sub3$i615;
      $463 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $466 = HEAP32[$rem$i$i800 >> 2] | 0;
      $469 = $sub$i614;
      while (1) {
       $461 = $461 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $461;
       $shl$i$i629 = $462 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i629;
       if ($463 >>> 0 < $$pre14$i$i626 >>> 0) {
        $464 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i632 = $463 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i632;
        $726 = $inc$i$i$i632;
        $cond$i$i$i636 = HEAPU8[$464 + $463 >> 0] | 0;
       } else {
        $726 = $463;
        $cond$i$i$i636 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i636;
       $and7$i$i642 = ($469 << 8 & 2147483392 | ($cond$i$i$i636 | $466 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i642;
       if ($shl$i$i629 >>> 0 >= 8388609) {
        $724 = $and7$i$i642;
        $725 = $shl$i$i629;
        break;
       } else {
        $462 = $shl$i$i629;
        $463 = $726;
        $466 = $cond$i$i$i636;
        $469 = $and7$i$i642;
       }
      }
     } else {
      $724 = $sub$i614;
      $725 = $sub3$i615;
     }
     $abs_q$051$us$1 = $ret$0$i607 + $shl$us$1 | 0;
     $j$052$us$1 = $j$052$us$1 + 1 | 0;
     if (($j$052$us$1 | 0) == ($233 | 0)) break; else {
      $458 = $725;
      $460 = $724;
     }
    }
    HEAP16[$arrayidx58$us$1 >> 1] = $abs_q$051$us$1;
    $arrayidx58$us$2 = $arrayidx53 + 4 | 0;
    $471 = $725;
    $473 = $724;
    $abs_q$051$us$2 = HEAP16[$arrayidx58$us$2 >> 1] | 0;
    $j$052$us$2 = 0;
    while (1) {
     $shr$i562 = $471 >>> 8;
     $ret$0$i564 = -1;
     $s$0$i563 = $471;
     while (1) {
      $ret$0$i564 = $ret$0$i564 + 1 | 0;
      $mul$i568 = Math_imul($shr$i562, HEAPU8[51892 + $ret$0$i564 >> 0] | 0) | 0;
      if ($473 >>> 0 >= $mul$i568 >>> 0) break; else $s$0$i563 = $mul$i568;
     }
     $shl$us$2 = $abs_q$051$us$2 << 1;
     $sub$i571 = $473 - $mul$i568 | 0;
     HEAP32[$val$i >> 2] = $sub$i571;
     $sub3$i572 = $s$0$i563 - $mul$i568 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i572;
     if ($sub3$i572 >>> 0 < 8388609) {
      $$pre14$i$i583 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $474 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $475 = $sub3$i572;
      $476 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $479 = HEAP32[$rem$i$i800 >> 2] | 0;
      $482 = $sub$i571;
      while (1) {
       $474 = $474 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $474;
       $shl$i$i586 = $475 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i586;
       if ($476 >>> 0 < $$pre14$i$i583 >>> 0) {
        $477 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i589 = $476 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i589;
        $729 = $inc$i$i$i589;
        $cond$i$i$i593 = HEAPU8[$477 + $476 >> 0] | 0;
       } else {
        $729 = $476;
        $cond$i$i$i593 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i593;
       $and7$i$i599 = ($482 << 8 & 2147483392 | ($cond$i$i$i593 | $479 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i599;
       if ($shl$i$i586 >>> 0 >= 8388609) {
        $727 = $and7$i$i599;
        $728 = $shl$i$i586;
        break;
       } else {
        $475 = $shl$i$i586;
        $476 = $729;
        $479 = $cond$i$i$i593;
        $482 = $and7$i$i599;
       }
      }
     } else {
      $727 = $sub$i571;
      $728 = $sub3$i572;
     }
     $abs_q$051$us$2 = $ret$0$i564 + $shl$us$2 | 0;
     $j$052$us$2 = $j$052$us$2 + 1 | 0;
     if (($j$052$us$2 | 0) == ($233 | 0)) break; else {
      $471 = $728;
      $473 = $727;
     }
    }
    HEAP16[$arrayidx58$us$2 >> 1] = $abs_q$051$us$2;
    $arrayidx58$us$3 = $arrayidx53 + 6 | 0;
    $484 = $728;
    $486 = $727;
    $abs_q$051$us$3 = HEAP16[$arrayidx58$us$3 >> 1] | 0;
    $j$052$us$3 = 0;
    while (1) {
     $shr$i519 = $484 >>> 8;
     $ret$0$i521 = -1;
     $s$0$i520 = $484;
     while (1) {
      $ret$0$i521 = $ret$0$i521 + 1 | 0;
      $mul$i525 = Math_imul($shr$i519, HEAPU8[51892 + $ret$0$i521 >> 0] | 0) | 0;
      if ($486 >>> 0 >= $mul$i525 >>> 0) break; else $s$0$i520 = $mul$i525;
     }
     $shl$us$3 = $abs_q$051$us$3 << 1;
     $sub$i528 = $486 - $mul$i525 | 0;
     HEAP32[$val$i >> 2] = $sub$i528;
     $sub3$i529 = $s$0$i520 - $mul$i525 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i529;
     if ($sub3$i529 >>> 0 < 8388609) {
      $$pre14$i$i540 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $487 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $488 = $sub3$i529;
      $489 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $492 = HEAP32[$rem$i$i800 >> 2] | 0;
      $495 = $sub$i528;
      while (1) {
       $487 = $487 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $487;
       $shl$i$i543 = $488 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i543;
       if ($489 >>> 0 < $$pre14$i$i540 >>> 0) {
        $490 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i546 = $489 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i546;
        $732 = $inc$i$i$i546;
        $cond$i$i$i550 = HEAPU8[$490 + $489 >> 0] | 0;
       } else {
        $732 = $489;
        $cond$i$i$i550 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i550;
       $and7$i$i556 = ($495 << 8 & 2147483392 | ($cond$i$i$i550 | $492 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i556;
       if ($shl$i$i543 >>> 0 >= 8388609) {
        $730 = $and7$i$i556;
        $731 = $shl$i$i543;
        break;
       } else {
        $488 = $shl$i$i543;
        $489 = $732;
        $492 = $cond$i$i$i550;
        $495 = $and7$i$i556;
       }
      }
     } else {
      $730 = $sub$i528;
      $731 = $sub3$i529;
     }
     $abs_q$051$us$3 = $ret$0$i521 + $shl$us$3 | 0;
     $j$052$us$3 = $j$052$us$3 + 1 | 0;
     if (($j$052$us$3 | 0) == ($233 | 0)) break; else {
      $484 = $731;
      $486 = $730;
     }
    }
    HEAP16[$arrayidx58$us$3 >> 1] = $abs_q$051$us$3;
    $arrayidx58$us$4 = $arrayidx53 + 8 | 0;
    $497 = $731;
    $499 = $730;
    $abs_q$051$us$4 = HEAP16[$arrayidx58$us$4 >> 1] | 0;
    $j$052$us$4 = 0;
    while (1) {
     $shr$i476 = $497 >>> 8;
     $ret$0$i478 = -1;
     $s$0$i477 = $497;
     while (1) {
      $ret$0$i478 = $ret$0$i478 + 1 | 0;
      $mul$i482 = Math_imul($shr$i476, HEAPU8[51892 + $ret$0$i478 >> 0] | 0) | 0;
      if ($499 >>> 0 >= $mul$i482 >>> 0) break; else $s$0$i477 = $mul$i482;
     }
     $shl$us$4 = $abs_q$051$us$4 << 1;
     $sub$i485 = $499 - $mul$i482 | 0;
     HEAP32[$val$i >> 2] = $sub$i485;
     $sub3$i486 = $s$0$i477 - $mul$i482 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i486;
     if ($sub3$i486 >>> 0 < 8388609) {
      $$pre14$i$i497 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $500 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $501 = $sub3$i486;
      $502 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $505 = HEAP32[$rem$i$i800 >> 2] | 0;
      $508 = $sub$i485;
      while (1) {
       $500 = $500 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $500;
       $shl$i$i500 = $501 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i500;
       if ($502 >>> 0 < $$pre14$i$i497 >>> 0) {
        $503 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i503 = $502 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i503;
        $735 = $inc$i$i$i503;
        $cond$i$i$i507 = HEAPU8[$503 + $502 >> 0] | 0;
       } else {
        $735 = $502;
        $cond$i$i$i507 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i507;
       $and7$i$i513 = ($508 << 8 & 2147483392 | ($cond$i$i$i507 | $505 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i513;
       if ($shl$i$i500 >>> 0 >= 8388609) {
        $733 = $and7$i$i513;
        $734 = $shl$i$i500;
        break;
       } else {
        $501 = $shl$i$i500;
        $502 = $735;
        $505 = $cond$i$i$i507;
        $508 = $and7$i$i513;
       }
      }
     } else {
      $733 = $sub$i485;
      $734 = $sub3$i486;
     }
     $abs_q$051$us$4 = $ret$0$i478 + $shl$us$4 | 0;
     $j$052$us$4 = $j$052$us$4 + 1 | 0;
     if (($j$052$us$4 | 0) == ($233 | 0)) break; else {
      $497 = $734;
      $499 = $733;
     }
    }
    HEAP16[$arrayidx58$us$4 >> 1] = $abs_q$051$us$4;
    $arrayidx58$us$5 = $arrayidx53 + 10 | 0;
    $510 = $734;
    $512 = $733;
    $abs_q$051$us$5 = HEAP16[$arrayidx58$us$5 >> 1] | 0;
    $j$052$us$5 = 0;
    while (1) {
     $shr$i433 = $510 >>> 8;
     $ret$0$i435 = -1;
     $s$0$i434 = $510;
     while (1) {
      $ret$0$i435 = $ret$0$i435 + 1 | 0;
      $mul$i439 = Math_imul($shr$i433, HEAPU8[51892 + $ret$0$i435 >> 0] | 0) | 0;
      if ($512 >>> 0 >= $mul$i439 >>> 0) break; else $s$0$i434 = $mul$i439;
     }
     $shl$us$5 = $abs_q$051$us$5 << 1;
     $sub$i442 = $512 - $mul$i439 | 0;
     HEAP32[$val$i >> 2] = $sub$i442;
     $sub3$i443 = $s$0$i434 - $mul$i439 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i443;
     if ($sub3$i443 >>> 0 < 8388609) {
      $$pre14$i$i454 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $513 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $514 = $sub3$i443;
      $515 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $518 = HEAP32[$rem$i$i800 >> 2] | 0;
      $521 = $sub$i442;
      while (1) {
       $513 = $513 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $513;
       $shl$i$i457 = $514 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i457;
       if ($515 >>> 0 < $$pre14$i$i454 >>> 0) {
        $516 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i460 = $515 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i460;
        $738 = $inc$i$i$i460;
        $cond$i$i$i464 = HEAPU8[$516 + $515 >> 0] | 0;
       } else {
        $738 = $515;
        $cond$i$i$i464 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i464;
       $and7$i$i470 = ($521 << 8 & 2147483392 | ($cond$i$i$i464 | $518 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i470;
       if ($shl$i$i457 >>> 0 >= 8388609) {
        $736 = $and7$i$i470;
        $737 = $shl$i$i457;
        break;
       } else {
        $514 = $shl$i$i457;
        $515 = $738;
        $518 = $cond$i$i$i464;
        $521 = $and7$i$i470;
       }
      }
     } else {
      $736 = $sub$i442;
      $737 = $sub3$i443;
     }
     $abs_q$051$us$5 = $ret$0$i435 + $shl$us$5 | 0;
     $j$052$us$5 = $j$052$us$5 + 1 | 0;
     if (($j$052$us$5 | 0) == ($233 | 0)) break; else {
      $510 = $737;
      $512 = $736;
     }
    }
    HEAP16[$arrayidx58$us$5 >> 1] = $abs_q$051$us$5;
    $arrayidx58$us$6 = $arrayidx53 + 12 | 0;
    $523 = $737;
    $525 = $736;
    $abs_q$051$us$6 = HEAP16[$arrayidx58$us$6 >> 1] | 0;
    $j$052$us$6 = 0;
    while (1) {
     $shr$i390 = $523 >>> 8;
     $ret$0$i392 = -1;
     $s$0$i391 = $523;
     while (1) {
      $ret$0$i392 = $ret$0$i392 + 1 | 0;
      $mul$i396 = Math_imul($shr$i390, HEAPU8[51892 + $ret$0$i392 >> 0] | 0) | 0;
      if ($525 >>> 0 >= $mul$i396 >>> 0) break; else $s$0$i391 = $mul$i396;
     }
     $shl$us$6 = $abs_q$051$us$6 << 1;
     $sub$i399 = $525 - $mul$i396 | 0;
     HEAP32[$val$i >> 2] = $sub$i399;
     $sub3$i400 = $s$0$i391 - $mul$i396 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i400;
     if ($sub3$i400 >>> 0 < 8388609) {
      $$pre14$i$i411 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $526 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $527 = $sub3$i400;
      $528 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $531 = HEAP32[$rem$i$i800 >> 2] | 0;
      $534 = $sub$i399;
      while (1) {
       $526 = $526 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $526;
       $shl$i$i414 = $527 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i414;
       if ($528 >>> 0 < $$pre14$i$i411 >>> 0) {
        $529 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i417 = $528 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i417;
        $741 = $inc$i$i$i417;
        $cond$i$i$i421 = HEAPU8[$529 + $528 >> 0] | 0;
       } else {
        $741 = $528;
        $cond$i$i$i421 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i421;
       $and7$i$i427 = ($534 << 8 & 2147483392 | ($cond$i$i$i421 | $531 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i427;
       if ($shl$i$i414 >>> 0 >= 8388609) {
        $739 = $and7$i$i427;
        $740 = $shl$i$i414;
        break;
       } else {
        $527 = $shl$i$i414;
        $528 = $741;
        $531 = $cond$i$i$i421;
        $534 = $and7$i$i427;
       }
      }
     } else {
      $739 = $sub$i399;
      $740 = $sub3$i400;
     }
     $abs_q$051$us$6 = $ret$0$i392 + $shl$us$6 | 0;
     $j$052$us$6 = $j$052$us$6 + 1 | 0;
     if (($j$052$us$6 | 0) == ($233 | 0)) break; else {
      $523 = $740;
      $525 = $739;
     }
    }
    HEAP16[$arrayidx58$us$6 >> 1] = $abs_q$051$us$6;
    $arrayidx58$us$7 = $arrayidx53 + 14 | 0;
    $536 = $740;
    $538 = $739;
    $abs_q$051$us$7 = HEAP16[$arrayidx58$us$7 >> 1] | 0;
    $j$052$us$7 = 0;
    while (1) {
     $shr$i347 = $536 >>> 8;
     $ret$0$i349 = -1;
     $s$0$i348 = $536;
     while (1) {
      $ret$0$i349 = $ret$0$i349 + 1 | 0;
      $mul$i353 = Math_imul($shr$i347, HEAPU8[51892 + $ret$0$i349 >> 0] | 0) | 0;
      if ($538 >>> 0 >= $mul$i353 >>> 0) break; else $s$0$i348 = $mul$i353;
     }
     $shl$us$7 = $abs_q$051$us$7 << 1;
     $sub$i356 = $538 - $mul$i353 | 0;
     HEAP32[$val$i >> 2] = $sub$i356;
     $sub3$i357 = $s$0$i348 - $mul$i353 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i357;
     if ($sub3$i357 >>> 0 < 8388609) {
      $$pre14$i$i368 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $539 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $540 = $sub3$i357;
      $541 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $544 = HEAP32[$rem$i$i800 >> 2] | 0;
      $547 = $sub$i356;
      while (1) {
       $539 = $539 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $539;
       $shl$i$i371 = $540 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i371;
       if ($541 >>> 0 < $$pre14$i$i368 >>> 0) {
        $542 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i374 = $541 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i374;
        $744 = $inc$i$i$i374;
        $cond$i$i$i378 = HEAPU8[$542 + $541 >> 0] | 0;
       } else {
        $744 = $541;
        $cond$i$i$i378 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i378;
       $and7$i$i384 = ($547 << 8 & 2147483392 | ($cond$i$i$i378 | $544 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i384;
       if ($shl$i$i371 >>> 0 >= 8388609) {
        $742 = $and7$i$i384;
        $743 = $shl$i$i371;
        break;
       } else {
        $540 = $shl$i$i371;
        $541 = $744;
        $544 = $cond$i$i$i378;
        $547 = $and7$i$i384;
       }
      }
     } else {
      $742 = $sub$i356;
      $743 = $sub3$i357;
     }
     $abs_q$051$us$7 = $ret$0$i349 + $shl$us$7 | 0;
     $j$052$us$7 = $j$052$us$7 + 1 | 0;
     if (($j$052$us$7 | 0) == ($233 | 0)) break; else {
      $536 = $743;
      $538 = $742;
     }
    }
    HEAP16[$arrayidx58$us$7 >> 1] = $abs_q$051$us$7;
    $arrayidx58$us$8 = $arrayidx53 + 16 | 0;
    $549 = $743;
    $551 = $742;
    $abs_q$051$us$8 = HEAP16[$arrayidx58$us$8 >> 1] | 0;
    $j$052$us$8 = 0;
    while (1) {
     $shr$i304 = $549 >>> 8;
     $ret$0$i306 = -1;
     $s$0$i305 = $549;
     while (1) {
      $ret$0$i306 = $ret$0$i306 + 1 | 0;
      $mul$i310 = Math_imul($shr$i304, HEAPU8[51892 + $ret$0$i306 >> 0] | 0) | 0;
      if ($551 >>> 0 >= $mul$i310 >>> 0) break; else $s$0$i305 = $mul$i310;
     }
     $shl$us$8 = $abs_q$051$us$8 << 1;
     $sub$i313 = $551 - $mul$i310 | 0;
     HEAP32[$val$i >> 2] = $sub$i313;
     $sub3$i314 = $s$0$i305 - $mul$i310 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i314;
     if ($sub3$i314 >>> 0 < 8388609) {
      $$pre14$i$i325 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $552 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $553 = $sub3$i314;
      $554 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $557 = HEAP32[$rem$i$i800 >> 2] | 0;
      $560 = $sub$i313;
      while (1) {
       $552 = $552 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $552;
       $shl$i$i328 = $553 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i328;
       if ($554 >>> 0 < $$pre14$i$i325 >>> 0) {
        $555 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i331 = $554 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i331;
        $747 = $inc$i$i$i331;
        $cond$i$i$i335 = HEAPU8[$555 + $554 >> 0] | 0;
       } else {
        $747 = $554;
        $cond$i$i$i335 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i335;
       $and7$i$i341 = ($560 << 8 & 2147483392 | ($cond$i$i$i335 | $557 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i341;
       if ($shl$i$i328 >>> 0 >= 8388609) {
        $745 = $and7$i$i341;
        $746 = $shl$i$i328;
        break;
       } else {
        $553 = $shl$i$i328;
        $554 = $747;
        $557 = $cond$i$i$i335;
        $560 = $and7$i$i341;
       }
      }
     } else {
      $745 = $sub$i313;
      $746 = $sub3$i314;
     }
     $abs_q$051$us$8 = $ret$0$i306 + $shl$us$8 | 0;
     $j$052$us$8 = $j$052$us$8 + 1 | 0;
     if (($j$052$us$8 | 0) == ($233 | 0)) break; else {
      $549 = $746;
      $551 = $745;
     }
    }
    HEAP16[$arrayidx58$us$8 >> 1] = $abs_q$051$us$8;
    $arrayidx58$us$9 = $arrayidx53 + 18 | 0;
    $562 = $746;
    $564 = $745;
    $abs_q$051$us$9 = HEAP16[$arrayidx58$us$9 >> 1] | 0;
    $j$052$us$9 = 0;
    while (1) {
     $shr$i261 = $562 >>> 8;
     $ret$0$i263 = -1;
     $s$0$i262 = $562;
     while (1) {
      $ret$0$i263 = $ret$0$i263 + 1 | 0;
      $mul$i267 = Math_imul($shr$i261, HEAPU8[51892 + $ret$0$i263 >> 0] | 0) | 0;
      if ($564 >>> 0 >= $mul$i267 >>> 0) break; else $s$0$i262 = $mul$i267;
     }
     $shl$us$9 = $abs_q$051$us$9 << 1;
     $sub$i270 = $564 - $mul$i267 | 0;
     HEAP32[$val$i >> 2] = $sub$i270;
     $sub3$i271 = $s$0$i262 - $mul$i267 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i271;
     if ($sub3$i271 >>> 0 < 8388609) {
      $$pre14$i$i282 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $565 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $566 = $sub3$i271;
      $567 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $570 = HEAP32[$rem$i$i800 >> 2] | 0;
      $573 = $sub$i270;
      while (1) {
       $565 = $565 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $565;
       $shl$i$i285 = $566 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i285;
       if ($567 >>> 0 < $$pre14$i$i282 >>> 0) {
        $568 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i288 = $567 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i288;
        $750 = $inc$i$i$i288;
        $cond$i$i$i292 = HEAPU8[$568 + $567 >> 0] | 0;
       } else {
        $750 = $567;
        $cond$i$i$i292 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i292;
       $and7$i$i298 = ($573 << 8 & 2147483392 | ($cond$i$i$i292 | $570 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i298;
       if ($shl$i$i285 >>> 0 >= 8388609) {
        $748 = $and7$i$i298;
        $749 = $shl$i$i285;
        break;
       } else {
        $566 = $shl$i$i285;
        $567 = $750;
        $570 = $cond$i$i$i292;
        $573 = $and7$i$i298;
       }
      }
     } else {
      $748 = $sub$i270;
      $749 = $sub3$i271;
     }
     $abs_q$051$us$9 = $ret$0$i263 + $shl$us$9 | 0;
     $j$052$us$9 = $j$052$us$9 + 1 | 0;
     if (($j$052$us$9 | 0) == ($233 | 0)) break; else {
      $562 = $749;
      $564 = $748;
     }
    }
    HEAP16[$arrayidx58$us$9 >> 1] = $abs_q$051$us$9;
    $arrayidx58$us$10 = $arrayidx53 + 20 | 0;
    $575 = $749;
    $577 = $748;
    $abs_q$051$us$10 = HEAP16[$arrayidx58$us$10 >> 1] | 0;
    $j$052$us$10 = 0;
    while (1) {
     $shr$i218 = $575 >>> 8;
     $ret$0$i220 = -1;
     $s$0$i219 = $575;
     while (1) {
      $ret$0$i220 = $ret$0$i220 + 1 | 0;
      $mul$i224 = Math_imul($shr$i218, HEAPU8[51892 + $ret$0$i220 >> 0] | 0) | 0;
      if ($577 >>> 0 >= $mul$i224 >>> 0) break; else $s$0$i219 = $mul$i224;
     }
     $shl$us$10 = $abs_q$051$us$10 << 1;
     $sub$i227 = $577 - $mul$i224 | 0;
     HEAP32[$val$i >> 2] = $sub$i227;
     $sub3$i228 = $s$0$i219 - $mul$i224 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i228;
     if ($sub3$i228 >>> 0 < 8388609) {
      $$pre14$i$i239 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $578 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $579 = $sub3$i228;
      $580 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $583 = HEAP32[$rem$i$i800 >> 2] | 0;
      $586 = $sub$i227;
      while (1) {
       $578 = $578 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $578;
       $shl$i$i242 = $579 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i242;
       if ($580 >>> 0 < $$pre14$i$i239 >>> 0) {
        $581 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i245 = $580 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i245;
        $753 = $inc$i$i$i245;
        $cond$i$i$i249 = HEAPU8[$581 + $580 >> 0] | 0;
       } else {
        $753 = $580;
        $cond$i$i$i249 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i249;
       $and7$i$i255 = ($586 << 8 & 2147483392 | ($cond$i$i$i249 | $583 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i255;
       if ($shl$i$i242 >>> 0 >= 8388609) {
        $751 = $and7$i$i255;
        $752 = $shl$i$i242;
        break;
       } else {
        $579 = $shl$i$i242;
        $580 = $753;
        $583 = $cond$i$i$i249;
        $586 = $and7$i$i255;
       }
      }
     } else {
      $751 = $sub$i227;
      $752 = $sub3$i228;
     }
     $abs_q$051$us$10 = $ret$0$i220 + $shl$us$10 | 0;
     $j$052$us$10 = $j$052$us$10 + 1 | 0;
     if (($j$052$us$10 | 0) == ($233 | 0)) break; else {
      $575 = $752;
      $577 = $751;
     }
    }
    HEAP16[$arrayidx58$us$10 >> 1] = $abs_q$051$us$10;
    $arrayidx58$us$11 = $arrayidx53 + 22 | 0;
    $588 = $752;
    $590 = $751;
    $abs_q$051$us$11 = HEAP16[$arrayidx58$us$11 >> 1] | 0;
    $j$052$us$11 = 0;
    while (1) {
     $shr$i175 = $588 >>> 8;
     $ret$0$i177 = -1;
     $s$0$i176 = $588;
     while (1) {
      $ret$0$i177 = $ret$0$i177 + 1 | 0;
      $mul$i181 = Math_imul($shr$i175, HEAPU8[51892 + $ret$0$i177 >> 0] | 0) | 0;
      if ($590 >>> 0 >= $mul$i181 >>> 0) break; else $s$0$i176 = $mul$i181;
     }
     $shl$us$11 = $abs_q$051$us$11 << 1;
     $sub$i184 = $590 - $mul$i181 | 0;
     HEAP32[$val$i >> 2] = $sub$i184;
     $sub3$i185 = $s$0$i176 - $mul$i181 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i185;
     if ($sub3$i185 >>> 0 < 8388609) {
      $$pre14$i$i196 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $591 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $592 = $sub3$i185;
      $593 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $596 = HEAP32[$rem$i$i800 >> 2] | 0;
      $599 = $sub$i184;
      while (1) {
       $591 = $591 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $591;
       $shl$i$i199 = $592 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i199;
       if ($593 >>> 0 < $$pre14$i$i196 >>> 0) {
        $594 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i202 = $593 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i202;
        $756 = $inc$i$i$i202;
        $cond$i$i$i206 = HEAPU8[$594 + $593 >> 0] | 0;
       } else {
        $756 = $593;
        $cond$i$i$i206 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i206;
       $and7$i$i212 = ($599 << 8 & 2147483392 | ($cond$i$i$i206 | $596 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i212;
       if ($shl$i$i199 >>> 0 >= 8388609) {
        $754 = $and7$i$i212;
        $755 = $shl$i$i199;
        break;
       } else {
        $592 = $shl$i$i199;
        $593 = $756;
        $596 = $cond$i$i$i206;
        $599 = $and7$i$i212;
       }
      }
     } else {
      $754 = $sub$i184;
      $755 = $sub3$i185;
     }
     $abs_q$051$us$11 = $ret$0$i177 + $shl$us$11 | 0;
     $j$052$us$11 = $j$052$us$11 + 1 | 0;
     if (($j$052$us$11 | 0) == ($233 | 0)) break; else {
      $588 = $755;
      $590 = $754;
     }
    }
    HEAP16[$arrayidx58$us$11 >> 1] = $abs_q$051$us$11;
    $arrayidx58$us$12 = $arrayidx53 + 24 | 0;
    $601 = $755;
    $603 = $754;
    $abs_q$051$us$12 = HEAP16[$arrayidx58$us$12 >> 1] | 0;
    $j$052$us$12 = 0;
    while (1) {
     $shr$i132 = $601 >>> 8;
     $ret$0$i134 = -1;
     $s$0$i133 = $601;
     while (1) {
      $ret$0$i134 = $ret$0$i134 + 1 | 0;
      $mul$i138 = Math_imul($shr$i132, HEAPU8[51892 + $ret$0$i134 >> 0] | 0) | 0;
      if ($603 >>> 0 >= $mul$i138 >>> 0) break; else $s$0$i133 = $mul$i138;
     }
     $shl$us$12 = $abs_q$051$us$12 << 1;
     $sub$i141 = $603 - $mul$i138 | 0;
     HEAP32[$val$i >> 2] = $sub$i141;
     $sub3$i142 = $s$0$i133 - $mul$i138 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i142;
     if ($sub3$i142 >>> 0 < 8388609) {
      $$pre14$i$i153 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $604 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $605 = $sub3$i142;
      $606 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $609 = HEAP32[$rem$i$i800 >> 2] | 0;
      $612 = $sub$i141;
      while (1) {
       $604 = $604 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $604;
       $shl$i$i156 = $605 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i156;
       if ($606 >>> 0 < $$pre14$i$i153 >>> 0) {
        $607 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i159 = $606 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i159;
        $759 = $inc$i$i$i159;
        $cond$i$i$i163 = HEAPU8[$607 + $606 >> 0] | 0;
       } else {
        $759 = $606;
        $cond$i$i$i163 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i163;
       $and7$i$i169 = ($612 << 8 & 2147483392 | ($cond$i$i$i163 | $609 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i169;
       if ($shl$i$i156 >>> 0 >= 8388609) {
        $757 = $and7$i$i169;
        $758 = $shl$i$i156;
        break;
       } else {
        $605 = $shl$i$i156;
        $606 = $759;
        $609 = $cond$i$i$i163;
        $612 = $and7$i$i169;
       }
      }
     } else {
      $757 = $sub$i141;
      $758 = $sub3$i142;
     }
     $abs_q$051$us$12 = $ret$0$i134 + $shl$us$12 | 0;
     $j$052$us$12 = $j$052$us$12 + 1 | 0;
     if (($j$052$us$12 | 0) == ($233 | 0)) break; else {
      $601 = $758;
      $603 = $757;
     }
    }
    HEAP16[$arrayidx58$us$12 >> 1] = $abs_q$051$us$12;
    $arrayidx58$us$13 = $arrayidx53 + 26 | 0;
    $614 = $758;
    $616 = $757;
    $abs_q$051$us$13 = HEAP16[$arrayidx58$us$13 >> 1] | 0;
    $j$052$us$13 = 0;
    while (1) {
     $shr$i89 = $614 >>> 8;
     $ret$0$i91 = -1;
     $s$0$i90 = $614;
     while (1) {
      $ret$0$i91 = $ret$0$i91 + 1 | 0;
      $mul$i95 = Math_imul($shr$i89, HEAPU8[51892 + $ret$0$i91 >> 0] | 0) | 0;
      if ($616 >>> 0 >= $mul$i95 >>> 0) break; else $s$0$i90 = $mul$i95;
     }
     $shl$us$13 = $abs_q$051$us$13 << 1;
     $sub$i98 = $616 - $mul$i95 | 0;
     HEAP32[$val$i >> 2] = $sub$i98;
     $sub3$i99 = $s$0$i90 - $mul$i95 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i99;
     if ($sub3$i99 >>> 0 < 8388609) {
      $$pre14$i$i110 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $617 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $618 = $sub3$i99;
      $619 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $622 = HEAP32[$rem$i$i800 >> 2] | 0;
      $625 = $sub$i98;
      while (1) {
       $617 = $617 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $617;
       $shl$i$i113 = $618 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i113;
       if ($619 >>> 0 < $$pre14$i$i110 >>> 0) {
        $620 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i116 = $619 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i116;
        $762 = $inc$i$i$i116;
        $cond$i$i$i120 = HEAPU8[$620 + $619 >> 0] | 0;
       } else {
        $762 = $619;
        $cond$i$i$i120 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i120;
       $and7$i$i126 = ($625 << 8 & 2147483392 | ($cond$i$i$i120 | $622 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i126;
       if ($shl$i$i113 >>> 0 >= 8388609) {
        $760 = $and7$i$i126;
        $761 = $shl$i$i113;
        break;
       } else {
        $618 = $shl$i$i113;
        $619 = $762;
        $622 = $cond$i$i$i120;
        $625 = $and7$i$i126;
       }
      }
     } else {
      $760 = $sub$i98;
      $761 = $sub3$i99;
     }
     $abs_q$051$us$13 = $ret$0$i91 + $shl$us$13 | 0;
     $j$052$us$13 = $j$052$us$13 + 1 | 0;
     if (($j$052$us$13 | 0) == ($233 | 0)) break; else {
      $614 = $761;
      $616 = $760;
     }
    }
    HEAP16[$arrayidx58$us$13 >> 1] = $abs_q$051$us$13;
    $arrayidx58$us$14 = $arrayidx53 + 28 | 0;
    $627 = $761;
    $629 = $760;
    $abs_q$051$us$14 = HEAP16[$arrayidx58$us$14 >> 1] | 0;
    $j$052$us$14 = 0;
    while (1) {
     $shr$i46 = $627 >>> 8;
     $ret$0$i48 = -1;
     $s$0$i47 = $627;
     while (1) {
      $ret$0$i48 = $ret$0$i48 + 1 | 0;
      $mul$i52 = Math_imul($shr$i46, HEAPU8[51892 + $ret$0$i48 >> 0] | 0) | 0;
      if ($629 >>> 0 >= $mul$i52 >>> 0) break; else $s$0$i47 = $mul$i52;
     }
     $shl$us$14 = $abs_q$051$us$14 << 1;
     $sub$i55 = $629 - $mul$i52 | 0;
     HEAP32[$val$i >> 2] = $sub$i55;
     $sub3$i56 = $s$0$i47 - $mul$i52 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i56;
     if ($sub3$i56 >>> 0 < 8388609) {
      $$pre14$i$i67 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $630 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $631 = $sub3$i56;
      $632 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $635 = HEAP32[$rem$i$i800 >> 2] | 0;
      $638 = $sub$i55;
      while (1) {
       $630 = $630 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $630;
       $shl$i$i70 = $631 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i70;
       if ($632 >>> 0 < $$pre14$i$i67 >>> 0) {
        $633 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i73 = $632 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i73;
        $765 = $inc$i$i$i73;
        $cond$i$i$i77 = HEAPU8[$633 + $632 >> 0] | 0;
       } else {
        $765 = $632;
        $cond$i$i$i77 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i77;
       $and7$i$i83 = ($638 << 8 & 2147483392 | ($cond$i$i$i77 | $635 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i83;
       if ($shl$i$i70 >>> 0 >= 8388609) {
        $763 = $and7$i$i83;
        $764 = $shl$i$i70;
        break;
       } else {
        $631 = $shl$i$i70;
        $632 = $765;
        $635 = $cond$i$i$i77;
        $638 = $and7$i$i83;
       }
      }
     } else {
      $763 = $sub$i55;
      $764 = $sub3$i56;
     }
     $abs_q$051$us$14 = $ret$0$i48 + $shl$us$14 | 0;
     $j$052$us$14 = $j$052$us$14 + 1 | 0;
     if (($j$052$us$14 | 0) == ($233 | 0)) break; else {
      $627 = $764;
      $629 = $763;
     }
    }
    HEAP16[$arrayidx58$us$14 >> 1] = $abs_q$051$us$14;
    $arrayidx58$us$15 = $arrayidx53 + 30 | 0;
    $640 = $764;
    $642 = $763;
    $abs_q$051$us$15 = HEAP16[$arrayidx58$us$15 >> 1] | 0;
    $j$052$us$15 = 0;
    while (1) {
     $shr$i3 = $640 >>> 8;
     $ret$0$i5 = -1;
     $s$0$i4 = $640;
     while (1) {
      $ret$0$i5 = $ret$0$i5 + 1 | 0;
      $mul$i9 = Math_imul($shr$i3, HEAPU8[51892 + $ret$0$i5 >> 0] | 0) | 0;
      if ($642 >>> 0 >= $mul$i9 >>> 0) break; else $s$0$i4 = $mul$i9;
     }
     $shl$us$15 = $abs_q$051$us$15 << 1;
     $sub$i12 = $642 - $mul$i9 | 0;
     HEAP32[$val$i >> 2] = $sub$i12;
     $sub3$i13 = $s$0$i4 - $mul$i9 | 0;
     HEAP32[$rng$i >> 2] = $sub3$i13;
     if ($sub3$i13 >>> 0 < 8388609) {
      $$pre14$i$i24 = HEAP32[$storage$i$i$i802 >> 2] | 0;
      $643 = HEAP32[$nbits_total$i$i799 >> 2] | 0;
      $644 = $sub3$i13;
      $645 = HEAP32[$offs$i$i$i801 >> 2] | 0;
      $648 = HEAP32[$rem$i$i800 >> 2] | 0;
      $651 = $sub$i12;
      while (1) {
       $643 = $643 + 8 | 0;
       HEAP32[$nbits_total$i$i799 >> 2] = $643;
       $shl$i$i27 = $644 << 8;
       HEAP32[$rng$i >> 2] = $shl$i$i27;
       if ($645 >>> 0 < $$pre14$i$i24 >>> 0) {
        $646 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i30 = $645 + 1 | 0;
        HEAP32[$offs$i$i$i801 >> 2] = $inc$i$i$i30;
        $768 = $inc$i$i$i30;
        $cond$i$i$i34 = HEAPU8[$646 + $645 >> 0] | 0;
       } else {
        $768 = $645;
        $cond$i$i$i34 = 0;
       }
       HEAP32[$rem$i$i800 >> 2] = $cond$i$i$i34;
       $and7$i$i40 = ($651 << 8 & 2147483392 | ($cond$i$i$i34 | $648 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i >> 2] = $and7$i$i40;
       if ($shl$i$i27 >>> 0 >= 8388609) {
        $766 = $and7$i$i40;
        $767 = $shl$i$i27;
        break;
       } else {
        $644 = $shl$i$i27;
        $645 = $768;
        $648 = $cond$i$i$i34;
        $651 = $and7$i$i40;
       }
      }
     } else {
      $766 = $sub$i12;
      $767 = $sub3$i13;
     }
     $abs_q$051$us$15 = $ret$0$i5 + $shl$us$15 | 0;
     $j$052$us$15 = $j$052$us$15 + 1 | 0;
     if (($j$052$us$15 | 0) == ($233 | 0)) break; else {
      $640 = $767;
      $642 = $766;
     }
    }
    HEAP16[$arrayidx58$us$15 >> 1] = $abs_q$051$us$15;
    $arrayidx74 = $sum_pulses + ($i$255 << 2) | 0;
    HEAP32[$arrayidx74 >> 2] = HEAP32[$arrayidx74 >> 2] | $233 << 5;
   }
   $i$255 = $i$255 + 1 | 0;
  } while (($i$255 | 0) != ($iter$068 | 0));
 }
 HEAP8[$icdf$i + 1 >> 0] = 0;
 $arrayidx2$i = 26224 + ((($signalType << 1) + $quantOffsetType << 16 >> 16) * 7 | 0) | 0;
 $shr$i648 = $frame_length + 8 >> 4;
 if (($frame_length | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 $nbits_total$i$i$i = $psRangeDec + 20 | 0;
 $rem$i$i$i = $psRangeDec + 40 | 0;
 $offs$i$i$i$i = $psRangeDec + 24 | 0;
 $storage$i$i$i$i = $psRangeDec + 4 | 0;
 $i$019$i = 0;
 $q_ptr$020$i = $pulses;
 while (1) {
  $248 = HEAP32[$sum_pulses + ($i$019$i << 2) >> 2] | 0;
  do if (($248 | 0) > 0) {
   $and$i = $248 & 31;
   HEAP8[$icdf$i >> 0] = HEAP8[$arrayidx2$i + ($and$i >>> 0 < 6 ? $and$i : 6) >> 0] | 0;
   $250 = HEAP16[$q_ptr$020$i >> 1] | 0;
   if ($250 << 16 >> 16 > 0) {
    $251 = HEAP32[$rng$i >> 2] | 0;
    $252 = HEAP32[$val$i >> 2] | 0;
    $shr$i$i = $251 >>> 8;
    $ret$0$i$i = -1;
    $s$0$i$i = $251;
    while (1) {
     $inc$i$i = $ret$0$i$i + 1 | 0;
     $mul$i$i = Math_imul($shr$i$i, HEAPU8[$icdf$i + $inc$i$i >> 0] | 0) | 0;
     if ($252 >>> 0 >= $mul$i$i >>> 0) break;
     $ret$0$i$i = $inc$i$i;
     $s$0$i$i = $mul$i$i;
    }
    $sub$i$i = $252 - $mul$i$i | 0;
    HEAP32[$val$i >> 2] = $sub$i$i;
    $sub3$i$i = $s$0$i$i - $mul$i$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i$i;
    if ($sub3$i$i >>> 0 < 8388609) {
     $$pre14$i$i$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $254 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $255 = $sub3$i$i;
     $256 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $259 = HEAP32[$rem$i$i$i >> 2] | 0;
     $262 = $sub$i$i;
     while (1) {
      $254 = $254 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $254;
      $255 = $255 << 8;
      HEAP32[$rng$i >> 2] = $255;
      if ($256 >>> 0 < $$pre14$i$i$i >>> 0) {
       $257 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i$i = $256 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i$i;
       $708 = $inc$i$i$i$i;
       $cond$i$i$i$i = HEAPU8[$257 + $256 >> 0] | 0;
      } else {
       $708 = $256;
       $cond$i$i$i$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i$i;
      $262 = ($262 << 8 & 2147483392 | ($cond$i$i$i$i | $259 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $262;
      if ($255 >>> 0 >= 8388609) break; else {
       $256 = $708;
       $259 = $cond$i$i$i$i;
      }
     }
    }
    HEAP16[$q_ptr$020$i >> 1] = Math_imul(($inc$i$i << 1) + -1 | 0, $250 << 16 >> 16) | 0;
   }
   $arrayidx17$1$i = $q_ptr$020$i + 2 | 0;
   $263 = HEAP16[$arrayidx17$1$i >> 1] | 0;
   if ($263 << 16 >> 16 > 0) {
    $264 = HEAP32[$rng$i >> 2] | 0;
    $265 = HEAP32[$val$i >> 2] | 0;
    $shr$i605$i = $264 >>> 8;
    $ret$0$i607$i = -1;
    $s$0$i606$i = $264;
    while (1) {
     $inc$i608$i = $ret$0$i607$i + 1 | 0;
     $mul$i611$i = Math_imul($shr$i605$i, HEAPU8[$icdf$i + $inc$i608$i >> 0] | 0) | 0;
     if ($265 >>> 0 >= $mul$i611$i >>> 0) break;
     $ret$0$i607$i = $inc$i608$i;
     $s$0$i606$i = $mul$i611$i;
    }
    $sub$i614$i = $265 - $mul$i611$i | 0;
    HEAP32[$val$i >> 2] = $sub$i614$i;
    $sub3$i615$i = $s$0$i606$i - $mul$i611$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i615$i;
    if ($sub3$i615$i >>> 0 < 8388609) {
     $$pre14$i$i626$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $267 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $268 = $sub3$i615$i;
     $269 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $272 = HEAP32[$rem$i$i$i >> 2] | 0;
     $275 = $sub$i614$i;
     while (1) {
      $267 = $267 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $267;
      $268 = $268 << 8;
      HEAP32[$rng$i >> 2] = $268;
      if ($269 >>> 0 < $$pre14$i$i626$i >>> 0) {
       $270 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i632$i = $269 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i632$i;
       $709 = $inc$i$i$i632$i;
       $cond$i$i$i636$i = HEAPU8[$270 + $269 >> 0] | 0;
      } else {
       $709 = $269;
       $cond$i$i$i636$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i636$i;
      $275 = ($275 << 8 & 2147483392 | ($cond$i$i$i636$i | $272 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $275;
      if ($268 >>> 0 >= 8388609) break; else {
       $269 = $709;
       $272 = $cond$i$i$i636$i;
      }
     }
    }
    HEAP16[$arrayidx17$1$i >> 1] = Math_imul(($inc$i608$i << 1) + -1 | 0, $263 << 16 >> 16) | 0;
   }
   $arrayidx17$2$i = $q_ptr$020$i + 4 | 0;
   $276 = HEAP16[$arrayidx17$2$i >> 1] | 0;
   if ($276 << 16 >> 16 > 0) {
    $277 = HEAP32[$rng$i >> 2] | 0;
    $278 = HEAP32[$val$i >> 2] | 0;
    $shr$i562$i = $277 >>> 8;
    $ret$0$i564$i = -1;
    $s$0$i563$i = $277;
    while (1) {
     $inc$i565$i = $ret$0$i564$i + 1 | 0;
     $mul$i568$i = Math_imul($shr$i562$i, HEAPU8[$icdf$i + $inc$i565$i >> 0] | 0) | 0;
     if ($278 >>> 0 >= $mul$i568$i >>> 0) break;
     $ret$0$i564$i = $inc$i565$i;
     $s$0$i563$i = $mul$i568$i;
    }
    $sub$i571$i = $278 - $mul$i568$i | 0;
    HEAP32[$val$i >> 2] = $sub$i571$i;
    $sub3$i572$i = $s$0$i563$i - $mul$i568$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i572$i;
    if ($sub3$i572$i >>> 0 < 8388609) {
     $$pre14$i$i583$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $280 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $281 = $sub3$i572$i;
     $282 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $285 = HEAP32[$rem$i$i$i >> 2] | 0;
     $288 = $sub$i571$i;
     while (1) {
      $280 = $280 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $280;
      $281 = $281 << 8;
      HEAP32[$rng$i >> 2] = $281;
      if ($282 >>> 0 < $$pre14$i$i583$i >>> 0) {
       $283 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i589$i = $282 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i589$i;
       $710 = $inc$i$i$i589$i;
       $cond$i$i$i593$i = HEAPU8[$283 + $282 >> 0] | 0;
      } else {
       $710 = $282;
       $cond$i$i$i593$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i593$i;
      $288 = ($288 << 8 & 2147483392 | ($cond$i$i$i593$i | $285 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $288;
      if ($281 >>> 0 >= 8388609) break; else {
       $282 = $710;
       $285 = $cond$i$i$i593$i;
      }
     }
    }
    HEAP16[$arrayidx17$2$i >> 1] = Math_imul(($inc$i565$i << 1) + -1 | 0, $276 << 16 >> 16) | 0;
   }
   $arrayidx17$3$i = $q_ptr$020$i + 6 | 0;
   $289 = HEAP16[$arrayidx17$3$i >> 1] | 0;
   if ($289 << 16 >> 16 > 0) {
    $290 = HEAP32[$rng$i >> 2] | 0;
    $291 = HEAP32[$val$i >> 2] | 0;
    $shr$i519$i = $290 >>> 8;
    $ret$0$i521$i = -1;
    $s$0$i520$i = $290;
    while (1) {
     $inc$i522$i = $ret$0$i521$i + 1 | 0;
     $mul$i525$i = Math_imul($shr$i519$i, HEAPU8[$icdf$i + $inc$i522$i >> 0] | 0) | 0;
     if ($291 >>> 0 >= $mul$i525$i >>> 0) break;
     $ret$0$i521$i = $inc$i522$i;
     $s$0$i520$i = $mul$i525$i;
    }
    $sub$i528$i = $291 - $mul$i525$i | 0;
    HEAP32[$val$i >> 2] = $sub$i528$i;
    $sub3$i529$i = $s$0$i520$i - $mul$i525$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i529$i;
    if ($sub3$i529$i >>> 0 < 8388609) {
     $$pre14$i$i540$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $293 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $294 = $sub3$i529$i;
     $295 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $298 = HEAP32[$rem$i$i$i >> 2] | 0;
     $301 = $sub$i528$i;
     while (1) {
      $293 = $293 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $293;
      $294 = $294 << 8;
      HEAP32[$rng$i >> 2] = $294;
      if ($295 >>> 0 < $$pre14$i$i540$i >>> 0) {
       $296 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i546$i = $295 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i546$i;
       $711 = $inc$i$i$i546$i;
       $cond$i$i$i550$i = HEAPU8[$296 + $295 >> 0] | 0;
      } else {
       $711 = $295;
       $cond$i$i$i550$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i550$i;
      $301 = ($301 << 8 & 2147483392 | ($cond$i$i$i550$i | $298 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $301;
      if ($294 >>> 0 >= 8388609) break; else {
       $295 = $711;
       $298 = $cond$i$i$i550$i;
      }
     }
    }
    HEAP16[$arrayidx17$3$i >> 1] = Math_imul(($inc$i522$i << 1) + -1 | 0, $289 << 16 >> 16) | 0;
   }
   $arrayidx17$4$i = $q_ptr$020$i + 8 | 0;
   $302 = HEAP16[$arrayidx17$4$i >> 1] | 0;
   if ($302 << 16 >> 16 > 0) {
    $303 = HEAP32[$rng$i >> 2] | 0;
    $304 = HEAP32[$val$i >> 2] | 0;
    $shr$i476$i = $303 >>> 8;
    $ret$0$i478$i = -1;
    $s$0$i477$i = $303;
    while (1) {
     $inc$i479$i = $ret$0$i478$i + 1 | 0;
     $mul$i482$i = Math_imul($shr$i476$i, HEAPU8[$icdf$i + $inc$i479$i >> 0] | 0) | 0;
     if ($304 >>> 0 >= $mul$i482$i >>> 0) break;
     $ret$0$i478$i = $inc$i479$i;
     $s$0$i477$i = $mul$i482$i;
    }
    $sub$i485$i = $304 - $mul$i482$i | 0;
    HEAP32[$val$i >> 2] = $sub$i485$i;
    $sub3$i486$i = $s$0$i477$i - $mul$i482$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i486$i;
    if ($sub3$i486$i >>> 0 < 8388609) {
     $$pre14$i$i497$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $306 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $307 = $sub3$i486$i;
     $308 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $311 = HEAP32[$rem$i$i$i >> 2] | 0;
     $314 = $sub$i485$i;
     while (1) {
      $306 = $306 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $306;
      $307 = $307 << 8;
      HEAP32[$rng$i >> 2] = $307;
      if ($308 >>> 0 < $$pre14$i$i497$i >>> 0) {
       $309 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i503$i = $308 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i503$i;
       $712 = $inc$i$i$i503$i;
       $cond$i$i$i507$i = HEAPU8[$309 + $308 >> 0] | 0;
      } else {
       $712 = $308;
       $cond$i$i$i507$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i507$i;
      $314 = ($314 << 8 & 2147483392 | ($cond$i$i$i507$i | $311 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $314;
      if ($307 >>> 0 >= 8388609) break; else {
       $308 = $712;
       $311 = $cond$i$i$i507$i;
      }
     }
    }
    HEAP16[$arrayidx17$4$i >> 1] = Math_imul(($inc$i479$i << 1) + -1 | 0, $302 << 16 >> 16) | 0;
   }
   $arrayidx17$5$i = $q_ptr$020$i + 10 | 0;
   $315 = HEAP16[$arrayidx17$5$i >> 1] | 0;
   if ($315 << 16 >> 16 > 0) {
    $316 = HEAP32[$rng$i >> 2] | 0;
    $317 = HEAP32[$val$i >> 2] | 0;
    $shr$i433$i = $316 >>> 8;
    $ret$0$i435$i = -1;
    $s$0$i434$i = $316;
    while (1) {
     $inc$i436$i = $ret$0$i435$i + 1 | 0;
     $mul$i439$i = Math_imul($shr$i433$i, HEAPU8[$icdf$i + $inc$i436$i >> 0] | 0) | 0;
     if ($317 >>> 0 >= $mul$i439$i >>> 0) break;
     $ret$0$i435$i = $inc$i436$i;
     $s$0$i434$i = $mul$i439$i;
    }
    $sub$i442$i = $317 - $mul$i439$i | 0;
    HEAP32[$val$i >> 2] = $sub$i442$i;
    $sub3$i443$i = $s$0$i434$i - $mul$i439$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i443$i;
    if ($sub3$i443$i >>> 0 < 8388609) {
     $$pre14$i$i454$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $319 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $320 = $sub3$i443$i;
     $321 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $324 = HEAP32[$rem$i$i$i >> 2] | 0;
     $327 = $sub$i442$i;
     while (1) {
      $319 = $319 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $319;
      $320 = $320 << 8;
      HEAP32[$rng$i >> 2] = $320;
      if ($321 >>> 0 < $$pre14$i$i454$i >>> 0) {
       $322 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i460$i = $321 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i460$i;
       $713 = $inc$i$i$i460$i;
       $cond$i$i$i464$i = HEAPU8[$322 + $321 >> 0] | 0;
      } else {
       $713 = $321;
       $cond$i$i$i464$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i464$i;
      $327 = ($327 << 8 & 2147483392 | ($cond$i$i$i464$i | $324 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $327;
      if ($320 >>> 0 >= 8388609) break; else {
       $321 = $713;
       $324 = $cond$i$i$i464$i;
      }
     }
    }
    HEAP16[$arrayidx17$5$i >> 1] = Math_imul(($inc$i436$i << 1) + -1 | 0, $315 << 16 >> 16) | 0;
   }
   $arrayidx17$6$i = $q_ptr$020$i + 12 | 0;
   $328 = HEAP16[$arrayidx17$6$i >> 1] | 0;
   if ($328 << 16 >> 16 > 0) {
    $329 = HEAP32[$rng$i >> 2] | 0;
    $330 = HEAP32[$val$i >> 2] | 0;
    $shr$i390$i = $329 >>> 8;
    $ret$0$i392$i = -1;
    $s$0$i391$i = $329;
    while (1) {
     $inc$i393$i = $ret$0$i392$i + 1 | 0;
     $mul$i396$i = Math_imul($shr$i390$i, HEAPU8[$icdf$i + $inc$i393$i >> 0] | 0) | 0;
     if ($330 >>> 0 >= $mul$i396$i >>> 0) break;
     $ret$0$i392$i = $inc$i393$i;
     $s$0$i391$i = $mul$i396$i;
    }
    $sub$i399$i = $330 - $mul$i396$i | 0;
    HEAP32[$val$i >> 2] = $sub$i399$i;
    $sub3$i400$i = $s$0$i391$i - $mul$i396$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i400$i;
    if ($sub3$i400$i >>> 0 < 8388609) {
     $$pre14$i$i411$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $332 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $333 = $sub3$i400$i;
     $334 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $337 = HEAP32[$rem$i$i$i >> 2] | 0;
     $340 = $sub$i399$i;
     while (1) {
      $332 = $332 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $332;
      $333 = $333 << 8;
      HEAP32[$rng$i >> 2] = $333;
      if ($334 >>> 0 < $$pre14$i$i411$i >>> 0) {
       $335 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i417$i = $334 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i417$i;
       $714 = $inc$i$i$i417$i;
       $cond$i$i$i421$i = HEAPU8[$335 + $334 >> 0] | 0;
      } else {
       $714 = $334;
       $cond$i$i$i421$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i421$i;
      $340 = ($340 << 8 & 2147483392 | ($cond$i$i$i421$i | $337 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $340;
      if ($333 >>> 0 >= 8388609) break; else {
       $334 = $714;
       $337 = $cond$i$i$i421$i;
      }
     }
    }
    HEAP16[$arrayidx17$6$i >> 1] = Math_imul(($inc$i393$i << 1) + -1 | 0, $328 << 16 >> 16) | 0;
   }
   $arrayidx17$7$i = $q_ptr$020$i + 14 | 0;
   $341 = HEAP16[$arrayidx17$7$i >> 1] | 0;
   if ($341 << 16 >> 16 > 0) {
    $342 = HEAP32[$rng$i >> 2] | 0;
    $343 = HEAP32[$val$i >> 2] | 0;
    $shr$i347$i = $342 >>> 8;
    $ret$0$i349$i = -1;
    $s$0$i348$i = $342;
    while (1) {
     $inc$i350$i = $ret$0$i349$i + 1 | 0;
     $mul$i353$i = Math_imul($shr$i347$i, HEAPU8[$icdf$i + $inc$i350$i >> 0] | 0) | 0;
     if ($343 >>> 0 >= $mul$i353$i >>> 0) break;
     $ret$0$i349$i = $inc$i350$i;
     $s$0$i348$i = $mul$i353$i;
    }
    $sub$i356$i = $343 - $mul$i353$i | 0;
    HEAP32[$val$i >> 2] = $sub$i356$i;
    $sub3$i357$i = $s$0$i348$i - $mul$i353$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i357$i;
    if ($sub3$i357$i >>> 0 < 8388609) {
     $$pre14$i$i368$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $345 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $346 = $sub3$i357$i;
     $347 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $350 = HEAP32[$rem$i$i$i >> 2] | 0;
     $353 = $sub$i356$i;
     while (1) {
      $345 = $345 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $345;
      $346 = $346 << 8;
      HEAP32[$rng$i >> 2] = $346;
      if ($347 >>> 0 < $$pre14$i$i368$i >>> 0) {
       $348 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i374$i = $347 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i374$i;
       $715 = $inc$i$i$i374$i;
       $cond$i$i$i378$i = HEAPU8[$348 + $347 >> 0] | 0;
      } else {
       $715 = $347;
       $cond$i$i$i378$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i378$i;
      $353 = ($353 << 8 & 2147483392 | ($cond$i$i$i378$i | $350 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $353;
      if ($346 >>> 0 >= 8388609) break; else {
       $347 = $715;
       $350 = $cond$i$i$i378$i;
      }
     }
    }
    HEAP16[$arrayidx17$7$i >> 1] = Math_imul(($inc$i350$i << 1) + -1 | 0, $341 << 16 >> 16) | 0;
   }
   $arrayidx17$8$i = $q_ptr$020$i + 16 | 0;
   $354 = HEAP16[$arrayidx17$8$i >> 1] | 0;
   if ($354 << 16 >> 16 > 0) {
    $355 = HEAP32[$rng$i >> 2] | 0;
    $356 = HEAP32[$val$i >> 2] | 0;
    $shr$i304$i = $355 >>> 8;
    $ret$0$i306$i = -1;
    $s$0$i305$i = $355;
    while (1) {
     $inc$i307$i = $ret$0$i306$i + 1 | 0;
     $mul$i310$i = Math_imul($shr$i304$i, HEAPU8[$icdf$i + $inc$i307$i >> 0] | 0) | 0;
     if ($356 >>> 0 >= $mul$i310$i >>> 0) break;
     $ret$0$i306$i = $inc$i307$i;
     $s$0$i305$i = $mul$i310$i;
    }
    $sub$i313$i = $356 - $mul$i310$i | 0;
    HEAP32[$val$i >> 2] = $sub$i313$i;
    $sub3$i314$i = $s$0$i305$i - $mul$i310$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i314$i;
    if ($sub3$i314$i >>> 0 < 8388609) {
     $$pre14$i$i325$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $358 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $359 = $sub3$i314$i;
     $360 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $363 = HEAP32[$rem$i$i$i >> 2] | 0;
     $366 = $sub$i313$i;
     while (1) {
      $358 = $358 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $358;
      $359 = $359 << 8;
      HEAP32[$rng$i >> 2] = $359;
      if ($360 >>> 0 < $$pre14$i$i325$i >>> 0) {
       $361 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i331$i = $360 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i331$i;
       $716 = $inc$i$i$i331$i;
       $cond$i$i$i335$i = HEAPU8[$361 + $360 >> 0] | 0;
      } else {
       $716 = $360;
       $cond$i$i$i335$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i335$i;
      $366 = ($366 << 8 & 2147483392 | ($cond$i$i$i335$i | $363 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $366;
      if ($359 >>> 0 >= 8388609) break; else {
       $360 = $716;
       $363 = $cond$i$i$i335$i;
      }
     }
    }
    HEAP16[$arrayidx17$8$i >> 1] = Math_imul(($inc$i307$i << 1) + -1 | 0, $354 << 16 >> 16) | 0;
   }
   $arrayidx17$9$i = $q_ptr$020$i + 18 | 0;
   $367 = HEAP16[$arrayidx17$9$i >> 1] | 0;
   if ($367 << 16 >> 16 > 0) {
    $368 = HEAP32[$rng$i >> 2] | 0;
    $369 = HEAP32[$val$i >> 2] | 0;
    $shr$i261$i = $368 >>> 8;
    $ret$0$i263$i = -1;
    $s$0$i262$i = $368;
    while (1) {
     $inc$i264$i = $ret$0$i263$i + 1 | 0;
     $mul$i267$i = Math_imul($shr$i261$i, HEAPU8[$icdf$i + $inc$i264$i >> 0] | 0) | 0;
     if ($369 >>> 0 >= $mul$i267$i >>> 0) break;
     $ret$0$i263$i = $inc$i264$i;
     $s$0$i262$i = $mul$i267$i;
    }
    $sub$i270$i = $369 - $mul$i267$i | 0;
    HEAP32[$val$i >> 2] = $sub$i270$i;
    $sub3$i271$i = $s$0$i262$i - $mul$i267$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i271$i;
    if ($sub3$i271$i >>> 0 < 8388609) {
     $$pre14$i$i282$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $371 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $372 = $sub3$i271$i;
     $373 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $376 = HEAP32[$rem$i$i$i >> 2] | 0;
     $379 = $sub$i270$i;
     while (1) {
      $371 = $371 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $371;
      $372 = $372 << 8;
      HEAP32[$rng$i >> 2] = $372;
      if ($373 >>> 0 < $$pre14$i$i282$i >>> 0) {
       $374 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i288$i = $373 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i288$i;
       $717 = $inc$i$i$i288$i;
       $cond$i$i$i292$i = HEAPU8[$374 + $373 >> 0] | 0;
      } else {
       $717 = $373;
       $cond$i$i$i292$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i292$i;
      $379 = ($379 << 8 & 2147483392 | ($cond$i$i$i292$i | $376 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $379;
      if ($372 >>> 0 >= 8388609) break; else {
       $373 = $717;
       $376 = $cond$i$i$i292$i;
      }
     }
    }
    HEAP16[$arrayidx17$9$i >> 1] = Math_imul(($inc$i264$i << 1) + -1 | 0, $367 << 16 >> 16) | 0;
   }
   $arrayidx17$10$i = $q_ptr$020$i + 20 | 0;
   $380 = HEAP16[$arrayidx17$10$i >> 1] | 0;
   if ($380 << 16 >> 16 > 0) {
    $381 = HEAP32[$rng$i >> 2] | 0;
    $382 = HEAP32[$val$i >> 2] | 0;
    $shr$i218$i = $381 >>> 8;
    $ret$0$i220$i = -1;
    $s$0$i219$i = $381;
    while (1) {
     $inc$i221$i = $ret$0$i220$i + 1 | 0;
     $mul$i224$i = Math_imul($shr$i218$i, HEAPU8[$icdf$i + $inc$i221$i >> 0] | 0) | 0;
     if ($382 >>> 0 >= $mul$i224$i >>> 0) break;
     $ret$0$i220$i = $inc$i221$i;
     $s$0$i219$i = $mul$i224$i;
    }
    $sub$i227$i = $382 - $mul$i224$i | 0;
    HEAP32[$val$i >> 2] = $sub$i227$i;
    $sub3$i228$i = $s$0$i219$i - $mul$i224$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i228$i;
    if ($sub3$i228$i >>> 0 < 8388609) {
     $$pre14$i$i239$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $384 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $385 = $sub3$i228$i;
     $386 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $389 = HEAP32[$rem$i$i$i >> 2] | 0;
     $392 = $sub$i227$i;
     while (1) {
      $384 = $384 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $384;
      $385 = $385 << 8;
      HEAP32[$rng$i >> 2] = $385;
      if ($386 >>> 0 < $$pre14$i$i239$i >>> 0) {
       $387 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i245$i = $386 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i245$i;
       $718 = $inc$i$i$i245$i;
       $cond$i$i$i249$i = HEAPU8[$387 + $386 >> 0] | 0;
      } else {
       $718 = $386;
       $cond$i$i$i249$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i249$i;
      $392 = ($392 << 8 & 2147483392 | ($cond$i$i$i249$i | $389 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $392;
      if ($385 >>> 0 >= 8388609) break; else {
       $386 = $718;
       $389 = $cond$i$i$i249$i;
      }
     }
    }
    HEAP16[$arrayidx17$10$i >> 1] = Math_imul(($inc$i221$i << 1) + -1 | 0, $380 << 16 >> 16) | 0;
   }
   $arrayidx17$11$i = $q_ptr$020$i + 22 | 0;
   $393 = HEAP16[$arrayidx17$11$i >> 1] | 0;
   if ($393 << 16 >> 16 > 0) {
    $394 = HEAP32[$rng$i >> 2] | 0;
    $395 = HEAP32[$val$i >> 2] | 0;
    $shr$i175$i = $394 >>> 8;
    $ret$0$i177$i = -1;
    $s$0$i176$i = $394;
    while (1) {
     $inc$i178$i = $ret$0$i177$i + 1 | 0;
     $mul$i181$i = Math_imul($shr$i175$i, HEAPU8[$icdf$i + $inc$i178$i >> 0] | 0) | 0;
     if ($395 >>> 0 >= $mul$i181$i >>> 0) break;
     $ret$0$i177$i = $inc$i178$i;
     $s$0$i176$i = $mul$i181$i;
    }
    $sub$i184$i = $395 - $mul$i181$i | 0;
    HEAP32[$val$i >> 2] = $sub$i184$i;
    $sub3$i185$i = $s$0$i176$i - $mul$i181$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i185$i;
    if ($sub3$i185$i >>> 0 < 8388609) {
     $$pre14$i$i196$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $397 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $398 = $sub3$i185$i;
     $399 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $402 = HEAP32[$rem$i$i$i >> 2] | 0;
     $405 = $sub$i184$i;
     while (1) {
      $397 = $397 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $397;
      $398 = $398 << 8;
      HEAP32[$rng$i >> 2] = $398;
      if ($399 >>> 0 < $$pre14$i$i196$i >>> 0) {
       $400 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i202$i = $399 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i202$i;
       $719 = $inc$i$i$i202$i;
       $cond$i$i$i206$i = HEAPU8[$400 + $399 >> 0] | 0;
      } else {
       $719 = $399;
       $cond$i$i$i206$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i206$i;
      $405 = ($405 << 8 & 2147483392 | ($cond$i$i$i206$i | $402 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $405;
      if ($398 >>> 0 >= 8388609) break; else {
       $399 = $719;
       $402 = $cond$i$i$i206$i;
      }
     }
    }
    HEAP16[$arrayidx17$11$i >> 1] = Math_imul(($inc$i178$i << 1) + -1 | 0, $393 << 16 >> 16) | 0;
   }
   $arrayidx17$12$i = $q_ptr$020$i + 24 | 0;
   $406 = HEAP16[$arrayidx17$12$i >> 1] | 0;
   if ($406 << 16 >> 16 > 0) {
    $407 = HEAP32[$rng$i >> 2] | 0;
    $408 = HEAP32[$val$i >> 2] | 0;
    $shr$i132$i = $407 >>> 8;
    $ret$0$i134$i = -1;
    $s$0$i133$i = $407;
    while (1) {
     $inc$i135$i = $ret$0$i134$i + 1 | 0;
     $mul$i138$i = Math_imul($shr$i132$i, HEAPU8[$icdf$i + $inc$i135$i >> 0] | 0) | 0;
     if ($408 >>> 0 >= $mul$i138$i >>> 0) break;
     $ret$0$i134$i = $inc$i135$i;
     $s$0$i133$i = $mul$i138$i;
    }
    $sub$i141$i = $408 - $mul$i138$i | 0;
    HEAP32[$val$i >> 2] = $sub$i141$i;
    $sub3$i142$i = $s$0$i133$i - $mul$i138$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i142$i;
    if ($sub3$i142$i >>> 0 < 8388609) {
     $$pre14$i$i153$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $410 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $411 = $sub3$i142$i;
     $412 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $415 = HEAP32[$rem$i$i$i >> 2] | 0;
     $418 = $sub$i141$i;
     while (1) {
      $410 = $410 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $410;
      $411 = $411 << 8;
      HEAP32[$rng$i >> 2] = $411;
      if ($412 >>> 0 < $$pre14$i$i153$i >>> 0) {
       $413 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i159$i = $412 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i159$i;
       $720 = $inc$i$i$i159$i;
       $cond$i$i$i163$i = HEAPU8[$413 + $412 >> 0] | 0;
      } else {
       $720 = $412;
       $cond$i$i$i163$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i163$i;
      $418 = ($418 << 8 & 2147483392 | ($cond$i$i$i163$i | $415 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $418;
      if ($411 >>> 0 >= 8388609) break; else {
       $412 = $720;
       $415 = $cond$i$i$i163$i;
      }
     }
    }
    HEAP16[$arrayidx17$12$i >> 1] = Math_imul(($inc$i135$i << 1) + -1 | 0, $406 << 16 >> 16) | 0;
   }
   $arrayidx17$13$i = $q_ptr$020$i + 26 | 0;
   $419 = HEAP16[$arrayidx17$13$i >> 1] | 0;
   if ($419 << 16 >> 16 > 0) {
    $420 = HEAP32[$rng$i >> 2] | 0;
    $421 = HEAP32[$val$i >> 2] | 0;
    $shr$i89$i = $420 >>> 8;
    $ret$0$i91$i = -1;
    $s$0$i90$i = $420;
    while (1) {
     $inc$i92$i = $ret$0$i91$i + 1 | 0;
     $mul$i95$i = Math_imul($shr$i89$i, HEAPU8[$icdf$i + $inc$i92$i >> 0] | 0) | 0;
     if ($421 >>> 0 >= $mul$i95$i >>> 0) break;
     $ret$0$i91$i = $inc$i92$i;
     $s$0$i90$i = $mul$i95$i;
    }
    $sub$i98$i = $421 - $mul$i95$i | 0;
    HEAP32[$val$i >> 2] = $sub$i98$i;
    $sub3$i99$i = $s$0$i90$i - $mul$i95$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i99$i;
    if ($sub3$i99$i >>> 0 < 8388609) {
     $$pre14$i$i110$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $423 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $424 = $sub3$i99$i;
     $425 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $428 = HEAP32[$rem$i$i$i >> 2] | 0;
     $431 = $sub$i98$i;
     while (1) {
      $423 = $423 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $423;
      $424 = $424 << 8;
      HEAP32[$rng$i >> 2] = $424;
      if ($425 >>> 0 < $$pre14$i$i110$i >>> 0) {
       $426 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i116$i = $425 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i116$i;
       $721 = $inc$i$i$i116$i;
       $cond$i$i$i120$i = HEAPU8[$426 + $425 >> 0] | 0;
      } else {
       $721 = $425;
       $cond$i$i$i120$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i120$i;
      $431 = ($431 << 8 & 2147483392 | ($cond$i$i$i120$i | $428 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $431;
      if ($424 >>> 0 >= 8388609) break; else {
       $425 = $721;
       $428 = $cond$i$i$i120$i;
      }
     }
    }
    HEAP16[$arrayidx17$13$i >> 1] = Math_imul(($inc$i92$i << 1) + -1 | 0, $419 << 16 >> 16) | 0;
   }
   $arrayidx17$14$i = $q_ptr$020$i + 28 | 0;
   $432 = HEAP16[$arrayidx17$14$i >> 1] | 0;
   if ($432 << 16 >> 16 > 0) {
    $433 = HEAP32[$rng$i >> 2] | 0;
    $434 = HEAP32[$val$i >> 2] | 0;
    $shr$i46$i = $433 >>> 8;
    $ret$0$i48$i = -1;
    $s$0$i47$i = $433;
    while (1) {
     $inc$i49$i = $ret$0$i48$i + 1 | 0;
     $mul$i52$i = Math_imul($shr$i46$i, HEAPU8[$icdf$i + $inc$i49$i >> 0] | 0) | 0;
     if ($434 >>> 0 >= $mul$i52$i >>> 0) break;
     $ret$0$i48$i = $inc$i49$i;
     $s$0$i47$i = $mul$i52$i;
    }
    $sub$i55$i = $434 - $mul$i52$i | 0;
    HEAP32[$val$i >> 2] = $sub$i55$i;
    $sub3$i56$i = $s$0$i47$i - $mul$i52$i | 0;
    HEAP32[$rng$i >> 2] = $sub3$i56$i;
    if ($sub3$i56$i >>> 0 < 8388609) {
     $$pre14$i$i67$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
     $436 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
     $437 = $sub3$i56$i;
     $438 = HEAP32[$offs$i$i$i$i >> 2] | 0;
     $441 = HEAP32[$rem$i$i$i >> 2] | 0;
     $444 = $sub$i55$i;
     while (1) {
      $436 = $436 + 8 | 0;
      HEAP32[$nbits_total$i$i$i >> 2] = $436;
      $437 = $437 << 8;
      HEAP32[$rng$i >> 2] = $437;
      if ($438 >>> 0 < $$pre14$i$i67$i >>> 0) {
       $439 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i73$i = $438 + 1 | 0;
       HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i73$i;
       $722 = $inc$i$i$i73$i;
       $cond$i$i$i77$i = HEAPU8[$439 + $438 >> 0] | 0;
      } else {
       $722 = $438;
       $cond$i$i$i77$i = 0;
      }
      HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i77$i;
      $444 = ($444 << 8 & 2147483392 | ($cond$i$i$i77$i | $441 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $444;
      if ($437 >>> 0 >= 8388609) break; else {
       $438 = $722;
       $441 = $cond$i$i$i77$i;
      }
     }
    }
    HEAP16[$arrayidx17$14$i >> 1] = Math_imul(($inc$i49$i << 1) + -1 | 0, $432 << 16 >> 16) | 0;
   }
   $arrayidx17$15$i = $q_ptr$020$i + 30 | 0;
   $445 = HEAP16[$arrayidx17$15$i >> 1] | 0;
   if ($445 << 16 >> 16 <= 0) break;
   $446 = HEAP32[$rng$i >> 2] | 0;
   $447 = HEAP32[$val$i >> 2] | 0;
   $shr$i3$i = $446 >>> 8;
   $ret$0$i5$i = -1;
   $s$0$i4$i = $446;
   while (1) {
    $inc$i6$i = $ret$0$i5$i + 1 | 0;
    $mul$i9$i = Math_imul($shr$i3$i, HEAPU8[$icdf$i + $inc$i6$i >> 0] | 0) | 0;
    if ($447 >>> 0 >= $mul$i9$i >>> 0) break;
    $ret$0$i5$i = $inc$i6$i;
    $s$0$i4$i = $mul$i9$i;
   }
   $sub$i12$i = $447 - $mul$i9$i | 0;
   HEAP32[$val$i >> 2] = $sub$i12$i;
   $sub3$i13$i = $s$0$i4$i - $mul$i9$i | 0;
   HEAP32[$rng$i >> 2] = $sub3$i13$i;
   if ($sub3$i13$i >>> 0 < 8388609) {
    $$pre14$i$i24$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
    $449 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
    $450 = $sub3$i13$i;
    $451 = HEAP32[$offs$i$i$i$i >> 2] | 0;
    $454 = HEAP32[$rem$i$i$i >> 2] | 0;
    $457 = $sub$i12$i;
    while (1) {
     $449 = $449 + 8 | 0;
     HEAP32[$nbits_total$i$i$i >> 2] = $449;
     $450 = $450 << 8;
     HEAP32[$rng$i >> 2] = $450;
     if ($451 >>> 0 < $$pre14$i$i24$i >>> 0) {
      $452 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i30$i = $451 + 1 | 0;
      HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i30$i;
      $723 = $inc$i$i$i30$i;
      $cond$i$i$i34$i = HEAPU8[$452 + $451 >> 0] | 0;
     } else {
      $723 = $451;
      $cond$i$i$i34$i = 0;
     }
     HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i34$i;
     $457 = ($457 << 8 & 2147483392 | ($cond$i$i$i34$i | $454 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i >> 2] = $457;
     if ($450 >>> 0 >= 8388609) break; else {
      $451 = $723;
      $454 = $cond$i$i$i34$i;
     }
    }
   }
   HEAP16[$arrayidx17$15$i >> 1] = Math_imul(($inc$i6$i << 1) + -1 | 0, $445 << 16 >> 16) | 0;
  } while (0);
  $i$019$i = $i$019$i + 1 | 0;
  if (($i$019$i | 0) >= ($shr$i648 | 0)) break; else $q_ptr$020$i = $q_ptr$020$i + 32 | 0;
 }
 STACKTOP = sp;
 return;
}
function _celt_encode_with_ec($st, $pcm, $frame_size, $compressed, $nbCompressedBytes, $enc) {
 $st = $st | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $compressed = $compressed | 0;
 $nbCompressedBytes = $nbCompressedBytes | 0;
 $enc = $enc | 0;
 var $$$i = 0.0, $$$us = 0.0, $$76$i = 0.0, $$call1150 = 0, $$idx$val = 0, $$idx1061$val = 0, $$mul486 = 0.0, $$pr = 0, $$pre = 0, $$pre$i1076 = 0, $$pre$i233 = 0, $$pre$i252 = 0, $$pre$i259 = 0, $$pre$i329 = 0, $$pre$i350 = 0, $$pre$i420 = 0, $$pre$i441 = 0, $$pre$i516 = 0, $$pre$pre$i = 0, $$pre1425$pre = 0, $$pre17$i = 0, $$pre28$pre$i = 0, $$pre28$pre$i260 = 0, $$pre28$pre$i351 = 0, $$pre30$pre$i = 0, $$pre55$i = 0, $$pre55$i300 = 0, $$pre55$i391 = 0, $$pre630 = 0, $$pre635 = 0, $$pre639 = 0, $$pre641 = 0, $$pre644 = 0, $$pre647 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $105 = 0, $107 = 0, $109 = 0.0, $11 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $12 = 0, $120 = 0, $122 = 0.0, $125 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0.0, $136 = 0, $138 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $147 = 0.0, $151 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $160 = 0.0, $163 = 0.0, $164 = 0.0, $166 = 0, $168 = 0, $17 = 0, $170 = 0.0, $176 = 0, $179 = 0, $18 = 0, $194 = 0.0, $2 = 0, $20 = 0, $204 = 0, $206 = 0, $215 = 0, $216 = 0, $217 = 0, $221 = 0, $224 = 0, $225 = 0.0, $230 = 0, $232 = 0, $234 = 0, $236 = 0, $237 = 0, $243 = 0, $25 = 0, $251 = 0, $252 = 0, $254 = 0.0, $255 = 0.0, $26 = 0, $261 = 0, $267 = 0.0, $268 = 0, $269 = 0, $275 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $304 = 0, $307 = 0.0, $31 = 0, $311 = 0, $312 = 0, $317 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0, $329 = 0.0, $33 = 0.0, $334 = 0, $335 = 0.0, $336 = 0, $339 = 0, $34 = 0.0, $341 = 0, $342 = 0, $344 = 0, $345 = 0, $349 = 0, $352 = 0, $353 = 0, $354 = 0, $358 = 0, $359 = 0, $362 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $370 = 0, $38 = 0, $382 = 0, $383 = 0, $384 = 0, $387 = 0, $389 = 0, $390 = 0, $391 = 0, $395 = 0, $398 = 0, $4 = 0, $400 = 0, $402 = 0, $403 = 0, $406 = 0, $408 = 0, $409 = 0, $410 = 0, $414 = 0, $415 = 0, $418 = 0, $42 = 0, $420 = 0, $422 = 0, $423 = 0, $426 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $434 = 0, $435 = 0, $438 = 0.0, $44 = 0.0, $441 = 0.0, $442 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $59 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $82 = 0, $84 = 0, $85 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $LM$01388 = 0, $_enc = 0, $add$1$i = 0, $add$i$1$i = 0.0, $add$i$2$i = 0.0, $add$i$3$i = 0.0, $add$i$4$i = 0.0, $add$i$5$i = 0.0, $add$i$6$i = 0.0, $add$i$7$i = 0.0, $add$i$i = 0.0, $add$i$i107 = 0, $add$i$i18 = 0, $add$i$us$i = 0.0, $add$i$us$i283 = 0.0, $add$i$us$i374 = 0.0, $add$i100 = 0, $add$i15 = 0, $add$i157 = 0, $add$i195 = 0, $add$i3$i = 0, $add$i33 = 0, $add$i9$i = 0.0, $add$ptr = 0, $add$ptr16$us$i = 0, $add$ptr264 = 0, $add$ptr29 = 0, $add$ptr31 = 0, $add$ptr311 = 0, $add$ptr315 = 0, $add$ptr319 = 0, $add$ptr33 = 0, $add$ptr35 = 0, $add$us$i245 = 0, $add$us$i315 = 0, $add$us$i406 = 0, $add1120 = 0, $add1121 = 0, $add113$i = 0, $add115$i = 0.0, $add1273 = 0, $add1285 = 0, $add1290 = 0, $add1345 = 0, $add1359 = 0, $add137$i = 0, $add139$i = 0, $add144 = 0, $add1460 = 0, $add15$us$i = 0, $add1525$us = 0, $add1641$us = 0, $add1657$us = 0, $add1657$us1292 = 0, $add18$1$i$pre$phiZZZ2D = 0, $add18$i = 0.0, $add18$i22$pre$phiZZ2D = 0, $add231 = 0, $add24$i = 0.0, $add241 = 0, $add26$1$i = 0.0, $add26$2$i = 0.0, $add26$3$i = 0.0, $add26$4$i = 0.0, $add26$5$i = 0.0, $add26$6$i = 0.0, $add26$i = 0.0, $add293 = 0, $add34$i145$pre$phiZZ2D = 0, $add35$i = 0, $add382 = 0, $add387 = 0, $add6$pre$phi$i$i135Z2D = 0, $add6$pre$phi$i$iZ2D = 0, $add6$pre$phi$i185Z2D = 0, $add6$pre$phi$i223Z2D = 0, $add6$pre$phi$i30$iZ2D = 0, $add6$pre$phi$iZ2D = 0, $add608 = 0.0, $add637 = 0, $add69$i = 0, $add700 = 0.0, $add74$i = 0, $add771 = 0.0, $add771$us = 0.0, $add812 = 0, $add851$pre$phiZ2D = 0, $add9$i = 0, $add9$i$i = 0, $add9$i191 = 0, $add9$i36$i = 0, $add959$us = 0, $alloc_trim$0 = 0, $alloc_trim$1 = 0, $alpha$0 = 0.0, $analysis = 0, $arch454 = 0, $arraydecay317 = 0, $arrayidx = 0, $arrayidx1$i71 = 0, $arrayidx10$1$i = 0, $arrayidx10$2$i = 0, $arrayidx10$3$i = 0, $arrayidx10$4$i = 0, $arrayidx10$5$i = 0, $arrayidx10$6$i = 0, $arrayidx10$7$i = 0, $arrayidx10$i1073 = 0, $arrayidx1113 = 0, $arrayidx16$1$i = 0, $arrayidx16$2$i = 0, $arrayidx16$3$i = 0, $arrayidx16$4$i = 0, $arrayidx16$5$i = 0, $arrayidx16$6$i = 0, $arrayidx16$7$i = 0, $arrayidx16$i = 0, $arrayidx1620 = 0, $arrayidx19$1$i30 = 0, $arrayidx19$i23 = 0, $arrayidx24$1$i$pre$phiZZZ2D = 0, $arrayidx24$i$pre$phiZZ2D = 0, $arrayidx3$us$i = 0, $arrayidx3$us$i270 = 0, $arrayidx3$us$i361 = 0, $arrayidx30$i = 0, $arrayidx35$i = 0, $arrayidx36$i = 0, $arrayidx4$i = 0, $arrayidx40$i$pre$phiZZ2D = 0, $arrayidx43$i = 0, $arrayidx484 = 0, $arrayidx49$i = 0, $arrayidx58$i = 0, $arrayidx69$i = 0, $arrayidx710 = 0, $arrayidx8$1$i = 0, $arrayidx8$i = 0, $arrayidx8$i16 = 0, $arrayidx8$peel$i = 0, $arrayidx840 = 0, $arrayidx902 = 0, $arrayidx960$us = 0, $balance = 0, $base_target$0 = 0, $base_target$1 = 0, $bits_left$addr$1$lcssa$i = 0, $bits_left$addr$131$1$i = 0, $bits_left$addr$131$i = 0, $bits_left$addr$2$1$i = 0, $bits_left$addr$2$i = 0, $bits_left$addr$3$1$i = 0, $bits_left$addr$3$i = 0, $boost$0$lcssa1441 = 0, $boost$0$lcssa1442 = 0, $boost$01325 = 0, $c$0 = 0, $c$0$1$i = 0, $c$0$i = 0, $c$0$i98 = 0, $c$0$us$i = 0, $c$0$us$i1187 = 0, $c$0$us$i234 = 0, $c$0$us$i242 = 0, $c$0$us$i262 = 0, $c$0$us$i302 = 0, $c$0$us$i353 = 0, $c$0$us$i393 = 0, $c$0$us$i443 = 0, $c$0$us$i494 = 0, $c$0$us22$i = 0, $c$0$us22$i331 = 0, $c$0$us22$i422 = 0, $c$11379$us = 0, $c$2$us = 0, $c$3$us = 0, $c$4$us = 0, $c$4$us1285 = 0, $call1045512 = 0, $call1455 = 0, $call342 = 0, $call882 = 0.0, $call896 = 0, $cmp = 0, $cmp1114 = 0, $cmp1140 = 0, $cmp1248 = 0, $cmp1527$us = 0, $cmp153$i = 0, $cmp1536$us = 0, $cmp16531282 = 0, $cmp17$i = 0, $cmp178 = 0, $cmp184$i = 0, $cmp2$i73 = 0, $cmp236 = 0, $cmp25$i257 = 0, $cmp281 = 0, $cmp31$i = 0, $cmp34$i86 = 0, $cmp36 = 0, $cmp371 = 0, $cmp409 = 0, $cmp414 = 0, $cmp460 = 0, $cmp467$i = 0, $cmp539$us = 0, $cmp549$us = 0, $cmp66 = 0, $cmp9$1$i = 0, $cmp9$i = 0, $cmp9$i82 = 0, $cmp9551345 = 0, $coded_bins$0$i = 0, $complexity390 = 0, $cond = 0, $cond$1$i = 0, $cond$i = 0, $cond$i1082 = 0.0, $cond$i1099 = 0, $cond$i17 = 0, $cond$sub78 = 0, $cond10$i = 0, $cond1086 = 0, $cond1317 = 0, $cond1323 = 0, $cond138$i = 0, $cond1387 = 0, $cond144$i = 0, $cond15$i1163 = 0.0, $cond168$i = 0, $cond185 = 0, $cond185$shr188 = 0, $cond221$i = 0, $cond259 = 0.0, $cond259$call268 = 0.0, $cond300 = 0, $cond32$i = 0, $cond568$us = 0.0, $cond623 = 0.0, $cond635 = 0.0, $cond738 = 0.0, $cond784 = 0.0, $cond796 = 0.0, $cond82$i = 0.0, $cond89$i = 0, $cond9$i1120 = 0.0, $cond9$i1135 = 0.0, $cond9$i1155 = 0.0, $consec_transient1677 = 0, $constrained_vbr879 = 0, $conv$us$i = 0, $conv$us$i267 = 0, $conv$us$i358 = 0, $conv10$i = 0, $conv110$pre$phi$iZ2D = 0.0, $conv1149 = 0.0, $conv13$1$i = 0.0, $conv13$i = 0.0, $conv13$us$i = 0, $conv131$i = 0, $conv1512 = 0, $conv2$us$i = 0.0, $conv2$us$i319 = 0.0, $conv2$us$i410 = 0.0, $conv20$1$i = 0, $conv20$2$i = 0, $conv20$3$i = 0, $conv20$4$i = 0, $conv20$5$i = 0, $conv20$6$i = 0, $conv20$i = 0, $conv215$i = 0, $conv34$us$i = 0.0, $conv357 = 0.0, $conv358 = 0.0, $conv41$i = 0, $conv6$i = 0, $conv606 = 0.0, $conv7$i = 0.0, $conv87$i = 0.0, $conv9$i = 0, $conv91$i = 0.0, $conv93$i = 0.0, $count$01378$us = 0, $count$11370$us = 0, $count_dynalloc$0$lcssa = 0, $count_dynalloc$01364 = 0, $count_dynalloc$01364$us = 0, $count_dynalloc$1 = 0, $count_dynalloc$1$us = 0, $curr$052$i = 0, $curr$1$i = 0, $curr$1$peel$i = 0, $dec$1$i = 0, $dec$i25 = 0, $diff$0$us$i = 0.0, $diff$01377$us = 0.0, $diff$1$lcssa$lcssa$i = 0.0, $diff$11369$us = 0.0, $diff$119$us$i = 0.0, $diff$2 = 0.0, $div = 0, $div$i81 = 0, $div$us$i = 0.0, $div114$i = 0, $div152$i = 0.0, $div246 = 0, $div267 = 0, $div74 = 0, $div886 = 0, $dual_stereo = 0, $dynalloc_logp$01341 = 0, $dynalloc_loop_logp$01324 = 0, $eBands4 = 0, $effectiveBytes$0 = 0, $effectiveBytes$1 = 0, $effectiveBytes$2 = 0, $enc$addr$0 = 0, $enc$addr$0$idx$val = 0, $enc$addr$0$idx1054 = 0, $enc$addr$0$idx1055 = 0, $enc$addr$0$idx1058 = 0, $enc$addr$0$idx1058$val = 0, $enc$idx45$i = 0, $enc$idx46$i = 0, $end_offs$i$i = 0, $end_offs$i$i$i = 0, $end_offs$i$i$i111 = 0, $end_offs$i$i161 = 0, $end_offs$i$i199 = 0, $end_offs$i$i6$i = 0, $end_window$i$i = 0, $end_window$i$i103 = 0, $end_window$i1$i = 0, $end_window$i153 = 0, $end_window$i31 = 0, $error$i$i = 0, $error$i$i114 = 0, $error$i164 = 0, $error$i202 = 0, $error$i36 = 0, $error$i9$i = 0, $follow$01357 = 0.0, $follow$01357$us = 0.0, $frame_avg$0$lcssa = 0.0, $frame_avg$01358 = 0.0, $frame_avg$01358$us = 0.0, $gain1 = 0, $hf_average = 0, $hf_sum$0$us$i = 0, $hf_sum$193$us$i = 0, $hf_sum$2$us$i = 0, $hf_sum$3$us$i = 0, $hf_sum$4$i = 0, $hf_sum$5$i = 0, $i$0$lcssa$i = 0, $i$01386 = 0, $i$015$i = 0, $i$018$i = 0, $i$018$i1130 = 0, $i$018$i1150 = 0, $i$018$us$i = 0, $i$018$us$i314 = 0, $i$018$us$i405 = 0, $i$026$us$i = 0, $i$026$us$i266 = 0, $i$026$us$i357 = 0, $i$028$us$i = 0, $i$029$1$i = 0, $i$029$i = 0, $i$030$i = 0, $i$042$i = 0, $i$053$i = 0, $i$069$i = 0, $i$07$i$1$i = 0, $i$07$i$2$i = 0, $i$07$i$3$i = 0, $i$07$i$4$i = 0, $i$07$i$5$i = 0, $i$07$i$6$i = 0, $i$07$i$7$i = 0, $i$07$i$i = 0, $i$07$i$us$i = 0, $i$07$i$us$i280 = 0, $i$07$i$us$i371 = 0, $i$07$i5$i = 0, $i$085$i = 0, $i$088$i = 0, $i$094$us$i = 0, $i$101351 = 0, $i$111346$us = 0, $i$11384 = 0, $i$120$us$i = 0, $i$120$us$i308 = 0, $i$120$us$i399 = 0, $i$120$us28$i = 0, $i$120$us28$i334 = 0, $i$120$us28$i425 = 0, $i$121342 = 0, $i$124$i = 0, $i$131317$us = 0, $i$141315 = 0, $i$150$i = 0, $i$151313 = 0, $i$161281$us = 0, $i$166$i = 0, $i$171283$us = 0, $i$171283$us1291 = 0, $i$189$i = 0, $i$192$i = 0, $i$2$i = 0, $i$21371$us = 0, $i$220$us$i = 0, $i$264$i = 0, $i$284$i = 0, $i$31365 = 0, $i$31365$us = 0, $i$362$i = 0, $i$381$us$i = 0, $i$41362 = 0, $i$51359 = 0, $i$51359$us = 0, $i$61355 = 0, $i$71347 = 0, $i$81349 = 0, $idx$neg$i = 0, $idx$neg$i476 = 0, $idx$neg$i64 = 0, $inc$i$i$i = 0, $inc$i$i$i123 = 0, $inc$i$i173 = 0, $inc$i$i18$i = 0, $inc$i$i211 = 0, $inc$i$i39 = 0, $inc$peel$i = 0, $intensity = 0, $intensity1453 = 0, $isTransient$0 = 0, $isTransient$112051223 = 0, $isTransient$21245 = 0, $isTransient$21246 = 0, $j$01326 = 0, $j$026$us$i = 0, $j$035$i = 0, $j$084$us$i = 0, $lastCodedBands1454 = 0, $lfe = 0, $lsb_depth = 0, $m$068$i = 0.0, $m$161$i = 0.0, $mask$0$us = 0.0, $mask_avg$01376$us = 0.0, $mask_avg$11368$us = 0.0, $mask_avg$2 = 0.0, $maxLM = 0, $maxval$0$$i = 0.0, $maxval$0$$i1133 = 0.0, $maxval$0$$i1153 = 0.0, $maxval$0$lcssa$i = 0.0, $maxval$0$lcssa$i1139 = 0.0, $maxval$0$lcssa$i1159 = 0.0, $maxval$019$i = 0.0, $maxval$019$i1129 = 0.0, $maxval$019$i1149 = 0.0, $mean_diff$0$us$i = 0.0, $mean_diff$1$lcssa$lcssa$i = 0.0, $mean_diff$180$us$i = 0.0, $midband$0 = 0, $minXC$0$$i = 0.0, $minXC$0$lcssa$i = 0.0, $minXC$023$i = 0.0, $min_bandwidth$0 = 0, $minval$0$lcssa$i = 0.0, $minval$0$lcssa$i1140 = 0.0, $minval$0$lcssa$i1160 = 0.0, $minval$020$i = 0.0, $minval$020$i1128 = 0.0, $minval$020$i1148 = 0.0, $mul = 0, $mul$i1097 = 0, $mul$i438 = 0, $mul$i487 = 0, $mul$us$i = 0, $mul$us$i235 = 0, $mul$us$i243 = 0, $mul$us$i263 = 0, $mul$us$i303 = 0, $mul$us$i354 = 0, $mul$us$i394 = 0, $mul1024$us$i = 0, $mul106$i = 0.0, $mul11$i = 0, $mul13$i = 0, $mul13$us49$i = 0, $mul13$us49$i332 = 0, $mul13$us49$i423 = 0, $mul133$us$i = 0, $mul1392 = 0, $mul14$us$i = 0, $mul147 = 0, $mul15$1$i = 0.0, $mul15$i = 0.0, $mul15$us$i = 0, $mul1518 = 0, $mul1518664 = 0, $mul1518665 = 0, $mul1524$us = 0, $mul1640$us = 0, $mul1656$us1310 = 0, $mul183$i = 0.0, $mul19$us$i = 0, $mul19$us$i264 = 0, $mul19$us$i355 = 0, $mul191$i = 0, $mul2$us$i = 0, $mul22$us$i = 0, $mul235 = 0, $mul242 = 0, $mul244 = 0, $mul30 = 0, $mul303$pre$phiZ2D = 0, $mul35$us$i = 0.0, $mul435 = 0, $mul4351216 = 0, $mul4351225 = 0, $mul447 = 0.0, $mul47$i = 0.0, $mul486 = 0.0, $mul5$us$i = 0, $mul51$i = 0.0, $mul512 = 0, $mul536$us = 0, $mul59 = 0, $mul6$i = 0.0, $mul61$i = 0.0, $mul617 = 0.0, $mul8$i = 0.0, $mul839 = 0.0, $mul88$i = 0.0, $mul958$us = 0, $nbAvailableBytes$1 = 0, $nbAvailableBytes$2 = 0, $nbAvailableBytes$3 = 0, $nbAvailableBytes$5 = 0, $nbBands$0$us$i = 0, $nbBands$191$us$i = 0, $nbBands$2$us$i = 0, $nbCompressedBytes$addr$1 = 0, $nbCompressedBytes$addr$3 = 0, $nbCompressedBytes$addr$4 = 0, $nbCompressedBytes$addr$5 = 0, $nbCompressedBytes$addr$5$shr1202 = 0, $nbCompressedBytes$addr$6 = 0, $nbCompressedBytes$addr$6$ = 0, $nbEBands2 = 0, $nbFilledBytes$0 = 0, $nbits_total$i190 = 0, $nend_bits$i$i = 0, $nend_bits$i$i104 = 0, $nend_bits$i154 = 0, $nend_bits$i2$i = 0, $nend_bits$i32 = 0, $offs$i$i = 0, $offs$i$i$i = 0, $offs$i$i$i110 = 0, $offs$i$i160 = 0, $offs$i$i198 = 0, $offs$i$i5$i = 0, $or$cond1$i = 0, $or$cond101231 = 0, $or5$i189 = 0, $overlap_max = 0, $phitmp$i1078 = 0, $phitmp1$i = 0, $pitch_change$0 = 0, $pitch_index = 0, $q2$1$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i127 = 0, $retval$0$i$i177 = 0, $retval$0$i$i215 = 0, $retval$0$i$i22$i = 0, $retval$1 = 0, $rng = 0, $shl$1$i = 0, $shl$2$i = 0, $shl$3$i = 0, $shl$4$i = 0, $shl$5$i = 0, $shl$6$i = 0, $shl$7$i = 0, $shl$i = 0, $shl$i1072 = 0, $shl$i1086 = 0, $shl$i231 = 0, $shl$i256 = 0, $shl$i347 = 0, $shl1066 = 0, $shl1079 = 0, $shl1080 = 0, $shl1080$cond1086 = 0, $shl1393 = 0, $shl15$us$i = 0, $shl15$us$i275 = 0, $shl15$us$i366 = 0, $shl22 = 0, $shl25$1$i = 0, $shl25$2$i = 0, $shl25$3$i = 0, $shl25$4$i = 0, $shl25$5$i = 0, $shl25$6$i = 0, $shl25$7$i = 0, $shl25$i = 0, $shl35$i1092 = 0, $shl42$i = 0, $shl533$i = 0, $shl58$i = 0, $shortBlocks$012061222 = 0, $shortBlocks$11247 = 0, $shortBlocks$11248 = 0, $shortMdctSize = 0, $shr$i = 0, $shr$i4 = 0, $shr$i458 = 0, $shr$i507 = 0, $shr$i537 = 0, $shr$i553 = 0, $shr$i569 = 0, $shr1202 = 0, $shr1297 = 0, $shr1311 = 0, $shr134$i = 0, $shr188 = 0, $shr3$i = 0, $shr3$i459 = 0, $shr3$i538 = 0, $shr3$i554 = 0, $shr3$i570 = 0, $signalBandwidth$0 = 0, $silence$01196 = 0, $spec$select$i102 = 0, $spec$select$i1102 = 0, $spec$select1$i = 0, $spec$select1032 = 0, $spec$select1035 = 0, $spec$select1036 = 0, $spec$select1042 = 0, $spec$select1254 = 0, $spec$select1255 = 0, $spec$select1260 = 0.0, $spec$select1261 = 0, $spec$select1268 = 0, $spec$select1269 = 0, $spec_avg = 0, $spread_decision1011 = 0, $spread_decision1031 = 0, $spread_decision1036 = 0, $spread_old$i = 0, $stereo_saving1189 = 0, $storage$i = 0, $storage$i$i162 = 0, $storage$i$i200 = 0, $storage$i55 = 0, $storage$i66 = 0, $storemerge = 0, $storemerge$i = 0.0, $storemerge1031 = 0, $sub = 0, $sub$i1103 = 0, $sub$i1124 = 0.0, $sub$i1141 = 0.0, $sub$i1161 = 0.0, $sub$i2 = 0, $sub$i456 = 0, $sub$i535 = 0, $sub$i551 = 0, $sub$i567 = 0, $sub$i594 = 0, $sub$i95 = 0, $sub1$i = 0, $sub1$i$i = 0, $sub111$us$i = 0.0, $sub1127 = 0, $sub11271447 = 0, $sub117$i = 0.0, $sub1200 = 0, $sub1221 = 0, $sub129$i = 0, $sub1396 = 0, $sub1409 = 0, $sub141 = 0, $sub1462 = 0, $sub1462$call1455 = 0, $sub148 = 0, $sub1516 = 0, $sub159 = 0, $sub161$i = 0, $sub180$i = 0.0, $sub30$i = 0.0, $sub31$i = 0.0, $sub36$i = 0, $sub383 = 0, $sub384 = 0, $sub386 = 0, $sub4$i = 0.0, $sub579$us = 0, $sub6$i = 0, $sub65$i1185 = 0, $sub686 = 0.0, $sub686$us = 0.0, $sub7$i547 = 0, $sub711 = 0.0, $sub72$i = 0.0, $sub743 = 0.0, $sub743$sub745$us = 0.0, $sub743$us = 0.0, $sub745 = 0.0, $sub745$us = 0.0, $sub760$us = 0.0, $sub778 = 0.0, $sub80$i = 0.0, $sub91$i = 0, $sum$0$us$i = 0, $sum$192$us$i = 0, $sum$2$us$i = 0, $sumLR$041$i = 0.0, $sumLR$1$lcssa$i = 0.0, $sumLR$137$i = 0.0, $sumMS$040$i = 0.0, $sumMS$1$lcssa$i = 0.0, $sumMS$136$i = 0.0, $surround_masking$0$ph = 0.0, $surround_masking$01233 = 0.0, $surround_trim$0$ph = 0.0, $surround_trim$01234 = 0.0, $tapset_decision = 0, $target$0$i = 0, $target$1$i = 0, $target$2 = 0, $target$2$i = 0, $target$3$i = 0, $target$5$i = 0, $tcount$sroa$0$087$us$i = 0, $tcount$sroa$11$285$us$i = 0, $tcount$sroa$7$086$us$i = 0, $tell$0 = 0, $tell$056$i = 0, $tell$1 = 0, $tell$1$i = 0, $tell$1$peel$i = 0, $tell$2$lcssa = 0, $tell$21339 = 0, $tell$31322 = 0, $tell$4 = 0, $tell$41443 = 0, $tell$41444 = 0, $tell$5 = 0, $tell0_frac$0 = 0, $temporal_vbr$0 = 0.0, $tf_chan = 0, $tf_changed$0$lcssa$i = 0, $tf_changed$054$i = 0, $tf_changed$1$i = 0, $tf_estimate = 0, $tf_select$0 = 0, $tf_select$addr$0$i = 0, $tobool$i1098 = 0, $tobool1234 = 0, $tobool13$i = 0, $tobool2881197 = 0, $tobool417 = 0, $tobool42812151218 = 0, $tobool78$i = 0, $tonal_average = 0, $tot_boost = 0, $total_bits$1 = 0, $total_boost$0$lcssa = 0, $total_boost$01340 = 0, $total_boost$1$lcssa1439 = 0, $total_boost$1$lcssa1440 = 0, $total_boost$11323 = 0, $transient_got_disabled$01204$ph = 0, $transient_got_disabled$012041224 = 0, $trim$1$i = 0.0, $trim$2$i = 0.0, $upsample = 0, $used$0$i = 0, $used$0$i$i = 0, $used$0$i$i118 = 0, $used$0$i13$i = 0, $used$0$i168 = 0, $used$0$i206 = 0, $used$1$i = 0, $used$1$i$i = 0, $used$1$i$i137 = 0, $used$1$i187 = 0, $used$1$i225 = 0, $used$1$i32$i = 0, $vbr = 0, $vbr_count = 0, $vbr_drift = 0, $vbr_offset1352 = 0, $vbr_rate$0 = 0, $vbr_reservoir1344 = 0, $vla = 0, $vla1065 = 0, $vla1389 = 0, $vla1390 = 0, $vla1391 = 0, $vla1494 = 0, $vla423 = 0, $vla423$alloca_mul = 0, $vla4231200 = 0, $vla4231200$alloca_mul = 0, $vla4231207$ph = 0, $vla42312071221 = 0, $vla425 = 0, $vla4251201 = 0, $vla4251209$ph = 0, $vla42512091220 = 0, $vla427 = 0, $vla4271202 = 0, $vla4271212$ph = 0, $vla42712121219 = 0, $vla436 = 0, $vla4361217 = 0, $vla4361227 = 0, $vla511 = 0, $vla857 = 0, $vla857$alloca_mul = 0, $vla874 = 0, $vla875 = 0, $vla876 = 0, $vla883 = 0, $vla952 = 0, $weak_transient = 0, $window$0$i = 0, $window$0$i$i = 0, $window$0$i$i117 = 0, $window$0$i12$i = 0, $window$0$i167 = 0, $window$0$i205 = 0, $window$1$i = 0, $window$1$i$i = 0, $window$1$i$i136 = 0, $window$1$i186 = 0, $window$1$i224 = 0, $window$1$i31$i = 0, $xy$0$lcssa$i$1$i = 0.0, $xy$0$lcssa$i$2$i = 0.0, $xy$0$lcssa$i$3$i = 0.0, $xy$0$lcssa$i$4$i = 0.0, $xy$0$lcssa$i$5$i = 0.0, $xy$0$lcssa$i$6$i = 0.0, $xy$0$lcssa$i$7$i = 0.0, $xy$0$lcssa$i$i = 0.0, $xy$0$lcssa$i$us$i = 0.0, $xy$0$lcssa$i$us$i287 = 0.0, $xy$0$lcssa$i$us$i378 = 0.0, $xy$0$lcssa$i13$i = 0.0, $xy$08$i$1$i = 0.0, $xy$08$i$2$i = 0.0, $xy$08$i$3$i = 0.0, $xy$08$i$4$i = 0.0, $xy$08$i$5$i = 0.0, $xy$08$i$6$i = 0.0, $xy$08$i$7$i = 0.0, $xy$08$i$i = 0.0, $xy$08$i$us$i = 0.0, $xy$08$i$us$i279 = 0.0, $xy$08$i$us$i370 = 0.0, $xy$08$i4$i = 0.0, label = 0, sp = 0, $i$026$us$i$looptemp = 0, $i$026$us$i266$looptemp = 0, $136$looptemp = 0, $i$21371$us$looptemp = 0, $i$026$us$i357$looptemp = 0, $i$094$us$i$looptemp = 0, $234$looptemp = 0, $i$015$i$looptemp = 0, $i$121342$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $spread_old$i = sp;
 $_enc = sp + 136 | 0;
 $pitch_index = sp + 132 | 0;
 $gain1 = sp + 128 | 0;
 $dual_stereo = sp + 124 | 0;
 $balance = sp + 120 | 0;
 $tf_chan = sp + 116 | 0;
 $tf_estimate = sp + 112 | 0;
 $tot_boost = sp + 108 | 0;
 $weak_transient = sp + 104 | 0;
 $0 = HEAP32[$st + 4 >> 2] | 0;
 $1 = HEAP32[$st + 8 >> 2] | 0;
 HEAP32[$pitch_index >> 2] = 15;
 HEAPF32[$gain1 >> 2] = 0.0;
 HEAP32[$dual_stereo >> 2] = 0;
 HEAP32[$tf_chan >> 2] = 0;
 HEAP32[$weak_transient >> 2] = 0;
 $2 = HEAP32[$st >> 2] | 0;
 $nbEBands2 = $2 + 8 | 0;
 $3 = HEAP32[$nbEBands2 >> 2] | 0;
 $4 = HEAP32[$2 + 4 >> 2] | 0;
 $eBands4 = $2 + 32 | 0;
 $5 = HEAP32[$eBands4 >> 2] | 0;
 $6 = HEAP32[$st + 32 >> 2] | 0;
 $7 = HEAP32[$st + 36 >> 2] | 0;
 $cmp = ($6 | 0) != 0;
 HEAPF32[$tf_estimate >> 2] = 0.0;
 if (($pcm | 0) == 0 | ($nbCompressedBytes | 0) < 2) {
  $retval$1 = -1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $upsample = $st + 28 | 0;
 $mul = Math_imul(HEAP32[$upsample >> 2] | 0, $frame_size) | 0;
 $maxLM = $2 + 36 | 0;
 $9 = HEAP32[$maxLM >> 2] | 0;
 if (($9 | 0) < 0) {
  $retval$1 = -1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $shortMdctSize = $2 + 44 | 0;
 $10 = HEAP32[$shortMdctSize >> 2] | 0;
 $LM$01388 = 0;
 while (1) {
  if (($10 << $LM$01388 | 0) == ($mul | 0)) break;
  if (($LM$01388 | 0) < ($9 | 0)) $LM$01388 = $LM$01388 + 1 | 0; else {
   $retval$1 = -1;
   label = 521;
   break;
  }
 }
 if ((label | 0) == 521) {
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $shl22 = 1 << $LM$01388;
 $add$ptr = $st + 244 + ((Math_imul($4, $0) | 0) << 2) | 0;
 $add$ptr29 = $st + 244 + ((Math_imul($4 + 1024 | 0, $0) | 0) << 2) | 0;
 $mul30 = Math_imul($3, $0) | 0;
 $add$ptr31 = $add$ptr29 + ($mul30 << 2) | 0;
 $add$ptr33 = $add$ptr31 + ($mul30 << 2) | 0;
 $add$ptr35 = $add$ptr33 + ($mul30 << 2) | 0;
 $cmp36 = ($enc | 0) == 0;
 if ($cmp36) {
  $nbFilledBytes$0 = 0;
  $tell$0 = 1;
  $tell0_frac$0 = 1;
 } else {
  $11 = HEAP32[$enc + 20 >> 2] | 0;
  $12 = HEAP32[$enc + 28 >> 2] | 0;
  $13 = Math_clz32($12 | 0) | 0;
  $sub$i2 = 32 - $13 | 0;
  $shr$i4 = $12 >>> ($sub$i2 + -16 | 0);
  $shr3$i = $shr$i4 >>> 12;
  $sub1$i = $11 + -32 + $13 | 0;
  $nbFilledBytes$0 = $sub1$i + 4 >> 3;
  $tell$0 = $sub1$i;
  $tell0_frac$0 = (Math_imul($sub$i2, -8) | 0) + ($11 << 3) + (($shr$i4 >>> 0 > (HEAP32[5744 + ($shr3$i + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i) | 0;
 }
 if (HEAP32[$st + 48 >> 2] | 0) _celt_fatal(47881, 47917, 1547);
 $cond = ($nbCompressedBytes | 0) < 1275 ? $nbCompressedBytes : 1275;
 $sub = $cond - $nbFilledBytes$0 | 0;
 $vbr = $st + 44 | 0;
 $$pre = HEAP32[$st + 40 >> 2] | 0;
 $cmp66 = ($$pre | 0) == -1;
 if (!(HEAP32[$vbr >> 2] | 0)) if ($cmp66) {
  $20 = -1;
  $effectiveBytes$0 = $sub;
  $nbCompressedBytes$addr$1 = $cond;
  $vbr_rate$0 = 0;
 } else {
  $mul59 = Math_imul($$pre, $mul) | 0;
  $18 = HEAP32[$2 >> 2] | 0;
  $div74 = ($mul59 + (($tell$0 | 0) > 1 ? $tell$0 : 0) + ($18 << 2) | 0) / ($18 << 3 | 0) | 0;
  $cond$sub78 = ($cond | 0) < ($div74 | 0) ? $cond : $div74;
  $spec$select1254 = ($cond$sub78 | 0) > 2 ? $cond$sub78 : 2;
  $20 = $$pre;
  $effectiveBytes$0 = $spec$select1254 - $nbFilledBytes$0 | 0;
  $nbCompressedBytes$addr$1 = $spec$select1254;
  $vbr_rate$0 = 0;
 } else if ($cmp66) {
  $20 = -1;
  $effectiveBytes$0 = $sub;
  $nbCompressedBytes$addr$1 = $cond;
  $vbr_rate$0 = 0;
 } else {
  $17 = HEAP32[$2 >> 2] | 0;
  $div = (($17 >> 4) + (Math_imul($$pre, $mul) | 0) | 0) / ($17 >> 3 | 0) | 0;
  $20 = $$pre;
  $effectiveBytes$0 = $div >> 6;
  $nbCompressedBytes$addr$1 = $cond;
  $vbr_rate$0 = $div;
 }
 $sub141 = 3 - $LM$01388 | 0;
 $add144 = ($1 * 40 | 0) + 20 | 0;
 $mul147 = Math_imul((400 >>> $LM$01388) + -50 | 0, $add144) | 0;
 $sub148 = ($nbCompressedBytes$addr$1 * 400 >> $sub141) - $mul147 | 0;
 $sub159 = $20 - $mul147 | 0;
 $spec$select1255 = ($20 | 0) == -1 | ($sub148 | 0) < ($sub159 | 0) ? $sub148 : $sub159;
 if ($cmp36) {
  HEAP32[$_enc >> 2] = $compressed;
  HEAP32[$_enc + 8 >> 2] = 0;
  HEAP32[$_enc + 12 >> 2] = 0;
  HEAP32[$_enc + 16 >> 2] = 0;
  HEAP32[$_enc + 20 >> 2] = 33;
  HEAP32[$_enc + 24 >> 2] = 0;
  HEAP32[$_enc + 28 >> 2] = -2147483648;
  HEAP32[$_enc + 40 >> 2] = -1;
  HEAP32[$_enc + 32 >> 2] = 0;
  HEAP32[$_enc + 36 >> 2] = 0;
  HEAP32[$_enc + 4 >> 2] = $nbCompressedBytes$addr$1;
  HEAP32[$_enc + 44 >> 2] = 0;
  $enc$addr$0 = $_enc;
 } else $enc$addr$0 = $enc;
 $cmp178 = ($vbr_rate$0 | 0) > 0;
 do if ($cmp178) if (!(HEAP32[$st + 52 >> 2] | 0)) {
  $nbAvailableBytes$1 = $sub;
  $nbCompressedBytes$addr$3 = $nbCompressedBytes$addr$1;
 } else {
  $cond185 = ($tell$0 | 0) == 1 ? 2 : 0;
  $shr188 = ($vbr_rate$0 << 1) - (HEAP32[$st + 208 >> 2] | 0) >> 6;
  $cond185$shr188 = ($cond185 | 0) > ($shr188 | 0) ? $cond185 : $shr188;
  if (($cond185$shr188 | 0) < ($sub | 0)) {
   $add231 = $cond185$shr188 + $nbFilledBytes$0 | 0;
   $25 = HEAP32[$enc$addr$0 + 8 >> 2] | 0;
   if (($25 + (HEAP32[$enc$addr$0 + 24 >> 2] | 0) | 0) >>> 0 > $add231 >>> 0) _celt_fatal(49175, 49097, 238); else {
    $26 = HEAP32[$enc$addr$0 >> 2] | 0;
    $idx$neg$i = 0 - $25 | 0;
    $storage$i55 = $enc$addr$0 + 4 | 0;
    _memmove($26 + $add231 + $idx$neg$i | 0, $26 + (HEAP32[$storage$i55 >> 2] | 0) + $idx$neg$i | 0, $25 | 0) | 0;
    HEAP32[$storage$i55 >> 2] = $add231;
    $nbAvailableBytes$1 = $cond185$shr188;
    $nbCompressedBytes$addr$3 = $add231;
    break;
   }
  } else {
   $nbAvailableBytes$1 = $sub;
   $nbCompressedBytes$addr$3 = $nbCompressedBytes$addr$1;
  }
 } else {
  $nbAvailableBytes$1 = $sub;
  $nbCompressedBytes$addr$3 = $nbCompressedBytes$addr$1;
 } while (0);
 $mul235 = $nbCompressedBytes$addr$3 << 3;
 $28 = HEAP32[$2 + 12 >> 2] | 0;
 $cmp236 = ($7 | 0) > ($28 | 0);
 $spec$select1032 = $cmp236 ? $28 : $7;
 $add241 = $mul + $4 | 0;
 $mul242 = Math_imul($add241, $0) | 0;
 $29 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul242 << 2) | 0) + 15 & -16) | 0;
 $overlap_max = $st + 224 | 0;
 $30 = +HEAPF32[$overlap_max >> 2];
 $mul244 = Math_imul($mul - $4 | 0, $1) | 0;
 $31 = HEAP32[$upsample >> 2] | 0;
 $div246 = ($mul244 | 0) / ($31 | 0) | 0;
 $cmp17$i = ($div246 | 0) > 0;
 if ($cmp17$i) {
  $i$018$i = 0;
  $maxval$019$i = 0.0;
  $minval$020$i = 0.0;
  while (1) {
   $32 = +HEAPF32[$pcm + ($i$018$i << 2) >> 2];
   $maxval$0$$i = $maxval$019$i > $32 ? $maxval$019$i : $32;
   $cond9$i1120 = $minval$020$i < $32 ? $minval$020$i : $32;
   $i$018$i = $i$018$i + 1 | 0;
   if (($i$018$i | 0) == ($div246 | 0)) {
    $maxval$0$lcssa$i = $maxval$0$$i;
    $minval$0$lcssa$i = $cond9$i1120;
    break;
   } else {
    $maxval$019$i = $maxval$0$$i;
    $minval$020$i = $cond9$i1120;
   }
  }
 } else {
  $maxval$0$lcssa$i = 0.0;
  $minval$0$lcssa$i = 0.0;
 }
 $sub$i1124 = -$minval$0$lcssa$i;
 if ($30 > ($maxval$0$lcssa$i > $sub$i1124 ? $maxval$0$lcssa$i : $sub$i1124)) $cond259 = $30; else {
  if ($cmp17$i) {
   $i$018$i1130 = 0;
   $maxval$019$i1129 = 0.0;
   $minval$020$i1128 = 0.0;
   while (1) {
    $33 = +HEAPF32[$pcm + ($i$018$i1130 << 2) >> 2];
    $maxval$0$$i1133 = $maxval$019$i1129 > $33 ? $maxval$019$i1129 : $33;
    $cond9$i1135 = $minval$020$i1128 < $33 ? $minval$020$i1128 : $33;
    $i$018$i1130 = $i$018$i1130 + 1 | 0;
    if (($i$018$i1130 | 0) == ($div246 | 0)) {
     $maxval$0$lcssa$i1139 = $maxval$0$$i1133;
     $minval$0$lcssa$i1140 = $cond9$i1135;
     break;
    } else {
     $maxval$019$i1129 = $maxval$0$$i1133;
     $minval$020$i1128 = $cond9$i1135;
    }
   }
  } else {
   $maxval$0$lcssa$i1139 = 0.0;
   $minval$0$lcssa$i1140 = 0.0;
  }
  $sub$i1141 = -$minval$0$lcssa$i1140;
  $cond259 = $maxval$0$lcssa$i1139 > $sub$i1141 ? $maxval$0$lcssa$i1139 : $sub$i1141;
 }
 $add$ptr264 = $pcm + ($div246 << 2) | 0;
 $div267 = (Math_imul($4, $1) | 0) / ($31 | 0) | 0;
 if (($div267 | 0) > 0) {
  $i$018$i1150 = 0;
  $maxval$019$i1149 = 0.0;
  $minval$020$i1148 = 0.0;
  while (1) {
   $34 = +HEAPF32[$add$ptr264 + ($i$018$i1150 << 2) >> 2];
   $maxval$0$$i1153 = $maxval$019$i1149 > $34 ? $maxval$019$i1149 : $34;
   $cond9$i1155 = $minval$020$i1148 < $34 ? $minval$020$i1148 : $34;
   $i$018$i1150 = $i$018$i1150 + 1 | 0;
   if (($i$018$i1150 | 0) == ($div267 | 0)) {
    $maxval$0$lcssa$i1159 = $maxval$0$$i1153;
    $minval$0$lcssa$i1160 = $cond9$i1155;
    break;
   } else {
    $maxval$019$i1149 = $maxval$0$$i1153;
    $minval$020$i1148 = $cond9$i1155;
   }
  }
 } else {
  $maxval$0$lcssa$i1159 = 0.0;
  $minval$0$lcssa$i1160 = 0.0;
 }
 $sub$i1161 = -$minval$0$lcssa$i1160;
 $cond15$i1163 = $maxval$0$lcssa$i1159 > $sub$i1161 ? $maxval$0$lcssa$i1159 : $sub$i1161;
 HEAPF32[$overlap_max >> 2] = $cond15$i1163;
 $cond259$call268 = $cond259 > $cond15$i1163 ? $cond259 : $cond15$i1163;
 $lsb_depth = $st + 60 | 0;
 $cmp281 = $cond259$call268 <= 1.0 / +(1 << HEAP32[$lsb_depth >> 2] | 0);
 if (($tell$0 | 0) == 1) {
  _ec_enc_bit_logp($enc$addr$0, $cmp281 & 1, 15);
  if ($cmp281) {
   $add293 = $nbFilledBytes$0 + 2 | 0;
   $cond300 = ($nbCompressedBytes$addr$3 | 0) < ($add293 | 0) ? $nbCompressedBytes$addr$3 : $add293;
   do if ($cmp178) {
    $37 = HEAP32[$enc$addr$0 + 8 >> 2] | 0;
    if (($37 + (HEAP32[$enc$addr$0 + 24 >> 2] | 0) | 0) >>> 0 > $cond300 >>> 0) _celt_fatal(49175, 49097, 238); else {
     $38 = HEAP32[$enc$addr$0 >> 2] | 0;
     $idx$neg$i64 = 0 - $37 | 0;
     $storage$i66 = $enc$addr$0 + 4 | 0;
     _memmove($38 + $cond300 + $idx$neg$i64 | 0, $38 + (HEAP32[$storage$i66 >> 2] | 0) + $idx$neg$i64 | 0, $37 | 0) | 0;
     HEAP32[$storage$i66 >> 2] = $cond300;
     $effectiveBytes$1 = $cond300;
     $mul303$pre$phiZ2D = $cond300 << 3;
     $nbAvailableBytes$2 = 2;
     $nbCompressedBytes$addr$4 = $cond300;
     break;
    }
   } else {
    $effectiveBytes$1 = $effectiveBytes$0;
    $mul303$pre$phiZ2D = $mul235;
    $nbAvailableBytes$2 = $nbAvailableBytes$1;
    $nbCompressedBytes$addr$4 = $nbCompressedBytes$addr$3;
   } while (0);
   $enc$addr$0$idx1058 = $enc$addr$0 + 20 | 0;
   $enc$addr$0$idx1058$val = HEAP32[$enc$addr$0$idx1058 >> 2] | 0;
   HEAP32[$enc$addr$0$idx1058 >> 2] = 32 - $enc$addr$0$idx1058$val + $mul303$pre$phiZ2D - (Math_clz32(HEAP32[$enc$addr$0 + 28 >> 2] | 0) | 0) + $enc$addr$0$idx1058$val;
   $effectiveBytes$2 = $effectiveBytes$1;
   $nbAvailableBytes$3 = $nbAvailableBytes$2;
   $nbCompressedBytes$addr$5 = $nbCompressedBytes$addr$4;
   $silence$01196 = 1;
   $tell$1 = $mul303$pre$phiZ2D;
   $tobool2881197 = 1;
   $total_bits$1 = $mul303$pre$phiZ2D;
  } else {
   $effectiveBytes$2 = $effectiveBytes$0;
   $nbAvailableBytes$3 = $nbAvailableBytes$1;
   $nbCompressedBytes$addr$5 = $nbCompressedBytes$addr$3;
   $silence$01196 = 0;
   $tell$1 = 1;
   $tobool2881197 = 0;
   $total_bits$1 = $mul235;
  }
 } else {
  $effectiveBytes$2 = $effectiveBytes$0;
  $nbAvailableBytes$3 = $nbAvailableBytes$1;
  $nbCompressedBytes$addr$5 = $nbCompressedBytes$addr$3;
  $silence$01196 = 0;
  $tell$1 = $tell$0;
  $tobool2881197 = 0;
  $total_bits$1 = $mul235;
 }
 $arraydecay317 = $2 + 16 | 0;
 $42 = $cond259$call268 > 65536.0 & (HEAP32[$st + 16 >> 2] | 0) != 0;
 $43 = HEAP32[$upsample >> 2] | 0;
 $arrayidx1$i71 = $2 + 20 | 0;
 $cmp2$i73 = ($43 | 0) != 1;
 $cmp9$i82 = ($43 | 0) == 1;
 $cmp467$i = ($mul | 0) > 0;
 $mul11$i = $mul << 2;
 $c$0 = 0;
 do {
  $add$ptr311 = $pcm + ($c$0 << 2) | 0;
  $add$ptr315 = $vla + ((Math_imul($c$0, $add241) | 0) << 2) + ($4 << 2) | 0;
  $add$ptr319 = $st + 192 + ($c$0 << 2) | 0;
  $44 = +HEAPF32[$arraydecay317 >> 2];
  $45 = +HEAPF32[$add$ptr319 >> 2];
  if ($42 | ($cmp2$i73 | +HEAPF32[$arrayidx1$i71 >> 2] != 0.0)) {
   $div$i81 = ($mul | 0) / ($43 | 0) | 0;
   if (!$cmp9$i82) _memset($add$ptr315 | 0, 0, $mul11$i | 0) | 0;
   if (($div$i81 | 0) > 0) {
    $i$166$i = 0;
    do {
     HEAPF32[$add$ptr315 + ((Math_imul($i$166$i, $43) | 0) << 2) >> 2] = +HEAPF32[$add$ptr311 + ((Math_imul($i$166$i, $0) | 0) << 2) >> 2] * 32768.0;
     $i$166$i = $i$166$i + 1 | 0;
    } while (($i$166$i | 0) != ($div$i81 | 0));
    if ($42) {
     $i$264$i = 0;
     do {
      $arrayidx30$i = $add$ptr315 + ((Math_imul($i$264$i, $43) | 0) << 2) | 0;
      $49 = +HEAPF32[$arrayidx30$i >> 2];
      $cmp31$i = $49 > 65536.0;
      $cmp34$i86 = ($cmp31$i ? 65536.0 : $49) < -65536.0;
      HEAPF32[$arrayidx30$i >> 2] = $cmp31$i | $cmp34$i86 ? ($cmp34$i86 ? -65536.0 : 65536.0) : $49;
      $i$264$i = $i$264$i + 1 | 0;
     } while (($i$264$i | 0) != ($div$i81 | 0));
    }
   }
   if ($cmp467$i) {
    $i$362$i = 0;
    $m$161$i = $45;
    while (1) {
     $arrayidx58$i = $add$ptr315 + ($i$362$i << 2) | 0;
     $50 = +HEAPF32[$arrayidx58$i >> 2];
     HEAPF32[$arrayidx58$i >> 2] = $50 - $m$161$i;
     $mul61$i = $44 * $50;
     $i$362$i = $i$362$i + 1 | 0;
     if (($i$362$i | 0) == ($mul | 0)) {
      $storemerge$i = $mul61$i;
      break;
     } else $m$161$i = $mul61$i;
    }
   } else $storemerge$i = $45;
  } else if ($cmp467$i) {
   $i$069$i = 0;
   $m$068$i = $45;
   while (1) {
    $mul6$i = +HEAPF32[$add$ptr311 + ((Math_imul($i$069$i, $0) | 0) << 2) >> 2] * 32768.0;
    HEAPF32[$add$ptr315 + ($i$069$i << 2) >> 2] = $mul6$i - $m$068$i;
    $mul8$i = $44 * $mul6$i;
    $i$069$i = $i$069$i + 1 | 0;
    if (($i$069$i | 0) == ($mul | 0)) {
     $storemerge$i = $mul8$i;
     break;
    } else $m$068$i = $mul8$i;
   }
  } else $storemerge$i = $45;
  HEAPF32[$add$ptr319 >> 2] = $storemerge$i;
  $c$0 = $c$0 + 1 | 0;
 } while (($c$0 | 0) < ($0 | 0));
 $lfe = $st + 64 | 0;
 if (($nbAvailableBytes$3 | 0) > 3 & (HEAP32[$lfe >> 2] | 0) != 0) if (!($silence$01196 | $6)) label = 61; else $59 = 0; else if (($silence$01196 | $6 | 0) != 0 | ($nbAvailableBytes$3 | 0) <= ($1 * 12 | 0)) $59 = 0; else label = 61;
 if ((label | 0) == 61) if (!(HEAP32[$st + 20 >> 2] | 0)) $59 = (HEAP32[$st + 24 >> 2] | 0) > 4; else $59 = 0;
 $tapset_decision = $st + 100 | 0;
 $60 = HEAP32[$tapset_decision >> 2] | 0;
 $analysis = $st + 120 | 0;
 $call342 = _run_prefilter($st, $vla, $add$ptr, $0, $mul, $60, $pitch_index, $gain1, $spread_old$i, $59 & 1, $nbAvailableBytes$3, $analysis) | 0;
 if (+HEAPF32[$gain1 >> 2] > .4000000059604645) label = 65; else if (+HEAPF32[$st + 108 >> 2] > .4000000059604645) label = 65; else $pitch_change$0 = 0;
 do if ((label | 0) == 65) {
  if (HEAP32[$analysis >> 2] | 0) if (!(+HEAPF32[$st + 124 >> 2] > .3)) {
   $pitch_change$0 = 0;
   break;
  }
  $conv357 = +(HEAP32[$pitch_index >> 2] | 0);
  $conv358 = +(HEAP32[$st + 104 >> 2] | 0);
  $pitch_change$0 = ($conv358 * 1.26 < $conv357 | $conv358 * .79 > $conv357) & 1;
 } while (0);
 $cmp371 = ($call342 | 0) == 0;
 if ($cmp371) {
  if (!($cmp | ($tell$1 + 16 | 0) > ($total_bits$1 | 0))) _ec_enc_bit_logp($enc$addr$0, 0, 1);
 } else {
  _ec_enc_bit_logp($enc$addr$0, 1, 1);
  $add382 = (HEAP32[$pitch_index >> 2] | 0) + 1 | 0;
  $sub383 = 32 - (Math_clz32($add382 | 0) | 0) | 0;
  $sub384 = $sub383 + -5 | 0;
  _ec_encode($enc$addr$0, $sub384, $sub383 + -4 | 0, 6);
  $sub386 = $add382 - (16 << $sub384) | 0;
  $add387 = $sub383 + -1 | 0;
  $end_window$i153 = $enc$addr$0 + 12 | 0;
  $69 = HEAP32[$end_window$i153 >> 2] | 0;
  $nend_bits$i154 = $enc$addr$0 + 16 | 0;
  $70 = HEAP32[$nend_bits$i154 >> 2] | 0;
  if (!$add387) _celt_fatal(49111, 49097, 198);
  $add$i157 = $70 + $add387 | 0;
  if ($add$i157 >>> 0 > 32) {
   $offs$i$i160 = $enc$addr$0 + 24 | 0;
   $end_offs$i$i161 = $enc$addr$0 + 8 | 0;
   $storage$i$i162 = $enc$addr$0 + 4 | 0;
   $error$i164 = $enc$addr$0 + 44 | 0;
   $71 = ~$70;
   $74 = $70 + (($71 | 0) > -16 ? $71 : -16) + 8 | 0;
   $used$0$i168 = $70;
   $window$0$i167 = $69;
   while (1) {
    $76 = HEAP32[$end_offs$i$i161 >> 2] | 0;
    $77 = HEAP32[$storage$i$i162 >> 2] | 0;
    if (($76 + (HEAP32[$offs$i$i160 >> 2] | 0) | 0) >>> 0 < $77 >>> 0) {
     $78 = HEAP32[$enc$addr$0 >> 2] | 0;
     $inc$i$i173 = $76 + 1 | 0;
     HEAP32[$end_offs$i$i161 >> 2] = $inc$i$i173;
     HEAP8[$78 + ($77 - $inc$i$i173) >> 0] = $window$0$i167;
     $retval$0$i$i177 = 0;
    } else $retval$0$i$i177 = -1;
    HEAP32[$error$i164 >> 2] = HEAP32[$error$i164 >> 2] | $retval$0$i$i177;
    $window$0$i167 = $window$0$i167 >>> 8;
    if (($used$0$i168 | 0) <= 15) break; else $used$0$i168 = $used$0$i168 + -8 | 0;
   }
   $82 = $70 + -8 - ($74 & -8) | 0;
   $add6$pre$phi$i185Z2D = $82 + $add387 | 0;
   $used$1$i187 = $82;
   $window$1$i186 = $window$0$i167;
  } else {
   $add6$pre$phi$i185Z2D = $add$i157;
   $used$1$i187 = $70;
   $window$1$i186 = $69;
  }
  $or5$i189 = $sub386 << $used$1$i187 | $window$1$i186;
  HEAP32[$end_window$i153 >> 2] = $or5$i189;
  HEAP32[$nend_bits$i154 >> 2] = $add6$pre$phi$i185Z2D;
  $nbits_total$i190 = $enc$addr$0 + 20 | 0;
  $add9$i191 = (HEAP32[$nbits_total$i190 >> 2] | 0) + $add387 | 0;
  HEAP32[$nbits_total$i190 >> 2] = $add9$i191;
  $84 = HEAP32[$spread_old$i >> 2] | 0;
  $add$i195 = $add6$pre$phi$i185Z2D + 3 | 0;
  if ($add$i195 >>> 0 > 32) {
   $offs$i$i198 = $enc$addr$0 + 24 | 0;
   $end_offs$i$i199 = $enc$addr$0 + 8 | 0;
   $storage$i$i200 = $enc$addr$0 + 4 | 0;
   $error$i202 = $enc$addr$0 + 44 | 0;
   $85 = ~$add6$pre$phi$i185Z2D;
   $88 = $add6$pre$phi$i185Z2D + (($85 | 0) > -16 ? $85 : -16) + 8 | 0;
   $used$0$i206 = $add6$pre$phi$i185Z2D;
   $window$0$i205 = $or5$i189;
   while (1) {
    $90 = HEAP32[$end_offs$i$i199 >> 2] | 0;
    $91 = HEAP32[$storage$i$i200 >> 2] | 0;
    if (($90 + (HEAP32[$offs$i$i198 >> 2] | 0) | 0) >>> 0 < $91 >>> 0) {
     $92 = HEAP32[$enc$addr$0 >> 2] | 0;
     $inc$i$i211 = $90 + 1 | 0;
     HEAP32[$end_offs$i$i199 >> 2] = $inc$i$i211;
     HEAP8[$92 + ($91 - $inc$i$i211) >> 0] = $window$0$i205;
     $retval$0$i$i215 = 0;
    } else $retval$0$i$i215 = -1;
    HEAP32[$error$i202 >> 2] = HEAP32[$error$i202 >> 2] | $retval$0$i$i215;
    $window$0$i205 = $window$0$i205 >>> 8;
    if (($used$0$i206 | 0) <= 15) break; else $used$0$i206 = $used$0$i206 + -8 | 0;
   }
   $96 = $add6$pre$phi$i185Z2D + -8 - ($88 & -8) | 0;
   $97 = HEAP32[$nbits_total$i190 >> 2] | 0;
   $add6$pre$phi$i223Z2D = $96 + 3 | 0;
   $used$1$i225 = $96;
   $window$1$i224 = $window$0$i205;
  } else {
   $97 = $add9$i191;
   $add6$pre$phi$i223Z2D = $add$i195;
   $used$1$i225 = $add6$pre$phi$i185Z2D;
   $window$1$i224 = $or5$i189;
  }
  HEAP32[$end_window$i153 >> 2] = $84 << $used$1$i225 | $window$1$i224;
  HEAP32[$nend_bits$i154 >> 2] = $add6$pre$phi$i223Z2D;
  HEAP32[$nbits_total$i190 >> 2] = $97 + 3;
  _ec_enc_icdf($enc$addr$0, $60, 49041, 2);
 }
 $complexity390 = $st + 24 | 0;
 if ((HEAP32[$complexity390 >> 2] | 0) > 0) if (!(HEAP32[$lfe >> 2] | 0)) {
  if ($cmp & ($effectiveBytes$2 | 0) < 15) $101 = (HEAP32[$st + 184 >> 2] | 0) != 2; else $101 = 0;
  $isTransient$0 = _transient_analysis($vla, $add241, $0, $tf_estimate, $tf_chan, $101 & 1, $weak_transient) | 0;
 } else $isTransient$0 = 0; else $isTransient$0 = 0;
 $cmp409 = ($LM$01388 | 0) != 0;
 do if ($cmp409) {
  $cmp414 = ((HEAP32[$enc$addr$0 + 20 >> 2] | 0) + -29 + (Math_clz32(HEAP32[$enc$addr$0 + 28 >> 2] | 0) | 0) | 0) > ($total_bits$1 | 0);
  $tobool417 = ($isTransient$0 | 0) == 0;
  $spec$select1035 = $tobool417 ? 0 : $shl22;
  if ($cmp414) label = 93; else {
   $vla423$alloca_mul = (Math_imul($mul, $0) | 0) << 2;
   $vla423 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $vla423$alloca_mul | 0) + 15 & -16) | 0;
   $vla425 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($mul30 << 2) | 0) + 15 & -16) | 0;
   $vla427 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($mul30 << 2) | 0) + 15 & -16) | 0;
   if ($tobool417) {
    $transient_got_disabled$01204$ph = 0;
    $vla4231207$ph = $vla423;
    $vla4251209$ph = $vla425;
    $vla4271212$ph = $vla427;
    label = 95;
   } else {
    $mul435 = Math_imul($3, $1) | 0;
    $vla436 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($mul435 << 2) | 0) + 15 & -16) | 0;
    if ((HEAP32[$complexity390 >> 2] | 0) > 7) {
     _compute_mdcts($2, 0, $vla, $vla423, $1, $0, $LM$01388, HEAP32[$upsample >> 2] | 0);
     $105 = HEAP32[$eBands4 >> 2] | 0;
     $shl$i231 = HEAP32[$shortMdctSize >> 2] << $LM$01388;
     do if (($spec$select1032 | 0) > 0) {
      $$pre$i233 = HEAP32[$nbEBands2 >> 2] | 0;
      $$pre28$pre$i = HEAP16[$105 >> 1] | 0;
      $c$0$us$i234 = 0;
      do {
       $mul$us$i235 = Math_imul($c$0$us$i234, $shl$i231) | 0;
       $mul19$us$i = Math_imul($$pre$i233, $c$0$us$i234) | 0;
       $107 = $$pre28$pre$i;
       $i$026$us$i = 0;
       do {
        $conv$us$i = $107 << 16 >> 16;
        $arrayidx3$us$i = $vla423 + (($conv$us$i << $LM$01388) + $mul$us$i235 << 2) | 0;
        $i$026$us$i$looptemp = $i$026$us$i;
        $i$026$us$i = $i$026$us$i + 1 | 0;
        $107 = HEAP16[$105 + ($i$026$us$i << 1) >> 1] | 0;
        $shl15$us$i = ($107 << 16 >> 16) - $conv$us$i << $LM$01388;
        if (($shl15$us$i | 0) > 0) {
         $i$07$i$us$i = 0;
         $xy$08$i$us$i = 0.0;
         while (1) {
          $109 = +HEAPF32[$arrayidx3$us$i + ($i$07$i$us$i << 2) >> 2];
          $add$i$us$i = $xy$08$i$us$i + $109 * $109;
          $i$07$i$us$i = $i$07$i$us$i + 1 | 0;
          if (($i$07$i$us$i | 0) == ($shl15$us$i | 0)) {
           $xy$0$lcssa$i$us$i = $add$i$us$i;
           break;
          } else $xy$08$i$us$i = $add$i$us$i;
         }
        } else $xy$0$lcssa$i$us$i = 0.0;
        HEAPF32[$vla425 + ($mul19$us$i + $i$026$us$i$looptemp << 2) >> 2] = +Math_sqrt(+($xy$0$lcssa$i$us$i + 1.0000000272452012e-27));
       } while (($i$026$us$i | 0) != ($spec$select1032 | 0));
       $c$0$us$i234 = $c$0$us$i234 + 1 | 0;
      } while (($c$0$us$i234 | 0) < ($1 | 0));
      $$pre55$i = HEAP32[$nbEBands2 >> 2] | 0;
      $c$0$us$i242 = 0;
      do {
       $mul$us$i243 = Math_imul($$pre55$i, $c$0$us$i242) | 0;
       $i$018$us$i = 0;
       do {
        $add$us$i245 = $mul$us$i243 + $i$018$us$i | 0;
        $conv2$us$i = +Math_log(+(+HEAPF32[$vla425 + ($add$us$i245 << 2) >> 2])) * 1.4426950408889634;
        HEAPF32[$vla436 + ($add$us$i245 << 2) >> 2] = $conv2$us$i - +HEAPF32[20304 + ($i$018$us$i << 2) >> 2];
        $i$018$us$i = $i$018$us$i + 1 | 0;
       } while (($i$018$us$i | 0) != ($spec$select1032 | 0));
       if ($cmp236) {
        $i$120$us$i = $spec$select1032;
        do {
         HEAPF32[$vla436 + ($mul$us$i243 + $i$120$us$i << 2) >> 2] = -14.0;
         $i$120$us$i = $i$120$us$i + 1 | 0;
        } while (($i$120$us$i | 0) != ($7 | 0));
       }
       $c$0$us$i242 = $c$0$us$i242 + 1 | 0;
      } while (($c$0$us$i242 | 0) < ($1 | 0));
     } else {
      if (!$cmp236) break;
      $$pre$i252 = HEAP32[$nbEBands2 >> 2] | 0;
      $c$0$us22$i = 0;
      do {
       $mul13$us49$i = Math_imul($$pre$i252, $c$0$us22$i) | 0;
       $i$120$us28$i = $spec$select1032;
       do {
        HEAPF32[$vla436 + ($mul13$us49$i + $i$120$us28$i << 2) >> 2] = -14.0;
        $i$120$us28$i = $i$120$us28$i + 1 | 0;
       } while (($i$120$us28$i | 0) != ($7 | 0));
       $c$0$us22$i = $c$0$us22$i + 1 | 0;
      } while (($c$0$us22$i | 0) < ($1 | 0));
     } while (0);
     if (($mul435 | 0) <= 0) {
      $447 = 1;
      $isTransient$112051223 = $isTransient$0;
      $mul4351225 = $mul435;
      $shortBlocks$012061222 = $shl22;
      $tobool42812151218 = 1;
      $transient_got_disabled$012041224 = 0;
      $vla42312071221 = $vla423;
      $vla42512091220 = $vla425;
      $vla42712121219 = $vla427;
      $vla4361227 = $vla436;
      break;
     }
     $mul447 = +($LM$01388 | 0) * .5;
     $i$01386 = 0;
     do {
      $arrayidx = $vla436 + ($i$01386 << 2) | 0;
      HEAPF32[$arrayidx >> 2] = $mul447 + +HEAPF32[$arrayidx >> 2];
      $i$01386 = $i$01386 + 1 | 0;
     } while (($i$01386 | 0) != ($mul435 | 0));
     $447 = 1;
     $isTransient$112051223 = $isTransient$0;
     $mul4351225 = $mul435;
     $shortBlocks$012061222 = $spec$select1035;
     $tobool42812151218 = 1;
     $transient_got_disabled$012041224 = 0;
     $vla42312071221 = $vla423;
     $vla42512091220 = $vla425;
     $vla42712121219 = $vla427;
     $vla4361227 = $vla436;
    } else {
     $447 = 0;
     $isTransient$112051223 = $isTransient$0;
     $mul4351225 = $mul435;
     $shortBlocks$012061222 = $shl22;
     $tobool42812151218 = 1;
     $transient_got_disabled$012041224 = 0;
     $vla42312071221 = $vla423;
     $vla42512091220 = $vla425;
     $vla42712121219 = $vla427;
     $vla4361227 = $vla436;
    }
   }
  }
 } else label = 93; while (0);
 if ((label | 0) == 93) {
  $vla4231200$alloca_mul = (Math_imul($mul, $0) | 0) << 2;
  $vla4231200 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla4231200$alloca_mul | 0) + 15 & -16) | 0;
  $vla4251201 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul30 << 2) | 0) + 15 & -16) | 0;
  $vla4271202 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul30 << 2) | 0) + 15 & -16) | 0;
  $transient_got_disabled$01204$ph = 1;
  $vla4231207$ph = $vla4231200;
  $vla4251209$ph = $vla4251201;
  $vla4271212$ph = $vla4271202;
  label = 95;
 }
 if ((label | 0) == 95) {
  $mul4351216 = Math_imul($3, $1) | 0;
  $vla4361217 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul4351216 << 2) | 0) + 15 & -16) | 0;
  $447 = 0;
  $isTransient$112051223 = 0;
  $mul4351225 = $mul4351216;
  $shortBlocks$012061222 = 0;
  $tobool42812151218 = 0;
  $transient_got_disabled$012041224 = $transient_got_disabled$01204$ph;
  $vla42312071221 = $vla4231207$ph;
  $vla42512091220 = $vla4251209$ph;
  $vla42712121219 = $vla4271212$ph;
  $vla4361227 = $vla4361217;
 }
 $arch454 = $st + 72 | 0;
 _compute_mdcts($2, $shortBlocks$012061222, $vla, $vla42312071221, $1, $0, $LM$01388, HEAP32[$upsample >> 2] | 0);
 $116 = +HEAPF32[$vla42312071221 >> 2];
 if ($116 != $116 | 0.0 != 0.0) _celt_fatal(47937, 47917, 1729);
 $cmp460 = ($1 | 0) == 1;
 if ($cmp460) if (($0 | 0) == 2) {
  HEAP32[$tf_chan >> 2] = 0;
  $or$cond101231 = 1;
 } else $or$cond101231 = 0; else {
  $117 = +HEAPF32[$vla42312071221 + ($mul << 2) >> 2];
  if ($117 != $117 | 0.0 != 0.0) _celt_fatal(47937, 47917, 1729); else $or$cond101231 = 0;
 }
 $118 = HEAP32[$eBands4 >> 2] | 0;
 $shl$i256 = HEAP32[$shortMdctSize >> 2] << $LM$01388;
 $cmp25$i257 = ($spec$select1032 | 0) > 0;
 if ($cmp25$i257) {
  $$pre$i259 = HEAP32[$nbEBands2 >> 2] | 0;
  $$pre28$pre$i260 = HEAP16[$118 >> 1] | 0;
  $c$0$us$i262 = 0;
  do {
   $mul$us$i263 = Math_imul($c$0$us$i262, $shl$i256) | 0;
   $mul19$us$i264 = Math_imul($$pre$i259, $c$0$us$i262) | 0;
   $120 = $$pre28$pre$i260;
   $i$026$us$i266 = 0;
   do {
    $conv$us$i267 = $120 << 16 >> 16;
    $arrayidx3$us$i270 = $vla42312071221 + (($conv$us$i267 << $LM$01388) + $mul$us$i263 << 2) | 0;
    $i$026$us$i266$looptemp = $i$026$us$i266;
    $i$026$us$i266 = $i$026$us$i266 + 1 | 0;
    $120 = HEAP16[$118 + ($i$026$us$i266 << 1) >> 1] | 0;
    $shl15$us$i275 = ($120 << 16 >> 16) - $conv$us$i267 << $LM$01388;
    if (($shl15$us$i275 | 0) > 0) {
     $i$07$i$us$i280 = 0;
     $xy$08$i$us$i279 = 0.0;
     while (1) {
      $122 = +HEAPF32[$arrayidx3$us$i270 + ($i$07$i$us$i280 << 2) >> 2];
      $add$i$us$i283 = $xy$08$i$us$i279 + $122 * $122;
      $i$07$i$us$i280 = $i$07$i$us$i280 + 1 | 0;
      if (($i$07$i$us$i280 | 0) == ($shl15$us$i275 | 0)) {
       $xy$0$lcssa$i$us$i287 = $add$i$us$i283;
       break;
      } else $xy$08$i$us$i279 = $add$i$us$i283;
     }
    } else $xy$0$lcssa$i$us$i287 = 0.0;
    HEAPF32[$vla42512091220 + ($mul19$us$i264 + $i$026$us$i266$looptemp << 2) >> 2] = +Math_sqrt(+($xy$0$lcssa$i$us$i287 + 1.0000000272452012e-27));
   } while (($i$026$us$i266 | 0) != ($spec$select1032 | 0));
   $c$0$us$i262 = $c$0$us$i262 + 1 | 0;
  } while (($c$0$us$i262 | 0) < ($1 | 0));
 }
 if ((HEAP32[$lfe >> 2] | 0) != 0 & ($7 | 0) > 2) {
  $i$11384 = 2;
  do {
   $arrayidx484 = $vla42512091220 + ($i$11384 << 2) | 0;
   $125 = +HEAPF32[$arrayidx484 >> 2];
   $mul486 = +HEAPF32[$vla42512091220 >> 2] * 9.999999747378752e-05;
   $$mul486 = $125 < $mul486 ? $125 : $mul486;
   HEAPF32[$arrayidx484 >> 2] = $$mul486 > 1.0000000036274937e-15 ? $$mul486 : 1.0000000036274937e-15;
   $i$11384 = $i$11384 + 1 | 0;
  } while (($i$11384 | 0) != ($7 | 0));
 }
 do if ($cmp25$i257) {
  $$pre55$i300 = HEAP32[$nbEBands2 >> 2] | 0;
  $c$0$us$i302 = 0;
  do {
   $mul$us$i303 = Math_imul($$pre55$i300, $c$0$us$i302) | 0;
   $i$018$us$i314 = 0;
   do {
    $add$us$i315 = $mul$us$i303 + $i$018$us$i314 | 0;
    $conv2$us$i319 = +Math_log(+(+HEAPF32[$vla42512091220 + ($add$us$i315 << 2) >> 2])) * 1.4426950408889634;
    HEAPF32[$vla42712121219 + ($add$us$i315 << 2) >> 2] = $conv2$us$i319 - +HEAPF32[20304 + ($i$018$us$i314 << 2) >> 2];
    $i$018$us$i314 = $i$018$us$i314 + 1 | 0;
   } while (($i$018$us$i314 | 0) != ($spec$select1032 | 0));
   if ($cmp236) {
    $i$120$us$i308 = $spec$select1032;
    do {
     HEAPF32[$vla42712121219 + ($mul$us$i303 + $i$120$us$i308 << 2) >> 2] = -14.0;
     $i$120$us$i308 = $i$120$us$i308 + 1 | 0;
    } while (($i$120$us$i308 | 0) != ($7 | 0));
   }
   $c$0$us$i302 = $c$0$us$i302 + 1 | 0;
  } while (($c$0$us$i302 | 0) < ($1 | 0));
 } else {
  if (!$cmp236) break;
  $$pre$i329 = HEAP32[$nbEBands2 >> 2] | 0;
  $c$0$us22$i331 = 0;
  do {
   $mul13$us49$i332 = Math_imul($$pre$i329, $c$0$us22$i331) | 0;
   $i$120$us28$i334 = $spec$select1032;
   do {
    HEAPF32[$vla42712121219 + ($mul13$us49$i332 + $i$120$us28$i334 << 2) >> 2] = -14.0;
    $i$120$us28$i334 = $i$120$us28$i334 + 1 | 0;
   } while (($i$120$us28$i334 | 0) != ($7 | 0));
   $c$0$us22$i331 = $c$0$us22$i331 + 1 | 0;
  } while (($c$0$us22$i331 | 0) < ($1 | 0));
 } while (0);
 $vla511 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul4351225 << 2) | 0) + 15 & -16) | 0;
 $mul512 = $7 << 2;
 _memset($vla511 | 0, 0, $mul512 | 0) | 0;
 do if ($cmp) {
  $surround_masking$0$ph = 0.0;
  $surround_trim$0$ph = 0.0;
  label = 177;
 } else {
  $130 = HEAP32[$st + 236 >> 2] | 0;
  if (!$130) {
   $surround_masking$0$ph = 0.0;
   $surround_trim$0$ph = 0.0;
   label = 177;
   break;
  }
  $131 = HEAP32[$lfe >> 2] | 0;
  if ($131 | 0) {
   $151 = $131;
   $surround_masking$01233 = 0.0;
   $surround_trim$01234 = 0.0;
   $temporal_vbr$0 = 0.0;
   break;
  }
  $132 = HEAP32[$st + 92 >> 2] | 0;
  $spec$select1036 = ($132 | 0) > 2 ? $132 : 2;
  if (!(($1 | 0) > 0 & ($spec$select1036 | 0) > 0)) _celt_fatal(48010, 47917, 1770);
  $$pre1425$pre = HEAP16[$5 >> 1] | 0;
  $c$11379$us = 0;
  $count$01378$us = 0;
  $diff$01377$us = 0.0;
  $mask_avg$01376$us = 0.0;
  while (1) {
   $mul536$us = Math_imul($c$11379$us, $3) | 0;
   $136 = $$pre1425$pre;
   $count$11370$us = $count$01378$us;
   $diff$11369$us = $diff$01377$us;
   $i$21371$us = 0;
   $mask_avg$11368$us = $mask_avg$01376$us;
   do {
    $134 = +HEAPF32[$130 + ($i$21371$us + $mul536$us << 2) >> 2];
    $cmp539$us = $134 < .25;
    $cmp549$us = !(($cmp539$us ? $134 : .25) > -2.0);
    $cond568$us = $cmp549$us | $cmp539$us ^ 1 ? ($cmp549$us ? -2.0 : .25) : $134;
    $mask$0$us = $cond568$us > 0.0 ? $cond568$us * .5 : $cond568$us;
    $i$21371$us$looptemp = $i$21371$us;
    $i$21371$us = $i$21371$us + 1 | 0;
    $136$looptemp = $136;
    $136 = HEAP16[$5 + ($i$21371$us << 1) >> 1] | 0;
    $sub579$us = ($136 << 16 >> 16) - ($136$looptemp << 16 >> 16) | 0;
    $mask_avg$11368$us = $mask_avg$11368$us + $mask$0$us * +($sub579$us | 0);
    $count$11370$us = $sub579$us + $count$11370$us | 0;
    $diff$11369$us = $diff$11369$us + $mask$0$us * +(($i$21371$us$looptemp << 1 | 1) - $spec$select1036 | 0);
   } while ($i$21371$us >>> 0 < $spec$select1036 >>> 0);
   $c$11379$us = $c$11379$us + 1 | 0;
   if (($c$11379$us | 0) == ($1 | 0)) break; else {
    $count$01378$us = $count$11370$us;
    $diff$01377$us = $diff$11369$us;
    $mask_avg$01376$us = $mask_avg$11368$us;
   }
  }
  if (($count$11370$us | 0) <= 0) _celt_fatal(48010, 47917, 1770);
  $conv606 = +($count$11370$us | 0);
  $mul617 = $diff$11369$us * 6.0 / +(Math_imul(Math_imul(Math_imul($spec$select1036, $1) | 0, $spec$select1036 + -1 | 0) | 0, $spec$select1036 + 1 | 0) | 0) * .5;
  $cond623 = $mul617 < .03099999949336052 ? $mul617 : .03099999949336052;
  $138 = (HEAP16[$5 + ($spec$select1036 << 1) >> 1] | 0) / 2 | 0;
  $midband$0 = 0;
  while (1) {
   $add637 = $midband$0 + 1 | 0;
   if ((HEAP16[$5 + ($add637 << 1) >> 1] | 0) < $138 << 16 >> 16) $midband$0 = $add637; else break;
  }
  $add608 = $mask_avg$11368$us / $conv606 + .20000000298023224;
  $cond635 = $cond623 > -.03099999949336052 ? $cond623 : -.03099999949336052;
  if (($1 | 0) == 2) {
   $count_dynalloc$01364$us = 0;
   $i$31365$us = 0;
   while (1) {
    $140 = +HEAPF32[$130 + ($i$31365$us << 2) >> 2];
    $141 = +HEAPF32[$130 + ($i$31365$us + $3 << 2) >> 2];
    $$$us = $140 > $141 ? $140 : $141;
    $sub686$us = ($$$us < 0.0 ? $$$us : 0.0) - ($add608 + $cond635 * +($i$31365$us - $midband$0 | 0));
    if ($sub686$us > .25) {
     HEAPF32[$vla511 + ($i$31365$us << 2) >> 2] = $sub686$us + -.25;
     $count_dynalloc$1$us = $count_dynalloc$01364$us + 1 | 0;
    } else $count_dynalloc$1$us = $count_dynalloc$01364$us;
    $i$31365$us = $i$31365$us + 1 | 0;
    if ($i$31365$us >>> 0 >= $spec$select1036 >>> 0) {
     $count_dynalloc$0$lcssa = $count_dynalloc$1$us;
     break;
    } else $count_dynalloc$01364$us = $count_dynalloc$1$us;
   }
  } else {
   $count_dynalloc$01364 = 0;
   $i$31365 = 0;
   while (1) {
    $142 = +HEAPF32[$130 + ($i$31365 << 2) >> 2];
    $sub686 = ($142 < 0.0 ? $142 : 0.0) - ($add608 + $cond635 * +($i$31365 - $midband$0 | 0));
    if ($sub686 > .25) {
     HEAPF32[$vla511 + ($i$31365 << 2) >> 2] = $sub686 + -.25;
     $count_dynalloc$1 = $count_dynalloc$01364 + 1 | 0;
    } else $count_dynalloc$1 = $count_dynalloc$01364;
    $i$31365 = $i$31365 + 1 | 0;
    if ($i$31365 >>> 0 >= $spec$select1036 >>> 0) {
     $count_dynalloc$0$lcssa = $count_dynalloc$1;
     break;
    } else $count_dynalloc$01364 = $count_dynalloc$1;
   }
  }
  do if (($count_dynalloc$0$lcssa | 0) > 2) {
   $add700 = $add608 + .25;
   if ($add700 > 0.0) {
    _memset($vla511 | 0, 0, $spec$select1036 << 2 | 0) | 0;
    $diff$2 = 0.0;
    $mask_avg$2 = 0.0;
    break;
   }
   $i$41362 = 0;
   do {
    $arrayidx710 = $vla511 + ($i$41362 << 2) | 0;
    $sub711 = +HEAPF32[$arrayidx710 >> 2] + -.25;
    HEAPF32[$arrayidx710 >> 2] = $sub711 < 0.0 ? 0.0 : $sub711;
    $i$41362 = $i$41362 + 1 | 0;
   } while ($i$41362 >>> 0 < $spec$select1036 >>> 0);
   $diff$2 = $cond635;
   $mask_avg$2 = $add700;
  } else {
   $diff$2 = $cond635;
   $mask_avg$2 = $add608;
  } while (0);
  $surround_masking$0$ph = $mask_avg$2 + .20000000298023224;
  $surround_trim$0$ph = $diff$2 * 64.0;
  label = 177;
 } while (0);
 do if ((label | 0) == 177) {
  $$pr = HEAP32[$lfe >> 2] | 0;
  if ($$pr | 0) {
   $151 = $$pr;
   $surround_masking$01233 = $surround_masking$0$ph;
   $surround_trim$01234 = $surround_trim$0$ph;
   $temporal_vbr$0 = 0.0;
   break;
  }
  $cond738 = $tobool42812151218 ? +($LM$01388 | 0) * .5 : 0.0;
  if (($7 | 0) > ($6 | 0)) if (($1 | 0) == 2) {
   $follow$01357$us = -10.0;
   $frame_avg$01358$us = 0.0;
   $i$51359$us = $6;
   while (1) {
    $sub743$us = $follow$01357$us + -1.0;
    $sub745$us = +HEAPF32[$vla42712121219 + ($i$51359$us << 2) >> 2] - $cond738;
    $sub743$sub745$us = $sub743$us > $sub745$us ? $sub743$us : $sub745$us;
    $sub760$us = +HEAPF32[$vla42712121219 + ($i$51359$us + $3 << 2) >> 2] - $cond738;
    $follow$01357$us = $sub743$sub745$us > $sub760$us ? $sub743$sub745$us : $sub760$us;
    $add771$us = $frame_avg$01358$us + $follow$01357$us;
    $i$51359$us = $i$51359$us + 1 | 0;
    if (($i$51359$us | 0) == ($7 | 0)) {
     $frame_avg$0$lcssa = $add771$us;
     break;
    } else $frame_avg$01358$us = $add771$us;
   }
  } else {
   $follow$01357 = -10.0;
   $frame_avg$01358 = 0.0;
   $i$51359 = $6;
   while (1) {
    $sub743 = $follow$01357 + -1.0;
    $sub745 = +HEAPF32[$vla42712121219 + ($i$51359 << 2) >> 2] - $cond738;
    $follow$01357 = $sub743 > $sub745 ? $sub743 : $sub745;
    $add771 = $frame_avg$01358 + $follow$01357;
    $i$51359 = $i$51359 + 1 | 0;
    if (($i$51359 | 0) == ($7 | 0)) {
     $frame_avg$0$lcssa = $add771;
     break;
    } else $frame_avg$01358 = $add771;
   }
  } else $frame_avg$0$lcssa = 0.0;
  $spec_avg = $st + 240 | 0;
  $147 = +HEAPF32[$spec_avg >> 2];
  $sub778 = $frame_avg$0$lcssa / +($7 - $6 | 0) - $147;
  $cond784 = $sub778 < -1.5 ? -1.5 : $sub778;
  $cond796 = $cond784 > 3.0 ? 3.0 : $cond784;
  HEAPF32[$spec_avg >> 2] = $147 + $cond796 * .019999999552965164;
  $151 = 0;
  $surround_masking$01233 = $surround_masking$0$ph;
  $surround_trim$01234 = $surround_trim$0$ph;
  $temporal_vbr$0 = $cond796;
 } while (0);
 if (!$447) _memcpy($vla4361227 | 0, $vla42712121219 | 0, $mul4351225 << 2 | 0) | 0;
 do if ($cmp409) {
  $enc$addr$0$idx1054 = $enc$addr$0 + 20 | 0;
  $enc$addr$0$idx1055 = $enc$addr$0 + 28 | 0;
  $add812 = (HEAP32[$enc$addr$0$idx1054 >> 2] | 0) + -29 + (Math_clz32(HEAP32[$enc$addr$0$idx1055 >> 2] | 0) | 0) | 0;
  do if (($isTransient$112051223 | 0) != 0 | ($add812 | 0) > ($total_bits$1 | 0)) {
   $add851$pre$phiZ2D = $add812;
   $isTransient$21245 = $isTransient$112051223;
   $shortBlocks$11248 = $shortBlocks$012061222;
  } else {
   if (!(($151 | $6 | 0) == 0 & (HEAP32[$complexity390 >> 2] | 0) > 4)) {
    $add851$pre$phiZ2D = $add812;
    $isTransient$21245 = 0;
    $shortBlocks$11248 = $shortBlocks$012061222;
    break;
   }
   $153 = +HEAPF32[$add$ptr29 + ($6 << 2) >> 2];
   do if ($cmp460) {
    HEAPF32[$spread_old$i + ($6 << 2) >> 2] = $153;
    $i$085$i = $6 + 1 | 0;
    if (($i$085$i | 0) >= ($7 | 0)) break;
    $154 = $153;
    $i$088$i = $i$085$i;
    do {
     $sub4$i = $154 + -1.0;
     $155 = +HEAPF32[$add$ptr29 + ($i$088$i << 2) >> 2];
     $154 = $sub4$i > $155 ? $sub4$i : $155;
     HEAPF32[$spread_old$i + ($i$088$i << 2) >> 2] = $154;
     $i$088$i = $i$088$i + 1 | 0;
    } while (($i$088$i | 0) != ($7 | 0));
   } else {
    $156 = +HEAPF32[$add$ptr29 + ($6 + $3 << 2) >> 2];
    $$$i = $153 > $156 ? $153 : $156;
    HEAPF32[$spread_old$i + ($6 << 2) >> 2] = $$$i;
    $i$189$i = $6 + 1 | 0;
    if (($i$189$i | 0) >= ($7 | 0)) break;
    $157 = $$$i;
    $i$192$i = $i$189$i;
    do {
     $sub30$i = $157 + -1.0;
     $158 = +HEAPF32[$add$ptr29 + ($i$192$i << 2) >> 2];
     $159 = +HEAPF32[$add$ptr29 + ($i$192$i + $3 << 2) >> 2];
     $$76$i = $158 > $159 ? $158 : $159;
     $157 = $sub30$i > $$76$i ? $sub30$i : $$76$i;
     HEAPF32[$spread_old$i + ($i$192$i << 2) >> 2] = $157;
     $i$192$i = $i$192$i + 1 | 0;
    } while (($i$192$i | 0) != ($7 | 0));
   } while (0);
   $sub65$i1185 = $7 + -2 | 0;
   if (($sub65$i1185 | 0) >= ($6 | 0)) {
    $i$284$i = $sub65$i1185;
    while (1) {
     $arrayidx69$i = $spread_old$i + ($i$284$i << 2) | 0;
     $160 = +HEAPF32[$arrayidx69$i >> 2];
     $sub72$i = +HEAPF32[$spread_old$i + ($i$284$i + 1 << 2) >> 2] + -1.0;
     HEAPF32[$arrayidx69$i >> 2] = $160 > $sub72$i ? $160 : $sub72$i;
     if (($i$284$i | 0) > ($6 | 0)) $i$284$i = $i$284$i + -1 | 0; else break;
    }
   }
   $cond89$i = ($6 | 0) > 2 ? $6 : 2;
   $sub91$i = $7 + -1 | 0;
   if (($sub91$i | 0) > ($cond89$i | 0)) {
    $c$0$us$i1187 = 0;
    $mean_diff$0$us$i = 0.0;
    while (1) {
     $mul$us$i = Math_imul($c$0$us$i1187, $3) | 0;
     $i$381$us$i = $cond89$i;
     $mean_diff$180$us$i = $mean_diff$0$us$i;
     do {
      $163 = +HEAPF32[$vla42712121219 + ($i$381$us$i + $mul$us$i << 2) >> 2];
      $164 = +HEAPF32[$spread_old$i + ($i$381$us$i << 2) >> 2];
      $sub111$us$i = ($163 < 0.0 ? 0.0 : $163) - ($164 < 0.0 ? 0.0 : $164);
      $mean_diff$180$us$i = $mean_diff$180$us$i + ($sub111$us$i < 0.0 ? 0.0 : $sub111$us$i);
      $i$381$us$i = $i$381$us$i + 1 | 0;
     } while (($i$381$us$i | 0) < ($sub91$i | 0));
     $c$0$us$i1187 = $c$0$us$i1187 + 1 | 0;
     if (($c$0$us$i1187 | 0) >= ($1 | 0)) {
      $mean_diff$1$lcssa$lcssa$i = $mean_diff$180$us$i;
      break;
     } else $mean_diff$0$us$i = $mean_diff$180$us$i;
    }
   } else $mean_diff$1$lcssa$lcssa$i = 0.0;
   if (!($mean_diff$1$lcssa$lcssa$i / +(Math_imul($sub91$i - $cond89$i | 0, $1) | 0) > 1.0)) {
    $add851$pre$phiZ2D = $add812;
    $isTransient$21245 = 0;
    $shortBlocks$11248 = $shortBlocks$012061222;
    break;
   }
   _compute_mdcts($2, $shl22, $vla, $vla42312071221, $1, $0, $LM$01388, HEAP32[$upsample >> 2] | 0);
   $166 = HEAP32[$eBands4 >> 2] | 0;
   $shl$i347 = HEAP32[$shortMdctSize >> 2] << $LM$01388;
   do if ($cmp25$i257) {
    $$pre$i350 = HEAP32[$nbEBands2 >> 2] | 0;
    $$pre28$pre$i351 = HEAP16[$166 >> 1] | 0;
    $c$0$us$i353 = 0;
    do {
     $mul$us$i354 = Math_imul($c$0$us$i353, $shl$i347) | 0;
     $mul19$us$i355 = Math_imul($$pre$i350, $c$0$us$i353) | 0;
     $168 = $$pre28$pre$i351;
     $i$026$us$i357 = 0;
     do {
      $conv$us$i358 = $168 << 16 >> 16;
      $arrayidx3$us$i361 = $vla42312071221 + (($conv$us$i358 << $LM$01388) + $mul$us$i354 << 2) | 0;
      $i$026$us$i357$looptemp = $i$026$us$i357;
      $i$026$us$i357 = $i$026$us$i357 + 1 | 0;
      $168 = HEAP16[$166 + ($i$026$us$i357 << 1) >> 1] | 0;
      $shl15$us$i366 = ($168 << 16 >> 16) - $conv$us$i358 << $LM$01388;
      if (($shl15$us$i366 | 0) > 0) {
       $i$07$i$us$i371 = 0;
       $xy$08$i$us$i370 = 0.0;
       while (1) {
        $170 = +HEAPF32[$arrayidx3$us$i361 + ($i$07$i$us$i371 << 2) >> 2];
        $add$i$us$i374 = $xy$08$i$us$i370 + $170 * $170;
        $i$07$i$us$i371 = $i$07$i$us$i371 + 1 | 0;
        if (($i$07$i$us$i371 | 0) == ($shl15$us$i366 | 0)) {
         $xy$0$lcssa$i$us$i378 = $add$i$us$i374;
         break;
        } else $xy$08$i$us$i370 = $add$i$us$i374;
       }
      } else $xy$0$lcssa$i$us$i378 = 0.0;
      HEAPF32[$vla42512091220 + ($mul19$us$i355 + $i$026$us$i357$looptemp << 2) >> 2] = +Math_sqrt(+($xy$0$lcssa$i$us$i378 + 1.0000000272452012e-27));
     } while (($i$026$us$i357 | 0) != ($spec$select1032 | 0));
     $c$0$us$i353 = $c$0$us$i353 + 1 | 0;
    } while (($c$0$us$i353 | 0) < ($1 | 0));
    $$pre55$i391 = HEAP32[$nbEBands2 >> 2] | 0;
    $c$0$us$i393 = 0;
    do {
     $mul$us$i394 = Math_imul($$pre55$i391, $c$0$us$i393) | 0;
     $i$018$us$i405 = 0;
     do {
      $add$us$i406 = $mul$us$i394 + $i$018$us$i405 | 0;
      $conv2$us$i410 = +Math_log(+(+HEAPF32[$vla42512091220 + ($add$us$i406 << 2) >> 2])) * 1.4426950408889634;
      HEAPF32[$vla42712121219 + ($add$us$i406 << 2) >> 2] = $conv2$us$i410 - +HEAPF32[20304 + ($i$018$us$i405 << 2) >> 2];
      $i$018$us$i405 = $i$018$us$i405 + 1 | 0;
     } while (($i$018$us$i405 | 0) != ($spec$select1032 | 0));
     if ($cmp236) {
      $i$120$us$i399 = $spec$select1032;
      do {
       HEAPF32[$vla42712121219 + ($mul$us$i394 + $i$120$us$i399 << 2) >> 2] = -14.0;
       $i$120$us$i399 = $i$120$us$i399 + 1 | 0;
      } while (($i$120$us$i399 | 0) != ($7 | 0));
     }
     $c$0$us$i393 = $c$0$us$i393 + 1 | 0;
    } while (($c$0$us$i393 | 0) < ($1 | 0));
   } else {
    if (!$cmp236) break;
    $$pre$i420 = HEAP32[$nbEBands2 >> 2] | 0;
    $c$0$us22$i422 = 0;
    do {
     $mul13$us49$i423 = Math_imul($$pre$i420, $c$0$us22$i422) | 0;
     $i$120$us28$i425 = $spec$select1032;
     do {
      HEAPF32[$vla42712121219 + ($mul13$us49$i423 + $i$120$us28$i425 << 2) >> 2] = -14.0;
      $i$120$us28$i425 = $i$120$us28$i425 + 1 | 0;
     } while (($i$120$us28$i425 | 0) != ($7 | 0));
     $c$0$us22$i422 = $c$0$us22$i422 + 1 | 0;
    } while (($c$0$us22$i422 | 0) < ($1 | 0));
   } while (0);
   if (($mul4351225 | 0) > 0) {
    $mul839 = +($LM$01388 | 0) * .5;
    $i$61355 = 0;
    do {
     $arrayidx840 = $vla4361227 + ($i$61355 << 2) | 0;
     HEAPF32[$arrayidx840 >> 2] = $mul839 + +HEAPF32[$arrayidx840 >> 2];
     $i$61355 = $i$61355 + 1 | 0;
    } while (($i$61355 | 0) != ($mul4351225 | 0));
   }
   HEAPF32[$tf_estimate >> 2] = .20000000298023224;
   $add851$pre$phiZ2D = (HEAP32[$enc$addr$0$idx1054 >> 2] | 0) + -29 + (Math_clz32(HEAP32[$enc$addr$0$idx1055 >> 2] | 0) | 0) | 0;
   $isTransient$21245 = 1;
   $shortBlocks$11248 = $shl22;
  } while (0);
  if (($add851$pre$phiZ2D | 0) > ($total_bits$1 | 0)) {
   $isTransient$21246 = $isTransient$21245;
   $shortBlocks$11247 = $shortBlocks$11248;
   break;
  }
  _ec_enc_bit_logp($enc$addr$0, $isTransient$21245, 3);
  $isTransient$21246 = $isTransient$21245;
  $shortBlocks$11247 = $shortBlocks$11248;
 } else {
  $isTransient$21246 = $isTransient$112051223;
  $shortBlocks$11247 = $shortBlocks$012061222;
 } while (0);
 $vla857$alloca_mul = (Math_imul($mul, $1) | 0) << 2;
 $vla857 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla857$alloca_mul | 0) + 15 & -16) | 0;
 $176 = HEAP32[$eBands4 >> 2] | 0;
 $mul$i438 = HEAP32[$shortMdctSize >> 2] << $LM$01388;
 if ($cmp25$i257) {
  $$pre$i441 = HEAP32[$nbEBands2 >> 2] | 0;
  $$pre30$pre$i = HEAP16[$176 >> 1] | 0;
  $c$0$us$i443 = 0;
  do {
   $mul2$us$i = Math_imul($$pre$i441, $c$0$us$i443) | 0;
   $mul14$us$i = Math_imul($mul$i438, $c$0$us$i443) | 0;
   $179 = $$pre30$pre$i;
   $i$028$us$i = 0;
   do {
    $div$us$i = 1.0 / (+HEAPF32[$vla42512091220 + ($mul2$us$i + $i$028$us$i << 2) >> 2] + 1.0000000272452012e-27);
    $mul5$us$i = $179 << 16 >> 16 << $LM$01388;
    $i$028$us$i = $i$028$us$i + 1 | 0;
    $179 = HEAP16[$176 + ($i$028$us$i << 1) >> 1] | 0;
    $mul1024$us$i = $179 << 16 >> 16 << $LM$01388;
    if (($mul5$us$i | 0) < ($mul1024$us$i | 0)) {
     $j$026$us$i = $mul5$us$i;
     do {
      $add15$us$i = $j$026$us$i + $mul14$us$i | 0;
      HEAPF32[$vla857 + ($add15$us$i << 2) >> 2] = $div$us$i * +HEAPF32[$vla42312071221 + ($add15$us$i << 2) >> 2];
      $j$026$us$i = $j$026$us$i + 1 | 0;
     } while (($j$026$us$i | 0) != ($mul1024$us$i | 0));
    }
   } while (($i$028$us$i | 0) != ($spec$select1032 | 0));
   $c$0$us$i443 = $c$0$us$i443 + 1 | 0;
  } while (($c$0$us$i443 | 0) < ($1 | 0));
 }
 do if ($cmp | ($effectiveBytes$2 | 0) < ($1 * 15 | 0)) $448 = 0; else {
  if ((HEAP32[$complexity390 >> 2] | 0) <= 1) {
   $448 = 0;
   break;
  }
  $448 = (HEAP32[$lfe >> 2] | 0) == 0;
 } while (0);
 $vla874 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $vla875 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $vla876 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $constrained_vbr879 = $st + 52 | 0;
 $call882 = +_dynalloc_analysis($vla42712121219, $vla4361227, $3, $6, $7, $1, $vla874, HEAP32[$lsb_depth >> 2] | 0, HEAP32[$2 + 56 >> 2] | 0, $isTransient$21246, HEAP32[$vbr >> 2] | 0, HEAP32[$constrained_vbr879 >> 2] | 0, $5, $LM$01388, $effectiveBytes$2, $tot_boost, HEAP32[$lfe >> 2] | 0, $vla511, $analysis, $vla875, $vla876);
 $vla883 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 L371 : do if ($448) {
  $div886 = 20480 / ($effectiveBytes$2 | 0) | 0;
  $call896 = _tf_analysis(HEAP32[$eBands4 >> 2] | 0, $spec$select1032, $isTransient$21246, $vla883, ($div886 | 0) < 78 ? 80 : $div886 + 2 | 0, $vla857, $mul, $LM$01388, +HEAPF32[$tf_estimate >> 2], HEAP32[$tf_chan >> 2] | 0, $vla875) | 0;
  if (!$cmp236) {
   $tf_select$0 = $call896;
   break;
  }
  $arrayidx902 = $vla883 + ($spec$select1032 + -1 << 2) | 0;
  $i$71347 = $28;
  do {
   HEAP32[$vla883 + ($i$71347 << 2) >> 2] = HEAP32[$arrayidx902 >> 2];
   $i$71347 = $i$71347 + 1 | 0;
  } while (($i$71347 | 0) != ($7 | 0));
  $tf_select$0 = $call896;
 } else {
  if ($cmp & (HEAP32[$weak_transient >> 2] | 0) != 0) {
   if (($7 | 0) <= 0) {
    $tf_select$0 = 0;
    break;
   }
   $i$81349 = 0;
   while (1) {
    HEAP32[$vla883 + ($i$81349 << 2) >> 2] = 1;
    $i$81349 = $i$81349 + 1 | 0;
    if (($i$81349 | 0) == ($7 | 0)) {
     $tf_select$0 = 0;
     break L371;
    }
   }
  }
  do if ($cmp & ($effectiveBytes$2 | 0) < 15) {
   if ((HEAP32[$st + 184 >> 2] | 0) == 2) break;
   if (($7 | 0) <= 0) {
    $tf_select$0 = $isTransient$21246;
    break L371;
   }
   _memset($vla883 | 0, 0, $mul512 | 0) | 0;
   $tf_select$0 = $isTransient$21246;
   break L371;
  } while (0);
  if (($7 | 0) <= 0) {
   $tf_select$0 = 0;
   break;
  }
  $i$101351 = 0;
  do {
   HEAP32[$vla883 + ($i$101351 << 2) >> 2] = $isTransient$21246;
   $i$101351 = $i$101351 + 1 | 0;
  } while (($i$101351 | 0) != ($7 | 0));
  $tf_select$0 = 0;
 } while (0);
 $vla952 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul4351225 << 2) | 0) + 15 & -16) | 0;
 $cmp9551345 = ($7 | 0) > ($6 | 0);
 if ($cmp9551345) {
  $c$2$us = 0;
  do {
   $mul958$us = Math_imul($c$2$us, $3) | 0;
   $i$111346$us = $6;
   do {
    $add959$us = $i$111346$us + $mul958$us | 0;
    $arrayidx960$us = $vla42712121219 + ($add959$us << 2) | 0;
    $194 = +HEAPF32[$arrayidx960$us >> 2];
    if (+Math_abs(+($194 - +HEAPF32[$add$ptr29 + ($add959$us << 2) >> 2])) < 2.0) HEAPF32[$arrayidx960$us >> 2] = $194 - +HEAPF32[$add$ptr35 + ($add959$us << 2) >> 2] * .25;
    $i$111346$us = $i$111346$us + 1 | 0;
   } while (($i$111346$us | 0) != ($7 | 0));
   $c$2$us = $c$2$us + 1 | 0;
  } while (($c$2$us | 0) < ($1 | 0));
 }
 _quant_coarse_energy($2, $6, $7, $spec$select1032, $vla42712121219, $add$ptr29, $total_bits$1, $vla952, $enc$addr$0, $1, $LM$01388, $nbAvailableBytes$3, HEAP32[$st + 12 >> 2] | 0, $st + 84 | 0, (HEAP32[$complexity390 >> 2] | 0) > 3 & 1, HEAP32[$st + 56 >> 2] | 0, HEAP32[$lfe >> 2] | 0);
 $storage$i = $enc$addr$0 + 4 | 0;
 $mul$i1097 = HEAP32[$storage$i >> 2] << 3;
 $enc$idx45$i = $enc$addr$0 + 20 | 0;
 $enc$idx46$i = $enc$addr$0 + 28 | 0;
 $sub1$i$i = (HEAP32[$enc$idx45$i >> 2] | 0) + -32 + (Math_clz32(HEAP32[$enc$idx46$i >> 2] | 0) | 0) | 0;
 $tobool$i1098 = ($isTransient$21246 | 0) != 0;
 $cond$i1099 = $tobool$i1098 ? 2 : 4;
 $spec$select$i1102 = $cmp409 & ($sub1$i$i + ($cond$i1099 | 1) | 0) >>> 0 <= $mul$i1097 >>> 0;
 $sub$i1103 = $mul$i1097 - ($spec$select$i1102 & 1) | 0;
 do if ($cmp9551345) {
  $cond10$i = $tobool$i1098 ? 4 : 5;
  $arrayidx8$peel$i = $vla883 + ($6 << 2) | 0;
  if (($sub1$i$i + $cond$i1099 | 0) >>> 0 > $sub$i1103 >>> 0) {
   HEAP32[$arrayidx8$peel$i >> 2] = 0;
   $curr$1$peel$i = 0;
   $tell$1$peel$i = $sub1$i$i;
  } else {
   $204 = HEAP32[$arrayidx8$peel$i >> 2] | 0;
   _ec_enc_bit_logp($enc$addr$0, $204, $cond$i1099);
   $curr$1$peel$i = $204;
   $tell$1$peel$i = (HEAP32[$enc$idx45$i >> 2] | 0) + -32 + (Math_clz32(HEAP32[$enc$idx46$i >> 2] | 0) | 0) | 0;
  }
  $inc$peel$i = $6 + 1 | 0;
  if (($inc$peel$i | 0) == ($7 | 0)) {
   $tf_changed$0$lcssa$i = $curr$1$peel$i;
   break;
  }
  $curr$052$i = $curr$1$peel$i;
  $i$053$i = $inc$peel$i;
  $tell$056$i = $tell$1$peel$i;
  $tf_changed$054$i = $curr$1$peel$i;
  while (1) {
   $arrayidx8$i = $vla883 + ($i$053$i << 2) | 0;
   if (($tell$056$i + $cond10$i | 0) >>> 0 > $sub$i1103 >>> 0) {
    HEAP32[$arrayidx8$i >> 2] = $curr$052$i;
    $curr$1$i = $curr$052$i;
    $tell$1$i = $tell$056$i;
    $tf_changed$1$i = $tf_changed$054$i;
   } else {
    $206 = HEAP32[$arrayidx8$i >> 2] | 0;
    _ec_enc_bit_logp($enc$addr$0, $206 ^ $curr$052$i, $cond10$i);
    $curr$1$i = $206;
    $tell$1$i = (HEAP32[$enc$idx45$i >> 2] | 0) + -32 + (Math_clz32(HEAP32[$enc$idx46$i >> 2] | 0) | 0) | 0;
    $tf_changed$1$i = $206 | $tf_changed$054$i;
   }
   $i$053$i = $i$053$i + 1 | 0;
   if (($i$053$i | 0) == ($7 | 0)) {
    $tf_changed$0$lcssa$i = $tf_changed$1$i;
    break;
   } else {
    $curr$052$i = $curr$1$i;
    $tell$056$i = $tell$1$i;
    $tf_changed$054$i = $tf_changed$1$i;
   }
  }
 } else $tf_changed$0$lcssa$i = 0; while (0);
 do if ($spec$select$i1102) {
  $mul13$i = $isTransient$21246 << 2;
  if ((HEAP8[$tf_changed$0$lcssa$i + $mul13$i + (192 + ($LM$01388 << 3)) >> 0] | 0) == (HEAP8[$tf_changed$0$lcssa$i + ($mul13$i | 2) + (192 + ($LM$01388 << 3)) >> 0] | 0)) {
   $tf_select$addr$0$i = 0;
   break;
  }
  _ec_enc_bit_logp($enc$addr$0, $tf_select$0, 1);
  $tf_select$addr$0$i = $tf_select$0 << 1;
 } else $tf_select$addr$0$i = 0; while (0);
 if ($cmp9551345) {
  $add35$i = $tf_select$addr$0$i + ($isTransient$21246 << 2) | 0;
  $i$150$i = $6;
  do {
   $arrayidx36$i = $vla883 + ($i$150$i << 2) | 0;
   HEAP32[$arrayidx36$i >> 2] = HEAP8[$add35$i + (HEAP32[$arrayidx36$i >> 2] | 0) + (192 + ($LM$01388 << 3)) >> 0];
   $i$150$i = $i$150$i + 1 | 0;
  } while (($i$150$i | 0) != ($7 | 0));
 }
 if (((HEAP32[$enc$idx45$i >> 2] | 0) + -28 + (Math_clz32(HEAP32[$enc$idx46$i >> 2] | 0) | 0) | 0) <= ($total_bits$1 | 0)) {
  L428 : do if (!(HEAP32[$lfe >> 2] | 0)) {
   if ($cmp) {
    if (!(HEAP32[$complexity390 >> 2] | 0)) {
     HEAP32[$st + 80 >> 2] = 0;
     $230 = 0;
     break;
    }
    $spread_decision1011 = $st + 80 | 0;
    if (!$isTransient$21246) {
     HEAP32[$spread_decision1011 >> 2] = 3;
     $230 = 3;
     break;
    } else {
     HEAP32[$spread_decision1011 >> 2] = 2;
     $230 = 2;
     break;
    }
   }
   $215 = HEAP32[$complexity390 >> 2] | 0;
   do if (!$shortBlocks$11247) {
    if (($nbAvailableBytes$3 | 0) < ($1 * 10 | 0) | ($215 | 0) < 3) break;
    $tonal_average = $st + 88 | 0;
    $spread_decision1036 = $st + 80 | 0;
    $216 = HEAP32[$spread_decision1036 >> 2] | 0;
    $hf_average = $st + 96 | 0;
    $217 = HEAP32[$eBands4 >> 2] | 0;
    if (!$cmp25$i257) _celt_fatal(47642, 47629, 489);
    $mul$i487 = HEAP32[$shortMdctSize >> 2] << $LM$01388;
    do if (((HEAP16[$217 + ($spec$select1032 << 1) >> 1] | 0) - (HEAP16[$217 + ($spec$select1032 + -1 << 1) >> 1] | 0) << $LM$01388 | 0) < 9) $call1045512 = 0; else {
     $$pre$pre$i = HEAP16[$217 >> 1] | 0;
     $c$0$us$i494 = 0;
     $hf_sum$0$us$i = 0;
     $nbBands$0$us$i = 0;
     $sum$0$us$i = 0;
     while (1) {
      $mul15$us$i = Math_imul($mul$i487, $c$0$us$i494) | 0;
      $221 = $$pre$pre$i;
      $hf_sum$193$us$i = $hf_sum$0$us$i;
      $i$094$us$i = 0;
      $nbBands$191$us$i = $nbBands$0$us$i;
      $sum$192$us$i = $sum$0$us$i;
      while (1) {
       $conv13$us$i = $221 << 16 >> 16;
       $add$ptr16$us$i = $vla857 + ($conv13$us$i << $LM$01388 << 2) + ($mul15$us$i << 2) | 0;
       $i$094$us$i$looptemp = $i$094$us$i;
       $i$094$us$i = $i$094$us$i + 1 | 0;
       $221 = HEAP16[$217 + ($i$094$us$i << 1) >> 1] | 0;
       $mul22$us$i = ($221 << 16 >> 16) - $conv13$us$i << $LM$01388;
       if (($mul22$us$i | 0) < 9) {
        $hf_sum$3$us$i = $hf_sum$193$us$i;
        $nbBands$2$us$i = $nbBands$191$us$i;
        $sum$2$us$i = $sum$192$us$i;
       } else {
        $conv34$us$i = +($mul22$us$i | 0);
        $j$084$us$i = 0;
        $tcount$sroa$0$087$us$i = 0;
        $tcount$sroa$11$285$us$i = 0;
        $tcount$sroa$7$086$us$i = 0;
        do {
         $225 = +HEAPF32[$add$ptr16$us$i + ($j$084$us$i << 2) >> 2];
         $mul35$us$i = $225 * $225 * $conv34$us$i;
         $tcount$sroa$0$087$us$i = $tcount$sroa$0$087$us$i + ($mul35$us$i < .25 & 1) | 0;
         $tcount$sroa$7$086$us$i = $tcount$sroa$7$086$us$i + ($mul35$us$i < .0625 & 1) | 0;
         $tcount$sroa$11$285$us$i = $tcount$sroa$11$285$us$i + ($mul35$us$i < .015625 & 1) | 0;
         $j$084$us$i = $j$084$us$i + 1 | 0;
        } while (($j$084$us$i | 0) != ($mul22$us$i | 0));
        if (($i$094$us$i$looptemp | 0) > ((HEAP32[$nbEBands2 >> 2] | 0) + -4 | 0)) $hf_sum$2$us$i = (($tcount$sroa$0$087$us$i + $tcount$sroa$7$086$us$i << 5 >>> 0) / ($mul22$us$i >>> 0) | 0) + $hf_sum$193$us$i | 0; else $hf_sum$2$us$i = $hf_sum$193$us$i;
        $224 = HEAP32[$vla876 + ($i$094$us$i$looptemp << 2) >> 2] | 0;
        $hf_sum$3$us$i = $hf_sum$2$us$i;
        $nbBands$2$us$i = $224 + $nbBands$191$us$i | 0;
        $sum$2$us$i = (Math_imul($224, (($tcount$sroa$7$086$us$i << 1 | 0) >= ($mul22$us$i | 0) & 1) + (($tcount$sroa$11$285$us$i << 1 | 0) >= ($mul22$us$i | 0) & 1) + (($tcount$sroa$0$087$us$i << 1 | 0) >= ($mul22$us$i | 0) & 1) | 0) | 0) + $sum$192$us$i | 0;
       }
       if (($i$094$us$i | 0) == ($spec$select1032 | 0)) break; else {
        $hf_sum$193$us$i = $hf_sum$3$us$i;
        $nbBands$191$us$i = $nbBands$2$us$i;
        $sum$192$us$i = $sum$2$us$i;
       }
      }
      $c$0$us$i494 = $c$0$us$i494 + 1 | 0;
      if (($c$0$us$i494 | 0) >= ($1 | 0)) break; else {
       $hf_sum$0$us$i = $hf_sum$3$us$i;
       $nbBands$0$us$i = $nbBands$2$us$i;
       $sum$0$us$i = $sum$2$us$i;
      }
     }
     if (!$cmp371) {
      if (!$hf_sum$3$us$i) $hf_sum$4$i = 0; else $hf_sum$4$i = ($hf_sum$3$us$i >>> 0) / ((Math_imul($spec$select1032 + 4 - (HEAP32[$nbEBands2 >> 2] | 0) | 0, $1) | 0) >>> 0) | 0;
      $shr$i507 = (HEAP32[$hf_average >> 2] | 0) + $hf_sum$4$i >> 1;
      HEAP32[$hf_average >> 2] = $shr$i507;
      switch (HEAP32[$tapset_decision >> 2] | 0) {
      case 2:
       {
        $hf_sum$5$i = $shr$i507 + 4 | 0;
        break;
       }
      case 0:
       {
        $hf_sum$5$i = $shr$i507 + -4 | 0;
        break;
       }
      default:
       $hf_sum$5$i = $shr$i507;
      }
      HEAP32[$tapset_decision >> 2] = ($hf_sum$5$i | 0) > 22 ? 2 : ($hf_sum$5$i | 0) > 18 & 1;
     }
     if (($nbBands$2$us$i | 0) <= 0) _celt_fatal(47666, 47629, 545);
     if (($sum$2$us$i | 0) <= -1) _celt_fatal(47694, 47629, 546);
     $shr134$i = (HEAP32[$tonal_average >> 2] | 0) + (($sum$2$us$i << 8 >>> 0) / ($nbBands$2$us$i >>> 0) | 0) >> 1;
     HEAP32[$tonal_average >> 2] = $shr134$i;
     $add139$i = ($shr134$i * 3 | 0) + (384 - ($216 << 7) | 64) | 0;
     if (($add139$i | 0) < 318) {
      $call1045512 = 3;
      break;
     }
     $call1045512 = ($add139$i | 0) < 1022 ? 2 : ($add139$i | 0) < 1534 & 1;
    } while (0);
    HEAP32[$spread_decision1036 >> 2] = $call1045512;
    $230 = $call1045512;
    break L428;
   } while (0);
   $spread_decision1031 = $st + 80 | 0;
   if (!$215) {
    HEAP32[$spread_decision1031 >> 2] = 0;
    $230 = 0;
    break;
   } else {
    HEAP32[$spread_decision1031 >> 2] = 2;
    $230 = 2;
    break;
   }
  } else {
   HEAP32[$tapset_decision >> 2] = 0;
   HEAP32[$st + 80 >> 2] = 2;
   $230 = 2;
  } while (0);
  _ec_enc_icdf($enc$addr$0, $230, 49044, 5);
 }
 if (HEAP32[$lfe >> 2] | 0) HEAP32[$vla874 >> 2] = ($effectiveBytes$2 | 0) > 26 ? 8 : ($effectiveBytes$2 | 0) / 3 | 0;
 $vla1065 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $232 = HEAP32[$nbEBands2 >> 2] | 0;
 if (($232 | 0) > 0) {
  $sub6$i = $1 + -1 + ($LM$01388 << 1) | 0;
  $$pre$i516 = HEAP32[$eBands4 >> 2] | 0;
  $$pre17$i = HEAP32[$2 + 104 >> 2] | 0;
  $234 = HEAP16[$$pre$i516 >> 1] | 0;
  $i$015$i = 0;
  do {
   $i$015$i$looptemp = $i$015$i;
   $i$015$i = $i$015$i + 1 | 0;
   $234$looptemp = $234;
   $234 = HEAP16[$$pre$i516 + ($i$015$i << 1) >> 1] | 0;
   HEAP32[$vla1065 + ($i$015$i$looptemp << 2) >> 2] = (Math_imul(Math_imul(($234 << 16 >> 16) - ($234$looptemp << 16 >> 16) << $LM$01388, $1) | 0, (HEAPU8[$$pre17$i + ((Math_imul($232, $sub6$i) | 0) + $i$015$i$looptemp) >> 0] | 0) + 64 | 0) | 0) >> 2;
  } while (($i$015$i | 0) != ($232 | 0));
 }
 $shl1066 = $total_bits$1 << 3;
 $236 = HEAP32[$enc$idx45$i >> 2] | 0;
 $237 = HEAP32[$enc$idx46$i >> 2] | 0;
 $sub$i535 = 32 - (Math_clz32($237 | 0) | 0) | 0;
 $shr$i537 = $237 >>> ($sub$i535 + -16 | 0);
 $shr3$i538 = $shr$i537 >>> 12;
 $sub7$i547 = (Math_imul($sub$i535, -8) | 0) + ($236 << 3) + (($shr$i537 >>> 0 > (HEAP32[5744 + ($shr3$i538 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i538) | 0;
 if ($cmp9551345) {
  $451 = $237;
  $452 = $236;
  $dynalloc_logp$01341 = 6;
  $i$121342 = $6;
  $tell$21339 = $sub7$i547;
  $total_boost$01340 = 0;
  while (1) {
   $i$121342$looptemp = $i$121342;
   $i$121342 = $i$121342 + 1 | 0;
   $shl1079 = (Math_imul((HEAP16[$5 + ($i$121342 << 1) >> 1] | 0) - (HEAP16[$5 + ($i$121342$looptemp << 1) >> 1] | 0) | 0, $1) | 0) << $LM$01388;
   $shl1080 = $shl1079 << 3;
   $cond1086 = ($shl1079 | 0) > 48 ? $shl1079 : 48;
   $shl1080$cond1086 = ($shl1080 | 0) < ($cond1086 | 0) ? $shl1080 : $cond1086;
   $arrayidx1113 = $vla874 + ($i$121342$looptemp << 2) | 0;
   do if ((($dynalloc_logp$01341 << 3) + $tell$21339 | 0) < ($shl1066 - $total_boost$01340 | 0)) {
    $243 = HEAP32[$vla1065 + ($i$121342$looptemp << 2) >> 2] | 0;
    $455 = $451;
    $456 = $452;
    $boost$01325 = 0;
    $dynalloc_loop_logp$01324 = $dynalloc_logp$01341;
    $j$01326 = 0;
    $tell$31322 = $tell$21339;
    $total_boost$11323 = $total_boost$01340;
    while (1) {
     if (($boost$01325 | 0) >= ($243 | 0)) {
      $457 = $455;
      $458 = $456;
      $tell$4 = $tell$31322;
      label = 336;
      break;
     }
     $cmp1114 = ($j$01326 | 0) < (HEAP32[$arrayidx1113 >> 2] | 0);
     _ec_enc_bit_logp($enc$addr$0, $cmp1114 & 1, $dynalloc_loop_logp$01324);
     $456 = HEAP32[$enc$idx45$i >> 2] | 0;
     $455 = HEAP32[$enc$idx46$i >> 2] | 0;
     $sub$i551 = 32 - (Math_clz32($455 | 0) | 0) | 0;
     $shr$i553 = $455 >>> ($sub$i551 + -16 | 0);
     $shr3$i554 = $shr$i553 >>> 12;
     $tell$31322 = (Math_imul($sub$i551, -8) | 0) + ($456 << 3) + (($shr$i553 >>> 0 > (HEAP32[5744 + ($shr3$i554 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i554) | 0;
     if (!$cmp1114) {
      $457 = $455;
      $458 = $456;
      $tell$4 = $tell$31322;
      label = 336;
      break;
     }
     $add1121 = $total_boost$11323 + $shl1080$cond1086 | 0;
     $add1120 = $boost$01325 + $shl1080$cond1086 | 0;
     if (($tell$31322 + 8 | 0) >= ($shl1066 - $add1121 | 0)) {
      label = 335;
      break;
     } else {
      $boost$01325 = $add1120;
      $dynalloc_loop_logp$01324 = 1;
      $j$01326 = $j$01326 + 1 | 0;
      $total_boost$11323 = $add1121;
     }
    }
    if ((label | 0) == 335) {
     label = 0;
     $sub11271447 = $dynalloc_logp$01341 + -1 | 0;
     $459 = $455;
     $460 = $456;
     $461 = ($sub11271447 | 0) > 2 ? $sub11271447 : 2;
     $boost$0$lcssa1441 = $add1120;
     $tell$41443 = $tell$31322;
     $total_boost$1$lcssa1439 = $add1121;
     break;
    } else if ((label | 0) == 336) {
     label = 0;
     $sub1127 = $dynalloc_logp$01341 + -1 | 0;
     if (!$j$01326) {
      $453 = $457;
      $454 = $458;
      $boost$0$lcssa1442 = $boost$01325;
      $tell$41444 = $tell$4;
      $total_boost$1$lcssa1440 = $total_boost$11323;
      label = 337;
      break;
     } else {
      $459 = $457;
      $460 = $458;
      $461 = ($sub1127 | 0) > 2 ? $sub1127 : 2;
      $boost$0$lcssa1441 = $boost$01325;
      $tell$41443 = $tell$4;
      $total_boost$1$lcssa1439 = $total_boost$11323;
      break;
     }
    }
   } else {
    $453 = $451;
    $454 = $452;
    $boost$0$lcssa1442 = 0;
    $tell$41444 = $tell$21339;
    $total_boost$1$lcssa1440 = $total_boost$01340;
    label = 337;
   } while (0);
   if ((label | 0) == 337) {
    label = 0;
    $459 = $453;
    $460 = $454;
    $461 = $dynalloc_logp$01341;
    $boost$0$lcssa1441 = $boost$0$lcssa1442;
    $tell$41443 = $tell$41444;
    $total_boost$1$lcssa1439 = $total_boost$1$lcssa1440;
   }
   HEAP32[$arrayidx1113 >> 2] = $boost$0$lcssa1441;
   if (($i$121342 | 0) == ($7 | 0)) {
    $449 = $459;
    $450 = $460;
    $tell$2$lcssa = $tell$41443;
    $total_boost$0$lcssa = $total_boost$1$lcssa1439;
    break;
   } else {
    $451 = $459;
    $452 = $460;
    $dynalloc_logp$01341 = $461;
    $tell$21339 = $tell$41443;
    $total_boost$01340 = $total_boost$1$lcssa1439;
   }
  }
 } else {
  $449 = $237;
  $450 = $236;
  $tell$2$lcssa = $sub7$i547;
  $total_boost$0$lcssa = 0;
 }
 $cmp1140 = ($1 | 0) == 2;
 if ($cmp1140) {
  if ($LM$01388 | 0) {
   $251 = HEAP32[$eBands4 >> 2] | 0;
   $252 = HEAP16[$251 >> 1] | 0;
   $i$042$i = 0;
   $sumLR$041$i = 1.0000000036274937e-15;
   $sumMS$040$i = 1.0000000036274937e-15;
   while (1) {
    $shl$i1086 = $252 << 16 >> 16 << $LM$01388;
    $i$042$i = $i$042$i + 1 | 0;
    $252 = HEAP16[$251 + ($i$042$i << 1) >> 1] | 0;
    $shl533$i = $252 << 16 >> 16 << $LM$01388;
    if (($shl$i1086 | 0) < ($shl533$i | 0)) {
     $j$035$i = $shl$i1086;
     $sumLR$137$i = $sumLR$041$i;
     $sumMS$136$i = $sumMS$040$i;
     while (1) {
      $254 = +HEAPF32[$vla857 + ($j$035$i << 2) >> 2];
      $255 = +HEAPF32[$vla857 + ($j$035$i + $mul << 2) >> 2];
      $add18$i = $sumLR$137$i + (+Math_abs(+$254) + +Math_abs(+$255));
      $add24$i = $sumMS$136$i + (+Math_abs(+($254 + $255)) + +Math_abs(+($254 - $255)));
      $j$035$i = $j$035$i + 1 | 0;
      if (($j$035$i | 0) == ($shl533$i | 0)) {
       $sumLR$1$lcssa$i = $add18$i;
       $sumMS$1$lcssa$i = $add24$i;
       break;
      } else {
       $sumLR$137$i = $add18$i;
       $sumMS$136$i = $add24$i;
      }
     }
    } else {
     $sumLR$1$lcssa$i = $sumLR$041$i;
     $sumMS$1$lcssa$i = $sumMS$040$i;
    }
    if (($i$042$i | 0) == 13) break; else {
     $sumLR$041$i = $sumLR$1$lcssa$i;
     $sumMS$040$i = $sumMS$1$lcssa$i;
    }
   }
   $shl35$i1092 = HEAP16[$251 + 26 >> 1] << $LM$01388 + 1;
   HEAP32[$dual_stereo >> 2] = $sumMS$1$lcssa$i * .7071070075035095 * +($shl35$i1092 + ($LM$01388 >>> 0 < 2 ? 5 : 13) | 0) > $sumLR$1$lcssa$i * +($shl35$i1092 | 0) & 1;
  }
  $conv1149 = +(($spec$select1255 | 0) / 1e3 | 0 | 0);
  $intensity = $st + 232 | 0;
  $261 = HEAP32[$intensity >> 2] | 0;
  do if (($spec$select1255 | 0) < 1e3) $i$0$lcssa$i = 0; else {
   if (($spec$select1255 | 0) < 2e3) {
    $i$0$lcssa$i = 1;
    break;
   }
   if (($spec$select1255 | 0) < 3e3) {
    $i$0$lcssa$i = 2;
    break;
   }
   if (($spec$select1255 | 0) < 4e3) {
    $i$0$lcssa$i = 3;
    break;
   }
   if (($spec$select1255 | 0) < 5e3) {
    $i$0$lcssa$i = 4;
    break;
   }
   if (($spec$select1255 | 0) < 6e3) {
    $i$0$lcssa$i = 5;
    break;
   }
   if (($spec$select1255 | 0) < 7e3) {
    $i$0$lcssa$i = 6;
    break;
   }
   if (($spec$select1255 | 0) < 8e3) {
    $i$0$lcssa$i = 7;
    break;
   }
   if (($spec$select1255 | 0) < 16e3) {
    $i$0$lcssa$i = 8;
    break;
   }
   if (($spec$select1255 | 0) < 24e3) {
    $i$0$lcssa$i = 9;
    break;
   }
   if (($spec$select1255 | 0) < 36e3) {
    $i$0$lcssa$i = 10;
    break;
   }
   if (($spec$select1255 | 0) < 44e3) {
    $i$0$lcssa$i = 11;
    break;
   }
   if (($spec$select1255 | 0) < 5e4) {
    $i$0$lcssa$i = 12;
    break;
   }
   if (($spec$select1255 | 0) < 56e3) {
    $i$0$lcssa$i = 13;
    break;
   }
   if (($spec$select1255 | 0) < 62e3) {
    $i$0$lcssa$i = 14;
    break;
   }
   if (($spec$select1255 | 0) < 67e3) {
    $i$0$lcssa$i = 15;
    break;
   }
   if (($spec$select1255 | 0) < 72e3) {
    $i$0$lcssa$i = 16;
    break;
   }
   if (($spec$select1255 | 0) < 79e3) {
    $i$0$lcssa$i = 17;
    break;
   }
   if (($spec$select1255 | 0) < 88e3) {
    $i$0$lcssa$i = 18;
    break;
   }
   if (($spec$select1255 | 0) < 106e3) {
    $i$0$lcssa$i = 19;
    break;
   }
   $i$0$lcssa$i = ($spec$select1255 | 0) < 134e3 ? 20 : 21;
  } while (0);
  if (($i$0$lcssa$i | 0) > ($261 | 0)) if (+HEAPF32[272 + ($261 << 2) >> 2] + +HEAPF32[368 + ($261 << 2) >> 2] > $conv1149) $i$2$i = $261; else label = 351; else label = 351;
  do if ((label | 0) == 351) {
   if (($i$0$lcssa$i | 0) >= ($261 | 0)) {
    $i$2$i = $i$0$lcssa$i;
    break;
   }
   $sub$i594 = $261 + -1 | 0;
   if (!(+HEAPF32[272 + ($sub$i594 << 2) >> 2] - +HEAPF32[368 + ($sub$i594 << 2) >> 2] < $conv1149)) {
    $i$2$i = $i$0$lcssa$i;
    break;
   }
   $i$2$i = $261;
  } while (0);
  $$call1150 = ($6 | 0) > ($i$2$i | 0) ? $6 : $i$2$i;
  HEAP32[$intensity >> 2] = ($7 | 0) < ($$call1150 | 0) ? $7 : $$call1150;
 }
 if (($tell$2$lcssa + 48 | 0) > ($shl1066 - $total_boost$0$lcssa | 0)) {
  $462 = $449;
  $463 = $450;
  $alloc_trim$1 = 5;
  $tell$5 = $tell$2$lcssa;
 } else {
  do if (($6 | 0) > 0) label = 358; else {
   if (HEAP32[$lfe >> 2] | 0) {
    label = 358;
    break;
   }
   $stereo_saving1189 = $st + 228 | 0;
   $267 = +HEAPF32[$tf_estimate >> 2];
   $268 = HEAP32[$st + 232 >> 2] | 0;
   $spec$select1260 = ($spec$select1255 | 0) < 64e3 ? 4.0 : ($spec$select1255 | 0) < 8e4 ? +($spec$select1255 + -64e3 >> 10 | 0) * .0625 + 4.0 : 5.0;
   if ($cmp1140) {
    $269 = HEAP32[$eBands4 >> 2] | 0;
    $conv9$i = HEAP16[$269 >> 1] | 0;
    $shl$i1072 = $conv9$i << $LM$01388;
    $arrayidx10$i1073 = $vla857 + ($shl$i1072 << 2) | 0;
    $arrayidx16$i = $vla857 + ($shl$i1072 + $mul << 2) | 0;
    $conv20$i = HEAP16[$269 + 2 >> 1] | 0;
    $shl25$i = $conv20$i - $conv9$i << $LM$01388;
    if (($shl25$i | 0) > 0) {
     $i$07$i$i = 0;
     $xy$08$i$i = 0.0;
     while (1) {
      $add$i$i = $xy$08$i$i + +HEAPF32[$arrayidx10$i1073 + ($i$07$i$i << 2) >> 2] * +HEAPF32[$arrayidx16$i + ($i$07$i$i << 2) >> 2];
      $i$07$i$i = $i$07$i$i + 1 | 0;
      if (($i$07$i$i | 0) == ($shl25$i | 0)) {
       $xy$0$lcssa$i$i = $add$i$i;
       break;
      } else $xy$08$i$i = $add$i$i;
     }
    } else $xy$0$lcssa$i$i = 0.0;
    $add26$i = $xy$0$lcssa$i$i + 0.0;
    $shl$1$i = $conv20$i << $LM$01388;
    $arrayidx10$1$i = $vla857 + ($shl$1$i << 2) | 0;
    $arrayidx16$1$i = $vla857 + ($shl$1$i + $mul << 2) | 0;
    $conv20$1$i = HEAP16[$269 + 4 >> 1] | 0;
    $shl25$1$i = $conv20$1$i - $conv20$i << $LM$01388;
    if (($shl25$1$i | 0) > 0) {
     $i$07$i$1$i = 0;
     $xy$08$i$1$i = 0.0;
     while (1) {
      $add$i$1$i = $xy$08$i$1$i + +HEAPF32[$arrayidx10$1$i + ($i$07$i$1$i << 2) >> 2] * +HEAPF32[$arrayidx16$1$i + ($i$07$i$1$i << 2) >> 2];
      $i$07$i$1$i = $i$07$i$1$i + 1 | 0;
      if (($i$07$i$1$i | 0) == ($shl25$1$i | 0)) {
       $xy$0$lcssa$i$1$i = $add$i$1$i;
       break;
      } else $xy$08$i$1$i = $add$i$1$i;
     }
    } else $xy$0$lcssa$i$1$i = 0.0;
    $add26$1$i = $add26$i + $xy$0$lcssa$i$1$i;
    $shl$2$i = $conv20$1$i << $LM$01388;
    $arrayidx10$2$i = $vla857 + ($shl$2$i << 2) | 0;
    $arrayidx16$2$i = $vla857 + ($shl$2$i + $mul << 2) | 0;
    $conv20$2$i = HEAP16[$269 + 6 >> 1] | 0;
    $shl25$2$i = $conv20$2$i - $conv20$1$i << $LM$01388;
    if (($shl25$2$i | 0) > 0) {
     $i$07$i$2$i = 0;
     $xy$08$i$2$i = 0.0;
     while (1) {
      $add$i$2$i = $xy$08$i$2$i + +HEAPF32[$arrayidx10$2$i + ($i$07$i$2$i << 2) >> 2] * +HEAPF32[$arrayidx16$2$i + ($i$07$i$2$i << 2) >> 2];
      $i$07$i$2$i = $i$07$i$2$i + 1 | 0;
      if (($i$07$i$2$i | 0) == ($shl25$2$i | 0)) {
       $xy$0$lcssa$i$2$i = $add$i$2$i;
       break;
      } else $xy$08$i$2$i = $add$i$2$i;
     }
    } else $xy$0$lcssa$i$2$i = 0.0;
    $add26$2$i = $add26$1$i + $xy$0$lcssa$i$2$i;
    $shl$3$i = $conv20$2$i << $LM$01388;
    $arrayidx10$3$i = $vla857 + ($shl$3$i << 2) | 0;
    $arrayidx16$3$i = $vla857 + ($shl$3$i + $mul << 2) | 0;
    $conv20$3$i = HEAP16[$269 + 8 >> 1] | 0;
    $shl25$3$i = $conv20$3$i - $conv20$2$i << $LM$01388;
    if (($shl25$3$i | 0) > 0) {
     $i$07$i$3$i = 0;
     $xy$08$i$3$i = 0.0;
     while (1) {
      $add$i$3$i = $xy$08$i$3$i + +HEAPF32[$arrayidx10$3$i + ($i$07$i$3$i << 2) >> 2] * +HEAPF32[$arrayidx16$3$i + ($i$07$i$3$i << 2) >> 2];
      $i$07$i$3$i = $i$07$i$3$i + 1 | 0;
      if (($i$07$i$3$i | 0) == ($shl25$3$i | 0)) {
       $xy$0$lcssa$i$3$i = $add$i$3$i;
       break;
      } else $xy$08$i$3$i = $add$i$3$i;
     }
    } else $xy$0$lcssa$i$3$i = 0.0;
    $add26$3$i = $add26$2$i + $xy$0$lcssa$i$3$i;
    $shl$4$i = $conv20$3$i << $LM$01388;
    $arrayidx10$4$i = $vla857 + ($shl$4$i << 2) | 0;
    $arrayidx16$4$i = $vla857 + ($shl$4$i + $mul << 2) | 0;
    $conv20$4$i = HEAP16[$269 + 10 >> 1] | 0;
    $shl25$4$i = $conv20$4$i - $conv20$3$i << $LM$01388;
    if (($shl25$4$i | 0) > 0) {
     $i$07$i$4$i = 0;
     $xy$08$i$4$i = 0.0;
     while (1) {
      $add$i$4$i = $xy$08$i$4$i + +HEAPF32[$arrayidx10$4$i + ($i$07$i$4$i << 2) >> 2] * +HEAPF32[$arrayidx16$4$i + ($i$07$i$4$i << 2) >> 2];
      $i$07$i$4$i = $i$07$i$4$i + 1 | 0;
      if (($i$07$i$4$i | 0) == ($shl25$4$i | 0)) {
       $xy$0$lcssa$i$4$i = $add$i$4$i;
       break;
      } else $xy$08$i$4$i = $add$i$4$i;
     }
    } else $xy$0$lcssa$i$4$i = 0.0;
    $add26$4$i = $add26$3$i + $xy$0$lcssa$i$4$i;
    $shl$5$i = $conv20$4$i << $LM$01388;
    $arrayidx10$5$i = $vla857 + ($shl$5$i << 2) | 0;
    $arrayidx16$5$i = $vla857 + ($shl$5$i + $mul << 2) | 0;
    $conv20$5$i = HEAP16[$269 + 12 >> 1] | 0;
    $shl25$5$i = $conv20$5$i - $conv20$4$i << $LM$01388;
    if (($shl25$5$i | 0) > 0) {
     $i$07$i$5$i = 0;
     $xy$08$i$5$i = 0.0;
     while (1) {
      $add$i$5$i = $xy$08$i$5$i + +HEAPF32[$arrayidx10$5$i + ($i$07$i$5$i << 2) >> 2] * +HEAPF32[$arrayidx16$5$i + ($i$07$i$5$i << 2) >> 2];
      $i$07$i$5$i = $i$07$i$5$i + 1 | 0;
      if (($i$07$i$5$i | 0) == ($shl25$5$i | 0)) {
       $xy$0$lcssa$i$5$i = $add$i$5$i;
       break;
      } else $xy$08$i$5$i = $add$i$5$i;
     }
    } else $xy$0$lcssa$i$5$i = 0.0;
    $add26$5$i = $add26$4$i + $xy$0$lcssa$i$5$i;
    $shl$6$i = $conv20$5$i << $LM$01388;
    $arrayidx10$6$i = $vla857 + ($shl$6$i << 2) | 0;
    $arrayidx16$6$i = $vla857 + ($shl$6$i + $mul << 2) | 0;
    $conv20$6$i = HEAP16[$269 + 14 >> 1] | 0;
    $shl25$6$i = $conv20$6$i - $conv20$5$i << $LM$01388;
    if (($shl25$6$i | 0) > 0) {
     $i$07$i$6$i = 0;
     $xy$08$i$6$i = 0.0;
     while (1) {
      $add$i$6$i = $xy$08$i$6$i + +HEAPF32[$arrayidx10$6$i + ($i$07$i$6$i << 2) >> 2] * +HEAPF32[$arrayidx16$6$i + ($i$07$i$6$i << 2) >> 2];
      $i$07$i$6$i = $i$07$i$6$i + 1 | 0;
      if (($i$07$i$6$i | 0) == ($shl25$6$i | 0)) {
       $xy$0$lcssa$i$6$i = $add$i$6$i;
       break;
      } else $xy$08$i$6$i = $add$i$6$i;
     }
    } else $xy$0$lcssa$i$6$i = 0.0;
    $add26$6$i = $add26$5$i + $xy$0$lcssa$i$6$i;
    $shl$7$i = $conv20$6$i << $LM$01388;
    $arrayidx10$7$i = $vla857 + ($shl$7$i << 2) | 0;
    $arrayidx16$7$i = $vla857 + ($shl$7$i + $mul << 2) | 0;
    $304 = HEAP16[$269 + 16 >> 1] | 0;
    $shl25$7$i = ($304 << 16 >> 16) - $conv20$6$i << $LM$01388;
    if (($shl25$7$i | 0) > 0) {
     $i$07$i$7$i = 0;
     $xy$08$i$7$i = 0.0;
     while (1) {
      $add$i$7$i = $xy$08$i$7$i + +HEAPF32[$arrayidx10$7$i + ($i$07$i$7$i << 2) >> 2] * +HEAPF32[$arrayidx16$7$i + ($i$07$i$7$i << 2) >> 2];
      $i$07$i$7$i = $i$07$i$7$i + 1 | 0;
      if (($i$07$i$7$i | 0) == ($shl25$7$i | 0)) {
       $xy$0$lcssa$i$7$i = $add$i$7$i;
       break;
      } else $xy$08$i$7$i = $add$i$7$i;
     }
    } else $xy$0$lcssa$i$7$i = 0.0;
    $307 = +Math_abs(+(($add26$6$i + $xy$0$lcssa$i$7$i) * .125));
    $cond$i1082 = $307 > 1.0 ? 1.0 : $307;
    if (($268 | 0) > 8) {
     $275 = $304;
     $i$124$i = 8;
     $minXC$023$i = $cond$i1082;
     while (1) {
      $conv41$i = $275 << 16 >> 16;
      $shl42$i = $conv41$i << $LM$01388;
      $arrayidx43$i = $vla857 + ($shl42$i << 2) | 0;
      $arrayidx49$i = $vla857 + ($shl42$i + $mul << 2) | 0;
      $i$124$i = $i$124$i + 1 | 0;
      $275 = HEAP16[$269 + ($i$124$i << 1) >> 1] | 0;
      $shl58$i = ($275 << 16 >> 16) - $conv41$i << $LM$01388;
      if (($shl58$i | 0) > 0) {
       $i$07$i5$i = 0;
       $xy$08$i4$i = 0.0;
       while (1) {
        $add$i9$i = $xy$08$i4$i + +HEAPF32[$arrayidx43$i + ($i$07$i5$i << 2) >> 2] * +HEAPF32[$arrayidx49$i + ($i$07$i5$i << 2) >> 2];
        $i$07$i5$i = $i$07$i5$i + 1 | 0;
        if (($i$07$i5$i | 0) == ($shl58$i | 0)) {
         $xy$0$lcssa$i13$i = $add$i9$i;
         break;
        } else $xy$08$i4$i = $add$i9$i;
       }
      } else $xy$0$lcssa$i13$i = 0.0;
      $279 = +Math_abs(+$xy$0$lcssa$i13$i);
      $minXC$0$$i = $minXC$023$i < $279 ? $minXC$023$i : $279;
      if (($i$124$i | 0) == ($268 | 0)) {
       $minXC$0$lcssa$i = $minXC$0$$i;
       break;
      } else $minXC$023$i = $minXC$0$$i;
     }
    } else $minXC$0$lcssa$i = $cond$i1082;
    $280 = +Math_abs(+$minXC$0$lcssa$i);
    $cond82$i = $280 > 1.0 ? 1.0 : $280;
    $conv87$i = +Math_log(+(1.0010000467300415 - $cond$i1082 * $cond$i1082)) * 1.4426950408889634;
    $mul88$i = $conv87$i * .5;
    $conv93$i = +Math_log(+(1.0010000467300415 - $cond82$i * $cond82$i)) * 1.4426950408889634;
    $mul106$i = $conv87$i * .75;
    $add115$i = +HEAPF32[$stereo_saving1189 >> 2] + .25;
    $sub117$i = -(($mul88$i > $conv93$i ? $mul88$i : $conv93$i) * .5);
    HEAPF32[$stereo_saving1189 >> 2] = $add115$i < $sub117$i ? $add115$i : $sub117$i;
    $trim$1$i = $spec$select1260 + ($mul106$i < -4.0 ? -4.0 : $mul106$i);
   } else $trim$1$i = $spec$select1260;
   $sub129$i = $7 + -1 | 0;
   $add137$i = 2 - $7 | 0;
   if (($7 | 0) > 1) {
    $$pre$i1076 = HEAP32[$nbEBands2 >> 2] | 0;
    $c$0$us$i = 0;
    $diff$0$us$i = 0.0;
    while (1) {
     $mul133$us$i = Math_imul($c$0$us$i, $$pre$i1076) | 0;
     $diff$119$us$i = $diff$0$us$i;
     $i$220$us$i = 0;
     do {
      $diff$119$us$i = $diff$119$us$i + +HEAPF32[$vla42712121219 + ($i$220$us$i + $mul133$us$i << 2) >> 2] * +($add137$i + ($i$220$us$i << 1) | 0);
      $i$220$us$i = $i$220$us$i + 1 | 0;
     } while (($i$220$us$i | 0) != ($sub129$i | 0));
     $c$0$us$i = $c$0$us$i + 1 | 0;
     if (($c$0$us$i | 0) >= ($1 | 0)) {
      $diff$1$lcssa$lcssa$i = $diff$119$us$i;
      break;
     } else $diff$0$us$i = $diff$119$us$i;
    }
   } else $diff$1$lcssa$lcssa$i = 0.0;
   $div152$i = ($diff$1$lcssa$lcssa$i / +(Math_imul($sub129$i, $1) | 0) + 1.0) / 6.0;
   $cmp153$i = $div152$i > 2.0;
   $phitmp$i1078 = $div152$i < -2.0;
   $sub180$i = $trim$1$i - ($phitmp$i1078 | $cmp153$i ? ($phitmp$i1078 & ($cmp153$i ^ 1) ? -2.0 : 2.0) : $div152$i) - $surround_trim$01234 - $267 * 2.0;
   if (!(HEAP32[$analysis >> 2] | 0)) $trim$2$i = $sub180$i; else {
    $mul183$i = (+HEAPF32[$st + 128 >> 2] + .05000000074505806) * 2.0;
    $cmp184$i = $mul183$i > 2.0;
    $phitmp1$i = $mul183$i < -2.0;
    $trim$2$i = $sub180$i - ($phitmp1$i | $cmp184$i ? ($phitmp1$i & ($cmp184$i ^ 1) ? -2.0 : 2.0) : $mul183$i);
   }
   $conv215$i = ~~+Math_floor(+($trim$2$i + .5));
   $cond221$i = ($conv215$i | 0) < 10 ? $conv215$i : 10;
   $alloc_trim$0 = ($cond221$i | 0) > 0 ? $cond221$i : 0;
  } while (0);
  if ((label | 0) == 358) {
   HEAPF32[$st + 228 >> 2] = 0.0;
   $alloc_trim$0 = 5;
  }
  _ec_enc_icdf($enc$addr$0, $alloc_trim$0, 49048, 7);
  $311 = HEAP32[$enc$idx45$i >> 2] | 0;
  $312 = HEAP32[$enc$idx46$i >> 2] | 0;
  $sub$i567 = 32 - (Math_clz32($312 | 0) | 0) | 0;
  $shr$i569 = $312 >>> ($sub$i567 + -16 | 0);
  $shr3$i570 = $shr$i569 >>> 12;
  $462 = $312;
  $463 = $311;
  $alloc_trim$1 = $alloc_trim$0;
  $tell$5 = (Math_imul($sub$i567, -8) | 0) + ($311 << 3) + (($shr$i569 >>> 0 > (HEAP32[5744 + ($shr3$i570 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i570) | 0;
 }
 do if ($cmp178) {
  $sub1200 = (HEAP32[$maxLM >> 2] | 0) - $LM$01388 | 0;
  $shr1202 = 1275 >>> $sub141;
  $nbCompressedBytes$addr$5$shr1202 = ($nbCompressedBytes$addr$5 | 0) < ($shr1202 | 0) ? $nbCompressedBytes$addr$5 : $shr1202;
  if ($cmp) {
   $sub1221 = (Math_imul($1, -72) | 0) + -32 + $vbr_rate$0 | 0;
   $base_target$0 = ($sub1221 | 0) > 0 ? $sub1221 : 0;
  } else $base_target$0 = $vbr_rate$0 - ($add144 << 3) | 0;
  $317 = HEAP32[$constrained_vbr879 >> 2] | 0;
  $tobool1234 = ($317 | 0) == 0;
  if ($tobool1234) $base_target$1 = $base_target$0; else $base_target$1 = (HEAP32[$st + 216 >> 2] >> $sub1200) + $base_target$0 | 0;
  do if ($cmp) {
   $334 = HEAP32[$st + 188 >> 2] | 0;
   $335 = +HEAPF32[$tf_estimate >> 2];
   $add1273 = (($334 | 0) < 100 ? 96 >>> $sub141 : 0) + $base_target$1 + (($334 | 0) > 100 ? 0 - (144 >>> $sub141) | 0 : 0) + ~~(($335 + -.25) * 400.0) | 0;
   if (!($335 > .699999988079071)) {
    $target$2 = $add1273;
    break;
   }
   $target$2 = ($add1273 | 0) > 400 ? $add1273 : 400;
  } else {
   $319 = HEAP32[$st + 92 >> 2] | 0;
   $320 = HEAP32[$st + 232 >> 2] | 0;
   $321 = +HEAPF32[$st + 228 >> 2];
   $322 = HEAP32[$tot_boost >> 2] | 0;
   $323 = +HEAPF32[$tf_estimate >> 2];
   $324 = HEAP32[$lfe >> 2] | 0;
   $cmp1248 = (HEAP32[$st + 236 >> 2] | 0) == 0;
   $$idx$val = HEAP32[$nbEBands2 >> 2] | 0;
   $$idx1061$val = HEAP32[$eBands4 >> 2] | 0;
   $cond$i = ($319 | 0) == 0 ? $$idx$val : $319;
   $shl$i = HEAP16[$$idx1061$val + ($cond$i << 1) >> 1] << $LM$01388;
   if ($cmp1140) $coded_bins$0$i = (HEAP16[$$idx1061$val + ((($cond$i | 0) > ($320 | 0) ? $320 : $cond$i) << 1) >> 1] << $LM$01388) + $shl$i | 0; else $coded_bins$0$i = $shl$i;
   $tobool13$i = (HEAP32[$analysis >> 2] | 0) == 0;
   do if ($tobool13$i) $target$0$i = $base_target$1; else {
    $329 = +HEAPF32[$st + 136 >> 2];
    if (!($329 < .4)) {
     $target$0$i = $base_target$1;
     break;
    }
    $target$0$i = $base_target$1 - ~~((.4000000059604645 - $329) * +($coded_bins$0$i << 3 | 0)) | 0;
   } while (0);
   if ($cmp1140) {
    $cond32$i = ($cond$i | 0) > ($320 | 0) ? $320 : $cond$i;
    $sub36$i = (HEAP16[$$idx1061$val + ($cond32$i << 1) >> 1] << $LM$01388) - $cond32$i | 0;
    $mul47$i = +($sub36$i | 0) * .800000011920929 / +($coded_bins$0$i | 0) * +($target$0$i | 0);
    $mul51$i = (($321 < 1.0 ? $321 : 1.0) + -.10000000149011612) * +($sub36$i << 3 | 0);
    $target$1$i = $target$0$i - ~~($mul47$i < $mul51$i ? $mul47$i : $mul51$i) | 0;
   } else $target$1$i = $target$0$i;
   $add69$i = $target$1$i + ($322 - (19 << $LM$01388)) | 0;
   $add74$i = $add69$i + ~~(($323 + -.04399999976158142) * +($add69$i | 0)) | 0;
   $tobool78$i = ($324 | 0) != 0;
   if ($tobool78$i | $tobool13$i) {
    $conv110$pre$phi$iZ2D = +($coded_bins$0$i << 3 | 0);
    $target$2$i = $add74$i;
   } else {
    $sub80$i = +HEAPF32[$st + 124 >> 2] + -.15000000596046448;
    $conv91$i = +($coded_bins$0$i << 3 | 0);
    $conv110$pre$phi$iZ2D = $conv91$i;
    $target$2$i = $add74$i + (($pitch_change$0 | 0) == 0 ? 0 : ~~($conv91$i * .800000011920929)) + ~~($conv91$i * 1.2000000476837158 * ($sub80$i < 0.0 ? -.11999999731779099 : $sub80$i + -.11999999731779099)) | 0;
   }
   $or$cond1$i = $tobool78$i | $cmp1248;
   $add113$i = $target$2$i + ~~($surround_masking$01233 * $conv110$pre$phi$iZ2D) | 0;
   if ($or$cond1$i) $target$3$i = $target$2$i; else {
    $div114$i = ($target$2$i | 0) / 4 | 0;
    $target$3$i = ($div114$i | 0) > ($add113$i | 0) ? $div114$i : $add113$i;
   }
   $conv131$i = ~~($call882 * +(Math_imul($1 << 3, HEAP16[$$idx1061$val + ($$idx$val + -2 << 1) >> 1] << $LM$01388) | 0));
   $shr$i = $target$3$i >> 2;
   $cond138$i = ($shr$i | 0) < ($conv131$i | 0) ? $conv131$i : $shr$i;
   $cond144$i = ($target$3$i | 0) < ($cond138$i | 0) ? $target$3$i : $cond138$i;
   $spec$select1$i = ($317 | 0) != 0 & $or$cond1$i ? $base_target$1 + ~~(+($cond144$i - $base_target$1 | 0) * .6700000166893005) | 0 : $cond144$i;
   if ($323 < .20000000298023224 & $cmp1248) {
    $sub161$i = 96e3 - $spec$select1255 | 0;
    $cond168$i = ($sub161$i | 0) < 32e3 ? $sub161$i : 32e3;
    $target$5$i = $spec$select1$i + ~~((($cond168$i | 0) < 0 ? 0.0 : +($cond168$i | 0) * 3.099999958067201e-06) * $temporal_vbr$0 * +($spec$select1$i | 0)) | 0;
   } else $target$5$i = $spec$select1$i;
   $mul191$i = $base_target$1 << 1;
   $target$2 = ($mul191$i | 0) < ($target$5$i | 0) ? $mul191$i : $target$5$i;
  } while (0);
  $add1285 = $target$2 + $tell$5 | 0;
  $add1290 = ($total_boost$0$lcssa + 63 + $tell$5 >> 6) + 2 | 0;
  $shr1297 = $tell0_frac$0 + 359 + $total_boost$0$lcssa >> 6;
  $spec$select1261 = $cmp ? (($add1290 | 0) > ($shr1297 | 0) ? $add1290 : $shr1297) : $add1290;
  $shr1311 = $add1285 + 32 >> 6;
  $cond1317 = ($spec$select1261 | 0) > ($shr1311 | 0) ? $spec$select1261 : $shr1311;
  $cond1323 = ($nbCompressedBytes$addr$5$shr1202 | 0) < ($cond1317 | 0) ? $nbCompressedBytes$addr$5$shr1202 : $cond1317;
  $spec$select1042 = $tobool2881197 ? 2 : $cond1323;
  $vbr_count = $st + 220 | 0;
  $336 = HEAP32[$vbr_count >> 2] | 0;
  if (($336 | 0) < 970) {
   HEAP32[$vbr_count >> 2] = $336 + 1;
   $alpha$0 = 1.0 / +($336 + 21 | 0);
  } else $alpha$0 = 1.0000000474974513e-03;
  $vbr_reservoir1344 = $st + 208 | 0;
  do if ($tobool1234) $nbAvailableBytes$5 = $spec$select1042; else {
   $add1345 = ($tobool2881197 ? 128 : $cond1323 << 6) - $vbr_rate$0 + (HEAP32[$vbr_reservoir1344 >> 2] | 0) | 0;
   HEAP32[$vbr_reservoir1344 >> 2] = $add1345;
   $vbr_offset1352 = $st + 216 | 0;
   $vbr_drift = $st + 212 | 0;
   $339 = HEAP32[$vbr_drift >> 2] | 0;
   $add1359 = $339 + ~~($alpha$0 * +((($tobool2881197 ? 0 : $add1285 - $vbr_rate$0 | 0) << $sub1200) - (HEAP32[$vbr_offset1352 >> 2] | 0) - $339 | 0)) | 0;
   HEAP32[$vbr_drift >> 2] = $add1359;
   HEAP32[$vbr_offset1352 >> 2] = 0 - $add1359;
   if (($add1345 | 0) >= 0) {
    $nbAvailableBytes$5 = $spec$select1042;
    break;
   }
   HEAP32[$vbr_reservoir1344 >> 2] = 0;
   $nbAvailableBytes$5 = ($tobool2881197 ? 0 : ($add1345 | 0) / -64 | 0) + $spec$select1042 | 0;
  } while (0);
  $cond1387 = ($nbCompressedBytes$addr$5$shr1202 | 0) < ($nbAvailableBytes$5 | 0) ? $nbCompressedBytes$addr$5$shr1202 : $nbAvailableBytes$5;
  $341 = HEAP32[$enc$addr$0 + 8 >> 2] | 0;
  if (($341 + (HEAP32[$enc$addr$0 + 24 >> 2] | 0) | 0) >>> 0 > $cond1387 >>> 0) _celt_fatal(49175, 49097, 238); else {
   $342 = HEAP32[$enc$addr$0 >> 2] | 0;
   $idx$neg$i476 = 0 - $341 | 0;
   _memmove($342 + $cond1387 + $idx$neg$i476 | 0, $342 + (HEAP32[$storage$i >> 2] | 0) + $idx$neg$i476 | 0, $341 | 0) | 0;
   HEAP32[$storage$i >> 2] = $cond1387;
   $344 = HEAP32[$enc$idx45$i >> 2] | 0;
   $345 = HEAP32[$enc$idx46$i >> 2] | 0;
   $nbCompressedBytes$addr$6 = $cond1387;
   break;
  }
 } else {
  $344 = $463;
  $345 = $462;
  $nbCompressedBytes$addr$6 = $nbCompressedBytes$addr$5;
 } while (0);
 $vla1389 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $vla1390 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $vla1391 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $mul1392 = $nbCompressedBytes$addr$6 << 3;
 $shl1393 = $nbCompressedBytes$addr$6 << 6;
 $sub$i456 = 32 - (Math_clz32($345 | 0) | 0) | 0;
 $shr$i458 = $345 >>> ($sub$i456 + -16 | 0);
 $shr3$i459 = $shr$i458 >>> 12;
 $sub1396 = $shl1393 - ((Math_imul($sub$i456, -8) | 0) + ($344 << 3) + (($shr$i458 >>> 0 > (HEAP32[5744 + ($shr3$i459 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i459)) + -1 | 0;
 $spec$select1268 = $LM$01388 >>> 0 > 1 & $tobool$i1098 & ($sub1396 | 0) >= (($LM$01388 << 3) + 16 | 0);
 $spec$select1269 = $spec$select1268 ? 8 : 0;
 $sub1409 = $sub1396 - $spec$select1269 | 0;
 if (!(HEAP32[$analysis >> 2] | 0)) $signalBandwidth$0 = $7 + -1 | 0; else {
  do if (($spec$select1255 | 0) < ($1 * 32e3 | 0)) $min_bandwidth$0 = 13; else {
   if (($spec$select1255 | 0) < ($1 * 48e3 | 0)) {
    $min_bandwidth$0 = 16;
    break;
   }
   $min_bandwidth$0 = ($spec$select1255 | 0) < ($1 * 6e4 | 0) ? 18 : ($spec$select1255 | 0) < ($1 * 8e4 | 0) ? 19 : 20;
  } while (0);
  $349 = HEAP32[$st + 152 >> 2] | 0;
  $signalBandwidth$0 = ($349 | 0) > ($min_bandwidth$0 | 0) ? $349 : $min_bandwidth$0;
 }
 $intensity1453 = $st + 232 | 0;
 $lastCodedBands1454 = $st + 92 | 0;
 $call1455 = _clt_compute_allocation($2, $6, $7, $vla874, $vla1065, $alloc_trim$1, $intensity1453, $dual_stereo, $sub1409, $balance, $vla1390, $vla1389, $vla1391, $1, $LM$01388, $enc$addr$0, 1, HEAP32[$lastCodedBands1454 >> 2] | 0, (HEAP32[$lfe >> 2] | 0) == 0 ? $signalBandwidth$0 : 1) | 0;
 $352 = HEAP32[$lastCodedBands1454 >> 2] | 0;
 if (!$352) $storemerge = $call1455; else {
  $add1460 = $352 + 1 | 0;
  $sub1462 = $352 + -1 | 0;
  $sub1462$call1455 = ($sub1462 | 0) > ($call1455 | 0) ? $sub1462 : $call1455;
  $storemerge = ($add1460 | 0) < ($sub1462$call1455 | 0) ? $add1460 : $sub1462$call1455;
 }
 HEAP32[$lastCodedBands1454 >> 2] = $storemerge;
 L683 : do if ($cmp9551345) {
  $end_window$i$i103 = $enc$addr$0 + 12 | 0;
  $nend_bits$i$i104 = $enc$addr$0 + 16 | 0;
  $offs$i$i$i110 = $enc$addr$0 + 24 | 0;
  $end_offs$i$i$i111 = $enc$addr$0 + 8 | 0;
  $error$i$i114 = $enc$addr$0 + 44 | 0;
  $i$030$i = $6;
  L685 : while (1) {
   $353 = HEAP32[$vla1389 + ($i$030$i << 2) >> 2] | 0;
   if (($353 | 0) >= 1) {
    $conv6$i = 65536 << $353 >> 16;
    $conv7$i = +($conv6$i | 0);
    $sub$i95 = $conv6$i + -1 | 0;
    $354 = HEAP32[$nbEBands2 >> 2] | 0;
    $358 = HEAP32[$nend_bits$i$i104 >> 2] | 0;
    $464 = HEAP32[$end_window$i$i103 >> 2] | 0;
    $c$0$i98 = 0;
    while (1) {
     $add$i100 = (Math_imul($354, $c$0$i98) | 0) + $i$030$i | 0;
     $arrayidx4$i = $vla952 + ($add$i100 << 2) | 0;
     $conv10$i = ~~+Math_floor(+((+HEAPF32[$arrayidx4$i >> 2] + .5) * $conv7$i));
     $spec$select$i102 = ($conv6$i | 0) > ($conv10$i | 0) ? $conv10$i : $sub$i95;
     $q2$1$i = ($spec$select$i102 | 0) > 0 ? $spec$select$i102 : 0;
     if (!$353) break L685;
     $add$i$i107 = $358 + $353 | 0;
     if ($add$i$i107 >>> 0 > 32) {
      $359 = ~$358;
      $362 = $358 + (($359 | 0) > -16 ? $359 : -16) + 8 | 0;
      $used$0$i$i118 = $358;
      $window$0$i$i117 = $464;
      while (1) {
       $364 = HEAP32[$end_offs$i$i$i111 >> 2] | 0;
       $365 = HEAP32[$storage$i >> 2] | 0;
       if (($364 + (HEAP32[$offs$i$i$i110 >> 2] | 0) | 0) >>> 0 < $365 >>> 0) {
        $366 = HEAP32[$enc$addr$0 >> 2] | 0;
        $inc$i$i$i123 = $364 + 1 | 0;
        HEAP32[$end_offs$i$i$i111 >> 2] = $inc$i$i$i123;
        HEAP8[$366 + ($365 - $inc$i$i$i123) >> 0] = $window$0$i$i117;
        $retval$0$i$i$i127 = 0;
       } else $retval$0$i$i$i127 = -1;
       HEAP32[$error$i$i114 >> 2] = HEAP32[$error$i$i114 >> 2] | $retval$0$i$i$i127;
       $window$0$i$i117 = $window$0$i$i117 >>> 8;
       if (($used$0$i$i118 | 0) <= 15) break; else $used$0$i$i118 = $used$0$i$i118 + -8 | 0;
      }
      $370 = $358 + -8 - ($362 & -8) | 0;
      $$pre630 = HEAP32[$nbEBands2 >> 2] | 0;
      $$pre647 = (Math_imul($$pre630, $c$0$i98) | 0) + $i$030$i | 0;
      $465 = $$pre630;
      $add34$i145$pre$phiZZ2D = $$pre647;
      $add6$pre$phi$i$i135Z2D = $370 + $353 | 0;
      $arrayidx40$i$pre$phiZZ2D = $vla952 + ($$pre647 << 2) | 0;
      $used$1$i$i137 = $370;
      $window$1$i$i136 = $window$0$i$i117;
     } else {
      $465 = $354;
      $add34$i145$pre$phiZZ2D = $add$i100;
      $add6$pre$phi$i$i135Z2D = $add$i$i107;
      $arrayidx40$i$pre$phiZZ2D = $arrayidx4$i;
      $used$1$i$i137 = $358;
      $window$1$i$i136 = $464;
     }
     $464 = $q2$1$i << $used$1$i$i137 | $window$1$i$i136;
     HEAP32[$end_window$i$i103 >> 2] = $464;
     HEAP32[$nend_bits$i$i104 >> 2] = $add6$pre$phi$i$i135Z2D;
     HEAP32[$enc$idx45$i >> 2] = (HEAP32[$enc$idx45$i >> 2] | 0) + $353;
     $sub31$i = (+($q2$1$i | 0) + .5) * +(1 << 14 - $353 | 0) * .00006103515625 + -.5;
     $arrayidx35$i = $add$ptr29 + ($add34$i145$pre$phiZZ2D << 2) | 0;
     HEAPF32[$arrayidx35$i >> 2] = +HEAPF32[$arrayidx35$i >> 2] + $sub31$i;
     HEAPF32[$arrayidx40$i$pre$phiZZ2D >> 2] = +HEAPF32[$arrayidx40$i$pre$phiZZ2D >> 2] - $sub31$i;
     $c$0$i98 = $c$0$i98 + 1 | 0;
     if (($c$0$i98 | 0) >= ($1 | 0)) break; else {
      $354 = $465;
      $358 = $add6$pre$phi$i$i135Z2D;
     }
    }
   }
   $i$030$i = $i$030$i + 1 | 0;
   if (($i$030$i | 0) == ($7 | 0)) break L683;
  }
  _celt_fatal(49111, 49097, 198);
 } while (0);
 $vla1494 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $mul4351225 | 0) + 15 & -16) | 0;
 $rng = $st + 76 | 0;
 _quant_all_bands(1, $2, $6, $7, $vla857, $cmp1140 ? $vla857 + ($mul << 2) | 0 : 0, $vla1494, $vla42512091220, $vla1390, $shortBlocks$11247, HEAP32[$st + 80 >> 2] | 0, HEAP32[$dual_stereo >> 2] | 0, HEAP32[$intensity1453 >> 2] | 0, $vla883, $shl1393 - $spec$select1269 | 0, HEAP32[$balance >> 2] | 0, $enc$addr$0, $LM$01388, $call1455, $rng, HEAP32[$complexity390 >> 2] | 0, HEAP32[$arch454 >> 2] | 0, HEAP32[$st + 68 >> 2] | 0);
 if ($spec$select1268) {
  $conv1512 = (HEAP32[$st + 116 >> 2] | 0) < 2 & 1;
  $end_window$i31 = $enc$addr$0 + 12 | 0;
  $382 = HEAP32[$end_window$i31 >> 2] | 0;
  $nend_bits$i32 = $enc$addr$0 + 16 | 0;
  $383 = HEAP32[$nend_bits$i32 >> 2] | 0;
  $add$i33 = $383 + 1 | 0;
  if ($add$i33 >>> 0 > 32) {
   $offs$i$i = $enc$addr$0 + 24 | 0;
   $end_offs$i$i = $enc$addr$0 + 8 | 0;
   $error$i36 = $enc$addr$0 + 44 | 0;
   $384 = ~$383;
   $387 = $383 + (($384 | 0) > -16 ? $384 : -16) + 8 | 0;
   $used$0$i = $383;
   $window$0$i = $382;
   while (1) {
    $389 = HEAP32[$end_offs$i$i >> 2] | 0;
    $390 = HEAP32[$storage$i >> 2] | 0;
    if (($389 + (HEAP32[$offs$i$i >> 2] | 0) | 0) >>> 0 < $390 >>> 0) {
     $391 = HEAP32[$enc$addr$0 >> 2] | 0;
     $inc$i$i39 = $389 + 1 | 0;
     HEAP32[$end_offs$i$i >> 2] = $inc$i$i39;
     HEAP8[$391 + ($390 - $inc$i$i39) >> 0] = $window$0$i;
     $retval$0$i$i = 0;
    } else $retval$0$i$i = -1;
    HEAP32[$error$i36 >> 2] = HEAP32[$error$i36 >> 2] | $retval$0$i$i;
    $window$0$i = $window$0$i >>> 8;
    if (($used$0$i | 0) <= 15) break; else $used$0$i = $used$0$i + -8 | 0;
   }
   $395 = $383 + -8 - ($387 & -8) | 0;
   $add6$pre$phi$iZ2D = $395 + 1 | 0;
   $used$1$i = $395;
   $window$1$i = $window$0$i;
  } else {
   $add6$pre$phi$iZ2D = $add$i33;
   $used$1$i = $383;
   $window$1$i = $382;
  }
  HEAP32[$end_window$i31 >> 2] = $conv1512 << $used$1$i | $window$1$i;
  HEAP32[$nend_bits$i32 >> 2] = $add6$pre$phi$iZ2D;
  $add9$i = (HEAP32[$enc$idx45$i >> 2] | 0) + 1 | 0;
  HEAP32[$enc$idx45$i >> 2] = $add9$i;
  $enc$addr$0$idx$val = $add9$i;
 } else $enc$addr$0$idx$val = HEAP32[$enc$idx45$i >> 2] | 0;
 $sub1516 = $mul1392 + 32 - $enc$addr$0$idx$val - (Math_clz32(HEAP32[$enc$idx46$i >> 2] | 0) | 0) | 0;
 do if ($cmp9551345) {
  if (($sub1516 | 0) < ($1 | 0)) {
   $466 = $enc$addr$0$idx$val;
   $bits_left$addr$1$lcssa$i = $sub1516;
  } else {
   $end_window$i$i = $enc$addr$0 + 12 | 0;
   $nend_bits$i$i = $enc$addr$0 + 16 | 0;
   $offs$i$i$i = $enc$addr$0 + 24 | 0;
   $end_offs$i$i$i = $enc$addr$0 + 8 | 0;
   $error$i$i = $enc$addr$0 + 44 | 0;
   $467 = $enc$addr$0$idx$val;
   $bits_left$addr$131$i = $sub1516;
   $i$029$i = $6;
   while (1) {
    $398 = HEAP32[$vla1389 + ($i$029$i << 2) >> 2] | 0;
    do if (($398 | 0) > 7) {
     $468 = $467;
     $bits_left$addr$3$i = $bits_left$addr$131$i;
    } else {
     if (HEAP32[$vla1391 + ($i$029$i << 2) >> 2] | 0) {
      $468 = $467;
      $bits_left$addr$3$i = $bits_left$addr$131$i;
      break;
     }
     $conv13$i = +(1 << 13 - $398 | 0);
     $400 = HEAP32[$nbEBands2 >> 2] | 0;
     $402 = HEAP32[$nend_bits$i$i >> 2] | 0;
     $469 = $467;
     $470 = HEAP32[$end_window$i$i >> 2] | 0;
     $bits_left$addr$2$i = $bits_left$addr$131$i;
     $c$0$i = 0;
     while (1) {
      $add$i15 = (Math_imul($400, $c$0$i) | 0) + $i$029$i | 0;
      $arrayidx8$i16 = $vla952 + ($add$i15 << 2) | 0;
      $cmp9$i = !(+HEAPF32[$arrayidx8$i16 >> 2] < 0.0);
      $cond$i17 = $cmp9$i & 1;
      $add$i$i18 = $402 + 1 | 0;
      if ($add$i$i18 >>> 0 > 32) {
       $403 = ~$402;
       $406 = $402 + (($403 | 0) > -16 ? $403 : -16) + 8 | 0;
       $used$0$i$i = $402;
       $window$0$i$i = $470;
       while (1) {
        $408 = HEAP32[$end_offs$i$i$i >> 2] | 0;
        $409 = HEAP32[$storage$i >> 2] | 0;
        if (($408 + (HEAP32[$offs$i$i$i >> 2] | 0) | 0) >>> 0 < $409 >>> 0) {
         $410 = HEAP32[$enc$addr$0 >> 2] | 0;
         $inc$i$i$i = $408 + 1 | 0;
         HEAP32[$end_offs$i$i$i >> 2] = $inc$i$i$i;
         HEAP8[$410 + ($409 - $inc$i$i$i) >> 0] = $window$0$i$i;
         $retval$0$i$i$i = 0;
        } else $retval$0$i$i$i = -1;
        HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i$i$i;
        $window$0$i$i = $window$0$i$i >>> 8;
        if (($used$0$i$i | 0) <= 15) break; else $used$0$i$i = $used$0$i$i + -8 | 0;
       }
       $414 = $402 + -8 - ($406 & -8) | 0;
       $$pre635 = HEAP32[$nbEBands2 >> 2] | 0;
       $$pre644 = (Math_imul($$pre635, $c$0$i) | 0) + $i$029$i | 0;
       $415 = HEAP32[$enc$idx45$i >> 2] | 0;
       $471 = $$pre635;
       $add18$i22$pre$phiZZ2D = $$pre644;
       $add6$pre$phi$i$iZ2D = $414 + 1 | 0;
       $arrayidx24$i$pre$phiZZ2D = $vla952 + ($$pre644 << 2) | 0;
       $used$1$i$i = $414;
       $window$1$i$i = $window$0$i$i;
      } else {
       $415 = $469;
       $471 = $400;
       $add18$i22$pre$phiZZ2D = $add$i15;
       $add6$pre$phi$i$iZ2D = $add$i$i18;
       $arrayidx24$i$pre$phiZZ2D = $arrayidx8$i16;
       $used$1$i$i = $402;
       $window$1$i$i = $470;
      }
      $470 = $cond$i17 << $used$1$i$i | $window$1$i$i;
      HEAP32[$end_window$i$i >> 2] = $470;
      HEAP32[$nend_bits$i$i >> 2] = $add6$pre$phi$i$iZ2D;
      $add9$i$i = $415 + 1 | 0;
      HEAP32[$enc$idx45$i >> 2] = $add9$i$i;
      $mul15$i = (+($cmp9$i & 1) + -.5) * $conv13$i * .00006103515625;
      $arrayidx19$i23 = $add$ptr29 + ($add18$i22$pre$phiZZ2D << 2) | 0;
      HEAPF32[$arrayidx19$i23 >> 2] = +HEAPF32[$arrayidx19$i23 >> 2] + $mul15$i;
      HEAPF32[$arrayidx24$i$pre$phiZZ2D >> 2] = +HEAPF32[$arrayidx24$i$pre$phiZZ2D >> 2] - $mul15$i;
      $dec$i25 = $bits_left$addr$2$i + -1 | 0;
      $c$0$i = $c$0$i + 1 | 0;
      if (($c$0$i | 0) >= ($1 | 0)) {
       $468 = $add9$i$i;
       $bits_left$addr$3$i = $dec$i25;
       break;
      } else {
       $400 = $471;
       $402 = $add6$pre$phi$i$iZ2D;
       $469 = $add9$i$i;
       $bits_left$addr$2$i = $dec$i25;
      }
     }
    } while (0);
    $i$029$i = $i$029$i + 1 | 0;
    if (($i$029$i | 0) >= ($7 | 0) | ($bits_left$addr$3$i | 0) < ($1 | 0)) {
     $466 = $468;
     $bits_left$addr$1$lcssa$i = $bits_left$addr$3$i;
     break;
    } else {
     $467 = $468;
     $bits_left$addr$131$i = $bits_left$addr$3$i;
    }
   }
  }
  if (($bits_left$addr$1$lcssa$i | 0) >= ($1 | 0)) {
   $end_window$i1$i = $enc$addr$0 + 12 | 0;
   $nend_bits$i2$i = $enc$addr$0 + 16 | 0;
   $offs$i$i5$i = $enc$addr$0 + 24 | 0;
   $end_offs$i$i6$i = $enc$addr$0 + 8 | 0;
   $error$i9$i = $enc$addr$0 + 44 | 0;
   $472 = $466;
   $bits_left$addr$131$1$i = $bits_left$addr$1$lcssa$i;
   $i$029$1$i = $6;
   while (1) {
    $418 = HEAP32[$vla1389 + ($i$029$1$i << 2) >> 2] | 0;
    do if (($418 | 0) > 7) {
     $473 = $472;
     $bits_left$addr$3$1$i = $bits_left$addr$131$1$i;
    } else {
     if ((HEAP32[$vla1391 + ($i$029$1$i << 2) >> 2] | 0) != 1) {
      $473 = $472;
      $bits_left$addr$3$1$i = $bits_left$addr$131$1$i;
      break;
     }
     $conv13$1$i = +(1 << 13 - $418 | 0);
     $420 = HEAP32[$nbEBands2 >> 2] | 0;
     $422 = HEAP32[$nend_bits$i2$i >> 2] | 0;
     $474 = $472;
     $475 = HEAP32[$end_window$i1$i >> 2] | 0;
     $bits_left$addr$2$1$i = $bits_left$addr$131$1$i;
     $c$0$1$i = 0;
     while (1) {
      $add$1$i = (Math_imul($420, $c$0$1$i) | 0) + $i$029$1$i | 0;
      $arrayidx8$1$i = $vla952 + ($add$1$i << 2) | 0;
      $cmp9$1$i = !(+HEAPF32[$arrayidx8$1$i >> 2] < 0.0);
      $cond$1$i = $cmp9$1$i & 1;
      $add$i3$i = $422 + 1 | 0;
      if ($add$i3$i >>> 0 > 32) {
       $423 = ~$422;
       $426 = $422 + (($423 | 0) > -16 ? $423 : -16) + 8 | 0;
       $used$0$i13$i = $422;
       $window$0$i12$i = $475;
       while (1) {
        $428 = HEAP32[$end_offs$i$i6$i >> 2] | 0;
        $429 = HEAP32[$storage$i >> 2] | 0;
        if (($428 + (HEAP32[$offs$i$i5$i >> 2] | 0) | 0) >>> 0 < $429 >>> 0) {
         $430 = HEAP32[$enc$addr$0 >> 2] | 0;
         $inc$i$i18$i = $428 + 1 | 0;
         HEAP32[$end_offs$i$i6$i >> 2] = $inc$i$i18$i;
         HEAP8[$430 + ($429 - $inc$i$i18$i) >> 0] = $window$0$i12$i;
         $retval$0$i$i22$i = 0;
        } else $retval$0$i$i22$i = -1;
        HEAP32[$error$i9$i >> 2] = HEAP32[$error$i9$i >> 2] | $retval$0$i$i22$i;
        $window$0$i12$i = $window$0$i12$i >>> 8;
        if (($used$0$i13$i | 0) <= 15) break; else $used$0$i13$i = $used$0$i13$i + -8 | 0;
       }
       $434 = $422 + -8 - ($426 & -8) | 0;
       $$pre639 = HEAP32[$nbEBands2 >> 2] | 0;
       $$pre641 = (Math_imul($$pre639, $c$0$1$i) | 0) + $i$029$1$i | 0;
       $435 = HEAP32[$enc$idx45$i >> 2] | 0;
       $476 = $$pre639;
       $add18$1$i$pre$phiZZZ2D = $$pre641;
       $add6$pre$phi$i30$iZ2D = $434 + 1 | 0;
       $arrayidx24$1$i$pre$phiZZZ2D = $vla952 + ($$pre641 << 2) | 0;
       $used$1$i32$i = $434;
       $window$1$i31$i = $window$0$i12$i;
      } else {
       $435 = $474;
       $476 = $420;
       $add18$1$i$pre$phiZZZ2D = $add$1$i;
       $add6$pre$phi$i30$iZ2D = $add$i3$i;
       $arrayidx24$1$i$pre$phiZZZ2D = $arrayidx8$1$i;
       $used$1$i32$i = $422;
       $window$1$i31$i = $475;
      }
      $475 = $cond$1$i << $used$1$i32$i | $window$1$i31$i;
      HEAP32[$end_window$i1$i >> 2] = $475;
      HEAP32[$nend_bits$i2$i >> 2] = $add6$pre$phi$i30$iZ2D;
      $add9$i36$i = $435 + 1 | 0;
      HEAP32[$enc$idx45$i >> 2] = $add9$i36$i;
      $mul15$1$i = (+($cmp9$1$i & 1) + -.5) * $conv13$1$i * .00006103515625;
      $arrayidx19$1$i30 = $add$ptr29 + ($add18$1$i$pre$phiZZZ2D << 2) | 0;
      HEAPF32[$arrayidx19$1$i30 >> 2] = +HEAPF32[$arrayidx19$1$i30 >> 2] + $mul15$1$i;
      HEAPF32[$arrayidx24$1$i$pre$phiZZZ2D >> 2] = +HEAPF32[$arrayidx24$1$i$pre$phiZZZ2D >> 2] - $mul15$1$i;
      $dec$1$i = $bits_left$addr$2$1$i + -1 | 0;
      $c$0$1$i = $c$0$1$i + 1 | 0;
      if (($c$0$1$i | 0) >= ($1 | 0)) {
       $473 = $add9$i36$i;
       $bits_left$addr$3$1$i = $dec$1$i;
       break;
      } else {
       $420 = $476;
       $422 = $add6$pre$phi$i30$iZ2D;
       $474 = $add9$i36$i;
       $bits_left$addr$2$1$i = $dec$1$i;
      }
     }
    } while (0);
    $i$029$1$i = $i$029$1$i + 1 | 0;
    if (($i$029$1$i | 0) >= ($7 | 0) | ($bits_left$addr$3$1$i | 0) < ($1 | 0)) break; else {
     $472 = $473;
     $bits_left$addr$131$1$i = $bits_left$addr$3$1$i;
    }
   }
  }
  $mul1518 = $mul30 << 2;
  _memset($add$ptr35 | 0, 0, $mul1518 | 0) | 0;
  if (!$cmp9551345) {
   $mul1518665 = $mul1518;
   break;
  }
  $c$3$us = 0;
  do {
   $mul1524$us = Math_imul($c$3$us, $3) | 0;
   $i$131317$us = $6;
   do {
    $add1525$us = $i$131317$us + $mul1524$us | 0;
    $438 = +HEAPF32[$vla952 + ($add1525$us << 2) >> 2];
    $cmp1527$us = $438 > .5;
    $cmp1536$us = ($cmp1527$us ? .5 : $438) < -.5;
    HEAPF32[$add$ptr35 + ($add1525$us << 2) >> 2] = $cmp1527$us | $cmp1536$us ? ($cmp1536$us ? -.5 : .5) : $438;
    $i$131317$us = $i$131317$us + 1 | 0;
   } while (($i$131317$us | 0) != ($7 | 0));
   $c$3$us = $c$3$us + 1 | 0;
  } while (($c$3$us | 0) < ($1 | 0));
  $mul1518665 = $mul1518;
 } else {
  $mul1518664 = $mul30 << 2;
  _memset($add$ptr35 | 0, 0, $mul1518664 | 0) | 0;
  $mul1518665 = $mul1518664;
 } while (0);
 if ($tobool2881197 & ($mul4351225 | 0) > 0) {
  $i$141315 = 0;
  do {
   HEAPF32[$add$ptr29 + ($i$141315 << 2) >> 2] = -28.0;
   $i$141315 = $i$141315 + 1 | 0;
  } while (($i$141315 | 0) != ($mul4351225 | 0));
 }
 HEAP32[$st + 104 >> 2] = HEAP32[$pitch_index >> 2];
 HEAP32[$st + 108 >> 2] = HEAP32[$gain1 >> 2];
 HEAP32[$st + 112 >> 2] = $60;
 if ($or$cond101231) _memcpy($add$ptr29 + ($3 << 2) | 0, $add$ptr29 | 0, $3 << 2 | 0) | 0;
 do if ($tobool$i1098) {
  if (($mul30 | 0) <= 0) break;
  $i$151313 = 0;
  do {
   $arrayidx1620 = $add$ptr31 + ($i$151313 << 2) | 0;
   $441 = +HEAPF32[$arrayidx1620 >> 2];
   $442 = +HEAPF32[$add$ptr29 + ($i$151313 << 2) >> 2];
   HEAPF32[$arrayidx1620 >> 2] = $441 < $442 ? $441 : $442;
   $i$151313 = $i$151313 + 1 | 0;
  } while (($i$151313 | 0) != ($mul30 | 0));
 } else {
  _memcpy($add$ptr33 | 0, $add$ptr31 | 0, $mul1518665 | 0) | 0;
  _memcpy($add$ptr31 | 0, $add$ptr29 | 0, $mul1518665 | 0) | 0;
 } while (0);
 $cmp16531282 = ($7 | 0) < ($3 | 0);
 do if (($6 | 0) > 0) {
  $c$4$us = 0;
  do {
   $mul1640$us = Math_imul($c$4$us, $3) | 0;
   $i$161281$us = 0;
   do {
    $add1641$us = $i$161281$us + $mul1640$us | 0;
    HEAPF32[$add$ptr29 + ($add1641$us << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr33 + ($add1641$us << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr31 + ($add1641$us << 2) >> 2] = -28.0;
    $i$161281$us = $i$161281$us + 1 | 0;
   } while (($i$161281$us | 0) != ($6 | 0));
   if ($cmp16531282) {
    $i$171283$us = $7;
    do {
     $add1657$us = $i$171283$us + $mul1640$us | 0;
     HEAPF32[$add$ptr29 + ($add1657$us << 2) >> 2] = 0.0;
     HEAPF32[$add$ptr33 + ($add1657$us << 2) >> 2] = -28.0;
     HEAPF32[$add$ptr31 + ($add1657$us << 2) >> 2] = -28.0;
     $i$171283$us = $i$171283$us + 1 | 0;
    } while (($i$171283$us | 0) != ($3 | 0));
   }
   $c$4$us = $c$4$us + 1 | 0;
  } while (($c$4$us | 0) < ($0 | 0));
 } else {
  if (!$cmp16531282) break;
  $c$4$us1285 = 0;
  do {
   $mul1656$us1310 = Math_imul($c$4$us1285, $3) | 0;
   $i$171283$us1291 = $7;
   do {
    $add1657$us1292 = $i$171283$us1291 + $mul1656$us1310 | 0;
    HEAPF32[$add$ptr29 + ($add1657$us1292 << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr33 + ($add1657$us1292 << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr31 + ($add1657$us1292 << 2) >> 2] = -28.0;
    $i$171283$us1291 = $i$171283$us1291 + 1 | 0;
   } while (($i$171283$us1291 | 0) != ($3 | 0));
   $c$4$us1285 = $c$4$us1285 + 1 | 0;
  } while (($c$4$us1285 | 0) < ($0 | 0));
 } while (0);
 $consec_transient1677 = $st + 116 | 0;
 if (!($isTransient$21246 | $transient_got_disabled$012041224)) $storemerge1031 = 0; else $storemerge1031 = (HEAP32[$consec_transient1677 >> 2] | 0) + 1 | 0;
 HEAP32[$consec_transient1677 >> 2] = $storemerge1031;
 HEAP32[$rng >> 2] = HEAP32[$enc$idx46$i >> 2];
 _ec_enc_done($enc$addr$0);
 $nbCompressedBytes$addr$6$ = (HEAP32[$enc$addr$0 + 44 >> 2] | 0) == 0 ? $nbCompressedBytes$addr$6 : -3;
 _llvm_stackrestore($29 | 0);
 $retval$1 = $nbCompressedBytes$addr$6$;
 STACKTOP = sp;
 return $retval$1 | 0;
}
function _celt_decode_with_ec($st, $data, $len, $pcm, $frame_size, $dec) {
 $st = $st | 0;
 $data = $data | 0;
 $len = $len | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $dec = $dec | 0;
 var $$off29$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i177 = 0, $$pre$i$i216 = 0, $$pre$i$i355 = 0, $$pre$i$i355749 = 0, $$pre$i$i355751 = 0, $$pre$i$i394 = 0, $$pre$i$i43 = 0, $$pre$i$i437 = 0, $$pre$i$i501 = 0, $$pre$i$i501763 = 0, $$pre$i$i501764 = 0, $$pre$i$i501766 = 0, $$pre$i647 = 0, $$pre$phiZ2D = 0, $$pre14$i$i = 0, $$pre14$i$i$i = 0, $$pre14$i$i142 = 0, $$pre14$i$i180 = 0, $$pre14$i$i219 = 0, $$pre14$i$i46 = 0, $$pre21$i = 0, $$pre21$i$i = 0, $$pre21$i648 = 0, $$pre21$i95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $108 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $131 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $142 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $193 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $210 = 0, $212 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $222 = 0, $224 = 0, $226 = 0, $228 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $241 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $261 = 0, $262 = 0, $263 = 0, $266 = 0, $267 = 0, $268 = 0, $272 = 0, $273 = 0, $274 = 0, $280 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0.0, $290 = 0, $295 = 0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $307 = 0.0, $31 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $34 = 0, $341 = 0, $343 = 0, $344 = 0, $346 = 0, $347 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, $LM$0541$lcssa = 0, $_dec = 0, $add$i$i$i = 0, $add$i$i$i$i = 0, $add$i$i$i251 = 0, $add$i$i144 = 0, $add$i$i182 = 0, $add$i$i221 = 0, $add$i$i27$i = 0, $add$i$i321 = 0, $add$i$i360 = 0, $add$i$i399 = 0, $add$i$i442 = 0, $add$i$i48 = 0, $add$i$i5$i = 0, $add$i$i506 = 0, $add$i$i565 = 0, $add$i$us$i = 0, $add$i38$i = 0, $add$neg$i = 0, $add$ptr$i = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr15 = 0, $add$ptr339$us = 0, $add$ptr34 = 0, $add$ptr89$i = 0, $add$ptr9 = 0, $add107 = 0, $add128 = 0, $add140$pre$phiZ2D = 0, $add18$i$i = 0, $add203 = 0, $add22$i = 0, $add3$i$i = 0, $add31$i = 0, $add34$i = 0, $add34$i$i = 0, $add420 = 0.0, $add462$us$1 = 0, $add478$us$1 = 0, $add478$us490$1 = 0, $add6$i = 0, $add6$i119 = 0, $add6$i672 = 0, $add94 = 0, $and$i115 = 0, $and7$i$1$i = 0, $and7$i$i = 0, $and7$i$i$i = 0, $and7$i$i62 = 0, $arch$i = 0, $arrayidx2$i681 = 0, $arrayidx34$i = 0, $arrayidx35$i = 0, $arrayidx419 = 0, $arrayidx441 = 0, $arrayidx54$i = 0, $arrayidx67 = 0, $arrayidx8$i = 0, $arrayidx9$i = 0, $arrayidx9$i635 = 0, $available$0$i = 0, $available$0$i$i = 0, $available$0$i97 = 0, $available$1$i = 0, $available$1$i$i = 0, $available$1$i113 = 0, $available$1$i666 = 0, $balance = 0, $beta$0$i = 0.0, $boost$0$lcssa = 0, $boost$0522 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i604 = 0, $c$0$i689 = 0, $c$1 = 0, $c$2 = 0, $c$2$us = 0, $call249 = 0, $cmp$i = 0, $cmp$i11$i = 0, $cmp$i164 = 0, $cmp$i203 = 0, $cmp$i30 = 0, $cmp$i303 = 0, $cmp$i342 = 0, $cmp$i381 = 0, $cmp$i488 = 0, $cmp$i7 = 0, $cmp10280$i = 0, $cmp19$i$i = 0, $cmp474480 = 0, $cmp6$i$i$i = 0, $cmp60 = 0, $cmp72$i = 0, $coef$0$i = 0.0, $cond$i = 0, $cond$i$i$1$i = 0, $cond$i$i$2$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i$i$i281 = 0, $cond$i$i$i152 = 0, $cond$i$i$i19 = 0, $cond$i$i$i190 = 0, $cond$i$i$i229 = 0, $cond$i$i$i259 = 0, $cond$i$i$i329 = 0, $cond$i$i$i35$i = 0, $cond$i$i$i368 = 0, $cond$i$i$i407 = 0, $cond$i$i$i450 = 0, $cond$i$i$i514 = 0, $cond$i$i$i56 = 0, $cond$i$i$i573 = 0, $cond$i$i$i618 = 0, $cond$i$i106 = 0, $cond$i$i294 = 0, $cond$i$i659 = 0, $cond$i$i659$1 = 0, $cond$i$i659$2 = 0, $cond$i$i659$3 = 0, $cond$i$i78 = 0, $cond$i11706 = 0, $cond$i169 = 0, $cond$i208 = 0, $cond$i308 = 0, $cond$i347 = 0, $cond$i35 = 0, $cond$i386 = 0, $cond$i493 = 0, $cond147709 = 0, $cond177 = 0, $cond229 = 0, $cond324 = 0, $cond324$us = 0, $cond9$i = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i165 = 0, $conv$i204 = 0, $conv$i304 = 0, $conv$i343 = 0, $conv$i382 = 0, $conv31$i = 0.0, $conv4$i = 0.0, $conv98$us$i = 0, $curr$048$i = 0, $curr$1$i = 0, $curr$1$peel$i = 0, $dec$addr$0 = 0, $dec$addr$0$idx430$val759 = 0, $dec$addr$0$idx431$val761 = 0, $dec$addr$0$idx432$val = 0, $dec$addr$0$idx433$val = 0, $dec$addr$0$idx434$val = 0, $dec$addr$0$idx434$val727 = 0, $dec$addr$0$idx435$val = 0, $dec$addr$0$idx435$val729 = 0, $dec$addr$0$idx438$val = 0, $dec$addr$0$idx440 = 0, $dec$addr$0$idx440$val = 0, $dec$addr$0$idx441 = 0, $dec$addr$0$idx441$val = 0, $dec$idx$val$i = 0, $dec$idx$val$i246734 = 0, $dec$idx$val$i246735 = 0, $dec$idx$val$i246736 = 0, $dec$idx$val$i246737 = 0, $dec$idx$val$i246738 = 0, $dec$idx$val$i246739 = 0, $dec$idx$val$i246740 = 0, $dec$idx$val$peel$i = 0, $dec$idx40$val$i = 0, $dec$idx40$val$peel$i = 0, $dec$idx41$val$i = 0, $dec$idx42$val$i = 0, $dec$idx53$val$i = 0, $dec$idx53$val$i775 = 0, $dec$idx53$val$i776 = 0, $dec$idx53$val$i777 = 0, $dec$idx53$val$i778 = 0, $dec$idx53$val$i779 = 0, $dec$idx53$val$i780 = 0, $dec$idx53$val$i781 = 0, $decode_mem = 0, $div$i = 0.0, $div$i$i34$i = 0, $div$i1$i = 0.0, $downsample$i = 0, $dual_stereo = 0, $dynalloc_logp$0534 = 0, $dynalloc_loop_logp$0521 = 0, $end_offs$i$i = 0, $end_offs$i$i$i = 0, $end_offs$i$i643 = 0, $end_offs$i$i90 = 0, $end_window$i$i = 0, $end_window$i640 = 0, $end_window$i69 = 0, $ext$i$i$i = 0, $fl$0$lcssa$i$i = 0, $fl$070$i$i = 0, $fl$1$i$i = 0, $fl$25662$i$i = 0, $fs$addr$0$in67$i$i = 0, $fs$addr$064$i$i = 0, $fs$addr$072$i$i = 0, $fs$addr$072$in$i$i = 0, $fs$addr$15860$i$i = 0, $i$013$i$i = 0, $i$014$i = 0, $i$015$i = 0, $i$049$i = 0, $i$0539 = 0, $i$055$i = 0, $i$07$i$i$i = 0, $i$092$i = 0, $i$146$i = 0, $i$1535 = 0, $i$2515 = 0, $i$3513 = 0, $i$4511 = 0, $i$5479$us = 0, $i$5479$us$1 = 0, $i$6481$us = 0, $i$6481$us$1 = 0, $i$6481$us489 = 0, $i$6481$us489$1 = 0, $idx$neg = 0, $inc$i$i = 0, $inc$i$i$2$pre$phi$iZZZZ2D = 0, $inc$i$i$i$i = 0, $inc$i$i$i$i$i = 0, $inc$i$i$i$i277 = 0, $inc$i$i$i148 = 0, $inc$i$i$i15 = 0, $inc$i$i$i186 = 0, $inc$i$i$i225 = 0, $inc$i$i$i31$i = 0, $inc$i$i$i325 = 0, $inc$i$i$i364 = 0, $inc$i$i$i403 = 0, $inc$i$i$i446 = 0, $inc$i$i$i510 = 0, $inc$i$i$i52 = 0, $inc$i$i$i569 = 0, $inc$i$i$i613 = 0, $inc$i$i101 = 0, $inc$i$i654 = 0, $inc$i$i654$1 = 0, $inc$i$i654$2 = 0, $inc$i$i654$3 = 0, $inc$peel$i = 0, $inc9$i$i = 0, $intensity = 0, $isTransient$0 = 0, $j$081$us$i = 0, $k$084$i = 0, $k$084$us$i = 0, $loss_count = 0, $max_background_increase$0 = 0.0, $mul = 0, $mul$i = 0, $mul$i$i = 0, $mul$i$i253 = 0, $mul$i1$i = 0, $mul$i128 = 0, $mul$i3$i$i = 0, $mul$i425 = 0, $mul$i548 = 0, $mul12$i = 0, $mul18$i = 0.0, $mul257 = 0, $mul268 = 0, $mul4$i$i$i = 0, $mul7$i = 0, $mul71$i = 0.0, $mul80 = 0, $mul83$i = 0.0, $mul95$i = 0, $nbits_total$i = 0, $nend_bits$i$i = 0, $nend_bits$i641 = 0, $nend_bits$i70 = 0, $offs$i = 0, $offs$i$i$i = 0, $offs$i$i$i$i = 0, $offs$i$i$i$i$i = 0, $offs$i$i$i136 = 0, $offs$i$i$i174 = 0, $offs$i$i$i213 = 0, $offs$i$i$i313 = 0, $offs$i$i$i352 = 0, $offs$i$i$i391 = 0, $offs$i$i$i40 = 0, $offs$i$i$i434 = 0, $offs$i$i$i498 = 0, $offs$i$i$i557 = 0, $out_syn = 0, $postfilter_gain$0 = 0.0, $postfilter_gain$1 = 0.0, $postfilter_gain331 = 0, $postfilter_gain_old = 0, $postfilter_period$i = 0, $postfilter_period_old$i = 0, $postfilter_pitch$0 = 0, $postfilter_pitch$1 = 0, $postfilter_tapset$0 = 0, $postfilter_tapset$1 = 0, $postfilter_tapset$2 = 0, $postfilter_tapset$i = 0, $postfilter_tapset_old$i = 0, $prev$i = 0, $prev1$0$i = 0.0, $prev2$0$i = 0.0, $qi$0$i = 0, $rem$i = 0, $rem$i$i = 0, $rem$i$i$i = 0, $rem$i$i$i$i = 0, $rem$i$i135 = 0, $rem$i$i173 = 0, $rem$i$i212 = 0, $rem$i$i312 = 0, $rem$i$i351 = 0, $rem$i$i39 = 0, $rem$i$i390 = 0, $rem$i$i433 = 0, $rem$i$i497 = 0, $rem$i$i556 = 0, $renormalize$0$lcssa$i = 0, $renormalize$088$i = 0, $renormalize$088$us$i = 0, $renormalize$1$i = 0, $renormalize$1$us$i = 0, $ret$0$i = 0, $ret$0$i$i = 0, $ret$0$i421 = 0, $ret$0$i544 = 0, $retval$0 = 0, $retval$1 = 0, $rng = 0, $rng$i = 0, $s$0$i = 0, $s$0$i$i = 0, $s$0$i420 = 0, $s$0$i543 = 0, $seed$addr$093$i = 0, $seed$addr$1$i = 0, $seed$addr$2$lcssa$i = 0, $seed$addr$287$us$i = 0, $seed$addr$382$us$i = 0, $seed$addr$4$us$i = 0, $shl$i$i$i = 0, $shl$i$i$i$i = 0, $shl$i$i$i275 = 0, $shl$i$i145 = 0, $shl$i$i183 = 0, $shl$i$i222 = 0, $shl$i$i28$i = 0, $shl$i$i361 = 0, $shl$i$i400 = 0, $shl$i$i443 = 0, $shl$i$i49 = 0, $shl$i$i507 = 0, $shl$i$i566 = 0, $shl$i250 = 0, $shl$i687 = 0, $shl106 = 0, $shl11$i = 0, $shl157 = 0, $shl170 = 0, $shl171 = 0, $shl171$cond177 = 0, $shl21 = 0, $shl21$ = 0, $shr$i = 0, $shr$i$i = 0, $shr$i$i$i = 0, $shr$i10$i = 0, $shr$i124 = 0, $shr$i163 = 0, $shr$i202 = 0, $shr$i29 = 0, $shr$i302 = 0, $shr$i341 = 0, $shr$i380 = 0, $shr$i419 = 0, $shr$i482 = 0, $shr$i487 = 0, $shr$i529 = 0, $shr$i542 = 0, $shr$i588 = 0, $shr$i83 = 0, $shr3$i = 0, $shr3$i530 = 0, $shr3$i589 = 0, $silence$0460 = 0, $silence$0461 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i693 = 0.0, $spec$select423 = 0, $spec$select423$us = 0, $spec$select45$i$i = 0, $spec$select473 = 0, $spec$select90$i = 0, $spread_decision$0 = 0, $storage$i240 = 0, $sub$i = 0, $sub$i131 = 0, $sub$i14$i = 0, $sub$i167 = 0, $sub$i206 = 0, $sub$i247 = 0, $sub$i3$i = 0, $sub$i306 = 0, $sub$i33 = 0, $sub$i345 = 0, $sub$i384 = 0, $sub$i428 = 0, $sub$i480 = 0, $sub$i491 = 0, $sub$i527 = 0, $sub$i551 = 0, $sub$i586 = 0, $sub$i683 = 0, $sub$i9 = 0, $sub1$i = 0, $sub1$i$i = 0, $sub1$i$i67 = 0, $sub1$i5$i$i = 0, $sub110 = 0, $sub110$i = 0.0, $sub1248$i$i = 0, $sub2$i$i = 0, $sub2$i$neg$i = 0, $sub2$i43$peel$i$pre$phiZZZZ2D = 0, $sub204 = 0, $sub209 = 0, $sub234 = 0, $sub3$i = 0, $sub3$i$i = 0, $sub3$i132 = 0, $sub3$i429 = 0, $sub3$i552 = 0, $sub3$i8 = 0, $sub3$i84 = 0, $sub6$i = 0, $sub6$i41$i = 0, $sub60$i = 0.0, $sub7$i539 = 0, $sub8$i$i$i = 0, $tell$0 = 0, $tell$052$i = 0, $tell$1 = 0, $tell$1$i = 0, $tell$1$peel$i = 0, $tell$3533 = 0, $tell$4520 = 0, $tell$5 = 0, $tell$5568 = 0, $tf_changed$0$lcssa$i = 0, $tf_changed$050$i = 0, $tf_changed$1$i = 0, $tf_select$0$i = 0, $tmpcast$i711 = 0, $tmpcast$i712 = 0, $tobool136 = 0, $tobool462 = 0, $total_bits$0532 = 0, $total_bits$1$lcssa = 0, $total_bits$1$lcssa567 = 0, $total_bits$1519 = 0, $val$0$lcssa$i$i = 0, $val$071$i$i = 0, $val$1$i$i = 0, $val$25761$i$i = 0, $val$i = 0, $val$i$i$i = 0, $val$i162 = 0, $val$i201 = 0, $val$i28 = 0, $val$i301 = 0, $val$i340 = 0, $val$i379 = 0, $val$i418 = 0, $val$i486 = 0, $val$i541 = 0, $val$i6 = 0, $vla155796 = 0, $vla156797 = 0, $vla221798 = 0, $vla247799 = 0, $vla248800 = 0, $vla269 = 0, $vla271 = 0, $vla271$alloca_mul = 0, $vla795 = 0, $window$0$i = 0, $window$0$i$i = 0, $window$0$i98 = 0, $window$1$i = 0, $window$1$i$i = 0, $window$1$i114 = 0, $window$1$i667 = 0, $xor$i = 0, $xptr$014$i$i = 0, $xy$08$i$i$i = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $224$looptemp = 0, $i$015$i$looptemp = 0, $231$looptemp = 0, $i$1535$looptemp = 0, $295$looptemp = 0, $i$092$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $prev$i = sp;
 $_dec = sp + 40 | 0;
 $decode_mem = sp + 32 | 0;
 $out_syn = sp + 24 | 0;
 $intensity = sp + 16 | 0;
 $dual_stereo = sp + 12 | 0;
 $balance = sp + 8 | 0;
 $0 = HEAP32[$st + 8 >> 2] | 0;
 HEAP32[$intensity >> 2] = 0;
 HEAP32[$dual_stereo >> 2] = 0;
 $1 = HEAP32[$st + 12 >> 2] | 0;
 if ((HEAP32[$st >> 2] | 0) != 43640) _celt_fatal(48110, 48182, 118);
 if ((HEAP32[$st + 4 >> 2] | 0) != 120) _celt_fatal(48202, 48182, 119);
 if (($0 + -1 | 0) >>> 0 >= 2) _celt_fatal(55208, 48182, 121);
 $$off29$i = $1 + -1 | 0;
 if ($$off29$i >>> 0 >= 2) _celt_fatal(56130, 48182, 122);
 $downsample$i = $st + 16 | 0;
 $4 = HEAP32[$downsample$i >> 2] | 0;
 if (($4 | 0) <= 0) _celt_fatal(48239, 48182, 123);
 $5 = HEAP32[$st + 20 >> 2] | 0;
 switch ($5 | 0) {
 case 17:
 case 0:
  break;
 default:
  _celt_fatal(48276, 48182, 124);
 }
 $6 = HEAP32[$st + 24 >> 2] | 0;
 if (($5 | 0) >= ($6 | 0)) _celt_fatal(48328, 48182, 125);
 if (($6 | 0) >= 22) _celt_fatal(48366, 48182, 126);
 $arch$i = $st + 36 | 0;
 $7 = HEAP32[$arch$i >> 2] | 0;
 if (($7 | 0) <= -1) _celt_fatal(56054, 48182, 128);
 if ($7 | 0) _celt_fatal(56086, 48182, 129);
 $8 = HEAP32[$st + 48 >> 2] | 0;
 if (($8 | 0) >= 721) _celt_fatal(48398, 48182, 131);
 if (!(($8 | 0) > 99 | ($8 | 0) == 0)) _celt_fatal(48458, 48182, 132);
 $postfilter_period$i = $st + 60 | 0;
 $9 = HEAP32[$postfilter_period$i >> 2] | 0;
 if (($9 | 0) >= 1024) _celt_fatal(48547, 48182, 133);
 if (!(($9 | 0) > 14 | ($9 | 0) == 0)) _celt_fatal(48600, 48182, 134);
 $postfilter_period_old$i = $st + 64 | 0;
 $10 = HEAP32[$postfilter_period_old$i >> 2] | 0;
 if (($10 | 0) >= 1024) _celt_fatal(48694, 48182, 135);
 if (!(($10 | 0) > 14 | ($10 | 0) == 0)) _celt_fatal(48751, 48182, 136);
 $postfilter_tapset$i = $st + 76 | 0;
 $11 = HEAP32[$postfilter_tapset$i >> 2] | 0;
 if (($11 | 0) >= 3) _celt_fatal(48853, 48182, 137);
 if (($11 | 0) <= -1) _celt_fatal(48898, 48182, 138);
 $postfilter_tapset_old$i = $st + 80 | 0;
 $12 = HEAP32[$postfilter_tapset_old$i >> 2] | 0;
 if (($12 | 0) >= 3) _celt_fatal(48943, 48182, 139);
 if (($12 | 0) <= -1) _celt_fatal(48992, 48182, 140);
 $mul = Math_imul($4, $frame_size) | 0;
 $add$ptr9 = $st + 92 + ($0 * 2168 << 2) + ($0 * 24 << 2) | 0;
 $add$ptr11 = $add$ptr9 + 168 | 0;
 $add$ptr13 = $add$ptr11 + 168 | 0;
 $add$ptr15 = $add$ptr13 + 168 | 0;
 switch ($mul | 0) {
 case 120:
  {
   $LM$0541$lcssa = 0;
   break;
  }
 case 240:
  {
   $LM$0541$lcssa = 1;
   break;
  }
 case 480:
  {
   $LM$0541$lcssa = 2;
   break;
  }
 case 960:
  {
   $LM$0541$lcssa = 3;
   break;
  }
 default:
  {
   $retval$1 = -1;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
 }
 $shl21 = 1 << $LM$0541$lcssa;
 if ($len >>> 0 > 1275 | ($pcm | 0) == 0) {
  $retval$1 = -1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $idx$neg = 0 - $mul | 0;
 $c$0 = 0;
 do {
  $add$ptr34 = $st + 92 + ($c$0 * 2168 << 2) | 0;
  HEAP32[$decode_mem + ($c$0 << 2) >> 2] = $add$ptr34;
  HEAP32[$out_syn + ($c$0 << 2) >> 2] = $add$ptr34 + 8192 + ($idx$neg << 2);
  $c$0 = $c$0 + 1 | 0;
 } while (($c$0 | 0) < ($0 | 0));
 $spec$select = ($6 | 0) < 21 ? $6 : 21;
 if (($data | 0) == 0 | ($len | 0) < 2) {
  _celt_decode_lost($st, $mul, $LM$0541$lcssa);
  _deemphasis($out_syn, $pcm, $mul, $0, HEAP32[$downsample$i >> 2] | 0, 43656, $st + 84 | 0);
  $retval$1 = ($mul | 0) / (HEAP32[$downsample$i >> 2] | 0) | 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $loss_count = $st + 52 | 0;
 HEAP32[$st + 56 >> 2] = (HEAP32[$loss_count >> 2] | 0) != 0 & 1;
 if (!$dec) {
  HEAP32[$_dec >> 2] = $data;
  HEAP32[$_dec + 4 >> 2] = $len;
  HEAP32[$_dec + 8 >> 2] = 0;
  HEAP32[$_dec + 12 >> 2] = 0;
  HEAP32[$_dec + 16 >> 2] = 0;
  $nbits_total$i = $_dec + 20 | 0;
  $offs$i = $_dec + 24 | 0;
  $rng$i = $_dec + 28 | 0;
  HEAP32[$offs$i >> 2] = 1;
  $conv$i$i = HEAPU8[$data >> 0] | 0;
  $rem$i = $_dec + 40 | 0;
  HEAP32[$rem$i >> 2] = $conv$i$i;
  $sub3$i = $conv$i$i >>> 1 ^ 127;
  $val$i = $_dec + 32 | 0;
  HEAP32[$val$i >> 2] = $sub3$i;
  HEAP32[$_dec + 44 >> 2] = 0;
  HEAP32[$nbits_total$i >> 2] = 17;
  HEAP32[$rng$i >> 2] = 32768;
  HEAP32[$offs$i >> 2] = 2;
  $conv$i$i$i = HEAPU8[$data + 1 >> 0] | 0;
  HEAP32[$rem$i >> 2] = $conv$i$i$i;
  $and7$i$i = ($sub3$i << 8 | ($conv$i$i$i | $conv$i$i << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i >> 2] = $and7$i$i;
  HEAP32[$nbits_total$i >> 2] = 25;
  HEAP32[$rng$i >> 2] = 8388608;
  if (2 < $len >>> 0) {
   HEAP32[$offs$i >> 2] = 3;
   $25 = 3;
   $cond$i$i$1$i = HEAPU8[$data + 2 >> 0] | 0;
   $inc$i$i$2$pre$phi$iZZZZ2D = 4;
  } else {
   $25 = 2;
   $cond$i$i$1$i = 0;
   $inc$i$i$2$pre$phi$iZZZZ2D = 3;
  }
  HEAP32[$rem$i >> 2] = $cond$i$i$1$i;
  $and7$i$1$i = ($and7$i$i << 8 & 2147483392 | ($cond$i$i$1$i | $conv$i$i$i << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i >> 2] = $and7$i$1$i;
  HEAP32[$nbits_total$i >> 2] = 33;
  HEAP32[$rng$i >> 2] = -2147483648;
  if ($25 >>> 0 < $len >>> 0) {
   HEAP32[$offs$i >> 2] = $inc$i$i$2$pre$phi$iZZZZ2D;
   $cond$i$i$2$i = HEAPU8[$data + $25 >> 0] | 0;
  } else $cond$i$i$2$i = 0;
  HEAP32[$rem$i >> 2] = $cond$i$i$2$i;
  HEAP32[$val$i >> 2] = ($and7$i$1$i << 8 & 2147483392 | ($cond$i$i$2$i | $cond$i$i$1$i << 8) >>> 1 & 255) ^ 255;
  $dec$addr$0 = $_dec;
 } else $dec$addr$0 = $dec;
 $cmp60 = ($1 | 0) == 1;
 if ($cmp60) {
  $i$0539 = 0;
  do {
   $arrayidx67 = $add$ptr9 + ($i$0539 << 2) | 0;
   $29 = +HEAPF32[$arrayidx67 >> 2];
   $30 = +HEAPF32[$add$ptr9 + ($i$0539 + 21 << 2) >> 2];
   HEAPF32[$arrayidx67 >> 2] = $29 > $30 ? $29 : $30;
   $i$0539 = $i$0539 + 1 | 0;
  } while (($i$0539 | 0) != 21);
 }
 $mul80 = $len << 3;
 $dec$addr$0$idx440 = $dec$addr$0 + 20 | 0;
 $dec$addr$0$idx440$val = HEAP32[$dec$addr$0$idx440 >> 2] | 0;
 $dec$addr$0$idx441 = $dec$addr$0 + 28 | 0;
 $dec$addr$0$idx441$val = HEAP32[$dec$addr$0$idx441 >> 2] | 0;
 $31 = Math_clz32($dec$addr$0$idx441$val | 0) | 0;
 $sub1$i = $dec$addr$0$idx440$val + -32 + $31 | 0;
 do if (($sub1$i | 0) < ($mul80 | 0)) {
  if (($sub1$i | 0) != 1) {
   $$pre$i$i43 = $dec$addr$0$idx440$val;
   $43 = $dec$addr$0$idx441$val;
   $silence$0460 = 0;
   $tell$0 = $sub1$i;
   $tobool462 = 0;
   break;
  }
  $val$i6 = $dec$addr$0 + 32 | 0;
  $32 = HEAP32[$val$i6 >> 2] | 0;
  $shr$i = $dec$addr$0$idx441$val >>> 15;
  $cmp$i7 = $32 >>> 0 < $shr$i >>> 0;
  $conv$i = $cmp$i7 & 1;
  if ($cmp$i7) {
   HEAP32[$dec$addr$0$idx441 >> 2] = $shr$i;
   $350 = $32;
   $cond$i11706 = $shr$i;
  } else {
   $sub3$i8 = $dec$addr$0$idx441$val - $shr$i | 0;
   $sub$i9 = $32 - $shr$i | 0;
   HEAP32[$val$i6 >> 2] = $sub$i9;
   HEAP32[$dec$addr$0$idx441 >> 2] = $sub3$i8;
   if ($sub3$i8 >>> 0 < 8388609) {
    $350 = $sub$i9;
    $cond$i11706 = $sub3$i8;
   } else {
    $$pre$i$i43 = $dec$addr$0$idx440$val;
    $43 = $sub3$i8;
    $silence$0460 = 0;
    $tell$0 = 1;
    $tobool462 = 0;
    break;
   }
  }
  $rem$i$i = $dec$addr$0 + 40 | 0;
  $offs$i$i$i = $dec$addr$0 + 24 | 0;
  $$pre14$i$i = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
  $33 = $dec$addr$0$idx440$val;
  $34 = $cond$i11706;
  $35 = HEAP32[$offs$i$i$i >> 2] | 0;
  $38 = HEAP32[$rem$i$i >> 2] | 0;
  $41 = $350;
  while (1) {
   $33 = $33 + 8 | 0;
   HEAP32[$dec$addr$0$idx440 >> 2] = $33;
   $34 = $34 << 8;
   HEAP32[$dec$addr$0$idx441 >> 2] = $34;
   if ($35 >>> 0 < $$pre14$i$i >>> 0) {
    $36 = HEAP32[$dec$addr$0 >> 2] | 0;
    $inc$i$i$i15 = $35 + 1 | 0;
    HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i15;
    $351 = $inc$i$i$i15;
    $cond$i$i$i19 = HEAPU8[$36 + $35 >> 0] | 0;
   } else {
    $351 = $35;
    $cond$i$i$i19 = 0;
   }
   HEAP32[$rem$i$i >> 2] = $cond$i$i$i19;
   $41 = ($41 << 8 & 2147483392 | ($cond$i$i$i19 | $38 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i6 >> 2] = $41;
   if ($34 >>> 0 >= 8388609) break; else {
    $35 = $351;
    $38 = $cond$i$i$i19;
   }
  }
  if (!$cmp$i7) {
   $$pre$i$i43 = $33;
   $43 = $34;
   $silence$0460 = 0;
   $tell$0 = 1;
   $tobool462 = 0;
   break;
  }
  $$pre$phiZ2D = Math_clz32($34 | 0) | 0;
  $349 = $34;
  $dec$addr$0$idx438$val = $33;
  $silence$0461 = $conv$i;
  label = 70;
 } else {
  $$pre$phiZ2D = $31;
  $349 = $dec$addr$0$idx441$val;
  $dec$addr$0$idx438$val = $dec$addr$0$idx440$val;
  $silence$0461 = 1;
  label = 70;
 } while (0);
 if ((label | 0) == 70) {
  $add94 = $mul80 + 32 - $dec$addr$0$idx438$val - $$pre$phiZ2D + $dec$addr$0$idx438$val | 0;
  HEAP32[$dec$addr$0$idx440 >> 2] = $add94;
  $$pre$i$i43 = $add94;
  $43 = $349;
  $silence$0460 = $silence$0461;
  $tell$0 = $mul80;
  $tobool462 = 1;
 }
 if (($5 | 0) != 0 | ($tell$0 + 16 | 0) > ($mul80 | 0)) {
  $$pre$i$i177 = $$pre$i$i43;
  $99 = $43;
  $postfilter_gain$1 = 0.0;
  $postfilter_pitch$1 = 0;
  $postfilter_tapset$2 = 0;
  $tell$1 = $tell$0;
 } else {
  $val$i28 = $dec$addr$0 + 32 | 0;
  $42 = HEAP32[$val$i28 >> 2] | 0;
  $shr$i29 = $43 >>> 1;
  $cmp$i30 = $42 >>> 0 < $shr$i29 >>> 0;
  if ($cmp$i30) {
   $352 = $42;
   $cond$i35 = $shr$i29;
  } else {
   $sub$i33 = $42 - $shr$i29 | 0;
   HEAP32[$val$i28 >> 2] = $sub$i33;
   $352 = $sub$i33;
   $cond$i35 = $43 - $shr$i29 | 0;
  }
  HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i35;
  if ($cond$i35 >>> 0 < 8388609) {
   $rem$i$i39 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i40 = $dec$addr$0 + 24 | 0;
   $$pre14$i$i46 = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
   $44 = $$pre$i$i43;
   $45 = $cond$i35;
   $46 = HEAP32[$offs$i$i$i40 >> 2] | 0;
   $49 = HEAP32[$rem$i$i39 >> 2] | 0;
   $52 = $352;
   while (1) {
    $add$i$i48 = $44 + 8 | 0;
    HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i48;
    $shl$i$i49 = $45 << 8;
    HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i49;
    if ($46 >>> 0 < $$pre14$i$i46 >>> 0) {
     $47 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i$i52 = $46 + 1 | 0;
     HEAP32[$offs$i$i$i40 >> 2] = $inc$i$i$i52;
     $353 = $inc$i$i$i52;
     $cond$i$i$i56 = HEAPU8[$47 + $46 >> 0] | 0;
    } else {
     $353 = $46;
     $cond$i$i$i56 = 0;
    }
    HEAP32[$rem$i$i39 >> 2] = $cond$i$i$i56;
    $and7$i$i62 = ($52 << 8 & 2147483392 | ($cond$i$i$i56 | $49 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i28 >> 2] = $and7$i$i62;
    if ($shl$i$i49 >>> 0 < 8388609) {
     $44 = $add$i$i48;
     $45 = $shl$i$i49;
     $46 = $353;
     $49 = $cond$i$i$i56;
     $52 = $and7$i$i62;
    } else {
     $$pre$i$i$i = $add$i$i48;
     $53 = $shl$i$i49;
     $54 = $and7$i$i62;
     break;
    }
   }
  } else {
   $$pre$i$i$i = $$pre$i$i43;
   $53 = $cond$i35;
   $54 = $352;
  }
  if ($cmp$i30) {
   $div$i$i34$i = ($53 >>> 0) / 6 | 0;
   HEAP32[$dec$addr$0 + 36 >> 2] = $div$i$i34$i;
   $add$i38$i = (($54 >>> 0) / ($div$i$i34$i >>> 0) | 0) + 1 | 0;
   $sub6$i41$i = 6 - ($add$i38$i >>> 0 < 6 ? $add$i38$i : 6) | 0;
   $mul$i$i = Math_imul(5 - $sub6$i41$i | 0, $div$i$i34$i) | 0;
   $sub1$i$i67 = $54 - $mul$i$i | 0;
   HEAP32[$val$i28 >> 2] = $sub1$i$i67;
   $spec$select90$i = ($sub6$i41$i | 0) == 0 ? $53 - $mul$i$i | 0 : $div$i$i34$i;
   HEAP32[$dec$addr$0$idx441 >> 2] = $spec$select90$i;
   if ($spec$select90$i >>> 0 < 8388609) {
    $rem$i$i$i = $dec$addr$0 + 40 | 0;
    $offs$i$i$i$i = $dec$addr$0 + 24 | 0;
    $$pre14$i$i$i = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
    $56 = $$pre$i$i$i;
    $57 = $spec$select90$i;
    $58 = HEAP32[$offs$i$i$i$i >> 2] | 0;
    $61 = HEAP32[$rem$i$i$i >> 2] | 0;
    $64 = $sub1$i$i67;
    while (1) {
     $add$i$i$i = $56 + 8 | 0;
     HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i$i;
     $shl$i$i$i = $57 << 8;
     HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i$i;
     if ($58 >>> 0 < $$pre14$i$i$i >>> 0) {
      $59 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i$i$i = $58 + 1 | 0;
      HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i$i;
      $354 = $inc$i$i$i$i;
      $cond$i$i$i$i = HEAPU8[$59 + $58 >> 0] | 0;
     } else {
      $354 = $58;
      $cond$i$i$i$i = 0;
     }
     HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i$i;
     $and7$i$i$i = (($cond$i$i$i$i | $61 << 8) >>> 1 & 255 | $64 << 8 & 2147483392) ^ 255;
     HEAP32[$val$i28 >> 2] = $and7$i$i$i;
     if ($shl$i$i$i >>> 0 < 8388609) {
      $56 = $add$i$i$i;
      $57 = $shl$i$i$i;
      $58 = $354;
      $61 = $cond$i$i$i$i;
      $64 = $and7$i$i$i;
     } else {
      $76 = $add$i$i$i;
      $84 = $shl$i$i$i;
      $87 = $and7$i$i$i;
      break;
     }
    }
   } else {
    $76 = $$pre$i$i$i;
    $84 = $spec$select90$i;
    $87 = $sub1$i$i67;
   }
   $shl106 = 16 << $sub6$i41$i;
   $add107 = $sub6$i41$i + 4 | 0;
   $end_window$i69 = $dec$addr$0 + 12 | 0;
   $65 = HEAP32[$end_window$i69 >> 2] | 0;
   $nend_bits$i70 = $dec$addr$0 + 16 | 0;
   $66 = HEAP32[$nend_bits$i70 >> 2] | 0;
   if ($66 >>> 0 < $add107 >>> 0) {
    $end_offs$i$i = $dec$addr$0 + 8 | 0;
    $70 = (($66 | 0) > 17 ? $66 : 17) + 7 - $66 & -8;
    $$pre21$i = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
    $71 = HEAP32[$end_offs$i$i >> 2] | 0;
    $available$0$i = $66;
    $window$0$i = $65;
    while (1) {
     if ($71 >>> 0 < $$pre21$i >>> 0) {
      $72 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i = $71 + 1 | 0;
      HEAP32[$end_offs$i$i >> 2] = $inc$i$i;
      $355 = $inc$i$i;
      $cond$i$i78 = HEAPU8[$72 + ($$pre21$i - $inc$i$i) >> 0] | 0;
     } else {
      $355 = $71;
      $cond$i$i78 = 0;
     }
     $window$0$i = $cond$i$i78 << $available$0$i | $window$0$i;
     if (($available$0$i | 0) >= 17) break; else {
      $71 = $355;
      $available$0$i = $available$0$i + 8 | 0;
     }
    }
    $available$1$i = $66 + $70 + 8 | 0;
    $window$1$i = $window$0$i;
   } else {
    $available$1$i = $66;
    $window$1$i = $65;
   }
   $shr$i83 = $window$1$i >>> $add107;
   $sub3$i84 = $available$1$i - $add107 | 0;
   HEAP32[$end_window$i69 >> 2] = $shr$i83;
   HEAP32[$nend_bits$i70 >> 2] = $sub3$i84;
   $add6$i = $76 + $add107 | 0;
   HEAP32[$dec$addr$0$idx440 >> 2] = $add6$i;
   $sub110 = ($window$1$i & (1 << $add107) + -1) + -1 + $shl106 | 0;
   if ($sub3$i84 >>> 0 < 3) {
    $end_offs$i$i90 = $dec$addr$0 + 8 | 0;
    $78 = 24 - $sub3$i84 & -8;
    $$pre21$i95 = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
    $79 = HEAP32[$end_offs$i$i90 >> 2] | 0;
    $available$0$i97 = $sub3$i84;
    $window$0$i98 = $shr$i83;
    while (1) {
     if ($79 >>> 0 < $$pre21$i95 >>> 0) {
      $80 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i101 = $79 + 1 | 0;
      HEAP32[$end_offs$i$i90 >> 2] = $inc$i$i101;
      $356 = $inc$i$i101;
      $cond$i$i106 = HEAPU8[$80 + ($$pre21$i95 - $inc$i$i101) >> 0] | 0;
     } else {
      $356 = $79;
      $cond$i$i106 = 0;
     }
     $window$0$i98 = $cond$i$i106 << $available$0$i97 | $window$0$i98;
     if (($available$0$i97 | 0) >= 17) break; else {
      $79 = $356;
      $available$0$i97 = $available$0$i97 + 8 | 0;
     }
    }
    $available$1$i113 = $sub3$i84 + $78 + 8 | 0;
    $window$1$i114 = $window$0$i98;
   } else {
    $available$1$i113 = $sub3$i84;
    $window$1$i114 = $shr$i83;
   }
   $and$i115 = $window$1$i114 & 7;
   HEAP32[$end_window$i69 >> 2] = $window$1$i114 >>> 3;
   HEAP32[$nend_bits$i70 >> 2] = $available$1$i113 + -3;
   $add6$i119 = $add6$i + 3 | 0;
   HEAP32[$dec$addr$0$idx440 >> 2] = $add6$i119;
   do if (($add6$i + -27 + (Math_clz32($84 | 0) | 0) | 0) > ($mul80 | 0)) {
    $dec$addr$0$idx434$val727 = $add6$i119;
    $dec$addr$0$idx435$val729 = $84;
    $postfilter_tapset$0 = 0;
   } else {
    $shr$i124 = $84 >>> 2;
    $ret$0$i = -1;
    $s$0$i = $84;
    while (1) {
     $ret$0$i = $ret$0$i + 1 | 0;
     $mul$i128 = Math_imul($shr$i124, HEAPU8[49041 + $ret$0$i >> 0] | 0) | 0;
     if ($87 >>> 0 >= $mul$i128 >>> 0) break; else $s$0$i = $mul$i128;
    }
    $sub$i131 = $87 - $mul$i128 | 0;
    HEAP32[$val$i28 >> 2] = $sub$i131;
    $sub3$i132 = $s$0$i - $mul$i128 | 0;
    HEAP32[$dec$addr$0$idx441 >> 2] = $sub3$i132;
    if ($sub3$i132 >>> 0 >= 8388609) {
     $dec$addr$0$idx434$val727 = $add6$i119;
     $dec$addr$0$idx435$val729 = $sub3$i132;
     $postfilter_tapset$0 = $ret$0$i;
     break;
    }
    $rem$i$i135 = $dec$addr$0 + 40 | 0;
    $offs$i$i$i136 = $dec$addr$0 + 24 | 0;
    $$pre14$i$i142 = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
    $88 = $add6$i119;
    $89 = $sub3$i132;
    $90 = HEAP32[$offs$i$i$i136 >> 2] | 0;
    $93 = HEAP32[$rem$i$i135 >> 2] | 0;
    $96 = $sub$i131;
    while (1) {
     $add$i$i144 = $88 + 8 | 0;
     HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i144;
     $shl$i$i145 = $89 << 8;
     HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i145;
     if ($90 >>> 0 < $$pre14$i$i142 >>> 0) {
      $91 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i$i148 = $90 + 1 | 0;
      HEAP32[$offs$i$i$i136 >> 2] = $inc$i$i$i148;
      $357 = $inc$i$i$i148;
      $cond$i$i$i152 = HEAPU8[$91 + $90 >> 0] | 0;
     } else {
      $357 = $90;
      $cond$i$i$i152 = 0;
     }
     HEAP32[$rem$i$i135 >> 2] = $cond$i$i$i152;
     $96 = ($96 << 8 & 2147483392 | ($cond$i$i$i152 | $93 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i28 >> 2] = $96;
     if ($shl$i$i145 >>> 0 >= 8388609) {
      $dec$addr$0$idx434$val727 = $add$i$i144;
      $dec$addr$0$idx435$val729 = $shl$i$i145;
      $postfilter_tapset$0 = $ret$0$i;
      break;
     } else {
      $88 = $add$i$i144;
      $89 = $shl$i$i145;
      $90 = $357;
      $93 = $cond$i$i$i152;
     }
    }
   } while (0);
   $dec$addr$0$idx434$val = $dec$addr$0$idx434$val727;
   $dec$addr$0$idx435$val = $dec$addr$0$idx435$val729;
   $postfilter_gain$0 = +($and$i115 + 1 | 0) * .09375;
   $postfilter_pitch$0 = $sub110;
   $postfilter_tapset$1 = $postfilter_tapset$0;
  } else {
   $dec$addr$0$idx434$val = $$pre$i$i$i;
   $dec$addr$0$idx435$val = $53;
   $postfilter_gain$0 = 0.0;
   $postfilter_pitch$0 = 0;
   $postfilter_tapset$1 = 0;
  }
  $$pre$i$i177 = $dec$addr$0$idx434$val;
  $99 = $dec$addr$0$idx435$val;
  $postfilter_gain$1 = $postfilter_gain$0;
  $postfilter_pitch$1 = $postfilter_pitch$0;
  $postfilter_tapset$2 = $postfilter_tapset$1;
  $tell$1 = $dec$addr$0$idx434$val + -32 + (Math_clz32($dec$addr$0$idx435$val | 0) | 0) | 0;
 }
 $add128 = $tell$1 + 3 | 0;
 if (($LM$0541$lcssa | 0) == 0 | ($add128 | 0) > ($mul80 | 0)) {
  $$pre$i$i216 = $$pre$i$i177;
  $115 = $99;
  $add140$pre$phiZ2D = $add128;
  $isTransient$0 = 0;
 } else {
  $val$i162 = $dec$addr$0 + 32 | 0;
  $98 = HEAP32[$val$i162 >> 2] | 0;
  $shr$i163 = $99 >>> 3;
  $cmp$i164 = $98 >>> 0 < $shr$i163 >>> 0;
  $conv$i165 = $cmp$i164 & 1;
  if ($cmp$i164) {
   $358 = $98;
   $cond$i169 = $shr$i163;
  } else {
   $sub$i167 = $98 - $shr$i163 | 0;
   HEAP32[$val$i162 >> 2] = $sub$i167;
   $358 = $sub$i167;
   $cond$i169 = $99 - $shr$i163 | 0;
  }
  HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i169;
  if ($cond$i169 >>> 0 < 8388609) {
   $rem$i$i173 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i174 = $dec$addr$0 + 24 | 0;
   $$pre14$i$i180 = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
   $100 = $$pre$i$i177;
   $101 = $cond$i169;
   $102 = HEAP32[$offs$i$i$i174 >> 2] | 0;
   $105 = HEAP32[$rem$i$i173 >> 2] | 0;
   $108 = $358;
   while (1) {
    $add$i$i182 = $100 + 8 | 0;
    HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i182;
    $shl$i$i183 = $101 << 8;
    HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i183;
    if ($102 >>> 0 < $$pre14$i$i180 >>> 0) {
     $103 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i$i186 = $102 + 1 | 0;
     HEAP32[$offs$i$i$i174 >> 2] = $inc$i$i$i186;
     $359 = $inc$i$i$i186;
     $cond$i$i$i190 = HEAPU8[$103 + $102 >> 0] | 0;
    } else {
     $359 = $102;
     $cond$i$i$i190 = 0;
    }
    HEAP32[$rem$i$i173 >> 2] = $cond$i$i$i190;
    $108 = ($108 << 8 & 2147483392 | ($cond$i$i$i190 | $105 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i162 >> 2] = $108;
    if ($shl$i$i183 >>> 0 >= 8388609) {
     $dec$addr$0$idx432$val = $add$i$i182;
     $dec$addr$0$idx433$val = $shl$i$i183;
     break;
    } else {
     $100 = $add$i$i182;
     $101 = $shl$i$i183;
     $102 = $359;
     $105 = $cond$i$i$i190;
    }
   }
  } else {
   $dec$addr$0$idx432$val = $$pre$i$i177;
   $dec$addr$0$idx433$val = $cond$i169;
  }
  $$pre$i$i216 = $dec$addr$0$idx432$val;
  $115 = $dec$addr$0$idx433$val;
  $add140$pre$phiZ2D = $dec$addr$0$idx432$val + -32 + (Math_clz32($dec$addr$0$idx433$val | 0) | 0) + 3 | 0;
  $isTransient$0 = $conv$i165;
 }
 $tobool136 = ($isTransient$0 | 0) != 0;
 $shl21$ = $tobool136 ? $shl21 : 0;
 if (($add140$pre$phiZ2D | 0) > ($mul80 | 0)) {
  $110 = $prev$i;
  HEAP32[$110 >> 2] = 0;
  HEAP32[$110 + 4 >> 2] = 0;
  $360 = $prev$i;
  $dec$idx$val$i246739 = $$pre$i$i216;
  $dec$idx53$val$i780 = $115;
  $tmpcast$i712 = $prev$i;
  label = 126;
 } else {
  $val$i201 = $dec$addr$0 + 32 | 0;
  $114 = HEAP32[$val$i201 >> 2] | 0;
  $shr$i202 = $115 >>> 3;
  $cmp$i203 = $114 >>> 0 < $shr$i202 >>> 0;
  $conv$i204 = $cmp$i203 & 1;
  if ($cmp$i203) {
   $361 = $114;
   $cond$i208 = $shr$i202;
  } else {
   $sub$i206 = $114 - $shr$i202 | 0;
   HEAP32[$val$i201 >> 2] = $sub$i206;
   $361 = $sub$i206;
   $cond$i208 = $115 - $shr$i202 | 0;
  }
  HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i208;
  if ($cond$i208 >>> 0 < 8388609) {
   $rem$i$i212 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i213 = $dec$addr$0 + 24 | 0;
   $$pre14$i$i219 = HEAP32[$dec$addr$0 + 4 >> 2] | 0;
   $116 = $$pre$i$i216;
   $117 = $cond$i208;
   $118 = HEAP32[$offs$i$i$i213 >> 2] | 0;
   $121 = HEAP32[$rem$i$i212 >> 2] | 0;
   $124 = $361;
   while (1) {
    $add$i$i221 = $116 + 8 | 0;
    HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i221;
    $shl$i$i222 = $117 << 8;
    HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i222;
    if ($118 >>> 0 < $$pre14$i$i219 >>> 0) {
     $119 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i$i225 = $118 + 1 | 0;
     HEAP32[$offs$i$i$i213 >> 2] = $inc$i$i$i225;
     $362 = $inc$i$i$i225;
     $cond$i$i$i229 = HEAPU8[$119 + $118 >> 0] | 0;
    } else {
     $362 = $118;
     $cond$i$i$i229 = 0;
    }
    HEAP32[$rem$i$i212 >> 2] = $cond$i$i$i229;
    $124 = ($124 << 8 & 2147483392 | ($cond$i$i$i229 | $121 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i201 >> 2] = $124;
    if ($shl$i$i222 >>> 0 >= 8388609) {
     $dec$idx$val$i246740 = $add$i$i221;
     $dec$idx53$val$i781 = $shl$i$i222;
     break;
    } else {
     $116 = $add$i$i221;
     $117 = $shl$i$i222;
     $118 = $362;
     $121 = $cond$i$i$i229;
    }
   }
  } else {
   $dec$idx$val$i246740 = $$pre$i$i216;
   $dec$idx53$val$i781 = $cond$i208;
  }
  $125 = $prev$i;
  HEAP32[$125 >> 2] = 0;
  HEAP32[$125 + 4 >> 2] = 0;
  if ($cmp$i203) {
   $363 = $prev$i;
   $beta$0$i = .149993896484375;
   $coef$0$i = 0.0;
   $cond147709 = $conv$i204;
   $dec$idx$val$i246738 = $dec$idx$val$i246740;
   $dec$idx53$val$i779 = $dec$idx53$val$i781;
   $tmpcast$i711 = $prev$i;
  } else {
   $360 = $prev$i;
   $dec$idx$val$i246739 = $dec$idx$val$i246740;
   $dec$idx53$val$i780 = $dec$idx53$val$i781;
   $tmpcast$i712 = $prev$i;
   label = 126;
  }
 }
 if ((label | 0) == 126) {
  $363 = $360;
  $beta$0$i = +HEAPF32[20768 + ($LM$0541$lcssa << 2) >> 2];
  $coef$0$i = +HEAPF32[20752 + ($LM$0541$lcssa << 2) >> 2];
  $cond147709 = 0;
  $dec$idx$val$i246738 = $dec$idx$val$i246739;
  $dec$idx53$val$i779 = $dec$idx53$val$i780;
  $tmpcast$i711 = $tmpcast$i712;
 }
 $storage$i240 = $dec$addr$0 + 4 | 0;
 $131 = HEAP32[$storage$i240 >> 2] | 0;
 $sub2$i$neg$i = ($131 << 3) + 32 | 0;
 $ext$i$i$i = $dec$addr$0 + 36 | 0;
 $val$i$i$i = $dec$addr$0 + 32 | 0;
 $rem$i$i$i$i = $dec$addr$0 + 40 | 0;
 $offs$i$i$i$i$i = $dec$addr$0 + 24 | 0;
 $dec$idx$val$i246734 = $dec$idx$val$i246738;
 $dec$idx53$val$i775 = $dec$idx53$val$i779;
 $i$055$i = $5;
 L194 : while (1) {
  $mul7$i = (($i$055$i | 0) < 20 ? $i$055$i : 20) << 1;
  $arrayidx8$i = 20416 + ($LM$0541$lcssa * 84 | 0) + ($cond147709 * 42 | 0) + $mul7$i | 0;
  $arrayidx9$i = ($mul7$i | 1) + (20416 + ($LM$0541$lcssa * 84 | 0) + ($cond147709 * 42 | 0)) | 0;
  $$pre$i$i$i$i = $dec$idx$val$i246734;
  $c$0$i = 0;
  $dec$idx53$val$i = $dec$idx53$val$i775;
  while (1) {
   $sub$i247 = $sub2$i$neg$i - $$pre$i$i$i$i - (Math_clz32($dec$idx53$val$i | 0) | 0) | 0;
   do if (($sub$i247 | 0) > 14) {
    $shl$i250 = HEAPU8[$arrayidx8$i >> 0] << 7;
    $shl11$i = HEAPU8[$arrayidx9$i >> 0] << 6;
    $shr$i$i$i = $dec$idx53$val$i >>> 15;
    HEAP32[$ext$i$i$i >> 2] = $shr$i$i$i;
    $135 = HEAP32[$val$i$i$i >> 2] | 0;
    $add$i$i$i251 = (($135 >>> 0) / ($shr$i$i$i >>> 0) | 0) + 1 | 0;
    $sub8$i$i$i = 32768 - ($add$i$i$i251 >>> 0 < 32768 ? $add$i$i$i251 : 32768) | 0;
    if ($sub8$i$i$i >>> 0 < $shl$i250 >>> 0) {
     $fl$25662$i$i = 0;
     $fs$addr$15860$i$i = $shl$i250;
     $val$25761$i$i = 0;
    } else {
     $fs$addr$0$in67$i$i = (Math_imul(16384 - $shl11$i | 0, 32736 - $shl$i250 | 0) | 0) >>> 15;
     L202 : do if (!$fs$addr$0$in67$i$i) {
      $fl$0$lcssa$i$i = $shl$i250;
      $val$0$lcssa$i$i = 1;
      label = 135;
     } else {
      $fl$070$i$i = $shl$i250;
      $fs$addr$072$in$i$i = $fs$addr$0$in67$i$i;
      $val$071$i$i = 1;
      while (1) {
       $fs$addr$072$i$i = $fs$addr$072$in$i$i + 1 | 0;
       $mul$i$i253 = $fs$addr$072$i$i << 1;
       $add3$i$i = $mul$i$i253 + $fl$070$i$i | 0;
       if ($sub8$i$i$i >>> 0 < $add3$i$i >>> 0) {
        $fl$1$i$i = $fl$070$i$i;
        $fs$addr$064$i$i = $fs$addr$072$i$i;
        $val$1$i$i = $val$071$i$i;
        break L202;
       }
       $inc9$i$i = $val$071$i$i + 1 | 0;
       $fs$addr$072$in$i$i = (Math_imul($mul$i$i253 + -2 | 0, $shl11$i) | 0) >>> 15;
       if (!$fs$addr$072$in$i$i) {
        $fl$0$lcssa$i$i = $add3$i$i;
        $val$0$lcssa$i$i = $inc9$i$i;
        label = 135;
        break;
       } else {
        $fl$070$i$i = $add3$i$i;
        $val$071$i$i = $inc9$i$i;
       }
      }
     } while (0);
     if ((label | 0) == 135) {
      label = 0;
      $sub1248$i$i = $sub8$i$i$i - $fl$0$lcssa$i$i | 0;
      $fl$1$i$i = ($sub1248$i$i & -2) + $fl$0$lcssa$i$i | 0;
      $fs$addr$064$i$i = 1;
      $val$1$i$i = ($sub1248$i$i >>> 1) + $val$0$lcssa$i$i | 0;
     }
     $add18$i$i = $fl$1$i$i + $fs$addr$064$i$i | 0;
     $cmp19$i$i = $sub8$i$i$i >>> 0 < $add18$i$i >>> 0;
     $spec$select45$i$i = $cmp19$i$i ? $fl$1$i$i : $add18$i$i;
     if ($spec$select45$i$i >>> 0 >= 32768) {
      label = 137;
      break L194;
     }
     if ($spec$select45$i$i >>> 0 > $sub8$i$i$i >>> 0) {
      label = 139;
      break L194;
     } else {
      $fl$25662$i$i = $spec$select45$i$i;
      $fs$addr$15860$i$i = $fs$addr$064$i$i;
      $val$25761$i$i = $cmp19$i$i ? 0 - $val$1$i$i | 0 : $val$1$i$i;
     }
    }
    $add34$i$i = $fs$addr$15860$i$i + $fl$25662$i$i | 0;
    $spec$select$i$i = $add34$i$i >>> 0 < 32768 ? $add34$i$i : 32768;
    if ($sub8$i$i$i >>> 0 >= $spec$select$i$i >>> 0) {
     label = 141;
     break L194;
    }
    $mul$i3$i$i = Math_imul($shr$i$i$i, 32768 - $spec$select$i$i | 0) | 0;
    $sub1$i5$i$i = $135 - $mul$i3$i$i | 0;
    HEAP32[$val$i$i$i >> 2] = $sub1$i5$i$i;
    $mul4$i$i$i = Math_imul($shr$i$i$i, $spec$select$i$i - $fl$25662$i$i | 0) | 0;
    $cond$i$i$i259 = ($fl$25662$i$i | 0) == 0 ? $dec$idx53$val$i - $mul$i3$i$i | 0 : $mul4$i$i$i;
    HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i$i$i259;
    if ($cond$i$i$i259 >>> 0 >= 8388609) {
     $dec$idx$val$i246735 = $$pre$i$i$i$i;
     $dec$idx53$val$i776 = $cond$i$i$i259;
     $qi$0$i = $val$25761$i$i;
     break;
    }
    $137 = $$pre$i$i$i$i;
    $138 = $cond$i$i$i259;
    $139 = HEAP32[$offs$i$i$i$i$i >> 2] | 0;
    $142 = HEAP32[$rem$i$i$i$i >> 2] | 0;
    $145 = $sub1$i5$i$i;
    while (1) {
     $add$i$i$i$i = $137 + 8 | 0;
     HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i$i$i;
     $shl$i$i$i$i = $138 << 8;
     HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i$i$i;
     if ($139 >>> 0 < $131 >>> 0) {
      $140 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i$i$i$i = $139 + 1 | 0;
      HEAP32[$offs$i$i$i$i$i >> 2] = $inc$i$i$i$i$i;
      $364 = $inc$i$i$i$i$i;
      $cond$i$i$i$i$i = HEAPU8[$140 + $139 >> 0] | 0;
     } else {
      $364 = $139;
      $cond$i$i$i$i$i = 0;
     }
     HEAP32[$rem$i$i$i$i >> 2] = $cond$i$i$i$i$i;
     $145 = ($145 << 8 & 2147483392 | ($cond$i$i$i$i$i | $142 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i$i$i >> 2] = $145;
     if ($shl$i$i$i$i >>> 0 >= 8388609) {
      $dec$idx$val$i246735 = $add$i$i$i$i;
      $dec$idx53$val$i776 = $shl$i$i$i$i;
      $qi$0$i = $val$25761$i$i;
      break;
     } else {
      $137 = $add$i$i$i$i;
      $138 = $shl$i$i$i$i;
      $139 = $364;
      $142 = $cond$i$i$i$i$i;
     }
    }
   } else {
    if (($sub$i247 | 0) > 1) {
     $146 = HEAP32[$val$i$i$i >> 2] | 0;
     $shr$i$i = $dec$idx53$val$i >>> 2;
     $ret$0$i$i = -1;
     $s$0$i$i = $dec$idx53$val$i;
     while (1) {
      $ret$0$i$i = $ret$0$i$i + 1 | 0;
      $mul$i1$i = Math_imul($shr$i$i, HEAPU8[49626 + $ret$0$i$i >> 0] | 0) | 0;
      if ($146 >>> 0 >= $mul$i1$i >>> 0) break; else $s$0$i$i = $mul$i1$i;
     }
     $sub$i3$i = $146 - $mul$i1$i | 0;
     HEAP32[$val$i$i$i >> 2] = $sub$i3$i;
     $sub3$i$i = $s$0$i$i - $mul$i1$i | 0;
     HEAP32[$dec$addr$0$idx441 >> 2] = $sub3$i$i;
     if ($sub3$i$i >>> 0 < 8388609) {
      $148 = $$pre$i$i$i$i;
      $149 = $sub3$i$i;
      $150 = HEAP32[$offs$i$i$i$i$i >> 2] | 0;
      $153 = HEAP32[$rem$i$i$i$i >> 2] | 0;
      $156 = $sub$i3$i;
      while (1) {
       $add$i$i5$i = $148 + 8 | 0;
       HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i5$i;
       $shl$i$i$i275 = $149 << 8;
       HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i$i275;
       if ($150 >>> 0 < $131 >>> 0) {
        $151 = HEAP32[$dec$addr$0 >> 2] | 0;
        $inc$i$i$i$i277 = $150 + 1 | 0;
        HEAP32[$offs$i$i$i$i$i >> 2] = $inc$i$i$i$i277;
        $365 = $inc$i$i$i$i277;
        $cond$i$i$i$i281 = HEAPU8[$151 + $150 >> 0] | 0;
       } else {
        $365 = $150;
        $cond$i$i$i$i281 = 0;
       }
       HEAP32[$rem$i$i$i$i >> 2] = $cond$i$i$i$i281;
       $156 = ($156 << 8 & 2147483392 | ($cond$i$i$i$i281 | $153 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i$i$i >> 2] = $156;
       if ($shl$i$i$i275 >>> 0 >= 8388609) {
        $dec$idx$val$i246737 = $add$i$i5$i;
        $dec$idx53$val$i778 = $shl$i$i$i275;
        break;
       } else {
        $148 = $add$i$i5$i;
        $149 = $shl$i$i$i275;
        $150 = $365;
        $153 = $cond$i$i$i$i281;
       }
      }
     } else {
      $dec$idx$val$i246737 = $$pre$i$i$i$i;
      $dec$idx53$val$i778 = $sub3$i$i;
     }
     $dec$idx$val$i246735 = $dec$idx$val$i246737;
     $dec$idx53$val$i776 = $dec$idx53$val$i778;
     $qi$0$i = $ret$0$i$i >> 1 ^ 0 - ($ret$0$i$i & 1);
     break;
    }
    if (($sub$i247 | 0) != 1) {
     $dec$idx$val$i246735 = $$pre$i$i$i$i;
     $dec$idx53$val$i776 = $dec$idx53$val$i;
     $qi$0$i = -1;
     break;
    }
    $157 = HEAP32[$val$i$i$i >> 2] | 0;
    $shr$i10$i = $dec$idx53$val$i >>> 1;
    $cmp$i11$i = $157 >>> 0 < $shr$i10$i >>> 0;
    if ($cmp$i11$i) {
     $366 = $157;
     $cond$i$i294 = $shr$i10$i;
    } else {
     $sub$i14$i = $157 - $shr$i10$i | 0;
     HEAP32[$val$i$i$i >> 2] = $sub$i14$i;
     $366 = $sub$i14$i;
     $cond$i$i294 = $dec$idx53$val$i - $shr$i10$i | 0;
    }
    HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i$i294;
    if ($cond$i$i294 >>> 0 < 8388609) {
     $158 = $$pre$i$i$i$i;
     $159 = $cond$i$i294;
     $160 = HEAP32[$offs$i$i$i$i$i >> 2] | 0;
     $163 = HEAP32[$rem$i$i$i$i >> 2] | 0;
     $166 = $366;
     while (1) {
      $add$i$i27$i = $158 + 8 | 0;
      HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i27$i;
      $shl$i$i28$i = $159 << 8;
      HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i28$i;
      if ($160 >>> 0 < $131 >>> 0) {
       $161 = HEAP32[$dec$addr$0 >> 2] | 0;
       $inc$i$i$i31$i = $160 + 1 | 0;
       HEAP32[$offs$i$i$i$i$i >> 2] = $inc$i$i$i31$i;
       $367 = $inc$i$i$i31$i;
       $cond$i$i$i35$i = HEAPU8[$161 + $160 >> 0] | 0;
      } else {
       $367 = $160;
       $cond$i$i$i35$i = 0;
      }
      HEAP32[$rem$i$i$i$i >> 2] = $cond$i$i$i35$i;
      $166 = ($166 << 8 & 2147483392 | ($cond$i$i$i35$i | $163 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i$i$i >> 2] = $166;
      if ($shl$i$i28$i >>> 0 >= 8388609) {
       $dec$idx$val$i246736 = $add$i$i27$i;
       $dec$idx53$val$i777 = $shl$i$i28$i;
       break;
      } else {
       $158 = $add$i$i27$i;
       $159 = $shl$i$i28$i;
       $160 = $367;
       $163 = $cond$i$i$i35$i;
      }
     }
    } else {
     $dec$idx$val$i246736 = $$pre$i$i$i$i;
     $dec$idx53$val$i777 = $cond$i$i294;
    }
    $dec$idx$val$i246735 = $dec$idx$val$i246736;
    $dec$idx53$val$i776 = $dec$idx53$val$i777;
    $qi$0$i = $cmp$i11$i << 31 >> 31;
   } while (0);
   $conv31$i = +($qi$0$i | 0);
   $arrayidx34$i = $add$ptr9 + (($c$0$i * 21 | 0) + $i$055$i << 2) | 0;
   $167 = +HEAPF32[$arrayidx34$i >> 2];
   $arrayidx54$i = $tmpcast$i711 + ($c$0$i << 2) | 0;
   $168 = +HEAPF32[$arrayidx54$i >> 2];
   HEAPF32[$arrayidx34$i >> 2] = $168 + $coef$0$i * ($167 < -9.0 ? -9.0 : $167) + $conv31$i;
   HEAPF32[$arrayidx54$i >> 2] = $168 + $conv31$i - $beta$0$i * $conv31$i;
   $c$0$i = $c$0$i + 1 | 0;
   if (($c$0$i | 0) >= ($1 | 0)) break; else {
    $$pre$i$i$i$i = $dec$idx$val$i246735;
    $dec$idx53$val$i = $dec$idx53$val$i776;
   }
  }
  $i$055$i = $i$055$i + 1 | 0;
  if (($i$055$i | 0) == ($6 | 0)) {
   label = 167;
   break;
  } else {
   $dec$idx$val$i246734 = $dec$idx$val$i246735;
   $dec$idx53$val$i775 = $dec$idx53$val$i776;
  }
 }
 if ((label | 0) == 137) _celt_fatal(49336, 49298, 128); else if ((label | 0) == 139) _celt_fatal(49363, 49298, 130); else if ((label | 0) == 141) _celt_fatal(49388, 49298, 131); else if ((label | 0) == 167) {
  $169 = _llvm_stacksave() | 0;
  $vla795 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $170 = HEAP32[$storage$i240 >> 2] | 0;
  $mul$i = $170 << 3;
  $dec$idx41$val$i = HEAP32[$dec$addr$0$idx440 >> 2] | 0;
  $dec$idx42$val$i = HEAP32[$dec$addr$0$idx441 >> 2] | 0;
  $sub2$i$i = $dec$idx41$val$i + -32 | 0;
  $sub1$i$i = $sub2$i$i + (Math_clz32($dec$idx42$val$i | 0) | 0) | 0;
  $cond$i = $tobool136 ? 2 : 4;
  $cmp$i = ($LM$0541$lcssa | 0) != 0;
  $spec$select$i = $cmp$i & ($sub1$i$i + ($cond$i | 1) | 0) >>> 0 <= $mul$i >>> 0;
  $sub$i = $mul$i - ($spec$select$i & 1) | 0;
  $cond9$i = $tobool136 ? 4 : 5;
  if (($sub1$i$i + $cond$i | 0) >>> 0 > $sub$i >>> 0) {
   $$pre$i$i355751 = $dec$idx41$val$i;
   $368 = $dec$idx42$val$i;
   $curr$1$peel$i = 0;
   $tell$1$peel$i = $sub1$i$i;
  } else {
   $val$i301 = $dec$addr$0 + 32 | 0;
   $172 = HEAP32[$val$i301 >> 2] | 0;
   $shr$i302 = $dec$idx42$val$i >>> $cond$i;
   $cmp$i303 = $172 >>> 0 < $shr$i302 >>> 0;
   $conv$i304 = $cmp$i303 & 1;
   if ($cmp$i303) {
    $369 = $172;
    $cond$i308 = $shr$i302;
   } else {
    $sub$i306 = $172 - $shr$i302 | 0;
    HEAP32[$val$i301 >> 2] = $sub$i306;
    $369 = $sub$i306;
    $cond$i308 = $dec$idx42$val$i - $shr$i302 | 0;
   }
   HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i308;
   if ($cond$i308 >>> 0 < 8388609) {
    $rem$i$i312 = $dec$addr$0 + 40 | 0;
    $offs$i$i$i313 = $dec$addr$0 + 24 | 0;
    $173 = $dec$idx41$val$i;
    $174 = $cond$i308;
    $175 = HEAP32[$offs$i$i$i313 >> 2] | 0;
    $178 = HEAP32[$rem$i$i312 >> 2] | 0;
    $181 = $369;
    while (1) {
     $add$i$i321 = $173 + 8 | 0;
     HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i321;
     $174 = $174 << 8;
     HEAP32[$dec$addr$0$idx441 >> 2] = $174;
     if ($175 >>> 0 < $170 >>> 0) {
      $176 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i$i325 = $175 + 1 | 0;
      HEAP32[$offs$i$i$i313 >> 2] = $inc$i$i$i325;
      $370 = $inc$i$i$i325;
      $cond$i$i$i329 = HEAPU8[$176 + $175 >> 0] | 0;
     } else {
      $370 = $175;
      $cond$i$i$i329 = 0;
     }
     HEAP32[$rem$i$i312 >> 2] = $cond$i$i$i329;
     $181 = ($181 << 8 & 2147483392 | ($cond$i$i$i329 | $178 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i301 >> 2] = $181;
     if ($174 >>> 0 >= 8388609) break; else {
      $173 = $add$i$i321;
      $175 = $370;
      $178 = $cond$i$i$i329;
     }
    }
    $dec$idx$val$peel$i = $add$i$i321;
    $dec$idx40$val$peel$i = $174;
    $sub2$i43$peel$i$pre$phiZZZZ2D = $173 + -24 | 0;
   } else {
    $dec$idx$val$peel$i = $dec$idx41$val$i;
    $dec$idx40$val$peel$i = $cond$i308;
    $sub2$i43$peel$i$pre$phiZZZZ2D = $sub2$i$i;
   }
   $$pre$i$i355751 = $dec$idx$val$peel$i;
   $368 = $dec$idx40$val$peel$i;
   $curr$1$peel$i = $conv$i304;
   $tell$1$peel$i = $sub2$i43$peel$i$pre$phiZZZZ2D + (Math_clz32($dec$idx40$val$peel$i | 0) | 0) | 0;
  }
  HEAP32[$vla795 + ($5 << 2) >> 2] = $curr$1$peel$i;
  $inc$peel$i = $5 + 1 | 0;
  if (($inc$peel$i | 0) == ($6 | 0)) {
   $$pre$i$i394 = $$pre$i$i355751;
   $198 = $368;
   $tf_changed$0$lcssa$i = $curr$1$peel$i;
  } else {
   $val$i340 = $dec$addr$0 + 32 | 0;
   $rem$i$i351 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i352 = $dec$addr$0 + 24 | 0;
   $$pre$i$i355 = $$pre$i$i355751;
   $184 = $368;
   $curr$048$i = $curr$1$peel$i;
   $i$049$i = $inc$peel$i;
   $tell$052$i = $tell$1$peel$i;
   $tf_changed$050$i = $curr$1$peel$i;
   while (1) {
    if (($tell$052$i + $cond9$i | 0) >>> 0 > $sub$i >>> 0) {
     $$pre$i$i355749 = $$pre$i$i355;
     $371 = $184;
     $curr$1$i = $curr$048$i;
     $tell$1$i = $tell$052$i;
     $tf_changed$1$i = $tf_changed$050$i;
    } else {
     $183 = HEAP32[$val$i340 >> 2] | 0;
     $shr$i341 = $184 >>> $cond9$i;
     $cmp$i342 = $183 >>> 0 < $shr$i341 >>> 0;
     $conv$i343 = $cmp$i342 & 1;
     if ($cmp$i342) {
      $372 = $183;
      $cond$i347 = $shr$i341;
     } else {
      $sub$i345 = $183 - $shr$i341 | 0;
      HEAP32[$val$i340 >> 2] = $sub$i345;
      $372 = $sub$i345;
      $cond$i347 = $184 - $shr$i341 | 0;
     }
     HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i347;
     if ($cond$i347 >>> 0 < 8388609) {
      $185 = $$pre$i$i355;
      $186 = $cond$i347;
      $187 = HEAP32[$offs$i$i$i352 >> 2] | 0;
      $190 = HEAP32[$rem$i$i351 >> 2] | 0;
      $193 = $372;
      while (1) {
       $add$i$i360 = $185 + 8 | 0;
       HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i360;
       $shl$i$i361 = $186 << 8;
       HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i361;
       if ($187 >>> 0 < $170 >>> 0) {
        $188 = HEAP32[$dec$addr$0 >> 2] | 0;
        $inc$i$i$i364 = $187 + 1 | 0;
        HEAP32[$offs$i$i$i352 >> 2] = $inc$i$i$i364;
        $373 = $inc$i$i$i364;
        $cond$i$i$i368 = HEAPU8[$188 + $187 >> 0] | 0;
       } else {
        $373 = $187;
        $cond$i$i$i368 = 0;
       }
       HEAP32[$rem$i$i351 >> 2] = $cond$i$i$i368;
       $193 = ($193 << 8 & 2147483392 | ($cond$i$i$i368 | $190 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i340 >> 2] = $193;
       if ($shl$i$i361 >>> 0 >= 8388609) {
        $dec$idx$val$i = $add$i$i360;
        $dec$idx40$val$i = $shl$i$i361;
        break;
       } else {
        $185 = $add$i$i360;
        $186 = $shl$i$i361;
        $187 = $373;
        $190 = $cond$i$i$i368;
       }
      }
     } else {
      $dec$idx$val$i = $$pre$i$i355;
      $dec$idx40$val$i = $cond$i347;
     }
     $xor$i = $curr$048$i ^ $conv$i343;
     $$pre$i$i355749 = $dec$idx$val$i;
     $371 = $dec$idx40$val$i;
     $curr$1$i = $xor$i;
     $tell$1$i = $dec$idx$val$i + -32 + (Math_clz32($dec$idx40$val$i | 0) | 0) | 0;
     $tf_changed$1$i = $xor$i | $tf_changed$050$i;
    }
    HEAP32[$vla795 + ($i$049$i << 2) >> 2] = $curr$1$i;
    $i$049$i = $i$049$i + 1 | 0;
    if (($i$049$i | 0) == ($6 | 0)) {
     $$pre$i$i394 = $$pre$i$i355749;
     $198 = $371;
     $tf_changed$0$lcssa$i = $tf_changed$1$i;
     break;
    } else {
     $$pre$i$i355 = $$pre$i$i355749;
     $184 = $371;
     $curr$048$i = $curr$1$i;
     $tell$052$i = $tell$1$i;
     $tf_changed$050$i = $tf_changed$1$i;
    }
   }
  }
  do if ($spec$select$i) {
   $mul12$i = $isTransient$0 << 2;
   if ((HEAP8[$tf_changed$0$lcssa$i + $mul12$i + (192 + ($LM$0541$lcssa << 3)) >> 0] | 0) == (HEAP8[$tf_changed$0$lcssa$i + ($mul12$i | 2) + (192 + ($LM$0541$lcssa << 3)) >> 0] | 0)) {
    $$pre$i$i437 = $$pre$i$i394;
    $210 = $198;
    $tf_select$0$i = 0;
    break;
   }
   $val$i379 = $dec$addr$0 + 32 | 0;
   $197 = HEAP32[$val$i379 >> 2] | 0;
   $shr$i380 = $198 >>> 1;
   $cmp$i381 = $197 >>> 0 < $shr$i380 >>> 0;
   $conv$i382 = $cmp$i381 & 1;
   if ($cmp$i381) {
    $374 = $197;
    $cond$i386 = $shr$i380;
   } else {
    $sub$i384 = $197 - $shr$i380 | 0;
    HEAP32[$val$i379 >> 2] = $sub$i384;
    $374 = $sub$i384;
    $cond$i386 = $198 - $shr$i380 | 0;
   }
   HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i386;
   if ($cond$i386 >>> 0 < 8388609) {
    $rem$i$i390 = $dec$addr$0 + 40 | 0;
    $offs$i$i$i391 = $dec$addr$0 + 24 | 0;
    $199 = $$pre$i$i394;
    $200 = $cond$i386;
    $201 = HEAP32[$offs$i$i$i391 >> 2] | 0;
    $204 = HEAP32[$rem$i$i390 >> 2] | 0;
    $207 = $374;
    while (1) {
     $add$i$i399 = $199 + 8 | 0;
     HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i399;
     $shl$i$i400 = $200 << 8;
     HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i400;
     if ($201 >>> 0 < $170 >>> 0) {
      $202 = HEAP32[$dec$addr$0 >> 2] | 0;
      $inc$i$i$i403 = $201 + 1 | 0;
      HEAP32[$offs$i$i$i391 >> 2] = $inc$i$i$i403;
      $375 = $inc$i$i$i403;
      $cond$i$i$i407 = HEAPU8[$202 + $201 >> 0] | 0;
     } else {
      $375 = $201;
      $cond$i$i$i407 = 0;
     }
     HEAP32[$rem$i$i390 >> 2] = $cond$i$i$i407;
     $207 = ($207 << 8 & 2147483392 | ($cond$i$i$i407 | $204 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i379 >> 2] = $207;
     if ($shl$i$i400 >>> 0 >= 8388609) {
      $dec$addr$0$idx430$val759 = $add$i$i399;
      $dec$addr$0$idx431$val761 = $shl$i$i400;
      break;
     } else {
      $199 = $add$i$i399;
      $200 = $shl$i$i400;
      $201 = $375;
      $204 = $cond$i$i$i407;
     }
    }
   } else {
    $dec$addr$0$idx430$val759 = $$pre$i$i394;
    $dec$addr$0$idx431$val761 = $cond$i386;
   }
   $$pre$i$i437 = $dec$addr$0$idx430$val759;
   $210 = $dec$addr$0$idx431$val761;
   $tf_select$0$i = $conv$i382 << 1;
  } else {
   $$pre$i$i437 = $$pre$i$i394;
   $210 = $198;
   $tf_select$0$i = 0;
  } while (0);
  $add34$i = $tf_select$0$i + ($isTransient$0 << 2) | 0;
  $i$146$i = $5;
  do {
   $arrayidx35$i = $vla795 + ($i$146$i << 2) | 0;
   HEAP32[$arrayidx35$i >> 2] = HEAP8[$add34$i + (HEAP32[$arrayidx35$i >> 2] | 0) + (192 + ($LM$0541$lcssa << 3)) >> 0];
   $i$146$i = $i$146$i + 1 | 0;
  } while (($i$146$i | 0) != ($6 | 0));
  do if (($$pre$i$i437 + -28 + (Math_clz32($210 | 0) | 0) | 0) > ($mul80 | 0)) {
   $226 = $210;
   $228 = $$pre$i$i437;
   $spread_decision$0 = 2;
  } else {
   $val$i418 = $dec$addr$0 + 32 | 0;
   $212 = HEAP32[$val$i418 >> 2] | 0;
   $shr$i419 = $210 >>> 5;
   $ret$0$i421 = -1;
   $s$0$i420 = $210;
   while (1) {
    $ret$0$i421 = $ret$0$i421 + 1 | 0;
    $mul$i425 = Math_imul($shr$i419, HEAPU8[49044 + $ret$0$i421 >> 0] | 0) | 0;
    if ($212 >>> 0 >= $mul$i425 >>> 0) break; else $s$0$i420 = $mul$i425;
   }
   $sub$i428 = $212 - $mul$i425 | 0;
   HEAP32[$val$i418 >> 2] = $sub$i428;
   $sub3$i429 = $s$0$i420 - $mul$i425 | 0;
   HEAP32[$dec$addr$0$idx441 >> 2] = $sub3$i429;
   if ($sub3$i429 >>> 0 >= 8388609) {
    $226 = $sub3$i429;
    $228 = $$pre$i$i437;
    $spread_decision$0 = $ret$0$i421;
    break;
   }
   $rem$i$i433 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i434 = $dec$addr$0 + 24 | 0;
   $214 = $$pre$i$i437;
   $215 = $sub3$i429;
   $216 = HEAP32[$offs$i$i$i434 >> 2] | 0;
   $219 = HEAP32[$rem$i$i433 >> 2] | 0;
   $222 = $sub$i428;
   while (1) {
    $add$i$i442 = $214 + 8 | 0;
    HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i442;
    $shl$i$i443 = $215 << 8;
    HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i443;
    if ($216 >>> 0 < $170 >>> 0) {
     $217 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i$i446 = $216 + 1 | 0;
     HEAP32[$offs$i$i$i434 >> 2] = $inc$i$i$i446;
     $376 = $inc$i$i$i446;
     $cond$i$i$i450 = HEAPU8[$217 + $216 >> 0] | 0;
    } else {
     $376 = $216;
     $cond$i$i$i450 = 0;
    }
    HEAP32[$rem$i$i433 >> 2] = $cond$i$i$i450;
    $222 = ($222 << 8 & 2147483392 | ($cond$i$i$i450 | $219 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i418 >> 2] = $222;
    if ($shl$i$i443 >>> 0 >= 8388609) {
     $226 = $shl$i$i443;
     $228 = $add$i$i442;
     $spread_decision$0 = $ret$0$i421;
     break;
    } else {
     $214 = $add$i$i442;
     $215 = $shl$i$i443;
     $216 = $376;
     $219 = $cond$i$i$i450;
    }
   }
  } while (0);
  $vla155796 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $sub6$i = $$off29$i + ($LM$0541$lcssa << 1) | 0;
  $224 = 0;
  $i$015$i = 0;
  do {
   $i$015$i$looptemp = $i$015$i;
   $i$015$i = $i$015$i + 1 | 0;
   $224$looptemp = $224;
   $224 = HEAP16[5776 + ($i$015$i << 1) >> 1] | 0;
   HEAP32[$vla155796 + ($i$015$i$looptemp << 2) >> 2] = (Math_imul(Math_imul(($224 << 16 >> 16) - ($224$looptemp << 16 >> 16) << $LM$0541$lcssa, $1) | 0, (HEAPU8[14416 + (($sub6$i * 21 | 0) + $i$015$i$looptemp) >> 0] | 0) + 64 | 0) | 0) >> 2;
  } while (($i$015$i | 0) != 21);
  $vla156797 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $shl157 = $len << 6;
  $sub$i480 = 32 - (Math_clz32($226 | 0) | 0) | 0;
  $shr$i482 = $226 >>> ($sub$i480 + -16 | 0);
  $shr3$i = $shr$i482 >>> 12;
  $add$neg$i = (Math_imul($sub$i480, -8) | 0) + ($228 << 3) | 0;
  $val$i486 = $dec$addr$0 + 32 | 0;
  $rem$i$i497 = $dec$addr$0 + 40 | 0;
  $offs$i$i$i498 = $dec$addr$0 + 24 | 0;
  $$pre$i$i501766 = $228;
  $231 = HEAP16[5776 + ($5 << 1) >> 1] | 0;
  $377 = $226;
  $dynalloc_logp$0534 = 6;
  $i$1535 = $5;
  $tell$3533 = $add$neg$i + (($shr$i482 >>> 0 > (HEAP32[5744 + ($shr3$i + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i) | 0;
  $total_bits$0532 = $shl157;
  while (1) {
   $i$1535$looptemp = $i$1535;
   $i$1535 = $i$1535 + 1 | 0;
   $231$looptemp = $231;
   $231 = HEAP16[5776 + ($i$1535 << 1) >> 1] | 0;
   $shl170 = (Math_imul(($231 << 16 >> 16) - ($231$looptemp << 16 >> 16) | 0, $1) | 0) << $LM$0541$lcssa;
   $shl171 = $shl170 << 3;
   $cond177 = ($shl170 | 0) > 48 ? $shl170 : 48;
   $shl171$cond177 = ($shl171 | 0) < ($cond177 | 0) ? $shl171 : $cond177;
   if ((($dynalloc_logp$0534 << 3) + $tell$3533 | 0) < ($total_bits$0532 | 0)) {
    $233 = HEAP32[$vla155796 + ($i$1535$looptemp << 2) >> 2] | 0;
    $$pre$i$i501 = $$pre$i$i501766;
    $235 = $377;
    $boost$0522 = 0;
    $dynalloc_loop_logp$0521 = $dynalloc_logp$0534;
    $tell$4520 = $tell$3533;
    $total_bits$1519 = $total_bits$0532;
    while (1) {
     if (($boost$0522 | 0) >= ($233 | 0)) {
      $$pre$i$i501764 = $$pre$i$i501;
      $379 = $235;
      $boost$0$lcssa = $boost$0522;
      $tell$5 = $tell$4520;
      $total_bits$1$lcssa = $total_bits$1519;
      break;
     }
     $234 = HEAP32[$val$i486 >> 2] | 0;
     $shr$i487 = $235 >>> $dynalloc_loop_logp$0521;
     $cmp$i488 = $234 >>> 0 < $shr$i487 >>> 0;
     if ($cmp$i488) {
      $380 = $234;
      $cond$i493 = $shr$i487;
     } else {
      $sub$i491 = $234 - $shr$i487 | 0;
      HEAP32[$val$i486 >> 2] = $sub$i491;
      $380 = $sub$i491;
      $cond$i493 = $235 - $shr$i487 | 0;
     }
     HEAP32[$dec$addr$0$idx441 >> 2] = $cond$i493;
     if ($cond$i493 >>> 0 < 8388609) {
      $236 = $$pre$i$i501;
      $237 = $cond$i493;
      $238 = HEAP32[$offs$i$i$i498 >> 2] | 0;
      $241 = HEAP32[$rem$i$i497 >> 2] | 0;
      $244 = $380;
      while (1) {
       $add$i$i506 = $236 + 8 | 0;
       HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i506;
       $shl$i$i507 = $237 << 8;
       HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i507;
       if ($238 >>> 0 < $170 >>> 0) {
        $239 = HEAP32[$dec$addr$0 >> 2] | 0;
        $inc$i$i$i510 = $238 + 1 | 0;
        HEAP32[$offs$i$i$i498 >> 2] = $inc$i$i$i510;
        $381 = $inc$i$i$i510;
        $cond$i$i$i514 = HEAPU8[$239 + $238 >> 0] | 0;
       } else {
        $381 = $238;
        $cond$i$i$i514 = 0;
       }
       HEAP32[$rem$i$i497 >> 2] = $cond$i$i$i514;
       $244 = ($244 << 8 & 2147483392 | ($cond$i$i$i514 | $241 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i486 >> 2] = $244;
       if ($shl$i$i507 >>> 0 >= 8388609) {
        $245 = $add$i$i506;
        $246 = $shl$i$i507;
        break;
       } else {
        $236 = $add$i$i506;
        $237 = $shl$i$i507;
        $238 = $381;
        $241 = $cond$i$i$i514;
       }
      }
     } else {
      $245 = $$pre$i$i501;
      $246 = $cond$i493;
     }
     $sub$i527 = 32 - (Math_clz32($246 | 0) | 0) | 0;
     $shr$i529 = $246 >>> ($sub$i527 + -16 | 0);
     $shr3$i530 = $shr$i529 >>> 12;
     $sub7$i539 = (Math_imul($sub$i527, -8) | 0) + ($245 << 3) + (($shr$i529 >>> 0 > (HEAP32[5744 + ($shr3$i530 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i530) | 0;
     if (!$cmp$i488) {
      $$pre$i$i501764 = $245;
      $379 = $246;
      $boost$0$lcssa = $boost$0522;
      $tell$5 = $sub7$i539;
      $total_bits$1$lcssa = $total_bits$1519;
      break;
     }
     $sub204 = $total_bits$1519 - $shl171$cond177 | 0;
     $add203 = $boost$0522 + $shl171$cond177 | 0;
     if (($sub7$i539 + 8 | 0) < ($sub204 | 0)) {
      $$pre$i$i501 = $245;
      $235 = $246;
      $boost$0522 = $add203;
      $dynalloc_loop_logp$0521 = 1;
      $tell$4520 = $sub7$i539;
      $total_bits$1519 = $sub204;
     } else {
      $$pre$i$i501764 = $245;
      $379 = $246;
      $boost$0$lcssa = $add203;
      $tell$5 = $sub7$i539;
      $total_bits$1$lcssa = $sub204;
      break;
     }
    }
    HEAP32[$vla156797 + ($i$1535$looptemp << 2) >> 2] = $boost$0$lcssa;
    $sub209 = $dynalloc_logp$0534 + -1 | 0;
    $$pre$i$i501763 = $$pre$i$i501764;
    $251 = $379;
    $378 = ($boost$0$lcssa | 0) > 0 ? (($sub209 | 0) > 2 ? $sub209 : 2) : $dynalloc_logp$0534;
    $tell$5568 = $tell$5;
    $total_bits$1$lcssa567 = $total_bits$1$lcssa;
   } else {
    HEAP32[$vla156797 + ($i$1535$looptemp << 2) >> 2] = 0;
    $$pre$i$i501763 = $$pre$i$i501766;
    $251 = $377;
    $378 = $dynalloc_logp$0534;
    $tell$5568 = $tell$3533;
    $total_bits$1$lcssa567 = $total_bits$0532;
   }
   if (($i$1535 | 0) == ($6 | 0)) break; else {
    $$pre$i$i501766 = $$pre$i$i501763;
    $377 = $251;
    $dynalloc_logp$0534 = $378;
    $tell$3533 = $tell$5568;
    $total_bits$0532 = $total_bits$1$lcssa567;
   }
  }
  $vla221798 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  do if (($tell$5568 + 48 | 0) > ($total_bits$1$lcssa567 | 0)) {
   $262 = $$pre$i$i501763;
   $263 = $251;
   $cond229 = 5;
  } else {
   $val$i541 = $dec$addr$0 + 32 | 0;
   $250 = HEAP32[$val$i541 >> 2] | 0;
   $shr$i542 = $251 >>> 7;
   $ret$0$i544 = -1;
   $s$0$i543 = $251;
   while (1) {
    $ret$0$i544 = $ret$0$i544 + 1 | 0;
    $mul$i548 = Math_imul($shr$i542, HEAPU8[49048 + $ret$0$i544 >> 0] | 0) | 0;
    if ($250 >>> 0 >= $mul$i548 >>> 0) break; else $s$0$i543 = $mul$i548;
   }
   $sub$i551 = $250 - $mul$i548 | 0;
   HEAP32[$val$i541 >> 2] = $sub$i551;
   $sub3$i552 = $s$0$i543 - $mul$i548 | 0;
   HEAP32[$dec$addr$0$idx441 >> 2] = $sub3$i552;
   if ($sub3$i552 >>> 0 >= 8388609) {
    $262 = $$pre$i$i501763;
    $263 = $sub3$i552;
    $cond229 = $ret$0$i544;
    break;
   }
   $rem$i$i556 = $dec$addr$0 + 40 | 0;
   $offs$i$i$i557 = $dec$addr$0 + 24 | 0;
   $253 = $$pre$i$i501763;
   $254 = $sub3$i552;
   $255 = HEAP32[$offs$i$i$i557 >> 2] | 0;
   $258 = HEAP32[$rem$i$i556 >> 2] | 0;
   $261 = $sub$i551;
   while (1) {
    $add$i$i565 = $253 + 8 | 0;
    HEAP32[$dec$addr$0$idx440 >> 2] = $add$i$i565;
    $shl$i$i566 = $254 << 8;
    HEAP32[$dec$addr$0$idx441 >> 2] = $shl$i$i566;
    if ($255 >>> 0 < $170 >>> 0) {
     $256 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i$i569 = $255 + 1 | 0;
     HEAP32[$offs$i$i$i557 >> 2] = $inc$i$i$i569;
     $382 = $inc$i$i$i569;
     $cond$i$i$i573 = HEAPU8[$256 + $255 >> 0] | 0;
    } else {
     $382 = $255;
     $cond$i$i$i573 = 0;
    }
    HEAP32[$rem$i$i556 >> 2] = $cond$i$i$i573;
    $261 = ($261 << 8 & 2147483392 | ($cond$i$i$i573 | $258 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i541 >> 2] = $261;
    if ($shl$i$i566 >>> 0 >= 8388609) {
     $262 = $add$i$i565;
     $263 = $shl$i$i566;
     $cond229 = $ret$0$i544;
     break;
    } else {
     $253 = $add$i$i565;
     $254 = $shl$i$i566;
     $255 = $382;
     $258 = $cond$i$i$i573;
    }
   }
  } while (0);
  $sub$i586 = 32 - (Math_clz32($263 | 0) | 0) | 0;
  $shr$i588 = $263 >>> ($sub$i586 + -16 | 0);
  $shr3$i589 = $shr$i588 >>> 12;
  $sub234 = $shl157 - ((Math_imul($sub$i586, -8) | 0) + ($262 << 3) + (($shr$i588 >>> 0 > (HEAP32[5744 + ($shr3$i589 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i589)) + -1 | 0;
  $266 = $LM$0541$lcssa >>> 0 > 1 & $tobool136 & ($sub234 | 0) >= (($LM$0541$lcssa << 3) + 16 | 0);
  $spec$select473 = $266 ? 8 : 0;
  $vla247799 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $vla248800 = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $call249 = _clt_compute_allocation(43640, $5, $6, $vla156797, $vla155796, $cond229, $intensity, $dual_stereo, $sub234 - $spec$select473 | 0, $balance, $vla247799, $vla221798, $vla248800, $1, $LM$0541$lcssa, $dec$addr$0, 0, 0, 0) | 0;
  $end_window$i$i = $dec$addr$0 + 12 | 0;
  $nend_bits$i$i = $dec$addr$0 + 16 | 0;
  $end_offs$i$i$i = $dec$addr$0 + 8 | 0;
  $i$014$i = $5;
  do {
   $267 = HEAP32[$vla221798 + ($i$014$i << 2) >> 2] | 0;
   if (($267 | 0) >= 1) {
    $conv4$i = +(1 << 14 - $267 | 0);
    $268 = HEAP32[$nend_bits$i$i >> 2] | 0;
    $383 = HEAP32[$end_window$i$i >> 2] | 0;
    $c$0$i604 = 0;
    do {
     if ($268 >>> 0 < $267 >>> 0) {
      $272 = (($268 | 0) > 17 ? $268 : 17) + 7 - $268 & -8;
      $$pre21$i$i = HEAP32[$storage$i240 >> 2] | 0;
      $273 = HEAP32[$end_offs$i$i$i >> 2] | 0;
      $available$0$i$i = $268;
      $window$0$i$i = $383;
      while (1) {
       if ($273 >>> 0 < $$pre21$i$i >>> 0) {
        $274 = HEAP32[$dec$addr$0 >> 2] | 0;
        $inc$i$i$i613 = $273 + 1 | 0;
        HEAP32[$end_offs$i$i$i >> 2] = $inc$i$i$i613;
        $384 = $inc$i$i$i613;
        $cond$i$i$i618 = HEAPU8[$274 + ($$pre21$i$i - $inc$i$i$i613) >> 0] | 0;
       } else {
        $384 = $273;
        $cond$i$i$i618 = 0;
       }
       $window$0$i$i = $cond$i$i$i618 << $available$0$i$i | $window$0$i$i;
       if (($available$0$i$i | 0) >= 17) break; else {
        $273 = $384;
        $available$0$i$i = $available$0$i$i + 8 | 0;
       }
      }
      $available$1$i$i = $268 + $272 + 8 | 0;
      $window$1$i$i = $window$0$i$i;
     } else {
      $available$1$i$i = $268;
      $window$1$i$i = $383;
     }
     $383 = $window$1$i$i >>> $267;
     $268 = $available$1$i$i - $267 | 0;
     HEAP32[$end_window$i$i >> 2] = $383;
     HEAP32[$nend_bits$i$i >> 2] = $268;
     HEAP32[$dec$addr$0$idx440 >> 2] = (HEAP32[$dec$addr$0$idx440 >> 2] | 0) + $267;
     $arrayidx9$i635 = $add$ptr9 + (($c$0$i604 * 21 | 0) + $i$014$i << 2) | 0;
     HEAPF32[$arrayidx9$i635 >> 2] = +HEAPF32[$arrayidx9$i635 >> 2] + ((+($window$1$i$i & (1 << $267) + -1 | 0) + .5) * $conv4$i * .00006103515625 + -.5);
     $c$0$i604 = $c$0$i604 + 1 | 0;
    } while (($c$0$i604 | 0) < ($1 | 0));
   }
   $i$014$i = $i$014$i + 1 | 0;
  } while (($i$014$i | 0) != ($6 | 0));
  $mul257 = 8432 - ($mul << 2) | 0;
  $c$1 = 0;
  do {
   $280 = HEAP32[$decode_mem + ($c$1 << 2) >> 2] | 0;
   _memmove($280 | 0, $280 + ($mul << 2) | 0, $mul257 | 0) | 0;
   $c$1 = $c$1 + 1 | 0;
  } while (($c$1 | 0) < ($0 | 0));
  $mul268 = $1 * 21 | 0;
  $vla269 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $mul268 | 0) + 15 & -16) | 0;
  $vla271$alloca_mul = (Math_imul($mul, $1) | 0) << 2;
  $vla271 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla271$alloca_mul | 0) + 15 & -16) | 0;
  $rng = $st + 40 | 0;
  _quant_all_bands(0, 43640, $5, $6, $vla271, ($1 | 0) == 2 ? $vla271 + ($mul << 2) | 0 : 0, $vla269, 0, $vla247799, $shl21$, $spread_decision$0, HEAP32[$dual_stereo >> 2] | 0, HEAP32[$intensity >> 2] | 0, $vla795, $shl157 - $spec$select473 | 0, HEAP32[$balance >> 2] | 0, $dec$addr$0, $LM$0541$lcssa, $call249, $rng, 0, HEAP32[$arch$i >> 2] | 0, HEAP32[$st + 32 >> 2] | 0);
  do if ($266) {
   $end_window$i640 = $dec$addr$0 + 12 | 0;
   $286 = HEAP32[$end_window$i640 >> 2] | 0;
   $nend_bits$i641 = $dec$addr$0 + 16 | 0;
   $287 = HEAP32[$nend_bits$i641 >> 2] | 0;
   if (!$287) {
    $end_offs$i$i643 = $dec$addr$0 + 8 | 0;
    $$pre$i647 = HEAP32[$end_offs$i$i643 >> 2] | 0;
    $$pre21$i648 = HEAP32[$storage$i240 >> 2] | 0;
    if ($$pre$i647 >>> 0 < $$pre21$i648 >>> 0) {
     $288 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i654 = $$pre$i647 + 1 | 0;
     HEAP32[$end_offs$i$i643 >> 2] = $inc$i$i654;
     $290 = $inc$i$i654;
     $cond$i$i659 = HEAPU8[$288 + ($$pre21$i648 - $inc$i$i654) >> 0] | 0;
    } else {
     $290 = $$pre$i647;
     $cond$i$i659 = 0;
    }
    if ($290 >>> 0 < $$pre21$i648 >>> 0) {
     $341 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i654$1 = $290 + 1 | 0;
     HEAP32[$end_offs$i$i643 >> 2] = $inc$i$i654$1;
     $343 = $inc$i$i654$1;
     $cond$i$i659$1 = HEAPU8[$341 + ($$pre21$i648 - $inc$i$i654$1) >> 0] | 0;
    } else {
     $343 = $290;
     $cond$i$i659$1 = 0;
    }
    if ($343 >>> 0 < $$pre21$i648 >>> 0) {
     $344 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i654$2 = $343 + 1 | 0;
     HEAP32[$end_offs$i$i643 >> 2] = $inc$i$i654$2;
     $346 = $inc$i$i654$2;
     $cond$i$i659$2 = HEAPU8[$344 + ($$pre21$i648 - $inc$i$i654$2) >> 0] | 0;
    } else {
     $346 = $343;
     $cond$i$i659$2 = 0;
    }
    if ($346 >>> 0 < $$pre21$i648 >>> 0) {
     $347 = HEAP32[$dec$addr$0 >> 2] | 0;
     $inc$i$i654$3 = $346 + 1 | 0;
     HEAP32[$end_offs$i$i643 >> 2] = $inc$i$i654$3;
     $cond$i$i659$3 = HEAPU8[$347 + ($$pre21$i648 - $inc$i$i654$3) >> 0] | 0;
    } else $cond$i$i659$3 = 0;
    $available$1$i666 = 32;
    $window$1$i667 = $cond$i$i659$3 << 24 | ($cond$i$i659$2 << 16 | ($cond$i$i659$1 << 8 | ($cond$i$i659 | $286)));
   } else {
    $available$1$i666 = $287;
    $window$1$i667 = $286;
   }
   HEAP32[$end_window$i640 >> 2] = $window$1$i667 >>> 1;
   HEAP32[$nend_bits$i641 >> 2] = $available$1$i666 + -1;
   $add6$i672 = (HEAP32[$dec$addr$0$idx440 >> 2] | 0) + 1 | 0;
   HEAP32[$dec$addr$0$idx440 >> 2] = $add6$i672;
   _unquant_energy_finalise(43640, $5, $6, $add$ptr9, $vla221798, $vla248800, $mul80 + 32 - $add6$i672 - (Math_clz32(HEAP32[$dec$addr$0$idx441 >> 2] | 0) | 0) | 0, $dec$addr$0, $1);
   if (!($window$1$i667 & 1)) break;
   $cmp72$i = ($LM$0541$lcssa | 0) == 3;
   $295 = HEAP16[5776 + ($5 << 1) >> 1] | 0;
   $i$092$i = $5;
   $seed$addr$093$i = HEAP32[$rng >> 2] | 0;
   while (1) {
    $i$092$i$looptemp = $i$092$i;
    $i$092$i = $i$092$i + 1 | 0;
    $295$looptemp = $295;
    $295 = HEAP16[5776 + ($i$092$i << 1) >> 1] | 0;
    $arrayidx2$i681 = 5776 + ($i$092$i$looptemp << 1) | 0;
    $sub$i683 = ($295 << 16 >> 16) - ($295$looptemp << 16 >> 16) | 0;
    $mul18$i = +Math_exp(+(+(((((HEAP32[$vla247799 + ($i$092$i$looptemp << 2) >> 2] | 0) + 1 | 0) >>> 0) / ($sub$i683 >>> 0) | 0) >>> $LM$0541$lcssa | 0) * -.125 * .6931471805599453)) * .5;
    $shl$i687 = $sub$i683 << $LM$0541$lcssa;
    $div$i = 1.0 / +Math_sqrt(+(+($shl$i687 | 0)));
    $mul95$i = Math_imul($i$092$i$looptemp, $1) | 0;
    $cmp10280$i = ($sub$i683 | 0) > 0;
    $cmp6$i$i$i = ($shl$i687 | 0) < 1;
    $c$0$i689 = 0;
    $seed$addr$1$i = $seed$addr$093$i;
    while (1) {
     $add22$i = ($c$0$i689 * 21 | 0) + $i$092$i$looptemp | 0;
     $299 = +HEAPF32[$add$ptr11 + ($add22$i << 2) >> 2];
     $300 = +HEAPF32[$add$ptr13 + ($add22$i << 2) >> 2];
     if ($cmp60) {
      $add31$i = $i$092$i$looptemp + 21 | 0;
      $301 = +HEAPF32[$add$ptr11 + ($add31$i << 2) >> 2];
      $302 = +HEAPF32[$add$ptr13 + ($add31$i << 2) >> 2];
      $prev1$0$i = $299 > $301 ? $299 : $301;
      $prev2$0$i = $300 > $302 ? $300 : $302;
     } else {
      $prev1$0$i = $299;
      $prev2$0$i = $300;
     }
     $sub60$i = +HEAPF32[$add$ptr9 + ($add22$i << 2) >> 2] - ($prev1$0$i < $prev2$0$i ? $prev1$0$i : $prev2$0$i);
     $mul71$i = +Math_exp(+(-($sub60$i < 0.0 ? 0.0 : $sub60$i) * .6931471805599453)) * 2.0;
     $spec$select$i693 = $cmp72$i ? $mul71$i * 1.4142135381698608 : $mul71$i;
     $mul83$i = $div$i * ($mul18$i < $spec$select$i693 ? $mul18$i : $spec$select$i693);
     $add$ptr$i = $vla271 + ((Math_imul($c$0$i689, $mul) | 0) << 2) | 0;
     $add$ptr89$i = $add$ptr$i + (HEAP16[$arrayidx2$i681 >> 1] << $LM$0541$lcssa << 2) | 0;
     $sub110$i = -$mul83$i;
     $conv98$us$i = HEAPU8[$vla269 + ($c$0$i689 + $mul95$i) >> 0] | 0;
     if ($cmp10280$i) {
      $k$084$us$i = 0;
      $renormalize$088$us$i = 0;
      $seed$addr$287$us$i = $seed$addr$1$i;
      while (1) {
       if (!(1 << $k$084$us$i & $conv98$us$i)) {
        $j$081$us$i = 0;
        $seed$addr$382$us$i = $seed$addr$287$us$i;
        while (1) {
         $add$i$us$i = (Math_imul($seed$addr$382$us$i, 1664525) | 0) + 1013904223 | 0;
         HEAPF32[$add$ptr89$i + (($j$081$us$i << $LM$0541$lcssa) + $k$084$us$i << 2) >> 2] = ($add$i$us$i & 32768 | 0) == 0 ? $sub110$i : $mul83$i;
         $j$081$us$i = $j$081$us$i + 1 | 0;
         if (($j$081$us$i | 0) == ($sub$i683 | 0)) {
          $renormalize$1$us$i = 1;
          $seed$addr$4$us$i = $add$i$us$i;
          break;
         } else $seed$addr$382$us$i = $add$i$us$i;
        }
       } else {
        $renormalize$1$us$i = $renormalize$088$us$i;
        $seed$addr$4$us$i = $seed$addr$287$us$i;
       }
       $k$084$us$i = $k$084$us$i + 1 | 0;
       if (($k$084$us$i | 0) >= ($shl21 | 0)) {
        $renormalize$0$lcssa$i = $renormalize$1$us$i;
        $seed$addr$2$lcssa$i = $seed$addr$4$us$i;
        break;
       } else {
        $renormalize$088$us$i = $renormalize$1$us$i;
        $seed$addr$287$us$i = $seed$addr$4$us$i;
       }
      }
     } else {
      $k$084$i = 0;
      $renormalize$088$i = 0;
      while (1) {
       $renormalize$1$i = (1 << $k$084$i & $conv98$us$i | 0) == 0 ? 1 : $renormalize$088$i;
       $k$084$i = $k$084$i + 1 | 0;
       if (($k$084$i | 0) >= ($shl21 | 0)) {
        $renormalize$0$lcssa$i = $renormalize$1$i;
        $seed$addr$2$lcssa$i = $seed$addr$1$i;
        break;
       } else $renormalize$088$i = $renormalize$1$i;
      }
     }
     if (!(($renormalize$0$lcssa$i | 0) == 0 | $cmp6$i$i$i)) {
      $i$07$i$i$i = 0;
      $xy$08$i$i$i = 0.0;
      do {
       $307 = +HEAPF32[$add$ptr89$i + ($i$07$i$i$i << 2) >> 2];
       $xy$08$i$i$i = $xy$08$i$i$i + $307 * $307;
       $i$07$i$i$i = $i$07$i$i$i + 1 | 0;
      } while (($i$07$i$i$i | 0) != ($shl$i687 | 0));
      $div$i1$i = 1.0 / +Math_sqrt(+($xy$08$i$i$i + 1.0000000036274937e-15));
      $i$013$i$i = 0;
      $xptr$014$i$i = $add$ptr89$i;
      while (1) {
       HEAPF32[$xptr$014$i$i >> 2] = $div$i1$i * +HEAPF32[$xptr$014$i$i >> 2];
       $i$013$i$i = $i$013$i$i + 1 | 0;
       if (($i$013$i$i | 0) == ($shl$i687 | 0)) break; else $xptr$014$i$i = $xptr$014$i$i + 4 | 0;
      }
     }
     $c$0$i689 = $c$0$i689 + 1 | 0;
     if (($c$0$i689 | 0) >= ($1 | 0)) break; else $seed$addr$1$i = $seed$addr$2$lcssa$i;
    }
    if (($i$092$i | 0) == ($6 | 0)) break; else $seed$addr$093$i = $seed$addr$2$lcssa$i;
   }
  } else _unquant_energy_finalise(43640, $5, $6, $add$ptr9, $vla221798, $vla248800, $mul80 + 32 - (HEAP32[$dec$addr$0$idx440 >> 2] | 0) - (Math_clz32(HEAP32[$dec$addr$0$idx441 >> 2] | 0) | 0) | 0, $dec$addr$0, $1); while (0);
  if ($tobool462 & ($1 | 0) > 0) {
   $i$2515 = 0;
   do {
    HEAPF32[$add$ptr9 + ($i$2515 << 2) >> 2] = -28.0;
    $i$2515 = $i$2515 + 1 | 0;
   } while (($i$2515 | 0) != ($mul268 | 0));
  }
  _celt_synthesis(43640, $vla271, $out_syn, $add$ptr9, $5, $spec$select, $1, $0, $isTransient$0, $LM$0541$lcssa, HEAP32[$downsample$i >> 2] | 0, $silence$0460);
  $postfilter_gain_old = $st + 72 | 0;
  $postfilter_gain331 = $st + 68 | 0;
  if ($cmp$i) {
   $c$2$us = 0;
   do {
    $312 = HEAP32[$postfilter_period$i >> 2] | 0;
    $spec$select423$us = ($312 | 0) > 15 ? $312 : 15;
    HEAP32[$postfilter_period$i >> 2] = $spec$select423$us;
    $313 = HEAP32[$postfilter_period_old$i >> 2] | 0;
    $cond324$us = ($313 | 0) > 15 ? $313 : 15;
    HEAP32[$postfilter_period_old$i >> 2] = $cond324$us;
    $314 = HEAP32[$out_syn + ($c$2$us << 2) >> 2] | 0;
    _comb_filter($314, $314, $cond324$us, $spec$select423$us, 120, +HEAPF32[$postfilter_gain_old >> 2], +HEAPF32[$postfilter_gain331 >> 2], HEAP32[$postfilter_tapset_old$i >> 2] | 0, HEAP32[$postfilter_tapset$i >> 2] | 0, 6112, 120);
    $add$ptr339$us = $314 + 480 | 0;
    _comb_filter($add$ptr339$us, $add$ptr339$us, HEAP32[$postfilter_period$i >> 2] | 0, $postfilter_pitch$1, $mul + -120 | 0, +HEAPF32[$postfilter_gain331 >> 2], $postfilter_gain$1, HEAP32[$postfilter_tapset$i >> 2] | 0, $postfilter_tapset$2, 6112, 120);
    $c$2$us = $c$2$us + 1 | 0;
   } while (($c$2$us | 0) < ($0 | 0));
  } else {
   $c$2 = 0;
   do {
    $322 = HEAP32[$postfilter_period$i >> 2] | 0;
    $spec$select423 = ($322 | 0) > 15 ? $322 : 15;
    HEAP32[$postfilter_period$i >> 2] = $spec$select423;
    $323 = HEAP32[$postfilter_period_old$i >> 2] | 0;
    $cond324 = ($323 | 0) > 15 ? $323 : 15;
    HEAP32[$postfilter_period_old$i >> 2] = $cond324;
    $324 = HEAP32[$out_syn + ($c$2 << 2) >> 2] | 0;
    _comb_filter($324, $324, $cond324, $spec$select423, 120, +HEAPF32[$postfilter_gain_old >> 2], +HEAPF32[$postfilter_gain331 >> 2], HEAP32[$postfilter_tapset_old$i >> 2] | 0, HEAP32[$postfilter_tapset$i >> 2] | 0, 6112, 120);
    $c$2 = $c$2 + 1 | 0;
   } while (($c$2 | 0) < ($0 | 0));
  }
  HEAP32[$postfilter_period_old$i >> 2] = HEAP32[$postfilter_period$i >> 2];
  HEAP32[$postfilter_gain_old >> 2] = HEAP32[$postfilter_gain331 >> 2];
  HEAP32[$postfilter_tapset_old$i >> 2] = HEAP32[$postfilter_tapset$i >> 2];
  HEAP32[$postfilter_period$i >> 2] = $postfilter_pitch$1;
  HEAPF32[$postfilter_gain331 >> 2] = $postfilter_gain$1;
  HEAP32[$postfilter_tapset$i >> 2] = $postfilter_tapset$2;
  if ($cmp$i) {
   HEAP32[$postfilter_period_old$i >> 2] = $postfilter_pitch$1;
   HEAPF32[$postfilter_gain_old >> 2] = $postfilter_gain$1;
   HEAP32[$postfilter_tapset_old$i >> 2] = $postfilter_tapset$2;
  }
  if ($cmp60) {
   dest = $add$ptr9 + 84 | 0;
   src = $add$ptr9;
   stop = dest + 84 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  }
  if ($tobool136) {
   $i$4511 = 0;
   do {
    $arrayidx441 = $add$ptr11 + ($i$4511 << 2) | 0;
    $335 = +HEAPF32[$arrayidx441 >> 2];
    $336 = +HEAPF32[$add$ptr9 + ($i$4511 << 2) >> 2];
    HEAPF32[$arrayidx441 >> 2] = $335 < $336 ? $335 : $336;
    $i$4511 = $i$4511 + 1 | 0;
   } while (($i$4511 | 0) != 42);
  } else {
   _memcpy($add$ptr13 | 0, $add$ptr11 | 0, 168) | 0;
   _memcpy($add$ptr11 | 0, $add$ptr9 | 0, 168) | 0;
   $max_background_increase$0 = (HEAP32[$loss_count >> 2] | 0) < 10 ? +($shl21 | 0) * 1.0000000474974513e-03 : 1.0;
   $i$3513 = 0;
   do {
    $arrayidx419 = $add$ptr15 + ($i$3513 << 2) | 0;
    $add420 = $max_background_increase$0 + +HEAPF32[$arrayidx419 >> 2];
    $334 = +HEAPF32[$add$ptr9 + ($i$3513 << 2) >> 2];
    HEAPF32[$arrayidx419 >> 2] = $add420 < $334 ? $add420 : $334;
    $i$3513 = $i$3513 + 1 | 0;
   } while (($i$3513 | 0) != 42);
  }
  $cmp474480 = ($6 | 0) < 21;
  do if (($5 | 0) > 0) {
   $i$5479$us = 0;
   do {
    HEAPF32[$add$ptr9 + ($i$5479$us << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr13 + ($i$5479$us << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr11 + ($i$5479$us << 2) >> 2] = -28.0;
    $i$5479$us = $i$5479$us + 1 | 0;
   } while (($i$5479$us | 0) != ($5 | 0));
   if ($cmp474480) {
    $i$6481$us = $6;
    do {
     HEAPF32[$add$ptr9 + ($i$6481$us << 2) >> 2] = 0.0;
     HEAPF32[$add$ptr13 + ($i$6481$us << 2) >> 2] = -28.0;
     HEAPF32[$add$ptr11 + ($i$6481$us << 2) >> 2] = -28.0;
     $i$6481$us = $i$6481$us + 1 | 0;
    } while (($i$6481$us | 0) != 21);
   }
   $i$5479$us$1 = 0;
   do {
    $add462$us$1 = $i$5479$us$1 + 21 | 0;
    HEAPF32[$add$ptr9 + ($add462$us$1 << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr13 + ($add462$us$1 << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr11 + ($add462$us$1 << 2) >> 2] = -28.0;
    $i$5479$us$1 = $i$5479$us$1 + 1 | 0;
   } while (($i$5479$us$1 | 0) != ($5 | 0));
   if (!$cmp474480) break;
   $i$6481$us$1 = $6;
   do {
    $add478$us$1 = $i$6481$us$1 + 21 | 0;
    HEAPF32[$add$ptr9 + ($add478$us$1 << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr13 + ($add478$us$1 << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr11 + ($add478$us$1 << 2) >> 2] = -28.0;
    $i$6481$us$1 = $i$6481$us$1 + 1 | 0;
   } while (($i$6481$us$1 | 0) != 21);
  } else {
   if (!$cmp474480) break;
   $i$6481$us489 = $6;
   do {
    HEAPF32[$add$ptr9 + ($i$6481$us489 << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr13 + ($i$6481$us489 << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr11 + ($i$6481$us489 << 2) >> 2] = -28.0;
    $i$6481$us489 = $i$6481$us489 + 1 | 0;
   } while (($i$6481$us489 | 0) != 21);
   $i$6481$us489$1 = $6;
   do {
    $add478$us490$1 = $i$6481$us489$1 + 21 | 0;
    HEAPF32[$add$ptr9 + ($add478$us490$1 << 2) >> 2] = 0.0;
    HEAPF32[$add$ptr13 + ($add478$us490$1 << 2) >> 2] = -28.0;
    HEAPF32[$add$ptr11 + ($add478$us490$1 << 2) >> 2] = -28.0;
    $i$6481$us489$1 = $i$6481$us489$1 + 1 | 0;
   } while (($i$6481$us489$1 | 0) != 21);
  } while (0);
  HEAP32[$rng >> 2] = HEAP32[$dec$addr$0$idx441 >> 2];
  _deemphasis($out_syn, $pcm, $mul, $0, HEAP32[$downsample$i >> 2] | 0, 43656, $st + 84 | 0);
  HEAP32[$loss_count >> 2] = 0;
  if (((HEAP32[$dec$addr$0$idx440 >> 2] | 0) + -32 + (Math_clz32(HEAP32[$dec$addr$0$idx441 >> 2] | 0) | 0) | 0) > ($mul80 | 0)) $retval$0 = -3; else {
   if (HEAP32[$dec$addr$0 + 44 >> 2] | 0) HEAP32[$st + 44 >> 2] = 1;
   $retval$0 = ($mul | 0) / (HEAP32[$downsample$i >> 2] | 0) | 0;
  }
  _llvm_stackrestore($169 | 0);
  $retval$1 = $retval$0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 return 0;
}

function _silk_Encode($encState, $encControl, $samplesIn, $nSamplesIn, $psRangeEnc, $nBytesOut, $prefillFlag, $activity) {
 $encState = $encState | 0;
 $encControl = $encControl | 0;
 $samplesIn = $samplesIn | 0;
 $nSamplesIn = $nSamplesIn | 0;
 $psRangeEnc = $psRangeEnc | 0;
 $nBytesOut = $nBytesOut | 0;
 $prefillFlag = $prefillFlag | 0;
 $activity = $activity | 0;
 var $$lcssa510 = 0, $$lcssa514 = 0, $$lcssa517 = 0, $$lcssa517612 = 0, $$pre$phi152Z2D = 0, $$pre$phi155Z2D = 0, $$pre$phi608Z2D = 0, $$sink$i = 0, $$sink$i115 = 0, $$sink$i77 = 0, $$sink$i89 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $110 = 0, $111 = 0, $114 = 0, $116 = 0, $118 = 0, $124 = 0, $126 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $141 = 0, $143 = 0, $144 = 0, $150 = 0, $151 = 0, $155 = 0, $156 = 0, $159 = 0, $16 = 0, $160 = 0, $165 = 0, $168 = 0, $172 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $187 = 0, $190 = 0, $191 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $204 = 0, $206 = 0, $21 = 0, $212 = 0, $213 = 0, $217 = 0, $221 = 0, $223 = 0, $23 = 0, $232 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $241 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $53 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $76 = 0, $81 = 0, $91 = 0, $92 = 0, $93 = 0, $API_fs_Hz = 0, $API_sampleRate$i = 0, $LBRR_flags644 = 0, $LBRR_symbol$0$lcssa = 0, $LBRR_symbol$0531 = 0, $MStargetRates_bps = 0, $TargetRate_bps$0 = 0, $TargetRate_bps$1 = 0, $TargetRate_bps$addr$0$i = 0, $TargetRate_bps$addr$0$i98 = 0, $VAD_flags = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$i55 = 0, $add359 = 0, $add426 = 0, $add464 = 0, $add496 = 0, $add77$i = 0, $add8$i$i = 0, $allowBandwidthSwitch = 0, $and$i$i$i = 0, $arch89 = 0, $arch89$us = 0, $arraydecay640 = 0, $arraydecay705 = 0, $arrayidx1003 = 0, $arrayidx1018 = 0, $arrayidx1018$us = 0, $arrayidx2$i = 0, $arrayidx428 = 0, $arrayidx6 = 0, $arrayidx645 = 0, $arrayidx650 = 0, $arrayidx807 = 0, $arrayidx812 = 0, $arrayidx952 = 0, $bitRate = 0, $bound$0$i = 0, $bound$0$i102 = 0, $call148 = 0, $call148$us = 0, $channelRate_bps$0 = 0, $channelRate_bps$0$us = 0, $cmp$i56 = 0, $cmp1004$us = 0, $cmp245526 = 0, $cmp73 = 0, $cmp962 = 0, $cmp965 = 0, $cmp971 = 0, $cmp980 = 0, $cmp992 = 0, $complexity$i = 0, $cond = 0, $cond$i108 = 0, $cond$i87 = 0, $cond1240 = 0, $cond145 = 0, $cond145$us = 0, $cond223 = 0, $cond797 = 0, $condCoding1016$0 = 0, $condCoding1016$0$us = 0, $conv1266 = 0, $conv19$i = 0, $conv6$i = 0, $curr_block$0 = 0, $div = 0, $div$i = 0, $div212 = 0, $div234 = 0, $div715 = 0, $div725 = 0, $div969$us = 0, $error$i = 0, $first_frame_after_reset887 = 0, $flags$0$lcssa = 0, $flags$0557 = 0, $frame_length = 0, $frame_length289 = 0, $fs_kHz142 = 0, $fs_kHz193 = 0, $i$0562 = 0, $i$0562$us = 0, $i$1532 = 0, $i$2541 = 0, $i$3553 = 0, $inDTX1134 = 0, $inDTX1144 = 0, $inputBuf329 = 0, $inputBuf483 = 0, $inputBufIx = 0, $inputBufIx293 = 0, $lagPrev = 0, $land$ext = 0, $land$ext$us = 0, $maxBits$0 = 0, $maxBits$1 = 0, $maxBits$1$us = 0, $maxBits961 = 0, $mid_only_flags = 0, $mul = 0, $mul1008 = 0, $mul1129 = 0, $mul197 = 0, $mul20$i = 0, $mul202 = 0, $mul228 = 0, $mul300 = 0, $mul353 = 0, $mul64$i = 0, $n$0572 = 0, $n$0572$us = 0, $n$10548 = 0, $n$10548$us = 0, $n$11558 = 0, $n$12521 = 0, $n$1570 = 0, $n$2564 = 0, $n$2564$us = 0, $n$3527 = 0, $n$4529 = 0, $n$5523 = 0, $n$6525 = 0, $n$7535 = 0, $n$8538 = 0, $n$8538$us = 0, $n$9545 = 0, $nBits$0 = 0, $nBitsExceeded = 0, $nBitsUsedLBRR718 = 0, $nChannelsInternal$i = 0, $nChannelsInternal14 = 0, $nFramesEncoded = 0, $nFramesEncoded1058 = 0, $nFramesEncoded1058$us = 0, $nFramesEncoded11 = 0, $nFramesPerPacket = 0, $nPrevChannelsInternal = 0, $nSamplesIn$addr$0 = 0, $noSpeechCounter$i = 0, $noSpeechCounter$i64 = 0, $offs$i = 0, $or = 0, $or1117 = 0, $payloadSize_ms$i = 0, $predIx = 0, $prevLag = 0, $prevLag$i = 0, $prev_decode_only_middle = 0, $prev_gain_Q16 = 0, $psRangeEnc$idx500 = 0, $psRangeEnc$idx501 = 0, $rem$i = 0, $resampler_state260 = 0, $resampler_state479 = 0, $retval$0$i$i$i$i = 0, $retval$2 = 0, $sCmn626 = 0, $sCmn626$us = 0, $sLP866 = 0, $sMid = 0, $sNSQ = 0, $sShape = 0, $sStereo802 = 0, $samplesIn$addr$0 = 0, $save_LP$sroa$0 = 0, $save_LP$sroa$0$0$$sroa_idx = 0, $save_LP$sroa$0$0$$sroa_idx20$us = 0, $save_LP$sroa$4$0 = 0, $shl$i = 0, $shl1100 = 0, $shl1100$lcssa = 0, $shl1100552 = 0, $shl1100554 = 0, $shl2$i = 0, $shl4$i = 0, $shr42$i = 0, $snr_table$0$i = 0, $snr_table$0$i103 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select175 = 0, $speech_activity_Q8 = 0, $speech_activity_Q8$i50 = 0, $sub = 0, $sub$i$i$i = 0, $sub$i$i$i$i = 0, $sub$i119 = 0, $sub1156 = 0, $sub13$i = 0, $sub13$i106 = 0, $sub294 = 0, $sub294$mul300 = 0, $sub46$i = 0, $sub660 = 0, $sub740 = 0, $sub991 = 0, $timeSinceSwitchAllowed_ms = 0, $tmp_complexity$0 = 0, $tmp_payloadSize_ms$0 = 0, $toMono = 0, $tobool68 = 0, $useCBR$0 = 0, $useCBR$0$us = 0, $useCBR$i = 0, $val$i = 0, $variable_HP_smth1_Q15$i48 = 0, $vla = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $MStargetRates_bps = sp + 16 | 0;
 $save_LP$sroa$0 = sp;
 if (HEAP32[$encControl + 68 >> 2] | 0) {
  HEAP32[$encState + 4664 >> 2] = 1;
  HEAP32[$encState + 14728 >> 2] = 1;
 }
 $arrayidx6 = $encState + 10064 | 0;
 $nFramesEncoded = $encState + 15812 | 0;
 HEAP32[$nFramesEncoded >> 2] = 0;
 $nFramesEncoded11 = $encState + 5748 | 0;
 HEAP32[$nFramesEncoded11 >> 2] = 0;
 $API_sampleRate$i = $encControl + 8 | 0;
 $1 = HEAP32[$API_sampleRate$i >> 2] | 0;
 L4 : do if (($1 | 0) < 24e3) {
  if (($1 | 0) < 12e3) {
   switch ($1 | 0) {
   case 8e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 52467, 62);
  }
  if (($1 | 0) < 16e3) {
   switch ($1 | 0) {
   case 12e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 52467, 62);
  } else {
   switch ($1 | 0) {
   case 16e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 52467, 62);
  }
 } else if (($1 | 0) < 44100) if (($1 | 0) < 32e3) {
  switch ($1 | 0) {
  case 24e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else {
  switch ($1 | 0) {
  case 32e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else if (($1 | 0) < 48e3) {
  switch ($1 | 0) {
  case 44100:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else {
  switch ($1 | 0) {
  case 48e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } while (0);
 $2 = HEAP32[$encControl + 20 >> 2] | 0;
 L30 : do if (($2 | 0) < 12e3) {
  switch ($2 | 0) {
  case 8e3:
   {
    break L30;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else if (($2 | 0) < 16e3) {
  switch ($2 | 0) {
  case 12e3:
   {
    break L30;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else {
  switch ($2 | 0) {
  case 16e3:
   {
    break L30;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } while (0);
 $3 = HEAP32[$encControl + 12 >> 2] | 0;
 L40 : do if (($3 | 0) < 12e3) {
  switch ($3 | 0) {
  case 8e3:
   {
    break L40;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else if (($3 | 0) < 16e3) {
  switch ($3 | 0) {
  case 12e3:
   {
    break L40;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else {
  switch ($3 | 0) {
  case 16e3:
   {
    break L40;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } while (0);
 $4 = HEAP32[$encControl + 16 >> 2] | 0;
 L50 : do if (($4 | 0) < 12e3) {
  switch ($4 | 0) {
  case 8e3:
   {
    break L50;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else if (($4 | 0) < 16e3) {
  switch ($4 | 0) {
  case 12e3:
   {
    break L50;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } else {
  switch ($4 | 0) {
  case 16e3:
   {
    break L50;
    break;
   }
  default:
   {}
  }
  _celt_fatal(56336, 52467, 62);
 } while (0);
 if (($4 | 0) > ($2 | 0)) _celt_fatal(56336, 52467, 62);
 if (($3 | 0) < ($2 | 0) | ($4 | 0) > ($3 | 0)) _celt_fatal(56336, 52467, 62);
 $payloadSize_ms$i = $encControl + 24 | 0;
 switch (HEAP32[$payloadSize_ms$i >> 2] | 0) {
 case 60:
 case 40:
 case 20:
 case 10:
  break;
 default:
  _celt_fatal(56336, 52467, 69);
 }
 if ((HEAP32[$encControl + 32 >> 2] | 0) >>> 0 > 100) _celt_fatal(56336, 52467, 73);
 if ((HEAP32[$encControl + 48 >> 2] | 0) >>> 0 > 1) _celt_fatal(56336, 52467, 77);
 $useCBR$i = $encControl + 52 | 0;
 if ((HEAP32[$useCBR$i >> 2] | 0) >>> 0 > 1) _celt_fatal(56336, 52467, 81);
 if ((HEAP32[$encControl + 40 >> 2] | 0) >>> 0 > 1) _celt_fatal(56336, 52467, 85);
 $14 = HEAP32[$encControl >> 2] | 0;
 if (($14 + -1 | 0) >>> 0 > 1) _celt_fatal(56336, 52467, 89);
 $nChannelsInternal$i = $encControl + 4 | 0;
 $16 = HEAP32[$nChannelsInternal$i >> 2] | 0;
 if (($16 + -1 | 0) >>> 0 > 1) _celt_fatal(56336, 52467, 93);
 if (($16 | 0) > ($14 | 0)) _celt_fatal(56336, 52467, 97);
 $complexity$i = $encControl + 36 | 0;
 if ((HEAP32[$complexity$i >> 2] | 0) >>> 0 > 10) _celt_fatal(56336, 52467, 101);
 HEAP32[$encControl + 88 >> 2] = 0;
 $nChannelsInternal14 = $encState + 20196 | 0;
 $20 = HEAP32[$nChannelsInternal14 >> 2] | 0;
 if (($16 | 0) > ($20 | 0)) {
  $21 = HEAP32[$encState + 5092 >> 2] | 0;
  _memset($arrayidx6 | 0, 0, 10064) | 0;
  HEAP32[$encState + 15156 >> 2] = $21;
  HEAP32[$encState + 10072 >> 2] = 193536;
  HEAP32[$encState + 10076 >> 2] = 193536;
  HEAP32[$encState + 14728 >> 2] = 1;
  dest = $encState + 10100 | 0;
  stop = dest + 60 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$encState + 10192 >> 2] = 50;
  HEAP32[$encState + 10196 >> 2] = 25;
  HEAP32[$encState + 10200 >> 2] = 16;
  HEAP32[$encState + 10204 >> 2] = 12;
  HEAP32[$encState + 10160 >> 2] = 5e3;
  HEAP32[$encState + 10176 >> 2] = 429496;
  HEAP32[$encState + 10164 >> 2] = 2500;
  HEAP32[$encState + 10180 >> 2] = 858993;
  HEAP32[$encState + 10168 >> 2] = 1600;
  HEAP32[$encState + 10184 >> 2] = 1342177;
  HEAP32[$encState + 10172 >> 2] = 1200;
  HEAP32[$encState + 10188 >> 2] = 1789569;
  HEAP32[$encState + 10208 >> 2] = 15;
  HEAP32[$encState + 10140 >> 2] = 25600;
  HEAP32[$encState + 10144 >> 2] = 25600;
  HEAP32[$encState + 10148 >> 2] = 25600;
  HEAP32[$encState + 10152 >> 2] = 25600;
  HEAP32[$encState + 20128 >> 2] = 0;
  HEAP32[$encState + 20136 >> 2] = 0;
  HEAP32[$encState + 20140 >> 2] = 0;
  HEAP32[$encState + 20144 >> 2] = 1;
  HEAP32[$encState + 20148 >> 2] = 0;
  HEAP32[$encState + 20152 >> 2] = 1;
  HEAP16[$encState + 20158 >> 1] = 0;
  HEAP16[$encState + 20156 >> 1] = 16384;
  if ((HEAP32[$encState + 20192 >> 2] | 0) == 2) {
   _memcpy($encState + 15840 | 0, $encState + 5776 | 0, 300) | 0;
   $23 = $encState;
   $28 = HEAP32[$23 + 4 >> 2] | 0;
   $29 = $arrayidx6;
   HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$29 + 4 >> 2] = $28;
  }
 }
 $33 = HEAP32[$payloadSize_ms$i >> 2] | 0;
 $35 = HEAP32[$nChannelsInternal$i >> 2] | 0;
 $36 = ($20 | 0) != ($35 | 0) ? 1 : ($33 | 0) != (HEAP32[$encState + 4612 >> 2] | 0);
 HEAP32[$encState + 20192 >> 2] = HEAP32[$encControl >> 2];
 HEAP32[$nChannelsInternal14 >> 2] = $35;
 $mul = $nSamplesIn * 100 | 0;
 $38 = HEAP32[$API_sampleRate$i >> 2] | 0;
 $div = ($mul | 0) / ($38 | 0) | 0;
 $cond = ($div | 0) > 1 ? $div >> 1 : 1;
 $tobool68 = ($prefillFlag | 0) != 0;
 if ($tobool68) {
  if (($div | 0) != 1) _celt_fatal(56336, 50758, 206);
  $cmp73 = ($prefillFlag | 0) == 2;
  if ($cmp73) {
   $save_LP$sroa$0$0$$sroa_idx = $encState + 16 | 0;
   HEAP32[$save_LP$sroa$0 >> 2] = HEAP32[$save_LP$sroa$0$0$$sroa_idx >> 2];
   HEAP32[$save_LP$sroa$0 + 4 >> 2] = HEAP32[$save_LP$sroa$0$0$$sroa_idx + 4 >> 2];
   HEAP32[$save_LP$sroa$0 + 8 >> 2] = HEAP32[$save_LP$sroa$0$0$$sroa_idx + 8 >> 2];
   HEAP32[$save_LP$sroa$0 + 12 >> 2] = HEAP32[$save_LP$sroa$0$0$$sroa_idx + 12 >> 2];
   $save_LP$sroa$4$0 = HEAP32[$encState + 4576 >> 2] | 0;
  } else $save_LP$sroa$4$0 = 0;
  do if (($35 | 0) > 0) {
   if ($cmp73) {
    $n$0572$us = 0;
    do {
     $arch89$us = $encState + ($n$0572$us * 10064 | 0) + 5092 | 0;
     $41 = HEAP32[$arch89$us >> 2] | 0;
     _memset($encState + ($n$0572$us * 10064 | 0) | 0, 0, 10064) | 0;
     HEAP32[$arch89$us >> 2] = $41;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 8 >> 2] = 193536;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 12 >> 2] = 193536;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 4664 >> 2] = 1;
     dest = $encState + ($n$0572$us * 10064 | 0) + 36 | 0;
     stop = dest + 60 | 0;
     do {
      HEAP32[dest >> 2] = 0;
      dest = dest + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 128 >> 2] = 50;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 132 >> 2] = 25;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 136 >> 2] = 16;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 140 >> 2] = 12;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 96 >> 2] = 5e3;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 112 >> 2] = 429496;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 100 >> 2] = 2500;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 116 >> 2] = 858993;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 104 >> 2] = 1600;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 120 >> 2] = 1342177;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 108 >> 2] = 1200;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 124 >> 2] = 1789569;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 144 >> 2] = 15;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 76 >> 2] = 25600;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 80 >> 2] = 25600;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 84 >> 2] = 25600;
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 88 >> 2] = 25600;
     $save_LP$sroa$0$0$$sroa_idx20$us = $encState + ($n$0572$us * 10064 | 0) + 16 | 0;
     HEAP32[$save_LP$sroa$0$0$$sroa_idx20$us >> 2] = HEAP32[$save_LP$sroa$0 >> 2];
     HEAP32[$save_LP$sroa$0$0$$sroa_idx20$us + 4 >> 2] = HEAP32[$save_LP$sroa$0 + 4 >> 2];
     HEAP32[$save_LP$sroa$0$0$$sroa_idx20$us + 8 >> 2] = HEAP32[$save_LP$sroa$0 + 8 >> 2];
     HEAP32[$save_LP$sroa$0$0$$sroa_idx20$us + 12 >> 2] = HEAP32[$save_LP$sroa$0 + 12 >> 2];
     HEAP32[$encState + ($n$0572$us * 10064 | 0) + 32 >> 2] = $save_LP$sroa$4$0;
     $n$0572$us = $n$0572$us + 1 | 0;
     $42 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    } while (($n$0572$us | 0) < ($42 | 0));
    $$lcssa517 = $42;
   } else {
    $n$0572 = 0;
    do {
     $arch89 = $encState + ($n$0572 * 10064 | 0) + 5092 | 0;
     $43 = HEAP32[$arch89 >> 2] | 0;
     _memset($encState + ($n$0572 * 10064 | 0) | 0, 0, 10064) | 0;
     HEAP32[$arch89 >> 2] = $43;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 8 >> 2] = 193536;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 12 >> 2] = 193536;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 4664 >> 2] = 1;
     dest = $encState + ($n$0572 * 10064 | 0) + 36 | 0;
     stop = dest + 60 | 0;
     do {
      HEAP32[dest >> 2] = 0;
      dest = dest + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 128 >> 2] = 50;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 132 >> 2] = 25;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 136 >> 2] = 16;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 140 >> 2] = 12;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 96 >> 2] = 5e3;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 112 >> 2] = 429496;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 100 >> 2] = 2500;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 116 >> 2] = 858993;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 104 >> 2] = 1600;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 120 >> 2] = 1342177;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 108 >> 2] = 1200;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 124 >> 2] = 1789569;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 144 >> 2] = 15;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 76 >> 2] = 25600;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 80 >> 2] = 25600;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 84 >> 2] = 25600;
     HEAP32[$encState + ($n$0572 * 10064 | 0) + 88 >> 2] = 25600;
     $n$0572 = $n$0572 + 1 | 0;
     $44 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    } while (($n$0572 | 0) < ($44 | 0));
    $$lcssa517 = $44;
   }
   $45 = HEAP32[$payloadSize_ms$i >> 2] | 0;
   HEAP32[$payloadSize_ms$i >> 2] = 10;
   $46 = HEAP32[$complexity$i >> 2] | 0;
   HEAP32[$complexity$i >> 2] = 0;
   if (($$lcssa517 | 0) <= 0) {
    $$lcssa517612 = $$lcssa517;
    $248 = $46;
    $249 = $45;
    break;
   }
   $n$1570 = 0;
   do {
    HEAP32[$encState + ($n$1570 * 10064 | 0) + 4668 >> 2] = 0;
    HEAP32[$encState + ($n$1570 * 10064 | 0) + 4680 >> 2] = 1;
    $n$1570 = $n$1570 + 1 | 0;
   } while (($n$1570 | 0) != ($$lcssa517 | 0));
   $$lcssa517612 = $$lcssa517;
   $248 = $46;
   $249 = $45;
  } else {
   HEAP32[$payloadSize_ms$i >> 2] = 10;
   $40 = HEAP32[$complexity$i >> 2] | 0;
   HEAP32[$complexity$i >> 2] = 0;
   $$lcssa517612 = $35;
   $248 = $40;
   $249 = $33;
  } while (0);
  $47 = $$lcssa517612;
  $tmp_complexity$0 = $248;
  $tmp_payloadSize_ms$0 = $249;
 } else {
  if (($nSamplesIn | 0) < 0 | (Math_imul($div, $38) | 0) != ($mul | 0)) _celt_fatal(56336, 50758, 235);
  if (($nSamplesIn * 1e3 | 0) > (Math_imul($38, $33) | 0)) _celt_fatal(56336, 50758, 241); else {
   $47 = $35;
   $tmp_complexity$0 = 0;
   $tmp_payloadSize_ms$0 = 0;
  }
 }
 $fs_kHz142 = $encState + 4576 | 0;
 do if (($47 | 0) > 0) {
  $allowBandwidthSwitch = $encState + 20208 | 0;
  $nFramesPerPacket = $encState + 5744 | 0;
  L128 : do if ($36) {
   $n$2564$us = 0;
   while (1) {
    if (($n$2564$us | 0) == 1) $cond145$us = HEAP32[$fs_kHz142 >> 2] | 0; else $cond145$us = 0;
    $call148$us = _silk_control_encoder($encState + ($n$2564$us * 10064 | 0) | 0, $encControl, HEAP32[$allowBandwidthSwitch >> 2] | 0, $n$2564$us, $cond145$us) | 0;
    if ($call148$us | 0) {
     $retval$2 = $call148$us;
     break;
    }
    if ((HEAP32[$nFramesPerPacket >> 2] | 0) > 0) {
     $i$0562$us = 0;
     do {
      HEAP32[$encState + ($n$2564$us * 10064 | 0) + 4724 + ($i$0562$us << 2) >> 2] = 0;
      $i$0562$us = $i$0562$us + 1 | 0;
     } while (($i$0562$us | 0) < (HEAP32[$nFramesPerPacket >> 2] | 0));
    }
    HEAP32[$encState + ($n$2564$us * 10064 | 0) + 6080 >> 2] = HEAP32[$encState + ($n$2564$us * 10064 | 0) + 6076 >> 2];
    $n$2564$us = $n$2564$us + 1 | 0;
    $53 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    if (($n$2564$us | 0) >= ($53 | 0)) {
     $$lcssa514 = $53;
     break L128;
    }
   }
   STACKTOP = sp;
   return $retval$2 | 0;
  } else {
   $n$2564 = 0;
   while (1) {
    if (($n$2564 | 0) == 1) $cond145 = HEAP32[$fs_kHz142 >> 2] | 0; else $cond145 = 0;
    $call148 = _silk_control_encoder($encState + ($n$2564 * 10064 | 0) | 0, $encControl, HEAP32[$allowBandwidthSwitch >> 2] | 0, $n$2564, $cond145) | 0;
    if ($call148 | 0) {
     $retval$2 = $call148;
     break;
    }
    do if (HEAP32[$encState + ($n$2564 * 10064 | 0) + 4664 >> 2] | 0) {
     if ((HEAP32[$nFramesPerPacket >> 2] | 0) <= 0) break;
     $i$0562 = 0;
     do {
      HEAP32[$encState + ($n$2564 * 10064 | 0) + 4724 + ($i$0562 << 2) >> 2] = 0;
      $i$0562 = $i$0562 + 1 | 0;
     } while (($i$0562 | 0) < (HEAP32[$nFramesPerPacket >> 2] | 0));
    } while (0);
    HEAP32[$encState + ($n$2564 * 10064 | 0) + 6080 >> 2] = HEAP32[$encState + ($n$2564 * 10064 | 0) + 6076 >> 2];
    $n$2564 = $n$2564 + 1 | 0;
    $60 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    if (($n$2564 | 0) >= ($60 | 0)) {
     $$lcssa514 = $60;
     break L128;
    }
   }
   STACKTOP = sp;
   return $retval$2 | 0;
  } while (0);
  if (($$lcssa514 | 0) != 1) {
   label = 72;
   break;
  }
  $$pre$phi152Z2D = $allowBandwidthSwitch;
  $$pre$phi155Z2D = $nFramesPerPacket;
  $$pre$phi608Z2D = $encState + 14640 | 0;
  $63 = HEAP32[$fs_kHz142 >> 2] | 0;
 } else label = 72; while (0);
 do if ((label | 0) == 72) {
  $61 = HEAP32[$fs_kHz142 >> 2] | 0;
  $fs_kHz193 = $encState + 14640 | 0;
  if (($61 | 0) == (HEAP32[$fs_kHz193 >> 2] | 0)) {
   $$pre$phi152Z2D = $encState + 20208 | 0;
   $$pre$phi155Z2D = $encState + 5744 | 0;
   $$pre$phi608Z2D = $fs_kHz193;
   $63 = $61;
   break;
  } else _celt_fatal(50773, 50758, 262);
 } while (0);
 $mul197 = $div * 10 | 0;
 $mul202 = Math_imul($63, $mul197) | 0;
 $API_fs_Hz = $encState + 4556 | 0;
 $div212 = (Math_imul($mul202, HEAP32[$API_fs_Hz >> 2] | 0) | 0) / ($63 * 1e3 | 0) | 0;
 $65 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($div212 << 1) | 0) + 15 & -16) | 0;
 $frame_length = $encState + 4584 | 0;
 $inputBufIx = $encState + 5740 | 0;
 $resampler_state479 = $encState + 5776 | 0;
 $inputBuf483 = $encState + 5096 | 0;
 $nPrevChannelsInternal = $encState + 20200 | 0;
 $resampler_state260 = $encState + 15840 | 0;
 $frame_length289 = $encState + 14648 | 0;
 $inputBufIx293 = $encState + 15804 | 0;
 $inputBuf329 = $encState + 15160 | 0;
 $bitRate = $encControl + 28 | 0;
 $nBitsExceeded = $encState + 20188 | 0;
 $nBitsUsedLBRR718 = $encState + 20184 | 0;
 $predIx = $encState + 20162 | 0;
 $LBRR_flags644 = $encState + 14788 | 0;
 $mid_only_flags = $encState + 20180 | 0;
 $psRangeEnc$idx500 = $psRangeEnc + 20 | 0;
 $psRangeEnc$idx501 = $psRangeEnc + 28 | 0;
 $sStereo802 = $encState + 20128 | 0;
 $arrayidx807 = $encState + 5100 | 0;
 $arrayidx812 = $encState + 15164 | 0;
 $speech_activity_Q8 = $encState + 4532 | 0;
 $toMono = $encControl + 60 | 0;
 $sMid = $encState + 20132 | 0;
 $prev_decode_only_middle = $encState + 20212 | 0;
 $VAD_flags = $encState + 14784 | 0;
 $maxBits961 = $encControl + 56 | 0;
 $cmp962 = ($cond | 0) == 2;
 $sub991 = $cond + -1 | 0;
 $cmp971 = ($cond | 0) == 3;
 $arrayidx1003 = $MStargetRates_bps + 4 | 0;
 $mul1008 = $cond << 1;
 $sShape = $encState + 17232 | 0;
 $sNSQ = $encState + 10212 | 0;
 $sLP866 = $encState + 10080 | 0;
 $prevLag = $encState + 14608 | 0;
 $lagPrev = $encState + 14540 | 0;
 $66 = $encState + 14605 | 0;
 $prev_gain_Q16 = $encState + 14556 | 0;
 $first_frame_after_reset887 = $encState + 14728 | 0;
 $inDTX1134 = $encState + 6080 | 0;
 $timeSinceSwitchAllowed_ms = $encState + 20204 | 0;
 $inDTX1144 = $encState + 16144 | 0;
 $67 = $encState + 4541 | 0;
 $prevLag$i = $encState + 4544 | 0;
 $arrayidx2$i = $encState + 4696 | 0;
 $variable_HP_smth1_Q15$i48 = $encState + 8 | 0;
 $add$ptr$i55 = $encState + 5098 | 0;
 $cmp$i56 = ($activity | 0) == 0;
 $68 = $encState + 4765 | 0;
 $noSpeechCounter$i64 = $encState + 6084 | 0;
 $add$ptr$i = $encState + 15162 | 0;
 $speech_activity_Q8$i50 = $encState + 14596 | 0;
 $69 = $encState + 14829 | 0;
 $noSpeechCounter$i = $encState + 16148 | 0;
 $offs$i = $psRangeEnc + 24 | 0;
 $rem$i = $psRangeEnc + 40 | 0;
 $error$i = $psRangeEnc + 44 | 0;
 $val$i = $psRangeEnc + 32 | 0;
 $curr_block$0 = 0;
 $nSamplesIn$addr$0 = $nSamplesIn;
 $samplesIn$addr$0 = $samplesIn;
 L164 : while (1) {
  $71 = HEAP32[$inputBufIx >> 2] | 0;
  $sub = (HEAP32[$frame_length >> 2] | 0) - $71 | 0;
  $cond223 = ($sub | 0) < ($mul202 | 0) ? $sub : $mul202;
  $mul228 = Math_imul($cond223, HEAP32[$API_fs_Hz >> 2] | 0) | 0;
  $div234 = ($mul228 | 0) / ((HEAP32[$fs_kHz142 >> 2] | 0) * 1e3 | 0) | 0;
  L166 : do switch (HEAP32[$encControl >> 2] | 0) {
  case 2:
   {
    switch (HEAP32[$nChannelsInternal$i >> 2] | 0) {
    case 2:
     {
      $76 = HEAP32[$nFramesEncoded11 >> 2] | 0;
      $cmp245526 = ($div234 | 0) > 0;
      if ($cmp245526) {
       $n$3527 = 0;
       do {
        HEAP16[$vla + ($n$3527 << 1) >> 1] = HEAP16[$samplesIn$addr$0 + ($n$3527 << 1 << 1) >> 1] | 0;
        $n$3527 = $n$3527 + 1 | 0;
       } while (($n$3527 | 0) != ($div234 | 0));
      }
      if (($76 | 0) == 0 & (HEAP32[$nPrevChannelsInternal >> 2] | 0) == 1) _memcpy($resampler_state260 | 0, $resampler_state479 | 0, 300) | 0;
      _silk_resampler($resampler_state479, $inputBuf483 + ($71 + 2 << 1) | 0, $vla, $div234);
      HEAP32[$inputBufIx >> 2] = (HEAP32[$inputBufIx >> 2] | 0) + $cond223;
      $81 = HEAP32[$inputBufIx293 >> 2] | 0;
      $sub294 = (HEAP32[$frame_length289 >> 2] | 0) - $81 | 0;
      $mul300 = Math_imul(HEAP32[$$pre$phi608Z2D >> 2] | 0, $mul197) | 0;
      $sub294$mul300 = ($sub294 | 0) < ($mul300 | 0) ? $sub294 : $mul300;
      if ($cmp245526) {
       $n$4529 = 0;
       do {
        HEAP16[$vla + ($n$4529 << 1) >> 1] = HEAP16[$samplesIn$addr$0 + (($n$4529 << 1 | 1) << 1) >> 1] | 0;
        $n$4529 = $n$4529 + 1 | 0;
       } while (($n$4529 | 0) != ($div234 | 0));
      }
      _silk_resampler($resampler_state260, $inputBuf329 + ($81 + 2 << 1) | 0, $vla, $div234);
      HEAP32[$inputBufIx293 >> 2] = (HEAP32[$inputBufIx293 >> 2] | 0) + $sub294$mul300;
      $102 = HEAP32[$inputBufIx >> 2] | 0;
      break L166;
      break;
     }
    case 1:
     {
      if (($div234 | 0) > 0) {
       $n$5523 = 0;
       do {
        $mul353 = $n$5523 << 1;
        $add359 = (HEAP16[$samplesIn$addr$0 + (($mul353 | 1) << 1) >> 1] | 0) + (HEAP16[$samplesIn$addr$0 + ($mul353 << 1) >> 1] | 0) | 0;
        HEAP16[$vla + ($n$5523 << 1) >> 1] = ($add359 >>> 1) + ($add359 & 1);
        $n$5523 = $n$5523 + 1 | 0;
       } while (($n$5523 | 0) != ($div234 | 0));
      }
      _silk_resampler($resampler_state479, $inputBuf483 + ($71 + 2 << 1) | 0, $vla, $div234);
      do if ((HEAP32[$nPrevChannelsInternal >> 2] | 0) == 2) {
       if (HEAP32[$nFramesEncoded11 >> 2] | 0) break;
       _silk_resampler($resampler_state260, $inputBuf329 + ((HEAP32[$inputBufIx293 >> 2] | 0) + 2 << 1) | 0, $vla, $div234);
       $91 = HEAP32[$frame_length >> 2] | 0;
       if (($91 | 0) <= 0) break;
       $92 = HEAP32[$inputBufIx >> 2] | 0;
       $93 = HEAP32[$inputBufIx293 >> 2] | 0;
       $n$6525 = 0;
       do {
        $add426 = $n$6525 + 2 | 0;
        $arrayidx428 = $inputBuf483 + ($add426 + $92 << 1) | 0;
        HEAP16[$arrayidx428 >> 1] = ((HEAP16[$inputBuf329 + ($add426 + $93 << 1) >> 1] | 0) + (HEAP16[$arrayidx428 >> 1] | 0) | 0) >>> 1;
        $n$6525 = $n$6525 + 1 | 0;
       } while (($n$6525 | 0) != ($91 | 0));
      } while (0);
      $add464 = (HEAP32[$inputBufIx >> 2] | 0) + $cond223 | 0;
      HEAP32[$inputBufIx >> 2] = $add464;
      $102 = $add464;
      break L166;
      break;
     }
    default:
     {
      label = 97;
      break L164;
     }
    }
    break;
   }
  case 1:
   {
    if ((HEAP32[$nChannelsInternal$i >> 2] | 0) != 1) {
     label = 97;
     break L164;
    }
    _memcpy($vla | 0, $samplesIn$addr$0 | 0, $div234 << 1 | 0) | 0;
    _silk_resampler($resampler_state479, $inputBuf483 + ($71 + 2 << 1) | 0, $vla, $div234);
    $add496 = (HEAP32[$inputBufIx >> 2] | 0) + $cond223 | 0;
    HEAP32[$inputBufIx >> 2] = $add496;
    $102 = $add496;
    break;
   }
  default:
   {
    label = 97;
    break L164;
   }
  } while (0);
  $samplesIn$addr$0 = $samplesIn$addr$0 + ((Math_imul(HEAP32[$encControl >> 2] | 0, $div234) | 0) << 1) | 0;
  $nSamplesIn$addr$0 = $nSamplesIn$addr$0 - $div234 | 0;
  HEAP32[$$pre$phi152Z2D >> 2] = 0;
  $101 = HEAP32[$frame_length >> 2] | 0;
  if (($102 | 0) < ($101 | 0)) {
   $238 = 0;
   break;
  }
  if (($102 | 0) != ($101 | 0)) {
   label = 101;
   break;
  }
  $103 = HEAP32[$nChannelsInternal$i >> 2] | 0;
  if (($103 | 0) != 1) if ((HEAP32[$inputBufIx293 >> 2] | 0) != (HEAP32[$frame_length289 >> 2] | 0)) {
   label = 104;
   break;
  }
  if (!(HEAP32[$nFramesEncoded11 >> 2] | $prefillFlag)) {
   HEAP16[$save_LP$sroa$0 >> 1] = 0;
   HEAP8[$save_LP$sroa$0 >> 0] = 0 - (256 >>> (Math_imul((HEAP32[$$pre$phi155Z2D >> 2] | 0) + 1 | 0, $103) | 0));
   _ec_enc_icdf($psRangeEnc, 0, $save_LP$sroa$0, 8);
   $110 = HEAP32[$nChannelsInternal$i >> 2] | 0;
   if (($110 | 0) > 0) {
    $251 = $110;
    $n$7535 = 0;
    while (1) {
     $111 = HEAP32[$encState + ($n$7535 * 10064 | 0) + 5744 >> 2] | 0;
     if (($111 | 0) > 0) {
      $LBRR_symbol$0531 = 0;
      $i$1532 = 0;
      while (1) {
       $or = HEAP32[$encState + ($n$7535 * 10064 | 0) + 4724 + ($i$1532 << 2) >> 2] << $i$1532 | $LBRR_symbol$0531;
       $i$1532 = $i$1532 + 1 | 0;
       if (($i$1532 | 0) == ($111 | 0)) {
        $LBRR_symbol$0$lcssa = $or;
        break;
       } else $LBRR_symbol$0531 = $or;
      }
     } else $LBRR_symbol$0$lcssa = 0;
     HEAP8[$encState + ($n$7535 * 10064 | 0) + 4723 >> 0] = ($LBRR_symbol$0$lcssa | 0) > 0 & 1;
     if (($LBRR_symbol$0$lcssa | 0) != 0 & ($111 | 0) > 1) {
      _ec_enc_icdf($psRangeEnc, $LBRR_symbol$0$lcssa + -1 | 0, HEAP32[44100 + ($111 + -2 << 2) >> 2] | 0, 8);
      $114 = HEAP32[$nChannelsInternal$i >> 2] | 0;
     } else $114 = $251;
     $n$7535 = $n$7535 + 1 | 0;
     if (($n$7535 | 0) >= ($114 | 0)) {
      $250 = $114;
      break;
     } else $251 = $114;
    }
   } else $250 = $110;
   if ((HEAP32[$$pre$phi155Z2D >> 2] | 0) > 0) {
    $116 = $250;
    $i$2541 = 0;
    while (1) {
     if (($116 | 0) > 0) {
      $arraydecay640 = $predIx + ($i$2541 * 6 | 0) | 0;
      $arrayidx645 = $LBRR_flags644 + ($i$2541 << 2) | 0;
      $arrayidx650 = $mid_only_flags + $i$2541 | 0;
      $sub660 = $i$2541 + -1 | 0;
      if (!$i$2541) {
       $118 = $116;
       $n$8538$us = 0;
       while (1) {
        $sCmn626$us = $encState + ($n$8538$us * 10064 | 0) | 0;
        if (!(HEAP32[$encState + ($n$8538$us * 10064 | 0) + 4724 >> 2] | 0)) $124 = $118; else {
         do if (($n$8538$us | 0) == 0 & ($118 | 0) == 2) {
          _silk_stereo_encode_pred($psRangeEnc, $arraydecay640);
          if (HEAP32[$arrayidx645 >> 2] | 0) break;
          _ec_enc_icdf($psRangeEnc, HEAP8[$arrayidx650 >> 0] | 0, 51880, 8);
         } while (0);
         _silk_encode_indices($sCmn626$us, $psRangeEnc, 0, 1, 0);
         _silk_encode_pulses($psRangeEnc, HEAP8[$encState + ($n$8538$us * 10064 | 0) + 6129 >> 0] | 0, HEAP8[$encState + ($n$8538$us * 10064 | 0) + 6130 >> 0] | 0, $encState + ($n$8538$us * 10064 | 0) + 6208 | 0, HEAP32[$encState + ($n$8538$us * 10064 | 0) + 4584 >> 2] | 0);
         $124 = HEAP32[$nChannelsInternal$i >> 2] | 0;
        }
        $n$8538$us = $n$8538$us + 1 | 0;
        if (($n$8538$us | 0) >= ($124 | 0)) {
         $252 = $124;
         break;
        } else $118 = $124;
       }
      } else {
       $126 = $116;
       $n$8538 = 0;
       while (1) {
        $sCmn626 = $encState + ($n$8538 * 10064 | 0) | 0;
        if (!(HEAP32[$encState + ($n$8538 * 10064 | 0) + 4724 + ($i$2541 << 2) >> 2] | 0)) $133 = $126; else {
         do if (($n$8538 | 0) == 0 & ($126 | 0) == 2) {
          _silk_stereo_encode_pred($psRangeEnc, $arraydecay640);
          if (HEAP32[$arrayidx645 >> 2] | 0) break;
          _ec_enc_icdf($psRangeEnc, HEAP8[$arrayidx650 >> 0] | 0, 51880, 8);
         } while (0);
         _silk_encode_indices($sCmn626, $psRangeEnc, $i$2541, 1, (HEAP32[$encState + ($n$8538 * 10064 | 0) + 4724 + ($sub660 << 2) >> 2] | 0) == 0 ? 0 : 2);
         _silk_encode_pulses($psRangeEnc, HEAP8[$encState + ($n$8538 * 10064 | 0) + 6100 + ($i$2541 * 36 | 0) + 29 >> 0] | 0, HEAP8[$encState + ($n$8538 * 10064 | 0) + 6100 + ($i$2541 * 36 | 0) + 30 >> 0] | 0, $encState + ($n$8538 * 10064 | 0) + 6208 + ($i$2541 * 320 | 0) | 0, HEAP32[$encState + ($n$8538 * 10064 | 0) + 4584 >> 2] | 0);
         $133 = HEAP32[$nChannelsInternal$i >> 2] | 0;
        }
        $n$8538 = $n$8538 + 1 | 0;
        if (($n$8538 | 0) >= ($133 | 0)) {
         $252 = $133;
         break;
        } else $126 = $133;
       }
      }
     } else $252 = $116;
     $i$2541 = $i$2541 + 1 | 0;
     if (($i$2541 | 0) >= (HEAP32[$$pre$phi155Z2D >> 2] | 0)) {
      $135 = $252;
      break;
     } else $116 = $252;
    }
   } else $135 = $250;
   if (($135 | 0) > 0) {
    $n$9545 = 0;
    do {
     $arraydecay705 = $encState + ($n$9545 * 10064 | 0) + 4724 | 0;
     HEAP32[$arraydecay705 >> 2] = 0;
     HEAP32[$arraydecay705 + 4 >> 2] = 0;
     HEAP32[$arraydecay705 + 8 >> 2] = 0;
     $n$9545 = $n$9545 + 1 | 0;
     $136 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    } while (($n$9545 | 0) < ($136 | 0));
    $253 = $136;
   } else $253 = $135;
   HEAP32[$nBitsUsedLBRR718 >> 2] = (HEAP32[$psRangeEnc$idx500 >> 2] | 0) + -32 + (Math_clz32(HEAP32[$psRangeEnc$idx501 >> 2] | 0) | 0);
   $159 = $253;
  } else $159 = $103;
  if ((HEAP8[$67 >> 0] | 0) == 2) {
   $shl$i = Math_imul(HEAP32[$fs_kHz142 >> 2] | 0, 65536e3) | 0;
   $div$i = ($shl$i | 0) / (HEAP32[$prevLag$i >> 2] | 0) | 0;
   $141 = Math_clz32($div$i | 0) | 0;
   $sub$i$i$i = 24 - $141 | 0;
   $sub$i$i$i$i = 0 - $sub$i$i$i | 0;
   do if (!$sub$i$i$i) $retval$0$i$i$i$i = $div$i; else if (($sub$i$i$i | 0) < 0) {
    $retval$0$i$i$i$i = $div$i >>> ($sub$i$i$i + 32 | 0) | $div$i << $sub$i$i$i$i;
    break;
   } else {
    $retval$0$i$i$i$i = $div$i << 32 - $sub$i$i$i | $div$i >>> $sub$i$i$i;
    break;
   } while (0);
   $and$i$i$i = $retval$0$i$i$i$i & 127;
   $add8$i$i = (3968 - ($141 << 7) | $and$i$i$i) + ((Math_imul($and$i$i$i * 179 | 0, 128 - $and$i$i$i | 0) | 0) >>> 16) | 0;
   $143 = HEAP32[$arrayidx2$i >> 2] | 0;
   $shl4$i = 0 - ($143 << 2) | 0;
   $conv6$i = $143 << 16 >> 16;
   $add$i = ((Math_imul($shl4$i & 65532, $conv6$i) | 0) >> 16) + (Math_imul($shl4$i >> 16, $conv6$i) | 0) | 0;
   $conv19$i = ($add8$i$i << 16) + -183762944 >> 16;
   $mul20$i = Math_imul($add$i >> 16, $conv19$i) | 0;
   $shr42$i = (Math_imul($add$i & 65535, $conv19$i) | 0) >> 16;
   $144 = HEAP32[$variable_HP_smth1_Q15$i48 >> 2] | 0;
   $sub46$i = $add8$i$i + -2048 - ($144 >> 8) + $mul20$i + $shr42$i | 0;
   $spec$select$i = ($sub46$i | 0) < 0 ? $sub46$i * 3 | 0 : $sub46$i;
   $mul64$i = Math_imul(($spec$select$i | 0) > 51 ? 51 : (($spec$select$i | 0) > -51 ? $spec$select$i : -51) << 16 >> 16, HEAP32[$speech_activity_Q8 >> 2] << 16 >> 16) | 0;
   $add77$i = (($mul64$i >> 16) * 6554 | 0) + $144 + ((($mul64$i & 65535) * 6554 | 0) >>> 16) | 0;
   $spec$select175 = ($add77$i | 0) > 193536 ? $add77$i : 193536;
   HEAP32[$variable_HP_smth1_Q15$i48 >> 2] = ($spec$select175 | 0) < 217856 ? $spec$select175 : 217856;
  }
  $150 = HEAP32[$bitRate >> 2] | 0;
  $151 = HEAP32[$payloadSize_ms$i >> 2] | 0;
  $div715 = (Math_imul($151, $150) | 0) / 1e3 | 0;
  if ($tobool68) $nBits$0 = $div715; else $nBits$0 = $div715 - (HEAP32[$nBitsUsedLBRR718 >> 2] | 0) | 0;
  $div725 = ($nBits$0 | 0) / (HEAP32[$$pre$phi155Z2D >> 2] | 0) | 0;
  $TargetRate_bps$0 = Math_imul($div725 << 16 >> 16, ($151 | 0) == 10 ? 100 : 50) | 0;
  $sub740 = $TargetRate_bps$0 - (HEAP32[$nBitsExceeded >> 2] << 1) | 0;
  do if ($tobool68) $TargetRate_bps$1 = $sub740; else {
   $155 = HEAP32[$nFramesEncoded11 >> 2] | 0;
   if (($155 | 0) <= 0) {
    $TargetRate_bps$1 = $sub740;
    break;
   }
   $156 = Math_clz32(HEAP32[$psRangeEnc$idx501 >> 2] | 0) | 0;
   $TargetRate_bps$1 = $sub740 - (-32 - (Math_imul($155, $div725) | 0) + (HEAP32[$psRangeEnc$idx500 >> 2] | 0) + $156 - (HEAP32[$nBitsUsedLBRR718 >> 2] | 0) << 1) | 0;
  } while (0);
  if (($150 | 0) > 5e3) $cond797 = ($TargetRate_bps$1 | 0) > ($150 | 0) ? $150 : ($TargetRate_bps$1 | 0) > 5e3 ? $TargetRate_bps$1 : 5e3; else $cond797 = ($TargetRate_bps$1 | 0) > 5e3 ? 5e3 : ($TargetRate_bps$1 | 0) < ($150 | 0) ? $150 : $TargetRate_bps$1;
  do if (($159 | 0) == 2) {
   $160 = HEAP32[$nFramesEncoded11 >> 2] | 0;
   _silk_stereo_LR_to_MS($sStereo802, $arrayidx807, $arrayidx812, $predIx + ($160 * 6 | 0) | 0, $mid_only_flags + $160 | 0, $MStargetRates_bps, $cond797, HEAP32[$speech_activity_Q8 >> 2] | 0, HEAP32[$toMono >> 2] | 0, HEAP32[$fs_kHz142 >> 2] | 0, HEAP32[$frame_length >> 2] | 0);
   $165 = HEAP32[$nFramesEncoded11 >> 2] | 0;
   if (!(HEAP8[$mid_only_flags + $165 >> 0] | 0)) {
    if ((HEAP32[$prev_decode_only_middle >> 2] | 0) == 1) {
     HEAP32[$sShape >> 2] = 0;
     HEAP32[$sShape + 4 >> 2] = 0;
     HEAP32[$sShape + 8 >> 2] = 0;
     $168 = $sLP866;
     HEAP32[$168 >> 2] = 0;
     HEAP32[$168 + 4 >> 2] = 0;
     _memset($sNSQ | 0, 0, 4384) | 0;
     HEAP32[$prevLag >> 2] = 100;
     HEAP32[$lagPrev >> 2] = 100;
     HEAP8[$sShape >> 0] = 10;
     HEAP8[$66 >> 0] = 0;
     HEAP32[$prev_gain_Q16 >> 2] = 65536;
     HEAP32[$first_frame_after_reset887 >> 2] = 1;
    }
    _silk_VAD_GetSA_Q8_c($arrayidx6, $add$ptr$i);
    $172 = HEAP32[$speech_activity_Q8$i50 >> 2] | 0;
    do if ($cmp$i56) {
     if (($172 | 0) <= 12) {
      label = 159;
      break;
     }
     HEAP32[$speech_activity_Q8$i50 >> 2] = 12;
     label = 159;
    } else {
     if (($172 | 0) < 13) {
      label = 159;
      break;
     }
     HEAP32[$noSpeechCounter$i >> 2] = 0;
     HEAP32[$inDTX1144 >> 2] = 0;
     HEAP8[$69 >> 0] = 1;
     $$sink$i = 1;
    } while (0);
    do if ((label | 0) == 159) {
     label = 0;
     HEAP8[$69 >> 0] = 0;
     $173 = HEAP32[$noSpeechCounter$i >> 2] | 0;
     HEAP32[$noSpeechCounter$i >> 2] = $173 + 1;
     if (($173 | 0) >= 10) {
      if (($173 | 0) <= 29) {
       $$sink$i = 0;
       break;
      }
      HEAP32[$noSpeechCounter$i >> 2] = 10;
     }
     HEAP32[$inDTX1144 >> 2] = 0;
     $$sink$i = 0;
    } while (0);
    HEAP8[(HEAP32[$nFramesEncoded >> 2] | 0) + ($arrayidx6 + 4720) >> 0] = $$sink$i;
   } else HEAP8[$VAD_flags + $165 >> 0] = 0;
   if ($tobool68) break;
   _silk_stereo_encode_pred($psRangeEnc, $predIx + ((HEAP32[$nFramesEncoded11 >> 2] | 0) * 6 | 0) | 0);
   $176 = HEAP32[$nFramesEncoded11 >> 2] | 0;
   if (HEAP8[$VAD_flags + $176 >> 0] | 0) break;
   _ec_enc_icdf($psRangeEnc, HEAP8[$mid_only_flags + $176 >> 0] | 0, 51880, 8);
  } else {
   HEAP32[$inputBuf483 >> 2] = HEAP32[$sMid >> 2];
   $arrayidx952 = $inputBuf483 + (HEAP32[$frame_length >> 2] << 1) | 0;
   $181 = HEAPU16[$arrayidx952 >> 1] | HEAPU16[$arrayidx952 + 2 >> 1] << 16;
   HEAP16[$sMid >> 1] = $181;
   HEAP16[$sMid + 2 >> 1] = $181 >>> 16;
  } while (0);
  _silk_VAD_GetSA_Q8_c($encState, $add$ptr$i55);
  $182 = HEAP32[$speech_activity_Q8 >> 2] | 0;
  do if ($cmp$i56) {
   if (($182 | 0) <= 12) {
    label = 174;
    break;
   }
   HEAP32[$speech_activity_Q8 >> 2] = 12;
   label = 174;
  } else {
   if (($182 | 0) < 13) {
    label = 174;
    break;
   }
   HEAP32[$noSpeechCounter$i64 >> 2] = 0;
   HEAP32[$inDTX1134 >> 2] = 0;
   HEAP8[$68 >> 0] = 1;
   $$sink$i77 = 1;
  } while (0);
  do if ((label | 0) == 174) {
   label = 0;
   HEAP8[$68 >> 0] = 0;
   $183 = HEAP32[$noSpeechCounter$i64 >> 2] | 0;
   HEAP32[$noSpeechCounter$i64 >> 2] = $183 + 1;
   if (($183 | 0) >= 10) {
    if (($183 | 0) <= 29) {
     $$sink$i77 = 0;
     break;
    }
    HEAP32[$noSpeechCounter$i64 >> 2] = 10;
   }
   HEAP32[$inDTX1134 >> 2] = 0;
   $$sink$i77 = 0;
  } while (0);
  HEAP8[(HEAP32[$nFramesEncoded11 >> 2] | 0) + ($encState + 4720) >> 0] = $$sink$i77;
  $185 = HEAP32[$nChannelsInternal$i >> 2] | 0;
  L311 : do if (($185 | 0) > 0) {
   $cmp965 = ($curr_block$0 | 0) == 0;
   $cmp992 = ($curr_block$0 | 0) == ($sub991 | 0);
   $cmp980 = ($curr_block$0 | 0) == 1;
   $cmp1004$us = (HEAP32[$arrayidx1003 >> 2] | 0) > 0;
   if ($cmp962 & $cmp965) {
    $190 = $185;
    $n$10548$us = 0;
    while (1) {
     $187 = HEAP32[$maxBits961 >> 2] | 0;
     $div969$us = ($187 * 3 | 0) / 5 | 0;
     $land$ext$us = $cmp992 & (HEAP32[$useCBR$i >> 2] | 0) != 0 & 1;
     do if (($190 | 0) == 1) {
      $channelRate_bps$0$us = $cond797;
      $maxBits$1$us = $div969$us;
      $useCBR$0$us = $land$ext$us;
     } else {
      $191 = HEAP32[$MStargetRates_bps + ($n$10548$us << 2) >> 2] | 0;
      if (!(($n$10548$us | 0) == 0 & $cmp1004$us)) {
       $channelRate_bps$0$us = $191;
       $maxBits$1$us = $div969$us;
       $useCBR$0$us = $land$ext$us;
       break;
      }
      $channelRate_bps$0$us = $191;
      $maxBits$1$us = $div969$us - (($187 | 0) / ($mul1008 | 0) | 0) | 0;
      $useCBR$0$us = 0;
     } while (0);
     if (($channelRate_bps$0$us | 0) > 0) {
      $arrayidx1018$us = $encState + ($n$10548$us * 10064 | 0) | 0;
      HEAP32[$encState + ($n$10548$us * 10064 | 0) + 4608 >> 2] = $channelRate_bps$0$us;
      $193 = HEAP32[$encState + ($n$10548$us * 10064 | 0) + 4576 >> 2] | 0;
      if ((HEAP32[$encState + ($n$10548$us * 10064 | 0) + 4580 >> 2] | 0) == 2) $TargetRate_bps$addr$0$i = $channelRate_bps$0$us + -2e3 + (($193 | 0) / -16 | 0) | 0; else $TargetRate_bps$addr$0$i = $channelRate_bps$0$us;
      switch ($193 | 0) {
      case 8:
       {
        $bound$0$i = 106;
        $snr_table$0$i = 26640;
        break;
       }
      case 12:
       {
        $bound$0$i = 154;
        $snr_table$0$i = 26288;
        break;
       }
      default:
       {
        $bound$0$i = 190;
        $snr_table$0$i = 26448;
       }
      }
      $sub13$i = (($TargetRate_bps$addr$0$i + 200 | 0) / 400 | 0) + -10 | 0;
      $cond$i87 = ($sub13$i | 0) < ($bound$0$i | 0) ? $sub13$i : $bound$0$i;
      if (($cond$i87 | 0) < 1) $$sink$i89 = 0; else $$sink$i89 = (HEAPU8[$snr_table$0$i + $cond$i87 >> 0] | 0) * 21 | 0;
      HEAP32[$encState + ($n$10548$us * 10064 | 0) + 4716 >> 2] = $$sink$i89;
      do if ((HEAP32[$nFramesEncoded11 >> 2] | 0) > ($n$10548$us | 0)) {
       if ($n$10548$us | 0) if (HEAP32[$prev_decode_only_middle >> 2] | 0) {
        $condCoding1016$0$us = 1;
        break;
       }
       $condCoding1016$0$us = 2;
      } else $condCoding1016$0$us = 0; while (0);
      _silk_encode_frame_FLP($arrayidx1018$us, $nBytesOut, $psRangeEnc, $condCoding1016$0$us, $maxBits$1$us, $useCBR$0$us);
      $199 = HEAP32[$nChannelsInternal$i >> 2] | 0;
     } else $199 = $190;
     HEAP32[$encState + ($n$10548$us * 10064 | 0) + 4668 >> 2] = 0;
     HEAP32[$encState + ($n$10548$us * 10064 | 0) + 5740 >> 2] = 0;
     $nFramesEncoded1058$us = $encState + ($n$10548$us * 10064 | 0) + 5748 | 0;
     HEAP32[$nFramesEncoded1058$us >> 2] = (HEAP32[$nFramesEncoded1058$us >> 2] | 0) + 1;
     $n$10548$us = $n$10548$us + 1 | 0;
     if (($n$10548$us | 0) >= ($199 | 0)) {
      $$lcssa510 = $199;
      break L311;
     } else $190 = $199;
    }
   }
   $203 = $185;
   $n$10548 = 0;
   while (1) {
    $200 = HEAP32[$maxBits961 >> 2] | 0;
    do if ($cmp971) {
     if ($cmp965) {
      $maxBits$0 = ($200 << 1 | 0) / 5 | 0;
      break;
     }
     if (!$cmp980) {
      $maxBits$0 = $200;
      break;
     }
     $maxBits$0 = ($200 * 3 | 0) / 4 | 0;
    } else $maxBits$0 = $200; while (0);
    $land$ext = $cmp992 & (HEAP32[$useCBR$i >> 2] | 0) != 0 & 1;
    do if (($203 | 0) == 1) {
     $channelRate_bps$0 = $cond797;
     $maxBits$1 = $maxBits$0;
     $useCBR$0 = $land$ext;
    } else {
     $204 = HEAP32[$MStargetRates_bps + ($n$10548 << 2) >> 2] | 0;
     if (!(($n$10548 | 0) == 0 & $cmp1004$us)) {
      $channelRate_bps$0 = $204;
      $maxBits$1 = $maxBits$0;
      $useCBR$0 = $land$ext;
      break;
     }
     $channelRate_bps$0 = $204;
     $maxBits$1 = $maxBits$0 - (($200 | 0) / ($mul1008 | 0) | 0) | 0;
     $useCBR$0 = 0;
    } while (0);
    if (($channelRate_bps$0 | 0) > 0) {
     $arrayidx1018 = $encState + ($n$10548 * 10064 | 0) | 0;
     HEAP32[$encState + ($n$10548 * 10064 | 0) + 4608 >> 2] = $channelRate_bps$0;
     $206 = HEAP32[$encState + ($n$10548 * 10064 | 0) + 4576 >> 2] | 0;
     if ((HEAP32[$encState + ($n$10548 * 10064 | 0) + 4580 >> 2] | 0) == 2) $TargetRate_bps$addr$0$i98 = $channelRate_bps$0 + -2e3 + (($206 | 0) / -16 | 0) | 0; else $TargetRate_bps$addr$0$i98 = $channelRate_bps$0;
     switch ($206 | 0) {
     case 8:
      {
       $bound$0$i102 = 106;
       $snr_table$0$i103 = 26640;
       break;
      }
     case 12:
      {
       $bound$0$i102 = 154;
       $snr_table$0$i103 = 26288;
       break;
      }
     default:
      {
       $bound$0$i102 = 190;
       $snr_table$0$i103 = 26448;
      }
     }
     $sub13$i106 = (($TargetRate_bps$addr$0$i98 + 200 | 0) / 400 | 0) + -10 | 0;
     $cond$i108 = ($sub13$i106 | 0) < ($bound$0$i102 | 0) ? $sub13$i106 : $bound$0$i102;
     if (($cond$i108 | 0) < 1) $$sink$i115 = 0; else $$sink$i115 = (HEAPU8[$snr_table$0$i103 + $cond$i108 >> 0] | 0) * 21 | 0;
     HEAP32[$encState + ($n$10548 * 10064 | 0) + 4716 >> 2] = $$sink$i115;
     do if ((HEAP32[$nFramesEncoded11 >> 2] | 0) > ($n$10548 | 0)) {
      if ($n$10548 | 0) if (HEAP32[$prev_decode_only_middle >> 2] | 0) {
       $condCoding1016$0 = 1;
       break;
      }
      $condCoding1016$0 = 2;
     } else $condCoding1016$0 = 0; while (0);
     _silk_encode_frame_FLP($arrayidx1018, $nBytesOut, $psRangeEnc, $condCoding1016$0, $maxBits$1, $useCBR$0);
     $212 = HEAP32[$nChannelsInternal$i >> 2] | 0;
    } else $212 = $203;
    HEAP32[$encState + ($n$10548 * 10064 | 0) + 4668 >> 2] = 0;
    HEAP32[$encState + ($n$10548 * 10064 | 0) + 5740 >> 2] = 0;
    $nFramesEncoded1058 = $encState + ($n$10548 * 10064 | 0) + 5748 | 0;
    HEAP32[$nFramesEncoded1058 >> 2] = (HEAP32[$nFramesEncoded1058 >> 2] | 0) + 1;
    $n$10548 = $n$10548 + 1 | 0;
    if (($n$10548 | 0) >= ($212 | 0)) {
     $$lcssa510 = $212;
     break;
    } else $203 = $212;
   }
  } else $$lcssa510 = $185; while (0);
  $213 = HEAP32[$nFramesEncoded11 >> 2] | 0;
  HEAP32[$prev_decode_only_middle >> 2] = HEAP8[$mid_only_flags + ($213 + -1) >> 0];
  do if ((HEAP32[$nBytesOut >> 2] | 0) > 0) {
   if (($213 | 0) != (HEAP32[$$pre$phi155Z2D >> 2] | 0)) break;
   if (($$lcssa510 | 0) > 0) {
    $flags$0557 = 0;
    $n$11558 = 0;
    while (1) {
     $217 = HEAP32[$encState + ($n$11558 * 10064 | 0) + 5744 >> 2] | 0;
     $shl1100552 = $flags$0557 << 1;
     if (($217 | 0) > 0) {
      $i$3553 = 0;
      $shl1100554 = $shl1100552;
      while (1) {
       $shl1100 = ($shl1100554 | HEAP8[$encState + ($n$11558 * 10064 | 0) + 4720 + $i$3553 >> 0]) << 1;
       $i$3553 = $i$3553 + 1 | 0;
       if (($i$3553 | 0) == ($217 | 0)) {
        $shl1100$lcssa = $shl1100;
        break;
       } else $shl1100554 = $shl1100;
      }
     } else $shl1100$lcssa = $shl1100552;
     $or1117 = $shl1100$lcssa | HEAP8[$encState + ($n$11558 * 10064 | 0) + 4723 >> 0];
     $n$11558 = $n$11558 + 1 | 0;
     if (($n$11558 | 0) == ($$lcssa510 | 0)) {
      $flags$0$lcssa = $or1117;
      break;
     } else $flags$0557 = $or1117;
    }
   } else $flags$0$lcssa = 0;
   do if (!$tobool68) {
    $mul1129 = Math_imul($213 + 1 | 0, $$lcssa510) | 0;
    if ($mul1129 >>> 0 >= 9) {
     label = 232;
     break L164;
    }
    $sub$i119 = 8 - $mul1129 | 0;
    $shl2$i = (1 << $mul1129) + -1 << $sub$i119;
    if (HEAP32[$offs$i >> 2] | 0) {
     $221 = HEAP32[$psRangeEnc >> 2] | 0;
     HEAP8[$221 >> 0] = ($shl2$i ^ 255) & HEAPU8[$221 >> 0] | $flags$0$lcssa << $sub$i119;
     break;
    }
    $223 = HEAP32[$rem$i >> 2] | 0;
    if (($223 | 0) > -1) {
     HEAP32[$rem$i >> 2] = $223 & ~$shl2$i | $flags$0$lcssa << $sub$i119;
     break;
    }
    if ((HEAP32[$psRangeEnc$idx501 >> 2] | 0) >>> 0 > -2147483648 >>> $mul1129 >>> 0) {
     HEAP32[$error$i >> 2] = -1;
     break;
    } else {
     HEAP32[$val$i >> 2] = HEAP32[$val$i >> 2] & ~($shl2$i << 23) | $flags$0$lcssa << $sub$i119 + 23;
     break;
    }
   } while (0);
   do if (HEAP32[$inDTX1134 >> 2] | 0) {
    if ((HEAP32[$nChannelsInternal$i >> 2] | 0) != 1) if (!(HEAP32[$inDTX1144 >> 2] | 0)) break;
    HEAP32[$nBytesOut >> 2] = 0;
   } while (0);
   $232 = HEAP32[$payloadSize_ms$i >> 2] | 0;
   $sub1156 = (HEAP32[$nBitsExceeded >> 2] | 0) + (HEAP32[$nBytesOut >> 2] << 3) - ((Math_imul($232, HEAP32[$bitRate >> 2] | 0) | 0) / 1e3 | 0) | 0;
   $spec$select = ($sub1156 | 0) > 0 ? $sub1156 : 0;
   HEAP32[$nBitsExceeded >> 2] = ($spec$select | 0) < 1e4 ? $spec$select : 1e4;
   $235 = HEAP32[$timeSinceSwitchAllowed_ms >> 2] | 0;
   if ((HEAP32[$speech_activity_Q8 >> 2] | 0) < ((($235 << 16 >> 16) * 3188 >> 16) + 13 | 0)) {
    HEAP32[$$pre$phi152Z2D >> 2] = 1;
    HEAP32[$timeSinceSwitchAllowed_ms >> 2] = 0;
    break;
   } else {
    HEAP32[$$pre$phi152Z2D >> 2] = 0;
    HEAP32[$timeSinceSwitchAllowed_ms >> 2] = $235 + $232;
    break;
   }
  } while (0);
  if (!$nSamplesIn$addr$0) {
   label = 248;
   break;
  } else $curr_block$0 = $curr_block$0 + 1 | 0;
 }
 if ((label | 0) == 97) _celt_fatal(50900, 50758, 320); else if ((label | 0) == 101) _celt_fatal(50986, 50758, 336); else if ((label | 0) == 104) _celt_fatal(51085, 50758, 337); else if ((label | 0) == 232) _celt_fatal(49137, 49097, 217); else if ((label | 0) == 248) $238 = HEAP32[$$pre$phi152Z2D >> 2] | 0;
 $237 = HEAP32[$nChannelsInternal$i >> 2] | 0;
 HEAP32[$nPrevChannelsInternal >> 2] = $237;
 HEAP32[$encControl + 76 >> 2] = $238;
 $239 = HEAP32[$fs_kHz142 >> 2] | 0;
 if (($239 | 0) == 16) $241 = (HEAP32[$encState + 28 >> 2] | 0) == 0 & 1; else $241 = 0;
 HEAP32[$encControl + 80 >> 2] = $241;
 HEAP32[$encControl + 72 >> 2] = ($239 << 16 >> 16) * 1e3;
 if (!(HEAP32[$toMono >> 2] | 0)) $cond1240 = HEAP16[$encState + 20156 >> 1] | 0; else $cond1240 = 0;
 HEAP32[$encControl + 84 >> 2] = $cond1240;
 do if ($tobool68) {
  HEAP32[$payloadSize_ms$i >> 2] = $tmp_payloadSize_ms$0;
  HEAP32[$complexity$i >> 2] = $tmp_complexity$0;
  if (($237 | 0) <= 0) break;
  $n$12521 = 0;
  do {
   HEAP32[$encState + ($n$12521 * 10064 | 0) + 4668 >> 2] = 0;
   HEAP32[$encState + ($n$12521 * 10064 | 0) + 4680 >> 2] = 0;
   $n$12521 = $n$12521 + 1 | 0;
  } while (($n$12521 | 0) != ($237 | 0));
 } while (0);
 $conv1266 = HEAP8[$68 >> 0] | 0;
 HEAP32[$encControl + 92 >> 2] = $conv1266;
 HEAP32[$encControl + 96 >> 2] = HEAP16[47584 + ($conv1266 >> 1 << 2) + (HEAP8[$encState + 4766 >> 0] << 1) >> 1];
 _llvm_stackrestore($65 | 0);
 $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $114 = 0, $118 = 0, $121 = 0, $122 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $150 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0, $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i135 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i174 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add1$i = 0, $add1$i20 = 0, $add1$i38 = 0, $add1$i56 = 0, $add1$i74 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i152 = 0, $and$i18 = 0, $and$i3 = 0, $and$i36 = 0, $and$i54 = 0, $and$i72 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i191 = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i185 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $br$2$ph$i = 0, $call$i = 0, $call$i19 = 0, $call$i37 = 0, $call$i4 = 0, $call$i55 = 0, $call$i73 = 0, $call$i89 = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond4$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd69 = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i137 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $retval$0$i14 = 0, $retval$0$i32 = 0, $retval$0$i86 = 0, $retval$0$i98 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i153 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size$i$i = 0, $size188$i = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i171 = 0, $spec$select2$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, label = 0, sp = 0, $159$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[16411] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 65684 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   if (($3 | 0) == ($arrayidx | 0)) HEAP32[16411] = $0 & ~(1 << $add8); else {
    HEAP32[$3 + 12 >> 2] = $arrayidx;
    HEAP32[$1 >> 2] = $3;
   }
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $5 = HEAP32[16413] | 0;
  if ($cond >>> 0 > $5 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 65684 + ($add64 << 1 << 2) | 0;
    $6 = $arrayidx66 + 8 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $fd69 = $7 + 8 | 0;
    $8 = HEAP32[$fd69 >> 2] | 0;
    if (($8 | 0) == ($arrayidx66 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[16411] = $and74;
     $10 = $and74;
    } else {
     HEAP32[$8 + 12 >> 2] = $arrayidx66;
     HEAP32[$6 >> 2] = $8;
     $10 = $0;
    }
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$7 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $7 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$7 + $shl90 >> 2] = $sub91;
    if ($5 | 0) {
     $9 = HEAP32[16416] | 0;
     $shr101 = $5 >>> 3;
     $arrayidx103 = 65684 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($10 & $shl105)) {
      HEAP32[16411] = $10 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $11 = $arrayidx103 + 8 | 0;
      $$pre$phiZ2D = $11;
      $F104$0 = HEAP32[$11 >> 2] | 0;
     }
     HEAP32[$$pre$phiZ2D >> 2] = $9;
     HEAP32[$F104$0 + 12 >> 2] = $9;
     HEAP32[$9 + 8 >> 2] = $F104$0;
     HEAP32[$9 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[16413] = $sub91;
    HEAP32[16416] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $13 = HEAP32[16412] | 0;
   if (!$13) $nb$0 = $cond; else {
    $sub2$i = ($13 & 0 - $13) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $14 = HEAP32[65948 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$14 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $14;
    $v$0$i = $14;
    while (1) {
     $16 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$16) {
      $17 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$17) break; else $cond4$i = $17;
     } else $cond4$i = $16;
     $sub31$i = (HEAP32[$cond4$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond4$i;
     $v$0$i = $cmp32$i ? $cond4$i : $v$0$i;
    }
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 > $v$0$i >>> 0) {
     $19 = HEAP32[$v$0$i + 24 >> 2] | 0;
     $20 = HEAP32[$v$0$i + 12 >> 2] | 0;
     do if (($20 | 0) == ($v$0$i | 0)) {
      $arrayidx61$i = $v$0$i + 20 | 0;
      $22 = HEAP32[$arrayidx61$i >> 2] | 0;
      if (!$22) {
       $arrayidx65$i = $v$0$i + 16 | 0;
       $23 = HEAP32[$arrayidx65$i >> 2] | 0;
       if (!$23) {
        $R$3$i = 0;
        break;
       } else {
        $R$1$i$ph = $23;
        $RP$1$i$ph = $arrayidx65$i;
       }
      } else {
       $R$1$i$ph = $22;
       $RP$1$i$ph = $arrayidx61$i;
      }
      $R$1$i = $R$1$i$ph;
      $RP$1$i = $RP$1$i$ph;
      while (1) {
       $arrayidx71$i = $R$1$i + 20 | 0;
       $24 = HEAP32[$arrayidx71$i >> 2] | 0;
       if (!$24) {
        $arrayidx75$i = $R$1$i + 16 | 0;
        $25 = HEAP32[$arrayidx75$i >> 2] | 0;
        if (!$25) break; else {
         $R$1$i$be = $25;
         $RP$1$i$be = $arrayidx75$i;
        }
       } else {
        $R$1$i$be = $24;
        $RP$1$i$be = $arrayidx71$i;
       }
       $R$1$i = $R$1$i$be;
       $RP$1$i = $RP$1$i$be;
      }
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
     } else {
      $21 = HEAP32[$v$0$i + 8 >> 2] | 0;
      HEAP32[$21 + 12 >> 2] = $20;
      HEAP32[$20 + 8 >> 2] = $21;
      $R$3$i = $20;
     } while (0);
     do if ($19 | 0) {
      $26 = HEAP32[$v$0$i + 28 >> 2] | 0;
      $arrayidx94$i = 65948 + ($26 << 2) | 0;
      if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
       HEAP32[$arrayidx94$i >> 2] = $R$3$i;
       if (!$R$3$i) {
        HEAP32[16412] = $13 & ~(1 << $26);
        break;
       }
      } else {
       $arrayidx113$i = $19 + 16 | 0;
       HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $19 + 20 | 0) >> 2] = $R$3$i;
       if (!$R$3$i) break;
      }
      HEAP32[$R$3$i + 24 >> 2] = $19;
      $29 = HEAP32[$v$0$i + 16 >> 2] | 0;
      if ($29 | 0) {
       HEAP32[$R$3$i + 16 >> 2] = $29;
       HEAP32[$29 + 24 >> 2] = $R$3$i;
      }
      $30 = HEAP32[$v$0$i + 20 >> 2] | 0;
      if ($30 | 0) {
       HEAP32[$R$3$i + 20 >> 2] = $30;
       HEAP32[$30 + 24 >> 2] = $R$3$i;
      }
     } while (0);
     if ($rsize$0$i >>> 0 < 16) {
      $add177$i = $rsize$0$i + $cond | 0;
      HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
      $head182$i = $v$0$i + $add177$i + 4 | 0;
      HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
     } else {
      HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
      HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
      HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
      if ($5 | 0) {
       $32 = HEAP32[16416] | 0;
       $shr194$i = $5 >>> 3;
       $arrayidx196$i = 65684 + ($shr194$i << 1 << 2) | 0;
       $shl198$i = 1 << $shr194$i;
       if (!($shl198$i & $0)) {
        HEAP32[16411] = $shl198$i | $0;
        $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
        $F197$0$i = $arrayidx196$i;
       } else {
        $33 = $arrayidx196$i + 8 | 0;
        $$pre$phi$iZ2D = $33;
        $F197$0$i = HEAP32[$33 >> 2] | 0;
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $32;
       HEAP32[$F197$0$i + 12 >> 2] = $32;
       HEAP32[$32 + 8 >> 2] = $F197$0$i;
       HEAP32[$32 + 12 >> 2] = $arrayidx196$i;
      }
      HEAP32[16413] = $rsize$0$i;
      HEAP32[16416] = $add$ptr$i;
     }
     $retval$0 = $v$0$i + 8 | 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    } else $nb$0 = $cond;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $35 = HEAP32[16412] | 0;
  if (!$35) $nb$0 = $and145; else {
   $sub$i147 = 0 - $and145 | 0;
   $shr$i148 = $add144 >>> 8;
   if (!$shr$i148) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i152 = ($shr$i148 + 1048320 | 0) >>> 16 & 8;
    $shl$i153 = $shr$i148 << $and$i152;
    $and8$i = ($shl$i153 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i153 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i158 = 14 - ($and8$i | $and$i152 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i158 + 7 | 0) & 1 | $add17$i158 << 1;
   }
   $36 = HEAP32[65948 + ($idx$0$i << 2) >> 2] | 0;
   L79 : do if (!$36) {
    $rsize$3$i = $sub$i147;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 61;
   } else {
    $rsize$0$i162 = $sub$i147;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i161 = $36;
    $v$0$i163 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i161 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i162 >>> 0) if (!$sub33$i) {
      $rsize$418$i$ph = 0;
      $t$517$i$ph = $t$0$i161;
      $v$419$i$ph = $t$0$i161;
      label = 65;
      break L79;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i161;
     } else {
      $rsize$1$i = $rsize$0$i162;
      $v$1$i = $v$0$i163;
     }
     $38 = HEAP32[$t$0$i161 + 20 >> 2] | 0;
     $t$0$i161 = HEAP32[$t$0$i161 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($38 | 0) == 0 | ($38 | 0) == ($t$0$i161 | 0) ? $rst$0$i : $38;
     if (!$t$0$i161) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 61;
      break;
     } else {
      $rsize$0$i162 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i163 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 61) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $35;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[65948 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i204 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i204 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i204;
    } else {
     $rsize$418$i$ph = $rsize$3$i;
     $t$517$i$ph = $t$4$i;
     $v$419$i$ph = $v$3$i204;
     label = 65;
    }
   }
   if ((label | 0) == 65) {
    $rsize$418$i = $rsize$418$i$ph;
    $t$517$i = $t$517$i$ph;
    $v$419$i = $v$419$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$517$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$418$i >>> 0;
     $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
     $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
     $42 = HEAP32[$t$517$i + 16 >> 2] | 0;
     if (!$42) $cond115$i = HEAP32[$t$517$i + 20 >> 2] | 0; else $cond115$i = $42;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i171;
      $v$4$lcssa$i = $spec$select2$i;
      break;
     } else {
      $rsize$418$i = $spec$select$i171;
      $t$517$i = $cond115$i;
      $v$419$i = $spec$select2$i;
     }
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[16413] | 0) - $and145 | 0) >>> 0) {
    $add$ptr$i174 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i174 >>> 0 > $v$4$lcssa$i >>> 0) {
     $45 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
     $46 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
     do if (($46 | 0) == ($v$4$lcssa$i | 0)) {
      $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
      $48 = HEAP32[$arrayidx151$i >> 2] | 0;
      if (!$48) {
       $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
       $49 = HEAP32[$arrayidx155$i >> 2] | 0;
       if (!$49) {
        $R$3$i188 = 0;
        break;
       } else {
        $R$1$i183$ph = $49;
        $RP$1$i182$ph = $arrayidx155$i;
       }
      } else {
       $R$1$i183$ph = $48;
       $RP$1$i182$ph = $arrayidx151$i;
      }
      $R$1$i183 = $R$1$i183$ph;
      $RP$1$i182 = $RP$1$i182$ph;
      while (1) {
       $arrayidx161$i = $R$1$i183 + 20 | 0;
       $50 = HEAP32[$arrayidx161$i >> 2] | 0;
       if (!$50) {
        $arrayidx165$i185 = $R$1$i183 + 16 | 0;
        $51 = HEAP32[$arrayidx165$i185 >> 2] | 0;
        if (!$51) break; else {
         $R$1$i183$be = $51;
         $RP$1$i182$be = $arrayidx165$i185;
        }
       } else {
        $R$1$i183$be = $50;
        $RP$1$i182$be = $arrayidx161$i;
       }
       $R$1$i183 = $R$1$i183$be;
       $RP$1$i182 = $RP$1$i182$be;
      }
      HEAP32[$RP$1$i182 >> 2] = 0;
      $R$3$i188 = $R$1$i183;
     } else {
      $47 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
      HEAP32[$47 + 12 >> 2] = $46;
      HEAP32[$46 + 8 >> 2] = $47;
      $R$3$i188 = $46;
     } while (0);
     do if (!$45) $61 = $35; else {
      $52 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
      $arrayidx184$i = 65948 + ($52 << 2) | 0;
      if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
       HEAP32[$arrayidx184$i >> 2] = $R$3$i188;
       if (!$R$3$i188) {
        $and194$i191 = $35 & ~(1 << $52);
        HEAP32[16412] = $and194$i191;
        $61 = $and194$i191;
        break;
       }
      } else {
       $arrayidx204$i = $45 + 16 | 0;
       HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $45 + 20 | 0) >> 2] = $R$3$i188;
       if (!$R$3$i188) {
        $61 = $35;
        break;
       }
      }
      HEAP32[$R$3$i188 + 24 >> 2] = $45;
      $55 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
      if ($55 | 0) {
       HEAP32[$R$3$i188 + 16 >> 2] = $55;
       HEAP32[$55 + 24 >> 2] = $R$3$i188;
      }
      $56 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
      if (!$56) $61 = $35; else {
       HEAP32[$R$3$i188 + 20 >> 2] = $56;
       HEAP32[$56 + 24 >> 2] = $R$3$i188;
       $61 = $35;
      }
     } while (0);
     L128 : do if ($rsize$4$lcssa$i >>> 0 < 16) {
      $add268$i = $rsize$4$lcssa$i + $and145 | 0;
      HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
      $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
      HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
     } else {
      HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
      HEAP32[$add$ptr$i174 + 4 >> 2] = $rsize$4$lcssa$i | 1;
      HEAP32[$add$ptr$i174 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
      $shr283$i = $rsize$4$lcssa$i >>> 3;
      if ($rsize$4$lcssa$i >>> 0 < 256) {
       $arrayidx289$i = 65684 + ($shr283$i << 1 << 2) | 0;
       $58 = HEAP32[16411] | 0;
       $shl291$i = 1 << $shr283$i;
       if (!($58 & $shl291$i)) {
        HEAP32[16411] = $58 | $shl291$i;
        $$pre$phi$i195Z2D = $arrayidx289$i + 8 | 0;
        $F290$0$i = $arrayidx289$i;
       } else {
        $59 = $arrayidx289$i + 8 | 0;
        $$pre$phi$i195Z2D = $59;
        $F290$0$i = HEAP32[$59 >> 2] | 0;
       }
       HEAP32[$$pre$phi$i195Z2D >> 2] = $add$ptr$i174;
       HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i174;
       HEAP32[$add$ptr$i174 + 8 >> 2] = $F290$0$i;
       HEAP32[$add$ptr$i174 + 12 >> 2] = $arrayidx289$i;
       break;
      }
      $shr318$i = $rsize$4$lcssa$i >>> 8;
      if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
       $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
       $shl333$i = $shr318$i << $and331$i;
       $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
       $shl338$i = $shl333$i << $and336$i;
       $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
       $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
       $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
      }
      $arrayidx355$i = 65948 + ($I316$0$i << 2) | 0;
      HEAP32[$add$ptr$i174 + 28 >> 2] = $I316$0$i;
      $child357$i = $add$ptr$i174 + 16 | 0;
      HEAP32[$child357$i + 4 >> 2] = 0;
      HEAP32[$child357$i >> 2] = 0;
      $shl362$i = 1 << $I316$0$i;
      if (!($61 & $shl362$i)) {
       HEAP32[16412] = $61 | $shl362$i;
       HEAP32[$arrayidx355$i >> 2] = $add$ptr$i174;
       HEAP32[$add$ptr$i174 + 24 >> 2] = $arrayidx355$i;
       HEAP32[$add$ptr$i174 + 12 >> 2] = $add$ptr$i174;
       HEAP32[$add$ptr$i174 + 8 >> 2] = $add$ptr$i174;
       break;
      }
      $62 = HEAP32[$arrayidx355$i >> 2] | 0;
      L145 : do if ((HEAP32[$62 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) $T$0$lcssa$i = $62; else {
       $K373$015$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
       $T$014$i = $62;
       while (1) {
        $arrayidx394$i = $T$014$i + 16 + ($K373$015$i >>> 31 << 2) | 0;
        $64 = HEAP32[$arrayidx394$i >> 2] | 0;
        if (!$64) break;
        if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
         $T$0$lcssa$i = $64;
         break L145;
        } else {
         $K373$015$i = $K373$015$i << 1;
         $T$014$i = $64;
        }
       }
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i174;
       HEAP32[$add$ptr$i174 + 24 >> 2] = $T$014$i;
       HEAP32[$add$ptr$i174 + 12 >> 2] = $add$ptr$i174;
       HEAP32[$add$ptr$i174 + 8 >> 2] = $add$ptr$i174;
       break L128;
      } while (0);
      $fd416$i = $T$0$lcssa$i + 8 | 0;
      $66 = HEAP32[$fd416$i >> 2] | 0;
      HEAP32[$66 + 12 >> 2] = $add$ptr$i174;
      HEAP32[$fd416$i >> 2] = $add$ptr$i174;
      HEAP32[$add$ptr$i174 + 8 >> 2] = $66;
      HEAP32[$add$ptr$i174 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i174 + 24 >> 2] = 0;
     } while (0);
     $retval$0 = $v$4$lcssa$i + 8 | 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    } else $nb$0 = $and145;
   } else $nb$0 = $and145;
  }
 } while (0);
 $67 = HEAP32[16413] | 0;
 if ($67 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $67 - $nb$0 | 0;
  $68 = HEAP32[16416] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $68 + $nb$0 | 0;
   HEAP32[16416] = $add$ptr166;
   HEAP32[16413] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$68 + $67 >> 2] = $sub160;
   HEAP32[$68 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[16413] = 0;
   HEAP32[16416] = 0;
   HEAP32[$68 + 4 >> 2] = $67 | 3;
   $head179 = $68 + $67 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $68 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $70 = HEAP32[16414] | 0;
 if ($70 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $70 - $nb$0 | 0;
  HEAP32[16414] = $sub190;
  $71 = HEAP32[16417] | 0;
  $add$ptr193 = $71 + $nb$0 | 0;
  HEAP32[16417] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$71 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $71 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[16529] | 0)) {
  HEAP32[16531] = 4096;
  HEAP32[16530] = 4096;
  HEAP32[16532] = -1;
  HEAP32[16533] = -1;
  HEAP32[16534] = 0;
  HEAP32[16522] = 0;
  HEAP32[16529] = $magic$i$i & -16 ^ 1431655768;
  $74 = 4096;
 } else $74 = HEAP32[16531] | 0;
 $add$i135 = $nb$0 + 48 | 0;
 $sub$i136 = $nb$0 + 47 | 0;
 $add9$i = $74 + $sub$i136 | 0;
 $neg$i137 = 0 - $74 | 0;
 $and11$i = $add9$i & $neg$i137;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $75 = HEAP32[16521] | 0;
 if ($75 | 0) {
  $76 = HEAP32[16519] | 0;
  $add17$i = $76 + $and11$i | 0;
  if ($add17$i >>> 0 <= $76 >>> 0 | $add17$i >>> 0 > $75 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L178 : do if (!(HEAP32[16522] & 4)) {
  $78 = HEAP32[16417] | 0;
  L180 : do if (!$78) label = 128; else {
   $sp$0$i$i = 66092;
   while (1) {
    $79 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($79 >>> 0 <= $78 >>> 0) {
     $size$i$i = $sp$0$i$i + 4 | 0;
     if (($79 + (HEAP32[$size$i$i >> 2] | 0) | 0) >>> 0 > $78 >>> 0) break;
    }
    $81 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$81) {
     label = 128;
     break L180;
    } else $sp$0$i$i = $81;
   }
   $and80$i = $add9$i - $70 & $neg$i137;
   if ($and80$i >>> 0 < 2147483647) {
    $and$i18 = $and80$i + 3 & -4;
    $call$i19 = _emscripten_get_sbrk_ptr() | 0;
    $89 = HEAP32[$call$i19 >> 2] | 0;
    $add1$i20 = $89 + $and$i18 | 0;
    do if (($and$i18 | 0) < 1 | $add1$i20 >>> 0 > $89 >>> 0) {
     if ($add1$i20 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add1$i20 | 0) | 0)) {
      label = 146;
      break;
     }
     HEAP32[$call$i19 >> 2] = $add1$i20;
     $retval$0$i32 = $89;
    } else label = 146; while (0);
    if ((label | 0) == 146) {
     HEAP32[16056] = 48;
     $retval$0$i32 = -1;
    }
    if (($retval$0$i32 | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$size$i$i >> 2] | 0) | 0)) if (($retval$0$i32 | 0) == (-1 | 0)) $tsize$2647482$i = $and80$i; else {
     $tbase$795$i = $retval$0$i32;
     $tsize$794$i = $and80$i;
     label = 175;
     break L178;
    } else {
     $br$2$ph$i = $retval$0$i32;
     $ssize$2$ph$i = $and80$i;
     label = 149;
    }
   } else $tsize$2647482$i = 0;
  } while (0);
  do if ((label | 0) == 128) {
   $call$i = _emscripten_get_sbrk_ptr() | 0;
   $82 = HEAP32[$call$i >> 2] | 0;
   if ($82 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($82 | 0) | 0)) {
    HEAP32[16056] = 48;
    $tsize$2647482$i = 0;
    break;
   }
   HEAP32[$call$i >> 2] = $82;
   $83 = $82;
   if (($83 | 0) == (-1 | 0)) $tsize$2647482$i = 0; else {
    $84 = HEAP32[16530] | 0;
    $sub41$i = $84 + -1 | 0;
    $spec$select96$i = (($sub41$i & $82 | 0) == 0 ? 0 : ($sub41$i + $82 & 0 - $84) - $82 | 0) + $and11$i | 0;
    $85 = HEAP32[16519] | 0;
    $add54$i = $spec$select96$i + $85 | 0;
    if ($spec$select96$i >>> 0 > $nb$0 >>> 0 & $spec$select96$i >>> 0 < 2147483647) {
     $86 = HEAP32[16521] | 0;
     if ($86 | 0) if ($add54$i >>> 0 <= $85 >>> 0 | $add54$i >>> 0 > $86 >>> 0) {
      $tsize$2647482$i = 0;
      break;
     }
     $and$i3 = $spec$select96$i + 3 & -4;
     $call$i4 = _emscripten_get_sbrk_ptr() | 0;
     $87 = HEAP32[$call$i4 >> 2] | 0;
     $add1$i = $87 + $and$i3 | 0;
     do if (($and$i3 | 0) < 1 | $add1$i >>> 0 > $87 >>> 0) {
      if ($add1$i >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add1$i | 0) | 0)) {
       label = 139;
       break;
      }
      HEAP32[$call$i4 >> 2] = $add1$i;
      $retval$0$i14 = $87;
     } else label = 139; while (0);
     if ((label | 0) == 139) {
      HEAP32[16056] = 48;
      $retval$0$i14 = -1;
     }
     if (($retval$0$i14 | 0) == ($83 | 0)) {
      $tbase$795$i = $83;
      $tsize$794$i = $spec$select96$i;
      label = 175;
      break L178;
     } else {
      $br$2$ph$i = $retval$0$i14;
      $ssize$2$ph$i = $spec$select96$i;
      label = 149;
     }
    } else $tsize$2647482$i = 0;
   }
  } while (0);
  L217 : do if ((label | 0) == 149) {
   if (!($add$i135 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2647482$i = 0;
    break;
   } else {
    $tbase$795$i = $br$2$ph$i;
    $tsize$794$i = $ssize$2$ph$i;
    label = 175;
    break L178;
   }
   $93 = HEAP32[16531] | 0;
   $and104$i = $sub$i136 - $ssize$2$ph$i + $93 & 0 - $93;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$795$i = $br$2$ph$i;
    $tsize$794$i = $ssize$2$ph$i;
    label = 175;
    break L178;
   }
   $and$i36 = $and104$i + 3 & -4;
   $call$i37 = _emscripten_get_sbrk_ptr() | 0;
   $94 = HEAP32[$call$i37 >> 2] | 0;
   $add1$i38 = $94 + $and$i36 | 0;
   do if (($and$i36 | 0) < 1 | $add1$i38 >>> 0 > $94 >>> 0) {
    if ($add1$i38 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add1$i38 | 0) | 0)) {
     label = 154;
     break;
    }
    HEAP32[$call$i37 >> 2] = $add1$i38;
    if (($94 | 0) != (-1 | 0)) {
     $tbase$795$i = $br$2$ph$i;
     $tsize$794$i = $and104$i + $ssize$2$ph$i | 0;
     label = 175;
     break L178;
    }
   } else label = 154; while (0);
   if ((label | 0) == 154) HEAP32[16056] = 48;
   $and$i54 = 3 - $ssize$2$ph$i & -4;
   $call$i55 = _emscripten_get_sbrk_ptr() | 0;
   $96 = HEAP32[$call$i55 >> 2] | 0;
   $add1$i56 = $96 + $and$i54 | 0;
   do if (($and$i54 | 0) < 1 | $add1$i56 >>> 0 > $96 >>> 0) {
    if ($add1$i56 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add1$i56 | 0) | 0)) break;
    HEAP32[$call$i55 >> 2] = $add1$i56;
    $tsize$2647482$i = 0;
    break L217;
   } while (0);
   HEAP32[16056] = 48;
   $tsize$2647482$i = 0;
  } while (0);
  HEAP32[16522] = HEAP32[16522] | 4;
  $tsize$4$i = $tsize$2647482$i;
  label = 164;
 } else {
  $tsize$4$i = 0;
  label = 164;
 } while (0);
 if ((label | 0) == 164) if ($and11$i >>> 0 < 2147483647) {
  $and$i72 = $and11$i + 3 & -4;
  $call$i73 = _emscripten_get_sbrk_ptr() | 0;
  $98 = HEAP32[$call$i73 >> 2] | 0;
  $add1$i74 = $98 + $and$i72 | 0;
  do if (($and$i72 | 0) < 1 | $add1$i74 >>> 0 > $98 >>> 0) {
   if ($add1$i74 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add1$i74 | 0) | 0)) {
    label = 169;
    break;
   }
   HEAP32[$call$i73 >> 2] = $add1$i74;
   $retval$0$i86 = $98;
  } else label = 169; while (0);
  if ((label | 0) == 169) {
   HEAP32[16056] = 48;
   $retval$0$i86 = -1;
  }
  $call$i89 = _emscripten_get_sbrk_ptr() | 0;
  $100 = HEAP32[$call$i89 >> 2] | 0;
  if ($100 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($100 | 0) | 0)) {
   HEAP32[16056] = 48;
   $retval$0$i98 = -1;
  } else label = 172; else label = 172;
  if ((label | 0) == 172) {
   HEAP32[$call$i89 >> 2] = $100;
   $retval$0$i98 = $100;
  }
  $sub$ptr$sub$i = $retval$0$i98 - $retval$0$i86 | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($retval$0$i86 | 0) == (-1 | 0) | $cmp141$i ^ 1 | $retval$0$i86 >>> 0 < $retval$0$i98 >>> 0 & (($retval$0$i86 | 0) != (-1 | 0) & ($retval$0$i98 | 0) != (-1 | 0)) ^ 1)) {
   $tbase$795$i = $retval$0$i86;
   $tsize$794$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 175;
  }
 }
 if ((label | 0) == 175) {
  $add150$i = (HEAP32[16519] | 0) + $tsize$794$i | 0;
  HEAP32[16519] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[16520] | 0) >>> 0) HEAP32[16520] = $add150$i;
  $104 = HEAP32[16417] | 0;
  L261 : do if (!$104) {
   $105 = HEAP32[16415] | 0;
   if (($105 | 0) == 0 | $tbase$795$i >>> 0 < $105 >>> 0) HEAP32[16415] = $tbase$795$i;
   HEAP32[16523] = $tbase$795$i;
   HEAP32[16524] = $tsize$794$i;
   HEAP32[16526] = 0;
   HEAP32[16420] = HEAP32[16529];
   HEAP32[16419] = -1;
   HEAP32[16424] = 65684;
   HEAP32[16423] = 65684;
   HEAP32[16426] = 65692;
   HEAP32[16425] = 65692;
   HEAP32[16428] = 65700;
   HEAP32[16427] = 65700;
   HEAP32[16430] = 65708;
   HEAP32[16429] = 65708;
   HEAP32[16432] = 65716;
   HEAP32[16431] = 65716;
   HEAP32[16434] = 65724;
   HEAP32[16433] = 65724;
   HEAP32[16436] = 65732;
   HEAP32[16435] = 65732;
   HEAP32[16438] = 65740;
   HEAP32[16437] = 65740;
   HEAP32[16440] = 65748;
   HEAP32[16439] = 65748;
   HEAP32[16442] = 65756;
   HEAP32[16441] = 65756;
   HEAP32[16444] = 65764;
   HEAP32[16443] = 65764;
   HEAP32[16446] = 65772;
   HEAP32[16445] = 65772;
   HEAP32[16448] = 65780;
   HEAP32[16447] = 65780;
   HEAP32[16450] = 65788;
   HEAP32[16449] = 65788;
   HEAP32[16452] = 65796;
   HEAP32[16451] = 65796;
   HEAP32[16454] = 65804;
   HEAP32[16453] = 65804;
   HEAP32[16456] = 65812;
   HEAP32[16455] = 65812;
   HEAP32[16458] = 65820;
   HEAP32[16457] = 65820;
   HEAP32[16460] = 65828;
   HEAP32[16459] = 65828;
   HEAP32[16462] = 65836;
   HEAP32[16461] = 65836;
   HEAP32[16464] = 65844;
   HEAP32[16463] = 65844;
   HEAP32[16466] = 65852;
   HEAP32[16465] = 65852;
   HEAP32[16468] = 65860;
   HEAP32[16467] = 65860;
   HEAP32[16470] = 65868;
   HEAP32[16469] = 65868;
   HEAP32[16472] = 65876;
   HEAP32[16471] = 65876;
   HEAP32[16474] = 65884;
   HEAP32[16473] = 65884;
   HEAP32[16476] = 65892;
   HEAP32[16475] = 65892;
   HEAP32[16478] = 65900;
   HEAP32[16477] = 65900;
   HEAP32[16480] = 65908;
   HEAP32[16479] = 65908;
   HEAP32[16482] = 65916;
   HEAP32[16481] = 65916;
   HEAP32[16484] = 65924;
   HEAP32[16483] = 65924;
   HEAP32[16486] = 65932;
   HEAP32[16485] = 65932;
   $sub172$i = $tsize$794$i + -40 | 0;
   $107 = $tbase$795$i + 8 | 0;
   $cond$i48$i = ($107 & 7 | 0) == 0 ? 0 : 0 - $107 & 7;
   $add$ptr4$i49$i = $tbase$795$i + $cond$i48$i | 0;
   $sub5$i50$i = $sub172$i - $cond$i48$i | 0;
   HEAP32[16417] = $add$ptr4$i49$i;
   HEAP32[16414] = $sub5$i50$i;
   HEAP32[$add$ptr4$i49$i + 4 >> 2] = $sub5$i50$i | 1;
   HEAP32[$tbase$795$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[16418] = HEAP32[16533];
  } else {
   $sp$0112$i = 66092;
   while (1) {
    $109 = HEAP32[$sp$0112$i >> 2] | 0;
    $size188$i = $sp$0112$i + 4 | 0;
    $110 = HEAP32[$size188$i >> 2] | 0;
    if (($tbase$795$i | 0) == ($109 + $110 | 0)) {
     label = 184;
     break;
    }
    $111 = HEAP32[$sp$0112$i + 8 >> 2] | 0;
    if (!$111) break; else $sp$0112$i = $111;
   }
   if ((label | 0) == 184) if (!(HEAP32[$sp$0112$i + 12 >> 2] & 8)) if ($tbase$795$i >>> 0 > $104 >>> 0 & $109 >>> 0 <= $104 >>> 0) {
    HEAP32[$size188$i >> 2] = $110 + $tsize$794$i;
    $add215$i = (HEAP32[16414] | 0) + $tsize$794$i | 0;
    $114 = $104 + 8 | 0;
    $cond$i40$i = ($114 & 7 | 0) == 0 ? 0 : 0 - $114 & 7;
    $add$ptr4$i41$i = $104 + $cond$i40$i | 0;
    $sub5$i$i = $add215$i - $cond$i40$i | 0;
    HEAP32[16417] = $add$ptr4$i41$i;
    HEAP32[16414] = $sub5$i$i;
    HEAP32[$add$ptr4$i41$i + 4 >> 2] = $sub5$i$i | 1;
    HEAP32[$104 + $add215$i + 4 >> 2] = 40;
    HEAP32[16418] = HEAP32[16533];
    break;
   }
   if ($tbase$795$i >>> 0 < (HEAP32[16415] | 0) >>> 0) HEAP32[16415] = $tbase$795$i;
   $add$ptr227$i = $tbase$795$i + $tsize$794$i | 0;
   $sp$1111$i = 66092;
   while (1) {
    if ((HEAP32[$sp$1111$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 192;
     break;
    }
    $118 = HEAP32[$sp$1111$i + 8 >> 2] | 0;
    if (!$118) break; else $sp$1111$i = $118;
   }
   if ((label | 0) == 192) if (!(HEAP32[$sp$1111$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1111$i >> 2] = $tbase$795$i;
    $size245$i = $sp$1111$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$794$i;
    $121 = $tbase$795$i + 8 | 0;
    $add$ptr4$i$i = $tbase$795$i + (($121 & 7 | 0) == 0 ? 0 : 0 - $121 & 7) | 0;
    $122 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($122 & 7 | 0) == 0 ? 0 : 0 - $122 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i$i + 4 >> 2] = $nb$0 | 3;
    L284 : do if (($104 | 0) == ($add$ptr16$i$i | 0)) {
     $add$i$i = (HEAP32[16414] | 0) + $sub18$i$i | 0;
     HEAP32[16414] = $add$i$i;
     HEAP32[16417] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if ((HEAP32[16416] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[16413] | 0) + $sub18$i$i | 0;
      HEAP32[16413] = $add26$i$i;
      HEAP32[16416] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $126 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($126 & 3 | 0) == 1) {
      $and37$i$i = $126 & -8;
      $shr$i25$i = $126 >>> 3;
      L292 : do if ($126 >>> 0 < 256) {
       $127 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $128 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       if (($128 | 0) == ($127 | 0)) {
        HEAP32[16411] = HEAP32[16411] & ~(1 << $shr$i25$i);
        break;
       } else {
        HEAP32[$127 + 12 >> 2] = $128;
        HEAP32[$128 + 8 >> 2] = $127;
        break;
       }
      } else {
       $130 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $131 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($131 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $133 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$133) {
         $134 = HEAP32[$child$i$i >> 2] | 0;
         if (!$134) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $134;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $133;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $135 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$135) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $136 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$136) break; else {
           $R$1$i$i$be = $136;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $135;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        HEAP32[$RP$1$i$i >> 2] = 0;
        $R$3$i$i = $R$1$i$i;
       } else {
        $132 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        HEAP32[$132 + 12 >> 2] = $131;
        HEAP32[$131 + 8 >> 2] = $132;
        $R$3$i$i = $131;
       } while (0);
       if (!$130) break;
       $137 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 65948 + ($137 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[16412] = HEAP32[16412] & ~(1 << $137);
        break L292;
       } else {
        $arrayidx143$i$i = $130 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $130 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L292;
       } while (0);
       HEAP32[$R$3$i$i + 24 >> 2] = $130;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $141 = HEAP32[$child166$i$i >> 2] | 0;
       if ($141 | 0) {
        HEAP32[$R$3$i$i + 16 >> 2] = $141;
        HEAP32[$141 + 24 >> 2] = $R$3$i$i;
       }
       $142 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$142) break;
       HEAP32[$R$3$i$i + 20 >> 2] = $142;
       HEAP32[$142 + 24 >> 2] = $R$3$i$i;
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 65684 + ($shr214$i$i << 1 << 2) | 0;
      $144 = HEAP32[16411] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      if (!($144 & $shl226$i$i)) {
       HEAP32[16411] = $144 | $shl226$i$i;
       $$pre$phi$i32$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $145 = $arrayidx223$i$i + 8 | 0;
       $$pre$phi$i32$iZ2D = $145;
       $F224$0$i$i = HEAP32[$145 >> 2] | 0;
      }
      HEAP32[$$pre$phi$i32$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 65948 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $147 = HEAP32[16412] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($147 & $shl294$i$i)) {
      HEAP32[16412] = $147 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $148 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L337 : do if ((HEAP32[$148 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i34$i = $148; else {
      $K305$08$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$07$i$i = $148;
      while (1) {
       $arrayidx325$i$i = $T$07$i$i + 16 + ($K305$08$i$i >>> 31 << 2) | 0;
       $150 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$150) break;
       if ((HEAP32[$150 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i34$i = $150;
        break L337;
       } else {
        $K305$08$i$i = $K305$08$i$i << 1;
        $T$07$i$i = $150;
       }
      }
      HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$07$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break L284;
     } while (0);
     $fd344$i$i = $T$0$lcssa$i34$i + 8 | 0;
     $152 = HEAP32[$fd344$i$i >> 2] | 0;
     HEAP32[$152 + 12 >> 2] = $add$ptr17$i$i;
     HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 8 >> 2] = $152;
     HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i34$i;
     HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
    } while (0);
    $retval$0 = $add$ptr4$i$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 66092;
   while (1) {
    $153 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($153 >>> 0 <= $104 >>> 0) {
     $add$ptr$i$i$i = $153 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $104 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $156 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($156 & 7 | 0) == 0 ? 0 : 0 - $156 & 7) | 0;
   $add$ptr81$i$i = $104 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $104 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$794$i + -40 | 0;
   $157 = $tbase$795$i + 8 | 0;
   $cond$i$i$i = ($157 & 7 | 0) == 0 ? 0 : 0 - $157 & 7;
   $add$ptr4$i$i$i = $tbase$795$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[16417] = $add$ptr4$i$i$i;
   HEAP32[16414] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$795$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[16418] = HEAP32[16533];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[16523];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[16524];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[16525];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[16526];
   HEAP32[16523] = $tbase$795$i;
   HEAP32[16524] = $tsize$794$i;
   HEAP32[16526] = 0;
   HEAP32[16525] = $add$ptr14$i$i;
   $159 = $cond13$i$i + 24 | 0;
   do {
    $159$looptemp = $159;
    $159 = $159 + 4 | 0;
    HEAP32[$159 >> 2] = 7;
   } while (($159$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($104 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $104 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$104 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 65684 + ($shr$i$i << 1 << 2) | 0;
     $161 = HEAP32[16411] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($161 & $shl39$i$i)) {
      HEAP32[16411] = $161 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $162 = $arrayidx$i$i + 8 | 0;
      $$pre$phi$i$iZ2D = $162;
      $F$0$i$i = HEAP32[$162 >> 2] | 0;
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $104;
     HEAP32[$F$0$i$i + 12 >> 2] = $104;
     HEAP32[$104 + 8 >> 2] = $F$0$i$i;
     HEAP32[$104 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 65948 + ($I57$0$i$i << 2) | 0;
    HEAP32[$104 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$104 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $164 = HEAP32[16412] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($164 & $shl95$i$i)) {
     HEAP32[16412] = $164 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $104;
     HEAP32[$104 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$104 + 12 >> 2] = $104;
     HEAP32[$104 + 8 >> 2] = $104;
     break;
    }
    $165 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L371 : do if ((HEAP32[$165 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $165; else {
     $K105$010$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$09$i$i = $165;
     while (1) {
      $arrayidx126$i$i = $T$09$i$i + 16 + ($K105$010$i$i >>> 31 << 2) | 0;
      $167 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$167) break;
      if ((HEAP32[$167 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $167;
       break L371;
      } else {
       $K105$010$i$i = $K105$010$i$i << 1;
       $T$09$i$i = $167;
      }
     }
     HEAP32[$arrayidx126$i$i >> 2] = $104;
     HEAP32[$104 + 24 >> 2] = $T$09$i$i;
     HEAP32[$104 + 12 >> 2] = $104;
     HEAP32[$104 + 8 >> 2] = $104;
     break L261;
    } while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $169 = HEAP32[$fd148$i$i >> 2] | 0;
    HEAP32[$169 + 12 >> 2] = $104;
    HEAP32[$fd148$i$i >> 2] = $104;
    HEAP32[$104 + 8 >> 2] = $169;
    HEAP32[$104 + 12 >> 2] = $T$0$lcssa$i$i;
    HEAP32[$104 + 24 >> 2] = 0;
   }
  } while (0);
  $170 = HEAP32[16414] | 0;
  if ($170 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $170 - $nb$0 | 0;
   HEAP32[16414] = $sub260$i;
   $171 = HEAP32[16417] | 0;
   $add$ptr262$i = $171 + $nb$0 | 0;
   HEAP32[16417] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$171 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $171 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[16056] = 48;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _silk_decode_indices($psDec, $psRangeDec, $FrameIndex, $decode_LBRR, $condCoding) {
 $psDec = $psDec | 0;
 $psRangeDec = $psRangeDec | 0;
 $FrameIndex = $FrameIndex | 0;
 $decode_LBRR = $decode_LBRR | 0;
 $condCoding = $condCoding | 0;
 var $$pre = 0, $$pre14$i$i = 0, $$pre14$i$i110 = 0, $$pre14$i$i153 = 0, $$pre14$i$i196 = 0, $$pre14$i$i239 = 0, $$pre14$i$i24 = 0, $$pre14$i$i282 = 0, $$pre14$i$i325 = 0, $$pre14$i$i368 = 0, $$pre14$i$i411 = 0, $$pre14$i$i454 = 0, $$pre14$i$i497 = 0, $$pre14$i$i540 = 0, $$pre14$i$i583 = 0, $$pre14$i$i631 = 0, $$pre14$i$i67 = 0, $$pre14$i$i674 = 0, $$pre14$i$i717 = 0, $$pre14$i$i760 = 0, $$pre14$i$i803 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $260 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $98 = 0, $99 = 0, $Ix$0 = 0, $Ix$1 = 0, $PERIndex = 0, $Seed = 0, $and7$i$i = 0, $and7$i$i212 = 0, $and7$i$i255 = 0, $and7$i$i298 = 0, $and7$i$i341 = 0, $and7$i$i384 = 0, $and7$i$i556 = 0, $and7$i$i599 = 0, $arrayidx43 = 0, $arrayidx71 = 0, $cmp = 0, $cmp22$i = 0, $cmp3096 = 0, $cond$i$i$i = 0, $cond$i$i$i120 = 0, $cond$i$i$i163 = 0, $cond$i$i$i206 = 0, $cond$i$i$i249 = 0, $cond$i$i$i292 = 0, $cond$i$i$i335 = 0, $cond$i$i$i34 = 0, $cond$i$i$i378 = 0, $cond$i$i$i421 = 0, $cond$i$i$i464 = 0, $cond$i$i$i507 = 0, $cond$i$i$i550 = 0, $cond$i$i$i593 = 0, $cond$i$i$i641 = 0, $cond$i$i$i684 = 0, $cond$i$i$i727 = 0, $cond$i$i$i77 = 0, $cond$i$i$i770 = 0, $cond$i$i$i813 = 0, $conv = 0, $conv$i603 = 0, $conv125 = 0, $conv146 = 0, $conv155 = 0, $conv177$sink = 0, $conv189 = 0, $conv56$pre$phiZ2D = 0, $conv99$sink = 0, $ec_ix = 0, $ec_prevLagIndex = 0, $ec_prevLagIndex150$pre$phiZ2D = 0, $ec_sel_ptr$024$i = 0, $i$023$i = 0, $i$097 = 0, $i$195 = 0, $idxprom = 0, $inc$i = 0, $inc$i$i$i = 0, $inc$i$i$i116 = 0, $inc$i$i$i159 = 0, $inc$i$i$i202 = 0, $inc$i$i$i245 = 0, $inc$i$i$i288 = 0, $inc$i$i$i30 = 0, $inc$i$i$i331 = 0, $inc$i$i$i374 = 0, $inc$i$i$i417 = 0, $inc$i$i$i460 = 0, $inc$i$i$i503 = 0, $inc$i$i$i546 = 0, $inc$i$i$i589 = 0, $inc$i$i$i637 = 0, $inc$i$i$i680 = 0, $inc$i$i$i723 = 0, $inc$i$i$i73 = 0, $inc$i$i$i766 = 0, $inc$i$i$i809 = 0, $inc$i350 = 0, $inc$i436 = 0, $inc$i479 = 0, $inc$i522 = 0, $inc171 = 0, $inc171105 = 0, $indices = 0, $lagIndex138 = 0, $mul$i = 0, $mul$i138 = 0, $mul$i181 = 0, $mul$i224 = 0, $mul$i267 = 0, $mul$i310 = 0, $mul$i353 = 0, $mul$i396 = 0, $mul$i439 = 0, $mul$i482 = 0, $mul$i52 = 0, $mul$i525 = 0, $mul$i568 = 0, $mul$i616 = 0, $mul$i659 = 0, $mul$i702 = 0, $mul$i745 = 0, $mul$i788 = 0, $mul$i9 = 0, $mul$i95 = 0, $mul135 = 0, $nbits_total$i$i = 0, $nbits_total$i$i102 = 0, $nbits_total$i$i145 = 0, $nbits_total$i$i16 = 0, $nbits_total$i$i188 = 0, $nbits_total$i$i231 = 0, $nbits_total$i$i274 = 0, $nbits_total$i$i317 = 0, $nbits_total$i$i360 = 0, $nbits_total$i$i403 = 0, $nbits_total$i$i532 = 0, $nbits_total$i$i575 = 0, $nbits_total$i$i59 = 0, $nbits_total$i$i623 = 0, $nbits_total$i$i666 = 0, $nbits_total$i$i709 = 0, $nbits_total$i$i752 = 0, $nbits_total$i$i795 = 0, $offs$i$i$i = 0, $offs$i$i$i104 = 0, $offs$i$i$i147 = 0, $offs$i$i$i18 = 0, $offs$i$i$i190 = 0, $offs$i$i$i233 = 0, $offs$i$i$i276 = 0, $offs$i$i$i319 = 0, $offs$i$i$i362 = 0, $offs$i$i$i405 = 0, $offs$i$i$i534 = 0, $offs$i$i$i577 = 0, $offs$i$i$i61 = 0, $offs$i$i$i625 = 0, $offs$i$i$i668 = 0, $offs$i$i$i711 = 0, $offs$i$i$i754 = 0, $offs$i$i$i797 = 0, $order$i = 0, $rem$i$i = 0, $rem$i$i103 = 0, $rem$i$i146 = 0, $rem$i$i17 = 0, $rem$i$i189 = 0, $rem$i$i232 = 0, $rem$i$i275 = 0, $rem$i$i318 = 0, $rem$i$i361 = 0, $rem$i$i404 = 0, $rem$i$i533 = 0, $rem$i$i576 = 0, $rem$i$i60 = 0, $rem$i$i624 = 0, $rem$i$i667 = 0, $rem$i$i710 = 0, $rem$i$i753 = 0, $rem$i$i796 = 0, $ret$0$i = 0, $ret$0$i134 = 0, $ret$0$i177 = 0, $ret$0$i220 = 0, $ret$0$i263 = 0, $ret$0$i306 = 0, $ret$0$i349 = 0, $ret$0$i392 = 0, $ret$0$i435 = 0, $ret$0$i478 = 0, $ret$0$i48 = 0, $ret$0$i5 = 0, $ret$0$i521 = 0, $ret$0$i564 = 0, $ret$0$i612 = 0, $ret$0$i655 = 0, $ret$0$i698 = 0, $ret$0$i741 = 0, $ret$0$i784 = 0, $ret$0$i91 = 0, $rng$i = 0, $rng$i560 = 0, $rng$i651 = 0, $rng$i737 = 0, $rng$i780 = 0, $s$0$i = 0, $s$0$i133 = 0, $s$0$i176 = 0, $s$0$i219 = 0, $s$0$i262 = 0, $s$0$i305 = 0, $s$0$i348 = 0, $s$0$i391 = 0, $s$0$i4 = 0, $s$0$i434 = 0, $s$0$i47 = 0, $s$0$i477 = 0, $s$0$i520 = 0, $s$0$i563 = 0, $s$0$i611 = 0, $s$0$i654 = 0, $s$0$i697 = 0, $s$0$i740 = 0, $s$0$i783 = 0, $s$0$i90 = 0, $shl$i$i = 0, $shl$i$i199 = 0, $shl$i$i242 = 0, $shl$i$i285 = 0, $shl$i$i328 = 0, $shl$i$i371 = 0, $shl$i$i543 = 0, $shl$i$i586 = 0, $shr$i = 0, $shr$i132 = 0, $shr$i175 = 0, $shr$i218 = 0, $shr$i261 = 0, $shr$i3 = 0, $shr$i304 = 0, $shr$i347 = 0, $shr$i390 = 0, $shr$i433 = 0, $shr$i46 = 0, $shr$i476 = 0, $shr$i519 = 0, $shr$i562 = 0, $shr$i610 = 0, $shr$i653 = 0, $shr$i696 = 0, $shr$i739 = 0, $shr$i782 = 0, $shr$i89 = 0, $signalType = 0, $storage$i$i$i105 = 0, $storage$i$i$i535 = 0, $storage$i$i$i669 = 0, $sub$i = 0, $sub$i12 = 0, $sub$i141 = 0, $sub$i184 = 0, $sub$i227 = 0, $sub$i270 = 0, $sub$i313 = 0, $sub$i356 = 0, $sub$i399 = 0, $sub$i442 = 0, $sub$i485 = 0, $sub$i528 = 0, $sub$i55 = 0, $sub$i571 = 0, $sub$i619 = 0, $sub$i662 = 0, $sub$i705 = 0, $sub$i748 = 0, $sub$i791 = 0, $sub$i98 = 0, $sub3$i = 0, $sub3$i13 = 0, $sub3$i142 = 0, $sub3$i185 = 0, $sub3$i228 = 0, $sub3$i271 = 0, $sub3$i314 = 0, $sub3$i357 = 0, $sub3$i400 = 0, $sub3$i443 = 0, $sub3$i486 = 0, $sub3$i529 = 0, $sub3$i56 = 0, $sub3$i572 = 0, $sub3$i620 = 0, $sub3$i663 = 0, $sub3$i706 = 0, $sub3$i749 = 0, $sub3$i792 = 0, $sub3$i99 = 0, $val$i = 0, $val$i561 = 0, $val$i652 = 0, $val$i738 = 0, $val$i781 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ec_ix = sp;
 if (!$decode_LBRR) if (!(HEAP32[$psDec + 2404 + ($FrameIndex << 2) >> 2] | 0)) {
  $rng$i560 = $psRangeDec + 28 | 0;
  $13 = HEAP32[$rng$i560 >> 2] | 0;
  $val$i561 = $psRangeDec + 32 | 0;
  $14 = HEAP32[$val$i561 >> 2] | 0;
  $shr$i562 = $13 >>> 8;
  $ret$0$i564 = -1;
  $s$0$i563 = $13;
  while (1) {
   $ret$0$i564 = $ret$0$i564 + 1 | 0;
   $mul$i568 = Math_imul($shr$i562, HEAPU8[51901 + $ret$0$i564 >> 0] | 0) | 0;
   if ($14 >>> 0 >= $mul$i568 >>> 0) break; else $s$0$i563 = $mul$i568;
  }
  $sub$i571 = $14 - $mul$i568 | 0;
  HEAP32[$val$i561 >> 2] = $sub$i571;
  $sub3$i572 = $s$0$i563 - $mul$i568 | 0;
  HEAP32[$rng$i560 >> 2] = $sub3$i572;
  if ($sub3$i572 >>> 0 < 8388609) {
   $nbits_total$i$i575 = $psRangeDec + 20 | 0;
   $rem$i$i576 = $psRangeDec + 40 | 0;
   $offs$i$i$i577 = $psRangeDec + 24 | 0;
   $$pre14$i$i583 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $16 = HEAP32[$nbits_total$i$i575 >> 2] | 0;
   $17 = $sub3$i572;
   $18 = HEAP32[$offs$i$i$i577 >> 2] | 0;
   $21 = HEAP32[$rem$i$i576 >> 2] | 0;
   $24 = $sub$i571;
   while (1) {
    $16 = $16 + 8 | 0;
    HEAP32[$nbits_total$i$i575 >> 2] = $16;
    $shl$i$i586 = $17 << 8;
    HEAP32[$rng$i560 >> 2] = $shl$i$i586;
    if ($18 >>> 0 < $$pre14$i$i583 >>> 0) {
     $19 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i589 = $18 + 1 | 0;
     HEAP32[$offs$i$i$i577 >> 2] = $inc$i$i$i589;
     $267 = $inc$i$i$i589;
     $cond$i$i$i593 = HEAPU8[$19 + $18 >> 0] | 0;
    } else {
     $267 = $18;
     $cond$i$i$i593 = 0;
    }
    HEAP32[$rem$i$i576 >> 2] = $cond$i$i$i593;
    $and7$i$i599 = ($24 << 8 & 2147483392 | ($cond$i$i$i593 | $21 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i561 >> 2] = $and7$i$i599;
    if ($shl$i$i586 >>> 0 >= 8388609) {
     $26 = $shl$i$i586;
     $28 = $and7$i$i599;
     $Ix$0 = $ret$0$i564;
     break;
    } else {
     $17 = $shl$i$i586;
     $18 = $267;
     $21 = $cond$i$i$i593;
     $24 = $and7$i$i599;
    }
   }
  } else {
   $26 = $sub3$i572;
   $28 = $sub$i571;
   $Ix$0 = $ret$0$i564;
  }
 } else label = 3; else label = 3;
 if ((label | 0) == 3) {
  $rng$i = $psRangeDec + 28 | 0;
  $1 = HEAP32[$rng$i >> 2] | 0;
  $val$i = $psRangeDec + 32 | 0;
  $2 = HEAP32[$val$i >> 2] | 0;
  $shr$i = $1 >>> 8;
  $ret$0$i = -1;
  $s$0$i = $1;
  while (1) {
   $inc$i = $ret$0$i + 1 | 0;
   $mul$i = Math_imul($shr$i, HEAPU8[51897 + $inc$i >> 0] | 0) | 0;
   if ($2 >>> 0 < $mul$i >>> 0) {
    $ret$0$i = $inc$i;
    $s$0$i = $mul$i;
   } else break;
  }
  $sub$i = $2 - $mul$i | 0;
  HEAP32[$val$i >> 2] = $sub$i;
  $sub3$i = $s$0$i - $mul$i | 0;
  HEAP32[$rng$i >> 2] = $sub3$i;
  if ($sub3$i >>> 0 < 8388609) {
   $nbits_total$i$i = $psRangeDec + 20 | 0;
   $rem$i$i = $psRangeDec + 40 | 0;
   $offs$i$i$i = $psRangeDec + 24 | 0;
   $$pre14$i$i = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $12 = $sub$i;
   $4 = HEAP32[$nbits_total$i$i >> 2] | 0;
   $5 = $sub3$i;
   $6 = HEAP32[$offs$i$i$i >> 2] | 0;
   $9 = HEAP32[$rem$i$i >> 2] | 0;
   while (1) {
    $4 = $4 + 8 | 0;
    HEAP32[$nbits_total$i$i >> 2] = $4;
    $shl$i$i = $5 << 8;
    HEAP32[$rng$i >> 2] = $shl$i$i;
    if ($6 >>> 0 < $$pre14$i$i >>> 0) {
     $7 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i = $6 + 1 | 0;
     HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
     $266 = $inc$i$i$i;
     $cond$i$i$i = HEAPU8[$7 + $6 >> 0] | 0;
    } else {
     $266 = $6;
     $cond$i$i$i = 0;
    }
    HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
    $and7$i$i = ($12 << 8 & 2147483392 | ($cond$i$i$i | $9 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i >> 2] = $and7$i$i;
    if ($shl$i$i >>> 0 >= 8388609) {
     $264 = $and7$i$i;
     $265 = $shl$i$i;
     break;
    } else {
     $12 = $and7$i$i;
     $5 = $shl$i$i;
     $6 = $266;
     $9 = $cond$i$i$i;
    }
   }
  } else {
   $264 = $sub$i;
   $265 = $sub3$i;
  }
  $26 = $265;
  $28 = $264;
  $Ix$0 = $ret$0$i + 3 | 0;
 }
 $25 = $Ix$0 >>> 1;
 $conv = $25 & 255;
 $indices = $psDec + 2736 | 0;
 $signalType = $psDec + 2765 | 0;
 HEAP8[$signalType >> 0] = $conv;
 HEAP8[$psDec + 2766 >> 0] = $Ix$0 & 1;
 $cmp = ($condCoding | 0) == 2;
 if ($cmp) {
  $rng$i780 = $psRangeDec + 28 | 0;
  $shr$i782 = $26 >>> 8;
  $ret$0$i784 = -1;
  $s$0$i783 = $26;
  while (1) {
   $ret$0$i784 = $ret$0$i784 + 1 | 0;
   $mul$i788 = Math_imul($shr$i782, HEAPU8[20848 + $ret$0$i784 >> 0] | 0) | 0;
   if ($28 >>> 0 >= $mul$i788 >>> 0) break; else $s$0$i783 = $mul$i788;
  }
  $val$i781 = $psRangeDec + 32 | 0;
  $sub$i791 = $28 - $mul$i788 | 0;
  HEAP32[$val$i781 >> 2] = $sub$i791;
  $sub3$i792 = $s$0$i783 - $mul$i788 | 0;
  HEAP32[$rng$i780 >> 2] = $sub3$i792;
  if ($sub3$i792 >>> 0 < 8388609) {
   $nbits_total$i$i795 = $psRangeDec + 20 | 0;
   $rem$i$i796 = $psRangeDec + 40 | 0;
   $offs$i$i$i797 = $psRangeDec + 24 | 0;
   $$pre14$i$i803 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $29 = HEAP32[$nbits_total$i$i795 >> 2] | 0;
   $30 = $sub3$i792;
   $31 = HEAP32[$offs$i$i$i797 >> 2] | 0;
   $34 = HEAP32[$rem$i$i796 >> 2] | 0;
   $37 = $sub$i791;
   while (1) {
    $29 = $29 + 8 | 0;
    HEAP32[$nbits_total$i$i795 >> 2] = $29;
    $30 = $30 << 8;
    HEAP32[$rng$i780 >> 2] = $30;
    if ($31 >>> 0 < $$pre14$i$i803 >>> 0) {
     $32 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i809 = $31 + 1 | 0;
     HEAP32[$offs$i$i$i797 >> 2] = $inc$i$i$i809;
     $268 = $inc$i$i$i809;
     $cond$i$i$i813 = HEAPU8[$32 + $31 >> 0] | 0;
    } else {
     $268 = $31;
     $cond$i$i$i813 = 0;
    }
    HEAP32[$rem$i$i796 >> 2] = $cond$i$i$i813;
    $37 = ($37 << 8 & 2147483392 | ($cond$i$i$i813 | $34 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i781 >> 2] = $37;
    if ($30 >>> 0 >= 8388609) break; else {
     $31 = $268;
     $34 = $cond$i$i$i813;
    }
   }
  }
  HEAP8[$indices >> 0] = $ret$0$i784;
 } else {
  $idxprom = $25 << 24 >> 24;
  $rng$i737 = $psRangeDec + 28 | 0;
  $shr$i739 = $26 >>> 8;
  $ret$0$i741 = -1;
  $s$0$i740 = $26;
  while (1) {
   $ret$0$i741 = $ret$0$i741 + 1 | 0;
   $mul$i745 = Math_imul($shr$i739, HEAPU8[20816 + ($idxprom << 3) + $ret$0$i741 >> 0] | 0) | 0;
   if ($28 >>> 0 >= $mul$i745 >>> 0) break; else $s$0$i740 = $mul$i745;
  }
  $val$i738 = $psRangeDec + 32 | 0;
  $sub$i748 = $28 - $mul$i745 | 0;
  HEAP32[$val$i738 >> 2] = $sub$i748;
  $sub3$i749 = $s$0$i740 - $mul$i745 | 0;
  HEAP32[$rng$i737 >> 2] = $sub3$i749;
  if ($sub3$i749 >>> 0 < 8388609) {
   $nbits_total$i$i752 = $psRangeDec + 20 | 0;
   $rem$i$i753 = $psRangeDec + 40 | 0;
   $offs$i$i$i754 = $psRangeDec + 24 | 0;
   $$pre14$i$i760 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $39 = HEAP32[$nbits_total$i$i752 >> 2] | 0;
   $40 = $sub3$i749;
   $41 = HEAP32[$offs$i$i$i754 >> 2] | 0;
   $44 = HEAP32[$rem$i$i753 >> 2] | 0;
   $47 = $sub$i748;
   while (1) {
    $39 = $39 + 8 | 0;
    HEAP32[$nbits_total$i$i752 >> 2] = $39;
    $40 = $40 << 8;
    HEAP32[$rng$i737 >> 2] = $40;
    if ($41 >>> 0 < $$pre14$i$i760 >>> 0) {
     $42 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i766 = $41 + 1 | 0;
     HEAP32[$offs$i$i$i754 >> 2] = $inc$i$i$i766;
     $269 = $inc$i$i$i766;
     $cond$i$i$i770 = HEAPU8[$42 + $41 >> 0] | 0;
    } else {
     $269 = $41;
     $cond$i$i$i770 = 0;
    }
    HEAP32[$rem$i$i753 >> 2] = $cond$i$i$i770;
    $47 = ($47 << 8 & 2147483392 | ($cond$i$i$i770 | $44 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i738 >> 2] = $47;
    if ($40 >>> 0 >= 8388609) break; else {
     $41 = $269;
     $44 = $cond$i$i$i770;
    }
   }
  }
  HEAP8[$indices >> 0] = $ret$0$i741 << 3;
  $48 = HEAP32[$rng$i737 >> 2] | 0;
  $49 = HEAP32[$val$i738 >> 2] | 0;
  $shr$i696 = $48 >>> 8;
  $ret$0$i698 = -1;
  $s$0$i697 = $48;
  while (1) {
   $ret$0$i698 = $ret$0$i698 + 1 | 0;
   $mul$i702 = Math_imul($shr$i696, HEAPU8[51926 + $ret$0$i698 >> 0] | 0) | 0;
   if ($49 >>> 0 >= $mul$i702 >>> 0) break; else $s$0$i697 = $mul$i702;
  }
  $sub$i705 = $49 - $mul$i702 | 0;
  HEAP32[$val$i738 >> 2] = $sub$i705;
  $sub3$i706 = $s$0$i697 - $mul$i702 | 0;
  HEAP32[$rng$i737 >> 2] = $sub3$i706;
  if ($sub3$i706 >>> 0 < 8388609) {
   $nbits_total$i$i709 = $psRangeDec + 20 | 0;
   $rem$i$i710 = $psRangeDec + 40 | 0;
   $offs$i$i$i711 = $psRangeDec + 24 | 0;
   $$pre14$i$i717 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $51 = HEAP32[$nbits_total$i$i709 >> 2] | 0;
   $52 = $sub3$i706;
   $53 = HEAP32[$offs$i$i$i711 >> 2] | 0;
   $56 = HEAP32[$rem$i$i710 >> 2] | 0;
   $59 = $sub$i705;
   while (1) {
    $51 = $51 + 8 | 0;
    HEAP32[$nbits_total$i$i709 >> 2] = $51;
    $52 = $52 << 8;
    HEAP32[$rng$i737 >> 2] = $52;
    if ($53 >>> 0 < $$pre14$i$i717 >>> 0) {
     $54 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i723 = $53 + 1 | 0;
     HEAP32[$offs$i$i$i711 >> 2] = $inc$i$i$i723;
     $270 = $inc$i$i$i723;
     $cond$i$i$i727 = HEAPU8[$54 + $53 >> 0] | 0;
    } else {
     $270 = $53;
     $cond$i$i$i727 = 0;
    }
    HEAP32[$rem$i$i710 >> 2] = $cond$i$i$i727;
    $59 = ($59 << 8 & 2147483392 | ($cond$i$i$i727 | $56 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i738 >> 2] = $59;
    if ($52 >>> 0 >= 8388609) break; else {
     $53 = $270;
     $56 = $cond$i$i$i727;
    }
   }
  }
  HEAP8[$indices >> 0] = $ret$0$i698 + (HEAPU8[$indices >> 0] | 0);
 }
 $61 = HEAP32[$psDec + 2324 >> 2] | 0;
 $cmp3096 = ($61 | 0) > 1;
 $rng$i651 = $psRangeDec + 28 | 0;
 $val$i652 = $psRangeDec + 32 | 0;
 if ($cmp3096) {
  $nbits_total$i$i666 = $psRangeDec + 20 | 0;
  $rem$i$i667 = $psRangeDec + 40 | 0;
  $offs$i$i$i668 = $psRangeDec + 24 | 0;
  $storage$i$i$i669 = $psRangeDec + 4 | 0;
  $i$097 = 1;
  do {
   $62 = HEAP32[$rng$i651 >> 2] | 0;
   $63 = HEAP32[$val$i652 >> 2] | 0;
   $shr$i653 = $62 >>> 8;
   $ret$0$i655 = -1;
   $s$0$i654 = $62;
   while (1) {
    $ret$0$i655 = $ret$0$i655 + 1 | 0;
    $mul$i659 = Math_imul($shr$i653, HEAPU8[20848 + $ret$0$i655 >> 0] | 0) | 0;
    if ($63 >>> 0 >= $mul$i659 >>> 0) break; else $s$0$i654 = $mul$i659;
   }
   $sub$i662 = $63 - $mul$i659 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i662;
   $sub3$i663 = $s$0$i654 - $mul$i659 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i663;
   if ($sub3$i663 >>> 0 < 8388609) {
    $$pre14$i$i674 = HEAP32[$storage$i$i$i669 >> 2] | 0;
    $65 = HEAP32[$nbits_total$i$i666 >> 2] | 0;
    $66 = $sub3$i663;
    $67 = HEAP32[$offs$i$i$i668 >> 2] | 0;
    $70 = HEAP32[$rem$i$i667 >> 2] | 0;
    $73 = $sub$i662;
    while (1) {
     $65 = $65 + 8 | 0;
     HEAP32[$nbits_total$i$i666 >> 2] = $65;
     $66 = $66 << 8;
     HEAP32[$rng$i651 >> 2] = $66;
     if ($67 >>> 0 < $$pre14$i$i674 >>> 0) {
      $68 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i680 = $67 + 1 | 0;
      HEAP32[$offs$i$i$i668 >> 2] = $inc$i$i$i680;
      $271 = $inc$i$i$i680;
      $cond$i$i$i684 = HEAPU8[$68 + $67 >> 0] | 0;
     } else {
      $271 = $67;
      $cond$i$i$i684 = 0;
     }
     HEAP32[$rem$i$i667 >> 2] = $cond$i$i$i684;
     $73 = ($73 << 8 & 2147483392 | ($cond$i$i$i684 | $70 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $73;
     if ($66 >>> 0 >= 8388609) break; else {
      $67 = $271;
      $70 = $cond$i$i$i684;
     }
    }
   }
   HEAP8[$psDec + 2736 + $i$097 >> 0] = $ret$0$i655;
   $i$097 = $i$097 + 1 | 0;
  } while (($i$097 | 0) != ($61 | 0));
  $76 = HEAP8[$signalType >> 0] | 0;
 } else $76 = $conv;
 $74 = HEAP32[$psDec + 2732 >> 2] | 0;
 $arrayidx43 = (HEAP32[$74 + 16 >> 2] | 0) + (Math_imul($76 << 24 >> 24 >> 1, HEAP16[$74 >> 1] | 0) | 0) | 0;
 $78 = HEAP32[$rng$i651 >> 2] | 0;
 $79 = HEAP32[$val$i652 >> 2] | 0;
 $shr$i610 = $78 >>> 8;
 $ret$0$i612 = -1;
 $s$0$i611 = $78;
 while (1) {
  $ret$0$i612 = $ret$0$i612 + 1 | 0;
  $mul$i616 = Math_imul($shr$i610, HEAPU8[$arrayidx43 + $ret$0$i612 >> 0] | 0) | 0;
  if ($79 >>> 0 >= $mul$i616 >>> 0) break; else $s$0$i611 = $mul$i616;
 }
 $sub$i619 = $79 - $mul$i616 | 0;
 HEAP32[$val$i652 >> 2] = $sub$i619;
 $sub3$i620 = $s$0$i611 - $mul$i616 | 0;
 HEAP32[$rng$i651 >> 2] = $sub3$i620;
 if ($sub3$i620 >>> 0 < 8388609) {
  $nbits_total$i$i623 = $psRangeDec + 20 | 0;
  $rem$i$i624 = $psRangeDec + 40 | 0;
  $offs$i$i$i625 = $psRangeDec + 24 | 0;
  $$pre14$i$i631 = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $81 = HEAP32[$nbits_total$i$i623 >> 2] | 0;
  $82 = $sub3$i620;
  $83 = HEAP32[$offs$i$i$i625 >> 2] | 0;
  $86 = HEAP32[$rem$i$i624 >> 2] | 0;
  $89 = $sub$i619;
  while (1) {
   $81 = $81 + 8 | 0;
   HEAP32[$nbits_total$i$i623 >> 2] = $81;
   $82 = $82 << 8;
   HEAP32[$rng$i651 >> 2] = $82;
   if ($83 >>> 0 < $$pre14$i$i631 >>> 0) {
    $84 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i637 = $83 + 1 | 0;
    HEAP32[$offs$i$i$i625 >> 2] = $inc$i$i$i637;
    $272 = $inc$i$i$i637;
    $cond$i$i$i641 = HEAPU8[$84 + $83 >> 0] | 0;
   } else {
    $272 = $83;
    $cond$i$i$i641 = 0;
   }
   HEAP32[$rem$i$i624 >> 2] = $cond$i$i$i641;
   $89 = ($89 << 8 & 2147483392 | ($cond$i$i$i641 | $86 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i652 >> 2] = $89;
   if ($82 >>> 0 >= 8388609) break; else {
    $83 = $272;
    $86 = $cond$i$i$i641;
   }
  }
 }
 HEAP8[$psDec + 2744 >> 0] = $ret$0$i612;
 $order$i = $74 + 2 | 0;
 $90 = HEAP16[$order$i >> 1] | 0;
 $cmp22$i = $90 << 16 >> 16 > 0;
 if ($cmp22$i) {
  $conv$i603 = $90 << 16 >> 16;
  $ec_sel_ptr$024$i = (HEAP32[$74 + 24 >> 2] | 0) + ((Math_imul($ret$0$i612 << 24 >> 24, $conv$i603) | 0) / 2 | 0) | 0;
  $i$023$i = 0;
  while (1) {
   $92 = HEAP8[$ec_sel_ptr$024$i >> 0] | 0;
   HEAP16[$ec_ix + ($i$023$i << 1) >> 1] = (($92 & 255) >>> 1 & 7) * 9;
   HEAP16[$ec_ix + (($i$023$i | 1) << 1) >> 1] = (($92 & 255) >>> 5) * 9 & 255;
   $i$023$i = $i$023$i + 2 | 0;
   if (($i$023$i | 0) >= ($conv$i603 | 0)) {
    $conv56$pre$phiZ2D = $conv$i603;
    break;
   } else $ec_sel_ptr$024$i = $ec_sel_ptr$024$i + 1 | 0;
  }
 } else $conv56$pre$phiZ2D = $90 << 16 >> 16;
 if ((HEAP32[$psDec + 2340 >> 2] | 0) != ($conv56$pre$phiZ2D | 0)) _celt_fatal(50353, 50415, 82);
 L101 : do if ($cmp22$i) {
  $nbits_total$i$i532 = $psRangeDec + 20 | 0;
  $rem$i$i533 = $psRangeDec + 40 | 0;
  $offs$i$i$i534 = $psRangeDec + 24 | 0;
  $storage$i$i$i535 = $psRangeDec + 4 | 0;
  $i$195 = 0;
  while (1) {
   $arrayidx71 = (HEAP32[$74 + 28 >> 2] | 0) + (HEAP16[$ec_ix + ($i$195 << 1) >> 1] | 0) | 0;
   $98 = HEAP32[$rng$i651 >> 2] | 0;
   $99 = HEAP32[$val$i652 >> 2] | 0;
   $shr$i519 = $98 >>> 8;
   $ret$0$i521 = -1;
   $s$0$i520 = $98;
   while (1) {
    $inc$i522 = $ret$0$i521 + 1 | 0;
    $mul$i525 = Math_imul($shr$i519, HEAPU8[$arrayidx71 + $inc$i522 >> 0] | 0) | 0;
    if ($99 >>> 0 < $mul$i525 >>> 0) {
     $ret$0$i521 = $inc$i522;
     $s$0$i520 = $mul$i525;
    } else break;
   }
   $sub$i528 = $99 - $mul$i525 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i528;
   $sub3$i529 = $s$0$i520 - $mul$i525 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i529;
   if ($sub3$i529 >>> 0 < 8388609) {
    $$pre14$i$i540 = HEAP32[$storage$i$i$i535 >> 2] | 0;
    $101 = HEAP32[$nbits_total$i$i532 >> 2] | 0;
    $102 = $sub3$i529;
    $103 = HEAP32[$offs$i$i$i534 >> 2] | 0;
    $106 = HEAP32[$rem$i$i533 >> 2] | 0;
    $109 = $sub$i528;
    while (1) {
     $101 = $101 + 8 | 0;
     HEAP32[$nbits_total$i$i532 >> 2] = $101;
     $shl$i$i543 = $102 << 8;
     HEAP32[$rng$i651 >> 2] = $shl$i$i543;
     if ($103 >>> 0 < $$pre14$i$i540 >>> 0) {
      $104 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i546 = $103 + 1 | 0;
      HEAP32[$offs$i$i$i534 >> 2] = $inc$i$i$i546;
      $273 = $inc$i$i$i546;
      $cond$i$i$i550 = HEAPU8[$104 + $103 >> 0] | 0;
     } else {
      $273 = $103;
      $cond$i$i$i550 = 0;
     }
     HEAP32[$rem$i$i533 >> 2] = $cond$i$i$i550;
     $and7$i$i556 = ($109 << 8 & 2147483392 | ($cond$i$i$i550 | $106 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $and7$i$i556;
     if ($shl$i$i543 >>> 0 >= 8388609) {
      $110 = $shl$i$i543;
      $112 = $and7$i$i556;
      break;
     } else {
      $102 = $shl$i$i543;
      $103 = $273;
      $106 = $cond$i$i$i550;
      $109 = $and7$i$i556;
     }
    }
   } else {
    $110 = $sub3$i529;
    $112 = $sub$i528;
   }
   switch ($ret$0$i521 | 0) {
   case -1:
    {
     $shr$i476 = $110 >>> 8;
     $ret$0$i478 = -1;
     $s$0$i477 = $110;
     while (1) {
      $inc$i479 = $ret$0$i478 + 1 | 0;
      $mul$i482 = Math_imul($shr$i476, HEAPU8[51934 + $inc$i479 >> 0] | 0) | 0;
      if ($112 >>> 0 < $mul$i482 >>> 0) {
       $ret$0$i478 = $inc$i479;
       $s$0$i477 = $mul$i482;
      } else break;
     }
     $sub$i485 = $112 - $mul$i482 | 0;
     HEAP32[$val$i652 >> 2] = $sub$i485;
     $sub3$i486 = $s$0$i477 - $mul$i482 | 0;
     HEAP32[$rng$i651 >> 2] = $sub3$i486;
     if ($sub3$i486 >>> 0 < 8388609) {
      $$pre14$i$i497 = HEAP32[$storage$i$i$i535 >> 2] | 0;
      $113 = HEAP32[$nbits_total$i$i532 >> 2] | 0;
      $114 = $sub3$i486;
      $115 = HEAP32[$offs$i$i$i534 >> 2] | 0;
      $118 = HEAP32[$rem$i$i533 >> 2] | 0;
      $121 = $sub$i485;
      while (1) {
       $113 = $113 + 8 | 0;
       HEAP32[$nbits_total$i$i532 >> 2] = $113;
       $114 = $114 << 8;
       HEAP32[$rng$i651 >> 2] = $114;
       if ($115 >>> 0 < $$pre14$i$i497 >>> 0) {
        $116 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i503 = $115 + 1 | 0;
        HEAP32[$offs$i$i$i534 >> 2] = $inc$i$i$i503;
        $274 = $inc$i$i$i503;
        $cond$i$i$i507 = HEAPU8[$116 + $115 >> 0] | 0;
       } else {
        $274 = $115;
        $cond$i$i$i507 = 0;
       }
       HEAP32[$rem$i$i533 >> 2] = $cond$i$i$i507;
       $121 = ($121 << 8 & 2147483392 | ($cond$i$i$i507 | $118 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i652 >> 2] = $121;
       if ($114 >>> 0 >= 8388609) break; else {
        $115 = $274;
        $118 = $cond$i$i$i507;
       }
      }
     }
     $Ix$1 = ~$ret$0$i478;
     break;
    }
   case 7:
    {
     $shr$i433 = $110 >>> 8;
     $ret$0$i435 = -1;
     $s$0$i434 = $110;
     while (1) {
      $inc$i436 = $ret$0$i435 + 1 | 0;
      $mul$i439 = Math_imul($shr$i433, HEAPU8[51934 + $inc$i436 >> 0] | 0) | 0;
      if ($112 >>> 0 < $mul$i439 >>> 0) {
       $ret$0$i435 = $inc$i436;
       $s$0$i434 = $mul$i439;
      } else break;
     }
     $sub$i442 = $112 - $mul$i439 | 0;
     HEAP32[$val$i652 >> 2] = $sub$i442;
     $sub3$i443 = $s$0$i434 - $mul$i439 | 0;
     HEAP32[$rng$i651 >> 2] = $sub3$i443;
     if ($sub3$i443 >>> 0 < 8388609) {
      $$pre14$i$i454 = HEAP32[$storage$i$i$i535 >> 2] | 0;
      $123 = HEAP32[$nbits_total$i$i532 >> 2] | 0;
      $124 = $sub3$i443;
      $125 = HEAP32[$offs$i$i$i534 >> 2] | 0;
      $128 = HEAP32[$rem$i$i533 >> 2] | 0;
      $131 = $sub$i442;
      while (1) {
       $123 = $123 + 8 | 0;
       HEAP32[$nbits_total$i$i532 >> 2] = $123;
       $124 = $124 << 8;
       HEAP32[$rng$i651 >> 2] = $124;
       if ($125 >>> 0 < $$pre14$i$i454 >>> 0) {
        $126 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i460 = $125 + 1 | 0;
        HEAP32[$offs$i$i$i534 >> 2] = $inc$i$i$i460;
        $275 = $inc$i$i$i460;
        $cond$i$i$i464 = HEAPU8[$126 + $125 >> 0] | 0;
       } else {
        $275 = $125;
        $cond$i$i$i464 = 0;
       }
       HEAP32[$rem$i$i533 >> 2] = $cond$i$i$i464;
       $131 = ($131 << 8 & 2147483392 | ($cond$i$i$i464 | $128 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i652 >> 2] = $131;
       if ($124 >>> 0 >= 8388609) break; else {
        $125 = $275;
        $128 = $cond$i$i$i464;
       }
      }
     }
     $Ix$1 = $ret$0$i435 + 9 | 0;
     break;
    }
   default:
    $Ix$1 = $inc$i522;
   }
   $i$195 = $i$195 + 1 | 0;
   HEAP8[$psDec + 2744 + $i$195 >> 0] = $Ix$1 + 252;
   if (($i$195 | 0) >= (HEAP16[$order$i >> 1] | 0)) break L101;
  }
 } while (0);
 if (($61 | 0) == 4) {
  $133 = HEAP32[$rng$i651 >> 2] | 0;
  $134 = HEAP32[$val$i652 >> 2] | 0;
  $shr$i390 = $133 >>> 8;
  $ret$0$i392 = -1;
  $s$0$i391 = $133;
  while (1) {
   $ret$0$i392 = $ret$0$i392 + 1 | 0;
   $mul$i396 = Math_imul($shr$i390, HEAPU8[51903 + $ret$0$i392 >> 0] | 0) | 0;
   if ($134 >>> 0 >= $mul$i396 >>> 0) break; else $s$0$i391 = $mul$i396;
  }
  $sub$i399 = $134 - $mul$i396 | 0;
  HEAP32[$val$i652 >> 2] = $sub$i399;
  $sub3$i400 = $s$0$i391 - $mul$i396 | 0;
  HEAP32[$rng$i651 >> 2] = $sub3$i400;
  if ($sub3$i400 >>> 0 < 8388609) {
   $nbits_total$i$i403 = $psRangeDec + 20 | 0;
   $rem$i$i404 = $psRangeDec + 40 | 0;
   $offs$i$i$i405 = $psRangeDec + 24 | 0;
   $$pre14$i$i411 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $136 = HEAP32[$nbits_total$i$i403 >> 2] | 0;
   $137 = $sub3$i400;
   $138 = HEAP32[$offs$i$i$i405 >> 2] | 0;
   $141 = HEAP32[$rem$i$i404 >> 2] | 0;
   $144 = $sub$i399;
   while (1) {
    $136 = $136 + 8 | 0;
    HEAP32[$nbits_total$i$i403 >> 2] = $136;
    $137 = $137 << 8;
    HEAP32[$rng$i651 >> 2] = $137;
    if ($138 >>> 0 < $$pre14$i$i411 >>> 0) {
     $139 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i417 = $138 + 1 | 0;
     HEAP32[$offs$i$i$i405 >> 2] = $inc$i$i$i417;
     $276 = $inc$i$i$i417;
     $cond$i$i$i421 = HEAPU8[$139 + $138 >> 0] | 0;
    } else {
     $276 = $138;
     $cond$i$i$i421 = 0;
    }
    HEAP32[$rem$i$i404 >> 2] = $cond$i$i$i421;
    $144 = ($144 << 8 & 2147483392 | ($cond$i$i$i421 | $141 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i652 >> 2] = $144;
    if ($137 >>> 0 >= 8388609) break; else {
     $138 = $276;
     $141 = $cond$i$i$i421;
    }
   }
  }
  $conv99$sink = $ret$0$i392 & 255;
 } else $conv99$sink = 4;
 HEAP8[$psDec + 2767 >> 0] = $conv99$sink;
 $146 = HEAP8[$signalType >> 0] | 0;
 if ($146 << 24 >> 24 == 2) {
  if ($cmp) if ((HEAP32[$psDec + 2396 >> 2] | 0) == 2) {
   $148 = HEAP32[$rng$i651 >> 2] | 0;
   $149 = HEAP32[$val$i652 >> 2] | 0;
   $shr$i347 = $148 >>> 8;
   $ret$0$i349 = -1;
   $s$0$i348 = $148;
   while (1) {
    $inc$i350 = $ret$0$i349 + 1 | 0;
    $mul$i353 = Math_imul($shr$i347, HEAPU8[25040 + $inc$i350 >> 0] | 0) | 0;
    if ($149 >>> 0 < $mul$i353 >>> 0) {
     $ret$0$i349 = $inc$i350;
     $s$0$i348 = $mul$i353;
    } else break;
   }
   $sub$i356 = $149 - $mul$i353 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i356;
   $sub3$i357 = $s$0$i348 - $mul$i353 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i357;
   if ($sub3$i357 >>> 0 < 8388609) {
    $nbits_total$i$i360 = $psRangeDec + 20 | 0;
    $rem$i$i361 = $psRangeDec + 40 | 0;
    $offs$i$i$i362 = $psRangeDec + 24 | 0;
    $$pre14$i$i368 = HEAP32[$psRangeDec + 4 >> 2] | 0;
    $151 = HEAP32[$nbits_total$i$i360 >> 2] | 0;
    $152 = $sub3$i357;
    $153 = HEAP32[$offs$i$i$i362 >> 2] | 0;
    $156 = HEAP32[$rem$i$i361 >> 2] | 0;
    $159 = $sub$i356;
    while (1) {
     $151 = $151 + 8 | 0;
     HEAP32[$nbits_total$i$i360 >> 2] = $151;
     $shl$i$i371 = $152 << 8;
     HEAP32[$rng$i651 >> 2] = $shl$i$i371;
     if ($153 >>> 0 < $$pre14$i$i368 >>> 0) {
      $154 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i374 = $153 + 1 | 0;
      HEAP32[$offs$i$i$i362 >> 2] = $inc$i$i$i374;
      $279 = $inc$i$i$i374;
      $cond$i$i$i378 = HEAPU8[$154 + $153 >> 0] | 0;
     } else {
      $279 = $153;
      $cond$i$i$i378 = 0;
     }
     HEAP32[$rem$i$i361 >> 2] = $cond$i$i$i378;
     $and7$i$i384 = ($159 << 8 & 2147483392 | ($cond$i$i$i378 | $156 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $and7$i$i384;
     if ($shl$i$i371 >>> 0 >= 8388609) {
      $277 = $and7$i$i384;
      $278 = $shl$i$i371;
      break;
     } else {
      $152 = $shl$i$i371;
      $153 = $279;
      $156 = $cond$i$i$i378;
      $159 = $and7$i$i384;
     }
    }
   } else {
    $277 = $sub$i356;
    $278 = $sub3$i357;
   }
   if (($inc$i350 << 16 | 0) > 0) {
    $ec_prevLagIndex = $psDec + 2400 | 0;
    $conv125 = $ret$0$i349 + 65528 + (HEAPU16[$ec_prevLagIndex >> 1] | 0) & 65535;
    HEAP16[$psDec + 2762 >> 1] = $conv125;
    $187 = $conv125;
    $189 = $278;
    $191 = $277;
    $ec_prevLagIndex150$pre$phiZ2D = $ec_prevLagIndex;
   } else label = 114;
  } else label = 114; else label = 114;
  if ((label | 0) == 114) {
   $161 = HEAP32[$rng$i651 >> 2] | 0;
   $162 = HEAP32[$val$i652 >> 2] | 0;
   $shr$i304 = $161 >>> 8;
   $ret$0$i306 = -1;
   $s$0$i305 = $161;
   while (1) {
    $ret$0$i306 = $ret$0$i306 + 1 | 0;
    $mul$i310 = Math_imul($shr$i304, HEAPU8[25008 + $ret$0$i306 >> 0] | 0) | 0;
    if ($162 >>> 0 >= $mul$i310 >>> 0) break; else $s$0$i305 = $mul$i310;
   }
   $sub$i313 = $162 - $mul$i310 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i313;
   $sub3$i314 = $s$0$i305 - $mul$i310 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i314;
   if ($sub3$i314 >>> 0 < 8388609) {
    $nbits_total$i$i317 = $psRangeDec + 20 | 0;
    $rem$i$i318 = $psRangeDec + 40 | 0;
    $offs$i$i$i319 = $psRangeDec + 24 | 0;
    $$pre14$i$i325 = HEAP32[$psRangeDec + 4 >> 2] | 0;
    $164 = HEAP32[$nbits_total$i$i317 >> 2] | 0;
    $165 = $sub3$i314;
    $166 = HEAP32[$offs$i$i$i319 >> 2] | 0;
    $169 = HEAP32[$rem$i$i318 >> 2] | 0;
    $172 = $sub$i313;
    while (1) {
     $164 = $164 + 8 | 0;
     HEAP32[$nbits_total$i$i317 >> 2] = $164;
     $shl$i$i328 = $165 << 8;
     HEAP32[$rng$i651 >> 2] = $shl$i$i328;
     if ($166 >>> 0 < $$pre14$i$i325 >>> 0) {
      $167 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i331 = $166 + 1 | 0;
      HEAP32[$offs$i$i$i319 >> 2] = $inc$i$i$i331;
      $280 = $inc$i$i$i331;
      $cond$i$i$i335 = HEAPU8[$167 + $166 >> 0] | 0;
     } else {
      $280 = $166;
      $cond$i$i$i335 = 0;
     }
     HEAP32[$rem$i$i318 >> 2] = $cond$i$i$i335;
     $and7$i$i341 = ($172 << 8 & 2147483392 | ($cond$i$i$i335 | $169 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $and7$i$i341;
     if ($shl$i$i328 >>> 0 >= 8388609) {
      $175 = $shl$i$i328;
      $177 = $and7$i$i341;
      break;
     } else {
      $165 = $shl$i$i328;
      $166 = $280;
      $169 = $cond$i$i$i335;
      $172 = $and7$i$i341;
     }
    }
   } else {
    $175 = $sub3$i314;
    $177 = $sub$i313;
   }
   $mul135 = Math_imul($ret$0$i306 << 16 >> 16, HEAP32[$psDec + 2316 >> 2] >> 1) | 0;
   $lagIndex138 = $psDec + 2762 | 0;
   HEAP16[$lagIndex138 >> 1] = $mul135;
   $174 = HEAP32[$psDec + 2380 >> 2] | 0;
   $shr$i261 = $175 >>> 8;
   $ret$0$i263 = -1;
   $s$0$i262 = $175;
   while (1) {
    $ret$0$i263 = $ret$0$i263 + 1 | 0;
    $mul$i267 = Math_imul($shr$i261, HEAPU8[$174 + $ret$0$i263 >> 0] | 0) | 0;
    if ($177 >>> 0 >= $mul$i267 >>> 0) break; else $s$0$i262 = $mul$i267;
   }
   $sub$i270 = $177 - $mul$i267 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i270;
   $sub3$i271 = $s$0$i262 - $mul$i267 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i271;
   if ($sub3$i271 >>> 0 < 8388609) {
    $nbits_total$i$i274 = $psRangeDec + 20 | 0;
    $rem$i$i275 = $psRangeDec + 40 | 0;
    $offs$i$i$i276 = $psRangeDec + 24 | 0;
    $$pre14$i$i282 = HEAP32[$psRangeDec + 4 >> 2] | 0;
    $178 = HEAP32[$nbits_total$i$i274 >> 2] | 0;
    $179 = $sub3$i271;
    $180 = HEAP32[$offs$i$i$i276 >> 2] | 0;
    $183 = HEAP32[$rem$i$i275 >> 2] | 0;
    $186 = $sub$i270;
    while (1) {
     $178 = $178 + 8 | 0;
     HEAP32[$nbits_total$i$i274 >> 2] = $178;
     $shl$i$i285 = $179 << 8;
     HEAP32[$rng$i651 >> 2] = $shl$i$i285;
     if ($180 >>> 0 < $$pre14$i$i282 >>> 0) {
      $181 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i288 = $180 + 1 | 0;
      HEAP32[$offs$i$i$i276 >> 2] = $inc$i$i$i288;
      $283 = $inc$i$i$i288;
      $cond$i$i$i292 = HEAPU8[$181 + $180 >> 0] | 0;
     } else {
      $283 = $180;
      $cond$i$i$i292 = 0;
     }
     HEAP32[$rem$i$i275 >> 2] = $cond$i$i$i292;
     $and7$i$i298 = ($186 << 8 & 2147483392 | ($cond$i$i$i292 | $183 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $and7$i$i298;
     if ($shl$i$i285 >>> 0 >= 8388609) {
      $281 = $and7$i$i298;
      $282 = $shl$i$i285;
      break;
     } else {
      $179 = $shl$i$i285;
      $180 = $283;
      $183 = $cond$i$i$i292;
      $186 = $and7$i$i298;
     }
    }
   } else {
    $281 = $sub$i270;
    $282 = $sub3$i271;
   }
   $conv146 = $ret$0$i263 + $mul135 & 65535;
   HEAP16[$lagIndex138 >> 1] = $conv146;
   $187 = $conv146;
   $189 = $282;
   $191 = $281;
   $ec_prevLagIndex150$pre$phiZ2D = $psDec + 2400 | 0;
  }
  HEAP16[$ec_prevLagIndex150$pre$phiZ2D >> 1] = $187;
  $188 = HEAP32[$psDec + 2384 >> 2] | 0;
  $shr$i218 = $189 >>> 8;
  $ret$0$i220 = -1;
  $s$0$i219 = $189;
  while (1) {
   $ret$0$i220 = $ret$0$i220 + 1 | 0;
   $mul$i224 = Math_imul($shr$i218, HEAPU8[$188 + $ret$0$i220 >> 0] | 0) | 0;
   if ($191 >>> 0 >= $mul$i224 >>> 0) break; else $s$0$i219 = $mul$i224;
  }
  $sub$i227 = $191 - $mul$i224 | 0;
  HEAP32[$val$i652 >> 2] = $sub$i227;
  $sub3$i228 = $s$0$i219 - $mul$i224 | 0;
  HEAP32[$rng$i651 >> 2] = $sub3$i228;
  if ($sub3$i228 >>> 0 < 8388609) {
   $nbits_total$i$i231 = $psRangeDec + 20 | 0;
   $rem$i$i232 = $psRangeDec + 40 | 0;
   $offs$i$i$i233 = $psRangeDec + 24 | 0;
   $$pre14$i$i239 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $192 = HEAP32[$nbits_total$i$i231 >> 2] | 0;
   $193 = $sub3$i228;
   $194 = HEAP32[$offs$i$i$i233 >> 2] | 0;
   $197 = HEAP32[$rem$i$i232 >> 2] | 0;
   $200 = $sub$i227;
   while (1) {
    $192 = $192 + 8 | 0;
    HEAP32[$nbits_total$i$i231 >> 2] = $192;
    $shl$i$i242 = $193 << 8;
    HEAP32[$rng$i651 >> 2] = $shl$i$i242;
    if ($194 >>> 0 < $$pre14$i$i239 >>> 0) {
     $195 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i245 = $194 + 1 | 0;
     HEAP32[$offs$i$i$i233 >> 2] = $inc$i$i$i245;
     $284 = $inc$i$i$i245;
     $cond$i$i$i249 = HEAPU8[$195 + $194 >> 0] | 0;
    } else {
     $284 = $194;
     $cond$i$i$i249 = 0;
    }
    HEAP32[$rem$i$i232 >> 2] = $cond$i$i$i249;
    $and7$i$i255 = ($200 << 8 & 2147483392 | ($cond$i$i$i249 | $197 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i652 >> 2] = $and7$i$i255;
    if ($shl$i$i242 >>> 0 >= 8388609) {
     $201 = $shl$i$i242;
     $203 = $and7$i$i255;
     break;
    } else {
     $193 = $shl$i$i242;
     $194 = $284;
     $197 = $cond$i$i$i249;
     $200 = $and7$i$i255;
    }
   }
  } else {
   $201 = $sub3$i228;
   $203 = $sub$i227;
  }
  HEAP8[$psDec + 2764 >> 0] = $ret$0$i220;
  $shr$i175 = $201 >>> 8;
  $ret$0$i177 = -1;
  $s$0$i176 = $201;
  while (1) {
   $ret$0$i177 = $ret$0$i177 + 1 | 0;
   $mul$i181 = Math_imul($shr$i175, HEAPU8[51853 + $ret$0$i177 >> 0] | 0) | 0;
   if ($203 >>> 0 >= $mul$i181 >>> 0) break; else $s$0$i176 = $mul$i181;
  }
  $sub$i184 = $203 - $mul$i181 | 0;
  HEAP32[$val$i652 >> 2] = $sub$i184;
  $sub3$i185 = $s$0$i176 - $mul$i181 | 0;
  HEAP32[$rng$i651 >> 2] = $sub3$i185;
  if ($sub3$i185 >>> 0 < 8388609) {
   $nbits_total$i$i188 = $psRangeDec + 20 | 0;
   $rem$i$i189 = $psRangeDec + 40 | 0;
   $offs$i$i$i190 = $psRangeDec + 24 | 0;
   $$pre14$i$i196 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $204 = HEAP32[$nbits_total$i$i188 >> 2] | 0;
   $205 = $sub3$i185;
   $206 = HEAP32[$offs$i$i$i190 >> 2] | 0;
   $209 = HEAP32[$rem$i$i189 >> 2] | 0;
   $212 = $sub$i184;
   while (1) {
    $204 = $204 + 8 | 0;
    HEAP32[$nbits_total$i$i188 >> 2] = $204;
    $shl$i$i199 = $205 << 8;
    HEAP32[$rng$i651 >> 2] = $shl$i$i199;
    if ($206 >>> 0 < $$pre14$i$i196 >>> 0) {
     $207 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i202 = $206 + 1 | 0;
     HEAP32[$offs$i$i$i190 >> 2] = $inc$i$i$i202;
     $285 = $inc$i$i$i202;
     $cond$i$i$i206 = HEAPU8[$207 + $206 >> 0] | 0;
    } else {
     $285 = $206;
     $cond$i$i$i206 = 0;
    }
    HEAP32[$rem$i$i189 >> 2] = $cond$i$i$i206;
    $and7$i$i212 = ($212 << 8 & 2147483392 | ($cond$i$i$i206 | $209 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i652 >> 2] = $and7$i$i212;
    if ($shl$i$i199 >>> 0 >= 8388609) {
     $214 = $shl$i$i199;
     $216 = $and7$i$i212;
     break;
    } else {
     $205 = $shl$i$i199;
     $206 = $285;
     $209 = $cond$i$i$i206;
     $212 = $and7$i$i212;
    }
   }
  } else {
   $214 = $sub3$i185;
   $216 = $sub$i184;
  }
  $conv155 = $ret$0$i177 & 255;
  $PERIndex = $psDec + 2768 | 0;
  HEAP8[$PERIndex >> 0] = $conv155;
  L221 : do if (($61 | 0) > 0) {
   $213 = HEAP32[43996 + ($ret$0$i177 << 24 >> 24 << 2) >> 2] | 0;
   $shr$i132 = $214 >>> 8;
   $ret$0$i134 = -1;
   $s$0$i133 = $214;
   while (1) {
    $ret$0$i134 = $ret$0$i134 + 1 | 0;
    $mul$i138 = Math_imul($shr$i132, HEAPU8[$213 + $ret$0$i134 >> 0] | 0) | 0;
    if ($216 >>> 0 >= $mul$i138 >>> 0) break; else $s$0$i133 = $mul$i138;
   }
   $sub$i141 = $216 - $mul$i138 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i141;
   $sub3$i142 = $s$0$i133 - $mul$i138 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i142;
   if ($sub3$i142 >>> 0 < 8388609) {
    $nbits_total$i$i145 = $psRangeDec + 20 | 0;
    $rem$i$i146 = $psRangeDec + 40 | 0;
    $offs$i$i$i147 = $psRangeDec + 24 | 0;
    $$pre14$i$i153 = HEAP32[$psRangeDec + 4 >> 2] | 0;
    $217 = HEAP32[$nbits_total$i$i145 >> 2] | 0;
    $218 = $sub3$i142;
    $219 = HEAP32[$offs$i$i$i147 >> 2] | 0;
    $222 = HEAP32[$rem$i$i146 >> 2] | 0;
    $225 = $sub$i141;
    while (1) {
     $217 = $217 + 8 | 0;
     HEAP32[$nbits_total$i$i145 >> 2] = $217;
     $218 = $218 << 8;
     HEAP32[$rng$i651 >> 2] = $218;
     if ($219 >>> 0 < $$pre14$i$i153 >>> 0) {
      $220 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i159 = $219 + 1 | 0;
      HEAP32[$offs$i$i$i147 >> 2] = $inc$i$i$i159;
      $286 = $inc$i$i$i159;
      $cond$i$i$i163 = HEAPU8[$220 + $219 >> 0] | 0;
     } else {
      $286 = $219;
      $cond$i$i$i163 = 0;
     }
     HEAP32[$rem$i$i146 >> 2] = $cond$i$i$i163;
     $225 = ($225 << 8 & 2147483392 | ($cond$i$i$i163 | $222 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $225;
     if ($218 >>> 0 >= 8388609) break; else {
      $219 = $286;
      $222 = $cond$i$i$i163;
     }
    }
   }
   HEAP8[$psDec + 2740 >> 0] = $ret$0$i134;
   if ($cmp3096) {
    $nbits_total$i$i102 = $psRangeDec + 20 | 0;
    $rem$i$i103 = $psRangeDec + 40 | 0;
    $offs$i$i$i104 = $psRangeDec + 24 | 0;
    $storage$i$i$i105 = $psRangeDec + 4 | 0;
    $$pre = $conv155;
    $inc171105 = 1;
    while (1) {
     $226 = HEAP32[43996 + ($$pre << 24 >> 24 << 2) >> 2] | 0;
     $227 = HEAP32[$rng$i651 >> 2] | 0;
     $228 = HEAP32[$val$i652 >> 2] | 0;
     $shr$i89 = $227 >>> 8;
     $ret$0$i91 = -1;
     $s$0$i90 = $227;
     while (1) {
      $ret$0$i91 = $ret$0$i91 + 1 | 0;
      $mul$i95 = Math_imul($shr$i89, HEAPU8[$226 + $ret$0$i91 >> 0] | 0) | 0;
      if ($228 >>> 0 >= $mul$i95 >>> 0) break; else $s$0$i90 = $mul$i95;
     }
     $sub$i98 = $228 - $mul$i95 | 0;
     HEAP32[$val$i652 >> 2] = $sub$i98;
     $sub3$i99 = $s$0$i90 - $mul$i95 | 0;
     HEAP32[$rng$i651 >> 2] = $sub3$i99;
     if ($sub3$i99 >>> 0 < 8388609) {
      $$pre14$i$i110 = HEAP32[$storage$i$i$i105 >> 2] | 0;
      $230 = HEAP32[$nbits_total$i$i102 >> 2] | 0;
      $231 = $sub3$i99;
      $232 = HEAP32[$offs$i$i$i104 >> 2] | 0;
      $235 = HEAP32[$rem$i$i103 >> 2] | 0;
      $238 = $sub$i98;
      while (1) {
       $230 = $230 + 8 | 0;
       HEAP32[$nbits_total$i$i102 >> 2] = $230;
       $231 = $231 << 8;
       HEAP32[$rng$i651 >> 2] = $231;
       if ($232 >>> 0 < $$pre14$i$i110 >>> 0) {
        $233 = HEAP32[$psRangeDec >> 2] | 0;
        $inc$i$i$i116 = $232 + 1 | 0;
        HEAP32[$offs$i$i$i104 >> 2] = $inc$i$i$i116;
        $287 = $inc$i$i$i116;
        $cond$i$i$i120 = HEAPU8[$233 + $232 >> 0] | 0;
       } else {
        $287 = $232;
        $cond$i$i$i120 = 0;
       }
       HEAP32[$rem$i$i103 >> 2] = $cond$i$i$i120;
       $238 = ($238 << 8 & 2147483392 | ($cond$i$i$i120 | $235 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i652 >> 2] = $238;
       if ($231 >>> 0 >= 8388609) break; else {
        $232 = $287;
        $235 = $cond$i$i$i120;
       }
      }
     }
     HEAP8[$psDec + 2740 + $inc171105 >> 0] = $ret$0$i91;
     $inc171 = $inc171105 + 1 | 0;
     if (($inc171 | 0) >= ($61 | 0)) break L221;
     $$pre = HEAP8[$PERIndex >> 0] | 0;
     $inc171105 = $inc171;
    }
   }
  } while (0);
  if (!$condCoding) {
   $239 = HEAP32[$rng$i651 >> 2] | 0;
   $240 = HEAP32[$val$i652 >> 2] | 0;
   $shr$i46 = $239 >>> 8;
   $ret$0$i48 = -1;
   $s$0$i47 = $239;
   while (1) {
    $ret$0$i48 = $ret$0$i48 + 1 | 0;
    $mul$i52 = Math_imul($shr$i46, HEAPU8[51894 + $ret$0$i48 >> 0] | 0) | 0;
    if ($240 >>> 0 >= $mul$i52 >>> 0) break; else $s$0$i47 = $mul$i52;
   }
   $sub$i55 = $240 - $mul$i52 | 0;
   HEAP32[$val$i652 >> 2] = $sub$i55;
   $sub3$i56 = $s$0$i47 - $mul$i52 | 0;
   HEAP32[$rng$i651 >> 2] = $sub3$i56;
   if ($sub3$i56 >>> 0 < 8388609) {
    $nbits_total$i$i59 = $psRangeDec + 20 | 0;
    $rem$i$i60 = $psRangeDec + 40 | 0;
    $offs$i$i$i61 = $psRangeDec + 24 | 0;
    $$pre14$i$i67 = HEAP32[$psRangeDec + 4 >> 2] | 0;
    $242 = HEAP32[$nbits_total$i$i59 >> 2] | 0;
    $243 = $sub3$i56;
    $244 = HEAP32[$offs$i$i$i61 >> 2] | 0;
    $247 = HEAP32[$rem$i$i60 >> 2] | 0;
    $250 = $sub$i55;
    while (1) {
     $242 = $242 + 8 | 0;
     HEAP32[$nbits_total$i$i59 >> 2] = $242;
     $243 = $243 << 8;
     HEAP32[$rng$i651 >> 2] = $243;
     if ($244 >>> 0 < $$pre14$i$i67 >>> 0) {
      $245 = HEAP32[$psRangeDec >> 2] | 0;
      $inc$i$i$i73 = $244 + 1 | 0;
      HEAP32[$offs$i$i$i61 >> 2] = $inc$i$i$i73;
      $288 = $inc$i$i$i73;
      $cond$i$i$i77 = HEAPU8[$245 + $244 >> 0] | 0;
     } else {
      $288 = $244;
      $cond$i$i$i77 = 0;
     }
     HEAP32[$rem$i$i60 >> 2] = $cond$i$i$i77;
     $250 = ($250 << 8 & 2147483392 | ($cond$i$i$i77 | $247 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i652 >> 2] = $250;
     if ($243 >>> 0 >= 8388609) break; else {
      $244 = $288;
      $247 = $cond$i$i$i77;
     }
    }
   }
   $conv177$sink = $ret$0$i48 & 255;
  } else $conv177$sink = 0;
  HEAP8[$psDec + 2769 >> 0] = $conv177$sink;
  $251 = HEAP8[$signalType >> 0] | 0;
 } else $251 = $146;
 HEAP32[$psDec + 2396 >> 2] = $251 << 24 >> 24;
 $252 = HEAP32[$rng$i651 >> 2] | 0;
 $253 = HEAP32[$val$i652 >> 2] | 0;
 $shr$i3 = $252 >>> 8;
 $ret$0$i5 = -1;
 $s$0$i4 = $252;
 while (1) {
  $ret$0$i5 = $ret$0$i5 + 1 | 0;
  $mul$i9 = Math_imul($shr$i3, HEAPU8[51911 + $ret$0$i5 >> 0] | 0) | 0;
  if ($253 >>> 0 >= $mul$i9 >>> 0) break; else $s$0$i4 = $mul$i9;
 }
 $sub$i12 = $253 - $mul$i9 | 0;
 HEAP32[$val$i652 >> 2] = $sub$i12;
 $sub3$i13 = $s$0$i4 - $mul$i9 | 0;
 HEAP32[$rng$i651 >> 2] = $sub3$i13;
 if ($sub3$i13 >>> 0 >= 8388609) {
  $conv189 = $ret$0$i5 & 255;
  $Seed = $psDec + 2770 | 0;
  HEAP8[$Seed >> 0] = $conv189;
  STACKTOP = sp;
  return;
 }
 $nbits_total$i$i16 = $psRangeDec + 20 | 0;
 $rem$i$i17 = $psRangeDec + 40 | 0;
 $offs$i$i$i18 = $psRangeDec + 24 | 0;
 $$pre14$i$i24 = HEAP32[$psRangeDec + 4 >> 2] | 0;
 $255 = HEAP32[$nbits_total$i$i16 >> 2] | 0;
 $256 = $sub3$i13;
 $257 = HEAP32[$offs$i$i$i18 >> 2] | 0;
 $260 = HEAP32[$rem$i$i17 >> 2] | 0;
 $263 = $sub$i12;
 while (1) {
  $255 = $255 + 8 | 0;
  HEAP32[$nbits_total$i$i16 >> 2] = $255;
  $256 = $256 << 8;
  HEAP32[$rng$i651 >> 2] = $256;
  if ($257 >>> 0 < $$pre14$i$i24 >>> 0) {
   $258 = HEAP32[$psRangeDec >> 2] | 0;
   $inc$i$i$i30 = $257 + 1 | 0;
   HEAP32[$offs$i$i$i18 >> 2] = $inc$i$i$i30;
   $289 = $inc$i$i$i30;
   $cond$i$i$i34 = HEAPU8[$258 + $257 >> 0] | 0;
  } else {
   $289 = $257;
   $cond$i$i$i34 = 0;
  }
  HEAP32[$rem$i$i17 >> 2] = $cond$i$i$i34;
  $263 = ($263 << 8 & 2147483392 | ($cond$i$i$i34 | $260 << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i652 >> 2] = $263;
  if ($256 >>> 0 >= 8388609) break; else {
   $257 = $289;
   $260 = $cond$i$i$i34;
  }
 }
 $conv189 = $ret$0$i5 & 255;
 $Seed = $psDec + 2770 | 0;
 HEAP8[$Seed >> 0] = $conv189;
 STACKTOP = sp;
 return;
}

function _silk_Decode($decState, $decControl, $lostFlag, $newPacketFlag, $psRangeDec, $samplesOut, $nSamplesOut) {
 $decState = $decState | 0;
 $decControl = $decControl | 0;
 $lostFlag = $lostFlag | 0;
 $newPacketFlag = $newPacketFlag | 0;
 $psRangeDec = $psRangeDec | 0;
 $samplesOut = $samplesOut | 0;
 $nSamplesOut = $nSamplesOut | 0;
 var $$lcssa = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa294 = 0, $$pre$phiZ2D = 0, $$pre14$i$i = 0, $$pre14$i$i$i = 0, $$pre14$i$i$i110 = 0, $$pre14$i$i$i153 = 0, $$pre14$i$i26 = 0, $$pre14$i$i63 = 0, $$sink445 = 0, $$sink447 = 0, $$sink64$i = 0, $0 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $109 = 0, $114 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $134 = 0, $137 = 0, $14 = 0, $141 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $154 = 0, $16 = 0, $160 = 0, $163 = 0, $166 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $182 = 0, $183 = 0, $206 = 0, $207 = 0, $208 = 0, $210 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $221 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $90 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, $API_sampleRate = 0, $API_sampleRate107 = 0, $LBRR_flags = 0, $LBRR_flags203 = 0, $MS_pred_Q13 = 0, $add119$i = 0, $add154$i = 0, $add162 = 0, $add200$i = 0, $add47$i = 0, $add475 = 0, $add70 = 0, $add81$i = 0, $and7$i$i = 0, $and7$i$i42 = 0, $arraydecay$i = 0, $arraydecay1$i = 0, $arrayidx$i173 = 0, $arrayidx122$i = 0, $arrayidx191 = 0, $arrayidx191$us = 0, $arrayidx195$i = 0, $arrayidx198$i = 0, $arrayidx204 = 0, $arrayidx334286 = 0, $arrayidx411$us344 = 0, $arrayidx447 = 0, $arrayidx50$i = 0, $arrayidx6$i = 0, $arrayidx9$i = 0, $call129$lcssa = 0, $call129371 = 0, $cmp$i = 0, $cmp$i10 = 0, $cmp$i2 = 0, $cmp114 = 0, $cmp127368 = 0, $cmp297 = 0, $cmp324 = 0, $cmp376$us = 0, $cmp389 = 0, $cmp42$i = 0, $cmp42$i$c = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i120 = 0, $cond$i$i$i$i163 = 0, $cond$i$i$i36 = 0, $cond$i$i$i73 = 0, $cond$i15 = 0, $cond217$i = 0, $cond232$i = 0, $condCoding381$0$us = 0, $condCoding381$0$us341 = 0, $conv$i = 0, $conv$i11 = 0, $conv$i174 = 0, $conv10$i = 0, $conv10$i175 = 0, $conv117$i = 0, $conv127$i = 0, $conv142$i = 0, $conv18$i = 0, $conv196$i = 0, $conv199$i = 0, $conv46$i = 0, $conv55$i = 0, $conv69$i = 0, $decode_only_middle$0 = 0, $decode_only_middle$1 = 0, $decode_only_middle$2 = 0, $decode_only_middle$3 = 0, $decode_only_middle$4 = 0, $decode_only_middle$5 = 0, $decode_only_middle$6 = 0, $decode_only_middle$7 = 0, $decode_only_middle$8 = 0, $decode_only_middle$9 = 0, $div = 0, $frame_length329 = 0, $fs_API_hz$i = 0, $fs_kHz18$i = 0, $fs_kHz438 = 0, $has_side$0$in = 0, $has_side$0$in$ph = 0, $i$0370 = 0, $i$1362 = 0, $i$2358 = 0, $i$3304 = 0, $i$4300 = 0, $i$5302 = 0, $i$6298 = 0, $inc$i = 0, $inc$i$i$i = 0, $inc$i$i$i$i = 0, $inc$i$i$i$i116 = 0, $inc$i$i$i$i159 = 0, $inc$i$i$i32 = 0, $inc$i$i$i69 = 0, $inc535 = 0, $internalSampleRate69 = 0, $mul$i$i = 0, $mul$i$i138 = 0, $mul$i$i95 = 0, $mul$i176 = 0, $mul$i50 = 0, $mul17$i = 0, $mul320 = 0, $mul331 = 0, $mul450 = 0, $mul569 = 0, $mul592$sink = 0, $n$0112$i = 0, $n$0381 = 0, $n$1110$i = 0, $n$1378 = 0, $n$2108$i = 0, $n$2374 = 0, $n$3364 = 0, $n$4355 = 0, $n$4355$us = 0, $n$6316 = 0, $n$6316$us = 0, $n$6316$us320 = 0, $n$7309 = 0, $nChannelsInternal = 0, $nChannelsInternal9 = 0, $nFramesDecoded21 = 0, $nFramesDecoded420 = 0, $nFramesDecoded420$us = 0, $nFramesDecoded420$us349 = 0, $nFramesPerPacket184 = 0, $nSamplesOutDec = 0, $nb_subfr38 = 0, $nbits_total$i$i = 0, $nbits_total$i$i$i = 0, $nbits_total$i$i$i145 = 0, $offs$i$i$i = 0, $offs$i$i$i$i = 0, $offs$i$i$i$i147 = 0, $payloadSize_ms = 0, $pred0_Q13$0113$i = 0, $pred1_Q13$0114$i = 0, $prev_decode_only_middle402 = 0, $pulses = 0, $rem$i$i = 0, $rem$i$i$i = 0, $rem$i$i$i146 = 0, $resample_out_ptr$0 = 0, $ret$0$i = 0, $ret$0$i$i = 0, $ret$0$i$i134 = 0, $ret$0$i$i91 = 0, $retval$0 = 0, $rng$i = 0, $rng$i$i = 0, $rng$i$i130 = 0, $s$0$i = 0, $s$0$i$i = 0, $s$0$i$i133 = 0, $s$0$i$i90 = 0, $sMid = 0, $sStereo433 = 0, $samplesOut1_tmp = 0, $shl$i$i29 = 0, $shl$i$i6 = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i$i132 = 0, $shr$i$i89 = 0, $shr$i48 = 0, $shr$i9 = 0, $shr20$i = 0, $shr33$i = 0, $storage$i$i$i = 0, $storage$i$i$i$i = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i141 = 0, $sub$i$i98 = 0, $sub$i13 = 0, $sub$i52 = 0, $sub207$i = 0, $sub213 = 0, $sub3$i$i = 0, $sub3$i$i142 = 0, $sub3$i$i99 = 0, $sub3$i53 = 0, $sub384$us = 0, $val$i = 0, $val$i$i = 0, $val$i$i131 = 0, $vla = 0, $vla$sink = 0, $vla463 = 0, $vla480287 = 0, $vla480287$alloca_mul = 0, label = 0, sp = 0, $n$0112$i$looptemp = 0, $n$1110$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 $nSamplesOutDec = sp + 656 | 0;
 $samplesOut1_tmp = sp + 648 | 0;
 $MS_pred_Q13 = sp + 640 | 0;
 $pulses = sp;
 $0 = $MS_pred_Q13;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $nChannelsInternal = $decControl + 4 | 0;
 $4 = HEAP32[$nChannelsInternal >> 2] | 0;
 if (($4 + -1 | 0) >>> 0 >= 2) _celt_fatal(50652, 50743, 107);
 if ($newPacketFlag | 0) {
  $n$0381 = 0;
  do {
   HEAP32[$decState + ($n$0381 * 4264 | 0) + 2388 >> 2] = 0;
   $n$0381 = $n$0381 + 1 | 0;
  } while (($n$0381 | 0) != ($4 | 0));
 }
 $nChannelsInternal9 = $decState + 8544 | 0;
 $5 = HEAP32[$nChannelsInternal9 >> 2] | 0;
 if (($4 | 0) > ($5 | 0)) {
  _memset($decState + 4268 | 0, 0, 4260) | 0;
  HEAP32[$decState + 6640 >> 2] = 1;
  HEAP32[$decState + 4264 >> 2] = 65536;
  HEAP32[$decState + 8432 >> 2] = 0;
  HEAP32[$decState + 8412 >> 2] = 0;
  HEAP32[$decState + 8416 >> 2] = 3176576;
  HEAP32[$decState + 8436 >> 2] = 0;
  HEAP32[$decState + 8508 >> 2] = 65536;
  HEAP32[$decState + 8512 >> 2] = 65536;
  HEAP32[$decState + 8524 >> 2] = 20;
  HEAP32[$decState + 8520 >> 2] = 2;
  $7 = HEAP32[$nChannelsInternal >> 2] | 0;
 } else $7 = $4;
 if (($7 | 0) == 1 & ($5 | 0) == 2) $232 = (HEAP32[$decControl + 12 >> 2] | 0) == ((HEAP32[$decState + 2316 >> 2] | 0) * 1e3 | 0); else $232 = 0;
 $nFramesDecoded21 = $decState + 2388 | 0;
 L15 : do if ((HEAP32[$nFramesDecoded21 >> 2] | 0) == 0 & ($7 | 0) > 0) {
  $payloadSize_ms = $decControl + 16 | 0;
  $internalSampleRate69 = $decControl + 12 | 0;
  $API_sampleRate = $decControl + 8 | 0;
  $n$1378 = 0;
  L17 : while (1) {
   switch (HEAP32[$payloadSize_ms >> 2] | 0) {
   case 10:
   case 0:
    {
     $$sink445 = 1;
     $12 = 2;
     break;
    }
   case 20:
    {
     $$sink445 = 1;
     $12 = 4;
     break;
    }
   case 40:
    {
     $$sink445 = 2;
     $12 = 4;
     break;
    }
   case 60:
    {
     $$sink445 = 3;
     $12 = 4;
     break;
    }
   default:
    {
     label = 16;
     break L17;
    }
   }
   HEAP32[$decState + ($n$1378 * 4264 | 0) + 2392 >> 2] = $$sink445;
   $nb_subfr38 = $decState + ($n$1378 * 4264 | 0) + 2324 | 0;
   HEAP32[$nb_subfr38 >> 2] = $12;
   $shr = HEAP32[$internalSampleRate69 >> 2] >> 10;
   switch ($shr | 0) {
   case 7:
   case 11:
   case 15:
    break;
   default:
    {
     label = 18;
     break L17;
    }
   }
   $add70 = $shr + 1 | 0;
   $14 = HEAP32[$API_sampleRate >> 2] | 0;
   $cmp$i = ($add70 | 0) == 8;
   $16 = ($add70 | 4 | 0) == 12;
   switch ($shr | 0) {
   case 7:
   case 11:
   case 15:
    break;
   default:
    {
     label = 20;
     break L17;
    }
   }
   switch ($12 & 7) {
   case 2:
   case 4:
    break;
   default:
    {
     label = 22;
     break L17;
    }
   }
   $conv10$i = $add70 << 16 >> 16;
   HEAP32[$decState + ($n$1378 * 4264 | 0) + 2332 >> 2] = $conv10$i * 5;
   $mul17$i = Math_imul($12, $conv10$i * 327680 >> 16) | 0;
   $fs_kHz18$i = $decState + ($n$1378 * 4264 | 0) + 2316 | 0;
   $fs_API_hz$i = $decState + ($n$1378 * 4264 | 0) + 2320 | 0;
   if ((HEAP32[$fs_kHz18$i >> 2] | 0) == ($add70 | 0)) if ((HEAP32[$fs_API_hz$i >> 2] | 0) == ($14 | 0)) label = 26; else label = 25; else label = 25;
   if ((label | 0) == 25) {
    label = 0;
    _silk_resampler_init($decState + ($n$1378 * 4264 | 0) + 2432 | 0, $conv10$i * 1e3 | 0, $14, 0);
    HEAP32[$fs_API_hz$i >> 2] = $14;
    if ((HEAP32[$fs_kHz18$i >> 2] | 0) == ($add70 | 0)) label = 26; else {
     $cmp42$i = (HEAP32[$nb_subfr38 >> 2] | 0) == 4;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2384 >> 2] = $cmp$i ? ($cmp42$i ? 51941 : 51964) : $cmp42$i ? 25072 : 51952;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2336 >> 2] = $conv10$i * 20;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2340 >> 2] = $16 ? 10 : 16;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2732 >> 2] = $16 ? 44020 : 44060;
     switch ($shr | 0) {
     case 15:
      {
       $$sink64$i = 51926;
       break;
      }
     case 11:
      {
       $$sink64$i = 51920;
       break;
      }
     default:
      if ($cmp$i) $$sink64$i = 51911; else {
       label = 30;
       break L17;
      }
     }
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2380 >> 2] = $$sink64$i;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2376 >> 2] = 1;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2308 >> 2] = 100;
     HEAP8[$decState + ($n$1378 * 4264 | 0) + 2312 >> 0] = 10;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 4164 >> 2] = 0;
     _memset($decState + ($n$1378 * 4264 | 0) + 1284 | 0, 0, 1024) | 0;
     label = 33;
    }
   }
   if ((label | 0) == 26) {
    label = 0;
    if (($mul17$i | 0) != (HEAP32[$decState + ($n$1378 * 4264 | 0) + 2328 >> 2] | 0)) {
     $cmp42$i$c = (HEAP32[$nb_subfr38 >> 2] | 0) == 4;
     HEAP32[$decState + ($n$1378 * 4264 | 0) + 2384 >> 2] = $cmp$i ? ($cmp42$i$c ? 51941 : 51964) : $cmp42$i$c ? 25072 : 51952;
     label = 33;
    }
   }
   if ((label | 0) == 33) {
    label = 0;
    HEAP32[$fs_kHz18$i >> 2] = $add70;
    HEAP32[$decState + ($n$1378 * 4264 | 0) + 2328 >> 2] = $mul17$i;
   }
   if (($mul17$i + -1 | 0) >>> 0 >= 320) {
    label = 35;
    break;
   }
   $n$1378 = $n$1378 + 1 | 0;
   $24 = HEAP32[$nChannelsInternal >> 2] | 0;
   if (($n$1378 | 0) >= ($24 | 0)) {
    $26 = $24;
    break L15;
   }
  }
  if ((label | 0) == 16) _celt_fatal(56336, 50743, 146); else if ((label | 0) == 18) _celt_fatal(56336, 50743, 152); else if ((label | 0) == 20) _celt_fatal(52494, 50458, 43); else if ((label | 0) == 22) _celt_fatal(50480, 50458, 44); else if ((label | 0) == 30) _celt_fatal(56336, 50458, 89); else if ((label | 0) == 35) _celt_fatal(50567, 50458, 104);
 } else $26 = $7; while (0);
 $25 = HEAP32[$decControl >> 2] | 0;
 do if (($25 | 0) == 2) if (($26 | 0) == 2) {
  if ((HEAP32[$decState + 8540 >> 2] | 0) != 1) if ((HEAP32[$nChannelsInternal9 >> 2] | 0) != 1) {
   $29 = 2;
   $30 = 2;
   break;
  }
  HEAP32[$decState + 8528 >> 2] = 0;
  HEAP32[$decState + 8536 >> 2] = 0;
  _memcpy($decState + 6696 | 0, $decState + 2432 | 0, 300) | 0;
  $29 = HEAP32[$decControl >> 2] | 0;
  $30 = HEAP32[$nChannelsInternal >> 2] | 0;
 } else {
  $29 = 2;
  $30 = $26;
 } else {
  $29 = $25;
  $30 = $26;
 } while (0);
 HEAP32[$decState + 8540 >> 2] = $29;
 HEAP32[$nChannelsInternal9 >> 2] = $30;
 $API_sampleRate107 = $decControl + 8 | 0;
 if (((HEAP32[$API_sampleRate107 >> 2] | 0) + -8e3 | 0) >>> 0 > 4e4) {
  $retval$0 = -200;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $cmp114 = ($lostFlag | 0) == 1;
 if ($cmp114) {
  $116 = $30;
  $decode_only_middle$8 = 0;
 } else if (!(HEAP32[$nFramesDecoded21 >> 2] | 0)) {
  if (($30 | 0) > 0) {
   $rng$i = $psRangeDec + 28 | 0;
   $val$i = $psRangeDec + 32 | 0;
   $nbits_total$i$i = $psRangeDec + 20 | 0;
   $rem$i$i = $psRangeDec + 40 | 0;
   $offs$i$i$i = $psRangeDec + 24 | 0;
   $storage$i$i$i = $psRangeDec + 4 | 0;
   $35 = HEAP32[$rng$i >> 2] | 0;
   $36 = HEAP32[$val$i >> 2] | 0;
   $n$2374 = 0;
   while (1) {
    $34 = HEAP32[$decState + ($n$2374 * 4264 | 0) + 2392 >> 2] | 0;
    $cmp127368 = ($34 | 0) > 0;
    $shr$i = $35 >>> 1;
    $cmp$i2 = $36 >>> 0 < $shr$i >>> 0;
    $conv$i = $cmp$i2 & 1;
    if ($cmp$i2) {
     $233 = $36;
     $cond$i = $shr$i;
    } else {
     $sub$i = $36 - $shr$i | 0;
     HEAP32[$val$i >> 2] = $sub$i;
     $233 = $sub$i;
     $cond$i = $35 - $shr$i | 0;
    }
    HEAP32[$rng$i >> 2] = $cond$i;
    if ($cond$i >>> 0 < 8388609) {
     $$pre14$i$i = HEAP32[$storage$i$i$i >> 2] | 0;
     $37 = HEAP32[$nbits_total$i$i >> 2] | 0;
     $38 = $cond$i;
     $39 = HEAP32[$offs$i$i$i >> 2] | 0;
     $42 = HEAP32[$rem$i$i >> 2] | 0;
     $45 = $233;
     while (1) {
      $37 = $37 + 8 | 0;
      HEAP32[$nbits_total$i$i >> 2] = $37;
      $shl$i$i6 = $38 << 8;
      HEAP32[$rng$i >> 2] = $shl$i$i6;
      if ($39 >>> 0 < $$pre14$i$i >>> 0) {
       $40 = HEAP32[$psRangeDec >> 2] | 0;
       $inc$i$i$i = $39 + 1 | 0;
       HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
       $236 = $inc$i$i$i;
       $cond$i$i$i = HEAPU8[$40 + $39 >> 0] | 0;
      } else {
       $236 = $39;
       $cond$i$i$i = 0;
      }
      HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
      $and7$i$i = ($45 << 8 & 2147483392 | ($cond$i$i$i | $42 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $and7$i$i;
      if ($shl$i$i6 >>> 0 >= 8388609) {
       $234 = $and7$i$i;
       $235 = $shl$i$i6;
       break;
      } else {
       $38 = $shl$i$i6;
       $39 = $236;
       $42 = $cond$i$i$i;
       $45 = $and7$i$i;
      }
     }
    } else {
     $234 = $233;
     $235 = $cond$i;
    }
    if ($cmp127368) {
     $call129371 = $conv$i;
     $i$0370 = 0;
     while (1) {
      HEAP32[$decState + ($n$2374 * 4264 | 0) + 2404 + ($i$0370 << 2) >> 2] = $call129371;
      $i$0370 = $i$0370 + 1 | 0;
      $46 = HEAP32[$rng$i >> 2] | 0;
      $47 = HEAP32[$val$i >> 2] | 0;
      $shr$i9 = $46 >>> 1;
      $cmp$i10 = $47 >>> 0 < $shr$i9 >>> 0;
      $conv$i11 = $cmp$i10 & 1;
      if ($cmp$i10) {
       $239 = $47;
       $cond$i15 = $shr$i9;
      } else {
       $sub$i13 = $47 - $shr$i9 | 0;
       HEAP32[$val$i >> 2] = $sub$i13;
       $239 = $sub$i13;
       $cond$i15 = $46 - $shr$i9 | 0;
      }
      HEAP32[$rng$i >> 2] = $cond$i15;
      if ($cond$i15 >>> 0 < 8388609) {
       $$pre14$i$i26 = HEAP32[$storage$i$i$i >> 2] | 0;
       $48 = HEAP32[$nbits_total$i$i >> 2] | 0;
       $49 = $cond$i15;
       $50 = HEAP32[$offs$i$i$i >> 2] | 0;
       $53 = HEAP32[$rem$i$i >> 2] | 0;
       $56 = $239;
       while (1) {
        $48 = $48 + 8 | 0;
        HEAP32[$nbits_total$i$i >> 2] = $48;
        $shl$i$i29 = $49 << 8;
        HEAP32[$rng$i >> 2] = $shl$i$i29;
        if ($50 >>> 0 < $$pre14$i$i26 >>> 0) {
         $51 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i32 = $50 + 1 | 0;
         HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i32;
         $242 = $inc$i$i$i32;
         $cond$i$i$i36 = HEAPU8[$51 + $50 >> 0] | 0;
        } else {
         $242 = $50;
         $cond$i$i$i36 = 0;
        }
        HEAP32[$rem$i$i >> 2] = $cond$i$i$i36;
        $and7$i$i42 = ($56 << 8 & 2147483392 | ($cond$i$i$i36 | $53 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $and7$i$i42;
        if ($shl$i$i29 >>> 0 >= 8388609) {
         $240 = $and7$i$i42;
         $241 = $shl$i$i29;
         break;
        } else {
         $49 = $shl$i$i29;
         $50 = $242;
         $53 = $cond$i$i$i36;
         $56 = $and7$i$i42;
        }
       }
      } else {
       $240 = $239;
       $241 = $cond$i15;
      }
      if (($i$0370 | 0) == ($34 | 0)) {
       $237 = $240;
       $238 = $241;
       $call129$lcssa = $conv$i11;
       break;
      } else $call129371 = $conv$i11;
     }
    } else {
     $237 = $234;
     $238 = $235;
     $call129$lcssa = $conv$i;
    }
    HEAP32[$decState + ($n$2374 * 4264 | 0) + 2416 >> 2] = $call129$lcssa;
    $n$2374 = $n$2374 + 1 | 0;
    $57 = HEAP32[$nChannelsInternal >> 2] | 0;
    if (($n$2374 | 0) >= ($57 | 0)) break; else {
     $35 = $238;
     $36 = $237;
    }
   }
   if (($57 | 0) > 0) {
    $n$3364 = 0;
    do {
     $LBRR_flags = $decState + ($n$3364 * 4264 | 0) + 2420 | 0;
     HEAP32[$LBRR_flags >> 2] = 0;
     HEAP32[$LBRR_flags + 4 >> 2] = 0;
     HEAP32[$LBRR_flags + 8 >> 2] = 0;
     do if (HEAP32[$decState + ($n$3364 * 4264 | 0) + 2416 >> 2] | 0) {
      $59 = HEAP32[$decState + ($n$3364 * 4264 | 0) + 2392 >> 2] | 0;
      if (($59 | 0) == 1) {
       HEAP32[$LBRR_flags >> 2] = 1;
       break;
      }
      $60 = HEAP32[44100 + ($59 + -2 << 2) >> 2] | 0;
      $61 = HEAP32[$rng$i >> 2] | 0;
      $62 = HEAP32[$val$i >> 2] | 0;
      $shr$i48 = $61 >>> 8;
      $ret$0$i = -1;
      $s$0$i = $61;
      while (1) {
       $inc$i = $ret$0$i + 1 | 0;
       $mul$i50 = Math_imul($shr$i48, HEAPU8[$60 + $inc$i >> 0] | 0) | 0;
       if ($62 >>> 0 < $mul$i50 >>> 0) {
        $ret$0$i = $inc$i;
        $s$0$i = $mul$i50;
       } else break;
      }
      $sub$i52 = $62 - $mul$i50 | 0;
      HEAP32[$val$i >> 2] = $sub$i52;
      $sub3$i53 = $s$0$i - $mul$i50 | 0;
      HEAP32[$rng$i >> 2] = $sub3$i53;
      if ($sub3$i53 >>> 0 < 8388609) {
       $$pre14$i$i63 = HEAP32[$storage$i$i$i >> 2] | 0;
       $64 = HEAP32[$nbits_total$i$i >> 2] | 0;
       $65 = $sub3$i53;
       $66 = HEAP32[$offs$i$i$i >> 2] | 0;
       $69 = HEAP32[$rem$i$i >> 2] | 0;
       $72 = $sub$i52;
       while (1) {
        $64 = $64 + 8 | 0;
        HEAP32[$nbits_total$i$i >> 2] = $64;
        $65 = $65 << 8;
        HEAP32[$rng$i >> 2] = $65;
        if ($66 >>> 0 < $$pre14$i$i63 >>> 0) {
         $67 = HEAP32[$psRangeDec >> 2] | 0;
         $inc$i$i$i69 = $66 + 1 | 0;
         HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i69;
         $243 = $inc$i$i$i69;
         $cond$i$i$i73 = HEAPU8[$67 + $66 >> 0] | 0;
        } else {
         $243 = $66;
         $cond$i$i$i73 = 0;
        }
        HEAP32[$rem$i$i >> 2] = $cond$i$i$i73;
        $72 = ($72 << 8 & 2147483392 | ($cond$i$i$i73 | $69 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i >> 2] = $72;
        if ($65 >>> 0 >= 8388609) break; else {
         $66 = $243;
         $69 = $cond$i$i$i73;
        }
       }
      }
      $add162 = $ret$0$i + 2 | 0;
      if (($59 | 0) > 0) {
       $i$1362 = 0;
       do {
        HEAP32[$decState + ($n$3364 * 4264 | 0) + 2420 + ($i$1362 << 2) >> 2] = $add162 >>> $i$1362 & 1;
        $i$1362 = $i$1362 + 1 | 0;
       } while (($i$1362 | 0) != ($59 | 0));
      }
     } while (0);
     $n$3364 = $n$3364 + 1 | 0;
     $73 = HEAP32[$nChannelsInternal >> 2] | 0;
    } while (($n$3364 | 0) < ($73 | 0));
    $$lcssa294 = $73;
   } else $$lcssa294 = $57;
  } else $$lcssa294 = $30;
  if (!$lostFlag) {
   $nFramesPerPacket184 = $decState + 2392 | 0;
   if ((HEAP32[$nFramesPerPacket184 >> 2] | 0) > 0) {
    $LBRR_flags203 = $decState + 6684 | 0;
    $rng$i$i = $psRangeDec + 28 | 0;
    $val$i$i = $psRangeDec + 32 | 0;
    $nbits_total$i$i$i = $psRangeDec + 20 | 0;
    $rem$i$i$i = $psRangeDec + 40 | 0;
    $offs$i$i$i$i = $psRangeDec + 24 | 0;
    $storage$i$i$i$i = $psRangeDec + 4 | 0;
    $75 = $$lcssa294;
    $decode_only_middle$0 = 0;
    $i$2358 = 0;
    while (1) {
     if (($75 | 0) > 0) {
      $arrayidx204 = $LBRR_flags203 + ($i$2358 << 2) | 0;
      $sub213 = $i$2358 + -1 | 0;
      if (!$i$2358) {
       $77 = $75;
       $decode_only_middle$1 = $decode_only_middle$0;
       $n$4355$us = 0;
       while (1) {
        $arrayidx191$us = $decState + ($n$4355$us * 4264 | 0) | 0;
        if (!(HEAP32[$decState + ($n$4355$us * 4264 | 0) + 2420 >> 2] | 0)) {
         $94 = $77;
         $decode_only_middle$3 = $decode_only_middle$1;
        } else {
         do if (($n$4355$us | 0) == 0 & ($77 | 0) == 2) {
          _silk_stereo_decode_pred($psRangeDec, $MS_pred_Q13);
          if (HEAP32[$arrayidx204 >> 2] | 0) {
           $decode_only_middle$2 = $decode_only_middle$1;
           break;
          }
          $79 = HEAP32[$rng$i$i >> 2] | 0;
          $80 = HEAP32[$val$i$i >> 2] | 0;
          $shr$i$i = $79 >>> 8;
          $ret$0$i$i = -1;
          $s$0$i$i = $79;
          while (1) {
           $ret$0$i$i = $ret$0$i$i + 1 | 0;
           $mul$i$i = Math_imul($shr$i$i, HEAPU8[51880 + $ret$0$i$i >> 0] | 0) | 0;
           if ($80 >>> 0 >= $mul$i$i >>> 0) break; else $s$0$i$i = $mul$i$i;
          }
          $sub$i$i = $80 - $mul$i$i | 0;
          HEAP32[$val$i$i >> 2] = $sub$i$i;
          $sub3$i$i = $s$0$i$i - $mul$i$i | 0;
          HEAP32[$rng$i$i >> 2] = $sub3$i$i;
          if ($sub3$i$i >>> 0 >= 8388609) {
           $decode_only_middle$2 = $ret$0$i$i;
           break;
          }
          $$pre14$i$i$i = HEAP32[$storage$i$i$i$i >> 2] | 0;
          $82 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
          $83 = $sub3$i$i;
          $84 = HEAP32[$offs$i$i$i$i >> 2] | 0;
          $87 = HEAP32[$rem$i$i$i >> 2] | 0;
          $90 = $sub$i$i;
          while (1) {
           $82 = $82 + 8 | 0;
           HEAP32[$nbits_total$i$i$i >> 2] = $82;
           $83 = $83 << 8;
           HEAP32[$rng$i$i >> 2] = $83;
           if ($84 >>> 0 < $$pre14$i$i$i >>> 0) {
            $85 = HEAP32[$psRangeDec >> 2] | 0;
            $inc$i$i$i$i = $84 + 1 | 0;
            HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i$i;
            $245 = $inc$i$i$i$i;
            $cond$i$i$i$i = HEAPU8[$85 + $84 >> 0] | 0;
           } else {
            $245 = $84;
            $cond$i$i$i$i = 0;
           }
           HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i$i;
           $90 = ($90 << 8 & 2147483392 | ($cond$i$i$i$i | $87 << 8) >>> 1 & 255) ^ 255;
           HEAP32[$val$i$i >> 2] = $90;
           if ($83 >>> 0 >= 8388609) {
            $decode_only_middle$2 = $ret$0$i$i;
            break;
           } else {
            $84 = $245;
            $87 = $cond$i$i$i$i;
           }
          }
         } else $decode_only_middle$2 = $decode_only_middle$1; while (0);
         _silk_decode_indices($arrayidx191$us, $psRangeDec, 0, 1, 0);
         _silk_decode_pulses($psRangeDec, $pulses, HEAP8[$decState + ($n$4355$us * 4264 | 0) + 2765 >> 0] | 0, HEAP8[$decState + ($n$4355$us * 4264 | 0) + 2766 >> 0] | 0, HEAP32[$decState + ($n$4355$us * 4264 | 0) + 2328 >> 2] | 0);
         $94 = HEAP32[$nChannelsInternal >> 2] | 0;
         $decode_only_middle$3 = $decode_only_middle$2;
        }
        $n$4355$us = $n$4355$us + 1 | 0;
        if (($n$4355$us | 0) >= ($94 | 0)) {
         $244 = $94;
         $decode_only_middle$7 = $decode_only_middle$3;
         break;
        } else {
         $77 = $94;
         $decode_only_middle$1 = $decode_only_middle$3;
        }
       }
      } else {
       $96 = $75;
       $decode_only_middle$4 = $decode_only_middle$0;
       $n$4355 = 0;
       while (1) {
        $arrayidx191 = $decState + ($n$4355 * 4264 | 0) | 0;
        if (!(HEAP32[$decState + ($n$4355 * 4264 | 0) + 2420 + ($i$2358 << 2) >> 2] | 0)) {
         $114 = $96;
         $decode_only_middle$6 = $decode_only_middle$4;
        } else {
         do if (($n$4355 | 0) == 0 & ($96 | 0) == 2) {
          _silk_stereo_decode_pred($psRangeDec, $MS_pred_Q13);
          if (HEAP32[$arrayidx204 >> 2] | 0) {
           $decode_only_middle$5 = $decode_only_middle$4;
           break;
          }
          $98 = HEAP32[$rng$i$i >> 2] | 0;
          $99 = HEAP32[$val$i$i >> 2] | 0;
          $shr$i$i89 = $98 >>> 8;
          $ret$0$i$i91 = -1;
          $s$0$i$i90 = $98;
          while (1) {
           $ret$0$i$i91 = $ret$0$i$i91 + 1 | 0;
           $mul$i$i95 = Math_imul($shr$i$i89, HEAPU8[51880 + $ret$0$i$i91 >> 0] | 0) | 0;
           if ($99 >>> 0 >= $mul$i$i95 >>> 0) break; else $s$0$i$i90 = $mul$i$i95;
          }
          $sub$i$i98 = $99 - $mul$i$i95 | 0;
          HEAP32[$val$i$i >> 2] = $sub$i$i98;
          $sub3$i$i99 = $s$0$i$i90 - $mul$i$i95 | 0;
          HEAP32[$rng$i$i >> 2] = $sub3$i$i99;
          if ($sub3$i$i99 >>> 0 >= 8388609) {
           $decode_only_middle$5 = $ret$0$i$i91;
           break;
          }
          $$pre14$i$i$i110 = HEAP32[$storage$i$i$i$i >> 2] | 0;
          $101 = HEAP32[$nbits_total$i$i$i >> 2] | 0;
          $102 = $sub3$i$i99;
          $103 = HEAP32[$offs$i$i$i$i >> 2] | 0;
          $106 = HEAP32[$rem$i$i$i >> 2] | 0;
          $109 = $sub$i$i98;
          while (1) {
           $101 = $101 + 8 | 0;
           HEAP32[$nbits_total$i$i$i >> 2] = $101;
           $102 = $102 << 8;
           HEAP32[$rng$i$i >> 2] = $102;
           if ($103 >>> 0 < $$pre14$i$i$i110 >>> 0) {
            $104 = HEAP32[$psRangeDec >> 2] | 0;
            $inc$i$i$i$i116 = $103 + 1 | 0;
            HEAP32[$offs$i$i$i$i >> 2] = $inc$i$i$i$i116;
            $246 = $inc$i$i$i$i116;
            $cond$i$i$i$i120 = HEAPU8[$104 + $103 >> 0] | 0;
           } else {
            $246 = $103;
            $cond$i$i$i$i120 = 0;
           }
           HEAP32[$rem$i$i$i >> 2] = $cond$i$i$i$i120;
           $109 = ($109 << 8 & 2147483392 | ($cond$i$i$i$i120 | $106 << 8) >>> 1 & 255) ^ 255;
           HEAP32[$val$i$i >> 2] = $109;
           if ($102 >>> 0 >= 8388609) {
            $decode_only_middle$5 = $ret$0$i$i91;
            break;
           } else {
            $103 = $246;
            $106 = $cond$i$i$i$i120;
           }
          }
         } else $decode_only_middle$5 = $decode_only_middle$4; while (0);
         _silk_decode_indices($arrayidx191, $psRangeDec, $i$2358, 1, (HEAP32[$decState + ($n$4355 * 4264 | 0) + 2420 + ($sub213 << 2) >> 2] | 0) == 0 ? 0 : 2);
         _silk_decode_pulses($psRangeDec, $pulses, HEAP8[$decState + ($n$4355 * 4264 | 0) + 2765 >> 0] | 0, HEAP8[$decState + ($n$4355 * 4264 | 0) + 2766 >> 0] | 0, HEAP32[$decState + ($n$4355 * 4264 | 0) + 2328 >> 2] | 0);
         $114 = HEAP32[$nChannelsInternal >> 2] | 0;
         $decode_only_middle$6 = $decode_only_middle$5;
        }
        $n$4355 = $n$4355 + 1 | 0;
        if (($n$4355 | 0) >= ($114 | 0)) {
         $244 = $114;
         $decode_only_middle$7 = $decode_only_middle$6;
         break;
        } else {
         $96 = $114;
         $decode_only_middle$4 = $decode_only_middle$6;
        }
       }
      }
     } else {
      $244 = $75;
      $decode_only_middle$7 = $decode_only_middle$0;
     }
     $i$2358 = $i$2358 + 1 | 0;
     if (($i$2358 | 0) >= (HEAP32[$nFramesPerPacket184 >> 2] | 0)) {
      $116 = $244;
      $decode_only_middle$8 = $decode_only_middle$7;
      break;
     } else {
      $75 = $244;
      $decode_only_middle$0 = $decode_only_middle$7;
     }
    }
   } else {
    $116 = $$lcssa294;
    $decode_only_middle$8 = 0;
   }
  } else {
   $116 = $$lcssa294;
   $decode_only_middle$8 = 0;
  }
 } else {
  $116 = $30;
  $decode_only_middle$8 = 0;
 }
 L167 : do if (($116 | 0) == 2) {
  switch ($lostFlag | 0) {
  case 0:
   {
    _silk_stereo_decode_pred($psRangeDec, $MS_pred_Q13);
    if (HEAP32[$decState + 6668 + (HEAP32[$nFramesDecoded21 >> 2] << 2) >> 2] | 0) {
     $decode_only_middle$9 = 0;
     break L167;
    }
    break;
   }
  case 2:
   {
    if ((HEAP32[$decState + 2420 + (HEAP32[$nFramesDecoded21 >> 2] << 2) >> 2] | 0) == 1) {
     _silk_stereo_decode_pred($psRangeDec, $MS_pred_Q13);
     if (HEAP32[$decState + 6684 + (HEAP32[$nFramesDecoded21 >> 2] << 2) >> 2] | 0) {
      $decode_only_middle$9 = 0;
      break L167;
     }
    } else label = 125;
    break;
   }
  default:
   label = 125;
  }
  if ((label | 0) == 125) {
   HEAP32[$MS_pred_Q13 >> 2] = HEAP16[$decState + 8528 >> 1];
   HEAP32[$MS_pred_Q13 + 4 >> 2] = HEAP16[$decState + 8530 >> 1];
   $decode_only_middle$9 = $decode_only_middle$8;
   break;
  }
  $rng$i$i130 = $psRangeDec + 28 | 0;
  $123 = HEAP32[$rng$i$i130 >> 2] | 0;
  $val$i$i131 = $psRangeDec + 32 | 0;
  $124 = HEAP32[$val$i$i131 >> 2] | 0;
  $shr$i$i132 = $123 >>> 8;
  $ret$0$i$i134 = -1;
  $s$0$i$i133 = $123;
  while (1) {
   $ret$0$i$i134 = $ret$0$i$i134 + 1 | 0;
   $mul$i$i138 = Math_imul($shr$i$i132, HEAPU8[51880 + $ret$0$i$i134 >> 0] | 0) | 0;
   if ($124 >>> 0 >= $mul$i$i138 >>> 0) break; else $s$0$i$i133 = $mul$i$i138;
  }
  $sub$i$i141 = $124 - $mul$i$i138 | 0;
  HEAP32[$val$i$i131 >> 2] = $sub$i$i141;
  $sub3$i$i142 = $s$0$i$i133 - $mul$i$i138 | 0;
  HEAP32[$rng$i$i130 >> 2] = $sub3$i$i142;
  if ($sub3$i$i142 >>> 0 < 8388609) {
   $nbits_total$i$i$i145 = $psRangeDec + 20 | 0;
   $rem$i$i$i146 = $psRangeDec + 40 | 0;
   $offs$i$i$i$i147 = $psRangeDec + 24 | 0;
   $$pre14$i$i$i153 = HEAP32[$psRangeDec + 4 >> 2] | 0;
   $126 = HEAP32[$nbits_total$i$i$i145 >> 2] | 0;
   $127 = $sub3$i$i142;
   $128 = HEAP32[$offs$i$i$i$i147 >> 2] | 0;
   $131 = HEAP32[$rem$i$i$i146 >> 2] | 0;
   $134 = $sub$i$i141;
   while (1) {
    $126 = $126 + 8 | 0;
    HEAP32[$nbits_total$i$i$i145 >> 2] = $126;
    $127 = $127 << 8;
    HEAP32[$rng$i$i130 >> 2] = $127;
    if ($128 >>> 0 < $$pre14$i$i$i153 >>> 0) {
     $129 = HEAP32[$psRangeDec >> 2] | 0;
     $inc$i$i$i$i159 = $128 + 1 | 0;
     HEAP32[$offs$i$i$i$i147 >> 2] = $inc$i$i$i$i159;
     $247 = $inc$i$i$i$i159;
     $cond$i$i$i$i163 = HEAPU8[$129 + $128 >> 0] | 0;
    } else {
     $247 = $128;
     $cond$i$i$i$i163 = 0;
    }
    HEAP32[$rem$i$i$i146 >> 2] = $cond$i$i$i$i163;
    $134 = ($134 << 8 & 2147483392 | ($cond$i$i$i$i163 | $131 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i$i131 >> 2] = $134;
    if ($127 >>> 0 >= 8388609) {
     $decode_only_middle$9 = $ret$0$i$i134;
     break;
    } else {
     $128 = $247;
     $131 = $cond$i$i$i$i163;
    }
   }
  } else $decode_only_middle$9 = $ret$0$i$i134;
 } else $decode_only_middle$9 = $decode_only_middle$8; while (0);
 $137 = HEAP32[$nChannelsInternal >> 2] | 0;
 $cmp297 = ($decode_only_middle$9 | 0) == 0;
 if (($137 | 0) == 2 & $cmp297) if ((HEAP32[$decState + 8548 >> 2] | 0) == 1) {
  _memset($decState + 5548 | 0, 0, 1024) | 0;
  HEAP32[$decState + 6572 >> 2] = 100;
  HEAP8[$decState + 6576 >> 0] = 10;
  HEAP32[$decState + 8428 >> 2] = 0;
  HEAP32[$decState + 6640 >> 2] = 1;
  $141 = HEAP32[$nChannelsInternal >> 2] | 0;
 } else $141 = 2; else $141 = $137;
 $mul320 = Math_imul($141, HEAP32[$decControl + 12 >> 2] | 0) | 0;
 $cmp324 = ($mul320 | 0) < (Math_imul(HEAP32[$decControl >> 2] | 0, HEAP32[$API_sampleRate107 >> 2] | 0) | 0);
 if ($cmp324) {
  $144 = _llvm_stacksave() | 0;
  HEAP32[$samplesOut1_tmp >> 2] = $samplesOut;
  $$sink447 = $decState + 2328 | 0;
  $231 = $144;
  $arrayidx334286 = $samplesOut1_tmp;
  $vla$sink = $samplesOut;
 } else {
  $frame_length329 = $decState + 2328 | 0;
  $mul331 = Math_imul((HEAP32[$frame_length329 >> 2] | 0) + 2 | 0, $141) | 0;
  $146 = _llvm_stacksave() | 0;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul331 << 1) | 0) + 15 & -16) | 0;
  HEAP32[$samplesOut1_tmp >> 2] = $vla;
  $$sink447 = $frame_length329;
  $231 = $146;
  $arrayidx334286 = $samplesOut1_tmp;
  $vla$sink = $vla;
 }
 $148 = $vla$sink + (HEAP32[$$sink447 >> 2] << 1) + 4 | 0;
 $149 = $samplesOut1_tmp + 4 | 0;
 HEAP32[$149 >> 2] = $148;
 if (!$lostFlag) {
  $has_side$0$in$ph = $cmp297;
  label = 136;
 } else if (!(HEAP32[$decState + 8548 >> 2] | 0)) {
  $has_side$0$in$ph = 1;
  label = 136;
 } else {
  $151 = HEAP32[$nChannelsInternal >> 2] | 0;
  if (($lostFlag | 0) == 2 & ($151 | 0) == 2) {
   $has_side$0$in$ph = (HEAP32[$decState + 6684 + (HEAP32[$decState + 6652 >> 2] << 2) >> 2] | 0) == 1;
   label = 136;
  } else {
   $154 = $151;
   $has_side$0$in = 0;
  }
 }
 if ((label | 0) == 136) {
  $154 = HEAP32[$nChannelsInternal >> 2] | 0;
  $has_side$0$in = $has_side$0$in$ph;
 }
 do if (($154 | 0) > 0) {
  $cmp389 = ($lostFlag | 0) == 2;
  $prev_decode_only_middle402 = $decState + 8548 | 0;
  L203 : do if ($has_side$0$in) {
   $n$6316$us = 0;
   do {
    $cmp376$us = ($n$6316$us | 0) == 0;
    $sub384$us = (HEAP32[$nFramesDecoded21 >> 2] | 0) - $n$6316$us | 0;
    do if (($sub384$us | 0) < 1) $condCoding381$0$us = 0; else {
     if ($cmp389) {
      $condCoding381$0$us = (HEAP32[$decState + ($n$6316$us * 4264 | 0) + 2420 + ($sub384$us + -1 << 2) >> 2] | 0) == 0 ? 0 : 2;
      break;
     }
     if (!$cmp376$us) if (HEAP32[$prev_decode_only_middle402 >> 2] | 0) {
      $condCoding381$0$us = 1;
      break;
     }
     $condCoding381$0$us = 2;
    } while (0);
    _silk_decode_frame($decState + ($n$6316$us * 4264 | 0) | 0, $psRangeDec, (HEAP32[$samplesOut1_tmp + ($n$6316$us << 2) >> 2] | 0) + 4 | 0, $nSamplesOutDec, $lostFlag, $condCoding381$0$us);
    $nFramesDecoded420$us = $decState + ($n$6316$us * 4264 | 0) + 2388 | 0;
    HEAP32[$nFramesDecoded420$us >> 2] = (HEAP32[$nFramesDecoded420$us >> 2] | 0) + 1;
    $n$6316$us = $n$6316$us + 1 | 0;
    $160 = HEAP32[$nChannelsInternal >> 2] | 0;
   } while (($n$6316$us | 0) < ($160 | 0));
   $$lcssa293 = $160;
  } else {
   $arrayidx411$us344 = $vla$sink + 4 | 0;
   if (!$cmp389) {
    $n$6316 = 0;
    while (1) {
     if (!$n$6316) _silk_decode_frame($decState, $psRangeDec, $arrayidx411$us344, $nSamplesOutDec, $lostFlag, (HEAP32[$nFramesDecoded21 >> 2] | 0) > 0 ? 2 : 0); else _memset((HEAP32[$samplesOut1_tmp + ($n$6316 << 2) >> 2] | 0) + 4 | 0, 0, HEAP32[$nSamplesOutDec >> 2] << 1 | 0) | 0;
     $nFramesDecoded420 = $decState + ($n$6316 * 4264 | 0) + 2388 | 0;
     HEAP32[$nFramesDecoded420 >> 2] = (HEAP32[$nFramesDecoded420 >> 2] | 0) + 1;
     $n$6316 = $n$6316 + 1 | 0;
     $171 = HEAP32[$nChannelsInternal >> 2] | 0;
     if (($n$6316 | 0) >= ($171 | 0)) {
      $$lcssa293 = $171;
      break L203;
     }
    }
   }
   $n$6316$us320 = 0;
   do {
    if (!$n$6316$us320) {
     $163 = HEAP32[$nFramesDecoded21 >> 2] | 0;
     if (($163 | 0) < 1) $condCoding381$0$us341 = 0; else $condCoding381$0$us341 = (HEAP32[$decState + 2420 + ($163 + -1 << 2) >> 2] | 0) == 0 ? 0 : 2;
     _silk_decode_frame($decState, $psRangeDec, $arrayidx411$us344, $nSamplesOutDec, 2, $condCoding381$0$us341);
    } else _memset((HEAP32[$samplesOut1_tmp + ($n$6316$us320 << 2) >> 2] | 0) + 4 | 0, 0, HEAP32[$nSamplesOutDec >> 2] << 1 | 0) | 0;
    $nFramesDecoded420$us349 = $decState + ($n$6316$us320 * 4264 | 0) + 2388 | 0;
    HEAP32[$nFramesDecoded420$us349 >> 2] = (HEAP32[$nFramesDecoded420$us349 >> 2] | 0) + 1;
    $n$6316$us320 = $n$6316$us320 + 1 | 0;
    $166 = HEAP32[$nChannelsInternal >> 2] | 0;
   } while (($n$6316$us320 | 0) < ($166 | 0));
   $$lcssa293 = $166;
  } while (0);
  if (!(($$lcssa293 | 0) == 2 & (HEAP32[$decControl >> 2] | 0) == 2)) {
   $207 = HEAP32[$nSamplesOutDec >> 2] | 0;
   label = 171;
   break;
  }
  $sStereo433 = $decState + 8528 | 0;
  $173 = HEAP32[$arrayidx334286 >> 2] | 0;
  $fs_kHz438 = $decState + 2316 | 0;
  $174 = HEAP32[$fs_kHz438 >> 2] | 0;
  $175 = HEAP32[$nSamplesOutDec >> 2] | 0;
  $arraydecay$i = $decState + 8532 | 0;
  $176 = HEAPU16[$arraydecay$i >> 1] | HEAPU16[$arraydecay$i + 2 >> 1] << 16;
  HEAP16[$173 >> 1] = $176;
  HEAP16[$173 + 2 >> 1] = $176 >>> 16;
  $arraydecay1$i = $decState + 8536 | 0;
  $177 = HEAPU16[$arraydecay1$i >> 1] | HEAPU16[$arraydecay1$i + 2 >> 1] << 16;
  HEAP16[$148 >> 1] = $177;
  HEAP16[$148 + 2 >> 1] = $177 >>> 16;
  $arrayidx$i173 = $173 + ($175 << 1) | 0;
  $178 = HEAPU16[$arrayidx$i173 >> 1] | HEAPU16[$arrayidx$i173 + 2 >> 1] << 16;
  HEAP16[$arraydecay$i >> 1] = $178;
  HEAP16[$arraydecay$i + 2 >> 1] = $178 >>> 16;
  $arrayidx6$i = $148 + ($175 << 1) | 0;
  $179 = HEAPU16[$arrayidx6$i >> 1] | HEAPU16[$arrayidx6$i + 2 >> 1] << 16;
  HEAP16[$arraydecay1$i >> 1] = $179;
  HEAP16[$arraydecay1$i + 2 >> 1] = $179 >>> 16;
  $conv$i174 = HEAP16[$sStereo433 >> 1] | 0;
  $arrayidx9$i = $decState + 8530 | 0;
  $conv10$i175 = HEAP16[$arrayidx9$i >> 1] | 0;
  $mul$i176 = $174 << 3;
  $182 = HEAP32[$MS_pred_Q13 >> 2] | 0;
  $conv18$i = (65536 / ($mul$i176 | 0) | 0) << 16 >> 16;
  $shr20$i = ((Math_imul($182 - $conv$i174 << 16 >> 16, $conv18$i) | 0) >> 15) + 1 >> 1;
  $183 = HEAP32[$MS_pred_Q13 + 4 >> 2] | 0;
  $shr33$i = ((Math_imul($183 - $conv10$i175 << 16 >> 16, $conv18$i) | 0) >> 15) + 1 >> 1;
  if (($174 | 0) > 0) {
   $n$0112$i = 0;
   $pred0_Q13$0113$i = $conv$i174;
   $pred1_Q13$0114$i = $conv10$i175;
   do {
    $pred0_Q13$0113$i = $pred0_Q13$0113$i + $shr20$i | 0;
    $pred1_Q13$0114$i = $pred1_Q13$0114$i + $shr33$i | 0;
    $n$0112$i$looptemp = $n$0112$i;
    $n$0112$i = $n$0112$i + 1 | 0;
    $conv46$i = HEAP16[$173 + ($n$0112$i << 1) >> 1] | 0;
    $add47$i = (HEAP16[$173 + ($n$0112$i$looptemp + 2 << 1) >> 1] | 0) + (HEAP16[$173 + ($n$0112$i$looptemp << 1) >> 1] | 0) + ($conv46$i << 1) | 0;
    $arrayidx50$i = $148 + ($n$0112$i << 1) | 0;
    $conv55$i = $pred0_Q13$0113$i << 16 >> 16;
    $conv69$i = $pred1_Q13$0114$i << 16 >> 16;
    $add81$i = (HEAP16[$arrayidx50$i >> 1] << 8) + (Math_imul($conv46$i >> 5, $conv69$i) | 0) + ((Math_imul($conv46$i << 11 & 63488, $conv69$i) | 0) >> 16) + (Math_imul($add47$i >> 7, $conv55$i) | 0) + ((Math_imul($add47$i << 9 & 65024, $conv55$i) | 0) >> 16) | 0;
    HEAP16[$arrayidx50$i >> 1] = ($add81$i | 0) > 8388479 ? 32767 : ($add81$i | 0) < -8388736 ? -32768 : (($add81$i >>> 7) + 1 | 0) >>> 1 & 65535;
   } while (($n$0112$i | 0) < ($mul$i176 | 0));
  }
  if (($mul$i176 | 0) < ($175 | 0)) {
   $conv127$i = $182 << 16 >> 16;
   $conv142$i = $183 << 16 >> 16;
   $n$1110$i = $mul$i176;
   do {
    $n$1110$i$looptemp = $n$1110$i;
    $n$1110$i = $n$1110$i + 1 | 0;
    $conv117$i = HEAP16[$173 + ($n$1110$i << 1) >> 1] | 0;
    $add119$i = (HEAP16[$173 + ($n$1110$i$looptemp + 2 << 1) >> 1] | 0) + (HEAP16[$173 + ($n$1110$i$looptemp << 1) >> 1] | 0) + ($conv117$i << 1) | 0;
    $arrayidx122$i = $148 + ($n$1110$i << 1) | 0;
    $add154$i = (HEAP16[$arrayidx122$i >> 1] << 8) + (Math_imul($conv117$i >> 5, $conv142$i) | 0) + ((Math_imul($conv117$i << 11 & 63488, $conv142$i) | 0) >> 16) + (Math_imul($add119$i >> 7, $conv127$i) | 0) + ((Math_imul($add119$i << 9 & 65024, $conv127$i) | 0) >> 16) | 0;
    HEAP16[$arrayidx122$i >> 1] = ($add154$i | 0) > 8388479 ? 32767 : ($add154$i | 0) < -8388736 ? -32768 : (($add154$i >>> 7) + 1 | 0) >>> 1 & 65535;
   } while (($n$1110$i | 0) != ($175 | 0));
  }
  HEAP16[$sStereo433 >> 1] = $182;
  HEAP16[$arrayidx9$i >> 1] = $183;
  if (($175 | 0) > 0) {
   $n$2108$i = 0;
   do {
    $n$2108$i = $n$2108$i + 1 | 0;
    $arrayidx195$i = $173 + ($n$2108$i << 1) | 0;
    $conv196$i = HEAP16[$arrayidx195$i >> 1] | 0;
    $arrayidx198$i = $148 + ($n$2108$i << 1) | 0;
    $conv199$i = HEAP16[$arrayidx198$i >> 1] | 0;
    $add200$i = $conv199$i + $conv196$i | 0;
    $sub207$i = $conv196$i - $conv199$i | 0;
    $cond217$i = ($add200$i | 0) > -32768 ? $add200$i : -32768;
    HEAP16[$arrayidx195$i >> 1] = ($cond217$i | 0) < 32767 ? $cond217$i : 32767;
    $cond232$i = ($sub207$i | 0) > -32768 ? $sub207$i : -32768;
    HEAP16[$arrayidx198$i >> 1] = ($cond232$i | 0) < 32767 ? $cond232$i : 32767;
   } while (($n$2108$i | 0) != ($175 | 0));
   $$pre$phiZ2D = $fs_kHz438;
   $210 = $175;
   $248 = $173;
  } else {
   $$pre$phiZ2D = $fs_kHz438;
   $210 = $175;
   $248 = $173;
  }
 } else {
  $207 = 0;
  label = 171;
 } while (0);
 if ((label | 0) == 171) {
  $sMid = $decState + 8532 | 0;
  $206 = HEAPU16[$sMid >> 1] | HEAPU16[$sMid + 2 >> 1] << 16;
  HEAP16[$vla$sink >> 1] = $206;
  HEAP16[$vla$sink + 2 >> 1] = $206 >>> 16;
  $arrayidx447 = $vla$sink + ($207 << 1) | 0;
  $208 = HEAPU16[$arrayidx447 >> 1] | HEAPU16[$arrayidx447 + 2 >> 1] << 16;
  HEAP16[$sMid >> 1] = $208;
  HEAP16[$sMid + 2 >> 1] = $208 >>> 16;
  $$pre$phiZ2D = $decState + 2316 | 0;
  $210 = $207;
  $248 = $vla$sink;
 }
 $mul450 = Math_imul(HEAP32[$API_sampleRate107 >> 2] | 0, $210) | 0;
 $div = ($mul450 | 0) / ((HEAP32[$$pre$phiZ2D >> 2] << 16 >> 16) * 1e3 | 0) | 0;
 HEAP32[$nSamplesOut >> 2] = $div;
 $212 = HEAP32[$decControl >> 2] | 0;
 if (($212 | 0) == 2) {
  $vla463 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($div << 1) | 0) + 15 & -16) | 0;
  $resample_out_ptr$0 = $vla463;
 } else $resample_out_ptr$0 = $samplesOut;
 $213 = HEAP32[$nChannelsInternal >> 2] | 0;
 if ($cmp324) {
  $214 = HEAP32[$decState + 2328 >> 2] | 0;
  $add475 = $214 + 2 | 0;
  $vla480287$alloca_mul = (Math_imul($add475, $213) | 0) << 1;
  $vla480287 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla480287$alloca_mul | 0) + 15 & -16) | 0;
  _memcpy($vla480287 | 0, $samplesOut | 0, Math_imul($213 << 1, $add475) | 0) | 0;
  HEAP32[$arrayidx334286 >> 2] = $vla480287;
  HEAP32[$149 >> 2] = $vla480287 + ($214 << 1) + 4;
  $249 = $vla480287;
 } else $249 = $248;
 L261 : do if (((($212 | 0) < ($213 | 0) ? $212 : $213) | 0) > 0) {
  $215 = $249;
  $n$7309 = 0;
  while (1) {
   _silk_resampler($decState + ($n$7309 * 4264 | 0) + 2432 | 0, $resample_out_ptr$0, $215 + 2 | 0, $210);
   $216 = HEAP32[$decControl >> 2] | 0;
   do if (($216 | 0) == 2) {
    $217 = HEAP32[$nSamplesOut >> 2] | 0;
    if (($217 | 0) <= 0) break;
    $i$3304 = 0;
    do {
     HEAP16[$samplesOut + (($i$3304 << 1) + $n$7309 << 1) >> 1] = HEAP16[$resample_out_ptr$0 + ($i$3304 << 1) >> 1] | 0;
     $i$3304 = $i$3304 + 1 | 0;
    } while (($i$3304 | 0) != ($217 | 0));
   } while (0);
   $inc535 = $n$7309 + 1 | 0;
   $219 = HEAP32[$nChannelsInternal >> 2] | 0;
   if (($inc535 | 0) >= ((($216 | 0) < ($219 | 0) ? $216 : $219) | 0)) {
    $$lcssa = $219;
    $$lcssa292 = $216;
    break L261;
   }
   $215 = HEAP32[$samplesOut1_tmp + ($inc535 << 2) >> 2] | 0;
   $n$7309 = $inc535;
  }
 } else {
  $$lcssa = $213;
  $$lcssa292 = $212;
 } while (0);
 do if (($$lcssa292 | 0) == 2 & ($$lcssa | 0) == 1) if ($232) {
  _silk_resampler($decState + 6696 | 0, $resample_out_ptr$0, (HEAP32[$arrayidx334286 >> 2] | 0) + 2 | 0, $210);
  $221 = HEAP32[$nSamplesOut >> 2] | 0;
  if (($221 | 0) <= 0) break;
  $i$4300 = 0;
  do {
   HEAP16[$samplesOut + (($i$4300 << 1 | 1) << 1) >> 1] = HEAP16[$resample_out_ptr$0 + ($i$4300 << 1) >> 1] | 0;
   $i$4300 = $i$4300 + 1 | 0;
  } while (($i$4300 | 0) != ($221 | 0));
 } else {
  $223 = HEAP32[$nSamplesOut >> 2] | 0;
  if (($223 | 0) <= 0) break;
  $i$5302 = 0;
  do {
   $mul569 = $i$5302 << 1;
   HEAP16[$samplesOut + (($mul569 | 1) << 1) >> 1] = HEAP16[$samplesOut + ($mul569 << 1) >> 1] | 0;
   $i$5302 = $i$5302 + 1 | 0;
  } while (($i$5302 | 0) != ($223 | 0));
 } while (0);
 if ((HEAP32[$decState + 4164 >> 2] | 0) == 2) $mul592$sink = Math_imul(HEAP32[43984 + ((HEAP32[$$pre$phiZ2D >> 2] | 0) + -8 >> 2 << 2) >> 2] | 0, HEAP32[$decState + 2308 >> 2] | 0) | 0; else $mul592$sink = 0;
 HEAP32[$decControl + 20 >> 2] = $mul592$sink;
 do if ($cmp114) {
  $230 = HEAP32[$nChannelsInternal9 >> 2] | 0;
  if (($230 | 0) <= 0) break;
  $i$6298 = 0;
  do {
   HEAP8[$decState + ($i$6298 * 4264 | 0) + 2312 >> 0] = 10;
   $i$6298 = $i$6298 + 1 | 0;
  } while (($i$6298 | 0) != ($230 | 0));
 } else HEAP32[$decState + 8548 >> 2] = $decode_only_middle$9; while (0);
 _llvm_stackrestore($231 | 0);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e$0, $__intl, $__loc$0$0$val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$pre26 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $144 = 0, $145 = 0, $148 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $162 = 0, $163 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $201 = 0, $202 = 0, $205 = 0, $206 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $224 = 0, $225 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $249 = 0, $250 = 0, $258 = 0, $259 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $30 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $45 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $62 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $75 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $90 = 0, $93 = 0, $94 = 0, $97 = 0, $__dp = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i101 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i146 = 0, $__ninp_$i$i215 = 0, $__ninp_$i$i264 = 0, $__ninp_$i$i277 = 0, $__ninp_$i$i305 = 0, $__ninp_$i$i345$phi$trans$insert = 0, $__ninp_$i$i345$pre$phiZZZ2D = 0, $__ninp_$i$i385 = 0, $__ninp_$i$i609 = 0, $__ninp_$i$i701 = 0, $__ninp_$i$i769 = 0, $__ninp_$i$i851 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i404 = 0, $__size_$i$i231 = 0, $__size_$i$i428 = 0, $__size_$i$i694 = 0, $__size_$i$i863 = 0, $__size_$i2$i = 0, $__size_$i2$i$i541 = 0, $__size_$i2$i233 = 0, $__size_$i2$i430 = 0, $__size_$i2$i865 = 0, $__size_$i3$i = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i446898$sink = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx89 = 0, $call$i$i330 = 0, $cmp$i$i266 = 0, $cmp$i$i347 = 0, $cmp26 = 0, $cmp94895 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i426 = 0, $cond$i237 = 0, $cond$i869 = 0, $conv$i$i432 = 0, $dec14 = 0, $dec14$lcssa17 = 0, $dec14$lcssa18 = 0, $dec14$lcssa19 = 0, $incdec$ptr205 = 0, $incdec$ptr221 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i169 = 0, $retval$0$i$i$i$i500 = 0, $retval$0$i$i$i$i565 = 0, $retval$0$i$i$i$i649 = 0, $retval$0$i$i$i$i725 = 0, $retval$0$i$i$i$i792 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i190 = 0, $retval$0$i$i13$i$i521 = 0, $retval$0$i$i13$i$i586 = 0, $retval$0$i$i13$i$i670 = 0, $retval$0$i$i13$i$i746 = 0, $retval$0$i$i13$i$i813 = 0, $retval$0$i$i156 = 0, $retval$0$i$i209 = 0, $retval$0$i$i225 = 0, $retval$0$i$i273 = 0, $retval$0$i$i334 = 0, $retval$0$i$i374 = 0, $retval$0$i$i471 = 0, $retval$0$i$i605 = 0, $retval$0$i$i689 = 0, $retval$0$i$i766 = 0, $retval$0$i$i833 = 0, $retval$0$i$i848 = 0, $retval$10 = 0, $sub$ptr$div$i = 0, $tobool$i$i$i412 = 0, $tobool$i$i$i539 = 0, $tobool$i$i$i623 = 0, $tobool$i$i429 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $__we$addr = sp + 496 | 0;
 $__gbuf = sp;
 $__gb = sp + 488 | 0;
 $__gn = sp + 480 | 0;
 $__ge = sp + 476 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 472 | 0;
 $__ts = sp + 468 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 93;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i101 = 0;
 while (1) {
  if (($__i$0$i$i101 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i101 << 2) >> 2] = 0;
  $__i$0$i$i101 = $__i$0$i$i101 + 1 | 0;
 }
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__size_$i$i = $__psn + 8 + 3 | 0;
 $__size_$i2$i = $__psn + 4 | 0;
 $__size_$i$i231 = $__nsn + 8 + 3 | 0;
 $__size_$i2$i233 = $__nsn + 4 | 0;
 $__size_$i$i694 = $__grp + 11 | 0;
 $__size_$i3$i = $__grp + 4 | 0;
 $cmp94895 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i404 = $__sym + 8 + 3 | 0;
 $arrayidx89 = $__pat + 3 | 0;
 $__size_$i2$i$i541 = $__sym + 4 | 0;
 $__size_$i$i428 = $__spaces + 8 + 3 | 0;
 $__size_$i2$i430 = $__spaces + 4 | 0;
 $263 = $__gbuf;
 $__e$sroa$0$0 = $__e$0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 $dec14$lcssa19 = HEAP32[$__fd >> 2] | 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $__e$sroa$0$21 = $__e$sroa$0$0;
   label = 233;
   break;
  }
  $7 = HEAP32[$__b >> 2] | 0;
  do if (!$7) $268 = 1; else {
   $8 = HEAP32[$7 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 63]($7) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $268 = 1;
    break;
   } else {
    $268 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) label = 30; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 30; else if ($268) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $__e$sroa$0$21 = $__e$sroa$0$0;
    label = 233;
    break;
   }
  }
  if ((label | 0) == 30) {
   label = 0;
   if ($268) {
    $__e$sroa$0$21 = 0;
    label = 233;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  L44 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
    } else {
     $17 = HEAP32[$__b >> 2] | 0;
     $18 = HEAP32[$17 + 12 >> 2] | 0;
     if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 63]($17) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$18 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i) | 0)) {
      label = 43;
      break L21;
     }
     $23 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i146 = $23 + 12 | 0;
     $24 = HEAP32[$__ninp_$i$i146 >> 2] | 0;
     if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i156 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else {
      HEAP32[$__ninp_$i$i146 >> 2] = $24 + 4;
      $retval$0$i$i156 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i156);
     label = 45;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
    } else label = 45;
    break;
   }
  case 3:
   {
    $50 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i = $50 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $50 & 255;
    $52 = HEAP8[$__size_$i$i231 >> 0] | 0;
    $cond$i237 = $52 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $52 & 255;
    if (($cond$i | 0) == (0 - $cond$i237 | 0)) {
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
    } else {
     $cmp26 = ($cond$i | 0) == 0;
     $54 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i264 = $54 + 12 | 0;
     $55 = HEAP32[$__ninp_$i$i264 >> 2] | 0;
     $56 = HEAP32[$54 + 16 >> 2] | 0;
     $cmp$i$i266 = ($55 | 0) == ($56 | 0);
     if ($cmp26 | ($cond$i237 | 0) == 0) {
      if ($cmp$i$i266) $retval$0$i$i273 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 63]($54) | 0; else $retval$0$i$i273 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
      if ($cmp26) {
       $68 = HEAP8[$__size_$i$i231 >> 0] | 0;
       if (($retval$0$i$i273 | 0) != (HEAP32[($68 << 24 >> 24 < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
        $269 = $263;
        $__e$sroa$0$20 = $__e$sroa$0$2;
        $__trailing_sign$1 = $__trailing_sign$0;
        $dec14$lcssa18 = $dec14$lcssa19;
        break L44;
       }
       $71 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i305 = $71 + 12 | 0;
       $72 = HEAP32[$__ninp_$i$i305 >> 2] | 0;
       if (($72 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 40 >> 2] & 63]($71) | 0;
        $75 = HEAP8[$__size_$i$i231 >> 0] | 0;
       } else {
        HEAP32[$__ninp_$i$i305 >> 2] = $72 + 4;
        $75 = $68;
       }
       HEAP8[$__neg >> 0] = 1;
       $269 = $263;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__trailing_sign$1 = ($75 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $75 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       $dec14$lcssa18 = $dec14$lcssa19;
       break L44;
      }
      $59 = HEAP8[$__size_$i$i >> 0] | 0;
      if (($retval$0$i$i273 | 0) != (HEAP32[($59 << 24 >> 24 < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $269 = $263;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__trailing_sign$1 = $__trailing_sign$0;
       $dec14$lcssa18 = $dec14$lcssa19;
       break L44;
      }
      $62 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i277 = $62 + 12 | 0;
      $63 = HEAP32[$__ninp_$i$i277 >> 2] | 0;
      if (($63 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 40 >> 2] & 63]($62) | 0;
       $66 = HEAP8[$__size_$i$i >> 0] | 0;
      } else {
       HEAP32[$__ninp_$i$i277 >> 2] = $63 + 4;
       $66 = $59;
      }
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = ($66 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $66 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      $dec14$lcssa18 = $dec14$lcssa19;
      break L44;
     }
     if ($cmp$i$i266) {
      $call$i$i330 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 63]($54) | 0;
      $$pre26 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i345$phi$trans$insert = $$pre26 + 12 | 0;
      $79 = HEAP8[$__size_$i$i >> 0] | 0;
      $82 = HEAP32[$__ninp_$i$i345$phi$trans$insert >> 2] | 0;
      $83 = HEAP32[$$pre26 + 16 >> 2] | 0;
      $84 = $$pre26;
      $__ninp_$i$i345$pre$phiZZZ2D = $__ninp_$i$i345$phi$trans$insert;
      $retval$0$i$i334 = $call$i$i330;
     } else {
      $79 = $50;
      $82 = $55;
      $83 = $56;
      $84 = $54;
      $__ninp_$i$i345$pre$phiZZZ2D = $__ninp_$i$i264;
      $retval$0$i$i334 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
     }
     $cmp$i$i347 = ($82 | 0) == ($83 | 0);
     if (($retval$0$i$i334 | 0) == (HEAP32[($79 << 24 >> 24 < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
      if ($cmp$i$i347) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$84 >> 2] | 0) + 40 >> 2] & 63]($84) | 0;
       $86 = HEAP8[$__size_$i$i >> 0] | 0;
      } else {
       HEAP32[$__ninp_$i$i345$pre$phiZZZ2D >> 2] = $82 + 4;
       $86 = $79;
      }
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = ($86 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $86 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      $dec14$lcssa18 = $dec14$lcssa19;
      break L44;
     }
     if ($cmp$i$i347) $retval$0$i$i374 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$84 >> 2] | 0) + 36 >> 2] & 63]($84) | 0; else $retval$0$i$i374 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0;
     $90 = HEAP8[$__size_$i$i231 >> 0] | 0;
     if (($retval$0$i$i374 | 0) != (HEAP32[($90 << 24 >> 24 < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
      label = 101;
      break L21;
     }
     $93 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i385 = $93 + 12 | 0;
     $94 = HEAP32[$__ninp_$i$i385 >> 2] | 0;
     if (($94 | 0) == (HEAP32[$93 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 40 >> 2] & 63]($93) | 0;
      $97 = HEAP8[$__size_$i$i231 >> 0] | 0;
     } else {
      HEAP32[$__ninp_$i$i385 >> 2] = $94 + 4;
      $97 = $90;
     }
     HEAP8[$__neg >> 0] = 1;
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = ($97 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $97 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $105 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $106 = HEAP32[$__sym >> 2] | 0;
     $107 = $105 << 24 >> 24 < 0 ? $106 : $__sym;
     if (!$__p$0) {
      $276 = $106;
      $277 = $105;
      $__sym_space_end$sroa$0$1 = $107;
     } else {
      $273 = $107;
      $274 = $106;
      $275 = $105;
      label = 106;
     }
    } else {
     if (!($cmp94895 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx89 >> 0] | 0) != 0)) {
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = 0;
      $dec14$lcssa18 = $dec14$lcssa19;
      break L44;
     }
     $102 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $103 = HEAP32[$__sym >> 2] | 0;
     $273 = $102 << 24 >> 24 < 0 ? $103 : $__sym;
     $274 = $103;
     $275 = $102;
     label = 106;
    }
    L106 : do if ((label | 0) == 106) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $109 = $275;
      $111 = $274;
      $__sym_space_end$sroa$0$0 = $273;
      while (1) {
       $tobool$i$i$i412 = $109 << 24 >> 24 < 0;
       $112 = $__sym_space_end$sroa$0$0;
       if ((($tobool$i$i$i412 ? $111 : $__sym) + (($tobool$i$i$i412 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $109 & 255) << 2) | 0) == ($112 | 0)) {
        $116 = $109;
        $117 = $111;
        break;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$112 >> 2] | 0) | 0)) {
        label = 110;
        break;
       }
       $109 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $111 = HEAP32[$__sym >> 2] | 0;
       $__sym_space_end$sroa$0$0 = $112 + 4 | 0;
      }
      if ((label | 0) == 110) {
       label = 0;
       $116 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $117 = HEAP32[$__sym >> 2] | 0;
      }
      $cond$i$i426 = $116 << 24 >> 24 < 0 ? $117 : $__sym;
      $118 = $cond$i$i426;
      $sub$ptr$div$i = $__sym_space_end$sroa$0$0 - $118 >> 2;
      $119 = HEAP8[$__size_$i$i428 >> 0] | 0;
      $tobool$i$i429 = $119 << 24 >> 24 < 0;
      $120 = HEAP32[$__size_$i2$i430 >> 2] | 0;
      $conv$i$i432 = $119 & 255;
      if ($sub$ptr$div$i >>> 0 > ($tobool$i$i429 ? $120 : $conv$i$i432) >>> 0) {
       $276 = $117;
       $277 = $116;
       $__sym_space_end$sroa$0$1 = $118;
      } else {
       $add$ptr$i446898$sink = $tobool$i$i429 ? (HEAP32[$__spaces >> 2] | 0) + ($120 << 2) | 0 : $__spaces + ($conv$i$i432 << 2) | 0;
       $122 = $add$ptr$i446898$sink + (0 - $sub$ptr$div$i << 2) | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i426;
       while (1) {
        if (($122 | 0) == ($add$ptr$i446898$sink | 0)) {
         $276 = $117;
         $277 = $116;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L106;
        }
        if ((HEAP32[$122 >> 2] | 0) != (HEAP32[$agg$tmp26$sroa$0$0$ptr$i >> 2] | 0)) {
         $276 = $117;
         $277 = $116;
         $__sym_space_end$sroa$0$1 = $118;
         break L106;
        }
        $122 = $122 + 4 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 4 | 0;
       }
      }
     } else {
      $276 = $274;
      $277 = $275;
      $__sym_space_end$sroa$0$1 = $273;
     }
    } while (0);
    $125 = $277;
    $127 = $276;
    $133 = $__e$sroa$0$2;
    $__e$sroa$0$6 = $__e$sroa$0$2;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    while (1) {
     $tobool$i$i$i539 = $125 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i539 ? $127 : $__sym) + (($tobool$i$i$i539 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $125 & 255) << 2) | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$6;
      break;
     }
     $128 = HEAP32[$__b >> 2] | 0;
     do if (!$128) $278 = 1; else {
      $129 = HEAP32[$128 + 12 >> 2] | 0;
      if (($129 | 0) == (HEAP32[$128 + 16 >> 2] | 0)) $retval$0$i$i$i$i565 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 36 >> 2] & 63]($128) | 0; else $retval$0$i$i$i$i565 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$129 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i565) | 0) {
       HEAP32[$__b >> 2] = 0;
       $278 = 1;
       break;
      } else {
       $278 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$133) {
      $__e$sroa$0$7 = $__e$sroa$0$6;
      label = 131;
     } else {
      $134 = HEAP32[$133 + 12 >> 2] | 0;
      if (($134 | 0) == (HEAP32[$133 + 16 >> 2] | 0)) $retval$0$i$i13$i$i586 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 63]($133) | 0; else $retval$0$i$i13$i$i586 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$134 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i586) | 0) {
       $__e$sroa$0$7 = 0;
       label = 131;
      } else if ($278) {
       $279 = $133;
       $__e$sroa$0$8 = $__e$sroa$0$6;
      } else {
       $__e$sroa$0$9 = $__e$sroa$0$6;
       break;
      }
     }
     if ((label | 0) == 131) {
      label = 0;
      if ($278) {
       $__e$sroa$0$9 = $__e$sroa$0$7;
       break;
      } else {
       $279 = 0;
       $__e$sroa$0$8 = $__e$sroa$0$7;
      }
     }
     $138 = HEAP32[$__b >> 2] | 0;
     $139 = HEAP32[$138 + 12 >> 2] | 0;
     if (($139 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) $retval$0$i$i605 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 36 >> 2] & 63]($138) | 0; else $retval$0$i$i605 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$139 >> 2] | 0) | 0;
     if (($retval$0$i$i605 | 0) != (HEAP32[$__sym_curr_char$sroa$0$0$ptr >> 2] | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$8;
      break;
     }
     $144 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i609 = $144 + 12 | 0;
     $145 = HEAP32[$__ninp_$i$i609 >> 2] | 0;
     if (($145 | 0) == (HEAP32[$144 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$144 >> 2] | 0) + 40 >> 2] & 63]($144) | 0; else HEAP32[$__ninp_$i$i609 >> 2] = $145 + 4;
     $125 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $127 = HEAP32[$__sym >> 2] | 0;
     $133 = $279;
     $__e$sroa$0$6 = $__e$sroa$0$8;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 4 | 0;
    }
    if ($cmp94895) {
     $148 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $tobool$i$i$i623 = $148 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i623 ? HEAP32[$__sym >> 2] | 0 : $__sym) + (($tobool$i$i$i623 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $148 & 255) << 2) | 0)) {
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$9;
      $__trailing_sign$1 = $__trailing_sign$0;
      $dec14$lcssa18 = $dec14$lcssa19;
     } else {
      label = 143;
      break L21;
     }
    } else {
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$9;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
    }
    break;
   }
  case 4:
   {
    $157 = $__e$sroa$0$2;
    $175 = $263;
    $270 = $__e$sroa$0$2;
    $__e$sroa$0$10 = $__e$sroa$0$2;
    $__ng$0 = 0;
    while (1) {
     $152 = HEAP32[$__b >> 2] | 0;
     do if (!$152) $280 = 1; else {
      $153 = HEAP32[$152 + 12 >> 2] | 0;
      if (($153 | 0) == (HEAP32[$152 + 16 >> 2] | 0)) $retval$0$i$i$i$i649 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] & 63]($152) | 0; else $retval$0$i$i$i$i649 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$153 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i649) | 0) {
       HEAP32[$__b >> 2] = 0;
       $280 = 1;
       break;
      } else {
       $280 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$157) {
      $281 = $270;
      $__e$sroa$0$11 = $__e$sroa$0$10;
      label = 156;
     } else {
      $158 = HEAP32[$157 + 12 >> 2] | 0;
      if (($158 | 0) == (HEAP32[$157 + 16 >> 2] | 0)) $retval$0$i$i13$i$i670 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$157 >> 2] | 0) + 36 >> 2] & 63]($157) | 0; else $retval$0$i$i13$i$i670 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$158 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i670) | 0) {
       $281 = 0;
       $__e$sroa$0$11 = 0;
       label = 156;
      } else if ($280) {
       $282 = $270;
       $283 = $157;
       $__e$sroa$0$12 = $__e$sroa$0$10;
      } else {
       $189 = $270;
       $__e$sroa$0$13 = $__e$sroa$0$10;
       break;
      }
     }
     if ((label | 0) == 156) {
      label = 0;
      if ($280) {
       $189 = $281;
       $__e$sroa$0$13 = $__e$sroa$0$11;
       break;
      } else {
       $282 = $281;
       $283 = 0;
       $__e$sroa$0$12 = $__e$sroa$0$11;
      }
     }
     $162 = HEAP32[$__b >> 2] | 0;
     $163 = HEAP32[$162 + 12 >> 2] | 0;
     if (($163 | 0) == (HEAP32[$162 + 16 >> 2] | 0)) $retval$0$i$i689 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 63]($162) | 0; else $retval$0$i$i689 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$163 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i689) | 0) {
      $168 = HEAP32[$__wn >> 2] | 0;
      if (($168 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $170 = HEAP32[$__wn >> 2] | 0;
      } else $170 = $168;
      HEAP32[$__wn >> 2] = $170 + 4;
      HEAP32[$170 >> 2] = $retval$0$i$i689;
      $284 = $175;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $171 = HEAP8[$__size_$i$i694 >> 0] | 0;
      if (!(($retval$0$i$i689 | 0) == (HEAP32[$__ts >> 2] | 0) & ($__ng$0 | 0 ? (($171 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $171 & 255) | 0) != 0 : 0))) {
       $189 = $282;
       $__e$sroa$0$13 = $__e$sroa$0$12;
       break;
      }
      if (($175 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $176 = HEAP32[$__gn >> 2] | 0;
      } else $176 = $175;
      $incdec$ptr205 = $176 + 4 | 0;
      HEAP32[$__gn >> 2] = $incdec$ptr205;
      HEAP32[$176 >> 2] = $__ng$0;
      $284 = $incdec$ptr205;
      $__ng$2$ph = 0;
     }
     $177 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i701 = $177 + 12 | 0;
     $178 = HEAP32[$__ninp_$i$i701 >> 2] | 0;
     if (($178 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 40 >> 2] & 63]($177) | 0; else HEAP32[$__ninp_$i$i701 >> 2] = $178 + 4;
     $157 = $283;
     $175 = $284;
     $270 = $282;
     $__e$sroa$0$10 = $__e$sroa$0$12;
     $__ng$0 = $__ng$2$ph;
    }
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($175 | 0) : 0) {
     if (($175 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $183 = HEAP32[$__gn >> 2] | 0;
     } else $183 = $175;
     $incdec$ptr221 = $183 + 4 | 0;
     HEAP32[$__gn >> 2] = $incdec$ptr221;
     HEAP32[$183 >> 2] = $__ng$0;
     $285 = $incdec$ptr221;
    } else $285 = $175;
    L205 : do if (($dec14$lcssa19 | 0) > 0) {
     $184 = HEAP32[$__b >> 2] | 0;
     do if (!$184) $286 = 1; else {
      $185 = HEAP32[$184 + 12 >> 2] | 0;
      if (($185 | 0) == (HEAP32[$184 + 16 >> 2] | 0)) $retval$0$i$i$i$i725 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$184 >> 2] | 0) + 36 >> 2] & 63]($184) | 0; else $retval$0$i$i$i$i725 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$185 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i725) | 0) {
       HEAP32[$__b >> 2] = 0;
       $286 = 1;
       break;
      } else {
       $286 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$189) {
      $__e$sroa$0$14 = $__e$sroa$0$13;
      label = 190;
     } else {
      $190 = HEAP32[$189 + 12 >> 2] | 0;
      if (($190 | 0) == (HEAP32[$189 + 16 >> 2] | 0)) $retval$0$i$i13$i$i746 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$189 >> 2] | 0) + 36 >> 2] & 63]($189) | 0; else $retval$0$i$i13$i$i746 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$190 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i746) | 0) {
       $__e$sroa$0$14 = 0;
       label = 190;
      } else if ($286) {
       $287 = $189;
       $__e$sroa$0$15 = $__e$sroa$0$13;
      } else {
       label = 196;
       break L21;
      }
     }
     if ((label | 0) == 190) {
      label = 0;
      if ($286) {
       label = 196;
       break L21;
      } else {
       $287 = 0;
       $__e$sroa$0$15 = $__e$sroa$0$14;
      }
     }
     $194 = HEAP32[$__b >> 2] | 0;
     $195 = HEAP32[$194 + 12 >> 2] | 0;
     if (($195 | 0) == (HEAP32[$194 + 16 >> 2] | 0)) $retval$0$i$i766 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$194 >> 2] | 0) + 36 >> 2] & 63]($194) | 0; else $retval$0$i$i766 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$195 >> 2] | 0) | 0;
     if (($retval$0$i$i766 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 196;
      break L21;
     }
     $201 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i769 = $201 + 12 | 0;
     $202 = HEAP32[$__ninp_$i$i769 >> 2] | 0;
     if (($202 | 0) == (HEAP32[$201 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$201 >> 2] | 0) + 40 >> 2] & 63]($201) | 0; else HEAP32[$__ninp_$i$i769 >> 2] = $202 + 4;
     $210 = $287;
     $__e$sroa$0$16 = $__e$sroa$0$15;
     $dec14 = $dec14$lcssa19;
     while (1) {
      if (($dec14 | 0) <= 0) {
       $__e$sroa$0$19 = $__e$sroa$0$16;
       $dec14$lcssa17 = $dec14;
       break L205;
      }
      $205 = HEAP32[$__b >> 2] | 0;
      do if (!$205) $288 = 1; else {
       $206 = HEAP32[$205 + 12 >> 2] | 0;
       if (($206 | 0) == (HEAP32[$205 + 16 >> 2] | 0)) $retval$0$i$i$i$i792 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$205 >> 2] | 0) + 36 >> 2] & 63]($205) | 0; else $retval$0$i$i$i$i792 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$206 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i792) | 0) {
        HEAP32[$__b >> 2] = 0;
        $288 = 1;
        break;
       } else {
        $288 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      if (!$210) {
       $__e$sroa$0$17 = $__e$sroa$0$16;
       label = 214;
      } else {
       $211 = HEAP32[$210 + 12 >> 2] | 0;
       if (($211 | 0) == (HEAP32[$210 + 16 >> 2] | 0)) $retval$0$i$i13$i$i813 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$210 >> 2] | 0) + 36 >> 2] & 63]($210) | 0; else $retval$0$i$i13$i$i813 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$211 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i813) | 0) {
        $__e$sroa$0$17 = 0;
        label = 214;
       } else if ($288) {
        $289 = $210;
        $__e$sroa$0$18 = $__e$sroa$0$16;
       } else {
        label = 220;
        break L21;
       }
      }
      if ((label | 0) == 214) {
       label = 0;
       if ($288) {
        label = 220;
        break L21;
       } else {
        $289 = 0;
        $__e$sroa$0$18 = $__e$sroa$0$17;
       }
      }
      $215 = HEAP32[$__b >> 2] | 0;
      $216 = HEAP32[$215 + 12 >> 2] | 0;
      if (($216 | 0) == (HEAP32[$215 + 16 >> 2] | 0)) $retval$0$i$i833 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$215 >> 2] | 0) + 36 >> 2] & 63]($215) | 0; else $retval$0$i$i833 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$216 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i833) | 0)) {
       label = 220;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $224 = HEAP32[$__b >> 2] | 0;
      $225 = HEAP32[$224 + 12 >> 2] | 0;
      if (($225 | 0) == (HEAP32[$224 + 16 >> 2] | 0)) $retval$0$i$i848 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$224 >> 2] | 0) + 36 >> 2] & 63]($224) | 0; else $retval$0$i$i848 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$225 >> 2] | 0) | 0;
      $229 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $229 + 4;
      HEAP32[$229 >> 2] = $retval$0$i$i848;
      $230 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i851 = $230 + 12 | 0;
      $231 = HEAP32[$__ninp_$i$i851 >> 2] | 0;
      if (($231 | 0) == (HEAP32[$230 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$230 >> 2] | 0) + 40 >> 2] & 63]($230) | 0; else HEAP32[$__ninp_$i$i851 >> 2] = $231 + 4;
      $210 = $289;
      $__e$sroa$0$16 = $__e$sroa$0$18;
      $dec14 = $dec14 + -1 | 0;
     }
    } else {
     $__e$sroa$0$19 = $__e$sroa$0$13;
     $dec14$lcssa17 = $dec14$lcssa19;
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 231;
     break L21;
    } else {
     $269 = $285;
     $__e$sroa$0$20 = $__e$sroa$0$19;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa17;
    }
    break;
   }
  default:
   {
    $269 = $263;
    $__e$sroa$0$20 = $__e$sroa$0$2;
    $__trailing_sign$1 = $__trailing_sign$0;
    $dec14$lcssa18 = $dec14$lcssa19;
   }
  } while (0);
  L276 : do if ((label | 0) == 45) {
   label = 0;
   $34 = $__e$sroa$0$2;
   $__e$sroa$0$3 = $__e$sroa$0$2;
   while (1) {
    $29 = HEAP32[$__b >> 2] | 0;
    do if (!$29) $271 = 1; else {
     $30 = HEAP32[$29 + 12 >> 2] | 0;
     if (($30 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) $retval$0$i$i$i$i169 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 63]($29) | 0; else $retval$0$i$i$i$i169 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$30 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i169) | 0) {
      HEAP32[$__b >> 2] = 0;
      $271 = 1;
      break;
     } else {
      $271 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$34) {
     $__e$sroa$0$4 = $__e$sroa$0$3;
     label = 58;
    } else {
     $35 = HEAP32[$34 + 12 >> 2] | 0;
     if (($35 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) $retval$0$i$i13$i$i190 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 63]($34) | 0; else $retval$0$i$i13$i$i190 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$35 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i190) | 0) {
      $__e$sroa$0$4 = 0;
      label = 58;
     } else if ($271) {
      $272 = $34;
      $__e$sroa$0$5 = $__e$sroa$0$3;
     } else {
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$3;
      $__trailing_sign$1 = $__trailing_sign$0;
      $dec14$lcssa18 = $dec14$lcssa19;
      break L276;
     }
    }
    if ((label | 0) == 58) {
     label = 0;
     if ($271) {
      $269 = $263;
      $__e$sroa$0$20 = $__e$sroa$0$4;
      $__trailing_sign$1 = $__trailing_sign$0;
      $dec14$lcssa18 = $dec14$lcssa19;
      break L276;
     } else {
      $272 = 0;
      $__e$sroa$0$5 = $__e$sroa$0$4;
     }
    }
    $39 = HEAP32[$__b >> 2] | 0;
    $40 = HEAP32[$39 + 12 >> 2] | 0;
    if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i209 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($39) | 0; else $retval$0$i$i209 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$40 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i209) | 0)) {
     $269 = $263;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__trailing_sign$1 = $__trailing_sign$0;
     $dec14$lcssa18 = $dec14$lcssa19;
     break L276;
    }
    $45 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i215 = $45 + 12 | 0;
    $46 = HEAP32[$__ninp_$i$i215 >> 2] | 0;
    if (($46 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $retval$0$i$i225 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 40 >> 2] & 63]($45) | 0; else {
     HEAP32[$__ninp_$i$i215 >> 2] = $46 + 4;
     $retval$0$i$i225 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$46 >> 2] | 0) | 0;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i225);
    $34 = $272;
    $__e$sroa$0$3 = $__e$sroa$0$5;
   }
  } while (0);
  $263 = $269;
  $__e$sroa$0$0 = $__e$sroa$0$20;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
  $dec14$lcssa19 = $dec14$lcssa18;
 }
 L310 : do if ((label | 0) == 43) {
  HEAP32[$__fd >> 2] = $dec14$lcssa19;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 101) {
  HEAP32[$__fd >> 2] = $dec14$lcssa19;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 143) {
  HEAP32[$__fd >> 2] = $dec14$lcssa19;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 196) {
  HEAP32[$__fd >> 2] = $dec14$lcssa19;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 220) {
  HEAP32[$__fd >> 2] = $dec14;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 231) {
  HEAP32[$__fd >> 2] = $dec14$lcssa17;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 233) {
  HEAP32[$__fd >> 2] = $dec14$lcssa19;
  L312 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i863 = $__trailing_sign$0 + 8 + 3 | 0;
   $__size_$i2$i865 = $__trailing_sign$0 + 4 | 0;
   $__e$sroa$0$22 = $__e$sroa$0$21;
   $__i$0 = 1;
   while (1) {
    $238 = HEAP8[$__size_$i$i863 >> 0] | 0;
    if ($238 << 24 >> 24 < 0) $cond$i869 = HEAP32[$__size_$i2$i865 >> 2] | 0; else $cond$i869 = $238 & 255;
    if ($__i$0 >>> 0 >= $cond$i869 >>> 0) break L312;
    $240 = HEAP32[$__b >> 2] | 0;
    do if (!$240) $290 = 1; else {
     $241 = HEAP32[$240 + 12 >> 2] | 0;
     if (($241 | 0) == (HEAP32[$240 + 16 >> 2] | 0)) $retval$0$i$i$i$i500 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$240 >> 2] | 0) + 36 >> 2] & 63]($240) | 0; else $retval$0$i$i$i$i500 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$241 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i500) | 0) {
      HEAP32[$__b >> 2] = 0;
      $290 = 1;
      break;
     } else {
      $290 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$__e$sroa$0$22) label = 251; else {
     $245 = HEAP32[$__e$sroa$0$22 + 12 >> 2] | 0;
     if (($245 | 0) == (HEAP32[$__e$sroa$0$22 + 16 >> 2] | 0)) $retval$0$i$i13$i$i521 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$22 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$22) | 0; else $retval$0$i$i13$i$i521 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$245 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i521) | 0) label = 251; else if ($290) $__e$sroa$0$24 = $__e$sroa$0$22; else break;
    }
    if ((label | 0) == 251) {
     label = 0;
     if ($290) break; else $__e$sroa$0$24 = 0;
    }
    $249 = HEAP32[$__b >> 2] | 0;
    $250 = HEAP32[$249 + 12 >> 2] | 0;
    if (($250 | 0) == (HEAP32[$249 + 16 >> 2] | 0)) $retval$0$i$i471 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$249 >> 2] | 0) + 36 >> 2] & 63]($249) | 0; else $retval$0$i$i471 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$250 >> 2] | 0) | 0;
    if ((HEAP8[$__size_$i$i863 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if (($retval$0$i$i471 | 0) != (HEAP32[$cond$i$i$i + ($__i$0 << 2) >> 2] | 0)) break;
    $258 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $258 + 12 | 0;
    $259 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($259 | 0) == (HEAP32[$258 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$258 >> 2] | 0) + 40 >> 2] & 63]($258) | 0; else HEAP32[$__ninp_$i$i >> 2] = $259 + 4;
    $__e$sroa$0$22 = $__e$sroa$0$24;
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L310;
  } while (0);
  $262 = HEAP32[$__gb >> 2] | 0;
  if (($262 | 0) == ($263 | 0)) $retval$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $262, $263, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $266 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($266 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 127]($266);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e$0, $__intl, $__loc$0$0$val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$pre12 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $110 = 0, $111 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $14 = 0, $141 = 0, $142 = 0, $145 = 0, $149 = 0, $15 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $160 = 0, $166 = 0, $168 = 0, $169 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $188 = 0, $192 = 0, $193 = 0, $199 = 0, $200 = 0, $203 = 0, $204 = 0, $208 = 0, $209 = 0, $21 = 0, $213 = 0, $214 = 0, $22 = 0, $223 = 0, $224 = 0, $228 = 0, $229 = 0, $230 = 0, $236 = 0, $238 = 0, $239 = 0, $243 = 0, $247 = 0, $248 = 0, $256 = 0, $257 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $92 = 0, $93 = 0, $96 = 0, $__dp = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i100 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i147 = 0, $__ninp_$i$i224 = 0, $__ninp_$i$i280 = 0, $__ninp_$i$i294 = 0, $__ninp_$i$i324 = 0, $__ninp_$i$i367$phi$trans$insert = 0, $__ninp_$i$i367$pre$phiZZZ2D = 0, $__ninp_$i$i410 = 0, $__ninp_$i$i652 = 0, $__ninp_$i$i755 = 0, $__ninp_$i$i824 = 0, $__ninp_$i$i914 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i431 = 0, $__size_$i$i244 = 0, $__size_$i$i464 = 0, $__size_$i$i746 = 0, $__size_$i$i927 = 0, $__size_$i3$i = 0, $__size_$i3$i$i583 = 0, $__size_$i3$i246 = 0, $__size_$i3$i466 = 0, $__size_$i3$i748 = 0, $__size_$i3$i929 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__tab_$i216 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i = 0, $add$ptr$i497 = 0, $add$ptr$i497962 = 0, $add$ptr$i552$pre$phiZZZ2D = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx97 = 0, $call$i$i350 = 0, $cmp$i$i282 = 0, $cmp$i$i369 = 0, $cmp102959 = 0, $cmp26 = 0, $cond$i$i$i = 0, $cond$i$i437 = 0, $cond$i$i437992 = 0, $cond$i$i437995 = 0, $cond$i242 = 0, $cond$i250 = 0, $cond$i933 = 0, $conv$i$i468 = 0, $conv$i290 = 0, $conv$i734 = 0, $dec9 = 0, $incdec$ptr217 = 0, $incdec$ptr233 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i171 = 0, $retval$0$i$i$i$i511 = 0, $retval$0$i$i$i$i607 = 0, $retval$0$i$i$i$i693 = 0, $retval$0$i$i$i$i779 = 0, $retval$0$i$i$i$i847 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i192 = 0, $retval$0$i$i13$i$i532 = 0, $retval$0$i$i13$i$i628 = 0, $retval$0$i$i13$i$i714 = 0, $retval$0$i$i13$i$i800 = 0, $retval$0$i$i13$i$i868 = 0, $retval$0$i$i157 = 0, $retval$0$i$i211 = 0, $retval$0$i$i234 = 0, $retval$0$i$i289 = 0, $retval$0$i$i354 = 0, $retval$0$i$i397 = 0, $retval$0$i$i483 = 0, $retval$0$i$i647 = 0, $retval$0$i$i733 = 0, $retval$0$i$i820 = 0, $retval$0$i$i888 = 0, $retval$0$i$i910 = 0, $retval$10 = 0, $sub$i963 = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i432 = 0, $tobool$i$i$i432991 = 0, $tobool$i$i$i432994 = 0, $tobool$i$i$i581 = 0, $tobool$i$i$i667 = 0, $tobool$i$i465 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $__we$addr = sp + 488 | 0;
 $__gbuf = sp;
 $__gb = sp + 480 | 0;
 $__gn = sp + 472 | 0;
 $__ge = sp + 468 | 0;
 $__pat = sp + 496 | 0;
 $__dp = sp + 493 | 0;
 $__ts = sp + 492 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 93;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i100 = 0;
 while (1) {
  if (($__i$0$i$i100 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i100 << 2) >> 2] = 0;
  $__i$0$i$i100 = $__i$0$i$i100 + 1 | 0;
 }
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__tab_$i216 = $__ct + 8 | 0;
 $__size_$i$i = $__psn + 11 | 0;
 $__size_$i3$i = $__psn + 4 | 0;
 $__size_$i$i244 = $__nsn + 11 | 0;
 $__size_$i3$i246 = $__nsn + 4 | 0;
 $__size_$i$i746 = $__grp + 11 | 0;
 $__size_$i3$i748 = $__grp + 4 | 0;
 $cmp102959 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i431 = $__sym + 11 | 0;
 $arrayidx97 = $__pat + 3 | 0;
 $__size_$i3$i$i583 = $__sym + 4 | 0;
 $__size_$i$i464 = $__spaces + 11 | 0;
 $__size_$i3$i466 = $__spaces + 4 | 0;
 $261 = $__gbuf;
 $__e$sroa$0$0 = $__e$0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $__e$sroa$0$21 = $__e$sroa$0$0;
   label = 238;
   break;
  }
  $3 = HEAP32[$__b >> 2] | 0;
  do if (!$3) $266 = 1; else {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$4 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $266 = 1;
    break;
   } else {
    $266 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) label = 30; else {
   $8 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 30; else if ($266) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $__e$sroa$0$21 = $__e$sroa$0$0;
    label = 238;
    break;
   }
  }
  if ((label | 0) == 30) {
   label = 0;
   if ($266) {
    $__e$sroa$0$21 = 0;
    label = 238;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  L44 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $14 = HEAP32[$__b >> 2] | 0;
     $15 = HEAP32[$14 + 12 >> 2] | 0;
     if (($15 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$15 >> 0] | 0) | 0;
     if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
      label = 44;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 44;
      break L21;
     }
     $21 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i147 = $21 + 12 | 0;
     $22 = HEAP32[$__ninp_$i$i147 >> 2] | 0;
     if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0; else {
      HEAP32[$__ninp_$i$i147 >> 2] = $22 + 1;
      $retval$0$i$i157 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i157 & 255);
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else label = 46;
    break;
   }
  case 3:
   {
    $49 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i242 = $49 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $49 & 255;
    $51 = HEAP8[$__size_$i$i244 >> 0] | 0;
    $cond$i250 = $51 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $51 & 255;
    if (($cond$i242 | 0) == (0 - $cond$i250 | 0)) {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $cmp26 = ($cond$i242 | 0) == 0;
     $53 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i280 = $53 + 12 | 0;
     $54 = HEAP32[$__ninp_$i$i280 >> 2] | 0;
     $55 = HEAP32[$53 + 16 >> 2] | 0;
     $cmp$i$i282 = ($54 | 0) == ($55 | 0);
     if ($cmp26 | ($cond$i250 | 0) == 0) {
      if ($cmp$i$i282) $retval$0$i$i289 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 63]($53) | 0; else $retval$0$i$i289 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
      $conv$i290 = $retval$0$i$i289 & 255;
      if ($cmp26) {
       $67 = HEAP8[$__size_$i$i244 >> 0] | 0;
       if ((HEAP8[($67 << 24 >> 24 < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
        $267 = $261;
        $__e$sroa$0$20 = $__e$sroa$0$2;
        $__trailing_sign$1 = $__trailing_sign$0;
        break L44;
       }
       $70 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i324 = $70 + 12 | 0;
       $71 = HEAP32[$__ninp_$i$i324 >> 2] | 0;
       if (($71 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
        $74 = HEAP8[$__size_$i$i244 >> 0] | 0;
       } else {
        HEAP32[$__ninp_$i$i324 >> 2] = $71 + 1;
        $74 = $67;
       }
       HEAP8[$__neg >> 0] = 1;
       $267 = $261;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__trailing_sign$1 = ($74 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $74 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L44;
      }
      $58 = HEAP8[$__size_$i$i >> 0] | 0;
      if ((HEAP8[($58 << 24 >> 24 < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
       HEAP8[$__neg >> 0] = 1;
       $267 = $261;
       $__e$sroa$0$20 = $__e$sroa$0$2;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L44;
      }
      $61 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i294 = $61 + 12 | 0;
      $62 = HEAP32[$__ninp_$i$i294 >> 2] | 0;
      if (($62 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 40 >> 2] & 63]($61) | 0;
       $65 = HEAP8[$__size_$i$i >> 0] | 0;
      } else {
       HEAP32[$__ninp_$i$i294 >> 2] = $62 + 1;
       $65 = $58;
      }
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = ($65 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $65 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L44;
     }
     if ($cmp$i$i282) {
      $call$i$i350 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 63]($53) | 0;
      $$pre12 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i367$phi$trans$insert = $$pre12 + 12 | 0;
      $78 = HEAP8[$__size_$i$i >> 0] | 0;
      $81 = HEAP32[$__ninp_$i$i367$phi$trans$insert >> 2] | 0;
      $82 = HEAP32[$$pre12 + 16 >> 2] | 0;
      $83 = $$pre12;
      $__ninp_$i$i367$pre$phiZZZ2D = $__ninp_$i$i367$phi$trans$insert;
      $retval$0$i$i354 = $call$i$i350;
     } else {
      $78 = $49;
      $81 = $54;
      $82 = $55;
      $83 = $53;
      $__ninp_$i$i367$pre$phiZZZ2D = $__ninp_$i$i280;
      $retval$0$i$i354 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
     }
     $cmp$i$i369 = ($81 | 0) == ($82 | 0);
     if ((HEAP8[($78 << 24 >> 24 < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) == ($retval$0$i$i354 & 255) << 24 >> 24) {
      if ($cmp$i$i369) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 40 >> 2] & 63]($83) | 0;
       $85 = HEAP8[$__size_$i$i >> 0] | 0;
      } else {
       HEAP32[$__ninp_$i$i367$pre$phiZZZ2D >> 2] = $81 + 1;
       $85 = $78;
      }
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = ($85 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $85 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L44;
     }
     if ($cmp$i$i369) $retval$0$i$i397 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 63]($83) | 0; else $retval$0$i$i397 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
     $89 = HEAP8[$__size_$i$i244 >> 0] | 0;
     if ((HEAP8[($89 << 24 >> 24 < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != ($retval$0$i$i397 & 255) << 24 >> 24) {
      label = 103;
      break L21;
     }
     $92 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i410 = $92 + 12 | 0;
     $93 = HEAP32[$__ninp_$i$i410 >> 2] | 0;
     if (($93 | 0) == (HEAP32[$92 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 40 >> 2] & 63]($92) | 0;
      $96 = HEAP8[$__size_$i$i244 >> 0] | 0;
     } else {
      HEAP32[$__ninp_$i$i410 >> 2] = $93 + 1;
      $96 = $89;
     }
     HEAP8[$__neg >> 0] = 1;
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$2;
     $__trailing_sign$1 = ($96 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $96 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $104 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432 = $104 << 24 >> 24 < 0;
     $105 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437 = $tobool$i$i$i432 ? $105 : $__sym;
     $106 = $cond$i$i437;
     if (!$__p$0) {
      $272 = $105;
      $273 = $104;
      $__sym_space_end$sroa$0$1 = $106;
     } else {
      $109 = $104;
      $115 = $106;
      $271 = $105;
      $cond$i$i437995 = $cond$i$i437;
      $tobool$i$i$i432994 = $tobool$i$i$i432;
      label = 108;
     }
    } else {
     if (!($cmp102959 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx97 >> 0] | 0) != 0)) {
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$2;
      $__trailing_sign$1 = 0;
      break L44;
     }
     $101 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432991 = $101 << 24 >> 24 < 0;
     $102 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437992 = $tobool$i$i$i432991 ? $102 : $__sym;
     $109 = $101;
     $115 = $cond$i$i437992;
     $271 = $102;
     $cond$i$i437995 = $cond$i$i437992;
     $tobool$i$i$i432994 = $tobool$i$i$i432991;
     label = 108;
    }
    L107 : do if ((label | 0) == 108) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $add$ptr$i = $cond$i$i437995 + ($tobool$i$i$i432994 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $109 & 255) | 0;
      $__sym_space_end$sroa$0$0 = $115;
      while (1) {
       $110 = $__sym_space_end$sroa$0$0;
       if (($add$ptr$i | 0) == ($110 | 0)) break;
       $111 = HEAP8[$110 >> 0] | 0;
       if ($111 << 24 >> 24 <= -1) break;
       if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($111 << 24 >> 24 << 1) >> 1] & 8192)) break;
       $__sym_space_end$sroa$0$0 = $110 + 1 | 0;
      }
      $sub$ptr$sub$i = $__sym_space_end$sroa$0$0 - $115 | 0;
      $116 = HEAP8[$__size_$i$i464 >> 0] | 0;
      $tobool$i$i465 = $116 << 24 >> 24 < 0;
      $117 = HEAP32[$__size_$i3$i466 >> 2] | 0;
      $conv$i$i468 = $116 & 255;
      if ($sub$ptr$sub$i >>> 0 > ($tobool$i$i465 ? $117 : $conv$i$i468) >>> 0) {
       $272 = $271;
       $273 = $109;
       $__sym_space_end$sroa$0$1 = $115;
      } else {
       $add$ptr$i497962 = (HEAP32[$__spaces >> 2] | 0) + $117 | 0;
       $sub$i963 = 0 - $sub$ptr$sub$i | 0;
       $add$ptr$i497 = $__spaces + $conv$i$i468 | 0;
       $add$ptr$i552$pre$phiZZZ2D = $tobool$i$i465 ? $add$ptr$i497962 : $add$ptr$i497;
       $119 = $tobool$i$i465 ? $add$ptr$i497962 + $sub$i963 | 0 : $add$ptr$i497 + $sub$i963 | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i437995;
       while (1) {
        if (($119 | 0) == ($add$ptr$i552$pre$phiZZZ2D | 0)) {
         $272 = $271;
         $273 = $109;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L107;
        }
        if ((HEAP8[$119 >> 0] | 0) != (HEAP8[$agg$tmp26$sroa$0$0$ptr$i >> 0] | 0)) {
         $272 = $271;
         $273 = $109;
         $__sym_space_end$sroa$0$1 = $115;
         break L107;
        }
        $119 = $119 + 1 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 1 | 0;
       }
      }
     } else {
      $272 = $271;
      $273 = $109;
      $__sym_space_end$sroa$0$1 = $115;
     }
    } while (0);
    $122 = $273;
    $124 = $272;
    $130 = $__e$sroa$0$2;
    $__e$sroa$0$6 = $__e$sroa$0$2;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    while (1) {
     $tobool$i$i$i581 = $122 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i581 ? $124 : $__sym) + ($tobool$i$i$i581 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $122 & 255) | 0)) {
      $__e$sroa$0$9 = $__e$sroa$0$6;
      break;
     }
     $125 = HEAP32[$__b >> 2] | 0;
     do if (!$125) $274 = 1; else {
      $126 = HEAP32[$125 + 12 >> 2] | 0;
      if (($126 | 0) == (HEAP32[$125 + 16 >> 2] | 0)) $retval$0$i$i$i$i607 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$125 >> 2] | 0) + 36 >> 2] & 63]($125) | 0; else $retval$0$i$i$i$i607 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$126 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i607) | 0) {
       HEAP32[$__b >> 2] = 0;
       $274 = 1;
       break;
      } else {
       $274 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$130) {
      $__e$sroa$0$7 = $__e$sroa$0$6;
      label = 133;
     } else {
      $131 = HEAP32[$130 + 12 >> 2] | 0;
      if (($131 | 0) == (HEAP32[$130 + 16 >> 2] | 0)) $retval$0$i$i13$i$i628 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$130 >> 2] | 0) + 36 >> 2] & 63]($130) | 0; else $retval$0$i$i13$i$i628 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$131 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i628) | 0) {
       $__e$sroa$0$7 = 0;
       label = 133;
      } else if ($274) {
       $275 = $130;
       $__e$sroa$0$8 = $__e$sroa$0$6;
      } else {
       $__e$sroa$0$9 = $__e$sroa$0$6;
       break;
      }
     }
     if ((label | 0) == 133) {
      label = 0;
      if ($274) {
       $__e$sroa$0$9 = $__e$sroa$0$7;
       break;
      } else {
       $275 = 0;
       $__e$sroa$0$8 = $__e$sroa$0$7;
      }
     }
     $135 = HEAP32[$__b >> 2] | 0;
     $136 = HEAP32[$135 + 12 >> 2] | 0;
     if (($136 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) $retval$0$i$i647 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 63]($135) | 0; else $retval$0$i$i647 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$136 >> 0] | 0) | 0;
     if ((HEAP8[$__sym_curr_char$sroa$0$0$ptr >> 0] | 0) != ($retval$0$i$i647 & 255) << 24 >> 24) {
      $__e$sroa$0$9 = $__e$sroa$0$8;
      break;
     }
     $141 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i652 = $141 + 12 | 0;
     $142 = HEAP32[$__ninp_$i$i652 >> 2] | 0;
     if (($142 | 0) == (HEAP32[$141 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$141 >> 2] | 0) + 40 >> 2] & 63]($141) | 0; else HEAP32[$__ninp_$i$i652 >> 2] = $142 + 1;
     $122 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $124 = HEAP32[$__sym >> 2] | 0;
     $130 = $275;
     $__e$sroa$0$6 = $__e$sroa$0$8;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 1 | 0;
    }
    if ($cmp102959) {
     $145 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i667 = $145 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i667 ? HEAP32[$__sym >> 2] | 0 : $__sym) + ($tobool$i$i$i667 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $145 & 255) | 0)) {
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$9;
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 145;
      break L21;
     }
    } else {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$9;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  case 4:
   {
    $13 = HEAP8[$__ts >> 0] | 0;
    $154 = $__e$sroa$0$2;
    $172 = $261;
    $268 = $__e$sroa$0$2;
    $__e$sroa$0$10 = $__e$sroa$0$2;
    $__ng$0 = 0;
    while (1) {
     $149 = HEAP32[$__b >> 2] | 0;
     do if (!$149) $276 = 1; else {
      $150 = HEAP32[$149 + 12 >> 2] | 0;
      if (($150 | 0) == (HEAP32[$149 + 16 >> 2] | 0)) $retval$0$i$i$i$i693 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$149 >> 2] | 0) + 36 >> 2] & 63]($149) | 0; else $retval$0$i$i$i$i693 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$150 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i693) | 0) {
       HEAP32[$__b >> 2] = 0;
       $276 = 1;
       break;
      } else {
       $276 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$154) {
      $277 = $268;
      $__e$sroa$0$11 = $__e$sroa$0$10;
      label = 158;
     } else {
      $155 = HEAP32[$154 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) $retval$0$i$i13$i$i714 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 63]($154) | 0; else $retval$0$i$i13$i$i714 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$155 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i714) | 0) {
       $277 = 0;
       $__e$sroa$0$11 = 0;
       label = 158;
      } else if ($276) {
       $278 = $268;
       $279 = $154;
       $__e$sroa$0$12 = $__e$sroa$0$10;
      } else {
       $187 = $268;
       $__e$sroa$0$13 = $__e$sroa$0$10;
       break;
      }
     }
     if ((label | 0) == 158) {
      label = 0;
      if ($276) {
       $187 = $277;
       $__e$sroa$0$13 = $__e$sroa$0$11;
       break;
      } else {
       $278 = $277;
       $279 = 0;
       $__e$sroa$0$12 = $__e$sroa$0$11;
      }
     }
     $159 = HEAP32[$__b >> 2] | 0;
     $160 = HEAP32[$159 + 12 >> 2] | 0;
     if (($160 | 0) == (HEAP32[$159 + 16 >> 2] | 0)) $retval$0$i$i733 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 63]($159) | 0; else $retval$0$i$i733 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0;
     $conv$i734 = $retval$0$i$i733 & 255;
     if ($conv$i734 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i733 << 24 >> 24 << 1) >> 1] & 2048)) label = 168; else {
      $166 = HEAP32[$__wn >> 2] | 0;
      if (($166 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $168 = HEAP32[$__wn >> 2] | 0;
      } else $168 = $166;
      HEAP32[$__wn >> 2] = $168 + 1;
      HEAP8[$168 >> 0] = $conv$i734;
      $280 = $172;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else label = 168;
     if ((label | 0) == 168) {
      label = 0;
      $169 = HEAP8[$__size_$i$i746 >> 0] | 0;
      if (!($13 << 24 >> 24 == $conv$i734 << 24 >> 24 & ($__ng$0 | 0 ? (($169 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i748 >> 2] | 0 : $169 & 255) | 0) != 0 : 0))) {
       $187 = $278;
       $__e$sroa$0$13 = $__e$sroa$0$12;
       break;
      }
      if (($172 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $173 = HEAP32[$__gn >> 2] | 0;
      } else $173 = $172;
      $incdec$ptr217 = $173 + 4 | 0;
      HEAP32[$__gn >> 2] = $incdec$ptr217;
      HEAP32[$173 >> 2] = $__ng$0;
      $280 = $incdec$ptr217;
      $__ng$2$ph = 0;
     }
     $174 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i755 = $174 + 12 | 0;
     $175 = HEAP32[$__ninp_$i$i755 >> 2] | 0;
     if (($175 | 0) == (HEAP32[$174 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$174 >> 2] | 0) + 40 >> 2] & 63]($174) | 0; else HEAP32[$__ninp_$i$i755 >> 2] = $175 + 1;
     $154 = $279;
     $172 = $280;
     $268 = $278;
     $__e$sroa$0$10 = $__e$sroa$0$12;
     $__ng$0 = $__ng$2$ph;
    }
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($172 | 0) : 0) {
     if (($172 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $180 = HEAP32[$__gn >> 2] | 0;
     } else $180 = $172;
     $incdec$ptr233 = $180 + 4 | 0;
     HEAP32[$__gn >> 2] = $incdec$ptr233;
     HEAP32[$180 >> 2] = $__ng$0;
     $281 = $incdec$ptr233;
    } else $281 = $172;
    $181 = HEAP32[$__fd >> 2] | 0;
    if (($181 | 0) > 0) {
     $182 = HEAP32[$__b >> 2] | 0;
     do if (!$182) $282 = 1; else {
      $183 = HEAP32[$182 + 12 >> 2] | 0;
      if (($183 | 0) == (HEAP32[$182 + 16 >> 2] | 0)) $retval$0$i$i$i$i779 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$182 >> 2] | 0) + 36 >> 2] & 63]($182) | 0; else $retval$0$i$i$i$i779 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$183 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i779) | 0) {
       HEAP32[$__b >> 2] = 0;
       $282 = 1;
       break;
      } else {
       $282 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$187) {
      $__e$sroa$0$14 = $__e$sroa$0$13;
      label = 193;
     } else {
      $188 = HEAP32[$187 + 12 >> 2] | 0;
      if (($188 | 0) == (HEAP32[$187 + 16 >> 2] | 0)) $retval$0$i$i13$i$i800 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$187 >> 2] | 0) + 36 >> 2] & 63]($187) | 0; else $retval$0$i$i13$i$i800 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$188 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i800) | 0) {
       $__e$sroa$0$14 = 0;
       label = 193;
      } else if ($282) {
       $283 = $187;
       $__e$sroa$0$15 = $__e$sroa$0$13;
      } else {
       label = 199;
       break L21;
      }
     }
     if ((label | 0) == 193) {
      label = 0;
      if ($282) {
       label = 199;
       break L21;
      } else {
       $283 = 0;
       $__e$sroa$0$15 = $__e$sroa$0$14;
      }
     }
     $192 = HEAP32[$__b >> 2] | 0;
     $193 = HEAP32[$192 + 12 >> 2] | 0;
     if (($193 | 0) == (HEAP32[$192 + 16 >> 2] | 0)) $retval$0$i$i820 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$192 >> 2] | 0) + 36 >> 2] & 63]($192) | 0; else $retval$0$i$i820 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$193 >> 0] | 0) | 0;
     if ((HEAP8[$__dp >> 0] | 0) != ($retval$0$i$i820 & 255) << 24 >> 24) {
      label = 199;
      break L21;
     }
     $199 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i824 = $199 + 12 | 0;
     $200 = HEAP32[$__ninp_$i$i824 >> 2] | 0;
     if (($200 | 0) == (HEAP32[$199 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$199 >> 2] | 0) + 40 >> 2] & 63]($199) | 0; else HEAP32[$__ninp_$i$i824 >> 2] = $200 + 1;
     $208 = $283;
     $__e$sroa$0$16 = $__e$sroa$0$15;
     $dec9 = $181;
     while (1) {
      if (($dec9 | 0) <= 0) break;
      $203 = HEAP32[$__b >> 2] | 0;
      do if (!$203) $284 = 1; else {
       $204 = HEAP32[$203 + 12 >> 2] | 0;
       if (($204 | 0) == (HEAP32[$203 + 16 >> 2] | 0)) $retval$0$i$i$i$i847 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 36 >> 2] & 63]($203) | 0; else $retval$0$i$i$i$i847 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$204 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i847) | 0) {
        HEAP32[$__b >> 2] = 0;
        $284 = 1;
        break;
       } else {
        $284 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      if (!$208) {
       $__e$sroa$0$17 = $__e$sroa$0$16;
       label = 217;
      } else {
       $209 = HEAP32[$208 + 12 >> 2] | 0;
       if (($209 | 0) == (HEAP32[$208 + 16 >> 2] | 0)) $retval$0$i$i13$i$i868 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$208 >> 2] | 0) + 36 >> 2] & 63]($208) | 0; else $retval$0$i$i13$i$i868 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$209 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i868) | 0) {
        $__e$sroa$0$17 = 0;
        label = 217;
       } else if ($284) {
        $285 = $208;
        $__e$sroa$0$18 = $__e$sroa$0$16;
       } else {
        label = 224;
        break L21;
       }
      }
      if ((label | 0) == 217) {
       label = 0;
       if ($284) {
        label = 224;
        break L21;
       } else {
        $285 = 0;
        $__e$sroa$0$18 = $__e$sroa$0$17;
       }
      }
      $213 = HEAP32[$__b >> 2] | 0;
      $214 = HEAP32[$213 + 12 >> 2] | 0;
      if (($214 | 0) == (HEAP32[$213 + 16 >> 2] | 0)) $retval$0$i$i888 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$213 >> 2] | 0) + 36 >> 2] & 63]($213) | 0; else $retval$0$i$i888 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$214 >> 0] | 0) | 0;
      if (($retval$0$i$i888 & 255) << 24 >> 24 <= -1) {
       label = 224;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i888 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 224;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $223 = HEAP32[$__b >> 2] | 0;
      $224 = HEAP32[$223 + 12 >> 2] | 0;
      if (($224 | 0) == (HEAP32[$223 + 16 >> 2] | 0)) $retval$0$i$i910 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$223 >> 2] | 0) + 36 >> 2] & 63]($223) | 0; else $retval$0$i$i910 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$224 >> 0] | 0) | 0;
      $228 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $228 + 1;
      HEAP8[$228 >> 0] = $retval$0$i$i910;
      $229 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i914 = $229 + 12 | 0;
      $230 = HEAP32[$__ninp_$i$i914 >> 2] | 0;
      if (($230 | 0) == (HEAP32[$229 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$229 >> 2] | 0) + 40 >> 2] & 63]($229) | 0; else HEAP32[$__ninp_$i$i914 >> 2] = $230 + 1;
      $208 = $285;
      $__e$sroa$0$16 = $__e$sroa$0$18;
      $dec9 = $dec9 + -1 | 0;
     }
     HEAP32[$__fd >> 2] = $dec9;
     $__e$sroa$0$19 = $__e$sroa$0$16;
    } else $__e$sroa$0$19 = $__e$sroa$0$13;
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 236;
     break L21;
    } else {
     $267 = $281;
     $__e$sroa$0$20 = $__e$sroa$0$19;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  default:
   {
    $267 = $261;
    $__e$sroa$0$20 = $__e$sroa$0$2;
    $__trailing_sign$1 = $__trailing_sign$0;
   }
  } while (0);
  L280 : do if ((label | 0) == 46) {
   label = 0;
   $32 = $__e$sroa$0$2;
   $__e$sroa$0$3 = $__e$sroa$0$2;
   while (1) {
    $27 = HEAP32[$__b >> 2] | 0;
    do if (!$27) $269 = 1; else {
     $28 = HEAP32[$27 + 12 >> 2] | 0;
     if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i$i$i171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; else $retval$0$i$i$i$i171 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i171) | 0) {
      HEAP32[$__b >> 2] = 0;
      $269 = 1;
      break;
     } else {
      $269 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$32) {
     $__e$sroa$0$4 = $__e$sroa$0$3;
     label = 59;
    } else {
     $33 = HEAP32[$32 + 12 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $retval$0$i$i13$i$i192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $retval$0$i$i13$i$i192 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i192) | 0) {
      $__e$sroa$0$4 = 0;
      label = 59;
     } else if ($269) {
      $270 = $32;
      $__e$sroa$0$5 = $__e$sroa$0$3;
     } else {
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$3;
      $__trailing_sign$1 = $__trailing_sign$0;
      break L280;
     }
    }
    if ((label | 0) == 59) {
     label = 0;
     if ($269) {
      $267 = $261;
      $__e$sroa$0$20 = $__e$sroa$0$4;
      $__trailing_sign$1 = $__trailing_sign$0;
      break L280;
     } else {
      $270 = 0;
      $__e$sroa$0$5 = $__e$sroa$0$4;
     }
    }
    $37 = HEAP32[$__b >> 2] | 0;
    $38 = HEAP32[$37 + 12 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $retval$0$i$i211 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($37) | 0; else $retval$0$i$i211 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0;
    if (($retval$0$i$i211 & 255) << 24 >> 24 <= -1) {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    }
    if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i211 << 24 >> 24 << 1) >> 1] & 8192)) {
     $267 = $261;
     $__e$sroa$0$20 = $__e$sroa$0$5;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    }
    $44 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i224 = $44 + 12 | 0;
    $45 = HEAP32[$__ninp_$i$i224 >> 2] | 0;
    if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i234 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 40 >> 2] & 63]($44) | 0; else {
     HEAP32[$__ninp_$i$i224 >> 2] = $45 + 1;
     $retval$0$i$i234 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i234 & 255);
    $32 = $270;
    $__e$sroa$0$3 = $__e$sroa$0$5;
   }
  } while (0);
  $261 = $267;
  $__e$sroa$0$0 = $__e$sroa$0$20;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L315 : do if ((label | 0) == 44) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 103) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 145) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 199) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 224) {
  HEAP32[$__fd >> 2] = $dec9;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 236) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 238) {
  L317 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i927 = $__trailing_sign$0 + 11 | 0;
   $__size_$i3$i929 = $__trailing_sign$0 + 4 | 0;
   $__e$sroa$0$22 = $__e$sroa$0$21;
   $__i$0 = 1;
   while (1) {
    $236 = HEAP8[$__size_$i$i927 >> 0] | 0;
    if ($236 << 24 >> 24 < 0) $cond$i933 = HEAP32[$__size_$i3$i929 >> 2] | 0; else $cond$i933 = $236 & 255;
    if ($__i$0 >>> 0 >= $cond$i933 >>> 0) break L317;
    $238 = HEAP32[$__b >> 2] | 0;
    do if (!$238) $286 = 1; else {
     $239 = HEAP32[$238 + 12 >> 2] | 0;
     if (($239 | 0) == (HEAP32[$238 + 16 >> 2] | 0)) $retval$0$i$i$i$i511 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$238 >> 2] | 0) + 36 >> 2] & 63]($238) | 0; else $retval$0$i$i$i$i511 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$239 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i511) | 0) {
      HEAP32[$__b >> 2] = 0;
      $286 = 1;
      break;
     } else {
      $286 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$__e$sroa$0$22) label = 256; else {
     $243 = HEAP32[$__e$sroa$0$22 + 12 >> 2] | 0;
     if (($243 | 0) == (HEAP32[$__e$sroa$0$22 + 16 >> 2] | 0)) $retval$0$i$i13$i$i532 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$22 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$22) | 0; else $retval$0$i$i13$i$i532 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$243 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i532) | 0) label = 256; else if ($286) $__e$sroa$0$24 = $__e$sroa$0$22; else break;
    }
    if ((label | 0) == 256) {
     label = 0;
     if ($286) break; else $__e$sroa$0$24 = 0;
    }
    $247 = HEAP32[$__b >> 2] | 0;
    $248 = HEAP32[$247 + 12 >> 2] | 0;
    if (($248 | 0) == (HEAP32[$247 + 16 >> 2] | 0)) $retval$0$i$i483 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$247 >> 2] | 0) + 36 >> 2] & 63]($247) | 0; else $retval$0$i$i483 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$248 >> 0] | 0) | 0;
    if ((HEAP8[$__size_$i$i927 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if ((HEAP8[$cond$i$i$i + $__i$0 >> 0] | 0) != ($retval$0$i$i483 & 255) << 24 >> 24) break;
    $256 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $256 + 12 | 0;
    $257 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($257 | 0) == (HEAP32[$256 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$256 >> 2] | 0) + 40 >> 2] & 63]($256) | 0; else HEAP32[$__ninp_$i$i >> 2] = $257 + 1;
    $__e$sroa$0$22 = $__e$sroa$0$24;
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L315;
  } while (0);
  $260 = HEAP32[$__gb >> 2] | 0;
  if (($260 | 0) == ($261 | 0)) $retval$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $260, $261, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $264 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($264 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 127]($264);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _silk_NSQ_c($psEncC, $NSQ, $psIndices, $x16, $pulses, $PredCoef_Q12, $LTPCoef_Q14, $AR_Q13, $HarmShapeGain_Q14, $Tilt_Q14, $LF_shp_Q14, $Gains_Q16, $pitchL, $Lambda_Q10, $LTP_scale_Q14) {
 $psEncC = $psEncC | 0;
 $NSQ = $NSQ | 0;
 $psIndices = $psIndices | 0;
 $x16 = $x16 | 0;
 $pulses = $pulses | 0;
 $PredCoef_Q12 = $PredCoef_Q12 | 0;
 $LTPCoef_Q14 = $LTPCoef_Q14 | 0;
 $AR_Q13 = $AR_Q13 | 0;
 $HarmShapeGain_Q14 = $HarmShapeGain_Q14 | 0;
 $Tilt_Q14 = $Tilt_Q14 | 0;
 $LF_shp_Q14 = $LF_shp_Q14 | 0;
 $Gains_Q16 = $Gains_Q16 | 0;
 $pitchL = $pitchL | 0;
 $Lambda_Q10 = $Lambda_Q10 | 0;
 $LTP_scale_Q14 = $LTP_scale_Q14 | 0;
 var $$ = 0, $$lcssa140 = 0, $1 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $14 = 0, $145 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, $LTP_pred_Q13$0$i = 0, $add = 0, $add$i = 0, $add$i133$i = 0, $add118$i = 0, $add125$i$i = 0, $add132$i = 0, $add218$i136 = 0, $add219$i = 0, $add234$i = 0, $add26$i$i = 0, $add264$i = 0, $add312$i = 0, $add314$i = 0, $add329$i = 0, $add34$i$i = 0, $add41$i$i = 0, $add89$i = 0, $add9$i$i = 0, $and115$i = 0, $and137$i = 0, $and47$i = 0, $and76$i = 0, $and83$i = 0, $arraydecay$i = 0, $arrayidx1$i = 0, $arrayidx102$i$i = 0, $arrayidx11$i$i = 0, $arrayidx11$i25$i = 0, $arrayidx111$i = 0, $arrayidx115$i$i = 0, $arrayidx129$i$i = 0, $arrayidx142$i$i = 0, $arrayidx155$i$i = 0, $arrayidx168$i$i = 0, $arrayidx170$i = 0, $arrayidx174$1$i = 0, $arrayidx174$10$i = 0, $arrayidx174$11$i = 0, $arrayidx174$12$i = 0, $arrayidx174$13$i = 0, $arrayidx174$14$i = 0, $arrayidx174$2$i = 0, $arrayidx174$3$i = 0, $arrayidx174$4$i = 0, $arrayidx174$5$i = 0, $arrayidx174$6$i = 0, $arrayidx174$7$i = 0, $arrayidx174$8$i = 0, $arrayidx174$9$i = 0, $arrayidx174$i = 0, $arrayidx18 = 0, $arrayidx181$i$i = 0, $arrayidx194$i$i = 0, $arrayidx20 = 0, $arrayidx203$i = 0, $arrayidx21$i = 0, $arrayidx22 = 0, $arrayidx24$i$i = 0, $arrayidx28$i$i = 0, $arrayidx303$i = 0, $arrayidx33 = 0, $arrayidx34$i = 0, $arrayidx37$i$i = 0, $arrayidx4$i = 0, $arrayidx44$i$i = 0, $arrayidx47$i = 0, $arrayidx47$i$i = 0, $arrayidx50$i$i = 0, $arrayidx60$i = 0, $arrayidx63$i$i = 0, $arrayidx72$i = 0, $arrayidx76$i$i = 0, $arrayidx78 = 0, $arrayidx83 = 0, $arrayidx89 = 0, $arrayidx89$i$i = 0, $call120$i = 0, $call64139$i = 0, $cmp$i$i93 = 0, $cmp1$i$i = 0, $cmp119$i = 0, $cmp188$i = 0, $cmp295$i = 0, $cmp35$i$i = 0, $cmp44$i$i = 0, $cmp7$i = 0, $cmp72$i = 0, $cond$i = 0, $cond185$i = 0, $conv$i = 0, $conv$i$i = 0, $conv$i116 = 0, $conv$i21$i = 0, $conv103$i$i = 0, $conv113$i = 0, $conv116$i$i = 0, $conv12$i$i = 0, $conv12$i$i102 = 0, $conv130$i$i = 0, $conv135$i = 0, $conv135$i97 = 0, $conv143$i$i = 0, $conv153$i = 0, $conv156$i$i = 0, $conv169$i$i = 0, $conv17$i$i124 = 0, $conv176$1$i = 0, $conv176$10$i = 0, $conv176$11$i = 0, $conv176$12$i = 0, $conv176$13$i = 0, $conv176$14$i = 0, $conv176$15$i = 0, $conv176$2$i = 0, $conv176$3$i = 0, $conv176$4$i = 0, $conv176$5$i = 0, $conv176$6$i = 0, $conv176$7$i = 0, $conv176$8$i = 0, $conv176$9$i = 0, $conv176$i = 0, $conv182$i$i = 0, $conv195$i$i = 0, $conv205$i = 0, $conv22$i = 0, $conv223$i = 0, $conv25$i$i = 0, $conv283$i = 0, $conv29$i = 0, $conv290$i = 0, $conv3 = 0, $conv317$i = 0, $conv33$i$i = 0, $conv35$i = 0, $conv38$i$i = 0, $conv4$i$i = 0, $conv45$i = 0, $conv48$i = 0, $conv48$i$i = 0, $conv51$i$i = 0, $conv61$i = 0, $conv64$i$i = 0, $conv74$i = 0, $conv77$i$i = 0, $conv8$i = 0, $conv80$i = 0, $conv90$i$i = 0, $conv96$i = 0, $div$i$i = 0, $div31$i = 0, $frame_length = 0, $i$0149$i = 0, $i$036$i = 0, $i$1147$i = 0, $i$2145$i = 0, $i$3143$i = 0, $i$5140$i = 0, $inc = 0, $inv_gain_Q31$0$i = 0, $j$04$i$i = 0, $k$0146 = 0, $lag$0145 = 0, $lag$1 = 0, $lagPrev = 0, $ltp_mem_length = 0, $mul$i$i100 = 0, $mul104$i$i = 0, $mul11$i = 0, $mul13$i$i = 0, $mul131$i$i = 0, $mul136$i131 = 0, $mul144$i$i = 0, $mul157$i$i = 0, $mul170$i$i = 0, $mul18$i26$i = 0, $mul183$i$i = 0, $mul23$i = 0, $mul239$i = 0, $mul244$i = 0, $mul255$i = 0, $mul26$i$i = 0, $mul36$i = 0, $mul39$i$i = 0, $mul49$i = 0, $mul52$i$i = 0, $mul65$i$i = 0, $mul78$i$i = 0, $mul85 = 0, $mul91 = 0, $mul91$i$i = 0, $nb_subfr = 0, $or$cond$i = 0, $or27 = 0, $out$0$i$i = 0, $out$0$lcssa$i$i = 0, $out$02$i$i = 0, $pred_lag_ptr$035$i = 0, $pred_lag_ptr$1$i = 0, $predictLPCOrder = 0, $prev_gain_Q16$i = 0, $psLPC_Q14$033$i = 0, $pulses$addr$0149 = 0, $pxq$0147 = 0, $q1_Q0$1$in$i = 0, $q1_Q0$130$i = 0, $q1_Q10$0$i = 0, $q2_Q10$0$i = 0, $rand_seed = 0, $rd1_Q20$0$i = 0, $rd2_Q20$0$i = 0, $rewhite_flag = 0, $sDiff_shp_Q14$i94 = 0, $sDiff_shp_Q14$val$i = 0, $sLF_AR_shp_Q1477$i = 0, $sLPC_Q14$i = 0, $sLTP_buf_idx = 0, $sLTP_shp_Q14 = 0, $sLTP_shp_buf_idx = 0, $shapingLPCOrder = 0, $shl$i$i = 0, $shl$i$i127 = 0, $shl$i125$i = 0, $shl10$i$i = 0, $shl10$i127$i = 0, $shl2$i$i = 0, $shl304$i = 0, $shp_lag_ptr$034$i = 0, $shp_lag_ptr$1$i = 0, $shr$i$i = 0, $shr$i$i92 = 0, $shr$i20$i = 0, $shr110$i = 0, $shr110$i$i = 0, $shr110$i96 = 0, $shr133$i = 0, $shr137$i$i = 0, $shr144$i = 0, $shr148$i = 0, $shr150$i$i = 0, $shr16$i = 0, $shr163$i$i = 0, $shr176$i$i = 0, $shr189$i$i = 0, $shr19$i$i105 = 0, $shr20$i = 0, $shr24 = 0, $shr24$i$i125 = 0, $shr29$i = 0, $shr32$i$i = 0, $shr32$i$i$shr34$i$i = 0, $shr32$i$i108 = 0, $shr327$i = 0, $shr34$i$i = 0, $shr34$i$i$shr32$i$i = 0, $shr41$i$i = 0, $shr41$i$i$shr43$i$i = 0, $shr42$i = 0, $shr43$i = 0, $shr43$i$i = 0, $shr43$i$i$shr41$i$i = 0, $shr45$i$i = 0, $shr55$i = 0, $shr58$i$i = 0, $shr7$i$i = 0, $shr71$i = 0, $shr71$i$i = 0, $shr78$i = 0, $shr84$i$i = 0, $shr97$i$i = 0, $signalType = 0, $spec$select$i = 0, $spec$select$i135 = 0, $spec$select18$i = 0, $sub = 0, $sub$i$i123 = 0, $sub104$i = 0, $sub126$i = 0, $sub171$i = 0, $sub186$i = 0, $sub191$i = 0, $sub198$i = 0, $sub217$i = 0, $sub23$i$i = 0, $sub249$i = 0, $sub266$i = 0, $sub27$i$i = 0, $sub31$i$i = 0, $sub35 = 0, $sub36$i$i = 0, $sub37$i = 0, $sub386$i = 0, $sub390$i = 0, $sub40$i$i = 0, $sub41 = 0, $sub42 = 0, $sub43$i$i = 0, $sub77 = 0, $subfr_length = 0, $tmp1$0$in$in$i = 0, $tmp1$0$lcssa$i$i = 0, $tmp1$03$i$i = 0, $vla = 0, $vla10 = 0, $vla9 = 0, $x16$addr$0151 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $rand_seed = $NSQ + 4340 | 0;
 HEAP32[$rand_seed >> 2] = HEAP8[$psIndices + 34 >> 0];
 $lagPrev = $NSQ + 4328 | 0;
 $1 = HEAP32[$lagPrev >> 2] | 0;
 $signalType = $psIndices + 29 | 0;
 $2 = HEAP8[$signalType >> 0] | 0;
 $conv3 = HEAP16[47584 + ($2 << 24 >> 24 >> 1 << 2) + (HEAP8[$psIndices + 30 >> 0] << 1) >> 1] | 0;
 $$ = (HEAP8[$psIndices + 31 >> 0] | 0) != 4 & 1;
 $ltp_mem_length = $psEncC + 4592 | 0;
 $6 = HEAP32[$ltp_mem_length >> 2] | 0;
 $frame_length = $psEncC + 4584 | 0;
 $7 = HEAP32[$frame_length >> 2] | 0;
 $add = $7 + $6 | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add << 2) | 0) + 15 & -16) | 0;
 $vla9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add << 1) | 0) + 15 & -16) | 0;
 $subfr_length = $psEncC + 4588 | 0;
 $8 = HEAP32[$subfr_length >> 2] | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($8 << 2) | 0) + 15 & -16) | 0;
 $sLTP_shp_buf_idx = $NSQ + 4336 | 0;
 HEAP32[$sLTP_shp_buf_idx >> 2] = $6;
 $sLTP_buf_idx = $NSQ + 4332 | 0;
 HEAP32[$sLTP_buf_idx >> 2] = $6;
 $nb_subfr = $psEncC + 4580 | 0;
 $9 = HEAP32[$nb_subfr >> 2] | 0;
 if (($9 | 0) <= 0) {
  $$lcssa140 = $9;
  $152 = $7;
  $153 = $6;
  $sub77 = $$lcssa140 + -1 | 0;
  $arrayidx78 = $pitchL + ($sub77 << 2) | 0;
  $151 = HEAP32[$arrayidx78 >> 2] | 0;
  HEAP32[$lagPrev >> 2] = $151;
  $arrayidx83 = $NSQ + ($152 << 1) | 0;
  $mul85 = $153 << 1;
  _memmove($NSQ | 0, $arrayidx83 | 0, $mul85 | 0) | 0;
  $sLTP_shp_Q14 = $NSQ + 1280 | 0;
  $154 = HEAP32[$frame_length >> 2] | 0;
  $arrayidx89 = $NSQ + 1280 + ($154 << 2) | 0;
  $155 = HEAP32[$ltp_mem_length >> 2] | 0;
  $mul91 = $155 << 2;
  _memmove($sLTP_shp_Q14 | 0, $arrayidx89 | 0, $mul91 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $sub = $$ ^ 1;
 $rewhite_flag = $NSQ + 4348 | 0;
 $sub35 = $$ << 1 ^ 3;
 $predictLPCOrder = $psEncC + 4640 | 0;
 $prev_gain_Q16$i = $NSQ + 4344 | 0;
 $shapingLPCOrder = $psEncC + 4636 | 0;
 $sLPC_Q14$i = $NSQ + 3840 | 0;
 $conv29$i = $LTP_scale_Q14 << 16 >> 16;
 $arrayidx4$i = $NSQ + 3900 | 0;
 $sDiff_shp_Q14$i94 = $NSQ + 4324 | 0;
 $arraydecay$i = $NSQ + 4224 | 0;
 $sLF_AR_shp_Q1477$i = $NSQ + 4320 | 0;
 $cmp188$i = ($Lambda_Q10 | 0) > 2048;
 $div31$i = $Lambda_Q10 >>> 1;
 $sub191$i = $div31$i + -512 | 0;
 $sub198$i = 512 - $div31$i | 0;
 $sub217$i = $conv3 + -80 | 0;
 $conv223$i = $Lambda_Q10 << 16 >> 16;
 $add234$i = $conv3 + 944 | 0;
 $mul239$i = Math_imul($conv223$i, $conv3) | 0;
 $mul244$i = Math_imul($add234$i << 16 >> 16, $conv223$i) | 0;
 $sub249$i = $conv3 + -944 | 0;
 $mul255$i = Math_imul(61865984 - ($conv3 << 16) >> 16, $conv223$i) | 0;
 $arrayidx174$i = $NSQ + 3840 | 0;
 $arrayidx174$1$i = $NSQ + 3844 | 0;
 $arrayidx174$2$i = $NSQ + 3848 | 0;
 $arrayidx174$3$i = $NSQ + 3852 | 0;
 $arrayidx174$4$i = $NSQ + 3856 | 0;
 $arrayidx174$5$i = $NSQ + 3860 | 0;
 $arrayidx174$6$i = $NSQ + 3864 | 0;
 $arrayidx174$7$i = $NSQ + 3868 | 0;
 $arrayidx174$8$i = $NSQ + 3872 | 0;
 $arrayidx174$9$i = $NSQ + 3876 | 0;
 $arrayidx174$10$i = $NSQ + 3880 | 0;
 $arrayidx174$11$i = $NSQ + 3884 | 0;
 $arrayidx174$12$i = $NSQ + 3888 | 0;
 $arrayidx174$13$i = $NSQ + 3892 | 0;
 $arrayidx174$14$i = $NSQ + 3896 | 0;
 $13 = $2;
 $17 = $8;
 $k$0146 = 0;
 $lag$0145 = $1;
 $pulses$addr$0149 = $pulses;
 $pxq$0147 = $NSQ + ($6 << 1) | 0;
 $x16$addr$0151 = $x16;
 L4 : while (1) {
  $arrayidx18 = $PredCoef_Q12 + (($k$0146 >>> 1 | $sub) << 4 << 1) | 0;
  $arrayidx20 = $LTPCoef_Q14 + ($k$0146 * 5 << 1) | 0;
  $arrayidx22 = $AR_Q13 + ($k$0146 * 24 << 1) | 0;
  $11 = HEAP32[$HarmShapeGain_Q14 + ($k$0146 << 2) >> 2] | 0;
  $shr24 = $11 >> 2;
  $or27 = $shr24 | $11 << 15;
  HEAP32[$rewhite_flag >> 2] = 0;
  $arrayidx33 = $pitchL + ($k$0146 << 2) | 0;
  if ($13 << 24 >> 24 == 2) {
   $14 = HEAP32[$arrayidx33 >> 2] | 0;
   if (!($k$0146 & $sub35)) {
    $15 = HEAP32[$ltp_mem_length >> 2] | 0;
    $16 = HEAP32[$predictLPCOrder >> 2] | 0;
    $sub41 = $15 - $14 - $16 | 0;
    $sub42 = $sub41 + -2 | 0;
    if (($sub41 | 0) <= 2) {
     label = 6;
     break;
    }
    _silk_LPC_analysis_filter($vla9 + ($sub42 << 1) | 0, $NSQ + ((Math_imul($17, $k$0146) | 0) + $sub42 << 1) | 0, $arrayidx18, $15 - $sub42 | 0, $16);
    HEAP32[$rewhite_flag >> 2] = 1;
    HEAP32[$sLTP_buf_idx >> 2] = HEAP32[$ltp_mem_length >> 2];
    $25 = 1;
    $43 = HEAP8[$signalType >> 0] | 0;
    $lag$1 = $14;
   } else {
    $25 = 0;
    $43 = 2;
    $lag$1 = $14;
   }
  } else {
   $25 = 0;
   $43 = $13;
   $lag$1 = $lag$0145;
  }
  $19 = HEAP32[$arrayidx33 >> 2] | 0;
  $arrayidx1$i = $Gains_Q16 + ($k$0146 << 2) | 0;
  $20 = HEAP32[$arrayidx1$i >> 2] | 0;
  $spec$select$i = ($20 | 0) > 1 ? $20 : 1;
  $21 = Math_clz32((($spec$select$i | 0) > 0 ? $spec$select$i : 0 - $spec$select$i | 0) | 0) | 0;
  $shl$i$i = $spec$select$i << $21 + -1;
  $shr$i$i = $shl$i$i >> 16;
  $div$i$i = 536870911 / ($shr$i$i | 0) | 0;
  $shl2$i$i = $div$i$i << 16;
  $conv4$i$i = $shl2$i$i >> 16;
  $shl10$i$i = 0 - (((Math_imul($shl$i$i & 65535, $conv4$i$i) | 0) >> 16) + (Math_imul($shr$i$i, $conv4$i$i) | 0) << 3) | 0;
  $add26$i$i = (Math_imul(($div$i$i >> 15) + 1 >> 1, $shl10$i$i) | 0) + $shl2$i$i + (Math_imul($shl10$i$i >> 16, $conv4$i$i) | 0) + ((Math_imul($shl10$i$i & 65528, $conv4$i$i) | 0) >> 16) | 0;
  $sub27$i$i = 62 - $21 | 0;
  if (($sub27$i$i | 0) < 48) {
   $sub31$i$i = 47 - $sub27$i$i | 0;
   $shr32$i$i = -2147483648 >> $sub31$i$i;
   $shr34$i$i = 2147483647 >>> $sub31$i$i;
   $cmp35$i$i = ($shr32$i$i | 0) > ($shr34$i$i | 0);
   $shr32$i$i$shr34$i$i = $cmp35$i$i ? $shr32$i$i : $shr34$i$i;
   $shr34$i$i$shr32$i$i = $cmp35$i$i ? $shr34$i$i : $shr32$i$i;
   $call120$i = (($add26$i$i | 0) > ($shr32$i$i$shr34$i$i | 0) ? $shr32$i$i$shr34$i$i : ($add26$i$i | 0) < ($shr34$i$i$shr32$i$i | 0) ? $shr34$i$i$shr32$i$i : $add26$i$i) << $sub31$i$i;
  } else $call120$i = ($sub27$i$i | 0) < 79 ? $add26$i$i >> $sub27$i$i + -47 : 0;
  $add$i = ($call120$i >> 4) + 1 | 0;
  $22 = HEAP32[$subfr_length >> 2] | 0;
  if (($22 | 0) > 0) {
   $conv8$i = $add$i >>> 1 << 16 >> 16;
   $shr20$i = ($add$i >> 16) + 1 >> 1;
   $i$0149$i = 0;
   do {
    $conv$i = HEAP16[$x16$addr$0151 + ($i$0149$i << 1) >> 1] | 0;
    HEAP32[$vla10 + ($i$0149$i << 2) >> 2] = (Math_imul($conv$i >> 16, $conv8$i) | 0) + (Math_imul($shr20$i, $conv$i) | 0) + ((Math_imul($conv$i & 65535, $conv8$i) | 0) >> 16);
    $i$0149$i = $i$0149$i + 1 | 0;
   } while (($i$0149$i | 0) != ($22 | 0));
  }
  if ($25 | 0) {
   if (!$k$0146) $inv_gain_Q31$0$i = ((Math_imul($call120$i & 65535, $conv29$i) | 0) >> 16) + (Math_imul($call120$i >> 16, $conv29$i) | 0) << 2; else $inv_gain_Q31$0$i = $call120$i;
   $26 = HEAP32[$sLTP_buf_idx >> 2] | 0;
   $sub37$i = $26 + (-2 - $19) | 0;
   if (($sub37$i | 0) < ($26 | 0)) {
    $shr43$i = $inv_gain_Q31$0$i >> 16;
    $and47$i = $inv_gain_Q31$0$i & 65535;
    $i$1147$i = $sub37$i;
    do {
     $conv45$i = HEAP16[$vla9 + ($i$1147$i << 1) >> 1] | 0;
     HEAP32[$vla + ($i$1147$i << 2) >> 2] = ((Math_imul($and47$i, $conv45$i) | 0) >> 16) + (Math_imul($shr43$i, $conv45$i) | 0);
     $i$1147$i = $i$1147$i + 1 | 0;
    } while (($i$1147$i | 0) != ($26 | 0));
   }
  }
  $28 = HEAP32[$prev_gain_Q16$i >> 2] | 0;
  if (($20 | 0) == ($28 | 0)) {
   $70 = $22;
   $73 = $20;
  } else {
   $29 = Math_clz32((($28 | 0) > 0 ? $28 : 0 - $28 | 0) | 0) | 0;
   $shl$i125$i = $28 << $29 + -1;
   $30 = Math_clz32((($20 | 0) > 0 ? $20 : 0 - $20 | 0) | 0) | 0;
   $shl10$i127$i = $20 << $30 + -1;
   $conv12$i$i = (536870911 / ($shl10$i127$i >> 16 | 0) | 0) << 16 >> 16;
   $add$i133$i = ((Math_imul($conv12$i$i, $shl$i125$i & 65535) | 0) >> 16) + (Math_imul($conv12$i$i, $shl$i125$i >> 16) | 0) | 0;
   $35 = ___muldi3($add$i133$i | 0, (($add$i133$i | 0) < 0) << 31 >> 31 | 0, $shl10$i127$i | 0, (($shl10$i127$i | 0) < 0) << 31 >> 31 | 0) | 0;
   $37 = _bitshift64Lshr($35 | 0, getTempRet0() | 0, 29) | 0;
   getTempRet0() | 0;
   $sub23$i$i = $shl$i125$i - ($37 & -8) | 0;
   $add34$i$i = (Math_imul($sub23$i$i >> 16, $conv12$i$i) | 0) + $add$i133$i + ((Math_imul($sub23$i$i & 65535, $conv12$i$i) | 0) >> 16) | 0;
   $sub36$i$i = 1 - $30 + 28 + $29 | 0;
   if (($sub36$i$i | 0) < 16) {
    $sub40$i$i = 16 - $sub36$i$i | 0;
    $shr41$i$i = -2147483648 >> $sub40$i$i;
    $shr43$i$i = 2147483647 >>> $sub40$i$i;
    $cmp44$i$i = ($shr41$i$i | 0) > ($shr43$i$i | 0);
    $shr41$i$i$shr43$i$i = $cmp44$i$i ? $shr41$i$i : $shr43$i$i;
    $shr43$i$i$shr41$i$i = $cmp44$i$i ? $shr43$i$i : $shr41$i$i;
    $call64139$i = (($add34$i$i | 0) > ($shr41$i$i$shr43$i$i | 0) ? $shr41$i$i$shr43$i$i : ($add34$i$i | 0) < ($shr43$i$i$shr41$i$i | 0) ? $shr43$i$i$shr41$i$i : $add34$i$i) << $sub40$i$i;
   } else $call64139$i = ($sub36$i$i | 0) < 48 ? $add34$i$i >> $sub36$i$i + -16 : 0;
   $39 = HEAP32[$ltp_mem_length >> 2] | 0;
   if (($39 | 0) > 0) {
    $shr71$i = $call64139$i >> 16;
    $and76$i = $call64139$i & 65535;
    $i$2145$i = (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) - $39 | 0;
    do {
     $arrayidx72$i = $NSQ + 1280 + ($i$2145$i << 2) | 0;
     $41 = HEAP32[$arrayidx72$i >> 2] | 0;
     $conv74$i = $41 << 16 >> 16;
     HEAP32[$arrayidx72$i >> 2] = ((Math_imul($conv74$i, $and76$i) | 0) >> 16) + (Math_imul($conv74$i, $shr71$i) | 0) + (Math_imul(($41 >> 15) + 1 >> 1, $call64139$i) | 0);
     $i$2145$i = $i$2145$i + 1 | 0;
    } while (($i$2145$i | 0) < (HEAP32[$sLTP_shp_buf_idx >> 2] | 0));
   }
   if ($43 << 24 >> 24 == 2) if (!(HEAP32[$rewhite_flag >> 2] | 0)) {
    $45 = HEAP32[$sLTP_buf_idx >> 2] | 0;
    $sub104$i = $45 + (-2 - $19) | 0;
    if (($sub104$i | 0) < ($45 | 0)) {
     $shr110$i = $call64139$i >> 16;
     $and115$i = $call64139$i & 65535;
     $i$3143$i = $sub104$i;
     do {
      $arrayidx111$i = $vla + ($i$3143$i << 2) | 0;
      $46 = HEAP32[$arrayidx111$i >> 2] | 0;
      $conv113$i = $46 << 16 >> 16;
      HEAP32[$arrayidx111$i >> 2] = ((Math_imul($conv113$i, $and115$i) | 0) >> 16) + (Math_imul($conv113$i, $shr110$i) | 0) + (Math_imul(($46 >> 15) + 1 >> 1, $call64139$i) | 0);
      $i$3143$i = $i$3143$i + 1 | 0;
     } while (($i$3143$i | 0) != ($45 | 0));
    }
   }
   $shr133$i = $call64139$i >> 16;
   $47 = HEAP32[$sLF_AR_shp_Q1477$i >> 2] | 0;
   $conv135$i = $47 << 16 >> 16;
   $and137$i = $call64139$i & 65535;
   HEAP32[$sLF_AR_shp_Q1477$i >> 2] = ((Math_imul($conv135$i, $and137$i) | 0) >> 16) + (Math_imul($conv135$i, $shr133$i) | 0) + (Math_imul(($47 >> 15) + 1 >> 1, $call64139$i) | 0);
   $48 = HEAP32[$sDiff_shp_Q14$i94 >> 2] | 0;
   $conv153$i = $48 << 16 >> 16;
   HEAP32[$sDiff_shp_Q14$i94 >> 2] = ((Math_imul($conv153$i, $and137$i) | 0) >> 16) + (Math_imul($conv153$i, $shr133$i) | 0) + (Math_imul(($48 >> 15) + 1 >> 1, $call64139$i) | 0);
   $49 = HEAP32[$arrayidx174$i >> 2] | 0;
   $conv176$i = $49 << 16 >> 16;
   HEAP32[$arrayidx174$i >> 2] = ((Math_imul($conv176$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$i, $shr133$i) | 0) + (Math_imul(($49 >> 15) + 1 >> 1, $call64139$i) | 0);
   $50 = HEAP32[$arrayidx174$1$i >> 2] | 0;
   $conv176$1$i = $50 << 16 >> 16;
   HEAP32[$arrayidx174$1$i >> 2] = ((Math_imul($conv176$1$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$1$i, $shr133$i) | 0) + (Math_imul(($50 >> 15) + 1 >> 1, $call64139$i) | 0);
   $51 = HEAP32[$arrayidx174$2$i >> 2] | 0;
   $conv176$2$i = $51 << 16 >> 16;
   HEAP32[$arrayidx174$2$i >> 2] = ((Math_imul($conv176$2$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$2$i, $shr133$i) | 0) + (Math_imul(($51 >> 15) + 1 >> 1, $call64139$i) | 0);
   $52 = HEAP32[$arrayidx174$3$i >> 2] | 0;
   $conv176$3$i = $52 << 16 >> 16;
   HEAP32[$arrayidx174$3$i >> 2] = ((Math_imul($conv176$3$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$3$i, $shr133$i) | 0) + (Math_imul(($52 >> 15) + 1 >> 1, $call64139$i) | 0);
   $53 = HEAP32[$arrayidx174$4$i >> 2] | 0;
   $conv176$4$i = $53 << 16 >> 16;
   HEAP32[$arrayidx174$4$i >> 2] = ((Math_imul($conv176$4$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$4$i, $shr133$i) | 0) + (Math_imul(($53 >> 15) + 1 >> 1, $call64139$i) | 0);
   $54 = HEAP32[$arrayidx174$5$i >> 2] | 0;
   $conv176$5$i = $54 << 16 >> 16;
   HEAP32[$arrayidx174$5$i >> 2] = ((Math_imul($conv176$5$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$5$i, $shr133$i) | 0) + (Math_imul(($54 >> 15) + 1 >> 1, $call64139$i) | 0);
   $55 = HEAP32[$arrayidx174$6$i >> 2] | 0;
   $conv176$6$i = $55 << 16 >> 16;
   HEAP32[$arrayidx174$6$i >> 2] = ((Math_imul($conv176$6$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$6$i, $shr133$i) | 0) + (Math_imul(($55 >> 15) + 1 >> 1, $call64139$i) | 0);
   $56 = HEAP32[$arrayidx174$7$i >> 2] | 0;
   $conv176$7$i = $56 << 16 >> 16;
   HEAP32[$arrayidx174$7$i >> 2] = ((Math_imul($conv176$7$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$7$i, $shr133$i) | 0) + (Math_imul(($56 >> 15) + 1 >> 1, $call64139$i) | 0);
   $57 = HEAP32[$arrayidx174$8$i >> 2] | 0;
   $conv176$8$i = $57 << 16 >> 16;
   HEAP32[$arrayidx174$8$i >> 2] = ((Math_imul($conv176$8$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$8$i, $shr133$i) | 0) + (Math_imul(($57 >> 15) + 1 >> 1, $call64139$i) | 0);
   $58 = HEAP32[$arrayidx174$9$i >> 2] | 0;
   $conv176$9$i = $58 << 16 >> 16;
   HEAP32[$arrayidx174$9$i >> 2] = ((Math_imul($conv176$9$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$9$i, $shr133$i) | 0) + (Math_imul(($58 >> 15) + 1 >> 1, $call64139$i) | 0);
   $59 = HEAP32[$arrayidx174$10$i >> 2] | 0;
   $conv176$10$i = $59 << 16 >> 16;
   HEAP32[$arrayidx174$10$i >> 2] = ((Math_imul($conv176$10$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$10$i, $shr133$i) | 0) + (Math_imul(($59 >> 15) + 1 >> 1, $call64139$i) | 0);
   $60 = HEAP32[$arrayidx174$11$i >> 2] | 0;
   $conv176$11$i = $60 << 16 >> 16;
   HEAP32[$arrayidx174$11$i >> 2] = ((Math_imul($conv176$11$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$11$i, $shr133$i) | 0) + (Math_imul(($60 >> 15) + 1 >> 1, $call64139$i) | 0);
   $61 = HEAP32[$arrayidx174$12$i >> 2] | 0;
   $conv176$12$i = $61 << 16 >> 16;
   HEAP32[$arrayidx174$12$i >> 2] = ((Math_imul($conv176$12$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$12$i, $shr133$i) | 0) + (Math_imul(($61 >> 15) + 1 >> 1, $call64139$i) | 0);
   $62 = HEAP32[$arrayidx174$13$i >> 2] | 0;
   $conv176$13$i = $62 << 16 >> 16;
   HEAP32[$arrayidx174$13$i >> 2] = ((Math_imul($conv176$13$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$13$i, $shr133$i) | 0) + (Math_imul(($62 >> 15) + 1 >> 1, $call64139$i) | 0);
   $63 = HEAP32[$arrayidx174$14$i >> 2] | 0;
   $conv176$14$i = $63 << 16 >> 16;
   HEAP32[$arrayidx174$14$i >> 2] = ((Math_imul($conv176$14$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$14$i, $shr133$i) | 0) + (Math_imul(($63 >> 15) + 1 >> 1, $call64139$i) | 0);
   $64 = HEAP32[$arrayidx4$i >> 2] | 0;
   $conv176$15$i = $64 << 16 >> 16;
   HEAP32[$arrayidx4$i >> 2] = ((Math_imul($conv176$15$i, $and137$i) | 0) >> 16) + (Math_imul($conv176$15$i, $shr133$i) | 0) + (Math_imul(($64 >> 15) + 1 >> 1, $call64139$i) | 0);
   $i$5140$i = 0;
   do {
    $arrayidx203$i = $NSQ + 4224 + ($i$5140$i << 2) | 0;
    $65 = HEAP32[$arrayidx203$i >> 2] | 0;
    $conv205$i = $65 << 16 >> 16;
    HEAP32[$arrayidx203$i >> 2] = ((Math_imul($conv205$i, $and137$i) | 0) >> 16) + (Math_imul($conv205$i, $shr133$i) | 0) + (Math_imul(($65 >> 15) + 1 >> 1, $call64139$i) | 0);
    $i$5140$i = $i$5140$i + 1 | 0;
   } while (($i$5140$i | 0) != 24);
   HEAP32[$prev_gain_Q16$i >> 2] = HEAP32[$arrayidx1$i >> 2];
   $70 = HEAP32[$subfr_length >> 2] | 0;
   $73 = HEAP32[$arrayidx1$i >> 2] | 0;
  }
  $67 = HEAP32[$LF_shp_Q14 + ($k$0146 << 2) >> 2] | 0;
  $68 = HEAP32[$shapingLPCOrder >> 2] | 0;
  $69 = HEAP32[$predictLPCOrder >> 2] | 0;
  if (($70 | 0) > 0) {
   $shr$i$i92 = $69 >> 1;
   $arrayidx11$i$i = $arrayidx18 + 2 | 0;
   $arrayidx24$i$i = $arrayidx18 + 4 | 0;
   $arrayidx37$i$i = $arrayidx18 + 6 | 0;
   $arrayidx50$i$i = $arrayidx18 + 8 | 0;
   $arrayidx63$i$i = $arrayidx18 + 10 | 0;
   $arrayidx76$i$i = $arrayidx18 + 12 | 0;
   $arrayidx89$i$i = $arrayidx18 + 14 | 0;
   $arrayidx102$i$i = $arrayidx18 + 16 | 0;
   $arrayidx115$i$i = $arrayidx18 + 18 | 0;
   $cmp$i$i93 = ($69 | 0) == 16;
   $arrayidx129$i$i = $arrayidx18 + 20 | 0;
   $arrayidx142$i$i = $arrayidx18 + 22 | 0;
   $arrayidx155$i$i = $arrayidx18 + 24 | 0;
   $arrayidx168$i$i = $arrayidx18 + 26 | 0;
   $arrayidx181$i$i = $arrayidx18 + 28 | 0;
   $arrayidx194$i$i = $arrayidx18 + 30 | 0;
   $cmp7$i = $43 << 24 >> 24 == 2;
   $arrayidx21$i = $arrayidx20 + 2 | 0;
   $arrayidx34$i = $arrayidx20 + 4 | 0;
   $arrayidx47$i = $arrayidx20 + 6 | 0;
   $arrayidx60$i = $arrayidx20 + 8 | 0;
   $cmp72$i = ($68 & 1 | 0) == 0;
   $shr$i20$i = $68 >> 1;
   $cmp1$i$i = ($68 | 0) > 2;
   $sub43$i$i = $68 + -1 | 0;
   $arrayidx44$i$i = $NSQ + 4224 + ($sub43$i$i << 2) | 0;
   $arrayidx47$i$i = $arrayidx22 + ($sub43$i$i << 1) | 0;
   $conv80$i = HEAP32[$Tilt_Q14 + ($k$0146 << 2) >> 2] << 16 >> 16;
   $conv96$i = $67 << 16 >> 16;
   $shr110$i96 = $67 >> 16;
   $cmp119$i = ($lag$1 | 0) > 0;
   $or$cond$i = $cmp119$i | $43 << 24 >> 24 != 2;
   $conv135$i97 = $shr24 << 16 >> 16;
   $shr148$i = $or27 >> 16;
   $conv317$i = $73 >>> 6 << 16 >> 16;
   $shr327$i = ($73 >> 21) + 1 >> 1;
   $76 = HEAP32[$rand_seed >> 2] | 0;
   $i$036$i = 0;
   $pred_lag_ptr$035$i = $vla + (2 - $lag$1 + (HEAP32[$sLTP_buf_idx >> 2] | 0) << 2) | 0;
   $psLPC_Q14$033$i = $arrayidx4$i;
   $shp_lag_ptr$034$i = $NSQ + 1280 + (1 - $lag$1 + (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) << 2) | 0;
   while (1) {
    HEAP32[$rand_seed >> 2] = (Math_imul($76, 196314165) | 0) + 907633515;
    $77 = HEAP32[$psLPC_Q14$033$i >> 2] | 0;
    $conv$i$i = HEAP16[$arrayidx18 >> 1] | 0;
    $mul$i$i100 = Math_imul($77 >> 16, $conv$i$i) | 0;
    $shr7$i$i = (Math_imul($77 & 65535, $conv$i$i) | 0) >> 16;
    $79 = HEAP32[$psLPC_Q14$033$i + -4 >> 2] | 0;
    $conv12$i$i102 = HEAP16[$arrayidx11$i$i >> 1] | 0;
    $mul13$i$i = Math_imul($79 >> 16, $conv12$i$i102) | 0;
    $shr19$i$i105 = (Math_imul($79 & 65535, $conv12$i$i102) | 0) >> 16;
    $81 = HEAP32[$psLPC_Q14$033$i + -8 >> 2] | 0;
    $conv25$i$i = HEAP16[$arrayidx24$i$i >> 1] | 0;
    $mul26$i$i = Math_imul($81 >> 16, $conv25$i$i) | 0;
    $shr32$i$i108 = (Math_imul($81 & 65535, $conv25$i$i) | 0) >> 16;
    $83 = HEAP32[$psLPC_Q14$033$i + -12 >> 2] | 0;
    $conv38$i$i = HEAP16[$arrayidx37$i$i >> 1] | 0;
    $mul39$i$i = Math_imul($83 >> 16, $conv38$i$i) | 0;
    $shr45$i$i = (Math_imul($83 & 65535, $conv38$i$i) | 0) >> 16;
    $85 = HEAP32[$psLPC_Q14$033$i + -16 >> 2] | 0;
    $conv51$i$i = HEAP16[$arrayidx50$i$i >> 1] | 0;
    $mul52$i$i = Math_imul($85 >> 16, $conv51$i$i) | 0;
    $shr58$i$i = (Math_imul($85 & 65535, $conv51$i$i) | 0) >> 16;
    $87 = HEAP32[$psLPC_Q14$033$i + -20 >> 2] | 0;
    $conv64$i$i = HEAP16[$arrayidx63$i$i >> 1] | 0;
    $mul65$i$i = Math_imul($87 >> 16, $conv64$i$i) | 0;
    $shr71$i$i = (Math_imul($87 & 65535, $conv64$i$i) | 0) >> 16;
    $89 = HEAP32[$psLPC_Q14$033$i + -24 >> 2] | 0;
    $conv77$i$i = HEAP16[$arrayidx76$i$i >> 1] | 0;
    $mul78$i$i = Math_imul($89 >> 16, $conv77$i$i) | 0;
    $shr84$i$i = (Math_imul($89 & 65535, $conv77$i$i) | 0) >> 16;
    $91 = HEAP32[$psLPC_Q14$033$i + -28 >> 2] | 0;
    $conv90$i$i = HEAP16[$arrayidx89$i$i >> 1] | 0;
    $mul91$i$i = Math_imul($91 >> 16, $conv90$i$i) | 0;
    $shr97$i$i = (Math_imul($91 & 65535, $conv90$i$i) | 0) >> 16;
    $93 = HEAP32[$psLPC_Q14$033$i + -32 >> 2] | 0;
    $conv103$i$i = HEAP16[$arrayidx102$i$i >> 1] | 0;
    $mul104$i$i = Math_imul($93 >> 16, $conv103$i$i) | 0;
    $shr110$i$i = (Math_imul($93 & 65535, $conv103$i$i) | 0) >> 16;
    $95 = HEAP32[$psLPC_Q14$033$i + -36 >> 2] | 0;
    $conv116$i$i = HEAP16[$arrayidx115$i$i >> 1] | 0;
    $add125$i$i = $mul$i$i100 + $shr$i$i92 + $shr7$i$i + $mul13$i$i + $shr19$i$i105 + $mul26$i$i + $shr32$i$i108 + $mul39$i$i + $shr45$i$i + $mul52$i$i + $shr58$i$i + $mul65$i$i + $shr71$i$i + $mul78$i$i + $shr84$i$i + $mul91$i$i + $shr97$i$i + $mul104$i$i + $shr110$i$i + (Math_imul($95 >> 16, $conv116$i$i) | 0) + ((Math_imul($95 & 65535, $conv116$i$i) | 0) >> 16) | 0;
    if ($cmp$i$i93) {
     $97 = HEAP32[$psLPC_Q14$033$i + -40 >> 2] | 0;
     $conv130$i$i = HEAP16[$arrayidx129$i$i >> 1] | 0;
     $mul131$i$i = Math_imul($97 >> 16, $conv130$i$i) | 0;
     $shr137$i$i = (Math_imul($97 & 65535, $conv130$i$i) | 0) >> 16;
     $99 = HEAP32[$psLPC_Q14$033$i + -44 >> 2] | 0;
     $conv143$i$i = HEAP16[$arrayidx142$i$i >> 1] | 0;
     $mul144$i$i = Math_imul($99 >> 16, $conv143$i$i) | 0;
     $shr150$i$i = (Math_imul($99 & 65535, $conv143$i$i) | 0) >> 16;
     $101 = HEAP32[$psLPC_Q14$033$i + -48 >> 2] | 0;
     $conv156$i$i = HEAP16[$arrayidx155$i$i >> 1] | 0;
     $mul157$i$i = Math_imul($101 >> 16, $conv156$i$i) | 0;
     $shr163$i$i = (Math_imul($101 & 65535, $conv156$i$i) | 0) >> 16;
     $103 = HEAP32[$psLPC_Q14$033$i + -52 >> 2] | 0;
     $conv169$i$i = HEAP16[$arrayidx168$i$i >> 1] | 0;
     $mul170$i$i = Math_imul($103 >> 16, $conv169$i$i) | 0;
     $shr176$i$i = (Math_imul($103 & 65535, $conv169$i$i) | 0) >> 16;
     $105 = HEAP32[$psLPC_Q14$033$i + -56 >> 2] | 0;
     $conv182$i$i = HEAP16[$arrayidx181$i$i >> 1] | 0;
     $mul183$i$i = Math_imul($105 >> 16, $conv182$i$i) | 0;
     $shr189$i$i = (Math_imul($105 & 65535, $conv182$i$i) | 0) >> 16;
     $107 = HEAP32[$psLPC_Q14$033$i + -60 >> 2] | 0;
     $conv195$i$i = HEAP16[$arrayidx194$i$i >> 1] | 0;
     $out$0$i$i = $mul131$i$i + $add125$i$i + $shr137$i$i + $mul144$i$i + $shr150$i$i + $mul157$i$i + $shr163$i$i + $mul170$i$i + $shr176$i$i + $mul183$i$i + $shr189$i$i + (Math_imul($107 >> 16, $conv195$i$i) | 0) + ((Math_imul($107 & 65535, $conv195$i$i) | 0) >> 16) | 0;
    } else $out$0$i$i = $add125$i$i;
    if ($cmp7$i) {
     $109 = HEAP32[$pred_lag_ptr$035$i >> 2] | 0;
     $conv$i116 = HEAP16[$arrayidx20 >> 1] | 0;
     $mul11$i = Math_imul($109 >> 16, $conv$i116) | 0;
     $shr16$i = (Math_imul($109 & 65535, $conv$i116) | 0) >> 16;
     $111 = HEAP32[$pred_lag_ptr$035$i + -4 >> 2] | 0;
     $conv22$i = HEAP16[$arrayidx21$i >> 1] | 0;
     $mul23$i = Math_imul($111 >> 16, $conv22$i) | 0;
     $shr29$i = (Math_imul($111 & 65535, $conv22$i) | 0) >> 16;
     $113 = HEAP32[$pred_lag_ptr$035$i + -8 >> 2] | 0;
     $conv35$i = HEAP16[$arrayidx34$i >> 1] | 0;
     $mul36$i = Math_imul($113 >> 16, $conv35$i) | 0;
     $shr42$i = (Math_imul($113 & 65535, $conv35$i) | 0) >> 16;
     $115 = HEAP32[$pred_lag_ptr$035$i + -12 >> 2] | 0;
     $conv48$i = HEAP16[$arrayidx47$i >> 1] | 0;
     $mul49$i = Math_imul($115 >> 16, $conv48$i) | 0;
     $shr55$i = (Math_imul($115 & 65535, $conv48$i) | 0) >> 16;
     $117 = HEAP32[$pred_lag_ptr$035$i + -16 >> 2] | 0;
     $conv61$i = HEAP16[$arrayidx60$i >> 1] | 0;
     $LTP_pred_Q13$0$i = $mul11$i + 2 + $shr16$i + $mul23$i + $shr29$i + $mul36$i + $shr42$i + $mul49$i + $shr55$i + (Math_imul($117 >> 16, $conv61$i) | 0) + ((Math_imul($117 & 65535, $conv61$i) | 0) >> 16) | 0;
     $pred_lag_ptr$1$i = $pred_lag_ptr$035$i + 4 | 0;
    } else {
     $LTP_pred_Q13$0$i = 0;
     $pred_lag_ptr$1$i = $pred_lag_ptr$035$i;
    }
    if (!$cmp72$i) {
     label = 42;
     break L4;
    }
    $sDiff_shp_Q14$val$i = HEAP32[$sDiff_shp_Q14$i94 >> 2] | 0;
    $119 = HEAP32[$arraydecay$i >> 2] | 0;
    HEAP32[$arraydecay$i >> 2] = $sDiff_shp_Q14$val$i;
    $conv$i21$i = HEAP16[$arrayidx22 >> 1] | 0;
    $add9$i$i = (Math_imul($sDiff_shp_Q14$val$i >> 16, $conv$i21$i) | 0) + $shr$i20$i + ((Math_imul($sDiff_shp_Q14$val$i & 65535, $conv$i21$i) | 0) >> 16) | 0;
    if ($cmp1$i$i) {
     $j$04$i$i = 2;
     $out$02$i$i = $add9$i$i;
     $tmp1$03$i$i = $119;
     while (1) {
      $sub$i$i123 = $j$04$i$i + -1 | 0;
      $arrayidx11$i25$i = $NSQ + 4224 + ($sub$i$i123 << 2) | 0;
      $121 = HEAP32[$arrayidx11$i25$i >> 2] | 0;
      HEAP32[$arrayidx11$i25$i >> 2] = $tmp1$03$i$i;
      $conv17$i$i124 = HEAP16[$arrayidx22 + ($sub$i$i123 << 1) >> 1] | 0;
      $mul18$i26$i = Math_imul($tmp1$03$i$i >> 16, $conv17$i$i124) | 0;
      $shr24$i$i125 = (Math_imul($tmp1$03$i$i & 65535, $conv17$i$i124) | 0) >> 16;
      $arrayidx28$i$i = $NSQ + 4224 + ($j$04$i$i << 2) | 0;
      $123 = HEAP32[$arrayidx28$i$i >> 2] | 0;
      HEAP32[$arrayidx28$i$i >> 2] = $121;
      $conv33$i$i = HEAP16[$arrayidx22 + ($j$04$i$i << 1) >> 1] | 0;
      $add41$i$i = $mul18$i26$i + $out$02$i$i + $shr24$i$i125 + (Math_imul($121 >> 16, $conv33$i$i) | 0) + ((Math_imul($121 & 65535, $conv33$i$i) | 0) >> 16) | 0;
      $j$04$i$i = $j$04$i$i + 2 | 0;
      if (($j$04$i$i | 0) >= ($68 | 0)) {
       $out$0$lcssa$i$i = $add41$i$i;
       $tmp1$0$lcssa$i$i = $123;
       break;
      } else {
       $out$02$i$i = $add41$i$i;
       $tmp1$03$i$i = $123;
      }
     }
    } else {
     $out$0$lcssa$i$i = $add9$i$i;
     $tmp1$0$lcssa$i$i = $119;
    }
    HEAP32[$arrayidx44$i$i >> 2] = $tmp1$0$lcssa$i$i;
    $conv48$i$i = HEAP16[$arrayidx47$i$i >> 1] | 0;
    $shl$i$i127 = (Math_imul($tmp1$0$lcssa$i$i >> 16, $conv48$i$i) | 0) + $out$0$lcssa$i$i + ((Math_imul($tmp1$0$lcssa$i$i & 65535, $conv48$i$i) | 0) >> 16) << 1;
    $126 = HEAP32[$sLF_AR_shp_Q1477$i >> 2] | 0;
    $shr78$i = $126 >> 16;
    $and83$i = $126 & 65535;
    $add89$i = ((Math_imul($and83$i, $conv80$i) | 0) >> 16) + (Math_imul($shr78$i, $conv80$i) | 0) + $shl$i$i127 | 0;
    $128 = HEAP32[$NSQ + 1280 + ((HEAP32[$sLTP_shp_buf_idx >> 2] | 0) + -1 << 2) >> 2] | 0;
    $add118$i = ((Math_imul($and83$i, $shr110$i96) | 0) >> 16) + (Math_imul($shr78$i, $shr110$i96) | 0) + (Math_imul($128 >> 16, $conv96$i) | 0) + ((Math_imul($128 & 65535, $conv96$i) | 0) >> 16) | 0;
    if (!$or$cond$i) {
     label = 47;
     break L4;
    }
    $sub126$i = ($out$0$i$i << 2) - $add89$i - $add118$i | 0;
    if ($cmp119$i) {
     $add132$i = (HEAP32[$shp_lag_ptr$034$i + -8 >> 2] | 0) + (HEAP32[$shp_lag_ptr$034$i >> 2] | 0) | 0;
     $mul136$i131 = Math_imul($add132$i >> 16, $conv135$i97) | 0;
     $shr144$i = (Math_imul($add132$i & 65535, $conv135$i97) | 0) >> 16;
     $131 = HEAP32[$shp_lag_ptr$034$i + -4 >> 2] | 0;
     $shp_lag_ptr$1$i = $shp_lag_ptr$034$i + 4 | 0;
     $tmp1$0$in$in$i = ($sub126$i << 1) + $LTP_pred_Q13$0$i - ((Math_imul($131 >> 16, $shr148$i) | 0) + $mul136$i131 + $shr144$i + ((Math_imul($131 & 65535, $shr148$i) | 0) >> 16) << 1) >> 2;
    } else {
     $shp_lag_ptr$1$i = $shp_lag_ptr$034$i;
     $tmp1$0$in$in$i = $sub126$i >> 1;
    }
    $arrayidx170$i = $vla10 + ($i$036$i << 2) | 0;
    $sub171$i = (HEAP32[$arrayidx170$i >> 2] | 0) - ($tmp1$0$in$in$i + 1 >> 1) | 0;
    $spec$select$i135 = (HEAP32[$rand_seed >> 2] | 0) < 0 ? 0 - $sub171$i | 0 : $sub171$i;
    $cond$i = ($spec$select$i135 | 0) > -31744 ? $spec$select$i135 : -31744;
    $cond185$i = ($cond$i | 0) < 30720 ? $cond$i : 30720;
    $sub186$i = $cond185$i - $conv3 | 0;
    do if ($cmp188$i) {
     if (($sub186$i | 0) > ($sub191$i | 0)) {
      $q1_Q0$1$in$i = $sub186$i - $sub191$i | 0;
      label = 57;
      break;
     }
     if (($sub186$i | 0) < ($sub198$i | 0)) {
      $q1_Q0$1$in$i = $sub186$i + $sub191$i | 0;
      label = 57;
      break;
     } else {
      $q1_Q0$130$i = $sub186$i >> 31;
      label = 59;
      break;
     }
    } else {
     $q1_Q0$1$in$i = $sub186$i;
     label = 57;
    } while (0);
    if ((label | 0) == 57) {
     label = 0;
     if (($q1_Q0$1$in$i | 0) > 1023) {
      $add218$i136 = $sub217$i + ($q1_Q0$1$in$i & -1024) | 0;
      $add219$i = $add218$i136 + 1024 | 0;
      $q1_Q10$0$i = $add218$i136;
      $q2_Q10$0$i = $add219$i;
      $rd1_Q20$0$i = Math_imul($add218$i136 << 16 >> 16, $conv223$i) | 0;
      $rd2_Q20$0$i = Math_imul($add219$i << 16 >> 16, $conv223$i) | 0;
     } else {
      $q1_Q0$130$i = $q1_Q0$1$in$i >> 10;
      label = 59;
     }
    }
    L83 : do if ((label | 0) == 59) {
     label = 0;
     switch ($q1_Q0$130$i | 0) {
     case 0:
      {
       $q1_Q10$0$i = $conv3;
       $q2_Q10$0$i = $add234$i;
       $rd1_Q20$0$i = $mul239$i;
       $rd2_Q20$0$i = $mul244$i;
       break L83;
       break;
      }
     case -1:
      {
       $q1_Q10$0$i = $sub249$i;
       $q2_Q10$0$i = $conv3;
       $rd1_Q20$0$i = $mul255$i;
       $rd2_Q20$0$i = $mul239$i;
       break L83;
       break;
      }
     default:
      {
       $add264$i = ($q1_Q0$130$i << 10 | 80) + $conv3 | 0;
       $sub266$i = $add264$i << 16;
       $q1_Q10$0$i = $add264$i;
       $q2_Q10$0$i = $add264$i + 1024 | 0;
       $rd1_Q20$0$i = Math_imul(0 - $sub266$i >> 16, $conv223$i) | 0;
       $rd2_Q20$0$i = Math_imul(-67108864 - $sub266$i >> 16, $conv223$i) | 0;
       break L83;
      }
     }
    } while (0);
    $conv283$i = $cond185$i - $q1_Q10$0$i << 16 >> 16;
    $conv290$i = $cond185$i - $q2_Q10$0$i << 16 >> 16;
    $cmp295$i = ((Math_imul($conv290$i, $conv290$i) | 0) + $rd2_Q20$0$i | 0) < ((Math_imul($conv283$i, $conv283$i) | 0) + $rd1_Q20$0$i | 0);
    $spec$select18$i = $cmp295$i ? $q2_Q10$0$i : $q1_Q10$0$i;
    $arrayidx303$i = $pulses$addr$0149 + $i$036$i | 0;
    HEAP8[$arrayidx303$i >> 0] = (($spec$select18$i >>> 9) + 1 | 0) >>> 1;
    $shl304$i = $spec$select18$i << 4;
    $add312$i = ((HEAP32[$rand_seed >> 2] | 0) < 0 ? 0 - $shl304$i | 0 : $shl304$i) + ($LTP_pred_Q13$0$i << 1) | 0;
    $add314$i = $add312$i + ($out$0$i$i << 4) | 0;
    $add329$i = (Math_imul($add314$i >> 16, $conv317$i) | 0) + (Math_imul($add314$i, $shr327$i) | 0) + ((Math_imul($add314$i & 65534, $conv317$i) | 0) >> 16) | 0;
    HEAP16[$pxq$0147 + ($i$036$i << 1) >> 1] = ($add329$i | 0) > 8388479 ? 32767 : ($add329$i | 0) < -8388736 ? -32768 : (($add329$i >>> 7) + 1 | 0) >>> 1 & 65535;
    $psLPC_Q14$033$i = $psLPC_Q14$033$i + 4 | 0;
    HEAP32[$psLPC_Q14$033$i >> 2] = $add314$i;
    $sub386$i = $add314$i - (HEAP32[$arrayidx170$i >> 2] << 4) | 0;
    HEAP32[$sDiff_shp_Q14$i94 >> 2] = $sub386$i;
    $sub390$i = $sub386$i - ($add89$i << 2) | 0;
    HEAP32[$sLF_AR_shp_Q1477$i >> 2] = $sub390$i;
    HEAP32[$NSQ + 1280 + (HEAP32[$sLTP_shp_buf_idx >> 2] << 2) >> 2] = $sub390$i - ($add118$i << 2);
    $145 = HEAP32[$sLTP_buf_idx >> 2] | 0;
    HEAP32[$vla + ($145 << 2) >> 2] = $add312$i << 1;
    HEAP32[$sLTP_shp_buf_idx >> 2] = (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) + 1;
    HEAP32[$sLTP_buf_idx >> 2] = $145 + 1;
    $76 = (HEAP32[$rand_seed >> 2] | 0) + (HEAP8[$arrayidx303$i >> 0] | 0) | 0;
    HEAP32[$rand_seed >> 2] = $76;
    $i$036$i = $i$036$i + 1 | 0;
    if (($i$036$i | 0) >= ($70 | 0)) break; else {
     $pred_lag_ptr$035$i = $pred_lag_ptr$1$i;
     $shp_lag_ptr$034$i = $shp_lag_ptr$1$i;
    }
   }
  }
  dest = $sLPC_Q14$i;
  src = $NSQ + 3840 + ($70 << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $149 = HEAP32[$subfr_length >> 2] | 0;
  $inc = $k$0146 + 1 | 0;
  $150 = HEAP32[$nb_subfr >> 2] | 0;
  if (($inc | 0) >= ($150 | 0)) {
   label = 65;
   break;
  }
  $13 = HEAP8[$signalType >> 0] | 0;
  $17 = $149;
  $k$0146 = $inc;
  $lag$0145 = $lag$1;
  $pulses$addr$0149 = $pulses$addr$0149 + $149 | 0;
  $pxq$0147 = $pxq$0147 + ($149 << 1) | 0;
  $x16$addr$0151 = $x16$addr$0151 + ($149 << 1) | 0;
 }
 if ((label | 0) == 6) _celt_fatal(51632, 51566, 146); else if ((label | 0) == 42) _celt_fatal(51728, 51566, 250); else if ((label | 0) == 47) _celt_fatal(51577, 51566, 258); else if ((label | 0) == 65) {
  $$lcssa140 = $150;
  $152 = HEAP32[$frame_length >> 2] | 0;
  $153 = HEAP32[$ltp_mem_length >> 2] | 0;
  $sub77 = $$lcssa140 + -1 | 0;
  $arrayidx78 = $pitchL + ($sub77 << 2) | 0;
  $151 = HEAP32[$arrayidx78 >> 2] | 0;
  HEAP32[$lagPrev >> 2] = $151;
  $arrayidx83 = $NSQ + ($152 << 1) | 0;
  $mul85 = $153 << 1;
  _memmove($NSQ | 0, $arrayidx83 | 0, $mul85 | 0) | 0;
  $sLTP_shp_Q14 = $NSQ + 1280 | 0;
  $154 = HEAP32[$frame_length >> 2] | 0;
  $arrayidx89 = $NSQ + 1280 + ($154 << 2) | 0;
  $155 = HEAP32[$ltp_mem_length >> 2] | 0;
  $mul91 = $155 << 2;
  _memmove($sLTP_shp_Q14 | 0, $arrayidx89 | 0, $mul91 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function _clt_compute_allocation($m, $start, $end, $offsets, $cap, $alloc_trim, $intensity, $dual_stereo, $total, $balance, $pulses, $ebits, $fine_priority, $C, $LM, $ec, $encode, $prev, $signalBandwidth) {
 $m = $m | 0;
 $start = $start | 0;
 $end = $end | 0;
 $offsets = $offsets | 0;
 $cap = $cap | 0;
 $alloc_trim = $alloc_trim | 0;
 $intensity = $intensity | 0;
 $dual_stereo = $dual_stereo | 0;
 $total = $total | 0;
 $balance = $balance | 0;
 $pulses = $pulses | 0;
 $ebits = $ebits | 0;
 $fine_priority = $fine_priority | 0;
 $C = $C | 0;
 $LM = $LM | 0;
 $ec = $ec | 0;
 $encode = $encode | 0;
 $prev = $prev | 0;
 $signalBandwidth = $signalBandwidth | 0;
 var $$codedBands$0$i = 0, $$pre14$i$i = 0, $$pre14$i$i23 = 0, $$pre213 = 0, $$pre214$pre = 0, $$pre217 = 0, $$pre220 = 0, $$pre221 = 0, $0 = 0, $100 = 0, $104 = 0, $107 = 0, $109 = 0, $114 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $41 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $add$us$1$i = 0, $add10$$pn$us$1$i = 0, $add10$$pn$us$2$i = 0, $add10$$pn$us$3$i = 0, $add10$$pn$us$4$i = 0, $add10$$pn$us$5$i = 0, $add10$$pn$us$i = 0, $add10$us$1$i = 0, $add10$us$2$i = 0, $add10$us$3$i = 0, $add10$us$4$i = 0, $add10$us$5$i = 0, $add10$us$i = 0, $add110$us = 0, $add118$i = 0, $add118$us$i = 0, $add120$i = 0, $add121$$pn$us = 0, $add121$us = 0, $add142$i = 0, $add198 = 0, $add198$us = 0, $add212 = 0, $add212$us = 0, $add215$i = 0, $add222$i = 0, $add322$i = 0, $add349$i = 0, $add365$i = 0, $add388$i = 0, $add40$i = 0, $add457$i = 0, $add62 = 0, $add62$i = 0, $allocVectors = 0, $allocVectors224 = 0, $allocVectors230 = 0, $arrayidx115$i = 0, $arrayidx115$us$i = 0, $arrayidx265$i = 0, $arrayidx297$i = 0, $arrayidx307$i = 0, $arrayidx399$i = 0, $arrayidx459$i = 0, $arrayidx498$i = 0, $arrayidx501$i = 0, $balance$0388$i = 0, $band_bits$0$i = 0, $band_bits$0$us$i = 0, $bits1j$0 = 0, $bits1j$0$us = 0, $bits1j$1 = 0, $bits1j$1$us = 0, $bits2j$0 = 0, $bits2j$0$us = 0, $bitsj$0$us = 0, $cmp$i = 0, $cmp$i1 = 0, $cmp$i7 = 0, $cmp145 = 0, $cmp145$us = 0, $cmp17192 = 0, $cmp219$i = 0, $cmp222 = 0, $cmp24$us$1$i = 0, $cmp24$us$2$i = 0, $cmp24$us$3$i = 0, $cmp24$us$4$i = 0, $cmp24$us$i = 0, $cmp3 = 0, $cmp5 = 0, $codedBands$0$lcssa$i = 0, $codedBands$0384$i = 0, $codedBands$0398$i = 0, $codedBands$0398$i$phi = 0, $codedBands$0398$us$i = 0, $codedBands$0398$us$i$phi = 0, $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i33 = 0, $cond$i12 = 0, $cond11 = 0, $cond2 = 0, $conv = 0, $conv$i237 = 0, $conv$i237$in = 0, $conv$i8 = 0, $conv72$i = 0, $conv72$us$i = 0, $conv75$i = 0, $conv75$us$i = 0, $conv88$i = 0, $conv88$us$i = 0, $dec190$us$in = 0, $dec31409$in$i = 0, $dec415$us$in$1$i = 0, $dec415$us$in$2$i = 0, $dec415$us$in$3$i = 0, $dec415$us$in$4$i = 0, $dec415$us$in$5$i = 0, $dec415$us$in$i = 0, $div$i$i = 0, $div$i$us$i = 0, $div$i360$i = 0, $done$0188$us = 0, $done$0413$us$1$i = 0, $done$0413$us$2$i = 0, $done$0413$us$3$i = 0, $done$0413$us$4$i = 0, $done$0413$us$5$i = 0, $done$0413$us$i = 0, $done$1$us = 0, $done$1$us$1$i = 0, $done$1$us$2$i = 0, $done$1$us$3$i = 0, $done$1$us$4$i = 0, $done$1$us$5$i = 0, $done$1$us$i = 0, $done$2407$i = 0, $dual_stereo_rsv$0 = 0, $eBands = 0, $eBands90$pre$phi227Z2D = 0, $excess$0$i = 0, $excess$1$i = 0, $hi$0 = 0, $hi$0$us = 0, $inc$i$i$i = 0, $inc$i$i$i29 = 0, $intensity_rsv$0 = 0, $intensity_rsv$addr$0$lcssa$i = 0, $intensity_rsv$addr$0378$i = 0, $intensity_rsv$addr$0400$i = 0, $intensity_rsv$addr$0400$us$i = 0, $intensity_rsv$addr$1$i = 0, $intensity_rsv$addr$1$us$i = 0, $j$0193 = 0, $j$2184 = 0, $j$2184$us = 0, $j$2395$i = 0, $j$3393$i = 0, $j$4389$i = 0, $j$5386$i = 0, $left$0$sub282$i = 0, $left$0392$i = 0, $lo$0 = 0, $lo$0$shr$us$1$i = 0, $lo$0$shr$us$2$i = 0, $lo$0$shr$us$3$i = 0, $lo$0$shr$us$4$i = 0, $lo$0$shr$us$5$i = 0, $lo$0$us = 0, $lo$1 = 0, $lo$1$lcssa = 0, $lo$1$us = 0, $logN$i = 0, $mul168 = 0, $mul168$us = 0, $mul170 = 0, $mul185 = 0, $mul264$i = 0, $mul338$i = 0, $mul353$i = 0, $mul405$i = 0, $mul427$i = 0, $mul55 = 0, $mul98$us = 0, $mul99$us = 0, $nbits_total$i$i = 0, $nbits_total$i$i15 = 0, $offs$i$i$i = 0, $offs$i$i$i17 = 0, $offset$1$i = 0, $or$cond2$i = 0, $psum$0189$us = 0, $psum$0414$us$1$i = 0, $psum$0414$us$2$i = 0, $psum$0414$us$3$i = 0, $psum$0414$us$4$i = 0, $psum$0414$us$5$i = 0, $psum$0414$us$i = 0, $psum$2$lcssa$i = 0, $psum$2408$i = 0, $psum$3$lcssa$i = 0, $psum$3381$i = 0, $psum$3399$i = 0, $psum$3399$us$i = 0, $psum$4$i = 0, $psum$4$us$i = 0, $psum$5$i = 0, $psum$5$us$i = 0, $rem$i$i = 0, $rem$i$i16 = 0, $rng$i = 0, $rng$i4 = 0, $shl = 0, $shl1$i238 = 0, $shl104$us = 0, $shl136$pre$phi225Z2D = 0, $shl175 = 0, $shl175$us = 0, $shl190$us = 0, $shl320$i = 0, $shl360$i = 0, $shl435$i = 0, $shl474$i = 0, $shl504$i = 0, $shr = 0, $shr$hi$0$us$1$i = 0, $shr$hi$0$us$2$i = 0, $shr$hi$0$us$3$i = 0, $shr$i = 0, $shr$i6 = 0, $shr$us$5$i = 0, $shr105$us = 0, $shr176 = 0, $shr176$us = 0, $shr191$us = 0, $shr371$pn$i = 0, $shr402$i = 0, $shr458$sub460$i = 0, $shr458366$i = 0, $shr500$i = 0, $shr65 = 0, $shr85 = 0, $shr85$us = 0, $skip_start$0$lcssa = 0, $skip_start$0$lcssa235 = 0, $skip_start$0183 = 0, $skip_start$0183$us = 0, $spec$select162 = 0, $spec$select162$us = 0, $spec$select166 = 0, $spec$select355$i = 0, $spec$select357$i = 0, $spec$select358$i = 0, $spec$select367$i = 0, $storage$i$i$i = 0, $storemerge$i = 0, $storemerge$us$i = 0, $sub = 0, $sub$i = 0, $sub$i10 = 0, $sub$i3 = 0, $sub$us$i = 0, $sub114$i = 0, $sub234$i = 0, $sub235 = 0, $sub235$us = 0, $sub24 = 0, $sub241$i = 0, $sub282$i = 0, $sub327$i = 0, $sub336$i = 0, $sub396$i = 0, $sub401$i = 0, $sub401$us$i = 0, $sub440$i = 0, $sub460$i = 0, $sub59 = 0, $sub70$i = 0, $sub70$us$i = 0, $sub76$i = 0, $sub76$us$i = 0, $sub8 = 0, $sub85$i = 0, $sub85$us$i = 0, $sub93$i = 0, $sub93$us$i = 0, $tmp35$0$$i = 0, $tmp35$0$i = 0, $total$addr$0 = 0, $total$addr$1$ph$i = 0, $val$i = 0, $val$i5 = 0, $vla = 0, $vla14 = 0, $vla15 = 0, $vla16 = 0, label = 0, sp = 0, $5$looptemp = 0, $j$0193$looptemp = 0, $7$looptemp = 0, $19$looptemp = 0, $j$2184$us$looptemp = 0, $29$looptemp = 0, $j$2184$looptemp = 0, $93$looptemp = 0, $j$2395$i$looptemp = 0, $96$looptemp = 0, $j$3393$i$looptemp = 0, $100$looptemp = 0, $j$4389$i$looptemp = 0;
 sp = STACKTOP;
 $cond = ($total | 0) > 0 ? $total : 0;
 $0 = HEAP32[$m + 8 >> 2] | 0;
 $cond2 = ($cond | 0) > 7 ? 8 : 0;
 $sub = $cond - $cond2 | 0;
 $cmp3 = ($C | 0) == 2;
 if ($cmp3) {
  $conv = HEAPU8[20784 + ($end - $start) >> 0] | 0;
  $cmp5 = ($sub | 0) < ($conv | 0);
  $sub8 = $sub - $conv | 0;
  $cond11 = ($sub8 | 0) > 7 ? 8 : 0;
  $dual_stereo_rsv$0 = $cmp5 ? 0 : $cond11;
  $intensity_rsv$0 = $cmp5 ? 0 : $conv;
  $total$addr$0 = $cmp5 ? $sub : $sub8 - $cond11 | 0;
 } else {
  $dual_stereo_rsv$0 = 0;
  $intensity_rsv$0 = 0;
  $total$addr$0 = $sub;
 }
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 $vla14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 $vla15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 $vla16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 $cmp17192 = ($end | 0) > ($start | 0);
 if ($cmp17192) {
  $shl = $C << 3;
  $eBands = $m + 32 | 0;
  $3 = HEAP32[$eBands >> 2] | 0;
  $sub59 = $end + -1 | 0;
  $mul55 = Math_imul($alloc_trim + -5 - $LM | 0, $C) | 0;
  $add62 = $LM + 3 | 0;
  $5 = HEAP16[$3 + ($start << 1) >> 1] | 0;
  $j$0193 = $start;
  do {
   $j$0193$looptemp = $j$0193;
   $j$0193 = $j$0193 + 1 | 0;
   $5$looptemp = $5;
   $5 = HEAP16[$3 + ($j$0193 << 1) >> 1] | 0;
   $sub24 = ($5 << 16 >> 16) - ($5$looptemp << 16 >> 16) | 0;
   $shr = $sub24 * 3 << $LM << 3 >> 4;
   HEAP32[$vla15 + ($j$0193$looptemp << 2) >> 2] = ($shl | 0) > ($shr | 0) ? $shl : $shr;
   $shr65 = (Math_imul(Math_imul($mul55, $sub59 - $j$0193$looptemp | 0) | 0, $sub24) | 0) << $add62 >> 6;
   HEAP32[$vla16 + ($j$0193$looptemp << 2) >> 2] = $shr65 - (($sub24 << $LM | 0) == 1 ? $shl : 0);
  } while (($j$0193 | 0) != ($end | 0));
  $6 = HEAP32[$m + 48 >> 2] | 0;
  $allocVectors = $m + 52 | 0;
  $$pre213 = HEAP32[$allocVectors >> 2] | 0;
  $$pre214$pre = HEAP16[$3 + ($end << 1) >> 1] | 0;
  $hi$0$us = $6 + -1 | 0;
  $lo$0$us = 1;
  while (1) {
   $shr85$us = $lo$0$us + $hi$0$us >> 1;
   $mul99$us = Math_imul($shr85$us, $0) | 0;
   $7 = $$pre214$pre;
   $dec190$us$in = $end;
   $done$0188$us = 0;
   $psum$0189$us = 0;
   while (1) {
    $dec190$us$in = $dec190$us$in + -1 | 0;
    $7$looptemp = $7;
    $7 = HEAP16[$3 + ($dec190$us$in << 1) >> 1] | 0;
    $mul98$us = Math_imul(($7$looptemp << 16 >> 16) - ($7 << 16 >> 16) | 0, $C) | 0;
    $shl104$us = (Math_imul($mul98$us, HEAPU8[$$pre213 + ($dec190$us$in + $mul99$us) >> 0] | 0) | 0) << $LM;
    $shr105$us = $shl104$us >> 2;
    if (($shl104$us | 0) > 3) {
     $add110$us = (HEAP32[$vla16 + ($dec190$us$in << 2) >> 2] | 0) + $shr105$us | 0;
     $bitsj$0$us = ($add110$us | 0) > 0 ? $add110$us : 0;
    } else $bitsj$0$us = $shr105$us;
    $add121$us = (HEAP32[$offsets + ($dec190$us$in << 2) >> 2] | 0) + $bitsj$0$us | 0;
    if ($done$0188$us | 0 ? 1 : ($add121$us | 0) >= (HEAP32[$vla15 + ($dec190$us$in << 2) >> 2] | 0)) {
     $14 = HEAP32[$cap + ($dec190$us$in << 2) >> 2] | 0;
     $add121$$pn$us = ($add121$us | 0) < ($14 | 0) ? $add121$us : $14;
     $done$1$us = 1;
    } else {
     $add121$$pn$us = ($add121$us | 0) < ($shl | 0) ? 0 : $shl;
     $done$1$us = 0;
    }
    $psum$0189$us = $add121$$pn$us + $psum$0189$us | 0;
    if (($dec190$us$in | 0) <= ($start | 0)) break; else $done$0188$us = $done$1$us;
   }
   $cmp145$us = ($psum$0189$us | 0) > ($total$addr$0 | 0);
   $hi$0$us = $cmp145$us ? $shr85$us + -1 | 0 : $hi$0$us;
   $lo$1$us = $cmp145$us ? $lo$0$us : $shr85$us + 1 | 0;
   if (($lo$1$us | 0) > ($hi$0$us | 0)) {
    $17 = $6;
    $allocVectors230 = $allocVectors;
    $eBands90$pre$phi227Z2D = $eBands;
    $lo$1$lcssa = $lo$1$us;
    $shl136$pre$phi225Z2D = $shl;
    break;
   } else $lo$0$us = $lo$1$us;
  }
 } else {
  $$pre220 = $m + 32 | 0;
  $$pre221 = $C << 3;
  $2 = HEAP32[$m + 48 >> 2] | 0;
  $allocVectors224 = $m + 52 | 0;
  $cmp145 = ($total$addr$0 | 0) < 0;
  $hi$0 = $2 + -1 | 0;
  $lo$0 = 1;
  while (1) {
   $shr85 = $lo$0 + $hi$0 >> 1;
   $hi$0 = $cmp145 ? $shr85 + -1 | 0 : $hi$0;
   $lo$1 = $cmp145 ? $lo$0 : $shr85 + 1 | 0;
   if (($lo$1 | 0) > ($hi$0 | 0)) {
    $17 = $2;
    $allocVectors230 = $allocVectors224;
    $eBands90$pre$phi227Z2D = $$pre220;
    $lo$1$lcssa = $lo$1;
    $shl136$pre$phi225Z2D = $$pre221;
    break;
   } else $lo$0 = $lo$1;
  }
 }
 if ($cmp17192) {
  $15 = HEAP32[$eBands90$pre$phi227Z2D >> 2] | 0;
  $16 = HEAP32[$allocVectors230 >> 2] | 0;
  $mul170 = Math_imul($lo$1$lcssa + -1 | 0, $0) | 0;
  $mul185 = Math_imul($lo$1$lcssa, $0) | 0;
  $cmp222 = ($lo$1$lcssa | 0) > 1;
  $$pre217 = HEAP16[$15 + ($start << 1) >> 1] | 0;
  if (($lo$1$lcssa | 0) < ($17 | 0)) {
   $19 = $$pre217;
   $j$2184$us = $start;
   $skip_start$0183$us = $start;
   while (1) {
    $j$2184$us$looptemp = $j$2184$us;
    $j$2184$us = $j$2184$us + 1 | 0;
    $19$looptemp = $19;
    $19 = HEAP16[$15 + ($j$2184$us << 1) >> 1] | 0;
    $mul168$us = Math_imul(($19 << 16 >> 16) - ($19$looptemp << 16 >> 16) | 0, $C) | 0;
    $shl175$us = (Math_imul($mul168$us, HEAPU8[$16 + ($j$2184$us$looptemp + $mul170) >> 0] | 0) | 0) << $LM;
    $shr176$us = $shl175$us >> 2;
    $shl190$us = (Math_imul($mul168$us, HEAPU8[$16 + ($j$2184$us$looptemp + $mul185) >> 0] | 0) | 0) << $LM;
    $shr191$us = $shl190$us >> 2;
    if (($shl175$us | 0) > 3) {
     $add198$us = (HEAP32[$vla16 + ($j$2184$us$looptemp << 2) >> 2] | 0) + $shr176$us | 0;
     $bits1j$0$us = ($add198$us | 0) > 0 ? $add198$us : 0;
    } else $bits1j$0$us = $shr176$us;
    if (($shl190$us | 0) > 3) {
     $add212$us = (HEAP32[$vla16 + ($j$2184$us$looptemp << 2) >> 2] | 0) + $shr191$us | 0;
     $bits2j$0$us = ($add212$us | 0) > 0 ? $add212$us : 0;
    } else $bits2j$0$us = $shr191$us;
    $26 = HEAP32[$offsets + ($j$2184$us$looptemp << 2) >> 2] | 0;
    $bits1j$1$us = $bits1j$0$us + ($cmp222 ? $26 : 0) | 0;
    $spec$select162$us = ($26 | 0) > 0 ? $j$2184$us$looptemp : $skip_start$0183$us;
    $sub235$us = $bits2j$0$us - $bits1j$1$us + $26 | 0;
    HEAP32[$vla + ($j$2184$us$looptemp << 2) >> 2] = $bits1j$1$us;
    HEAP32[$vla14 + ($j$2184$us$looptemp << 2) >> 2] = ($sub235$us | 0) > 0 ? $sub235$us : 0;
    if (($j$2184$us | 0) == ($end | 0)) {
     $skip_start$0$lcssa = $spec$select162$us;
     break;
    } else $skip_start$0183$us = $spec$select162$us;
   }
  } else {
   $29 = $$pre217;
   $j$2184 = $start;
   $skip_start$0183 = $start;
   while (1) {
    $j$2184$looptemp = $j$2184;
    $j$2184 = $j$2184 + 1 | 0;
    $29$looptemp = $29;
    $29 = HEAP16[$15 + ($j$2184 << 1) >> 1] | 0;
    $mul168 = Math_imul(($29 << 16 >> 16) - ($29$looptemp << 16 >> 16) | 0, $C) | 0;
    $shl175 = (Math_imul($mul168, HEAPU8[$16 + ($j$2184$looptemp + $mul170) >> 0] | 0) | 0) << $LM;
    $shr176 = $shl175 >> 2;
    $31 = HEAP32[$cap + ($j$2184$looptemp << 2) >> 2] | 0;
    if (($shl175 | 0) > 3) {
     $add198 = (HEAP32[$vla16 + ($j$2184$looptemp << 2) >> 2] | 0) + $shr176 | 0;
     $bits1j$0 = ($add198 | 0) > 0 ? $add198 : 0;
    } else $bits1j$0 = $shr176;
    if (($31 | 0) > 0) {
     $add212 = (HEAP32[$vla16 + ($j$2184$looptemp << 2) >> 2] | 0) + $31 | 0;
     $bits2j$0 = ($add212 | 0) > 0 ? $add212 : 0;
    } else $bits2j$0 = $31;
    $36 = HEAP32[$offsets + ($j$2184$looptemp << 2) >> 2] | 0;
    $bits1j$1 = $bits1j$0 + ($cmp222 ? $36 : 0) | 0;
    $spec$select162 = ($36 | 0) > 0 ? $j$2184$looptemp : $skip_start$0183;
    $sub235 = $bits2j$0 - $bits1j$1 + $36 | 0;
    HEAP32[$vla + ($j$2184$looptemp << 2) >> 2] = $bits1j$1;
    HEAP32[$vla14 + ($j$2184$looptemp << 2) >> 2] = ($sub235 | 0) > 0 ? $sub235 : 0;
    if (($j$2184 | 0) == ($end | 0)) {
     $skip_start$0$lcssa = $spec$select162;
     break;
    } else $skip_start$0183 = $spec$select162;
   }
  }
  $cmp$i = ($C | 0) > 1;
  $dec415$us$in$i = $end;
  $done$0413$us$i = 0;
  $psum$0414$us$i = 0;
  while (1) {
   $dec415$us$in$i = $dec415$us$in$i + -1 | 0;
   $add10$us$i = (HEAP32[$vla14 + ($dec415$us$in$i << 2) >> 2] >> 1) + (HEAP32[$vla + ($dec415$us$in$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$i | 0 ? 1 : ($add10$us$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$i << 2) >> 2] | 0)) {
    $41 = HEAP32[$cap + ($dec415$us$in$i << 2) >> 2] | 0;
    $add10$$pn$us$i = ($add10$us$i | 0) < ($41 | 0) ? $add10$us$i : $41;
    $done$1$us$i = 1;
   } else {
    $add10$$pn$us$i = ($add10$us$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$i = 0;
   }
   $psum$0414$us$i = $add10$$pn$us$i + $psum$0414$us$i | 0;
   if (($dec415$us$in$i | 0) <= ($start | 0)) break; else $done$0413$us$i = $done$1$us$i;
  }
  $cmp24$us$i = ($psum$0414$us$i | 0) > ($total$addr$0 | 0);
  $add$us$1$i = $cmp24$us$i ? 16 : 48;
  $dec415$us$in$1$i = $end;
  $done$0413$us$1$i = 0;
  $psum$0414$us$1$i = 0;
  while (1) {
   $dec415$us$in$1$i = $dec415$us$in$1$i + -1 | 0;
   $add10$us$1$i = ((Math_imul(HEAP32[$vla14 + ($dec415$us$in$1$i << 2) >> 2] | 0, $add$us$1$i) | 0) >> 6) + (HEAP32[$vla + ($dec415$us$in$1$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$1$i | 0 ? 1 : ($add10$us$1$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$1$i << 2) >> 2] | 0)) {
    $123 = HEAP32[$cap + ($dec415$us$in$1$i << 2) >> 2] | 0;
    $add10$$pn$us$1$i = ($add10$us$1$i | 0) < ($123 | 0) ? $add10$us$1$i : $123;
    $done$1$us$1$i = 1;
   } else {
    $add10$$pn$us$1$i = ($add10$us$1$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$1$i = 0;
   }
   $psum$0414$us$1$i = $add10$$pn$us$1$i + $psum$0414$us$1$i | 0;
   if (($dec415$us$in$1$i | 0) <= ($start | 0)) break; else $done$0413$us$1$i = $done$1$us$1$i;
  }
  $cmp24$us$1$i = ($psum$0414$us$1$i | 0) > ($total$addr$0 | 0);
  $shr$hi$0$us$1$i = $cmp24$us$1$i ? $add$us$1$i : $cmp24$us$i ? 32 : 64;
  $lo$0$shr$us$1$i = $cmp24$us$1$i ? ($cmp24$us$i ? 0 : 32) : $add$us$1$i;
  $124 = ($lo$0$shr$us$1$i + $shr$hi$0$us$1$i | 0) >>> 1;
  $dec415$us$in$2$i = $end;
  $done$0413$us$2$i = 0;
  $psum$0414$us$2$i = 0;
  while (1) {
   $dec415$us$in$2$i = $dec415$us$in$2$i + -1 | 0;
   $add10$us$2$i = ((Math_imul(HEAP32[$vla14 + ($dec415$us$in$2$i << 2) >> 2] | 0, $124) | 0) >> 6) + (HEAP32[$vla + ($dec415$us$in$2$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$2$i | 0 ? 1 : ($add10$us$2$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$2$i << 2) >> 2] | 0)) {
    $128 = HEAP32[$cap + ($dec415$us$in$2$i << 2) >> 2] | 0;
    $add10$$pn$us$2$i = ($add10$us$2$i | 0) < ($128 | 0) ? $add10$us$2$i : $128;
    $done$1$us$2$i = 1;
   } else {
    $add10$$pn$us$2$i = ($add10$us$2$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$2$i = 0;
   }
   $psum$0414$us$2$i = $add10$$pn$us$2$i + $psum$0414$us$2$i | 0;
   if (($dec415$us$in$2$i | 0) <= ($start | 0)) break; else $done$0413$us$2$i = $done$1$us$2$i;
  }
  $cmp24$us$2$i = ($psum$0414$us$2$i | 0) > ($total$addr$0 | 0);
  $shr$hi$0$us$2$i = $cmp24$us$2$i ? $124 : $shr$hi$0$us$1$i;
  $lo$0$shr$us$2$i = $cmp24$us$2$i ? $lo$0$shr$us$1$i : $124;
  $129 = ($lo$0$shr$us$2$i + $shr$hi$0$us$2$i | 0) >>> 1;
  $dec415$us$in$3$i = $end;
  $done$0413$us$3$i = 0;
  $psum$0414$us$3$i = 0;
  while (1) {
   $dec415$us$in$3$i = $dec415$us$in$3$i + -1 | 0;
   $add10$us$3$i = ((Math_imul(HEAP32[$vla14 + ($dec415$us$in$3$i << 2) >> 2] | 0, $129) | 0) >> 6) + (HEAP32[$vla + ($dec415$us$in$3$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$3$i | 0 ? 1 : ($add10$us$3$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$3$i << 2) >> 2] | 0)) {
    $133 = HEAP32[$cap + ($dec415$us$in$3$i << 2) >> 2] | 0;
    $add10$$pn$us$3$i = ($add10$us$3$i | 0) < ($133 | 0) ? $add10$us$3$i : $133;
    $done$1$us$3$i = 1;
   } else {
    $add10$$pn$us$3$i = ($add10$us$3$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$3$i = 0;
   }
   $psum$0414$us$3$i = $add10$$pn$us$3$i + $psum$0414$us$3$i | 0;
   if (($dec415$us$in$3$i | 0) <= ($start | 0)) break; else $done$0413$us$3$i = $done$1$us$3$i;
  }
  $cmp24$us$3$i = ($psum$0414$us$3$i | 0) > ($total$addr$0 | 0);
  $shr$hi$0$us$3$i = $cmp24$us$3$i ? $129 : $shr$hi$0$us$2$i;
  $lo$0$shr$us$3$i = $cmp24$us$3$i ? $lo$0$shr$us$2$i : $129;
  $134 = ($lo$0$shr$us$3$i + $shr$hi$0$us$3$i | 0) >>> 1;
  $dec415$us$in$4$i = $end;
  $done$0413$us$4$i = 0;
  $psum$0414$us$4$i = 0;
  while (1) {
   $dec415$us$in$4$i = $dec415$us$in$4$i + -1 | 0;
   $add10$us$4$i = ((Math_imul(HEAP32[$vla14 + ($dec415$us$in$4$i << 2) >> 2] | 0, $134) | 0) >> 6) + (HEAP32[$vla + ($dec415$us$in$4$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$4$i | 0 ? 1 : ($add10$us$4$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$4$i << 2) >> 2] | 0)) {
    $138 = HEAP32[$cap + ($dec415$us$in$4$i << 2) >> 2] | 0;
    $add10$$pn$us$4$i = ($add10$us$4$i | 0) < ($138 | 0) ? $add10$us$4$i : $138;
    $done$1$us$4$i = 1;
   } else {
    $add10$$pn$us$4$i = ($add10$us$4$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$4$i = 0;
   }
   $psum$0414$us$4$i = $add10$$pn$us$4$i + $psum$0414$us$4$i | 0;
   if (($dec415$us$in$4$i | 0) <= ($start | 0)) break; else $done$0413$us$4$i = $done$1$us$4$i;
  }
  $cmp24$us$4$i = ($psum$0414$us$4$i | 0) > ($total$addr$0 | 0);
  $lo$0$shr$us$4$i = $cmp24$us$4$i ? $lo$0$shr$us$3$i : $134;
  $shr$us$5$i = ($lo$0$shr$us$4$i + ($cmp24$us$4$i ? $134 : $shr$hi$0$us$3$i) | 0) >>> 1;
  $dec415$us$in$5$i = $end;
  $done$0413$us$5$i = 0;
  $psum$0414$us$5$i = 0;
  while (1) {
   $dec415$us$in$5$i = $dec415$us$in$5$i + -1 | 0;
   $add10$us$5$i = ((Math_imul(HEAP32[$vla14 + ($dec415$us$in$5$i << 2) >> 2] | 0, $shr$us$5$i) | 0) >> 6) + (HEAP32[$vla + ($dec415$us$in$5$i << 2) >> 2] | 0) | 0;
   if ($done$0413$us$5$i | 0 ? 1 : ($add10$us$5$i | 0) >= (HEAP32[$vla15 + ($dec415$us$in$5$i << 2) >> 2] | 0)) {
    $142 = HEAP32[$cap + ($dec415$us$in$5$i << 2) >> 2] | 0;
    $add10$$pn$us$5$i = ($add10$us$5$i | 0) < ($142 | 0) ? $add10$us$5$i : $142;
    $done$1$us$5$i = 1;
   } else {
    $add10$$pn$us$5$i = ($add10$us$5$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $done$1$us$5$i = 0;
   }
   $psum$0414$us$5$i = $add10$$pn$us$5$i + $psum$0414$us$5$i | 0;
   if (($dec415$us$in$5$i | 0) <= ($start | 0)) break; else $done$0413$us$5$i = $done$1$us$5$i;
  }
  $lo$0$shr$us$5$i = ($psum$0414$us$5$i | 0) > ($total$addr$0 | 0) ? $lo$0$shr$us$4$i : $shr$us$5$i;
  $dec31409$in$i = $end;
  $done$2407$i = 0;
  $psum$2408$i = 0;
  while (1) {
   $dec31409$in$i = $dec31409$in$i + -1 | 0;
   $add40$i = ((Math_imul(HEAP32[$vla14 + ($dec31409$in$i << 2) >> 2] | 0, $lo$0$shr$us$5$i) | 0) >> 6) + (HEAP32[$vla + ($dec31409$in$i << 2) >> 2] | 0) | 0;
   $or$cond2$i = $done$2407$i | 0 ? 1 : ($add40$i | 0) >= (HEAP32[$vla15 + ($dec31409$in$i << 2) >> 2] | 0);
   $tmp35$0$i = $or$cond2$i ? $add40$i : ($add40$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
   $45 = HEAP32[$cap + ($dec31409$in$i << 2) >> 2] | 0;
   $tmp35$0$$i = ($tmp35$0$i | 0) < ($45 | 0) ? $tmp35$0$i : $45;
   HEAP32[$pulses + ($dec31409$in$i << 2) >> 2] = $tmp35$0$$i;
   $add62$i = $tmp35$0$$i + $psum$2408$i | 0;
   if (($dec31409$in$i | 0) <= ($start | 0)) {
    $conv$i237$in = $cmp$i;
    $psum$2$lcssa$i = $add62$i;
    $skip_start$0$lcssa235 = $skip_start$0$lcssa;
    break;
   } else {
    $done$2407$i = $or$cond2$i ? 1 : $done$2407$i;
    $psum$2408$i = $add62$i;
   }
  }
 } else {
  $conv$i237$in = ($C | 0) > 1;
  $psum$2$lcssa$i = 0;
  $skip_start$0$lcssa235 = $start;
 }
 $conv$i237 = $conv$i237$in & 1;
 $shl1$i238 = $LM << 3;
 $sub396$i = $end + -1 | 0;
 L93 : do if (($sub396$i | 0) > ($skip_start$0$lcssa235 | 0)) {
  $add120$i = $shl136$pre$phi225Z2D + 8 | 0;
  $add142$i = $start + 2 | 0;
  if ($encode | 0) {
   $codedBands$0398$i = $end;
   $intensity_rsv$addr$0400$i = $intensity_rsv$0;
   $psum$3399$i = $psum$2$lcssa$i;
   $sub401$i = $sub396$i;
   while (1) {
    $sub70$i = $total$addr$0 - $psum$3399$i | 0;
    $66 = HEAP32[$eBands90$pre$phi227Z2D >> 2] | 0;
    $conv72$i = HEAP16[$66 + ($codedBands$0398$i << 1) >> 1] | 0;
    $conv75$i = HEAP16[$66 + ($start << 1) >> 1] | 0;
    $sub76$i = $conv72$i - $conv75$i | 0;
    $div$i$i = ($sub70$i >>> 0) / ($sub76$i >>> 0) | 0;
    $sub85$i = $sub70$i - (Math_imul($sub76$i, $div$i$i) | 0) | 0;
    $conv88$i = HEAP16[$66 + ($sub401$i << 1) >> 1] | 0;
    $sub93$i = $sub85$i + ($conv75$i - $conv88$i) | 0;
    $sub114$i = $conv72$i - $conv88$i | 0;
    $arrayidx115$i = $pulses + ($sub401$i << 2) | 0;
    $70 = HEAP32[$arrayidx115$i >> 2] | 0;
    $add118$i = (Math_imul($sub114$i, $div$i$i) | 0) + $70 + (($sub93$i | 0) > 0 ? $sub93$i : 0) | 0;
    $71 = HEAP32[$vla15 + ($sub401$i << 2) >> 2] | 0;
    if (($add118$i | 0) < ((($71 | 0) > ($add120$i | 0) ? $71 : $add120$i) | 0)) {
     $74 = $70;
     $band_bits$0$i = $add118$i;
     $psum$4$i = $psum$3399$i;
    } else {
     if (($codedBands$0398$i | 0) <= ($add142$i | 0)) break;
     if (!(($sub401$i | 0) > ($signalBandwidth | 0) ? 1 : ($add118$i | 0) <= ((Math_imul($sub114$i, ($codedBands$0398$i | 0) > 17 ? (($codedBands$0398$i | 0) > ($prev | 0) ? 9 : 7) : 0) | 0) << $LM << 3 >> 4 | 0))) break;
     _ec_enc_bit_logp($ec, 0, 1);
     $74 = HEAP32[$arrayidx115$i >> 2] | 0;
     $band_bits$0$i = $add118$i + -8 | 0;
     $psum$4$i = $psum$3399$i + 8 | 0;
    }
    if (($intensity_rsv$addr$0400$i | 0) > 0) $intensity_rsv$addr$1$i = HEAPU8[20784 + ($sub401$i - $start) >> 0] | 0; else $intensity_rsv$addr$1$i = $intensity_rsv$addr$0400$i;
    $storemerge$i = ($band_bits$0$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
    $psum$5$i = $psum$4$i - ($74 + $intensity_rsv$addr$0400$i) + $storemerge$i + $intensity_rsv$addr$1$i | 0;
    HEAP32[$arrayidx115$i >> 2] = $storemerge$i;
    $sub$i = $sub401$i + -1 | 0;
    if (($sub$i | 0) > ($skip_start$0$lcssa235 | 0)) {
     $codedBands$0398$i$phi = $sub401$i;
     $intensity_rsv$addr$0400$i = $intensity_rsv$addr$1$i;
     $psum$3399$i = $psum$5$i;
     $sub401$i = $sub$i;
     $codedBands$0398$i = $codedBands$0398$i$phi;
    } else {
     $codedBands$0$lcssa$i = $sub401$i;
     $intensity_rsv$addr$0$lcssa$i = $intensity_rsv$addr$1$i;
     $psum$3$lcssa$i = $psum$5$i;
     label = 57;
     break L93;
    }
   }
   _ec_enc_bit_logp($ec, 1, 1);
   $codedBands$0384$i = $codedBands$0398$i;
   $intensity_rsv$addr$0378$i = $intensity_rsv$addr$0400$i;
   $psum$3381$i = $psum$3399$i;
   $total$addr$1$ph$i = $total$addr$0;
   break;
  }
  $rng$i = $ec + 28 | 0;
  $val$i = $ec + 32 | 0;
  $nbits_total$i$i = $ec + 20 | 0;
  $rem$i$i = $ec + 40 | 0;
  $offs$i$i$i = $ec + 24 | 0;
  $storage$i$i$i = $ec + 4 | 0;
  $codedBands$0398$us$i = $end;
  $intensity_rsv$addr$0400$us$i = $intensity_rsv$0;
  $psum$3399$us$i = $psum$2$lcssa$i;
  $sub401$us$i = $sub396$i;
  while (1) {
   $sub70$us$i = $total$addr$0 - $psum$3399$us$i | 0;
   $46 = HEAP32[$eBands90$pre$phi227Z2D >> 2] | 0;
   $conv72$us$i = HEAP16[$46 + ($codedBands$0398$us$i << 1) >> 1] | 0;
   $conv75$us$i = HEAP16[$46 + ($start << 1) >> 1] | 0;
   $sub76$us$i = $conv72$us$i - $conv75$us$i | 0;
   $div$i$us$i = ($sub70$us$i >>> 0) / ($sub76$us$i >>> 0) | 0;
   $sub85$us$i = $sub70$us$i - (Math_imul($sub76$us$i, $div$i$us$i) | 0) | 0;
   $conv88$us$i = HEAP16[$46 + ($sub401$us$i << 1) >> 1] | 0;
   $sub93$us$i = $sub85$us$i + ($conv75$us$i - $conv88$us$i) | 0;
   $arrayidx115$us$i = $pulses + ($sub401$us$i << 2) | 0;
   $50 = HEAP32[$arrayidx115$us$i >> 2] | 0;
   $add118$us$i = (Math_imul($conv72$us$i - $conv88$us$i | 0, $div$i$us$i) | 0) + $50 + (($sub93$us$i | 0) > 0 ? $sub93$us$i : 0) | 0;
   $51 = HEAP32[$vla15 + ($sub401$us$i << 2) >> 2] | 0;
   if (($add118$us$i | 0) < ((($51 | 0) > ($add120$i | 0) ? $51 : $add120$i) | 0)) {
    $65 = $50;
    $band_bits$0$us$i = $add118$us$i;
    $psum$4$us$i = $psum$3399$us$i;
   } else {
    $52 = HEAP32[$rng$i >> 2] | 0;
    $53 = HEAP32[$val$i >> 2] | 0;
    $shr$i = $52 >>> 1;
    $cmp$i1 = $53 >>> 0 < $shr$i >>> 0;
    if ($cmp$i1) {
     $143 = $53;
     $cond$i = $shr$i;
    } else {
     $sub$i3 = $53 - $shr$i | 0;
     HEAP32[$val$i >> 2] = $sub$i3;
     $143 = $sub$i3;
     $cond$i = $52 - $shr$i | 0;
    }
    HEAP32[$rng$i >> 2] = $cond$i;
    if ($cond$i >>> 0 < 8388609) {
     $$pre14$i$i = HEAP32[$storage$i$i$i >> 2] | 0;
     $54 = HEAP32[$nbits_total$i$i >> 2] | 0;
     $55 = $cond$i;
     $56 = HEAP32[$offs$i$i$i >> 2] | 0;
     $59 = HEAP32[$rem$i$i >> 2] | 0;
     $62 = $143;
     while (1) {
      $54 = $54 + 8 | 0;
      HEAP32[$nbits_total$i$i >> 2] = $54;
      $55 = $55 << 8;
      HEAP32[$rng$i >> 2] = $55;
      if ($56 >>> 0 < $$pre14$i$i >>> 0) {
       $57 = HEAP32[$ec >> 2] | 0;
       $inc$i$i$i = $56 + 1 | 0;
       HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
       $144 = $inc$i$i$i;
       $cond$i$i$i = HEAPU8[$57 + $56 >> 0] | 0;
      } else {
       $144 = $56;
       $cond$i$i$i = 0;
      }
      HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
      $62 = ($62 << 8 & 2147483392 | ($cond$i$i$i | $59 << 8) >>> 1 & 255) ^ 255;
      HEAP32[$val$i >> 2] = $62;
      if ($55 >>> 0 >= 8388609) break; else {
       $56 = $144;
       $59 = $cond$i$i$i;
      }
     }
    }
    if ($cmp$i1) {
     $codedBands$0384$i = $codedBands$0398$us$i;
     $intensity_rsv$addr$0378$i = $intensity_rsv$addr$0400$us$i;
     $psum$3381$i = $psum$3399$us$i;
     $total$addr$1$ph$i = $total$addr$0;
     break L93;
    }
    $65 = HEAP32[$arrayidx115$us$i >> 2] | 0;
    $band_bits$0$us$i = $add118$us$i + -8 | 0;
    $psum$4$us$i = $psum$3399$us$i + 8 | 0;
   }
   if (($intensity_rsv$addr$0400$us$i | 0) > 0) $intensity_rsv$addr$1$us$i = HEAPU8[20784 + ($sub401$us$i - $start) >> 0] | 0; else $intensity_rsv$addr$1$us$i = $intensity_rsv$addr$0400$us$i;
   $storemerge$us$i = ($band_bits$0$us$i | 0) < ($shl136$pre$phi225Z2D | 0) ? 0 : $shl136$pre$phi225Z2D;
   $psum$5$us$i = $psum$4$us$i - ($65 + $intensity_rsv$addr$0400$us$i) + $storemerge$us$i + $intensity_rsv$addr$1$us$i | 0;
   HEAP32[$arrayidx115$us$i >> 2] = $storemerge$us$i;
   $sub$us$i = $sub401$us$i + -1 | 0;
   if (($sub$us$i | 0) > ($skip_start$0$lcssa235 | 0)) {
    $codedBands$0398$us$i$phi = $sub401$us$i;
    $intensity_rsv$addr$0400$us$i = $intensity_rsv$addr$1$us$i;
    $psum$3399$us$i = $psum$5$us$i;
    $sub401$us$i = $sub$us$i;
    $codedBands$0398$us$i = $codedBands$0398$us$i$phi;
   } else {
    $codedBands$0$lcssa$i = $sub401$us$i;
    $intensity_rsv$addr$0$lcssa$i = $intensity_rsv$addr$1$us$i;
    $psum$3$lcssa$i = $psum$5$us$i;
    label = 57;
    break;
   }
  }
 } else {
  $codedBands$0$lcssa$i = $end;
  $intensity_rsv$addr$0$lcssa$i = $intensity_rsv$0;
  $psum$3$lcssa$i = $psum$2$lcssa$i;
  label = 57;
 } while (0);
 if ((label | 0) == 57) {
  $codedBands$0384$i = $codedBands$0$lcssa$i;
  $intensity_rsv$addr$0378$i = $intensity_rsv$addr$0$lcssa$i;
  $psum$3381$i = $psum$3$lcssa$i;
  $total$addr$1$ph$i = $total$addr$0 + $cond2 | 0;
 }
 if (($codedBands$0384$i | 0) <= ($start | 0)) _celt_fatal(49629, 49666, 391);
 do if (($intensity_rsv$addr$0378$i | 0) > 0) if (!$encode) {
  $add215$i = (_ec_dec_uint($ec, $codedBands$0384$i + 1 - $start | 0) | 0) + $start | 0;
  HEAP32[$intensity >> 2] = $add215$i;
  $76 = $add215$i;
  break;
 } else {
  $75 = HEAP32[$intensity >> 2] | 0;
  $$codedBands$0$i = ($75 | 0) < ($codedBands$0384$i | 0) ? $75 : $codedBands$0384$i;
  HEAP32[$intensity >> 2] = $$codedBands$0$i;
  _ec_enc_uint($ec, $$codedBands$0$i - $start | 0, $codedBands$0384$i + 1 - $start | 0);
  $76 = HEAP32[$intensity >> 2] | 0;
  break;
 } else {
  HEAP32[$intensity >> 2] = 0;
  $76 = 0;
 } while (0);
 $cmp219$i = ($76 | 0) > ($start | 0);
 $add222$i = $cmp219$i ? 0 : $dual_stereo_rsv$0;
 do if (($dual_stereo_rsv$0 | 0) > 0 & $cmp219$i) {
  if ($encode | 0) {
   _ec_enc_bit_logp($ec, HEAP32[$dual_stereo >> 2] | 0, 1);
   break;
  }
  $rng$i4 = $ec + 28 | 0;
  $78 = HEAP32[$rng$i4 >> 2] | 0;
  $val$i5 = $ec + 32 | 0;
  $79 = HEAP32[$val$i5 >> 2] | 0;
  $shr$i6 = $78 >>> 1;
  $cmp$i7 = $79 >>> 0 < $shr$i6 >>> 0;
  $conv$i8 = $cmp$i7 & 1;
  if ($cmp$i7) {
   $145 = $79;
   $cond$i12 = $shr$i6;
  } else {
   $sub$i10 = $79 - $shr$i6 | 0;
   HEAP32[$val$i5 >> 2] = $sub$i10;
   $145 = $sub$i10;
   $cond$i12 = $78 - $shr$i6 | 0;
  }
  HEAP32[$rng$i4 >> 2] = $cond$i12;
  if ($cond$i12 >>> 0 < 8388609) {
   $nbits_total$i$i15 = $ec + 20 | 0;
   $rem$i$i16 = $ec + 40 | 0;
   $offs$i$i$i17 = $ec + 24 | 0;
   $$pre14$i$i23 = HEAP32[$ec + 4 >> 2] | 0;
   $80 = HEAP32[$nbits_total$i$i15 >> 2] | 0;
   $81 = $cond$i12;
   $82 = HEAP32[$offs$i$i$i17 >> 2] | 0;
   $85 = HEAP32[$rem$i$i16 >> 2] | 0;
   $88 = $145;
   while (1) {
    $80 = $80 + 8 | 0;
    HEAP32[$nbits_total$i$i15 >> 2] = $80;
    $81 = $81 << 8;
    HEAP32[$rng$i4 >> 2] = $81;
    if ($82 >>> 0 < $$pre14$i$i23 >>> 0) {
     $83 = HEAP32[$ec >> 2] | 0;
     $inc$i$i$i29 = $82 + 1 | 0;
     HEAP32[$offs$i$i$i17 >> 2] = $inc$i$i$i29;
     $146 = $inc$i$i$i29;
     $cond$i$i$i33 = HEAPU8[$83 + $82 >> 0] | 0;
    } else {
     $146 = $82;
     $cond$i$i$i33 = 0;
    }
    HEAP32[$rem$i$i16 >> 2] = $cond$i$i$i33;
    $88 = ($88 << 8 & 2147483392 | ($cond$i$i$i33 | $85 << 8) >>> 1 & 255) ^ 255;
    HEAP32[$val$i5 >> 2] = $88;
    if ($81 >>> 0 >= 8388609) break; else {
     $82 = $146;
     $85 = $cond$i$i$i33;
    }
   }
  }
  HEAP32[$dual_stereo >> 2] = $conv$i8;
 } else HEAP32[$dual_stereo >> 2] = 0; while (0);
 $sub234$i = $add222$i + ($total$addr$1$ph$i - $psum$3381$i) | 0;
 $89 = HEAP32[$eBands90$pre$phi227Z2D >> 2] | 0;
 $91 = HEAP16[$89 + ($start << 1) >> 1] | 0;
 $sub241$i = (HEAP16[$89 + ($codedBands$0384$i << 1) >> 1] | 0) - ($91 << 16 >> 16) | 0;
 $div$i360$i = ($sub234$i >>> 0) / ($sub241$i >>> 0) | 0;
 $93 = $91;
 $j$2395$i = $start;
 do {
  $j$2395$i$looptemp = $j$2395$i;
  $j$2395$i = $j$2395$i + 1 | 0;
  $93$looptemp = $93;
  $93 = HEAP16[$89 + ($j$2395$i << 1) >> 1] | 0;
  $mul264$i = Math_imul(($93 << 16 >> 16) - ($93$looptemp << 16 >> 16) | 0, $div$i360$i) | 0;
  $arrayidx265$i = $pulses + ($j$2395$i$looptemp << 2) | 0;
  HEAP32[$arrayidx265$i >> 2] = $mul264$i + (HEAP32[$arrayidx265$i >> 2] | 0);
 } while (($j$2395$i | 0) != ($codedBands$0384$i | 0));
 $96 = $91;
 $j$3393$i = $start;
 $left$0392$i = $sub234$i - (Math_imul($sub241$i, $div$i360$i) | 0) | 0;
 while (1) {
  $j$3393$i$looptemp = $j$3393$i;
  $j$3393$i = $j$3393$i + 1 | 0;
  $96$looptemp = $96;
  $96 = HEAP16[$89 + ($j$3393$i << 1) >> 1] | 0;
  $sub282$i = ($96 << 16 >> 16) - ($96$looptemp << 16 >> 16) | 0;
  $left$0$sub282$i = ($left$0392$i | 0) < ($sub282$i | 0) ? $left$0392$i : $sub282$i;
  $arrayidx297$i = $pulses + ($j$3393$i$looptemp << 2) | 0;
  HEAP32[$arrayidx297$i >> 2] = $left$0$sub282$i + (HEAP32[$arrayidx297$i >> 2] | 0);
  if (($j$3393$i | 0) == ($codedBands$0384$i | 0)) break; else $left$0392$i = $left$0392$i - $left$0$sub282$i | 0;
 }
 $logN$i = $m + 56 | 0;
 $add457$i = $conv$i237$in ? 4 : 3;
 $100 = $91;
 $balance$0388$i = 0;
 $j$4389$i = $start;
 while (1) {
  $arrayidx307$i = $pulses + ($j$4389$i << 2) | 0;
  $98 = HEAP32[$arrayidx307$i >> 2] | 0;
  if (($98 | 0) <= -1) {
   label = 92;
   break;
  }
  $j$4389$i$looptemp = $j$4389$i;
  $j$4389$i = $j$4389$i + 1 | 0;
  $100$looptemp = $100;
  $100 = HEAP16[$89 + ($j$4389$i << 1) >> 1] | 0;
  $shl320$i = ($100 << 16 >> 16) - ($100$looptemp << 16 >> 16) << $LM;
  $add322$i = $98 + $balance$0388$i | 0;
  if (($shl320$i | 0) > 1) {
   $sub327$i = $add322$i - (HEAP32[$cap + ($j$4389$i$looptemp << 2) >> 2] | 0) | 0;
   $spec$select355$i = ($sub327$i | 0) > 0 ? $sub327$i : 0;
   $sub336$i = $add322$i - $spec$select355$i | 0;
   HEAP32[$arrayidx307$i >> 2] = $sub336$i;
   $mul338$i = Math_imul($shl320$i, $C) | 0;
   if ($cmp3 & ($shl320$i | 0) != 2) if (!(HEAP32[$dual_stereo >> 2] | 0)) $104 = ($j$4389$i$looptemp | 0) < (HEAP32[$intensity >> 2] | 0); else $104 = 0; else $104 = 0;
   $add349$i = $mul338$i + ($104 & 1) | 0;
   $mul353$i = Math_imul($shl1$i238 + (HEAP16[(HEAP32[$logN$i >> 2] | 0) + ($j$4389$i$looptemp << 1) >> 1] | 0) | 0, $add349$i) | 0;
   $107 = Math_imul($add349$i, -21) | 0;
   $shl360$i = $add349$i << 3;
   $spec$select367$i = (($shl320$i | 0) == 2 ? $shl360$i >> 2 : 0) + $107 + ($mul353$i >> 1) | 0;
   $add365$i = $spec$select367$i + $sub336$i | 0;
   if (($add365$i | 0) < ($add349$i << 4 | 0)) $shr371$pn$i = $mul353$i >> 2; else $shr371$pn$i = ($add365$i | 0) < ($add349$i * 24 | 0) ? $mul353$i >> 3 : 0;
   $offset$1$i = $shr371$pn$i + $spec$select367$i | 0;
   $add388$i = ($add349$i << 2) + $sub336$i + $offset$1$i | 0;
   $arrayidx399$i = $ebits + ($j$4389$i$looptemp << 2) | 0;
   $shr402$i = (((($add388$i | 0) > 0 ? $add388$i : 0) >>> 0) / ($add349$i >>> 0) | 0) >>> 3;
   HEAP32[$arrayidx399$i >> 2] = $shr402$i;
   $mul405$i = Math_imul($shr402$i, $C) | 0;
   $109 = HEAP32[$arrayidx307$i >> 2] | 0;
   $spec$select166 = ($mul405$i | 0) > ($109 >> 3 | 0) ? $109 >> $conv$i237 >> 3 : $shr402$i;
   $spec$select357$i = ($spec$select166 | 0) < 8 ? $spec$select166 : 8;
   HEAP32[$arrayidx399$i >> 2] = $spec$select357$i;
   $mul427$i = Math_imul($spec$select357$i, $shl360$i) | 0;
   HEAP32[$fine_priority + ($j$4389$i$looptemp << 2) >> 2] = ($mul427$i | 0) >= ((HEAP32[$arrayidx307$i >> 2] | 0) + $offset$1$i | 0) & 1;
   $shl435$i = Math_imul(HEAP32[$arrayidx399$i >> 2] | 0, $shl136$pre$phi225Z2D) | 0;
   HEAP32[$arrayidx307$i >> 2] = (HEAP32[$arrayidx307$i >> 2] | 0) - $shl435$i;
   $excess$0$i = $spec$select355$i;
  } else {
   $sub440$i = $add322$i - $shl136$pre$phi225Z2D | 0;
   $spec$select358$i = ($sub440$i | 0) > 0 ? $sub440$i : 0;
   HEAP32[$arrayidx307$i >> 2] = $add322$i - $spec$select358$i;
   HEAP32[$ebits + ($j$4389$i$looptemp << 2) >> 2] = 0;
   HEAP32[$fine_priority + ($j$4389$i$looptemp << 2) >> 2] = 1;
   $excess$0$i = $spec$select358$i;
  }
  if (!$excess$0$i) $excess$1$i = 0; else {
   $shr458366$i = $excess$0$i >>> $add457$i;
   $arrayidx459$i = $ebits + ($j$4389$i$looptemp << 2) | 0;
   $114 = HEAP32[$arrayidx459$i >> 2] | 0;
   $sub460$i = 8 - $114 | 0;
   $shr458$sub460$i = ($shr458366$i | 0) < ($sub460$i | 0) ? $shr458366$i : $sub460$i;
   HEAP32[$arrayidx459$i >> 2] = $shr458$sub460$i + $114;
   $shl474$i = Math_imul($shr458$sub460$i, $shl136$pre$phi225Z2D) | 0;
   HEAP32[$fine_priority + ($j$4389$i$looptemp << 2) >> 2] = ($shl474$i | 0) >= ($excess$0$i - $balance$0388$i | 0) & 1;
   $excess$1$i = $excess$0$i - $shl474$i | 0;
  }
  if ((HEAP32[$arrayidx307$i >> 2] | 0) <= -1) {
   label = 105;
   break;
  }
  if ((HEAP32[$ebits + ($j$4389$i$looptemp << 2) >> 2] | 0) <= -1) {
   label = 107;
   break;
  }
  if (($j$4389$i | 0) >= ($codedBands$0384$i | 0)) {
   label = 108;
   break;
  } else $balance$0388$i = $excess$1$i;
 }
 if ((label | 0) == 92) _celt_fatal(49678, 49666, 442); else if ((label | 0) == 105) _celt_fatal(49678, 49666, 513); else if ((label | 0) == 107) _celt_fatal(49709, 49666, 514); else if ((label | 0) == 108) {
  HEAP32[$balance >> 2] = $excess$1$i;
  if (($j$4389$i | 0) >= ($end | 0)) {
   STACKTOP = sp;
   return $codedBands$0384$i | 0;
  }
  $j$5386$i = $j$4389$i;
  while (1) {
   $arrayidx498$i = $pulses + ($j$5386$i << 2) | 0;
   $shr500$i = HEAP32[$arrayidx498$i >> 2] >> $conv$i237 >> 3;
   $arrayidx501$i = $ebits + ($j$5386$i << 2) | 0;
   HEAP32[$arrayidx501$i >> 2] = $shr500$i;
   $shl504$i = Math_imul($shr500$i, $shl136$pre$phi225Z2D) | 0;
   if (($shl504$i | 0) != (HEAP32[$arrayidx498$i >> 2] | 0)) {
    label = 111;
    break;
   }
   HEAP32[$arrayidx498$i >> 2] = 0;
   HEAP32[$fine_priority + ($j$5386$i << 2) >> 2] = (HEAP32[$arrayidx501$i >> 2] | 0) < 1 & 1;
   $j$5386$i = $j$5386$i + 1 | 0;
   if (($j$5386$i | 0) >= ($end | 0)) {
    label = 137;
    break;
   }
  }
  if ((label | 0) == 111) _celt_fatal(49741, 49666, 524); else if ((label | 0) == 137) {
   STACKTOP = sp;
   return $codedBands$0384$i | 0;
  }
 }
 return 0;
}

function _opus_decode_frame($st, $data, $len, $pcm, $frame_size, $decode_fec) {
 $st = $st | 0;
 $data = $data | 0;
 $len = $len | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $decode_fec = $decode_fec | 0;
 var $$mul78 = 0, $$pre$i$i$i = 0, $$pre$phiZ2D = 0, $$pre109 = 0, $$pre12$i$i$i = 0, $$pre12$i$i36 = 0, $$pre13$i$i$i = 0, $$pre13$i$i37 = 0, $$pre14$i$i = 0, $$pre14$i$i78 = 0, $$sink = 0, $10 = 0, $102 = 0, $105 = 0.0, $108 = 0, $111 = 0.0, $115 = 0.0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $96 = 0, $97 = 0, $99 = 0.0, $DecControl = 0, $Fs = 0, $add$i$i$i = 0, $add$i$i40 = 0, $add$i$i80 = 0, $add$i38$i = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr457 = 0, $add$ptr460 = 0, $add$ptr497 = 0, $add$ptr500 = 0, $add$ptr525 = 0, $add$ptr528 = 0, $add$us$i = 0, $add$us$i369 = 0, $add$us$i396 = 0, $add$us$i423 = 0, $add483$us = 0, $and7$i$1$i = 0, $and7$i$i = 0, $and7$i$i54 = 0, $arrayidx12$us$i400 = 0, $arrayidx406 = 0, $arrayidx553 = 0, $arrayidx8$us$i = 0, $arrayidx8$us$i370 = 0, $arrayidx8$us$i424 = 0, $audiosize$0 = 0, $audiosize$2459$ph = 0, $audiosize$2459561 = 0, $bandwidth$0455$ph = 0, $bandwidth$0455565 = 0, $c$024$us$i = 0, $c$024$us$i362 = 0, $c$024$us$i389 = 0, $c$024$us$i416 = 0, $c$0536$us = 0, $call = 0, $call231487$in = 0, $celt_ret$0 = 0, $celt_to_silk$0498 = 0, $celt_to_silk$0498587 = 0, $channels108 = 0, $channels40 = 0, $cmp$i = 0, $cmp$i22 = 0, $cmp$i62 = 0, $cmp20446452$ph = 0, $cmp20446452571 = 0, $cmp247 = 0, $cmp65 = 0, $cmp68 = 0, $cmp86574 = 0, $cond$i$i$1$i = 0, $cond$i$i$2$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i48 = 0, $cond$i$i$i88 = 0, $cond$i27 = 0, $cond$i67 = 0, $cond$i99 = 0, $cond166 = 0, $cond243 = 0, $cond338 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv546 = 0.0, $data$addr$0443453$ph = 0, $data$addr$0443453568 = 0, $dec = 0, $dec$idx$val = 0, $dec$idx$val$pre = 0, $dec$idx350$val$pre = 0, $dec$idx351$val = 0, $dec$idx352$val = 0, $dec$idx353 = 0, $dec$idx353$val = 0, $dec$idx354 = 0, $dec$idx354$val = 0, $decoded_samples$0 = 0, $decoded_samples$0$us = 0, $div = 0, $div$i = 0, $div$i$i34$i = 0, $div$i357 = 0, $div$i384 = 0, $div$i411 = 0, $div123 = 0, $endband$0 = 0, $frame_size$addr$0441454$ph = 0, $frame_size$addr$0441454567 = 0, $frame_size$addr$0442 = 0, $frame_size$mul = 0, $i$022$us$i = 0, $i$022$us$i364 = 0, $i$022$us$i391 = 0, $i$022$us$i418 = 0, $i$3541 = 0, $i$4534$us = 0, $i$5531 = 0, $i$6528 = 0, $inc$i$i$2$pre$phi$iZZZZ2D = 0, $inc$i$i$i$i = 0, $inc$i$i$i44 = 0, $inc$i$i$i7 = 0, $inc$i$i$i84 = 0, $len$addr$1499 = 0, $len$addr$1499585 = 0, $mode$0457$ph = 0, $mode$0457564 = 0, $mode$0458478492 = 0, $mode$0458478492591 = 0, $mul = 0, $mul$i$i = 0, $mul177545 = 0, $mul27523 = 0, $mul367542 = 0, $mul402539 = 0, $mul496 = 0, $mul514529 = 0, $mul549526 = 0, $mul6$us$i = 0.0, $mul6$us$i367 = 0.0, $mul6$us$i394 = 0.0, $mul6$us$i421 = 0.0, $mul78 = 0, $nbits_total$i = 0, $offs$i = 0, $offs$i$i$i = 0, $offs$i$i$i72 = 0, $or$cond597 = 0, $or$cond8517 = 0, $pcm$addr$0 = 0, $pcm_ptr$0 = 0, $pcm_ptr$0$us = 0, $pcm_transition$0 = 0, $pcm_transition$1 = 0, $pcm_transition_silk_size$0573 = 0, $redundancy$0483485 = 0, $redundancy$2496 = 0, $redundancy$2496589 = 0, $redundancy_bytes$1497 = 0, $redundancy_bytes$1497588 = 0, $redundant_rng = 0, $rem$i = 0, $rem$i$i = 0, $rem$i$i71 = 0, $retval$4 = 0, $retval$5 = 0, $rng$i = 0, $shl$i$i = 0, $shl$i$i$i = 0, $shl$i$i41 = 0, $shl$i$i81 = 0, $shr = 0, $shr$i = 0, $shr$i21 = 0, $shr$i61 = 0, $shr2 = 0, $shr3 = 0, $silk_frame_size = 0, $spec$select345 = 0, $spec$select90$i = 0, $storage$i$i$i = 0, $storage$i$i$i73 = 0, $storage$phi$trans$insert$phi$trans$insert = 0, $storage$phi$trans$insert$pre$phiZZZZ2D = 0, $storage$pre$phiZ2D = 0, $sub$i = 0, $sub$i25 = 0, $sub$i65 = 0, $sub1$i$i = 0, $sub244 = 0, $sub3$i = 0, $sub3$i3 = 0, $sub6$i41$i = 0, $tobool204 = 0, $tobool204481489 = 0, $tobool204481489592 = 0, $tobool258 = 0, $tobool258593 = 0, $tobool262594 = 0, $tobool307516 = 0, $transition$0572 = 0, $val$i = 0, $val$i2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vla = 0, $vla113 = 0, $vla113462 = 0, $vla113462$alloca_mul = 0, $vla113464476494590 = 0, $vla261 = 0, $vla304 = 0, $vla304$alloca_mul = 0, $vla304512 = 0, $vla304515 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer26 = sp + 80 | 0;
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer21 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $dec = sp + 96 | 0;
 $silk_frame_size = sp + 88 | 0;
 $redundant_rng = sp + 84 | 0;
 HEAP32[$redundant_rng >> 2] = 0;
 $add$ptr = $st + (HEAP32[$st + 4 >> 2] | 0) | 0;
 $add$ptr1 = $st + (HEAP32[$st >> 2] | 0) | 0;
 $Fs = $st + 12 | 0;
 $2 = HEAP32[$Fs >> 2] | 0;
 $div = ($2 | 0) / 50 | 0;
 $shr = $div >> 1;
 $shr2 = $div >> 2;
 $shr3 = $div >> 3;
 if (($shr3 | 0) > ($frame_size | 0)) {
  $retval$5 = -2;
  STACKTOP = sp;
  return $retval$5 | 0;
 }
 $mul = (($2 | 0) / 25 | 0) * 3 | 0;
 $frame_size$mul = ($mul | 0) > ($frame_size | 0) ? $frame_size : $mul;
 do if (($len | 0) < 2) {
  $3 = HEAP32[$st + 64 >> 2] | 0;
  $frame_size$addr$0442 = ($frame_size$mul | 0) < ($3 | 0) ? $frame_size$mul : $3;
  label = 5;
 } else if (!$data) {
  $frame_size$addr$0442 = $frame_size$mul;
  label = 5;
 } else {
  $8 = HEAP32[$st + 64 >> 2] | 0;
  $9 = HEAP32[$st + 56 >> 2] | 0;
  $10 = HEAP32[$st + 52 >> 2] | 0;
  HEAP32[$dec >> 2] = $data;
  HEAP32[$dec + 4 >> 2] = $len;
  HEAP32[$dec + 8 >> 2] = 0;
  HEAP32[$dec + 12 >> 2] = 0;
  HEAP32[$dec + 16 >> 2] = 0;
  $nbits_total$i = $dec + 20 | 0;
  $offs$i = $dec + 24 | 0;
  $rng$i = $dec + 28 | 0;
  HEAP32[$offs$i >> 2] = 1;
  $conv$i$i = HEAPU8[$data >> 0] | 0;
  $rem$i = $dec + 40 | 0;
  HEAP32[$rem$i >> 2] = $conv$i$i;
  $sub3$i = $conv$i$i >>> 1 ^ 127;
  $val$i = $dec + 32 | 0;
  HEAP32[$val$i >> 2] = $sub3$i;
  HEAP32[$dec + 44 >> 2] = 0;
  HEAP32[$nbits_total$i >> 2] = 17;
  HEAP32[$rng$i >> 2] = 32768;
  HEAP32[$offs$i >> 2] = 2;
  $conv$i$i$i = HEAPU8[$data + 1 >> 0] | 0;
  HEAP32[$rem$i >> 2] = $conv$i$i$i;
  $and7$i$i = ($sub3$i << 8 | ($conv$i$i$i | $conv$i$i << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i >> 2] = $and7$i$i;
  HEAP32[$nbits_total$i >> 2] = 25;
  HEAP32[$rng$i >> 2] = 8388608;
  if (2 < $len >>> 0) {
   HEAP32[$offs$i >> 2] = 3;
   $18 = 3;
   $cond$i$i$1$i = HEAPU8[$data + 2 >> 0] | 0;
   $inc$i$i$2$pre$phi$iZZZZ2D = 4;
  } else {
   $18 = 2;
   $cond$i$i$1$i = 0;
   $inc$i$i$2$pre$phi$iZZZZ2D = 3;
  }
  HEAP32[$rem$i >> 2] = $cond$i$i$1$i;
  $and7$i$1$i = ($and7$i$i << 8 & 2147483392 | ($cond$i$i$1$i | $conv$i$i$i << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i >> 2] = $and7$i$1$i;
  HEAP32[$nbits_total$i >> 2] = 33;
  HEAP32[$rng$i >> 2] = -2147483648;
  if ($18 >>> 0 < $len >>> 0) {
   HEAP32[$offs$i >> 2] = $inc$i$i$2$pre$phi$iZZZZ2D;
   $cond$i$i$2$i = HEAPU8[$data + $18 >> 0] | 0;
  } else $cond$i$i$2$i = 0;
  HEAP32[$rem$i >> 2] = $cond$i$i$2$i;
  HEAP32[$val$i >> 2] = ($and7$i$1$i << 8 & 2147483392 | ($cond$i$i$2$i | $cond$i$i$1$i << 8) >>> 1 & 255) ^ 255;
  $22 = HEAP32[$st + 60 >> 2] | 0;
  if (($22 | 0) > 0) {
   $cmp65 = ($9 | 0) == 1002;
   $cmp68 = ($22 | 0) == 1002;
   if ($cmp68 | $cmp65 ^ 1) label = 21; else if (HEAP32[$st + 68 >> 2] | 0) label = 21;
   if ((label | 0) == 21) {
    if ($cmp65) {
     $audiosize$2459$ph = $8;
     $bandwidth$0455$ph = $10;
     $cmp20446452$ph = 1;
     $data$addr$0443453$ph = $data;
     $frame_size$addr$0441454$ph = $frame_size$mul;
     $mode$0457$ph = 1002;
     label = 23;
     break;
    }
    if (!$cmp68) {
     $audiosize$2459$ph = $8;
     $bandwidth$0455$ph = $10;
     $cmp20446452$ph = 1;
     $data$addr$0443453$ph = $data;
     $frame_size$addr$0441454$ph = $frame_size$mul;
     $mode$0457$ph = $9;
     label = 23;
     break;
    }
   }
   $mul78 = Math_imul(HEAP32[$st + 8 >> 2] | 0, $shr2) | 0;
   $$mul78 = $cmp65 ? 1 : $mul78;
   $26 = _llvm_stacksave() | 0;
   $vla = STACKTOP;
   STACKTOP = STACKTOP + ((1 * (($cmp65 ? $mul78 : 1) << 2) | 0) + 15 & -16) | 0;
   if ($cmp65) {
    _opus_decode_frame($st, 0, 0, $vla, ($shr2 | 0) < ($8 | 0) ? $shr2 : $8, 0) | 0;
    $126 = $26;
    $audiosize$2459561 = $8;
    $bandwidth$0455565 = $10;
    $cmp20446452571 = 1;
    $cmp86574 = 1;
    $data$addr$0443453568 = $data;
    $frame_size$addr$0441454567 = $frame_size$mul;
    $mode$0457564 = 1002;
    $pcm_transition$0 = $vla;
    $pcm_transition_silk_size$0573 = $$mul78;
    $transition$0572 = 1;
   } else {
    $126 = $26;
    $audiosize$2459561 = $8;
    $bandwidth$0455565 = $10;
    $cmp20446452571 = 1;
    $cmp86574 = 0;
    $data$addr$0443453568 = $data;
    $frame_size$addr$0441454567 = $frame_size$mul;
    $mode$0457564 = $9;
    $pcm_transition$0 = 0;
    $pcm_transition_silk_size$0573 = $$mul78;
    $transition$0572 = 1;
   }
  } else {
   $audiosize$2459$ph = $8;
   $bandwidth$0455$ph = $10;
   $cmp20446452$ph = 1;
   $data$addr$0443453$ph = $data;
   $frame_size$addr$0441454$ph = $frame_size$mul;
   $mode$0457$ph = $9;
   label = 23;
  }
 } while (0);
 do if ((label | 0) == 5) {
  $4 = HEAP32[$st + 60 >> 2] | 0;
  if (!$4) {
   $mul27523 = Math_imul(HEAP32[$st + 8 >> 2] | 0, $frame_size$addr$0442) | 0;
   if (($mul27523 | 0) <= 0) {
    $retval$5 = $frame_size$addr$0442;
    STACKTOP = sp;
    return $retval$5 | 0;
   }
   _memset($pcm | 0, 0, $mul27523 << 2 | 0) | 0;
   $retval$5 = $frame_size$addr$0442;
   STACKTOP = sp;
   return $retval$5 | 0;
  }
  if (($frame_size$addr$0442 | 0) <= ($div | 0)) {
   if (($frame_size$addr$0442 | 0) >= ($div | 0)) {
    $audiosize$2459$ph = $frame_size$addr$0442;
    $bandwidth$0455$ph = 0;
    $cmp20446452$ph = 0;
    $data$addr$0443453$ph = 0;
    $frame_size$addr$0441454$ph = $frame_size$addr$0442;
    $mode$0457$ph = $4;
    label = 23;
    break;
   }
   $audiosize$2459$ph = ($frame_size$addr$0442 | 0) > ($shr | 0) ? $shr : ($frame_size$addr$0442 | 0) < ($shr | 0) & (($frame_size$addr$0442 | 0) > ($shr2 | 0) & ($4 | 0) != 1e3) ? $shr2 : $frame_size$addr$0442;
   $bandwidth$0455$ph = 0;
   $cmp20446452$ph = 0;
   $data$addr$0443453$ph = 0;
   $frame_size$addr$0441454$ph = $frame_size$addr$0442;
   $mode$0457$ph = $4;
   label = 23;
   break;
  }
  $channels40 = $st + 8 | 0;
  $audiosize$0 = $frame_size$addr$0442;
  $pcm$addr$0 = $pcm;
  while (1) {
   $call = _opus_decode_frame($st, 0, 0, $pcm$addr$0, ($audiosize$0 | 0) < ($div | 0) ? $audiosize$0 : $div, 0) | 0;
   $audiosize$0 = $audiosize$0 - $call | 0;
   if (($call | 0) < 0) {
    $retval$5 = $call;
    label = 169;
    break;
   }
   $pcm$addr$0 = $pcm$addr$0 + ((Math_imul(HEAP32[$channels40 >> 2] | 0, $call) | 0) << 2) | 0;
   if (($audiosize$0 | 0) <= 0) {
    $retval$5 = $frame_size$addr$0442;
    label = 169;
    break;
   }
  }
  if ((label | 0) == 169) {
   STACKTOP = sp;
   return $retval$5 | 0;
  }
 } while (0);
 if ((label | 0) == 23) {
  $126 = _llvm_stacksave() | 0;
  $audiosize$2459561 = $audiosize$2459$ph;
  $bandwidth$0455565 = $bandwidth$0455$ph;
  $cmp20446452571 = $cmp20446452$ph;
  $cmp86574 = ($mode$0457$ph | 0) == 1002;
  $data$addr$0443453568 = $data$addr$0443453$ph;
  $frame_size$addr$0441454567 = $frame_size$addr$0441454$ph;
  $mode$0457564 = $mode$0457$ph;
  $pcm_transition$0 = 0;
  $pcm_transition_silk_size$0573 = 1;
  $transition$0572 = 0;
 }
 L44 : do if (($audiosize$2459561 | 0) > ($frame_size$addr$0441454567 | 0)) $retval$4 = -1; else {
  if ($cmp86574) {
   $vla113 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $85 = 0;
   $celt_to_silk$0498587 = 0;
   $len$addr$1499585 = $len;
   $mode$0458478492591 = 1002;
   $pcm_transition$1 = $pcm_transition$0;
   $redundancy$2496589 = 0;
   $redundancy_bytes$1497588 = 0;
   $tobool204481489592 = ($decode_fec | 0) == 0;
   $tobool258593 = 0;
   $tobool262594 = $transition$0572;
   $vla113464476494590 = $vla113;
  } else {
   $channels108 = $st + 8 | 0;
   $vla113462$alloca_mul = (Math_imul(HEAP32[$channels108 >> 2] | 0, ($shr | 0) > ($audiosize$2459561 | 0) ? $shr : $audiosize$2459561) | 0) << 1;
   $vla113462 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $vla113462$alloca_mul | 0) + 15 & -16) | 0;
   if ((HEAP32[$st + 60 >> 2] | 0) == 1002) _silk_InitDecoder($add$ptr);
   $div123 = ($audiosize$2459561 * 1e3 | 0) / (HEAP32[$Fs >> 2] | 0) | 0;
   $DecControl = $st + 16 | 0;
   HEAP32[$st + 32 >> 2] = ($div123 | 0) > 10 ? $div123 : 10;
   L52 : do if ($cmp20446452571) {
    HEAP32[$st + 20 >> 2] = HEAP32[$st + 48 >> 2];
    if (($mode$0457564 | 0) != 1e3) {
     HEAP32[$st + 28 >> 2] = 16e3;
     break;
    }
    switch ($bandwidth$0455565 | 0) {
    case 1101:
     {
      HEAP32[$st + 28 >> 2] = 8e3;
      break L52;
      break;
     }
    case 1102:
     {
      HEAP32[$st + 28 >> 2] = 12e3;
      break L52;
      break;
     }
    default:
     {
      HEAP32[$st + 28 >> 2] = 16e3;
      if (($bandwidth$0455565 | 0) == 1103) break L52;
      _celt_fatal(56336, 55265, 389);
     }
    }
   } while (0);
   $cond166 = ($data$addr$0443453568 | 0) == 0 ? 1 : $decode_fec << 1;
   if (!$cond166) {
    $decoded_samples$0$us = 0;
    $pcm_ptr$0$us = $vla113462;
    do {
     if (_silk_Decode($add$ptr, $DecControl, 0, ($decoded_samples$0$us | 0) == 0 & 1, $dec, $pcm_ptr$0$us, $silk_frame_size) | 0) {
      $retval$4 = -3;
      break L44;
     }
     $32 = HEAP32[$silk_frame_size >> 2] | 0;
     $pcm_ptr$0$us = $pcm_ptr$0$us + ((Math_imul(HEAP32[$channels108 >> 2] | 0, $32) | 0) << 1) | 0;
     $decoded_samples$0$us = $32 + $decoded_samples$0$us | 0;
    } while (($decoded_samples$0$us | 0) < ($audiosize$2459561 | 0));
   } else {
    $decoded_samples$0 = 0;
    $pcm_ptr$0 = $vla113462;
    do {
     if (_silk_Decode($add$ptr, $DecControl, $cond166, ($decoded_samples$0 | 0) == 0 & 1, $dec, $pcm_ptr$0, $silk_frame_size) | 0) {
      HEAP32[$silk_frame_size >> 2] = $audiosize$2459561;
      $mul177545 = Math_imul(HEAP32[$channels108 >> 2] | 0, $audiosize$2459561) | 0;
      if (($mul177545 | 0) > 0) _memset($pcm_ptr$0 | 0, 0, $mul177545 << 1 | 0) | 0;
     }
     $36 = HEAP32[$silk_frame_size >> 2] | 0;
     $pcm_ptr$0 = $pcm_ptr$0 + ((Math_imul(HEAP32[$channels108 >> 2] | 0, $36) | 0) << 1) | 0;
     $decoded_samples$0 = $36 + $decoded_samples$0 | 0;
    } while (($decoded_samples$0 | 0) < ($audiosize$2459561 | 0));
   }
   $tobool204 = ($decode_fec | 0) == 0;
   do if ($tobool204 & $cmp20446452571) {
    $dec$idx353 = $dec + 20 | 0;
    $dec$idx353$val = HEAP32[$dec$idx353 >> 2] | 0;
    $dec$idx354 = $dec + 28 | 0;
    $dec$idx354$val = HEAP32[$dec$idx354 >> 2] | 0;
    $38 = Math_clz32($dec$idx354$val | 0) | 0;
    if (($dec$idx353$val + -15 + $38 + ((HEAP32[$st + 56 >> 2] | 0) == 1001 ? 20 : 0) | 0) > ($len << 3 | 0)) {
     $celt_to_silk$0498 = 0;
     $len$addr$1499 = $len;
     $mode$0458478492 = $mode$0457564;
     $redundancy$2496 = 0;
     $redundancy_bytes$1497 = 0;
     $tobool204481489 = 1;
    } else {
     $val$i2 = $dec + 32 | 0;
     $40 = HEAP32[$val$i2 >> 2] | 0;
     if (($mode$0457564 | 0) == 1001) {
      $shr$i = $dec$idx354$val >>> 12;
      $cmp$i = $40 >>> 0 < $shr$i >>> 0;
      $conv$i = $cmp$i & 1;
      if ($cmp$i) {
       HEAP32[$dec$idx354 >> 2] = $shr$i;
       $127 = $40;
       $cond$i99 = $shr$i;
      } else {
       $sub3$i3 = $dec$idx354$val - $shr$i | 0;
       $sub$i = $40 - $shr$i | 0;
       HEAP32[$val$i2 >> 2] = $sub$i;
       HEAP32[$dec$idx354 >> 2] = $sub3$i3;
       if ($sub3$i3 >>> 0 < 8388609) {
        $127 = $sub$i;
        $cond$i99 = $sub3$i3;
       } else {
        $celt_to_silk$0498 = 0;
        $len$addr$1499 = $len;
        $mode$0458478492 = 1001;
        $redundancy$2496 = 0;
        $redundancy_bytes$1497 = 0;
        $tobool204481489 = 1;
        break;
       }
      }
      $rem$i$i = $dec + 40 | 0;
      $offs$i$i$i = $dec + 24 | 0;
      $storage$i$i$i = $dec + 4 | 0;
      $$pre14$i$i = HEAP32[$storage$i$i$i >> 2] | 0;
      $41 = $dec$idx353$val;
      $42 = $cond$i99;
      $43 = HEAP32[$offs$i$i$i >> 2] | 0;
      $46 = HEAP32[$rem$i$i >> 2] | 0;
      $49 = $127;
      while (1) {
       $41 = $41 + 8 | 0;
       HEAP32[$dec$idx353 >> 2] = $41;
       $shl$i$i = $42 << 8;
       HEAP32[$dec$idx354 >> 2] = $shl$i$i;
       if ($43 >>> 0 < $$pre14$i$i >>> 0) {
        $44 = HEAP32[$dec >> 2] | 0;
        $inc$i$i$i7 = $43 + 1 | 0;
        HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i7;
        $$pre12$i$i36 = HEAPU8[$44 + $43 >> 0] | 0;
        $$pre13$i$i37 = $inc$i$i$i7;
       } else {
        $$pre12$i$i36 = 0;
        $$pre13$i$i37 = $43;
       }
       HEAP32[$rem$i$i >> 2] = $$pre12$i$i36;
       $49 = ($49 << 8 & 2147483392 | ($$pre12$i$i36 | $46 << 8) >>> 1 & 255) ^ 255;
       HEAP32[$val$i2 >> 2] = $49;
       if ($shl$i$i >>> 0 >= 8388609) break; else {
        $42 = $shl$i$i;
        $43 = $$pre13$i$i37;
        $46 = $$pre12$i$i36;
       }
      }
      if (!$cmp$i) {
       $celt_to_silk$0498 = 0;
       $len$addr$1499 = $len;
       $mode$0458478492 = 1001;
       $redundancy$2496 = 0;
       $redundancy_bytes$1497 = 0;
       $tobool204481489 = 1;
       break;
      }
      $shr$i21 = $42 << 7 & 2147483520;
      $cmp$i22 = $49 >>> 0 < $shr$i21 >>> 0;
      if ($cmp$i22) {
       $128 = $49;
       $cond$i27 = $shr$i21;
      } else {
       $sub$i25 = $49 - $shr$i21 | 0;
       HEAP32[$val$i2 >> 2] = $sub$i25;
       $128 = $sub$i25;
       $cond$i27 = $shl$i$i - $shr$i21 | 0;
      }
      HEAP32[$dec$idx354 >> 2] = $cond$i27;
      if ($cond$i27 >>> 0 < 8388609) {
       $51 = $41;
       $52 = $cond$i27;
       $53 = $$pre13$i$i37;
       $56 = $$pre12$i$i36;
       $59 = $128;
       while (1) {
        $add$i$i40 = $51 + 8 | 0;
        HEAP32[$dec$idx353 >> 2] = $add$i$i40;
        $shl$i$i41 = $52 << 8;
        HEAP32[$dec$idx354 >> 2] = $shl$i$i41;
        if ($53 >>> 0 < $$pre14$i$i >>> 0) {
         $54 = HEAP32[$dec >> 2] | 0;
         $inc$i$i$i44 = $53 + 1 | 0;
         HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i44;
         $129 = $inc$i$i$i44;
         $cond$i$i$i48 = HEAPU8[$54 + $53 >> 0] | 0;
        } else {
         $129 = $53;
         $cond$i$i$i48 = 0;
        }
        HEAP32[$rem$i$i >> 2] = $cond$i$i$i48;
        $and7$i$i54 = ($59 << 8 & 2147483392 | ($cond$i$i$i48 | $56 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i2 >> 2] = $and7$i$i54;
        if ($shl$i$i41 >>> 0 < 8388609) {
         $51 = $add$i$i40;
         $52 = $shl$i$i41;
         $53 = $129;
         $56 = $cond$i$i$i48;
         $59 = $and7$i$i54;
        } else {
         $$pre$i$i$i = $add$i$i40;
         $$pre12$i$i$i = $cond$i$i$i48;
         $$pre13$i$i$i = $129;
         $60 = $shl$i$i41;
         $61 = $and7$i$i54;
         break;
        }
       }
      } else {
       $$pre$i$i$i = $41;
       $$pre12$i$i$i = $$pre12$i$i36;
       $$pre13$i$i$i = $$pre13$i$i37;
       $60 = $cond$i27;
       $61 = $128;
      }
      $div$i$i34$i = $60 >>> 8;
      HEAP32[$dec + 36 >> 2] = $div$i$i34$i;
      $add$i38$i = (($61 >>> 0) / ($div$i$i34$i >>> 0) | 0) + 1 | 0;
      $sub6$i41$i = 256 - ($add$i38$i >>> 0 < 256 ? $add$i38$i : 256) | 0;
      $mul$i$i = Math_imul(255 - $sub6$i41$i | 0, $div$i$i34$i) | 0;
      $sub1$i$i = $61 - $mul$i$i | 0;
      HEAP32[$val$i2 >> 2] = $sub1$i$i;
      $spec$select90$i = ($sub6$i41$i | 0) == 0 ? $60 - $mul$i$i | 0 : $div$i$i34$i;
      HEAP32[$dec$idx354 >> 2] = $spec$select90$i;
      if ($spec$select90$i >>> 0 < 8388609) {
       $63 = $$pre$i$i$i;
       $64 = $spec$select90$i;
       $65 = $$pre13$i$i$i;
       $68 = $$pre12$i$i$i;
       $71 = $sub1$i$i;
       while (1) {
        $add$i$i$i = $63 + 8 | 0;
        HEAP32[$dec$idx353 >> 2] = $add$i$i$i;
        $shl$i$i$i = $64 << 8;
        HEAP32[$dec$idx354 >> 2] = $shl$i$i$i;
        if ($65 >>> 0 < $$pre14$i$i >>> 0) {
         $66 = HEAP32[$dec >> 2] | 0;
         $inc$i$i$i$i = $65 + 1 | 0;
         HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i$i;
         $130 = $inc$i$i$i$i;
         $cond$i$i$i$i = HEAPU8[$66 + $65 >> 0] | 0;
        } else {
         $130 = $65;
         $cond$i$i$i$i = 0;
        }
        HEAP32[$rem$i$i >> 2] = $cond$i$i$i$i;
        $71 = (($cond$i$i$i$i | $68 << 8) >>> 1 & 255 | $71 << 8 & 2147483392) ^ 255;
        HEAP32[$val$i2 >> 2] = $71;
        if ($shl$i$i$i >>> 0 >= 8388609) {
         $dec$idx$val$pre = $add$i$i$i;
         $dec$idx350$val$pre = $shl$i$i$i;
         break;
        } else {
         $63 = $add$i$i$i;
         $64 = $shl$i$i$i;
         $65 = $130;
         $68 = $cond$i$i$i$i;
        }
       }
      } else {
       $dec$idx$val$pre = $$pre$i$i$i;
       $dec$idx350$val$pre = $spec$select90$i;
      }
      $$pre$phiZ2D = Math_clz32($dec$idx350$val$pre | 0) | 0;
      $82 = $$pre14$i$i;
      $call231487$in = $cmp$i22;
      $cond243 = $sub6$i41$i + 2 | 0;
      $dec$idx$val = $dec$idx$val$pre;
      $redundancy$0483485 = $conv$i;
      $storage$pre$phiZ2D = $storage$i$i$i;
     } else {
      $shr$i61 = $dec$idx354$val >>> 1;
      $cmp$i62 = $40 >>> 0 < $shr$i61 >>> 0;
      if ($cmp$i62) {
       $131 = $40;
       $cond$i67 = $shr$i61;
      } else {
       $sub$i65 = $40 - $shr$i61 | 0;
       HEAP32[$val$i2 >> 2] = $sub$i65;
       $131 = $sub$i65;
       $cond$i67 = $dec$idx354$val - $shr$i61 | 0;
      }
      HEAP32[$dec$idx354 >> 2] = $cond$i67;
      if ($cond$i67 >>> 0 < 8388609) {
       $rem$i$i71 = $dec + 40 | 0;
       $offs$i$i$i72 = $dec + 24 | 0;
       $storage$i$i$i73 = $dec + 4 | 0;
       $$pre14$i$i78 = HEAP32[$storage$i$i$i73 >> 2] | 0;
       $72 = $dec$idx353$val;
       $73 = $cond$i67;
       $74 = HEAP32[$offs$i$i$i72 >> 2] | 0;
       $77 = HEAP32[$rem$i$i71 >> 2] | 0;
       $80 = $131;
       while (1) {
        $add$i$i80 = $72 + 8 | 0;
        HEAP32[$dec$idx353 >> 2] = $add$i$i80;
        $shl$i$i81 = $73 << 8;
        HEAP32[$dec$idx354 >> 2] = $shl$i$i81;
        if ($74 >>> 0 < $$pre14$i$i78 >>> 0) {
         $75 = HEAP32[$dec >> 2] | 0;
         $inc$i$i$i84 = $74 + 1 | 0;
         HEAP32[$offs$i$i$i72 >> 2] = $inc$i$i$i84;
         $132 = $inc$i$i$i84;
         $cond$i$i$i88 = HEAPU8[$75 + $74 >> 0] | 0;
        } else {
         $132 = $74;
         $cond$i$i$i88 = 0;
        }
        HEAP32[$rem$i$i71 >> 2] = $cond$i$i$i88;
        $80 = ($80 << 8 & 2147483392 | ($cond$i$i$i88 | $77 << 8) >>> 1 & 255) ^ 255;
        HEAP32[$val$i2 >> 2] = $80;
        if ($shl$i$i81 >>> 0 >= 8388609) {
         $$pre109 = $$pre14$i$i78;
         $dec$idx351$val = $add$i$i80;
         $dec$idx352$val = $shl$i$i81;
         $storage$phi$trans$insert$pre$phiZZZZ2D = $storage$i$i$i73;
         break;
        } else {
         $72 = $add$i$i80;
         $73 = $shl$i$i81;
         $74 = $132;
         $77 = $cond$i$i$i88;
        }
       }
      } else {
       $storage$phi$trans$insert$phi$trans$insert = $dec + 4 | 0;
       $$pre109 = HEAP32[$storage$phi$trans$insert$phi$trans$insert >> 2] | 0;
       $dec$idx351$val = $dec$idx353$val;
       $dec$idx352$val = $cond$i67;
       $storage$phi$trans$insert$pre$phiZZZZ2D = $storage$phi$trans$insert$phi$trans$insert;
      }
      $81 = Math_clz32($dec$idx352$val | 0) | 0;
      $$pre$phiZ2D = $81;
      $82 = $$pre109;
      $call231487$in = $cmp$i62;
      $cond243 = $len - ($dec$idx351$val + -25 + $81 >> 3) | 0;
      $dec$idx$val = $dec$idx351$val;
      $redundancy$0483485 = 1;
      $storage$pre$phiZ2D = $storage$phi$trans$insert$pre$phiZZZZ2D;
     }
     $sub244 = $len - $cond243 | 0;
     $cmp247 = ($sub244 << 3 | 0) < ($dec$idx$val + -32 + $$pre$phiZ2D | 0);
     $spec$select345 = $cmp247 ? 0 : $cond243;
     HEAP32[$storage$pre$phiZ2D >> 2] = $82 - $spec$select345;
     $celt_to_silk$0498 = $call231487$in & 1;
     $len$addr$1499 = $cmp247 ? 0 : $sub244;
     $mode$0458478492 = $mode$0457564;
     $redundancy$2496 = $cmp247 ? 0 : $redundancy$0483485;
     $redundancy_bytes$1497 = $spec$select345;
     $tobool204481489 = 1;
    }
   } else {
    $celt_to_silk$0498 = 0;
    $len$addr$1499 = $len;
    $mode$0458478492 = $mode$0457564;
    $redundancy$2496 = 0;
    $redundancy_bytes$1497 = 0;
    $tobool204481489 = $tobool204;
   } while (0);
   $tobool258 = ($redundancy$2496 | 0) != 0;
   $vla261 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * (($tobool258 ? 1 : $pcm_transition_silk_size$0573) << 2) | 0) + 15 & -16) | 0;
   if ($transition$0572 & ($tobool258 ^ 1)) {
    _opus_decode_frame($st, 0, 0, $vla261, ($shr2 | 0) < ($audiosize$2459561 | 0) ? $shr2 : $audiosize$2459561, 0) | 0;
    $85 = 17;
    $celt_to_silk$0498587 = $celt_to_silk$0498;
    $len$addr$1499585 = $len$addr$1499;
    $mode$0458478492591 = $mode$0458478492;
    $pcm_transition$1 = $vla261;
    $redundancy$2496589 = $redundancy$2496;
    $redundancy_bytes$1497588 = $redundancy_bytes$1497;
    $tobool204481489592 = $tobool204481489;
    $tobool258593 = $tobool258;
    $tobool262594 = 1;
    $vla113464476494590 = $vla113462;
   } else {
    $85 = 17;
    $celt_to_silk$0498587 = $celt_to_silk$0498;
    $len$addr$1499585 = $len$addr$1499;
    $mode$0458478492591 = $mode$0458478492;
    $pcm_transition$1 = $pcm_transition$0;
    $redundancy$2496589 = $redundancy$2496;
    $redundancy_bytes$1497588 = $redundancy_bytes$1497;
    $tobool204481489592 = $tobool204481489;
    $tobool258593 = $tobool258;
    $tobool262594 = 0;
    $vla113464476494590 = $vla113462;
   }
  }
  switch ($bandwidth$0455565 | 0) {
  case 0:
   break;
  case 1101:
   {
    $endband$0 = 13;
    label = 89;
    break;
   }
  case 1103:
  case 1102:
   {
    $endband$0 = 17;
    label = 89;
    break;
   }
  case 1104:
   {
    $endband$0 = 19;
    label = 89;
    break;
   }
  case 1105:
   {
    $endband$0 = 21;
    label = 89;
    break;
   }
  default:
   _celt_fatal(56336, 55265, 488);
  }
  if ((label | 0) == 89) {
   HEAP32[$vararg_buffer >> 2] = $endband$0;
   if (_opus_custom_decoder_ctl($add$ptr1, 10012, $vararg_buffer) | 0) _celt_fatal(56356, 55265, 491);
  }
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$st + 48 >> 2];
  if (_opus_custom_decoder_ctl($add$ptr1, 10008, $vararg_buffer1) | 0) _celt_fatal(56491, 55265, 493);
  if ($tobool258593) {
   $vla304$alloca_mul = (Math_imul(HEAP32[$st + 8 >> 2] | 0, $shr2) | 0) << 2;
   $vla304 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $vla304$alloca_mul | 0) + 15 & -16) | 0;
   if (!$celt_to_silk$0498587) {
    $or$cond8517 = 0;
    $tobool307516 = 0;
    $vla304515 = $vla304;
   } else {
    HEAP32[$vararg_buffer4 >> 2] = 0;
    if (_opus_custom_decoder_ctl($add$ptr1, 10010, $vararg_buffer4) | 0) _celt_fatal(56650, 55265, 502);
    _celt_decode_with_ec($add$ptr1, $data$addr$0443453568 + $len$addr$1499585 | 0, $redundancy_bytes$1497588, $vla304, $shr2, 0) | 0;
    HEAP32[$vararg_buffer7 >> 2] = $redundant_rng;
    if (!(_opus_custom_decoder_ctl($add$ptr1, 4031, $vararg_buffer7) | 0)) {
     $or$cond8517 = 1;
     $tobool307516 = 1;
     $vla304515 = $vla304;
    } else _celt_fatal(56773, 55265, 505);
   }
  } else {
   $vla304512 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $or$cond8517 = 0;
   $tobool307516 = ($celt_to_silk$0498587 | 0) != 0;
   $vla304515 = $vla304512;
  }
  HEAP32[$vararg_buffer10 >> 2] = $85;
  if (_opus_custom_decoder_ctl($add$ptr1, 10010, $vararg_buffer10) | 0) _celt_fatal(56918, 55265, 509);
  if (($mode$0458478492591 | 0) == 1e3) {
   HEAP16[$vararg_buffer10 >> 1] = -1;
   $mul367542 = Math_imul(HEAP32[$st + 8 >> 2] | 0, $audiosize$2459561) | 0;
   if (($mul367542 | 0) > 0) _memset($pcm | 0, 0, $mul367542 << 2 | 0) | 0;
   do if ((HEAP32[$st + 60 >> 2] | 0) == 1001) {
    if ($or$cond8517) if (HEAP32[$st + 68 >> 2] | 0) break;
    HEAP32[$vararg_buffer15 >> 2] = 0;
    if (!(_opus_custom_decoder_ctl($add$ptr1, 10010, $vararg_buffer15) | 0)) {
     _celt_decode_with_ec($add$ptr1, $vararg_buffer10, 2, $pcm, $shr3, 0) | 0;
     break;
    } else _celt_fatal(56650, 55265, 531);
   } while (0);
   $celt_ret$0 = 0;
  } else {
   $cond338 = ($div | 0) < ($audiosize$2459561 | 0) ? $div : $audiosize$2459561;
   $86 = HEAP32[$st + 60 >> 2] | 0;
   if (($mode$0458478492591 | 0) != ($86 | 0) & ($86 | 0) > 0) if (!(HEAP32[$st + 68 >> 2] | 0)) if (_opus_custom_decoder_ctl($add$ptr1, 4028, $vararg_buffer13) | 0) _celt_fatal(57059, 55265, 516);
   $celt_ret$0 = _celt_decode_with_ec($add$ptr1, $tobool204481489592 ? $data$addr$0443453568 : 0, $len$addr$1499585, $pcm, $cond338, $dec) | 0;
  }
  if (!$cmp86574) {
   $mul402539 = Math_imul(HEAP32[$st + 8 >> 2] | 0, $audiosize$2459561) | 0;
   if (($mul402539 | 0) > 0) {
    $i$3541 = 0;
    do {
     $arrayidx406 = $pcm + ($i$3541 << 2) | 0;
     HEAPF32[$arrayidx406 >> 2] = +HEAPF32[$arrayidx406 >> 2] + +(HEAP16[$vla113464476494590 + ($i$3541 << 1) >> 1] | 0) * .000030517578125;
     $i$3541 = $i$3541 + 1 | 0;
    } while (($i$3541 | 0) != ($mul402539 | 0));
   }
  }
  HEAP32[$vararg_buffer18 >> 2] = $vararg_buffer10;
  if (_opus_custom_decoder_ctl($add$ptr1, 10015, $vararg_buffer18) | 0) _celt_fatal(57130, 55265, 549);
  $96 = HEAP32[(HEAP32[$vararg_buffer10 >> 2] | 0) + 60 >> 2] | 0;
  if (!(($redundancy$2496589 | 0) == 0 | $tobool307516)) {
   if (_opus_custom_decoder_ctl($add$ptr1, 4028, $vararg_buffer21) | 0) _celt_fatal(57059, 55265, 556);
   HEAP32[$vararg_buffer23 >> 2] = 0;
   if (_opus_custom_decoder_ctl($add$ptr1, 10010, $vararg_buffer23) | 0) _celt_fatal(56650, 55265, 557);
   _celt_decode_with_ec($add$ptr1, $data$addr$0443453568 + $len$addr$1499585 | 0, $redundancy_bytes$1497588, $vla304515, $shr2, 0) | 0;
   HEAP32[$vararg_buffer26 >> 2] = $redundant_rng;
   if (_opus_custom_decoder_ctl($add$ptr1, 4031, $vararg_buffer26) | 0) _celt_fatal(56773, 55265, 560);
   $97 = HEAP32[$st + 8 >> 2] | 0;
   $add$ptr457 = $pcm + ((Math_imul($97, $audiosize$2459561 - $shr3 | 0) | 0) << 2) | 0;
   $add$ptr460 = $vla304515 + ((Math_imul($97, $shr3) | 0) << 2) | 0;
   $div$i384 = 48e3 / (HEAP32[$Fs >> 2] | 0) | 0;
   if (($2 | 0) > 399 & ($97 | 0) > 0) {
    $c$024$us$i389 = 0;
    do {
     $i$022$us$i391 = 0;
     do {
      $99 = +HEAPF32[$96 + ((Math_imul($i$022$us$i391, $div$i384) | 0) << 2) >> 2];
      $mul6$us$i394 = $99 * $99;
      $add$us$i396 = (Math_imul($i$022$us$i391, $97) | 0) + $c$024$us$i389 | 0;
      $arrayidx12$us$i400 = $add$ptr457 + ($add$us$i396 << 2) | 0;
      HEAPF32[$arrayidx12$us$i400 >> 2] = $mul6$us$i394 * +HEAPF32[$add$ptr460 + ($add$us$i396 << 2) >> 2] + (1.0 - $mul6$us$i394) * +HEAPF32[$arrayidx12$us$i400 >> 2];
      $i$022$us$i391 = $i$022$us$i391 + 1 | 0;
     } while (($i$022$us$i391 | 0) != ($shr3 | 0));
     $c$024$us$i389 = $c$024$us$i389 + 1 | 0;
    } while (($c$024$us$i389 | 0) != ($97 | 0));
   }
  }
  if ($or$cond8517) {
   $102 = HEAP32[$st + 8 >> 2] | 0;
   $or$cond597 = ($102 | 0) > 0 & ($2 | 0) > 399;
   if ($or$cond597) {
    $c$0536$us = 0;
    do {
     $i$4534$us = 0;
     do {
      $add483$us = (Math_imul($i$4534$us, $102) | 0) + $c$0536$us | 0;
      HEAP32[$pcm + ($add483$us << 2) >> 2] = HEAP32[$vla304515 + ($add483$us << 2) >> 2];
      $i$4534$us = $i$4534$us + 1 | 0;
     } while (($i$4534$us | 0) < ($shr3 | 0));
     $c$0536$us = $c$0536$us + 1 | 0;
    } while (($c$0536$us | 0) != ($102 | 0));
    $mul496 = Math_imul($102, $shr3) | 0;
    $add$ptr497 = $vla304515 + ($mul496 << 2) | 0;
    $add$ptr500 = $pcm + ($mul496 << 2) | 0;
    $div$i357 = 48e3 / (HEAP32[$Fs >> 2] | 0) | 0;
    if ($or$cond597) {
     $c$024$us$i362 = 0;
     do {
      $i$022$us$i364 = 0;
      do {
       $105 = +HEAPF32[$96 + ((Math_imul($i$022$us$i364, $div$i357) | 0) << 2) >> 2];
       $mul6$us$i367 = $105 * $105;
       $add$us$i369 = (Math_imul($i$022$us$i364, $102) | 0) + $c$024$us$i362 | 0;
       $arrayidx8$us$i370 = $add$ptr500 + ($add$us$i369 << 2) | 0;
       HEAPF32[$arrayidx8$us$i370 >> 2] = $mul6$us$i367 * +HEAPF32[$arrayidx8$us$i370 >> 2] + (1.0 - $mul6$us$i367) * +HEAPF32[$add$ptr497 + ($add$us$i369 << 2) >> 2];
       $i$022$us$i364 = $i$022$us$i364 + 1 | 0;
      } while (($i$022$us$i364 | 0) != ($shr3 | 0));
      $c$024$us$i362 = $c$024$us$i362 + 1 | 0;
     } while (($c$024$us$i362 | 0) != ($102 | 0));
    }
   }
  }
  L216 : do if ($tobool262594) {
   $108 = HEAP32[$st + 8 >> 2] | 0;
   if (($audiosize$2459561 | 0) < ($shr2 | 0)) {
    $div$i = 48e3 / (HEAP32[$Fs >> 2] | 0) | 0;
    if (!(($2 | 0) > 399 & ($108 | 0) > 0)) break;
    $c$024$us$i = 0;
    while (1) {
     $i$022$us$i = 0;
     do {
      $115 = +HEAPF32[$96 + ((Math_imul($i$022$us$i, $div$i) | 0) << 2) >> 2];
      $mul6$us$i = $115 * $115;
      $add$us$i = (Math_imul($i$022$us$i, $108) | 0) + $c$024$us$i | 0;
      $arrayidx8$us$i = $pcm + ($add$us$i << 2) | 0;
      HEAPF32[$arrayidx8$us$i >> 2] = $mul6$us$i * +HEAPF32[$arrayidx8$us$i >> 2] + (1.0 - $mul6$us$i) * +HEAPF32[$pcm_transition$1 + ($add$us$i << 2) >> 2];
      $i$022$us$i = $i$022$us$i + 1 | 0;
     } while (($i$022$us$i | 0) != ($shr3 | 0));
     $c$024$us$i = $c$024$us$i + 1 | 0;
     if (($c$024$us$i | 0) == ($108 | 0)) break L216;
    }
   }
   $mul514529 = Math_imul($108, $shr3) | 0;
   if (($mul514529 | 0) > 0) {
    $i$5531 = 0;
    do {
     HEAP32[$pcm + ($i$5531 << 2) >> 2] = HEAP32[$pcm_transition$1 + ($i$5531 << 2) >> 2];
     $i$5531 = $i$5531 + 1 | 0;
    } while (($i$5531 | 0) != ($mul514529 | 0));
   }
   $add$ptr525 = $pcm_transition$1 + ($mul514529 << 2) | 0;
   $add$ptr528 = $pcm + ($mul514529 << 2) | 0;
   $div$i411 = 48e3 / (HEAP32[$Fs >> 2] | 0) | 0;
   if (($2 | 0) > 399 & ($108 | 0) > 0) {
    $c$024$us$i416 = 0;
    do {
     $i$022$us$i418 = 0;
     do {
      $111 = +HEAPF32[$96 + ((Math_imul($i$022$us$i418, $div$i411) | 0) << 2) >> 2];
      $mul6$us$i421 = $111 * $111;
      $add$us$i423 = (Math_imul($i$022$us$i418, $108) | 0) + $c$024$us$i416 | 0;
      $arrayidx8$us$i424 = $add$ptr528 + ($add$us$i423 << 2) | 0;
      HEAPF32[$arrayidx8$us$i424 >> 2] = $mul6$us$i421 * +HEAPF32[$arrayidx8$us$i424 >> 2] + (1.0 - $mul6$us$i421) * +HEAPF32[$add$ptr525 + ($add$us$i423 << 2) >> 2];
      $i$022$us$i418 = $i$022$us$i418 + 1 | 0;
     } while (($i$022$us$i418 | 0) != ($shr3 | 0));
     $c$024$us$i416 = $c$024$us$i416 + 1 | 0;
    } while (($c$024$us$i416 | 0) != ($108 | 0));
   }
  } while (0);
  $118 = HEAP32[$st + 40 >> 2] | 0;
  if ($118 | 0) {
   $conv546 = +Math_exp(+(+($118 | 0) * 6.488140788860619e-04 * .6931471805599453));
   $mul549526 = Math_imul(HEAP32[$st + 8 >> 2] | 0, $audiosize$2459561) | 0;
   if (($mul549526 | 0) > 0) {
    $i$6528 = 0;
    do {
     $arrayidx553 = $pcm + ($i$6528 << 2) | 0;
     HEAPF32[$arrayidx553 >> 2] = +HEAPF32[$arrayidx553 >> 2] * $conv546;
     $i$6528 = $i$6528 + 1 | 0;
    } while (($i$6528 | 0) != ($mul549526 | 0));
   }
  }
  if (($len$addr$1499585 | 0) < 2) $$sink = 0; else $$sink = HEAP32[$redundant_rng >> 2] ^ HEAP32[$dec + 28 >> 2];
  HEAP32[$st + 84 >> 2] = $$sink;
  HEAP32[$st + 60 >> 2] = $mode$0458478492591;
  HEAP32[$st + 68 >> 2] = $tobool258593 & ($tobool307516 ^ 1) & 1;
  $retval$4 = ($celt_ret$0 | 0) < 0 ? $celt_ret$0 : $audiosize$2459561;
 } while (0);
 _llvm_stackrestore($126 | 0);
 $retval$5 = $retval$4;
 STACKTOP = sp;
 return $retval$5 | 0;
}
function _silk_encode_pulses($psRangeEnc, $signalType, $quantOffsetType, $pulses, $frame_length) {
 $psRangeEnc = $psRangeEnc | 0;
 $signalType = $signalType | 0;
 $quantOffsetType = $quantOffsetType | 0;
 $pulses = $pulses | 0;
 $frame_length = $frame_length | 0;
 var $0 = 0, $1 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $88 = 0, $abs_pulses_ptr$0178 = 0, $add18 = 0, $add3$i = 0, $add3$i$1 = 0, $add3$i$1$i = 0, $add3$i$2 = 0, $add3$i$2$i = 0, $add3$i$3 = 0, $add3$i$3$i = 0, $add3$i$4 = 0, $add3$i$4$i = 0, $add3$i$5 = 0, $add3$i$5$i = 0, $add3$i$6 = 0, $add3$i$6$i = 0, $add3$i$7 = 0, $add3$i$7$i = 0, $add3$i$i = 0, $add3$i121 = 0, $add3$i134 = 0, $add3$i134$1 = 0, $add3$i148 = 0, $add3$i148$1 = 0, $add3$i148$2 = 0, $add3$i148$3 = 0, $add3$i29$1$i = 0, $add3$i29$2$i = 0, $add3$i29$3$i = 0, $add3$i29$i = 0, $add3$i46$1$i = 0, $add3$i46$i = 0, $add3$i63$i = 0, $add36 = 0, $add54 = 0, $and$i = 0, $arraydecay155 = 0, $arrayidx$i$1 = 0, $arrayidx$i$1$i = 0, $arrayidx$i$2 = 0, $arrayidx$i$2$i = 0, $arrayidx$i$3 = 0, $arrayidx$i$3$i = 0, $arrayidx$i$4 = 0, $arrayidx$i$4$i = 0, $arrayidx$i$5$i = 0, $arrayidx$i$6$i = 0, $arrayidx$i$7$i = 0, $arrayidx104$10 = 0, $arrayidx104$11 = 0, $arrayidx104$12 = 0, $arrayidx104$13 = 0, $arrayidx104$14 = 0, $arrayidx104$15 = 0, $arrayidx189 = 0, $arrayidx2$i = 0, $arrayidx2$i$1 = 0, $arrayidx2$i$2 = 0, $arrayidx2$i$3 = 0, $arrayidx2$i$4 = 0, $arrayidx2$i$phi$trans$insert = 0, $arrayidx203 = 0, $arrayidx79 = 0, $arrayidx92 = 0, $cmp144$1 = 0, $cmp144$2 = 0, $cmp144$3 = 0, $cmp144$4 = 0, $cmp144$5 = 0, $cmp144$6 = 0, $cmp144$7 = 0, $cmp144$us$1 = 0, $cmp144$us$2 = 0, $cmp144$us$3 = 0, $cmp144$us$4 = 0, $cmp144$us$5 = 0, $cmp144$us$6 = 0, $cmp144$us$7 = 0, $cmp4$i$7 = 0, $cmp4$i135$1 = 0, $cmp4$i149$3 = 0, $conv = 0, $conv133$pn$us = 0, $conv133$pn$us$1 = 0, $conv133$pn$us$2 = 0, $conv133$pn$us$3 = 0, $conv133$pn$us$4 = 0, $conv133$pn$us$5 = 0, $conv133$pn$us$6 = 0, $conv133$pn$us$7 = 0, $conv133$pn$us$8 = 0, $conv20 = 0, $conv211 = 0, $conv211$1 = 0, $conv211$10 = 0, $conv211$11 = 0, $conv211$12 = 0, $conv211$13 = 0, $conv211$14 = 0, $conv211$15 = 0, $conv211$2 = 0, $conv211$3 = 0, $conv211$4 = 0, $conv211$5 = 0, $conv211$6 = 0, $conv211$7 = 0, $conv211$8 = 0, $conv211$9 = 0, $conv211$us = 0, $conv224$us = 0, $conv38 = 0, $conv56 = 0, $i$0181 = 0, $i$019$i = 0, $i$1179 = 0, $i$2172$us = 0, $i$2172$us$1 = 0, $i$2172$us$2 = 0, $i$2172$us$3 = 0, $i$2172$us$4 = 0, $i$2172$us$5 = 0, $i$2172$us$6 = 0, $i$2172$us$7 = 0, $i$2172$us$8 = 0, $i$3168 = 0, $i$4164 = 0, $i$5162 = 0, $icdf$i = 0, $iter$0200 = 0, $j$0159$us$in = 0, $k$2166 = 0, $k$3160$us = 0, $mul = 0, $mul4201 = 0, $pulses_comb$sroa$13$0 = 0, $pulses_comb$sroa$13$1 = 0, $pulses_comb$sroa$13$2 = 0, $pulses_comb$sroa$13$3 = 0, $pulses_comb$sroa$17$0 = 0, $pulses_comb$sroa$17$1 = 0, $pulses_comb$sroa$17$2 = 0, $pulses_comb$sroa$19$0 = 0, $pulses_comb$sroa$19$1 = 0, $pulses_comb$sroa$19$2 = 0, $pulses_comb$sroa$21$0 = 0, $pulses_comb$sroa$21$1 = 0, $pulses_comb$sroa$21$2 = 0, $pulses_comb$sroa$23$0 = 0, $pulses_comb$sroa$23$1 = 0, $pulses_comb$sroa$23$2 = 0, $pulses_comb$sroa$9$0 = 0, $pulses_comb$sroa$9$1 = 0, $pulses_comb$sroa$9$2 = 0, $pulses_comb$sroa$9$3 = 0, $q_ptr$020$i = 0, $retval$0$i = 0, $retval$0$i127 = 0, $retval$0$i141 = 0, $retval$0$i155 = 0, $shr = 0, $shr$i = 0, $shr105 = 0, $shr105$1 = 0, $shr120 = 0, $shr120216 = 0, $spec$select$us$1 = 0, $spec$select$us$2 = 0, $spec$select$us$3 = 0, $spec$select$us$4 = 0, $spec$select$us$5 = 0, $spec$select$us$6 = 0, $spec$select$us$7 = 0, $spec$select$us$8 = 0, $spec$select115$1$v = 0, $spec$select115$2$v = 0, $spec$select115$3$v = 0, $spec$select115$4$v = 0, $spec$select115$5$v = 0, $spec$select115$6$v = 0, $spec$select115$us$1 = 0, $spec$select115$us$2 = 0, $spec$select115$us$3 = 0, $spec$select115$us$4 = 0, $spec$select115$us$5 = 0, $spec$select115$us$6 = 0, $sub168 = 0, $sumBits_Q5$0171$us = 0, $sumBits_Q5$0171$us$1 = 0, $sumBits_Q5$0171$us$2 = 0, $sumBits_Q5$0171$us$3 = 0, $sumBits_Q5$0171$us$4 = 0, $sumBits_Q5$0171$us$5 = 0, $sumBits_Q5$0171$us$6 = 0, $sumBits_Q5$0171$us$7 = 0, $sumBits_Q5$0171$us$8 = 0, $vla = 0, $vla197241 = 0, $vla202 = 0, $vla73 = 0, $vla73206 = 0, $vla73213239 = 0, $vla74 = 0, dest = 0, label = 0, sp = 0, stop = 0, $j$0159$us$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $icdf$i = sp;
 $shr = $frame_length >> 4;
 $mul = $frame_length & -16;
 do if (($mul | 0) < ($frame_length | 0)) if (($frame_length | 0) == 120) {
  dest = $pulses + 120 | 0;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $vla197241 = STACKTOP;
  STACKTOP = STACKTOP + 512 | 0;
  $iter$0200 = 8;
  $mul4201 = 128;
  $vla202 = $vla197241;
  label = 7;
  break;
 } else _celt_fatal(51420, 51462, 89); else {
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
  if (($frame_length | 0) > 15) {
   $iter$0200 = $shr;
   $mul4201 = $mul;
   $vla202 = $vla;
   label = 7;
  } else {
   $vla73206 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($shr << 2) | 0) + 15 & -16) | 0;
   $shr120216 = $signalType >> 1;
   $0 = HEAP8[25520 + ($shr120216 * 9 | 0) >> 0] | 0;
   $1 = HEAP8[25520 + ($shr120216 * 9 | 0) + 1 >> 0] | 0;
   $cmp144$1 = ($0 & 255) > ($1 & 255);
   $spec$select115$1$v = $cmp144$1 ? $1 : $0;
   $2 = HEAP8[25520 + ($shr120216 * 9 | 0) + 2 >> 0] | 0;
   $cmp144$2 = ($spec$select115$1$v & 255) > ($2 & 255);
   $spec$select115$2$v = $cmp144$2 ? $2 : $spec$select115$1$v;
   $3 = HEAP8[25520 + ($shr120216 * 9 | 0) + 3 >> 0] | 0;
   $cmp144$3 = ($spec$select115$2$v & 255) > ($3 & 255);
   $spec$select115$3$v = $cmp144$3 ? $3 : $spec$select115$2$v;
   $4 = HEAP8[25520 + ($shr120216 * 9 | 0) + 4 >> 0] | 0;
   $cmp144$4 = ($spec$select115$3$v & 255) > ($4 & 255);
   $spec$select115$4$v = $cmp144$4 ? $4 : $spec$select115$3$v;
   $5 = HEAP8[25520 + ($shr120216 * 9 | 0) + 5 >> 0] | 0;
   $cmp144$5 = ($spec$select115$4$v & 255) > ($5 & 255);
   $spec$select115$5$v = $cmp144$5 ? $5 : $spec$select115$4$v;
   $6 = HEAP8[25520 + ($shr120216 * 9 | 0) + 6 >> 0] | 0;
   $cmp144$6 = ($spec$select115$5$v & 255) > ($6 & 255);
   $spec$select115$6$v = $cmp144$6 ? $6 : $spec$select115$5$v;
   $7 = HEAP8[25520 + ($shr120216 * 9 | 0) + 7 >> 0] | 0;
   $cmp144$7 = ($spec$select115$6$v & 255) > ($7 & 255);
   _ec_enc_icdf($psRangeEnc, (($cmp144$7 ? $7 : $spec$select115$6$v) & 255) > (HEAPU8[25520 + ($shr120216 * 9 | 0) + 8 >> 0] | 0) ? 8 : $cmp144$7 ? 7 : $cmp144$6 ? 6 : $cmp144$5 ? 5 : $cmp144$4 ? 4 : $cmp144$3 ? 3 : $cmp144$2 ? 2 : $cmp144$1 & 1, 25488 + ($shr120216 * 9 | 0) | 0, 8);
   $vla73213239 = $vla73206;
  }
 } while (0);
 if ((label | 0) == 7) {
  $i$0181 = 0;
  do {
   $conv = HEAP8[$pulses + $i$0181 >> 0] | 0;
   HEAP32[$vla202 + ($i$0181 << 2) >> 2] = ($conv | 0) > 0 ? $conv : 0 - $conv | 0;
   $add18 = $i$0181 | 1;
   $conv20 = HEAP8[$pulses + $add18 >> 0] | 0;
   HEAP32[$vla202 + ($add18 << 2) >> 2] = ($conv20 | 0) > 0 ? $conv20 : 0 - $conv20 | 0;
   $add36 = $i$0181 | 2;
   $conv38 = HEAP8[$pulses + $add36 >> 0] | 0;
   HEAP32[$vla202 + ($add36 << 2) >> 2] = ($conv38 | 0) > 0 ? $conv38 : 0 - $conv38 | 0;
   $add54 = $i$0181 | 3;
   $conv56 = HEAP8[$pulses + $add54 >> 0] | 0;
   HEAP32[$vla202 + ($add54 << 2) >> 2] = ($conv56 | 0) > 0 ? $conv56 : 0 - $conv56 | 0;
   $i$0181 = $i$0181 + 4 | 0;
  } while (($i$0181 | 0) < ($mul4201 | 0));
  $vla73 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($iter$0200 << 2) | 0) + 15 & -16) | 0;
  $vla74 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($iter$0200 << 2) | 0) + 15 & -16) | 0;
  $167 = 0;
  $168 = 0;
  $abs_pulses_ptr$0178 = $vla202;
  $i$1179 = 0;
  $pulses_comb$sroa$13$0 = 0;
  $pulses_comb$sroa$17$0 = 0;
  $pulses_comb$sroa$19$0 = 0;
  $pulses_comb$sroa$21$0 = 0;
  $pulses_comb$sroa$23$0 = 0;
  $pulses_comb$sroa$9$0 = 0;
  while (1) {
   $arrayidx79 = $vla74 + ($i$1179 << 2) | 0;
   HEAP32[$arrayidx79 >> 2] = 0;
   $arrayidx92 = $vla73 + ($i$1179 << 2) | 0;
   $arrayidx2$i$phi$trans$insert = $abs_pulses_ptr$0178 + 4 | 0;
   $arrayidx$i$1 = $abs_pulses_ptr$0178 + 8 | 0;
   $arrayidx2$i$1 = $abs_pulses_ptr$0178 + 12 | 0;
   $arrayidx$i$2 = $abs_pulses_ptr$0178 + 16 | 0;
   $arrayidx2$i$2 = $abs_pulses_ptr$0178 + 20 | 0;
   $arrayidx$i$3 = $abs_pulses_ptr$0178 + 24 | 0;
   $arrayidx2$i$3 = $abs_pulses_ptr$0178 + 28 | 0;
   $arrayidx$i$4 = $abs_pulses_ptr$0178 + 32 | 0;
   $arrayidx2$i$4 = $abs_pulses_ptr$0178 + 36 | 0;
   $arrayidx104$10 = $abs_pulses_ptr$0178 + 40 | 0;
   $arrayidx104$11 = $abs_pulses_ptr$0178 + 44 | 0;
   $arrayidx104$12 = $abs_pulses_ptr$0178 + 48 | 0;
   $arrayidx104$13 = $abs_pulses_ptr$0178 + 52 | 0;
   $arrayidx104$14 = $abs_pulses_ptr$0178 + 56 | 0;
   $arrayidx104$15 = $abs_pulses_ptr$0178 + 60 | 0;
   $13 = HEAP32[$arrayidx2$i$phi$trans$insert >> 2] | 0;
   $14 = HEAP32[$abs_pulses_ptr$0178 >> 2] | 0;
   $169 = $167;
   $170 = $168;
   $pulses_comb$sroa$13$1 = $pulses_comb$sroa$13$0;
   $pulses_comb$sroa$17$1 = $pulses_comb$sroa$17$0;
   $pulses_comb$sroa$19$1 = $pulses_comb$sroa$19$0;
   $pulses_comb$sroa$21$1 = $pulses_comb$sroa$21$0;
   $pulses_comb$sroa$23$1 = $pulses_comb$sroa$23$0;
   $pulses_comb$sroa$9$1 = $pulses_comb$sroa$9$0;
   while (1) {
    $add3$i = $13 + $14 | 0;
    if (($add3$i | 0) > 8) {
     $17 = $169;
     $18 = $170;
     $pulses_comb$sroa$13$2 = $pulses_comb$sroa$13$1;
     $pulses_comb$sroa$17$2 = $pulses_comb$sroa$17$1;
     $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
     $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
     $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
     $pulses_comb$sroa$9$2 = $pulses_comb$sroa$9$1;
     $retval$0$i = 1;
    } else {
     $add3$i$1 = (HEAP32[$arrayidx2$i$1 >> 2] | 0) + (HEAP32[$arrayidx$i$1 >> 2] | 0) | 0;
     if (($add3$i$1 | 0) > 8) {
      $17 = $169;
      $18 = $add3$i;
      $pulses_comb$sroa$13$2 = $pulses_comb$sroa$13$1;
      $pulses_comb$sroa$17$2 = $pulses_comb$sroa$17$1;
      $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
      $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
      $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
      $pulses_comb$sroa$9$2 = $pulses_comb$sroa$9$1;
      $retval$0$i = 1;
     } else {
      $add3$i$2 = (HEAP32[$arrayidx2$i$2 >> 2] | 0) + (HEAP32[$arrayidx$i$2 >> 2] | 0) | 0;
      if (($add3$i$2 | 0) > 8) {
       $17 = $add3$i$1;
       $18 = $add3$i;
       $pulses_comb$sroa$13$2 = $pulses_comb$sroa$13$1;
       $pulses_comb$sroa$17$2 = $pulses_comb$sroa$17$1;
       $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
       $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
       $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
       $pulses_comb$sroa$9$2 = $pulses_comb$sroa$9$1;
       $retval$0$i = 1;
      } else {
       $add3$i$3 = (HEAP32[$arrayidx2$i$3 >> 2] | 0) + (HEAP32[$arrayidx$i$3 >> 2] | 0) | 0;
       if (($add3$i$3 | 0) > 8) {
        $17 = $add3$i$1;
        $18 = $add3$i;
        $pulses_comb$sroa$13$2 = $pulses_comb$sroa$13$1;
        $pulses_comb$sroa$17$2 = $pulses_comb$sroa$17$1;
        $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
        $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
        $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
        $pulses_comb$sroa$9$2 = $add3$i$2;
        $retval$0$i = 1;
       } else {
        $add3$i$4 = (HEAP32[$arrayidx2$i$4 >> 2] | 0) + (HEAP32[$arrayidx$i$4 >> 2] | 0) | 0;
        if (($add3$i$4 | 0) > 8) {
         $17 = $add3$i$1;
         $18 = $add3$i;
         $pulses_comb$sroa$13$2 = $add3$i$3;
         $pulses_comb$sroa$17$2 = $pulses_comb$sroa$17$1;
         $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
         $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
         $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
         $pulses_comb$sroa$9$2 = $add3$i$2;
         $retval$0$i = 1;
        } else {
         $add3$i$5 = (HEAP32[$arrayidx104$11 >> 2] | 0) + (HEAP32[$arrayidx104$10 >> 2] | 0) | 0;
         if (($add3$i$5 | 0) > 8) {
          $17 = $add3$i$1;
          $18 = $add3$i;
          $pulses_comb$sroa$13$2 = $add3$i$3;
          $pulses_comb$sroa$17$2 = $add3$i$4;
          $pulses_comb$sroa$19$2 = $pulses_comb$sroa$19$1;
          $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
          $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
          $pulses_comb$sroa$9$2 = $add3$i$2;
          $retval$0$i = 1;
         } else {
          $add3$i$6 = (HEAP32[$arrayidx104$13 >> 2] | 0) + (HEAP32[$arrayidx104$12 >> 2] | 0) | 0;
          if (($add3$i$6 | 0) > 8) {
           $17 = $add3$i$1;
           $18 = $add3$i;
           $pulses_comb$sroa$13$2 = $add3$i$3;
           $pulses_comb$sroa$17$2 = $add3$i$4;
           $pulses_comb$sroa$19$2 = $add3$i$5;
           $pulses_comb$sroa$21$2 = $pulses_comb$sroa$21$1;
           $pulses_comb$sroa$23$2 = $pulses_comb$sroa$23$1;
           $pulses_comb$sroa$9$2 = $add3$i$2;
           $retval$0$i = 1;
          } else {
           $add3$i$7 = (HEAP32[$arrayidx104$15 >> 2] | 0) + (HEAP32[$arrayidx104$14 >> 2] | 0) | 0;
           $cmp4$i$7 = ($add3$i$7 | 0) > 8;
           $17 = $add3$i$1;
           $18 = $add3$i;
           $pulses_comb$sroa$13$2 = $add3$i$3;
           $pulses_comb$sroa$17$2 = $add3$i$4;
           $pulses_comb$sroa$19$2 = $add3$i$5;
           $pulses_comb$sroa$21$2 = $add3$i$6;
           $pulses_comb$sroa$23$2 = $cmp4$i$7 ? $pulses_comb$sroa$23$1 : $add3$i$7;
           $pulses_comb$sroa$9$2 = $add3$i$2;
           $retval$0$i = $cmp4$i$7 & 1;
          }
         }
        }
       }
      }
     }
    }
    $add3$i148 = $17 + $18 | 0;
    if (($add3$i148 | 0) > 10) {
     $19 = $17;
     $20 = $18;
     $pulses_comb$sroa$13$3 = $pulses_comb$sroa$13$2;
     $pulses_comb$sroa$9$3 = $pulses_comb$sroa$9$2;
     $retval$0$i155 = 1;
    } else {
     $add3$i148$1 = $pulses_comb$sroa$13$2 + $pulses_comb$sroa$9$2 | 0;
     if (($add3$i148$1 | 0) > 10) {
      $19 = $17;
      $20 = $add3$i148;
      $pulses_comb$sroa$13$3 = $pulses_comb$sroa$13$2;
      $pulses_comb$sroa$9$3 = $pulses_comb$sroa$9$2;
      $retval$0$i155 = 1;
     } else {
      $add3$i148$2 = $pulses_comb$sroa$19$2 + $pulses_comb$sroa$17$2 | 0;
      if (($add3$i148$2 | 0) > 10) {
       $19 = $add3$i148$1;
       $20 = $add3$i148;
       $pulses_comb$sroa$13$3 = $pulses_comb$sroa$13$2;
       $pulses_comb$sroa$9$3 = $pulses_comb$sroa$9$2;
       $retval$0$i155 = 1;
      } else {
       $add3$i148$3 = $pulses_comb$sroa$23$2 + $pulses_comb$sroa$21$2 | 0;
       $cmp4$i149$3 = ($add3$i148$3 | 0) > 10;
       $19 = $add3$i148$1;
       $20 = $add3$i148;
       $pulses_comb$sroa$13$3 = $cmp4$i149$3 ? $pulses_comb$sroa$13$2 : $add3$i148$3;
       $pulses_comb$sroa$9$3 = $add3$i148$2;
       $retval$0$i155 = $cmp4$i149$3 & 1;
      }
     }
    }
    $add3$i134 = $19 + $20 | 0;
    if (($add3$i134 | 0) > 12) {
     $21 = $19;
     $22 = $20;
     $retval$0$i141 = 1;
    } else {
     $add3$i134$1 = $pulses_comb$sroa$13$3 + $pulses_comb$sroa$9$3 | 0;
     $cmp4$i135$1 = ($add3$i134$1 | 0) > 12;
     $21 = $cmp4$i135$1 ? $19 : $add3$i134$1;
     $22 = $add3$i134;
     $retval$0$i141 = $cmp4$i135$1 & 1;
    }
    $add3$i121 = $21 + $22 | 0;
    if (($add3$i121 | 0) > 16) $retval$0$i127 = -1; else {
     HEAP32[$arrayidx92 >> 2] = $add3$i121;
     $retval$0$i127 = 0;
    }
    if (($retval$0$i155 + $retval$0$i + $retval$0$i141 | 0) == ($retval$0$i127 | 0)) break;
    HEAP32[$arrayidx79 >> 2] = (HEAP32[$arrayidx79 >> 2] | 0) + 1;
    $shr105 = HEAP32[$abs_pulses_ptr$0178 >> 2] >> 1;
    HEAP32[$abs_pulses_ptr$0178 >> 2] = $shr105;
    $shr105$1 = HEAP32[$arrayidx2$i$phi$trans$insert >> 2] >> 1;
    HEAP32[$arrayidx2$i$phi$trans$insert >> 2] = $shr105$1;
    HEAP32[$arrayidx$i$1 >> 2] = HEAP32[$arrayidx$i$1 >> 2] >> 1;
    HEAP32[$arrayidx2$i$1 >> 2] = HEAP32[$arrayidx2$i$1 >> 2] >> 1;
    HEAP32[$arrayidx$i$2 >> 2] = HEAP32[$arrayidx$i$2 >> 2] >> 1;
    HEAP32[$arrayidx2$i$2 >> 2] = HEAP32[$arrayidx2$i$2 >> 2] >> 1;
    HEAP32[$arrayidx$i$3 >> 2] = HEAP32[$arrayidx$i$3 >> 2] >> 1;
    HEAP32[$arrayidx2$i$3 >> 2] = HEAP32[$arrayidx2$i$3 >> 2] >> 1;
    HEAP32[$arrayidx$i$4 >> 2] = HEAP32[$arrayidx$i$4 >> 2] >> 1;
    HEAP32[$arrayidx2$i$4 >> 2] = HEAP32[$arrayidx2$i$4 >> 2] >> 1;
    HEAP32[$arrayidx104$10 >> 2] = HEAP32[$arrayidx104$10 >> 2] >> 1;
    HEAP32[$arrayidx104$11 >> 2] = HEAP32[$arrayidx104$11 >> 2] >> 1;
    HEAP32[$arrayidx104$12 >> 2] = HEAP32[$arrayidx104$12 >> 2] >> 1;
    HEAP32[$arrayidx104$13 >> 2] = HEAP32[$arrayidx104$13 >> 2] >> 1;
    HEAP32[$arrayidx104$14 >> 2] = HEAP32[$arrayidx104$14 >> 2] >> 1;
    HEAP32[$arrayidx104$15 >> 2] = HEAP32[$arrayidx104$15 >> 2] >> 1;
    $13 = $shr105$1;
    $14 = $shr105;
    $169 = $21;
    $170 = $22;
    $pulses_comb$sroa$13$1 = $pulses_comb$sroa$13$3;
    $pulses_comb$sroa$17$1 = $pulses_comb$sroa$17$2;
    $pulses_comb$sroa$19$1 = $pulses_comb$sroa$19$2;
    $pulses_comb$sroa$21$1 = $pulses_comb$sroa$21$2;
    $pulses_comb$sroa$23$1 = $pulses_comb$sroa$23$2;
    $pulses_comb$sroa$9$1 = $pulses_comb$sroa$9$3;
   }
   $i$1179 = $i$1179 + 1 | 0;
   if (($i$1179 | 0) == ($iter$0200 | 0)) break; else {
    $167 = $21;
    $168 = $22;
    $abs_pulses_ptr$0178 = $abs_pulses_ptr$0178 + 64 | 0;
    $pulses_comb$sroa$13$0 = $pulses_comb$sroa$13$3;
    $pulses_comb$sroa$17$0 = $pulses_comb$sroa$17$2;
    $pulses_comb$sroa$19$0 = $pulses_comb$sroa$19$2;
    $pulses_comb$sroa$21$0 = $pulses_comb$sroa$21$2;
    $pulses_comb$sroa$23$0 = $pulses_comb$sroa$23$2;
    $pulses_comb$sroa$9$0 = $pulses_comb$sroa$9$3;
   }
  }
  $shr120 = $signalType >> 1;
  $i$2172$us = 0;
  $sumBits_Q5$0171$us = HEAPU8[25520 + ($shr120 * 9 | 0) >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us << 2) >> 2] | 0) > 0) $conv133$pn$us = 255; else $conv133$pn$us = HEAPU8[25312 + (HEAP32[$vla73 + ($i$2172$us << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us = $conv133$pn$us + $sumBits_Q5$0171$us | 0;
   $i$2172$us = $i$2172$us + 1 | 0;
  } while (($i$2172$us | 0) != ($iter$0200 | 0));
  $i$2172$us$1 = 0;
  $sumBits_Q5$0171$us$1 = HEAPU8[25520 + ($shr120 * 9 | 0) + 1 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$1 << 2) >> 2] | 0) > 0) $conv133$pn$us$1 = 255; else $conv133$pn$us$1 = HEAPU8[25330 + (HEAP32[$vla73 + ($i$2172$us$1 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$1 = $conv133$pn$us$1 + $sumBits_Q5$0171$us$1 | 0;
   $i$2172$us$1 = $i$2172$us$1 + 1 | 0;
  } while (($i$2172$us$1 | 0) != ($iter$0200 | 0));
  $cmp144$us$1 = $sumBits_Q5$0171$us$1 >>> 0 < $sumBits_Q5$0171$us >>> 0;
  $spec$select$us$1 = $cmp144$us$1 & 1;
  $i$2172$us$2 = 0;
  $sumBits_Q5$0171$us$2 = HEAPU8[25520 + ($shr120 * 9 | 0) + 2 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$2 << 2) >> 2] | 0) > 0) $conv133$pn$us$2 = 224; else $conv133$pn$us$2 = HEAPU8[25348 + (HEAP32[$vla73 + ($i$2172$us$2 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$2 = $conv133$pn$us$2 + $sumBits_Q5$0171$us$2 | 0;
   $i$2172$us$2 = $i$2172$us$2 + 1 | 0;
  } while (($i$2172$us$2 | 0) != ($iter$0200 | 0));
  $spec$select115$us$1 = $cmp144$us$1 ? $sumBits_Q5$0171$us$1 : $sumBits_Q5$0171$us;
  $cmp144$us$2 = ($sumBits_Q5$0171$us$2 | 0) < ($spec$select115$us$1 | 0);
  $spec$select$us$2 = $cmp144$us$2 ? 2 : $spec$select$us$1;
  $i$2172$us$3 = 0;
  $sumBits_Q5$0171$us$3 = HEAPU8[25520 + ($shr120 * 9 | 0) + 3 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$3 << 2) >> 2] | 0) > 0) $conv133$pn$us$3 = 255; else $conv133$pn$us$3 = HEAPU8[25366 + (HEAP32[$vla73 + ($i$2172$us$3 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$3 = $conv133$pn$us$3 + $sumBits_Q5$0171$us$3 | 0;
   $i$2172$us$3 = $i$2172$us$3 + 1 | 0;
  } while (($i$2172$us$3 | 0) != ($iter$0200 | 0));
  $spec$select115$us$2 = $cmp144$us$2 ? $sumBits_Q5$0171$us$2 : $spec$select115$us$1;
  $cmp144$us$3 = ($sumBits_Q5$0171$us$3 | 0) < ($spec$select115$us$2 | 0);
  $spec$select$us$3 = $cmp144$us$3 ? 3 : $spec$select$us$2;
  $i$2172$us$4 = 0;
  $sumBits_Q5$0171$us$4 = HEAPU8[25520 + ($shr120 * 9 | 0) + 4 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$4 << 2) >> 2] | 0) > 0) $conv133$pn$us$4 = 255; else $conv133$pn$us$4 = HEAPU8[25384 + (HEAP32[$vla73 + ($i$2172$us$4 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$4 = $conv133$pn$us$4 + $sumBits_Q5$0171$us$4 | 0;
   $i$2172$us$4 = $i$2172$us$4 + 1 | 0;
  } while (($i$2172$us$4 | 0) != ($iter$0200 | 0));
  $spec$select115$us$3 = $cmp144$us$3 ? $sumBits_Q5$0171$us$3 : $spec$select115$us$2;
  $cmp144$us$4 = ($sumBits_Q5$0171$us$4 | 0) < ($spec$select115$us$3 | 0);
  $spec$select$us$4 = $cmp144$us$4 ? 4 : $spec$select$us$3;
  $i$2172$us$5 = 0;
  $sumBits_Q5$0171$us$5 = HEAPU8[25520 + ($shr120 * 9 | 0) + 5 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$5 << 2) >> 2] | 0) > 0) $conv133$pn$us$5 = 150; else $conv133$pn$us$5 = HEAPU8[25402 + (HEAP32[$vla73 + ($i$2172$us$5 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$5 = $conv133$pn$us$5 + $sumBits_Q5$0171$us$5 | 0;
   $i$2172$us$5 = $i$2172$us$5 + 1 | 0;
  } while (($i$2172$us$5 | 0) != ($iter$0200 | 0));
  $spec$select115$us$4 = $cmp144$us$4 ? $sumBits_Q5$0171$us$4 : $spec$select115$us$3;
  $cmp144$us$5 = ($sumBits_Q5$0171$us$5 | 0) < ($spec$select115$us$4 | 0);
  $spec$select$us$5 = $cmp144$us$5 ? 5 : $spec$select$us$4;
  $i$2172$us$6 = 0;
  $sumBits_Q5$0171$us$6 = HEAPU8[25520 + ($shr120 * 9 | 0) + 6 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$6 << 2) >> 2] | 0) > 0) $conv133$pn$us$6 = 255; else $conv133$pn$us$6 = HEAPU8[25420 + (HEAP32[$vla73 + ($i$2172$us$6 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$6 = $conv133$pn$us$6 + $sumBits_Q5$0171$us$6 | 0;
   $i$2172$us$6 = $i$2172$us$6 + 1 | 0;
  } while (($i$2172$us$6 | 0) != ($iter$0200 | 0));
  $spec$select115$us$5 = $cmp144$us$5 ? $sumBits_Q5$0171$us$5 : $spec$select115$us$4;
  $cmp144$us$6 = ($sumBits_Q5$0171$us$6 | 0) < ($spec$select115$us$5 | 0);
  $spec$select$us$6 = $cmp144$us$6 ? 6 : $spec$select$us$5;
  $i$2172$us$7 = 0;
  $sumBits_Q5$0171$us$7 = HEAPU8[25520 + ($shr120 * 9 | 0) + 7 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$7 << 2) >> 2] | 0) > 0) $conv133$pn$us$7 = 224; else $conv133$pn$us$7 = HEAPU8[25438 + (HEAP32[$vla73 + ($i$2172$us$7 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$7 = $conv133$pn$us$7 + $sumBits_Q5$0171$us$7 | 0;
   $i$2172$us$7 = $i$2172$us$7 + 1 | 0;
  } while (($i$2172$us$7 | 0) != ($iter$0200 | 0));
  $spec$select115$us$6 = $cmp144$us$6 ? $sumBits_Q5$0171$us$6 : $spec$select115$us$5;
  $cmp144$us$7 = ($sumBits_Q5$0171$us$7 | 0) < ($spec$select115$us$6 | 0);
  $spec$select$us$7 = $cmp144$us$7 ? 7 : $spec$select$us$6;
  $i$2172$us$8 = 0;
  $sumBits_Q5$0171$us$8 = HEAPU8[25520 + ($shr120 * 9 | 0) + 8 >> 0] | 0;
  do {
   if ((HEAP32[$vla74 + ($i$2172$us$8 << 2) >> 2] | 0) > 0) $conv133$pn$us$8 = 131; else $conv133$pn$us$8 = HEAPU8[25456 + (HEAP32[$vla73 + ($i$2172$us$8 << 2) >> 2] | 0) >> 0] | 0;
   $sumBits_Q5$0171$us$8 = $conv133$pn$us$8 + $sumBits_Q5$0171$us$8 | 0;
   $i$2172$us$8 = $i$2172$us$8 + 1 | 0;
  } while (($i$2172$us$8 | 0) != ($iter$0200 | 0));
  $spec$select$us$8 = ($sumBits_Q5$0171$us$8 | 0) < (($cmp144$us$7 ? $sumBits_Q5$0171$us$7 : $spec$select115$us$6) | 0) ? 8 : $spec$select$us$7;
  _ec_enc_icdf($psRangeEnc, $spec$select$us$8, 25488 + ($shr120 * 9 | 0) | 0, 8);
  $arraydecay155 = 25120 + ($spec$select$us$8 * 18 | 0) | 0;
  $i$3168 = 0;
  do {
   $45 = HEAP32[$vla74 + ($i$3168 << 2) >> 2] | 0;
   if (!$45) _ec_enc_icdf($psRangeEnc, HEAP32[$vla73 + ($i$3168 << 2) >> 2] | 0, $arraydecay155, 8); else {
    _ec_enc_icdf($psRangeEnc, 17, $arraydecay155, 8);
    $sub168 = $45 + -1 | 0;
    if (($45 | 0) > 1) {
     $k$2166 = 0;
     do {
      _ec_enc_icdf($psRangeEnc, 17, 25282, 8);
      $k$2166 = $k$2166 + 1 | 0;
     } while (($k$2166 | 0) != ($sub168 | 0));
    }
    _ec_enc_icdf($psRangeEnc, HEAP32[$vla73 + ($i$3168 << 2) >> 2] | 0, 25282, 8);
   }
   $i$3168 = $i$3168 + 1 | 0;
  } while (($i$3168 | 0) != ($iter$0200 | 0));
  $i$4164 = 0;
  do {
   if ((HEAP32[$vla73 + ($i$4164 << 2) >> 2] | 0) > 0) {
    $arrayidx189 = $vla202 + ($i$4164 << 4 << 2) | 0;
    $add3$i$i = (HEAP32[$arrayidx189 + 4 >> 2] | 0) + (HEAP32[$arrayidx189 >> 2] | 0) | 0;
    $arrayidx$i$1$i = $arrayidx189 + 8 | 0;
    $add3$i$1$i = (HEAP32[$arrayidx189 + 12 >> 2] | 0) + (HEAP32[$arrayidx$i$1$i >> 2] | 0) | 0;
    $arrayidx$i$2$i = $arrayidx189 + 16 | 0;
    $add3$i$2$i = (HEAP32[$arrayidx189 + 20 >> 2] | 0) + (HEAP32[$arrayidx$i$2$i >> 2] | 0) | 0;
    $arrayidx$i$3$i = $arrayidx189 + 24 | 0;
    $add3$i$3$i = (HEAP32[$arrayidx189 + 28 >> 2] | 0) + (HEAP32[$arrayidx$i$3$i >> 2] | 0) | 0;
    $arrayidx$i$4$i = $arrayidx189 + 32 | 0;
    $add3$i$4$i = (HEAP32[$arrayidx189 + 36 >> 2] | 0) + (HEAP32[$arrayidx$i$4$i >> 2] | 0) | 0;
    $arrayidx$i$5$i = $arrayidx189 + 40 | 0;
    $add3$i$5$i = (HEAP32[$arrayidx189 + 44 >> 2] | 0) + (HEAP32[$arrayidx$i$5$i >> 2] | 0) | 0;
    $arrayidx$i$6$i = $arrayidx189 + 48 | 0;
    $add3$i$6$i = (HEAP32[$arrayidx189 + 52 >> 2] | 0) + (HEAP32[$arrayidx$i$6$i >> 2] | 0) | 0;
    $arrayidx$i$7$i = $arrayidx189 + 56 | 0;
    $add3$i$7$i = (HEAP32[$arrayidx189 + 60 >> 2] | 0) + (HEAP32[$arrayidx$i$7$i >> 2] | 0) | 0;
    $add3$i29$i = $add3$i$1$i + $add3$i$i | 0;
    $add3$i29$1$i = $add3$i$3$i + $add3$i$2$i | 0;
    $add3$i29$2$i = $add3$i$5$i + $add3$i$4$i | 0;
    $add3$i29$3$i = $add3$i$7$i + $add3$i$6$i | 0;
    $add3$i46$i = $add3$i29$1$i + $add3$i29$i | 0;
    $add3$i46$1$i = $add3$i29$3$i + $add3$i29$2$i | 0;
    $add3$i63$i = $add3$i46$1$i + $add3$i46$i | 0;
    if (($add3$i63$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i46$i, 26032 + (HEAPU8[26192 + $add3$i63$i >> 0] | 0) | 0, 8);
    if (($add3$i46$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i29$i, 25872 + (HEAPU8[26192 + $add3$i46$i >> 0] | 0) | 0, 8);
    if (($add3$i29$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i$i, 25712 + (HEAPU8[26192 + $add3$i29$i >> 0] | 0) | 0, 8);
    if (($add3$i$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx189 >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$i >> 0] | 0) | 0, 8);
    if (($add3$i$1$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$1$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$1$i >> 0] | 0) | 0, 8);
    if (($add3$i29$1$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i$2$i, 25712 + (HEAPU8[26192 + $add3$i29$1$i >> 0] | 0) | 0, 8);
    if (($add3$i$2$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$2$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$2$i >> 0] | 0) | 0, 8);
    if (($add3$i$3$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$3$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$3$i >> 0] | 0) | 0, 8);
    if (($add3$i46$1$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i29$2$i, 25872 + (HEAPU8[26192 + $add3$i46$1$i >> 0] | 0) | 0, 8);
    if (($add3$i29$2$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i$4$i, 25712 + (HEAPU8[26192 + $add3$i29$2$i >> 0] | 0) | 0, 8);
    if (($add3$i$4$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$4$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$4$i >> 0] | 0) | 0, 8);
    if (($add3$i$5$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$5$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$5$i >> 0] | 0) | 0, 8);
    if (($add3$i29$3$i | 0) > 0) _ec_enc_icdf($psRangeEnc, $add3$i$6$i, 25712 + (HEAPU8[26192 + $add3$i29$3$i >> 0] | 0) | 0, 8);
    if (($add3$i$6$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$6$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$6$i >> 0] | 0) | 0, 8);
    if (($add3$i$7$i | 0) > 0) _ec_enc_icdf($psRangeEnc, HEAP32[$arrayidx$i$7$i >> 2] | 0, 25552 + (HEAPU8[26192 + $add3$i$7$i >> 0] | 0) | 0, 8);
   }
   $i$4164 = $i$4164 + 1 | 0;
  } while (($i$4164 | 0) != ($iter$0200 | 0));
  $i$5162 = 0;
  do {
   $88 = HEAP32[$vla74 + ($i$5162 << 2) >> 2] | 0;
   do if (($88 | 0) > 0) {
    $arrayidx203 = $pulses + ($i$5162 << 4) | 0;
    if (($88 | 0) == 1) {
     $conv211 = HEAP8[$arrayidx203 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211 | 0) > 0 ? $conv211 : 0 - $conv211 | 0) & 1, 51892, 8);
     $conv211$1 = HEAP8[$arrayidx203 + 1 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$1 | 0) > 0 ? $conv211$1 : 0 - $conv211$1 | 0) & 1, 51892, 8);
     $conv211$2 = HEAP8[$arrayidx203 + 2 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$2 | 0) > 0 ? $conv211$2 : 0 - $conv211$2 | 0) & 1, 51892, 8);
     $conv211$3 = HEAP8[$arrayidx203 + 3 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$3 | 0) > 0 ? $conv211$3 : 0 - $conv211$3 | 0) & 1, 51892, 8);
     $conv211$4 = HEAP8[$arrayidx203 + 4 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$4 | 0) > 0 ? $conv211$4 : 0 - $conv211$4 | 0) & 1, 51892, 8);
     $conv211$5 = HEAP8[$arrayidx203 + 5 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$5 | 0) > 0 ? $conv211$5 : 0 - $conv211$5 | 0) & 1, 51892, 8);
     $conv211$6 = HEAP8[$arrayidx203 + 6 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$6 | 0) > 0 ? $conv211$6 : 0 - $conv211$6 | 0) & 1, 51892, 8);
     $conv211$7 = HEAP8[$arrayidx203 + 7 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$7 | 0) > 0 ? $conv211$7 : 0 - $conv211$7 | 0) & 1, 51892, 8);
     $conv211$8 = HEAP8[$arrayidx203 + 8 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$8 | 0) > 0 ? $conv211$8 : 0 - $conv211$8 | 0) & 1, 51892, 8);
     $conv211$9 = HEAP8[$arrayidx203 + 9 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$9 | 0) > 0 ? $conv211$9 : 0 - $conv211$9 | 0) & 1, 51892, 8);
     $conv211$10 = HEAP8[$arrayidx203 + 10 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$10 | 0) > 0 ? $conv211$10 : 0 - $conv211$10 | 0) & 1, 51892, 8);
     $conv211$11 = HEAP8[$arrayidx203 + 11 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$11 | 0) > 0 ? $conv211$11 : 0 - $conv211$11 | 0) & 1, 51892, 8);
     $conv211$12 = HEAP8[$arrayidx203 + 12 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$12 | 0) > 0 ? $conv211$12 : 0 - $conv211$12 | 0) & 1, 51892, 8);
     $conv211$13 = HEAP8[$arrayidx203 + 13 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$13 | 0) > 0 ? $conv211$13 : 0 - $conv211$13 | 0) & 1, 51892, 8);
     $conv211$14 = HEAP8[$arrayidx203 + 14 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$14 | 0) > 0 ? $conv211$14 : 0 - $conv211$14 | 0) & 1, 51892, 8);
     $conv211$15 = HEAP8[$arrayidx203 + 15 >> 0] | 0;
     _ec_enc_icdf($psRangeEnc, (($conv211$15 | 0) > 0 ? $conv211$15 : 0 - $conv211$15 | 0) & 1, 51892, 8);
     break;
    }
    $k$3160$us = 0;
    do {
     $conv211$us = HEAP8[$arrayidx203 + $k$3160$us >> 0] | 0;
     $conv224$us = (($conv211$us | 0) > 0 ? $conv211$us : 0 - $conv211$us | 0) << 24 >> 24;
     $j$0159$us$in = $88;
     do {
      $j$0159$us$in$looptemp = $j$0159$us$in;
      $j$0159$us$in = $j$0159$us$in + -1 | 0;
      _ec_enc_icdf($psRangeEnc, $conv224$us >>> $j$0159$us$in & 1, 51892, 8);
     } while (($j$0159$us$in$looptemp | 0) > 2);
     _ec_enc_icdf($psRangeEnc, $conv224$us & 1, 51892, 8);
     $k$3160$us = $k$3160$us + 1 | 0;
    } while (($k$3160$us | 0) != 16);
   } while (0);
   $i$5162 = $i$5162 + 1 | 0;
  } while (($i$5162 | 0) != ($iter$0200 | 0));
  $vla73213239 = $vla73;
 }
 HEAP8[$icdf$i + 1 >> 0] = 0;
 $arrayidx2$i = 26224 + ((($signalType << 1) + $quantOffsetType << 16 >> 16) * 7 | 0) | 0;
 $shr$i = $frame_length + 8 >> 4;
 if (($frame_length | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 $i$019$i = 0;
 $q_ptr$020$i = $pulses;
 while (1) {
  $106 = HEAP32[$vla73213239 + ($i$019$i << 2) >> 2] | 0;
  do if (($106 | 0) > 0) {
   $and$i = $106 & 31;
   HEAP8[$icdf$i >> 0] = HEAP8[$arrayidx2$i + ($and$i >>> 0 < 6 ? $and$i : 6) >> 0] | 0;
   $108 = HEAP8[$q_ptr$020$i >> 0] | 0;
   if ($108 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($108 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $109 = HEAP8[$q_ptr$020$i + 1 >> 0] | 0;
   if ($109 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($109 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $110 = HEAP8[$q_ptr$020$i + 2 >> 0] | 0;
   if ($110 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($110 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $111 = HEAP8[$q_ptr$020$i + 3 >> 0] | 0;
   if ($111 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($111 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $112 = HEAP8[$q_ptr$020$i + 4 >> 0] | 0;
   if ($112 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($112 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $113 = HEAP8[$q_ptr$020$i + 5 >> 0] | 0;
   if ($113 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($113 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $114 = HEAP8[$q_ptr$020$i + 6 >> 0] | 0;
   if ($114 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($114 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $115 = HEAP8[$q_ptr$020$i + 7 >> 0] | 0;
   if ($115 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($115 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $116 = HEAP8[$q_ptr$020$i + 8 >> 0] | 0;
   if ($116 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($116 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $117 = HEAP8[$q_ptr$020$i + 9 >> 0] | 0;
   if ($117 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($117 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $118 = HEAP8[$q_ptr$020$i + 10 >> 0] | 0;
   if ($118 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($118 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $119 = HEAP8[$q_ptr$020$i + 11 >> 0] | 0;
   if ($119 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($119 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $120 = HEAP8[$q_ptr$020$i + 12 >> 0] | 0;
   if ($120 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($120 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $121 = HEAP8[$q_ptr$020$i + 13 >> 0] | 0;
   if ($121 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($121 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $122 = HEAP8[$q_ptr$020$i + 14 >> 0] | 0;
   if ($122 << 24 >> 24) _ec_enc_icdf($psRangeEnc, ($122 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
   $123 = HEAP8[$q_ptr$020$i + 15 >> 0] | 0;
   if (!($123 << 24 >> 24)) break;
   _ec_enc_icdf($psRangeEnc, ($123 << 24 >> 24 >> 15) + 1 | 0, $icdf$i, 8);
  } while (0);
  $i$019$i = $i$019$i + 1 | 0;
  if (($i$019$i | 0) >= ($shr$i | 0)) break; else $q_ptr$020$i = $q_ptr$020$i + 16 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_NSQ_del_dec_c($psEncC, $NSQ, $psIndices, $x16, $pulses, $PredCoef_Q12, $LTPCoef_Q14, $AR_Q13, $HarmShapeGain_Q14, $Tilt_Q14, $LF_shp_Q14, $Gains_Q16, $pitchL, $Lambda_Q10, $LTP_scale_Q14) {
 $psEncC = $psEncC | 0;
 $NSQ = $NSQ | 0;
 $psIndices = $psIndices | 0;
 $x16 = $x16 | 0;
 $pulses = $pulses | 0;
 $PredCoef_Q12 = $PredCoef_Q12 | 0;
 $LTPCoef_Q14 = $LTPCoef_Q14 | 0;
 $AR_Q13 = $AR_Q13 | 0;
 $HarmShapeGain_Q14 = $HarmShapeGain_Q14 | 0;
 $Tilt_Q14 = $Tilt_Q14 | 0;
 $LF_shp_Q14 = $LF_shp_Q14 | 0;
 $Gains_Q16 = $Gains_Q16 | 0;
 $pitchL = $pitchL | 0;
 $Lambda_Q10 = $Lambda_Q10 | 0;
 $LTP_scale_Q14 = $LTP_scale_Q14 | 0;
 var $$ = 0, $$lcssa272 = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $110 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $Diff_Q14$i = 0, $Diff_Q14442 = 0, $LF_AR_Q14$i = 0, $LF_AR_Q14440 = 0, $RD_Q10117 = 0, $RD_Q1091 = 0, $RDmin_Q10$0287 = 0, $RDmin_Q10$2283 = 0, $Winner_ind$0$lcssa = 0, $Winner_ind$0285 = 0, $Winner_ind$2$lcssa = 0, $Winner_ind$2281 = 0, $add$i = 0, $add$i162$i = 0, $add$ptr282 = 0, $add$ptr284 = 0, $add164 = 0, $add26$i$i = 0, $add34$i$i = 0, $add354 = 0, $add45 = 0, $and = 0, $and116$i = 0, $and143$i = 0, $and47$i = 0, $and76$i = 0, $arraydecay11 = 0, $arraydecay432 = 0, $arraydecay437 = 0, $arraydecay439 = 0, $arraydecay8 = 0, $arrayidx1$i = 0, $arrayidx112$i = 0, $arrayidx144 = 0, $arrayidx180$1$i = 0, $arrayidx180$10$i = 0, $arrayidx180$11$i = 0, $arrayidx180$12$i = 0, $arrayidx180$13$i = 0, $arrayidx180$14$i = 0, $arrayidx180$15$i = 0, $arrayidx180$2$i = 0, $arrayidx180$3$i = 0, $arrayidx180$4$i = 0, $arrayidx180$5$i = 0, $arrayidx180$6$i = 0, $arrayidx180$7$i = 0, $arrayidx180$8$i = 0, $arrayidx180$9$i = 0, $arrayidx180$i = 0, $arrayidx209$i = 0, $arrayidx238$i = 0, $arrayidx260$i = 0, $arrayidx435 = 0, $arrayidx446 = 0, $arrayidx452 = 0, $arrayidx459 = 0, $arrayidx54 = 0, $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx69 = 0, $arrayidx72$i = 0, $arrayidx80 = 0, $call149$i = 0, $call64168$i = 0, $cmp126292 = 0, $cmp297 = 0, $cmp35$i$i = 0, $cmp44$i$i = 0, $cmp99 = 0, $cond$i = 0, $cond$i267 = 0, $conv$i = 0, $conv114$i = 0, $conv12$i$i = 0, $conv141$i = 0, $conv146 = 0, $conv15 = 0, $conv159$i = 0, $conv182$1$i = 0, $conv182$10$i = 0, $conv182$11$i = 0, $conv182$12$i = 0, $conv182$13$i = 0, $conv182$14$i = 0, $conv182$15$i = 0, $conv182$2$i = 0, $conv182$3$i = 0, $conv182$4$i = 0, $conv182$5$i = 0, $conv182$6$i = 0, $conv182$7$i = 0, $conv182$8$i = 0, $conv182$9$i = 0, $conv182$i = 0, $conv211$i = 0, $conv240$i = 0, $conv258 = 0, $conv262$i = 0, $conv268 = 0, $conv29$i = 0, $conv338 = 0, $conv4$i$i = 0, $conv45$i = 0, $conv74$i = 0, $conv8$i = 0, $decisionDelay$0309 = 0, $decisionDelay$1 = 0, $delayedGain_Q10 = 0, $div$i$i = 0, $frame_length = 0, $i$0182$i = 0, $i$0286 = 0, $i$1180$i = 0, $i$1291 = 0, $i$2178$i = 0, $i$2294 = 0, $i$3176$i = 0, $i$3279 = 0, $i$5170$i = 0, $i$6171$i = 0, $inc286 = 0, $inv_gain_Q31$0$i = 0, $k$0173$i = 0, $k$0313 = 0, $k$1310 = 0, $k$2298 = 0, $k$3282 = 0, $lag$0297 = 0, $lag$1 = 0, $lagPrev = 0, $last_smple_idx$0293 = 0, $last_smple_idx$2278 = 0, $ltp_mem_length44 = 0, $mul454 = 0, $mul461 = 0, $nStatesDelayedDecision = 0, $nb_subfr = 0, $nb_subfr58$phi$trans$insert = 0, $nb_subfr58$pre$phiZ2D = 0, $or74 = 0, $predictLPCOrder = 0, $prev_gain_Q16$i = 0, $pulses$addr$0$lcssa = 0, $pulses$addr$0301 = 0, $pxq$0$lcssa = 0, $pxq$0300 = 0, $rem = 0, $rem320 = 0, $rewhite_flag = 0, $sDiff_shp_Q14443 = 0, $sLF_AR_shp_Q14441 = 0, $sLTP_buf_idx = 0, $sLTP_shp_Q14455 = 0, $sLTP_shp_buf_idx = 0, $shapingLPCOrder = 0, $shl$i$i = 0, $shl$i154$i = 0, $shl10$i$i = 0, $shl10$i156$i = 0, $shl2$i$i = 0, $shr$i$i = 0, $shr111$i = 0, $shr139$i = 0, $shr20$i = 0, $shr32$i$i = 0, $shr32$i$i$shr34$i$i = 0, $shr34$i$i = 0, $shr34$i$i$shr32$i$i = 0, $shr352 = 0, $shr41$i$i = 0, $shr41$i$i$shr43$i$i = 0, $shr43$i = 0, $shr43$i$i = 0, $shr43$i$i$shr41$i$i = 0, $shr71$i = 0, $signalType = 0, $smpl_buf_idx = 0, $spec$select = 0, $spec$select$i = 0, $spec$select262 = 0, $sub104$i = 0, $sub107174$i = 0, $sub140 = 0, $sub23$i$i = 0, $sub246 = 0, $sub247 = 0, $sub26 = 0, $sub27$i$i = 0, $sub31$i$i = 0, $sub332 = 0, $sub35 = 0, $sub36$i$i = 0, $sub37$i = 0, $sub40$i$i = 0, $sub445 = 0, $sub63 = 0, $sub82 = 0, $subfr$0296 = 0, $subfr$1 = 0, $subfr$2 = 0, $subfr_length = 0, $vla = 0, $vla46 = 0, $vla50 = 0, $vla52 = 0, $warping_Q16 = 0, $x16$addr$0302 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $smpl_buf_idx = sp + 160 | 0;
 $delayedGain_Q10 = sp;
 $lagPrev = $NSQ + 4328 | 0;
 $0 = HEAP32[$lagPrev >> 2] | 0;
 $nStatesDelayedDecision = $psEncC + 4628 | 0;
 $1 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 * 1300 | 0) | 0) + 15 & -16) | 0;
 $3 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
 _memset($vla | 0, 0, $3 * 1300 | 0) | 0;
 if (($3 | 0) > 0) {
  $conv258 = HEAPU8[$psIndices + 34 >> 0] | 0;
  $5 = HEAP32[$NSQ + 4320 >> 2] | 0;
  $6 = HEAP32[$NSQ + 4324 >> 2] | 0;
  $8 = HEAP32[$NSQ + 1280 + ((HEAP32[$psEncC + 4592 >> 2] | 0) + -1 << 2) >> 2] | 0;
  $arraydecay8 = $NSQ + 3840 | 0;
  $arraydecay11 = $NSQ + 4224 | 0;
  $k$0313 = 0;
  do {
   $and = $k$0313 + $conv258 & 3;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1288 >> 2] = $and;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1292 >> 2] = $and;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1296 >> 2] = 0;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1280 >> 2] = $5;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1284 >> 2] = $6;
   HEAP32[$vla + ($k$0313 * 1300 | 0) + 1024 >> 2] = $8;
   dest = $vla + ($k$0313 * 1300 | 0) | 0;
   src = $arraydecay8;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $vla + ($k$0313 * 1300 | 0) + 1184 | 0;
   src = $arraydecay11;
   stop = dest + 96 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $k$0313 = $k$0313 + 1 | 0;
  } while (($k$0313 | 0) != ($3 | 0));
 }
 $signalType = $psIndices + 29 | 0;
 $9 = HEAP8[$signalType >> 0] | 0;
 $conv15 = HEAP16[47584 + ($9 << 24 >> 24 >> 1 << 2) + (HEAP8[$psIndices + 30 >> 0] << 1) >> 1] | 0;
 HEAP32[$smpl_buf_idx >> 2] = 0;
 $subfr_length = $psEncC + 4588 | 0;
 $12 = HEAP32[$subfr_length >> 2] | 0;
 $cond$i = ($12 | 0) < 40 ? $12 : 40;
 if ($9 << 24 >> 24 == 2) {
  $nb_subfr = $psEncC + 4580 | 0;
  $14 = HEAP32[$nb_subfr >> 2] | 0;
  if (($14 | 0) > 0) {
   $decisionDelay$0309 = $cond$i;
   $k$1310 = 0;
   while (1) {
    $sub26 = (HEAP32[$pitchL + ($k$1310 << 2) >> 2] | 0) + -3 | 0;
    $cond$i267 = ($decisionDelay$0309 | 0) < ($sub26 | 0) ? $decisionDelay$0309 : $sub26;
    $k$1310 = $k$1310 + 1 | 0;
    if (($k$1310 | 0) == ($14 | 0)) {
     $19 = $14;
     $decisionDelay$1 = $cond$i267;
     $nb_subfr58$pre$phiZ2D = $nb_subfr;
     break;
    } else $decisionDelay$0309 = $cond$i267;
   }
  } else {
   $19 = $14;
   $decisionDelay$1 = $cond$i;
   $nb_subfr58$pre$phiZ2D = $nb_subfr;
  }
 } else {
  $sub35 = $0 + -3 | 0;
  $nb_subfr58$phi$trans$insert = $psEncC + 4580 | 0;
  $19 = HEAP32[$nb_subfr58$phi$trans$insert >> 2] | 0;
  $decisionDelay$1 = ($0 | 0) > 0 ? (($cond$i | 0) < ($sub35 | 0) ? $cond$i : $sub35) : $cond$i;
  $nb_subfr58$pre$phiZ2D = $nb_subfr58$phi$trans$insert;
 }
 $$ = (HEAP8[$psIndices + 31 >> 0] | 0) != 4 & 1;
 $ltp_mem_length44 = $psEncC + 4592 | 0;
 $17 = HEAP32[$ltp_mem_length44 >> 2] | 0;
 $frame_length = $psEncC + 4584 | 0;
 $add45 = (HEAP32[$frame_length >> 2] | 0) + $17 | 0;
 $vla46 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add45 << 2) | 0) + 15 & -16) | 0;
 $vla50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add45 << 1) | 0) + 15 & -16) | 0;
 $vla52 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 $arrayidx54 = $NSQ + ($17 << 1) | 0;
 $sLTP_shp_buf_idx = $NSQ + 4336 | 0;
 HEAP32[$sLTP_shp_buf_idx >> 2] = $17;
 $sLTP_buf_idx = $NSQ + 4332 | 0;
 HEAP32[$sLTP_buf_idx >> 2] = $17;
 do if (($19 | 0) > 0) {
  $sub63 = $$ ^ 1;
  $rewhite_flag = $NSQ + 4348 | 0;
  $sub82 = $$ << 1 ^ 3;
  $RD_Q1091 = $vla + 1296 | 0;
  $predictLPCOrder = $psEncC + 4640 | 0;
  $prev_gain_Q16$i = $NSQ + 4344 | 0;
  $cmp126292 = ($decisionDelay$1 | 0) > 0;
  $shapingLPCOrder = $psEncC + 4636 | 0;
  $warping_Q16 = $psEncC + 4672 | 0;
  $conv29$i = $LTP_scale_Q14 << 16 >> 16;
  $arrayidx144 = $Gains_Q16 + 4 | 0;
  $23 = $9;
  $k$2298 = 0;
  $lag$0297 = $0;
  $pulses$addr$0301 = $pulses;
  $pxq$0300 = $arrayidx54;
  $subfr$0296 = 0;
  $x16$addr$0302 = $x16;
  while (1) {
   $arrayidx65 = $PredCoef_Q12 + (($k$2298 >>> 1 | $sub63) << 4 << 1) | 0;
   $arrayidx67 = $LTPCoef_Q14 + ($k$2298 * 5 << 1) | 0;
   $arrayidx69 = $AR_Q13 + ($k$2298 * 24 << 1) | 0;
   $21 = HEAP32[$HarmShapeGain_Q14 + ($k$2298 << 2) >> 2] | 0;
   $or74 = $21 >>> 1 << 16 | $21 >> 2;
   HEAP32[$rewhite_flag >> 2] = 0;
   $arrayidx80 = $pitchL + ($k$2298 << 2) | 0;
   if ($23 << 24 >> 24 == 2) {
    $24 = HEAP32[$arrayidx80 >> 2] | 0;
    if (!($k$2298 & $sub82)) {
     if (($k$2298 | 0) == 2) {
      $25 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
      if (($25 | 0) > 1) {
       $RDmin_Q10$0287 = HEAP32[$RD_Q1091 >> 2] | 0;
       $Winner_ind$0285 = 0;
       $i$0286 = 1;
       while (1) {
        $27 = HEAP32[$vla + ($i$0286 * 1300 | 0) + 1296 >> 2] | 0;
        $cmp99 = ($27 | 0) < ($RDmin_Q10$0287 | 0);
        $spec$select = $cmp99 ? $i$0286 : $Winner_ind$0285;
        $i$0286 = $i$0286 + 1 | 0;
        if (($i$0286 | 0) == ($25 | 0)) {
         $Winner_ind$0$lcssa = $spec$select;
         break;
        } else {
         $RDmin_Q10$0287 = $cmp99 ? $27 : $RDmin_Q10$0287;
         $Winner_ind$0285 = $spec$select;
        }
       }
      } else $Winner_ind$0$lcssa = 0;
      if (($25 | 0) > 0) {
       $i$1291 = 0;
       do {
        $RD_Q10117 = $vla + ($i$1291 * 1300 | 0) + 1296 | 0;
        if (($i$1291 | 0) != ($Winner_ind$0$lcssa | 0)) HEAP32[$RD_Q10117 >> 2] = (HEAP32[$RD_Q10117 >> 2] | 0) + 134217727;
        $i$1291 = $i$1291 + 1 | 0;
       } while (($i$1291 | 0) != ($25 | 0));
      }
      if ($cmp126292) {
       $i$2294 = 0;
       $last_smple_idx$0293 = (HEAP32[$smpl_buf_idx >> 2] | 0) + $decisionDelay$1 | 0;
       do {
        $rem = ($last_smple_idx$0293 + -1 | 0) % 40 | 0;
        $last_smple_idx$0293 = ($rem | 0) < 0 ? $rem + 40 | 0 : $rem;
        $sub140 = $i$2294 - $decisionDelay$1 | 0;
        HEAP8[$pulses$addr$0301 + $sub140 >> 0] = (((HEAP32[$vla + ($Winner_ind$0$lcssa * 1300 | 0) + 544 + ($last_smple_idx$0293 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
        $33 = HEAP32[$vla + ($Winner_ind$0$lcssa * 1300 | 0) + 704 + ($last_smple_idx$0293 << 2) >> 2] | 0;
        $34 = HEAP32[$arrayidx144 >> 2] | 0;
        $conv146 = $34 << 16 >> 16;
        $add164 = ((Math_imul($conv146, $33 & 65535) | 0) >> 16) + (Math_imul($conv146, $33 >> 16) | 0) + (Math_imul(($34 >> 15) + 1 >> 1, $33) | 0) | 0;
        HEAP16[$pxq$0300 + ($sub140 << 1) >> 1] = ($add164 | 0) > 536862719 ? 32767 : ($add164 | 0) < -536879104 ? -32768 : (($add164 >>> 13) + 1 | 0) >>> 1 & 65535;
        HEAP32[$NSQ + 1280 + ($sub140 + (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) << 2) >> 2] = HEAP32[$vla + ($Winner_ind$0$lcssa * 1300 | 0) + 1024 + ($last_smple_idx$0293 << 2) >> 2];
        $i$2294 = $i$2294 + 1 | 0;
       } while (($i$2294 | 0) != ($decisionDelay$1 | 0));
       $subfr$1 = 0;
      } else $subfr$1 = 0;
     } else $subfr$1 = $subfr$0296;
     $41 = HEAP32[$ltp_mem_length44 >> 2] | 0;
     $42 = HEAP32[$predictLPCOrder >> 2] | 0;
     $sub246 = $41 - $24 - $42 | 0;
     $sub247 = $sub246 + -2 | 0;
     if (($sub246 | 0) <= 2) {
      label = 26;
      break;
     }
     _silk_LPC_analysis_filter($vla50 + ($sub247 << 1) | 0, $NSQ + ((Math_imul(HEAP32[$subfr_length >> 2] | 0, $k$2298) | 0) + $sub247 << 1) | 0, $arrayidx65, $41 - $sub247 | 0, $42);
     HEAP32[$sLTP_buf_idx >> 2] = HEAP32[$ltp_mem_length44 >> 2];
     HEAP32[$rewhite_flag >> 2] = 1;
     $46 = HEAP8[$signalType >> 0] | 0;
     $53 = 1;
     $lag$1 = $24;
     $subfr$2 = $subfr$1;
    } else {
     $46 = 2;
     $53 = 0;
     $lag$1 = $24;
     $subfr$2 = $subfr$0296;
    }
   } else {
    $46 = $23;
    $53 = 0;
    $lag$1 = $lag$0297;
    $subfr$2 = $subfr$0296;
   }
   $45 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
   $conv268 = $46 << 24 >> 24;
   $47 = HEAP32[$arrayidx80 >> 2] | 0;
   $arrayidx1$i = $Gains_Q16 + ($k$2298 << 2) | 0;
   $48 = HEAP32[$arrayidx1$i >> 2] | 0;
   $spec$select$i = ($48 | 0) > 1 ? $48 : 1;
   $49 = Math_clz32((($spec$select$i | 0) > 0 ? $spec$select$i : 0 - $spec$select$i | 0) | 0) | 0;
   $shl$i$i = $spec$select$i << $49 + -1;
   $shr$i$i = $shl$i$i >> 16;
   $div$i$i = 536870911 / ($shr$i$i | 0) | 0;
   $shl2$i$i = $div$i$i << 16;
   $conv4$i$i = $shl2$i$i >> 16;
   $shl10$i$i = 0 - (((Math_imul($shl$i$i & 65535, $conv4$i$i) | 0) >> 16) + (Math_imul($shr$i$i, $conv4$i$i) | 0) << 3) | 0;
   $add26$i$i = (Math_imul(($div$i$i >> 15) + 1 >> 1, $shl10$i$i) | 0) + $shl2$i$i + (Math_imul($shl10$i$i >> 16, $conv4$i$i) | 0) + ((Math_imul($shl10$i$i & 65528, $conv4$i$i) | 0) >> 16) | 0;
   $sub27$i$i = 62 - $49 | 0;
   if (($sub27$i$i | 0) < 48) {
    $sub31$i$i = 47 - $sub27$i$i | 0;
    $shr32$i$i = -2147483648 >> $sub31$i$i;
    $shr34$i$i = 2147483647 >>> $sub31$i$i;
    $cmp35$i$i = ($shr32$i$i | 0) > ($shr34$i$i | 0);
    $shr32$i$i$shr34$i$i = $cmp35$i$i ? $shr32$i$i : $shr34$i$i;
    $shr34$i$i$shr32$i$i = $cmp35$i$i ? $shr34$i$i : $shr32$i$i;
    $call149$i = (($add26$i$i | 0) > ($shr32$i$i$shr34$i$i | 0) ? $shr32$i$i$shr34$i$i : ($add26$i$i | 0) < ($shr34$i$i$shr32$i$i | 0) ? $shr34$i$i$shr32$i$i : $add26$i$i) << $sub31$i$i;
   } else $call149$i = ($sub27$i$i | 0) < 79 ? $add26$i$i >> $sub27$i$i + -47 : 0;
   $add$i = ($call149$i >> 4) + 1 | 0;
   $50 = HEAP32[$subfr_length >> 2] | 0;
   if (($50 | 0) > 0) {
    $conv8$i = $add$i >>> 1 << 16 >> 16;
    $shr20$i = ($add$i >> 16) + 1 >> 1;
    $i$0182$i = 0;
    do {
     $conv$i = HEAP16[$x16$addr$0302 + ($i$0182$i << 1) >> 1] | 0;
     HEAP32[$vla52 + ($i$0182$i << 2) >> 2] = (Math_imul($conv$i >> 16, $conv8$i) | 0) + (Math_imul($shr20$i, $conv$i) | 0) + ((Math_imul($conv$i & 65535, $conv8$i) | 0) >> 16);
     $i$0182$i = $i$0182$i + 1 | 0;
    } while (($i$0182$i | 0) != ($50 | 0));
   }
   if ($53 | 0) {
    if (!$k$2298) $inv_gain_Q31$0$i = ((Math_imul($call149$i & 65535, $conv29$i) | 0) >> 16) + (Math_imul($call149$i >> 16, $conv29$i) | 0) << 2; else $inv_gain_Q31$0$i = $call149$i;
    $54 = HEAP32[$sLTP_buf_idx >> 2] | 0;
    $sub37$i = $54 + (-2 - $47) | 0;
    if (($sub37$i | 0) < ($54 | 0)) {
     $shr43$i = $inv_gain_Q31$0$i >> 16;
     $and47$i = $inv_gain_Q31$0$i & 65535;
     $i$1180$i = $sub37$i;
     do {
      $conv45$i = HEAP16[$vla50 + ($i$1180$i << 1) >> 1] | 0;
      HEAP32[$vla46 + ($i$1180$i << 2) >> 2] = ((Math_imul($and47$i, $conv45$i) | 0) >> 16) + (Math_imul($shr43$i, $conv45$i) | 0);
      $i$1180$i = $i$1180$i + 1 | 0;
     } while (($i$1180$i | 0) != ($54 | 0));
    }
   }
   $56 = HEAP32[$prev_gain_Q16$i >> 2] | 0;
   if (($48 | 0) == ($56 | 0)) {
    $101 = $48;
    $102 = $50;
    $103 = $45;
   } else {
    $57 = Math_clz32((($56 | 0) > 0 ? $56 : 0 - $56 | 0) | 0) | 0;
    $shl$i154$i = $56 << $57 + -1;
    $58 = Math_clz32((($48 | 0) > 0 ? $48 : 0 - $48 | 0) | 0) | 0;
    $shl10$i156$i = $48 << $58 + -1;
    $conv12$i$i = (536870911 / ($shl10$i156$i >> 16 | 0) | 0) << 16 >> 16;
    $add$i162$i = ((Math_imul($conv12$i$i, $shl$i154$i & 65535) | 0) >> 16) + (Math_imul($conv12$i$i, $shl$i154$i >> 16) | 0) | 0;
    $63 = ___muldi3($add$i162$i | 0, (($add$i162$i | 0) < 0) << 31 >> 31 | 0, $shl10$i156$i | 0, (($shl10$i156$i | 0) < 0) << 31 >> 31 | 0) | 0;
    $65 = _bitshift64Lshr($63 | 0, getTempRet0() | 0, 29) | 0;
    getTempRet0() | 0;
    $sub23$i$i = $shl$i154$i - ($65 & -8) | 0;
    $add34$i$i = (Math_imul($sub23$i$i >> 16, $conv12$i$i) | 0) + $add$i162$i + ((Math_imul($sub23$i$i & 65535, $conv12$i$i) | 0) >> 16) | 0;
    $sub36$i$i = 1 - $58 + 28 + $57 | 0;
    if (($sub36$i$i | 0) < 16) {
     $sub40$i$i = 16 - $sub36$i$i | 0;
     $shr41$i$i = -2147483648 >> $sub40$i$i;
     $shr43$i$i = 2147483647 >>> $sub40$i$i;
     $cmp44$i$i = ($shr41$i$i | 0) > ($shr43$i$i | 0);
     $shr41$i$i$shr43$i$i = $cmp44$i$i ? $shr41$i$i : $shr43$i$i;
     $shr43$i$i$shr41$i$i = $cmp44$i$i ? $shr43$i$i : $shr41$i$i;
     $call64168$i = (($add34$i$i | 0) > ($shr41$i$i$shr43$i$i | 0) ? $shr41$i$i$shr43$i$i : ($add34$i$i | 0) < ($shr43$i$i$shr41$i$i | 0) ? $shr43$i$i$shr41$i$i : $add34$i$i) << $sub40$i$i;
    } else $call64168$i = ($sub36$i$i | 0) < 48 ? $add34$i$i >> $sub36$i$i + -16 : 0;
    $67 = HEAP32[$ltp_mem_length44 >> 2] | 0;
    if (($67 | 0) > 0) {
     $shr71$i = $call64168$i >> 16;
     $and76$i = $call64168$i & 65535;
     $i$2178$i = (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) - $67 | 0;
     do {
      $arrayidx72$i = $NSQ + 1280 + ($i$2178$i << 2) | 0;
      $69 = HEAP32[$arrayidx72$i >> 2] | 0;
      $conv74$i = $69 << 16 >> 16;
      HEAP32[$arrayidx72$i >> 2] = ((Math_imul($conv74$i, $and76$i) | 0) >> 16) + (Math_imul($conv74$i, $shr71$i) | 0) + (Math_imul(($69 >> 15) + 1 >> 1, $call64168$i) | 0);
      $i$2178$i = $i$2178$i + 1 | 0;
     } while (($i$2178$i | 0) < (HEAP32[$sLTP_shp_buf_idx >> 2] | 0));
    }
    if ($46 << 24 >> 24 == 2) if (!(HEAP32[$rewhite_flag >> 2] | 0)) {
     $72 = HEAP32[$sLTP_buf_idx >> 2] | 0;
     $sub104$i = $72 + (-2 - $47) | 0;
     $sub107174$i = $72 - $decisionDelay$1 | 0;
     if (($sub104$i | 0) < ($sub107174$i | 0)) {
      $shr111$i = $call64168$i >> 16;
      $and116$i = $call64168$i & 65535;
      $i$3176$i = $sub104$i;
      do {
       $arrayidx112$i = $vla46 + ($i$3176$i << 2) | 0;
       $73 = HEAP32[$arrayidx112$i >> 2] | 0;
       $conv114$i = $73 << 16 >> 16;
       HEAP32[$arrayidx112$i >> 2] = ((Math_imul($conv114$i, $and116$i) | 0) >> 16) + (Math_imul($conv114$i, $shr111$i) | 0) + (Math_imul(($73 >> 15) + 1 >> 1, $call64168$i) | 0);
       $i$3176$i = $i$3176$i + 1 | 0;
      } while (($i$3176$i | 0) != ($sub107174$i | 0));
     }
    }
    if (($45 | 0) > 0) {
     $shr139$i = $call64168$i >> 16;
     $and143$i = $call64168$i & 65535;
     $k$0173$i = 0;
     do {
      $LF_AR_Q14$i = $vla + ($k$0173$i * 1300 | 0) + 1280 | 0;
      $74 = HEAP32[$LF_AR_Q14$i >> 2] | 0;
      $conv141$i = $74 << 16 >> 16;
      HEAP32[$LF_AR_Q14$i >> 2] = ((Math_imul($conv141$i, $and143$i) | 0) >> 16) + (Math_imul($conv141$i, $shr139$i) | 0) + (Math_imul(($74 >> 15) + 1 >> 1, $call64168$i) | 0);
      $Diff_Q14$i = $vla + ($k$0173$i * 1300 | 0) + 1284 | 0;
      $75 = HEAP32[$Diff_Q14$i >> 2] | 0;
      $conv159$i = $75 << 16 >> 16;
      HEAP32[$Diff_Q14$i >> 2] = ((Math_imul($conv159$i, $and143$i) | 0) >> 16) + (Math_imul($conv159$i, $shr139$i) | 0) + (Math_imul(($75 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$i = $vla + ($k$0173$i * 1300 | 0) | 0;
      $76 = HEAP32[$arrayidx180$i >> 2] | 0;
      $conv182$i = $76 << 16 >> 16;
      HEAP32[$arrayidx180$i >> 2] = ((Math_imul($conv182$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$i, $shr139$i) | 0) + (Math_imul(($76 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$1$i = $vla + ($k$0173$i * 1300 | 0) + 4 | 0;
      $77 = HEAP32[$arrayidx180$1$i >> 2] | 0;
      $conv182$1$i = $77 << 16 >> 16;
      HEAP32[$arrayidx180$1$i >> 2] = ((Math_imul($conv182$1$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$1$i, $shr139$i) | 0) + (Math_imul(($77 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$2$i = $vla + ($k$0173$i * 1300 | 0) + 8 | 0;
      $78 = HEAP32[$arrayidx180$2$i >> 2] | 0;
      $conv182$2$i = $78 << 16 >> 16;
      HEAP32[$arrayidx180$2$i >> 2] = ((Math_imul($conv182$2$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$2$i, $shr139$i) | 0) + (Math_imul(($78 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$3$i = $vla + ($k$0173$i * 1300 | 0) + 12 | 0;
      $79 = HEAP32[$arrayidx180$3$i >> 2] | 0;
      $conv182$3$i = $79 << 16 >> 16;
      HEAP32[$arrayidx180$3$i >> 2] = ((Math_imul($conv182$3$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$3$i, $shr139$i) | 0) + (Math_imul(($79 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$4$i = $vla + ($k$0173$i * 1300 | 0) + 16 | 0;
      $80 = HEAP32[$arrayidx180$4$i >> 2] | 0;
      $conv182$4$i = $80 << 16 >> 16;
      HEAP32[$arrayidx180$4$i >> 2] = ((Math_imul($conv182$4$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$4$i, $shr139$i) | 0) + (Math_imul(($80 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$5$i = $vla + ($k$0173$i * 1300 | 0) + 20 | 0;
      $81 = HEAP32[$arrayidx180$5$i >> 2] | 0;
      $conv182$5$i = $81 << 16 >> 16;
      HEAP32[$arrayidx180$5$i >> 2] = ((Math_imul($conv182$5$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$5$i, $shr139$i) | 0) + (Math_imul(($81 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$6$i = $vla + ($k$0173$i * 1300 | 0) + 24 | 0;
      $82 = HEAP32[$arrayidx180$6$i >> 2] | 0;
      $conv182$6$i = $82 << 16 >> 16;
      HEAP32[$arrayidx180$6$i >> 2] = ((Math_imul($conv182$6$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$6$i, $shr139$i) | 0) + (Math_imul(($82 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$7$i = $vla + ($k$0173$i * 1300 | 0) + 28 | 0;
      $83 = HEAP32[$arrayidx180$7$i >> 2] | 0;
      $conv182$7$i = $83 << 16 >> 16;
      HEAP32[$arrayidx180$7$i >> 2] = ((Math_imul($conv182$7$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$7$i, $shr139$i) | 0) + (Math_imul(($83 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$8$i = $vla + ($k$0173$i * 1300 | 0) + 32 | 0;
      $84 = HEAP32[$arrayidx180$8$i >> 2] | 0;
      $conv182$8$i = $84 << 16 >> 16;
      HEAP32[$arrayidx180$8$i >> 2] = ((Math_imul($conv182$8$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$8$i, $shr139$i) | 0) + (Math_imul(($84 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$9$i = $vla + ($k$0173$i * 1300 | 0) + 36 | 0;
      $85 = HEAP32[$arrayidx180$9$i >> 2] | 0;
      $conv182$9$i = $85 << 16 >> 16;
      HEAP32[$arrayidx180$9$i >> 2] = ((Math_imul($conv182$9$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$9$i, $shr139$i) | 0) + (Math_imul(($85 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$10$i = $vla + ($k$0173$i * 1300 | 0) + 40 | 0;
      $86 = HEAP32[$arrayidx180$10$i >> 2] | 0;
      $conv182$10$i = $86 << 16 >> 16;
      HEAP32[$arrayidx180$10$i >> 2] = ((Math_imul($conv182$10$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$10$i, $shr139$i) | 0) + (Math_imul(($86 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$11$i = $vla + ($k$0173$i * 1300 | 0) + 44 | 0;
      $87 = HEAP32[$arrayidx180$11$i >> 2] | 0;
      $conv182$11$i = $87 << 16 >> 16;
      HEAP32[$arrayidx180$11$i >> 2] = ((Math_imul($conv182$11$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$11$i, $shr139$i) | 0) + (Math_imul(($87 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$12$i = $vla + ($k$0173$i * 1300 | 0) + 48 | 0;
      $88 = HEAP32[$arrayidx180$12$i >> 2] | 0;
      $conv182$12$i = $88 << 16 >> 16;
      HEAP32[$arrayidx180$12$i >> 2] = ((Math_imul($conv182$12$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$12$i, $shr139$i) | 0) + (Math_imul(($88 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$13$i = $vla + ($k$0173$i * 1300 | 0) + 52 | 0;
      $89 = HEAP32[$arrayidx180$13$i >> 2] | 0;
      $conv182$13$i = $89 << 16 >> 16;
      HEAP32[$arrayidx180$13$i >> 2] = ((Math_imul($conv182$13$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$13$i, $shr139$i) | 0) + (Math_imul(($89 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$14$i = $vla + ($k$0173$i * 1300 | 0) + 56 | 0;
      $90 = HEAP32[$arrayidx180$14$i >> 2] | 0;
      $conv182$14$i = $90 << 16 >> 16;
      HEAP32[$arrayidx180$14$i >> 2] = ((Math_imul($conv182$14$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$14$i, $shr139$i) | 0) + (Math_imul(($90 >> 15) + 1 >> 1, $call64168$i) | 0);
      $arrayidx180$15$i = $vla + ($k$0173$i * 1300 | 0) + 60 | 0;
      $91 = HEAP32[$arrayidx180$15$i >> 2] | 0;
      $conv182$15$i = $91 << 16 >> 16;
      HEAP32[$arrayidx180$15$i >> 2] = ((Math_imul($conv182$15$i, $and143$i) | 0) >> 16) + (Math_imul($conv182$15$i, $shr139$i) | 0) + (Math_imul(($91 >> 15) + 1 >> 1, $call64168$i) | 0);
      $i$5170$i = 0;
      do {
       $arrayidx209$i = $vla + ($k$0173$i * 1300 | 0) + 1184 + ($i$5170$i << 2) | 0;
       $92 = HEAP32[$arrayidx209$i >> 2] | 0;
       $conv211$i = $92 << 16 >> 16;
       HEAP32[$arrayidx209$i >> 2] = ((Math_imul($conv211$i, $and143$i) | 0) >> 16) + (Math_imul($conv211$i, $shr139$i) | 0) + (Math_imul(($92 >> 15) + 1 >> 1, $call64168$i) | 0);
       $i$5170$i = $i$5170$i + 1 | 0;
      } while (($i$5170$i | 0) != 24);
      $i$6171$i = 0;
      do {
       $arrayidx238$i = $vla + ($k$0173$i * 1300 | 0) + 864 + ($i$6171$i << 2) | 0;
       $93 = HEAP32[$arrayidx238$i >> 2] | 0;
       $conv240$i = $93 << 16 >> 16;
       HEAP32[$arrayidx238$i >> 2] = ((Math_imul($conv240$i, $and143$i) | 0) >> 16) + (Math_imul($conv240$i, $shr139$i) | 0) + (Math_imul(($93 >> 15) + 1 >> 1, $call64168$i) | 0);
       $arrayidx260$i = $vla + ($k$0173$i * 1300 | 0) + 1024 + ($i$6171$i << 2) | 0;
       $94 = HEAP32[$arrayidx260$i >> 2] | 0;
       $conv262$i = $94 << 16 >> 16;
       HEAP32[$arrayidx260$i >> 2] = ((Math_imul($conv262$i, $and143$i) | 0) >> 16) + (Math_imul($conv262$i, $shr139$i) | 0) + (Math_imul(($94 >> 15) + 1 >> 1, $call64168$i) | 0);
       $i$6171$i = $i$6171$i + 1 | 0;
      } while (($i$6171$i | 0) != 40);
      $k$0173$i = $k$0173$i + 1 | 0;
     } while (($k$0173$i | 0) != ($45 | 0));
    }
    HEAP32[$prev_gain_Q16$i >> 2] = HEAP32[$arrayidx1$i >> 2];
    $101 = HEAP32[$arrayidx1$i >> 2] | 0;
    $102 = HEAP32[$subfr_length >> 2] | 0;
    $103 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
   }
   _silk_noise_shape_quantizer_del_dec($NSQ, $vla, $conv268, $vla52, $pulses$addr$0301, $pxq$0300, $vla46, $delayedGain_Q10, $arrayidx65, $arrayidx67, $arrayidx69, $lag$1, $or74, HEAP32[$Tilt_Q14 + ($k$2298 << 2) >> 2] | 0, HEAP32[$LF_shp_Q14 + ($k$2298 << 2) >> 2] | 0, $101, $Lambda_Q10, $conv15, $102, $subfr$2, HEAP32[$shapingLPCOrder >> 2] | 0, HEAP32[$predictLPCOrder >> 2] | 0, HEAP32[$warping_Q16 >> 2] | 0, $103, $smpl_buf_idx, $decisionDelay$1);
   $104 = HEAP32[$subfr_length >> 2] | 0;
   $add$ptr282 = $pulses$addr$0301 + $104 | 0;
   $add$ptr284 = $pxq$0300 + ($104 << 1) | 0;
   $inc286 = $k$2298 + 1 | 0;
   $105 = HEAP32[$nb_subfr58$pre$phiZ2D >> 2] | 0;
   if (($inc286 | 0) >= ($105 | 0)) {
    label = 62;
    break;
   }
   $23 = HEAP8[$signalType >> 0] | 0;
   $k$2298 = $inc286;
   $lag$0297 = $lag$1;
   $pulses$addr$0301 = $add$ptr282;
   $pxq$0300 = $add$ptr284;
   $subfr$0296 = $subfr$2 + 1 | 0;
   $x16$addr$0302 = $x16$addr$0302 + ($104 << 1) | 0;
  }
  if ((label | 0) == 26) _celt_fatal(51632, 51664, 253); else if ((label | 0) == 62) {
   $$lcssa272 = $105;
   $106 = HEAP32[$nStatesDelayedDecision >> 2] | 0;
   $132 = $104;
   $pulses$addr$0$lcssa = $add$ptr282;
   $pxq$0$lcssa = $add$ptr284;
   break;
  }
 } else {
  $$lcssa272 = $19;
  $106 = $3;
  $132 = $12;
  $pulses$addr$0$lcssa = $pulses;
  $pxq$0$lcssa = $arrayidx54;
 } while (0);
 if (($106 | 0) > 1) {
  $RDmin_Q10$2283 = HEAP32[$vla + 1296 >> 2] | 0;
  $Winner_ind$2281 = 0;
  $k$3282 = 1;
  while (1) {
   $108 = HEAP32[$vla + ($k$3282 * 1300 | 0) + 1296 >> 2] | 0;
   $cmp297 = ($108 | 0) < ($RDmin_Q10$2283 | 0);
   $spec$select262 = $cmp297 ? $k$3282 : $Winner_ind$2281;
   $k$3282 = $k$3282 + 1 | 0;
   if (($k$3282 | 0) == ($106 | 0)) {
    $Winner_ind$2$lcssa = $spec$select262;
    break;
   } else {
    $RDmin_Q10$2283 = $cmp297 ? $108 : $RDmin_Q10$2283;
    $Winner_ind$2281 = $spec$select262;
   }
  }
 } else $Winner_ind$2$lcssa = 0;
 HEAP8[$psIndices + 34 >> 0] = HEAP32[$vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1292 >> 2];
 $110 = HEAP32[$Gains_Q16 + ($$lcssa272 + -1 << 2) >> 2] | 0;
 if (($decisionDelay$1 | 0) <= 0) {
  $123 = $132;
  $arraydecay432 = $NSQ + 3840 | 0;
  $arrayidx435 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + ($123 << 2) | 0;
  dest = $arraydecay432;
  src = $arrayidx435;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $arraydecay437 = $NSQ + 4224 | 0;
  $arraydecay439 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1184 | 0;
  dest = $arraydecay437;
  src = $arraydecay439;
  stop = dest + 96 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $LF_AR_Q14440 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1280 | 0;
  $124 = HEAP32[$LF_AR_Q14440 >> 2] | 0;
  $sLF_AR_shp_Q14441 = $NSQ + 4320 | 0;
  HEAP32[$sLF_AR_shp_Q14441 >> 2] = $124;
  $Diff_Q14442 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1284 | 0;
  $125 = HEAP32[$Diff_Q14442 >> 2] | 0;
  $sDiff_shp_Q14443 = $NSQ + 4324 | 0;
  HEAP32[$sDiff_shp_Q14443 >> 2] = $125;
  $126 = HEAP32[$nb_subfr58$pre$phiZ2D >> 2] | 0;
  $sub445 = $126 + -1 | 0;
  $arrayidx446 = $pitchL + ($sub445 << 2) | 0;
  $127 = HEAP32[$arrayidx446 >> 2] | 0;
  HEAP32[$lagPrev >> 2] = $127;
  $128 = HEAP32[$frame_length >> 2] | 0;
  $arrayidx452 = $NSQ + ($128 << 1) | 0;
  $129 = HEAP32[$ltp_mem_length44 >> 2] | 0;
  $mul454 = $129 << 1;
  _memmove($NSQ | 0, $arrayidx452 | 0, $mul454 | 0) | 0;
  $sLTP_shp_Q14455 = $NSQ + 1280 | 0;
  $130 = HEAP32[$frame_length >> 2] | 0;
  $arrayidx459 = $NSQ + 1280 + ($130 << 2) | 0;
  $131 = HEAP32[$ltp_mem_length44 >> 2] | 0;
  $mul461 = $131 << 2;
  _memmove($sLTP_shp_Q14455 | 0, $arrayidx459 | 0, $mul461 | 0) | 0;
  _llvm_stackrestore($2 | 0);
  STACKTOP = sp;
  return;
 }
 $conv338 = $110 >>> 6 << 16 >> 16;
 $shr352 = ($110 >> 21) + 1 >> 1;
 $i$3279 = 0;
 $last_smple_idx$2278 = (HEAP32[$smpl_buf_idx >> 2] | 0) + $decisionDelay$1 | 0;
 do {
  $rem320 = ($last_smple_idx$2278 + -1 | 0) % 40 | 0;
  $last_smple_idx$2278 = ($rem320 | 0) < 0 ? $rem320 + 40 | 0 : $rem320;
  $sub332 = $i$3279 - $decisionDelay$1 | 0;
  HEAP8[$pulses$addr$0$lcssa + $sub332 >> 0] = (((HEAP32[$vla + ($Winner_ind$2$lcssa * 1300 | 0) + 544 + ($last_smple_idx$2278 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
  $116 = HEAP32[$vla + ($Winner_ind$2$lcssa * 1300 | 0) + 704 + ($last_smple_idx$2278 << 2) >> 2] | 0;
  $add354 = (Math_imul($116 >> 16, $conv338) | 0) + (Math_imul($116, $shr352) | 0) + ((Math_imul($116 & 65535, $conv338) | 0) >> 16) | 0;
  HEAP16[$pxq$0$lcssa + ($sub332 << 1) >> 1] = ($add354 | 0) > 8388479 ? 32767 : ($add354 | 0) < -8388736 ? -32768 : (($add354 >>> 7) + 1 | 0) >>> 1 & 65535;
  HEAP32[$NSQ + 1280 + ($sub332 + (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) << 2) >> 2] = HEAP32[$vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1024 + ($last_smple_idx$2278 << 2) >> 2];
  $i$3279 = $i$3279 + 1 | 0;
 } while (($i$3279 | 0) != ($decisionDelay$1 | 0));
 $123 = HEAP32[$subfr_length >> 2] | 0;
 $arraydecay432 = $NSQ + 3840 | 0;
 $arrayidx435 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + ($123 << 2) | 0;
 dest = $arraydecay432;
 src = $arrayidx435;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arraydecay437 = $NSQ + 4224 | 0;
 $arraydecay439 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1184 | 0;
 dest = $arraydecay437;
 src = $arraydecay439;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $LF_AR_Q14440 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1280 | 0;
 $124 = HEAP32[$LF_AR_Q14440 >> 2] | 0;
 $sLF_AR_shp_Q14441 = $NSQ + 4320 | 0;
 HEAP32[$sLF_AR_shp_Q14441 >> 2] = $124;
 $Diff_Q14442 = $vla + ($Winner_ind$2$lcssa * 1300 | 0) + 1284 | 0;
 $125 = HEAP32[$Diff_Q14442 >> 2] | 0;
 $sDiff_shp_Q14443 = $NSQ + 4324 | 0;
 HEAP32[$sDiff_shp_Q14443 >> 2] = $125;
 $126 = HEAP32[$nb_subfr58$pre$phiZ2D >> 2] | 0;
 $sub445 = $126 + -1 | 0;
 $arrayidx446 = $pitchL + ($sub445 << 2) | 0;
 $127 = HEAP32[$arrayidx446 >> 2] | 0;
 HEAP32[$lagPrev >> 2] = $127;
 $128 = HEAP32[$frame_length >> 2] | 0;
 $arrayidx452 = $NSQ + ($128 << 1) | 0;
 $129 = HEAP32[$ltp_mem_length44 >> 2] | 0;
 $mul454 = $129 << 1;
 _memmove($NSQ | 0, $arrayidx452 | 0, $mul454 | 0) | 0;
 $sLTP_shp_Q14455 = $NSQ + 1280 | 0;
 $130 = HEAP32[$frame_length >> 2] | 0;
 $arrayidx459 = $NSQ + 1280 + ($130 << 2) | 0;
 $131 = HEAP32[$ltp_mem_length44 >> 2] | 0;
 $mul461 = $131 << 2;
 _memmove($sLTP_shp_Q14455 | 0, $arrayidx459 | 0, $mul461 | 0) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return;
}

function _silk_NLSF_encode($NLSFIndices, $pNLSF_Q15, $psNLSF_CB, $pW_Q2, $NLSF_mu_Q20, $nSurvivors, $signalType) {
 $NLSFIndices = $NLSFIndices | 0;
 $pNLSF_Q15 = $pNLSF_Q15 | 0;
 $psNLSF_CB = $psNLSF_CB | 0;
 $pW_Q2 = $pW_Q2 | 0;
 $NLSF_mu_Q20 = $NLSF_mu_Q20 | 0;
 $nSurvivors = $nSurvivors | 0;
 $signalType = $signalType | 0;
 var $$pre70 = 0, $$sink$i = 0, $$sink217$i = 0, $$sink218$i = 0, $$sink219$i = 0, $$sink220$i = 0, $$sink221$i = 0, $$sink222$i = 0, $$sink223$i = 0, $$sink224$i = 0, $$sink225$i = 0, $$sink226$i = 0, $$sink227$i = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0, $61 = 0, $63 = 0, $7 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $CB1_iCDF = 0, $RD_Q25$i = 0, $RD_max_Q25$i = 0, $RD_min_Q25$i = 0, $W_adj_Q5 = 0, $add$i = 0, $add$i11 = 0, $add$us$i = 0, $add26$i = 0, $add281$i = 0, $add34$i = 0, $add35$i18 = 0, $add48$us$i = 0, $add56$us$i = 0, $add83$i = 0, $add90$i = 0, $add93$i = 0, $add96$i = 0, $and$i$i = 0, $arraydecay$i = 0, $arraydecay291$i = 0, $arrayidx101 = 0, $arrayidx103 = 0, $arrayidx107$i = 0, $arrayidx125$i = 0, $arrayidx14$i = 0, $arrayidx144$i = 0, $arrayidx17 = 0, $arrayidx18$i47 = 0, $arrayidx19$i = 0, $arrayidx22 = 0, $arrayidx221$1$i = 0, $arrayidx221$2$i = 0, $arrayidx221$3$i = 0, $arrayidx223$1$i = 0, $arrayidx223$2$i = 0, $arrayidx223$3$i = 0, $arrayidx223$i = 0, $arrayidx237$1$i = 0, $arrayidx237$2$i = 0, $arrayidx237$3$i = 0, $arrayidx239$1$i = 0, $arrayidx239$2$i = 0, $arrayidx239$3$i = 0, $arrayidx239$i = 0, $arrayidx25$pre$phi$iZ2D = 0, $arrayidx27$pre$phi$iZ2D = 0, $arrayidx299$1$i = 0, $arrayidx299$2$i = 0, $arrayidx299$3$i = 0, $arrayidx299$i = 0, $arrayidx36$i = 0, $arrayidx52$i = 0, $arrayidx58 = 0, $arrayidx59$i52 = 0, $arrayidx62$i = 0, $arrayidx66 = 0, $arrayidx71 = 0, $arrayidx81$sink = 0, $arrayidx98 = 0, $bestIndex$0 = 0, $bestIndex$1 = 0, $bestIndex$2 = 0, $call71 = 0, $cb_Q8_ptr$049$us$i = 0, $cmp146$i = 0, $cmp261$1$i = 0, $cmp261$2$i = 0, $cmp261$3$i = 0, $cmp267$1$i = 0, $cmp267$2$i = 0, $cmp267$3$i = 0, $cmp2672 = 0, $cmp314$1$i = 0, $cmp314$2$i = 0, $cmp314$3$i = 0, $cmp314$4$i = 0, $cmp314$5$i = 0, $cmp314$6$i = 0, $cmp314$7$i = 0, $cmp44$i = 0, $cmp969$i = 0, $cond79$i = 0, $conv1$i = 0, $conv105 = 0, $conv12$i = 0, $conv148$i = 0, $conv153$i = 0, $conv157$i = 0, $conv166$i = 0, $conv3 = 0, $conv34$i = 0, $conv35 = 0, $conv48 = 0, $conv5 = 0, $conv5$i = 0, $conv54$i = 0, $conv61$i = 0, $conv67$i = 0, $conv80$sink = 0, $conv92 = 0, $conv99 = 0, $dec54$us$i = 0, $ec_Rates_Q5 = 0, $ec_ix = 0, $ec_sel$i = 0, $ec_sel_ptr$024$i = 0, $i$0210$i = 0, $i$023$i = 0, $i$047$us$i = 0, $i$072$i41 = 0, $i$073 = 0, $i$1209$in$i = 0, $i$170$i = 0, $i$265$i = 0, $i$265$i53 = 0, $i$265$us$i = 0, $ind$i = 0, $ind_max_min$1$3$i = 0, $ind_sort$i = 0, $invQuantStepSize_Q6 = 0, $j$0193$i = 0, $j$068$i = 0, $j$068$in$i = 0, $j$1$lcssa$us$i = 0, $j$1202$i = 0, $j$162$us$i = 0, $j$2204$i = 0, $m$045$us$in$i = 0, $max_min_Q25$1$1$i = 0, $max_min_Q25$1$2$i = 0, $max_min_Q25$1$i = 0, $mul$us$i = 0, $mul102 = 0, $mul112$i = 0, $mul130$i = 0, $mul16 = 0, $mul53 = 0, $mul57 = 0, $mul70$i = 0, $nStates$0207$i = 0, $nStates$1$i = 0, $order = 0, $out0_Q10$0$i = 0, $out0_Q10_table$i = 0, $out1_Q10$0$i = 0, $out1_Q10_table$i = 0, $pred_Q24$044$us$i = 0, $pred_Q8 = 0, $pred_Q811$i = 0, $prev_out_Q10$i = 0, $quantStepSize_Q16 = 0, $rate0_Q5$0$i = 0, $rate1_Q5$0$i = 0, $res_Q10 = 0, $retval$0$i$i$i = 0, $s$075 = 0, $shl$i = 0, $shl10$i = 0, $shl203$i = 0, $shr41$i = 0, $shr41$i$shr43$i = 0, $shr43$i = 0, $shr43$i$shr41$i = 0, $shr65$i = 0, $shr6777 = 0, $shr71$i = 0, $spec$select$3$i = 0, $spec$select182$1$i = 0, $spec$select182$2$i = 0, $spec$select183$7$i = 0, $spec$select184$1$i = 0, $spec$select184$2$i = 0, $spec$select184$3$i = 0, $spec$select184$4$i = 0, $spec$select184$5$i = 0, $spec$select184$6$i = 0, $spec$select184$7$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i8 = 0, $sub14$us$i = 0, $sub23$i = 0, $sub35$i = 0, $sub35$us$i = 0, $sub36$i = 0, $sub39$i = 0, $sub40$i = 0, $sub83 = 0, $sum_error_Q24$043$us$i = 0, $vla = 0, $vla10 = 0, $vla6 = 0, $vla9 = 0, $w_Q9_ptr$048$us$i = 0, label = 0, sp = 0, $m$045$us$in$i$looptemp = 0, $i$1209$in$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $ind_sort$i = sp + 416 | 0;
 $ind$i = sp + 352 | 0;
 $prev_out_Q10$i = sp + 336 | 0;
 $RD_Q25$i = sp + 304 | 0;
 $RD_min_Q25$i = sp + 288 | 0;
 $RD_max_Q25$i = sp + 272 | 0;
 $out0_Q10_table$i = sp + 192 | 0;
 $out1_Q10_table$i = sp + 112 | 0;
 $res_Q10 = sp + 80 | 0;
 $W_adj_Q5 = sp + 48 | 0;
 $pred_Q8 = sp + 32 | 0;
 $ec_ix = sp;
 if ($signalType >>> 0 >= 3) _celt_fatal(52122, 52175, 63);
 $order = $psNLSF_CB + 2 | 0;
 _silk_NLSF_stabilize($pNLSF_Q15, HEAP32[$psNLSF_CB + 36 >> 2] | 0, HEAP16[$order >> 1] | 0);
 $4 = HEAPU16[$psNLSF_CB >> 1] | 0;
 $5 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 $6 = HEAP32[$psNLSF_CB + 8 >> 2] | 0;
 $7 = HEAP32[$psNLSF_CB + 12 >> 2] | 0;
 $8 = HEAP16[$psNLSF_CB >> 1] | 0;
 $conv3 = $8 << 16 >> 16;
 $9 = HEAP16[$order >> 1] | 0;
 $conv5 = $9 << 16 >> 16;
 if ($conv5 & 1 | 0) _celt_fatal(52194, 52235, 49);
 $cmp146$i = $8 << 16 >> 16 > 0;
 do if ($cmp146$i) {
  if ($9 << 16 >> 16 <= 1) {
   _memset($vla | 0, 0, $conv3 << 2 | 0) | 0;
   break;
  }
  $cb_Q8_ptr$049$us$i = $6;
  $i$047$us$i = 0;
  $w_Q9_ptr$048$us$i = $7;
  while (1) {
   $m$045$us$in$i = $conv5;
   $pred_Q24$044$us$i = 0;
   $sum_error_Q24$043$us$i = 0;
   do {
    $m$045$us$in$i$looptemp = $m$045$us$in$i;
    $m$045$us$in$i = $m$045$us$in$i + -2 | 0;
    $add$us$i = $m$045$us$in$i$looptemp + -1 | 0;
    $mul$us$i = Math_imul((HEAPU16[$pNLSF_Q15 + ($add$us$i << 1) >> 1] | 0) - (HEAPU8[$cb_Q8_ptr$049$us$i + $add$us$i >> 0] << 7) << 16 >> 16, HEAP16[$w_Q9_ptr$048$us$i + ($add$us$i << 1) >> 1] | 0) | 0;
    $sub14$us$i = $mul$us$i - ($pred_Q24$044$us$i >> 1) | 0;
    $pred_Q24$044$us$i = Math_imul((HEAPU16[$pNLSF_Q15 + ($m$045$us$in$i << 1) >> 1] | 0) - (HEAPU8[$cb_Q8_ptr$049$us$i + $m$045$us$in$i >> 0] << 7) << 16 >> 16, HEAP16[$w_Q9_ptr$048$us$i + ($m$045$us$in$i << 1) >> 1] | 0) | 0;
    $sub35$us$i = $pred_Q24$044$us$i - ($mul$us$i >> 1) | 0;
    $sum_error_Q24$043$us$i = (($sub14$us$i | 0) > 0 ? $sub14$us$i : 0 - $sub14$us$i | 0) + $sum_error_Q24$043$us$i + (($sub35$us$i | 0) > 0 ? $sub35$us$i : 0 - $sub35$us$i | 0) | 0;
   } while (($m$045$us$in$i$looptemp | 0) > 3);
   HEAP32[$vla + ($i$047$us$i << 2) >> 2] = $sum_error_Q24$043$us$i;
   $i$047$us$i = $i$047$us$i + 1 | 0;
   if (($i$047$us$i | 0) == ($conv3 | 0)) break; else {
    $cb_Q8_ptr$049$us$i = $cb_Q8_ptr$049$us$i + $conv5 | 0;
    $w_Q9_ptr$048$us$i = $w_Q9_ptr$048$us$i + ($conv5 << 1) | 0;
   }
  }
 } while (0);
 $vla6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($nSurvivors << 2) | 0) + 15 & -16) | 0;
 if (($nSurvivors | 0) <= 0) _celt_fatal(55137, 53398, 51);
 if (!$cmp146$i) _celt_fatal(53410, 53398, 52);
 if (($conv3 | 0) < ($nSurvivors | 0)) _celt_fatal(55183, 53398, 53);
 $i$072$i41 = 0;
 do {
  HEAP32[$vla6 + ($i$072$i41 << 2) >> 2] = $i$072$i41;
  $i$072$i41 = $i$072$i41 + 1 | 0;
 } while (($i$072$i41 | 0) != ($nSurvivors | 0));
 $cmp969$i = ($nSurvivors | 0) > 1;
 if ($cmp969$i) {
  $i$170$i = 1;
  do {
   $17 = HEAP32[$vla + ($i$170$i << 2) >> 2] | 0;
   $j$068$in$i = $i$170$i;
   while (1) {
    $j$068$i = $j$068$in$i + -1 | 0;
    $arrayidx14$i = $vla + ($j$068$i << 2) | 0;
    $18 = HEAP32[$arrayidx14$i >> 2] | 0;
    $arrayidx18$i47 = $vla + ($j$068$in$i << 2) | 0;
    if (($17 | 0) >= ($18 | 0)) {
     label = 24;
     break;
    }
    HEAP32[$arrayidx18$i47 >> 2] = $18;
    $arrayidx19$i = $vla6 + ($j$068$i << 2) | 0;
    HEAP32[$vla6 + ($j$068$in$i << 2) >> 2] = HEAP32[$arrayidx19$i >> 2];
    if (($j$068$in$i | 0) > 1) $j$068$in$i = $j$068$i; else {
     $arrayidx25$pre$phi$iZ2D = $arrayidx14$i;
     $arrayidx27$pre$phi$iZ2D = $arrayidx19$i;
     break;
    }
   }
   if ((label | 0) == 24) {
    label = 0;
    $arrayidx25$pre$phi$iZ2D = $arrayidx18$i47;
    $arrayidx27$pre$phi$iZ2D = $vla6 + ($j$068$in$i << 2) | 0;
   }
   HEAP32[$arrayidx25$pre$phi$iZ2D >> 2] = $17;
   HEAP32[$arrayidx27$pre$phi$iZ2D >> 2] = $i$170$i;
   $i$170$i = $i$170$i + 1 | 0;
  } while (($i$170$i | 0) != ($nSurvivors | 0));
 }
 L41 : do if (($conv3 | 0) > ($nSurvivors | 0)) {
  $sub35$i = $nSurvivors + -1 | 0;
  $arrayidx36$i = $vla + ($sub35$i << 2) | 0;
  $sub39$i = $nSurvivors + -2 | 0;
  if (!$cmp969$i) {
   $arrayidx59$i52 = $vla6 + ($sub35$i << 2) | 0;
   $25 = HEAP32[$arrayidx36$i >> 2] | 0;
   $i$265$i53 = $nSurvivors;
   while (1) {
    $24 = HEAP32[$vla + ($i$265$i53 << 2) >> 2] | 0;
    if (($24 | 0) < ($25 | 0)) {
     HEAP32[$arrayidx36$i >> 2] = $24;
     HEAP32[$arrayidx59$i52 >> 2] = $i$265$i53;
     $138 = $24;
    } else $138 = $25;
    $i$265$i53 = $i$265$i53 + 1 | 0;
    if (($i$265$i53 | 0) == ($conv3 | 0)) break L41; else $25 = $138;
   }
  }
  $i$265$us$i = $nSurvivors;
  do {
   $20 = HEAP32[$vla + ($i$265$us$i << 2) >> 2] | 0;
   if (($20 | 0) < (HEAP32[$arrayidx36$i >> 2] | 0)) {
    $j$162$us$i = $sub39$i;
    while (1) {
     $22 = HEAP32[$vla + ($j$162$us$i << 2) >> 2] | 0;
     if (($20 | 0) >= ($22 | 0)) {
      $j$1$lcssa$us$i = $j$162$us$i;
      break;
     }
     $add48$us$i = $j$162$us$i + 1 | 0;
     HEAP32[$vla + ($add48$us$i << 2) >> 2] = $22;
     HEAP32[$vla6 + ($add48$us$i << 2) >> 2] = HEAP32[$vla6 + ($j$162$us$i << 2) >> 2];
     $dec54$us$i = $j$162$us$i + -1 | 0;
     if (($j$162$us$i | 0) > 0) $j$162$us$i = $dec54$us$i; else {
      $j$1$lcssa$us$i = $dec54$us$i;
      break;
     }
    }
    $add56$us$i = $j$1$lcssa$us$i + 1 | 0;
    HEAP32[$vla + ($add56$us$i << 2) >> 2] = $20;
    HEAP32[$vla6 + ($add56$us$i << 2) >> 2] = $i$265$us$i;
   }
   $i$265$us$i = $i$265$us$i + 1 | 0;
  } while (($i$265$us$i | 0) != ($conv3 | 0));
 } while (0);
 $vla9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($nSurvivors << 2) | 0) + 15 & -16) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($nSurvivors << 4) | 0) + 15 & -16) | 0;
 $ec_Rates_Q5 = $psNLSF_CB + 32 | 0;
 $quantStepSize_Q16 = $psNLSF_CB + 4 | 0;
 $invQuantStepSize_Q6 = $psNLSF_CB + 6 | 0;
 $CB1_iCDF = $psNLSF_CB + 16 | 0;
 $shr6777 = $signalType >>> 1;
 $conv92 = $NLSF_mu_Q20 << 14 >> 16;
 $ec_sel$i = $psNLSF_CB + 24 | 0;
 $pred_Q811$i = $psNLSF_CB + 20 | 0;
 $conv157$i = $NLSF_mu_Q20 << 16 >> 16;
 $arrayidx223$i = $RD_Q25$i + 16 | 0;
 $arrayidx239$i = $prev_out_Q10$i + 8 | 0;
 $arrayidx221$1$i = $RD_Q25$i + 4 | 0;
 $arrayidx223$1$i = $RD_Q25$i + 20 | 0;
 $arrayidx237$1$i = $prev_out_Q10$i + 2 | 0;
 $arrayidx239$1$i = $prev_out_Q10$i + 10 | 0;
 $27 = $RD_max_Q25$i + 4 | 0;
 $28 = $RD_min_Q25$i + 4 | 0;
 $29 = $ind_sort$i + 4 | 0;
 $arrayidx221$2$i = $RD_Q25$i + 8 | 0;
 $arrayidx223$2$i = $RD_Q25$i + 24 | 0;
 $arrayidx237$2$i = $prev_out_Q10$i + 4 | 0;
 $arrayidx239$2$i = $prev_out_Q10$i + 12 | 0;
 $30 = $RD_max_Q25$i + 8 | 0;
 $31 = $RD_min_Q25$i + 8 | 0;
 $32 = $ind_sort$i + 8 | 0;
 $arrayidx221$3$i = $RD_Q25$i + 12 | 0;
 $arrayidx223$3$i = $RD_Q25$i + 28 | 0;
 $arrayidx237$3$i = $prev_out_Q10$i + 6 | 0;
 $arrayidx239$3$i = $prev_out_Q10$i + 14 | 0;
 $33 = $RD_max_Q25$i + 12 | 0;
 $34 = $RD_min_Q25$i + 12 | 0;
 $35 = $ind_sort$i + 12 | 0;
 $s$075 = 0;
 do {
  $36 = HEAP32[$vla6 + ($s$075 << 2) >> 2] | 0;
  $mul16 = Math_imul($36, $conv5) | 0;
  $arrayidx17 = $6 + $mul16 | 0;
  $arrayidx22 = $7 + ($mul16 << 1) | 0;
  $cmp2672 = $9 << 16 >> 16 > 0;
  if ($cmp2672) {
   $i$073 = 0;
   do {
    $conv35 = HEAP16[$arrayidx22 + ($i$073 << 1) >> 1] | 0;
    HEAP16[$res_Q10 + ($i$073 << 1) >> 1] = (Math_imul((HEAPU16[$pNLSF_Q15 + ($i$073 << 1) >> 1] | 0) - (HEAPU8[$arrayidx17 + $i$073 >> 0] << 7) << 16 >> 16, $conv35) | 0) >>> 14;
    $conv48 = HEAP16[$pW_Q2 + ($i$073 << 1) >> 1] | 0;
    $mul53 = Math_imul($conv35, $conv35) | 0;
    $42 = Math_clz32((($conv48 | 0) > 0 ? $conv48 : 0 - $conv48 | 0) | 0) | 0;
    $shl$i = $conv48 << $42 + -1;
    $43 = Math_clz32((($mul53 | 0) == 0 ? 0 - $mul53 | 0 : $mul53) | 0) | 0;
    $shl10$i = $mul53 << $43 + -1;
    $conv12$i = (536870911 / ($shl10$i >> 16 | 0) | 0) << 16 >> 16;
    $add$i = ((Math_imul($shl$i & 65535, $conv12$i) | 0) >> 16) + (Math_imul($shl$i >> 16, $conv12$i) | 0) | 0;
    $48 = ___muldi3($add$i | 0, (($add$i | 0) < 0) << 31 >> 31 | 0, $shl10$i | 0, (($shl10$i | 0) < 0) << 31 >> 31 | 0) | 0;
    $50 = _bitshift64Lshr($48 | 0, getTempRet0() | 0, 29) | 0;
    getTempRet0() | 0;
    $sub23$i = $shl$i - ($50 & -8) | 0;
    $add34$i = (Math_imul($sub23$i >> 16, $conv12$i) | 0) + $add$i + ((Math_imul($sub23$i & 65535, $conv12$i) | 0) >> 16) | 0;
    $sub36$i = 1 - $43 + 28 + $42 | 0;
    if (($sub36$i | 0) < 21) {
     $sub40$i = 21 - $sub36$i | 0;
     $shr41$i = -2147483648 >> $sub40$i;
     $shr43$i = 2147483647 >>> $sub40$i;
     $cmp44$i = ($shr41$i | 0) > ($shr43$i | 0);
     $shr41$i$shr43$i = $cmp44$i ? $shr41$i : $shr43$i;
     $shr43$i$shr41$i = $cmp44$i ? $shr43$i : $shr41$i;
     $call71 = (($add34$i | 0) > ($shr41$i$shr43$i | 0) ? $shr41$i$shr43$i : ($add34$i | 0) < ($shr43$i$shr41$i | 0) ? $shr43$i$shr41$i : $add34$i) << $sub40$i;
    } else $call71 = ($sub36$i | 0) < 53 ? $add34$i >> $sub36$i + -21 : 0;
    HEAP16[$W_adj_Q5 + ($i$073 << 1) >> 1] = $call71;
    $i$073 = $i$073 + 1 | 0;
   } while (($i$073 | 0) != ($conv5 | 0));
   if ($cmp2672) {
    $$pre70 = HEAP32[$pred_Q811$i >> 2] | 0;
    $ec_sel_ptr$024$i = (HEAP32[$ec_sel$i >> 2] | 0) + (($mul16 | 0) / 2 | 0) | 0;
    $i$023$i = 0;
    while (1) {
     $53 = HEAP8[$ec_sel_ptr$024$i >> 0] | 0;
     $conv5$i = $53 & 255;
     HEAP16[$ec_ix + ($i$023$i << 1) >> 1] = ($conv5$i >>> 1 & 7) * 9;
     $sub$i8 = $conv5 + -1 | 0;
     HEAP8[$pred_Q8 + $i$023$i >> 0] = HEAP8[$$pre70 + (($sub$i8 & 0 - ($conv5$i & 1)) + $i$023$i) >> 0] | 0;
     $add26$i = $i$023$i | 1;
     HEAP16[$ec_ix + ($add26$i << 1) >> 1] = (($53 & 255) >>> 5) * 9 & 255;
     HEAP8[$pred_Q8 + $add26$i >> 0] = HEAP8[$$pre70 + ($add26$i + ($sub$i8 & 0 - ($conv5$i >>> 4 & 1))) >> 0] | 0;
     $i$023$i = $i$023$i + 2 | 0;
     if (($i$023$i | 0) >= ($conv5 | 0)) break; else $ec_sel_ptr$024$i = $ec_sel_ptr$024$i + 1 | 0;
    }
   }
  }
  $mul57 = $s$075 << 4;
  $61 = HEAP32[$ec_Rates_Q5 >> 2] | 0;
  $63 = HEAP16[$invQuantStepSize_Q6 >> 1] | 0;
  $conv34$i = HEAP16[$quantStepSize_Q16 >> 1] | 0;
  $i$0210$i = -10;
  do {
   $conv1$i = $i$0210$i << 26 >> 16;
   $add$i11 = $conv1$i + 1024 | 0;
   do if (($i$0210$i | 0) > 0) {
    $out0_Q10$0$i = $conv1$i + -102 | 0;
    $out1_Q10$0$i = ($add$i11 << 16 >> 16) + -102 | 0;
   } else if (!$i$0210$i) {
    $out0_Q10$0$i = 0;
    $out1_Q10$0$i = ($add$i11 << 16 >> 16) + -102 | 0;
    break;
   } else {
    $out0_Q10$0$i = $conv1$i | 102;
    $out1_Q10$0$i = ($i$0210$i | 0) == -1 ? $add$i11 : $add$i11 & 64512 | 102;
    break;
   } while (0);
   $add35$i18 = $i$0210$i + 10 | 0;
   HEAP32[$out0_Q10_table$i + ($add35$i18 << 2) >> 2] = (Math_imul($out0_Q10$0$i << 16 >> 16, $conv34$i) | 0) >> 16;
   HEAP32[$out1_Q10_table$i + ($add35$i18 << 2) >> 2] = (Math_imul($out1_Q10$0$i << 16 >> 16, $conv34$i) | 0) >> 16;
   $i$0210$i = $i$0210$i + 1 | 0;
  } while (($i$0210$i | 0) != 10);
  $arrayidx58 = $vla10 + $mul57 | 0;
  HEAP32[$RD_Q25$i >> 2] = 0;
  HEAP16[$prev_out_Q10$i >> 1] = 0;
  if ($cmp2672) {
   $conv67$i = $63 << 16 >> 16;
   $i$1209$in$i = $conv5;
   $nStates$0207$i = 1;
   while (1) {
    $i$1209$in$i$looptemp = $i$1209$in$i;
    $i$1209$in$i = $i$1209$in$i + -1 | 0;
    $arrayidx52$i = $61 + (HEAP16[$ec_ix + ($i$1209$in$i << 1) >> 1] | 0) | 0;
    $conv54$i = HEAP16[$res_Q10 + ($i$1209$in$i << 1) >> 1] | 0;
    L90 : do if (($nStates$0207$i | 0) > 0) {
     $conv61$i = HEAPU8[$pred_Q8 + $i$1209$in$i >> 0] | 0;
     $conv153$i = HEAP16[$W_adj_Q5 + ($i$1209$in$i << 1) >> 1] | 0;
     $arrayidx107$i = $arrayidx52$i + 7 | 0;
     $arrayidx125$i = $arrayidx52$i + 1 | 0;
     $j$0193$i = 0;
     do {
      $arrayidx62$i = $prev_out_Q10$i + ($j$0193$i << 1) | 0;
      $shr65$i = (Math_imul(HEAP16[$arrayidx62$i >> 1] | 0, $conv61$i) | 0) >> 8;
      $mul70$i = Math_imul($conv54$i - $shr65$i << 16 >> 16, $conv67$i) | 0;
      $shr71$i = $mul70$i >> 16;
      $cond79$i = ($mul70$i | 0) > 655359 ? 9 : ($shr71$i | 0) > -10 ? $shr71$i : -10;
      HEAP8[$ind$i + ($j$0193$i << 4) + $i$1209$in$i >> 0] = $cond79$i;
      $add83$i = $cond79$i + 10 | 0;
      $add90$i = $shr65$i + (HEAP32[$out0_Q10_table$i + ($add83$i << 2) >> 2] | 0) | 0;
      $add93$i = (HEAP32[$out1_Q10_table$i + ($add83$i << 2) >> 2] | 0) + $shr65$i | 0;
      HEAP16[$arrayidx62$i >> 1] = $add90$i;
      $add96$i = $j$0193$i + $nStates$0207$i | 0;
      HEAP16[$prev_out_Q10$i + ($add96$i << 1) >> 1] = $add93$i;
      do if (($cond79$i | 0) > 2) if (($cond79$i | 0) == 3) {
       $rate0_Q5$0$i = HEAPU8[$arrayidx107$i >> 0] | 0;
       $rate1_Q5$0$i = 280;
       break;
      } else {
       $mul112$i = $cond79$i * 43 | 0;
       $rate0_Q5$0$i = $mul112$i + 108 | 0;
       $rate1_Q5$0$i = $mul112$i + 151 | 0;
       break;
      } else {
       if (($cond79$i | 0) >= -3) {
        $rate0_Q5$0$i = HEAPU8[$arrayidx52$i + ($cond79$i + 4) >> 0] | 0;
        $rate1_Q5$0$i = HEAPU8[$arrayidx52$i + ($cond79$i + 5) >> 0] | 0;
        break;
       }
       if (($cond79$i | 0) == -4) {
        $rate0_Q5$0$i = 280;
        $rate1_Q5$0$i = HEAPU8[$arrayidx125$i >> 0] | 0;
        break;
       } else {
        $mul130$i = Math_imul($cond79$i, -43) | 0;
        $rate0_Q5$0$i = $mul130$i + 108 | 0;
        $rate1_Q5$0$i = $mul130$i + 65 | 0;
        break;
       }
      } while (0);
      $arrayidx144$i = $RD_Q25$i + ($j$0193$i << 2) | 0;
      $77 = HEAP32[$arrayidx144$i >> 2] | 0;
      $conv148$i = $conv54$i - $add90$i << 16 >> 16;
      HEAP32[$arrayidx144$i >> 2] = (Math_imul($rate0_Q5$0$i << 16 >> 16, $conv157$i) | 0) + $77 + (Math_imul(Math_imul($conv148$i, $conv148$i) | 0, $conv153$i) | 0);
      $conv166$i = $conv54$i - $add93$i << 16 >> 16;
      HEAP32[$RD_Q25$i + ($add96$i << 2) >> 2] = (Math_imul($rate1_Q5$0$i << 16 >> 16, $conv157$i) | 0) + $77 + (Math_imul(Math_imul($conv166$i, $conv166$i) | 0, $conv153$i) | 0);
      $j$0193$i = $j$0193$i + 1 | 0;
     } while (($j$0193$i | 0) != ($nStates$0207$i | 0));
     if (($nStates$0207$i | 0) < 3) {
      $j$1202$i = 0;
      while (1) {
       HEAP8[$ind$i + ($j$1202$i + $nStates$0207$i << 4) + $i$1209$in$i >> 0] = (HEAPU8[$ind$i + ($j$1202$i << 4) + $i$1209$in$i >> 0] | 0) + 1;
       $j$1202$i = $j$1202$i + 1 | 0;
       if (($j$1202$i | 0) == ($nStates$0207$i | 0)) {
        label = 74;
        break L90;
       }
      }
     }
     $80 = HEAP32[$RD_Q25$i >> 2] | 0;
     $81 = HEAP32[$arrayidx223$i >> 2] | 0;
     if (($80 | 0) > ($81 | 0)) {
      HEAP32[$RD_Q25$i >> 2] = $81;
      HEAP32[$arrayidx223$i >> 2] = $80;
      $82 = HEAP16[$prev_out_Q10$i >> 1] | 0;
      HEAP16[$prev_out_Q10$i >> 1] = HEAP16[$arrayidx239$i >> 1] | 0;
      HEAP16[$arrayidx239$i >> 1] = $82;
      $$sink$i = 4;
      $$sink217$i = $81;
      $$sink218$i = $80;
     } else {
      $$sink$i = 0;
      $$sink217$i = $80;
      $$sink218$i = $81;
     }
     HEAP32[$RD_max_Q25$i >> 2] = $$sink218$i;
     HEAP32[$RD_min_Q25$i >> 2] = $$sink217$i;
     HEAP32[$ind_sort$i >> 2] = $$sink$i;
     $84 = HEAP32[$arrayidx221$1$i >> 2] | 0;
     $85 = HEAP32[$arrayidx223$1$i >> 2] | 0;
     if (($84 | 0) > ($85 | 0)) {
      HEAP32[$arrayidx221$1$i >> 2] = $85;
      HEAP32[$arrayidx223$1$i >> 2] = $84;
      $117 = HEAP16[$arrayidx237$1$i >> 1] | 0;
      HEAP16[$arrayidx237$1$i >> 1] = HEAP16[$arrayidx239$1$i >> 1] | 0;
      HEAP16[$arrayidx239$1$i >> 1] = $117;
      $$sink219$i = 5;
      $$sink220$i = $85;
      $$sink221$i = $84;
     } else {
      $$sink219$i = 1;
      $$sink220$i = $84;
      $$sink221$i = $85;
     }
     HEAP32[$27 >> 2] = $$sink221$i;
     HEAP32[$28 >> 2] = $$sink220$i;
     HEAP32[$29 >> 2] = $$sink219$i;
     $119 = HEAP32[$arrayidx221$2$i >> 2] | 0;
     $120 = HEAP32[$arrayidx223$2$i >> 2] | 0;
     if (($119 | 0) > ($120 | 0)) {
      HEAP32[$arrayidx221$2$i >> 2] = $120;
      HEAP32[$arrayidx223$2$i >> 2] = $119;
      $121 = HEAP16[$arrayidx237$2$i >> 1] | 0;
      HEAP16[$arrayidx237$2$i >> 1] = HEAP16[$arrayidx239$2$i >> 1] | 0;
      HEAP16[$arrayidx239$2$i >> 1] = $121;
      $$sink222$i = 6;
      $$sink223$i = $120;
      $$sink224$i = $119;
     } else {
      $$sink222$i = 2;
      $$sink223$i = $119;
      $$sink224$i = $120;
     }
     HEAP32[$30 >> 2] = $$sink224$i;
     HEAP32[$31 >> 2] = $$sink223$i;
     HEAP32[$32 >> 2] = $$sink222$i;
     $123 = HEAP32[$arrayidx221$3$i >> 2] | 0;
     $124 = HEAP32[$arrayidx223$3$i >> 2] | 0;
     if (($123 | 0) > ($124 | 0)) {
      HEAP32[$arrayidx221$3$i >> 2] = $124;
      HEAP32[$arrayidx223$3$i >> 2] = $123;
      $125 = HEAP16[$arrayidx237$3$i >> 1] | 0;
      HEAP16[$arrayidx237$3$i >> 1] = HEAP16[$arrayidx239$3$i >> 1] | 0;
      HEAP16[$arrayidx239$3$i >> 1] = $125;
      $$sink225$i = 7;
      $$sink226$i = $124;
      $$sink227$i = $123;
     } else {
      $$sink225$i = 3;
      $$sink226$i = $123;
      $$sink227$i = $124;
     }
     HEAP32[$33 >> 2] = $$sink227$i;
     HEAP32[$34 >> 2] = $$sink226$i;
     HEAP32[$35 >> 2] = $$sink225$i;
     $86 = $$sink217$i;
     $87 = $$sink218$i;
     $88 = $$sink221$i;
     $89 = $$sink220$i;
     $90 = $$sink224$i;
     $91 = $$sink223$i;
     $92 = $$sink227$i;
     $93 = $$sink226$i;
     while (1) {
      $max_min_Q25$1$i = ($86 | 0) > 0 ? $86 : 0;
      $cmp261$1$i = ($87 | 0) > ($88 | 0);
      $spec$select182$1$i = $cmp261$1$i ? $88 : $87;
      $cmp267$1$i = ($max_min_Q25$1$i | 0) < ($89 | 0);
      $max_min_Q25$1$1$i = $cmp267$1$i ? $89 : $max_min_Q25$1$i;
      $cmp261$2$i = ($spec$select182$1$i | 0) > ($90 | 0);
      $spec$select182$2$i = $cmp261$2$i ? $90 : $spec$select182$1$i;
      $cmp267$2$i = ($max_min_Q25$1$1$i | 0) < ($91 | 0);
      $max_min_Q25$1$2$i = $cmp267$2$i ? $91 : $max_min_Q25$1$1$i;
      $cmp261$3$i = ($spec$select182$2$i | 0) > ($92 | 0);
      $spec$select$3$i = $cmp261$3$i ? 3 : $cmp261$2$i ? 2 : $cmp261$1$i & 1;
      $cmp267$3$i = ($max_min_Q25$1$2$i | 0) < ($93 | 0);
      $ind_max_min$1$3$i = $cmp267$3$i ? 3 : $cmp267$2$i ? 2 : $cmp267$1$i & 1;
      if ((($cmp261$3$i ? $92 : $spec$select182$2$i) | 0) >= (($cmp267$3$i ? $93 : $max_min_Q25$1$2$i) | 0)) break;
      HEAP32[$ind_sort$i + ($ind_max_min$1$3$i << 2) >> 2] = HEAP32[$ind_sort$i + ($spec$select$3$i << 2) >> 2] ^ 4;
      $add281$i = $spec$select$3$i | 4;
      HEAP32[$RD_Q25$i + ($ind_max_min$1$3$i << 2) >> 2] = HEAP32[$RD_Q25$i + ($add281$i << 2) >> 2];
      HEAP16[$prev_out_Q10$i + ($ind_max_min$1$3$i << 1) >> 1] = HEAP16[$prev_out_Q10$i + ($add281$i << 1) >> 1] | 0;
      HEAP32[$RD_min_Q25$i + ($ind_max_min$1$3$i << 2) >> 2] = 0;
      HEAP32[$RD_max_Q25$i + ($spec$select$3$i << 2) >> 2] = 2147483647;
      $arraydecay$i = $ind$i + ($ind_max_min$1$3$i << 4) | 0;
      $arraydecay291$i = $ind$i + ($spec$select$3$i << 4) | 0;
      HEAP32[$arraydecay$i >> 2] = HEAP32[$arraydecay291$i >> 2];
      HEAP32[$arraydecay$i + 4 >> 2] = HEAP32[$arraydecay291$i + 4 >> 2];
      HEAP32[$arraydecay$i + 8 >> 2] = HEAP32[$arraydecay291$i + 8 >> 2];
      HEAP32[$arraydecay$i + 12 >> 2] = HEAP32[$arraydecay291$i + 12 >> 2];
      $86 = HEAP32[$RD_min_Q25$i >> 2] | 0;
      $87 = HEAP32[$RD_max_Q25$i >> 2] | 0;
      $88 = HEAP32[$27 >> 2] | 0;
      $89 = HEAP32[$28 >> 2] | 0;
      $90 = HEAP32[$30 >> 2] | 0;
      $91 = HEAP32[$31 >> 2] | 0;
      $92 = HEAP32[$33 >> 2] | 0;
      $93 = HEAP32[$34 >> 2] | 0;
     }
     $arrayidx299$i = $ind$i + $i$1209$in$i | 0;
     HEAP8[$arrayidx299$i >> 0] = ((HEAP32[$ind_sort$i >> 2] | 0) >>> 2) + (HEAPU8[$arrayidx299$i >> 0] | 0);
     $arrayidx299$1$i = $ind$i + 16 + $i$1209$in$i | 0;
     HEAP8[$arrayidx299$1$i >> 0] = ((HEAP32[$29 >> 2] | 0) >>> 2) + (HEAPU8[$arrayidx299$1$i >> 0] | 0);
     $arrayidx299$2$i = $ind$i + 32 + $i$1209$in$i | 0;
     HEAP8[$arrayidx299$2$i >> 0] = ((HEAP32[$32 >> 2] | 0) >>> 2) + (HEAPU8[$arrayidx299$2$i >> 0] | 0);
     $arrayidx299$3$i = $ind$i + 48 + $i$1209$in$i | 0;
     HEAP8[$arrayidx299$3$i >> 0] = ((HEAP32[$35 >> 2] | 0) >>> 2) + (HEAPU8[$arrayidx299$3$i >> 0] | 0);
     $nStates$1$i = $nStates$0207$i;
    } else label = 74; while (0);
    if ((label | 0) == 74) {
     label = 0;
     $shl203$i = $nStates$0207$i << 1;
     if (($shl203$i | 0) < 4) {
      $j$2204$i = $shl203$i;
      while (1) {
       HEAP8[$ind$i + ($j$2204$i << 4) + $i$1209$in$i >> 0] = HEAP8[$ind$i + ($j$2204$i - $shl203$i << 4) + $i$1209$in$i >> 0] | 0;
       if (($j$2204$i | 0) < 3) $j$2204$i = $j$2204$i + 1 | 0; else {
        $nStates$1$i = $shl203$i;
        break;
       }
      }
     } else $nStates$1$i = $shl203$i;
    }
    if (($i$1209$in$i$looptemp | 0) <= 1) break; else $nStates$0207$i = $nStates$1$i;
   }
   $109 = HEAP32[$RD_Q25$i >> 2] | 0;
   $110 = HEAP32[$arrayidx221$1$i >> 2] | 0;
   $111 = HEAP32[$arrayidx221$2$i >> 2] | 0;
   $112 = HEAP32[$arrayidx221$3$i >> 2] | 0;
   $113 = HEAP32[$arrayidx223$i >> 2] | 0;
   $114 = HEAP32[$arrayidx223$1$i >> 2] | 0;
   $115 = HEAP32[$arrayidx223$2$i >> 2] | 0;
   $116 = HEAP32[$arrayidx223$3$i >> 2] | 0;
  } else {
   $109 = 0;
   $110 = 0;
   $111 = 0;
   $112 = 0;
   $113 = 0;
   $114 = 0;
   $115 = 0;
   $116 = 0;
  }
  $cmp314$1$i = ($109 | 0) > ($110 | 0);
  $spec$select184$1$i = $cmp314$1$i ? $110 : $109;
  $cmp314$2$i = ($spec$select184$1$i | 0) > ($111 | 0);
  $spec$select184$2$i = $cmp314$2$i ? $111 : $spec$select184$1$i;
  $cmp314$3$i = ($spec$select184$2$i | 0) > ($112 | 0);
  $spec$select184$3$i = $cmp314$3$i ? $112 : $spec$select184$2$i;
  $cmp314$4$i = ($spec$select184$3$i | 0) > ($113 | 0);
  $spec$select184$4$i = $cmp314$4$i ? $113 : $spec$select184$3$i;
  $cmp314$5$i = ($spec$select184$4$i | 0) > ($114 | 0);
  $spec$select184$5$i = $cmp314$5$i ? $114 : $spec$select184$4$i;
  $cmp314$6$i = ($spec$select184$5$i | 0) > ($115 | 0);
  $spec$select184$6$i = $cmp314$6$i ? $115 : $spec$select184$5$i;
  $cmp314$7$i = ($spec$select184$6$i | 0) > ($116 | 0);
  $spec$select183$7$i = $cmp314$7$i ? 7 : $cmp314$6$i ? 6 : $cmp314$5$i ? 5 : $cmp314$4$i ? 4 : $cmp314$3$i ? 3 : $cmp314$2$i ? 2 : $cmp314$1$i & 1;
  $spec$select184$7$i = $cmp314$7$i ? $116 : $spec$select184$6$i;
  if ($cmp2672) _memcpy($arrayidx58 | 0, $ind$i + (($spec$select183$7$i & 3) << 4) | 0, $conv5 | 0) | 0;
  HEAP8[$arrayidx58 >> 0] = ($spec$select183$7$i >>> 2) + (HEAPU8[$arrayidx58 >> 0] | 0);
  $arrayidx66 = $vla9 + ($s$075 << 2) | 0;
  HEAP32[$arrayidx66 >> 2] = $spec$select184$7$i;
  $arrayidx71 = (HEAP32[$CB1_iCDF >> 2] | 0) + (Math_imul($shr6777, $conv3) | 0) | 0;
  if (!$36) {
   $arrayidx81$sink = $arrayidx71;
   $conv80$sink = 256;
  } else {
   $arrayidx81$sink = $arrayidx71 + $36 | 0;
   $conv80$sink = HEAPU8[$arrayidx71 + ($36 + -1) >> 0] | 0;
  }
  $sub83 = $conv80$sink - (HEAPU8[$arrayidx81$sink >> 0] | 0) | 0;
  $132 = Math_clz32($sub83 | 0) | 0;
  $sub$i$i = 24 - $132 | 0;
  $sub$i$i$i = 0 - $sub$i$i | 0;
  do if (!$sub$i$i) $retval$0$i$i$i = $sub83; else if (($sub$i$i | 0) < 0) {
   $retval$0$i$i$i = $sub83 >>> ($sub$i$i + 32 | 0) | $sub83 << $sub$i$i$i;
   break;
  } else {
   $retval$0$i$i$i = $sub83 << 32 - $sub$i$i | $sub83 >>> $sub$i$i;
   break;
  } while (0);
  $and$i$i = $retval$0$i$i$i & 127;
  HEAP32[$arrayidx66 >> 2] = (Math_imul(67108864 - (((3968 - ($132 << 7) | $and$i$i) << 16) + (Math_imul($and$i$i * 179 | 0, 128 - $and$i$i | 0) | 0) & -65536) >> 16, $conv92) | 0) + $spec$select184$7$i;
  $s$075 = $s$075 + 1 | 0;
 } while (($s$075 | 0) != ($nSurvivors | 0));
 if (!$cmp969$i) {
  $bestIndex$2 = 0;
  $arrayidx98 = $vla6 + ($bestIndex$2 << 2) | 0;
  $136 = HEAP32[$arrayidx98 >> 2] | 0;
  $conv99 = $136 & 255;
  HEAP8[$NLSFIndices >> 0] = $conv99;
  $arrayidx101 = $NLSFIndices + 1 | 0;
  $mul102 = $bestIndex$2 << 4;
  $arrayidx103 = $vla10 + $mul102 | 0;
  $137 = HEAP16[$order >> 1] | 0;
  $conv105 = $137 << 16 >> 16;
  _memcpy($arrayidx101 | 0, $arrayidx103 | 0, $conv105 | 0) | 0;
  _silk_NLSF_decode($pNLSF_Q15, $NLSFIndices, $psNLSF_CB);
  _llvm_stackrestore($5 | 0);
  STACKTOP = sp;
  return;
 }
 $135 = HEAP32[$vla9 >> 2] | 0;
 $bestIndex$0 = 0;
 $i$265$i = 1;
 while (1) {
  $134 = HEAP32[$vla9 + ($i$265$i << 2) >> 2] | 0;
  if (($134 | 0) < ($135 | 0)) {
   HEAP32[$vla9 >> 2] = $134;
   $139 = $134;
   $bestIndex$1 = $i$265$i;
  } else {
   $139 = $135;
   $bestIndex$1 = $bestIndex$0;
  }
  $i$265$i = $i$265$i + 1 | 0;
  if (($i$265$i | 0) == ($nSurvivors | 0)) {
   $bestIndex$2 = $bestIndex$1;
   break;
  } else {
   $135 = $139;
   $bestIndex$0 = $bestIndex$1;
  }
 }
 $arrayidx98 = $vla6 + ($bestIndex$2 << 2) | 0;
 $136 = HEAP32[$arrayidx98 >> 2] | 0;
 $conv99 = $136 & 255;
 HEAP8[$NLSFIndices >> 0] = $conv99;
 $arrayidx101 = $NLSFIndices + 1 | 0;
 $mul102 = $bestIndex$2 << 4;
 $arrayidx103 = $vla10 + $mul102 | 0;
 $137 = HEAP16[$order >> 1] | 0;
 $conv105 = $137 << 16 >> 16;
 _memcpy($arrayidx101 | 0, $arrayidx103 | 0, $conv105 | 0) | 0;
 _silk_NLSF_decode($pNLSF_Q15, $NLSFIndices, $psNLSF_CB);
 _llvm_stackrestore($5 | 0);
 STACKTOP = sp;
 return;
}

function _silk_decode_core($psDec, $psDecCtrl, $xq, $pulses) {
 $psDec = $psDec | 0;
 $psDecCtrl = $psDecCtrl | 0;
 $xq = $xq | 0;
 $pulses = $pulses | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $11 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $A_Q12_tmp = 0, $A_Q12_tmp$10$A_Q12_tmp$10$A_Q12_tmp$10$arrayidx450$sroa_idx = 0, $A_Q12_tmp$12$A_Q12_tmp$12$A_Q12_tmp$12$arrayidx467$sroa_idx = 0, $A_Q12_tmp$14$A_Q12_tmp$14$A_Q12_tmp$14$arrayidx484$sroa_idx = 0, $A_Q12_tmp$16$A_Q12_tmp$16$A_Q12_tmp$16$arrayidx501$sroa_idx = 0, $A_Q12_tmp$18$A_Q12_tmp$18$A_Q12_tmp$18$arrayidx518$sroa_idx = 0, $A_Q12_tmp$2$A_Q12_tmp$2$A_Q12_tmp$2$arrayidx382$sroa_idx = 0, $A_Q12_tmp$20$A_Q12_tmp$20$A_Q12_tmp$20$arrayidx539$sroa_idx = 0, $A_Q12_tmp$22$A_Q12_tmp$22$A_Q12_tmp$22$arrayidx556$sroa_idx = 0, $A_Q12_tmp$24$A_Q12_tmp$24$A_Q12_tmp$24$arrayidx573$sroa_idx = 0, $A_Q12_tmp$26$A_Q12_tmp$26$A_Q12_tmp$26$arrayidx590$sroa_idx = 0, $A_Q12_tmp$28$A_Q12_tmp$28$A_Q12_tmp$28$arrayidx607$sroa_idx = 0, $A_Q12_tmp$30$A_Q12_tmp$30$A_Q12_tmp$30$arrayidx624$sroa_idx = 0, $A_Q12_tmp$4$A_Q12_tmp$4$A_Q12_tmp$4$arrayidx399$sroa_idx = 0, $A_Q12_tmp$6$A_Q12_tmp$6$A_Q12_tmp$6$arrayidx416$sroa_idx = 0, $A_Q12_tmp$8$A_Q12_tmp$8$A_Q12_tmp$8$arrayidx433$sroa_idx = 0, $LPC_order = 0, $LPC_pred_Q10$0 = 0, $LTP_scale_Q14 = 0, $add$i313 = 0, $add19 = 0, $add26$i = 0, $add331 = 0, $add334 = 0, $add34$i = 0, $add38$sink = 0, $add44 = 0, $add530 = 0, $add648 = 0, $add751 = 0, $and = 0, $and199 = 0, $and230 = 0, $arraydecay = 0, $arraydecay66 = 0, $arrayidx22 = 0, $arrayidx226 = 0, $arrayidx70 = 0, $arrayidx92$1 = 0, $arrayidx92$10 = 0, $arrayidx92$11 = 0, $arrayidx92$12 = 0, $arrayidx92$13 = 0, $arrayidx92$14 = 0, $arrayidx92$15 = 0, $arrayidx92$2 = 0, $arrayidx92$3 = 0, $arrayidx92$4 = 0, $arrayidx92$5 = 0, $arrayidx92$6 = 0, $arrayidx92$7 = 0, $arrayidx92$8 = 0, $arrayidx92$9 = 0, $call300 = 0, $call86319 = 0, $cmp = 0, $cmp137 = 0, $cmp139 = 0, $cmp35$i = 0, $cmp44$i = 0, $cond = 0, $cond728 = 0, $conv176 = 0, $conv197 = 0, $conv21 = 0, $conv228 = 0, $conv270 = 0, $conv283 = 0, $conv296 = 0, $conv309 = 0, $conv322 = 0, $conv366 = 0, $conv383 = 0, $conv4$i = 0, $conv400 = 0, $conv417 = 0, $conv434 = 0, $conv451 = 0, $conv468 = 0, $conv485 = 0, $conv502 = 0, $conv519 = 0, $conv540 = 0, $conv557 = 0, $conv574 = 0, $conv591 = 0, $conv608 = 0, $conv625 = 0, $conv735 = 0, $conv94 = 0, $conv94$1 = 0, $conv94$10 = 0, $conv94$11 = 0, $conv94$12 = 0, $conv94$13 = 0, $conv94$14 = 0, $conv94$15 = 0, $conv94$2 = 0, $conv94$3 = 0, $conv94$4 = 0, $conv94$5 = 0, $conv94$6 = 0, $conv94$7 = 0, $conv94$8 = 0, $conv94$9 = 0, $div$i = 0, $frame_length = 0, $gain_adj_Q16$0 = 0, $i$0359 = 0, $i$2$neg340 = 0, $i$2339 = 0, $i$3337 = 0, $i$4344 = 0, $i$5346 = 0, $inv_gain_Q31$0 = 0, $k$0351 = 0, $lagPrev = 0, $lossCnt = 0, $ltp_mem_length = 0, $mul271 = 0, $mul284 = 0, $mul297 = 0, $mul310 = 0, $mul367 = 0, $mul384 = 0, $mul401 = 0, $mul418 = 0, $mul435 = 0, $mul452 = 0, $mul469 = 0, $mul486 = 0, $mul503 = 0, $mul541 = 0, $mul558 = 0, $mul575 = 0, $mul592 = 0, $mul609 = 0, $nb_subfr = 0, $pexc_Q14$0354 = 0, $pred_lag_ptr$0343 = 0, $pres_Q14$0 = 0, $prevSignalType = 0, $pxq$0349 = 0, $rand_seed$0358 = 0, $sLTP_buf_idx$0350 = 0, $sLTP_buf_idx$1342 = 0, $sLTP_buf_idx$2 = 0, $sLTP_buf_idx$2367 = 0, $shl = 0, $shl$i = 0, $shl$i305 = 0, $shl10$i = 0, $shl2$i = 0, $shl41 = 0, $shl647 = 0, $shr$i = 0, $shr192 = 0, $shr223 = 0, $shr277 = 0, $shr290 = 0, $shr303 = 0, $shr316 = 0, $shr32$i = 0, $shr32$i$shr34$i = 0, $shr34$i = 0, $shr34$i$shr32$i = 0, $shr375 = 0, $shr392 = 0, $shr409 = 0, $shr41$i = 0, $shr41$i$shr43$i = 0, $shr426 = 0, $shr43$i = 0, $shr43$i$shr41$i = 0, $shr443 = 0, $shr460 = 0, $shr477 = 0, $shr494 = 0, $shr511 = 0, $shr549 = 0, $shr566 = 0, $shr583 = 0, $shr600 = 0, $shr617 = 0, $shr749 = 0, $shr91 = 0, $signalType7 = 0, $sub147 = 0, $sub148 = 0, $sub208 = 0, $sub224 = 0, $sub23$i = 0, $sub27$i = 0, $sub31$i = 0, $sub36$i = 0, $sub40$i = 0, $subfr_length = 0, $vla = 0, $vla2 = 0, $vla3 = 0, $vla6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $A_Q12_tmp = sp;
 $ltp_mem_length = $psDec + 2336 | 0;
 $0 = HEAP32[$ltp_mem_length >> 2] | 0;
 $1 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 1) | 0) + 15 & -16) | 0;
 $frame_length = $psDec + 2328 | 0;
 $3 = HEAP32[$frame_length >> 2] | 0;
 $vla2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 + (HEAP32[$ltp_mem_length >> 2] | 0) << 2) | 0) + 15 & -16) | 0;
 $subfr_length = $psDec + 2332 | 0;
 $4 = HEAP32[$subfr_length >> 2] | 0;
 $vla3 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 $vla6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 + 16 << 2) | 0) + 15 & -16) | 0;
 $signalType7 = $psDec + 2765 | 0;
 $cmp = (HEAP8[$psDec + 2767 >> 0] | 0) < 4;
 if (($3 | 0) > 0) {
  $shl41 = HEAP16[47584 + (HEAP8[$signalType7 >> 0] >> 1 << 2) + (HEAP8[$psDec + 2766 >> 0] << 1) >> 1] << 4;
  $i$0359 = 0;
  $rand_seed$0358 = HEAP8[$psDec + 2770 >> 0] | 0;
  while (1) {
   $add19 = (Math_imul($rand_seed$0358, 196314165) | 0) + 907633515 | 0;
   $10 = HEAP16[$pulses + ($i$0359 << 1) >> 1] | 0;
   $conv21 = $10 << 16 >> 16;
   $shl = $conv21 << 14;
   $arrayidx22 = $psDec + 4 + ($i$0359 << 2) | 0;
   HEAP32[$arrayidx22 >> 2] = $shl;
   if ($10 << 16 >> 16 > 0) {
    $add38$sink = $shl + -1280 | 0;
    label = 7;
   } else if ($10 << 16 >> 16 < 0) {
    $add38$sink = $shl | 1280;
    label = 7;
   } else $11 = $shl;
   if ((label | 0) == 7) {
    label = 0;
    HEAP32[$arrayidx22 >> 2] = $add38$sink;
    $11 = $add38$sink;
   }
   $add44 = $11 + $shl41 | 0;
   HEAP32[$arrayidx22 >> 2] = ($add19 | 0) < 0 ? 0 - $add44 | 0 : $add44;
   $i$0359 = $i$0359 + 1 | 0;
   if (($i$0359 | 0) >= (HEAP32[$frame_length >> 2] | 0)) break; else $rand_seed$0358 = $add19 + $conv21 | 0;
  }
 }
 $arraydecay = $psDec + 1284 | 0;
 dest = $vla6;
 src = $arraydecay;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $nb_subfr = $psDec + 2324 | 0;
 if ((HEAP32[$nb_subfr >> 2] | 0) <= 0) {
  dest = $arraydecay;
  src = $vla6;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _llvm_stackrestore($1 | 0);
  STACKTOP = sp;
  return;
 }
 $LPC_order = $psDec + 2340 | 0;
 $lossCnt = $psDec + 4160 | 0;
 $prevSignalType = $psDec + 4164 | 0;
 $lagPrev = $psDec + 2308 | 0;
 $LTP_scale_Q14 = $psDecCtrl + 136 | 0;
 $arrayidx92$1 = $vla6 + 4 | 0;
 $arrayidx92$2 = $vla6 + 8 | 0;
 $arrayidx92$3 = $vla6 + 12 | 0;
 $arrayidx92$4 = $vla6 + 16 | 0;
 $arrayidx92$5 = $vla6 + 20 | 0;
 $arrayidx92$6 = $vla6 + 24 | 0;
 $arrayidx92$7 = $vla6 + 28 | 0;
 $arrayidx92$8 = $vla6 + 32 | 0;
 $arrayidx92$9 = $vla6 + 36 | 0;
 $arrayidx92$10 = $vla6 + 40 | 0;
 $arrayidx92$11 = $vla6 + 44 | 0;
 $arrayidx92$12 = $vla6 + 48 | 0;
 $arrayidx92$13 = $vla6 + 52 | 0;
 $arrayidx92$14 = $vla6 + 56 | 0;
 $arrayidx92$15 = $vla6 + 60 | 0;
 $A_Q12_tmp$2$A_Q12_tmp$2$A_Q12_tmp$2$arrayidx382$sroa_idx = $A_Q12_tmp + 2 | 0;
 $A_Q12_tmp$4$A_Q12_tmp$4$A_Q12_tmp$4$arrayidx399$sroa_idx = $A_Q12_tmp + 4 | 0;
 $A_Q12_tmp$6$A_Q12_tmp$6$A_Q12_tmp$6$arrayidx416$sroa_idx = $A_Q12_tmp + 6 | 0;
 $A_Q12_tmp$8$A_Q12_tmp$8$A_Q12_tmp$8$arrayidx433$sroa_idx = $A_Q12_tmp + 8 | 0;
 $A_Q12_tmp$10$A_Q12_tmp$10$A_Q12_tmp$10$arrayidx450$sroa_idx = $A_Q12_tmp + 10 | 0;
 $A_Q12_tmp$12$A_Q12_tmp$12$A_Q12_tmp$12$arrayidx467$sroa_idx = $A_Q12_tmp + 12 | 0;
 $A_Q12_tmp$14$A_Q12_tmp$14$A_Q12_tmp$14$arrayidx484$sroa_idx = $A_Q12_tmp + 14 | 0;
 $A_Q12_tmp$16$A_Q12_tmp$16$A_Q12_tmp$16$arrayidx501$sroa_idx = $A_Q12_tmp + 16 | 0;
 $A_Q12_tmp$18$A_Q12_tmp$18$A_Q12_tmp$18$arrayidx518$sroa_idx = $A_Q12_tmp + 18 | 0;
 $A_Q12_tmp$20$A_Q12_tmp$20$A_Q12_tmp$20$arrayidx539$sroa_idx = $A_Q12_tmp + 20 | 0;
 $A_Q12_tmp$22$A_Q12_tmp$22$A_Q12_tmp$22$arrayidx556$sroa_idx = $A_Q12_tmp + 22 | 0;
 $A_Q12_tmp$24$A_Q12_tmp$24$A_Q12_tmp$24$arrayidx573$sroa_idx = $A_Q12_tmp + 24 | 0;
 $A_Q12_tmp$26$A_Q12_tmp$26$A_Q12_tmp$26$arrayidx590$sroa_idx = $A_Q12_tmp + 26 | 0;
 $A_Q12_tmp$28$A_Q12_tmp$28$A_Q12_tmp$28$arrayidx607$sroa_idx = $A_Q12_tmp + 28 | 0;
 $A_Q12_tmp$30$A_Q12_tmp$30$A_Q12_tmp$30$arrayidx624$sroa_idx = $A_Q12_tmp + 30 | 0;
 $k$0351 = 0;
 $pexc_Q14$0354 = $psDec + 4 | 0;
 $pxq$0349 = $xq;
 $sLTP_buf_idx$0350 = HEAP32[$ltp_mem_length >> 2] | 0;
 L16 : while (1) {
  $arraydecay66 = $psDecCtrl + 32 + ($k$0351 >>> 1 << 5) | 0;
  _memcpy($A_Q12_tmp | 0, $arraydecay66 | 0, HEAP32[$LPC_order >> 2] << 1 | 0) | 0;
  $arrayidx70 = $psDecCtrl + 96 + ($k$0351 * 5 << 1) | 0;
  $17 = HEAP8[$signalType7 >> 0] | 0;
  $18 = HEAP32[$psDecCtrl + 16 + ($k$0351 << 2) >> 2] | 0;
  $19 = $18 >>> 6;
  $20 = Math_clz32((($18 | 0) > 0 ? $18 : 0 - $18 | 0) | 0) | 0;
  $shl$i = $18 << $20 + -1;
  $shr$i = $shl$i >> 16;
  $div$i = 536870911 / ($shr$i | 0) | 0;
  $shl2$i = $div$i << 16;
  $conv4$i = $shl2$i >> 16;
  $shl10$i = 0 - (((Math_imul($shl$i & 65535, $conv4$i) | 0) >> 16) + (Math_imul($shr$i, $conv4$i) | 0) << 3) | 0;
  $add26$i = (Math_imul(($div$i >> 15) + 1 >> 1, $shl10$i) | 0) + $shl2$i + (Math_imul($shl10$i >> 16, $conv4$i) | 0) + ((Math_imul($shl10$i & 65528, $conv4$i) | 0) >> 16) | 0;
  $sub27$i = 62 - $20 | 0;
  if (($sub27$i | 0) < 48) {
   $sub31$i = 47 - $sub27$i | 0;
   $shr32$i = -2147483648 >> $sub31$i;
   $shr34$i = 2147483647 >>> $sub31$i;
   $cmp35$i = ($shr32$i | 0) > ($shr34$i | 0);
   $shr32$i$shr34$i = $cmp35$i ? $shr32$i : $shr34$i;
   $shr34$i$shr32$i = $cmp35$i ? $shr34$i : $shr32$i;
   $call300 = (($add26$i | 0) > ($shr32$i$shr34$i | 0) ? $shr32$i$shr34$i : ($add26$i | 0) < ($shr34$i$shr32$i | 0) ? $shr34$i$shr32$i : $add26$i) << $sub31$i;
  } else $call300 = ($sub27$i | 0) < 79 ? $add26$i >> $sub27$i + -47 : 0;
  $21 = HEAP32[$psDec >> 2] | 0;
  if (($18 | 0) == ($21 | 0)) $gain_adj_Q16$0 = 65536; else {
   $22 = Math_clz32((($21 | 0) > 0 ? $21 : 0 - $21 | 0) | 0) | 0;
   $shl$i305 = $21 << $22 + -1;
   $add$i313 = ((Math_imul($shl$i305 & 65535, $conv4$i) | 0) >> 16) + (Math_imul($shl$i305 >> 16, $conv4$i) | 0) | 0;
   $27 = ___muldi3($add$i313 | 0, (($add$i313 | 0) < 0) << 31 >> 31 | 0, $shl$i | 0, (($shl$i | 0) < 0) << 31 >> 31 | 0) | 0;
   $29 = _bitshift64Lshr($27 | 0, getTempRet0() | 0, 29) | 0;
   getTempRet0() | 0;
   $sub23$i = $shl$i305 - ($29 & -8) | 0;
   $add34$i = (Math_imul($sub23$i >> 16, $conv4$i) | 0) + $add$i313 + ((Math_imul($sub23$i & 65535, $conv4$i) | 0) >> 16) | 0;
   $sub36$i = 1 - $20 + 28 + $22 | 0;
   if (($sub36$i | 0) < 16) {
    $sub40$i = 16 - $sub36$i | 0;
    $shr41$i = -2147483648 >> $sub40$i;
    $shr43$i = 2147483647 >>> $sub40$i;
    $cmp44$i = ($shr41$i | 0) > ($shr43$i | 0);
    $shr41$i$shr43$i = $cmp44$i ? $shr41$i : $shr43$i;
    $shr43$i$shr41$i = $cmp44$i ? $shr43$i : $shr41$i;
    $call86319 = (($add34$i | 0) > ($shr41$i$shr43$i | 0) ? $shr41$i$shr43$i : ($add34$i | 0) < ($shr43$i$shr41$i | 0) ? $shr43$i$shr41$i : $add34$i) << $sub40$i;
   } else $call86319 = ($sub36$i | 0) < 48 ? $add34$i >> $sub36$i + -16 : 0;
   $shr91 = $call86319 >> 16;
   $and = $call86319 & 65535;
   $31 = HEAP32[$vla6 >> 2] | 0;
   $conv94 = $31 << 16 >> 16;
   HEAP32[$vla6 >> 2] = ((Math_imul($conv94, $and) | 0) >> 16) + (Math_imul($conv94, $shr91) | 0) + (Math_imul(($31 >> 15) + 1 >> 1, $call86319) | 0);
   $32 = HEAP32[$arrayidx92$1 >> 2] | 0;
   $conv94$1 = $32 << 16 >> 16;
   HEAP32[$arrayidx92$1 >> 2] = ((Math_imul($conv94$1, $and) | 0) >> 16) + (Math_imul($conv94$1, $shr91) | 0) + (Math_imul(($32 >> 15) + 1 >> 1, $call86319) | 0);
   $33 = HEAP32[$arrayidx92$2 >> 2] | 0;
   $conv94$2 = $33 << 16 >> 16;
   HEAP32[$arrayidx92$2 >> 2] = ((Math_imul($conv94$2, $and) | 0) >> 16) + (Math_imul($conv94$2, $shr91) | 0) + (Math_imul(($33 >> 15) + 1 >> 1, $call86319) | 0);
   $34 = HEAP32[$arrayidx92$3 >> 2] | 0;
   $conv94$3 = $34 << 16 >> 16;
   HEAP32[$arrayidx92$3 >> 2] = ((Math_imul($conv94$3, $and) | 0) >> 16) + (Math_imul($conv94$3, $shr91) | 0) + (Math_imul(($34 >> 15) + 1 >> 1, $call86319) | 0);
   $35 = HEAP32[$arrayidx92$4 >> 2] | 0;
   $conv94$4 = $35 << 16 >> 16;
   HEAP32[$arrayidx92$4 >> 2] = ((Math_imul($conv94$4, $and) | 0) >> 16) + (Math_imul($conv94$4, $shr91) | 0) + (Math_imul(($35 >> 15) + 1 >> 1, $call86319) | 0);
   $36 = HEAP32[$arrayidx92$5 >> 2] | 0;
   $conv94$5 = $36 << 16 >> 16;
   HEAP32[$arrayidx92$5 >> 2] = ((Math_imul($conv94$5, $and) | 0) >> 16) + (Math_imul($conv94$5, $shr91) | 0) + (Math_imul(($36 >> 15) + 1 >> 1, $call86319) | 0);
   $37 = HEAP32[$arrayidx92$6 >> 2] | 0;
   $conv94$6 = $37 << 16 >> 16;
   HEAP32[$arrayidx92$6 >> 2] = ((Math_imul($conv94$6, $and) | 0) >> 16) + (Math_imul($conv94$6, $shr91) | 0) + (Math_imul(($37 >> 15) + 1 >> 1, $call86319) | 0);
   $38 = HEAP32[$arrayidx92$7 >> 2] | 0;
   $conv94$7 = $38 << 16 >> 16;
   HEAP32[$arrayidx92$7 >> 2] = ((Math_imul($conv94$7, $and) | 0) >> 16) + (Math_imul($conv94$7, $shr91) | 0) + (Math_imul(($38 >> 15) + 1 >> 1, $call86319) | 0);
   $39 = HEAP32[$arrayidx92$8 >> 2] | 0;
   $conv94$8 = $39 << 16 >> 16;
   HEAP32[$arrayidx92$8 >> 2] = ((Math_imul($conv94$8, $and) | 0) >> 16) + (Math_imul($conv94$8, $shr91) | 0) + (Math_imul(($39 >> 15) + 1 >> 1, $call86319) | 0);
   $40 = HEAP32[$arrayidx92$9 >> 2] | 0;
   $conv94$9 = $40 << 16 >> 16;
   HEAP32[$arrayidx92$9 >> 2] = ((Math_imul($conv94$9, $and) | 0) >> 16) + (Math_imul($conv94$9, $shr91) | 0) + (Math_imul(($40 >> 15) + 1 >> 1, $call86319) | 0);
   $41 = HEAP32[$arrayidx92$10 >> 2] | 0;
   $conv94$10 = $41 << 16 >> 16;
   HEAP32[$arrayidx92$10 >> 2] = ((Math_imul($conv94$10, $and) | 0) >> 16) + (Math_imul($conv94$10, $shr91) | 0) + (Math_imul(($41 >> 15) + 1 >> 1, $call86319) | 0);
   $42 = HEAP32[$arrayidx92$11 >> 2] | 0;
   $conv94$11 = $42 << 16 >> 16;
   HEAP32[$arrayidx92$11 >> 2] = ((Math_imul($conv94$11, $and) | 0) >> 16) + (Math_imul($conv94$11, $shr91) | 0) + (Math_imul(($42 >> 15) + 1 >> 1, $call86319) | 0);
   $43 = HEAP32[$arrayidx92$12 >> 2] | 0;
   $conv94$12 = $43 << 16 >> 16;
   HEAP32[$arrayidx92$12 >> 2] = ((Math_imul($conv94$12, $and) | 0) >> 16) + (Math_imul($conv94$12, $shr91) | 0) + (Math_imul(($43 >> 15) + 1 >> 1, $call86319) | 0);
   $44 = HEAP32[$arrayidx92$13 >> 2] | 0;
   $conv94$13 = $44 << 16 >> 16;
   HEAP32[$arrayidx92$13 >> 2] = ((Math_imul($conv94$13, $and) | 0) >> 16) + (Math_imul($conv94$13, $shr91) | 0) + (Math_imul(($44 >> 15) + 1 >> 1, $call86319) | 0);
   $45 = HEAP32[$arrayidx92$14 >> 2] | 0;
   $conv94$14 = $45 << 16 >> 16;
   HEAP32[$arrayidx92$14 >> 2] = ((Math_imul($conv94$14, $and) | 0) >> 16) + (Math_imul($conv94$14, $shr91) | 0) + (Math_imul(($45 >> 15) + 1 >> 1, $call86319) | 0);
   $46 = HEAP32[$arrayidx92$15 >> 2] | 0;
   $conv94$15 = $46 << 16 >> 16;
   HEAP32[$arrayidx92$15 >> 2] = ((Math_imul($conv94$15, $and) | 0) >> 16) + (Math_imul($conv94$15, $shr91) | 0) + (Math_imul(($46 >> 15) + 1 >> 1, $call86319) | 0);
   $gain_adj_Q16$0 = $call86319;
  }
  HEAP32[$psDec >> 2] = $18;
  if (!(HEAP32[$lossCnt >> 2] | 0)) label = 23; else if ((HEAP32[$prevSignalType >> 2] | 0) == 2) if ($k$0351 >>> 0 < 2 & $17 << 24 >> 24 != 2) {
   HEAP16[$arrayidx70 >> 1] = 0;
   HEAP16[$arrayidx70 + 2 >> 1] = 0;
   HEAP16[$arrayidx70 + 4 >> 1] = 0;
   HEAP16[$arrayidx70 + 6 >> 1] = 0;
   HEAP16[$arrayidx70 + 8 >> 1] = 0;
   HEAP16[$arrayidx70 + 4 >> 1] = 4096;
   $49 = HEAP32[$lagPrev >> 2] | 0;
   HEAP32[$psDecCtrl + ($k$0351 << 2) >> 2] = $49;
   $51 = $49;
   label = 26;
  } else label = 23; else label = 23;
  do if ((label | 0) == 23) {
   label = 0;
   if ($17 << 24 >> 24 == 2) {
    $51 = HEAP32[$psDecCtrl + ($k$0351 << 2) >> 2] | 0;
    label = 26;
    break;
   } else {
    $76 = HEAP32[$subfr_length >> 2] | 0;
    $pres_Q14$0 = $pexc_Q14$0354;
    $sLTP_buf_idx$2 = $sLTP_buf_idx$0350;
    label = 43;
    break;
   }
  } while (0);
  if ((label | 0) == 26) {
   label = 0;
   $cmp137 = ($k$0351 | 0) == 0;
   $cmp139 = ($k$0351 | 0) == 2;
   if ($cmp137 | $cmp & $cmp139) {
    $50 = HEAP32[$ltp_mem_length >> 2] | 0;
    $52 = HEAP32[$LPC_order >> 2] | 0;
    $sub147 = $50 - $51 - $52 | 0;
    $sub148 = $sub147 + -2 | 0;
    if (($sub147 | 0) <= 2) {
     label = 28;
     break;
    }
    if ($cmp139) {
     _memcpy($psDec + 1348 + ($50 << 1) | 0, $xq | 0, HEAP32[$subfr_length >> 2] << 2 | 0) | 0;
     $55 = HEAP32[$ltp_mem_length >> 2] | 0;
     $56 = HEAP32[$LPC_order >> 2] | 0;
    } else {
     $55 = $50;
     $56 = $52;
    }
    _silk_LPC_analysis_filter($vla + ($sub148 << 1) | 0, $psDec + 1348 + ((Math_imul(HEAP32[$subfr_length >> 2] | 0, $k$0351) | 0) + $sub148 << 1) | 0, $arraydecay66, $55 - $sub148 | 0, $56);
    if ($cmp137) {
     $conv176 = HEAP32[$LTP_scale_Q14 >> 2] << 16 >> 16;
     $inv_gain_Q31$0 = ((Math_imul($conv176, $call300 & 65535) | 0) >> 16) + (Math_imul($conv176, $call300 >> 16) | 0) << 2;
    } else $inv_gain_Q31$0 = $call300;
    if (($51 | 0) > -2) {
     $shr192 = $inv_gain_Q31$0 >> 16;
     $58 = HEAP32[$ltp_mem_length >> 2] | 0;
     $and199 = $inv_gain_Q31$0 & 65535;
     $sub208 = $sLTP_buf_idx$0350 + -1 | 0;
     $59 = $51 + 1 | 0;
     $i$2$neg340 = 0;
     $i$2339 = 0;
     while (1) {
      $conv197 = HEAP16[$vla + ($i$2$neg340 + -1 + $58 << 1) >> 1] | 0;
      HEAP32[$vla2 + ($sub208 + $i$2$neg340 << 2) >> 2] = ((Math_imul($and199, $conv197) | 0) >> 16) + (Math_imul($shr192, $conv197) | 0);
      if (($i$2339 | 0) == ($59 | 0)) break; else {
       $i$2$neg340 = ~$i$2339;
       $i$2339 = $i$2339 + 1 | 0;
      }
     }
    }
   } else if (($gain_adj_Q16$0 | 0) != 65536 & ($51 | 0) > -2) {
    $shr223 = $gain_adj_Q16$0 >> 16;
    $sub224 = $sLTP_buf_idx$0350 + -1 | 0;
    $and230 = $gain_adj_Q16$0 & 65535;
    $61 = $51 + 1 | 0;
    $i$3337 = 0;
    while (1) {
     $arrayidx226 = $vla2 + ($sub224 - $i$3337 << 2) | 0;
     $62 = HEAP32[$arrayidx226 >> 2] | 0;
     $conv228 = $62 << 16 >> 16;
     HEAP32[$arrayidx226 >> 2] = ((Math_imul($conv228, $and230) | 0) >> 16) + (Math_imul($conv228, $shr223) | 0) + (Math_imul(($62 >> 15) + 1 >> 1, $gain_adj_Q16$0) | 0);
     if (($i$3337 | 0) == ($61 | 0)) break; else $i$3337 = $i$3337 + 1 | 0;
    }
   }
   $63 = HEAP32[$subfr_length >> 2] | 0;
   if (($63 | 0) > 0) {
    $conv270 = HEAP16[$arrayidx70 >> 1] | 0;
    $conv283 = HEAP16[$arrayidx70 + 2 >> 1] | 0;
    $conv296 = HEAP16[$arrayidx70 + 4 >> 1] | 0;
    $conv309 = HEAP16[$arrayidx70 + 6 >> 1] | 0;
    $conv322 = HEAP16[$arrayidx70 + 8 >> 1] | 0;
    $i$4344 = 0;
    $pred_lag_ptr$0343 = $vla2 + ($sLTP_buf_idx$0350 + 2 - $51 << 2) | 0;
    $sLTP_buf_idx$1342 = $sLTP_buf_idx$0350;
    while (1) {
     $69 = HEAP32[$pred_lag_ptr$0343 >> 2] | 0;
     $mul271 = Math_imul($69 >> 16, $conv270) | 0;
     $shr277 = (Math_imul($69 & 65535, $conv270) | 0) >> 16;
     $70 = HEAP32[$pred_lag_ptr$0343 + -4 >> 2] | 0;
     $mul284 = Math_imul($70 >> 16, $conv283) | 0;
     $shr290 = (Math_imul($70 & 65535, $conv283) | 0) >> 16;
     $71 = HEAP32[$pred_lag_ptr$0343 + -8 >> 2] | 0;
     $mul297 = Math_imul($71 >> 16, $conv296) | 0;
     $shr303 = (Math_imul($71 & 65535, $conv296) | 0) >> 16;
     $72 = HEAP32[$pred_lag_ptr$0343 + -12 >> 2] | 0;
     $mul310 = Math_imul($72 >> 16, $conv309) | 0;
     $shr316 = (Math_imul($72 & 65535, $conv309) | 0) >> 16;
     $73 = HEAP32[$pred_lag_ptr$0343 + -16 >> 2] | 0;
     $add331 = $mul271 + 2 + $shr277 + $mul284 + $shr290 + $mul297 + $shr303 + $mul310 + $shr316 + (Math_imul($73 >> 16, $conv322) | 0) + ((Math_imul($73 & 65535, $conv322) | 0) >> 16) | 0;
     $add334 = ($add331 << 1) + (HEAP32[$pexc_Q14$0354 + ($i$4344 << 2) >> 2] | 0) | 0;
     HEAP32[$vla3 + ($i$4344 << 2) >> 2] = $add334;
     HEAP32[$vla2 + ($sLTP_buf_idx$1342 << 2) >> 2] = $add334 << 1;
     $i$4344 = $i$4344 + 1 | 0;
     if (($i$4344 | 0) == ($63 | 0)) break; else {
      $pred_lag_ptr$0343 = $pred_lag_ptr$0343 + 4 | 0;
      $sLTP_buf_idx$1342 = $sLTP_buf_idx$1342 + 1 | 0;
     }
    }
    $76 = $63;
    $pres_Q14$0 = $vla3;
    $sLTP_buf_idx$2 = $sLTP_buf_idx$0350 + $63 | 0;
    label = 43;
   } else {
    $$lcssa = $63;
    $sLTP_buf_idx$2367 = $sLTP_buf_idx$0350;
   }
  }
  L61 : do if ((label | 0) == 43) {
   label = 0;
   if (($76 | 0) > 0) {
    $conv735 = $19 << 16 >> 16;
    $shr749 = ($18 >> 21) + 1 >> 1;
    $i$5346 = 0;
    while (1) {
     $77 = HEAP32[$LPC_order >> 2] | 0;
     switch ($77 | 0) {
     case 16:
     case 10:
      break;
     default:
      {
       label = 46;
       break L16;
      }
     }
     $78 = HEAP32[$vla6 + ($i$5346 + 15 << 2) >> 2] | 0;
     $conv366 = HEAP16[$A_Q12_tmp >> 1] | 0;
     $mul367 = Math_imul($78 >> 16, $conv366) | 0;
     $shr375 = (Math_imul($78 & 65535, $conv366) | 0) >> 16;
     $79 = HEAP32[$vla6 + ($i$5346 + 14 << 2) >> 2] | 0;
     $conv383 = HEAP16[$A_Q12_tmp$2$A_Q12_tmp$2$A_Q12_tmp$2$arrayidx382$sroa_idx >> 1] | 0;
     $mul384 = Math_imul($79 >> 16, $conv383) | 0;
     $shr392 = (Math_imul($79 & 65535, $conv383) | 0) >> 16;
     $80 = HEAP32[$vla6 + ($i$5346 + 13 << 2) >> 2] | 0;
     $conv400 = HEAP16[$A_Q12_tmp$4$A_Q12_tmp$4$A_Q12_tmp$4$arrayidx399$sroa_idx >> 1] | 0;
     $mul401 = Math_imul($80 >> 16, $conv400) | 0;
     $shr409 = (Math_imul($80 & 65535, $conv400) | 0) >> 16;
     $81 = HEAP32[$vla6 + ($i$5346 + 12 << 2) >> 2] | 0;
     $conv417 = HEAP16[$A_Q12_tmp$6$A_Q12_tmp$6$A_Q12_tmp$6$arrayidx416$sroa_idx >> 1] | 0;
     $mul418 = Math_imul($81 >> 16, $conv417) | 0;
     $shr426 = (Math_imul($81 & 65535, $conv417) | 0) >> 16;
     $82 = HEAP32[$vla6 + ($i$5346 + 11 << 2) >> 2] | 0;
     $conv434 = HEAP16[$A_Q12_tmp$8$A_Q12_tmp$8$A_Q12_tmp$8$arrayidx433$sroa_idx >> 1] | 0;
     $mul435 = Math_imul($82 >> 16, $conv434) | 0;
     $shr443 = (Math_imul($82 & 65535, $conv434) | 0) >> 16;
     $83 = HEAP32[$vla6 + ($i$5346 + 10 << 2) >> 2] | 0;
     $conv451 = HEAP16[$A_Q12_tmp$10$A_Q12_tmp$10$A_Q12_tmp$10$arrayidx450$sroa_idx >> 1] | 0;
     $mul452 = Math_imul($83 >> 16, $conv451) | 0;
     $shr460 = (Math_imul($83 & 65535, $conv451) | 0) >> 16;
     $84 = HEAP32[$vla6 + ($i$5346 + 9 << 2) >> 2] | 0;
     $conv468 = HEAP16[$A_Q12_tmp$12$A_Q12_tmp$12$A_Q12_tmp$12$arrayidx467$sroa_idx >> 1] | 0;
     $mul469 = Math_imul($84 >> 16, $conv468) | 0;
     $shr477 = (Math_imul($84 & 65535, $conv468) | 0) >> 16;
     $85 = HEAP32[$vla6 + ($i$5346 + 8 << 2) >> 2] | 0;
     $conv485 = HEAP16[$A_Q12_tmp$14$A_Q12_tmp$14$A_Q12_tmp$14$arrayidx484$sroa_idx >> 1] | 0;
     $mul486 = Math_imul($85 >> 16, $conv485) | 0;
     $shr494 = (Math_imul($85 & 65535, $conv485) | 0) >> 16;
     $86 = HEAP32[$vla6 + ($i$5346 + 7 << 2) >> 2] | 0;
     $conv502 = HEAP16[$A_Q12_tmp$16$A_Q12_tmp$16$A_Q12_tmp$16$arrayidx501$sroa_idx >> 1] | 0;
     $mul503 = Math_imul($86 >> 16, $conv502) | 0;
     $shr511 = (Math_imul($86 & 65535, $conv502) | 0) >> 16;
     $87 = HEAP32[$vla6 + ($i$5346 + 6 << 2) >> 2] | 0;
     $conv519 = HEAP16[$A_Q12_tmp$18$A_Q12_tmp$18$A_Q12_tmp$18$arrayidx518$sroa_idx >> 1] | 0;
     $add530 = $mul367 + ($77 >>> 1) + $shr375 + $mul384 + $shr392 + $mul401 + $shr409 + $mul418 + $shr426 + $mul435 + $shr443 + $mul452 + $shr460 + $mul469 + $shr477 + $mul486 + $shr494 + $mul503 + $shr511 + (Math_imul($87 >> 16, $conv519) | 0) + ((Math_imul($87 & 65535, $conv519) | 0) >> 16) | 0;
     if (($77 | 0) == 16) {
      $88 = HEAP32[$vla6 + ($i$5346 + 5 << 2) >> 2] | 0;
      $conv540 = HEAP16[$A_Q12_tmp$20$A_Q12_tmp$20$A_Q12_tmp$20$arrayidx539$sroa_idx >> 1] | 0;
      $mul541 = Math_imul($88 >> 16, $conv540) | 0;
      $shr549 = (Math_imul($88 & 65535, $conv540) | 0) >> 16;
      $89 = HEAP32[$vla6 + ($i$5346 + 4 << 2) >> 2] | 0;
      $conv557 = HEAP16[$A_Q12_tmp$22$A_Q12_tmp$22$A_Q12_tmp$22$arrayidx556$sroa_idx >> 1] | 0;
      $mul558 = Math_imul($89 >> 16, $conv557) | 0;
      $shr566 = (Math_imul($89 & 65535, $conv557) | 0) >> 16;
      $90 = HEAP32[$vla6 + ($i$5346 + 3 << 2) >> 2] | 0;
      $conv574 = HEAP16[$A_Q12_tmp$24$A_Q12_tmp$24$A_Q12_tmp$24$arrayidx573$sroa_idx >> 1] | 0;
      $mul575 = Math_imul($90 >> 16, $conv574) | 0;
      $shr583 = (Math_imul($90 & 65535, $conv574) | 0) >> 16;
      $91 = HEAP32[$vla6 + ($i$5346 + 2 << 2) >> 2] | 0;
      $conv591 = HEAP16[$A_Q12_tmp$26$A_Q12_tmp$26$A_Q12_tmp$26$arrayidx590$sroa_idx >> 1] | 0;
      $mul592 = Math_imul($91 >> 16, $conv591) | 0;
      $shr600 = (Math_imul($91 & 65535, $conv591) | 0) >> 16;
      $92 = HEAP32[$vla6 + ($i$5346 + 1 << 2) >> 2] | 0;
      $conv608 = HEAP16[$A_Q12_tmp$28$A_Q12_tmp$28$A_Q12_tmp$28$arrayidx607$sroa_idx >> 1] | 0;
      $mul609 = Math_imul($92 >> 16, $conv608) | 0;
      $shr617 = (Math_imul($92 & 65535, $conv608) | 0) >> 16;
      $93 = HEAP32[$vla6 + ($i$5346 << 2) >> 2] | 0;
      $conv625 = HEAP16[$A_Q12_tmp$30$A_Q12_tmp$30$A_Q12_tmp$30$arrayidx624$sroa_idx >> 1] | 0;
      $LPC_pred_Q10$0 = $mul541 + $add530 + $shr549 + $mul558 + $shr566 + $mul575 + $shr583 + $mul592 + $shr600 + $mul609 + $shr617 + (Math_imul($93 >> 16, $conv625) | 0) + ((Math_imul($93 & 65535, $conv625) | 0) >> 16) | 0;
     } else $LPC_pred_Q10$0 = $add530;
     $94 = HEAP32[$pres_Q14$0 + ($i$5346 << 2) >> 2] | 0;
     $cond = ($LPC_pred_Q10$0 | 0) > -134217728 ? $LPC_pred_Q10$0 : -134217728;
     $shl647 = (($cond | 0) < 134217727 ? $cond : 134217727) << 4;
     $add648 = $shl647 + $94 | 0;
     if (($add648 | 0) > -1) $cond728 = ($shl647 & $94 | 0) < 0 ? -2147483648 : $add648; else $cond728 = ($shl647 | $94 | 0) > -1 ? 2147483647 : $add648;
     HEAP32[$vla6 + ($i$5346 + 16 << 2) >> 2] = $cond728;
     $add751 = (Math_imul($cond728 >> 16, $conv735) | 0) + (Math_imul($cond728, $shr749) | 0) + ((Math_imul($cond728 & 65535, $conv735) | 0) >> 16) | 0;
     HEAP16[$pxq$0349 + ($i$5346 << 1) >> 1] = ($add751 | 0) > 8388479 ? 32767 : ($add751 | 0) < -8388736 ? -32768 : (($add751 >>> 7) + 1 | 0) >>> 1 & 65535;
     $i$5346 = $i$5346 + 1 | 0;
     $101 = HEAP32[$subfr_length >> 2] | 0;
     if (($i$5346 | 0) >= ($101 | 0)) {
      $$lcssa = $101;
      $sLTP_buf_idx$2367 = $sLTP_buf_idx$2;
      break L61;
     }
    }
   } else {
    $$lcssa = $76;
    $sLTP_buf_idx$2367 = $sLTP_buf_idx$2;
   }
  } while (0);
  dest = $vla6;
  src = $vla6 + ($$lcssa << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $k$0351 = $k$0351 + 1 | 0;
  if (($k$0351 | 0) >= (HEAP32[$nb_subfr >> 2] | 0)) {
   label = 54;
   break;
  } else {
   $pexc_Q14$0354 = $pexc_Q14$0354 + ($$lcssa << 2) | 0;
   $pxq$0349 = $pxq$0349 + ($$lcssa << 1) | 0;
   $sLTP_buf_idx$0350 = $sLTP_buf_idx$2367;
  }
 }
 if ((label | 0) == 28) _celt_fatal(51632, 50060, 144); else if ((label | 0) == 46) _celt_fatal(50079, 50060, 199); else if ((label | 0) == 54) {
  dest = $arraydecay;
  src = $vla6;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _llvm_stackrestore($1 | 0);
  STACKTOP = sp;
  return;
 }
}

function _silk_noise_shape_quantizer_del_dec($NSQ, $psDelDec, $signalType, $x_Q10, $pulses, $xq, $sLTP_Q15, $delayedGain_Q10, $a_Q12, $b_Q14, $AR_shp_Q13, $lag, $HarmShapeFIRPacked_Q14, $Tilt_Q14, $LF_shp_Q14, $Gain_Q16, $Lambda_Q10, $offset_Q10, $length, $subfr, $shapingLPCOrder, $predictLPCOrder, $warping_Q16, $nStatesDelayedDecision, $smpl_buf_idx, $decisionDelay) {
 $NSQ = $NSQ | 0;
 $psDelDec = $psDelDec | 0;
 $signalType = $signalType | 0;
 $x_Q10 = $x_Q10 | 0;
 $pulses = $pulses | 0;
 $xq = $xq | 0;
 $sLTP_Q15 = $sLTP_Q15 | 0;
 $delayedGain_Q10 = $delayedGain_Q10 | 0;
 $a_Q12 = $a_Q12 | 0;
 $b_Q14 = $b_Q14 | 0;
 $AR_shp_Q13 = $AR_shp_Q13 | 0;
 $lag = $lag | 0;
 $HarmShapeFIRPacked_Q14 = $HarmShapeFIRPacked_Q14 | 0;
 $Tilt_Q14 = $Tilt_Q14 | 0;
 $LF_shp_Q14 = $LF_shp_Q14 | 0;
 $Gain_Q16 = $Gain_Q16 | 0;
 $Lambda_Q10 = $Lambda_Q10 | 0;
 $offset_Q10 = $offset_Q10 | 0;
 $length = $length | 0;
 $subfr = $subfr | 0;
 $shapingLPCOrder = $shapingLPCOrder | 0;
 $predictLPCOrder = $predictLPCOrder | 0;
 $warping_Q16 = $warping_Q16 | 0;
 $nStatesDelayedDecision = $nStatesDelayedDecision | 0;
 $smpl_buf_idx = $smpl_buf_idx | 0;
 $decisionDelay = $decisionDelay | 0;
 var $10 = 0, $14 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $97 = 0, $99 = 0, $LTP_pred_Q14$0 = 0, $RD_Q10531 = 0, $RD_Q10563 = 0, $RD_Q10570 = 0, $RD_Q10584 = 0, $RDmax_Q10$0$lcssa = 0, $RDmax_Q10$049 = 0, $RDmax_ind$0$lcssa = 0, $RDmax_ind$046 = 0, $RDmin_Q10$039 = 0, $RDmin_Q10$2$lcssa = 0, $RDmin_Q10$248 = 0, $RDmin_Q10$3 = 0, $RDmin_ind$0$lcssa = 0, $RDmin_ind$047 = 0, $RDmin_ind$1 = 0, $Seed = 0, $Seed777 = 0, $Winner_ind$0$lcssa = 0, $Winner_ind$040 = 0, $add114 = 0, $add125$i = 0, $add135 = 0, $add154 = 0, $add168 = 0, $add194 = 0, $add232 = 0, $add246 = 0, $add247 = 0, $add357 = 0, $add358 = 0, $add373 = 0, $add403 = 0, $add472 = 0, $add473 = 0, $add500 = 0, $add501 = 0, $add661 = 0, $add75 = 0, $add762 = 0, $add782 = 0, $and270 = 0, $arrayidx102$i = 0, $arrayidx11$i = 0, $arrayidx115 = 0, $arrayidx115$i = 0, $arrayidx122 = 0, $arrayidx129$i = 0, $arrayidx142$i = 0, $arrayidx155$i = 0, $arrayidx168$i = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx181$i = 0, $arrayidx19 = 0, $arrayidx194$i = 0, $arrayidx24$i = 0, $arrayidx253 = 0, $arrayidx309 = 0, $arrayidx32 = 0, $arrayidx37$i = 0, $arrayidx45 = 0, $arrayidx50$i = 0, $arrayidx58 = 0, $arrayidx621 = 0, $arrayidx623 = 0, $arrayidx63$i = 0, $arrayidx76$i = 0, $arrayidx89$i = 0, $cmp$i = 0, $cmp118 = 0, $cmp17031 = 0, $cmp312 = 0, $cmp327 = 0, $cmp436 = 0, $cmp5 = 0, $cmp53338 = 0, $cmp539 = 0, $cmp592 = 0, $cmp602 = 0, $cmp626 = 0, $cmp70 = 0, $cond = 0, $cond324 = 0, $conv = 0, $conv$i = 0, $conv103$i = 0, $conv116$i = 0, $conv12$i = 0, $conv125 = 0, $conv130$i = 0, $conv143$i = 0, $conv156$i = 0, $conv160 = 0, $conv169$i = 0, $conv182$i = 0, $conv195$i = 0, $conv20 = 0, $conv201 = 0, $conv238 = 0, $conv25$i = 0, $conv254 = 0, $conv267 = 0, $conv281 = 0, $conv33 = 0, $conv362 = 0, $conv38$i = 0, $conv422 = 0, $conv430 = 0, $conv46 = 0, $conv51$i = 0, $conv59 = 0, $conv64$i = 0, $conv643 = 0, $conv77$i = 0, $conv78 = 0, $conv90$i = 0, $div28 = 0, $i$060 = 0, $j$034 = 0, $k$037 = 0, $k$141 = 0, $k$244 = 0, $k$350 = 0, $k$456 = 0, $k$530 = 0, $mul = 0, $mul$i = 0, $mul104$i = 0, $mul13$i = 0, $mul131$i = 0, $mul144$i = 0, $mul157$i = 0, $mul170$i = 0, $mul183$i = 0, $mul202 = 0, $mul21 = 0, $mul26$i = 0, $mul34 = 0, $mul378 = 0, $mul383 = 0, $mul39$i = 0, $mul394 = 0, $mul47 = 0, $mul52$i = 0, $mul65$i = 0, $mul78$i = 0, $mul79 = 0, $mul91$i = 0, $n_AR_Q14$0$lcssa = 0, $n_AR_Q14$032 = 0, $n_LTP_Q14$0 = 0, $out$0$i = 0, $pred_lag_ptr$058 = 0, $pred_lag_ptr$1 = 0, $q1_Q0$1$in = 0, $q1_Q0$127 = 0, $q1_Q10$0 = 0, $q2_Q10$0 = 0, $rd1_Q10$0 = 0, $rd2_Q10$0 = 0, $rem = 0, $rem528 = 0, $sLTP_buf_idx = 0, $sLTP_shp_buf_idx = 0, $sext12 = 0, $shl116 = 0, $shl264 = 0, $shl277 = 0, $shl302 = 0, $shl465 = 0, $shl475 = 0, $shl493 = 0, $shp_lag_ptr$059 = 0, $shp_lag_ptr$1 = 0, $shr = 0, $shr$i = 0, $shr110$i = 0, $shr137$i = 0, $shr14 = 0, $shr150$i = 0, $shr157 = 0, $shr163$i = 0, $shr176$i = 0, $shr189$i = 0, $shr19$i = 0, $shr208 = 0, $shr265 = 0, $shr27 = 0, $shr293 = 0, $shr32$i = 0, $shr40 = 0, $shr427 = 0, $shr435 = 0, $shr45$i = 0, $shr53 = 0, $shr58$i = 0, $shr7$i = 0, $shr71$i = 0, $shr84$i = 0, $shr87 = 0, $shr91 = 0, $shr97$i = 0, $spec$select = 0, $spec$select20 = 0, $spec$select22 = 0, $spec$select23 = 0, $spec$select24 = 0, $spec$select68 = 0, $spec$select69 = 0, $sub140 = 0, $sub174 = 0, $sub179 = 0, $sub217 = 0, $sub249 = 0, $sub310 = 0, $sub325 = 0, $sub330 = 0, $sub337 = 0, $sub356 = 0, $sub388 = 0, $sub405 = 0, $sub476 = 0, $sub481 = 0, $sub504 = 0, $sub509 = 0, $sub637 = 0, $tmp1$0$lcssa = 0, $tmp1$033 = 0, $vla = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (($nStatesDelayedDecision | 0) <= 0) _celt_fatal(51683, 51664, 364);
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($nStatesDelayedDecision * 56 | 0) | 0) + 15 & -16) | 0;
 $sLTP_shp_buf_idx = $NSQ + 4336 | 0;
 $sLTP_buf_idx = $NSQ + 4332 | 0;
 $shr = $Gain_Q16 >> 6;
 L4 : do if (($length | 0) > 0) {
  $cmp5 = ($signalType | 0) == 2;
  $arrayidx19 = $b_Q14 + 2 | 0;
  $arrayidx32 = $b_Q14 + 4 | 0;
  $arrayidx45 = $b_Q14 + 6 | 0;
  $arrayidx58 = $b_Q14 + 8 | 0;
  $cmp70 = ($lag | 0) > 0;
  $conv78 = $HarmShapeFIRPacked_Q14 << 16 >> 16;
  $shr91 = $HarmShapeFIRPacked_Q14 >> 16;
  $RD_Q10531 = $vla + 4 | 0;
  $cmp53338 = ($nStatesDelayedDecision | 0) > 1;
  $shr$i = $predictLPCOrder >> 1;
  $arrayidx11$i = $a_Q12 + 2 | 0;
  $arrayidx24$i = $a_Q12 + 4 | 0;
  $arrayidx37$i = $a_Q12 + 6 | 0;
  $arrayidx50$i = $a_Q12 + 8 | 0;
  $arrayidx63$i = $a_Q12 + 10 | 0;
  $arrayidx76$i = $a_Q12 + 12 | 0;
  $arrayidx89$i = $a_Q12 + 14 | 0;
  $arrayidx102$i = $a_Q12 + 16 | 0;
  $arrayidx115$i = $a_Q12 + 18 | 0;
  $cmp$i = ($predictLPCOrder | 0) == 16;
  $arrayidx129$i = $a_Q12 + 20 | 0;
  $arrayidx142$i = $a_Q12 + 22 | 0;
  $arrayidx155$i = $a_Q12 + 24 | 0;
  $arrayidx168$i = $a_Q12 + 26 | 0;
  $arrayidx181$i = $a_Q12 + 28 | 0;
  $arrayidx194$i = $a_Q12 + 30 | 0;
  $cmp118 = ($shapingLPCOrder & 1 | 0) == 0;
  $conv125 = $warping_Q16 << 16 >> 16;
  $shr157 = $shapingLPCOrder >> 1;
  $cmp17031 = ($shapingLPCOrder | 0) > 2;
  $sub249 = $shapingLPCOrder + -1 | 0;
  $arrayidx253 = $AR_shp_Q13 + ($sub249 << 1) | 0;
  $conv267 = $Tilt_Q14 << 16 >> 16;
  $conv281 = $LF_shp_Q14 << 16 >> 16;
  $shr293 = $LF_shp_Q14 >> 16;
  $cmp327 = ($Lambda_Q10 | 0) > 2048;
  $div28 = $Lambda_Q10 >>> 1;
  $sub330 = $div28 + -512 | 0;
  $sub337 = 512 - $div28 | 0;
  $sub356 = $offset_Q10 + -80 | 0;
  $conv362 = $Lambda_Q10 << 16 >> 16;
  $add373 = $offset_Q10 + 944 | 0;
  $sext12 = $offset_Q10 << 16;
  $mul378 = Math_imul($sext12 >> 16, $conv362) | 0;
  $mul383 = Math_imul($add373 << 16 >> 16, $conv362) | 0;
  $sub388 = $offset_Q10 + -944 | 0;
  $mul394 = Math_imul(61865984 - $sext12 >> 16, $conv362) | 0;
  $RD_Q10584 = $vla + 32 | 0;
  $cmp626 = ($subfr | 0) < 1;
  $i$060 = 0;
  $pred_lag_ptr$058 = $sLTP_Q15 + (2 - $lag + (HEAP32[$sLTP_buf_idx >> 2] | 0) << 2) | 0;
  $shp_lag_ptr$059 = $NSQ + 1280 + (1 - $lag + (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) << 2) | 0;
  L6 : while (1) {
   if ($cmp5) {
    $2 = HEAP32[$pred_lag_ptr$058 >> 2] | 0;
    $conv = HEAP16[$b_Q14 >> 1] | 0;
    $mul = Math_imul($2 >> 16, $conv) | 0;
    $shr14 = (Math_imul($2 & 65535, $conv) | 0) >> 16;
    $4 = HEAP32[$pred_lag_ptr$058 + -4 >> 2] | 0;
    $conv20 = HEAP16[$arrayidx19 >> 1] | 0;
    $mul21 = Math_imul($4 >> 16, $conv20) | 0;
    $shr27 = (Math_imul($4 & 65535, $conv20) | 0) >> 16;
    $6 = HEAP32[$pred_lag_ptr$058 + -8 >> 2] | 0;
    $conv33 = HEAP16[$arrayidx32 >> 1] | 0;
    $mul34 = Math_imul($6 >> 16, $conv33) | 0;
    $shr40 = (Math_imul($6 & 65535, $conv33) | 0) >> 16;
    $8 = HEAP32[$pred_lag_ptr$058 + -12 >> 2] | 0;
    $conv46 = HEAP16[$arrayidx45 >> 1] | 0;
    $mul47 = Math_imul($8 >> 16, $conv46) | 0;
    $shr53 = (Math_imul($8 & 65535, $conv46) | 0) >> 16;
    $10 = HEAP32[$pred_lag_ptr$058 + -16 >> 2] | 0;
    $conv59 = HEAP16[$arrayidx58 >> 1] | 0;
    $LTP_pred_Q14$0 = $mul + 2 + $shr14 + $mul21 + $shr27 + $mul34 + $shr40 + $mul47 + $shr53 + (Math_imul($10 >> 16, $conv59) | 0) + ((Math_imul($10 & 65535, $conv59) | 0) >> 16) << 1;
    $pred_lag_ptr$1 = $pred_lag_ptr$058 + 4 | 0;
   } else {
    $LTP_pred_Q14$0 = 0;
    $pred_lag_ptr$1 = $pred_lag_ptr$058;
   }
   if ($cmp70) {
    $add75 = (HEAP32[$shp_lag_ptr$059 + -8 >> 2] | 0) + (HEAP32[$shp_lag_ptr$059 >> 2] | 0) | 0;
    $mul79 = Math_imul($add75 >> 16, $conv78) | 0;
    $shr87 = (Math_imul($add75 & 65535, $conv78) | 0) >> 16;
    $14 = HEAP32[$shp_lag_ptr$059 + -4 >> 2] | 0;
    $n_LTP_Q14$0 = $LTP_pred_Q14$0 - ((Math_imul($14 >> 16, $shr91) | 0) + $mul79 + $shr87 + ((Math_imul($14 & 65535, $shr91) | 0) >> 16) << 2) | 0;
    $shp_lag_ptr$1 = $shp_lag_ptr$059 + 4 | 0;
   } else {
    $n_LTP_Q14$0 = 0;
    $shp_lag_ptr$1 = $shp_lag_ptr$059;
   }
   $add114 = $i$060 + 15 | 0;
   $conv$i = HEAP16[$a_Q12 >> 1] | 0;
   $conv12$i = HEAP16[$arrayidx11$i >> 1] | 0;
   $conv25$i = HEAP16[$arrayidx24$i >> 1] | 0;
   $conv38$i = HEAP16[$arrayidx37$i >> 1] | 0;
   $conv51$i = HEAP16[$arrayidx50$i >> 1] | 0;
   $conv64$i = HEAP16[$arrayidx63$i >> 1] | 0;
   $conv77$i = HEAP16[$arrayidx76$i >> 1] | 0;
   $conv90$i = HEAP16[$arrayidx89$i >> 1] | 0;
   $conv103$i = HEAP16[$arrayidx102$i >> 1] | 0;
   $conv116$i = HEAP16[$arrayidx115$i >> 1] | 0;
   $arrayidx309 = $x_Q10 + ($i$060 << 2) | 0;
   $k$037 = 0;
   do {
    $Seed = $psDelDec + ($k$037 * 1300 | 0) + 1288 | 0;
    HEAP32[$Seed >> 2] = (Math_imul(HEAP32[$Seed >> 2] | 0, 196314165) | 0) + 907633515;
    $arrayidx115 = $psDelDec + ($k$037 * 1300 | 0) + ($add114 << 2) | 0;
    $26 = HEAP32[$arrayidx115 >> 2] | 0;
    $mul$i = Math_imul($26 >> 16, $conv$i) | 0;
    $shr7$i = (Math_imul($26 & 65535, $conv$i) | 0) >> 16;
    $27 = HEAP32[$arrayidx115 + -4 >> 2] | 0;
    $mul13$i = Math_imul($27 >> 16, $conv12$i) | 0;
    $shr19$i = (Math_imul($27 & 65535, $conv12$i) | 0) >> 16;
    $28 = HEAP32[$arrayidx115 + -8 >> 2] | 0;
    $mul26$i = Math_imul($28 >> 16, $conv25$i) | 0;
    $shr32$i = (Math_imul($28 & 65535, $conv25$i) | 0) >> 16;
    $29 = HEAP32[$arrayidx115 + -12 >> 2] | 0;
    $mul39$i = Math_imul($29 >> 16, $conv38$i) | 0;
    $shr45$i = (Math_imul($29 & 65535, $conv38$i) | 0) >> 16;
    $30 = HEAP32[$arrayidx115 + -16 >> 2] | 0;
    $mul52$i = Math_imul($30 >> 16, $conv51$i) | 0;
    $shr58$i = (Math_imul($30 & 65535, $conv51$i) | 0) >> 16;
    $31 = HEAP32[$arrayidx115 + -20 >> 2] | 0;
    $mul65$i = Math_imul($31 >> 16, $conv64$i) | 0;
    $shr71$i = (Math_imul($31 & 65535, $conv64$i) | 0) >> 16;
    $32 = HEAP32[$arrayidx115 + -24 >> 2] | 0;
    $mul78$i = Math_imul($32 >> 16, $conv77$i) | 0;
    $shr84$i = (Math_imul($32 & 65535, $conv77$i) | 0) >> 16;
    $33 = HEAP32[$arrayidx115 + -28 >> 2] | 0;
    $mul91$i = Math_imul($33 >> 16, $conv90$i) | 0;
    $shr97$i = (Math_imul($33 & 65535, $conv90$i) | 0) >> 16;
    $34 = HEAP32[$arrayidx115 + -32 >> 2] | 0;
    $mul104$i = Math_imul($34 >> 16, $conv103$i) | 0;
    $shr110$i = (Math_imul($34 & 65535, $conv103$i) | 0) >> 16;
    $35 = HEAP32[$arrayidx115 + -36 >> 2] | 0;
    $add125$i = $mul$i + $shr$i + $shr7$i + $mul13$i + $shr19$i + $mul26$i + $shr32$i + $mul39$i + $shr45$i + $mul52$i + $shr58$i + $mul65$i + $shr71$i + $mul78$i + $shr84$i + $mul91$i + $shr97$i + $mul104$i + $shr110$i + (Math_imul($35 >> 16, $conv116$i) | 0) + ((Math_imul($35 & 65535, $conv116$i) | 0) >> 16) | 0;
    if ($cmp$i) {
     $36 = HEAP32[$arrayidx115 + -40 >> 2] | 0;
     $conv130$i = HEAP16[$arrayidx129$i >> 1] | 0;
     $mul131$i = Math_imul($36 >> 16, $conv130$i) | 0;
     $shr137$i = (Math_imul($36 & 65535, $conv130$i) | 0) >> 16;
     $38 = HEAP32[$arrayidx115 + -44 >> 2] | 0;
     $conv143$i = HEAP16[$arrayidx142$i >> 1] | 0;
     $mul144$i = Math_imul($38 >> 16, $conv143$i) | 0;
     $shr150$i = (Math_imul($38 & 65535, $conv143$i) | 0) >> 16;
     $40 = HEAP32[$arrayidx115 + -48 >> 2] | 0;
     $conv156$i = HEAP16[$arrayidx155$i >> 1] | 0;
     $mul157$i = Math_imul($40 >> 16, $conv156$i) | 0;
     $shr163$i = (Math_imul($40 & 65535, $conv156$i) | 0) >> 16;
     $42 = HEAP32[$arrayidx115 + -52 >> 2] | 0;
     $conv169$i = HEAP16[$arrayidx168$i >> 1] | 0;
     $mul170$i = Math_imul($42 >> 16, $conv169$i) | 0;
     $shr176$i = (Math_imul($42 & 65535, $conv169$i) | 0) >> 16;
     $44 = HEAP32[$arrayidx115 + -56 >> 2] | 0;
     $conv182$i = HEAP16[$arrayidx181$i >> 1] | 0;
     $mul183$i = Math_imul($44 >> 16, $conv182$i) | 0;
     $shr189$i = (Math_imul($44 & 65535, $conv182$i) | 0) >> 16;
     $46 = HEAP32[$psDelDec + ($k$037 * 1300 | 0) + ($i$060 << 2) >> 2] | 0;
     $conv195$i = HEAP16[$arrayidx194$i >> 1] | 0;
     $out$0$i = $mul131$i + $add125$i + $shr137$i + $mul144$i + $shr150$i + $mul157$i + $shr163$i + $mul170$i + $shr176$i + $mul183$i + $shr189$i + (Math_imul($46 >> 16, $conv195$i) | 0) + ((Math_imul($46 & 65535, $conv195$i) | 0) >> 16) | 0;
    } else $out$0$i = $add125$i;
    $shl116 = $out$0$i << 4;
    if (!$cmp118) break L6;
    $arrayidx122 = $psDelDec + ($k$037 * 1300 | 0) + 1184 | 0;
    $49 = HEAP32[$arrayidx122 >> 2] | 0;
    $add135 = (Math_imul($49 >> 16, $conv125) | 0) + (HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1284 >> 2] | 0) + ((Math_imul($49 & 65535, $conv125) | 0) >> 16) | 0;
    $sub140 = (HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1188 >> 2] | 0) - $add135 | 0;
    $add154 = (Math_imul($sub140 >> 16, $conv125) | 0) + $49 + ((Math_imul($sub140 & 65535, $conv125) | 0) >> 16) | 0;
    HEAP32[$arrayidx122 >> 2] = $add135;
    $conv160 = HEAP16[$AR_shp_Q13 >> 1] | 0;
    $add168 = (Math_imul($add135 >> 16, $conv160) | 0) + $shr157 + ((Math_imul($add135 & 65535, $conv160) | 0) >> 16) | 0;
    L20 : do if ($cmp17031) {
     $j$034 = 2;
     $n_AR_Q14$032 = $add168;
     $tmp1$033 = $add154;
     while (1) {
      $sub174 = $j$034 + -1 | 0;
      $arrayidx175 = $psDelDec + ($k$037 * 1300 | 0) + 1184 + ($sub174 << 2) | 0;
      $arrayidx178 = $psDelDec + ($k$037 * 1300 | 0) + 1184 + ($j$034 << 2) | 0;
      $53 = HEAP32[$arrayidx178 >> 2] | 0;
      $sub179 = $53 - $tmp1$033 | 0;
      $add194 = (Math_imul($sub179 >> 16, $conv125) | 0) + (HEAP32[$arrayidx175 >> 2] | 0) + ((Math_imul($sub179 & 65535, $conv125) | 0) >> 16) | 0;
      HEAP32[$arrayidx175 >> 2] = $tmp1$033;
      $conv201 = HEAP16[$AR_shp_Q13 + ($sub174 << 1) >> 1] | 0;
      $mul202 = Math_imul($tmp1$033 >> 16, $conv201) | 0;
      $shr208 = (Math_imul($tmp1$033 & 65535, $conv201) | 0) >> 16;
      $sub217 = (HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1184 + (($j$034 | 1) << 2) >> 2] | 0) - $add194 | 0;
      $add232 = (Math_imul($sub217 >> 16, $conv125) | 0) + $53 + ((Math_imul($sub217 & 65535, $conv125) | 0) >> 16) | 0;
      HEAP32[$arrayidx178 >> 2] = $add194;
      $conv238 = HEAP16[$AR_shp_Q13 + ($j$034 << 1) >> 1] | 0;
      $add246 = $mul202 + $n_AR_Q14$032 + $shr208 + (Math_imul($add194 >> 16, $conv238) | 0) + ((Math_imul($add194 & 65535, $conv238) | 0) >> 16) | 0;
      $add247 = $j$034 + 2 | 0;
      if (($add247 | 0) >= ($shapingLPCOrder | 0)) {
       $n_AR_Q14$0$lcssa = $add246;
       $tmp1$0$lcssa = $add232;
       break L20;
      }
      $j$034 = $add247;
      $n_AR_Q14$032 = $add246;
      $tmp1$033 = $add232;
     }
    } else {
     $n_AR_Q14$0$lcssa = $add168;
     $tmp1$0$lcssa = $add154;
    } while (0);
    HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1184 + ($sub249 << 2) >> 2] = $tmp1$0$lcssa;
    $conv254 = HEAP16[$arrayidx253 >> 1] | 0;
    $shl264 = (Math_imul($tmp1$0$lcssa >> 16, $conv254) | 0) + $n_AR_Q14$0$lcssa + ((Math_imul($tmp1$0$lcssa & 65535, $conv254) | 0) >> 16) << 1;
    $58 = HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1280 >> 2] | 0;
    $shr265 = $58 >> 16;
    $and270 = $58 & 65535;
    $shl277 = ((Math_imul($and270, $conv267) | 0) >> 16) + (Math_imul($shr265, $conv267) | 0) + $shl264 << 2;
    $59 = HEAP32[$smpl_buf_idx >> 2] | 0;
    $60 = HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1024 + ($59 << 2) >> 2] | 0;
    $shl302 = ((Math_imul($and270, $shr293) | 0) >> 16) + (Math_imul($shr265, $shr293) | 0) + (Math_imul($60 >> 16, $conv281) | 0) + ((Math_imul($60 & 65535, $conv281) | 0) >> 16) << 2;
    $61 = HEAP32[$arrayidx309 >> 2] | 0;
    $sub310 = $61 - (($shl116 + $n_LTP_Q14$0 - $shl277 - $shl302 >> 3) + 1 >> 1) | 0;
    $cmp312 = (HEAP32[$Seed >> 2] | 0) < 0;
    $spec$select = $cmp312 ? 0 - $sub310 | 0 : $sub310;
    $cond = ($spec$select | 0) > -31744 ? $spec$select : -31744;
    $cond324 = ($cond | 0) < 30720 ? $cond : 30720;
    $sub325 = $cond324 - $offset_Q10 | 0;
    do if ($cmp327) {
     if (($sub325 | 0) > ($sub330 | 0)) {
      $q1_Q0$1$in = $sub325 - $sub330 | 0;
      label = 24;
      break;
     }
     if (($sub325 | 0) < ($sub337 | 0)) {
      $q1_Q0$1$in = $sub325 + $sub330 | 0;
      label = 24;
      break;
     } else {
      $q1_Q0$127 = $sub325 >> 31;
      label = 26;
      break;
     }
    } else {
     $q1_Q0$1$in = $sub325;
     label = 24;
    } while (0);
    if ((label | 0) == 24) {
     label = 0;
     if (($q1_Q0$1$in | 0) > 1023) {
      $add357 = $sub356 + ($q1_Q0$1$in & -1024) | 0;
      $add358 = $add357 + 1024 | 0;
      $q1_Q10$0 = $add357;
      $q2_Q10$0 = $add358;
      $rd1_Q10$0 = Math_imul($add357 << 16 >> 16, $conv362) | 0;
      $rd2_Q10$0 = Math_imul($add358 << 16 >> 16, $conv362) | 0;
     } else {
      $q1_Q0$127 = $q1_Q0$1$in >> 10;
      label = 26;
     }
    }
    L37 : do if ((label | 0) == 26) {
     label = 0;
     switch ($q1_Q0$127 | 0) {
     case 0:
      {
       $q1_Q10$0 = $offset_Q10;
       $q2_Q10$0 = $add373;
       $rd1_Q10$0 = $mul378;
       $rd2_Q10$0 = $mul383;
       break L37;
       break;
      }
     case -1:
      {
       $q1_Q10$0 = $sub388;
       $q2_Q10$0 = $offset_Q10;
       $rd1_Q10$0 = $mul394;
       $rd2_Q10$0 = $mul378;
       break L37;
       break;
      }
     default:
      {
       $add403 = ($q1_Q0$127 << 10 | 80) + $offset_Q10 | 0;
       $sub405 = $add403 << 16;
       $q1_Q10$0 = $add403;
       $q2_Q10$0 = $add403 + 1024 | 0;
       $rd1_Q10$0 = Math_imul(0 - $sub405 >> 16, $conv362) | 0;
       $rd2_Q10$0 = Math_imul(-67108864 - $sub405 >> 16, $conv362) | 0;
       break L37;
      }
     }
    } while (0);
    $conv422 = $cond324 - $q1_Q10$0 << 16 >> 16;
    $shr427 = (Math_imul($conv422, $conv422) | 0) + $rd1_Q10$0 >> 10;
    $conv430 = $cond324 - $q2_Q10$0 << 16 >> 16;
    $shr435 = (Math_imul($conv430, $conv430) | 0) + $rd2_Q10$0 >> 10;
    $cmp436 = ($shr427 | 0) < ($shr435 | 0);
    $65 = HEAP32[$psDelDec + ($k$037 * 1300 | 0) + 1296 >> 2] | 0;
    $spec$select68 = $cmp436 ? $q1_Q10$0 : $q2_Q10$0;
    $spec$select69 = $cmp436 ? $q2_Q10$0 : $q1_Q10$0;
    HEAP32[$vla + ($k$037 * 56 | 0) + 4 >> 2] = ($cmp436 ? $shr427 : $shr435) + $65;
    HEAP32[$vla + ($k$037 * 56 | 0) + 32 >> 2] = ($cmp436 ? $shr435 : $shr427) + $65;
    HEAP32[$vla + ($k$037 * 56 | 0) >> 2] = $spec$select68;
    HEAP32[$vla + ($k$037 * 56 | 0) + 28 >> 2] = $spec$select69;
    $shl465 = $spec$select68 << 4;
    $add472 = ($cmp312 ? 0 - $shl465 | 0 : $shl465) + $LTP_pred_Q14$0 | 0;
    $add473 = $add472 + $shl116 | 0;
    $shl475 = $61 << 4;
    $sub476 = $add473 - $shl475 | 0;
    HEAP32[$vla + ($k$037 * 56 | 0) + 16 >> 2] = $sub476;
    $sub481 = $sub476 - $shl277 | 0;
    HEAP32[$vla + ($k$037 * 56 | 0) + 20 >> 2] = $sub481 - $shl302;
    HEAP32[$vla + ($k$037 * 56 | 0) + 12 >> 2] = $sub481;
    HEAP32[$vla + ($k$037 * 56 | 0) + 24 >> 2] = $add472;
    HEAP32[$vla + ($k$037 * 56 | 0) + 8 >> 2] = $add473;
    $shl493 = $spec$select69 << 4;
    $add500 = ($cmp312 ? 0 - $shl493 | 0 : $shl493) + $LTP_pred_Q14$0 | 0;
    $add501 = $add500 + $shl116 | 0;
    $sub504 = $add501 - $shl475 | 0;
    HEAP32[$vla + ($k$037 * 56 | 0) + 44 >> 2] = $sub504;
    $sub509 = $sub504 - $shl277 | 0;
    HEAP32[$vla + ($k$037 * 56 | 0) + 48 >> 2] = $sub509 - $shl302;
    HEAP32[$vla + ($k$037 * 56 | 0) + 40 >> 2] = $sub509;
    HEAP32[$vla + ($k$037 * 56 | 0) + 52 >> 2] = $add500;
    HEAP32[$vla + ($k$037 * 56 | 0) + 36 >> 2] = $add501;
    $k$037 = $k$037 + 1 | 0;
   } while (($k$037 | 0) < ($nStatesDelayedDecision | 0));
   $rem = ($59 + -1 | 0) % 40 | 0;
   $spec$select20 = ($rem | 0) < 0 ? $rem + 40 | 0 : $rem;
   HEAP32[$smpl_buf_idx >> 2] = $spec$select20;
   $rem528 = ($spec$select20 + $decisionDelay | 0) % 40 | 0;
   if ($cmp53338) {
    $RDmin_Q10$039 = HEAP32[$RD_Q10531 >> 2] | 0;
    $Winner_ind$040 = 0;
    $k$141 = 1;
    while (1) {
     $71 = HEAP32[$vla + ($k$141 * 56 | 0) + 4 >> 2] | 0;
     $cmp539 = ($71 | 0) < ($RDmin_Q10$039 | 0);
     $spec$select22 = $cmp539 ? $k$141 : $Winner_ind$040;
     $k$141 = $k$141 + 1 | 0;
     if (($k$141 | 0) == ($nStatesDelayedDecision | 0)) {
      $Winner_ind$0$lcssa = $spec$select22;
      break;
     } else {
      $RDmin_Q10$039 = $cmp539 ? $71 : $RDmin_Q10$039;
      $Winner_ind$040 = $spec$select22;
     }
    }
   } else $Winner_ind$0$lcssa = 0;
   $72 = HEAP32[$psDelDec + ($Winner_ind$0$lcssa * 1300 | 0) + 384 + ($rem528 << 2) >> 2] | 0;
   $k$244 = 0;
   do {
    if ((HEAP32[$psDelDec + ($k$244 * 1300 | 0) + 384 + ($rem528 << 2) >> 2] | 0) != ($72 | 0)) {
     $RD_Q10563 = $vla + ($k$244 * 56 | 0) + 4 | 0;
     HEAP32[$RD_Q10563 >> 2] = (HEAP32[$RD_Q10563 >> 2] | 0) + 134217727;
     $RD_Q10570 = $vla + ($k$244 * 56 | 0) + 32 | 0;
     HEAP32[$RD_Q10570 >> 2] = (HEAP32[$RD_Q10570 >> 2] | 0) + 134217727;
    }
    $k$244 = $k$244 + 1 | 0;
   } while (($k$244 | 0) != ($nStatesDelayedDecision | 0));
   $76 = HEAP32[$RD_Q10531 >> 2] | 0;
   $77 = HEAP32[$RD_Q10584 >> 2] | 0;
   if ($cmp53338) {
    $RDmax_Q10$049 = $76;
    $RDmax_ind$046 = 0;
    $RDmin_Q10$248 = $77;
    $RDmin_ind$047 = 0;
    $k$350 = 1;
    while (1) {
     $78 = HEAP32[$vla + ($k$350 * 56 | 0) + 4 >> 2] | 0;
     $cmp592 = ($78 | 0) > ($RDmax_Q10$049 | 0);
     $spec$select23 = $cmp592 ? $k$350 : $RDmax_ind$046;
     $spec$select24 = $cmp592 ? $78 : $RDmax_Q10$049;
     $79 = HEAP32[$vla + ($k$350 * 56 | 0) + 32 >> 2] | 0;
     $cmp602 = ($79 | 0) < ($RDmin_Q10$248 | 0);
     $RDmin_ind$1 = $cmp602 ? $k$350 : $RDmin_ind$047;
     $RDmin_Q10$3 = $cmp602 ? $79 : $RDmin_Q10$248;
     $k$350 = $k$350 + 1 | 0;
     if (($k$350 | 0) == ($nStatesDelayedDecision | 0)) {
      $RDmax_Q10$0$lcssa = $spec$select24;
      $RDmax_ind$0$lcssa = $spec$select23;
      $RDmin_Q10$2$lcssa = $RDmin_Q10$3;
      $RDmin_ind$0$lcssa = $RDmin_ind$1;
      break;
     } else {
      $RDmax_Q10$049 = $spec$select24;
      $RDmax_ind$046 = $spec$select23;
      $RDmin_Q10$248 = $RDmin_Q10$3;
      $RDmin_ind$047 = $RDmin_ind$1;
     }
    }
   } else {
    $RDmax_Q10$0$lcssa = $76;
    $RDmax_ind$0$lcssa = 0;
    $RDmin_Q10$2$lcssa = $77;
    $RDmin_ind$0$lcssa = 0;
   }
   if (($RDmin_Q10$2$lcssa | 0) < ($RDmax_Q10$0$lcssa | 0)) {
    $arrayidx623 = $vla + ($RDmin_ind$0$lcssa * 56 | 0) + 28 | 0;
    $arrayidx621 = $vla + ($RDmax_ind$0$lcssa * 56 | 0) | 0;
    _memcpy($psDelDec + ($RDmax_ind$0$lcssa * 1300 | 0) + ($i$060 << 2) | 0, $psDelDec + ($RDmin_ind$0$lcssa * 1300 | 0) + ($i$060 << 2) | 0, 1300 - ($i$060 << 2) | 0) | 0;
    HEAP32[$arrayidx621 >> 2] = HEAP32[$arrayidx623 >> 2];
    HEAP32[$arrayidx621 + 4 >> 2] = HEAP32[$arrayidx623 + 4 >> 2];
    HEAP32[$arrayidx621 + 8 >> 2] = HEAP32[$arrayidx623 + 8 >> 2];
    HEAP32[$arrayidx621 + 12 >> 2] = HEAP32[$arrayidx623 + 12 >> 2];
    HEAP32[$arrayidx621 + 16 >> 2] = HEAP32[$arrayidx623 + 16 >> 2];
    HEAP32[$arrayidx621 + 20 >> 2] = HEAP32[$arrayidx623 + 20 >> 2];
    HEAP32[$arrayidx621 + 24 >> 2] = HEAP32[$arrayidx623 + 24 >> 2];
   }
   if (!($cmp626 & ($i$060 | 0) < ($decisionDelay | 0))) {
    $sub637 = $i$060 - $decisionDelay | 0;
    HEAP8[$pulses + $sub637 >> 0] = (((HEAP32[$psDelDec + ($Winner_ind$0$lcssa * 1300 | 0) + 544 + ($rem528 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
    $83 = HEAP32[$psDelDec + ($Winner_ind$0$lcssa * 1300 | 0) + 704 + ($rem528 << 2) >> 2] | 0;
    $84 = HEAP32[$delayedGain_Q10 + ($rem528 << 2) >> 2] | 0;
    $conv643 = $84 << 16 >> 16;
    $add661 = ((Math_imul($conv643, $83 & 65535) | 0) >> 16) + (Math_imul($conv643, $83 >> 16) | 0) + (Math_imul(($84 >> 15) + 1 >> 1, $83) | 0) | 0;
    HEAP16[$xq + ($sub637 << 1) >> 1] = ($add661 | 0) > 8388479 ? 32767 : ($add661 | 0) < -8388736 ? -32768 : (($add661 >>> 7) + 1 | 0) >>> 1 & 65535;
    HEAP32[$NSQ + 1280 + ((HEAP32[$sLTP_shp_buf_idx >> 2] | 0) - $decisionDelay << 2) >> 2] = HEAP32[$psDelDec + ($Winner_ind$0$lcssa * 1300 | 0) + 1024 + ($rem528 << 2) >> 2];
    HEAP32[$sLTP_Q15 + ((HEAP32[$sLTP_buf_idx >> 2] | 0) - $decisionDelay << 2) >> 2] = HEAP32[$psDelDec + ($Winner_ind$0$lcssa * 1300 | 0) + 864 + ($rem528 << 2) >> 2];
   }
   HEAP32[$sLTP_shp_buf_idx >> 2] = (HEAP32[$sLTP_shp_buf_idx >> 2] | 0) + 1;
   HEAP32[$sLTP_buf_idx >> 2] = (HEAP32[$sLTP_buf_idx >> 2] | 0) + 1;
   $add762 = $i$060 + 16 | 0;
   $k$456 = 0;
   do {
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 1280 >> 2] = HEAP32[$vla + ($k$456 * 56 | 0) + 12 >> 2];
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 1284 >> 2] = HEAP32[$vla + ($k$456 * 56 | 0) + 16 >> 2];
    $97 = HEAP32[$vla + ($k$456 * 56 | 0) + 8 >> 2] | 0;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + ($add762 << 2) >> 2] = $97;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 704 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = $97;
    $99 = HEAP32[$vla + ($k$456 * 56 | 0) >> 2] | 0;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 544 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = $99;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 864 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = HEAP32[$vla + ($k$456 * 56 | 0) + 24 >> 2] << 1;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 1024 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = HEAP32[$vla + ($k$456 * 56 | 0) + 20 >> 2];
    $Seed777 = $psDelDec + ($k$456 * 1300 | 0) + 1288 | 0;
    $add782 = (HEAP32[$Seed777 >> 2] | 0) + (($99 >> 9) + 1 >> 1) | 0;
    HEAP32[$Seed777 >> 2] = $add782;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 384 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = $add782;
    HEAP32[$psDelDec + ($k$456 * 1300 | 0) + 1296 >> 2] = HEAP32[$vla + ($k$456 * 56 | 0) + 4 >> 2];
    $k$456 = $k$456 + 1 | 0;
   } while (($k$456 | 0) != ($nStatesDelayedDecision | 0));
   HEAP32[$delayedGain_Q10 + (HEAP32[$smpl_buf_idx >> 2] << 2) >> 2] = $shr;
   $i$060 = $i$060 + 1 | 0;
   if (($i$060 | 0) >= ($length | 0)) break L4; else {
    $pred_lag_ptr$058 = $pred_lag_ptr$1;
    $shp_lag_ptr$059 = $shp_lag_ptr$1;
   }
  }
  _celt_fatal(51728, 51664, 422);
 } while (0);
 $k$530 = 0;
 do {
  dest = $psDelDec + ($k$530 * 1300 | 0) | 0;
  src = $psDelDec + ($k$530 * 1300 | 0) + ($length << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $k$530 = $k$530 + 1 | 0;
 } while (($k$530 | 0) != ($nStatesDelayedDecision | 0));
 STACKTOP = sp;
 return;
}

function _silk_VAD_GetSA_Q8_c($psEncC, $pIn) {
 $psEncC = $psEncC | 0;
 $pIn = $pIn | 0;
 var $$sink304 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $112 = 0, $114 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $24 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $HPstate = 0, $NrgToNoiseRatio_Q8 = 0, $SA_Q15$0 = 0, $X_offset = 0, $Xnrg = 0, $add = 0, $add101$us = 0, $add101$us$1 = 0, $add101$us$2 = 0, $add119$us$1 = 0, $add119$us$2 = 0, $add166 = 0, $add18 = 0, $add21 = 0, $add30$1$i = 0, $add30$2$i = 0, $add30$3$i = 0, $add30$i = 0, $add329 = 0, $add329$1 = 0, $add329$2 = 0, $add329$3 = 0, $add6$1$i = 0, $add6$2$i = 0, $add6$3$i = 0, $add6$i = 0, $add70$1$i = 0, $add70$2$i = 0, $add70$3$i = 0, $add70$i = 0, $and$i$i = 0, $and$i$i101 = 0, $and$i$i153 = 0, $and$i$i205 = 0, $and$i$i49 = 0, $and9$i262 = 0, $arrayidx$1$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$i = 0, $arrayidx310 = 0, $arrayidx310$1 = 0, $arrayidx310$2 = 0, $arrayidx310$3 = 0, $arrayidx340$3 = 0, $arrayidx35 = 0, $arrayidx46 = 0, $arrayidx54$1$i = 0, $arrayidx54$2$i = 0, $arrayidx54$3$i = 0, $arrayidx54$i = 0, $arrayidx73 = 0, $arrayidx74 = 0, $b$0291 = 0, $b$1281 = 0, $cmp$i$i$i238 = 0, $cmp141 = 0, $coef$0$1$i = 0, $coef$0$2$i = 0, $coef$0$3$i = 0, $coef$0$i = 0, $cond81$1$i = 0, $cond81$2$i = 0, $cond81$3$i = 0, $cond81$i = 0, $conv188$pre$phiZ2D = 0, $conv19$1$i = 0, $conv19$2$i = 0, $conv19$3$i = 0, $conv19$i = 0, $conv257 = 0, $conv37 = 0, $conv59$1$i = 0, $conv59$2$i = 0, $conv59$3$i = 0, $conv59$i = 0, $counter$i = 0, $div11$1$i = 0, $div11$2$i = 0, $div11$3$i = 0, $div11$i = 0, $div155 = 0, $div204 = 0, $div75$1$i = 0, $div75$2$i = 0, $div75$3$i = 0, $div75$i = 0, $frame_length = 0, $i$0293 = 0, $i$1285$us = 0, $i$1285$us$1 = 0, $i$1285$us$2 = 0, $i$1285$us$3 = 0, $inc202 = 0, $input_tilt$0283 = 0, $input_tilt$1 = 0, $min_coef$0$i = 0, $mul175 = 0, $phitmp274 = 0, $phitmp275 = 0, $phitmp276 = 0, $reass$mul = 0, $retval$0$i = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i100 = 0, $retval$0$i$i$i152 = 0, $retval$0$i$i$i16 = 0, $retval$0$i$i$i184 = 0, $retval$0$i$i$i204 = 0, $retval$0$i$i$i218 = 0, $retval$0$i$i$i252 = 0, $retval$0$i$i$i48 = 0, $retval$0$i135 = 0, $retval$0$i187 = 0, $retval$0$i239 = 0, $retval$0$i267 = 0, $retval$0$i32 = 0, $retval$0$i83 = 0, $sext158 = 0, $shl252 = 0, $shr = 0, $shr$i115 = 0, $shr$i167 = 0, $shr$i219 = 0, $shr$i245 = 0, $shr$i25 = 0, $shr$i63 = 0, $shr11 = 0, $shr13 = 0, $shr1312$i = 0, $shr1312$i126 = 0, $shr1312$i178 = 0, $shr1312$i230 = 0, $shr1312$i256 = 0, $shr1312$i74 = 0, $shr268 = 0, $shr3$i = 0, $shr3$i189 = 0, $shr3$i257 = 0, $shr338 = 0, $shr338$1 = 0, $shr338$2 = 0, $shr338$3 = 0, $shr36 = 0, $shr4$i258 = 0, $shr71 = 0, $shr72 = 0, $shr88$us = 0, $shr88$us$1 = 0, $shr88$us$2 = 0, $shr88$us$3 = 0, $spec$select$1$i = 0, $spec$select$2$i = 0, $spec$select$3$i = 0, $spec$select$i = 0, $spec$select162 = 0, $spec$select163 = 0, $sub = 0, $sub$1$i = 0, $sub$2$i = 0, $sub$3$i = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i$i$i138 = 0, $sub$i$i$i169 = 0, $sub$i$i$i190 = 0, $sub$i$i$i2 = 0, $sub$i$i$i237 = 0, $sub$i$i$i34 = 0, $sub$i$i$i86 = 0, $sub$i$i1 = 0, $sub$i$i137 = 0, $sub$i$i168 = 0, $sub$i$i189 = 0, $sub$i$i236 = 0, $sub$i$i33 = 0, $sub$i$i85 = 0, $sub$i112 = 0, $sub$i164 = 0, $sub$i216 = 0, $sub$i23 = 0, $sub$i242275 = 0, $sub$i60 = 0, $sub135 = 0, $sub314 = 0, $sub314$1 = 0, $sub314$2 = 0, $sub314$3 = 0, $sub70 = 0, $sumSquared$1$lcssa = 0, $sumSquared$2286$us = 0, $sumSquared$2286$us$1 = 0, $sumSquared$2286$us$2 = 0, $sumSquared$2286$us$3 = 0, $sumSquared$3282 = 0, $sumSquared$4 = 0, $vla = 0, label = 0, sp = 0, $5$looptemp = 0, $i$0293$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $Xnrg = sp + 32 | 0;
 $NrgToNoiseRatio_Q8 = sp + 16 | 0;
 $X_offset = sp;
 $frame_length = $psEncC + 4584 | 0;
 $0 = HEAP32[$frame_length >> 2] | 0;
 if (($0 | 0) >= 321) _celt_fatal(51967, 52026, 104);
 $shr = $0 >> 3;
 if (($0 | 0) != ($0 & -8 | 0)) _celt_fatal(52037, 52026, 106);
 $shr11 = $0 >> 1;
 $shr13 = $0 >> 2;
 HEAP32[$X_offset >> 2] = 0;
 $add = $shr + $shr13 | 0;
 HEAP32[$X_offset + 4 >> 2] = $add;
 $add18 = $add + $shr | 0;
 HEAP32[$X_offset + 8 >> 2] = $add18;
 $add21 = $add18 + $shr13 | 0;
 HEAP32[$X_offset + 12 >> 2] = $add21;
 $1 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add21 + $shr11 << 1) | 0) + 15 & -16) | 0;
 _silk_ana_filt_bank_1($pIn, $psEncC + 36 | 0, $vla, $vla + ($add21 << 1) | 0, HEAP32[$frame_length >> 2] | 0);
 _silk_ana_filt_bank_1($vla, $psEncC + 44 | 0, $vla, $vla + ($add18 << 1) | 0, $shr11);
 _silk_ana_filt_bank_1($vla, $psEncC + 52 | 0, $vla, $vla + ($add << 1) | 0, $shr13);
 $sub = $shr + -1 | 0;
 $arrayidx35 = $vla + ($sub << 1) | 0;
 $shr36 = HEAP16[$arrayidx35 >> 1] >> 1;
 $conv37 = $shr36 & 65535;
 HEAP16[$arrayidx35 >> 1] = $conv37;
 if (($0 | 0) > 15) {
  $5 = $shr36;
  $i$0293 = $sub;
  do {
   $i$0293$looptemp = $i$0293;
   $i$0293 = $i$0293 + -1 | 0;
   $arrayidx46 = $vla + ($i$0293 << 1) | 0;
   $5$looptemp = $5;
   $5 = HEAP16[$arrayidx46 >> 1] >> 1;
   HEAP16[$arrayidx46 >> 1] = $5;
   HEAP16[$vla + ($i$0293$looptemp << 1) >> 1] = $5$looptemp - $5;
  } while (($i$0293$looptemp | 0) > 1);
 }
 $HPstate = $psEncC + 92 | 0;
 HEAP16[$vla >> 1] = (HEAPU16[$vla >> 1] | 0) - (HEAPU16[$HPstate >> 1] | 0);
 HEAP16[$HPstate >> 1] = $conv37;
 $b$0291 = 0;
 do {
  $sub70 = 4 - $b$0291 | 0;
  $shr71 = HEAP32[$frame_length >> 2] >> ($sub70 >>> 0 < 3 ? $sub70 : 3);
  $shr72 = $shr71 >> 2;
  $arrayidx73 = $psEncC + 60 + ($b$0291 << 2) | 0;
  $9 = HEAP32[$arrayidx73 >> 2] | 0;
  $arrayidx74 = $Xnrg + ($b$0291 << 2) | 0;
  HEAP32[$arrayidx74 >> 2] = $9;
  if (($shr71 | 0) > 3) {
   $10 = HEAP32[$X_offset + ($b$0291 << 2) >> 2] | 0;
   $i$1285$us = 0;
   $sumSquared$2286$us = 0;
   do {
    $shr88$us = HEAP16[$vla + ($i$1285$us + $10 << 1) >> 1] >> 3;
    $sumSquared$2286$us = (Math_imul($shr88$us, $shr88$us) | 0) + $sumSquared$2286$us | 0;
    $i$1285$us = $i$1285$us + 1 | 0;
   } while (($i$1285$us | 0) < ($shr72 | 0));
   $add101$us = $9 + $sumSquared$2286$us | 0;
   $11 = $add101$us >>> 0 < 2147483647;
   $i$1285$us$1 = 0;
   $sumSquared$2286$us$1 = 0;
   do {
    $shr88$us$1 = HEAP16[$vla + ($i$1285$us$1 + $shr72 + $10 << 1) >> 1] >> 3;
    $sumSquared$2286$us$1 = (Math_imul($shr88$us$1, $shr88$us$1) | 0) + $sumSquared$2286$us$1 | 0;
    $i$1285$us$1 = $i$1285$us$1 + 1 | 0;
   } while (($i$1285$us$1 | 0) < ($shr72 | 0));
   $add101$us$1 = ($11 ? $add101$us : 2147483647) + $sumSquared$2286$us$1 | 0;
   $112 = $add101$us$1 >>> 0 < 2147483647;
   $add119$us$1 = $shr72 << 1;
   $i$1285$us$2 = 0;
   $sumSquared$2286$us$2 = 0;
   do {
    $shr88$us$2 = HEAP16[$vla + ($i$1285$us$2 + $add119$us$1 + $10 << 1) >> 1] >> 3;
    $sumSquared$2286$us$2 = (Math_imul($shr88$us$2, $shr88$us$2) | 0) + $sumSquared$2286$us$2 | 0;
    $i$1285$us$2 = $i$1285$us$2 + 1 | 0;
   } while (($i$1285$us$2 | 0) < ($shr72 | 0));
   $add101$us$2 = ($112 ? $add101$us$1 : 2147483647) + $sumSquared$2286$us$2 | 0;
   $114 = $add101$us$2 >>> 0 < 2147483647;
   $add119$us$2 = $shr72 * 3 | 0;
   $i$1285$us$3 = 0;
   $sumSquared$2286$us$3 = 0;
   do {
    $shr88$us$3 = HEAP16[$vla + ($i$1285$us$3 + $add119$us$2 + $10 << 1) >> 1] >> 3;
    $sumSquared$2286$us$3 = (Math_imul($shr88$us$3, $shr88$us$3) | 0) + $sumSquared$2286$us$3 | 0;
    $i$1285$us$3 = $i$1285$us$3 + 1 | 0;
   } while (($i$1285$us$3 | 0) < ($shr72 | 0));
   $$sink304 = ($114 ? $add101$us$2 : 2147483647) + ($sumSquared$2286$us$3 >>> 1) | 0;
   $sumSquared$1$lcssa = $sumSquared$2286$us$3;
  } else {
   $$sink304 = $9;
   $sumSquared$1$lcssa = 0;
  }
  HEAP32[$arrayidx74 >> 2] = $$sink304 >>> 0 < 2147483647 ? $$sink304 : 2147483647;
  HEAP32[$arrayidx73 >> 2] = $sumSquared$1$lcssa;
  $b$0291 = $b$0291 + 1 | 0;
 } while (($b$0291 | 0) != 4);
 $counter$i = $psEncC + 144 | 0;
 $14 = HEAP32[$counter$i >> 2] | 0;
 if (($14 | 0) < 1e3) {
  HEAP32[$counter$i >> 2] = $14 + 1;
  $min_coef$0$i = 32767 / (($14 >> 4) + 1 | 0) | 0;
 } else $min_coef$0$i = 0;
 $arrayidx$i = $psEncC + 96 | 0;
 $15 = HEAP32[$arrayidx$i >> 2] | 0;
 $16 = HEAP32[$Xnrg >> 2] | 0;
 $add6$i = (HEAP32[$psEncC + 128 >> 2] | 0) + $16 | 0;
 $spec$select$i = $add6$i >>> 0 < 2147483647 ? $add6$i : 2147483647;
 $div11$i = 2147483647 / ($spec$select$i >>> 0) | 0;
 if (($spec$select$i | 0) > ($15 << 3 | 0)) $coef$0$i = 128; else if (($spec$select$i | 0) < ($15 | 0)) $coef$0$i = 1024; else {
  $conv19$i = $15 << 16 >> 16;
  $add30$i = (Math_imul($div11$i >>> 16, $conv19$i) | 0) + (Math_imul($div11$i, ($15 >> 15) + 1 >> 1) | 0) + ((Math_imul($div11$i & 65535, $conv19$i) | 0) >> 16) | 0;
  $coef$0$i = $add30$i >> 16 << 11 | $add30$i >>> 5 & 2047;
 }
 $arrayidx54$i = $psEncC + 112 | 0;
 $22 = HEAP32[$arrayidx54$i >> 2] | 0;
 $sub$i = $div11$i - $22 | 0;
 $conv59$i = (($coef$0$i | 0) > ($min_coef$0$i | 0) ? $coef$0$i : $min_coef$0$i) << 16 >> 16;
 $add70$i = (Math_imul($conv59$i, $sub$i >> 16) | 0) + $22 + ((Math_imul($conv59$i, $sub$i & 65535) | 0) >> 16) | 0;
 HEAP32[$arrayidx54$i >> 2] = $add70$i;
 $div75$i = 2147483647 / ($add70$i | 0) | 0;
 $cond81$i = ($div75$i | 0) < 16777215 ? $div75$i : 16777215;
 HEAP32[$arrayidx$i >> 2] = $cond81$i;
 $arrayidx$1$i = $psEncC + 100 | 0;
 $23 = HEAP32[$arrayidx$1$i >> 2] | 0;
 $24 = HEAP32[$Xnrg + 4 >> 2] | 0;
 $add6$1$i = (HEAP32[$psEncC + 132 >> 2] | 0) + $24 | 0;
 $spec$select$1$i = $add6$1$i >>> 0 < 2147483647 ? $add6$1$i : 2147483647;
 $div11$1$i = 2147483647 / ($spec$select$1$i >>> 0) | 0;
 if (($spec$select$1$i | 0) > ($23 << 3 | 0)) $coef$0$1$i = 128; else if (($spec$select$1$i | 0) < ($23 | 0)) $coef$0$1$i = 1024; else {
  $conv19$1$i = $23 << 16 >> 16;
  $add30$1$i = (Math_imul($div11$1$i >>> 16, $conv19$1$i) | 0) + (Math_imul($div11$1$i, ($23 >> 15) + 1 >> 1) | 0) + ((Math_imul($div11$1$i & 65535, $conv19$1$i) | 0) >> 16) | 0;
  $coef$0$1$i = $add30$1$i >> 16 << 11 | $add30$1$i >>> 5 & 2047;
 }
 $arrayidx54$1$i = $psEncC + 116 | 0;
 $30 = HEAP32[$arrayidx54$1$i >> 2] | 0;
 $sub$1$i = $div11$1$i - $30 | 0;
 $conv59$1$i = (($coef$0$1$i | 0) > ($min_coef$0$i | 0) ? $coef$0$1$i : $min_coef$0$i) << 16 >> 16;
 $add70$1$i = (Math_imul($conv59$1$i, $sub$1$i >> 16) | 0) + $30 + ((Math_imul($conv59$1$i, $sub$1$i & 65535) | 0) >> 16) | 0;
 HEAP32[$arrayidx54$1$i >> 2] = $add70$1$i;
 $div75$1$i = 2147483647 / ($add70$1$i | 0) | 0;
 $cond81$1$i = ($div75$1$i | 0) < 16777215 ? $div75$1$i : 16777215;
 HEAP32[$arrayidx$1$i >> 2] = $cond81$1$i;
 $arrayidx$2$i = $psEncC + 104 | 0;
 $31 = HEAP32[$arrayidx$2$i >> 2] | 0;
 $32 = HEAP32[$Xnrg + 8 >> 2] | 0;
 $add6$2$i = (HEAP32[$psEncC + 136 >> 2] | 0) + $32 | 0;
 $spec$select$2$i = $add6$2$i >>> 0 < 2147483647 ? $add6$2$i : 2147483647;
 $div11$2$i = 2147483647 / ($spec$select$2$i >>> 0) | 0;
 if (($spec$select$2$i | 0) > ($31 << 3 | 0)) $coef$0$2$i = 128; else if (($spec$select$2$i | 0) < ($31 | 0)) $coef$0$2$i = 1024; else {
  $conv19$2$i = $31 << 16 >> 16;
  $add30$2$i = (Math_imul($div11$2$i >>> 16, $conv19$2$i) | 0) + (Math_imul($div11$2$i, ($31 >> 15) + 1 >> 1) | 0) + ((Math_imul($div11$2$i & 65535, $conv19$2$i) | 0) >> 16) | 0;
  $coef$0$2$i = $add30$2$i >> 16 << 11 | $add30$2$i >>> 5 & 2047;
 }
 $arrayidx54$2$i = $psEncC + 120 | 0;
 $38 = HEAP32[$arrayidx54$2$i >> 2] | 0;
 $sub$2$i = $div11$2$i - $38 | 0;
 $conv59$2$i = (($coef$0$2$i | 0) > ($min_coef$0$i | 0) ? $coef$0$2$i : $min_coef$0$i) << 16 >> 16;
 $add70$2$i = (Math_imul($conv59$2$i, $sub$2$i >> 16) | 0) + $38 + ((Math_imul($conv59$2$i, $sub$2$i & 65535) | 0) >> 16) | 0;
 HEAP32[$arrayidx54$2$i >> 2] = $add70$2$i;
 $div75$2$i = 2147483647 / ($add70$2$i | 0) | 0;
 $cond81$2$i = ($div75$2$i | 0) < 16777215 ? $div75$2$i : 16777215;
 HEAP32[$arrayidx$2$i >> 2] = $cond81$2$i;
 $arrayidx$3$i = $psEncC + 108 | 0;
 $39 = HEAP32[$arrayidx$3$i >> 2] | 0;
 $40 = HEAP32[$Xnrg + 12 >> 2] | 0;
 $add6$3$i = (HEAP32[$psEncC + 140 >> 2] | 0) + $40 | 0;
 $spec$select$3$i = $add6$3$i >>> 0 < 2147483647 ? $add6$3$i : 2147483647;
 $div11$3$i = 2147483647 / ($spec$select$3$i >>> 0) | 0;
 if (($spec$select$3$i | 0) > ($39 << 3 | 0)) $coef$0$3$i = 128; else if (($spec$select$3$i | 0) < ($39 | 0)) $coef$0$3$i = 1024; else {
  $conv19$3$i = $39 << 16 >> 16;
  $add30$3$i = (Math_imul($div11$3$i >>> 16, $conv19$3$i) | 0) + (Math_imul($div11$3$i, ($39 >> 15) + 1 >> 1) | 0) + ((Math_imul($div11$3$i & 65535, $conv19$3$i) | 0) >> 16) | 0;
  $coef$0$3$i = $add30$3$i >> 16 << 11 | $add30$3$i >>> 5 & 2047;
 }
 $arrayidx54$3$i = $psEncC + 124 | 0;
 $46 = HEAP32[$arrayidx54$3$i >> 2] | 0;
 $sub$3$i = $div11$3$i - $46 | 0;
 $conv59$3$i = (($coef$0$3$i | 0) > ($min_coef$0$i | 0) ? $coef$0$3$i : $min_coef$0$i) << 16 >> 16;
 $add70$3$i = (Math_imul($conv59$3$i, $sub$3$i >> 16) | 0) + $46 + ((Math_imul($conv59$3$i, $sub$3$i & 65535) | 0) >> 16) | 0;
 HEAP32[$arrayidx54$3$i >> 2] = $add70$3$i;
 $div75$3$i = 2147483647 / ($add70$3$i | 0) | 0;
 $cond81$3$i = ($div75$3$i | 0) < 16777215 ? $div75$3$i : 16777215;
 HEAP32[$arrayidx$3$i >> 2] = $cond81$3$i;
 $47 = $16;
 $48 = $cond81$i;
 $b$1281 = 0;
 $input_tilt$0283 = 0;
 $sumSquared$3282 = 0;
 while (1) {
  $sub135 = $47 - $48 | 0;
  if (($sub135 | 0) > 0) {
   $cmp141 = $47 >>> 0 < 8388608;
   $div155 = (($cmp141 ? $47 << 8 : $47) | 0) / (($cmp141 ? $48 : $48 >> 8) + 1 | 0) | 0;
   HEAP32[$NrgToNoiseRatio_Q8 + ($b$1281 << 2) >> 2] = $div155;
   $50 = Math_clz32($div155 | 0) | 0;
   $sub$i$i1 = 24 - $50 | 0;
   $sub$i$i$i2 = 0 - $sub$i$i1 | 0;
   do if (!$sub$i$i1) $retval$0$i$i$i16 = $div155; else if (($sub$i$i1 | 0) < 0) {
    $retval$0$i$i$i16 = $div155 >>> ($sub$i$i1 + 32 | 0) | $div155 << $sub$i$i$i2;
    break;
   } else {
    $retval$0$i$i$i16 = $div155 << 32 - $sub$i$i1 | $div155 >>> $sub$i$i1;
    break;
   } while (0);
   $and$i$i = $retval$0$i$i$i16 & 127;
   $sext158 = ((3968 - ($50 << 7) | $and$i$i) << 16) + (Math_imul($and$i$i * 179 | 0, 128 - $and$i$i | 0) | 0) + -67108864 >> 16;
   $add166 = (Math_imul($sext158, $sext158) | 0) + $sumSquared$3282 | 0;
   if (($sub135 | 0) < 1048576) {
    $52 = Math_clz32($sub135 | 0) | 0;
    $sub$i$i236 = 24 - $52 | 0;
    $sub$i$i$i237 = 0 - $sub$i$i236 | 0;
    $cmp$i$i$i238 = ($sub$i$i236 | 0) == 0;
    do if ($cmp$i$i$i238) $retval$0$i$i$i252 = $sub135; else if (($sub$i$i236 | 0) < 0) {
     $retval$0$i$i$i252 = $sub135 >>> ($sub$i$i236 + 32 | 0) | $sub135 << $sub$i$i$i237;
     break;
    } else {
     $retval$0$i$i$i252 = $sub135 << 32 - $sub$i$i236 | $sub135 >>> $sub$i$i236;
     break;
    } while (0);
    $shr3$i257 = (($52 & 1 | 0) == 0 ? 46214 : 32768) >>> ($52 >>> 1);
    $shr4$i258 = $shr3$i257 >> 16;
    $53 = (Math_imul($retval$0$i$i$i252 & 127, 13959168) | 0) >>> 16;
    $and9$i262 = $shr3$i257 & 65535;
    $mul175 = Math_imul((Math_imul($53, $shr4$i258) | 0) + $shr3$i257 + ((Math_imul($53, $and9$i262) | 0) >>> 16) << 6 >> 16, $sext158) | 0;
    do if ($cmp$i$i$i238) $retval$0$i$i$i218 = $sub135; else if (($sub$i$i236 | 0) < 0) {
     $retval$0$i$i$i218 = $sub135 >>> ($sub$i$i236 + 32 | 0) | $sub135 << $sub$i$i$i237;
     break;
    } else {
     $retval$0$i$i$i218 = $sub135 << 32 - $sub$i$i236 | $sub135 >>> $sub$i$i236;
     break;
    } while (0);
    $55 = (Math_imul($retval$0$i$i$i218 & 127, 13959168) | 0) >>> 16;
    $conv188$pre$phiZ2D = (Math_imul((Math_imul($55, $shr4$i258) | 0) + $shr3$i257 + ((Math_imul($55, $and9$i262) | 0) >>> 16) << 6 & 65472, $sext158) | 0) + ($mul175 << 16) >> 16;
   } else $conv188$pre$phiZ2D = $sext158;
   $58 = HEAP32[26272 + ($b$1281 << 2) >> 2] | 0;
   $input_tilt$1 = (Math_imul($58 >> 16, $conv188$pre$phiZ2D) | 0) + $input_tilt$0283 + ((Math_imul($58 & 65535, $conv188$pre$phiZ2D) | 0) >> 16) | 0;
   $sumSquared$4 = $add166;
  } else {
   HEAP32[$NrgToNoiseRatio_Q8 + ($b$1281 << 2) >> 2] = 256;
   $input_tilt$1 = $input_tilt$0283;
   $sumSquared$4 = $sumSquared$3282;
  }
  $inc202 = $b$1281 + 1 | 0;
  if (($inc202 | 0) == 4) break;
  $47 = HEAP32[$Xnrg + ($inc202 << 2) >> 2] | 0;
  $48 = HEAP32[$psEncC + 96 + ($inc202 << 2) >> 2] | 0;
  $b$1281 = $inc202;
  $input_tilt$0283 = $input_tilt$1;
  $sumSquared$3282 = $sumSquared$4;
 }
 $div204 = ($sumSquared$4 | 0) / 4 | 0;
 do if (($sumSquared$4 | 0) < 4) {
  $sub$i242275 = 128;
  label = 55;
 } else {
  $59 = Math_clz32($div204 | 0) | 0;
  $sub$i$i168 = 24 - $59 | 0;
  $sub$i$i$i169 = 0 - $sub$i$i168 | 0;
  do if (!$sub$i$i168) $retval$0$i$i$i184 = $div204; else if (($sub$i$i168 | 0) < 0) {
   $retval$0$i$i$i184 = $div204 >>> ($sub$i$i168 + 32 | 0) | $div204 << $sub$i$i$i169;
   break;
  } else {
   $retval$0$i$i$i184 = $div204 << 32 - $sub$i$i168 | $div204 >>> $sub$i$i168;
   break;
  } while (0);
  $shr3$i189 = (($59 & 1 | 0) == 0 ? 46214 : 32768) >>> ($59 >>> 1);
  $60 = (Math_imul($retval$0$i$i$i184 & 127, 13959168) | 0) >>> 16;
  $phitmp274 = (((Math_imul($60, $shr3$i189 >> 16) | 0) + $shr3$i189 + ((Math_imul($60, $shr3$i189 & 65535) | 0) >>> 16) | 0) * 196608 >> 16) * 45e3 | 0;
  $phitmp275 = $phitmp274 >> 16;
  $phitmp276 = $phitmp275 + -128 | 0;
  if (($phitmp274 | 0) < 8388608) if (($phitmp274 | 0) < -4128768) {
   $retval$0$i267 = 0;
   break;
  } else {
   $sub$i242275 = 128 - $phitmp275 | 0;
   label = 55;
   break;
  }
  if (($phitmp274 | 0) > 20971519) $retval$0$i267 = 32767; else {
   $shr1312$i256 = $phitmp276 >>> 5;
   $retval$0$i267 = (Math_imul(HEAP32[27712 + ($shr1312$i256 << 2) >> 2] << 16 >> 16, $phitmp276 & 31) | 0) + (HEAP32[27744 + ($shr1312$i256 << 2) >> 2] | 0) | 0;
  }
 } while (0);
 if ((label | 0) == 55) {
  $shr$i245 = $sub$i242275 >> 5;
  $retval$0$i267 = (HEAP32[27680 + ($shr$i245 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i245 << 2) >> 2] << 16 >> 16, $sub$i242275 & 31) | 0) | 0;
 }
 if (($input_tilt$1 | 0) < 0) {
  $sub$i216 = 0 - $input_tilt$1 | 0;
  if (($input_tilt$1 | 0) < -191) $retval$0$i239 = 0; else {
   $shr$i219 = $sub$i216 >> 5;
   $retval$0$i239 = (HEAP32[27680 + ($shr$i219 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i219 << 2) >> 2] << 16 >> 16, $sub$i216 & 31) | 0) | 0;
  }
 } else if (($input_tilt$1 | 0) > 191) $retval$0$i239 = 32767; else {
  $shr1312$i230 = $input_tilt$1 >>> 5;
  $retval$0$i239 = (Math_imul(HEAP32[27712 + ($shr1312$i230 << 2) >> 2] << 16 >> 16, $input_tilt$1 & 31) | 0) + (HEAP32[27744 + ($shr1312$i230 << 2) >> 2] | 0) | 0;
 }
 HEAP32[$psEncC + 4712 >> 2] = ($retval$0$i239 << 1) + -32768;
 $70 = HEAP32[$frame_length >> 2] | 0;
 $71 = HEAP32[$psEncC + 4576 >> 2] | 0;
 $spec$select162 = ($40 - $cond81$3$i >> 4 << 2) + ((($32 - $cond81$2$i >> 4) * 3 | 0) + (($24 - $cond81$1$i >> 4 << 1) + ($16 - $cond81$i >> 4))) >> (($70 | 0) == ($71 * 20 | 0) & 1);
 if (($spec$select162 | 0) < 1) $SA_Q15$0 = $retval$0$i267 >> 1; else if (($spec$select162 | 0) < 16384) {
  $shl252 = $spec$select162 << 16;
  if (($shl252 | 0) < 1) $retval$0$i = 32768; else {
   $72 = Math_clz32($shl252 | 0) | 0;
   $sub$i$i = 24 - $72 | 0;
   $sub$i$i$i = 0 - $sub$i$i | 0;
   do if (!$sub$i$i) $retval$0$i$i$i = $shl252; else if (($sub$i$i | 0) < 0) {
    $retval$0$i$i$i = $shl252 >>> ($sub$i$i + 32 | 0) | $shl252 << $sub$i$i$i;
    break;
   } else {
    $retval$0$i$i$i = $shl252 << 32 - $sub$i$i | $shl252 >>> $sub$i$i;
    break;
   } while (0);
   $shr3$i = (($72 & 1 | 0) == 0 ? 46214 : 32768) >>> ($72 >>> 1);
   $73 = (Math_imul($retval$0$i$i$i & 127, 13959168) | 0) >>> 16;
   $retval$0$i = $shr3$i + 32768 + (Math_imul($73, $shr3$i >> 16) | 0) + ((Math_imul($73, $shr3$i & 65535) | 0) >>> 16) | 0;
  }
  $conv257 = $retval$0$i267 << 16 >> 16;
  $SA_Q15$0 = ((Math_imul($retval$0$i & 65535, $conv257) | 0) >> 16) + (Math_imul($retval$0$i >> 16, $conv257) | 0) | 0;
 } else $SA_Q15$0 = $retval$0$i267;
 $shr268 = $SA_Q15$0 >> 7;
 HEAP32[$psEncC + 4532 >> 2] = ($shr268 | 0) < 255 ? $shr268 : 255;
 $reass$mul = Math_imul($SA_Q15$0, $SA_Q15$0 << 16 >> 16) | 0;
 $spec$select163 = $reass$mul >> (($70 | 0) == ($71 * 10 | 0) ? 21 : 20);
 $arrayidx310 = $psEncC + 76 | 0;
 $75 = HEAP32[$arrayidx310 >> 2] | 0;
 $sub314 = (HEAP32[$NrgToNoiseRatio_Q8 >> 2] | 0) - $75 | 0;
 $add329 = (Math_imul($sub314 >> 16, $spec$select163) | 0) + $75 + ((Math_imul($sub314 & 65535, $spec$select163) | 0) >> 16) | 0;
 HEAP32[$arrayidx310 >> 2] = $add329;
 $77 = Math_clz32($add329 | 0) | 0;
 $sub$i$i189 = 24 - $77 | 0;
 $sub$i$i$i190 = 0 - $sub$i$i189 | 0;
 do if (!$sub$i$i189) $retval$0$i$i$i204 = $add329; else if (($sub$i$i189 | 0) < 0) {
  $retval$0$i$i$i204 = $add329 >>> ($sub$i$i189 + 32 | 0) | $add329 << $sub$i$i$i190;
  break;
 } else {
  $retval$0$i$i$i204 = $add329 << 32 - $sub$i$i189 | $add329 >>> $sub$i$i189;
  break;
 } while (0);
 $and$i$i205 = $retval$0$i$i$i204 & 127;
 $79 = ((3968 - ($77 << 7) | $and$i$i205) + ((Math_imul($and$i$i205 * 179 | 0, 128 - $and$i$i205 | 0) | 0) >>> 16) | 0) * 3 | 0;
 $shr338 = $79 + -5120 >> 4;
 if (($79 | 0) < 5120) {
  $sub$i164 = 0 - $shr338 | 0;
  if (($79 | 0) < 2064) $retval$0$i187 = 0; else {
   $shr$i167 = $sub$i164 >> 5;
   $retval$0$i187 = (HEAP32[27680 + ($shr$i167 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i167 << 2) >> 2] << 16 >> 16, $sub$i164 & 31) | 0) | 0;
  }
 } else if (($79 | 0) > 8191) $retval$0$i187 = 32767; else {
  $shr1312$i178 = $shr338 >>> 5;
  $retval$0$i187 = (Math_imul(HEAP32[27712 + ($shr1312$i178 << 2) >> 2] << 16 >> 16, $shr338 & 31) | 0) + (HEAP32[27744 + ($shr1312$i178 << 2) >> 2] | 0) | 0;
 }
 HEAP32[$psEncC + 4696 >> 2] = $retval$0$i187;
 $arrayidx310$1 = $psEncC + 80 | 0;
 $84 = HEAP32[$arrayidx310$1 >> 2] | 0;
 $sub314$1 = (HEAP32[$NrgToNoiseRatio_Q8 + 4 >> 2] | 0) - $84 | 0;
 $add329$1 = (Math_imul($sub314$1 >> 16, $spec$select163) | 0) + $84 + ((Math_imul($sub314$1 & 65535, $spec$select163) | 0) >> 16) | 0;
 HEAP32[$arrayidx310$1 >> 2] = $add329$1;
 $86 = Math_clz32($add329$1 | 0) | 0;
 $sub$i$i137 = 24 - $86 | 0;
 $sub$i$i$i138 = 0 - $sub$i$i137 | 0;
 do if (!$sub$i$i137) $retval$0$i$i$i152 = $add329$1; else if (($sub$i$i137 | 0) < 0) {
  $retval$0$i$i$i152 = $add329$1 >>> ($sub$i$i137 + 32 | 0) | $add329$1 << $sub$i$i$i138;
  break;
 } else {
  $retval$0$i$i$i152 = $add329$1 << 32 - $sub$i$i137 | $add329$1 >>> $sub$i$i137;
  break;
 } while (0);
 $and$i$i153 = $retval$0$i$i$i152 & 127;
 $88 = ((3968 - ($86 << 7) | $and$i$i153) + ((Math_imul($and$i$i153 * 179 | 0, 128 - $and$i$i153 | 0) | 0) >>> 16) | 0) * 3 | 0;
 $shr338$1 = $88 + -5120 >> 4;
 if (($88 | 0) < 5120) {
  $sub$i112 = 0 - $shr338$1 | 0;
  if (($88 | 0) < 2064) $retval$0$i135 = 0; else {
   $shr$i115 = $sub$i112 >> 5;
   $retval$0$i135 = (HEAP32[27680 + ($shr$i115 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i115 << 2) >> 2] << 16 >> 16, $sub$i112 & 31) | 0) | 0;
  }
 } else if (($88 | 0) > 8191) $retval$0$i135 = 32767; else {
  $shr1312$i126 = $shr338$1 >>> 5;
  $retval$0$i135 = (Math_imul(HEAP32[27712 + ($shr1312$i126 << 2) >> 2] << 16 >> 16, $shr338$1 & 31) | 0) + (HEAP32[27744 + ($shr1312$i126 << 2) >> 2] | 0) | 0;
 }
 HEAP32[$psEncC + 4700 >> 2] = $retval$0$i135;
 $arrayidx310$2 = $psEncC + 84 | 0;
 $93 = HEAP32[$arrayidx310$2 >> 2] | 0;
 $sub314$2 = (HEAP32[$NrgToNoiseRatio_Q8 + 8 >> 2] | 0) - $93 | 0;
 $add329$2 = (Math_imul($sub314$2 >> 16, $spec$select163) | 0) + $93 + ((Math_imul($sub314$2 & 65535, $spec$select163) | 0) >> 16) | 0;
 HEAP32[$arrayidx310$2 >> 2] = $add329$2;
 $95 = Math_clz32($add329$2 | 0) | 0;
 $sub$i$i85 = 24 - $95 | 0;
 $sub$i$i$i86 = 0 - $sub$i$i85 | 0;
 do if (!$sub$i$i85) $retval$0$i$i$i100 = $add329$2; else if (($sub$i$i85 | 0) < 0) {
  $retval$0$i$i$i100 = $add329$2 >>> ($sub$i$i85 + 32 | 0) | $add329$2 << $sub$i$i$i86;
  break;
 } else {
  $retval$0$i$i$i100 = $add329$2 << 32 - $sub$i$i85 | $add329$2 >>> $sub$i$i85;
  break;
 } while (0);
 $and$i$i101 = $retval$0$i$i$i100 & 127;
 $97 = ((3968 - ($95 << 7) | $and$i$i101) + ((Math_imul($and$i$i101 * 179 | 0, 128 - $and$i$i101 | 0) | 0) >>> 16) | 0) * 3 | 0;
 $shr338$2 = $97 + -5120 >> 4;
 if (($97 | 0) < 5120) {
  $sub$i60 = 0 - $shr338$2 | 0;
  if (($97 | 0) < 2064) $retval$0$i83 = 0; else {
   $shr$i63 = $sub$i60 >> 5;
   $retval$0$i83 = (HEAP32[27680 + ($shr$i63 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i63 << 2) >> 2] << 16 >> 16, $sub$i60 & 31) | 0) | 0;
  }
 } else if (($97 | 0) > 8191) $retval$0$i83 = 32767; else {
  $shr1312$i74 = $shr338$2 >>> 5;
  $retval$0$i83 = (Math_imul(HEAP32[27712 + ($shr1312$i74 << 2) >> 2] << 16 >> 16, $shr338$2 & 31) | 0) + (HEAP32[27744 + ($shr1312$i74 << 2) >> 2] | 0) | 0;
 }
 HEAP32[$psEncC + 4704 >> 2] = $retval$0$i83;
 $arrayidx310$3 = $psEncC + 88 | 0;
 $102 = HEAP32[$arrayidx310$3 >> 2] | 0;
 $sub314$3 = (HEAP32[$NrgToNoiseRatio_Q8 + 12 >> 2] | 0) - $102 | 0;
 $add329$3 = (Math_imul($sub314$3 >> 16, $spec$select163) | 0) + $102 + ((Math_imul($sub314$3 & 65535, $spec$select163) | 0) >> 16) | 0;
 HEAP32[$arrayidx310$3 >> 2] = $add329$3;
 $104 = Math_clz32($add329$3 | 0) | 0;
 $sub$i$i33 = 24 - $104 | 0;
 $sub$i$i$i34 = 0 - $sub$i$i33 | 0;
 do if (!$sub$i$i33) $retval$0$i$i$i48 = $add329$3; else if (($sub$i$i33 | 0) < 0) {
  $retval$0$i$i$i48 = $add329$3 >>> ($sub$i$i33 + 32 | 0) | $add329$3 << $sub$i$i$i34;
  break;
 } else {
  $retval$0$i$i$i48 = $add329$3 << 32 - $sub$i$i33 | $add329$3 >>> $sub$i$i33;
  break;
 } while (0);
 $and$i$i49 = $retval$0$i$i$i48 & 127;
 $106 = ((3968 - ($104 << 7) | $and$i$i49) + ((Math_imul($and$i$i49 * 179 | 0, 128 - $and$i$i49 | 0) | 0) >>> 16) | 0) * 3 | 0;
 $shr338$3 = $106 + -5120 >> 4;
 if (($106 | 0) < 5120) {
  $sub$i23 = 0 - $shr338$3 | 0;
  if (($106 | 0) < 2064) {
   $retval$0$i32 = 0;
   $arrayidx340$3 = $psEncC + 4708 | 0;
   HEAP32[$arrayidx340$3 >> 2] = $retval$0$i32;
   _llvm_stackrestore($1 | 0);
   STACKTOP = sp;
   return;
  }
  $shr$i25 = $sub$i23 >> 5;
  $retval$0$i32 = (HEAP32[27680 + ($shr$i25 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($shr$i25 << 2) >> 2] << 16 >> 16, $sub$i23 & 31) | 0) | 0;
  $arrayidx340$3 = $psEncC + 4708 | 0;
  HEAP32[$arrayidx340$3 >> 2] = $retval$0$i32;
  _llvm_stackrestore($1 | 0);
  STACKTOP = sp;
  return;
 } else {
  if (($106 | 0) > 8191) {
   $retval$0$i32 = 32767;
   $arrayidx340$3 = $psEncC + 4708 | 0;
   HEAP32[$arrayidx340$3 >> 2] = $retval$0$i32;
   _llvm_stackrestore($1 | 0);
   STACKTOP = sp;
   return;
  }
  $shr1312$i = $shr338$3 >>> 5;
  $retval$0$i32 = (Math_imul(HEAP32[27712 + ($shr1312$i << 2) >> 2] << 16 >> 16, $shr338$3 & 31) | 0) + (HEAP32[27744 + ($shr1312$i << 2) >> 2] | 0) | 0;
  $arrayidx340$3 = $psEncC + 4708 | 0;
  HEAP32[$arrayidx340$3 >> 2] = $retval$0$i32;
  _llvm_stackrestore($1 | 0);
  STACKTOP = sp;
  return;
 }
}

function _compute_theta($ctx, $sctx, $X, $Y, $N, $b, $B, $B0, $LM, $stereo, $fill) {
 $ctx = $ctx | 0;
 $sctx = $sctx | 0;
 $X = $X | 0;
 $Y = $Y | 0;
 $N = $N | 0;
 $b = $b | 0;
 $B = $B | 0;
 $B0 = $B0 | 0;
 $LM = $LM | 0;
 $stereo = $stereo | 0;
 $fill = $fill | 0;
 var $$pre$phi417Z2D = 0, $$pre$phiZ2D = 0, $$pre14$i$i = 0, $$pre14$i$i137 = 0, $$pre14$i$i85 = 0, $0 = 0, $1 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $72 = 0.0, $73 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $9 = 0, $92 = 0, $97 = 0, $Emid$048$i = 0.0, $Emid$1$i = 0.0, $Eside$047$i = 0.0, $Eside$1$i = 0.0, $_val$addr$0$i = 0, $_val$addr$0$i170 = 0, $add = 0, $add$i109 = 0, $add$i20 = 0, $add$i3 = 0.0, $add118 = 0, $add120 = 0, $add160 = 0, $add195 = 0, $add204 = 0, $add214 = 0, $add250 = 0, $add254 = 0, $add259 = 0, $add26 = 0, $add264 = 0, $add4$i6 = 0.0, $add5$i111 = 0, $add6$i = 0.0, $add6$i300 = 0.0, $add6$i7 = 0.0, $add73 = 0, $arrayidx$i285 = 0, $arrayidx1$i287 = 0, $arrayidx312 = 0, $arrayidx9$i = 0, $arrayidx9$i306 = 0, $b$0$i = 0, $b$0$i167 = 0, $bshift$0$i = 0, $bshift$0$i169 = 0, $cmp$i161 = 0, $cmp$i174 = 0, $cmp$i57 = 0, $cmp123 = 0, $cmp162 = 0, $cmp211 = 0, $cmp6$i$i = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i147 = 0, $cond$i$i$i95 = 0, $cond$i126 = 0, $cond$i62 = 0, $cond$i74 = 0, $cond11$i = 0, $cond134 = 0, $cond173 = 0, $cond185 = 0, $cond236 = 0, $cond83 = 0, $conv$i58 = 0, $conv18$i = 0, $conv18$i335 = 0, $conv3$i = 0, $conv3$i265 = 0, $conv3$i347 = 0, $conv3$i365 = 0, $conv355 = 0, $conv359 = 0, $conv42 = 0, $conv46 = 0, $conv6$i = 0, $conv6$i325 = 0, $delta$0 = 0, $delta375 = 0, $div$i$i = 0, $div$i$i105 = 0, $div$i$i18 = 0, $div$i283 = 0.0, $div$i301 = 0.0, $div$i315 = 0, $div117 = 0, $div7$i = 0.0, $div7$i302 = 0.0, $fl239$0 = 0, $fs201$0 = 0, $g$0$i = 0, $g$0$i168 = 0, $i$049$i = 0, $i$07$i$i = 0, $i$07$i34$i = 0, $imid$0 = 0, $imid373 = 0, $inc$i$i$i = 0, $inc$i$i$i143 = 0, $inc$i$i$i91 = 0, $inv$0 = 0, $inv$1 = 0, $inv$3$ph = 0, $inv$3396 = 0, $inv$3397 = 0, $iside$0 = 0, $iside374 = 0, $itheta$0 = 0, $itheta$3 = 0, $itheta$3385 = 0, $itheta$5 = 0, $itheta$7 = 0, $itheta$8 = 0, $itheta$8398 = 0, $itheta376 = 0, $j$014$i = 0, $j$02$i = 0, $j$02$i305 = 0, $j$0414 = 0, $land$ext = 0, $land$ext392 = 0, $mul$i115 = 0, $mul$i286 = 0.0, $mul$i29$i = 0.0, $mul$i67 = 0, $mul1$i$i = 0.0, $mul119 = 0, $mul126 = 0, $mul165 = 0, $mul2$i = 0.0, $mul207 = 0, $mul25 = 0, $mul286 = 0, $mul4$i = 0, $mul4$i119 = 0, $nbits_total$i = 0, $offs$i$i$i = 0, $offs$i$i$i131 = 0, $offs$i$i$i79 = 0, $qalloc377 = 0, $qn$0 = 0, $qn$019$i = 0, $rem$i$i = 0, $rem$i$i130 = 0, $rem$i$i78 = 0, $retval$0$i$i = 0.0, $rng$i = 0, $sext403 = 0, $sext405 = 0, $sext407 = 0, $sext409 = 0, $shl$i = 0, $shl3$i = 0, $shl3$i173 = 0, $shr$i15 = 0, $shr$i27 = 0, $shr$i43 = 0, $shr$i56 = 0, $shr203 = 0, $shr253 = 0, $shr267 = 0, $shr27 = 0, $shr3$i = 0, $shr3$i28 = 0, $shr3$i44 = 0, $shr55 = 0, $spec$select$i = 0, $sub$i = 0, $sub$i13 = 0, $sub$i25 = 0, $sub$i316 = 0, $sub$i4 = 0.0, $sub$i41 = 0, $sub$i60 = 0, $sub1$i = 0, $sub1$i117 = 0, $sub1$i317 = 0, $sub1$i69 = 0, $sub217 = 0, $sub269 = 0, $sub3$i = 0, $sub337 = 0, $sub337394 = 0, $sub337400 = 0, $sub337401 = 0, $sub6$i = 0, $sub6$i112 = 0, $sub7$i = 0, $tobool = 0, $tobool11 = 0, $tobool306 = 0, $val$i = 0, $val$i107 = 0, $val$i55 = 0, $x$0 = 0, $xy$08$i$i = 0.0, $xy$08$i33$i = 0.0, label = 0;
 $0 = HEAP32[$ctx >> 2] | 0;
 $1 = HEAP32[$ctx + 8 >> 2] | 0;
 $2 = HEAP32[$ctx + 12 >> 2] | 0;
 $3 = HEAP32[$ctx + 16 >> 2] | 0;
 $4 = HEAP32[$ctx + 28 >> 2] | 0;
 $5 = HEAP32[$ctx + 36 >> 2] | 0;
 $add = ($LM << 3) + (HEAP16[(HEAP32[$1 + 56 >> 2] | 0) + ($2 << 1) >> 1] | 0) | 0;
 $tobool = ($stereo | 0) != 0;
 $8 = ($N | 0) == 2 & $tobool;
 $9 = HEAP32[$b >> 2] | 0;
 $spec$select$i = ($8 ? -2 : -1) + ($N << 1) | 0;
 $div$i$i = ((Math_imul(($add >> 1) - ($8 ? 16 : 4) | 0, $spec$select$i) | 0) + $9 | 0) / ($spec$select$i | 0) | 0;
 $sub3$i = $9 - $add + -32 | 0;
 $cond$i = ($sub3$i | 0) < ($div$i$i | 0) ? $sub3$i : $div$i$i;
 $cond11$i = ($cond$i | 0) < 64 ? $cond$i : 64;
 if (($cond11$i | 0) < 4) $qn$019$i = 1; else {
  $shl$i = (HEAP16[176 + (($cond11$i & 7) << 1) >> 1] >> 14 - ($cond11$i >>> 3)) + 1 & -2;
  if (($shl$i | 0) < 257) $qn$019$i = $shl$i; else _celt_fatal(47798, 47629, 669);
 }
 $qn$0 = ($2 | 0) < ($3 | 0) | $tobool ^ 1 ? $qn$019$i : 1;
 $tobool11 = ($0 | 0) != 0;
 if ($tobool11) {
  $cmp6$i$i = ($N | 0) > 0;
  if (!$stereo) if ($cmp6$i$i) {
   $i$07$i$i = 0;
   $xy$08$i$i = 0.0;
   do {
    $14 = +HEAPF32[$X + ($i$07$i$i << 2) >> 2];
    $xy$08$i$i = $xy$08$i$i + $14 * $14;
    $i$07$i$i = $i$07$i$i + 1 | 0;
   } while (($i$07$i$i | 0) != ($N | 0));
   $i$07$i34$i = 0;
   $xy$08$i33$i = 0.0;
   do {
    $15 = +HEAPF32[$Y + ($i$07$i34$i << 2) >> 2];
    $xy$08$i33$i = $xy$08$i33$i + $15 * $15;
    $i$07$i34$i = $i$07$i34$i + 1 | 0;
   } while (($i$07$i34$i | 0) != ($N | 0));
   $Emid$1$i = $xy$08$i$i + 1.0000000036274937e-15;
   $Eside$1$i = $xy$08$i33$i + 1.0000000036274937e-15;
  } else {
   $Emid$1$i = 1.0000000036274937e-15;
   $Eside$1$i = 1.0000000036274937e-15;
  } else if ($cmp6$i$i) {
   $Emid$048$i = 1.0000000036274937e-15;
   $Eside$047$i = 1.0000000036274937e-15;
   $i$049$i = 0;
   while (1) {
    $12 = +HEAPF32[$X + ($i$049$i << 2) >> 2];
    $13 = +HEAPF32[$Y + ($i$049$i << 2) >> 2];
    $add$i3 = $12 + $13;
    $sub$i4 = $12 - $13;
    $add4$i6 = $Emid$048$i + $add$i3 * $add$i3;
    $add6$i7 = $Eside$047$i + $sub$i4 * $sub$i4;
    $i$049$i = $i$049$i + 1 | 0;
    if (($i$049$i | 0) == ($N | 0)) {
     $Emid$1$i = $add4$i6;
     $Eside$1$i = $add6$i7;
     break;
    } else {
     $Emid$048$i = $add4$i6;
     $Eside$047$i = $add6$i7;
    }
   }
  } else {
   $Emid$1$i = 1.0000000036274937e-15;
   $Eside$1$i = 1.0000000036274937e-15;
  }
  $16 = +Math_sqrt(+$Emid$1$i);
  $17 = +Math_sqrt(+$Eside$1$i);
  $mul$i29$i = $16 * $16;
  $mul1$i$i = $17 * $17;
  do if ($mul1$i$i + $mul$i29$i < 1.000000045813705e-18) $retval$0$i$i = 0.0; else if ($mul$i29$i < $mul1$i$i) {
   $retval$0$i$i = -($17 * $16 * ($mul1$i$i + $mul$i29$i * .43157973885536194)) / (($mul1$i$i + $mul$i29$i * .6784840226173401) * ($mul1$i$i + $mul$i29$i * .0859554186463356)) + 1.5707963705062866;
   break;
  } else {
   $retval$0$i$i = $17 * $16 * ($mul$i29$i + $mul1$i$i * .43157973885536194) / (($mul$i29$i + $mul1$i$i * .6784840226173401) * ($mul$i29$i + $mul1$i$i * .0859554186463356)) + 1.5707963705062866 + -1.5707963705062866;
   break;
  } while (0);
  $itheta$0 = ~~+Math_floor(+($retval$0$i$i * 10430.3818359375 + .5));
 } else $itheta$0 = 0;
 $nbits_total$i = $4 + 20 | 0;
 $21 = HEAP32[$nbits_total$i >> 2] | 0;
 $rng$i = $4 + 28 | 0;
 $22 = HEAP32[$rng$i >> 2] | 0;
 $sub$i13 = 32 - (Math_clz32($22 | 0) | 0) | 0;
 $shr$i15 = $22 >>> ($sub$i13 + -16 | 0);
 $shr3$i = $shr$i15 >>> 12;
 $sub7$i = (Math_imul($sub$i13, -8) | 0) + ($21 << 3) + (($shr$i15 >>> 0 > (HEAP32[5744 + ($shr3$i + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i) | 0;
 L28 : do if (($qn$0 | 0) == 1) if ($tobool) {
  if ($tobool11) {
   if (($itheta$0 | 0) > 8192) {
    $tobool306 = (HEAP32[$ctx + 52 >> 2] | 0) == 0;
    $land$ext = $tobool306 & 1;
    if ($tobool306) if (($N | 0) > 0) {
     $j$0414 = 0;
     do {
      $arrayidx312 = $Y + ($j$0414 << 2) | 0;
      HEAPF32[$arrayidx312 >> 2] = -+HEAPF32[$arrayidx312 >> 2];
      $j$0414 = $j$0414 + 1 | 0;
     } while (($j$0414 | 0) != ($N | 0));
     $land$ext392 = $land$ext;
    } else $land$ext392 = 1; else $land$ext392 = 0;
   } else $land$ext392 = 0;
   $72 = +HEAPF32[$5 + ($2 << 2) >> 2];
   $73 = +HEAPF32[$5 + ((HEAP32[$1 + 8 >> 2] | 0) + $2 << 2) >> 2];
   $add6$i = +Math_sqrt(+($72 * $72 + 1.0000000036274937e-15 + $73 * $73)) + 1.0000000036274937e-15;
   $div$i283 = $72 / $add6$i;
   $div7$i = $73 / $add6$i;
   if (($N | 0) > 0) {
    $j$02$i = 0;
    do {
     $arrayidx9$i = $X + ($j$02$i << 2) | 0;
     HEAPF32[$arrayidx9$i >> 2] = $div$i283 * +HEAPF32[$arrayidx9$i >> 2] + $div7$i * +HEAPF32[$Y + ($j$02$i << 2) >> 2];
     $j$02$i = $j$02$i + 1 | 0;
    } while (($j$02$i | 0) != ($N | 0));
    $inv$0 = $land$ext392;
   } else $inv$0 = $land$ext392;
  } else $inv$0 = 0;
  do if ((HEAP32[$b >> 2] | 0) > 16) if ((HEAP32[$ctx + 32 >> 2] | 0) > 16) {
   if ($tobool11) {
    _ec_enc_bit_logp($4, $inv$0, 2);
    $inv$1 = $inv$0;
    break;
   }
   $79 = HEAP32[$rng$i >> 2] | 0;
   $val$i55 = $4 + 32 | 0;
   $80 = HEAP32[$val$i55 >> 2] | 0;
   $shr$i56 = $79 >>> 2;
   $cmp$i57 = $80 >>> 0 < $shr$i56 >>> 0;
   $conv$i58 = $cmp$i57 & 1;
   if ($cmp$i57) {
    $115 = $80;
    $cond$i62 = $shr$i56;
   } else {
    $sub$i60 = $80 - $shr$i56 | 0;
    HEAP32[$val$i55 >> 2] = $sub$i60;
    $115 = $sub$i60;
    $cond$i62 = $79 - $shr$i56 | 0;
   }
   HEAP32[$rng$i >> 2] = $cond$i62;
   if ($cond$i62 >>> 0 < 8388609) {
    $rem$i$i = $4 + 40 | 0;
    $offs$i$i$i = $4 + 24 | 0;
    $$pre14$i$i = HEAP32[$4 + 4 >> 2] | 0;
    $81 = HEAP32[$nbits_total$i >> 2] | 0;
    $82 = $cond$i62;
    $83 = HEAP32[$offs$i$i$i >> 2] | 0;
    $86 = HEAP32[$rem$i$i >> 2] | 0;
    $89 = $115;
    while (1) {
     $81 = $81 + 8 | 0;
     HEAP32[$nbits_total$i >> 2] = $81;
     $82 = $82 << 8;
     HEAP32[$rng$i >> 2] = $82;
     if ($83 >>> 0 < $$pre14$i$i >>> 0) {
      $84 = HEAP32[$4 >> 2] | 0;
      $inc$i$i$i = $83 + 1 | 0;
      HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
      $116 = $inc$i$i$i;
      $cond$i$i$i = HEAPU8[$84 + $83 >> 0] | 0;
     } else {
      $116 = $83;
      $cond$i$i$i = 0;
     }
     HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
     $89 = ($89 << 8 & 2147483392 | ($cond$i$i$i | $86 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i55 >> 2] = $89;
     if ($82 >>> 0 >= 8388609) {
      $inv$1 = $conv$i58;
      break;
     } else {
      $83 = $116;
      $86 = $cond$i$i$i;
     }
    }
   } else $inv$1 = $conv$i58;
  } else $inv$1 = 0; else $inv$1 = 0; while (0);
  $inv$3$ph = (HEAP32[$ctx + 52 >> 2] | 0) == 0 ? $inv$1 : 0;
  label = 96;
 } else {
  $itheta$8 = $itheta$0;
  label = 97;
 } else {
  do if ($tobool11) {
   if (!$tobool) {
    $mul25 = Math_imul($itheta$0, $qn$0) | 0;
    $add26 = $mul25 + 8192 | 0;
    $shr27 = $add26 >> 14;
    if (!(($shr27 | 0) < ($qn$0 | 0) & (($mul25 | 0) > 8191 & (HEAP32[$ctx + 56 >> 2] | 0) != 0))) {
     $itheta$3385 = $shr27;
     label = 42;
     break;
    }
    $sext407 = ((($add26 & -16384) >>> 0) / ($qn$0 >>> 0) | 0) << 16;
    $conv3$i365 = (Math_imul($sext407 >> 13, $sext407 >> 16) | 0) + 32768 >> 16;
    $conv42 = 32768 - $conv3$i365 + (((Math_imul((((Math_imul(((Math_imul($conv3$i365, -626) | 0) + 16384 >> 15) + 8277 | 0, $conv3$i365) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16, $conv3$i365) | 0) + 16384 | 0) >>> 15) << 16 >> 16;
    $sext409 = 1073741824 - $sext407 | 0;
    $conv3$i347 = (Math_imul($sext409 >> 13, $sext409 >> 16) | 0) + 32768 >> 16;
    $conv46 = 32768 - $conv3$i347 + (((Math_imul((((Math_imul(((Math_imul($conv3$i347, -626) | 0) + 16384 >> 15) + 8277 | 0, $conv3$i347) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16, $conv3$i347) | 0) + 16384 | 0) >>> 15) << 16 >> 16;
    $sub$i316 = 32 - (Math_clz32($conv42 | 0) | 0) | 0;
    $sub1$i317 = 32 - (Math_clz32($conv46 | 0) | 0) | 0;
    $conv6$i325 = $conv46 << 15 - $sub1$i317 << 16 >> 16;
    $conv18$i335 = $conv42 << 15 - $sub$i316 << 16 >> 16;
    $shr55 = (Math_imul(($sub1$i317 - $sub$i316 << 11) - (((Math_imul(((Math_imul($conv18$i335, -2597) | 0) + 16384 >> 15) + 7932 | 0, $conv18$i335) | 0) + 16384 | 0) >>> 15) + (((Math_imul(((Math_imul($conv6$i325, -2597) | 0) + 16384 >> 15) + 7932 | 0, $conv6$i325) | 0) + 16384 | 0) >>> 15) << 16 >> 16, ($N << 23) + -8388608 >> 16) | 0) + 16384 >> 15;
    $37 = HEAP32[$b >> 2] | 0;
    $itheta$3385 = ($shr55 | 0) > ($37 | 0) ? $qn$0 : ($shr55 | 0) < (0 - $37 | 0) ? 0 : $shr27;
    label = 42;
    break;
   }
   $25 = HEAP32[$ctx + 48 >> 2] | 0;
   if (!$25) {
    $itheta$3 = (Math_imul($itheta$0, $qn$0) | 0) + 8192 >> 14;
    label = 28;
    break;
   } else {
    $add73 = (((($itheta$0 | 0) > 8192 ? 32767 : -32767) | 0) / ($qn$0 | 0) | 0) + (Math_imul($itheta$0, $qn$0) | 0) | 0;
    $cond83 = ($add73 | 0) < 0 ? 0 : $add73 >> 14;
    $itheta$3 = (($qn$0 | 0) > ($cond83 | 0) ? $cond83 : $qn$0 + -1 | 0) + ($25 >>> 31 ^ 1) | 0;
    label = 28;
    break;
   }
  } else {
   $itheta$3 = $itheta$0;
   label = 28;
  } while (0);
  do if ((label | 0) == 28) if (($N | 0) > 2 & $tobool) {
   $div117 = ($qn$0 | 0) / 2 | 0;
   $add118 = $div117 + 1 | 0;
   $mul119 = $add118 * 3 | 0;
   $add120 = $mul119 + $div117 | 0;
   if ($tobool11) {
    $cmp123 = ($itheta$3 | 0) <= ($div117 | 0);
    if ($cmp123) {
     $mul126 = $itheta$3 * 3 | 0;
     $$pre$phiZ2D = $mul126;
     $cond134 = $mul126;
    } else {
     $$pre$phiZ2D = $itheta$3 * 3 | 0;
     $cond134 = $mul119 + ~$div117 + $itheta$3 | 0;
    }
    _ec_encode($4, $cond134, $cmp123 ? $$pre$phiZ2D + 3 | 0 : $mul119 - $div117 + $itheta$3 | 0, $add120);
    $itheta$7 = $itheta$3;
    break;
   }
   $div$i$i18 = ($22 >>> 0) / ($add120 >>> 0) | 0;
   HEAP32[$4 + 36 >> 2] = $div$i$i18;
   $val$i = $4 + 32 | 0;
   $38 = HEAP32[$val$i >> 2] | 0;
   $add$i20 = (($38 >>> 0) / ($div$i$i18 >>> 0) | 0) + 1 | 0;
   $sub6$i = $add120 - ($add$i20 >>> 0 > $add120 >>> 0 ? $add120 : $add$i20) | 0;
   $add160 = (Math_imul($add118, -2) | 0) + $sub6$i | 0;
   $x$0 = ($sub6$i | 0) < ($mul119 | 0) ? ($sub6$i | 0) / 3 | 0 : $add160;
   $cmp162 = ($x$0 | 0) <= ($div117 | 0);
   if ($cmp162) {
    $mul165 = $x$0 * 3 | 0;
    $$pre$phi417Z2D = $mul165;
    $cond173 = $mul165;
   } else {
    $$pre$phi417Z2D = $x$0 * 3 | 0;
    $cond173 = $mul119 + ~$div117 + $x$0 | 0;
   }
   $cond185 = $cmp162 ? $$pre$phi417Z2D + 3 | 0 : $mul119 - $div117 + $x$0 | 0;
   $mul$i67 = Math_imul($div$i$i18, $add120 - $cond185 | 0) | 0;
   $sub1$i69 = $38 - $mul$i67 | 0;
   HEAP32[$val$i >> 2] = $sub1$i69;
   $mul4$i = Math_imul($div$i$i18, $cond185 - $cond173 | 0) | 0;
   $cond$i74 = ($cond173 | 0) == 0 ? $22 - $mul$i67 | 0 : $mul4$i;
   HEAP32[$rng$i >> 2] = $cond$i74;
   if ($cond$i74 >>> 0 < 8388609) {
    $rem$i$i78 = $4 + 40 | 0;
    $offs$i$i$i79 = $4 + 24 | 0;
    $$pre14$i$i85 = HEAP32[$4 + 4 >> 2] | 0;
    $39 = $21;
    $40 = $cond$i74;
    $41 = HEAP32[$offs$i$i$i79 >> 2] | 0;
    $44 = HEAP32[$rem$i$i78 >> 2] | 0;
    $47 = $sub1$i69;
    while (1) {
     $39 = $39 + 8 | 0;
     HEAP32[$nbits_total$i >> 2] = $39;
     $40 = $40 << 8;
     HEAP32[$rng$i >> 2] = $40;
     if ($41 >>> 0 < $$pre14$i$i85 >>> 0) {
      $42 = HEAP32[$4 >> 2] | 0;
      $inc$i$i$i91 = $41 + 1 | 0;
      HEAP32[$offs$i$i$i79 >> 2] = $inc$i$i$i91;
      $113 = $inc$i$i$i91;
      $cond$i$i$i95 = HEAPU8[$42 + $41 >> 0] | 0;
     } else {
      $113 = $41;
      $cond$i$i$i95 = 0;
     }
     HEAP32[$rem$i$i78 >> 2] = $cond$i$i$i95;
     $47 = ($47 << 8 & 2147483392 | ($cond$i$i$i95 | $44 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i >> 2] = $47;
     if ($40 >>> 0 >= 8388609) {
      $itheta$7 = $x$0;
      break;
     } else {
      $41 = $113;
      $44 = $cond$i$i$i95;
     }
    }
   } else $itheta$7 = $x$0;
  } else {
   $itheta$3385 = $itheta$3;
   label = 42;
  } while (0);
  do if ((label | 0) == 42) {
   if (($B0 | 0) > 1 | $tobool) {
    $add195 = $qn$0 + 1 | 0;
    if ($tobool11) {
     _ec_enc_uint($4, $itheta$3385, $add195);
     $itheta$7 = $itheta$3385;
     break;
    } else {
     $itheta$7 = _ec_dec_uint($4, $add195) | 0;
     break;
    }
   }
   $shr203 = $qn$0 >> 1;
   $add204 = $shr203 + 1 | 0;
   $mul207 = Math_imul($add204, $add204) | 0;
   if ($tobool11) {
    $cmp211 = ($itheta$3385 | 0) <= ($shr203 | 0);
    $add214 = $itheta$3385 + 1 | 0;
    $sub217 = $qn$0 + 1 - $itheta$3385 | 0;
    if ($cmp211) $cond236 = (Math_imul($add214, $itheta$3385) | 0) >> 1; else $cond236 = $mul207 - ((Math_imul($sub217, $qn$0 + 2 - $itheta$3385 | 0) | 0) >> 1) | 0;
    _ec_encode($4, $cond236, $cond236 + ($cmp211 ? $add214 : $sub217) | 0, $mul207);
    $itheta$7 = $itheta$3385;
    break;
   }
   $div$i$i105 = ($22 >>> 0) / ($mul207 >>> 0) | 0;
   HEAP32[$4 + 36 >> 2] = $div$i$i105;
   $val$i107 = $4 + 32 | 0;
   $48 = HEAP32[$val$i107 >> 2] | 0;
   $add$i109 = (($48 >>> 0) / ($div$i$i105 >>> 0) | 0) + 1 | 0;
   $add5$i111 = $add$i109 >>> 0 > $mul207 >>> 0 ? $mul207 : $add$i109;
   $sub6$i112 = $mul207 - $add5$i111 | 0;
   if (($sub6$i112 | 0) < ((Math_imul($add204, $shr203) | 0) >> 1 | 0)) {
    $add250 = $sub6$i112 << 3 | 1;
    $50 = (Math_clz32($add250 | 0) | 0) >>> 1 ^ 15;
    $_val$addr$0$i170 = $add250;
    $b$0$i167 = 1 << $50;
    $bshift$0$i169 = $50;
    $g$0$i168 = 0;
    while (1) {
     $shl3$i173 = ($g$0$i168 << 1) + $b$0$i167 << $bshift$0$i169;
     $cmp$i174 = $_val$addr$0$i170 >>> 0 < $shl3$i173 >>> 0;
     $g$0$i168 = ($cmp$i174 ? 0 : $b$0$i167) + $g$0$i168 | 0;
     if (($bshift$0$i169 | 0) <= 0) break; else {
      $_val$addr$0$i170 = $_val$addr$0$i170 - ($cmp$i174 ? 0 : $shl3$i173) | 0;
      $b$0$i167 = $b$0$i167 >>> 1;
      $bshift$0$i169 = $bshift$0$i169 + -1 | 0;
     }
    }
    $shr253 = ($g$0$i168 + -1 | 0) >>> 1;
    $add254 = $shr253 + 1 | 0;
    $fl239$0 = (Math_imul($add254, $shr253) | 0) >>> 1;
    $fs201$0 = $add254;
    $itheta$5 = $shr253;
   } else {
    $add259 = $qn$0 + 1 | 0;
    $add264 = ($add5$i111 << 3) + -7 | 0;
    $53 = (Math_clz32($add264 | 0) | 0) >>> 1 ^ 15;
    $_val$addr$0$i = $add264;
    $b$0$i = 1 << $53;
    $bshift$0$i = $53;
    $g$0$i = 0;
    while (1) {
     $shl3$i = ($g$0$i << 1) + $b$0$i << $bshift$0$i;
     $cmp$i161 = $_val$addr$0$i >>> 0 < $shl3$i >>> 0;
     $g$0$i = ($cmp$i161 ? 0 : $b$0$i) + $g$0$i | 0;
     if (($bshift$0$i | 0) <= 0) break; else {
      $_val$addr$0$i = $_val$addr$0$i - ($cmp$i161 ? 0 : $shl3$i) | 0;
      $b$0$i = $b$0$i >>> 1;
      $bshift$0$i = $bshift$0$i + -1 | 0;
     }
    }
    $shr267 = (($add259 << 1) - $g$0$i | 0) >>> 1;
    $sub269 = $add259 - $shr267 | 0;
    $fl239$0 = $mul207 - ((Math_imul($sub269, $qn$0 + 2 - $shr267 | 0) | 0) >> 1) | 0;
    $fs201$0 = $sub269;
    $itheta$5 = $shr267;
   }
   $mul$i115 = Math_imul($div$i$i105, $mul207 - ($fl239$0 + $fs201$0) | 0) | 0;
   $sub1$i117 = $48 - $mul$i115 | 0;
   HEAP32[$val$i107 >> 2] = $sub1$i117;
   $mul4$i119 = Math_imul($div$i$i105, $fs201$0) | 0;
   $cond$i126 = ($fl239$0 | 0) == 0 ? $22 - $mul$i115 | 0 : $mul4$i119;
   HEAP32[$rng$i >> 2] = $cond$i126;
   if ($cond$i126 >>> 0 < 8388609) {
    $rem$i$i130 = $4 + 40 | 0;
    $offs$i$i$i131 = $4 + 24 | 0;
    $$pre14$i$i137 = HEAP32[$4 + 4 >> 2] | 0;
    $54 = $21;
    $55 = $cond$i126;
    $56 = HEAP32[$offs$i$i$i131 >> 2] | 0;
    $59 = HEAP32[$rem$i$i130 >> 2] | 0;
    $62 = $sub1$i117;
    while (1) {
     $54 = $54 + 8 | 0;
     HEAP32[$nbits_total$i >> 2] = $54;
     $55 = $55 << 8;
     HEAP32[$rng$i >> 2] = $55;
     if ($56 >>> 0 < $$pre14$i$i137 >>> 0) {
      $57 = HEAP32[$4 >> 2] | 0;
      $inc$i$i$i143 = $56 + 1 | 0;
      HEAP32[$offs$i$i$i131 >> 2] = $inc$i$i$i143;
      $114 = $inc$i$i$i143;
      $cond$i$i$i147 = HEAPU8[$57 + $56 >> 0] | 0;
     } else {
      $114 = $56;
      $cond$i$i$i147 = 0;
     }
     HEAP32[$rem$i$i130 >> 2] = $cond$i$i$i147;
     $62 = ($62 << 8 & 2147483392 | ($cond$i$i$i147 | $59 << 8) >>> 1 & 255) ^ 255;
     HEAP32[$val$i107 >> 2] = $62;
     if ($55 >>> 0 >= 8388609) break; else {
      $56 = $114;
      $59 = $cond$i$i$i147;
     }
    }
   }
   $itheta$8 = ($itheta$5 << 14 >>> 0) / ($qn$0 >>> 0) | 0;
   label = 97;
   break L28;
  } while (0);
  if (($itheta$7 | 0) <= -1) _celt_fatal(47770, 47629, 838);
  $mul286 = $itheta$7 << 14;
  $div$i315 = ($mul286 >>> 0) / ($qn$0 >>> 0) | 0;
  if ($tobool & $tobool11) if ($qn$0 >>> 0 > $mul286 >>> 0) {
   $63 = +HEAPF32[$5 + ($2 << 2) >> 2];
   $64 = +HEAPF32[$5 + ((HEAP32[$1 + 8 >> 2] | 0) + $2 << 2) >> 2];
   $add6$i300 = +Math_sqrt(+($63 * $63 + 1.0000000036274937e-15 + $64 * $64)) + 1.0000000036274937e-15;
   $div$i301 = $63 / $add6$i300;
   $div7$i302 = $64 / $add6$i300;
   if (($N | 0) <= 0) {
    $inv$3$ph = 0;
    label = 96;
    break;
   }
   $j$02$i305 = 0;
   do {
    $arrayidx9$i306 = $X + ($j$02$i305 << 2) | 0;
    HEAPF32[$arrayidx9$i306 >> 2] = $div$i301 * +HEAPF32[$arrayidx9$i306 >> 2] + $div7$i302 * +HEAPF32[$Y + ($j$02$i305 << 2) >> 2];
    $j$02$i305 = $j$02$i305 + 1 | 0;
   } while (($j$02$i305 | 0) != ($N | 0));
   $itheta$8 = $div$i315;
   label = 97;
  } else {
   if (($N | 0) <= 0) {
    $itheta$8 = $div$i315;
    label = 97;
    break;
   }
   $j$014$i = 0;
   do {
    $arrayidx$i285 = $X + ($j$014$i << 2) | 0;
    $mul$i286 = +HEAPF32[$arrayidx$i285 >> 2] * .7071067690849304;
    $arrayidx1$i287 = $Y + ($j$014$i << 2) | 0;
    $mul2$i = +HEAPF32[$arrayidx1$i287 >> 2] * .7071067690849304;
    HEAPF32[$arrayidx$i285 >> 2] = $mul$i286 + $mul2$i;
    HEAPF32[$arrayidx1$i287 >> 2] = $mul2$i - $mul$i286;
    $j$014$i = $j$014$i + 1 | 0;
   } while (($j$014$i | 0) != ($N | 0));
   $itheta$8 = $div$i315;
   label = 97;
  } else {
   $itheta$8 = $div$i315;
   label = 97;
  }
 } while (0);
 L137 : do if ((label | 0) == 96) {
  $92 = HEAP32[$rng$i >> 2] | 0;
  $sub$i41 = 32 - (Math_clz32($92 | 0) | 0) | 0;
  $shr$i43 = $92 >>> ($sub$i41 + -16 | 0);
  $shr3$i44 = $shr$i43 >>> 12;
  $sub337394 = (Math_imul($sub$i41, -8) | 0) + (HEAP32[$nbits_total$i >> 2] << 3) + (($shr$i43 >>> 0 > (HEAP32[5744 + ($shr3$i44 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i44) - $sub7$i | 0;
  HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - $sub337394;
  $inv$3397 = $inv$3$ph;
  $sub337401 = $sub337394;
 } else if ((label | 0) == 97) {
  $97 = HEAP32[$rng$i >> 2] | 0;
  $sub$i25 = 32 - (Math_clz32($97 | 0) | 0) | 0;
  $shr$i27 = $97 >>> ($sub$i25 + -16 | 0);
  $shr3$i28 = $shr$i27 >>> 12;
  $sub337 = (Math_imul($sub$i25, -8) | 0) + (HEAP32[$nbits_total$i >> 2] << 3) + (($shr$i27 >>> 0 > (HEAP32[5744 + ($shr3$i28 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i28) - $sub7$i | 0;
  HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - $sub337;
  L139 : do if (($itheta$8 | 0) < 16384) switch ($itheta$8 | 0) {
  case 0:
   {
    $inv$3397 = 0;
    $sub337401 = $sub337;
    break L137;
    break;
   }
  default:
   {}
  } else {
   switch ($itheta$8 | 0) {
   case 16384:
    break;
   default:
    break L139;
   }
   HEAP32[$fill >> 2] = HEAP32[$fill >> 2] & (1 << $B) + -1 << $B;
   $delta$0 = 16384;
   $imid$0 = 0;
   $inv$3396 = 0;
   $iside$0 = 32767;
   $itheta$8398 = 16384;
   $sub337400 = $sub337;
   HEAP32[$sctx >> 2] = $inv$3396;
   $imid373 = $sctx + 4 | 0;
   HEAP32[$imid373 >> 2] = $imid$0;
   $iside374 = $sctx + 8 | 0;
   HEAP32[$iside374 >> 2] = $iside$0;
   $delta375 = $sctx + 12 | 0;
   HEAP32[$delta375 >> 2] = $delta$0;
   $itheta376 = $sctx + 16 | 0;
   HEAP32[$itheta376 >> 2] = $itheta$8398;
   $qalloc377 = $sctx + 20 | 0;
   HEAP32[$qalloc377 >> 2] = $sub337400;
   return;
  } while (0);
  $sext403 = $itheta$8 << 16;
  $conv3$i265 = (Math_imul($sext403 >> 13, $sext403 >> 16) | 0) + 32768 >> 16;
  $conv355 = 32768 - $conv3$i265 + (((Math_imul((((Math_imul(((Math_imul($conv3$i265, -626) | 0) + 16384 >> 15) + 8277 | 0, $conv3$i265) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16, $conv3$i265) | 0) + 16384 | 0) >>> 15) << 16 >> 16;
  $sext405 = 1073741824 - $sext403 | 0;
  $conv3$i = (Math_imul($sext405 >> 13, $sext405 >> 16) | 0) + 32768 >> 16;
  $conv359 = 32768 - $conv3$i + (((Math_imul((((Math_imul(((Math_imul($conv3$i, -626) | 0) + 16384 >> 15) + 8277 | 0, $conv3$i) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16, $conv3$i) | 0) + 16384 | 0) >>> 15) << 16 >> 16;
  $sub$i = 32 - (Math_clz32($conv355 | 0) | 0) | 0;
  $sub1$i = 32 - (Math_clz32($conv359 | 0) | 0) | 0;
  $conv6$i = $conv359 << 15 - $sub1$i << 16 >> 16;
  $conv18$i = $conv355 << 15 - $sub$i << 16 >> 16;
  $delta$0 = (Math_imul(($sub1$i - $sub$i << 11) - (((Math_imul(((Math_imul($conv18$i, -2597) | 0) + 16384 >> 15) + 7932 | 0, $conv18$i) | 0) + 16384 | 0) >>> 15) + (((Math_imul(((Math_imul($conv6$i, -2597) | 0) + 16384 >> 15) + 7932 | 0, $conv6$i) | 0) + 16384 | 0) >>> 15) << 16 >> 16, ($N << 23) + -8388608 >> 16) | 0) + 16384 >> 15;
  $imid$0 = $conv355;
  $inv$3396 = 0;
  $iside$0 = $conv359;
  $itheta$8398 = $itheta$8;
  $sub337400 = $sub337;
  HEAP32[$sctx >> 2] = $inv$3396;
  $imid373 = $sctx + 4 | 0;
  HEAP32[$imid373 >> 2] = $imid$0;
  $iside374 = $sctx + 8 | 0;
  HEAP32[$iside374 >> 2] = $iside$0;
  $delta375 = $sctx + 12 | 0;
  HEAP32[$delta375 >> 2] = $delta$0;
  $itheta376 = $sctx + 16 | 0;
  HEAP32[$itheta376 >> 2] = $itheta$8398;
  $qalloc377 = $sctx + 20 | 0;
  HEAP32[$qalloc377 >> 2] = $sub337400;
  return;
 } while (0);
 HEAP32[$fill >> 2] = HEAP32[$fill >> 2] & (1 << $B) + -1;
 $delta$0 = -16384;
 $imid$0 = 32767;
 $inv$3396 = $inv$3397;
 $iside$0 = 0;
 $itheta$8398 = 0;
 $sub337400 = $sub337401;
 HEAP32[$sctx >> 2] = $inv$3396;
 $imid373 = $sctx + 4 | 0;
 HEAP32[$imid373 >> 2] = $imid$0;
 $iside374 = $sctx + 8 | 0;
 HEAP32[$iside374 >> 2] = $iside$0;
 $delta375 = $sctx + 12 | 0;
 HEAP32[$delta375 >> 2] = $delta$0;
 $itheta376 = $sctx + 16 | 0;
 HEAP32[$itheta376 >> 2] = $itheta$8398;
 $qalloc377 = $sctx + 20 | 0;
 HEAP32[$qalloc377 >> 2] = $sub337400;
 return;
}

function _quant_band_stereo($ctx, $X, $Y, $N, $b, $B, $lowband, $LM, $lowband_out, $lowband_scratch, $fill) {
 $ctx = $ctx | 0;
 $X = $X | 0;
 $Y = $Y | 0;
 $N = $N | 0;
 $b = $b | 0;
 $B = $B | 0;
 $lowband = $lowband | 0;
 $LM = $LM | 0;
 $lowband_out = $lowband_out | 0;
 $lowband_scratch = $lowband_scratch | 0;
 $fill = $fill | 0;
 var $$pre$i = 0, $$pre$i152 = 0, $$pre$i16 = 0, $$pre21$i = 0, $$pre21$i153 = 0, $$pre21$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0.0, $108 = 0.0, $11 = 0.0, $114 = 0, $118 = 0.0, $12 = 0, $123 = 0.0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $add$i = 0, $add$i$i = 0.0, $add$i109 = 0, $add$i156 = 0.0, $add$i46 = 0, $add$i71 = 0, $add5$i$i = 0.0, $add6$i = 0.0, $add6$pre$phi$i137Z2D = 0, $add6$pre$phi$i99Z2D = 0, $add6$pre$phi$iZ2D = 0, $arrayidx$i = 0, $arrayidx161 = 0, $arrayidx18$i = 0, $arrayidx60 = 0, $arrayidx66 = 0, $available$1$i = 0, $available$1$i171 = 0, $available$1$i35 = 0, $b$addr = 0, $c$0$i = 0, $c$0$us$i = 0, $call117 = 0, $call133 = 0, $call45 = 0, $cm$1 = 0, $cmp$i = 0, $cmp11 = 0, $cmp11$i$i = 0, $cmp20 = 0, $cmp3$us$peel$i = 0, $cmp6$i = 0, $cmp6$peel$i = 0, $cond = 0, $cond$i$i = 0, $cond$i$i$1 = 0, $cond$i$i$2 = 0, $cond$i$i$3 = 0, $cond$i$i164 = 0, $cond$i$i164$1 = 0, $cond$i$i164$2 = 0, $cond$i$i164$3 = 0, $cond$i$i28 = 0, $cond$i$i28$1 = 0, $cond$i$i28$2 = 0, $cond$i$i28$3 = 0, $cond27 = 0, $conv39 = 0, $conv7$i = 0, $conv7$peel$i = 0, $div = 0, $div$i = 0.0, $div14$i = 0.0, $end_offs$i$i = 0, $end_offs$i$i113 = 0, $end_offs$i$i12 = 0, $end_offs$i$i148 = 0, $end_offs$i$i49 = 0, $end_offs$i$i75 = 0, $end_window$i = 0, $end_window$i107 = 0, $end_window$i145 = 0, $end_window$i44 = 0, $end_window$i69 = 0, $end_window$i9 = 0, $error$i = 0, $error$i116 = 0, $error$i78 = 0, $fill$addr = 0, $i$012$i$i = 0, $inc$i$i125 = 0, $inc$i$i159 = 0, $inc$i$i159$1 = 0, $inc$i$i159$2 = 0, $inc$i$i159$3 = 0, $inc$i$i23 = 0, $inc$i$i23$1 = 0, $inc$i$i23$2 = 0, $inc$i$i23$3 = 0, $inc$i$i4 = 0, $inc$i$i4$1 = 0, $inc$i$i4$2 = 0, $inc$i$i4$3 = 0, $inc$i$i58 = 0, $inc$i$i87 = 0, $j$0163 = 0, $j$04$i = 0, $mul = 0.0, $mul10 = 0.0, $mul17$i = 0.0, $mul2$i = 0.0, $mul64 = 0.0, $nbits_total$i = 0, $nbits_total$i104 = 0, $nbits_total$i142 = 0, $nbits_total$i176 = 0, $nbits_total$i40 = 0, $nbits_total$i68 = 0, $nend_bits$i = 0, $nend_bits$i10 = 0, $nend_bits$i108 = 0, $nend_bits$i146 = 0, $nend_bits$i45 = 0, $nend_bits$i70 = 0, $offs$i$i = 0, $offs$i$i112 = 0, $offs$i$i74 = 0, $remaining_bits = 0, $remaining_bits$i = 0, $remaining_bits111 = 0, $resynth1$i = 0, $retval$0 = 0, $retval$0$i$i = 0, $retval$0$i$i129 = 0, $retval$0$i$i91 = 0, $sctx = 0, $sign$0 = 0, $spec$select = 0, $spec$select160 = 0, $spec$store$select = 0, $storage$i$i114 = 0, $storage$i$i13 = 0, $storage$i$i50 = 0, $storage$i$i76 = 0, $sub = 0, $sub$i = 0, $sub$i157 = 0.0, $sub$peel$i = 0, $sub$us$i = 0, $sub$us$peel$i = 0, $sub110 = 0, $sub112 = 0, $sub120 = 0, $sub136 = 0, $sub44 = 0, $used$0$i = 0, $used$0$i120 = 0, $used$0$i82 = 0, $used$1$i = 0, $used$1$i101 = 0, $used$1$i139 = 0, $window$0$i119 = 0, $window$0$i53 = 0, $window$0$i81 = 0, $window$1$i = 0, $window$1$i100 = 0, $window$1$i138 = 0, $window$1$i172 = 0, $window$1$i36 = 0, $window$1$i66 = 0, $xy01$0$lcssa$i$i = 0.0, $xy01$013$i$i = 0.0, $xy02$0$lcssa$i$i = 0.0, $xy02$014$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $b$addr = sp + 4 | 0;
 $fill$addr = sp;
 $sctx = sp + 8 | 0;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$fill$addr >> 2] = $fill;
 $0 = HEAP32[$ctx >> 2] | 0;
 $1 = HEAP32[$ctx + 28 >> 2] | 0;
 if (($N | 0) != 1) {
  _compute_theta($ctx, $sctx, $X, $Y, $N, $b$addr, $B, $B, $LM, 1, $fill$addr);
  $64 = HEAP32[$sctx >> 2] | 0;
  $67 = HEAP32[$sctx + 16 >> 2] | 0;
  $68 = HEAP32[$sctx + 20 >> 2] | 0;
  $mul = +(HEAP32[$sctx + 4 >> 2] | 0) * .000030517578125;
  $mul10 = +(HEAP32[$sctx + 8 >> 2] | 0) * .000030517578125;
  $cmp11 = ($N | 0) == 2;
  $69 = HEAP32[$b$addr >> 2] | 0;
  do if ($cmp11) {
   $71 = ($67 | 16384 | 0) != 16384;
   $spec$store$select = $71 ? 8 : 0;
   $sub = $69 - $spec$store$select | 0;
   $cmp20 = ($67 | 0) > 8192;
   $remaining_bits = $ctx + 32 | 0;
   HEAP32[$remaining_bits >> 2] = (HEAP32[$remaining_bits >> 2] | 0) - ($spec$store$select + $68);
   $cond = $cmp20 ? $Y : $X;
   $cond27 = $cmp20 ? $X : $Y;
   do if ($71) {
    if ($0 | 0) {
     $conv39 = +HEAPF32[$cond >> 2] * +HEAPF32[$cond27 + 4 >> 2] - +HEAPF32[$cond + 4 >> 2] * +HEAPF32[$cond27 >> 2] < 0.0 & 1;
     $end_window$i107 = $1 + 12 | 0;
     $78 = HEAP32[$end_window$i107 >> 2] | 0;
     $nend_bits$i108 = $1 + 16 | 0;
     $79 = HEAP32[$nend_bits$i108 >> 2] | 0;
     $add$i109 = $79 + 1 | 0;
     if ($add$i109 >>> 0 > 32) {
      $offs$i$i112 = $1 + 24 | 0;
      $end_offs$i$i113 = $1 + 8 | 0;
      $storage$i$i114 = $1 + 4 | 0;
      $error$i116 = $1 + 44 | 0;
      $80 = ~$79;
      $83 = $79 + (($80 | 0) > -16 ? $80 : -16) + 8 | 0;
      $used$0$i120 = $79;
      $window$0$i119 = $78;
      while (1) {
       $85 = HEAP32[$end_offs$i$i113 >> 2] | 0;
       $86 = HEAP32[$storage$i$i114 >> 2] | 0;
       if (($85 + (HEAP32[$offs$i$i112 >> 2] | 0) | 0) >>> 0 < $86 >>> 0) {
        $87 = HEAP32[$1 >> 2] | 0;
        $inc$i$i125 = $85 + 1 | 0;
        HEAP32[$end_offs$i$i113 >> 2] = $inc$i$i125;
        HEAP8[$87 + ($86 - $inc$i$i125) >> 0] = $window$0$i119;
        $retval$0$i$i129 = 0;
       } else $retval$0$i$i129 = -1;
       HEAP32[$error$i116 >> 2] = HEAP32[$error$i116 >> 2] | $retval$0$i$i129;
       $window$0$i119 = $window$0$i119 >>> 8;
       if (($used$0$i120 | 0) <= 15) break; else $used$0$i120 = $used$0$i120 + -8 | 0;
      }
      $91 = $79 + -8 - ($83 & -8) | 0;
      $add6$pre$phi$i137Z2D = $91 + 1 | 0;
      $used$1$i139 = $91;
      $window$1$i138 = $window$0$i119;
     } else {
      $add6$pre$phi$i137Z2D = $add$i109;
      $used$1$i139 = $79;
      $window$1$i138 = $78;
     }
     HEAP32[$end_window$i107 >> 2] = $conv39 << $used$1$i139 | $window$1$i138;
     HEAP32[$nend_bits$i108 >> 2] = $add6$pre$phi$i137Z2D;
     $nbits_total$i142 = $1 + 20 | 0;
     HEAP32[$nbits_total$i142 >> 2] = (HEAP32[$nbits_total$i142 >> 2] | 0) + 1;
     $sign$0 = $conv39;
     break;
    }
    $end_window$i145 = $1 + 12 | 0;
    $93 = HEAP32[$end_window$i145 >> 2] | 0;
    $nend_bits$i146 = $1 + 16 | 0;
    $94 = HEAP32[$nend_bits$i146 >> 2] | 0;
    if (!$94) {
     $end_offs$i$i148 = $1 + 8 | 0;
     $$pre$i152 = HEAP32[$end_offs$i$i148 >> 2] | 0;
     $$pre21$i153 = HEAP32[$1 + 4 >> 2] | 0;
     if ($$pre$i152 >>> 0 < $$pre21$i153 >>> 0) {
      $95 = HEAP32[$1 >> 2] | 0;
      $inc$i$i159 = $$pre$i152 + 1 | 0;
      HEAP32[$end_offs$i$i148 >> 2] = $inc$i$i159;
      $97 = $inc$i$i159;
      $cond$i$i164 = HEAPU8[$95 + ($$pre21$i153 - $inc$i$i159) >> 0] | 0;
     } else {
      $97 = $$pre$i152;
      $cond$i$i164 = 0;
     }
     if ($97 >>> 0 < $$pre21$i153 >>> 0) {
      $141 = HEAP32[$1 >> 2] | 0;
      $inc$i$i159$1 = $97 + 1 | 0;
      HEAP32[$end_offs$i$i148 >> 2] = $inc$i$i159$1;
      $143 = $inc$i$i159$1;
      $cond$i$i164$1 = (HEAPU8[$141 + ($$pre21$i153 - $inc$i$i159$1) >> 0] | 0) << 8;
     } else {
      $143 = $97;
      $cond$i$i164$1 = 0;
     }
     if ($143 >>> 0 < $$pre21$i153 >>> 0) {
      $144 = HEAP32[$1 >> 2] | 0;
      $inc$i$i159$2 = $143 + 1 | 0;
      HEAP32[$end_offs$i$i148 >> 2] = $inc$i$i159$2;
      $146 = $inc$i$i159$2;
      $cond$i$i164$2 = (HEAPU8[$144 + ($$pre21$i153 - $inc$i$i159$2) >> 0] | 0) << 16;
     } else {
      $146 = $143;
      $cond$i$i164$2 = 0;
     }
     if ($146 >>> 0 < $$pre21$i153 >>> 0) {
      $147 = HEAP32[$1 >> 2] | 0;
      $inc$i$i159$3 = $146 + 1 | 0;
      HEAP32[$end_offs$i$i148 >> 2] = $inc$i$i159$3;
      $cond$i$i164$3 = (HEAPU8[$147 + ($$pre21$i153 - $inc$i$i159$3) >> 0] | 0) << 24;
     } else $cond$i$i164$3 = 0;
     $available$1$i171 = 32;
     $window$1$i172 = $cond$i$i164$3 | ($cond$i$i164$2 | ($cond$i$i164$1 | ($cond$i$i164 | $93)));
    } else {
     $available$1$i171 = $94;
     $window$1$i172 = $93;
    }
    HEAP32[$end_window$i145 >> 2] = $window$1$i172 >>> 1;
    HEAP32[$nend_bits$i146 >> 2] = $available$1$i171 + -1;
    $nbits_total$i176 = $1 + 20 | 0;
    HEAP32[$nbits_total$i176 >> 2] = (HEAP32[$nbits_total$i176 >> 2] | 0) + 1;
    $sign$0 = $window$1$i172 & 1;
   } else $sign$0 = 0; while (0);
   $sub44 = 1 - ($sign$0 << 1) | 0;
   $call45 = _quant_band($ctx, $cond, 2, $sub, $B, $lowband, $LM, $lowband_out, 1.0, $lowband_scratch, $fill) | 0;
   HEAPF32[$cond27 >> 2] = +HEAPF32[$cond + 4 >> 2] * +(0 - $sub44 | 0);
   HEAPF32[$cond27 + 4 >> 2] = +HEAPF32[$cond >> 2] * +($sub44 | 0);
   if (!(HEAP32[$ctx + 4 >> 2] | 0)) $cm$1 = $call45; else {
    HEAPF32[$X >> 2] = $mul * +HEAPF32[$X >> 2];
    $arrayidx60 = $X + 4 | 0;
    HEAPF32[$arrayidx60 >> 2] = $mul * +HEAPF32[$arrayidx60 >> 2];
    $mul64 = $mul10 * +HEAPF32[$Y >> 2];
    HEAPF32[$Y >> 2] = $mul64;
    $arrayidx66 = $Y + 4 | 0;
    HEAPF32[$arrayidx66 >> 2] = $mul10 * +HEAPF32[$arrayidx66 >> 2];
    $106 = +HEAPF32[$X >> 2];
    HEAPF32[$X >> 2] = $106 - $mul64;
    HEAPF32[$Y >> 2] = $106 + +HEAPF32[$Y >> 2];
    $108 = +HEAPF32[$arrayidx60 >> 2];
    HEAPF32[$arrayidx60 >> 2] = $108 - +HEAPF32[$arrayidx66 >> 2];
    HEAPF32[$arrayidx66 >> 2] = $108 + +HEAPF32[$arrayidx66 >> 2];
    $cm$1 = $call45;
   }
  } else {
   $div = ($69 - (HEAP32[$sctx + 12 >> 2] | 0) | 0) / 2 | 0;
   $spec$select = ($69 | 0) < ($div | 0) ? $69 : $div;
   $spec$select160 = ($spec$select | 0) > 0 ? $spec$select : 0;
   $sub110 = $69 - $spec$select160 | 0;
   $remaining_bits111 = $ctx + 32 | 0;
   $sub112 = (HEAP32[$remaining_bits111 >> 2] | 0) - $68 | 0;
   HEAP32[$remaining_bits111 >> 2] = $sub112;
   $114 = HEAP32[$fill$addr >> 2] | 0;
   if (($spec$select160 | 0) < ($sub110 | 0)) {
    $call133 = _quant_band($ctx, $Y, $N, $sub110, $B, 0, $LM, 0, $mul10, 0, $114 >> $B) | 0;
    $sub136 = (HEAP32[$remaining_bits111 >> 2] | 0) - $sub112 + $sub110 | 0;
    $cm$1 = _quant_band($ctx, $X, $N, (($67 | 0) != 16384 & ($sub136 | 0) > 24 ? $sub136 + -24 | 0 : 0) + $spec$select160 | 0, $B, $lowband, $LM, $lowband_out, 1.0, $lowband_scratch, $114) | 0 | $call133;
    break;
   } else {
    $call117 = _quant_band($ctx, $X, $N, $spec$select160, $B, $lowband, $LM, $lowband_out, 1.0, $lowband_scratch, $114) | 0;
    $sub120 = (HEAP32[$remaining_bits111 >> 2] | 0) - $sub112 + $spec$select160 | 0;
    $cm$1 = _quant_band($ctx, $Y, $N, (($67 | 0) != 0 & ($sub120 | 0) > 24 ? $sub120 + -24 | 0 : 0) + $sub110 | 0, $B, 0, $LM, 0, $mul10, 0, $114 >> $B) | 0 | $call117;
    break;
   }
  } while (0);
  if (!(HEAP32[$ctx + 4 >> 2] | 0)) {
   $retval$0 = $cm$1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  do if (!$cmp11) {
   $cmp11$i$i = ($N | 0) > 0;
   if ($cmp11$i$i) {
    $i$012$i$i = 0;
    $xy01$013$i$i = 0.0;
    $xy02$014$i$i = 0.0;
    while (1) {
     $118 = +HEAPF32[$Y + ($i$012$i$i << 2) >> 2];
     $add$i$i = $xy01$013$i$i + $118 * +HEAPF32[$X + ($i$012$i$i << 2) >> 2];
     $add5$i$i = $xy02$014$i$i + $118 * $118;
     $i$012$i$i = $i$012$i$i + 1 | 0;
     if (($i$012$i$i | 0) == ($N | 0)) {
      $xy01$0$lcssa$i$i = $add$i$i;
      $xy02$0$lcssa$i$i = $add5$i$i;
      break;
     } else {
      $xy01$013$i$i = $add$i$i;
      $xy02$014$i$i = $add5$i$i;
     }
    }
   } else {
    $xy01$0$lcssa$i$i = 0.0;
    $xy02$0$lcssa$i$i = 0.0;
   }
   $add$i156 = $mul * $mul + $xy02$0$lcssa$i$i;
   $mul2$i = $mul * $xy01$0$lcssa$i$i * 2.0;
   $sub$i157 = $add$i156 - $mul2$i;
   $add6$i = $add$i156 + $mul2$i;
   if ($add6$i < 6.000000284984708e-04 | $sub$i157 < 6.000000284984708e-04) {
    _memcpy($Y | 0, $X | 0, $N << 2 | 0) | 0;
    break;
   }
   $div$i = 1.0 / +Math_sqrt(+$sub$i157);
   $div14$i = 1.0 / +Math_sqrt(+$add6$i);
   if (!$cmp11$i$i) {
    $retval$0 = $cm$1;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $j$04$i = 0;
   do {
    $arrayidx$i = $X + ($j$04$i << 2) | 0;
    $mul17$i = $mul * +HEAPF32[$arrayidx$i >> 2];
    $arrayidx18$i = $Y + ($j$04$i << 2) | 0;
    $123 = +HEAPF32[$arrayidx18$i >> 2];
    HEAPF32[$arrayidx$i >> 2] = $div$i * ($mul17$i - $123);
    HEAPF32[$arrayidx18$i >> 2] = $div14$i * ($mul17$i + $123);
    $j$04$i = $j$04$i + 1 | 0;
   } while (($j$04$i | 0) != ($N | 0));
  } while (0);
  if (!(($64 | 0) != 0 & ($N | 0) > 0)) {
   $retval$0 = $cm$1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $j$0163 = 0;
  do {
   $arrayidx161 = $Y + ($j$0163 << 2) | 0;
   HEAPF32[$arrayidx161 >> 2] = -+HEAPF32[$arrayidx161 >> 2];
   $j$0163 = $j$0163 + 1 | 0;
  } while (($j$0163 | 0) != ($N | 0));
  $retval$0 = $cm$1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $cmp$i = ($Y | 0) == 0;
 $remaining_bits$i = $ctx + 32 | 0;
 $add$i = $cmp$i ? 1 : 2;
 $resynth1$i = $ctx + 4 | 0;
 $2 = HEAP32[$remaining_bits$i >> 2] | 0;
 $cmp3$us$peel$i = ($2 | 0) > 7;
 if (!$0) {
  if ($cmp3$us$peel$i) {
   $end_window$i = $1 + 12 | 0;
   $4 = HEAP32[$end_window$i >> 2] | 0;
   $nend_bits$i = $1 + 16 | 0;
   $5 = HEAP32[$nend_bits$i >> 2] | 0;
   if (!$5) {
    $end_offs$i$i = $1 + 8 | 0;
    $$pre$i = HEAP32[$end_offs$i$i >> 2] | 0;
    $$pre21$i = HEAP32[$1 + 4 >> 2] | 0;
    if ($$pre$i >>> 0 < $$pre21$i >>> 0) {
     $6 = HEAP32[$1 >> 2] | 0;
     $inc$i$i4 = $$pre$i + 1 | 0;
     HEAP32[$end_offs$i$i >> 2] = $inc$i$i4;
     $8 = $inc$i$i4;
     $cond$i$i = HEAPU8[$6 + ($$pre21$i - $inc$i$i4) >> 0] | 0;
    } else {
     $8 = $$pre$i;
     $cond$i$i = 0;
    }
    if ($8 >>> 0 < $$pre21$i >>> 0) {
     $133 = HEAP32[$1 >> 2] | 0;
     $inc$i$i4$1 = $8 + 1 | 0;
     HEAP32[$end_offs$i$i >> 2] = $inc$i$i4$1;
     $135 = $inc$i$i4$1;
     $cond$i$i$1 = (HEAPU8[$133 + ($$pre21$i - $inc$i$i4$1) >> 0] | 0) << 8;
    } else {
     $135 = $8;
     $cond$i$i$1 = 0;
    }
    if ($135 >>> 0 < $$pre21$i >>> 0) {
     $136 = HEAP32[$1 >> 2] | 0;
     $inc$i$i4$2 = $135 + 1 | 0;
     HEAP32[$end_offs$i$i >> 2] = $inc$i$i4$2;
     $138 = $inc$i$i4$2;
     $cond$i$i$2 = (HEAPU8[$136 + ($$pre21$i - $inc$i$i4$2) >> 0] | 0) << 16;
    } else {
     $138 = $135;
     $cond$i$i$2 = 0;
    }
    if ($138 >>> 0 < $$pre21$i >>> 0) {
     $139 = HEAP32[$1 >> 2] | 0;
     $inc$i$i4$3 = $138 + 1 | 0;
     HEAP32[$end_offs$i$i >> 2] = $inc$i$i4$3;
     $cond$i$i$3 = (HEAPU8[$139 + ($$pre21$i - $inc$i$i4$3) >> 0] | 0) << 24;
    } else $cond$i$i$3 = 0;
    $available$1$i = 32;
    $window$1$i = $cond$i$i$3 | ($cond$i$i$2 | ($cond$i$i$1 | ($cond$i$i | $4)));
   } else {
    $available$1$i = $5;
    $window$1$i = $4;
   }
   HEAP32[$end_window$i >> 2] = $window$1$i >>> 1;
   HEAP32[$nend_bits$i >> 2] = $available$1$i + -1;
   $nbits_total$i = $1 + 20 | 0;
   HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 1;
   $sub$us$peel$i = $2 + -8 | 0;
   HEAP32[$remaining_bits$i >> 2] = $sub$us$peel$i;
   $10 = HEAP32[$resynth1$i >> 2] | 0;
   if (!$10) {
    $149 = 0;
    $150 = $sub$us$peel$i;
   } else {
    $11 = ($window$1$i & 1 | 0) == 0 ? 1.0 : -1.0;
    $151 = $10;
    $152 = $sub$us$peel$i;
    label = 10;
   }
  } else {
   $3 = HEAP32[$resynth1$i >> 2] | 0;
   if (!$3) {
    $149 = 0;
    $150 = $2;
   } else {
    $11 = 1.0;
    $151 = $3;
    $152 = $2;
    label = 10;
   }
  }
  if ((label | 0) == 10) {
   HEAPF32[$X >> 2] = $11;
   $149 = $151;
   $150 = $152;
  }
  if (!$cmp$i) {
   $end_window$i9 = $1 + 12 | 0;
   $nend_bits$i10 = $1 + 16 | 0;
   $end_offs$i$i12 = $1 + 8 | 0;
   $storage$i$i13 = $1 + 4 | 0;
   $nbits_total$i40 = $1 + 20 | 0;
   $12 = $150;
   $13 = $149;
   $20 = $149;
   $c$0$us$i = 1;
   while (1) {
    if (($12 | 0) > 7) {
     $14 = HEAP32[$end_window$i9 >> 2] | 0;
     $15 = HEAP32[$nend_bits$i10 >> 2] | 0;
     if (!$15) {
      $$pre$i16 = HEAP32[$end_offs$i$i12 >> 2] | 0;
      $$pre21$i17 = HEAP32[$storage$i$i13 >> 2] | 0;
      if ($$pre$i16 >>> 0 < $$pre21$i17 >>> 0) {
       $16 = HEAP32[$1 >> 2] | 0;
       $inc$i$i23 = $$pre$i16 + 1 | 0;
       HEAP32[$end_offs$i$i12 >> 2] = $inc$i$i23;
       $18 = $inc$i$i23;
       $cond$i$i28 = HEAPU8[$16 + ($$pre21$i17 - $inc$i$i23) >> 0] | 0;
      } else {
       $18 = $$pre$i16;
       $cond$i$i28 = 0;
      }
      if ($18 >>> 0 < $$pre21$i17 >>> 0) {
       $125 = HEAP32[$1 >> 2] | 0;
       $inc$i$i23$1 = $18 + 1 | 0;
       HEAP32[$end_offs$i$i12 >> 2] = $inc$i$i23$1;
       $127 = $inc$i$i23$1;
       $cond$i$i28$1 = HEAPU8[$125 + ($$pre21$i17 - $inc$i$i23$1) >> 0] | 0;
      } else {
       $127 = $18;
       $cond$i$i28$1 = 0;
      }
      if ($127 >>> 0 < $$pre21$i17 >>> 0) {
       $128 = HEAP32[$1 >> 2] | 0;
       $inc$i$i23$2 = $127 + 1 | 0;
       HEAP32[$end_offs$i$i12 >> 2] = $inc$i$i23$2;
       $130 = $inc$i$i23$2;
       $cond$i$i28$2 = HEAPU8[$128 + ($$pre21$i17 - $inc$i$i23$2) >> 0] | 0;
      } else {
       $130 = $127;
       $cond$i$i28$2 = 0;
      }
      if ($130 >>> 0 < $$pre21$i17 >>> 0) {
       $131 = HEAP32[$1 >> 2] | 0;
       $inc$i$i23$3 = $130 + 1 | 0;
       HEAP32[$end_offs$i$i12 >> 2] = $inc$i$i23$3;
       $cond$i$i28$3 = HEAPU8[$131 + ($$pre21$i17 - $inc$i$i23$3) >> 0] | 0;
      } else $cond$i$i28$3 = 0;
      $available$1$i35 = 32;
      $window$1$i36 = $cond$i$i28$3 << 24 | ($cond$i$i28$2 << 16 | ($cond$i$i28$1 << 8 | ($cond$i$i28 | $14)));
     } else {
      $available$1$i35 = $15;
      $window$1$i36 = $14;
     }
     HEAP32[$end_window$i9 >> 2] = $window$1$i36 >>> 1;
     HEAP32[$nend_bits$i10 >> 2] = $available$1$i35 + -1;
     HEAP32[$nbits_total$i40 >> 2] = (HEAP32[$nbits_total$i40 >> 2] | 0) + 1;
     $sub$us$i = $12 + -8 | 0;
     HEAP32[$remaining_bits$i >> 2] = $sub$us$i;
     if (!$20) {
      $153 = 0;
      $154 = 0;
      $155 = $sub$us$i;
     } else {
      $156 = $20;
      $157 = $sub$us$i;
      $21 = ($window$1$i36 & 1 | 0) == 0 ? 1.0 : -1.0;
      label = 20;
     }
    } else if (!$13) {
     $153 = $20;
     $154 = 0;
     $155 = $12;
    } else {
     $156 = $13;
     $157 = $12;
     $21 = 1.0;
     label = 20;
    }
    if ((label | 0) == 20) {
     label = 0;
     HEAPF32[$Y >> 2] = $21;
     $153 = $20;
     $154 = $156;
     $155 = $157;
    }
    $c$0$us$i = $c$0$us$i + 1 | 0;
    if ($c$0$us$i >>> 0 >= $add$i >>> 0) break; else {
     $12 = $155;
     $13 = $154;
     $20 = $153;
    }
   }
  }
 } else {
  if ($cmp3$us$peel$i) {
   $cmp6$peel$i = +HEAPF32[$X >> 2] < 0.0;
   $conv7$peel$i = $cmp6$peel$i & 1;
   $end_window$i44 = $1 + 12 | 0;
   $24 = HEAP32[$end_window$i44 >> 2] | 0;
   $nend_bits$i45 = $1 + 16 | 0;
   $25 = HEAP32[$nend_bits$i45 >> 2] | 0;
   $add$i46 = $25 + 1 | 0;
   if ($add$i46 >>> 0 > 32) {
    $offs$i$i = $1 + 24 | 0;
    $end_offs$i$i49 = $1 + 8 | 0;
    $storage$i$i50 = $1 + 4 | 0;
    $error$i = $1 + 44 | 0;
    $26 = ~$25;
    $29 = $25 + (($26 | 0) > -16 ? $26 : -16) + 8 | 0;
    $used$0$i = $25;
    $window$0$i53 = $24;
    while (1) {
     $31 = HEAP32[$end_offs$i$i49 >> 2] | 0;
     $32 = HEAP32[$storage$i$i50 >> 2] | 0;
     if (($31 + (HEAP32[$offs$i$i >> 2] | 0) | 0) >>> 0 < $32 >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0;
      $inc$i$i58 = $31 + 1 | 0;
      HEAP32[$end_offs$i$i49 >> 2] = $inc$i$i58;
      HEAP8[$33 + ($32 - $inc$i$i58) >> 0] = $window$0$i53;
      $retval$0$i$i = 0;
     } else $retval$0$i$i = -1;
     HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i;
     $window$0$i53 = $window$0$i53 >>> 8;
     if (($used$0$i | 0) <= 15) break; else $used$0$i = $used$0$i + -8 | 0;
    }
    $37 = $25 + -8 - ($29 & -8) | 0;
    $39 = HEAP32[$remaining_bits$i >> 2] | 0;
    $add6$pre$phi$iZ2D = $37 + 1 | 0;
    $used$1$i = $37;
    $window$1$i66 = $window$0$i53;
   } else {
    $39 = $2;
    $add6$pre$phi$iZ2D = $add$i46;
    $used$1$i = $25;
    $window$1$i66 = $24;
   }
   HEAP32[$end_window$i44 >> 2] = $conv7$peel$i << $used$1$i | $window$1$i66;
   HEAP32[$nend_bits$i45 >> 2] = $add6$pre$phi$iZ2D;
   $nbits_total$i68 = $1 + 20 | 0;
   HEAP32[$nbits_total$i68 >> 2] = (HEAP32[$nbits_total$i68 >> 2] | 0) + 1;
   $sub$peel$i = $39 + -8 | 0;
   HEAP32[$remaining_bits$i >> 2] = $sub$peel$i;
   $40 = HEAP32[$resynth1$i >> 2] | 0;
   if (!$40) {
    $158 = 0;
    $159 = $sub$peel$i;
   } else {
    $160 = $40;
    $161 = $sub$peel$i;
    $41 = $cmp6$peel$i ? -1.0 : 1.0;
    label = 31;
   }
  } else {
   $22 = HEAP32[$resynth1$i >> 2] | 0;
   if (!$22) {
    $158 = 0;
    $159 = $2;
   } else {
    $160 = $22;
    $161 = $2;
    $41 = 1.0;
    label = 31;
   }
  }
  if ((label | 0) == 31) {
   HEAPF32[$X >> 2] = $41;
   $158 = $160;
   $159 = $161;
  }
  if (!$cmp$i) {
   $end_window$i69 = $1 + 12 | 0;
   $nend_bits$i70 = $1 + 16 | 0;
   $offs$i$i74 = $1 + 24 | 0;
   $end_offs$i$i75 = $1 + 8 | 0;
   $storage$i$i76 = $1 + 4 | 0;
   $error$i78 = $1 + 44 | 0;
   $nbits_total$i104 = $1 + 20 | 0;
   $162 = $158;
   $42 = $159;
   $43 = $158;
   $c$0$i = 1;
   while (1) {
    if (($42 | 0) > 7) {
     $cmp6$i = +HEAPF32[$Y >> 2] < 0.0;
     $conv7$i = $cmp6$i & 1;
     $45 = HEAP32[$end_window$i69 >> 2] | 0;
     $46 = HEAP32[$nend_bits$i70 >> 2] | 0;
     $add$i71 = $46 + 1 | 0;
     if ($add$i71 >>> 0 > 32) {
      $47 = ~$46;
      $50 = $46 + (($47 | 0) > -16 ? $47 : -16) + 8 | 0;
      $used$0$i82 = $46;
      $window$0$i81 = $45;
      while (1) {
       $52 = HEAP32[$end_offs$i$i75 >> 2] | 0;
       $53 = HEAP32[$storage$i$i76 >> 2] | 0;
       if (($52 + (HEAP32[$offs$i$i74 >> 2] | 0) | 0) >>> 0 < $53 >>> 0) {
        $54 = HEAP32[$1 >> 2] | 0;
        $inc$i$i87 = $52 + 1 | 0;
        HEAP32[$end_offs$i$i75 >> 2] = $inc$i$i87;
        HEAP8[$54 + ($53 - $inc$i$i87) >> 0] = $window$0$i81;
        $retval$0$i$i91 = 0;
       } else $retval$0$i$i91 = -1;
       HEAP32[$error$i78 >> 2] = HEAP32[$error$i78 >> 2] | $retval$0$i$i91;
       $window$0$i81 = $window$0$i81 >>> 8;
       if (($used$0$i82 | 0) <= 15) break; else $used$0$i82 = $used$0$i82 + -8 | 0;
      }
      $58 = $46 + -8 - ($50 & -8) | 0;
      $60 = HEAP32[$remaining_bits$i >> 2] | 0;
      $61 = HEAP32[$resynth1$i >> 2] | 0;
      $add6$pre$phi$i99Z2D = $58 + 1 | 0;
      $used$1$i101 = $58;
      $window$1$i100 = $window$0$i81;
     } else {
      $60 = $42;
      $61 = $162;
      $add6$pre$phi$i99Z2D = $add$i71;
      $used$1$i101 = $46;
      $window$1$i100 = $45;
     }
     HEAP32[$end_window$i69 >> 2] = $conv7$i << $used$1$i101 | $window$1$i100;
     HEAP32[$nend_bits$i70 >> 2] = $add6$pre$phi$i99Z2D;
     HEAP32[$nbits_total$i104 >> 2] = (HEAP32[$nbits_total$i104 >> 2] | 0) + 1;
     $sub$i = $60 + -8 | 0;
     HEAP32[$remaining_bits$i >> 2] = $sub$i;
     if (!$61) {
      $163 = 0;
      $164 = 0;
      $165 = $sub$i;
     } else {
      $166 = $61;
      $167 = $61;
      $168 = $sub$i;
      $62 = $cmp6$i ? -1.0 : 1.0;
      label = 43;
     }
    } else if (!$43) {
     $163 = $162;
     $164 = 0;
     $165 = $42;
    } else {
     $166 = $162;
     $167 = $43;
     $168 = $42;
     $62 = 1.0;
     label = 43;
    }
    if ((label | 0) == 43) {
     label = 0;
     HEAPF32[$Y >> 2] = $62;
     $163 = $166;
     $164 = $167;
     $165 = $168;
    }
    $c$0$i = $c$0$i + 1 | 0;
    if ($c$0$i >>> 0 >= $add$i >>> 0) break; else {
     $162 = $163;
     $42 = $165;
     $43 = $164;
    }
   }
  }
 }
 if (!$lowband_out) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$lowband_out >> 2] = HEAP32[$X >> 2];
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $1 = 0, $10 = 0, $100 = 0, $107 = 0, $114 = 0, $117 = 0, $118 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $132 = 0, $137 = 0, $143 = 0, $145 = 0, $148 = 0, $153 = 0, $158 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $58 = 0, $65 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $92 = 0, $96 = 0, $add$ptr = 0, $add350 = 0, $add393 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0, $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx34 = 0, $base$0 = 0, $c$0304 = 0, $call310 = 0, $call352 = 0, $call365 = 0, $call395 = 0, $call529 = 0.0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp202 = 0, $cmp223 = 0, $cmp304 = 0, $cmp32 = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0, $conv131 = 0, $conv238 = 0, $conv247 = 0, $conv289$pre$phiZ2D = 0, $conv35 = 0, $dest$0 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$0$ph$ph$phi = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr164 = 0, $incdec$ptr221 = 0, $incdec$ptr25 = 0, $incdec$ptr454 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $st = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub98 = 0, $tobool307 = 0, $tobool339 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $st = sp + 264 | 0;
 $scanset = sp;
 $wc = sp + 260 | 0;
 $$compoundliteral333 = sp + 272 | 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 L1 : do if (!($1 << 24 >> 24)) $matches$3 = 0; else {
  $rpos42 = $f + 4 | 0;
  $shend43 = $f + 104 | 0;
  $shcnt = $f + 120 | 0;
  $rend = $f + 8 | 0;
  $arrayidx213 = $scanset + 10 | 0;
  $arrayidx218 = $scanset + 33 | 0;
  $arrayidx239 = $scanset + 46 | 0;
  $arrayidx248 = $scanset + 94 | 0;
  $$compoundliteral$sroa$2$0$$sroa_idx8 = $st + 4 | 0;
  $176 = 0;
  $2 = $1;
  $20 = 0;
  $21 = 0;
  $matches$0308 = 0;
  $p$0312 = $fmt;
  $s$0306 = 0;
  L3 : while (1) {
   L5 : do if (!(_isspace($2 & 255) | 0)) {
    $cmp32 = $2 << 24 >> 24 == 37;
    L7 : do if ($cmp32) {
     $arrayidx34 = $p$0312 + 1 | 0;
     $26 = HEAP8[$arrayidx34 >> 0] | 0;
     L9 : do switch ($26 << 24 >> 24) {
     case 37:
      {
       break L7;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0312 + 2 | 0;
       break;
      }
     default:
      {
       $conv35 = $26 & 255;
       if (_isdigit($conv35) | 0) if ((HEAP8[$p$0312 + 2 >> 0] | 0) == 36) {
        $dest$0 = _arg_n($ap, $conv35 + -48 | 0) | 0;
        $p$2 = $p$0312 + 3 | 0;
        break L9;
       }
       $41 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $42 = HEAP32[$41 >> 2] | 0;
       HEAP32[$ap >> 2] = $41 + 4;
       $dest$0 = $42;
       $p$2 = $arrayidx34;
      }
     } while (0);
     $43 = HEAP8[$p$2 >> 0] | 0;
     if (!(_isdigit($43 & 255) | 0)) {
      $46 = $43;
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     } else {
      $44 = $43;
      $p$3299 = $p$2;
      $width$0300 = 0;
      while (1) {
       $sub98 = ($width$0300 * 10 | 0) + -48 + ($44 & 255) | 0;
       $incdec$ptr99 = $p$3299 + 1 | 0;
       $45 = HEAP8[$incdec$ptr99 >> 0] | 0;
       if (!(_isdigit($45 & 255) | 0)) {
        $46 = $45;
        $p$3$lcssa = $incdec$ptr99;
        $width$0$lcssa = $sub98;
        break;
       } else {
        $44 = $45;
        $p$3299 = $incdec$ptr99;
        $width$0300 = $sub98;
       }
      }
     }
     $incdec$ptr106 = $p$3$lcssa + 1 | 0;
     if ($46 << 24 >> 24 == 109) {
      $181 = 0;
      $47 = HEAP8[$incdec$ptr106 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $incdec$ptr109$pre$phiZZ2D = $p$3$lcssa + 2 | 0;
      $p$4 = $incdec$ptr106;
      $s$1 = 0;
     } else {
      $181 = $176;
      $47 = $46;
      $alloc$0 = 0;
      $incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0306;
     }
     switch ($47 << 24 >> 24) {
     case 104:
      {
       $cmp112 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 104;
       $p$5 = $cmp112 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp112 ? -2 : -1;
       break;
      }
     case 108:
      {
       $cmp120 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 108;
       $p$5 = $cmp120 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp120 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $182 = $181;
       $s$8 = $s$1;
       label = 141;
       break L3;
      }
     }
     $conv131 = HEAPU8[$p$5 >> 0] | 0;
     $cmp132 = ($conv131 & 47 | 0) == 3;
     $spec$select = $cmp132 ? $conv131 | 32 : $conv131;
     $spec$select219 = $cmp132 ? 1 : $size$0;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $168 = $20;
       $169 = $21;
       $width$1 = ($width$0$lcssa | 0) > 1 ? $width$0$lcssa : 1;
       break;
      }
     case 91:
      {
       $168 = $20;
       $169 = $21;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       _store_int($dest$0, $spec$select219, $20, $21);
       $177 = $181;
       $178 = $20;
       $179 = $21;
       $matches$1 = $matches$0308;
       $p$12 = $p$5;
       $s$7 = $s$1;
       break L5;
       break;
      }
     default:
      {
       ___shlim($f, 0, 0);
       do {
        $52 = HEAP32[$rpos42 >> 2] | 0;
        if ($52 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
         HEAP32[$rpos42 >> 2] = $52 + 1;
         $cond155 = HEAPU8[$52 >> 0] | 0;
        } else $cond155 = ___shgetc($f) | 0;
       } while ((_isspace($cond155) | 0) != 0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $65 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr164 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr164;
        $65 = $incdec$ptr164;
       }
       $58 = $shcnt;
       $sub$ptr$sub172 = $65 - (HEAP32[$rend >> 2] | 0) | 0;
       $68 = _i64Add(HEAP32[$58 >> 2] | 0, HEAP32[$58 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
       $70 = _i64Add($68 | 0, getTempRet0() | 0, $sub$ptr$sub172 | 0, (($sub$ptr$sub172 | 0) < 0) << 31 >> 31 | 0) | 0;
       $168 = $70;
       $169 = getTempRet0() | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     $73 = (($width$1 | 0) < 0) << 31 >> 31;
     ___shlim($f, $width$1, $73);
     $74 = HEAP32[$rpos42 >> 2] | 0;
     $75 = HEAP32[$shend43 >> 2] | 0;
     if ($74 >>> 0 < $75 >>> 0) {
      HEAP32[$rpos42 >> 2] = $74 + 1;
      $76 = $75;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $182 = $181;
       $s$8 = $s$1;
       label = 141;
       break L3;
      }
      $76 = HEAP32[$shend43 >> 2] | 0;
     }
     if ($76 | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
     L56 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $cmp202 = ($spec$select | 0) == 99;
       L58 : do if (($spec$select | 16 | 0) == 115) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$arrayidx218 >> 0] = 0;
         HEAP16[$arrayidx213 >> 1] = 0;
         HEAP16[$arrayidx213 + 2 >> 1] = 0;
         HEAP8[$arrayidx213 + 4 >> 0] = 0;
         $p$10 = $p$5;
        } else $p$10 = $p$5;
       } else {
        $incdec$ptr221 = $p$5 + 1 | 0;
        $cmp223 = (HEAP8[$incdec$ptr221 >> 0] | 0) == 94;
        $invert$0 = $cmp223 & 1;
        $p$6 = $cmp223 ? $p$5 + 2 | 0 : $incdec$ptr221;
        _memset($scanset | 0, $invert$0 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $conv238 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx239 >> 0] = $conv238;
          $conv289$pre$phiZ2D = $conv238;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        case 93:
         {
          $conv247 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx248 >> 0] = $conv247;
          $conv289$pre$phiZ2D = $conv247;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        default:
         {
          $conv289$pre$phiZ2D = ($invert$0 ^ 1) & 255;
          $p$7 = $p$6;
         }
        }
        $p$8 = $p$7;
        while (1) {
         $82 = HEAP8[$p$8 >> 0] | 0;
         L69 : do switch ($82 << 24 >> 24) {
         case 0:
          {
           $182 = $181;
           $s$8 = $s$1;
           label = 141;
           break L3;
           break;
          }
         case 93:
          {
           $p$10 = $p$8;
           break L58;
           break;
          }
         case 45:
          {
           $arrayidx263 = $p$8 + 1 | 0;
           $83 = HEAP8[$arrayidx263 >> 0] | 0;
           switch ($83 << 24 >> 24) {
           case 93:
           case 0:
            {
             $86 = 45;
             $p$9 = $p$8;
             break L69;
             break;
            }
           default:
            {}
           }
           $84 = HEAP8[$p$8 + -1 >> 0] | 0;
           if (($84 & 255) < ($83 & 255)) {
            $c$0304 = $84 & 255;
            do {
             $c$0304 = $c$0304 + 1 | 0;
             HEAP8[$scanset + $c$0304 >> 0] = $conv289$pre$phiZ2D;
             $85 = HEAP8[$arrayidx263 >> 0] | 0;
            } while ($c$0304 >>> 0 < ($85 & 255) >>> 0);
            $86 = $85;
            $p$9 = $arrayidx263;
           } else {
            $86 = $83;
            $p$9 = $arrayidx263;
           }
           break;
          }
         default:
          {
           $86 = $82;
           $p$9 = $p$8;
          }
         } while (0);
         HEAP8[$scanset + (($86 & 255) + 1) >> 0] = $conv289$pre$phiZ2D;
         $p$8 = $p$9 + 1 | 0;
        }
       } while (0);
       $cond303 = $cmp202 ? $width$1 + 1 | 0 : 31;
       $cmp304 = ($spec$select219 | 0) == 1;
       $tobool307 = ($alloc$0 | 0) != 0;
       L77 : do if ($cmp304) {
        if ($tobool307) {
         $call310 = _malloc($cond303 << 2) | 0;
         if (!$call310) {
          $182 = 0;
          $s$8 = 0;
          label = 141;
          break L3;
         } else $184 = $call310;
        } else $184 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8 >> 2] = 0;
        $$ph$ph = $184;
        $i$0$ph$ph = 0;
        $k$0$ph$ph = $cond303;
        L82 : while (1) {
         $tobool339 = ($$ph$ph | 0) == 0;
         $i$0$ph = $i$0$ph$ph;
         while (1) {
          L86 : while (1) {
           $87 = HEAP32[$rpos42 >> 2] | 0;
           if ($87 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $87 + 1;
            $cond328 = HEAPU8[$87 >> 0] | 0;
           } else $cond328 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond328 + 1) >> 0] | 0)) break L82;
           HEAP8[$$compoundliteral333 >> 0] = $cond328;
           switch (_mbrtowc($wc, $$compoundliteral333, 1, $st) | 0) {
           case -1:
            {
             $182 = $$ph$ph;
             $s$8 = 0;
             label = 141;
             break L3;
             break;
            }
           case -2:
            break;
           default:
            break L86;
           }
          }
          if ($tobool339) $i$1 = $i$0$ph; else {
           HEAP32[$$ph$ph + ($i$0$ph << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph + 1 | 0;
          }
          if ($tobool307 & ($i$1 | 0) == ($k$0$ph$ph | 0)) break; else $i$0$ph = $i$1;
         }
         $add350 = $k$0$ph$ph << 1 | 1;
         $call352 = _realloc($$ph$ph, $add350 << 2) | 0;
         if (!$call352) {
          $182 = $$ph$ph;
          $s$8 = 0;
          label = 141;
          break L3;
         } else {
          $i$0$ph$ph$phi = $k$0$ph$ph;
          $$ph$ph = $call352;
          $k$0$ph$ph = $add350;
          $i$0$ph$ph = $i$0$ph$ph$phi;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $182 = $$ph$ph;
         $s$8 = 0;
         label = 141;
         break L3;
        } else {
         $185 = $$ph$ph;
         $i$4 = $i$0$ph;
         $s$5 = 0;
         $wcs$6 = $$ph$ph;
        }
       } else {
        if ($tobool307) {
         $call365 = _malloc($cond303) | 0;
         if (!$call365) {
          $182 = 0;
          $s$8 = 0;
          label = 141;
          break L3;
         }
         $i$2$ph = 0;
         $k$2$ph = $cond303;
         $s$2$ph = $call365;
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $92 = HEAP32[$rpos42 >> 2] | 0;
           if ($92 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $92 + 1;
            $cond381 = HEAPU8[$92 >> 0] | 0;
           } else $cond381 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond381 + 1) >> 0] | 0)) {
            $185 = 0;
            $i$4 = $i$2;
            $s$5 = $s$2$ph;
            $wcs$6 = 0;
            break L77;
           }
           HEAP8[$s$2$ph + $i$2 >> 0] = $cond381;
           $i$2 = $i$2 + 1 | 0;
          } while (($i$2 | 0) != ($k$2$ph | 0));
          $add393 = $k$2$ph << 1 | 1;
          $call395 = _realloc($s$2$ph, $add393) | 0;
          if (!$call395) {
           $182 = 0;
           $s$8 = $s$2$ph;
           label = 141;
           break L3;
          } else {
           $i$2$ph$phi = $k$2$ph;
           $k$2$ph = $add393;
           $s$2$ph = $call395;
           $i$2$ph = $i$2$ph$phi;
          }
         }
        }
        if (!$dest$0) while (1) {
         $100 = HEAP32[$rpos42 >> 2] | 0;
         if ($100 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $100 + 1;
          $cond441 = HEAPU8[$100 >> 0] | 0;
         } else $cond441 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond441 + 1) >> 0] | 0)) {
          $185 = 0;
          $i$4 = 0;
          $s$5 = 0;
          $wcs$6 = 0;
          break L77;
         }
        }
        $i$3 = 0;
        while (1) {
         $96 = HEAP32[$rpos42 >> 2] | 0;
         if ($96 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $96 + 1;
          $cond419 = HEAPU8[$96 >> 0] | 0;
         } else $cond419 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond419 + 1) >> 0] | 0)) {
          $185 = 0;
          $i$4 = $i$3;
          $s$5 = $dest$0;
          $wcs$6 = 0;
          break L77;
         }
         HEAP8[$dest$0 + $i$3 >> 0] = $cond419;
         $i$3 = $i$3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $114 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr454 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr454;
        $114 = $incdec$ptr454;
       }
       $107 = $shcnt;
       $sub$ptr$sub462 = $114 - (HEAP32[$rend >> 2] | 0) | 0;
       $117 = _i64Add(HEAP32[$107 >> 2] | 0, HEAP32[$107 + 4 >> 2] | 0, $sub$ptr$sub462 | 0, (($sub$ptr$sub462 | 0) < 0) << 31 >> 31 | 0) | 0;
       $118 = getTempRet0() | 0;
       if (($117 | 0) == 0 & ($118 | 0) == 0) {
        $175 = $185;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L3;
       }
       if (!(($117 | 0) == ($width$1 | 0) & ($118 | 0) == ($73 | 0) | $cmp202 ^ 1)) {
        $175 = $185;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L3;
       }
       do if ($tobool307) if ($cmp304) {
        HEAP32[$dest$0 >> 2] = $wcs$6;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$5;
        break;
       } while (0);
       if ($cmp202) {
        $183 = $185;
        $p$11 = $p$10;
        $s$6 = $s$5;
       } else {
        if ($wcs$6 | 0) HEAP32[$wcs$6 + ($i$4 << 2) >> 2] = 0;
        if (!$s$5) {
         $183 = $185;
         $p$11 = $p$10;
         $s$6 = 0;
         break L56;
        }
        HEAP8[$s$5 + $i$4 >> 0] = 0;
        $183 = $185;
        $p$11 = $p$10;
        $s$6 = $s$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 129;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 129;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 129;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 129;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $call529 = +___floatscan($f, $spec$select219, 0);
       $143 = $shcnt;
       $145 = HEAP32[$143 >> 2] | 0;
       $148 = HEAP32[$143 + 4 >> 2] | 0;
       $sub$ptr$sub535 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
       $153 = _i64Subtract(0, 0, $sub$ptr$sub535 | 0, (($sub$ptr$sub535 | 0) < 0) << 31 >> 31 | 0) | 0;
       if (($145 | 0) == ($153 | 0) & ($148 | 0) == (getTempRet0() | 0)) {
        $175 = $181;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$1;
        break L3;
       }
       if (!$dest$0) {
        $183 = $181;
        $p$11 = $p$5;
        $s$6 = $s$1;
       } else switch ($spec$select219 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $call529;
         $183 = $181;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L56;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $183 = $181;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L56;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $183 = $181;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L56;
         break;
        }
       default:
        {
         $183 = $181;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L56;
        }
       }
       break;
      }
     default:
      {
       $183 = $181;
       $p$11 = $p$5;
       $s$6 = $s$1;
      }
     } while (0);
     do if ((label | 0) == 129) {
      label = 0;
      $125 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      $126 = getTempRet0() | 0;
      $127 = $shcnt;
      $129 = HEAP32[$127 >> 2] | 0;
      $132 = HEAP32[$127 + 4 >> 2] | 0;
      $sub$ptr$sub514 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
      $137 = _i64Subtract(0, 0, $sub$ptr$sub514 | 0, (($sub$ptr$sub514 | 0) < 0) << 31 >> 31 | 0) | 0;
      if (($129 | 0) == ($137 | 0) & ($132 | 0) == (getTempRet0() | 0)) {
       $175 = $181;
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0308;
       $s$10 = $s$1;
       break L3;
      }
      if (($dest$0 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $125;
       $183 = $181;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      } else {
       _store_int($dest$0, $spec$select219, $125, $126);
       $183 = $181;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      }
     } while (0);
     $158 = $shcnt;
     $sub$ptr$sub555 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
     $170 = _i64Add(HEAP32[$158 >> 2] | 0, HEAP32[$158 + 4 >> 2] | 0, $168 | 0, $169 | 0) | 0;
     $172 = _i64Add($170 | 0, getTempRet0() | 0, $sub$ptr$sub555 | 0, (($sub$ptr$sub555 | 0) < 0) << 31 >> 31 | 0) | 0;
     $177 = $183;
     $178 = $172;
     $179 = getTempRet0() | 0;
     $matches$1 = $matches$0308 + (($dest$0 | 0) != 0 & 1) | 0;
     $p$12 = $p$11;
     $s$7 = $s$6;
     break L5;
    } while (0);
    $add$ptr = $p$0312 + ($cmp32 & 1) | 0;
    ___shlim($f, 0, 0);
    $27 = HEAP32[$rpos42 >> 2] | 0;
    if ($27 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
     HEAP32[$rpos42 >> 2] = $27 + 1;
     $cond53 = HEAPU8[$27 >> 0] | 0;
    } else $cond53 = ___shgetc($f) | 0;
    if (($cond53 | 0) != (HEAPU8[$add$ptr >> 0] | 0)) {
     label = 21;
     break L3;
    }
    $33 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0;
    $177 = $176;
    $178 = $33;
    $179 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $add$ptr;
    $s$7 = $s$0306;
   } else {
    $p$1 = $p$0312;
    while (1) {
     $arrayidx = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$arrayidx >> 0] | 0) | 0)) break; else $p$1 = $arrayidx;
    }
    ___shlim($f, 0, 0);
    do {
     $4 = HEAP32[$rpos42 >> 2] | 0;
     if ($4 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
      HEAP32[$rpos42 >> 2] = $4 + 1;
      $cond16 = HEAPU8[$4 >> 0] | 0;
     } else $cond16 = ___shgetc($f) | 0;
    } while ((_isspace($cond16) | 0) != 0);
    if (!(HEAP32[$shend43 >> 2] | 0)) $17 = HEAP32[$rpos42 >> 2] | 0; else {
     $incdec$ptr25 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
     HEAP32[$rpos42 >> 2] = $incdec$ptr25;
     $17 = $incdec$ptr25;
    }
    $10 = $shcnt;
    $sub$ptr$sub = $17 - (HEAP32[$rend >> 2] | 0) | 0;
    $22 = _i64Add(HEAP32[$10 >> 2] | 0, HEAP32[$10 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
    $24 = _i64Add($22 | 0, getTempRet0() | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
    $177 = $176;
    $178 = $24;
    $179 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $p$1;
    $s$7 = $s$0306;
   } while (0);
   $p$0312 = $p$12 + 1 | 0;
   $2 = HEAP8[$p$0312 >> 0] | 0;
   if (!($2 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L1;
   } else {
    $176 = $177;
    $20 = $178;
    $21 = $179;
    $matches$0308 = $matches$1;
    $s$0306 = $s$7;
   }
  }
  if ((label | 0) == 21) {
   if (HEAP32[$shend43 >> 2] | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
   if (($matches$0308 | 0) != 0 | ($cond53 | 0) > -1) {
    $matches$3 = $matches$0308;
    break;
   } else {
    $180 = $176;
    $alloc$1 = 0;
    $s$9 = $s$0306;
    label = 142;
   }
  } else if ((label | 0) == 141) if (!$matches$0308) {
   $180 = $182;
   $alloc$1 = $alloc$0;
   $s$9 = $s$8;
   label = 142;
  } else {
   $175 = $182;
   $alloc$2 = $alloc$0;
   $matches$2 = $matches$0308;
   $s$10 = $s$8;
  }
  if ((label | 0) == 142) {
   $175 = $180;
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$10 = $s$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$10);
   _free($175);
   $matches$3 = $matches$2;
  }
 } while (0);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _silk_decode_frame($psDec, $psRangeDec, $pOut, $pN, $lostFlag, $condCoding) {
 $psDec = $psDec | 0;
 $psRangeDec = $psRangeDec | 0;
 $pOut = $pOut | 0;
 $pN = $pN | 0;
 $lostFlag = $lostFlag | 0;
 $condCoding = $condCoding | 0;
 var $$off = 0, $$pr = 0, $$pre$i = 0, $$sink$i = 0, $0 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $13 = 0, $20 = 0, $24 = 0, $26 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $9 = 0, $91 = 0, $94 = 0, $95 = 0, $LPC_order$i = 0, $LTPCoef_Q1443$i$i = 0, $LTP_Gain_Q14$0$lcssa$i$i = 0, $LTP_Gain_Q14$083$i$i = 0, $LTP_Gain_Q14$1$i$i = 0, $LTP_scale_Q14 = 0, $Lag_CB_ptr$0$i$i = 0, $LastGainIndex$i = 0, $NLSFInterpCoef_Q2$i = 0, $PredCoef_Q12$i = 0, $add$i$i = 0, $add$i12$i = 0, $add14$sink$i$i = 0, $add21$4$i$i = 0, $add26$i$i = 0, $add26$us$i$i = 0, $add39$i$i = 0, $add9$i41$i = 0, $and$i$i = 0, $arraydecay$i$i = 0, $arraydecay106$i$i = 0, $arraydecay5$i = 0, $arrayidx$i = 0, $arrayidx$i19$i = 0, $arrayidx$i32$i = 0, $arrayidx11$i$i = 0, $arrayidx11$i$i$c = 0, $arrayidx11$i46$i = 0, $arrayidx33$i$i = 0, $arrayidx47$i$i = 0, $arrayidx51 = 0, $cbk_size$0$i$i = 0, $chirp_Q16$addr$0$lcssa$i45$i = 0, $chirp_Q16$addr$015$i$i = 0, $chirp_Q16$addr$015$i30$i = 0, $cmp1$i5$i = 0, $cmp13$i$i = 0, $cmp57$i$i = 0, $conc_energy18$i = 0, $conc_energy7$i = 0, $cond$i$i$i22 = 0, $cond$i21$i$i = 0, $cond31$i$i = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i16 = 0, $conv$i$i49 = 0, $conv$i32 = 0, $conv15$i$i = 0, $conv16$i$i = 0, $conv20$i = 0, $conv23$i = 0, $conv23$i$i = 0, $conv32$i$i23 = 0, $conv38$i$i = 0, $conv5$i$i = 0, $conv53$i$i = 0, $conv7$i$i = 0, $div$i = 0, $energy$i$0 = 0, $first_frame_after_reset$i = 0, $frame_length = 0, $fs_kHz$i = 0, $fs_kHz$i37$pre$phiZZ2D = 0, $fs_kHz1$i = 0, $fs_kHz1$i38 = 0, $gain_Q16$044$i = 0, $i$0$lcssa$i$i = 0, $i$014$i$i = 0, $i$014$i31$i = 0, $i$043$i = 0, $i$058$i$i = 0, $i$066$i = 0, $i$1$lcssa$i$i = 0, $i$154$i$i = 0, $j$082$i$i = 0, $k$024$i$i = 0, $k$038$i$i = 0, $k$038$us$i$i = 0, $k$064$i = 0, $lagPrev = 0, $last_frame_lost2$i = 0, $lossCnt$i = 0, $lossCnt$i6 = 0, $mul$i$i17 = 0, $mul$i10$i = 0, $mul18$i$i54 = 0, $mul18$i11$i = 0, $mul35$i$i = 0, $mul44$i = 0, $mul50$i$pre$phiZZ2D = 0, $mul84$i = 0, $mul89$i = 0, $nFramesDecoded = 0, $nFramesDecoded7$pre$phiZ2D = 0, $nb_subfr = 0, $nb_subfr$i = 0, $nrg$0$lcssa$i$i = 0, $nrg$059$i$i = 0, $nrg$1$i$i = 0, $nrg$2$lcssa$i$i = 0, $nrg$255$i$i = 0, $nrg$3$i$i = 0, $pNLSF0_Q15$i = 0, $pNLSF_Q15$i = 0, $prevSignalType$i$i = 0, $psDecCtrl = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i31 = 0, $sPLC$i$i = 0, $sext$i$i = 0, $shl$i2$i = 0, $shl$i26 = 0, $shl34$i = 0, $shr18$i$i = 0, $shr22$pn$i$i = 0, $shr27$i = 0, $shr3$i$i = 0, $signalType = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i$i$i$i = 0, $sub$i$i12 = 0, $sub1$i$i = 0, $sub17$i$i = 0, $sub24$i$i = 0, $sub25$i = 0, $sub28$i$i53 = 0, $sub39 = 0, $sub50 = 0, $sub77$i$i = 0, $subfr_length$i7$i = 0, $subfr_length117$pre$phi$i$iZ2D = 0, $vla = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $pNLSF_Q15$i = sp + 176 | 0;
 $pNLSF0_Q15$i = sp + 144 | 0;
 $psDecCtrl = sp;
 $frame_length = $psDec + 2328 | 0;
 $0 = HEAP32[$frame_length >> 2] | 0;
 $LTP_scale_Q14 = $psDecCtrl + 136 | 0;
 HEAP32[$LTP_scale_Q14 >> 2] = 0;
 $$off = $0 + -1 | 0;
 if ($$off >>> 0 >= 320) _celt_fatal(50146, 50195, 58);
 switch ($lostFlag | 0) {
 case 0:
  {
   $nFramesDecoded7$pre$phiZ2D = $psDec + 2388 | 0;
   label = 6;
   break;
  }
 case 2:
  {
   $nFramesDecoded = $psDec + 2388 | 0;
   if ((HEAP32[$psDec + 2420 + (HEAP32[$nFramesDecoded >> 2] << 2) >> 2] | 0) == 1) {
    $nFramesDecoded7$pre$phiZ2D = $nFramesDecoded;
    label = 6;
   } else label = 71;
   break;
  }
 default:
  label = 71;
 }
 do if ((label | 0) == 6) {
  $4 = _llvm_stacksave() | 0;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * (($0 + 15 & -16) << 1) | 0) + 15 & -16) | 0;
  _silk_decode_indices($psDec, $psRangeDec, HEAP32[$nFramesDecoded7$pre$phiZ2D >> 2] | 0, $lostFlag, $condCoding);
  $signalType = $psDec + 2765 | 0;
  _silk_decode_pulses($psRangeDec, $vla, HEAP8[$signalType >> 0] | 0, HEAP8[$psDec + 2766 >> 0] | 0, HEAP32[$frame_length >> 2] | 0);
  $LastGainIndex$i = $psDec + 2312 | 0;
  $conv$i = ($condCoding | 0) == 2 & 1;
  $nb_subfr$i = $psDec + 2324 | 0;
  $9 = HEAP32[$nb_subfr$i >> 2] | 0;
  if (($9 | 0) > 0) {
   $13 = HEAP8[$LastGainIndex$i >> 0] | 0;
   $k$024$i$i = 0;
   do {
    $conv$i$i = HEAP8[$psDec + 2736 + $k$024$i$i >> 0] | 0;
    do if (!($k$024$i$i | $conv$i)) {
     $sub$i$i = ($13 << 24 >> 24) + -16 | 0;
     $add14$sink$i$i = ($sub$i$i | 0) < ($conv$i$i | 0) ? $conv$i$i : $sub$i$i;
    } else {
     $add$i$i = $conv$i$i + -4 | 0;
     $conv7$i$i = $13 << 24 >> 24;
     if (($add$i$i | 0) > ($conv7$i$i + 8 | 0)) {
      $add14$sink$i$i = ($add$i$i << 1) + 248 | 0;
      break;
     } else {
      $add14$sink$i$i = $add$i$i + $conv7$i$i | 0;
      break;
     }
    } while (0);
    $conv15$i$i = $add14$sink$i$i & 255;
    $cond31$i$i = $conv15$i$i << 24 >> 24 > 63 ? 63 : $conv15$i$i << 24 >> 24 > 0 ? $add14$sink$i$i & 255 : 0;
    $13 = $cond31$i$i & 255;
    $add39$i$i = ($cond31$i$i * 29 | 0) + 2090 + (($cond31$i$i * 7281 | 0) >>> 16) | 0;
    $cond$i21$i$i = $add39$i$i >>> 0 < 3967 ? $add39$i$i : 3967;
    if (($cond$i21$i$i | 0) > 3966) $retval$0$i$i = 2147483647; else {
     $shr18$i$i = $cond$i21$i$i >>> 7;
     $shl$i2$i = 1 << $shr18$i$i;
     $and$i$i = $cond$i21$i$i & 127;
     if (($cond$i21$i$i | 0) < 2048) $shr22$pn$i$i = ((Math_imul(Math_imul($and$i$i, -174) | 0, 128 - $and$i$i | 0) | 0) >> 16) + $and$i$i << $shr18$i$i >> 7; else $shr22$pn$i$i = Math_imul(((Math_imul(Math_imul($and$i$i, -174) | 0, 128 - $and$i$i | 0) | 0) >> 16) + $and$i$i | 0, $shl$i2$i >> 7) | 0;
     $retval$0$i$i = $shr22$pn$i$i + $shl$i2$i | 0;
    }
    HEAP32[$psDecCtrl + 16 + ($k$024$i$i << 2) >> 2] = $retval$0$i$i;
    $k$024$i$i = $k$024$i$i + 1 | 0;
   } while (($k$024$i$i | 0) != ($9 | 0));
   HEAP8[$LastGainIndex$i >> 0] = $13;
  }
  _silk_NLSF_decode($pNLSF_Q15$i, $psDec + 2744 | 0, HEAP32[$psDec + 2732 >> 2] | 0);
  $PredCoef_Q12$i = $psDecCtrl + 32 | 0;
  $arraydecay5$i = $psDecCtrl + 64 | 0;
  $LPC_order$i = $psDec + 2340 | 0;
  _silk_NLSF2A($arraydecay5$i, $pNLSF_Q15$i, HEAP32[$LPC_order$i >> 2] | 0);
  $first_frame_after_reset$i = $psDec + 2376 | 0;
  $NLSFInterpCoef_Q2$i = $psDec + 2767 | 0;
  if ((HEAP32[$first_frame_after_reset$i >> 2] | 0) == 1) {
   HEAP8[$NLSFInterpCoef_Q2$i >> 0] = 4;
   label = 27;
  } else {
   $$pre$i = HEAP8[$NLSFInterpCoef_Q2$i >> 0] | 0;
   if ($$pre$i << 24 >> 24 < 4) {
    $20 = HEAP32[$LPC_order$i >> 2] | 0;
    if (($20 | 0) > 0) {
     $conv23$i = $$pre$i << 24 >> 24;
     $i$066$i = 0;
     do {
      $conv20$i = HEAP16[$psDec + 2344 + ($i$066$i << 1) >> 1] | 0;
      HEAP16[$pNLSF0_Q15$i + ($i$066$i << 1) >> 1] = ((Math_imul((HEAP16[$pNLSF_Q15$i + ($i$066$i << 1) >> 1] | 0) - $conv20$i | 0, $conv23$i) | 0) >>> 2) + $conv20$i;
      $i$066$i = $i$066$i + 1 | 0;
     } while (($i$066$i | 0) != ($20 | 0));
    }
    _silk_NLSF2A($PredCoef_Q12$i, $pNLSF0_Q15$i, $20);
    $$pr = HEAP32[$LPC_order$i >> 2] | 0;
    $26 = $$pr;
    $mul50$i$pre$phiZZ2D = $$pr << 1;
   } else label = 27;
  }
  if ((label | 0) == 27) {
   $24 = HEAP32[$LPC_order$i >> 2] | 0;
   $mul44$i = $24 << 1;
   _memcpy($PredCoef_Q12$i | 0, $arraydecay5$i | 0, $mul44$i | 0) | 0;
   $26 = $24;
   $mul50$i$pre$phiZZ2D = $mul44$i;
  }
  _memcpy($psDec + 2344 | 0, $pNLSF_Q15$i | 0, $mul50$i$pre$phiZZ2D | 0) | 0;
  $lossCnt$i = $psDec + 4160 | 0;
  if (HEAP32[$lossCnt$i >> 2] | 0) {
   $sub1$i$i = $26 + -1 | 0;
   $cmp13$i$i = ($26 | 0) > 1;
   if ($cmp13$i$i) {
    $chirp_Q16$addr$015$i$i = 63570;
    $i$014$i$i = 0;
    do {
     $arrayidx$i19$i = $psDecCtrl + 32 + ($i$014$i$i << 1) | 0;
     HEAP16[$arrayidx$i19$i >> 1] = (((Math_imul($chirp_Q16$addr$015$i$i, HEAP16[$arrayidx$i19$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
     $chirp_Q16$addr$015$i$i = (((Math_imul($chirp_Q16$addr$015$i$i, -1966) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$015$i$i | 0;
     $i$014$i$i = $i$014$i$i + 1 | 0;
    } while (($i$014$i$i | 0) != ($sub1$i$i | 0));
    $arrayidx11$i$i = $psDecCtrl + 32 + ($sub1$i$i << 1) | 0;
    HEAP16[$arrayidx11$i$i >> 1] = (((Math_imul($chirp_Q16$addr$015$i$i, HEAP16[$arrayidx11$i$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
    if ($cmp13$i$i) {
     $chirp_Q16$addr$015$i30$i = 63570;
     $i$014$i31$i = 0;
     while (1) {
      $arrayidx$i32$i = $psDecCtrl + 64 + ($i$014$i31$i << 1) | 0;
      HEAP16[$arrayidx$i32$i >> 1] = (((Math_imul($chirp_Q16$addr$015$i30$i, HEAP16[$arrayidx$i32$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
      $add9$i41$i = (((Math_imul($chirp_Q16$addr$015$i30$i, -1966) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$015$i30$i | 0;
      $i$014$i31$i = $i$014$i31$i + 1 | 0;
      if (($i$014$i31$i | 0) == ($sub1$i$i | 0)) {
       $chirp_Q16$addr$0$lcssa$i45$i = $add9$i41$i;
       break;
      } else $chirp_Q16$addr$015$i30$i = $add9$i41$i;
     }
    } else $chirp_Q16$addr$0$lcssa$i45$i = 63570;
   } else {
    $arrayidx11$i$i$c = $psDecCtrl + 32 + ($sub1$i$i << 1) | 0;
    HEAP16[$arrayidx11$i$i$c >> 1] = ((((HEAP16[$arrayidx11$i$i$c >> 1] | 0) * 63570 | 0) >>> 15) + 1 | 0) >>> 1;
    $chirp_Q16$addr$0$lcssa$i45$i = 63570;
   }
   $arrayidx11$i46$i = $psDecCtrl + 64 + ($sub1$i$i << 1) | 0;
   HEAP16[$arrayidx11$i46$i >> 1] = (((Math_imul($chirp_Q16$addr$0$lcssa$i45$i, HEAP16[$arrayidx11$i46$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
  }
  if ((HEAP8[$signalType >> 0] | 0) == 2) {
   $43 = HEAP16[$psDec + 2762 >> 1] | 0;
   $44 = HEAP8[$psDec + 2764 >> 0] | 0;
   $fs_kHz$i = $psDec + 2316 | 0;
   $45 = HEAP32[$fs_kHz$i >> 2] | 0;
   $46 = HEAP32[$nb_subfr$i >> 2] | 0;
   $cmp1$i5$i = ($46 | 0) == 4;
   if (($45 | 0) == 8) if ($cmp1$i5$i) {
    $Lag_CB_ptr$0$i$i = 27072;
    $cbk_size$0$i$i = 11;
   } else if (($46 | 0) == 2) {
    $Lag_CB_ptr$0$i$i = 53216;
    $cbk_size$0$i$i = 3;
   } else _celt_fatal(54970, 52942, 54); else if ($cmp1$i5$i) {
    $Lag_CB_ptr$0$i$i = 27120;
    $cbk_size$0$i$i = 34;
   } else if (($46 | 0) == 2) {
    $Lag_CB_ptr$0$i$i = 27040;
    $cbk_size$0$i$i = 12;
   } else _celt_fatal(54970, 52942, 63);
   $sext$i$i = $45 << 16;
   $mul$i10$i = $sext$i$i >> 15;
   $mul18$i11$i = ($sext$i$i >> 16) * 18 | 0;
   $add$i12$i = $mul$i10$i + ($43 << 16 >> 16) | 0;
   $conv23$i$i = $44 << 24 >> 24;
   if (($mul$i10$i | 0) > ($mul18$i11$i | 0)) {
    $k$038$us$i$i = 0;
    do {
     $add26$us$i$i = $add$i12$i + (HEAP8[$Lag_CB_ptr$0$i$i + ((Math_imul($k$038$us$i$i, $cbk_size$0$i$i) | 0) + $conv23$i$i) >> 0] | 0) | 0;
     HEAP32[$psDecCtrl + ($k$038$us$i$i << 2) >> 2] = ($add26$us$i$i | 0) > ($mul$i10$i | 0) ? $mul$i10$i : ($add26$us$i$i | 0) < ($mul18$i11$i | 0) ? $mul18$i11$i : $add26$us$i$i;
     $k$038$us$i$i = $k$038$us$i$i + 1 | 0;
    } while (($k$038$us$i$i | 0) != ($46 | 0));
   } else {
    $k$038$i$i = 0;
    do {
     $add26$i$i = $add$i12$i + (HEAP8[$Lag_CB_ptr$0$i$i + ((Math_imul($k$038$i$i, $cbk_size$0$i$i) | 0) + $conv23$i$i) >> 0] | 0) | 0;
     HEAP32[$psDecCtrl + ($k$038$i$i << 2) >> 2] = ($add26$i$i | 0) > ($mul18$i11$i | 0) ? $mul18$i11$i : ($add26$i$i | 0) < ($mul$i10$i | 0) ? $mul$i10$i : $add26$i$i;
     $k$038$i$i = $k$038$i$i + 1 | 0;
    } while (($k$038$i$i | 0) != ($46 | 0));
   }
   $50 = HEAP32[44008 + (HEAP8[$psDec + 2768 >> 0] << 2) >> 2] | 0;
   if (($46 | 0) > 0) {
    $k$064$i = 0;
    do {
     $mul84$i = (HEAP8[$psDec + 2740 + $k$064$i >> 0] | 0) * 5 | 0;
     $mul89$i = $k$064$i * 5 | 0;
     HEAP16[$psDecCtrl + 96 + ($mul89$i << 1) >> 1] = HEAP8[$50 + $mul84$i >> 0] << 7;
     HEAP16[$psDecCtrl + 96 + ($mul89$i + 1 << 1) >> 1] = HEAP8[$50 + ($mul84$i + 1) >> 0] << 7;
     HEAP16[$psDecCtrl + 96 + ($mul89$i + 2 << 1) >> 1] = HEAP8[$50 + ($mul84$i + 2) >> 0] << 7;
     HEAP16[$psDecCtrl + 96 + ($mul89$i + 3 << 1) >> 1] = HEAP8[$50 + ($mul84$i + 3) >> 0] << 7;
     HEAP16[$psDecCtrl + 96 + ($mul89$i + 4 << 1) >> 1] = HEAP8[$50 + ($mul84$i + 4) >> 0] << 7;
     $k$064$i = $k$064$i + 1 | 0;
    } while (($k$064$i | 0) != ($46 | 0));
   }
   $$sink$i = HEAP16[47592 + (HEAP8[$psDec + 2769 >> 0] << 1) >> 1] | 0;
   $fs_kHz$i37$pre$phiZZ2D = $fs_kHz$i;
  } else {
   $59 = HEAP32[$nb_subfr$i >> 2] | 0;
   _memset($psDecCtrl | 0, 0, $59 << 2 | 0) | 0;
   _memset($psDecCtrl + 96 | 0, 0, $59 * 10 | 0) | 0;
   HEAP8[$psDec + 2768 >> 0] = 0;
   $$sink$i = 0;
   $fs_kHz$i37$pre$phiZZ2D = $psDec + 2316 | 0;
  }
  HEAP32[$LTP_scale_Q14 >> 2] = $$sink$i;
  _silk_decode_core($psDec, $psDecCtrl, $pOut, $vla);
  $60 = HEAP32[$fs_kHz$i37$pre$phiZZ2D >> 2] | 0;
  $fs_kHz1$i38 = $psDec + 4252 | 0;
  if (($60 | 0) != (HEAP32[$fs_kHz1$i38 >> 2] | 0)) {
   HEAP32[$psDec + 4172 >> 2] = HEAP32[$frame_length >> 2] << 7;
   HEAP32[$psDec + 4244 >> 2] = 65536;
   HEAP32[$psDec + 4248 >> 2] = 65536;
   HEAP32[$psDec + 4260 >> 2] = 20;
   HEAP32[$psDec + 4256 >> 2] = 2;
   HEAP32[$fs_kHz1$i38 >> 2] = $60;
  }
  $sPLC$i$i = $psDec + 4172 | 0;
  $63 = HEAP8[$signalType >> 0] | 0;
  $conv$i$i49 = $63 << 24 >> 24;
  $prevSignalType$i$i = $psDec + 4164 | 0;
  HEAP32[$prevSignalType$i$i >> 2] = $conv$i$i49;
  do if ($63 << 24 >> 24 == 2) {
   $subfr_length$i7$i = $psDec + 2332 | 0;
   $64 = HEAP32[$nb_subfr$i >> 2] | 0;
   $sub77$i$i = $64 + -1 | 0;
   $65 = HEAP32[$psDecCtrl + ($sub77$i$i << 2) >> 2] | 0;
   if (($64 | 0) == 0 | ($65 | 0) < 1) $LTP_Gain_Q14$0$lcssa$i$i = 0; else {
    $arraydecay$i$i = $psDec + 4176 | 0;
    $sub28$i$i53 = $64 + 65535 | 0;
    $66 = HEAP32[$subfr_length$i7$i >> 2] | 0;
    $LTP_Gain_Q14$083$i$i = 0;
    $j$082$i$i = 0;
    while (1) {
     $sub17$i$i = $sub77$i$i - $j$082$i$i | 0;
     $mul18$i$i54 = $sub17$i$i * 5 | 0;
     $add21$4$i$i = (HEAP16[$psDecCtrl + 96 + ($mul18$i$i54 + 1 << 1) >> 1] | 0) + (HEAP16[$psDecCtrl + 96 + ($mul18$i$i54 << 1) >> 1] | 0) + (HEAP16[$psDecCtrl + 96 + ($mul18$i$i54 + 2 << 1) >> 1] | 0) + (HEAP16[$psDecCtrl + 96 + ($mul18$i$i54 + 3 << 1) >> 1] | 0) + (HEAP16[$psDecCtrl + 96 + ($mul18$i$i54 + 4 << 1) >> 1] | 0) | 0;
     if (($add21$4$i$i | 0) > ($LTP_Gain_Q14$083$i$i | 0)) {
      $arrayidx33$i$i = $psDecCtrl + 96 + (($sub28$i$i53 - $j$082$i$i << 16 >> 16) * 5 << 1) | 0;
      HEAP16[$arraydecay$i$i >> 1] = HEAP16[$arrayidx33$i$i >> 1] | 0;
      HEAP16[$arraydecay$i$i + 2 >> 1] = HEAP16[$arrayidx33$i$i + 2 >> 1] | 0;
      HEAP16[$arraydecay$i$i + 4 >> 1] = HEAP16[$arrayidx33$i$i + 4 >> 1] | 0;
      HEAP16[$arraydecay$i$i + 6 >> 1] = HEAP16[$arrayidx33$i$i + 6 >> 1] | 0;
      HEAP16[$arraydecay$i$i + 8 >> 1] = HEAP16[$arrayidx33$i$i + 8 >> 1] | 0;
      HEAP32[$sPLC$i$i >> 2] = HEAP32[$psDecCtrl + ($sub17$i$i << 2) >> 2] << 8;
      $LTP_Gain_Q14$1$i$i = $add21$4$i$i;
     } else $LTP_Gain_Q14$1$i$i = $LTP_Gain_Q14$083$i$i;
     $j$082$i$i = $j$082$i$i + 1 | 0;
     if (($j$082$i$i | 0) == ($64 | 0) | (Math_imul($66, $j$082$i$i) | 0) >= ($65 | 0)) {
      $LTP_Gain_Q14$0$lcssa$i$i = $LTP_Gain_Q14$1$i$i;
      break;
     } else $LTP_Gain_Q14$083$i$i = $LTP_Gain_Q14$1$i$i;
    }
   }
   $LTPCoef_Q1443$i$i = $psDec + 4176 | 0;
   HEAP32[$LTPCoef_Q1443$i$i >> 2] = 0;
   HEAP32[$LTPCoef_Q1443$i$i + 4 >> 2] = 0;
   HEAP16[$LTPCoef_Q1443$i$i + 8 >> 1] = 0;
   $arrayidx47$i$i = $psDec + 4180 | 0;
   HEAP16[$arrayidx47$i$i >> 1] = $LTP_Gain_Q14$0$lcssa$i$i;
   if (($LTP_Gain_Q14$0$lcssa$i$i | 0) < 11469) {
    HEAP16[$psDec + 4176 >> 1] = 0;
    HEAP16[$psDec + 4178 >> 1] = 0;
    HEAP16[$arrayidx47$i$i >> 1] = (Math_imul((11744256 / ((($LTP_Gain_Q14$0$lcssa$i$i | 0) > 1 ? $LTP_Gain_Q14$0$lcssa$i$i : 1) >>> 0) | 0) << 16 >> 16, $LTP_Gain_Q14$0$lcssa$i$i << 16 >> 16) | 0) >>> 10;
    HEAP16[$psDec + 4182 >> 1] = 0;
    HEAP16[$psDec + 4184 >> 1] = 0;
    $77 = $64;
    $subfr_length117$pre$phi$i$iZ2D = $subfr_length$i7$i;
    break;
   }
   if (($LTP_Gain_Q14$0$lcssa$i$i | 0) > 15565) {
    HEAP16[$psDec + 4176 >> 1] = 0;
    HEAP16[$psDec + 4178 >> 1] = 0;
    HEAP16[$arrayidx47$i$i >> 1] = (Math_imul((255016960 / ($LTP_Gain_Q14$0$lcssa$i$i >>> 0) | 0) << 16 >> 16, $LTP_Gain_Q14$0$lcssa$i$i << 16 >> 16) | 0) >>> 14;
    HEAP16[$psDec + 4182 >> 1] = 0;
    HEAP16[$psDec + 4184 >> 1] = 0;
    $77 = $64;
    $subfr_length117$pre$phi$i$iZ2D = $subfr_length$i7$i;
   } else {
    $77 = $64;
    $subfr_length117$pre$phi$i$iZ2D = $subfr_length$i7$i;
   }
  } else {
   HEAP32[$sPLC$i$i >> 2] = ($60 << 16 >> 16) * 4608;
   $arraydecay106$i$i = $psDec + 4176 | 0;
   HEAP32[$arraydecay106$i$i >> 2] = 0;
   HEAP32[$arraydecay106$i$i + 4 >> 2] = 0;
   HEAP16[$arraydecay106$i$i + 8 >> 1] = 0;
   $77 = HEAP32[$nb_subfr$i >> 2] | 0;
   $subfr_length117$pre$phi$i$iZ2D = $psDec + 2332 | 0;
  } while (0);
  _memcpy($psDec + 4186 | 0, $arraydecay5$i | 0, HEAP32[$LPC_order$i >> 2] << 1 | 0) | 0;
  HEAP16[$psDec + 4240 >> 1] = HEAP32[$LTP_scale_Q14 >> 2];
  $78 = $psDecCtrl + 16 + ($77 + -2 << 2) | 0;
  $83 = HEAP32[$78 + 4 >> 2] | 0;
  $84 = $psDec + 4244 | 0;
  HEAP32[$84 >> 2] = HEAP32[$78 >> 2];
  HEAP32[$84 + 4 >> 2] = $83;
  HEAP32[$psDec + 4260 >> 2] = HEAP32[$subfr_length117$pre$phi$i$iZ2D >> 2];
  HEAP32[$psDec + 4256 >> 2] = $77;
  HEAP32[$lossCnt$i >> 2] = 0;
  HEAP32[$prevSignalType$i$i >> 2] = $conv$i$i49;
  if (($63 & 255) < 3) {
   HEAP32[$first_frame_after_reset$i >> 2] = 0;
   _llvm_stackrestore($4 | 0);
   break;
  } else _celt_fatal(50215, 50195, 94);
 } else if ((label | 0) == 71) {
  HEAP8[$psDec + 2765 >> 0] = HEAP32[$psDec + 4164 >> 2];
  $91 = HEAP32[$psDec + 2316 >> 2] | 0;
  $fs_kHz1$i = $psDec + 4252 | 0;
  if (($91 | 0) != (HEAP32[$fs_kHz1$i >> 2] | 0)) {
   HEAP32[$psDec + 4172 >> 2] = $0 << 7;
   HEAP32[$psDec + 4244 >> 2] = 65536;
   HEAP32[$psDec + 4248 >> 2] = 65536;
   HEAP32[$psDec + 4260 >> 2] = 20;
   HEAP32[$psDec + 4256 >> 2] = 2;
   HEAP32[$fs_kHz1$i >> 2] = $91;
  }
  _silk_PLC_conceal($psDec, $psDecCtrl, $pOut);
  $lossCnt$i6 = $psDec + 4160 | 0;
  HEAP32[$lossCnt$i6 >> 2] = (HEAP32[$lossCnt$i6 >> 2] | 0) + 1;
 } while (0);
 $94 = HEAP32[$psDec + 2336 >> 2] | 0;
 $95 = HEAP32[$frame_length >> 2] | 0;
 if (($94 | 0) < ($95 | 0)) _celt_fatal(50290, 50195, 107);
 $sub39 = $94 - $95 | 0;
 _memmove($psDec + 1348 | 0, $psDec + 1348 + ($95 << 1) | 0, $sub39 << 1 | 0) | 0;
 _memcpy($psDec + 1348 + ($sub39 << 1) | 0, $pOut | 0, HEAP32[$frame_length >> 2] << 1 | 0) | 0;
 _silk_CNG($psDec, $psDecCtrl, $pOut, $0);
 if (HEAP32[$psDec + 4160 >> 2] | 0) {
  _silk_sum_sqr_shift($psDec + 4232 | 0, $psDec + 4236 | 0, $pOut, $0);
  HEAP32[$psDec + 4220 >> 2] = 1;
  $nb_subfr = $psDec + 2324 | 0;
  $119 = HEAP32[$nb_subfr >> 2] | 0;
  $sub50 = $119 + -1 | 0;
  $arrayidx51 = $psDecCtrl + ($sub50 << 2) | 0;
  $120 = HEAP32[$arrayidx51 >> 2] | 0;
  $lagPrev = $psDec + 2308 | 0;
  HEAP32[$lagPrev >> 2] = $120;
  HEAP32[$pN >> 2] = $0;
  STACKTOP = sp;
  return;
 }
 $last_frame_lost2$i = $psDec + 4220 | 0;
 if (HEAP32[$last_frame_lost2$i >> 2] | 0) {
  $sub$i$i12 = 31 - (Math_clz32($0 | 0) | 0) | 0;
  $cmp57$i$i = ($0 | 0) > 1;
  if ($cmp57$i$i) {
   $i$058$i$i = 0;
   $nrg$059$i$i = $0;
   do {
    $conv$i$i16 = HEAP16[$pOut + ($i$058$i$i << 1) >> 1] | 0;
    $mul$i$i17 = Math_imul($conv$i$i16, $conv$i$i16) | 0;
    $conv5$i$i = HEAP16[$pOut + (($i$058$i$i | 1) << 1) >> 1] | 0;
    $nrg$059$i$i = (((Math_imul($conv5$i$i, $conv5$i$i) | 0) + $mul$i$i17 | 0) >>> $sub$i$i12) + $nrg$059$i$i | 0;
    $i$058$i$i = $i$058$i$i + 2 | 0;
   } while (($i$058$i$i | 0) < ($$off | 0));
   $i$0$lcssa$i$i = $0 & -2;
   $nrg$0$lcssa$i$i = $nrg$059$i$i;
  } else {
   $i$0$lcssa$i$i = 0;
   $nrg$0$lcssa$i$i = $0;
  }
  if (($i$0$lcssa$i$i | 0) < ($0 | 0)) {
   $conv16$i$i = HEAP16[$pOut + ($i$0$lcssa$i$i << 1) >> 1] | 0;
   $nrg$1$i$i = ((Math_imul($conv16$i$i, $conv16$i$i) | 0) >>> $sub$i$i12) + $nrg$0$lcssa$i$i | 0;
  } else $nrg$1$i$i = $nrg$0$lcssa$i$i;
  $sub24$i$i = $sub$i$i12 + 3 - (Math_clz32($nrg$1$i$i | 0) | 0) | 0;
  $cond$i$i$i22 = ($sub24$i$i | 0) > 0 ? $sub24$i$i : 0;
  if ($cmp57$i$i) {
   $i$154$i$i = 0;
   $nrg$255$i$i = 0;
   do {
    $conv32$i$i23 = HEAP16[$pOut + ($i$154$i$i << 1) >> 1] | 0;
    $mul35$i$i = Math_imul($conv32$i$i23, $conv32$i$i23) | 0;
    $conv38$i$i = HEAP16[$pOut + (($i$154$i$i | 1) << 1) >> 1] | 0;
    $nrg$255$i$i = (((Math_imul($conv38$i$i, $conv38$i$i) | 0) + $mul35$i$i | 0) >>> $cond$i$i$i22) + $nrg$255$i$i | 0;
    $i$154$i$i = $i$154$i$i + 2 | 0;
   } while (($i$154$i$i | 0) < ($$off | 0));
   $i$1$lcssa$i$i = $0 & -2;
   $nrg$2$lcssa$i$i = $nrg$255$i$i;
  } else {
   $i$1$lcssa$i$i = 0;
   $nrg$2$lcssa$i$i = 0;
  }
  if (($i$1$lcssa$i$i | 0) < ($0 | 0)) {
   $conv53$i$i = HEAP16[$pOut + ($i$1$lcssa$i$i << 1) >> 1] | 0;
   $nrg$3$i$i = ((Math_imul($conv53$i$i, $conv53$i$i) | 0) >>> $cond$i$i$i22) + $nrg$2$lcssa$i$i | 0;
  } else $nrg$3$i$i = $nrg$2$lcssa$i$i;
  $110 = HEAP32[$psDec + 4236 >> 2] | 0;
  if (($cond$i$i$i22 | 0) > ($110 | 0)) {
   $conc_energy7$i = $psDec + 4232 | 0;
   HEAP32[$conc_energy7$i >> 2] = HEAP32[$conc_energy7$i >> 2] >> $cond$i$i$i22 - $110;
   $energy$i$0 = $nrg$3$i$i;
  } else if (($cond$i$i$i22 | 0) < ($110 | 0)) $energy$i$0 = $nrg$3$i$i >> $110 - $cond$i$i$i22; else $energy$i$0 = $nrg$3$i$i;
  $conc_energy18$i = $psDec + 4232 | 0;
  $112 = HEAP32[$conc_energy18$i >> 2] | 0;
  if (($energy$i$0 | 0) > ($112 | 0)) {
   $113 = Math_clz32($112 | 0) | 0;
   $shl$i26 = $112 << $113 + -1;
   HEAP32[$conc_energy18$i >> 2] = $shl$i26;
   $sub25$i = 25 - $113 | 0;
   $shr27$i = $energy$i$0 >> (($sub25$i | 0) > 0 ? $sub25$i : 0);
   $div$i = ($shl$i26 | 0) / ((($shr27$i | 0) > 1 ? $shr27$i : 1) | 0) | 0;
   if (($div$i | 0) < 1) $retval$0$i$i31 = 0; else {
    $114 = Math_clz32($div$i | 0) | 0;
    $sub$i$i$i = 24 - $114 | 0;
    $sub$i$i$i$i = 0 - $sub$i$i$i | 0;
    do if (!$sub$i$i$i) $retval$0$i$i$i$i = $div$i; else if (($sub$i$i$i | 0) < 0) {
     $retval$0$i$i$i$i = $div$i >>> ($sub$i$i$i + 32 | 0) | $div$i << $sub$i$i$i$i;
     break;
    } else {
     $retval$0$i$i$i$i = $div$i << 32 - $sub$i$i$i | $div$i >>> $sub$i$i$i;
     break;
    } while (0);
    $shr3$i$i = (($114 & 1 | 0) == 0 ? 46214 : 32768) >>> ($114 >>> 1);
    $115 = (Math_imul($retval$0$i$i$i$i & 127, 13959168) | 0) >>> 16;
    $retval$0$i$i31 = (Math_imul($115, $shr3$i$i >> 16) | 0) + $shr3$i$i + ((Math_imul($115, $shr3$i$i & 65535) | 0) >>> 16) << 4;
   }
   $shl34$i = ((65536 - $retval$0$i$i31 | 0) / ($0 | 0) | 0) << 2;
   if (($0 | 0) > 0) {
    $gain_Q16$044$i = $retval$0$i$i31;
    $i$043$i = 0;
    do {
     $arrayidx$i = $pOut + ($i$043$i << 1) | 0;
     $conv$i32 = HEAP16[$arrayidx$i >> 1] | 0;
     HEAP16[$arrayidx$i >> 1] = ((Math_imul($gain_Q16$044$i & 65532, $conv$i32) | 0) >>> 16) + (Math_imul($gain_Q16$044$i >> 16, $conv$i32) | 0);
     $gain_Q16$044$i = $gain_Q16$044$i + $shl34$i | 0;
     $i$043$i = $i$043$i + 1 | 0;
    } while (($gain_Q16$044$i | 0) < 65537 & ($i$043$i | 0) < ($0 | 0));
   }
  }
 }
 HEAP32[$last_frame_lost2$i >> 2] = 0;
 $nb_subfr = $psDec + 2324 | 0;
 $119 = HEAP32[$nb_subfr >> 2] | 0;
 $sub50 = $119 + -1 | 0;
 $arrayidx51 = $psDecCtrl + ($sub50 << 2) | 0;
 $120 = HEAP32[$arrayidx51 >> 2] | 0;
 $lagPrev = $psDec + 2308 | 0;
 HEAP32[$lagPrev >> 2] = $120;
 HEAP32[$pN >> 2] = $0;
 STACKTOP = sp;
 return;
}

function _silk_resampler_private_down_FIR($SS, $out, $in, $inLen) {
 $SS = $SS | 0;
 $out = $out | 0;
 $in = $in | 0;
 $inLen = $inLen | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $6 = 0, $8 = 0, $Coefs = 0, $FIR_Order = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr271$i = 0, $add$ptr507$i = 0, $add245$i = 0, $add274$i = 0, $add290$i = 0, $add307$i = 0, $add324$i = 0, $add341$i = 0, $add358$i = 0, $add375$i = 0, $add392$i = 0, $add409$i = 0, $add426$i = 0, $add443$i = 0, $add460$i = 0, $add474$i = 0, $add510$i = 0, $add526$i = 0, $add543$i = 0, $add560$i = 0, $add577$i = 0, $add594$i = 0, $add611$i = 0, $add628$i = 0, $add645$i = 0, $add662$i = 0, $add679$i = 0, $add696$i = 0, $add713$i = 0, $add730$i = 0, $add747$i = 0, $add764$i = 0, $add781$i = 0, $add798$i = 0, $add812$i = 0, $and$i3 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx128$i = 0, $arrayidx292$i = 0, $arrayidx309$i = 0, $arrayidx326$i = 0, $arrayidx343$i = 0, $arrayidx360$i = 0, $arrayidx377$i = 0, $arrayidx394$i = 0, $arrayidx4$i = 0, $arrayidx411$i = 0, $arrayidx428$i = 0, $arrayidx445$i = 0, $arrayidx462$i = 0, $arrayidx6 = 0, $arrayidx715$i = 0, $arrayidx732$i = 0, $arrayidx749$i = 0, $arrayidx766$i = 0, $arrayidx783$i = 0, $arrayidx800$i = 0, $batchSize = 0, $conv103$i = 0, $conv116$i = 0, $conv13$i = 0, $conv132$i = 0, $conv145$i = 0, $conv158$i = 0, $conv16$i = 0, $conv171$i = 0, $conv184$i = 0, $conv197$i = 0, $conv2$i = 0, $conv210$i = 0, $conv223$i = 0, $conv236$i = 0, $conv25$i = 0, $conv277$i = 0, $conv293$i = 0, $conv310$i = 0, $conv327$i = 0, $conv344$i = 0, $conv361$i = 0, $conv378$i = 0, $conv38$i = 0, $conv395$i = 0, $conv412$i = 0, $conv429$i = 0, $conv446$i = 0, $conv463$i = 0, $conv51$i = 0, $conv513$i = 0, $conv529$i = 0, $conv546$i = 0, $conv563$i = 0, $conv580$i = 0, $conv597$i = 0, $conv6$i = 0, $conv614$i = 0, $conv631$i = 0, $conv64$i = 0, $conv648$i = 0, $conv665$i = 0, $conv682$i = 0, $conv699$i = 0, $conv716$i = 0, $conv733$i = 0, $conv750$i = 0, $conv767$i = 0, $conv77$i = 0, $conv784$i = 0, $conv801$i = 0, $conv90$i = 0, $in$addr$0 = 0, $inLen$addr$0 = 0, $inLen$addr$0$ = 0, $incdec$ptr$i = 0, $incdec$ptr497$i = 0, $incdec$ptr835$i = 0, $index_Q16$0337$i = 0, $index_Q16$1340$i = 0, $index_Q16$2344$i = 0, $k$018$i = 0, $mul = 0, $mul104$i = 0, $mul117$i = 0, $mul133$i = 0, $mul14$i = 0, $mul146$i = 0, $mul159$i = 0, $mul172$i = 0, $mul185$i = 0, $mul198$i = 0, $mul211$i = 0, $mul224$i = 0, $mul26$i = 0, $mul278$i = 0, $mul294$i = 0, $mul311$i = 0, $mul328$i = 0, $mul345$i = 0, $mul362$i = 0, $mul379$i = 0, $mul39$i = 0, $mul396$i = 0, $mul413$i = 0, $mul430$i = 0, $mul447$i = 0, $mul514$i = 0, $mul52$i = 0, $mul530$i = 0, $mul547$i = 0, $mul564$i = 0, $mul581$i = 0, $mul598$i = 0, $mul615$i = 0, $mul632$i = 0, $mul649$i = 0, $mul65$i = 0, $mul666$i = 0, $mul683$i = 0, $mul700$i = 0, $mul717$i = 0, $mul734$i = 0, $mul751$i = 0, $mul768$i = 0, $mul78$i = 0, $mul785$i = 0, $mul91$i = 0, $out$addr$0 = 0, $out$addr$0338$i = 0, $out$addr$1341$i = 0, $out$addr$2345$i = 0, $out$addr$3$i = 0, $sFIR = 0, $shl = 0, $shl3$i = 0, $shr$i2 = 0, $shr110$i = 0, $shr123$i = 0, $shr139$i = 0, $shr152$i = 0, $shr165$i = 0, $shr178$i = 0, $shr191$i = 0, $shr20$i = 0, $shr204$i = 0, $shr217$i = 0, $shr230$i = 0, $shr286$i = 0, $shr302$i = 0, $shr319$i = 0, $shr32$i = 0, $shr336$i = 0, $shr353$i = 0, $shr370$i = 0, $shr387$i = 0, $shr404$i = 0, $shr421$i = 0, $shr438$i = 0, $shr45$i = 0, $shr455$i = 0, $shr522$i = 0, $shr538$i = 0, $shr555$i = 0, $shr572$i = 0, $shr58$i = 0, $shr589$i = 0, $shr606$i = 0, $shr623$i = 0, $shr640$i = 0, $shr657$i = 0, $shr674$i = 0, $shr691$i = 0, $shr708$i = 0, $shr71$i = 0, $shr725$i = 0, $shr742$i = 0, $shr759$i = 0, $shr776$i = 0, $shr793$i = 0, $shr8$i = 0, $shr84$i = 0, $shr97$i = 0, $sub = 0, $sub$i = 0, $vla = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $batchSize = $SS + 268 | 0;
 $0 = HEAP32[$batchSize >> 2] | 0;
 $FIR_Order = $SS + 276 | 0;
 $1 = HEAP32[$FIR_Order >> 2] | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 + $0 << 2) | 0) + 15 & -16) | 0;
 $sFIR = $SS + 24 | 0;
 $mul = $1 << 2;
 _memcpy($vla | 0, $sFIR | 0, $mul | 0) | 0;
 $Coefs = $SS + 296 | 0;
 $2 = HEAP32[$Coefs >> 2] | 0;
 $arrayidx = $2 + 4 | 0;
 $3 = HEAP32[$SS + 272 >> 2] | 0;
 $arrayidx292$i = $2 + 6 | 0;
 $arrayidx309$i = $2 + 8 | 0;
 $arrayidx326$i = $2 + 10 | 0;
 $arrayidx343$i = $2 + 12 | 0;
 $arrayidx360$i = $2 + 14 | 0;
 $arrayidx377$i = $2 + 16 | 0;
 $arrayidx394$i = $2 + 18 | 0;
 $arrayidx411$i = $2 + 20 | 0;
 $arrayidx428$i = $2 + 22 | 0;
 $arrayidx445$i = $2 + 24 | 0;
 $arrayidx462$i = $2 + 26 | 0;
 $arrayidx715$i = $2 + 28 | 0;
 $arrayidx732$i = $2 + 30 | 0;
 $arrayidx749$i = $2 + 32 | 0;
 $arrayidx766$i = $2 + 34 | 0;
 $arrayidx783$i = $2 + 36 | 0;
 $arrayidx800$i = $2 + 38 | 0;
 $arrayidx4$i = $SS + 4 | 0;
 $4 = HEAP32[$SS + 280 >> 2] | 0;
 $conv2$i = $4 << 16 >> 16;
 $sub$i = $4 + -1 | 0;
 $5 = $0;
 $6 = $1;
 $8 = $2;
 $in$addr$0 = $in;
 $inLen$addr$0 = $inLen;
 $out$addr$0 = $out;
 L1 : while (1) {
  $inLen$addr$0$ = ($inLen$addr$0 | 0) < ($5 | 0) ? $inLen$addr$0 : $5;
  $arrayidx6 = $vla + ($6 << 2) | 0;
  if (($inLen$addr$0$ | 0) > 0) {
   $conv6$i = HEAP16[$8 >> 1] | 0;
   $conv16$i = HEAP16[$8 + 2 >> 1] | 0;
   $11 = HEAP32[$SS >> 2] | 0;
   $12 = HEAP32[$arrayidx4$i >> 2] | 0;
   $k$018$i = 0;
   do {
    $add$i = (HEAP16[$in$addr$0 + ($k$018$i << 1) >> 1] << 8) + $11 | 0;
    HEAP32[$arrayidx6 + ($k$018$i << 2) >> 2] = $add$i;
    $shl3$i = $add$i << 2;
    $shr$i2 = $shl3$i >> 16;
    $and$i3 = $shl3$i & 65532;
    $11 = (Math_imul($shr$i2, $conv6$i) | 0) + $12 + ((Math_imul($and$i3, $conv6$i) | 0) >> 16) | 0;
    $12 = ((Math_imul($and$i3, $conv16$i) | 0) >> 16) + (Math_imul($shr$i2, $conv16$i) | 0) | 0;
    $k$018$i = $k$018$i + 1 | 0;
   } while (($k$018$i | 0) != ($inLen$addr$0$ | 0));
   HEAP32[$arrayidx4$i >> 2] = $12;
   HEAP32[$SS >> 2] = $11;
  }
  $shl = $inLen$addr$0$ << 16;
  switch ($1 | 0) {
  case 18:
   {
    if (($shl | 0) > 0) {
     $index_Q16$0337$i = 0;
     $out$addr$0338$i = $out$addr$0;
     while (1) {
      $add$ptr$i = $vla + ($index_Q16$0337$i >> 16 << 2) | 0;
      $shr8$i = (Math_imul($index_Q16$0337$i & 65535, $conv2$i) | 0) >> 16;
      $arrayidx$i = $arrayidx + ($shr8$i * 9 << 1) | 0;
      $13 = HEAP32[$add$ptr$i >> 2] | 0;
      $conv13$i = HEAP16[$arrayidx$i >> 1] | 0;
      $mul14$i = Math_imul($13 >> 16, $conv13$i) | 0;
      $shr20$i = (Math_imul($13 & 65535, $conv13$i) | 0) >> 16;
      $15 = HEAP32[$add$ptr$i + 4 >> 2] | 0;
      $conv25$i = HEAP16[$arrayidx$i + 2 >> 1] | 0;
      $mul26$i = Math_imul($15 >> 16, $conv25$i) | 0;
      $shr32$i = (Math_imul($15 & 65535, $conv25$i) | 0) >> 16;
      $17 = HEAP32[$add$ptr$i + 8 >> 2] | 0;
      $conv38$i = HEAP16[$arrayidx$i + 4 >> 1] | 0;
      $mul39$i = Math_imul($17 >> 16, $conv38$i) | 0;
      $shr45$i = (Math_imul($17 & 65535, $conv38$i) | 0) >> 16;
      $19 = HEAP32[$add$ptr$i + 12 >> 2] | 0;
      $conv51$i = HEAP16[$arrayidx$i + 6 >> 1] | 0;
      $mul52$i = Math_imul($19 >> 16, $conv51$i) | 0;
      $shr58$i = (Math_imul($19 & 65535, $conv51$i) | 0) >> 16;
      $21 = HEAP32[$add$ptr$i + 16 >> 2] | 0;
      $conv64$i = HEAP16[$arrayidx$i + 8 >> 1] | 0;
      $mul65$i = Math_imul($21 >> 16, $conv64$i) | 0;
      $shr71$i = (Math_imul($21 & 65535, $conv64$i) | 0) >> 16;
      $23 = HEAP32[$add$ptr$i + 20 >> 2] | 0;
      $conv77$i = HEAP16[$arrayidx$i + 10 >> 1] | 0;
      $mul78$i = Math_imul($23 >> 16, $conv77$i) | 0;
      $shr84$i = (Math_imul($23 & 65535, $conv77$i) | 0) >> 16;
      $25 = HEAP32[$add$ptr$i + 24 >> 2] | 0;
      $conv90$i = HEAP16[$arrayidx$i + 12 >> 1] | 0;
      $mul91$i = Math_imul($25 >> 16, $conv90$i) | 0;
      $shr97$i = (Math_imul($25 & 65535, $conv90$i) | 0) >> 16;
      $27 = HEAP32[$add$ptr$i + 28 >> 2] | 0;
      $conv103$i = HEAP16[$arrayidx$i + 14 >> 1] | 0;
      $mul104$i = Math_imul($27 >> 16, $conv103$i) | 0;
      $shr110$i = (Math_imul($27 & 65535, $conv103$i) | 0) >> 16;
      $29 = HEAP32[$add$ptr$i + 32 >> 2] | 0;
      $conv116$i = HEAP16[$arrayidx$i + 16 >> 1] | 0;
      $mul117$i = Math_imul($29 >> 16, $conv116$i) | 0;
      $shr123$i = (Math_imul($29 & 65535, $conv116$i) | 0) >> 16;
      $arrayidx128$i = $arrayidx + (($sub$i - $shr8$i | 0) * 9 << 1) | 0;
      $31 = HEAP32[$add$ptr$i + 68 >> 2] | 0;
      $conv132$i = HEAP16[$arrayidx128$i >> 1] | 0;
      $mul133$i = Math_imul($31 >> 16, $conv132$i) | 0;
      $shr139$i = (Math_imul($31 & 65535, $conv132$i) | 0) >> 16;
      $33 = HEAP32[$add$ptr$i + 64 >> 2] | 0;
      $conv145$i = HEAP16[$arrayidx128$i + 2 >> 1] | 0;
      $mul146$i = Math_imul($33 >> 16, $conv145$i) | 0;
      $shr152$i = (Math_imul($33 & 65535, $conv145$i) | 0) >> 16;
      $35 = HEAP32[$add$ptr$i + 60 >> 2] | 0;
      $conv158$i = HEAP16[$arrayidx128$i + 4 >> 1] | 0;
      $mul159$i = Math_imul($35 >> 16, $conv158$i) | 0;
      $shr165$i = (Math_imul($35 & 65535, $conv158$i) | 0) >> 16;
      $37 = HEAP32[$add$ptr$i + 56 >> 2] | 0;
      $conv171$i = HEAP16[$arrayidx128$i + 6 >> 1] | 0;
      $mul172$i = Math_imul($37 >> 16, $conv171$i) | 0;
      $shr178$i = (Math_imul($37 & 65535, $conv171$i) | 0) >> 16;
      $39 = HEAP32[$add$ptr$i + 52 >> 2] | 0;
      $conv184$i = HEAP16[$arrayidx128$i + 8 >> 1] | 0;
      $mul185$i = Math_imul($39 >> 16, $conv184$i) | 0;
      $shr191$i = (Math_imul($39 & 65535, $conv184$i) | 0) >> 16;
      $41 = HEAP32[$add$ptr$i + 48 >> 2] | 0;
      $conv197$i = HEAP16[$arrayidx128$i + 10 >> 1] | 0;
      $mul198$i = Math_imul($41 >> 16, $conv197$i) | 0;
      $shr204$i = (Math_imul($41 & 65535, $conv197$i) | 0) >> 16;
      $43 = HEAP32[$add$ptr$i + 44 >> 2] | 0;
      $conv210$i = HEAP16[$arrayidx128$i + 12 >> 1] | 0;
      $mul211$i = Math_imul($43 >> 16, $conv210$i) | 0;
      $shr217$i = (Math_imul($43 & 65535, $conv210$i) | 0) >> 16;
      $45 = HEAP32[$add$ptr$i + 40 >> 2] | 0;
      $conv223$i = HEAP16[$arrayidx128$i + 14 >> 1] | 0;
      $mul224$i = Math_imul($45 >> 16, $conv223$i) | 0;
      $shr230$i = (Math_imul($45 & 65535, $conv223$i) | 0) >> 16;
      $47 = HEAP32[$add$ptr$i + 36 >> 2] | 0;
      $conv236$i = HEAP16[$arrayidx128$i + 16 >> 1] | 0;
      $add245$i = $shr20$i + $mul14$i + $mul26$i + $shr32$i + $mul39$i + $shr45$i + $mul52$i + $shr58$i + $mul65$i + $shr71$i + $mul78$i + $shr84$i + $mul91$i + $shr97$i + $mul104$i + $shr110$i + $mul117$i + $shr123$i + $mul133$i + $shr139$i + $mul146$i + $shr152$i + $mul159$i + $shr165$i + $mul172$i + $shr178$i + $mul185$i + $shr191$i + $mul198$i + $shr204$i + $mul211$i + $shr217$i + $mul224$i + $shr230$i + (Math_imul($47 >> 16, $conv236$i) | 0) + ((Math_imul($47 & 65535, $conv236$i) | 0) >> 16) | 0;
      $incdec$ptr$i = $out$addr$0338$i + 2 | 0;
      HEAP16[$out$addr$0338$i >> 1] = ($add245$i | 0) > 2097119 ? 32767 : ($add245$i | 0) < -2097184 ? -32768 : (($add245$i >>> 5) + 1 | 0) >>> 1 & 65535;
      $index_Q16$0337$i = $index_Q16$0337$i + $3 | 0;
      if (($index_Q16$0337$i | 0) >= ($shl | 0)) {
       $out$addr$3$i = $incdec$ptr$i;
       break;
      } else $out$addr$0338$i = $incdec$ptr$i;
     }
    } else $out$addr$3$i = $out$addr$0;
    break;
   }
  case 24:
   {
    if (($shl | 0) > 0) {
     $index_Q16$1340$i = 0;
     $out$addr$1341$i = $out$addr$0;
     while (1) {
      $add$ptr271$i = $vla + ($index_Q16$1340$i >> 16 << 2) | 0;
      $add274$i = (HEAP32[$add$ptr271$i + 92 >> 2] | 0) + (HEAP32[$add$ptr271$i >> 2] | 0) | 0;
      $conv277$i = HEAP16[$arrayidx >> 1] | 0;
      $mul278$i = Math_imul($add274$i >> 16, $conv277$i) | 0;
      $shr286$i = (Math_imul($add274$i & 65535, $conv277$i) | 0) >> 16;
      $add290$i = (HEAP32[$add$ptr271$i + 88 >> 2] | 0) + (HEAP32[$add$ptr271$i + 4 >> 2] | 0) | 0;
      $conv293$i = HEAP16[$arrayidx292$i >> 1] | 0;
      $mul294$i = Math_imul($add290$i >> 16, $conv293$i) | 0;
      $shr302$i = (Math_imul($add290$i & 65535, $conv293$i) | 0) >> 16;
      $add307$i = (HEAP32[$add$ptr271$i + 84 >> 2] | 0) + (HEAP32[$add$ptr271$i + 8 >> 2] | 0) | 0;
      $conv310$i = HEAP16[$arrayidx309$i >> 1] | 0;
      $mul311$i = Math_imul($add307$i >> 16, $conv310$i) | 0;
      $shr319$i = (Math_imul($add307$i & 65535, $conv310$i) | 0) >> 16;
      $add324$i = (HEAP32[$add$ptr271$i + 80 >> 2] | 0) + (HEAP32[$add$ptr271$i + 12 >> 2] | 0) | 0;
      $conv327$i = HEAP16[$arrayidx326$i >> 1] | 0;
      $mul328$i = Math_imul($add324$i >> 16, $conv327$i) | 0;
      $shr336$i = (Math_imul($add324$i & 65535, $conv327$i) | 0) >> 16;
      $add341$i = (HEAP32[$add$ptr271$i + 76 >> 2] | 0) + (HEAP32[$add$ptr271$i + 16 >> 2] | 0) | 0;
      $conv344$i = HEAP16[$arrayidx343$i >> 1] | 0;
      $mul345$i = Math_imul($add341$i >> 16, $conv344$i) | 0;
      $shr353$i = (Math_imul($add341$i & 65535, $conv344$i) | 0) >> 16;
      $add358$i = (HEAP32[$add$ptr271$i + 72 >> 2] | 0) + (HEAP32[$add$ptr271$i + 20 >> 2] | 0) | 0;
      $conv361$i = HEAP16[$arrayidx360$i >> 1] | 0;
      $mul362$i = Math_imul($add358$i >> 16, $conv361$i) | 0;
      $shr370$i = (Math_imul($add358$i & 65535, $conv361$i) | 0) >> 16;
      $add375$i = (HEAP32[$add$ptr271$i + 68 >> 2] | 0) + (HEAP32[$add$ptr271$i + 24 >> 2] | 0) | 0;
      $conv378$i = HEAP16[$arrayidx377$i >> 1] | 0;
      $mul379$i = Math_imul($add375$i >> 16, $conv378$i) | 0;
      $shr387$i = (Math_imul($add375$i & 65535, $conv378$i) | 0) >> 16;
      $add392$i = (HEAP32[$add$ptr271$i + 64 >> 2] | 0) + (HEAP32[$add$ptr271$i + 28 >> 2] | 0) | 0;
      $conv395$i = HEAP16[$arrayidx394$i >> 1] | 0;
      $mul396$i = Math_imul($add392$i >> 16, $conv395$i) | 0;
      $shr404$i = (Math_imul($add392$i & 65535, $conv395$i) | 0) >> 16;
      $add409$i = (HEAP32[$add$ptr271$i + 60 >> 2] | 0) + (HEAP32[$add$ptr271$i + 32 >> 2] | 0) | 0;
      $conv412$i = HEAP16[$arrayidx411$i >> 1] | 0;
      $mul413$i = Math_imul($add409$i >> 16, $conv412$i) | 0;
      $shr421$i = (Math_imul($add409$i & 65535, $conv412$i) | 0) >> 16;
      $add426$i = (HEAP32[$add$ptr271$i + 56 >> 2] | 0) + (HEAP32[$add$ptr271$i + 36 >> 2] | 0) | 0;
      $conv429$i = HEAP16[$arrayidx428$i >> 1] | 0;
      $mul430$i = Math_imul($add426$i >> 16, $conv429$i) | 0;
      $shr438$i = (Math_imul($add426$i & 65535, $conv429$i) | 0) >> 16;
      $add443$i = (HEAP32[$add$ptr271$i + 52 >> 2] | 0) + (HEAP32[$add$ptr271$i + 40 >> 2] | 0) | 0;
      $conv446$i = HEAP16[$arrayidx445$i >> 1] | 0;
      $mul447$i = Math_imul($add443$i >> 16, $conv446$i) | 0;
      $shr455$i = (Math_imul($add443$i & 65535, $conv446$i) | 0) >> 16;
      $add460$i = (HEAP32[$add$ptr271$i + 48 >> 2] | 0) + (HEAP32[$add$ptr271$i + 44 >> 2] | 0) | 0;
      $conv463$i = HEAP16[$arrayidx462$i >> 1] | 0;
      $add474$i = $shr286$i + $mul278$i + $mul294$i + $shr302$i + $mul311$i + $shr319$i + $mul328$i + $shr336$i + $mul345$i + $shr353$i + $mul362$i + $shr370$i + $mul379$i + $shr387$i + $mul396$i + $shr404$i + $mul413$i + $shr421$i + $mul430$i + $shr438$i + $mul447$i + $shr455$i + (Math_imul($add460$i >> 16, $conv463$i) | 0) + ((Math_imul($add460$i & 65535, $conv463$i) | 0) >> 16) | 0;
      $incdec$ptr497$i = $out$addr$1341$i + 2 | 0;
      HEAP16[$out$addr$1341$i >> 1] = ($add474$i | 0) > 2097119 ? 32767 : ($add474$i | 0) < -2097184 ? -32768 : (($add474$i >>> 5) + 1 | 0) >>> 1 & 65535;
      $index_Q16$1340$i = $index_Q16$1340$i + $3 | 0;
      if (($index_Q16$1340$i | 0) >= ($shl | 0)) {
       $out$addr$3$i = $incdec$ptr497$i;
       break;
      } else $out$addr$1341$i = $incdec$ptr497$i;
     }
    } else $out$addr$3$i = $out$addr$0;
    break;
   }
  case 36:
   {
    if (($shl | 0) > 0) {
     $index_Q16$2344$i = 0;
     $out$addr$2345$i = $out$addr$0;
     while (1) {
      $add$ptr507$i = $vla + ($index_Q16$2344$i >> 16 << 2) | 0;
      $add510$i = (HEAP32[$add$ptr507$i + 140 >> 2] | 0) + (HEAP32[$add$ptr507$i >> 2] | 0) | 0;
      $conv513$i = HEAP16[$arrayidx >> 1] | 0;
      $mul514$i = Math_imul($add510$i >> 16, $conv513$i) | 0;
      $shr522$i = (Math_imul($add510$i & 65535, $conv513$i) | 0) >> 16;
      $add526$i = (HEAP32[$add$ptr507$i + 136 >> 2] | 0) + (HEAP32[$add$ptr507$i + 4 >> 2] | 0) | 0;
      $conv529$i = HEAP16[$arrayidx292$i >> 1] | 0;
      $mul530$i = Math_imul($add526$i >> 16, $conv529$i) | 0;
      $shr538$i = (Math_imul($add526$i & 65535, $conv529$i) | 0) >> 16;
      $add543$i = (HEAP32[$add$ptr507$i + 132 >> 2] | 0) + (HEAP32[$add$ptr507$i + 8 >> 2] | 0) | 0;
      $conv546$i = HEAP16[$arrayidx309$i >> 1] | 0;
      $mul547$i = Math_imul($add543$i >> 16, $conv546$i) | 0;
      $shr555$i = (Math_imul($add543$i & 65535, $conv546$i) | 0) >> 16;
      $add560$i = (HEAP32[$add$ptr507$i + 128 >> 2] | 0) + (HEAP32[$add$ptr507$i + 12 >> 2] | 0) | 0;
      $conv563$i = HEAP16[$arrayidx326$i >> 1] | 0;
      $mul564$i = Math_imul($add560$i >> 16, $conv563$i) | 0;
      $shr572$i = (Math_imul($add560$i & 65535, $conv563$i) | 0) >> 16;
      $add577$i = (HEAP32[$add$ptr507$i + 124 >> 2] | 0) + (HEAP32[$add$ptr507$i + 16 >> 2] | 0) | 0;
      $conv580$i = HEAP16[$arrayidx343$i >> 1] | 0;
      $mul581$i = Math_imul($add577$i >> 16, $conv580$i) | 0;
      $shr589$i = (Math_imul($add577$i & 65535, $conv580$i) | 0) >> 16;
      $add594$i = (HEAP32[$add$ptr507$i + 120 >> 2] | 0) + (HEAP32[$add$ptr507$i + 20 >> 2] | 0) | 0;
      $conv597$i = HEAP16[$arrayidx360$i >> 1] | 0;
      $mul598$i = Math_imul($add594$i >> 16, $conv597$i) | 0;
      $shr606$i = (Math_imul($add594$i & 65535, $conv597$i) | 0) >> 16;
      $add611$i = (HEAP32[$add$ptr507$i + 116 >> 2] | 0) + (HEAP32[$add$ptr507$i + 24 >> 2] | 0) | 0;
      $conv614$i = HEAP16[$arrayidx377$i >> 1] | 0;
      $mul615$i = Math_imul($add611$i >> 16, $conv614$i) | 0;
      $shr623$i = (Math_imul($add611$i & 65535, $conv614$i) | 0) >> 16;
      $add628$i = (HEAP32[$add$ptr507$i + 112 >> 2] | 0) + (HEAP32[$add$ptr507$i + 28 >> 2] | 0) | 0;
      $conv631$i = HEAP16[$arrayidx394$i >> 1] | 0;
      $mul632$i = Math_imul($add628$i >> 16, $conv631$i) | 0;
      $shr640$i = (Math_imul($add628$i & 65535, $conv631$i) | 0) >> 16;
      $add645$i = (HEAP32[$add$ptr507$i + 108 >> 2] | 0) + (HEAP32[$add$ptr507$i + 32 >> 2] | 0) | 0;
      $conv648$i = HEAP16[$arrayidx411$i >> 1] | 0;
      $mul649$i = Math_imul($add645$i >> 16, $conv648$i) | 0;
      $shr657$i = (Math_imul($add645$i & 65535, $conv648$i) | 0) >> 16;
      $add662$i = (HEAP32[$add$ptr507$i + 104 >> 2] | 0) + (HEAP32[$add$ptr507$i + 36 >> 2] | 0) | 0;
      $conv665$i = HEAP16[$arrayidx428$i >> 1] | 0;
      $mul666$i = Math_imul($add662$i >> 16, $conv665$i) | 0;
      $shr674$i = (Math_imul($add662$i & 65535, $conv665$i) | 0) >> 16;
      $add679$i = (HEAP32[$add$ptr507$i + 100 >> 2] | 0) + (HEAP32[$add$ptr507$i + 40 >> 2] | 0) | 0;
      $conv682$i = HEAP16[$arrayidx445$i >> 1] | 0;
      $mul683$i = Math_imul($add679$i >> 16, $conv682$i) | 0;
      $shr691$i = (Math_imul($add679$i & 65535, $conv682$i) | 0) >> 16;
      $add696$i = (HEAP32[$add$ptr507$i + 96 >> 2] | 0) + (HEAP32[$add$ptr507$i + 44 >> 2] | 0) | 0;
      $conv699$i = HEAP16[$arrayidx462$i >> 1] | 0;
      $mul700$i = Math_imul($add696$i >> 16, $conv699$i) | 0;
      $shr708$i = (Math_imul($add696$i & 65535, $conv699$i) | 0) >> 16;
      $add713$i = (HEAP32[$add$ptr507$i + 92 >> 2] | 0) + (HEAP32[$add$ptr507$i + 48 >> 2] | 0) | 0;
      $conv716$i = HEAP16[$arrayidx715$i >> 1] | 0;
      $mul717$i = Math_imul($add713$i >> 16, $conv716$i) | 0;
      $shr725$i = (Math_imul($add713$i & 65535, $conv716$i) | 0) >> 16;
      $add730$i = (HEAP32[$add$ptr507$i + 88 >> 2] | 0) + (HEAP32[$add$ptr507$i + 52 >> 2] | 0) | 0;
      $conv733$i = HEAP16[$arrayidx732$i >> 1] | 0;
      $mul734$i = Math_imul($add730$i >> 16, $conv733$i) | 0;
      $shr742$i = (Math_imul($add730$i & 65535, $conv733$i) | 0) >> 16;
      $add747$i = (HEAP32[$add$ptr507$i + 84 >> 2] | 0) + (HEAP32[$add$ptr507$i + 56 >> 2] | 0) | 0;
      $conv750$i = HEAP16[$arrayidx749$i >> 1] | 0;
      $mul751$i = Math_imul($add747$i >> 16, $conv750$i) | 0;
      $shr759$i = (Math_imul($add747$i & 65535, $conv750$i) | 0) >> 16;
      $add764$i = (HEAP32[$add$ptr507$i + 80 >> 2] | 0) + (HEAP32[$add$ptr507$i + 60 >> 2] | 0) | 0;
      $conv767$i = HEAP16[$arrayidx766$i >> 1] | 0;
      $mul768$i = Math_imul($add764$i >> 16, $conv767$i) | 0;
      $shr776$i = (Math_imul($add764$i & 65535, $conv767$i) | 0) >> 16;
      $add781$i = (HEAP32[$add$ptr507$i + 76 >> 2] | 0) + (HEAP32[$add$ptr507$i + 64 >> 2] | 0) | 0;
      $conv784$i = HEAP16[$arrayidx783$i >> 1] | 0;
      $mul785$i = Math_imul($add781$i >> 16, $conv784$i) | 0;
      $shr793$i = (Math_imul($add781$i & 65535, $conv784$i) | 0) >> 16;
      $add798$i = (HEAP32[$add$ptr507$i + 72 >> 2] | 0) + (HEAP32[$add$ptr507$i + 68 >> 2] | 0) | 0;
      $conv801$i = HEAP16[$arrayidx800$i >> 1] | 0;
      $add812$i = $shr522$i + $mul514$i + $mul530$i + $shr538$i + $mul547$i + $shr555$i + $mul564$i + $shr572$i + $mul581$i + $shr589$i + $mul598$i + $shr606$i + $mul615$i + $shr623$i + $mul632$i + $shr640$i + $mul649$i + $shr657$i + $mul666$i + $shr674$i + $mul683$i + $shr691$i + $mul700$i + $shr708$i + $mul717$i + $shr725$i + $mul734$i + $shr742$i + $mul751$i + $shr759$i + $mul768$i + $shr776$i + $mul785$i + $shr793$i + (Math_imul($add798$i >> 16, $conv801$i) | 0) + ((Math_imul($add798$i & 65535, $conv801$i) | 0) >> 16) | 0;
      $incdec$ptr835$i = $out$addr$2345$i + 2 | 0;
      HEAP16[$out$addr$2345$i >> 1] = ($add812$i | 0) > 2097119 ? 32767 : ($add812$i | 0) < -2097184 ? -32768 : (($add812$i >>> 5) + 1 | 0) >>> 1 & 65535;
      $index_Q16$2344$i = $index_Q16$2344$i + $3 | 0;
      if (($index_Q16$2344$i | 0) >= ($shl | 0)) {
       $out$addr$3$i = $incdec$ptr835$i;
       break;
      } else $out$addr$2345$i = $incdec$ptr835$i;
     }
    } else $out$addr$3$i = $out$addr$0;
    break;
   }
  default:
   {
    label = 16;
    break L1;
   }
  }
  $sub = $inLen$addr$0 - $inLen$addr$0$ | 0;
  if (($sub | 0) <= 1) {
   label = 19;
   break;
  }
  _memcpy($vla | 0, $vla + ($inLen$addr$0$ << 2) | 0, $mul | 0) | 0;
  $5 = HEAP32[$batchSize >> 2] | 0;
  $6 = HEAP32[$FIR_Order >> 2] | 0;
  $8 = HEAP32[$Coefs >> 2] | 0;
  $in$addr$0 = $in$addr$0 + ($inLen$addr$0$ << 1) | 0;
  $inLen$addr$0 = $sub;
  $out$addr$0 = $out$addr$3$i;
 }
 if ((label | 0) == 16) _celt_fatal(56336, 53364, 139); else if ((label | 0) == 19) {
  _memcpy($sFIR | 0, $vla + ($inLen$addr$0$ << 2) | 0, $mul | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_574($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_574($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 57468;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 57469 : 57474) : 57471;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_571($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 57510 : 57495) : $tobool37 ? 57487 : 57491, 3);
  _pad_571($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[37424 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1) if ($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (!$p) label = 25; else if ((-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0)) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else label = 25;
   if ((label | 0) == 25) {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_571($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_571($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_571($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_571($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $26 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($26 | 0) < 29 ? $26 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 < $a$1502 >>> 0) $a$2 = $a$1502; else {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, -1e9, -1) | 0;
      $36 = _i64Add($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if (!$carry$0493) $a$2 = $a$1502; else {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     }
    }
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $26 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 + (Math_imul($div356, -9) | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $52 = Math_imul($div378, $i$1$lcssa) | 0;
   $53 = $51 - $52 | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if ($cmp374 & ($53 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    HEAP32[$add$ptr358 >> 2] = $52;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $52 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa) {
     $58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0;
     if (!$58) $j$2 = 9; else if (!(($58 >>> 0) % 10 | 0)) {
      $i$3455 = 10;
      $j$1456 = 0;
      while (1) {
       $i$3455 = $i$3455 * 10 | 0;
       $inc500 = $j$1456 + 1 | 0;
       if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1456 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_571($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_571($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 57499, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_571($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 57499, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_571($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_571($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function _celt_decode_lost($st, $N, $LM) {
 $st = $st | 0;
 $N = $N | 0;
 $LM = $LM | 0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $13 = 0, $16 = 0.0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $6 = 0, $8 = 0, $83 = 0.0, $84 = 0.0, $88 = 0, $9 = 0, $90 = 0, $E1$0$lcssa = 0.0, $E1$0321 = 0.0, $E2$0$lcssa = 0.0, $E2$0322 = 0.0, $S1$0$lcssa = 0.0, $S1$0327 = 0.0, $S2$0$lcssa = 0.0, $S2$0334 = 0.0, $add = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr147 = 0, $add$ptr15 = 0, $add$ptr188 = 0, $add$ptr193 = 0, $add$ptr195$pre$phiZZ2D = 0, $add$ptr21 = 0, $add$ptr288 = 0, $add$ptr290 = 0, $add$ptr99$us = 0, $add219 = 0.0, $add225 = 0.0, $add248 = 0, $add260 = 0, $add271 = 0.0, $add307 = 0.0, $add402 = 0, $add48$us = 0, $add81$us = 0, $arrayidx176 = 0, $arrayidx176$1 = 0, $arrayidx176$10 = 0, $arrayidx176$11 = 0, $arrayidx176$12 = 0, $arrayidx176$13 = 0, $arrayidx176$14 = 0, $arrayidx176$15 = 0, $arrayidx176$16 = 0, $arrayidx176$17 = 0, $arrayidx176$18 = 0, $arrayidx176$19 = 0, $arrayidx176$2 = 0, $arrayidx176$20 = 0, $arrayidx176$21 = 0, $arrayidx176$22 = 0, $arrayidx176$23 = 0, $arrayidx176$3 = 0, $arrayidx176$4 = 0, $arrayidx176$5 = 0, $arrayidx176$6 = 0, $arrayidx176$7 = 0, $arrayidx176$8 = 0, $arrayidx176$9 = 0, $arrayidx284$1 = 0, $arrayidx284$10 = 0, $arrayidx284$11 = 0, $arrayidx284$12 = 0, $arrayidx284$13 = 0, $arrayidx284$14 = 0, $arrayidx284$15 = 0, $arrayidx284$16 = 0, $arrayidx284$17 = 0, $arrayidx284$18 = 0, $arrayidx284$19 = 0, $arrayidx284$2 = 0, $arrayidx284$20 = 0, $arrayidx284$21 = 0, $arrayidx284$22 = 0, $arrayidx284$23 = 0, $arrayidx284$3 = 0, $arrayidx284$4 = 0, $arrayidx284$5 = 0, $arrayidx284$6 = 0, $arrayidx284$7 = 0, $arrayidx284$8 = 0, $arrayidx284$9 = 0, $arrayidx344 = 0, $arrayidx358 = 0, $arrayidx52$us = 0, $attenuation$0328 = 0.0, $c$0 = 0, $c$1$us = 0, $c$2314$us = 0, $c$3 = 0, $c$4 = 0, $cmp127 = 0, $cmp212320 = 0, $cmp251326 = 0, $cmp254 = 0, $cmp335339 = 0, $cmp353341 = 0, $cmp377343 = 0, $cond142 = 0, $cond44 = 0.0, $conv$us = 0, $decode_mem = 0, $div$i = 0.0, $div376 = 0, $fade$0 = 0.0, $i$013$i = 0, $i$0317$us = 0, $i$07$i$i = 0, $i$10342 = 0, $i$11$neg345 = 0, $i$11344 = 0, $i$1310$us = 0, $i$2318 = 0, $i$4323 = 0, $i$5330 = 0, $i$7335 = 0, $i$9340 = 0, $idx$neg = 0, $inc394 = 0, $j$0306$us = 0, $j151$0329 = 0, $j151$1 = 0, $loss_count22 = 0, $lp_pitch_buf$i = 0, $mul114 = 0, $mul135 = 0, $mul16 = 0, $mul200 = 0, $mul239 = 0, $mul42 = 0, $mul47$us = 0, $mul79$us = 0, $out_syn = 0, $pitch_index$0 = 0, $pitch_index$i = 0, $postfilter_gain = 0, $postfilter_period = 0, $postfilter_tapset = 0, $rng = 0, $seed$0$lcssa = 0, $seed$0313$us = 0, $seed$1309$us = 0, $seed$2$lcssa$us3 = 0, $seed$2307$us = 0, $shl88$us = 0, $shr210 = 0, $spec$select = 0, $sub$i = 0, $sub$us = 0.0, $sub215 = 0, $sub221 = 0, $sub238 = 0, $sub247 = 0, $sub281 = 0, $sub282$1 = 0, $sub282$10 = 0, $sub282$11 = 0, $sub282$12 = 0, $sub282$13 = 0, $sub282$14 = 0, $sub282$15 = 0, $sub282$16 = 0, $sub282$17 = 0, $sub282$18 = 0, $sub282$19 = 0, $sub282$2 = 0, $sub282$20 = 0, $sub282$21 = 0, $sub282$22 = 0, $sub282$23 = 0, $sub282$3 = 0, $sub282$4 = 0, $sub282$5 = 0, $sub282$6 = 0, $sub282$7 = 0, $sub282$8 = 0, $sub282$9 = 0, $sub339 = 0.0, $sub370 = 0.0, $sub381 = 0, $sub382 = 0, $vla = 0, $vla144 = 0, $vla145 = 0, $xptr$014$i = 0, $xy$08$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8304 | 0;
 $idx$neg = 0 - $N | 0;
 $pitch_index$i = sp + 4096 | 0;
 $lp_pitch_buf$i = sp;
 $decode_mem = sp + 8296 | 0;
 $out_syn = sp + 8288 | 0;
 $0 = HEAP32[$st + 8 >> 2] | 0;
 $1 = HEAP32[$st >> 2] | 0;
 $2 = HEAP32[$1 + 8 >> 2] | 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 $4 = HEAP32[$1 + 32 >> 2] | 0;
 $add = $3 + 2048 | 0;
 $c$0 = 0;
 do {
  $add$ptr = $st + 92 + ((Math_imul($c$0, $add) | 0) << 2) | 0;
  HEAP32[$decode_mem + ($c$0 << 2) >> 2] = $add$ptr;
  HEAP32[$out_syn + ($c$0 << 2) >> 2] = $add$ptr + 8192 + ($idx$neg << 2);
  $c$0 = $c$0 + 1 | 0;
 } while (($c$0 | 0) < ($0 | 0));
 $add$ptr13 = $st + 92 + ((Math_imul($add, $0) | 0) << 2) | 0;
 $add$ptr15 = $add$ptr13 + ($0 * 24 << 2) | 0;
 $mul16 = $2 << 1;
 $add$ptr21 = $add$ptr15 + ($mul16 << 2) + ($mul16 << 2) + ($mul16 << 2) | 0;
 $loss_count22 = $st + 52 | 0;
 $5 = HEAP32[$loss_count22 >> 2] | 0;
 $6 = HEAP32[$st + 20 >> 2] | 0;
 if (!(($5 | 0) > 4 | ($6 | 0) != 0)) if (!(HEAP32[$st + 56 >> 2] | 0)) {
  $cmp127 = ($5 | 0) == 0;
  if ($cmp127) {
   _pitch_downsample($decode_mem, $lp_pitch_buf$i, 2048, $0);
   _pitch_search($lp_pitch_buf$i + 1440 | 0, $lp_pitch_buf$i, 1328, 620, $pitch_index$i);
   $sub$i = 720 - (HEAP32[$pitch_index$i >> 2] | 0) | 0;
   HEAP32[$st + 48 >> 2] = $sub$i;
   $fade$0 = 1.0;
   $pitch_index$0 = $sub$i;
  } else {
   $fade$0 = .800000011920929;
   $pitch_index$0 = HEAP32[$st + 48 >> 2] | 0;
  }
  $mul135 = $pitch_index$0 << 1;
  $cond142 = ($mul135 | 0) < 1024 ? $mul135 : 1024;
  $24 = _llvm_stacksave() | 0;
  $vla144 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
  $vla145 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($cond142 << 2) | 0) + 15 & -16) | 0;
  $add$ptr147 = $pitch_index$i + 96 | 0;
  $25 = HEAP32[$1 + 60 >> 2] | 0;
  $add$ptr193 = $pitch_index$i + 4192 + (0 - $cond142 << 2) | 0;
  $mul200 = $cond142 << 2;
  $shr210 = $cond142 >> 1;
  $cmp212320 = ($pitch_index$0 | 0) > 0;
  $sub238 = 2048 - $N | 0;
  $mul239 = $sub238 << 2;
  $sub247 = 1024 - $pitch_index$0 | 0;
  $add248 = $3 + $N | 0;
  $cmp251326 = ($add248 | 0) > 0;
  $sub215 = 1024 - $shr210 | 0;
  $sub221 = 1024 - $cond142 | 0;
  $sub281 = $sub238 + -1 | 0;
  $postfilter_period = $st + 60 | 0;
  $postfilter_gain = $st + 68 | 0;
  $postfilter_tapset = $st + 76 | 0;
  $div376 = ($3 | 0) / 2 | 0;
  $cmp377343 = ($3 | 0) > 1;
  $cmp335339 = ($3 | 0) > 0;
  $sub381 = $3 + -1 | 0;
  $cmp353341 = ($N | 0) > 0;
  $26 = $add248 << 2;
  $arrayidx176 = $lp_pitch_buf$i + 4 | 0;
  $arrayidx176$1 = $lp_pitch_buf$i + 8 | 0;
  $arrayidx176$2 = $lp_pitch_buf$i + 12 | 0;
  $arrayidx176$3 = $lp_pitch_buf$i + 16 | 0;
  $arrayidx176$4 = $lp_pitch_buf$i + 20 | 0;
  $arrayidx176$5 = $lp_pitch_buf$i + 24 | 0;
  $arrayidx176$6 = $lp_pitch_buf$i + 28 | 0;
  $arrayidx176$7 = $lp_pitch_buf$i + 32 | 0;
  $arrayidx176$8 = $lp_pitch_buf$i + 36 | 0;
  $arrayidx176$9 = $lp_pitch_buf$i + 40 | 0;
  $arrayidx176$10 = $lp_pitch_buf$i + 44 | 0;
  $arrayidx176$11 = $lp_pitch_buf$i + 48 | 0;
  $arrayidx176$12 = $lp_pitch_buf$i + 52 | 0;
  $arrayidx176$13 = $lp_pitch_buf$i + 56 | 0;
  $arrayidx176$14 = $lp_pitch_buf$i + 60 | 0;
  $arrayidx176$15 = $lp_pitch_buf$i + 64 | 0;
  $arrayidx176$16 = $lp_pitch_buf$i + 68 | 0;
  $arrayidx176$17 = $lp_pitch_buf$i + 72 | 0;
  $arrayidx176$18 = $lp_pitch_buf$i + 76 | 0;
  $arrayidx176$19 = $lp_pitch_buf$i + 80 | 0;
  $arrayidx176$20 = $lp_pitch_buf$i + 84 | 0;
  $arrayidx176$21 = $lp_pitch_buf$i + 88 | 0;
  $arrayidx176$22 = $lp_pitch_buf$i + 92 | 0;
  $arrayidx176$23 = $lp_pitch_buf$i + 96 | 0;
  $sub282$1 = $sub238 + -2 | 0;
  $arrayidx284$1 = $lp_pitch_buf$i + 4 | 0;
  $sub282$2 = $sub238 + -3 | 0;
  $arrayidx284$2 = $lp_pitch_buf$i + 8 | 0;
  $sub282$3 = $sub238 + -4 | 0;
  $arrayidx284$3 = $lp_pitch_buf$i + 12 | 0;
  $sub282$4 = $sub238 + -5 | 0;
  $arrayidx284$4 = $lp_pitch_buf$i + 16 | 0;
  $sub282$5 = $sub238 + -6 | 0;
  $arrayidx284$5 = $lp_pitch_buf$i + 20 | 0;
  $sub282$6 = $sub238 + -7 | 0;
  $arrayidx284$6 = $lp_pitch_buf$i + 24 | 0;
  $sub282$7 = $sub238 + -8 | 0;
  $arrayidx284$7 = $lp_pitch_buf$i + 28 | 0;
  $sub282$8 = $sub238 + -9 | 0;
  $arrayidx284$8 = $lp_pitch_buf$i + 32 | 0;
  $sub282$9 = $sub238 + -10 | 0;
  $arrayidx284$9 = $lp_pitch_buf$i + 36 | 0;
  $sub282$10 = $sub238 + -11 | 0;
  $arrayidx284$10 = $lp_pitch_buf$i + 40 | 0;
  $sub282$11 = $sub238 + -12 | 0;
  $arrayidx284$11 = $lp_pitch_buf$i + 44 | 0;
  $sub282$12 = $sub238 + -13 | 0;
  $arrayidx284$12 = $lp_pitch_buf$i + 48 | 0;
  $sub282$13 = $sub238 + -14 | 0;
  $arrayidx284$13 = $lp_pitch_buf$i + 52 | 0;
  $sub282$14 = $sub238 + -15 | 0;
  $arrayidx284$14 = $lp_pitch_buf$i + 56 | 0;
  $sub282$15 = $sub238 + -16 | 0;
  $arrayidx284$15 = $lp_pitch_buf$i + 60 | 0;
  $sub282$16 = $sub238 + -17 | 0;
  $arrayidx284$16 = $lp_pitch_buf$i + 64 | 0;
  $sub282$17 = $sub238 + -18 | 0;
  $arrayidx284$17 = $lp_pitch_buf$i + 68 | 0;
  $sub282$18 = $sub238 + -19 | 0;
  $arrayidx284$18 = $lp_pitch_buf$i + 72 | 0;
  $sub282$19 = $sub238 + -20 | 0;
  $arrayidx284$19 = $lp_pitch_buf$i + 76 | 0;
  $sub282$20 = $sub238 + -21 | 0;
  $arrayidx284$20 = $lp_pitch_buf$i + 80 | 0;
  $sub282$21 = $sub238 + -22 | 0;
  $arrayidx284$21 = $lp_pitch_buf$i + 84 | 0;
  $sub282$22 = $sub238 + -23 | 0;
  $arrayidx284$22 = $lp_pitch_buf$i + 88 | 0;
  $sub282$23 = $sub238 + -24 | 0;
  $arrayidx284$23 = $lp_pitch_buf$i + 92 | 0;
  $c$4 = 0;
  do {
   $27 = HEAP32[$decode_mem + ($c$4 << 2) >> 2] | 0;
   $i$2318 = 0;
   do {
    HEAP32[$pitch_index$i + ($i$2318 << 2) >> 2] = HEAP32[$27 + ($i$2318 + 1e3 << 2) >> 2];
    $i$2318 = $i$2318 + 1 | 0;
   } while (($i$2318 | 0) != 1048);
   if ($cmp127) {
    __celt_autocorr($add$ptr147, $lp_pitch_buf$i, $25, $3, 24, 1024);
    HEAPF32[$lp_pitch_buf$i >> 2] = +HEAPF32[$lp_pitch_buf$i >> 2] * 1.000100016593933;
    $30 = +HEAPF32[$arrayidx176 >> 2];
    HEAPF32[$arrayidx176 >> 2] = $30 - $30 * 6.400000711437315e-05;
    $31 = +HEAPF32[$arrayidx176$1 >> 2];
    HEAPF32[$arrayidx176$1 >> 2] = $31 - $31 * 6.400000711437315e-05 * 2.0 * 2.0;
    $32 = +HEAPF32[$arrayidx176$2 >> 2];
    HEAPF32[$arrayidx176$2 >> 2] = $32 - $32 * 6.400000711437315e-05 * 3.0 * 3.0;
    $33 = +HEAPF32[$arrayidx176$3 >> 2];
    HEAPF32[$arrayidx176$3 >> 2] = $33 - $33 * 6.400000711437315e-05 * 4.0 * 4.0;
    $34 = +HEAPF32[$arrayidx176$4 >> 2];
    HEAPF32[$arrayidx176$4 >> 2] = $34 - $34 * 6.400000711437315e-05 * 5.0 * 5.0;
    $35 = +HEAPF32[$arrayidx176$5 >> 2];
    HEAPF32[$arrayidx176$5 >> 2] = $35 - $35 * 6.400000711437315e-05 * 6.0 * 6.0;
    $36 = +HEAPF32[$arrayidx176$6 >> 2];
    HEAPF32[$arrayidx176$6 >> 2] = $36 - $36 * 6.400000711437315e-05 * 7.0 * 7.0;
    $37 = +HEAPF32[$arrayidx176$7 >> 2];
    HEAPF32[$arrayidx176$7 >> 2] = $37 - $37 * 6.400000711437315e-05 * 8.0 * 8.0;
    $38 = +HEAPF32[$arrayidx176$8 >> 2];
    HEAPF32[$arrayidx176$8 >> 2] = $38 - $38 * 6.400000711437315e-05 * 9.0 * 9.0;
    $39 = +HEAPF32[$arrayidx176$9 >> 2];
    HEAPF32[$arrayidx176$9 >> 2] = $39 - $39 * 6.400000711437315e-05 * 10.0 * 10.0;
    $40 = +HEAPF32[$arrayidx176$10 >> 2];
    HEAPF32[$arrayidx176$10 >> 2] = $40 - $40 * 6.400000711437315e-05 * 11.0 * 11.0;
    $41 = +HEAPF32[$arrayidx176$11 >> 2];
    HEAPF32[$arrayidx176$11 >> 2] = $41 - $41 * 6.400000711437315e-05 * 12.0 * 12.0;
    $42 = +HEAPF32[$arrayidx176$12 >> 2];
    HEAPF32[$arrayidx176$12 >> 2] = $42 - $42 * 6.400000711437315e-05 * 13.0 * 13.0;
    $43 = +HEAPF32[$arrayidx176$13 >> 2];
    HEAPF32[$arrayidx176$13 >> 2] = $43 - $43 * 6.400000711437315e-05 * 14.0 * 14.0;
    $44 = +HEAPF32[$arrayidx176$14 >> 2];
    HEAPF32[$arrayidx176$14 >> 2] = $44 - $44 * 6.400000711437315e-05 * 15.0 * 15.0;
    $45 = +HEAPF32[$arrayidx176$15 >> 2];
    HEAPF32[$arrayidx176$15 >> 2] = $45 - $45 * 6.400000711437315e-05 * 16.0 * 16.0;
    $46 = +HEAPF32[$arrayidx176$16 >> 2];
    HEAPF32[$arrayidx176$16 >> 2] = $46 - $46 * 6.400000711437315e-05 * 17.0 * 17.0;
    $47 = +HEAPF32[$arrayidx176$17 >> 2];
    HEAPF32[$arrayidx176$17 >> 2] = $47 - $47 * 6.400000711437315e-05 * 18.0 * 18.0;
    $48 = +HEAPF32[$arrayidx176$18 >> 2];
    HEAPF32[$arrayidx176$18 >> 2] = $48 - $48 * 6.400000711437315e-05 * 19.0 * 19.0;
    $49 = +HEAPF32[$arrayidx176$19 >> 2];
    HEAPF32[$arrayidx176$19 >> 2] = $49 - $49 * 6.400000711437315e-05 * 20.0 * 20.0;
    $50 = +HEAPF32[$arrayidx176$20 >> 2];
    HEAPF32[$arrayidx176$20 >> 2] = $50 - $50 * 6.400000711437315e-05 * 21.0 * 21.0;
    $51 = +HEAPF32[$arrayidx176$21 >> 2];
    HEAPF32[$arrayidx176$21 >> 2] = $51 - $51 * 6.400000711437315e-05 * 22.0 * 22.0;
    $52 = +HEAPF32[$arrayidx176$22 >> 2];
    HEAPF32[$arrayidx176$22 >> 2] = $52 - $52 * 6.400000711437315e-05 * 23.0 * 23.0;
    $53 = +HEAPF32[$arrayidx176$23 >> 2];
    HEAPF32[$arrayidx176$23 >> 2] = $53 - $53 * 6.400000711437315e-05 * 24.0 * 24.0;
    $add$ptr188 = $add$ptr13 + ($c$4 * 24 << 2) | 0;
    __celt_lpc($add$ptr188, $lp_pitch_buf$i, 24);
    $add$ptr195$pre$phiZZ2D = $add$ptr188;
   } else $add$ptr195$pre$phiZZ2D = $add$ptr13 + ($c$4 * 24 << 2) | 0;
   _celt_fir_c($add$ptr193, $add$ptr195$pre$phiZZ2D, $vla145, $cond142);
   _memcpy($add$ptr193 | 0, $vla145 | 0, $mul200 | 0) | 0;
   if ($cmp212320) {
    $E1$0321 = 1.0;
    $E2$0322 = 1.0;
    $i$4323 = 0;
    while (1) {
     $54 = +HEAPF32[$add$ptr147 + ($sub215 + $i$4323 << 2) >> 2];
     $add219 = $E1$0321 + $54 * $54;
     $55 = +HEAPF32[$add$ptr147 + ($sub221 + $i$4323 << 2) >> 2];
     $add225 = $E2$0322 + $55 * $55;
     $i$4323 = $i$4323 + 1 | 0;
     if (($i$4323 | 0) >= ($shr210 | 0)) {
      $E1$0$lcssa = $add219;
      $E2$0$lcssa = $add225;
      break;
     } else {
      $E1$0321 = $add219;
      $E2$0322 = $add225;
     }
    }
   } else {
    $E1$0$lcssa = 1.0;
    $E2$0$lcssa = 1.0;
   }
   $56 = +Math_sqrt(+(($E1$0$lcssa < $E2$0$lcssa ? $E1$0$lcssa : $E2$0$lcssa) / $E2$0$lcssa));
   _memmove($27 | 0, $27 + ($N << 2) | 0, $mul239 | 0) | 0;
   if ($cmp251326) {
    $S1$0327 = 0.0;
    $attenuation$0328 = $fade$0 * $56;
    $i$5330 = 0;
    $j151$0329 = 0;
    while (1) {
     $cmp254 = ($j151$0329 | 0) < ($pitch_index$0 | 0);
     $attenuation$0328 = $cmp254 ? $attenuation$0328 : $56 * $attenuation$0328;
     $j151$1 = $j151$0329 - ($cmp254 ? 0 : $pitch_index$0) | 0;
     $add260 = $j151$1 + $sub247 | 0;
     HEAPF32[$27 + ($i$5330 + $sub238 << 2) >> 2] = $attenuation$0328 * +HEAPF32[$add$ptr147 + ($add260 << 2) >> 2];
     $58 = +HEAPF32[$27 + ($add260 + 1024 - $N << 2) >> 2];
     $add271 = $S1$0327 + $58 * $58;
     $i$5330 = $i$5330 + 1 | 0;
     if (($i$5330 | 0) == ($add248 | 0)) {
      $S1$0$lcssa = $add271;
      break;
     } else {
      $S1$0327 = $add271;
      $j151$0329 = $j151$1 + 1 | 0;
     }
    }
   } else $S1$0$lcssa = 0.0;
   HEAP32[$lp_pitch_buf$i >> 2] = HEAP32[$27 + ($sub281 << 2) >> 2];
   HEAP32[$arrayidx284$1 >> 2] = HEAP32[$27 + ($sub282$1 << 2) >> 2];
   HEAP32[$arrayidx284$2 >> 2] = HEAP32[$27 + ($sub282$2 << 2) >> 2];
   HEAP32[$arrayidx284$3 >> 2] = HEAP32[$27 + ($sub282$3 << 2) >> 2];
   HEAP32[$arrayidx284$4 >> 2] = HEAP32[$27 + ($sub282$4 << 2) >> 2];
   HEAP32[$arrayidx284$5 >> 2] = HEAP32[$27 + ($sub282$5 << 2) >> 2];
   HEAP32[$arrayidx284$6 >> 2] = HEAP32[$27 + ($sub282$6 << 2) >> 2];
   HEAP32[$arrayidx284$7 >> 2] = HEAP32[$27 + ($sub282$7 << 2) >> 2];
   HEAP32[$arrayidx284$8 >> 2] = HEAP32[$27 + ($sub282$8 << 2) >> 2];
   HEAP32[$arrayidx284$9 >> 2] = HEAP32[$27 + ($sub282$9 << 2) >> 2];
   HEAP32[$arrayidx284$10 >> 2] = HEAP32[$27 + ($sub282$10 << 2) >> 2];
   HEAP32[$arrayidx284$11 >> 2] = HEAP32[$27 + ($sub282$11 << 2) >> 2];
   HEAP32[$arrayidx284$12 >> 2] = HEAP32[$27 + ($sub282$12 << 2) >> 2];
   HEAP32[$arrayidx284$13 >> 2] = HEAP32[$27 + ($sub282$13 << 2) >> 2];
   HEAP32[$arrayidx284$14 >> 2] = HEAP32[$27 + ($sub282$14 << 2) >> 2];
   HEAP32[$arrayidx284$15 >> 2] = HEAP32[$27 + ($sub282$15 << 2) >> 2];
   HEAP32[$arrayidx284$16 >> 2] = HEAP32[$27 + ($sub282$16 << 2) >> 2];
   HEAP32[$arrayidx284$17 >> 2] = HEAP32[$27 + ($sub282$17 << 2) >> 2];
   HEAP32[$arrayidx284$18 >> 2] = HEAP32[$27 + ($sub282$18 << 2) >> 2];
   HEAP32[$arrayidx284$19 >> 2] = HEAP32[$27 + ($sub282$19 << 2) >> 2];
   HEAP32[$arrayidx284$20 >> 2] = HEAP32[$27 + ($sub282$20 << 2) >> 2];
   HEAP32[$arrayidx284$21 >> 2] = HEAP32[$27 + ($sub282$21 << 2) >> 2];
   HEAP32[$arrayidx284$22 >> 2] = HEAP32[$27 + ($sub282$22 << 2) >> 2];
   HEAP32[$arrayidx284$23 >> 2] = HEAP32[$27 + ($sub282$23 << 2) >> 2];
   $add$ptr288 = $27 + 8192 | 0;
   $add$ptr290 = $add$ptr288 + ($idx$neg << 2) | 0;
   _celt_iir($add$ptr290, $add$ptr195$pre$phiZZ2D, $add$ptr290, $add248, $lp_pitch_buf$i);
   if ($cmp251326) {
    $S2$0334 = 0.0;
    $i$7335 = 0;
    while (1) {
     $83 = +HEAPF32[$27 + ($i$7335 + $sub238 << 2) >> 2];
     $add307 = $S2$0334 + $83 * $83;
     $i$7335 = $i$7335 + 1 | 0;
     if (($i$7335 | 0) == ($add248 | 0)) {
      $S2$0$lcssa = $add307;
      break;
     } else $S2$0334 = $add307;
    }
   } else $S2$0$lcssa = 0.0;
   if ($S1$0$lcssa > $S2$0$lcssa * .20000000298023224) {
    if ($S1$0$lcssa < $S2$0$lcssa) {
     $84 = +Math_sqrt(+(($S1$0$lcssa + 1.0) / ($S2$0$lcssa + 1.0)));
     if ($cmp335339) {
      $sub339 = 1.0 - $84;
      $i$9340 = 0;
      do {
       $arrayidx344 = $27 + ($i$9340 + $sub238 << 2) | 0;
       HEAPF32[$arrayidx344 >> 2] = +HEAPF32[$arrayidx344 >> 2] * (1.0 - $sub339 * +HEAPF32[$25 + ($i$9340 << 2) >> 2]);
       $i$9340 = $i$9340 + 1 | 0;
      } while (($i$9340 | 0) != ($3 | 0));
     }
     if ($cmp353341) {
      $i$10342 = $3;
      do {
       $arrayidx358 = $27 + ($i$10342 + $sub238 << 2) | 0;
       HEAPF32[$arrayidx358 >> 2] = $84 * +HEAPF32[$arrayidx358 >> 2];
       $i$10342 = $i$10342 + 1 | 0;
      } while (($i$10342 | 0) < ($add248 | 0));
     }
    }
   } else if ($cmp251326) _memset($27 + ($sub238 << 2) | 0, 0, $26 | 0) | 0;
   $88 = HEAP32[$postfilter_period >> 2] | 0;
   $sub370 = -+HEAPF32[$postfilter_gain >> 2];
   $90 = HEAP32[$postfilter_tapset >> 2] | 0;
   _comb_filter($vla144, $add$ptr288, $88, $88, $3, $sub370, $sub370, $90, $90, 0, 0);
   if ($cmp377343) {
    $i$11$neg345 = 0;
    $i$11344 = 0;
    while (1) {
     $sub382 = $sub381 + $i$11$neg345 | 0;
     HEAPF32[$27 + ($i$11344 + 2048 << 2) >> 2] = +HEAPF32[$25 + ($i$11344 << 2) >> 2] * +HEAPF32[$vla144 + ($sub382 << 2) >> 2] + +HEAPF32[$25 + ($sub382 << 2) >> 2] * +HEAPF32[$vla144 + ($i$11344 << 2) >> 2];
     $inc394 = $i$11344 + 1 | 0;
     if (($inc394 | 0) == ($div376 | 0)) break; else {
      $i$11$neg345 = ~$i$11344;
      $i$11344 = $inc394;
     }
    }
   }
   $c$4 = $c$4 + 1 | 0;
  } while (($c$4 | 0) < ($0 | 0));
  _llvm_stackrestore($24 | 0);
  $add402 = $5 + 1 | 0;
  HEAP32[$loss_count22 >> 2] = $add402;
  STACKTOP = sp;
  return;
 }
 $8 = HEAP32[$st + 24 >> 2] | 0;
 $9 = HEAP32[$1 + 12 >> 2] | 0;
 $$ = ($8 | 0) < ($9 | 0) ? $8 : $9;
 $spec$select = ($6 | 0) > ($$ | 0) ? $6 : $$;
 $mul42 = Math_imul($0, $N) | 0;
 $10 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul42 << 2) | 0) + 15 & -16) | 0;
 $cond44 = ($5 | 0) == 0 ? 1.5 : .5;
 if (($6 | 0) < ($8 | 0)) {
  $c$1$us = 0;
  do {
   $mul47$us = Math_imul($c$1$us, $2) | 0;
   $i$0317$us = $6;
   do {
    $add48$us = $i$0317$us + $mul47$us | 0;
    $11 = +HEAPF32[$add$ptr21 + ($add48$us << 2) >> 2];
    $arrayidx52$us = $add$ptr15 + ($add48$us << 2) | 0;
    $sub$us = +HEAPF32[$arrayidx52$us >> 2] - $cond44;
    HEAPF32[$arrayidx52$us >> 2] = $11 > $sub$us ? $11 : $sub$us;
    $i$0317$us = $i$0317$us + 1 | 0;
   } while (($i$0317$us | 0) != ($8 | 0));
   $c$1$us = $c$1$us + 1 | 0;
  } while (($c$1$us | 0) < ($0 | 0));
 }
 $rng = $st + 40 | 0;
 $13 = HEAP32[$rng >> 2] | 0;
 if (($0 | 0) > 0 & ($6 | 0) < ($$ | 0)) {
  $c$2314$us = 0;
  $seed$0313$us = $13;
  while (1) {
   $mul79$us = Math_imul($c$2314$us, $N) | 0;
   $i$1310$us = $6;
   $seed$1309$us = $seed$0313$us;
   while (1) {
    $conv$us = HEAP16[$4 + ($i$1310$us << 1) >> 1] | 0;
    $add81$us = ($conv$us << $LM) + $mul79$us | 0;
    $i$1310$us = $i$1310$us + 1 | 0;
    $shl88$us = (HEAP16[$4 + ($i$1310$us << 1) >> 1] | 0) - $conv$us << $LM;
    if (($shl88$us | 0) > 0) {
     $j$0306$us = 0;
     $seed$2307$us = $seed$1309$us;
     do {
      $seed$2307$us = (Math_imul($seed$2307$us, 1664525) | 0) + 1013904223 | 0;
      HEAPF32[$vla + ($j$0306$us + $add81$us << 2) >> 2] = +($seed$2307$us >> 20 | 0);
      $j$0306$us = $j$0306$us + 1 | 0;
     } while (($j$0306$us | 0) != ($shl88$us | 0));
     $add$ptr99$us = $vla + ($add81$us << 2) | 0;
     $i$07$i$i = 0;
     $xy$08$i$i = 0.0;
     do {
      $16 = +HEAPF32[$add$ptr99$us + ($i$07$i$i << 2) >> 2];
      $xy$08$i$i = $xy$08$i$i + $16 * $16;
      $i$07$i$i = $i$07$i$i + 1 | 0;
     } while (($i$07$i$i | 0) != ($shl88$us | 0));
     $div$i = 1.0 / +Math_sqrt(+($xy$08$i$i + 1.0000000036274937e-15));
     $i$013$i = 0;
     $xptr$014$i = $add$ptr99$us;
     while (1) {
      HEAPF32[$xptr$014$i >> 2] = $div$i * +HEAPF32[$xptr$014$i >> 2];
      $i$013$i = $i$013$i + 1 | 0;
      if (($i$013$i | 0) == ($shl88$us | 0)) {
       $seed$2$lcssa$us3 = $seed$2307$us;
       break;
      } else $xptr$014$i = $xptr$014$i + 4 | 0;
     }
    } else $seed$2$lcssa$us3 = $seed$1309$us;
    if (($i$1310$us | 0) >= ($spec$select | 0)) break; else $seed$1309$us = $seed$2$lcssa$us3;
   }
   $c$2314$us = $c$2314$us + 1 | 0;
   if (($c$2314$us | 0) == ($0 | 0)) {
    $seed$0$lcssa = $seed$2$lcssa$us3;
    break;
   } else $seed$0313$us = $seed$2$lcssa$us3;
  }
 } else $seed$0$lcssa = $13;
 HEAP32[$rng >> 2] = $seed$0$lcssa;
 $mul114 = 2048 - $N + ($3 >>> 1) << 2;
 $c$3 = 0;
 do {
  $20 = HEAP32[$decode_mem + ($c$3 << 2) >> 2] | 0;
  _memmove($20 | 0, $20 + ($N << 2) | 0, $mul114 | 0) | 0;
  $c$3 = $c$3 + 1 | 0;
 } while (($c$3 | 0) < ($0 | 0));
 _celt_synthesis($1, $vla, $out_syn, $add$ptr15, $6, $spec$select, $0, $0, 0, $LM, HEAP32[$st + 16 >> 2] | 0, 0);
 _llvm_stackrestore($10 | 0);
 $add402 = $5 + 1 | 0;
 HEAP32[$loss_count22 >> 2] = $add402;
 STACKTOP = sp;
 return;
}

function _quant_all_bands($encode, $m, $start, $end, $X_, $Y_, $collapse_masks, $bandE, $pulses, $shortBlocks, $spread, $dual_stereo, $intensity, $tf_res, $total_bits, $balance, $ec, $LM, $codedBands, $seed, $complexity, $arch, $disable_inv) {
 $encode = $encode | 0;
 $m = $m | 0;
 $start = $start | 0;
 $end = $end | 0;
 $X_ = $X_ | 0;
 $Y_ = $Y_ | 0;
 $collapse_masks = $collapse_masks | 0;
 $bandE = $bandE | 0;
 $pulses = $pulses | 0;
 $shortBlocks = $shortBlocks | 0;
 $spread = $spread | 0;
 $dual_stereo = $dual_stereo | 0;
 $intensity = $intensity | 0;
 $tf_res = $tf_res | 0;
 $total_bits = $total_bits | 0;
 $balance = $balance | 0;
 $ec = $ec | 0;
 $LM = $LM | 0;
 $codedBands = $codedBands | 0;
 $seed = $seed | 0;
 $complexity = $complexity | 0;
 $arch = $arch | 0;
 $disable_inv = $disable_inv | 0;
 var $$not = 0, $0 = 0, $1 = 0, $13 = 0, $24 = 0, $37 = 0.0, $39 = 0.0, $5 = 0, $58 = 0, $6 = 0, $9 = 0, $X$0 = 0, $Y$0 = 0, $Y$2 = 0, $add$i461 = 0.0, $add$ptr20 = 0, $add$ptr441 = 0, $add$ptr72 = 0, $add116 = 0, $add193 = 0, $add2$i = 0.0, $add254 = 0, $add266 = 0, $add4$i = 0, $add404 = 0.0, $add597 = 0, $arrayidx = 0, $arrayidx305 = 0, $arrayidx69 = 0, $avoid_split_noise = 0, $b$0 = 0, $balance$addr$0568 = 0, $bytes_save = 0, $call333 = 0, $call333544 = 0, $call333547 = 0, $call397 = 0, $call489 = 0, $call566 = 0, $call588 = 0, $cmp = 0, $cmp204 = 0, $cmp210 = 0, $cmp292 = 0, $cmp315 = 0, $cmp61 = 0, $cmp67 = 0, $cond = 0, $cond125 = 0, $cond352 = 0, $cond396 = 0, $cond488 = 0, $cond564 = 0, $cond586 = 0, $cond9 = 0, $conv$i = 0, $conv$i493 = 0, $conv18 = 0, $ctx = 0, $ctx_save = 0, $ctx_save2 = 0, $div = 0, $div$i460 = 0.0, $dual_stereo$addr$0569 = 0, $dual_stereo$addr$1542 = 0, $eBands1 = 0, $ec_save$sroa$0$0$copyload = 0, $ec_save$sroa$5$0$$sroa_idx28 = 0, $ec_save$sroa$5$0$copyload = 0, $ec_save$sroa$6 = 0, $ec_save$sroa$6$0$$sroa_idx = 0, $ec_save$sroa$638$0$$sroa_idx39 = 0, $ec_save$sroa$638$0$copyload = 0, $ec_save$sroa$7 = 0, $ec_save$sroa$7$0$$sroa_idx = 0, $ec_save2 = 0, $effEBands = 0, $effective_lowband$0 = 0, $fold_end$0$lcssa = 0, $fold_i$0 = 0, $fold_start$0 = 0, $i$0566 = 0, $i$07$i = 0, $i$07$i468 = 0, $i$07$i481 = 0, $i$07$i517 = 0, $i65 = 0, $idx$neg = 0, $inc = 0, $inc555575 = 0, $j$0561 = 0, $lowband_offset$0564 = 0, $lowband_offset$1 = 0, $lowband_scratch$0 = 0, $lowband_scratch$1565 = 0, $m$idx$val = 0, $m$idx459$val = 0, $mul = 0, $mul$i = 0, $mul$i497 = 0, $mul11$i = 0, $mul11$i502 = 0, $mul14 = 0, $mul17$i = 0, $mul19 = 0, $mul237 = 0, $mul273 = 0, $mul300558 = 0, $mul32 = 0, $mul368 = 0, $mul592 = 0, $mul71 = 0, $nbEBands = 0, $nbits_total$i = 0, $or = 0, $or$cond6 = 0, $or282 = 0, $or367 = 0, $remaining_bits100 = 0, $resynth_alloc$0539 = 0, $seed56 = 0, $shr$i = 0, $shr3$i = 0, $spec$select = 0, $spec$select444 = 0, $spec$select448 = 0, $spec$select450 = 0, $spec$select452 = 0, $spec$select453548 = 0, $spec$select455 = 0, $sub$i1 = 0, $sub105 = 0, $sub14$i = 0, $sub239 = 0, $sub257 = 0, $sub288 = 0, $sub301 = 0, $sub442 = 0, $sub66 = 0, $sub7$i = 0, $sub88 = 0, $sub98 = 0, $tf_change209 = 0, $theta_round = 0, $tobool = 0, $tobool290 = 0, $update_lowband$0563 = 0, $vla = 0, $vla33 = 0, $vla46 = 0, $vla47 = 0, $vla48 = 0, $vla49 = 0, $vla50 = 0, $x_cm$0 = 0, $x_cm$1 = 0, $x_cm$2 = 0, $x_cm$4 = 0, $xy$08$i = 0.0, $xy$08$i467 = 0.0, $xy$08$i480 = 0.0, $xy$08$i516 = 0.0, $y_cm$0 = 0, $y_cm$1 = 0, $y_cm$2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $i$0566$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552 | 0;
 $ctx = sp + 1488 | 0;
 $ec_save$sroa$6 = sp + 1304 | 0;
 $ec_save$sroa$7 = sp + 1280 | 0;
 $ec_save2 = sp + 1440 | 0;
 $ctx_save = sp + 1380 | 0;
 $ctx_save2 = sp + 1320 | 0;
 $bytes_save = sp;
 $eBands1 = $m + 32 | 0;
 $0 = HEAP32[$eBands1 >> 2] | 0;
 $cmp = ($Y_ | 0) != 0;
 $cond = $cmp ? 2 : 1;
 $tobool = ($encode | 0) != 0;
 $spec$select = $tobool & $cmp & ($dual_stereo | 0) == 0 & ($complexity | 0) > 7;
 $1 = $spec$select | $tobool ^ 1;
 $cond9 = ($shortBlocks | 0) == 0 ? 1 : 1 << $LM;
 $arrayidx = $0 + ($start << 1) | 0;
 $mul = HEAP16[$arrayidx >> 1] << $LM;
 $nbEBands = $m + 8 | 0;
 $mul14 = Math_imul((HEAP16[$0 + ((HEAP32[$nbEBands >> 2] | 0) + -1 << 1) >> 1] << $LM) - $mul | 0, $cond) | 0;
 $5 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul14 << 2) | 0) + 15 & -16) | 0;
 $6 = HEAP32[$nbEBands >> 2] | 0;
 $conv18 = HEAP16[$0 + ($6 + -1 << 1) >> 1] | 0;
 $mul19 = $conv18 << $LM;
 $idx$neg = 0 - $mul | 0;
 $add$ptr20 = $vla + ($mul19 << 2) + ($idx$neg << 2) | 0;
 if ($spec$select) {
  $mul32 = (HEAP16[$0 + ($6 << 1) >> 1] | 0) - $conv18 << $LM;
  $vla33 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul32 << 2) | 0) + 15 & -16) | 0;
  $lowband_scratch$0 = $vla33;
  $resynth_alloc$0539 = $mul32;
 } else {
  $lowband_scratch$0 = $X_ + ($mul19 << 2) | 0;
  $resynth_alloc$0539 = 1;
 }
 $vla46 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($resynth_alloc$0539 << 2) | 0) + 15 & -16) | 0;
 $vla47 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($resynth_alloc$0539 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$ctx + 36 >> 2] = $bandE;
 HEAP32[$ctx + 28 >> 2] = $ec;
 HEAP32[$ctx >> 2] = $encode;
 HEAP32[$ctx + 16 >> 2] = $intensity;
 HEAP32[$ctx + 8 >> 2] = $m;
 $9 = HEAP32[$seed >> 2] | 0;
 $seed56 = $ctx + 40 | 0;
 HEAP32[$seed56 >> 2] = $9;
 HEAP32[$ctx + 20 >> 2] = $spread;
 HEAP32[$ctx + 44 >> 2] = $arch;
 HEAP32[$ctx + 52 >> 2] = $disable_inv;
 HEAP32[$ctx + 4 >> 2] = $1 & 1;
 $theta_round = $ctx + 48 | 0;
 HEAP32[$theta_round >> 2] = 0;
 $cmp61 = ($cond9 | 0) > 1;
 $avoid_split_noise = $ctx + 56 | 0;
 HEAP32[$avoid_split_noise >> 2] = $cmp61 & 1;
 if (($start | 0) >= ($end | 0)) {
  $58 = $9;
  HEAP32[$seed >> 2] = $58;
  _llvm_stackrestore($5 | 0);
  STACKTOP = sp;
  return;
 }
 $vla50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($resynth_alloc$0539 << 2) | 0) + 15 & -16) | 0;
 $vla49 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($resynth_alloc$0539 << 2) | 0) + 15 & -16) | 0;
 $vla48 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($resynth_alloc$0539 << 2) | 0) + 15 & -16) | 0;
 $i65 = $ctx + 12 | 0;
 $sub66 = $end + -1 | 0;
 $remaining_bits100 = $ctx + 32 | 0;
 $add193 = $start + 1 | 0;
 $add4$i = $start + 2 | 0;
 $tf_change209 = $ctx + 24 | 0;
 $effEBands = $m + 12 | 0;
 $spec$select448 = $cmp ? $vla : 0;
 $sub288 = (1 << $cond9) + -1 | 0;
 $$not = $1 ^ 1;
 $or$cond6 = ($spread | 0) != 3 | $cmp61;
 $add597 = $cond + -1 | 0;
 $ec_save$sroa$5$0$$sroa_idx28 = $ec + 4 | 0;
 $ec_save$sroa$6$0$$sroa_idx = $ec + 8 | 0;
 $ec_save$sroa$638$0$$sroa_idx39 = $ec + 24 | 0;
 $ec_save$sroa$7$0$$sroa_idx = $ec + 28 | 0;
 $nbits_total$i = $ec + 20 | 0;
 $balance$addr$0568 = $balance;
 $dual_stereo$addr$0569 = $dual_stereo;
 $i$0566 = $start;
 $lowband_offset$0564 = 0;
 $lowband_scratch$1565 = $lowband_scratch$0;
 $update_lowband$0563 = 1;
 while (1) {
  HEAP32[$i65 >> 2] = $i$0566;
  $cmp67 = ($i$0566 | 0) == ($sub66 | 0);
  $arrayidx69 = $0 + ($i$0566 << 1) | 0;
  $mul71 = HEAP16[$arrayidx69 >> 1] << $LM;
  $add$ptr72 = $X_ + ($mul71 << 2) | 0;
  $Y$0 = $cmp ? $Y_ + ($mul71 << 2) | 0 : 0;
  $i$0566$looptemp = $i$0566;
  $i$0566 = $i$0566 + 1 | 0;
  $sub88 = (HEAP16[$0 + ($i$0566 << 1) >> 1] << $LM) - $mul71 | 0;
  if (($sub88 | 0) <= 0) {
   label = 7;
   break;
  }
  $13 = HEAP32[$ec_save$sroa$7$0$$sroa_idx >> 2] | 0;
  $sub$i1 = 32 - (Math_clz32($13 | 0) | 0) | 0;
  $shr$i = $13 >>> ($sub$i1 + -16 | 0);
  $shr3$i = $shr$i >>> 12;
  $sub7$i = (Math_imul($sub$i1, -8) | 0) + (HEAP32[$nbits_total$i >> 2] << 3) + (($shr$i >>> 0 > (HEAP32[5744 + ($shr3$i + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i) | 0;
  $spec$select444 = $balance$addr$0568 - (($i$0566$looptemp | 0) == ($start | 0) ? 0 : $sub7$i) | 0;
  $sub98 = $total_bits - $sub7$i | 0;
  HEAP32[$remaining_bits100 >> 2] = $sub98 + -1;
  if (($i$0566$looptemp | 0) < ($codedBands | 0)) {
   $sub105 = $codedBands - $i$0566$looptemp | 0;
   $add116 = (HEAP32[$pulses + ($i$0566$looptemp << 2) >> 2] | 0) + (($spec$select444 | 0) / ((($sub105 | 0) < 3 ? $sub105 : 3) | 0) | 0) | 0;
   $cond125 = ($sub98 | 0) < ($add116 | 0) ? $sub98 : $add116;
   if (($cond125 | 0) > 16383) $b$0 = 16383; else $b$0 = ($cond125 | 0) > 0 ? $cond125 : 0;
  } else $b$0 = 0;
  if ($1) $lowband_offset$1 = (($update_lowband$0563 | 0) != 0 | ($lowband_offset$0564 | 0) == 0) & (($i$0566$looptemp | 0) == ($add193 | 0) ? 1 : ($mul71 - $sub88 | 0) >= (HEAP16[$arrayidx >> 1] << $LM | 0)) ? $i$0566$looptemp : $lowband_offset$0564; else $lowband_offset$1 = $lowband_offset$0564;
  $cmp204 = ($i$0566$looptemp | 0) == ($add193 | 0);
  if ($cmp204) {
   $m$idx459$val = HEAP32[$eBands1 >> 2] | 0;
   $conv$i = HEAP16[$m$idx459$val + ($add193 << 1) >> 1] | 0;
   $mul$i = $conv$i - (HEAP16[$m$idx459$val + ($start << 1) >> 1] | 0) << $LM;
   $mul11$i = (HEAP16[$m$idx459$val + ($add4$i << 1) >> 1] | 0) - $conv$i << $LM;
   $sub14$i = ($mul$i << 1) - $mul11$i | 0;
   $mul17$i = $mul11$i - $mul$i << 2;
   _memcpy($vla + ($mul$i << 2) | 0, $vla + ($sub14$i << 2) | 0, $mul17$i | 0) | 0;
   if ($dual_stereo$addr$0569 | 0) _memcpy($add$ptr20 + ($mul$i << 2) | 0, $add$ptr20 + ($sub14$i << 2) | 0, $mul17$i | 0) | 0;
  }
  $24 = HEAP32[$tf_res + ($i$0566$looptemp << 2) >> 2] | 0;
  HEAP32[$tf_change209 >> 2] = $24;
  $cmp210 = ($i$0566$looptemp | 0) < (HEAP32[$effEBands >> 2] | 0);
  $Y$2 = $cmp210 ? $Y$0 : $spec$select448;
  $X$0 = $cmp210 ? $add$ptr72 : $vla;
  $lowband_scratch$1565 = ($spec$select | $cmp67 ^ 1) & $cmp210 ? $lowband_scratch$1565 : 0;
  if (($lowband_offset$1 | 0) != 0 & ($or$cond6 | ($24 | 0) < 0)) {
   $mul237 = HEAP16[$0 + ($lowband_offset$1 << 1) >> 1] << $LM;
   $sub239 = $mul237 - $mul - $sub88 | 0;
   $spec$select450 = ($sub239 | 0) > 0 ? $sub239 : 0;
   $add254 = $spec$select450 + $mul | 0;
   $fold_start$0 = $lowband_offset$1;
   do $fold_start$0 = $fold_start$0 + -1 | 0; while ((HEAP16[$0 + ($fold_start$0 << 1) >> 1] << $LM | 0) > ($add254 | 0));
   $sub257 = $lowband_offset$1 + -1 | 0;
   L27 : do if (($lowband_offset$1 | 0) < ($i$0566$looptemp | 0)) {
    $add266 = $add254 + $sub88 | 0;
    if (($mul237 | 0) < ($add266 | 0)) {
     $inc555575 = $lowband_offset$1;
     while (1) {
      $inc = $inc555575 + 1 | 0;
      if (($inc | 0) >= ($i$0566$looptemp | 0)) {
       $fold_end$0$lcssa = $inc555575;
       break L27;
      }
      if ((HEAP16[$0 + ($inc << 1) >> 1] << $LM | 0) < ($add266 | 0)) $inc555575 = $inc; else {
       $fold_end$0$lcssa = $inc555575;
       break;
      }
     }
    } else $fold_end$0$lcssa = $sub257;
   } else $fold_end$0$lcssa = $sub257; while (0);
   $fold_i$0 = $fold_start$0;
   $x_cm$0 = 0;
   $y_cm$0 = 0;
   while (1) {
    $mul273 = Math_imul($fold_i$0, $cond) | 0;
    $or = $x_cm$0 | HEAPU8[$collapse_masks + $mul273 >> 0];
    $or282 = $y_cm$0 | HEAPU8[$collapse_masks + ($add597 + $mul273) >> 0];
    if (($fold_i$0 | 0) < ($fold_end$0$lcssa | 0)) {
     $fold_i$0 = $fold_i$0 + 1 | 0;
     $x_cm$0 = $or;
     $y_cm$0 = $or282;
    } else {
     $effective_lowband$0 = $spec$select450;
     $x_cm$1 = $or;
     $y_cm$1 = $or282;
     break;
    }
   }
  } else {
   $effective_lowband$0 = -1;
   $x_cm$1 = $sub288;
   $y_cm$1 = $sub288;
  }
  $tobool290 = ($dual_stereo$addr$0569 | 0) == 0;
  $cmp292 = ($i$0566$looptemp | 0) != ($intensity | 0);
  if ($cmp292 | $tobool290 | $$not) if ($tobool290 | $cmp292 ^ 1) label = 35; else {
   $div = $b$0 >>> 1;
   $cmp315 = ($effective_lowband$0 | 0) != -1;
   $spec$select452 = $cmp315 ? $vla + ($effective_lowband$0 << 2) | 0 : 0;
   if ($cmp67) {
    $call333544 = _quant_band($ctx, $X$0, $sub88, $div, $cond9, $spec$select452, $LM, 0, 1.0, $lowband_scratch$1565, $x_cm$1) | 0;
    $call333547 = $call333544;
    $cond352 = 0;
    $spec$select453548 = $cmp315 ? $add$ptr20 + ($effective_lowband$0 << 2) | 0 : 0;
   } else {
    $call333 = _quant_band($ctx, $X$0, $sub88, $div, $cond9, $spec$select452, $LM, $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0, 1.0, $lowband_scratch$1565, $x_cm$1) | 0;
    $call333547 = $call333;
    $cond352 = $add$ptr20 + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0;
    $spec$select453548 = $cmp315 ? $add$ptr20 + ($effective_lowband$0 << 2) | 0 : 0;
   }
   $dual_stereo$addr$1542 = $dual_stereo$addr$0569;
   $x_cm$4 = $call333547;
   $y_cm$2 = _quant_band($ctx, $Y$2, $sub88, $div, $cond9, $spec$select453548, $LM, $cond352, 1.0, $lowband_scratch$1565, $y_cm$1) | 0;
  } else {
   $mul300558 = HEAP16[$arrayidx69 >> 1] << $LM;
   if (($mul300558 | 0) > ($mul | 0)) {
    $sub301 = $mul300558 - $mul | 0;
    $j$0561 = 0;
    do {
     $arrayidx305 = $vla + ($j$0561 << 2) | 0;
     HEAPF32[$arrayidx305 >> 2] = (+HEAPF32[$arrayidx305 >> 2] + +HEAPF32[$add$ptr20 + ($j$0561 << 2) >> 2]) * .5;
     $j$0561 = $j$0561 + 1 | 0;
    } while (($j$0561 | 0) < ($sub301 | 0));
    label = 35;
   } else label = 35;
  }
  do if ((label | 0) == 35) {
   label = 0;
   if (!$Y$2) {
    if ($cmp67) $cond586 = 0; else $cond586 = $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0;
    $call588 = _quant_band($ctx, $X$0, $sub88, $b$0, $cond9, ($effective_lowband$0 | 0) == -1 ? 0 : $vla + ($effective_lowband$0 << 2) | 0, $LM, $cond586, 1.0, $lowband_scratch$1565, $y_cm$1 | $x_cm$1) | 0;
    $dual_stereo$addr$1542 = 0;
    $x_cm$4 = $call588;
    $y_cm$2 = $call588;
    break;
   }
   if (!($spec$select & ($i$0566$looptemp | 0) < ($intensity | 0))) {
    HEAP32[$theta_round >> 2] = 0;
    if ($cmp67) $cond564 = 0; else $cond564 = $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0;
    $call566 = _quant_band_stereo($ctx, $X$0, $Y$2, $sub88, $b$0, $cond9, ($effective_lowband$0 | 0) == -1 ? 0 : $vla + ($effective_lowband$0 << 2) | 0, $LM, $cond564, $lowband_scratch$1565, $y_cm$1 | $x_cm$1) | 0;
    $dual_stereo$addr$1542 = 0;
    $x_cm$4 = $call566;
    $y_cm$2 = $call566;
    break;
   }
   $37 = +HEAPF32[$bandE + ($i$0566$looptemp << 2) >> 2];
   $39 = +HEAPF32[$bandE + ((HEAP32[$nbEBands >> 2] | 0) + $i$0566$looptemp << 2) >> 2];
   $div$i460 = ($37 < $39 ? $37 : $39) / 3.0;
   $add$i461 = $37 + $div$i460;
   $add2$i = $39 + $div$i460;
   $or367 = $y_cm$1 | $x_cm$1;
   $ec_save$sroa$0$0$copyload = HEAP32[$ec >> 2] | 0;
   $ec_save$sroa$5$0$copyload = HEAP32[$ec_save$sroa$5$0$$sroa_idx28 >> 2] | 0;
   HEAP32[$ec_save$sroa$6 >> 2] = HEAP32[$ec_save$sroa$6$0$$sroa_idx >> 2];
   HEAP32[$ec_save$sroa$6 + 4 >> 2] = HEAP32[$ec_save$sroa$6$0$$sroa_idx + 4 >> 2];
   HEAP32[$ec_save$sroa$6 + 8 >> 2] = HEAP32[$ec_save$sroa$6$0$$sroa_idx + 8 >> 2];
   HEAP32[$ec_save$sroa$6 + 12 >> 2] = HEAP32[$ec_save$sroa$6$0$$sroa_idx + 12 >> 2];
   $ec_save$sroa$638$0$copyload = HEAP32[$ec_save$sroa$638$0$$sroa_idx39 >> 2] | 0;
   HEAP32[$ec_save$sroa$7 >> 2] = HEAP32[$ec_save$sroa$7$0$$sroa_idx >> 2];
   HEAP32[$ec_save$sroa$7 + 4 >> 2] = HEAP32[$ec_save$sroa$7$0$$sroa_idx + 4 >> 2];
   HEAP32[$ec_save$sroa$7 + 8 >> 2] = HEAP32[$ec_save$sroa$7$0$$sroa_idx + 8 >> 2];
   HEAP32[$ec_save$sroa$7 + 12 >> 2] = HEAP32[$ec_save$sroa$7$0$$sroa_idx + 12 >> 2];
   HEAP32[$ec_save$sroa$7 + 16 >> 2] = HEAP32[$ec_save$sroa$7$0$$sroa_idx + 16 >> 2];
   dest = $ctx_save;
   src = $ctx;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $mul368 = $sub88 << 2;
   _memcpy($vla46 | 0, $X$0 | 0, $mul368 | 0) | 0;
   _memcpy($vla47 | 0, $Y$2 | 0, $mul368 | 0) | 0;
   HEAP32[$theta_round >> 2] = -1;
   $spec$select455 = ($effective_lowband$0 | 0) == -1 ? 0 : $vla + ($effective_lowband$0 << 2) | 0;
   if ($cmp67) $cond396 = 0; else $cond396 = $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0;
   $call397 = _quant_band_stereo($ctx, $X$0, $Y$2, $sub88, $b$0, $cond9, $spec$select455, $LM, $cond396, $lowband_scratch$1565, $or367) | 0;
   $i$07$i481 = 0;
   $xy$08$i480 = 0.0;
   do {
    $xy$08$i480 = $xy$08$i480 + +HEAPF32[$vla46 + ($i$07$i481 << 2) >> 2] * +HEAPF32[$X$0 + ($i$07$i481 << 2) >> 2];
    $i$07$i481 = $i$07$i481 + 1 | 0;
   } while (($i$07$i481 | 0) != ($sub88 | 0));
   $i$07$i517 = 0;
   $xy$08$i516 = 0.0;
   do {
    $xy$08$i516 = $xy$08$i516 + +HEAPF32[$vla47 + ($i$07$i517 << 2) >> 2] * +HEAPF32[$Y$2 + ($i$07$i517 << 2) >> 2];
    $i$07$i517 = $i$07$i517 + 1 | 0;
   } while (($i$07$i517 | 0) != ($sub88 | 0));
   $add404 = $add$i461 * $xy$08$i480 + $add2$i * $xy$08$i516;
   dest = $ec_save2;
   src = $ec;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $ctx_save2;
   src = $ctx;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($vla48 | 0, $X$0 | 0, $mul368 | 0) | 0;
   _memcpy($vla49 | 0, $Y$2 | 0, $mul368 | 0) | 0;
   if (!$cmp67) _memcpy($vla50 | 0, $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0, $mul368 | 0) | 0;
   $add$ptr441 = $ec_save$sroa$0$0$copyload + $ec_save$sroa$638$0$copyload | 0;
   $sub442 = $ec_save$sroa$5$0$copyload - $ec_save$sroa$638$0$copyload | 0;
   _memcpy($bytes_save | 0, $add$ptr441 | 0, $sub442 | 0) | 0;
   HEAP32[$ec >> 2] = $ec_save$sroa$0$0$copyload;
   HEAP32[$ec_save$sroa$5$0$$sroa_idx28 >> 2] = $ec_save$sroa$5$0$copyload;
   HEAP32[$ec_save$sroa$6$0$$sroa_idx >> 2] = HEAP32[$ec_save$sroa$6 >> 2];
   HEAP32[$ec_save$sroa$6$0$$sroa_idx + 4 >> 2] = HEAP32[$ec_save$sroa$6 + 4 >> 2];
   HEAP32[$ec_save$sroa$6$0$$sroa_idx + 8 >> 2] = HEAP32[$ec_save$sroa$6 + 8 >> 2];
   HEAP32[$ec_save$sroa$6$0$$sroa_idx + 12 >> 2] = HEAP32[$ec_save$sroa$6 + 12 >> 2];
   HEAP32[$ec_save$sroa$638$0$$sroa_idx39 >> 2] = $ec_save$sroa$638$0$copyload;
   HEAP32[$ec_save$sroa$7$0$$sroa_idx >> 2] = HEAP32[$ec_save$sroa$7 >> 2];
   HEAP32[$ec_save$sroa$7$0$$sroa_idx + 4 >> 2] = HEAP32[$ec_save$sroa$7 + 4 >> 2];
   HEAP32[$ec_save$sroa$7$0$$sroa_idx + 8 >> 2] = HEAP32[$ec_save$sroa$7 + 8 >> 2];
   HEAP32[$ec_save$sroa$7$0$$sroa_idx + 12 >> 2] = HEAP32[$ec_save$sroa$7 + 12 >> 2];
   HEAP32[$ec_save$sroa$7$0$$sroa_idx + 16 >> 2] = HEAP32[$ec_save$sroa$7 + 16 >> 2];
   dest = $ctx;
   src = $ctx_save;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($X$0 | 0, $vla46 | 0, $mul368 | 0) | 0;
   _memcpy($Y$2 | 0, $vla47 | 0, $mul368 | 0) | 0;
   if ($cmp204) {
    $m$idx$val = HEAP32[$eBands1 >> 2] | 0;
    $conv$i493 = HEAP16[$m$idx$val + ($add193 << 1) >> 1] | 0;
    $mul$i497 = $conv$i493 - (HEAP16[$m$idx$val + ($start << 1) >> 1] | 0) << $LM;
    $mul11$i502 = (HEAP16[$m$idx$val + ($add4$i << 1) >> 1] | 0) - $conv$i493 << $LM;
    _memcpy($vla + ($mul$i497 << 2) | 0, $vla + (($mul$i497 << 1) - $mul11$i502 << 2) | 0, $mul11$i502 - $mul$i497 << 2 | 0) | 0;
   }
   HEAP32[$theta_round >> 2] = 1;
   if ($cmp67) $cond488 = 0; else $cond488 = $vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0;
   $call489 = _quant_band_stereo($ctx, $X$0, $Y$2, $sub88, $b$0, $cond9, $spec$select455, $LM, $cond488, $lowband_scratch$1565, $or367) | 0;
   $i$07$i468 = 0;
   $xy$08$i467 = 0.0;
   do {
    $xy$08$i467 = $xy$08$i467 + +HEAPF32[$vla46 + ($i$07$i468 << 2) >> 2] * +HEAPF32[$X$0 + ($i$07$i468 << 2) >> 2];
    $i$07$i468 = $i$07$i468 + 1 | 0;
   } while (($i$07$i468 | 0) != ($sub88 | 0));
   $i$07$i = 0;
   $xy$08$i = 0.0;
   do {
    $xy$08$i = $xy$08$i + +HEAPF32[$vla47 + ($i$07$i << 2) >> 2] * +HEAPF32[$Y$2 + ($i$07$i << 2) >> 2];
    $i$07$i = $i$07$i + 1 | 0;
   } while (($i$07$i | 0) != ($sub88 | 0));
   if (!($add404 >= $add$i461 * $xy$08$i467 + $add2$i * $xy$08$i)) $x_cm$2 = $call489; else {
    dest = $ec;
    src = $ec_save2;
    stop = dest + 48 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $ctx;
    src = $ctx_save2;
    stop = dest + 60 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _memcpy($X$0 | 0, $vla48 | 0, $mul368 | 0) | 0;
    _memcpy($Y$2 | 0, $vla49 | 0, $mul368 | 0) | 0;
    if (!$cmp67) _memcpy($vla + (HEAP16[$arrayidx69 >> 1] << $LM << 2) + ($idx$neg << 2) | 0, $vla50 | 0, $mul368 | 0) | 0;
    _memcpy($add$ptr441 | 0, $bytes_save | 0, $sub442 | 0) | 0;
    $x_cm$2 = $call397;
   }
   $dual_stereo$addr$1542 = 0;
   $x_cm$4 = $x_cm$2;
   $y_cm$2 = $x_cm$2;
  } while (0);
  $mul592 = Math_imul($i$0566$looptemp, $cond) | 0;
  HEAP8[$collapse_masks + $mul592 >> 0] = $x_cm$4;
  HEAP8[$collapse_masks + ($add597 + $mul592) >> 0] = $y_cm$2;
  $balance$addr$0568 = $spec$select444 + $sub7$i + (HEAP32[$pulses + ($i$0566$looptemp << 2) >> 2] | 0) | 0;
  HEAP32[$avoid_split_noise >> 2] = 0;
  if (($i$0566 | 0) >= ($end | 0)) break; else {
   $dual_stereo$addr$0569 = $dual_stereo$addr$1542;
   $lowband_offset$0564 = $lowband_offset$1;
   $update_lowband$0563 = ($b$0 | 0) > ($sub88 << 3 | 0) & 1;
  }
 }
 if ((label | 0) == 7) _celt_fatal(47719, 47629, 1495);
 $58 = HEAP32[$seed56 >> 2] | 0;
 HEAP32[$seed >> 2] = $58;
 _llvm_stackrestore($5 | 0);
 STACKTOP = sp;
 return;
}

function _quant_band($ctx, $X, $N, $b, $B, $lowband, $LM, $lowband_out, $gain, $lowband_scratch, $fill) {
 $ctx = $ctx | 0;
 $X = $X | 0;
 $N = $N | 0;
 $b = $b | 0;
 $B = $B | 0;
 $lowband = $lowband | 0;
 $LM = $LM | 0;
 $lowband_out = $lowband_out | 0;
 $gain = +$gain;
 $lowband_scratch = $lowband_scratch | 0;
 $fill = $fill | 0;
 var $$pre = 0, $$pre$i = 0, $$pre21$i = 0, $0 = 0, $1 = 0, $12 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0.0, $5 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $9 = 0, $B$addr$0$lcssa = 0, $B$addr$0282 = 0, $B$addr$0282$us = 0, $B$addr$1$lcssa = 0, $B$addr$1274 = 0, $N_B$0$lcssa = 0, $N_B$0279 = 0, $N_B$0279$us = 0, $N_B$1271 = 0, $add$i4 = 0, $add6$pre$phi$iZ2D = 0, $arrayidx$us$i = 0, $arrayidx$us$i136 = 0, $arrayidx$us$i164 = 0, $arrayidx$us$i192 = 0, $arrayidx$us$i192$us = 0, $arrayidx$us$i220 = 0, $arrayidx$us$i248 = 0, $arrayidx$us$i248$us = 0, $arrayidx10$us$i = 0, $arrayidx10$us$i142 = 0, $arrayidx10$us$i170 = 0, $arrayidx10$us$i198 = 0, $arrayidx10$us$i198$us = 0, $arrayidx10$us$i226 = 0, $arrayidx10$us$i254 = 0, $arrayidx10$us$i254$us = 0, $available$1$i = 0, $call73 = 0, $cm$0$lcssa = 0, $cm$0272 = 0, $cm$1$lcssa = 0, $cm$1267 = 0, $cmp225$i155 = 0, $cmp225$i211 = 0, $cmp3$us$peel$i = 0, $cmp59 = 0, $cmp6 = 0, $cmp6$peel$i = 0, $cond$i$i = 0, $cond$i$i$1 = 0, $cond$i$i$2 = 0, $cond$i$i$3 = 0, $conv = 0, $conv108 = 0.0, $conv7$peel$i = 0, $conv98 = 0, $div$i = 0, $end_offs$i$i = 0, $end_offs$i$i6 = 0, $end_window$i = 0, $end_window$i2 = 0, $error$i = 0, $fill$addr$0$lcssa = 0, $fill$addr$0289 = 0, $fill$addr$0289$us = 0, $fill$addr$1$lcssa = 0, $fill$addr$1280 = 0, $fill$addr$1280$us = 0, $i$028$us$i = 0, $i$028$us$i131 = 0, $i$028$us$i159 = 0, $i$028$us$i187 = 0, $i$028$us$i187$us = 0, $i$028$us$i215 = 0, $i$028$us$i243 = 0, $i$028$us$i243$us = 0, $inc$i$i = 0, $inc$i$i$1 = 0, $inc$i$i$2 = 0, $inc$i$i$3 = 0, $inc$i$i14 = 0, $inc57 = 0, $inc57$us = 0, $j$026$us$i = 0, $j$026$us$i133 = 0, $j$026$us$i161 = 0, $j$026$us$i189 = 0, $j$026$us$i189$us = 0, $j$026$us$i217 = 0, $j$026$us$i245 = 0, $j$026$us$i245$us = 0, $j$0266 = 0, $k$0290 = 0, $k$0290$us = 0, $k$1273 = 0, $k$2268 = 0, $lowband$addr$0 = 0, $mul$i = 0, $mul$i128 = 0, $mul$i156 = 0, $mul$i184$us = 0, $mul$i212 = 0, $mul$i240$us = 0, $mul11$us$i = 0.0, $mul11$us$i143 = 0.0, $mul11$us$i171 = 0.0, $mul11$us$i199 = 0.0, $mul11$us$i199$us = 0.0, $mul11$us$i227 = 0.0, $mul11$us$i255 = 0.0, $mul11$us$i255$us = 0.0, $mul5$us$i = 0.0, $mul5$us$i137 = 0.0, $mul5$us$i165 = 0.0, $mul5$us$i193 = 0.0, $mul5$us$i193$us = 0.0, $mul5$us$i221 = 0.0, $mul5$us$i249 = 0.0, $mul5$us$i249$us = 0.0, $nbits_total$i = 0, $nbits_total$i22 = 0, $nend_bits$i = 0, $nend_bits$i3 = 0, $offs$i$i = 0, $or = 0, $or$us = 0, $or54 = 0, $or54$us = 0, $or89 = 0, $remaining_bits$i = 0, $resynth1$i = 0, $retval$0 = 0, $retval$0$i$i = 0, $shl = 0, $shl100 = 0, $shl104 = 0, $shl32$us = 0, $shl41 = 0, $shl55$pre$phiZ2D = 0, $shl55$us$pre$phiZZ2D = 0, $shr = 0, $shr$i = 0, $shr$i125 = 0, $shr$i153 = 0, $shr$i181$us = 0, $shr$i209 = 0, $shr31$us = 0, $shr40 = 0, $shr86 = 0, $shr99 = 0, $spec$select = 0, $storage$i$i7 = 0, $tf_change$0284 = 0, $tf_change$0284$us = 0, $time_divide$0$lcssa = 0, $time_divide$0281 = 0, $time_divide$0281$us = 0, $tobool29 = 0, $tobool50 = 0, $tobool50$not = 0, $used$0$i = 0, $used$1$i = 0, $window$0$i10 = 0, $window$1$i = 0, $window$1$i20 = 0;
 $0 = HEAP32[$ctx >> 2] | 0;
 $1 = HEAP32[$ctx + 24 >> 2] | 0;
 $conv = ($B | 0) == 1 & 1;
 $div$i = ($N >>> 0) / ($B >>> 0) | 0;
 if (($N | 0) == 1) {
  $2 = HEAP32[$ctx + 28 >> 2] | 0;
  $remaining_bits$i = $ctx + 32 | 0;
  $resynth1$i = $ctx + 4 | 0;
  $3 = HEAP32[$remaining_bits$i >> 2] | 0;
  $cmp3$us$peel$i = ($3 | 0) > 7;
  do if (!$0) {
   if ($cmp3$us$peel$i) {
    $end_window$i = $2 + 12 | 0;
    $5 = HEAP32[$end_window$i >> 2] | 0;
    $nend_bits$i = $2 + 16 | 0;
    $6 = HEAP32[$nend_bits$i >> 2] | 0;
    if (!$6) {
     $end_offs$i$i = $2 + 8 | 0;
     $$pre$i = HEAP32[$end_offs$i$i >> 2] | 0;
     $$pre21$i = HEAP32[$2 + 4 >> 2] | 0;
     if ($$pre$i >>> 0 < $$pre21$i >>> 0) {
      $7 = HEAP32[$2 >> 2] | 0;
      $inc$i$i = $$pre$i + 1 | 0;
      HEAP32[$end_offs$i$i >> 2] = $inc$i$i;
      $9 = $inc$i$i;
      $cond$i$i = HEAPU8[$7 + ($$pre21$i - $inc$i$i) >> 0] | 0;
     } else {
      $9 = $$pre$i;
      $cond$i$i = 0;
     }
     if ($9 >>> 0 < $$pre21$i >>> 0) {
      $61 = HEAP32[$2 >> 2] | 0;
      $inc$i$i$1 = $9 + 1 | 0;
      HEAP32[$end_offs$i$i >> 2] = $inc$i$i$1;
      $63 = $inc$i$i$1;
      $cond$i$i$1 = (HEAPU8[$61 + ($$pre21$i - $inc$i$i$1) >> 0] | 0) << 8;
     } else {
      $63 = $9;
      $cond$i$i$1 = 0;
     }
     if ($63 >>> 0 < $$pre21$i >>> 0) {
      $64 = HEAP32[$2 >> 2] | 0;
      $inc$i$i$2 = $63 + 1 | 0;
      HEAP32[$end_offs$i$i >> 2] = $inc$i$i$2;
      $66 = $inc$i$i$2;
      $cond$i$i$2 = (HEAPU8[$64 + ($$pre21$i - $inc$i$i$2) >> 0] | 0) << 16;
     } else {
      $66 = $63;
      $cond$i$i$2 = 0;
     }
     if ($66 >>> 0 < $$pre21$i >>> 0) {
      $67 = HEAP32[$2 >> 2] | 0;
      $inc$i$i$3 = $66 + 1 | 0;
      HEAP32[$end_offs$i$i >> 2] = $inc$i$i$3;
      $cond$i$i$3 = (HEAPU8[$67 + ($$pre21$i - $inc$i$i$3) >> 0] | 0) << 24;
     } else $cond$i$i$3 = 0;
     $available$1$i = 32;
     $window$1$i = $cond$i$i$3 | ($cond$i$i$2 | ($cond$i$i$1 | ($cond$i$i | $5)));
    } else {
     $available$1$i = $6;
     $window$1$i = $5;
    }
    HEAP32[$end_window$i >> 2] = $window$1$i >>> 1;
    HEAP32[$nend_bits$i >> 2] = $available$1$i + -1;
    $nbits_total$i = $2 + 20 | 0;
    HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 1;
    HEAP32[$remaining_bits$i >> 2] = $3 + -8;
    if (!(HEAP32[$resynth1$i >> 2] | 0)) break; else $12 = ($window$1$i & 1 | 0) == 0 ? 1.0 : -1.0;
   } else if (!(HEAP32[$resynth1$i >> 2] | 0)) break; else $12 = 1.0;
   HEAPF32[$X >> 2] = $12;
  } else {
   if ($cmp3$us$peel$i) {
    $cmp6$peel$i = +HEAPF32[$X >> 2] < 0.0;
    $conv7$peel$i = $cmp6$peel$i & 1;
    $end_window$i2 = $2 + 12 | 0;
    $15 = HEAP32[$end_window$i2 >> 2] | 0;
    $nend_bits$i3 = $2 + 16 | 0;
    $16 = HEAP32[$nend_bits$i3 >> 2] | 0;
    $add$i4 = $16 + 1 | 0;
    if ($add$i4 >>> 0 > 32) {
     $offs$i$i = $2 + 24 | 0;
     $end_offs$i$i6 = $2 + 8 | 0;
     $storage$i$i7 = $2 + 4 | 0;
     $error$i = $2 + 44 | 0;
     $17 = ~$16;
     $20 = $16 + (($17 | 0) > -16 ? $17 : -16) + 8 | 0;
     $used$0$i = $16;
     $window$0$i10 = $15;
     while (1) {
      $22 = HEAP32[$end_offs$i$i6 >> 2] | 0;
      $23 = HEAP32[$storage$i$i7 >> 2] | 0;
      if (($22 + (HEAP32[$offs$i$i >> 2] | 0) | 0) >>> 0 < $23 >>> 0) {
       $24 = HEAP32[$2 >> 2] | 0;
       $inc$i$i14 = $22 + 1 | 0;
       HEAP32[$end_offs$i$i6 >> 2] = $inc$i$i14;
       HEAP8[$24 + ($23 - $inc$i$i14) >> 0] = $window$0$i10;
       $retval$0$i$i = 0;
      } else $retval$0$i$i = -1;
      HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i;
      $window$0$i10 = $window$0$i10 >>> 8;
      if (($used$0$i | 0) <= 15) break; else $used$0$i = $used$0$i + -8 | 0;
     }
     $28 = $16 + -8 - ($20 & -8) | 0;
     $30 = HEAP32[$remaining_bits$i >> 2] | 0;
     $add6$pre$phi$iZ2D = $28 + 1 | 0;
     $used$1$i = $28;
     $window$1$i20 = $window$0$i10;
    } else {
     $30 = $3;
     $add6$pre$phi$iZ2D = $add$i4;
     $used$1$i = $16;
     $window$1$i20 = $15;
    }
    HEAP32[$end_window$i2 >> 2] = $conv7$peel$i << $used$1$i | $window$1$i20;
    HEAP32[$nend_bits$i3 >> 2] = $add6$pre$phi$iZ2D;
    $nbits_total$i22 = $2 + 20 | 0;
    HEAP32[$nbits_total$i22 >> 2] = (HEAP32[$nbits_total$i22 >> 2] | 0) + 1;
    HEAP32[$remaining_bits$i >> 2] = $30 + -8;
    if (!(HEAP32[$resynth1$i >> 2] | 0)) break; else $32 = $cmp6$peel$i ? -1.0 : 1.0;
   } else if (!(HEAP32[$resynth1$i >> 2] | 0)) break; else $32 = 1.0;
   HEAPF32[$X >> 2] = $32;
  } while (0);
  if (!$lowband_out) {
   $retval$0 = 1;
   return $retval$0 | 0;
  }
  HEAP32[$lowband_out >> 2] = HEAP32[$X >> 2];
  $retval$0 = 1;
  return $retval$0 | 0;
 }
 $cmp6 = ($1 | 0) > 0;
 $spec$select = $cmp6 ? $1 : 0;
 do if (($lowband | 0) != 0 & ($lowband_scratch | 0) != 0) {
  if (($1 | 0) < 1) if (!(($B | 0) > 1 | ($1 | 0) != 0 & ($div$i & 1 | 0) == 0)) {
   $lowband$addr$0 = $lowband;
   break;
  }
  _memcpy($lowband_scratch | 0, $lowband | 0, $N << 2 | 0) | 0;
  $lowband$addr$0 = $lowband_scratch;
 } else $lowband$addr$0 = $lowband; while (0);
 L50 : do if ($cmp6) {
  $tobool29 = ($lowband$addr$0 | 0) == 0;
  if (!$0) {
   $fill$addr$0289$us = $fill;
   $k$0290$us = 0;
   while (1) {
    if (!$tobool29) {
     $shr31$us = $N >> $k$0290$us;
     $shl32$us = 1 << $k$0290$us;
     $shr$i181$us = $shr31$us >> 1;
     if (($k$0290$us | 0) != 31) {
      $mul$i184$us = $shl32$us << 1;
      if (($shr31$us | 0) > 1) {
       $i$028$us$i187$us = 0;
       do {
        $j$026$us$i189$us = 0;
        do {
         $arrayidx$us$i192$us = $lowband$addr$0 + ((Math_imul($mul$i184$us, $j$026$us$i189$us) | 0) + $i$028$us$i187$us << 2) | 0;
         $mul5$us$i193$us = +HEAPF32[$arrayidx$us$i192$us >> 2] * .7071067690849304;
         $arrayidx10$us$i198$us = $lowband$addr$0 + ((($j$026$us$i189$us << 1 | 1) << $k$0290$us) + $i$028$us$i187$us << 2) | 0;
         $mul11$us$i199$us = +HEAPF32[$arrayidx10$us$i198$us >> 2] * .7071067690849304;
         HEAPF32[$arrayidx$us$i192$us >> 2] = $mul5$us$i193$us + $mul11$us$i199$us;
         HEAPF32[$arrayidx10$us$i198$us >> 2] = $mul5$us$i193$us - $mul11$us$i199$us;
         $j$026$us$i189$us = $j$026$us$i189$us + 1 | 0;
        } while (($j$026$us$i189$us | 0) < ($shr$i181$us | 0));
        $i$028$us$i187$us = $i$028$us$i187$us + 1 | 0;
       } while (($i$028$us$i187$us | 0) != ($shl32$us | 0));
      }
     }
    }
    $or$us = (HEAPU8[16 + ($fill$addr$0289$us >> 4) >> 0] | 0) << 2 | (HEAPU8[16 + ($fill$addr$0289$us & 15) >> 0] | 0);
    $k$0290$us = $k$0290$us + 1 | 0;
    if ($k$0290$us >>> 0 >= $spec$select >>> 0) {
     $fill$addr$0$lcssa = $or$us;
     break L50;
    } else $fill$addr$0289$us = $or$us;
   }
  }
  $fill$addr$0289 = $fill;
  $k$0290 = 0;
  while (1) {
   $shr = $N >> $k$0290;
   $shl = 1 << $k$0290;
   $shr$i153 = $shr >> 1;
   if (($k$0290 | 0) != 31) {
    $cmp225$i155 = ($shr | 0) > 1;
    $mul$i156 = $shl << 1;
    if ($cmp225$i155) {
     $i$028$us$i159 = 0;
     do {
      $j$026$us$i161 = 0;
      do {
       $arrayidx$us$i164 = $X + ((Math_imul($mul$i156, $j$026$us$i161) | 0) + $i$028$us$i159 << 2) | 0;
       $mul5$us$i165 = +HEAPF32[$arrayidx$us$i164 >> 2] * .7071067690849304;
       $arrayidx10$us$i170 = $X + ((($j$026$us$i161 << 1 | 1) << $k$0290) + $i$028$us$i159 << 2) | 0;
       $mul11$us$i171 = +HEAPF32[$arrayidx10$us$i170 >> 2] * .7071067690849304;
       HEAPF32[$arrayidx$us$i164 >> 2] = $mul5$us$i165 + $mul11$us$i171;
       HEAPF32[$arrayidx10$us$i170 >> 2] = $mul5$us$i165 - $mul11$us$i171;
       $j$026$us$i161 = $j$026$us$i161 + 1 | 0;
      } while (($j$026$us$i161 | 0) < ($shr$i153 | 0));
      $i$028$us$i159 = $i$028$us$i159 + 1 | 0;
     } while (($i$028$us$i159 | 0) != ($shl | 0));
     if (!($tobool29 | $cmp225$i155 ^ 1)) {
      $i$028$us$i187 = 0;
      do {
       $j$026$us$i189 = 0;
       do {
        $arrayidx$us$i192 = $lowband$addr$0 + ((Math_imul($mul$i156, $j$026$us$i189) | 0) + $i$028$us$i187 << 2) | 0;
        $mul5$us$i193 = +HEAPF32[$arrayidx$us$i192 >> 2] * .7071067690849304;
        $arrayidx10$us$i198 = $lowband$addr$0 + ((($j$026$us$i189 << 1 | 1) << $k$0290) + $i$028$us$i187 << 2) | 0;
        $mul11$us$i199 = +HEAPF32[$arrayidx10$us$i198 >> 2] * .7071067690849304;
        HEAPF32[$arrayidx$us$i192 >> 2] = $mul5$us$i193 + $mul11$us$i199;
        HEAPF32[$arrayidx10$us$i198 >> 2] = $mul5$us$i193 - $mul11$us$i199;
        $j$026$us$i189 = $j$026$us$i189 + 1 | 0;
       } while (($j$026$us$i189 | 0) < ($shr$i153 | 0));
       $i$028$us$i187 = $i$028$us$i187 + 1 | 0;
      } while (($i$028$us$i187 | 0) != ($shl | 0));
     }
    }
   }
   $or = (HEAPU8[16 + ($fill$addr$0289 >> 4) >> 0] | 0) << 2 | (HEAPU8[16 + ($fill$addr$0289 & 15) >> 0] | 0);
   $k$0290 = $k$0290 + 1 | 0;
   if ($k$0290 >>> 0 >= $spec$select >>> 0) {
    $fill$addr$0$lcssa = $or;
    break;
   } else $fill$addr$0289 = $or;
  }
 } else $fill$addr$0$lcssa = $fill; while (0);
 $shr40 = $B >> $spec$select;
 $shl41 = $div$i << $spec$select;
 L86 : do if (($shl41 & 1 | 0) == 0 & ($1 | 0) < 0) {
  $tobool50 = ($lowband$addr$0 | 0) == 0;
  if (!$0) {
   $tobool50$not = $tobool50 ^ 1;
   $B$addr$0282$us = $shr40;
   $N_B$0279$us = $shl41;
   $fill$addr$1280$us = $fill$addr$0$lcssa;
   $tf_change$0284$us = $1;
   $time_divide$0281$us = 0;
   while (1) {
    $$pre = $N_B$0279$us >> 1;
    if (($B$addr$0282$us | 0) > 0 & $tobool50$not) {
     $mul$i240$us = $B$addr$0282$us << 1;
     if (($N_B$0279$us | 0) > 1) {
      $i$028$us$i243$us = 0;
      do {
       $j$026$us$i245$us = 0;
       do {
        $arrayidx$us$i248$us = $lowband$addr$0 + ((Math_imul($mul$i240$us, $j$026$us$i245$us) | 0) + $i$028$us$i243$us << 2) | 0;
        $mul5$us$i249$us = +HEAPF32[$arrayidx$us$i248$us >> 2] * .7071067690849304;
        $arrayidx10$us$i254$us = $lowband$addr$0 + ((Math_imul($j$026$us$i245$us << 1 | 1, $B$addr$0282$us) | 0) + $i$028$us$i243$us << 2) | 0;
        $mul11$us$i255$us = +HEAPF32[$arrayidx10$us$i254$us >> 2] * .7071067690849304;
        HEAPF32[$arrayidx$us$i248$us >> 2] = $mul5$us$i249$us + $mul11$us$i255$us;
        HEAPF32[$arrayidx10$us$i254$us >> 2] = $mul5$us$i249$us - $mul11$us$i255$us;
        $j$026$us$i245$us = $j$026$us$i245$us + 1 | 0;
       } while (($j$026$us$i245$us | 0) < ($$pre | 0));
       $i$028$us$i243$us = $i$028$us$i243$us + 1 | 0;
      } while (($i$028$us$i243$us | 0) != ($B$addr$0282$us | 0));
      $shl55$us$pre$phiZZ2D = $mul$i240$us;
     } else $shl55$us$pre$phiZZ2D = $mul$i240$us;
    } else $shl55$us$pre$phiZZ2D = $B$addr$0282$us << 1;
    $or54$us = $fill$addr$1280$us << $B$addr$0282$us | $fill$addr$1280$us;
    $inc57$us = $time_divide$0281$us + 1 | 0;
    if (($N_B$0279$us & 2 | 0) == 0 & ($tf_change$0284$us | 0) < -1) {
     $B$addr$0282$us = $shl55$us$pre$phiZZ2D;
     $N_B$0279$us = $$pre;
     $fill$addr$1280$us = $or54$us;
     $tf_change$0284$us = $tf_change$0284$us + 1 | 0;
     $time_divide$0281$us = $inc57$us;
    } else {
     $B$addr$0$lcssa = $shl55$us$pre$phiZZ2D;
     $N_B$0$lcssa = $$pre;
     $fill$addr$1$lcssa = $or54$us;
     $time_divide$0$lcssa = $inc57$us;
     break L86;
    }
   }
  }
  $B$addr$0282 = $shr40;
  $N_B$0279 = $shl41;
  $fill$addr$1280 = $fill$addr$0$lcssa;
  $tf_change$0284 = $1;
  $time_divide$0281 = 0;
  while (1) {
   $shr$i209 = $N_B$0279 >> 1;
   if (($B$addr$0282 | 0) > 0) {
    $cmp225$i211 = ($N_B$0279 | 0) > 1;
    $mul$i212 = $B$addr$0282 << 1;
    if ($cmp225$i211) {
     $i$028$us$i215 = 0;
     do {
      $j$026$us$i217 = 0;
      do {
       $arrayidx$us$i220 = $X + ((Math_imul($mul$i212, $j$026$us$i217) | 0) + $i$028$us$i215 << 2) | 0;
       $mul5$us$i221 = +HEAPF32[$arrayidx$us$i220 >> 2] * .7071067690849304;
       $arrayidx10$us$i226 = $X + ((Math_imul($j$026$us$i217 << 1 | 1, $B$addr$0282) | 0) + $i$028$us$i215 << 2) | 0;
       $mul11$us$i227 = +HEAPF32[$arrayidx10$us$i226 >> 2] * .7071067690849304;
       HEAPF32[$arrayidx$us$i220 >> 2] = $mul5$us$i221 + $mul11$us$i227;
       HEAPF32[$arrayidx10$us$i226 >> 2] = $mul5$us$i221 - $mul11$us$i227;
       $j$026$us$i217 = $j$026$us$i217 + 1 | 0;
      } while (($j$026$us$i217 | 0) < ($shr$i209 | 0));
      $i$028$us$i215 = $i$028$us$i215 + 1 | 0;
     } while (($i$028$us$i215 | 0) != ($B$addr$0282 | 0));
     if ($tobool50 | $cmp225$i211 ^ 1) $shl55$pre$phiZ2D = $mul$i212; else {
      $i$028$us$i243 = 0;
      do {
       $j$026$us$i245 = 0;
       do {
        $arrayidx$us$i248 = $lowband$addr$0 + ((Math_imul($mul$i212, $j$026$us$i245) | 0) + $i$028$us$i243 << 2) | 0;
        $mul5$us$i249 = +HEAPF32[$arrayidx$us$i248 >> 2] * .7071067690849304;
        $arrayidx10$us$i254 = $lowband$addr$0 + ((Math_imul($j$026$us$i245 << 1 | 1, $B$addr$0282) | 0) + $i$028$us$i243 << 2) | 0;
        $mul11$us$i255 = +HEAPF32[$arrayidx10$us$i254 >> 2] * .7071067690849304;
        HEAPF32[$arrayidx$us$i248 >> 2] = $mul5$us$i249 + $mul11$us$i255;
        HEAPF32[$arrayidx10$us$i254 >> 2] = $mul5$us$i249 - $mul11$us$i255;
        $j$026$us$i245 = $j$026$us$i245 + 1 | 0;
       } while (($j$026$us$i245 | 0) < ($shr$i209 | 0));
       $i$028$us$i243 = $i$028$us$i243 + 1 | 0;
      } while (($i$028$us$i243 | 0) != ($B$addr$0282 | 0));
      $shl55$pre$phiZ2D = $mul$i212;
     }
    } else $shl55$pre$phiZ2D = $mul$i212;
   } else $shl55$pre$phiZ2D = $B$addr$0282 << 1;
   $or54 = $fill$addr$1280 << $B$addr$0282 | $fill$addr$1280;
   $inc57 = $time_divide$0281 + 1 | 0;
   if (($N_B$0279 & 2 | 0) == 0 & ($tf_change$0284 | 0) < -1) {
    $B$addr$0282 = $shl55$pre$phiZ2D;
    $N_B$0279 = $shr$i209;
    $fill$addr$1280 = $or54;
    $tf_change$0284 = $tf_change$0284 + 1 | 0;
    $time_divide$0281 = $inc57;
   } else {
    $B$addr$0$lcssa = $shl55$pre$phiZ2D;
    $N_B$0$lcssa = $shr$i209;
    $fill$addr$1$lcssa = $or54;
    $time_divide$0$lcssa = $inc57;
    break;
   }
  }
 } else {
  $B$addr$0$lcssa = $shr40;
  $N_B$0$lcssa = $shl41;
  $fill$addr$1$lcssa = $fill$addr$0$lcssa;
  $time_divide$0$lcssa = 0;
 } while (0);
 $cmp59 = ($B$addr$0$lcssa | 0) > 1;
 if ($cmp59) {
  if ($0 | 0) _deinterleave_hadamard($X, $N_B$0$lcssa >> $spec$select, $B$addr$0$lcssa << $spec$select, $conv);
  if ($lowband$addr$0 | 0) _deinterleave_hadamard($lowband$addr$0, $N_B$0$lcssa >> $spec$select, $B$addr$0$lcssa << $spec$select, $conv);
 }
 $call73 = _quant_partition($ctx, $X, $N, $b, $B$addr$0$lcssa, $lowband$addr$0, $LM, $gain, $fill$addr$1$lcssa) | 0;
 if (!(HEAP32[$ctx + 4 >> 2] | 0)) {
  $retval$0 = $call73;
  return $retval$0 | 0;
 }
 if ($cmp59) _interleave_hadamard($X, $N_B$0$lcssa >> $spec$select, $B$addr$0$lcssa << $spec$select, $conv);
 if (!$time_divide$0$lcssa) {
  $B$addr$1$lcssa = $B$addr$0$lcssa;
  $cm$0$lcssa = $call73;
 } else {
  $B$addr$1274 = $B$addr$0$lcssa;
  $N_B$1271 = $N_B$0$lcssa;
  $cm$0272 = $call73;
  $k$1273 = 0;
  while (1) {
   $shr86 = $B$addr$1274 >> 1;
   $N_B$1271 = $N_B$1271 << 1;
   $or89 = $cm$0272 >>> $shr86 | $cm$0272;
   $shr$i125 = $N_B$1271 >> 1;
   if (($B$addr$1274 | 0) > 1) {
    $mul$i128 = $B$addr$1274 & -2;
    if (($N_B$1271 | 0) > 1) {
     $i$028$us$i131 = 0;
     do {
      $j$026$us$i133 = 0;
      do {
       $arrayidx$us$i136 = $X + ((Math_imul($j$026$us$i133, $mul$i128) | 0) + $i$028$us$i131 << 2) | 0;
       $mul5$us$i137 = +HEAPF32[$arrayidx$us$i136 >> 2] * .7071067690849304;
       $arrayidx10$us$i142 = $X + ((Math_imul($j$026$us$i133 << 1 | 1, $shr86) | 0) + $i$028$us$i131 << 2) | 0;
       $mul11$us$i143 = +HEAPF32[$arrayidx10$us$i142 >> 2] * .7071067690849304;
       HEAPF32[$arrayidx$us$i136 >> 2] = $mul5$us$i137 + $mul11$us$i143;
       HEAPF32[$arrayidx10$us$i142 >> 2] = $mul5$us$i137 - $mul11$us$i143;
       $j$026$us$i133 = $j$026$us$i133 + 1 | 0;
      } while (($j$026$us$i133 | 0) < ($shr$i125 | 0));
      $i$028$us$i131 = $i$028$us$i131 + 1 | 0;
     } while (($i$028$us$i131 | 0) != ($shr86 | 0));
    }
   }
   $k$1273 = $k$1273 + 1 | 0;
   if (($k$1273 | 0) == ($time_divide$0$lcssa | 0)) {
    $B$addr$1$lcssa = $shr86;
    $cm$0$lcssa = $or89;
    break;
   } else {
    $B$addr$1274 = $shr86;
    $cm$0272 = $or89;
   }
  }
 }
 if ($cmp6) {
  $cm$1267 = $cm$0$lcssa;
  $k$2268 = 0;
  while (1) {
   $conv98 = HEAPU8[32 + $cm$1267 >> 0] | 0;
   $shr99 = $N >> $k$2268;
   $shl100 = 1 << $k$2268;
   $shr$i = $shr99 >> 1;
   if (($k$2268 | 0) != 31) {
    $mul$i = $shl100 << 1;
    if (($shr99 | 0) > 1) {
     $i$028$us$i = 0;
     do {
      $j$026$us$i = 0;
      do {
       $arrayidx$us$i = $X + ((Math_imul($mul$i, $j$026$us$i) | 0) + $i$028$us$i << 2) | 0;
       $mul5$us$i = +HEAPF32[$arrayidx$us$i >> 2] * .7071067690849304;
       $arrayidx10$us$i = $X + ((($j$026$us$i << 1 | 1) << $k$2268) + $i$028$us$i << 2) | 0;
       $mul11$us$i = +HEAPF32[$arrayidx10$us$i >> 2] * .7071067690849304;
       HEAPF32[$arrayidx$us$i >> 2] = $mul5$us$i + $mul11$us$i;
       HEAPF32[$arrayidx10$us$i >> 2] = $mul5$us$i - $mul11$us$i;
       $j$026$us$i = $j$026$us$i + 1 | 0;
      } while (($j$026$us$i | 0) < ($shr$i | 0));
      $i$028$us$i = $i$028$us$i + 1 | 0;
     } while (($i$028$us$i | 0) != ($shl100 | 0));
    }
   }
   $k$2268 = $k$2268 + 1 | 0;
   if ($k$2268 >>> 0 >= $spec$select >>> 0) {
    $cm$1$lcssa = $conv98;
    break;
   } else $cm$1267 = $conv98;
  }
 } else $cm$1$lcssa = $cm$0$lcssa;
 $shl104 = $B$addr$1$lcssa << $spec$select;
 if ($lowband_out | 0) {
  $conv108 = +Math_sqrt(+(+($N | 0)));
  if (($N | 0) > 0) {
   $j$0266 = 0;
   do {
    HEAPF32[$lowband_out + ($j$0266 << 2) >> 2] = +HEAPF32[$X + ($j$0266 << 2) >> 2] * $conv108;
    $j$0266 = $j$0266 + 1 | 0;
   } while (($j$0266 | 0) != ($N | 0));
  }
 }
 $retval$0 = $cm$1$lcssa & (1 << $shl104) + -1;
 return $retval$0 | 0;
}

function _tf_analysis($m$0$5$val, $len, $isTransient, $tf_res, $lambda, $X, $N0, $LM, $tf_estimate, $tf_chan, $importance) {
 $m$0$5$val = $m$0$5$val | 0;
 $len = $len | 0;
 $isTransient = $isTransient | 0;
 $tf_res = $tf_res | 0;
 $lambda = $lambda | 0;
 $X = $X | 0;
 $N0 = $N0 | 0;
 $LM = $LM | 0;
 $tf_estimate = +$tf_estimate;
 $tf_chan = $tf_chan | 0;
 $importance = $importance | 0;
 var $$pre293 = 0, $25 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $58 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $L1$0$lcssa$i = 0.0, $L1$0$lcssa$i223 = 0.0, $L1$010$i = 0.0, $L1$010$i201$us = 0.0, $L1$010$i201$us$us = 0.0, $L1$010$i216 = 0.0, $add = 0, $add$i = 0.0, $add$i219 = 0.0, $add157 = 0, $add157$1 = 0, $add162$us = 0, $add162$us$1 = 0, $add170$us = 0, $add170$us$1 = 0, $add232 = 0, $add258 = 0, $add265 = 0, $add273 = 0, $add4$i = 0.0, $add4$i212 = 0.0, $add4$i212$us = 0.0, $add4$i212$us$us = 0.0, $add4$i212$us272 = 0.0, $add4$i227 = 0.0, $add80 = 0, $arrayidx$us$i = 0, $arrayidx$us$i14 = 0, $arrayidx$us$i42 = 0, $arrayidx$us$i70 = 0, $arrayidx$us$i98 = 0, $arrayidx10$us$i = 0, $arrayidx10$us$i104 = 0, $arrayidx10$us$i20 = 0, $arrayidx10$us$i48 = 0, $arrayidx10$us$i76 = 0, $best_L1$0 = 0.0, $best_L1$1246 = 0.0, $best_L1$1246$us = 0.0, $best_L1$1246$us$us = 0.0, $best_L1$1246$us251 = 0.0, $best_level$0 = 0, $best_level$1$lcssa = 0, $best_level$1247 = 0, $best_level$1247$us = 0, $best_level$1247$us$us = 0, $best_level$1247$us250 = 0, $best_level$2 = 0, $best_level$2$us = 0, $best_level$2$us$us = 0, $best_level$2$us275 = 0, $cmp159237301 = 0, $cmp209$us = 0, $cmp266 = 0, $cmp27$i = 0, $cmp274 = 0, $cmp38 = 0, $cmp8$i = 0, $cmp93 = 0, $cmp93$us = 0, $cmp93$us$us = 0, $cmp93$us273 = 0, $cond156 = 0, $cond156300 = 0, $cond314 = 0, $conv27 = 0, $cost0$0239$us = 0, $cost0$0239$us$1 = 0, $cost0$1234 = 0, $cost1$0238$us = 0, $cost1$0238$us$1 = 0, $cost1$1233 = 0, $i$028$us$i = 0, $i$028$us$i37 = 0, $i$028$us$i65 = 0, $i$028$us$i9 = 0, $i$028$us$i93 = 0, $i$0280 = 0, $i$09$i = 0, $i$09$i202$us = 0, $i$09$i202$us$us = 0, $i$09$i217 = 0, $i$1240$us = 0, $i$1240$us$1 = 0, $i$2235 = 0, $i$3231 = 0, $j$026$us$i = 0, $j$026$us$i11 = 0, $j$026$us$i39 = 0, $j$026$us$i67 = 0, $j$026$us$i95 = 0, $k$0245 = 0, $k$0245$us = 0, $k$0245$us$us = 0, $k$0245$us252 = 0, $mul = 0.0, $mul$i = 0.0, $mul$i1 = 0, $mul$i225 = 0.0, $mul$i34 = 0, $mul$i6 = 0, $mul$i62 = 0, $mul$i90 = 0, $mul103 = 0, $mul11$us$i = 0.0, $mul11$us$i105 = 0.0, $mul11$us$i21 = 0.0, $mul11$us$i49 = 0.0, $mul11$us$i77 = 0.0, $mul112 = 0, $mul129 = 0, $mul129298 = 0, $mul129299 = 0, $mul135$us = 0, $mul135$us$1 = 0, $mul138 = 0, $mul138$1 = 0, $mul138$us = 0, $mul138$us$1 = 0, $mul148$us = 0, $mul148$us$1 = 0, $mul236 = 0, $mul239 = 0, $mul249 = 0, $mul252 = 0, $mul40 = 0, $mul47 = 0, $mul5$us$i = 0.0, $mul5$us$i15 = 0.0, $mul5$us$i43 = 0.0, $mul5$us$i71 = 0.0, $mul5$us$i99 = 0.0, $shl = 0, $shl29 = 0, $shl70 = 0, $shl91 = 0, $shl91$us = 0, $shl91$us$us = 0, $shl91$us258 = 0, $shr = 0, $shr$i = 0, $shr$i3 = 0, $shr$i31 = 0, $shr$i59 = 0, $shr$i87 = 0, $shr90 = 0, $shr90$us = 0, $shr90$us$us = 0, $shr90$us257 = 0, $spec$select = 0, $sub = 0.0, $sub136 = 0, $sub136$1 = 0, $sub136$us = 0, $sub136$us$1 = 0, $sub149 = 0, $sub149$1 = 0, $sub149$us = 0, $sub149$us$1 = 0, $sub188$us = 0, $sub188$us$1 = 0, $sub202$us = 0, $sub202$us$1 = 0, $sub237 = 0, $sub250 = 0, $sub28 = 0, $sub291 = 0, $sub3 = 0, $sub305 = 0, $sub86 = 0, $sub87$us$us = 0, $sub87$us254 = 0, $tobool = 0, $tobool224 = 0, $tobool61 = 0, $vla = 0, $vla17 = 0, $vla18 = 0, $vla19 = 0, $vla7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = .5 - $tf_estimate;
 $mul = ($sub < -.25 ? -.25 : $sub) * .03999999910593033;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len << 2) | 0) + 15 & -16) | 0;
 $sub3 = $len + -1 | 0;
 $shl = (HEAP16[$m$0$5$val + ($len << 1) >> 1] | 0) - (HEAP16[$m$0$5$val + ($sub3 << 1) >> 1] | 0) << $LM;
 $vla7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shl << 2) | 0) + 15 & -16) | 0;
 $vla17 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shl << 2) | 0) + 15 & -16) | 0;
 $vla18 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len << 2) | 0) + 15 & -16) | 0;
 $vla19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len << 2) | 0) + 15 & -16) | 0;
 if (($len | 0) > 0) {
  $mul40 = Math_imul($tf_chan, $N0) | 0;
  $tobool = ($isTransient | 0) != 0;
  $mul$i = ($tobool ? +($LM | 0) : 0.0) * $mul;
  $tobool61 = ($isTransient | 0) == 0;
  $shl70 = 1 << $LM;
  $sub86 = $LM + -1 | 0;
  $mul$i225 = $mul * +($LM + 1 | 0);
  $mul112 = Math_imul($LM, -2) | 0;
  $cmp27$i = ($LM | 0) != 31;
  $mul$i1 = $shl70 << 1;
  $5 = HEAP16[$m$0$5$val >> 1] | 0;
  $i$0280 = 0;
  while (1) {
   $add = $i$0280 + 1 | 0;
   $4 = HEAP16[$m$0$5$val + ($add << 1) >> 1] | 0;
   $conv27 = $5 << 16 >> 16;
   $sub28 = ($4 << 16 >> 16) - $conv27 | 0;
   $shl29 = $sub28 << $LM;
   $cmp38 = ($sub28 | 0) == 1;
   $mul47 = $shl29 << 2;
   _memcpy($vla7 | 0, $X + (($conv27 << $LM) + $mul40 << 2) | 0, $mul47 | 0) | 0;
   $cmp8$i = ($shl29 | 0) > 0;
   if ($cmp8$i) {
    $L1$010$i = 0.0;
    $i$09$i = 0;
    while (1) {
     $add$i = $L1$010$i + +Math_abs(+(+HEAPF32[$vla7 + ($i$09$i << 2) >> 2]));
     $i$09$i = $i$09$i + 1 | 0;
     if (($i$09$i | 0) == ($shl29 | 0)) {
      $L1$0$lcssa$i = $add$i;
      break;
     } else $L1$010$i = $add$i;
    }
   } else $L1$0$lcssa$i = 0.0;
   $add4$i = $L1$0$lcssa$i + $mul$i * $L1$0$lcssa$i;
   if ($tobool61 | $cmp38) {
    $best_L1$0 = $add4$i;
    $best_level$0 = 0;
   } else {
    _memcpy($vla17 | 0, $vla7 | 0, $mul47 | 0) | 0;
    $shr = $shl29 >> $LM;
    $shr$i = $shr >> 1;
    if ($cmp27$i & ($shr | 0) > 1) {
     $i$028$us$i = 0;
     do {
      $j$026$us$i = 0;
      do {
       $arrayidx$us$i = $vla17 + ((Math_imul($mul$i1, $j$026$us$i) | 0) + $i$028$us$i << 2) | 0;
       $mul5$us$i = +HEAPF32[$arrayidx$us$i >> 2] * .7071067690849304;
       $arrayidx10$us$i = $vla17 + ((($j$026$us$i << 1 | 1) << $LM) + $i$028$us$i << 2) | 0;
       $mul11$us$i = +HEAPF32[$arrayidx10$us$i >> 2] * .7071067690849304;
       HEAPF32[$arrayidx$us$i >> 2] = $mul5$us$i + $mul11$us$i;
       HEAPF32[$arrayidx10$us$i >> 2] = $mul5$us$i - $mul11$us$i;
       $j$026$us$i = $j$026$us$i + 1 | 0;
      } while (($j$026$us$i | 0) < ($shr$i | 0));
      $i$028$us$i = $i$028$us$i + 1 | 0;
     } while (($i$028$us$i | 0) != ($shl70 | 0));
    }
    if ($cmp8$i) {
     $L1$010$i216 = 0.0;
     $i$09$i217 = 0;
     while (1) {
      $add$i219 = $L1$010$i216 + +Math_abs(+(+HEAPF32[$vla17 + ($i$09$i217 << 2) >> 2]));
      $i$09$i217 = $i$09$i217 + 1 | 0;
      if (($i$09$i217 | 0) == ($shl29 | 0)) {
       $L1$0$lcssa$i223 = $add$i219;
       break;
      } else $L1$010$i216 = $add$i219;
     }
    } else $L1$0$lcssa$i223 = 0.0;
    $add4$i227 = $L1$0$lcssa$i223 + $mul$i225 * $L1$0$lcssa$i223;
    if ($add4$i227 < $add4$i) {
     $best_L1$0 = $add4$i227;
     $best_level$0 = -1;
    } else {
     $best_L1$0 = $add4$i;
     $best_level$0 = 0;
    }
   }
   $add80 = ((($tobool | $cmp38) ^ 1) & 1) + $LM | 0;
   L27 : do if (($add80 | 0) > 0) {
    if (!$cmp8$i) if ($tobool) {
     $best_L1$1246$us251 = $best_L1$0;
     $best_level$1247$us250 = $best_level$0;
     $k$0245$us252 = 0;
     while (1) {
      $sub87$us254 = $sub86 - $k$0245$us252 | 0;
      $shr90$us257 = $shl29 >> $k$0245$us252;
      $shl91$us258 = 1 << $k$0245$us252;
      $shr$i31 = $shr90$us257 >> 1;
      if (($k$0245$us252 | 0) != 31) {
       $mul$i34 = $shl91$us258 << 1;
       if (($shr90$us257 | 0) > 1) {
        $i$028$us$i37 = 0;
        do {
         $j$026$us$i39 = 0;
         do {
          $arrayidx$us$i42 = $vla7 + ((Math_imul($mul$i34, $j$026$us$i39) | 0) + $i$028$us$i37 << 2) | 0;
          $mul5$us$i43 = +HEAPF32[$arrayidx$us$i42 >> 2] * .7071067690849304;
          $arrayidx10$us$i48 = $vla7 + ((($j$026$us$i39 << 1 | 1) << $k$0245$us252) + $i$028$us$i37 << 2) | 0;
          $mul11$us$i49 = +HEAPF32[$arrayidx10$us$i48 >> 2] * .7071067690849304;
          HEAPF32[$arrayidx$us$i42 >> 2] = $mul5$us$i43 + $mul11$us$i49;
          HEAPF32[$arrayidx10$us$i48 >> 2] = $mul5$us$i43 - $mul11$us$i49;
          $j$026$us$i39 = $j$026$us$i39 + 1 | 0;
         } while (($j$026$us$i39 | 0) < ($shr$i31 | 0));
         $i$028$us$i37 = $i$028$us$i37 + 1 | 0;
        } while (($i$028$us$i37 | 0) != ($shl91$us258 | 0));
       }
      }
      $k$0245$us252 = $k$0245$us252 + 1 | 0;
      $add4$i212$us272 = $mul * +($sub87$us254 | 0) * 0.0 + 0.0;
      $cmp93$us273 = $add4$i212$us272 < $best_L1$1246$us251;
      $best_level$2$us275 = $cmp93$us273 ? $k$0245$us252 : $best_level$1247$us250;
      if (($k$0245$us252 | 0) == ($add80 | 0)) {
       $best_level$1$lcssa = $best_level$2$us275;
       break L27;
      } else {
       $best_L1$1246$us251 = $cmp93$us273 ? $add4$i212$us272 : $best_L1$1246$us251;
       $best_level$1247$us250 = $best_level$2$us275;
      }
     }
    } else {
     $best_L1$1246 = $best_L1$0;
     $best_level$1247 = $best_level$0;
     $k$0245 = 0;
     while (1) {
      $shr90 = $shl29 >> $k$0245;
      $shl91 = 1 << $k$0245;
      $shr$i3 = $shr90 >> 1;
      if (($k$0245 | 0) != 31) {
       $mul$i6 = $shl91 << 1;
       if (($shr90 | 0) > 1) {
        $i$028$us$i9 = 0;
        do {
         $j$026$us$i11 = 0;
         do {
          $arrayidx$us$i14 = $vla7 + ((Math_imul($mul$i6, $j$026$us$i11) | 0) + $i$028$us$i9 << 2) | 0;
          $mul5$us$i15 = +HEAPF32[$arrayidx$us$i14 >> 2] * .7071067690849304;
          $arrayidx10$us$i20 = $vla7 + ((($j$026$us$i11 << 1 | 1) << $k$0245) + $i$028$us$i9 << 2) | 0;
          $mul11$us$i21 = +HEAPF32[$arrayidx10$us$i20 >> 2] * .7071067690849304;
          HEAPF32[$arrayidx$us$i14 >> 2] = $mul5$us$i15 + $mul11$us$i21;
          HEAPF32[$arrayidx10$us$i20 >> 2] = $mul5$us$i15 - $mul11$us$i21;
          $j$026$us$i11 = $j$026$us$i11 + 1 | 0;
         } while (($j$026$us$i11 | 0) < ($shr$i3 | 0));
         $i$028$us$i9 = $i$028$us$i9 + 1 | 0;
        } while (($i$028$us$i9 | 0) != ($shl91 | 0));
       }
      }
      $k$0245 = $k$0245 + 1 | 0;
      $add4$i212 = $mul * +($k$0245 | 0) * 0.0 + 0.0;
      $cmp93 = $add4$i212 < $best_L1$1246;
      $best_level$2 = $cmp93 ? $k$0245 : $best_level$1247;
      if (($k$0245 | 0) == ($add80 | 0)) {
       $best_level$1$lcssa = $best_level$2;
       break L27;
      } else {
       $best_L1$1246 = $cmp93 ? $add4$i212 : $best_L1$1246;
       $best_level$1247 = $best_level$2;
      }
     }
    }
    if ($tobool) {
     $best_L1$1246$us$us = $best_L1$0;
     $best_level$1247$us$us = $best_level$0;
     $k$0245$us$us = 0;
     while (1) {
      $sub87$us$us = $sub86 - $k$0245$us$us | 0;
      $shr90$us$us = $shl29 >> $k$0245$us$us;
      $shl91$us$us = 1 << $k$0245$us$us;
      $shr$i87 = $shr90$us$us >> 1;
      if (($k$0245$us$us | 0) != 31) {
       $mul$i90 = $shl91$us$us << 1;
       if (($shr90$us$us | 0) > 1) {
        $i$028$us$i93 = 0;
        do {
         $j$026$us$i95 = 0;
         do {
          $arrayidx$us$i98 = $vla7 + ((Math_imul($mul$i90, $j$026$us$i95) | 0) + $i$028$us$i93 << 2) | 0;
          $mul5$us$i99 = +HEAPF32[$arrayidx$us$i98 >> 2] * .7071067690849304;
          $arrayidx10$us$i104 = $vla7 + ((($j$026$us$i95 << 1 | 1) << $k$0245$us$us) + $i$028$us$i93 << 2) | 0;
          $mul11$us$i105 = +HEAPF32[$arrayidx10$us$i104 >> 2] * .7071067690849304;
          HEAPF32[$arrayidx$us$i98 >> 2] = $mul5$us$i99 + $mul11$us$i105;
          HEAPF32[$arrayidx10$us$i104 >> 2] = $mul5$us$i99 - $mul11$us$i105;
          $j$026$us$i95 = $j$026$us$i95 + 1 | 0;
         } while (($j$026$us$i95 | 0) < ($shr$i87 | 0));
         $i$028$us$i93 = $i$028$us$i93 + 1 | 0;
        } while (($i$028$us$i93 | 0) != ($shl91$us$us | 0));
       }
      }
      $L1$010$i201$us$us = 0.0;
      $i$09$i202$us$us = 0;
      do {
       $L1$010$i201$us$us = $L1$010$i201$us$us + +Math_abs(+(+HEAPF32[$vla7 + ($i$09$i202$us$us << 2) >> 2]));
       $i$09$i202$us$us = $i$09$i202$us$us + 1 | 0;
      } while (($i$09$i202$us$us | 0) != ($shl29 | 0));
      $k$0245$us$us = $k$0245$us$us + 1 | 0;
      $add4$i212$us$us = $L1$010$i201$us$us + $mul * +($sub87$us$us | 0) * $L1$010$i201$us$us;
      $cmp93$us$us = $add4$i212$us$us < $best_L1$1246$us$us;
      $best_level$2$us$us = $cmp93$us$us ? $k$0245$us$us : $best_level$1247$us$us;
      if (($k$0245$us$us | 0) == ($add80 | 0)) {
       $best_level$1$lcssa = $best_level$2$us$us;
       break;
      } else {
       $best_L1$1246$us$us = $cmp93$us$us ? $add4$i212$us$us : $best_L1$1246$us$us;
       $best_level$1247$us$us = $best_level$2$us$us;
      }
     }
    } else {
     $best_L1$1246$us = $best_L1$0;
     $best_level$1247$us = $best_level$0;
     $k$0245$us = 0;
     while (1) {
      $shr90$us = $shl29 >> $k$0245$us;
      $shl91$us = 1 << $k$0245$us;
      $shr$i59 = $shr90$us >> 1;
      if (($k$0245$us | 0) != 31) {
       $mul$i62 = $shl91$us << 1;
       if (($shr90$us | 0) > 1) {
        $i$028$us$i65 = 0;
        do {
         $j$026$us$i67 = 0;
         do {
          $arrayidx$us$i70 = $vla7 + ((Math_imul($mul$i62, $j$026$us$i67) | 0) + $i$028$us$i65 << 2) | 0;
          $mul5$us$i71 = +HEAPF32[$arrayidx$us$i70 >> 2] * .7071067690849304;
          $arrayidx10$us$i76 = $vla7 + ((($j$026$us$i67 << 1 | 1) << $k$0245$us) + $i$028$us$i65 << 2) | 0;
          $mul11$us$i77 = +HEAPF32[$arrayidx10$us$i76 >> 2] * .7071067690849304;
          HEAPF32[$arrayidx$us$i70 >> 2] = $mul5$us$i71 + $mul11$us$i77;
          HEAPF32[$arrayidx10$us$i76 >> 2] = $mul5$us$i71 - $mul11$us$i77;
          $j$026$us$i67 = $j$026$us$i67 + 1 | 0;
         } while (($j$026$us$i67 | 0) < ($shr$i59 | 0));
         $i$028$us$i65 = $i$028$us$i65 + 1 | 0;
        } while (($i$028$us$i65 | 0) != ($shl91$us | 0));
       }
      }
      $L1$010$i201$us = 0.0;
      $i$09$i202$us = 0;
      do {
       $L1$010$i201$us = $L1$010$i201$us + +Math_abs(+(+HEAPF32[$vla7 + ($i$09$i202$us << 2) >> 2]));
       $i$09$i202$us = $i$09$i202$us + 1 | 0;
      } while (($i$09$i202$us | 0) != ($shl29 | 0));
      $k$0245$us = $k$0245$us + 1 | 0;
      $add4$i212$us = $L1$010$i201$us + $mul * +($k$0245$us | 0) * $L1$010$i201$us;
      $cmp93$us = $add4$i212$us < $best_L1$1246$us;
      $best_level$2$us = $cmp93$us ? $k$0245$us : $best_level$1247$us;
      if (($k$0245$us | 0) == ($add80 | 0)) {
       $best_level$1$lcssa = $best_level$2$us;
       break;
      } else {
       $best_L1$1246$us = $cmp93$us ? $add4$i212$us : $best_L1$1246$us;
       $best_level$1247$us = $best_level$2$us;
      }
     }
    }
   } else $best_level$1$lcssa = $best_level$0; while (0);
   $mul103 = Math_imul($best_level$1$lcssa, -2) | 0;
   $25 = $tobool ? $best_level$1$lcssa << 1 : $mul103;
   $26 = $vla + ($i$0280 << 2) | 0;
   HEAP32[$26 >> 2] = $25;
   if ($cmp38) if (($25 | 0) == 0 | ($25 | 0) == ($mul112 | 0)) HEAP32[$26 >> 2] = $25 + -1;
   if (($add | 0) == ($len | 0)) break;
   $5 = $4;
   $i$0280 = $add;
  }
  $$pre293 = HEAP32[$vla >> 2] | 0;
  $27 = HEAP32[$importance >> 2] | 0;
  $mul129 = $isTransient << 2;
  $cond156 = $tobool61 ? $lambda : 0;
  if (($len | 0) > 1) {
   $mul135$us = HEAP8[192 + ($LM << 3) + $mul129 >> 0] << 1;
   $sub136$us = $$pre293 - $mul135$us | 0;
   $mul138$us = Math_imul(($sub136$us | 0) > -1 ? $sub136$us : 0 - $sub136$us | 0, $27) | 0;
   $mul148$us = HEAP8[($mul129 | 1) + (192 + ($LM << 3)) >> 0] << 1;
   $sub149$us = $$pre293 - $mul148$us | 0;
   $cost0$0239$us = $mul138$us;
   $cost1$0238$us = (Math_imul(($sub149$us | 0) > -1 ? $sub149$us : 0 - $sub149$us | 0, $27) | 0) + $cond156 | 0;
   $i$1240$us = 1;
   do {
    $add162$us = $cost1$0238$us + $lambda | 0;
    $add170$us = $cost0$0239$us + $lambda | 0;
    $32 = HEAP32[$importance + ($i$1240$us << 2) >> 2] | 0;
    $33 = HEAP32[$vla + ($i$1240$us << 2) >> 2] | 0;
    $sub188$us = $33 - $mul135$us | 0;
    $cost0$0239$us = (Math_imul(($sub188$us | 0) > -1 ? $sub188$us : 0 - $sub188$us | 0, $32) | 0) + (($cost0$0239$us | 0) < ($add162$us | 0) ? $cost0$0239$us : $add162$us) | 0;
    $sub202$us = $33 - $mul148$us | 0;
    $cost1$0238$us = (Math_imul(($sub202$us | 0) > -1 ? $sub202$us : 0 - $sub202$us | 0, $32) | 0) + (($add170$us | 0) < ($cost1$0238$us | 0) ? $add170$us : $cost1$0238$us) | 0;
    $i$1240$us = $i$1240$us + 1 | 0;
   } while (($i$1240$us | 0) != ($len | 0));
   $cmp209$us = ($cost0$0239$us | 0) < ($cost1$0238$us | 0);
   $mul135$us$1 = HEAP8[($mul129 | 2) + (192 + ($LM << 3)) >> 0] << 1;
   $sub136$us$1 = $$pre293 - $mul135$us$1 | 0;
   $mul138$us$1 = Math_imul(($sub136$us$1 | 0) > -1 ? $sub136$us$1 : 0 - $sub136$us$1 | 0, $27) | 0;
   $mul148$us$1 = HEAP8[($mul129 | 3) + (192 + ($LM << 3)) >> 0] << 1;
   $sub149$us$1 = $$pre293 - $mul148$us$1 | 0;
   $cost0$0239$us$1 = $mul138$us$1;
   $cost1$0238$us$1 = (Math_imul(($sub149$us$1 | 0) > -1 ? $sub149$us$1 : 0 - $sub149$us$1 | 0, $27) | 0) + $cond156 | 0;
   $i$1240$us$1 = 1;
   do {
    $add162$us$1 = $cost1$0238$us$1 + $lambda | 0;
    $add170$us$1 = $cost0$0239$us$1 + $lambda | 0;
    $64 = HEAP32[$importance + ($i$1240$us$1 << 2) >> 2] | 0;
    $65 = HEAP32[$vla + ($i$1240$us$1 << 2) >> 2] | 0;
    $sub188$us$1 = $65 - $mul135$us$1 | 0;
    $cost0$0239$us$1 = (Math_imul(($sub188$us$1 | 0) > -1 ? $sub188$us$1 : 0 - $sub188$us$1 | 0, $64) | 0) + (($cost0$0239$us$1 | 0) < ($add162$us$1 | 0) ? $cost0$0239$us$1 : $add162$us$1) | 0;
    $sub202$us$1 = $65 - $mul148$us$1 | 0;
    $cost1$0238$us$1 = (Math_imul(($sub202$us$1 | 0) > -1 ? $sub202$us$1 : 0 - $sub202$us$1 | 0, $64) | 0) + (($add170$us$1 | 0) < ($cost1$0238$us$1 | 0) ? $add170$us$1 : $cost1$0238$us$1) | 0;
    $i$1240$us$1 = $i$1240$us$1 + 1 | 0;
   } while (($i$1240$us$1 | 0) != ($len | 0));
   $50 = ($cost0$0239$us$1 | 0) < ($cost1$0238$us$1 | 0) ? $cost0$0239$us$1 : $cost1$0238$us$1;
   $51 = $cmp209$us ? $cost0$0239$us : $cost1$0238$us;
   $53 = $$pre293;
   $55 = $27;
   $cmp159237301 = 1;
   $mul129299 = $mul129;
  } else {
   $41 = $$pre293;
   $43 = $27;
   $cond156300 = $cond156;
   $mul129298 = $mul129;
   label = 67;
  }
 } else {
  $41 = 0;
  $43 = HEAP32[$importance >> 2] | 0;
  $cond156300 = ($isTransient | 0) == 0 ? $lambda : 0;
  $mul129298 = $isTransient << 2;
  label = 67;
 }
 if ((label | 0) == 67) {
  $sub136 = $41 - (HEAP8[192 + ($LM << 3) + $mul129298 >> 0] << 1) | 0;
  $mul138 = Math_imul(($sub136 | 0) > -1 ? $sub136 : 0 - $sub136 | 0, $43) | 0;
  $sub149 = $41 - (HEAP8[($mul129298 | 1) + (192 + ($LM << 3)) >> 0] << 1) | 0;
  $add157 = (Math_imul(($sub149 | 0) > -1 ? $sub149 : 0 - $sub149 | 0, $43) | 0) + $cond156300 | 0;
  $sub136$1 = $41 - (HEAP8[($mul129298 | 2) + (192 + ($LM << 3)) >> 0] << 1) | 0;
  $mul138$1 = Math_imul(($sub136$1 | 0) > -1 ? $sub136$1 : 0 - $sub136$1 | 0, $43) | 0;
  $sub149$1 = $41 - (HEAP8[($mul129298 | 3) + (192 + ($LM << 3)) >> 0] << 1) | 0;
  $add157$1 = (Math_imul(($sub149$1 | 0) > -1 ? $sub149$1 : 0 - $sub149$1 | 0, $43) | 0) + $cond156300 | 0;
  $50 = ($mul138$1 | 0) < ($add157$1 | 0) ? $mul138$1 : $add157$1;
  $51 = ($mul138 | 0) < ($add157 | 0) ? $mul138 : $add157;
  $53 = $41;
  $55 = $43;
  $cmp159237301 = 0;
  $mul129299 = $mul129298;
 }
 $tobool224 = ($isTransient | 0) != 0;
 $spec$select = $tobool224 & ($50 | 0) < ($51 | 0) & 1;
 $add232 = $spec$select << 1 | $mul129299;
 $mul236 = HEAP8[192 + ($LM << 3) + $add232 >> 0] << 1;
 $sub237 = $53 - $mul236 | 0;
 $mul239 = Math_imul(($sub237 | 0) > -1 ? $sub237 : 0 - $sub237 | 0, $55) | 0;
 $mul249 = HEAP8[($add232 | 1) + (192 + ($LM << 3)) >> 0] << 1;
 $sub250 = $53 - $mul249 | 0;
 $mul252 = Math_imul(($sub250 | 0) > -1 ? $sub250 : 0 - $sub250 | 0, $55) | 0;
 $add258 = $mul252 + ($tobool224 ? 0 : $lambda) | 0;
 if (!$cmp159237301) {
  HEAP32[$tf_res + ($sub3 << 2) >> 2] = ($mul239 | 0) >= ($add258 | 0) & 1;
  STACKTOP = sp;
  return $spec$select | 0;
 }
 $cost0$1234 = $mul239;
 $cost1$1233 = $add258;
 $i$2235 = 1;
 do {
  $add265 = $cost1$1233 + $lambda | 0;
  $cmp266 = ($cost0$1234 | 0) < ($add265 | 0);
  HEAP32[$vla18 + ($i$2235 << 2) >> 2] = ($cmp266 ^ 1) & 1;
  $add273 = $cost0$1234 + $lambda | 0;
  $cmp274 = ($add273 | 0) < ($cost1$1233 | 0);
  HEAP32[$vla19 + ($i$2235 << 2) >> 2] = ($cmp274 ^ 1) & 1;
  $58 = HEAP32[$importance + ($i$2235 << 2) >> 2] | 0;
  $59 = HEAP32[$vla + ($i$2235 << 2) >> 2] | 0;
  $sub291 = $59 - $mul236 | 0;
  $cost0$1234 = (Math_imul(($sub291 | 0) > -1 ? $sub291 : 0 - $sub291 | 0, $58) | 0) + ($cmp266 ? $cost0$1234 : $add265) | 0;
  $sub305 = $59 - $mul249 | 0;
  $cost1$1233 = (Math_imul(($sub305 | 0) > -1 ? $sub305 : 0 - $sub305 | 0, $58) | 0) + ($cmp274 ? $add273 : $cost1$1233) | 0;
  $i$2235 = $i$2235 + 1 | 0;
 } while (($i$2235 | 0) != ($len | 0));
 $cond314 = ($cost0$1234 | 0) >= ($cost1$1233 | 0) & 1;
 HEAP32[$tf_res + ($sub3 << 2) >> 2] = $cond314;
 $62 = $cond314;
 $i$3231 = $len + -2 | 0;
 while (1) {
  $62 = HEAP32[(($62 | 0) == 1 ? $vla19 : $vla18) + ($i$3231 + 1 << 2) >> 2] | 0;
  HEAP32[$tf_res + ($i$3231 << 2) >> 2] = $62;
  if (($i$3231 | 0) <= 0) break; else $i$3231 = $i$3231 + -1 | 0;
 }
 STACKTOP = sp;
 return $spec$select | 0;
}

function _dynalloc_analysis($bandLogE, $bandLogE2, $nbEBands, $start, $end, $C, $offsets, $lsb_depth, $logN, $isTransient, $vbr, $constrained_vbr, $eBands, $LM, $effectiveBytes, $tot_boost_, $lfe, $surround_dynalloc, $analysis, $importance, $spread_weight) {
 $bandLogE = $bandLogE | 0;
 $bandLogE2 = $bandLogE2 | 0;
 $nbEBands = $nbEBands | 0;
 $start = $start | 0;
 $end = $end | 0;
 $C = $C | 0;
 $offsets = $offsets | 0;
 $lsb_depth = $lsb_depth | 0;
 $logN = $logN | 0;
 $isTransient = $isTransient | 0;
 $vbr = $vbr | 0;
 $constrained_vbr = $constrained_vbr | 0;
 $eBands = $eBands | 0;
 $LM = $LM | 0;
 $effectiveBytes = $effectiveBytes | 0;
 $tot_boost_ = $tot_boost_ | 0;
 $lfe = $lfe | 0;
 $surround_dynalloc = $surround_dynalloc | 0;
 $analysis = $analysis | 0;
 $importance = $importance | 0;
 $spread_weight = $spread_weight | 0;
 var $$$i = 0.0, $$$i353 = 0.0, $$$i356 = 0.0, $$13$i = 0.0, $$13$i357 = 0.0, $$41$i = 0.0, $$pre475 = 0, $$sink524 = 0.0, $$sub409 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $16 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $42 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $59 = 0.0, $61 = 0, $62 = 0.0, $64 = 0, $8 = 0.0, $add210 = 0, $add223 = 0.0, $add251 = 0.0, $add251$ = 0.0, $add303 = 0, $add347 = 0, $add406 = 0, $add605 = 0, $add644 = 0, $add660$us = 0, $add9 = 0, $arrayidx108 = 0, $arrayidx201 = 0, $arrayidx203 = 0, $arrayidx203$idx$val = 0.0, $arrayidx203$idx351$val = 0.0, $arrayidx248 = 0, $arrayidx301 = 0, $arrayidx305 = 0, $arrayidx337 = 0, $arrayidx349 = 0, $arrayidx349$idx$val = 0.0, $arrayidx349$idx350$val = 0.0, $arrayidx349$val = 0.0, $arrayidx353 = 0, $arrayidx365 = 0, $arrayidx380 = 0, $arrayidx407 = 0, $arrayidx408 = 0, $arrayidx476 = 0, $arrayidx496 = 0, $arrayidx542 = 0, $arrayidx556 = 0, $arrayidx58 = 0, $arrayidx581 = 0, $arrayidx596 = 0, $arrayidx596$us = 0, $arrayidx85 = 0, $boost$0 = 0, $boost$0$us = 0, $boost_bits$0 = 0, $boost_bits$0$us = 0, $c$0$us = 0, $c$1 = 0, $cmp$i = 0, $cmp$i352 = 0, $cmp$i355 = 0, $cmp17$i = 0, $cmp24$i = 0, $cmp298429 = 0, $cmp403417 = 0, $cmp447 = 0, $cmp52 = 0, $cmp52488491499509 = 0, $cmp82437494496 = 0, $cmp82437494496511 = 0, $cmp9$i = 0, $cond137 = 0.0, $cond168 = 0, $cond319 = 0.0, $cond435 = 0.0, $cond577 = 0, $cond603 = 0.0, $cond603$us = 0.0, $conv157 = 0, $conv5 = 0.0, $conv616 = 0, $conv616$us = 0, $conv625 = 0, $conv625$us = 0, $conv633 = 0, $conv633$us = 0, $div648 = 0, $i$0448 = 0, $i$10432 = 0, $i$11418 = 0, $i$12420 = 0, $i$13416 = 0, $i$14414 = 0, $i$1445$us = 0, $i$15412 = 0, $i$16410 = 0, $i$17408 = 0, $i$18406 = 0, $i$18406$us = 0, $i$19403 = 0, $i$2442 = 0, $i$3440 = 0, $i$4438 = 0, $i$5436 = 0, $i$6434 = 0, $i$7423 = 0, $i$8428$in = 0, $i$9430 = 0, $last$0 = 0, $last$1$lcssa = 0, $last$1422 = 0, $last$2 = 0, $maxDepth$0$us = 0.0, $maxDepth$1$lcssa$lcssa478487492498510 = 0.0, $maxDepth$1444$us = 0.0, $mul = 0, $mul20$us = 0, $mul200 = 0, $retval$0$i = 0.0, $retval$0$i393 = 0.0, $shl = 0, $shl$us = 0, $shl654 = 0, $sub103 = 0, $sub103500 = 0, $sub103500508 = 0, $sub111 = 0.0, $sub130 = 0.0, $sub24$us = 0.0, $sub327 = 0.0, $sub351 = 0.0, $sub364 = 0, $sub409 = 0.0, $sub425 = 0.0, $sub439 = 0.0, $sub453 = 0.0, $sub477 = 0.0, $sub62 = 0.0, $sub88 = 0.0, $t1$1$i = 0.0, $t3$0$i = 0.0, $t3$1$i = 0.0, $t4$0$i = 0.0, $t4$1$i = 0.0, $tobool533 = 0, $tobool534 = 0, $tobool536 = 0, $tot_boost$0405 = 0, $tot_boost$0405$us = 0, $tot_boost$3 = 0, $vla = 0, $vla2 = 0, $vla39 = 0, $vla40 = 0, label = 0, sp = 0, $i$8428$in$looptemp = 0, $61$looptemp = 0, $i$18406$us$looptemp = 0, $64$looptemp = 0;
 sp = STACKTOP;
 $mul = Math_imul($C, $nbEBands) | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
 $vla2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
 _memset($offsets | 0, 0, $nbEBands << 2 | 0) | 0;
 $cmp447 = ($end | 0) > 0;
 if ($cmp447) {
  $conv5 = +(9 - $lsb_depth | 0);
  $i$0448 = 0;
  do {
   $add9 = $i$0448 + 5 | 0;
   HEAPF32[$vla2 + ($i$0448 << 2) >> 2] = +(Math_imul($add9, $add9) | 0) * .006200000178068876 + (+(HEAP16[$logN + ($i$0448 << 1) >> 1] | 0) * .0625 + .5 + $conv5 - +HEAPF32[20304 + ($i$0448 << 2) >> 2]);
   $i$0448 = $i$0448 + 1 | 0;
  } while (($i$0448 | 0) != ($end | 0));
  $c$0$us = 0;
  $maxDepth$0$us = -31.899999618530273;
  while (1) {
   $mul20$us = Math_imul($c$0$us, $nbEBands) | 0;
   $i$1445$us = 0;
   $maxDepth$1444$us = $maxDepth$0$us;
   do {
    $sub24$us = +HEAPF32[$bandLogE + ($i$1445$us + $mul20$us << 2) >> 2] - +HEAPF32[$vla2 + ($i$1445$us << 2) >> 2];
    $maxDepth$1444$us = $maxDepth$1444$us > $sub24$us ? $maxDepth$1444$us : $sub24$us;
    $i$1445$us = $i$1445$us + 1 | 0;
   } while (($i$1445$us | 0) != ($end | 0));
   $c$0$us = $c$0$us + 1 | 0;
   if (($c$0$us | 0) >= ($C | 0)) break; else $maxDepth$0$us = $maxDepth$1444$us;
  }
  $5 = _llvm_stacksave() | 0;
  $vla39 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($nbEBands << 2) | 0) + 15 & -16) | 0;
  $vla40 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($nbEBands << 2) | 0) + 15 & -16) | 0;
  $i$2442 = 0;
  do {
   HEAPF32[$vla39 + ($i$2442 << 2) >> 2] = +HEAPF32[$bandLogE + ($i$2442 << 2) >> 2] - +HEAPF32[$vla2 + ($i$2442 << 2) >> 2];
   $i$2442 = $i$2442 + 1 | 0;
  } while (($i$2442 | 0) != ($end | 0));
  $cmp52 = ($C | 0) == 2;
  if ($cmp52) {
   $i$3440 = 0;
   do {
    $arrayidx58 = $vla39 + ($i$3440 << 2) | 0;
    $8 = +HEAPF32[$arrayidx58 >> 2];
    $sub62 = +HEAPF32[$bandLogE + ($i$3440 + $nbEBands << 2) >> 2] - +HEAPF32[$vla2 + ($i$3440 << 2) >> 2];
    HEAPF32[$arrayidx58 >> 2] = $8 > $sub62 ? $8 : $sub62;
    $i$3440 = $i$3440 + 1 | 0;
   } while (($i$3440 | 0) != ($end | 0));
  }
  _memcpy($vla40 | 0, $vla39 | 0, $end << 2 | 0) | 0;
  if (($end | 0) > 1) {
   $12 = +HEAPF32[$vla39 >> 2];
   $i$4438 = 1;
   do {
    $arrayidx85 = $vla39 + ($i$4438 << 2) | 0;
    $11 = +HEAPF32[$arrayidx85 >> 2];
    $sub88 = $12 + -2.0;
    $12 = $11 > $sub88 ? $11 : $sub88;
    HEAPF32[$arrayidx85 >> 2] = $12;
    $i$4438 = $i$4438 + 1 | 0;
   } while (($i$4438 | 0) != ($end | 0));
   $sub103 = $end + -2 | 0;
   $i$5436 = $sub103;
   while (1) {
    $arrayidx108 = $vla39 + ($i$5436 << 2) | 0;
    $13 = +HEAPF32[$arrayidx108 >> 2];
    $sub111 = +HEAPF32[$vla39 + ($i$5436 + 1 << 2) >> 2] + -3.0;
    HEAPF32[$arrayidx108 >> 2] = $13 > $sub111 ? $13 : $sub111;
    if (($i$5436 | 0) > 0) $i$5436 = $i$5436 + -1 | 0; else {
     $cmp82437494496 = 1;
     $sub103500 = $sub103;
     break;
    }
   }
  } else {
   $cmp82437494496 = 0;
   $sub103500 = $end + -2 | 0;
  }
  $sub130 = $maxDepth$1444$us + -12.0;
  $cond137 = $sub130 < 0.0 ? 0.0 : $sub130;
  $i$6434 = 0;
  do {
   $16 = +HEAPF32[$vla39 + ($i$6434 << 2) >> 2];
   $conv157 = ~~+Math_floor(+(+HEAPF32[$vla40 + ($i$6434 << 2) >> 2] - ($cond137 > $16 ? $cond137 : $16) + .5));
   $cond168 = ($conv157 | 0) > 0 ? 0 : 0 - $conv157 | 0;
   HEAP32[$spread_weight + ($i$6434 << 2) >> 2] = 32 >>> (($cond168 | 0) < 5 ? $cond168 : 5);
   $i$6434 = $i$6434 + 1 | 0;
  } while (($i$6434 | 0) != ($end | 0));
  $19 = $5;
  $cmp52488491499509 = $cmp52;
  $cmp82437494496511 = $cmp82437494496;
  $maxDepth$1$lcssa$lcssa478487492498510 = $maxDepth$1444$us;
  $sub103500508 = $sub103500;
 } else {
  $19 = _llvm_stacksave() | 0;
  $cmp52488491499509 = ($C | 0) == 2;
  $cmp82437494496511 = 0;
  $maxDepth$1$lcssa$lcssa478487492498510 = -31.899999618530273;
  $sub103500508 = $end + -2 | 0;
 }
 _llvm_stackrestore($19 | 0);
 if (($LM | 0) < 1 | ($effectiveBytes | 0) < 51 | ($lfe | 0) != 0) {
  if (($start | 0) >= ($end | 0)) {
   $tot_boost$3 = 0;
   HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
   STACKTOP = sp;
   return +$maxDepth$1$lcssa$lcssa478487492498510;
  }
  $i$19403 = $start;
  do {
   HEAP32[$importance + ($i$19403 << 2) >> 2] = 13;
   $i$19403 = $i$19403 + 1 | 0;
  } while (($i$19403 | 0) != ($end | 0));
  $tot_boost$3 = 0;
  HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
  STACKTOP = sp;
  return +$maxDepth$1$lcssa$lcssa478487492498510;
 }
 $cmp298429 = ($end | 0) > 4;
 $add347 = $end + -3 | 0;
 $sub364 = $end + -1 | 0;
 $c$1 = 0;
 $last$0 = 0;
 while (1) {
  $mul200 = Math_imul($c$1, $nbEBands) | 0;
  $arrayidx201 = $vla + ($mul200 << 2) | 0;
  $arrayidx203 = $bandLogE2 + ($mul200 << 2) | 0;
  $20 = HEAP32[$arrayidx203 >> 2] | 0;
  HEAP32[$arrayidx201 >> 2] = $20;
  $21 = (HEAP32[tempDoublePtr >> 2] = $20, +HEAPF32[tempDoublePtr >> 2]);
  if ($cmp82437494496511) {
   $24 = $21;
   $i$7423 = 1;
   $last$1422 = $last$0;
   while (1) {
    $add210 = $i$7423 + $mul200 | 0;
    $22 = +HEAPF32[$bandLogE2 + ($add210 << 2) >> 2];
    $last$2 = $22 > +HEAPF32[$bandLogE2 + ($add210 + -1 << 2) >> 2] + .5 ? $i$7423 : $last$1422;
    $add223 = $24 + 1.5;
    $24 = $add223 < $22 ? $add223 : $22;
    HEAPF32[$arrayidx201 + ($i$7423 << 2) >> 2] = $24;
    $i$7423 = $i$7423 + 1 | 0;
    if (($i$7423 | 0) == ($end | 0)) {
     $last$1$lcssa = $last$2;
     break;
    } else $last$1422 = $last$2;
   }
  } else $last$1$lcssa = $last$0;
  if (($last$1$lcssa | 0) > 0) {
   $26 = +HEAPF32[$arrayidx201 + ($last$1$lcssa << 2) >> 2];
   $i$8428$in = $last$1$lcssa;
   do {
    $i$8428$in$looptemp = $i$8428$in;
    $i$8428$in = $i$8428$in + -1 | 0;
    $arrayidx248 = $arrayidx201 + ($i$8428$in << 2) | 0;
    $25 = +HEAPF32[$arrayidx248 >> 2];
    $add251 = $26 + 2.0;
    $27 = +HEAPF32[$bandLogE2 + ($i$8428$in + $mul200 << 2) >> 2];
    $add251$ = $add251 < $27 ? $add251 : $27;
    $26 = $25 < $add251$ ? $25 : $add251$;
    HEAPF32[$arrayidx248 >> 2] = $26;
   } while (($i$8428$in$looptemp | 0) > 1);
  }
  if ($cmp298429) {
   $i$9430 = 2;
   do {
    $arrayidx301 = $arrayidx201 + ($i$9430 << 2) | 0;
    $28 = +HEAPF32[$arrayidx301 >> 2];
    $add303 = $i$9430 + $mul200 | 0;
    $arrayidx305 = $bandLogE2 + ($add303 + -2 << 2) | 0;
    $29 = +HEAPF32[$bandLogE2 + ($add303 << 2) >> 2];
    $30 = +HEAPF32[$arrayidx305 >> 2];
    $31 = +HEAPF32[$arrayidx305 + 4 >> 2];
    $cmp$i = $30 > $31;
    $$$i = $cmp$i ? $30 : $31;
    $$41$i = $cmp$i ? $31 : $30;
    $32 = +HEAPF32[$arrayidx305 + 12 >> 2];
    $33 = +HEAPF32[$arrayidx305 + 16 >> 2];
    $cmp9$i = $32 > $33;
    $t3$0$i = $cmp9$i ? $33 : $32;
    $t4$0$i = $cmp9$i ? $32 : $33;
    $cmp17$i = $$41$i > $t3$0$i;
    $t1$1$i = $cmp17$i ? $t4$0$i : $$$i;
    $t3$1$i = $cmp17$i ? $$41$i : $t3$0$i;
    $t4$1$i = $cmp17$i ? $$$i : $t4$0$i;
    $cmp24$i = $29 > $t1$1$i;
    do if ($cmp24$i) if ($t1$1$i < $t3$1$i) {
     $retval$0$i = $29 < $t3$1$i ? $29 : $t3$1$i;
     break;
    } else {
     $retval$0$i = $t4$1$i < $t1$1$i ? $t4$1$i : $t1$1$i;
     break;
    } else if ($29 < $t3$1$i) {
     $retval$0$i = $t1$1$i < $t3$1$i ? $t1$1$i : $t3$1$i;
     break;
    } else {
     $retval$0$i = $29 < $t4$1$i ? $29 : $t4$1$i;
     break;
    } while (0);
    if ($28 > $retval$0$i + -1.0) $cond319 = $28; else {
     do if ($cmp24$i) if ($t1$1$i < $t3$1$i) {
      $retval$0$i393 = $29 < $t3$1$i ? $29 : $t3$1$i;
      break;
     } else {
      $retval$0$i393 = $t4$1$i < $t1$1$i ? $t4$1$i : $t1$1$i;
      break;
     } else if ($29 < $t3$1$i) {
      $retval$0$i393 = $t1$1$i < $t3$1$i ? $t1$1$i : $t3$1$i;
      break;
     } else {
      $retval$0$i393 = $29 < $t4$1$i ? $29 : $t4$1$i;
      break;
     } while (0);
     $cond319 = $retval$0$i393 + -1.0;
    }
    HEAPF32[$arrayidx301 >> 2] = $cond319;
    $i$9430 = $i$9430 + 1 | 0;
   } while (($i$9430 | 0) != ($sub103500508 | 0));
  }
  $arrayidx203$idx$val = +HEAPF32[$arrayidx203 + 4 >> 2];
  $arrayidx203$idx351$val = +HEAPF32[$arrayidx203 + 8 >> 2];
  $cmp$i355 = $arrayidx203$idx$val < $21;
  $$$i356 = $cmp$i355 ? $arrayidx203$idx$val : $21;
  $$13$i357 = $cmp$i355 ? $21 : $arrayidx203$idx$val;
  $sub327 = ($$13$i357 < $arrayidx203$idx351$val ? $$13$i357 : $$$i356 < $arrayidx203$idx351$val ? $arrayidx203$idx351$val : $$$i356) + -1.0;
  $34 = +HEAPF32[$arrayidx201 >> 2];
  HEAPF32[$arrayidx201 >> 2] = $34 > $sub327 ? $34 : $sub327;
  $arrayidx337 = $arrayidx201 + 4 | 0;
  $35 = +HEAPF32[$arrayidx337 >> 2];
  HEAPF32[$arrayidx337 >> 2] = $35 > $sub327 ? $35 : $sub327;
  $arrayidx349 = $bandLogE2 + ($add347 + $mul200 << 2) | 0;
  $arrayidx349$val = +HEAPF32[$arrayidx349 >> 2];
  $arrayidx349$idx$val = +HEAPF32[$arrayidx349 + 4 >> 2];
  $arrayidx349$idx350$val = +HEAPF32[$arrayidx349 + 8 >> 2];
  $cmp$i352 = $arrayidx349$val > $arrayidx349$idx$val;
  $$$i353 = $cmp$i352 ? $arrayidx349$idx$val : $arrayidx349$val;
  $$13$i = $cmp$i352 ? $arrayidx349$val : $arrayidx349$idx$val;
  $sub351 = ($$13$i < $arrayidx349$idx350$val ? $$13$i : $$$i353 < $arrayidx349$idx350$val ? $arrayidx349$idx350$val : $$$i353) + -1.0;
  $arrayidx353 = $arrayidx201 + ($sub103500508 << 2) | 0;
  $36 = +HEAPF32[$arrayidx353 >> 2];
  HEAPF32[$arrayidx353 >> 2] = $36 > $sub351 ? $36 : $sub351;
  $arrayidx365 = $arrayidx201 + ($sub364 << 2) | 0;
  $37 = +HEAPF32[$arrayidx365 >> 2];
  HEAPF32[$arrayidx365 >> 2] = $37 > $sub351 ? $37 : $sub351;
  if ($cmp447) {
   $i$10432 = 0;
   do {
    $arrayidx380 = $arrayidx201 + ($i$10432 << 2) | 0;
    $38 = +HEAPF32[$arrayidx380 >> 2];
    $39 = +HEAPF32[$vla2 + ($i$10432 << 2) >> 2];
    HEAPF32[$arrayidx380 >> 2] = $38 > $39 ? $38 : $39;
    $i$10432 = $i$10432 + 1 | 0;
   } while (($i$10432 | 0) != ($end | 0));
  }
  $c$1 = $c$1 + 1 | 0;
  if (($c$1 | 0) >= ($C | 0)) break; else $last$0 = $last$1$lcssa;
 }
 $cmp403417 = ($start | 0) < ($end | 0);
 if ($cmp52488491499509) {
  if ($cmp403417) {
   $i$11418 = $start;
   do {
    $add406 = $i$11418 + $nbEBands | 0;
    $arrayidx407 = $vla + ($add406 << 2) | 0;
    $40 = +HEAPF32[$arrayidx407 >> 2];
    $arrayidx408 = $vla + ($i$11418 << 2) | 0;
    $sub409 = +HEAPF32[$arrayidx408 >> 2] + -4.0;
    $$sub409 = $40 > $sub409 ? $40 : $sub409;
    HEAPF32[$arrayidx407 >> 2] = $$sub409;
    $42 = +HEAPF32[$arrayidx408 >> 2];
    $sub425 = $$sub409 + -4.0;
    $cond435 = $42 > $sub425 ? $42 : $sub425;
    HEAPF32[$arrayidx408 >> 2] = $cond435;
    $sub439 = +HEAPF32[$bandLogE + ($i$11418 << 2) >> 2] - $cond435;
    $sub453 = +HEAPF32[$bandLogE + ($add406 << 2) >> 2] - +HEAPF32[$arrayidx407 >> 2];
    HEAPF32[$arrayidx408 >> 2] = (($sub439 < 0.0 ? 0.0 : $sub439) + ($sub453 < 0.0 ? 0.0 : $sub453)) * .5;
    $i$11418 = $i$11418 + 1 | 0;
   } while (($i$11418 | 0) != ($end | 0));
   label = 60;
  }
 } else if ($cmp403417) {
  $i$12420 = $start;
  do {
   $arrayidx476 = $vla + ($i$12420 << 2) | 0;
   $sub477 = +HEAPF32[$bandLogE + ($i$12420 << 2) >> 2] - +HEAPF32[$arrayidx476 >> 2];
   HEAPF32[$arrayidx476 >> 2] = $sub477 < 0.0 ? 0.0 : $sub477;
   $i$12420 = $i$12420 + 1 | 0;
  } while (($i$12420 | 0) != ($end | 0));
  label = 60;
 }
 if ((label | 0) == 60) if ($cmp403417) {
  $i$13416 = $start;
  do {
   $arrayidx496 = $vla + ($i$13416 << 2) | 0;
   $48 = +HEAPF32[$arrayidx496 >> 2];
   $49 = +HEAPF32[$surround_dynalloc + ($i$13416 << 2) >> 2];
   HEAPF32[$arrayidx496 >> 2] = $48 > $49 ? $48 : $49;
   $i$13416 = $i$13416 + 1 | 0;
  } while (($i$13416 | 0) != ($end | 0));
  $i$14414 = $start;
  do {
   $50 = +HEAPF32[$vla + ($i$14414 << 2) >> 2];
   HEAP32[$importance + ($i$14414 << 2) >> 2] = ~~+Math_floor(+(+Math_exp(+(($50 < 4.0 ? $50 : 4.0) * .6931471805599453)) * 13.0 + .5));
   $i$14414 = $i$14414 + 1 | 0;
  } while (($i$14414 | 0) != ($end | 0));
 }
 $tobool533 = ($vbr | 0) != 0;
 $tobool534 = ($constrained_vbr | 0) == 0;
 $tobool536 = ($isTransient | 0) != 0;
 if ($cmp403417 & (($tobool536 | $tobool533 & $tobool534) ^ 1)) {
  $i$15412 = $start;
  do {
   $arrayidx542 = $vla + ($i$15412 << 2) | 0;
   HEAPF32[$arrayidx542 >> 2] = +HEAPF32[$arrayidx542 >> 2] * .5;
   $i$15412 = $i$15412 + 1 | 0;
  } while (($i$15412 | 0) != ($end | 0));
 }
 if ($cmp403417) {
  $i$16410 = $start;
  do {
   $arrayidx556 = $vla + ($i$16410 << 2) | 0;
   if (($i$16410 | 0) < 8) {
    $$sink524 = 2.0;
    label = 72;
   } else if (($i$16410 | 0) > 11) {
    $$sink524 = .5;
    label = 72;
   }
   if ((label | 0) == 72) {
    label = 0;
    HEAPF32[$arrayidx556 >> 2] = +HEAPF32[$arrayidx556 >> 2] * $$sink524;
   }
   $i$16410 = $i$16410 + 1 | 0;
  } while (($i$16410 | 0) != ($end | 0));
 }
 if (HEAP32[$analysis >> 2] | 0) {
  $cond577 = ($end | 0) < 19 ? $end : 19;
  if (($cond577 | 0) > ($start | 0)) {
   $i$17408 = $start;
   do {
    $arrayidx581 = $vla + ($i$17408 << 2) | 0;
    HEAPF32[$arrayidx581 >> 2] = +HEAPF32[$arrayidx581 >> 2] + +(HEAPU8[$analysis + 44 + $i$17408 >> 0] | 0) * .015625;
    $i$17408 = $i$17408 + 1 | 0;
   } while (($i$17408 | 0) < ($cond577 | 0));
  }
 }
 if (!$cmp403417) {
  $tot_boost$3 = 0;
  HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
  STACKTOP = sp;
  return +$maxDepth$1$lcssa$lcssa478487492498510;
 }
 $div648 = ($effectiveBytes << 1 | 0) / 3 | 0;
 $$pre475 = HEAP16[$eBands + ($start << 1) >> 1] | 0;
 if ($tobool533 & ($tobool536 | $tobool534)) {
  $61 = $$pre475;
  $i$18406$us = $start;
  $tot_boost$0405$us = 0;
  while (1) {
   $arrayidx596$us = $vla + ($i$18406$us << 2) | 0;
   $59 = +HEAPF32[$arrayidx596$us >> 2];
   $cond603$us = $59 < 4.0 ? $59 : 4.0;
   HEAPF32[$arrayidx596$us >> 2] = $cond603$us;
   $i$18406$us$looptemp = $i$18406$us;
   $i$18406$us = $i$18406$us + 1 | 0;
   $61$looptemp = $61;
   $61 = HEAP16[$eBands + ($i$18406$us << 1) >> 1] | 0;
   $shl$us = (Math_imul(($61 << 16 >> 16) - ($61$looptemp << 16 >> 16) | 0, $C) | 0) << $LM;
   do if (($shl$us | 0) < 6) {
    $conv616$us = ~~$cond603$us;
    $boost$0$us = $conv616$us;
    $boost_bits$0$us = Math_imul($conv616$us << 3, $shl$us) | 0;
   } else if (($shl$us | 0) > 48) {
    $conv625$us = ~~($cond603$us * 8.0);
    $boost$0$us = $conv625$us;
    $boost_bits$0$us = (Math_imul($conv625$us << 3, $shl$us) | 0) / 8 | 0;
    break;
   } else {
    $conv633$us = ~~($cond603$us * +($shl$us | 0) / 6.0);
    $boost$0$us = $conv633$us;
    $boost_bits$0$us = $conv633$us * 48 | 0;
    break;
   } while (0);
   HEAP32[$offsets + ($i$18406$us$looptemp << 2) >> 2] = $boost$0$us;
   $add660$us = $boost_bits$0$us + $tot_boost$0405$us | 0;
   if (($i$18406$us | 0) == ($end | 0)) {
    $tot_boost$3 = $add660$us;
    break;
   } else $tot_boost$0405$us = $add660$us;
  }
  HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
  STACKTOP = sp;
  return +$maxDepth$1$lcssa$lcssa478487492498510;
 }
 $64 = $$pre475;
 $i$18406 = $start;
 $tot_boost$0405 = 0;
 while (1) {
  $arrayidx596 = $vla + ($i$18406 << 2) | 0;
  $62 = +HEAPF32[$arrayidx596 >> 2];
  $cond603 = $62 < 4.0 ? $62 : 4.0;
  HEAPF32[$arrayidx596 >> 2] = $cond603;
  $add605 = $i$18406 + 1 | 0;
  $64$looptemp = $64;
  $64 = HEAP16[$eBands + ($add605 << 1) >> 1] | 0;
  $shl = (Math_imul(($64 << 16 >> 16) - ($64$looptemp << 16 >> 16) | 0, $C) | 0) << $LM;
  do if (($shl | 0) < 6) {
   $conv616 = ~~$cond603;
   $boost$0 = $conv616;
   $boost_bits$0 = Math_imul($conv616 << 3, $shl) | 0;
  } else if (($shl | 0) > 48) {
   $conv625 = ~~($cond603 * 8.0);
   $boost$0 = $conv625;
   $boost_bits$0 = (Math_imul($conv625 << 3, $shl) | 0) / 8 | 0;
   break;
  } else {
   $conv633 = ~~($cond603 * +($shl | 0) / 6.0);
   $boost$0 = $conv633;
   $boost_bits$0 = $conv633 * 48 | 0;
   break;
  } while (0);
  $add644 = $boost_bits$0 + $tot_boost$0405 | 0;
  if (($add644 >> 6 | 0) > ($div648 | 0)) break;
  HEAP32[$offsets + ($i$18406 << 2) >> 2] = $boost$0;
  if (($add605 | 0) >= ($end | 0)) {
   $tot_boost$3 = $add644;
   label = 99;
   break;
  } else {
   $i$18406 = $add605;
   $tot_boost$0405 = $add644;
  }
 }
 if ((label | 0) == 99) {
  HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
  STACKTOP = sp;
  return +$maxDepth$1$lcssa$lcssa478487492498510;
 }
 $shl654 = $div648 << 6;
 HEAP32[$offsets + ($i$18406 << 2) >> 2] = $shl654 - $tot_boost$0405;
 $tot_boost$3 = $shl654;
 HEAP32[$tot_boost_ >> 2] = $tot_boost$3;
 STACKTOP = sp;
 return +$maxDepth$1$lcssa$lcssa478487492498510;
}

function _decfloat($f, $c, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $c = $c | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $58 = 0, $65 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add265 = 0, $add307$sink$off0 = 0, $add400 = 0, $add412 = 0, $add478 = 0, $and347 = 0, $and352 = 0, $and368 = 0, $and434 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $arrayidx186 = 0, $arrayidx261 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx356 = 0, $arrayidx406 = 0, $arrayidx444 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call496 = 0.0, $call499 = 0.0, $carry$0335 = 0, $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp289 = 0, $cmp292 = 0, $cmp325 = 0, $cmp392 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp480 = 0, $cmp51 = 0, $cmp572 = 0, $cmp67 = 0, $cond17 = 0, $cond254 = 0, $cond34 = 0, $cond93 = 0, $conv476 = 0.0, $div = 0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc66 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0, $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul187341 = 0, $mul477 = 0.0, $or$cond262 = 0, $or$cond266 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0, $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shr414 = 0, $spec$select265 = 0, $spec$select292 = 0, $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub225 = 0, $sub299 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0, $sub479 = 0, $sub564 = 0.0, $tobool95 = 0, $tobool98 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0, $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x = sp;
 $0 = $emin + $bits | 0;
 $sub1 = 0 - $0 | 0;
 $rpos = $f + 4 | 0;
 $shend = $f + 104 | 0;
 $c$addr$0 = $c;
 $gotdig$0 = 0;
 L1 : while (1) {
  switch ($c$addr$0 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$addr$2 = $c$addr$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    break L1;
   }
  }
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $c$addr$0$be = HEAPU8[$1 >> 0] | 0;
  } else $c$addr$0$be = ___shgetc($f) | 0;
  $c$addr$0 = $c$addr$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 7) {
  $4 = HEAP32[$rpos >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $4 + 1;
   $cond17 = HEAPU8[$4 >> 0] | 0;
  } else $cond17 = ___shgetc($f) | 0;
  if (($cond17 | 0) == 48) {
   $7 = 0;
   $8 = 0;
   while (1) {
    $9 = _i64Add($7 | 0, $8 | 0, -1, -1) | 0;
    $10 = getTempRet0() | 0;
    $11 = HEAP32[$rpos >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $11 + 1;
     $cond34 = HEAPU8[$11 >> 0] | 0;
    } else $cond34 = ___shgetc($f) | 0;
    if (($cond34 | 0) == 48) {
     $7 = $9;
     $8 = $10;
    } else {
     $106 = $9;
     $107 = $10;
     $c$addr$2 = $cond34;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$addr$2 = $cond17;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
  }
 }
 HEAP32[$x >> 2] = 0;
 $sub37342 = $c$addr$2 + -48 | 0;
 $cmp40344 = ($c$addr$2 | 0) == 46;
 L22 : do if ($cmp40344 | $sub37342 >>> 0 < 10) {
  $arrayidx77 = $x + 496 | 0;
  $108 = $106;
  $109 = $107;
  $15 = 0;
  $16 = 0;
  $c$addr$3352 = $c$addr$2;
  $cmp40354 = $cmp40344;
  $gotdig$3348 = $gotdig$2;
  $gotrad$1349 = $gotrad$0;
  $j$0351 = 0;
  $k$0350 = 0;
  $lnz$0347 = 0;
  $sub37353 = $sub37342;
  L24 : while (1) {
   do if ($cmp40354) if (!$gotrad$1349) {
    $110 = $15;
    $111 = $16;
    $112 = $15;
    $113 = $16;
    $gotdig$4 = $gotdig$3348;
    $gotrad$2 = 1;
    $j$2 = $j$0351;
    $k$2 = $k$0350;
    $lnz$2 = $lnz$0347;
   } else break L24; else {
    $17 = _i64Add($15 | 0, $16 | 0, 1, 0) | 0;
    $18 = getTempRet0() | 0;
    $cmp51 = ($c$addr$3352 | 0) != 48;
    if (($k$0350 | 0) >= 125) {
     if (!$cmp51) {
      $110 = $108;
      $111 = $109;
      $112 = $17;
      $113 = $18;
      $gotdig$4 = $gotdig$3348;
      $gotrad$2 = $gotrad$1349;
      $j$2 = $j$0351;
      $k$2 = $k$0350;
      $lnz$2 = $lnz$0347;
      break;
     }
     HEAP32[$arrayidx77 >> 2] = HEAP32[$arrayidx77 >> 2] | 1;
     $110 = $108;
     $111 = $109;
     $112 = $17;
     $113 = $18;
     $gotdig$4 = $gotdig$3348;
     $gotrad$2 = $gotrad$1349;
     $j$2 = $j$0351;
     $k$2 = $k$0350;
     $lnz$2 = $lnz$0347;
     break;
    }
    $arrayidx64 = $x + ($k$0350 << 2) | 0;
    if (!$j$0351) $storemerge296 = $sub37353; else $storemerge296 = $c$addr$3352 + -48 + ((HEAP32[$arrayidx64 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$arrayidx64 >> 2] = $storemerge296;
    $inc66 = $j$0351 + 1 | 0;
    $cmp67 = ($inc66 | 0) == 9;
    $110 = $108;
    $111 = $109;
    $112 = $17;
    $113 = $18;
    $gotdig$4 = 1;
    $gotrad$2 = $gotrad$1349;
    $j$2 = $cmp67 ? 0 : $inc66;
    $k$2 = $k$0350 + ($cmp67 & 1) | 0;
    $lnz$2 = $cmp51 ? $17 : $lnz$0347;
   } while (0);
   $21 = HEAP32[$rpos >> 2] | 0;
   if ($21 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $21 + 1;
    $cond93 = HEAPU8[$21 >> 0] | 0;
   } else $cond93 = ___shgetc($f) | 0;
   $sub37353 = $cond93 + -48 | 0;
   $cmp40354 = ($cond93 | 0) == 46;
   if (!($cmp40354 | $sub37353 >>> 0 < 10)) {
    $26 = $112;
    $27 = $110;
    $29 = $113;
    $30 = $111;
    $c$addr$3$lcssa = $cond93;
    $gotdig$3$lcssa = $gotdig$4;
    $gotrad$1$lcssa = $gotrad$2;
    $j$0$lcssa = $j$2;
    $k$0$lcssa = $k$2;
    $lnz$0$lcssa = $lnz$2;
    label = 31;
    break L22;
   } else {
    $108 = $110;
    $109 = $111;
    $15 = $112;
    $16 = $113;
    $c$addr$3352 = $cond93;
    $gotdig$3348 = $gotdig$4;
    $gotrad$1349 = $gotrad$2;
    $j$0351 = $j$2;
    $k$0350 = $k$2;
    $lnz$0347 = $lnz$2;
   }
  }
  $114 = $15;
  $115 = $16;
  $116 = $108;
  $117 = $109;
  $j$0302 = $j$0351;
  $k$0306 = $k$0350;
  $lnz$0312 = $lnz$0347;
  $tobool98275277 = ($gotdig$3348 | 0) != 0;
  label = 39;
 } else {
  $26 = 0;
  $27 = $106;
  $29 = 0;
  $30 = $107;
  $c$addr$3$lcssa = $c$addr$2;
  $gotdig$3$lcssa = $gotdig$2;
  $gotrad$1$lcssa = $gotrad$0;
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
  $lnz$0$lcssa = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $tobool95 = ($gotrad$1$lcssa | 0) == 0;
  $25 = $tobool95 ? $26 : $27;
  $28 = $tobool95 ? $29 : $30;
  $tobool98 = ($gotdig$3$lcssa | 0) != 0;
  if (!($tobool98 & ($c$addr$3$lcssa | 32 | 0) == 101)) if (($c$addr$3$lcssa | 0) > -1) {
   $114 = $26;
   $115 = $29;
   $116 = $25;
   $117 = $28;
   $j$0302 = $j$0$lcssa;
   $k$0306 = $k$0$lcssa;
   $lnz$0312 = $lnz$0$lcssa;
   $tobool98275277 = $tobool98;
   label = 39;
   break;
  } else {
   $118 = $26;
   $119 = $29;
   $120 = $25;
   $121 = $28;
   $j$0301 = $j$0$lcssa;
   $k$0305 = $k$0$lcssa;
   $lnz$0311 = $lnz$0$lcssa;
   $tobool98274 = $tobool98;
   label = 41;
   break;
  }
  $31 = _scanexp($f, $pok) | 0;
  $32 = getTempRet0() | 0;
  if (($31 | 0) == 0 & ($32 | 0) == -2147483648) {
   if (!$pok) {
    ___shlim($f, 0, 0);
    $retval$1 = 0.0;
    break;
   }
   if (!(HEAP32[$shend >> 2] | 0)) {
    $38 = 0;
    $39 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $38 = 0;
    $39 = 0;
   }
  } else {
   $38 = $31;
   $39 = $32;
  }
  $40 = _i64Add($38 | 0, $39 | 0, $25 | 0, $28 | 0) | 0;
  $46 = $40;
  $47 = $26;
  $49 = getTempRet0() | 0;
  $50 = $29;
  $j$0300 = $j$0$lcssa;
  $k$0304 = $k$0$lcssa;
  $lnz$0310 = $lnz$0$lcssa;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$shend >> 2] | 0)) {
  $118 = $114;
  $119 = $115;
  $120 = $116;
  $121 = $117;
  $j$0301 = $j$0302;
  $k$0305 = $k$0306;
  $lnz$0311 = $lnz$0312;
  $tobool98274 = $tobool98275277;
  label = 41;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($tobool98275277) {
   $46 = $116;
   $47 = $114;
   $49 = $117;
   $50 = $115;
   $j$0300 = $j$0302;
   $k$0304 = $k$0306;
   $lnz$0310 = $lnz$0312;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($tobool98274) {
  $46 = $120;
  $47 = $118;
  $49 = $121;
  $50 = $119;
  $j$0300 = $j$0301;
  $k$0304 = $k$0305;
  $lnz$0310 = $lnz$0311;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  HEAP32[16056] = 28;
  ___shlim($f, 0, 0);
  $retval$1 = 0.0;
 } else if ((label | 0) == 43) {
  $44 = HEAP32[$x >> 2] | 0;
  if (!$44) {
   $retval$1 = +($sign | 0) * 0.0;
   break;
  }
  if ((($50 | 0) < 0 | ($50 | 0) == 0 & $47 >>> 0 < 10) & (($46 | 0) == ($47 | 0) & ($49 | 0) == ($50 | 0))) if (($bits | 0) > 30 | ($44 >>> $bits | 0) == 0) {
   $retval$1 = +($sign | 0) * +($44 >>> 0);
   break;
  }
  $div = ($emin | 0) / -2 | 0;
  $58 = (($div | 0) < 0) << 31 >> 31;
  if (($49 | 0) > ($58 | 0) | ($49 | 0) == ($58 | 0) & $46 >>> 0 > $div >>> 0) {
   HEAP32[16056] = 68;
   $retval$1 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub170 = $emin + -106 | 0;
  $65 = (($sub170 | 0) < 0) << 31 >> 31;
  if (($49 | 0) < ($65 | 0) | ($49 | 0) == ($65 | 0) & $46 >>> 0 < $sub170 >>> 0) {
   HEAP32[16056] = 68;
   $retval$1 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$j$0300) $k$3 = $k$0304; else {
   if (($j$0300 | 0) < 9) {
    $arrayidx186 = $x + ($k$0304 << 2) | 0;
    $j$3340 = $j$0300;
    $mul187341 = HEAP32[$arrayidx186 >> 2] | 0;
    while (1) {
     $mul187341 = $mul187341 * 10 | 0;
     if (($j$3340 | 0) >= 8) break; else $j$3340 = $j$3340 + 1 | 0;
    }
    HEAP32[$arrayidx186 >> 2] = $mul187341;
   }
   $k$3 = $k$0304 + 1 | 0;
  }
  if (($lnz$0310 | 0) < 9) if (($lnz$0310 | 0) <= ($46 | 0) & ($46 | 0) < 18) {
   if (($46 | 0) == 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0);
    break;
   }
   if (($46 | 0) < 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0) / +(HEAP32[41280 + (8 - $46 << 2) >> 2] | 0);
    break;
   }
   $sub225 = $bits + 27 + (Math_imul($46, -3) | 0) | 0;
   $$pre = HEAP32[$x >> 2] | 0;
   if (($sub225 | 0) > 30 | ($$pre >>> $sub225 | 0) == 0) {
    $retval$1 = +($sign | 0) * +($$pre >>> 0) * +(HEAP32[41280 + ($46 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $rem = ($46 | 0) % 9 | 0;
  if (!$rem) {
   $a$3$ph = 0;
   $rp$3$ph = $46;
   $z$2$ph = $k$3;
  } else {
   $cond254 = ($46 | 0) > -1 ? $rem : $rem + 9 | 0;
   $75 = HEAP32[41280 + (8 - $cond254 << 2) >> 2] | 0;
   if (!$k$3) {
    $a$0$lcssa379 = 0;
    $rp$0$lcssa378 = $46;
    $z$0 = 0;
   } else {
    $div267 = 1e9 / ($75 | 0) | 0;
    $a$0333 = 0;
    $carry$0335 = 0;
    $k$4334 = 0;
    $rp$0332 = $46;
    do {
     $arrayidx261 = $x + ($k$4334 << 2) | 0;
     $76 = HEAP32[$arrayidx261 >> 2] | 0;
     $div264 = ($76 >>> 0) / ($75 >>> 0) | 0;
     $78 = $76 - (Math_imul($div264, $75) | 0) | 0;
     $add265 = $div264 + $carry$0335 | 0;
     HEAP32[$arrayidx261 >> 2] = $add265;
     $carry$0335 = Math_imul($div267, $78) | 0;
     $or$cond262 = ($k$4334 | 0) == ($a$0333 | 0) & ($add265 | 0) == 0;
     $rp$0332 = $or$cond262 ? $rp$0332 + -9 | 0 : $rp$0332;
     $a$0333 = $or$cond262 ? $a$0333 + 1 & 127 : $a$0333;
     $k$4334 = $k$4334 + 1 | 0;
    } while (($k$4334 | 0) != ($k$3 | 0));
    if (!$carry$0335) {
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3;
    } else {
     HEAP32[$x + ($k$3 << 2) >> 2] = $carry$0335;
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3 + 1 | 0;
    }
   }
   $a$3$ph = $a$0$lcssa379;
   $rp$3$ph = 9 - $cond254 + $rp$0$lcssa378 | 0;
   $z$2$ph = $z$0;
  }
  $a$3$ph406 = $a$3$ph;
  $e2$0$ph = 0;
  $rp$3$ph404 = $rp$3$ph;
  $z$2$ph405 = $z$2$ph;
  L104 : while (1) {
   $cmp289 = ($rp$3$ph404 | 0) < 18;
   $cmp292 = ($rp$3$ph404 | 0) == 18;
   $arrayidx294 = $x + ($a$3$ph406 << 2) | 0;
   $e2$0 = $e2$0$ph;
   $z$2 = $z$2$ph405;
   while (1) {
    if (!$cmp289) {
     if (!$cmp292) {
      $rp$5$ph = $rp$3$ph404;
      break L104;
     }
     if ((HEAP32[$arrayidx294 >> 2] | 0) >>> 0 >= 9007199) {
      $rp$5$ph = 18;
      break L104;
     }
    }
    $carry298$0 = 0;
    $k$5$in = $z$2 + 127 | 0;
    $z$3 = $z$2;
    while (1) {
     $k$5 = $k$5$in & 127;
     $arrayidx304 = $x + ($k$5 << 2) | 0;
     $81 = _bitshift64Shl(HEAP32[$arrayidx304 >> 2] | 0, 0, 29) | 0;
     $83 = _i64Add($81 | 0, getTempRet0() | 0, $carry298$0 | 0, 0) | 0;
     $84 = getTempRet0() | 0;
     if ($84 >>> 0 > 0 | ($84 | 0) == 0 & $83 >>> 0 > 1e9) {
      $90 = ___udivdi3($83 | 0, $84 | 0, 1e9, 0) | 0;
      $92 = ___muldi3($90 | 0, getTempRet0() | 0, -1e9, -1) | 0;
      $94 = _i64Add($83 | 0, $84 | 0, $92 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      $add307$sink$off0 = $94;
      $carry298$1 = $90;
     } else {
      $add307$sink$off0 = $83;
      $carry298$1 = 0;
     }
     HEAP32[$arrayidx304 >> 2] = $add307$sink$off0;
     $cmp325 = ($k$5 | 0) == ($a$3$ph406 | 0);
     $spec$select292 = ($k$5 | 0) != ($z$3 + 127 & 127 | 0) | $cmp325 ? $z$3 : ($add307$sink$off0 | 0) == 0 ? $k$5 : $z$3;
     if ($cmp325) break; else {
      $carry298$0 = $carry298$1;
      $k$5$in = $k$5 + -1 | 0;
      $z$3 = $spec$select292;
     }
    }
    $sub299 = $e2$0 + -29 | 0;
    if (!$carry298$1) {
     $e2$0 = $sub299;
     $z$2 = $z$3;
    } else break;
   }
   $and347 = $a$3$ph406 + 127 & 127;
   $and352 = $spec$select292 + 127 & 127;
   $arrayidx356 = $x + (($spec$select292 + 126 & 127) << 2) | 0;
   if (($and347 | 0) == ($spec$select292 | 0)) {
    HEAP32[$arrayidx356 >> 2] = HEAP32[$arrayidx356 >> 2] | HEAP32[$x + ($and352 << 2) >> 2];
    $z$5 = $and352;
   } else $z$5 = $z$3;
   HEAP32[$x + ($and347 << 2) >> 2] = $carry298$1;
   $a$3$ph406 = $and347;
   $e2$0$ph = $sub299;
   $rp$3$ph404 = $rp$3$ph404 + 9 | 0;
   $z$2$ph405 = $z$5;
  }
  $a$5$ph$ph = $a$3$ph406;
  $e2$1$ph$ph = $e2$0;
  $rp$5$ph403$ph = $rp$5$ph;
  $z$7$ph$ph = $z$2;
  L123 : while (1) {
   $and434 = $z$7$ph$ph + 1 & 127;
   $arrayidx444 = $x + (($z$7$ph$ph + 127 & 127) << 2) | 0;
   $a$5$ph = $a$5$ph$ph;
   $e2$1$ph = $e2$1$ph$ph;
   $rp$5$ph403 = $rp$5$ph403$ph;
   while (1) {
    $cmp392 = ($rp$5$ph403 | 0) == 18;
    $spec$select265 = ($rp$5$ph403 | 0) > 27 ? 9 : 1;
    $a$5 = $a$5$ph;
    $e2$1 = $e2$1$ph;
    while (1) {
     $i$0323 = 0;
     while (1) {
      $and368 = $i$0323 + $a$5 & 127;
      if (($and368 | 0) == ($z$7$ph$ph | 0)) {
       label = 92;
       break;
      }
      $98 = HEAP32[$x + ($and368 << 2) >> 2] | 0;
      $99 = HEAP32[44236 + ($i$0323 << 2) >> 2] | 0;
      if ($98 >>> 0 < $99 >>> 0) {
       label = 92;
       break;
      }
      if ($98 >>> 0 > $99 >>> 0) break;
      if (($i$0323 + 1 | 0) >>> 0 < 2) $i$0323 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($cmp392) break L123;
     }
     $add400 = $spec$select265 + $e2$1 | 0;
     if (($a$5 | 0) == ($z$7$ph$ph | 0)) {
      $a$5 = $z$7$ph$ph;
      $e2$1 = $add400;
     } else break;
    }
    $sub408 = (1 << $spec$select265) + -1 | 0;
    $shr414 = 1e9 >>> $spec$select265;
    $a$6326 = $a$5;
    $carry362$0328 = 0;
    $k$6327 = $a$5;
    $rp$6325 = $rp$5$ph403;
    do {
     $arrayidx406 = $x + ($k$6327 << 2) | 0;
     $100 = HEAP32[$arrayidx406 >> 2] | 0;
     $add412 = ($100 >>> $spec$select265) + $carry362$0328 | 0;
     HEAP32[$arrayidx406 >> 2] = $add412;
     $carry362$0328 = Math_imul($100 & $sub408, $shr414) | 0;
     $or$cond266 = ($k$6327 | 0) == ($a$6326 | 0) & ($add412 | 0) == 0;
     $rp$6325 = $or$cond266 ? $rp$6325 + -9 | 0 : $rp$6325;
     $a$6326 = $or$cond266 ? $a$6326 + 1 & 127 : $a$6326;
     $k$6327 = $k$6327 + 1 & 127;
    } while (($k$6327 | 0) != ($z$7$ph$ph | 0));
    if ($carry362$0328 | 0) {
     if (($and434 | 0) != ($a$6326 | 0)) break;
     HEAP32[$arrayidx444 >> 2] = HEAP32[$arrayidx444 >> 2] | 1;
    }
    $a$5$ph = $a$6326;
    $e2$1$ph = $add400;
    $rp$5$ph403 = $rp$6325;
   }
   HEAP32[$x + ($z$7$ph$ph << 2) >> 2] = $carry362$0328;
   $a$5$ph$ph = $a$6326;
   $e2$1$ph$ph = $add400;
   $rp$5$ph403$ph = $rp$6325;
   $z$7$ph$ph = $and434;
  }
  $i$4322 = 0;
  $y$0321 = 0.0;
  $z$10320 = $z$7$ph$ph;
  while (1) {
   $and458 = $i$4322 + $a$5 & 127;
   $and463 = $z$10320 + 1 & 127;
   if (($and458 | 0) == ($z$10320 | 0)) {
    HEAP32[$x + ($and463 + -1 << 2) >> 2] = 0;
    $z$11 = $and463;
   } else $z$11 = $z$10320;
   $y$0321 = $y$0321 * 1.0e9 + +((HEAP32[$x + ($and458 << 2) >> 2] | 0) >>> 0);
   $i$4322 = $i$4322 + 1 | 0;
   if (($i$4322 | 0) == 2) break; else $z$10320 = $z$11;
  }
  $conv476 = +($sign | 0);
  $mul477 = $y$0321 * $conv476;
  $add478 = $e2$1 + 53 | 0;
  $sub479 = $add478 - $emin | 0;
  $cmp480 = ($sub479 | 0) < ($bits | 0);
  $bits$addr$0 = $cmp480 ? (($sub479 | 0) > 0 ? $sub479 : 0) : $bits;
  if (($bits$addr$0 | 0) < 53) {
   $call496 = +_copysignl(+_scalbn(1.0, 105 - $bits$addr$0 | 0), $mul477);
   $call499 = +_fmodl($mul477, +_scalbn(1.0, 53 - $bits$addr$0 | 0));
   $bias$0 = $call496;
   $frac$0 = $call499;
   $y$1 = $call496 + ($mul477 - $call499);
  } else {
   $bias$0 = 0.0;
   $frac$0 = 0.0;
   $y$1 = $mul477;
  }
  $and504 = $a$5 + 2 & 127;
  if (($and504 | 0) == ($z$11 | 0)) $frac$3 = $frac$0; else {
   $104 = HEAP32[$x + ($and504 << 2) >> 2] | 0;
   do if ($104 >>> 0 < 5e8) {
    if (!$104) if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $frac$0;
     break;
    }
    $frac$1 = $conv476 * .25 + $frac$0;
   } else {
    if (($104 | 0) != 5e8) {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
    if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $conv476 * .5 + $frac$0;
     break;
    } else {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
   } while (0);
   if ((53 - $bits$addr$0 | 0) > 1) if (+_fmodl($frac$1, 1.0) != 0.0) $frac$3 = $frac$1; else $frac$3 = $frac$1 + 1.0; else $frac$3 = $frac$1;
  }
  $sub564 = $y$1 + $frac$3 - $bias$0;
  do if (($add478 & 2147483647 | 0) > (-2 - $0 | 0)) {
   $cmp572 = !(+Math_abs(+$sub564) >= 9007199254740992.0);
   $e2$3 = $e2$1 + (($cmp572 ^ 1) & 1) | 0;
   $y$2 = $cmp572 ? $sub564 : $sub564 * .5;
   if (($e2$3 + 50 | 0) <= ($sub1 | 0)) if (!($frac$3 != 0.0 & ($cmp480 & (($bits$addr$0 | 0) != ($sub479 | 0) | $cmp572)))) {
    $e2$4 = $e2$3;
    $y$3 = $y$2;
    break;
   }
   HEAP32[16056] = 68;
   $e2$4 = $e2$3;
   $y$3 = $y$2;
  } else {
   $e2$4 = $e2$1;
   $y$3 = $sub564;
  } while (0);
  $retval$1 = +_scalbnl($y$3, $e2$4);
 } while (0);
 STACKTOP = sp;
 return +$retval$1;
}

function _opus_fft_impl($st, $fout) {
 $st = $st | 0;
 $fout = $fout | 0;
 var $0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $9 = 0.0, $Fout$addr$0$i = 0, $Fout$addr$0141$i = 0, $Fout$addr$063$i = 0, $Fout$addr$1147$us$i = 0, $Fout0$07$i = 0, $Fout1$06$i = 0, $Fout2$05$i = 0, $Fout3$04$i = 0, $Fout4$03$i = 0, $L$0 = 0, $add$i51 = 0.0, $add$i67 = 0.0, $add$i78 = 0.0, $add$ptr$i61 = 0, $add10 = 0, $add102$i = 0.0, $add120$us$i = 0.0, $add135$i = 0.0, $add145$i = 0.0, $add145$us$i = 0.0, $add152$i = 0.0, $add16$i = 0.0, $add170$us$i = 0.0, $add179$i = 0.0, $add186$i = 0.0, $add194$us$i = 0.0, $add198$us$i = 0.0, $add206$us$i = 0.0, $add213$us$i = 0.0, $add235$i = 0.0, $add24$i = 0.0, $add249$i = 0.0, $add260$i = 0.0, $add271$i = 0.0, $add30$i = 0.0, $add316$i = 0.0, $add330$i = 0.0, $add44$i = 0.0, $add54$i80 = 0.0, $add61$i = 0.0, $add69$i = 0.0, $cmp151$i = 0, $epi3$sroa$3$0$copyload$i = 0.0, $fstride = 0, $i$0140$i = 0, $i$02$i = 0, $i$062$i = 0, $i$09$i = 0, $i$091 = 0, $i$1149$us$i = 0, $i106$us$i = 0, $i114$i = 0, $i117$i = 0, $i131$us$i = 0, $i156$us$i = 0, $i182$us$i = 0, $i22$i = 0, $i25$i = 0, $i27$i = 0, $i29$i = 0, $i30$i = 0, $i4$i = 0, $i43$i = 0, $i48$i = 0, $i6$i = 0, $i62$i = 0, $i7$i = 0, $i76$i = 0, $i81$i = 0, $i9$i = 0, $i93$i = 0, $i95$i = 0, $j$0146$us$i = 0, $k$0$i = 0, $m$090 = 0, $m2$0 = 0, $mul = 0, $mul$i = 0.0, $mul$i57 = 0, $mul$i59 = 0, $mul$i70 = 0, $mul10$i = 0, $mul104$i = 0.0, $mul107$i = 0.0, $mul108$i = 0.0, $mul110$i = 0, $mul12$i = 0, $mul18$i = 0, $mul24 = 0, $mul251$i = 0, $mul253$i = 0, $mul29$pre$phiZ2D = 0, $mul3$i = 0, $mul33$i = 0.0, $mul44$i = 0, $mul77$i = 0, $mul8$i = 0, $mul84$i = 0, $mul91$i = 0, $mul99$i = 0.0, $r$i75 = 0, $r102$us$i = 0, $r111$i = 0, $r127$us$i = 0, $r152$us$i = 0, $r2$i = 0, $r21$i = 0, $r23$i = 0, $r23$i52 = 0, $r26$i = 0, $r37$i = 0, $r65$i = 0, $r70$i = 0, $r97$i = 0, $scratch$sroa$0$0$copyload$i = 0.0, $scratch$sroa$5$0$$sroa_idx39$i = 0, $scratch$sroa$5$0$copyload$i = 0.0, $shl = 0, $shl38 = 0, $shl42 = 0, $spec$select = 0, $st$idx = 0, $st$idx$val = 0, $st$idx45$val = 0, $sub$i50 = 0.0, $sub$i65 = 0.0, $sub$i76 = 0.0, $sub109$us$i = 0.0, $sub120$i = 0.0, $sub134$us$i = 0.0, $sub159$us$i = 0.0, $sub162$i = 0.0, $sub169$i = 0.0, $sub179$us$i = 0.0, $sub185$us$i = 0.0, $sub196$i = 0.0, $sub203$i = 0.0, $sub223$us$i = 0.0, $sub230$us$i = 0.0, $sub33$i = 0.0, $sub341$i = 0.0, $sub352$i = 0.0, $sub54$i = 0.0, $sub61$i = 0.0, $sub67$i = 0.0, $sub7$i = 0.0, $sub87$i = 0.0, $t$sroa$0$0$$sroa_idx$i = 0, $t$sroa$0$0$copyload$i = 0.0, $t$sroa$14$0$$sroa_idx10$i = 0, $t$sroa$14$0$copyload$i = 0.0, $tw1$0$i = 0, $tw1$0143$us$i = 0, $tw2$0$i = 0, $tw2$0144$us$i = 0, $tw3$0145$us$i = 0, $u$02$i = 0, $ya$sroa$0$0$copyload$i = 0.0, $ya$sroa$7$0$copyload$i = 0.0, $yb$sroa$0$0$copyload$i = 0.0, $yb$sroa$7$0$copyload$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $fstride = sp;
 $0 = HEAP32[$st + 8 >> 2] | 0;
 HEAP32[$fstride >> 2] = 1;
 $3 = 1;
 $L$0 = 0;
 while (1) {
  $mul = $L$0 << 1;
  $2 = HEAP16[$st + 12 + (($mul | 1) << 1) >> 1] | 0;
  $3 = Math_imul($3, HEAP16[$st + 12 + ($mul << 1) >> 1] | 0) | 0;
  $add10 = $L$0 + 1 | 0;
  HEAP32[$fstride + ($add10 << 2) >> 2] = $3;
  if ($2 << 16 >> 16 == 1) break; else $L$0 = $add10;
 }
 $spec$select = ($0 | 0) > 0 ? $0 : 0;
 $st$idx = $st + 48 | 0;
 $i$091 = $L$0;
 $m$090 = HEAP16[$st + 12 + (($add10 << 1) + -1 << 1) >> 1] | 0;
 L4 : while (1) {
  if (!$i$091) {
   $m2$0 = 1;
   $mul29$pre$phiZ2D = 0;
  } else {
   $mul24 = $i$091 << 1;
   $m2$0 = HEAP16[$st + 12 + ($mul24 + -1 << 1) >> 1] | 0;
   $mul29$pre$phiZ2D = $mul24;
  }
  L9 : do switch (HEAP16[$st + 12 + ($mul29$pre$phiZ2D << 1) >> 1] | 0) {
  case 2:
   {
    $7 = HEAP32[$fstride + ($i$091 << 2) >> 2] | 0;
    if (($m$090 | 0) != 4) {
     label = 8;
     break L4;
    }
    if (($7 | 0) > 0) {
     $Fout$addr$063$i = $fout;
     $i$062$i = 0;
     while (1) {
      $t$sroa$0$0$$sroa_idx$i = $Fout$addr$063$i + 32 | 0;
      $t$sroa$0$0$copyload$i = +HEAPF32[$t$sroa$0$0$$sroa_idx$i >> 2];
      $t$sroa$14$0$$sroa_idx10$i = $Fout$addr$063$i + 36 | 0;
      $t$sroa$14$0$copyload$i = +HEAPF32[$t$sroa$14$0$$sroa_idx10$i >> 2];
      $8 = +HEAPF32[$Fout$addr$063$i >> 2];
      HEAPF32[$t$sroa$0$0$$sroa_idx$i >> 2] = $8 - $t$sroa$0$0$copyload$i;
      $i7$i = $Fout$addr$063$i + 4 | 0;
      $9 = +HEAPF32[$i7$i >> 2];
      HEAPF32[$t$sroa$14$0$$sroa_idx10$i >> 2] = $9 - $t$sroa$14$0$copyload$i;
      HEAPF32[$Fout$addr$063$i >> 2] = $t$sroa$0$0$copyload$i + $8;
      HEAPF32[$i7$i >> 2] = $t$sroa$14$0$copyload$i + $9;
      $r23$i = $Fout$addr$063$i + 40 | 0;
      $10 = +HEAPF32[$r23$i >> 2];
      $i25$i = $Fout$addr$063$i + 44 | 0;
      $11 = +HEAPF32[$i25$i >> 2];
      $mul$i = ($10 + $11) * .7071067690849304;
      $mul33$i = ($11 - $10) * .7071067690849304;
      $r37$i = $Fout$addr$063$i + 8 | 0;
      $12 = +HEAPF32[$r37$i >> 2];
      HEAPF32[$r23$i >> 2] = $12 - $mul$i;
      $i43$i = $Fout$addr$063$i + 12 | 0;
      $13 = +HEAPF32[$i43$i >> 2];
      HEAPF32[$i25$i >> 2] = $13 - $mul33$i;
      HEAPF32[$r37$i >> 2] = $12 + $mul$i;
      HEAPF32[$i43$i >> 2] = $mul33$i + $13;
      $i62$i = $Fout$addr$063$i + 52 | 0;
      $14 = +HEAPF32[$i62$i >> 2];
      $r65$i = $Fout$addr$063$i + 48 | 0;
      $15 = +HEAPF32[$r65$i >> 2];
      $r70$i = $Fout$addr$063$i + 16 | 0;
      $16 = +HEAPF32[$r70$i >> 2];
      HEAPF32[$r65$i >> 2] = $16 - $14;
      $i76$i = $Fout$addr$063$i + 20 | 0;
      $17 = +HEAPF32[$i76$i >> 2];
      HEAPF32[$i62$i >> 2] = $15 + $17;
      HEAPF32[$r70$i >> 2] = $14 + $16;
      HEAPF32[$i76$i >> 2] = $17 - $15;
      $i95$i = $Fout$addr$063$i + 60 | 0;
      $18 = +HEAPF32[$i95$i >> 2];
      $r97$i = $Fout$addr$063$i + 56 | 0;
      $19 = +HEAPF32[$r97$i >> 2];
      $mul99$i = ($18 - $19) * .7071067690849304;
      $mul107$i = ($18 + $19) * -.7071067690849304;
      $r111$i = $Fout$addr$063$i + 24 | 0;
      $20 = +HEAPF32[$r111$i >> 2];
      HEAPF32[$r97$i >> 2] = $20 - $mul99$i;
      $i117$i = $Fout$addr$063$i + 28 | 0;
      $21 = +HEAPF32[$i117$i >> 2];
      HEAPF32[$i95$i >> 2] = $21 - $mul107$i;
      HEAPF32[$r111$i >> 2] = $20 + $mul99$i;
      HEAPF32[$i117$i >> 2] = $mul107$i + $21;
      $i$062$i = $i$062$i + 1 | 0;
      if (($i$062$i | 0) == ($7 | 0)) break; else $Fout$addr$063$i = $Fout$addr$063$i + 64 | 0;
     }
    }
    break;
   }
  case 4:
   {
    $22 = HEAP32[$fstride + ($i$091 << 2) >> 2] | 0;
    $shl = $22 << $spec$select;
    if (($m$090 | 0) == 1) {
     if (($22 | 0) <= 0) break L9;
     $Fout$addr$0141$i = $fout;
     $i$0140$i = 0;
     while (1) {
      $23 = +HEAPF32[$Fout$addr$0141$i >> 2];
      $r2$i = $Fout$addr$0141$i + 16 | 0;
      $24 = +HEAPF32[$r2$i >> 2];
      $sub$i50 = $23 - $24;
      $i4$i = $Fout$addr$0141$i + 4 | 0;
      $25 = +HEAPF32[$i4$i >> 2];
      $i6$i = $Fout$addr$0141$i + 20 | 0;
      $26 = +HEAPF32[$i6$i >> 2];
      $sub7$i = $25 - $26;
      $add$i51 = $23 + $24;
      $add16$i = $25 + $26;
      $r21$i = $Fout$addr$0141$i + 8 | 0;
      $27 = +HEAPF32[$r21$i >> 2];
      $r23$i52 = $Fout$addr$0141$i + 24 | 0;
      $28 = +HEAPF32[$r23$i52 >> 2];
      $add24$i = $27 + $28;
      $i27$i = $Fout$addr$0141$i + 12 | 0;
      $29 = +HEAPF32[$i27$i >> 2];
      $i29$i = $Fout$addr$0141$i + 28 | 0;
      $30 = +HEAPF32[$i29$i >> 2];
      $add30$i = $29 + $30;
      HEAPF32[$r2$i >> 2] = $add$i51 - $add24$i;
      HEAPF32[$i6$i >> 2] = $add16$i - $add30$i;
      HEAPF32[$Fout$addr$0141$i >> 2] = $add$i51 + $add24$i;
      HEAPF32[$i4$i >> 2] = $add16$i + $add30$i;
      $sub61$i = $27 - $28;
      $sub67$i = $29 - $30;
      HEAPF32[$r21$i >> 2] = $sub$i50 + $sub67$i;
      HEAPF32[$i27$i >> 2] = $sub7$i - $sub61$i;
      HEAPF32[$r23$i52 >> 2] = $sub$i50 - $sub67$i;
      HEAPF32[$i29$i >> 2] = $sub7$i + $sub61$i;
      $i$0140$i = $i$0140$i + 1 | 0;
      if (($i$0140$i | 0) == ($22 | 0)) break L9; else $Fout$addr$0141$i = $Fout$addr$0141$i + 32 | 0;
     }
    }
    $mul$i57 = $m$090 << 1;
    $mul91$i = $m$090 * 3 | 0;
    if (($22 | 0) > 0) {
     $31 = HEAP32[$st$idx >> 2] | 0;
     $mul251$i = $shl << 1;
     $mul253$i = $shl * 3 | 0;
     if (($m$090 | 0) > 0) {
      $i$1149$us$i = 0;
      do {
       $Fout$addr$1147$us$i = $fout + ((Math_imul($i$1149$us$i, $m2$0) | 0) << 3) | 0;
       $j$0146$us$i = 0;
       $tw1$0143$us$i = $31;
       $tw2$0144$us$i = $31;
       $tw3$0145$us$i = $31;
       while (1) {
        $r102$us$i = $Fout$addr$1147$us$i + ($m$090 << 3) | 0;
        $32 = +HEAPF32[$r102$us$i >> 2];
        $33 = +HEAPF32[$tw1$0143$us$i >> 2];
        $i106$us$i = $Fout$addr$1147$us$i + ($m$090 << 3) + 4 | 0;
        $34 = +HEAPF32[$i106$us$i >> 2];
        $35 = +HEAPF32[$tw1$0143$us$i + 4 >> 2];
        $sub109$us$i = $32 * $33 - $34 * $35;
        $add120$us$i = $33 * $34 + $32 * $35;
        $r127$us$i = $Fout$addr$1147$us$i + ($mul$i57 << 3) | 0;
        $36 = +HEAPF32[$r127$us$i >> 2];
        $37 = +HEAPF32[$tw2$0144$us$i >> 2];
        $i131$us$i = $Fout$addr$1147$us$i + ($mul$i57 << 3) + 4 | 0;
        $38 = +HEAPF32[$i131$us$i >> 2];
        $39 = +HEAPF32[$tw2$0144$us$i + 4 >> 2];
        $sub134$us$i = $36 * $37 - $38 * $39;
        $add145$us$i = $37 * $38 + $36 * $39;
        $r152$us$i = $Fout$addr$1147$us$i + ($mul91$i << 3) | 0;
        $40 = +HEAPF32[$r152$us$i >> 2];
        $41 = +HEAPF32[$tw3$0145$us$i >> 2];
        $i156$us$i = $Fout$addr$1147$us$i + ($mul91$i << 3) + 4 | 0;
        $42 = +HEAPF32[$i156$us$i >> 2];
        $43 = +HEAPF32[$tw3$0145$us$i + 4 >> 2];
        $sub159$us$i = $40 * $41 - $42 * $43;
        $add170$us$i = $41 * $42 + $40 * $43;
        $44 = +HEAPF32[$Fout$addr$1147$us$i >> 2];
        $sub179$us$i = $44 - $sub134$us$i;
        $i182$us$i = $Fout$addr$1147$us$i + 4 | 0;
        $45 = +HEAPF32[$i182$us$i >> 2];
        $sub185$us$i = $45 - $add145$us$i;
        $add194$us$i = $sub134$us$i + $44;
        HEAPF32[$Fout$addr$1147$us$i >> 2] = $add194$us$i;
        $add198$us$i = $add145$us$i + $45;
        HEAPF32[$i182$us$i >> 2] = $add198$us$i;
        $add206$us$i = $sub109$us$i + $sub159$us$i;
        $add213$us$i = $add120$us$i + $add170$us$i;
        $sub223$us$i = $sub109$us$i - $sub159$us$i;
        $sub230$us$i = $add120$us$i - $add170$us$i;
        HEAPF32[$r127$us$i >> 2] = $add194$us$i - $add206$us$i;
        HEAPF32[$i131$us$i >> 2] = $add198$us$i - $add213$us$i;
        HEAPF32[$Fout$addr$1147$us$i >> 2] = $add206$us$i + +HEAPF32[$Fout$addr$1147$us$i >> 2];
        HEAPF32[$i182$us$i >> 2] = $add213$us$i + +HEAPF32[$i182$us$i >> 2];
        HEAPF32[$r102$us$i >> 2] = $sub179$us$i + $sub230$us$i;
        HEAPF32[$i106$us$i >> 2] = $sub185$us$i - $sub223$us$i;
        HEAPF32[$r152$us$i >> 2] = $sub179$us$i - $sub230$us$i;
        HEAPF32[$i156$us$i >> 2] = $sub185$us$i + $sub223$us$i;
        $j$0146$us$i = $j$0146$us$i + 1 | 0;
        if (($j$0146$us$i | 0) == ($m$090 | 0)) break; else {
         $Fout$addr$1147$us$i = $Fout$addr$1147$us$i + 8 | 0;
         $tw1$0143$us$i = $tw1$0143$us$i + ($shl << 3) | 0;
         $tw2$0144$us$i = $tw2$0144$us$i + ($mul251$i << 3) | 0;
         $tw3$0145$us$i = $tw3$0145$us$i + ($mul253$i << 3) | 0;
        }
       }
       $i$1149$us$i = $i$1149$us$i + 1 | 0;
      } while (($i$1149$us$i | 0) != ($22 | 0));
     }
    }
    break;
   }
  case 3:
   {
    $48 = HEAP32[$fstride + ($i$091 << 2) >> 2] | 0;
    $shl38 = $48 << $spec$select;
    $st$idx$val = HEAP32[$st$idx >> 2] | 0;
    $mul$i70 = $m$090 << 1;
    $epi3$sroa$3$0$copyload$i = +HEAPF32[$st$idx$val + ((Math_imul($shl38, $m$090) | 0) << 3) + 4 >> 2];
    if (($48 | 0) > 0) {
     $mul84$i = $shl38 << 1;
     $i$02$i = 0;
     do {
      $Fout$addr$0$i = $fout + ((Math_imul($i$02$i, $m2$0) | 0) << 3) | 0;
      $k$0$i = $m$090;
      $tw1$0$i = $st$idx$val;
      $tw2$0$i = $st$idx$val;
      while (1) {
       $r$i75 = $Fout$addr$0$i + ($m$090 << 3) | 0;
       $49 = +HEAPF32[$r$i75 >> 2];
       $50 = +HEAPF32[$tw1$0$i >> 2];
       $i9$i = $Fout$addr$0$i + ($m$090 << 3) + 4 | 0;
       $51 = +HEAPF32[$i9$i >> 2];
       $52 = +HEAPF32[$tw1$0$i + 4 >> 2];
       $sub$i76 = $49 * $50 - $51 * $52;
       $add$i78 = $50 * $51 + $49 * $52;
       $r26$i = $Fout$addr$0$i + ($mul$i70 << 3) | 0;
       $53 = +HEAPF32[$r26$i >> 2];
       $54 = +HEAPF32[$tw2$0$i >> 2];
       $i30$i = $Fout$addr$0$i + ($mul$i70 << 3) + 4 | 0;
       $55 = +HEAPF32[$i30$i >> 2];
       $56 = +HEAPF32[$tw2$0$i + 4 >> 2];
       $sub33$i = $53 * $54 - $55 * $56;
       $add44$i = $54 * $55 + $53 * $56;
       $add54$i80 = $sub$i76 + $sub33$i;
       $add61$i = $add$i78 + $add44$i;
       HEAPF32[$r$i75 >> 2] = +HEAPF32[$Fout$addr$0$i >> 2] - $add54$i80 * .5;
       $i93$i = $Fout$addr$0$i + 4 | 0;
       HEAPF32[$i9$i >> 2] = +HEAPF32[$i93$i >> 2] - $add61$i * .5;
       $mul104$i = $epi3$sroa$3$0$copyload$i * ($sub$i76 - $sub33$i);
       $mul108$i = $epi3$sroa$3$0$copyload$i * ($add$i78 - $add44$i);
       HEAPF32[$Fout$addr$0$i >> 2] = $add54$i80 + +HEAPF32[$Fout$addr$0$i >> 2];
       HEAPF32[$i93$i >> 2] = $add61$i + +HEAPF32[$i93$i >> 2];
       HEAPF32[$r26$i >> 2] = $mul108$i + +HEAPF32[$r$i75 >> 2];
       HEAPF32[$i30$i >> 2] = +HEAPF32[$i9$i >> 2] - $mul104$i;
       HEAPF32[$r$i75 >> 2] = +HEAPF32[$r$i75 >> 2] - $mul108$i;
       HEAPF32[$i9$i >> 2] = $mul104$i + +HEAPF32[$i9$i >> 2];
       $k$0$i = $k$0$i + -1 | 0;
       if (!$k$0$i) break; else {
        $Fout$addr$0$i = $Fout$addr$0$i + 8 | 0;
        $tw1$0$i = $tw1$0$i + ($shl38 << 3) | 0;
        $tw2$0$i = $tw2$0$i + ($mul84$i << 3) | 0;
       }
      }
      $i$02$i = $i$02$i + 1 | 0;
     } while (($i$02$i | 0) != ($48 | 0));
    }
    break;
   }
  case 5:
   {
    $65 = HEAP32[$fstride + ($i$091 << 2) >> 2] | 0;
    $shl42 = $65 << $spec$select;
    $st$idx45$val = HEAP32[$st$idx >> 2] | 0;
    $mul$i59 = Math_imul($shl42, $m$090) | 0;
    $ya$sroa$0$0$copyload$i = +HEAPF32[$st$idx45$val + ($mul$i59 << 3) >> 2];
    $ya$sroa$7$0$copyload$i = +HEAPF32[$st$idx45$val + ($mul$i59 << 3) + 4 >> 2];
    $mul3$i = Math_imul($shl42 << 1, $m$090) | 0;
    $yb$sroa$0$0$copyload$i = +HEAPF32[$st$idx45$val + ($mul3$i << 3) >> 2];
    $yb$sroa$7$0$copyload$i = +HEAPF32[$st$idx45$val + ($mul3$i << 3) + 4 >> 2];
    if (($65 | 0) > 0) {
     $mul8$i = $m$090 << 1;
     $mul10$i = $m$090 * 3 | 0;
     $mul12$i = $m$090 << 2;
     $cmp151$i = ($m$090 | 0) > 0;
     $i$09$i = 0;
     do {
      $add$ptr$i61 = $fout + ((Math_imul($i$09$i, $m2$0) | 0) << 3) | 0;
      if ($cmp151$i) {
       $Fout0$07$i = $add$ptr$i61;
       $Fout1$06$i = $add$ptr$i61 + ($m$090 << 3) | 0;
       $Fout2$05$i = $add$ptr$i61 + ($mul8$i << 3) | 0;
       $Fout3$04$i = $add$ptr$i61 + ($mul10$i << 3) | 0;
       $Fout4$03$i = $add$ptr$i61 + ($mul12$i << 3) | 0;
       $u$02$i = 0;
       while (1) {
        $scratch$sroa$0$0$copyload$i = +HEAPF32[$Fout0$07$i >> 2];
        $scratch$sroa$5$0$$sroa_idx39$i = $Fout0$07$i + 4 | 0;
        $scratch$sroa$5$0$copyload$i = +HEAPF32[$scratch$sroa$5$0$$sroa_idx39$i >> 2];
        $66 = +HEAPF32[$Fout1$06$i >> 2];
        $mul18$i = Math_imul($u$02$i, $shl42) | 0;
        $67 = +HEAPF32[$st$idx45$val + ($mul18$i << 3) >> 2];
        $i22$i = $Fout1$06$i + 4 | 0;
        $68 = +HEAPF32[$i22$i >> 2];
        $69 = +HEAPF32[$st$idx45$val + ($mul18$i << 3) + 4 >> 2];
        $sub$i65 = $66 * $67 - $68 * $69;
        $add$i67 = $67 * $68 + $66 * $69;
        $70 = +HEAPF32[$Fout2$05$i >> 2];
        $mul44$i = Math_imul($u$02$i << 1, $shl42) | 0;
        $71 = +HEAPF32[$st$idx45$val + ($mul44$i << 3) >> 2];
        $i48$i = $Fout2$05$i + 4 | 0;
        $72 = +HEAPF32[$i48$i >> 2];
        $73 = +HEAPF32[$st$idx45$val + ($mul44$i << 3) + 4 >> 2];
        $sub54$i = $70 * $71 - $72 * $73;
        $add69$i = $71 * $72 + $70 * $73;
        $74 = +HEAPF32[$Fout3$04$i >> 2];
        $mul77$i = $mul18$i * 3 | 0;
        $75 = +HEAPF32[$st$idx45$val + ($mul77$i << 3) >> 2];
        $i81$i = $Fout3$04$i + 4 | 0;
        $76 = +HEAPF32[$i81$i >> 2];
        $77 = +HEAPF32[$st$idx45$val + ($mul77$i << 3) + 4 >> 2];
        $sub87$i = $74 * $75 - $76 * $77;
        $add102$i = $75 * $76 + $74 * $77;
        $78 = +HEAPF32[$Fout4$03$i >> 2];
        $mul110$i = Math_imul($u$02$i << 2, $shl42) | 0;
        $79 = +HEAPF32[$st$idx45$val + ($mul110$i << 3) >> 2];
        $i114$i = $Fout4$03$i + 4 | 0;
        $80 = +HEAPF32[$i114$i >> 2];
        $81 = +HEAPF32[$st$idx45$val + ($mul110$i << 3) + 4 >> 2];
        $sub120$i = $78 * $79 - $80 * $81;
        $add135$i = $79 * $80 + $78 * $81;
        $add145$i = $sub$i65 + $sub120$i;
        $add152$i = $add$i67 + $add135$i;
        $sub162$i = $sub$i65 - $sub120$i;
        $sub169$i = $add$i67 - $add135$i;
        $add179$i = $sub54$i + $sub87$i;
        $add186$i = $add69$i + $add102$i;
        $sub196$i = $sub54$i - $sub87$i;
        $sub203$i = $add69$i - $add102$i;
        HEAPF32[$Fout0$07$i >> 2] = $scratch$sroa$0$0$copyload$i + ($add179$i + $add145$i);
        HEAPF32[$scratch$sroa$5$0$$sroa_idx39$i >> 2] = $scratch$sroa$5$0$copyload$i + ($add186$i + $add152$i);
        $add235$i = $scratch$sroa$0$0$copyload$i + ($yb$sroa$0$0$copyload$i * $add179$i + $ya$sroa$0$0$copyload$i * $add145$i);
        $add249$i = $scratch$sroa$5$0$copyload$i + ($yb$sroa$0$0$copyload$i * $add186$i + $ya$sroa$0$0$copyload$i * $add152$i);
        $add260$i = $yb$sroa$7$0$copyload$i * $sub203$i + $ya$sroa$7$0$copyload$i * $sub169$i;
        $add271$i = $yb$sroa$7$0$copyload$i * $sub196$i + $ya$sroa$7$0$copyload$i * $sub162$i;
        HEAPF32[$Fout1$06$i >> 2] = $add235$i - $add260$i;
        HEAPF32[$i22$i >> 2] = $add271$i + $add249$i;
        HEAPF32[$Fout4$03$i >> 2] = $add260$i + $add235$i;
        HEAPF32[$i114$i >> 2] = $add249$i - $add271$i;
        $add316$i = $scratch$sroa$0$0$copyload$i + ($ya$sroa$0$0$copyload$i * $add179$i + $yb$sroa$0$0$copyload$i * $add145$i);
        $add330$i = $scratch$sroa$5$0$copyload$i + ($ya$sroa$0$0$copyload$i * $add186$i + $yb$sroa$0$0$copyload$i * $add152$i);
        $sub341$i = $ya$sroa$7$0$copyload$i * $sub203$i - $yb$sroa$7$0$copyload$i * $sub169$i;
        $sub352$i = $yb$sroa$7$0$copyload$i * $sub162$i - $ya$sroa$7$0$copyload$i * $sub196$i;
        HEAPF32[$Fout2$05$i >> 2] = $sub341$i + $add316$i;
        HEAPF32[$i48$i >> 2] = $sub352$i + $add330$i;
        HEAPF32[$Fout3$04$i >> 2] = $add316$i - $sub341$i;
        HEAPF32[$i81$i >> 2] = $add330$i - $sub352$i;
        $u$02$i = $u$02$i + 1 | 0;
        if (($u$02$i | 0) == ($m$090 | 0)) break; else {
         $Fout0$07$i = $Fout0$07$i + 8 | 0;
         $Fout1$06$i = $Fout1$06$i + 8 | 0;
         $Fout2$05$i = $Fout2$05$i + 8 | 0;
         $Fout3$04$i = $Fout3$04$i + 8 | 0;
         $Fout4$03$i = $Fout4$03$i + 8 | 0;
        }
       }
      }
      $i$09$i = $i$09$i + 1 | 0;
     } while (($i$09$i | 0) != ($65 | 0));
    }
    break;
   }
  default:
   {}
  } while (0);
  if (($i$091 | 0) > 0) {
   $i$091 = $i$091 + -1 | 0;
   $m$090 = $m2$0;
  } else {
   label = 34;
   break;
  }
 }
 if ((label | 0) == 8) _celt_fatal(49228, 49251, 76); else if ((label | 0) == 34) {
  STACKTOP = sp;
  return;
 }
}

function _silk_PLC_conceal($psDec, $psDecCtrl, $frame) {
 $psDec = $psDec | 0;
 $psDecCtrl = $psDecCtrl | 0;
 $frame = $frame | 0;
 var $$pre = 0, $$pre349 = 0, $$pre350367 = 0, $$pre351368 = 0, $$pre352369 = 0, $$pre353370 = 0, $$pre354371 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $64 = 0, $67 = 0, $78 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $A_Q12 = 0, $LPC_order = 0, $LPC_pred_Q10$0$lcssa = 0, $LPC_pred_Q10$0319 = 0, $add = 0, $add115 = 0, $add26$i = 0, $add269 = 0, $add301 = 0, $add470 = 0, $add494 = 0, $add513 = 0, $add623 = 0, $add9$i = 0, $and125 = 0, $arraydecay26 = 0, $arraydecay288 = 0, $arrayidx$i = 0, $arrayidx11$i = 0, $arrayidx163 = 0, $arrayidx176 = 0, $arrayidx189 = 0, $arrayidx202 = 0, $arrayidx287 = 0, $arrayidx499 = 0, $arrayidx5 = 0, $arrayidx899 = 0, $arrayidx906$1 = 0, $arrayidx906$2 = 0, $arrayidx906$3 = 0, $call111303 = 0, $call74 = 0, $chirp_Q16$addr$0$lcssa$i = 0, $chirp_Q16$addr$015$i = 0, $cmp145324 = 0, $cmp250 = 0, $cmp29 = 0, $cmp35$i = 0, $cmp473318 = 0, $cond = 0, $cond$i300 = 0, $cond$i307 = 0, $cond$i310 = 0, $cond509 = 0, $cond597 = 0, $cond692 = 0, $conv = 0, $conv1$i = 0, $conv123 = 0, $conv151 = 0, $conv164 = 0, $conv177 = 0, $conv190 = 0, $conv203 = 0, $conv219 = 0, $conv241$1$pre$phiZZ2D = 0, $conv241$2$pre$phiZZ2D = 0, $conv241$3$pre$phiZZ2D = 0, $conv241$4$pre$phiZZ2D = 0, $conv241$pre$phiZ2D = 0, $conv253$pre$phiZ2D = 0, $conv255 = 0, $conv258 = 0, $conv306 = 0, $conv323 = 0, $conv340 = 0, $conv357 = 0, $conv374 = 0, $conv391 = 0, $conv4$i = 0, $conv40 = 0, $conv408 = 0, $conv425 = 0, $conv442 = 0, $conv459 = 0, $conv482 = 0, $conv605 = 0, $div$i = 0, $energy1 = 0, $energy2 = 0, $frame_length = 0, $fs_kHz = 0, $i$014$i = 0, $i$1342 = 0, $i$2328 = 0, $i$3322 = 0, $j$1320 = 0, $k$0337 = 0, $lag$0$lcssa = 0, $lag$0336 = 0, $ltp_mem_length = 0, $mul152 = 0, $mul165 = 0, $mul178 = 0, $mul191 = 0, $mul204 = 0, $mul307 = 0, $mul324 = 0, $mul341 = 0, $mul358 = 0, $mul375 = 0, $mul392 = 0, $mul409 = 0, $mul426 = 0, $mul443 = 0, $nb_subfr = 0, $pitchL_Q8 = 0, $pred_lag_ptr$0325 = 0, $prevGain_Q10 = 0, $randScale_Q14 = 0, $rand_Gain_Q15$1 = 0, $rand_ptr$0 = 0, $rand_scale_Q14$1 = 0, $rand_scale_Q14$2$lcssa = 0, $rand_scale_Q14$2334 = 0, $rand_seed$0$lcssa = 0, $rand_seed$0333 = 0, $rand_seed$1$lcssa = 0, $rand_seed$1326 = 0, $rand_seed89 = 0, $sLTP_buf_idx$0335 = 0, $sLTP_buf_idx$1$lcssa = 0, $sLTP_buf_idx$1327 = 0, $shift1 = 0, $shift2 = 0, $shl = 0, $shl$i = 0, $shl10$i = 0, $shl2$i = 0, $shl275 = 0, $shl512 = 0, $shr$i = 0, $shr121 = 0, $shr158 = 0, $shr171 = 0, $shr184 = 0, $shr197 = 0, $shr210 = 0, $shr300366 = 0, $shr315 = 0, $shr32$i = 0, $shr32$i$shr34$i = 0, $shr332 = 0, $shr34$i = 0, $shr34$i$shr32$i = 0, $shr349 = 0, $shr366 = 0, $shr383 = 0, $shr400 = 0, $shr417 = 0, $shr434 = 0, $shr451 = 0, $shr6 = 0, $shr621 = 0, $shr92 = 0, $spec$select315 = 0, $sub1$i1 = 0, $sub22 = 0, $sub27$i = 0, $sub302 = 0, $sub31$i = 0, $sub97 = 0, $sub98 = 0, $subfr_length = 0, $vla = 0, $vla2 = 0, dest = 0, sp = 0, src = 0, stop = 0, $80$looptemp = 0, $82$looptemp = 0, $84$looptemp = 0, $86$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $shift1 = sp + 52 | 0;
 $shift2 = sp + 48 | 0;
 $energy1 = sp + 44 | 0;
 $energy2 = sp + 40 | 0;
 $A_Q12 = sp;
 $prevGain_Q10 = sp + 32 | 0;
 $ltp_mem_length = $psDec + 2336 | 0;
 $frame_length = $psDec + 2328 | 0;
 $add = (HEAP32[$frame_length >> 2] | 0) + (HEAP32[$ltp_mem_length >> 2] | 0) | 0;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add << 2) | 0) + 15 & -16) | 0;
 $vla2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (HEAP32[$ltp_mem_length >> 2] << 1) | 0) + 15 & -16) | 0;
 HEAP32[$prevGain_Q10 >> 2] = HEAP32[$psDec + 4244 >> 2] >> 6;
 $arrayidx5 = $psDec + 4248 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $shr6 = $5 >> 6;
 HEAP32[$prevGain_Q10 + 4 >> 2] = $shr6;
 $$pre = $psDec + 4186 | 0;
 if (HEAP32[$psDec + 2376 >> 2] | 0) {
  dest = $$pre;
  stop = dest + 32 | 0;
  do {
   HEAP16[dest >> 1] = 0;
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 $subfr_length = $psDec + 2332 | 0;
 $nb_subfr = $psDec + 2324 | 0;
 _silk_PLC_energy($energy1, $shift1, $energy2, $shift2, $psDec + 4 | 0, $prevGain_Q10, HEAP32[$subfr_length >> 2] | 0, HEAP32[$nb_subfr >> 2] | 0);
 $sub22 = (Math_imul(HEAP32[$psDec + 4260 >> 2] | 0, (HEAP32[$psDec + 4256 >> 2] | 0) + (((HEAP32[$energy1 >> 2] >> HEAP32[$shift2 >> 2] | 0) < (HEAP32[$energy2 >> 2] >> HEAP32[$shift1 >> 2] | 0)) << 31 >> 31) | 0) | 0) + -128 | 0;
 $rand_ptr$0 = $psDec + 4 + ((($sub22 | 0) > 0 ? $sub22 : 0) << 2) | 0;
 $arraydecay26 = $psDec + 4176 | 0;
 $randScale_Q14 = $psDec + 4228 | 0;
 $16 = HEAP16[$randScale_Q14 >> 1] | 0;
 $17 = HEAP32[$psDec + 4160 >> 2] | 0;
 $cond$i310 = ($17 | 0) < 1 ? $17 : 1;
 $conv = HEAP16[47572 + ($cond$i310 << 1) >> 1] | 0;
 $cmp29 = (HEAP32[$psDec + 4164 >> 2] | 0) == 2;
 $conv40 = HEAP16[($cmp29 ? 47576 : 47580) + ($cond$i310 << 1) >> 1] | 0;
 $LPC_order = $psDec + 2340 | 0;
 $22 = HEAP32[$LPC_order >> 2] | 0;
 $sub1$i1 = $22 + -1 | 0;
 if (($22 | 0) > 1) {
  $chirp_Q16$addr$015$i = 64881;
  $i$014$i = 0;
  while (1) {
   $arrayidx$i = $psDec + 4186 + ($i$014$i << 1) | 0;
   HEAP16[$arrayidx$i >> 1] = (((Math_imul($chirp_Q16$addr$015$i, HEAP16[$arrayidx$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
   $add9$i = (((Math_imul($chirp_Q16$addr$015$i, -655) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$015$i | 0;
   $i$014$i = $i$014$i + 1 | 0;
   if (($i$014$i | 0) == ($sub1$i1 | 0)) {
    $chirp_Q16$addr$0$lcssa$i = $add9$i;
    break;
   } else $chirp_Q16$addr$015$i = $add9$i;
  }
 } else $chirp_Q16$addr$0$lcssa$i = 64881;
 $arrayidx11$i = $psDec + 4186 + ($sub1$i1 << 1) | 0;
 HEAP16[$arrayidx11$i >> 1] = (((Math_imul($chirp_Q16$addr$0$lcssa$i, HEAP16[$arrayidx11$i >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
 _memcpy($A_Q12 | 0, $$pre | 0, $22 << 1 | 0) | 0;
 do if (!$17) if ($cmp29) {
  $conv1$i = (16384 - (HEAP16[$arraydecay26 >> 1] | 0) & 65535) - (HEAPU16[$psDec + 4178 >> 1] | 0) - (HEAPU16[$psDec + 4180 >> 1] | 0) - (HEAPU16[$psDec + 4182 >> 1] | 0) - (HEAPU16[$psDec + 4184 >> 1] | 0) << 16 >> 16;
  $rand_Gain_Q15$1 = $conv40;
  $rand_scale_Q14$1 = (Math_imul(($conv1$i | 0) > 3277 ? $conv1$i : 3277, HEAP16[$psDec + 4240 >> 1] | 0) | 0) >>> 14 & 65535;
  break;
 } else {
  $call74 = _silk_LPC_inverse_pred_gain_c($$pre, $22) | 0;
  $cond$i307 = ($call74 | 0) < 134217728 ? $call74 : 134217728;
  $shl = (($cond$i307 | 0) > 4194304 ? $cond$i307 : 4194304) << 3;
  $rand_Gain_Q15$1 = ((Math_imul($shl & 65528, $conv40) | 0) >> 16) + (Math_imul($shl >> 16, $conv40) | 0) >> 14;
  $rand_scale_Q14$1 = 16384;
  break;
 } else {
  $rand_Gain_Q15$1 = $conv40;
  $rand_scale_Q14$1 = $16;
 } while (0);
 $rand_seed89 = $psDec + 4224 | 0;
 $40 = HEAP32[$rand_seed89 >> 2] | 0;
 $pitchL_Q8 = $psDec + 4172 | 0;
 $shr92 = (HEAP32[$pitchL_Q8 >> 2] >> 7) + 1 >> 1;
 $42 = HEAP32[$ltp_mem_length >> 2] | 0;
 $sub97 = $42 - $shr92 - $22 | 0;
 $sub98 = $sub97 + -2 | 0;
 if (($sub97 | 0) <= 2) _celt_fatal(51775, 51801, 294);
 _silk_LPC_analysis_filter($vla2 + ($sub98 << 1) | 0, $psDec + 1348 + ($sub98 << 1) | 0, $A_Q12, $42 - $sub98 | 0, $22);
 $43 = HEAP32[$arrayidx5 >> 2] | 0;
 $44 = Math_clz32((($43 | 0) > 0 ? $43 : 0 - $43 | 0) | 0) | 0;
 $shl$i = $43 << $44 + -1;
 $shr$i = $shl$i >> 16;
 $div$i = 536870911 / ($shr$i | 0) | 0;
 $shl2$i = $div$i << 16;
 $conv4$i = $shl2$i >> 16;
 $shl10$i = 0 - (((Math_imul($shl$i & 65535, $conv4$i) | 0) >> 16) + (Math_imul($shr$i, $conv4$i) | 0) << 3) | 0;
 $add26$i = (Math_imul(($div$i >> 15) + 1 >> 1, $shl10$i) | 0) + $shl2$i + (Math_imul($shl10$i >> 16, $conv4$i) | 0) + ((Math_imul($shl10$i & 65528, $conv4$i) | 0) >> 16) | 0;
 $sub27$i = 62 - $44 | 0;
 if (($sub27$i | 0) < 47) {
  $sub31$i = 46 - $sub27$i | 0;
  $shr32$i = -2147483648 >> $sub31$i;
  $shr34$i = 2147483647 >>> $sub31$i;
  $cmp35$i = ($shr32$i | 0) > ($shr34$i | 0);
  $shr32$i$shr34$i = $cmp35$i ? $shr32$i : $shr34$i;
  $shr34$i$shr32$i = $cmp35$i ? $shr34$i : $shr32$i;
  $call111303 = (($add26$i | 0) > ($shr32$i$shr34$i | 0) ? $shr32$i$shr34$i : ($add26$i | 0) < ($shr34$i$shr32$i | 0) ? $shr34$i$shr32$i : $add26$i) << $sub31$i;
 } else $call111303 = ($sub27$i | 0) < 78 ? $add26$i >> $sub27$i + -46 : 0;
 $cond = ($call111303 | 0) < 1073741823 ? $call111303 : 1073741823;
 $45 = HEAP32[$LPC_order >> 2] | 0;
 $add115 = $45 + $sub98 | 0;
 $46 = HEAP32[$ltp_mem_length >> 2] | 0;
 if (($add115 | 0) < ($46 | 0)) {
  $shr121 = $cond >> 16;
  $and125 = $cond & 65535;
  $i$1342 = $add115;
  do {
   $conv123 = HEAP16[$vla2 + ($i$1342 << 1) >> 1] | 0;
   HEAP32[$vla + ($i$1342 << 2) >> 2] = ((Math_imul($and125, $conv123) | 0) >> 16) + (Math_imul($shr121, $conv123) | 0);
   $i$1342 = $i$1342 + 1 | 0;
  } while (($i$1342 | 0) != ($46 | 0));
 }
 $48 = HEAP32[$nb_subfr >> 2] | 0;
 if (($48 | 0) > 0) {
  $arrayidx163 = $psDec + 4178 | 0;
  $arrayidx176 = $psDec + 4180 | 0;
  $arrayidx189 = $psDec + 4182 | 0;
  $arrayidx202 = $psDec + 4184 | 0;
  $cmp250 = (HEAP8[$psDec + 2765 >> 0] | 0) == 0;
  $conv255 = $rand_Gain_Q15$1 << 16 >> 16;
  $fs_kHz = $psDec + 2316 | 0;
  $$pre349 = HEAP32[$subfr_length >> 2] | 0;
  $cmp145324 = ($$pre349 | 0) > 0;
  $$pre350367 = HEAP16[$arraydecay26 >> 1] | 0;
  $$pre351368 = HEAP16[$arrayidx163 >> 1] | 0;
  $$pre352369 = HEAP16[$arrayidx176 >> 1] | 0;
  $$pre353370 = HEAP16[$arrayidx189 >> 1] | 0;
  $$pre354371 = HEAP16[$arrayidx202 >> 1] | 0;
  $k$0337 = 0;
  $lag$0336 = $shr92;
  $rand_scale_Q14$2334 = $rand_scale_Q14$1;
  $rand_seed$0333 = $40;
  $sLTP_buf_idx$0335 = $42;
  while (1) {
   if ($cmp145324) {
    $conv151 = $$pre350367 << 16 >> 16;
    $conv164 = $$pre351368 << 16 >> 16;
    $conv177 = $$pre352369 << 16 >> 16;
    $conv190 = $$pre353370 << 16 >> 16;
    $conv203 = $$pre354371 << 16 >> 16;
    $conv219 = $rand_scale_Q14$2334 << 16 >> 16;
    $i$2328 = 0;
    $pred_lag_ptr$0325 = $vla + ($sLTP_buf_idx$0335 + 2 - $lag$0336 << 2) | 0;
    $rand_seed$1326 = $rand_seed$0333;
    $sLTP_buf_idx$1327 = $sLTP_buf_idx$0335;
    while (1) {
     $50 = HEAP32[$pred_lag_ptr$0325 >> 2] | 0;
     $mul152 = Math_imul($50 >> 16, $conv151) | 0;
     $shr158 = (Math_imul($50 & 65535, $conv151) | 0) >> 16;
     $51 = HEAP32[$pred_lag_ptr$0325 + -4 >> 2] | 0;
     $mul165 = Math_imul($51 >> 16, $conv164) | 0;
     $shr171 = (Math_imul($51 & 65535, $conv164) | 0) >> 16;
     $52 = HEAP32[$pred_lag_ptr$0325 + -8 >> 2] | 0;
     $mul178 = Math_imul($52 >> 16, $conv177) | 0;
     $shr184 = (Math_imul($52 & 65535, $conv177) | 0) >> 16;
     $53 = HEAP32[$pred_lag_ptr$0325 + -12 >> 2] | 0;
     $mul191 = Math_imul($53 >> 16, $conv190) | 0;
     $shr197 = (Math_imul($53 & 65535, $conv190) | 0) >> 16;
     $54 = HEAP32[$pred_lag_ptr$0325 + -16 >> 2] | 0;
     $mul204 = Math_imul($54 >> 16, $conv203) | 0;
     $shr210 = (Math_imul($54 & 65535, $conv203) | 0) >> 16;
     $rand_seed$1326 = (Math_imul($rand_seed$1326, 196314165) | 0) + 907633515 | 0;
     $56 = HEAP32[$rand_ptr$0 + ($rand_seed$1326 >>> 25 << 2) >> 2] | 0;
     HEAP32[$vla + ($sLTP_buf_idx$1327 << 2) >> 2] = $mul152 + 2 + $shr158 + $mul165 + $shr171 + $mul178 + $shr184 + $mul191 + $shr197 + $mul204 + $shr210 + (Math_imul($56 >> 16, $conv219) | 0) + ((Math_imul($56 & 65535, $conv219) | 0) >> 16) << 2;
     $i$2328 = $i$2328 + 1 | 0;
     if (($i$2328 | 0) == ($$pre349 | 0)) break; else {
      $pred_lag_ptr$0325 = $pred_lag_ptr$0325 + 4 | 0;
      $sLTP_buf_idx$1327 = $sLTP_buf_idx$1327 + 1 | 0;
     }
    }
    $conv241$1$pre$phiZZ2D = $conv164;
    $conv241$2$pre$phiZZ2D = $conv177;
    $conv241$3$pre$phiZZ2D = $conv190;
    $conv241$4$pre$phiZZ2D = $conv203;
    $conv241$pre$phiZ2D = $conv151;
    $conv253$pre$phiZ2D = $conv219;
    $rand_seed$1$lcssa = $rand_seed$1326;
    $sLTP_buf_idx$1$lcssa = $$pre349 + $sLTP_buf_idx$0335 | 0;
   } else {
    $conv241$1$pre$phiZZ2D = $$pre351368 << 16 >> 16;
    $conv241$2$pre$phiZZ2D = $$pre352369 << 16 >> 16;
    $conv241$3$pre$phiZZ2D = $$pre353370 << 16 >> 16;
    $conv241$4$pre$phiZZ2D = $$pre354371 << 16 >> 16;
    $conv241$pre$phiZ2D = $$pre350367 << 16 >> 16;
    $conv253$pre$phiZ2D = $rand_scale_Q14$2334 << 16 >> 16;
    $rand_seed$1$lcssa = $rand_seed$0333;
    $sLTP_buf_idx$1$lcssa = $sLTP_buf_idx$0335;
   }
   $$pre350367 = (Math_imul($conv241$pre$phiZ2D, $conv) | 0) >>> 15 & 65535;
   $$pre351368 = (Math_imul($conv241$1$pre$phiZZ2D, $conv) | 0) >>> 15 & 65535;
   $$pre352369 = (Math_imul($conv241$2$pre$phiZZ2D, $conv) | 0) >>> 15 & 65535;
   $$pre353370 = (Math_imul($conv241$3$pre$phiZZ2D, $conv) | 0) >>> 15 & 65535;
   $$pre354371 = (Math_imul($conv241$4$pre$phiZZ2D, $conv) | 0) >>> 15 & 65535;
   $conv258 = (Math_imul($conv255, $conv253$pre$phiZ2D) | 0) >>> 15 & 65535;
   $rand_scale_Q14$2334 = $cmp250 ? $rand_scale_Q14$2334 : $conv258;
   $64 = HEAP32[$pitchL_Q8 >> 2] | 0;
   $add269 = (($64 >> 16) * 655 | 0) + $64 + ((($64 & 65535) * 655 | 0) >>> 16) | 0;
   $shl275 = (HEAP32[$fs_kHz >> 2] << 16 >> 16) * 4608 | 0;
   $cond$i300 = ($add269 | 0) < ($shl275 | 0) ? $add269 : $shl275;
   HEAP32[$pitchL_Q8 >> 2] = $cond$i300;
   $lag$0336 = ($cond$i300 >> 7) + 1 >> 1;
   $k$0337 = $k$0337 + 1 | 0;
   if (($k$0337 | 0) == ($48 | 0)) break; else {
    $rand_seed$0333 = $rand_seed$1$lcssa;
    $sLTP_buf_idx$0335 = $sLTP_buf_idx$1$lcssa;
   }
  }
  HEAP16[$arraydecay26 >> 1] = $$pre350367;
  HEAP16[$arrayidx163 >> 1] = $$pre351368;
  HEAP16[$arrayidx176 >> 1] = $$pre352369;
  HEAP16[$arrayidx189 >> 1] = $$pre353370;
  HEAP16[$arrayidx202 >> 1] = $$pre354371;
  $lag$0$lcssa = $lag$0336;
  $rand_scale_Q14$2$lcssa = $rand_scale_Q14$2334;
  $rand_seed$0$lcssa = $rand_seed$1$lcssa;
 } else {
  $lag$0$lcssa = $shr92;
  $rand_scale_Q14$2$lcssa = $rand_scale_Q14$1;
  $rand_seed$0$lcssa = $40;
 }
 $arrayidx287 = $vla + ($46 + -16 << 2) | 0;
 $arraydecay288 = $psDec + 1284 | 0;
 dest = $arrayidx287;
 src = $arraydecay288;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($45 | 0) <= 9) _celt_fatal(51812, 51801, 350);
 $67 = HEAP32[$frame_length >> 2] | 0;
 if (($67 | 0) <= 0) {
  $arrayidx899 = $arrayidx287 + ($67 << 2) | 0;
  dest = $arraydecay288;
  src = $arrayidx899;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$rand_seed89 >> 2] = $rand_seed$0$lcssa;
  HEAP16[$randScale_Q14 >> 1] = $rand_scale_Q14$2$lcssa;
  HEAP32[$psDecCtrl >> 2] = $lag$0$lcssa;
  $arrayidx906$1 = $psDecCtrl + 4 | 0;
  HEAP32[$arrayidx906$1 >> 2] = $lag$0$lcssa;
  $arrayidx906$2 = $psDecCtrl + 8 | 0;
  HEAP32[$arrayidx906$2 >> 2] = $lag$0$lcssa;
  $arrayidx906$3 = $psDecCtrl + 12 | 0;
  HEAP32[$arrayidx906$3 >> 2] = $lag$0$lcssa;
  _llvm_stackrestore($2 | 0);
  STACKTOP = sp;
  return;
 }
 $shr300366 = $45 >>> 1;
 $conv306 = HEAP16[$A_Q12 >> 1] | 0;
 $conv323 = HEAP16[$A_Q12 + 2 >> 1] | 0;
 $conv340 = HEAP16[$A_Q12 + 4 >> 1] | 0;
 $conv357 = HEAP16[$A_Q12 + 6 >> 1] | 0;
 $conv374 = HEAP16[$A_Q12 + 8 >> 1] | 0;
 $conv391 = HEAP16[$A_Q12 + 10 >> 1] | 0;
 $conv408 = HEAP16[$A_Q12 + 12 >> 1] | 0;
 $conv425 = HEAP16[$A_Q12 + 14 >> 1] | 0;
 $conv442 = HEAP16[$A_Q12 + 16 >> 1] | 0;
 $conv459 = HEAP16[$A_Q12 + 18 >> 1] | 0;
 $cmp473318 = ($45 | 0) > 10;
 $conv605 = $shr6 << 16 >> 16;
 $shr621 = ($5 >> 21) + 1 >> 1;
 $78 = HEAP32[$arrayidx287 + 60 >> 2] | 0;
 $80 = HEAP32[$arrayidx287 + 52 >> 2] | 0;
 $82 = HEAP32[$arrayidx287 + 44 >> 2] | 0;
 $84 = HEAP32[$arrayidx287 + 36 >> 2] | 0;
 $86 = HEAP32[$arrayidx287 + 28 >> 2] | 0;
 $i$3322 = 0;
 while (1) {
  $add301 = $i$3322 + 16 | 0;
  $sub302 = $i$3322 + 15 | 0;
  $mul307 = Math_imul($78 >> 16, $conv306) | 0;
  $shr315 = (Math_imul($78 & 65535, $conv306) | 0) >> 16;
  $80$looptemp = $80;
  $80 = HEAP32[$arrayidx287 + ($i$3322 + 14 << 2) >> 2] | 0;
  $mul324 = Math_imul($80 >> 16, $conv323) | 0;
  $shr332 = (Math_imul($80 & 65535, $conv323) | 0) >> 16;
  $mul341 = Math_imul($80$looptemp >> 16, $conv340) | 0;
  $shr349 = (Math_imul($80$looptemp & 65535, $conv340) | 0) >> 16;
  $82$looptemp = $82;
  $82 = HEAP32[$arrayidx287 + ($i$3322 + 12 << 2) >> 2] | 0;
  $mul358 = Math_imul($82 >> 16, $conv357) | 0;
  $shr366 = (Math_imul($82 & 65535, $conv357) | 0) >> 16;
  $mul375 = Math_imul($82$looptemp >> 16, $conv374) | 0;
  $shr383 = (Math_imul($82$looptemp & 65535, $conv374) | 0) >> 16;
  $84$looptemp = $84;
  $84 = HEAP32[$arrayidx287 + ($i$3322 + 10 << 2) >> 2] | 0;
  $mul392 = Math_imul($84 >> 16, $conv391) | 0;
  $shr400 = (Math_imul($84 & 65535, $conv391) | 0) >> 16;
  $mul409 = Math_imul($84$looptemp >> 16, $conv408) | 0;
  $shr417 = (Math_imul($84$looptemp & 65535, $conv408) | 0) >> 16;
  $86$looptemp = $86;
  $86 = HEAP32[$arrayidx287 + ($i$3322 + 8 << 2) >> 2] | 0;
  $mul426 = Math_imul($86 >> 16, $conv425) | 0;
  $shr434 = (Math_imul($86 & 65535, $conv425) | 0) >> 16;
  $mul443 = Math_imul($86$looptemp >> 16, $conv442) | 0;
  $shr451 = (Math_imul($86$looptemp & 65535, $conv442) | 0) >> 16;
  $87 = HEAP32[$arrayidx287 + ($i$3322 + 6 << 2) >> 2] | 0;
  $add470 = $mul307 + $shr300366 + $shr315 + $mul324 + $shr332 + $mul341 + $shr349 + $mul358 + $shr366 + $mul375 + $shr383 + $mul392 + $shr400 + $mul409 + $shr417 + $mul426 + $shr434 + $mul443 + $shr451 + (Math_imul($87 >> 16, $conv459) | 0) + ((Math_imul($87 & 65535, $conv459) | 0) >> 16) | 0;
  if ($cmp473318) {
   $LPC_pred_Q10$0319 = $add470;
   $j$1320 = 10;
   while (1) {
    $88 = HEAP32[$arrayidx287 + ($sub302 - $j$1320 << 2) >> 2] | 0;
    $conv482 = HEAP16[$A_Q12 + ($j$1320 << 1) >> 1] | 0;
    $add494 = (Math_imul($88 >> 16, $conv482) | 0) + $LPC_pred_Q10$0319 + ((Math_imul($88 & 65535, $conv482) | 0) >> 16) | 0;
    $j$1320 = $j$1320 + 1 | 0;
    if (($j$1320 | 0) == ($45 | 0)) {
     $LPC_pred_Q10$0$lcssa = $add494;
     break;
    } else $LPC_pred_Q10$0319 = $add494;
   }
  } else $LPC_pred_Q10$0$lcssa = $add470;
  $arrayidx499 = $arrayidx287 + ($add301 << 2) | 0;
  $90 = HEAP32[$arrayidx499 >> 2] | 0;
  $cond509 = ($LPC_pred_Q10$0$lcssa | 0) > -134217728 ? $LPC_pred_Q10$0$lcssa : -134217728;
  $shl512 = (($cond509 | 0) < 134217727 ? $cond509 : 134217727) << 4;
  $add513 = $90 + $shl512 | 0;
  if (($add513 | 0) > -1) $cond597 = ($90 & $shl512 | 0) < 0 ? -2147483648 : $add513; else $cond597 = ($90 | $shl512 | 0) > -1 ? 2147483647 : $add513;
  HEAP32[$arrayidx499 >> 2] = $cond597;
  $add623 = (Math_imul($cond597 >> 16, $conv605) | 0) + (Math_imul($cond597, $shr621) | 0) + ((Math_imul($cond597 & 65535, $conv605) | 0) >> 16) | 0;
  $cond692 = ($add623 | 0) > 8388479 ? 32767 : ($add623 | 0) < -8388736 ? -32768 : ($add623 >> 7) + 1 >> 1;
  $spec$select315 = ($cond692 | 0) > -32768 ? $cond692 : -32768;
  HEAP16[$frame + ($i$3322 << 1) >> 1] = ($spec$select315 | 0) < 32767 ? $spec$select315 : 32767;
  $i$3322 = $i$3322 + 1 | 0;
  if (($i$3322 | 0) == ($67 | 0)) break; else $78 = $cond597;
 }
 $arrayidx899 = $arrayidx287 + ($67 << 2) | 0;
 dest = $arraydecay288;
 src = $arrayidx899;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$rand_seed89 >> 2] = $rand_seed$0$lcssa;
 HEAP16[$randScale_Q14 >> 1] = $rand_scale_Q14$2$lcssa;
 HEAP32[$psDecCtrl >> 2] = $lag$0$lcssa;
 $arrayidx906$1 = $psDecCtrl + 4 | 0;
 HEAP32[$arrayidx906$1 >> 2] = $lag$0$lcssa;
 $arrayidx906$2 = $psDecCtrl + 8 | 0;
 HEAP32[$arrayidx906$2 >> 2] = $lag$0$lcssa;
 $arrayidx906$3 = $psDecCtrl + 12 | 0;
 HEAP32[$arrayidx906$3 >> 2] = $lag$0$lcssa;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return;
}
function _opus_encoder_ctl($st, $request, $varargs) {
 $st = $st | 0;
 $request = $request | 0;
 $varargs = $varargs | 0;
 var $100 = 0, $107 = 0, $108 = 0, $115 = 0, $116 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $139 = 0, $140 = 0, $147 = 0, $148 = 0, $15 = 0, $155 = 0, $156 = 0, $16 = 0, $163 = 0, $164 = 0, $171 = 0, $172 = 0, $179 = 0, $180 = 0, $187 = 0, $188 = 0, $195 = 0, $196 = 0, $203 = 0, $204 = 0, $210 = 0, $211 = 0, $218 = 0, $219 = 0, $228 = 0, $229 = 0, $23 = 0, $236 = 0, $237 = 0, $24 = 0, $244 = 0, $245 = 0, $252 = 0, $253 = 0, $260 = 0, $261 = 0, $267 = 0, $268 = 0, $275 = 0, $276 = 0, $283 = 0, $284 = 0, $291 = 0, $292 = 0, $299 = 0, $300 = 0, $309 = 0, $31 = 0, $310 = 0, $316 = 0, $317 = 0, $32 = 0, $323 = 0, $324 = 0, $33 = 0, $330 = 0, $331 = 0, $335 = 0, $337 = 0, $339 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $52 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $83 = 0, $84 = 0, $91 = 0, $92 = 0, $99 = 0, $add$ptr = 0, $add$ptr536 = 0, $add$ptr603 = 0, $ap = 0, $application = 0, $div = 0, $dummy = 0, $frame_size$addr$0$i = 0, $maxInternalSampleRate139 = 0, $maxInternalSampleRate98 = 0, $mul = 0, $n$0332 = 0, $nChannelsInternal = 0, $ret$2 = 0, $retval$0 = 0, $retval$0$i = 0, $value22$0 = 0, $vararg_buffer = 0, $vararg_buffer109 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer126 = 0, $vararg_buffer132 = 0, $vararg_buffer141 = 0, $vararg_buffer49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $vararg_buffer141 = sp + 72 | 0;
 $vararg_buffer132 = sp + 64 | 0;
 $vararg_buffer126 = sp + 56 | 0;
 $vararg_buffer118 = sp + 48 | 0;
 $vararg_buffer115 = sp + 40 | 0;
 $vararg_buffer109 = sp + 32 | 0;
 $vararg_buffer49 = sp + 24 | 0;
 $vararg_buffer = sp + 16 | 0;
 $ap = sp;
 $dummy = sp + 76 | 0;
 HEAP32[$ap >> 2] = $varargs;
 $add$ptr = $st + (HEAP32[$st >> 2] | 0) | 0;
 L1 : do switch ($request | 0) {
 case 4e3:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   switch ($7 | 0) {
   case 2048:
   case 2049:
   case 2051:
    break;
   default:
    {
     $ret$2 = -1;
     label = 115;
     break L1;
    }
   }
   $application = $st + 108 | 0;
   if (!(HEAP32[$st + 14252 >> 2] | 0)) if ((HEAP32[$application >> 2] | 0) != ($7 | 0)) {
    $ret$2 = -1;
    label = 115;
    break L1;
   }
   HEAP32[$application >> 2] = $7;
   HEAP32[$st + 192 >> 2] = $7;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 4001:
  {
   $15 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $16 = HEAP32[$15 >> 2] | 0;
   HEAP32[$ap >> 2] = $15 + 4;
   if (!$16) label = 116; else {
    HEAP32[$16 >> 2] = HEAP32[$st + 108 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4002:
  {
   $23 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$ap >> 2] = $23 + 4;
   switch ($24 | 0) {
   case -1e3:
   case -1:
    {
     $value22$0 = $24;
     break;
    }
   default:
    {
     if (($24 | 0) < 1) {
      label = 116;
      break L1;
     }
     if (($24 | 0) < 501) $value22$0 = 500; else {
      $mul = (HEAP32[$st + 112 >> 2] | 0) * 3e5 | 0;
      $value22$0 = ($24 | 0) > ($mul | 0) ? $mul : $24;
     }
    }
   }
   HEAP32[$st + 164 >> 2] = $value22$0;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 4003:
  {
   $31 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $32 = HEAP32[$31 >> 2] | 0;
   HEAP32[$ap >> 2] = $31 + 4;
   if (!$32) label = 116; else {
    $33 = HEAP32[$st + 14236 >> 2] | 0;
    if (!$33) $frame_size$addr$0$i = (HEAP32[$st + 144 >> 2] | 0) / 400 | 0; else $frame_size$addr$0$i = $33;
    $35 = HEAP32[$st + 164 >> 2] | 0;
    switch ($35 | 0) {
    case -1e3:
     {
      $36 = HEAP32[$st + 144 >> 2] | 0;
      $retval$0$i = (Math_imul(HEAP32[$st + 112 >> 2] | 0, $36) | 0) + (($36 * 60 | 0) / ($frame_size$addr$0$i | 0) | 0) | 0;
      break;
     }
    case -1:
     {
      $retval$0$i = ((HEAP32[$st + 144 >> 2] | 0) * 10208 | 0) / ($frame_size$addr$0$i | 0) | 0;
      break;
     }
    default:
     $retval$0$i = $35;
    }
    HEAP32[$32 >> 2] = $retval$0$i;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4022:
  {
   $44 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $45 = HEAP32[$44 >> 2] | 0;
   HEAP32[$ap >> 2] = $44 + 4;
   if (($45 | 0) < 1) {
    if (($45 | 0) != -1e3) {
     label = 116;
     break L1;
    }
   } else if (($45 | 0) > (HEAP32[$st + 112 >> 2] | 0)) {
    label = 116;
    break L1;
   }
   HEAP32[$st + 120 >> 2] = $45;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 4023:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   if (!$53) label = 116; else {
    HEAP32[$53 >> 2] = HEAP32[$st + 120 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4004:
  {
   $60 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$ap >> 2] = $60 + 4;
   if (($61 + -1101 | 0) >>> 0 > 4) label = 116; else {
    HEAP32[$st + 132 >> 2] = $61;
    if (($61 | 0) == 1101) {
     HEAP32[$st + 20 >> 2] = 8e3;
     $ret$2 = 0;
     label = 115;
     break L1;
    }
    $maxInternalSampleRate98 = $st + 20 | 0;
    if (($61 | 0) == 1102) {
     HEAP32[$maxInternalSampleRate98 >> 2] = 12e3;
     $ret$2 = 0;
     label = 115;
     break L1;
    } else {
     HEAP32[$maxInternalSampleRate98 >> 2] = 16e3;
     $ret$2 = 0;
     label = 115;
     break L1;
    }
   }
   break;
  }
 case 4005:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   if (!$69) label = 116; else {
    HEAP32[$69 >> 2] = HEAP32[$st + 132 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4008:
  {
   $76 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $77 = HEAP32[$76 >> 2] | 0;
   HEAP32[$ap >> 2] = $76 + 4;
   switch ($77 | 0) {
   case 1101:
   case 1102:
   case 1103:
   case 1104:
   case 1105:
   case -1e3:
    break;
   default:
    {
     label = 116;
     break L1;
    }
   }
   HEAP32[$st + 128 >> 2] = $77;
   if (($77 | 0) == 1101) {
    HEAP32[$st + 20 >> 2] = 8e3;
    $ret$2 = 0;
    label = 115;
    break L1;
   }
   $maxInternalSampleRate139 = $st + 20 | 0;
   if (($77 | 0) == 1102) {
    HEAP32[$maxInternalSampleRate139 >> 2] = 12e3;
    $ret$2 = 0;
    label = 115;
    break L1;
   } else {
    HEAP32[$maxInternalSampleRate139 >> 2] = 16e3;
    $ret$2 = 0;
    label = 115;
    break L1;
   }
   break;
  }
 case 4009:
  {
   $83 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $84 = HEAP32[$83 >> 2] | 0;
   HEAP32[$ap >> 2] = $83 + 4;
   if (!$84) label = 116; else {
    HEAP32[$84 >> 2] = HEAP32[$st + 14240 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4016:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   if ($92 >>> 0 > 1) label = 116; else {
    HEAP32[$st + 184 >> 2] = $92;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4017:
  {
   $99 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $100 = HEAP32[$99 >> 2] | 0;
   HEAP32[$ap >> 2] = $99 + 4;
   if (!$100) label = 116; else {
    HEAP32[$100 >> 2] = HEAP32[$st + 184 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4010:
  {
   $107 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $108 = HEAP32[$107 >> 2] | 0;
   HEAP32[$ap >> 2] = $107 + 4;
   if ($108 >>> 0 > 10) label = 116; else {
    HEAP32[$st + 44 >> 2] = $108;
    HEAP32[$vararg_buffer >> 2] = $108;
    _opus_custom_encoder_ctl($add$ptr, 4010, $vararg_buffer) | 0;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4011:
  {
   $115 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $116 = HEAP32[$115 >> 2] | 0;
   HEAP32[$ap >> 2] = $115 + 4;
   if (!$116) label = 116; else {
    HEAP32[$116 >> 2] = HEAP32[$st + 44 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4012:
  {
   $123 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $124 = HEAP32[$123 >> 2] | 0;
   HEAP32[$ap >> 2] = $123 + 4;
   if ($124 >>> 0 > 1) label = 116; else {
    HEAP32[$st + 48 >> 2] = $124;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4013:
  {
   $131 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $132 = HEAP32[$131 >> 2] | 0;
   HEAP32[$ap >> 2] = $131 + 4;
   if (!$132) label = 116; else {
    HEAP32[$132 >> 2] = HEAP32[$st + 48 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4014:
  {
   $139 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $140 = HEAP32[$139 >> 2] | 0;
   HEAP32[$ap >> 2] = $139 + 4;
   if ($140 >>> 0 > 100) label = 116; else {
    HEAP32[$st + 40 >> 2] = $140;
    HEAP32[$vararg_buffer49 >> 2] = $140;
    _opus_custom_encoder_ctl($add$ptr, 4014, $vararg_buffer49) | 0;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4015:
  {
   $147 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $148 = HEAP32[$147 >> 2] | 0;
   HEAP32[$ap >> 2] = $147 + 4;
   if (!$148) label = 116; else {
    HEAP32[$148 >> 2] = HEAP32[$st + 40 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4006:
  {
   $155 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $156 = HEAP32[$155 >> 2] | 0;
   HEAP32[$ap >> 2] = $155 + 4;
   if ($156 >>> 0 > 1) label = 116; else {
    HEAP32[$st + 148 >> 2] = $156;
    HEAP32[$st + 60 >> 2] = 1 - $156;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4007:
  {
   $163 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $164 = HEAP32[$163 >> 2] | 0;
   HEAP32[$ap >> 2] = $163 + 4;
   if (!$164) label = 116; else {
    HEAP32[$164 >> 2] = HEAP32[$st + 148 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 11018:
  {
   $171 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $172 = HEAP32[$171 >> 2] | 0;
   HEAP32[$ap >> 2] = $171 + 4;
   if (($172 + 1 | 0) >>> 0 > 101) label = 116; else {
    HEAP32[$st + 140 >> 2] = $172;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 11019:
  {
   $179 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $180 = HEAP32[$179 >> 2] | 0;
   HEAP32[$ap >> 2] = $179 + 4;
   if (!$180) label = 116; else {
    HEAP32[$180 >> 2] = HEAP32[$st + 140 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4020:
  {
   $187 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $188 = HEAP32[$187 >> 2] | 0;
   HEAP32[$ap >> 2] = $187 + 4;
   if ($188 >>> 0 > 1) label = 116; else {
    HEAP32[$st + 152 >> 2] = $188;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4021:
  {
   $195 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $196 = HEAP32[$195 >> 2] | 0;
   HEAP32[$ap >> 2] = $195 + 4;
   if (!$196) label = 116; else {
    HEAP32[$196 >> 2] = HEAP32[$st + 152 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4024:
  {
   $203 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $204 = HEAP32[$203 >> 2] | 0;
   HEAP32[$ap >> 2] = $203 + 4;
   if (($204 | 0) < 3001) switch ($204 | 0) {
   case -1e3:
    break;
   default:
    {
     label = 116;
     break L1;
    }
   } else switch ($204 | 0) {
   case 3001:
   case 3002:
    break;
   default:
    {
     label = 116;
     break L1;
    }
   }
   HEAP32[$st + 124 >> 2] = $204;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 4025:
  {
   $210 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $211 = HEAP32[$210 >> 2] | 0;
   HEAP32[$ap >> 2] = $210 + 4;
   if (!$211) label = 116; else {
    HEAP32[$211 >> 2] = HEAP32[$st + 124 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4027:
  {
   $218 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $219 = HEAP32[$218 >> 2] | 0;
   HEAP32[$ap >> 2] = $218 + 4;
   if (!$219) label = 116; else {
    $div = (HEAP32[$st + 144 >> 2] | 0) / 400 | 0;
    HEAP32[$219 >> 2] = $div;
    if ((HEAP32[$st + 108 >> 2] | 0) == 2051) {
     $ret$2 = 0;
     label = 115;
    } else {
     HEAP32[$219 >> 2] = (HEAP32[$st + 116 >> 2] | 0) + $div;
     $ret$2 = 0;
     label = 115;
    }
   }
   break;
  }
 case 4029:
  {
   $228 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $229 = HEAP32[$228 >> 2] | 0;
   HEAP32[$ap >> 2] = $228 + 4;
   if (!$229) label = 116; else {
    HEAP32[$229 >> 2] = HEAP32[$st + 144 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4031:
  {
   $236 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $237 = HEAP32[$236 >> 2] | 0;
   HEAP32[$ap >> 2] = $236 + 4;
   if (!$237) label = 116; else {
    HEAP32[$237 >> 2] = HEAP32[$st + 18136 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4036:
  {
   $244 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $245 = HEAP32[$244 >> 2] | 0;
   HEAP32[$ap >> 2] = $244 + 4;
   if (($245 + -8 | 0) >>> 0 > 16) label = 116; else {
    HEAP32[$st + 168 >> 2] = $245;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4037:
  {
   $252 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $253 = HEAP32[$252 >> 2] | 0;
   HEAP32[$ap >> 2] = $252 + 4;
   if (!$253) label = 116; else {
    HEAP32[$253 >> 2] = HEAP32[$st + 168 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4040:
  {
   $260 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $261 = HEAP32[$260 >> 2] | 0;
   HEAP32[$ap >> 2] = $260 + 4;
   if (($261 + -5e3 | 0) >>> 0 < 10) {
    HEAP32[$st + 156 >> 2] = $261;
    $ret$2 = 0;
    label = 115;
   } else label = 116;
   break;
  }
 case 4041:
  {
   $267 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $268 = HEAP32[$267 >> 2] | 0;
   HEAP32[$ap >> 2] = $267 + 4;
   if (!$268) label = 116; else {
    HEAP32[$268 >> 2] = HEAP32[$st + 156 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4042:
  {
   $275 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $276 = HEAP32[$275 >> 2] | 0;
   HEAP32[$ap >> 2] = $275 + 4;
   if ($276 >>> 0 > 1) label = 116; else {
    HEAP32[$st + 76 >> 2] = $276;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4043:
  {
   $283 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $284 = HEAP32[$283 >> 2] | 0;
   HEAP32[$ap >> 2] = $283 + 4;
   if (!$284) label = 116; else {
    HEAP32[$284 >> 2] = HEAP32[$st + 76 >> 2];
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4046:
  {
   $291 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $292 = HEAP32[$291 >> 2] | 0;
   HEAP32[$ap >> 2] = $291 + 4;
   if ($292 >>> 0 > 1) label = 116; else {
    HEAP32[$vararg_buffer109 >> 2] = $292;
    _opus_custom_encoder_ctl($add$ptr, 4046, $vararg_buffer109) | 0;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4047:
  {
   $299 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $300 = HEAP32[$299 >> 2] | 0;
   HEAP32[$ap >> 2] = $299 + 4;
   if (!$300) label = 116; else {
    HEAP32[$vararg_buffer115 >> 2] = $300;
    _opus_custom_encoder_ctl($add$ptr, 4047, $vararg_buffer115) | 0;
    $ret$2 = 0;
    label = 115;
   }
   break;
  }
 case 4028:
  {
   $add$ptr536 = $st + (HEAP32[$st + 4 >> 2] | 0) | 0;
   _memset($st + 200 | 0, 0, 17940) | 0;
   _opus_custom_encoder_ctl($add$ptr, 4028, $vararg_buffer118) | 0;
   _silk_InitEncoder($add$ptr536, HEAP32[$st + 180 >> 2] | 0, $dummy);
   HEAP32[$st + 14192 >> 2] = HEAP32[$st + 112 >> 2];
   HEAP16[$st + 14196 >> 1] = 16384;
   HEAPF32[$st + 14204 >> 2] = 1.0;
   HEAP32[$st + 14252 >> 2] = 1;
   HEAP32[$st + 14224 >> 2] = 1001;
   HEAP32[$st + 14240 >> 2] = 1105;
   HEAP32[$st + 14200 >> 2] = 193536;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 11002:
  {
   $309 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $310 = HEAP32[$309 >> 2] | 0;
   HEAP32[$ap >> 2] = $309 + 4;
   switch ($310 | 0) {
   case 1e3:
   case 1001:
   case 1002:
   case -1e3:
    break;
   default:
    {
     label = 116;
     break L1;
    }
   }
   HEAP32[$st + 136 >> 2] = $310;
   $ret$2 = 0;
   label = 115;
   break;
  }
 case 10024:
  {
   $316 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $317 = HEAP32[$316 >> 2] | 0;
   HEAP32[$ap >> 2] = $316 + 4;
   HEAP32[$st + 176 >> 2] = $317;
   HEAP32[$vararg_buffer126 >> 2] = $317;
   $ret$2 = _opus_custom_encoder_ctl($add$ptr, 10024, $vararg_buffer126) | 0;
   label = 115;
   break;
  }
 case 10026:
  {
   $323 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $324 = HEAP32[$323 >> 2] | 0;
   HEAP32[$ap >> 2] = $323 + 4;
   HEAP32[$st + 14256 >> 2] = $324;
   HEAP32[$vararg_buffer132 >> 2] = $324;
   $ret$2 = _opus_custom_encoder_ctl($add$ptr, 10026, $vararg_buffer132) | 0;
   label = 115;
   break;
  }
 case 4049:
  {
   $330 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $331 = HEAP32[$330 >> 2] | 0;
   HEAP32[$ap >> 2] = $330 + 4;
   if (!$331) label = 116; else {
    if (HEAP32[$st + 56 >> 2] | 0) if ((HEAP32[$st + 14228 >> 2] & -2 | 0) == 1e3) {
     $335 = HEAP32[$st + 4 >> 2] | 0;
     HEAP32[$331 >> 2] = 1;
     $nChannelsInternal = $st + 12 | 0;
     if ((HEAP32[$nChannelsInternal >> 2] | 0) <= 0) {
      $ret$2 = 0;
      label = 115;
      break L1;
     }
     $add$ptr603 = $st + $335 | 0;
     $337 = 1;
     $n$0332 = 0;
     while (1) {
      if (!$337) $339 = 0; else $339 = (HEAP32[$add$ptr603 + ($n$0332 * 10064 | 0) + 6084 >> 2] | 0) > 9;
      $337 = $339 & 1;
      HEAP32[$331 >> 2] = $337;
      $n$0332 = $n$0332 + 1 | 0;
      if (($n$0332 | 0) >= (HEAP32[$nChannelsInternal >> 2] | 0)) {
       $ret$2 = 0;
       label = 115;
       break L1;
      }
     }
    }
    if (!(HEAP32[$st + 184 >> 2] | 0)) {
     HEAP32[$331 >> 2] = 0;
     $ret$2 = 0;
     label = 115;
     break L1;
    } else {
     HEAP32[$331 >> 2] = (HEAP32[$st + 18124 >> 2] | 0) > 9 & 1;
     $ret$2 = 0;
     label = 115;
     break L1;
    }
   }
   break;
  }
 case 10015:
  {
   $348 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $349 = HEAP32[$348 >> 2] | 0;
   HEAP32[$ap >> 2] = $348 + 4;
   if (!$349) label = 116; else {
    HEAP32[$vararg_buffer141 >> 2] = $349;
    $ret$2 = _opus_custom_encoder_ctl($add$ptr, 10015, $vararg_buffer141) | 0;
    label = 115;
   }
   break;
  }
 default:
  {
   $ret$2 = -5;
   label = 115;
  }
 } while (0);
 if ((label | 0) == 115) {
  $retval$0 = $ret$2;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 116) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _silk_stereo_LR_to_MS($state, $x1, $x2, $ix, $mid_only_flag, $mid_side_rates_bps, $total_rate_bps, $prev_speech_act_Q8, $toMono, $fs_kHz, $frame_length) {
 $state = $state | 0;
 $x1 = $x1 | 0;
 $x2 = $x2 | 0;
 $ix = $ix | 0;
 $mid_only_flag = $mid_only_flag | 0;
 $mid_side_rates_bps = $mid_side_rates_bps | 0;
 $total_rate_bps = $total_rate_bps | 0;
 $prev_speech_act_Q8 = $prev_speech_act_Q8 | 0;
 $toMono = $toMono | 0;
 $fs_kHz = $fs_kHz | 0;
 $frame_length = $frame_length | 0;
 var $0 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $16$phi = 0, $17 = 0, $18 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $49 = 0, $50 = 0, $51 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $HP_ratio_Q14 = 0, $LP_ratio_Q14 = 0, $add = 0, $add$i = 0, $add$i280 = 0, $add126 = 0, $add136 = 0, $add151 = 0, $add153 = 0, $add167 = 0, $add178 = 0, $add19 = 0, $add34$i = 0, $add34$i292 = 0, $add344 = 0, $add446 = 0, $add489 = 0, $add537 = 0, $add580 = 0, $add6 = 0, $and544 = 0, $arraydecay = 0, $arraydecay36 = 0, $arrayidx = 0, $arrayidx132 = 0, $arrayidx362 = 0, $arrayidx376 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $call = 0, $call131 = 0, $call154259 = 0, $call179320 = 0, $cmp104 = 0, $cmp44$i = 0, $cmp44$i300 = 0, $cond142 = 0, $cond189 = 0, $conv = 0, $conv108 = 0, $conv114 = 0, $conv12$i = 0, $conv12$i275 = 0, $conv170 = 0, $conv196 = 0, $conv202 = 0, $conv231 = 0, $conv243$pre$phiZ2D = 0, $conv276 = 0, $conv288$pre$phiZ2D = 0, $conv308 = 0, $conv373 = 0, $conv377 = 0, $conv380 = 0, $conv391 = 0, $conv444 = 0, $conv451 = 0, $conv462 = 0, $conv477 = 0, $conv5 = 0, $conv535 = 0, $conv542 = 0, $conv553 = 0, $conv568 = 0, $conv609 = 0, $conv613 = 0, $conv616 = 0, $mul111 = 0, $mul152 = 0, $mul225 = 0, $mul382 = 0, $n$0340 = 0, $n$1338 = 0, $n$2336 = 0, $n$3334 = 0, $n$4329 = 0, $pred0_Q13$0332 = 0, $pred1_Q13$0331 = 0, $pred_Q13 = 0, $shl$i = 0, $shl$i265 = 0, $shl10$i = 0, $shl10$i270 = 0, $shl427 = 0, $shr395 = 0, $shr409 = 0, $shr41$i = 0, $shr41$i$shr43$i = 0, $shr41$i298 = 0, $shr41$i298$shr43$i299 = 0, $shr43$i = 0, $shr43$i$shr41$i = 0, $shr43$i299 = 0, $shr43$i299$shr41$i298 = 0, $shr539 = 0, $shr61 = 0, $shr92 = 0, $silent_side_len = 0, $smth_width_Q14 = 0, $spec$select = 0, $spec$store$select = 0, $sub = 0, $sub13 = 0, $sub145 = 0, $sub162 = 0, $sub166 = 0, $sub199 = 0, $sub23$i = 0, $sub23$i285 = 0, $sub368 = 0, $sub37$i = 0, $sub37$i295 = 0, $sub40$i = 0, $sub40$i297 = 0, $sub413 = 0, $vla = 0, $vla43 = 0, $vla44 = 0, $vla73 = 0, $vla73348 = 0, $vla73350 = 0, $vla74 = 0, $vla74349 = 0, $vla74351 = 0, $w_Q24$0333 = 0, $width_Q14$0 = 0, $width_Q14$1$ph = 0, $width_Q14$1322$ph = 0, $width_Q14$1322326 = 0, $width_Q14$1322327 = 0, $width_Q14$1323 = 0, $width_prev_Q14379 = 0, label = 0, sp = 0, $13$looptemp = 0, $n$1338$looptemp = 0, $n$3334$looptemp = 0, $n$4329$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pred_Q13 = sp + 8 | 0;
 $LP_ratio_Q14 = sp + 4 | 0;
 $HP_ratio_Q14 = sp;
 $arrayidx = $x1 + -4 | 0;
 $add = $frame_length + 2 | 0;
 $0 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add << 1) | 0) + 15 & -16) | 0;
 if (($frame_length | 0) > -2) {
  $n$0340 = 0;
  do {
   $sub = $n$0340 + -2 | 0;
   $conv = HEAP16[$x1 + ($sub << 1) >> 1] | 0;
   $conv5 = HEAP16[$x2 + ($sub << 1) >> 1] | 0;
   $add6 = $conv5 + $conv | 0;
   $sub13 = $conv - $conv5 | 0;
   HEAP16[$arrayidx + ($n$0340 << 1) >> 1] = ($add6 >>> 1) + ($add6 & 1);
   $add19 = ($sub13 >> 1) + ($sub13 & 1) | 0;
   $spec$select = ($add19 | 0) > -32768 ? $add19 : -32768;
   HEAP16[$vla + ($n$0340 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
   $n$0340 = $n$0340 + 1 | 0;
  } while (($n$0340 | 0) < ($add | 0));
 }
 $arraydecay = $state + 4 | 0;
 $6 = HEAPU16[$arraydecay >> 1] | HEAPU16[$arraydecay + 2 >> 1] << 16;
 HEAP16[$arrayidx >> 1] = $6;
 HEAP16[$arrayidx + 2 >> 1] = $6 >>> 16;
 $arraydecay36 = $state + 8 | 0;
 $7 = HEAP32[$arraydecay36 >> 2] | 0;
 HEAP32[$vla >> 2] = $7;
 $arrayidx39 = $arrayidx + ($frame_length << 1) | 0;
 $8 = HEAPU16[$arrayidx39 >> 1] | HEAPU16[$arrayidx39 + 2 >> 1] << 16;
 HEAP16[$arraydecay >> 1] = $8;
 HEAP16[$arraydecay + 2 >> 1] = $8 >>> 16;
 $arrayidx42 = $vla + ($frame_length << 1) | 0;
 $9 = HEAPU16[$arrayidx42 >> 1] | HEAPU16[$arrayidx42 + 2 >> 1] << 16;
 HEAP16[$arraydecay36 >> 1] = $9;
 HEAP16[$arraydecay36 + 2 >> 1] = $9 >>> 16;
 $vla43 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
 $vla44 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
 $10 = $7 & 65535;
 $12 = $7 >>> 16 & 65535;
 if (($frame_length | 0) > 0) {
  $13 = HEAP16[$arrayidx >> 1] | 0;
  $n$1338 = 0;
  do {
   $n$1338$looptemp = $n$1338;
   $n$1338 = $n$1338 + 1 | 0;
   $13$looptemp = $13;
   $13 = HEAP16[$arrayidx + ($n$1338 << 1) >> 1] | 0;
   $shr61 = ((HEAP16[$x1 + ($n$1338$looptemp << 1) >> 1] | 0) + ($13$looptemp << 16 >> 16) + ($13 << 16 >> 16 << 1) >> 1) + 1 >> 1;
   HEAP16[$vla43 + ($n$1338$looptemp << 1) >> 1] = $shr61;
   HEAP16[$vla44 + ($n$1338$looptemp << 1) >> 1] = ($13 & 65535) - $shr61;
  } while (($n$1338 | 0) != ($frame_length | 0));
  $vla73 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
  $vla74 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
  $16 = $10;
  $18 = $12;
  $n$2336 = 0;
  while (1) {
   $17 = HEAP16[$vla + ($n$2336 + 2 << 1) >> 1] | 0;
   $shr92 = (($17 << 16 >> 16) + ($16 << 16 >> 16) + ($18 << 16 >> 16 << 1) >> 1) + 1 >> 1;
   HEAP16[$vla73 + ($n$2336 << 1) >> 1] = $shr92;
   HEAP16[$vla74 + ($n$2336 << 1) >> 1] = ($18 & 65535) - $shr92;
   $n$2336 = $n$2336 + 1 | 0;
   if (($n$2336 | 0) == ($frame_length | 0)) {
    $vla73350 = $vla73;
    $vla74351 = $vla74;
    break;
   } else {
    $16$phi = $18;
    $18 = $17;
    $16 = $16$phi;
   }
  }
 } else {
  $vla73348 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
  $vla74349 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($frame_length << 1) | 0) + 15 & -16) | 0;
  $vla73350 = $vla73348;
  $vla74351 = $vla74349;
 }
 $cmp104 = ($fs_kHz * 10 | 0) == ($frame_length | 0);
 $conv108 = $prev_speech_act_Q8 << 16 >> 16;
 $mul111 = Math_imul($conv108, $conv108) | 0;
 $conv114 = $cmp104 ? 328 : 655;
 $add126 = ((Math_imul($conv114, $mul111 & 65535) | 0) >>> 16) + (Math_imul($conv114, $mul111 >>> 16) | 0) | 0;
 $call = _silk_stereo_find_predictor($LP_ratio_Q14, $vla43, $vla73350, $state + 12 | 0, $frame_length, $add126) | 0;
 HEAP32[$pred_Q13 >> 2] = $call;
 $call131 = _silk_stereo_find_predictor($HP_ratio_Q14, $vla44, $vla74351, $state + 20 | 0, $frame_length, $add126) | 0;
 $arrayidx132 = $pred_Q13 + 4 | 0;
 HEAP32[$arrayidx132 >> 2] = $call131;
 $add136 = ((HEAP32[$LP_ratio_Q14 >> 2] << 16 >> 16) * 3 | 0) + (HEAP32[$HP_ratio_Q14 >> 2] | 0) | 0;
 $cond142 = ($add136 | 0) < 65536 ? $add136 : 65536;
 $sub145 = $total_rate_bps - ($cmp104 ? 1200 : 600) | 0;
 $spec$store$select = ($sub145 | 0) > 1 ? $sub145 : 1;
 $add151 = (($fs_kHz << 16 >> 16) * 600 | 0) + 2e3 | 0;
 $mul152 = $cond142 * 3 | 0;
 $add153 = $mul152 + 851968 | 0;
 $24 = Math_clz32((($spec$store$select | 0) > 0 ? $spec$store$select : 0 - $spec$store$select | 0) | 0) | 0;
 $shl$i = $spec$store$select << $24 + -1;
 $25 = Math_clz32((($mul152 | 0) > -851968 ? $add153 : -851968 - $mul152 | 0) | 0) | 0;
 $shl10$i = $add153 << $25 + -1;
 $conv12$i = (536870911 / ($shl10$i >> 16 | 0) | 0) << 16 >> 16;
 $add$i = ((Math_imul($conv12$i, $shl$i & 65535) | 0) >> 16) + (Math_imul($conv12$i, $shl$i >> 16) | 0) | 0;
 $30 = ___muldi3($shl10$i | 0, (($shl10$i | 0) < 0) << 31 >> 31 | 0, $add$i | 0, (($add$i | 0) < 0) << 31 >> 31 | 0) | 0;
 $32 = _bitshift64Lshr($30 | 0, getTempRet0() | 0, 29) | 0;
 getTempRet0() | 0;
 $sub23$i = $shl$i - ($32 & -8) | 0;
 $add34$i = (Math_imul($sub23$i >> 16, $conv12$i) | 0) + $add$i + ((Math_imul($sub23$i & 65535, $conv12$i) | 0) >> 16) | 0;
 $sub37$i = $24 + 9 + (1 - $25) | 0;
 if (($sub37$i | 0) < 0) {
  $sub40$i = 0 - $sub37$i | 0;
  $shr41$i = -2147483648 >> $sub40$i;
  $shr43$i = 2147483647 >>> $sub40$i;
  $cmp44$i = ($shr41$i | 0) > ($shr43$i | 0);
  $shr41$i$shr43$i = $cmp44$i ? $shr41$i : $shr43$i;
  $shr43$i$shr41$i = $cmp44$i ? $shr43$i : $shr41$i;
  $call154259 = (($add34$i | 0) > ($shr41$i$shr43$i | 0) ? $shr41$i$shr43$i : ($add34$i | 0) < ($shr43$i$shr41$i | 0) ? $shr43$i$shr41$i : $add34$i) << $sub40$i;
 } else $call154259 = ($sub37$i | 0) < 32 ? $add34$i >> $sub37$i : 0;
 HEAP32[$mid_side_rates_bps >> 2] = $call154259;
 if (($call154259 | 0) < ($add151 | 0)) {
  HEAP32[$mid_side_rates_bps >> 2] = $add151;
  $sub162 = $spec$store$select - $add151 | 0;
  HEAP32[$mid_side_rates_bps + 4 >> 2] = $sub162;
  $sub166 = ($sub162 << 1) - $add151 | 0;
  $add167 = $mul152 + 65536 | 0;
  $conv170 = $add151 << 16 >> 16;
  $add178 = ((Math_imul($add167 & 65535, $conv170) | 0) >> 16) + (Math_imul($add167 >> 16, $conv170) | 0) | 0;
  $34 = Math_clz32((($sub166 | 0) > 0 ? $sub166 : 0 - $sub166 | 0) | 0) | 0;
  $shl$i265 = $sub166 << $34 + -1;
  $35 = Math_clz32((($add178 | 0) > 0 ? $add178 : 0 - $add178 | 0) | 0) | 0;
  $shl10$i270 = $add178 << $35 + -1;
  $conv12$i275 = (536870911 / ($shl10$i270 >> 16 | 0) | 0) << 16 >> 16;
  $add$i280 = ((Math_imul($conv12$i275, $shl$i265 & 65535) | 0) >> 16) + (Math_imul($conv12$i275, $shl$i265 >> 16) | 0) | 0;
  $40 = ___muldi3($add$i280 | 0, (($add$i280 | 0) < 0) << 31 >> 31 | 0, $shl10$i270 | 0, (($shl10$i270 | 0) < 0) << 31 >> 31 | 0) | 0;
  $42 = _bitshift64Lshr($40 | 0, getTempRet0() | 0, 29) | 0;
  getTempRet0() | 0;
  $sub23$i285 = $shl$i265 - ($42 & -8) | 0;
  $add34$i292 = (Math_imul($sub23$i285 >> 16, $conv12$i275) | 0) + $add$i280 + ((Math_imul($sub23$i285 & 65535, $conv12$i275) | 0) >> 16) | 0;
  $sub37$i295 = $34 + 12 + (1 - $35) | 0;
  if (($sub37$i295 | 0) < 0) {
   $sub40$i297 = 0 - $sub37$i295 | 0;
   $shr41$i298 = -2147483648 >> $sub40$i297;
   $shr43$i299 = 2147483647 >>> $sub40$i297;
   $cmp44$i300 = ($shr41$i298 | 0) > ($shr43$i299 | 0);
   $shr41$i298$shr43$i299 = $cmp44$i300 ? $shr41$i298 : $shr43$i299;
   $shr43$i299$shr41$i298 = $cmp44$i300 ? $shr43$i299 : $shr41$i298;
   $call179320 = (($add34$i292 | 0) > ($shr41$i298$shr43$i299 | 0) ? $shr41$i298$shr43$i299 : ($add34$i292 | 0) < ($shr43$i299$shr41$i298 | 0) ? $shr43$i299$shr41$i298 : $add34$i292) << $sub40$i297;
  } else $call179320 = ($sub37$i295 | 0) < 32 ? $add34$i292 >> $sub37$i295 : 0;
  $cond189 = ($call179320 | 0) > 0 ? $call179320 : 0;
  $width_Q14$0 = ($cond189 | 0) < 16384 ? $cond189 : 16384;
 } else {
  HEAP32[$mid_side_rates_bps + 4 >> 2] = $spec$store$select - $call154259;
  $width_Q14$0 = 16384;
 }
 $smth_width_Q14 = $state + 28 | 0;
 $conv196 = HEAP16[$smth_width_Q14 >> 1] | 0;
 $sub199 = $width_Q14$0 - $conv196 | 0;
 $conv202 = $add126 << 16 >> 16;
 HEAP16[$smth_width_Q14 >> 1] = (Math_imul($sub199 >> 16, $conv202) | 0) + $conv196 + ((Math_imul($sub199 & 65535, $conv202) | 0) >>> 16);
 HEAP8[$mid_only_flag >> 0] = 0;
 L27 : do if (!$toMono) {
  $mul225 = $spec$store$select << 3;
  do if (!(HEAP16[$state + 30 >> 1] | 0)) {
   if (($mul225 | 0) < ($add151 * 13 | 0)) $conv243$pre$phiZ2D = HEAP16[$smth_width_Q14 >> 1] | 0; else {
    $49 = HEAP16[$smth_width_Q14 >> 1] | 0;
    $conv231 = $49 << 16 >> 16;
    if ((((Math_imul($cond142 & 65535, $conv231) | 0) >> 16) + (Math_imul($cond142 >> 16, $conv231) | 0) | 0) < 819) $conv243$pre$phiZ2D = $conv231; else {
     $51 = $49;
     break;
    }
   }
   HEAP32[$pred_Q13 >> 2] = (Math_imul($call << 16 >> 16, $conv243$pre$phiZ2D) | 0) >> 14;
   HEAP32[$arrayidx132 >> 2] = (Math_imul($call131 << 16 >> 16, $conv243$pre$phiZ2D) | 0) >> 14;
   _silk_stereo_quant_pred($pred_Q13, $ix);
   HEAP32[$pred_Q13 >> 2] = 0;
   HEAP32[$arrayidx132 >> 2] = 0;
   HEAP32[$mid_side_rates_bps >> 2] = $spec$store$select;
   HEAP32[$mid_side_rates_bps + 4 >> 2] = 0;
   HEAP8[$mid_only_flag >> 0] = 1;
   $width_Q14$1323 = 0;
   label = 34;
   break L27;
  } else {
   if (($mul225 | 0) < ($add151 * 11 | 0)) $conv288$pre$phiZ2D = HEAP16[$smth_width_Q14 >> 1] | 0; else {
    $50 = HEAP16[$smth_width_Q14 >> 1] | 0;
    $conv276 = $50 << 16 >> 16;
    if ((((Math_imul($cond142 & 65535, $conv276) | 0) >> 16) + (Math_imul($cond142 >> 16, $conv276) | 0) | 0) < 328) $conv288$pre$phiZ2D = $conv276; else {
     $51 = $50;
     break;
    }
   }
   HEAP32[$pred_Q13 >> 2] = (Math_imul($call << 16 >> 16, $conv288$pre$phiZ2D) | 0) >> 14;
   HEAP32[$arrayidx132 >> 2] = (Math_imul($call131 << 16 >> 16, $conv288$pre$phiZ2D) | 0) >> 14;
   _silk_stereo_quant_pred($pred_Q13, $ix);
   HEAP32[$pred_Q13 >> 2] = 0;
   HEAP32[$arrayidx132 >> 2] = 0;
   $width_Q14$1$ph = 0;
   label = 33;
   break L27;
  } while (0);
  if ($51 << 16 >> 16 > 15565) {
   _silk_stereo_quant_pred($pred_Q13, $ix);
   $width_Q14$1$ph = 16384;
   label = 33;
   break;
  } else {
   $conv308 = $51 << 16 >> 16;
   HEAP32[$pred_Q13 >> 2] = (Math_imul($call << 16 >> 16, $conv308) | 0) >> 14;
   HEAP32[$arrayidx132 >> 2] = (Math_imul($call131 << 16 >> 16, $conv308) | 0) >> 14;
   _silk_stereo_quant_pred($pred_Q13, $ix);
   $width_Q14$1$ph = HEAP16[$smth_width_Q14 >> 1] | 0;
   label = 33;
   break;
  }
 } else {
  HEAP32[$pred_Q13 >> 2] = 0;
  HEAP32[$arrayidx132 >> 2] = 0;
  _silk_stereo_quant_pred($pred_Q13, $ix);
  $width_Q14$1$ph = 0;
  label = 33;
 } while (0);
 if ((label | 0) == 33) if ((HEAP8[$mid_only_flag >> 0] | 0) == 1) {
  $width_Q14$1323 = $width_Q14$1$ph;
  label = 34;
 } else {
  HEAP16[$state + 32 >> 1] = 0;
  $width_Q14$1322$ph = $width_Q14$1$ph;
  label = 38;
 }
 do if ((label | 0) == 34) {
  $silent_side_len = $state + 32 | 0;
  $add344 = $frame_length - ($fs_kHz << 3) + (HEAPU16[$silent_side_len >> 1] | 0) | 0;
  HEAP16[$silent_side_len >> 1] = $add344;
  if (($add344 << 16 >> 16 | 0) < ($fs_kHz * 5 | 0)) {
   HEAP8[$mid_only_flag >> 0] = 0;
   $width_Q14$1322327 = $width_Q14$1323;
   label = 39;
   break;
  } else {
   HEAP16[$silent_side_len >> 1] = 1e4;
   $width_Q14$1322$ph = $width_Q14$1323;
   label = 38;
   break;
  }
 } while (0);
 if ((label | 0) == 38) if (!(HEAP8[$mid_only_flag >> 0] | 0)) {
  $width_Q14$1322327 = $width_Q14$1322$ph;
  label = 39;
 } else $width_Q14$1322326 = $width_Q14$1322$ph;
 if ((label | 0) == 39) {
  $arrayidx362 = $mid_side_rates_bps + 4 | 0;
  $sub368 = $spec$store$select + -1 | 0;
  if ((HEAP32[$arrayidx362 >> 2] | 0) < 1) {
   HEAP32[$arrayidx362 >> 2] = 1;
   HEAP32[$mid_side_rates_bps >> 2] = ($sub368 | 0) > 1 ? $sub368 : 1;
   $width_Q14$1322326 = $width_Q14$1322327;
  } else $width_Q14$1322326 = $width_Q14$1322327;
 }
 $conv373 = HEAP16[$state >> 1] | 0;
 $arrayidx376 = $state + 2 | 0;
 $conv377 = HEAP16[$arrayidx376 >> 1] | 0;
 $width_prev_Q14379 = $state + 30 | 0;
 $conv380 = HEAP16[$width_prev_Q14379 >> 1] | 0;
 $mul382 = $fs_kHz << 3;
 $59 = HEAP32[$pred_Q13 >> 2] | 0;
 $conv391 = (65536 / ($mul382 | 0) | 0) << 16 >> 16;
 $shr395 = ((Math_imul($59 - $conv373 << 16 >> 16, $conv391) | 0) >> 15) + 1 >> 1;
 $60 = HEAP32[$arrayidx132 >> 2] | 0;
 $shr409 = ((Math_imul($60 - $conv377 << 16 >> 16, $conv391) | 0) >> 15) + 1 >> 1;
 $sub413 = $width_Q14$1322326 - $conv380 | 0;
 $shl427 = ((Math_imul($sub413 & 65535, $conv391) | 0) >> 16) + (Math_imul($sub413 >> 16, $conv391) | 0) << 10;
 if (($fs_kHz | 0) > 0) {
  $n$3334 = 0;
  $pred0_Q13$0332 = 0 - $conv373 | 0;
  $pred1_Q13$0331 = 0 - $conv377 | 0;
  $w_Q24$0333 = $conv380 << 10;
  do {
   $pred0_Q13$0332 = $pred0_Q13$0332 - $shr395 | 0;
   $pred1_Q13$0331 = $pred1_Q13$0331 - $shr409 | 0;
   $w_Q24$0333 = $w_Q24$0333 + $shl427 | 0;
   $n$3334$looptemp = $n$3334;
   $n$3334 = $n$3334 + 1 | 0;
   $conv444 = HEAP16[$arrayidx + ($n$3334 << 1) >> 1] | 0;
   $add446 = (HEAP16[$x1 + ($n$3334$looptemp << 1) >> 1] | 0) + (HEAP16[$arrayidx + ($n$3334$looptemp << 1) >> 1] | 0) + ($conv444 << 1) | 0;
   $conv451 = HEAP16[$vla + ($n$3334 << 1) >> 1] | 0;
   $conv462 = $pred0_Q13$0332 << 16 >> 16;
   $conv477 = $pred1_Q13$0331 << 16 >> 16;
   $add489 = (Math_imul($w_Q24$0333 >> 16, $conv451) | 0) + (Math_imul($conv444 >> 5, $conv477) | 0) + ((Math_imul($w_Q24$0333 & 64512, $conv451) | 0) >> 16) + ((Math_imul($conv444 << 11 & 63488, $conv477) | 0) >> 16) + (Math_imul($add446 >> 7, $conv462) | 0) + ((Math_imul($add446 << 9 & 65024, $conv462) | 0) >> 16) | 0;
   HEAP16[$x2 + ($n$3334$looptemp + -1 << 1) >> 1] = ($add489 | 0) > 8388479 ? 32767 : ($add489 | 0) < -8388736 ? -32768 : (($add489 >>> 7) + 1 | 0) >>> 1 & 65535;
  } while (($n$3334 | 0) < ($mul382 | 0));
 }
 if (($mul382 | 0) >= ($frame_length | 0)) {
  $conv609 = $59 & 65535;
  HEAP16[$state >> 1] = $conv609;
  $conv613 = $60 & 65535;
  HEAP16[$arrayidx376 >> 1] = $conv613;
  $conv616 = $width_Q14$1322326 & 65535;
  HEAP16[$width_prev_Q14379 >> 1] = $conv616;
  _llvm_stackrestore($0 | 0);
  STACKTOP = sp;
  return;
 }
 $shr539 = $width_Q14$1322326 >> 6;
 $and544 = $width_Q14$1322326 << 10 & 64512;
 $conv553 = 0 - ($59 << 16) >> 16;
 $conv568 = 0 - ($60 << 16) >> 16;
 $n$4329 = $mul382;
 do {
  $n$4329$looptemp = $n$4329;
  $n$4329 = $n$4329 + 1 | 0;
  $conv535 = HEAP16[$arrayidx + ($n$4329 << 1) >> 1] | 0;
  $add537 = (HEAP16[$x1 + ($n$4329$looptemp << 1) >> 1] | 0) + (HEAP16[$arrayidx + ($n$4329$looptemp << 1) >> 1] | 0) + ($conv535 << 1) | 0;
  $conv542 = HEAP16[$vla + ($n$4329 << 1) >> 1] | 0;
  $add580 = (Math_imul($shr539, $conv542) | 0) + (Math_imul($conv535 >> 5, $conv568) | 0) + ((Math_imul($and544, $conv542) | 0) >> 16) + ((Math_imul($conv535 << 11 & 63488, $conv568) | 0) >> 16) + (Math_imul($add537 >> 7, $conv553) | 0) + ((Math_imul($add537 << 9 & 65024, $conv553) | 0) >> 16) | 0;
  HEAP16[$x2 + ($n$4329$looptemp + -1 << 1) >> 1] = ($add580 | 0) > 8388479 ? 32767 : ($add580 | 0) < -8388736 ? -32768 : (($add580 >>> 7) + 1 | 0) >>> 1 & 65535;
 } while (($n$4329 | 0) != ($frame_length | 0));
 $conv609 = $59 & 65535;
 HEAP16[$state >> 1] = $conv609;
 $conv613 = $60 & 65535;
 HEAP16[$arrayidx376 >> 1] = $conv613;
 $conv616 = $width_Q14$1322326 & 65535;
 HEAP16[$width_prev_Q14379 >> 1] = $conv616;
 _llvm_stackrestore($0 | 0);
 STACKTOP = sp;
 return;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$lcssa213 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $122 = 0, $123 = 0, $126 = 0, $128 = 0, $129 = 0, $137 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $64 = 0, $7 = 0, $75 = 0, $85 = 0, $89 = 0, $91 = 0, $94 = 0, $95 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx365 = 0, $arrayidx68 = 0, $buf = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp37 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond149 = 0, $cond350 = 0, $conv120 = 0, $conv175 = 0, $conv208 = 0, $conv32 = 0, $conv69 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    HEAP32[16056] = 61;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 91;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $7 = HEAP32[$s >> 2] | 0;
  $conv32 = HEAP8[$7 + 1 >> 0] | 0;
  if (!(_isdigit($conv32) | 0)) {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  } else {
   $cmp37 = (HEAP8[$7 + 2 >> 0] | 0) == 36;
   $$sink = $cmp37 ? 3 : 1;
   $argpos$0 = $cmp37 ? $conv32 + -48 | 0 : -1;
   $l10n$1 = $cmp37 ? 1 : $l10n$0$ph;
  }
  $incdec$ptr45 = $7 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $10 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($10 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $10;
   $12 = $incdec$ptr45;
   $fl$0$lcssa = 0;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $11 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($11 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $11;
     $12 = $incdec$ptr62;
     $fl$0$lcssa = $or;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   $arrayidx68 = $12 + 1 | 0;
   $conv69 = HEAP8[$arrayidx68 >> 0] | 0;
   if (!(_isdigit($conv69) | 0)) label = 26; else if ((HEAP8[$12 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($conv69 + -48 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge188 = $12 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 26;
   if ((label | 0) == 26) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $27 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $28 = HEAP32[$27 >> 2] | 0;
     HEAP32[$ap >> 2] = $27 + 4;
     $l10n$2 = 0;
     $storemerge188 = $arrayidx68;
     $w$0 = $28;
    } else {
     $l10n$2 = 0;
     $storemerge188 = $arrayidx68;
     $w$0 = 0;
    }
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $30 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $30 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$30 >> 0] | 0) == 46) {
   $arrayidx114 = $30 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   $arrayidx119 = $30 + 2 | 0;
   $conv120 = HEAP8[$arrayidx119 >> 0] | 0;
   if (_isdigit($conv120) | 0) if ((HEAP8[$30 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($conv120 + -48 << 2) >> 2] = 10;
    $37 = HEAP32[$nl_arg + ((HEAP8[$arrayidx119 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $add$ptr139 = $30 + 4 | 0;
    HEAP32[$s >> 2] = $add$ptr139;
    $$pre263 = $add$ptr139;
    $p$0 = $37;
    break;
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $46 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $47 = HEAP32[$46 >> 2] | 0;
    HEAP32[$ap >> 2] = $46 + 4;
    $cond149 = $47;
   } else $cond149 = 0;
   HEAP32[$s >> 2] = $arrayidx119;
   $$pre263 = $arrayidx119;
   $p$0 = $cond149;
  } else {
   $$pre263 = $30;
   $p$0 = -1;
  } while (0);
  $49 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$49 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = $49 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr171;
   $51 = HEAP8[(HEAP8[$49 >> 0] | 0) + -65 + (36960 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $51 & 255;
   if (($conv175 + -1 | 0) >>> 0 < 8) {
    $49 = $incdec$ptr171;
    $st$0 = $conv175;
   } else break;
  }
  if (!($51 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($51 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 52; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $53 = $nl_arg + ($argpos$0 << 3) | 0;
    $58 = HEAP32[$53 + 4 >> 2] | 0;
    $59 = $arg;
    HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
    HEAP32[$59 + 4 >> 2] = $58;
    label = 52;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap);
   label = 53;
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if ($tobool25) label = 53; else $l$0$ph$be = 0;
  }
  L74 : do if ((label | 0) == 53) {
   label = 0;
   $conv208 = HEAP8[$49 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L76 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 2:
      {
       $75 = HEAP32[$arg >> 2] | 0;
       HEAP32[$75 >> 2] = $cnt$1;
       HEAP32[$75 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     case 7:
      {
       $85 = HEAP32[$arg >> 2] | 0;
       HEAP32[$85 >> 2] = $cnt$1;
       HEAP32[$85 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L74;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L74;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 65;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 65;
     break;
    }
   case 111:
    {
     $99 = $arg;
     $101 = HEAP32[$99 >> 2] | 0;
     $104 = HEAP32[$99 + 4 >> 2] | 0;
     $105 = _fmt_o($101, $104, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $105 | 0;
     $126 = $101;
     $128 = $104;
     $a$0 = $105;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 57451;
     label = 71;
     break;
    }
   case 105:
   case 100:
    {
     $107 = $arg;
     $109 = HEAP32[$107 >> 2] | 0;
     $112 = HEAP32[$107 + 4 >> 2] | 0;
     if (($112 | 0) < 0) {
      $114 = _i64Subtract(0, 0, $109 | 0, $112 | 0) | 0;
      $115 = getTempRet0() | 0;
      $116 = $arg;
      HEAP32[$116 >> 2] = $114;
      HEAP32[$116 + 4 >> 2] = $115;
      $122 = $114;
      $123 = $115;
      $pl$0 = 1;
      $prefix$0 = 57451;
      label = 70;
      break L76;
     } else {
      $122 = $109;
      $123 = $112;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 57451 : 57453) : 57452;
      label = 70;
      break L76;
     }
     break;
    }
   case 117:
    {
     $64 = $arg;
     $122 = HEAP32[$64 >> 2] | 0;
     $123 = HEAP32[$64 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 57451;
     label = 70;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 57451;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $137 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($137 | 0) == 0 ? 57461 : $137;
     $call351 = _memchr($cond350, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 57451;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $149 = $wc;
     $p$4269 = -1;
     label = 78;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_571($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 88;
      break L76;
     } else {
      $149 = HEAP32[$arg >> 2] | 0;
      $p$4269 = $p$0;
      label = 78;
      break L76;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = _fmt_fp($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L74;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 57451;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L101 : do if ((label | 0) == 65) {
    label = 0;
    $89 = $arg;
    $91 = HEAP32[$89 >> 2] | 0;
    $94 = HEAP32[$89 + 4 >> 2] | 0;
    $95 = _fmt_x($91, $94, $add$ptr206, $t$1 & 32) | 0;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | ($91 | 0) == 0 & ($94 | 0) == 0;
    $126 = $91;
    $128 = $94;
    $a$0 = $95;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 57451 : 57451 + ($t$1 >>> 4) | 0;
    label = 71;
   } else if ((label | 0) == 70) {
    label = 0;
    $126 = $122;
    $128 = $123;
    $a$0 = _fmt_u($122, $123, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 71;
   } else if ((label | 0) == 78) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = $149;
    while (1) {
     $144 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$144) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $144) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 82;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 82) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_571($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 88;
    } else {
     $i$1248 = 0;
     $ws$1249 = $149;
     while (1) {
      $145 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$145) {
       $i$0217271 = $i$0217;
       label = 88;
       break L101;
      }
      $call406 = _wctomb($mb, $145) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 88;
       break L101;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 88;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 71) {
    label = 0;
    $129 = ($126 | 0) != 0 | ($128 | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $129;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($129 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 88) {
    label = 0;
    _pad_571($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_571($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_571($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_571($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_571($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L122 : do if ((label | 0) == 91) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $147 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$147) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $147, $ap);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L122;
   }
  }
  $148 = 0;
  $i$3221 = $i$2224;
  while (1) {
   $inc483 = $i$3221 + 1 | 0;
   if ($148 | 0) {
    $retval$0 = -1;
    break L122;
   }
   if ($inc483 >>> 0 >= 10) {
    $retval$0 = 1;
    break L122;
   }
   $148 = HEAP32[$nl_type + ($inc483 << 2) >> 2] | 0;
   $i$3221 = $inc483;
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _run_prefilter($st, $in, $prefilter_mem, $CC, $N, $prefilter_tapset, $pitch, $gain, $qgain, $enabled, $nbAvailableBytes, $analysis) {
 $st = $st | 0;
 $in = $in | 0;
 $prefilter_mem = $prefilter_mem | 0;
 $CC = $CC | 0;
 $N = $N | 0;
 $prefilter_tapset = $prefilter_tapset | 0;
 $pitch = $pitch | 0;
 $gain = $gain | 0;
 $qgain = $qgain | 0;
 $enabled = $enabled | 0;
 $nbAvailableBytes = $nbAvailableBytes | 0;
 $analysis = $analysis | 0;
 var $$pre171 = 0, $$pre173 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $15 = 0.0, $2 = 0, $21 = 0, $22 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $33 = 0, $36 = 0, $37 = 0, $39 = 0.0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $7 = 0.0, $72 = 0, $8 = 0.0, $T$0$lcssa$i = 0, $T$0165$i = 0, $T$2$ph$i = 0, $T1b$0$i = 0, $add = 0, $add$i$i = 0.0, $add$i123$us$2$i = 0.0, $add$i137$i = 0.0, $add$ptr136$us$1$i = 0, $add$ptr136$us$2$i = 0, $add$ptr136$us$i = 0, $add$ptr138 = 0, $add$ptr138$us = 0, $add$ptr141 = 0, $add$ptr141$us = 0, $add$ptr216 = 0, $add$ptr36 = 0, $add$ptr5$i = 0, $add133$neg$i = 0, $add15 = 0, $add168$i = 0, $add33$i = 0, $add5$i$i = 0.0, $add5$i140$i = 0.0, $arrayidx162 = 0, $arrayidx162$us = 0, $arrayidx179$pre$phiZ2D = 0, $arrayidx179$us$pre$phiZZ2D = 0, $arrayidx47$i = 0, $arrayidx49$i = 0, $best_xy$0$lcssa$i = 0.0, $best_xy$0168$i = 0.0, $best_xy$2$ph$i = 0.0, $best_yy$0$lcssa$i = 0.0, $best_yy$0169$i = 0.0, $best_yy$2$ph$i = 0.0, $c$0 = 0, $c$1 = 0, $c$1$us = 0, $cmp11$i$i = 0, $cmp93 = 0, $cond108 = 0, $cond123$i = 0.0, $cont$0$i = 0.0, $div$i$i = 0.0, $div$i148$i = 0, $div$i151$i = 0.0, $div3$i = 0, $div4$i = 0, $g$0$lcssa$i = 0.0, $g$0167$i = 0.0, $g$2$ph$i = 0.0, $gain1$3 = 0.0, $gain1$4 = 0.0, $gain1$6 = 0.0, $i$012$i$i = 0, $i$012$i133$i = 0, $i$0171$i = 0, $i$07$i$us$1$i = 0, $i$07$i$us$2$i = 0, $i$07$i$us$i = 0, $idx$neg = 0, $inc270 = 0, $inc270$us = 0, $k$0166$i = 0, $mul = 0, $mul142 = 0, $mul19 = 0, $mul236 = 0, $mul24$i = 0, $mul26$i = 0, $mul41 = 0.0, $mul51$i = 0.0, $mul55$i = 0.0, $mul69$i = 0.0, $mul73$i = 0.0, $mul85$i = 0.0, $pf_on$0 = 0, $pf_threshold$1 = 0.0, $pf_threshold$3 = 0.0, $pf_threshold$4 = 0.0, $pg$0$i = 0.0, $pitch_index = 0, $pre = 0, $prefilter_gain76 = 0, $prefilter_period60 = 0, $prefilter_tapset187 = 0, $qg$0 = 0, $shortMdctSize = 0, $spec$select = 0.0, $spec$select$i = 0, $spec$select117$i = 0, $spec$select164 = 0.0, $spec$select165 = 0.0, $spec$select166 = 0, $sub102 = 0, $sub126 = 0, $sub126$us = 0, $sub167 = 0.0, $sub167$us = 0.0, $sub186 = 0.0, $sub57$i = 0, $sub61 = 0, $sub74$i = 0.0, $sub86$i = 0.0, $thresh$0$i = 0.0, $vla = 0, $vla1$i = 0, $vla34 = 0, $window = 0, $xy$08$i$us$1$i = 0.0, $xy$08$i$us$2$i = 0.0, $xy$08$i$us$i = 0.0, $xy01$0$lcssa$i$i = 0.0, $xy01$0$lcssa$i144$i = 0.0, $xy01$013$i$i = 0.0, $xy01$013$i132$i = 0.0, $xy02$0$lcssa$i$i = 0.0, $xy02$0$lcssa$i145$i = 0.0, $xy02$014$i$i = 0.0, $xy02$014$i131$i = 0.0, $yy$0172$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $vla1$i = sp;
 $pre = sp + 2056 | 0;
 $pitch_index = sp + 2052 | 0;
 $0 = HEAP32[$st >> 2] | 0;
 $1 = HEAP32[$0 + 4 >> 2] | 0;
 $add = $N + 1024 | 0;
 $mul = Math_imul($add, $CC) | 0;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
 HEAP32[$pre >> 2] = $vla;
 HEAP32[$pre + 4 >> 2] = $vla + ($add << 2);
 $add15 = $1 + $N | 0;
 $mul19 = $N << 2;
 $c$0 = 0;
 do {
  $3 = HEAP32[$pre + ($c$0 << 2) >> 2] | 0;
  _memcpy($3 | 0, $prefilter_mem + ($c$0 << 10 << 2) | 0, 4096) | 0;
  _memcpy($3 + 4096 | 0, $in + ((Math_imul($c$0, $add15) | 0) << 2) + ($1 << 2) | 0, $mul19 | 0) | 0;
  $c$0 = $c$0 + 1 | 0;
 } while (($c$0 | 0) < ($CC | 0));
 if (!$enabled) {
  HEAP32[$pitch_index >> 2] = 15;
  $37 = 15;
  $gain1$3 = 0.0;
 } else {
  $4 = _llvm_stacksave() | 0;
  $vla34 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($add >> 1 << 2) | 0) + 15 & -16) | 0;
  _pitch_downsample($pre, $vla34, $add, $CC);
  $add$ptr36 = $vla34 + 2048 | 0;
  _pitch_search($add$ptr36, $vla34, $N, 979, $pitch_index);
  $5 = HEAP32[$pitch_index >> 2] | 0;
  $7 = +HEAPF32[$st + 108 >> 2];
  $div3$i = (HEAP32[$st + 104 >> 2] | 0) / 2 | 0;
  $div4$i = ($N | 0) / 2 | 0;
  $spec$select$i = ($5 | 0) > 0 ? (1024 - $5 | 0) / 2 | 0 : 511;
  HEAP32[$pitch_index >> 2] = $spec$select$i;
  $add$ptr5$i = $add$ptr36 + (0 - $spec$select$i << 2) | 0;
  $cmp11$i$i = ($N | 0) > 1;
  if ($cmp11$i$i) {
   $i$012$i$i = 0;
   $xy01$013$i$i = 0.0;
   $xy02$014$i$i = 0.0;
   while (1) {
    $8 = +HEAPF32[$add$ptr36 + ($i$012$i$i << 2) >> 2];
    $add$i$i = $xy01$013$i$i + $8 * $8;
    $add5$i$i = $xy02$014$i$i + $8 * +HEAPF32[$add$ptr5$i + ($i$012$i$i << 2) >> 2];
    $i$012$i$i = $i$012$i$i + 1 | 0;
    if (($i$012$i$i | 0) == ($div4$i | 0)) {
     $xy01$0$lcssa$i$i = $add$i$i;
     $xy02$0$lcssa$i$i = $add5$i$i;
     break;
    } else {
     $xy01$013$i$i = $add$i$i;
     $xy02$014$i$i = $add5$i$i;
    }
   }
  } else {
   $xy01$0$lcssa$i$i = 0.0;
   $xy02$0$lcssa$i$i = 0.0;
  }
  HEAPF32[$vla1$i >> 2] = $xy01$0$lcssa$i$i;
  $i$0171$i = 1;
  $yy$0172$i = $xy01$0$lcssa$i$i;
  do {
   $10 = +HEAPF32[$add$ptr36 + (0 - $i$0171$i << 2) >> 2];
   $11 = +HEAPF32[$add$ptr36 + ($div4$i - $i$0171$i << 2) >> 2];
   $yy$0172$i = $yy$0172$i + $10 * $10 - $11 * $11;
   HEAPF32[$vla1$i + ($i$0171$i << 2) >> 2] = $yy$0172$i < 0.0 ? 0.0 : $yy$0172$i;
   $i$0171$i = $i$0171$i + 1 | 0;
  } while (($i$0171$i | 0) != 513);
  $12 = +HEAPF32[$vla1$i + ($spec$select$i << 2) >> 2];
  $div$i151$i = $xy02$0$lcssa$i$i / +Math_sqrt(+($xy01$0$lcssa$i$i * $12 + 1.0));
  $mul24$i = $spec$select$i << 1;
  $mul73$i = $div$i151$i * .699999988079071;
  $mul69$i = $7 * .5;
  $mul85$i = $div$i151$i * .8500000238418579;
  $T$0165$i = $spec$select$i;
  $best_xy$0168$i = $xy02$0$lcssa$i$i;
  $best_yy$0169$i = $12;
  $g$0167$i = $div$i151$i;
  $k$0166$i = 2;
  while (1) {
   $mul26$i = $k$0166$i << 1;
   $div$i148$i = (($k$0166$i + $mul24$i | 0) >>> 0) / ($mul26$i >>> 0) | 0;
   if (($div$i148$i | 0) < 7) {
    $T$0$lcssa$i = $T$0165$i;
    $best_xy$0$lcssa$i = $best_xy$0168$i;
    $best_yy$0$lcssa$i = $best_yy$0169$i;
    $g$0$lcssa$i = $g$0167$i;
    break;
   }
   if (($k$0166$i | 0) == 2) {
    $add33$i = $div$i148$i + $spec$select$i | 0;
    $T1b$0$i = ($add33$i | 0) > 512 ? $spec$select$i : $add33$i;
   } else $T1b$0$i = (((Math_imul($mul24$i, HEAP32[20240 + ($k$0166$i << 2) >> 2] | 0) | 0) + $k$0166$i | 0) >>> 0) / ($mul26$i >>> 0) | 0;
   $arrayidx47$i = $add$ptr36 + (0 - $div$i148$i << 2) | 0;
   $arrayidx49$i = $add$ptr36 + (0 - $T1b$0$i << 2) | 0;
   if ($cmp11$i$i) {
    $i$012$i133$i = 0;
    $xy01$013$i132$i = 0.0;
    $xy02$014$i131$i = 0.0;
    while (1) {
     $15 = +HEAPF32[$add$ptr36 + ($i$012$i133$i << 2) >> 2];
     $add$i137$i = $xy01$013$i132$i + $15 * +HEAPF32[$arrayidx47$i + ($i$012$i133$i << 2) >> 2];
     $add5$i140$i = $xy02$014$i131$i + $15 * +HEAPF32[$arrayidx49$i + ($i$012$i133$i << 2) >> 2];
     $i$012$i133$i = $i$012$i133$i + 1 | 0;
     if (($i$012$i133$i | 0) == ($div4$i | 0)) {
      $xy01$0$lcssa$i144$i = $add$i137$i;
      $xy02$0$lcssa$i145$i = $add5$i140$i;
      break;
     } else {
      $xy01$013$i132$i = $add$i137$i;
      $xy02$014$i131$i = $add5$i140$i;
     }
    }
   } else {
    $xy01$0$lcssa$i144$i = 0.0;
    $xy02$0$lcssa$i145$i = 0.0;
   }
   $mul51$i = ($xy01$0$lcssa$i144$i + $xy02$0$lcssa$i145$i) * .5;
   $mul55$i = (+HEAPF32[$vla1$i + ($div$i148$i << 2) >> 2] + +HEAPF32[$vla1$i + ($T1b$0$i << 2) >> 2]) * .5;
   $div$i$i = $mul51$i / +Math_sqrt(+($xy01$0$lcssa$i$i * $mul55$i + 1.0));
   $sub57$i = $div$i148$i - $div3$i | 0;
   $21 = ($sub57$i | 0) > -1 ? $sub57$i : 0 - $sub57$i | 0;
   if (($21 | 0) < 2) $cont$0$i = $7; else {
    $22 = (Math_imul($k$0166$i * 5 | 0, $k$0166$i) | 0) < ($spec$select$i | 0) & ($21 | 0) == 2;
    $cont$0$i = $22 ? $mul69$i : 0.0;
   }
   $sub74$i = $mul73$i - $cont$0$i;
   if (($div$i148$i | 0) < 21) {
    $sub86$i = $mul85$i - $cont$0$i;
    $thresh$0$i = $sub86$i < .4000000059604645 ? .4000000059604645 : $sub86$i;
   } else $thresh$0$i = $sub74$i < .30000001192092896 ? .30000001192092896 : $sub74$i;
   if ($div$i$i > $thresh$0$i) {
    $T$2$ph$i = $div$i148$i;
    $best_xy$2$ph$i = $mul51$i;
    $best_yy$2$ph$i = $mul55$i;
    $g$2$ph$i = $div$i$i;
   } else {
    $T$2$ph$i = $T$0165$i;
    $best_xy$2$ph$i = $best_xy$0168$i;
    $best_yy$2$ph$i = $best_yy$0169$i;
    $g$2$ph$i = $g$0167$i;
   }
   $k$0166$i = $k$0166$i + 1 | 0;
   if ($k$0166$i >>> 0 >= 16) {
    $T$0$lcssa$i = $T$2$ph$i;
    $best_xy$0$lcssa$i = $best_xy$2$ph$i;
    $best_yy$0$lcssa$i = $best_yy$2$ph$i;
    $g$0$lcssa$i = $g$2$ph$i;
    break;
   } else {
    $T$0165$i = $T$2$ph$i;
    $best_xy$0168$i = $best_xy$2$ph$i;
    $best_yy$0169$i = $best_yy$2$ph$i;
    $g$0167$i = $g$2$ph$i;
   }
  }
  $cond123$i = $best_xy$0$lcssa$i < 0.0 ? 0.0 : $best_xy$0$lcssa$i;
  $pg$0$i = !($best_yy$0$lcssa$i <= $cond123$i) ? $cond123$i / ($best_yy$0$lcssa$i + 1.0) : 1.0;
  $add133$neg$i = 1 - $T$0$lcssa$i | 0;
  if ($cmp11$i$i) {
   $add$ptr136$us$i = $add$ptr36 + ($add133$neg$i << 2) | 0;
   $i$07$i$us$i = 0;
   $xy$08$i$us$i = 0.0;
   do {
    $xy$08$i$us$i = $xy$08$i$us$i + +HEAPF32[$add$ptr36 + ($i$07$i$us$i << 2) >> 2] * +HEAPF32[$add$ptr136$us$i + ($i$07$i$us$i << 2) >> 2];
    $i$07$i$us$i = $i$07$i$us$i + 1 | 0;
   } while (($i$07$i$us$i | 0) != ($div4$i | 0));
   $add$ptr136$us$1$i = $add$ptr36 + ($add133$neg$i + -1 << 2) | 0;
   $i$07$i$us$1$i = 0;
   $xy$08$i$us$1$i = 0.0;
   do {
    $xy$08$i$us$1$i = $xy$08$i$us$1$i + +HEAPF32[$add$ptr36 + ($i$07$i$us$1$i << 2) >> 2] * +HEAPF32[$add$ptr136$us$1$i + ($i$07$i$us$1$i << 2) >> 2];
    $i$07$i$us$1$i = $i$07$i$us$1$i + 1 | 0;
   } while (($i$07$i$us$1$i | 0) != ($div4$i | 0));
   $add$ptr136$us$2$i = $add$ptr36 + ($add133$neg$i + -2 << 2) | 0;
   $i$07$i$us$2$i = 0;
   $xy$08$i$us$2$i = 0.0;
   while (1) {
    $add$i123$us$2$i = $xy$08$i$us$2$i + +HEAPF32[$add$ptr36 + ($i$07$i$us$2$i << 2) >> 2] * +HEAPF32[$add$ptr136$us$2$i + ($i$07$i$us$2$i << 2) >> 2];
    $i$07$i$us$2$i = $i$07$i$us$2$i + 1 | 0;
    if (($i$07$i$us$2$i | 0) == ($div4$i | 0)) {
     $29 = $add$i123$us$2$i;
     $30 = $xy$08$i$us$i;
     $31 = $xy$08$i$us$1$i;
     break;
    } else $xy$08$i$us$2$i = $add$i123$us$2$i;
   }
  } else {
   $29 = 0.0;
   $30 = 0.0;
   $31 = 0.0;
  }
  $add168$i = ($29 - $30 > ($31 - $30) * .699999988079071 ? 1 : ($30 - $29 > ($31 - $29) * .699999988079071) << 31 >> 31) + ($T$0$lcssa$i << 1) | 0;
  $spec$select117$i = ($add168$i | 0) > 15 ? $add168$i : 15;
  HEAP32[$pitch_index >> 2] = $spec$select117$i;
  if (($spec$select117$i | 0) > 1022) {
   HEAP32[$pitch_index >> 2] = 1022;
   $72 = 1022;
  } else $72 = $spec$select117$i;
  $mul41 = ($pg$0$i > $g$0$lcssa$i ? $g$0$lcssa$i : $pg$0$i) * .699999988079071;
  $33 = HEAP32[$st + 56 >> 2] | 0;
  $spec$select = ($33 | 0) > 2 ? $mul41 * .5 : $mul41;
  _llvm_stackrestore($4 | 0);
  $37 = $72;
  $gain1$3 = ($33 | 0) > 8 ? 0.0 : ($33 | 0) > 4 ? $spec$select * .5 : $spec$select;
 }
 if (!(HEAP32[$analysis >> 2] | 0)) $gain1$4 = $gain1$3; else $gain1$4 = $gain1$3 * +HEAPF32[$analysis + 40 >> 2];
 $prefilter_period60 = $st + 104 | 0;
 $36 = HEAP32[$prefilter_period60 >> 2] | 0;
 $sub61 = $37 - $36 | 0;
 $spec$select164 = ((($sub61 | 0) > -1 ? $sub61 : 0 - $sub61 | 0) * 10 | 0) > ($37 | 0) ? .4000000059604645 : .20000000298023224;
 $pf_threshold$1 = ($nbAvailableBytes | 0) < 25 ? $spec$select164 + .10000000149011612 : $spec$select164;
 $spec$select165 = ($nbAvailableBytes | 0) < 35 ? $pf_threshold$1 + .10000000149011612 : $pf_threshold$1;
 $prefilter_gain76 = $st + 108 | 0;
 $39 = +HEAPF32[$prefilter_gain76 >> 2];
 $pf_threshold$3 = $39 > .4000000059604645 ? $spec$select165 + -.10000000149011612 : $spec$select165;
 $pf_threshold$4 = $39 > .550000011920929 ? $pf_threshold$3 + -.10000000149011612 : $pf_threshold$3;
 if ($gain1$4 < ($pf_threshold$4 > .20000000298023224 ? $pf_threshold$4 : .20000000298023224)) {
  $gain1$6 = 0.0;
  $pf_on$0 = 0;
  $qg$0 = 0;
 } else {
  $cmp93 = +Math_abs(+($gain1$4 - $39)) < .10000000149011612;
  $sub102 = ~~+Math_floor(+(($cmp93 ? $39 : $gain1$4) * 32.0 / 3.0 + .5)) + -1 | 0;
  $cond108 = ($sub102 | 0) < 7 ? $sub102 : 7;
  $spec$select166 = ($cond108 | 0) > 0 ? $cond108 : 0;
  $gain1$6 = +($spec$select166 + 1 | 0) * .09375;
  $pf_on$0 = 1;
  $qg$0 = $spec$select166;
 }
 $shortMdctSize = $0 + 44 | 0;
 $mul142 = $1 << 2;
 $sub186 = -$gain1$6;
 $prefilter_tapset187 = $st + 112 | 0;
 $window = $0 + 60 | 0;
 $mul236 = 4096 - $mul19 | 0;
 $idx$neg = 0 - $N | 0;
 if (($N | 0) > 1024) {
  $45 = $36;
  $c$1$us = 0;
  while (1) {
   $sub126$us = (HEAP32[$shortMdctSize >> 2] | 0) - $1 | 0;
   HEAP32[$prefilter_period60 >> 2] = ($45 | 0) > 15 ? $45 : 15;
   $add$ptr138$us = $in + ((Math_imul($c$1$us, $add15) | 0) << 2) | 0;
   $add$ptr141$us = $st + 244 + ((Math_imul($c$1$us, $1) | 0) << 2) | 0;
   _memcpy($add$ptr138$us | 0, $add$ptr141$us | 0, $mul142 | 0) | 0;
   if (!$sub126$us) {
    $$pre171 = $pre + ($c$1$us << 2) | 0;
    $51 = HEAP32[$$pre171 >> 2] | 0;
    $arrayidx179$us$pre$phiZZ2D = $$pre171;
   } else {
    $arrayidx162$us = $pre + ($c$1$us << 2) | 0;
    $46 = HEAP32[$arrayidx162$us >> 2] | 0;
    $47 = HEAP32[$prefilter_period60 >> 2] | 0;
    $sub167$us = -+HEAPF32[$prefilter_gain76 >> 2];
    $49 = HEAP32[$prefilter_tapset187 >> 2] | 0;
    _comb_filter($add$ptr138$us + ($1 << 2) | 0, $46 + 4096 | 0, $47, $47, $sub126$us, $sub167$us, $sub167$us, $49, $49, 0, 0);
    $51 = $46;
    $arrayidx179$us$pre$phiZZ2D = $arrayidx162$us;
   }
   _comb_filter($add$ptr138$us + ($1 << 2) + ($sub126$us << 2) | 0, $51 + 4096 + ($sub126$us << 2) | 0, HEAP32[$prefilter_period60 >> 2] | 0, $37, $N - $sub126$us | 0, -+HEAPF32[$prefilter_gain76 >> 2], $sub186, HEAP32[$prefilter_tapset187 >> 2] | 0, $prefilter_tapset, HEAP32[$window >> 2] | 0, $1);
   _memcpy($add$ptr141$us | 0, $add$ptr138$us + ($N << 2) | 0, $mul142 | 0) | 0;
   _memcpy($prefilter_mem + ($c$1$us << 10 << 2) | 0, (HEAP32[$arrayidx179$us$pre$phiZZ2D >> 2] | 0) + ($N << 2) | 0, 4096) | 0;
   $inc270$us = $c$1$us + 1 | 0;
   if (($inc270$us | 0) >= ($CC | 0)) break;
   $45 = HEAP32[$prefilter_period60 >> 2] | 0;
   $c$1$us = $inc270$us;
  }
  HEAPF32[$gain >> 2] = $gain1$6;
  HEAP32[$pitch >> 2] = $37;
  HEAP32[$qgain >> 2] = $qg$0;
  _llvm_stackrestore($2 | 0);
  STACKTOP = sp;
  return $pf_on$0 | 0;
 } else {
  $59 = $36;
  $c$1 = 0;
  while (1) {
   $sub126 = (HEAP32[$shortMdctSize >> 2] | 0) - $1 | 0;
   HEAP32[$prefilter_period60 >> 2] = ($59 | 0) > 15 ? $59 : 15;
   $add$ptr138 = $in + ((Math_imul($c$1, $add15) | 0) << 2) | 0;
   $add$ptr141 = $st + 244 + ((Math_imul($c$1, $1) | 0) << 2) | 0;
   _memcpy($add$ptr138 | 0, $add$ptr141 | 0, $mul142 | 0) | 0;
   if (!$sub126) {
    $$pre173 = $pre + ($c$1 << 2) | 0;
    $65 = HEAP32[$$pre173 >> 2] | 0;
    $arrayidx179$pre$phiZ2D = $$pre173;
   } else {
    $arrayidx162 = $pre + ($c$1 << 2) | 0;
    $60 = HEAP32[$arrayidx162 >> 2] | 0;
    $61 = HEAP32[$prefilter_period60 >> 2] | 0;
    $sub167 = -+HEAPF32[$prefilter_gain76 >> 2];
    $63 = HEAP32[$prefilter_tapset187 >> 2] | 0;
    _comb_filter($add$ptr138 + ($1 << 2) | 0, $60 + 4096 | 0, $61, $61, $sub126, $sub167, $sub167, $63, $63, 0, 0);
    $65 = $60;
    $arrayidx179$pre$phiZ2D = $arrayidx162;
   }
   _comb_filter($add$ptr138 + ($1 << 2) + ($sub126 << 2) | 0, $65 + 4096 + ($sub126 << 2) | 0, HEAP32[$prefilter_period60 >> 2] | 0, $37, $N - $sub126 | 0, -+HEAPF32[$prefilter_gain76 >> 2], $sub186, HEAP32[$prefilter_tapset187 >> 2] | 0, $prefilter_tapset, HEAP32[$window >> 2] | 0, $1);
   _memcpy($add$ptr141 | 0, $add$ptr138 + ($N << 2) | 0, $mul142 | 0) | 0;
   $add$ptr216 = $prefilter_mem + ($c$1 << 10 << 2) | 0;
   _memmove($add$ptr216 | 0, $add$ptr216 + ($N << 2) | 0, $mul236 | 0) | 0;
   _memcpy($add$ptr216 + 4096 + ($idx$neg << 2) | 0, (HEAP32[$arrayidx179$pre$phiZ2D >> 2] | 0) + 4096 | 0, $mul19 | 0) | 0;
   $inc270 = $c$1 + 1 | 0;
   if (($inc270 | 0) >= ($CC | 0)) break;
   $59 = HEAP32[$prefilter_period60 >> 2] | 0;
   $c$1 = $inc270;
  }
  HEAPF32[$gain >> 2] = $gain1$6;
  HEAP32[$pitch >> 2] = $37;
  HEAP32[$qgain >> 2] = $qg$0;
  _llvm_stackrestore($2 | 0);
  STACKTOP = sp;
  return $pf_on$0 | 0;
 }
 return 0;
}

function _silk_quant_LTP_gains($B_Q14, $cbk_index, $periodicity_index, $sum_log_gain_Q7, $pred_gain_dB_Q7, $XX_Q17, $xX_Q17, $subfr_len, $nb_subfr) {
 $B_Q14 = $B_Q14 | 0;
 $cbk_index = $cbk_index | 0;
 $periodicity_index = $periodicity_index | 0;
 $sum_log_gain_Q7 = $sum_log_gain_Q7 | 0;
 $pred_gain_dB_Q7 = $pred_gain_dB_Q7 | 0;
 $XX_Q17 = $XX_Q17 | 0;
 $xX_Q17 = $xX_Q17 | 0;
 $subfr_len = $subfr_len | 0;
 $nb_subfr = $nb_subfr | 0;
 var $20 = 0, $21 = 0, $25 = 0, $34 = 0, $37 = 0, $5 = 0, $9 = 0, $XX_Q17_ptr$056$us = 0, $XX_Q17_ptr$056$us$1 = 0, $XX_Q17_ptr$056$us$2 = 0, $add$us = 0, $add$us$1 = 0, $add$us$2 = 0, $add10$us$2 = 0, $add12$us = 0, $add12$us$1 = 0, $add12$us$2 = 0, $add20$us = 0, $add20$us$1 = 0, $add20$us$2 = 0, $add6$i129 = 0, $add6$i208 = 0, $add6$i25 = 0, $add6$i50 = 0, $add8$i210212 = 0, $and$i = 0, $and$i$i = 0, $and$i$i124 = 0, $and$i$i149 = 0, $and$i$i20 = 0, $and$i$i203 = 0, $and$i$i45 = 0, $and$i$i99 = 0, $and$i163 = 0, $and$i59 = 0, $arrayidx50 = 0, $best_sum_log_gain_Q7$0$lcssa74 = 0, $best_sum_log_gain_Q7$1$us$1 = 0, $best_sum_log_gain_Q7$1$us$2 = 0, $cmp$i$i$i110 = 0, $cmp$i$i$i31 = 0, $cmp$i$i$i6 = 0, $cond33$us = 0, $cond33$us$1 = 0, $cond33$us$2 = 0, $gain_Q7 = 0, $j$061$us = 0, $j$061$us$1 = 0, $j$061$us$2 = 0, $j$154 = 0, $min_rate_dist_Q7$1$us$1 = 0, $mul$i205 = 0, $mul4$i206 = 0, $mul57 = 0, $mul75 = 0, $rate_dist_Q7$059$us = 0, $rate_dist_Q7$059$us$1 = 0, $rate_dist_Q7$059$us$2 = 0, $rate_dist_Q7_subfr = 0, $res_nrg_Q15$0$lcssa73 = 0, $res_nrg_Q15$158$us$2 = 0, $res_nrg_Q15$2 = 0, $res_nrg_Q15_subfr = 0, $retval$0$i = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i123 = 0, $retval$0$i$i$i148 = 0, $retval$0$i$i$i19 = 0, $retval$0$i$i$i202 = 0, $retval$0$i$i$i44 = 0, $retval$0$i$i$i98 = 0, $retval$0$i185 = 0, $retval$0$i81 = 0, $sext = 0, $shl$i = 0, $shl$i162 = 0, $shl$i209 = 0, $shl$i58 = 0, $shr18$i = 0, $shr18$i161 = 0, $shr18$i57 = 0, $shr22$pn$i = 0, $shr22$pn$i182 = 0, $shr22$pn$i78 = 0, $sub$i$i$i109 = 0, $sub$i$i$i30 = 0, $sub$i$i$i5 = 0, $sub$i$i108 = 0, $sub$i$i187 = 0, $sub$i$i29 = 0, $sub$i$i4 = 0, $sub$i204 = 0, $sub7$i207 = 0, $sub72213 = 0, $sum_log_gain_tmp_Q7$060$us = 0, $sum_log_gain_tmp_Q7$060$us$1 = 0, $sum_log_gain_tmp_Q7$060$us$2 = 0, $temp_idx = 0, $xX_Q17_ptr$057$us = 0, $xX_Q17_ptr$057$us$1 = 0, $xX_Q17_ptr$057$us$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp_idx = sp + 12 | 0;
 $res_nrg_Q15_subfr = sp + 8 | 0;
 $rate_dist_Q7_subfr = sp + 4 | 0;
 $gain_Q7 = sp;
 if (($nb_subfr | 0) > 0) {
  $XX_Q17_ptr$056$us = $XX_Q17;
  $j$061$us = 0;
  $rate_dist_Q7$059$us = 0;
  $sum_log_gain_tmp_Q7$060$us = HEAP32[$sum_log_gain_Q7 >> 2] | 0;
  $xX_Q17_ptr$057$us = $xX_Q17;
  while (1) {
   $add$us = 6229 - $sum_log_gain_tmp_Q7$060$us | 0;
   if (($add$us | 0) < 0) $retval$0$i = 0; else if (($add$us | 0) > 3966) $retval$0$i = 2147483647; else {
    $shr18$i = $add$us >>> 7;
    $shl$i = 1 << $shr18$i;
    $and$i = $add$us & 127;
    if (($add$us | 0) < 2048) $shr22$pn$i = ((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i << $shr18$i >> 7; else $shr22$pn$i = Math_imul(((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i | 0, $shl$i >> 7) | 0;
    $retval$0$i = $shr22$pn$i + $shl$i | 0;
   }
   _silk_VQ_WMat_EC_c($temp_idx + $j$061$us | 0, $res_nrg_Q15_subfr, $rate_dist_Q7_subfr, $gain_Q7, $XX_Q17_ptr$056$us, $xX_Q17_ptr$057$us, 20992, 51872, 51864, $subfr_len, $retval$0$i + -51 | 0, 8);
   $add12$us = (HEAP32[$rate_dist_Q7_subfr >> 2] | 0) + $rate_dist_Q7$059$us | 0;
   $rate_dist_Q7$059$us = $add12$us >>> 0 < 2147483647 ? $add12$us : 2147483647;
   $add20$us = (HEAP32[$gain_Q7 >> 2] | 0) + 51 | 0;
   $5 = Math_clz32($add20$us | 0) | 0;
   $sub$i$i29 = 24 - $5 | 0;
   $sub$i$i$i30 = 0 - $sub$i$i29 | 0;
   $cmp$i$i$i31 = ($sub$i$i29 | 0) == 0;
   do if ($cmp$i$i$i31) $retval$0$i$i$i44 = $add20$us; else if (($sub$i$i29 | 0) < 0) {
    $retval$0$i$i$i44 = $add20$us >>> ($sub$i$i29 + 32 | 0) | $add20$us << $sub$i$i$i30;
    break;
   } else {
    $retval$0$i$i$i44 = $add20$us << 32 - $sub$i$i29 | $add20$us >>> $sub$i$i29;
    break;
   } while (0);
   $and$i$i45 = $retval$0$i$i$i44 & 127;
   $add6$i50 = 3968 - ($5 << 7) | 0;
   if ((($add6$i50 | $and$i$i45) + ((Math_imul($and$i$i45 * 179 | 0, 128 - $and$i$i45 | 0) | 0) >>> 16) + $sum_log_gain_tmp_Q7$060$us | 0) < 896) $cond33$us = 0; else {
    do if ($cmp$i$i$i31) $retval$0$i$i$i148 = $add20$us; else if (($sub$i$i29 | 0) < 0) {
     $retval$0$i$i$i148 = $add20$us >>> ($sub$i$i29 + 32 | 0) | $add20$us << $sub$i$i$i30;
     break;
    } else {
     $retval$0$i$i$i148 = $add20$us << 32 - $sub$i$i29 | $add20$us >>> $sub$i$i29;
     break;
    } while (0);
    $and$i$i149 = $retval$0$i$i$i148 & 127;
    $cond33$us = $sum_log_gain_tmp_Q7$060$us + -896 + (($add6$i50 | $and$i$i149) + ((Math_imul($and$i$i149 * 179 | 0, 128 - $and$i$i149 | 0) | 0) >>> 16)) | 0;
   }
   $j$061$us = $j$061$us + 1 | 0;
   if (($j$061$us | 0) == ($nb_subfr | 0)) break; else {
    $XX_Q17_ptr$056$us = $XX_Q17_ptr$056$us + 100 | 0;
    $sum_log_gain_tmp_Q7$060$us = $cond33$us;
    $xX_Q17_ptr$057$us = $xX_Q17_ptr$057$us + 20 | 0;
   }
  }
  HEAP8[$periodicity_index >> 0] = 0;
  _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
  $XX_Q17_ptr$056$us$1 = $XX_Q17;
  $j$061$us$1 = 0;
  $rate_dist_Q7$059$us$1 = 0;
  $sum_log_gain_tmp_Q7$060$us$1 = HEAP32[$sum_log_gain_Q7 >> 2] | 0;
  $xX_Q17_ptr$057$us$1 = $xX_Q17;
  while (1) {
   $add$us$1 = 6229 - $sum_log_gain_tmp_Q7$060$us$1 | 0;
   if (($add$us$1 | 0) < 0) $retval$0$i185 = 0; else if (($add$us$1 | 0) > 3966) $retval$0$i185 = 2147483647; else {
    $shr18$i161 = $add$us$1 >>> 7;
    $shl$i162 = 1 << $shr18$i161;
    $and$i163 = $add$us$1 & 127;
    if (($add$us$1 | 0) < 2048) $shr22$pn$i182 = ((Math_imul(Math_imul($and$i163, -174) | 0, 128 - $and$i163 | 0) | 0) >> 16) + $and$i163 << $shr18$i161 >> 7; else $shr22$pn$i182 = Math_imul(((Math_imul(Math_imul($and$i163, -174) | 0, 128 - $and$i163 | 0) | 0) >> 16) + $and$i163 | 0, $shl$i162 >> 7) | 0;
    $retval$0$i185 = $shr22$pn$i182 + $shl$i162 | 0;
   }
   _silk_VQ_WMat_EC_c($temp_idx + $j$061$us$1 | 0, $res_nrg_Q15_subfr, $rate_dist_Q7_subfr, $gain_Q7, $XX_Q17_ptr$056$us$1, $xX_Q17_ptr$057$us$1, 21040, 21280, 20944, $subfr_len, $retval$0$i185 + -51 | 0, 16);
   $add12$us$1 = (HEAP32[$rate_dist_Q7_subfr >> 2] | 0) + $rate_dist_Q7$059$us$1 | 0;
   $rate_dist_Q7$059$us$1 = $add12$us$1 >>> 0 < 2147483647 ? $add12$us$1 : 2147483647;
   $add20$us$1 = (HEAP32[$gain_Q7 >> 2] | 0) + 51 | 0;
   $25 = Math_clz32($add20$us$1 | 0) | 0;
   $sub$i$i108 = 24 - $25 | 0;
   $sub$i$i$i109 = 0 - $sub$i$i108 | 0;
   $cmp$i$i$i110 = ($sub$i$i108 | 0) == 0;
   do if ($cmp$i$i$i110) $retval$0$i$i$i123 = $add20$us$1; else if (($sub$i$i108 | 0) < 0) {
    $retval$0$i$i$i123 = $add20$us$1 >>> ($sub$i$i108 + 32 | 0) | $add20$us$1 << $sub$i$i$i109;
    break;
   } else {
    $retval$0$i$i$i123 = $add20$us$1 << 32 - $sub$i$i108 | $add20$us$1 >>> $sub$i$i108;
    break;
   } while (0);
   $and$i$i124 = $retval$0$i$i$i123 & 127;
   $add6$i129 = 3968 - ($25 << 7) | 0;
   if ((($add6$i129 | $and$i$i124) + ((Math_imul($and$i$i124 * 179 | 0, 128 - $and$i$i124 | 0) | 0) >>> 16) + $sum_log_gain_tmp_Q7$060$us$1 | 0) < 896) $cond33$us$1 = 0; else {
    do if ($cmp$i$i$i110) $retval$0$i$i$i98 = $add20$us$1; else if (($sub$i$i108 | 0) < 0) {
     $retval$0$i$i$i98 = $add20$us$1 >>> ($sub$i$i108 + 32 | 0) | $add20$us$1 << $sub$i$i$i109;
     break;
    } else {
     $retval$0$i$i$i98 = $add20$us$1 << 32 - $sub$i$i108 | $add20$us$1 >>> $sub$i$i108;
     break;
    } while (0);
    $and$i$i99 = $retval$0$i$i$i98 & 127;
    $cond33$us$1 = $sum_log_gain_tmp_Q7$060$us$1 + -896 + (($add6$i129 | $and$i$i99) + ((Math_imul($and$i$i99 * 179 | 0, 128 - $and$i$i99 | 0) | 0) >>> 16)) | 0;
   }
   $j$061$us$1 = $j$061$us$1 + 1 | 0;
   if (($j$061$us$1 | 0) == ($nb_subfr | 0)) break; else {
    $XX_Q17_ptr$056$us$1 = $XX_Q17_ptr$056$us$1 + 100 | 0;
    $sum_log_gain_tmp_Q7$060$us$1 = $cond33$us$1;
    $xX_Q17_ptr$057$us$1 = $xX_Q17_ptr$057$us$1 + 20 | 0;
   }
  }
  if (($rate_dist_Q7$059$us$1 | 0) > ($rate_dist_Q7$059$us | 0)) {
   $best_sum_log_gain_Q7$1$us$1 = $cond33$us;
   $min_rate_dist_Q7$1$us$1 = $add12$us;
  } else {
   HEAP8[$periodicity_index >> 0] = 1;
   _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
   $best_sum_log_gain_Q7$1$us$1 = $cond33$us$1;
   $min_rate_dist_Q7$1$us$1 = $rate_dist_Q7$059$us$1;
  }
  $XX_Q17_ptr$056$us$2 = $XX_Q17;
  $j$061$us$2 = 0;
  $rate_dist_Q7$059$us$2 = 0;
  $res_nrg_Q15$158$us$2 = 0;
  $sum_log_gain_tmp_Q7$060$us$2 = HEAP32[$sum_log_gain_Q7 >> 2] | 0;
  $xX_Q17_ptr$057$us$2 = $xX_Q17;
  while (1) {
   $add$us$2 = 6229 - $sum_log_gain_tmp_Q7$060$us$2 | 0;
   if (($add$us$2 | 0) < 0) $retval$0$i81 = 0; else if (($add$us$2 | 0) > 3966) $retval$0$i81 = 2147483647; else {
    $shr18$i57 = $add$us$2 >>> 7;
    $shl$i58 = 1 << $shr18$i57;
    $and$i59 = $add$us$2 & 127;
    if (($add$us$2 | 0) < 2048) $shr22$pn$i78 = ((Math_imul(Math_imul($and$i59, -174) | 0, 128 - $and$i59 | 0) | 0) >> 16) + $and$i59 << $shr18$i57 >> 7; else $shr22$pn$i78 = Math_imul(((Math_imul(Math_imul($and$i59, -174) | 0, 128 - $and$i59 | 0) | 0) >> 16) + $and$i59 | 0, $shl$i58 >> 7) | 0;
    $retval$0$i81 = $shr22$pn$i78 + $shl$i58 | 0;
   }
   _silk_VQ_WMat_EC_c($temp_idx + $j$061$us$2 | 0, $res_nrg_Q15_subfr, $rate_dist_Q7_subfr, $gain_Q7, $XX_Q17_ptr$056$us$2, $xX_Q17_ptr$057$us$2, 21120, 21296, 20960, $subfr_len, $retval$0$i81 + -51 | 0, 32);
   $add10$us$2 = (HEAP32[$res_nrg_Q15_subfr >> 2] | 0) + $res_nrg_Q15$158$us$2 | 0;
   $res_nrg_Q15$158$us$2 = $add10$us$2 >>> 0 < 2147483647 ? $add10$us$2 : 2147483647;
   $add12$us$2 = (HEAP32[$rate_dist_Q7_subfr >> 2] | 0) + $rate_dist_Q7$059$us$2 | 0;
   $rate_dist_Q7$059$us$2 = $add12$us$2 >>> 0 < 2147483647 ? $add12$us$2 : 2147483647;
   $add20$us$2 = (HEAP32[$gain_Q7 >> 2] | 0) + 51 | 0;
   $34 = Math_clz32($add20$us$2 | 0) | 0;
   $sub$i$i4 = 24 - $34 | 0;
   $sub$i$i$i5 = 0 - $sub$i$i4 | 0;
   $cmp$i$i$i6 = ($sub$i$i4 | 0) == 0;
   do if ($cmp$i$i$i6) $retval$0$i$i$i19 = $add20$us$2; else if (($sub$i$i4 | 0) < 0) {
    $retval$0$i$i$i19 = $add20$us$2 >>> ($sub$i$i4 + 32 | 0) | $add20$us$2 << $sub$i$i$i5;
    break;
   } else {
    $retval$0$i$i$i19 = $add20$us$2 << 32 - $sub$i$i4 | $add20$us$2 >>> $sub$i$i4;
    break;
   } while (0);
   $and$i$i20 = $retval$0$i$i$i19 & 127;
   $add6$i25 = 3968 - ($34 << 7) | 0;
   if ((($add6$i25 | $and$i$i20) + ((Math_imul($and$i$i20 * 179 | 0, 128 - $and$i$i20 | 0) | 0) >>> 16) + $sum_log_gain_tmp_Q7$060$us$2 | 0) < 896) $cond33$us$2 = 0; else {
    do if ($cmp$i$i$i6) $retval$0$i$i$i = $add20$us$2; else if (($sub$i$i4 | 0) < 0) {
     $retval$0$i$i$i = $add20$us$2 >>> ($sub$i$i4 + 32 | 0) | $add20$us$2 << $sub$i$i$i5;
     break;
    } else {
     $retval$0$i$i$i = $add20$us$2 << 32 - $sub$i$i4 | $add20$us$2 >>> $sub$i$i4;
     break;
    } while (0);
    $and$i$i = $retval$0$i$i$i & 127;
    $cond33$us$2 = $sum_log_gain_tmp_Q7$060$us$2 + -896 + (($add6$i25 | $and$i$i) + ((Math_imul($and$i$i * 179 | 0, 128 - $and$i$i | 0) | 0) >>> 16)) | 0;
   }
   $j$061$us$2 = $j$061$us$2 + 1 | 0;
   if (($j$061$us$2 | 0) == ($nb_subfr | 0)) break; else {
    $XX_Q17_ptr$056$us$2 = $XX_Q17_ptr$056$us$2 + 100 | 0;
    $sum_log_gain_tmp_Q7$060$us$2 = $cond33$us$2;
    $xX_Q17_ptr$057$us$2 = $xX_Q17_ptr$057$us$2 + 20 | 0;
   }
  }
  if (($rate_dist_Q7$059$us$2 | 0) > ($min_rate_dist_Q7$1$us$1 | 0)) $best_sum_log_gain_Q7$1$us$2 = $best_sum_log_gain_Q7$1$us$1; else {
   HEAP8[$periodicity_index >> 0] = 2;
   _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
   $best_sum_log_gain_Q7$1$us$2 = $cond33$us$2;
  }
  $9 = HEAP32[44008 + (HEAP8[$periodicity_index >> 0] << 2) >> 2] | 0;
  $j$154 = 0;
  do {
   $arrayidx50 = $cbk_index + $j$154 | 0;
   $mul57 = $j$154 * 5 | 0;
   HEAP16[$B_Q14 + ($mul57 << 1) >> 1] = HEAP8[$9 + ((HEAP8[$arrayidx50 >> 0] | 0) * 5 | 0) >> 0] << 7;
   HEAP16[$B_Q14 + ($mul57 + 1 << 1) >> 1] = HEAP8[$9 + (((HEAP8[$arrayidx50 >> 0] | 0) * 5 | 0) + 1) >> 0] << 7;
   HEAP16[$B_Q14 + ($mul57 + 2 << 1) >> 1] = HEAP8[$9 + (((HEAP8[$arrayidx50 >> 0] | 0) * 5 | 0) + 2) >> 0] << 7;
   HEAP16[$B_Q14 + ($mul57 + 3 << 1) >> 1] = HEAP8[$9 + (((HEAP8[$arrayidx50 >> 0] | 0) * 5 | 0) + 3) >> 0] << 7;
   HEAP16[$B_Q14 + ($mul57 + 4 << 1) >> 1] = HEAP8[$9 + (((HEAP8[$arrayidx50 >> 0] | 0) * 5 | 0) + 4) >> 0] << 7;
   $j$154 = $j$154 + 1 | 0;
  } while (($j$154 | 0) != ($nb_subfr | 0));
  $best_sum_log_gain_Q7$0$lcssa74 = $best_sum_log_gain_Q7$1$us$2;
  $res_nrg_Q15$0$lcssa73 = $res_nrg_Q15$158$us$2;
 } else {
  _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
  HEAP8[$periodicity_index >> 0] = 1;
  _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
  $37 = HEAP32[$sum_log_gain_Q7 >> 2] | 0;
  HEAP8[$periodicity_index >> 0] = 2;
  _memcpy($cbk_index | 0, $temp_idx | 0, $nb_subfr | 0) | 0;
  $best_sum_log_gain_Q7$0$lcssa74 = $37;
  $res_nrg_Q15$0$lcssa73 = 0;
 }
 $res_nrg_Q15$2 = $res_nrg_Q15$0$lcssa73 >>> (($nb_subfr | 0) == 2 ? 1 : 2);
 HEAP32[$sum_log_gain_Q7 >> 2] = $best_sum_log_gain_Q7$0$lcssa74;
 $20 = Math_clz32($res_nrg_Q15$2 | 0) | 0;
 $sub$i$i187 = 24 - $20 | 0;
 if (!$sub$i$i187) {
  $retval$0$i$i$i202 = $res_nrg_Q15$2;
  $and$i$i203 = $retval$0$i$i$i202 & 127;
  $sub$i204 = 128 - $and$i$i203 | 0;
  $mul$i205 = $and$i$i203 * 179 | 0;
  $mul4$i206 = Math_imul($mul$i205, $sub$i204) | 0;
  $sub7$i207 = $20 << 7;
  $add6$i208 = 3968 - $sub7$i207 | 0;
  $shl$i209 = $add6$i208 | $and$i$i203;
  $add8$i210212 = $shl$i209 << 16;
  $21 = $add8$i210212 + $mul4$i206 | 0;
  $sub72213 = $21 + -125829120 | 0;
  $sext = $sub72213 >> 16;
  $mul75 = Math_imul($sext, -3) | 0;
  HEAP32[$pred_gain_dB_Q7 >> 2] = $mul75;
  STACKTOP = sp;
  return;
 }
 if (($sub$i$i187 | 0) < 0) {
  $retval$0$i$i$i202 = $res_nrg_Q15$2 >>> ($sub$i$i187 + 32 | 0) | $res_nrg_Q15$2 << 0 - $sub$i$i187;
  $and$i$i203 = $retval$0$i$i$i202 & 127;
  $sub$i204 = 128 - $and$i$i203 | 0;
  $mul$i205 = $and$i$i203 * 179 | 0;
  $mul4$i206 = Math_imul($mul$i205, $sub$i204) | 0;
  $sub7$i207 = $20 << 7;
  $add6$i208 = 3968 - $sub7$i207 | 0;
  $shl$i209 = $add6$i208 | $and$i$i203;
  $add8$i210212 = $shl$i209 << 16;
  $21 = $add8$i210212 + $mul4$i206 | 0;
  $sub72213 = $21 + -125829120 | 0;
  $sext = $sub72213 >> 16;
  $mul75 = Math_imul($sext, -3) | 0;
  HEAP32[$pred_gain_dB_Q7 >> 2] = $mul75;
  STACKTOP = sp;
  return;
 } else {
  $retval$0$i$i$i202 = $res_nrg_Q15$2 << 32 - $sub$i$i187 | $res_nrg_Q15$2 >>> $sub$i$i187;
  $and$i$i203 = $retval$0$i$i$i202 & 127;
  $sub$i204 = 128 - $and$i$i203 | 0;
  $mul$i205 = $and$i$i203 * 179 | 0;
  $mul4$i206 = Math_imul($mul$i205, $sub$i204) | 0;
  $sub7$i207 = $20 << 7;
  $add6$i208 = 3968 - $sub7$i207 | 0;
  $shl$i209 = $add6$i208 | $and$i$i203;
  $add8$i210212 = $shl$i209 << 16;
  $21 = $add8$i210212 + $mul4$i206 | 0;
  $sub72213 = $21 + -125829120 | 0;
  $sext = $sub72213 >> 16;
  $mul75 = Math_imul($sext, -3) | 0;
  HEAP32[$pred_gain_dB_Q7 >> 2] = $mul75;
  STACKTOP = sp;
  return;
 }
}

function _silk_control_encoder($psEnc, $encControl, $allow_bw_switch, $channelNb, $force_fs_kHz) {
 $psEnc = $psEnc | 0;
 $encControl = $encControl | 0;
 $allow_bw_switch = $allow_bw_switch | 0;
 $channelNb = $channelNb | 0;
 $force_fs_kHz = $force_fs_kHz | 0;
 var $$58$i = 0, $$sink61 = 0, $$sink62 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $LBRR_enabled$i = 0, $PacketSize_ms1$i = 0, $add$i = 0, $cmp111$i = 0, $cmp62$i = 0, $cond$i$i = 0, $cond89$i = 0, $controlled_since_last_payload = 0, $conv16$i = 0, $conv165$i = 0, $conv37$i = 0, $encControl$idx$val = 0, $fs_kHz$0$i = 0, $fs_kHz1$i = 0, $maxBits$i = 0, $maxBits113$i = 0, $mode108$i = 0, $mode127$i = 0, $mode55$i = 0, $mul$i4 = 0, $mul$i50 = 0, $mul11$i = 0, $mul151$i = 0, $mul161$i = 0, $mul25$i = 0, $mul39$i = 0, $mul53$i = 0, $mul69$i = 0, $mul83$i = 0, $mul89$i$sink = 0, $orig_kHz$0$i = 0, $pitchEstimationComplexity64$i = 0, $pitchEstimationLPCOrder$i = 0, $pitchEstimationLPCOrder22$i = 0, $pitchEstimationLPCOrder36$i = 0, $pitchEstimationLPCOrder50$i = 0, $pitchEstimationLPCOrder66$i = 0, $pitchEstimationLPCOrder8$i = 0, $pitchEstimationLPCOrder80$i = 0, $pitchEstimationLPCOrder97$pre$phi$iZ2D = 0, $pitch_contour_iCDF$i = 0, $pitch_contour_iCDF115$i = 0, $pitch_contour_iCDF52$i = 0, $pitch_lag_low_bits_iCDF206$i = 0, $ret$0$i = 0, $ret$1$i = 0, $retval$0 = 0, $sLP38$i = 0, $sext$i3 = 0, $sext85$i = 0, $silk_NLSF_CB_WB$sink = 0, $spec$select = 0, $sub$i = 0, $transition_frame_no$i = 0;
 HEAP32[$psEnc + 6076 >> 2] = HEAP32[$encControl + 48 >> 2];
 HEAP32[$psEnc + 4676 >> 2] = HEAP32[$encControl + 52 >> 2];
 $2 = HEAP32[$encControl + 8 >> 2] | 0;
 HEAP32[$psEnc + 4556 >> 2] = $2;
 $3 = HEAP32[$encControl + 12 >> 2] | 0;
 HEAP32[$psEnc + 4564 >> 2] = $3;
 $4 = HEAP32[$encControl + 16 >> 2] | 0;
 HEAP32[$psEnc + 4568 >> 2] = $4;
 $5 = HEAP32[$encControl + 20 >> 2] | 0;
 HEAP32[$psEnc + 4572 >> 2] = $5;
 HEAP32[$psEnc + 6088 >> 2] = HEAP32[$encControl + 40 >> 2];
 HEAP32[$psEnc + 5752 >> 2] = HEAP32[$encControl >> 2];
 HEAP32[$psEnc + 5756 >> 2] = HEAP32[$encControl + 4 >> 2];
 HEAP32[$psEnc + 4536 >> 2] = $allow_bw_switch;
 HEAP32[$psEnc + 5760 >> 2] = $channelNb;
 $controlled_since_last_payload = $psEnc + 4668 | 0;
 if (HEAP32[$controlled_since_last_payload >> 2] | 0) if (!(HEAP32[$psEnc + 4680 >> 2] | 0)) {
  if (($2 | 0) == (HEAP32[$psEnc + 4560 >> 2] | 0)) {
   $retval$0 = 0;
   return $retval$0 | 0;
  }
  $12 = HEAP32[$psEnc + 4576 >> 2] | 0;
  if (($12 | 0) <= 0) {
   $retval$0 = 0;
   return $retval$0 | 0;
  }
  _silk_setup_resamplers($psEnc, $12);
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $fs_kHz1$i = $psEnc + 4576 | 0;
 $13 = HEAP32[$fs_kHz1$i >> 2] | 0;
 if (!$13) $orig_kHz$0$i = HEAP32[$psEnc + 32 >> 2] | 0; else $orig_kHz$0$i = $13;
 $sext$i3 = $orig_kHz$0$i << 16;
 $mul$i4 = ($sext$i3 >> 16) * 1e3 | 0;
 do if (!$sext$i3) $fs_kHz$0$i = ((($5 | 0) < ($2 | 0) ? $5 : $2) | 0) / 1e3 | 0; else {
  if (($mul$i4 | 0) > ($2 | 0) | ($mul$i4 | 0) > ($3 | 0) | ($mul$i4 | 0) < ($4 | 0)) {
   $$58$i = ($2 | 0) < ($3 | 0) ? $2 : $3;
   $fs_kHz$0$i = ((($$58$i | 0) > ($4 | 0) ? $$58$i : $4) | 0) / 1e3 | 0;
   break;
  }
  $sLP38$i = $psEnc + 16 | 0;
  $transition_frame_no$i = $psEnc + 24 | 0;
  $15 = HEAP32[$transition_frame_no$i >> 2] | 0;
  if (($15 | 0) > 255) HEAP32[$psEnc + 28 >> 2] = 0;
  if (!$allow_bw_switch) if (!(HEAP32[$encControl + 64 >> 2] | 0)) {
   $fs_kHz$0$i = $orig_kHz$0$i;
   break;
  }
  if (($mul$i4 | 0) > ($5 | 0)) {
   $mode55$i = $psEnc + 28 | 0;
   if (!(HEAP32[$mode55$i >> 2] | 0)) {
    HEAP32[$transition_frame_no$i >> 2] = 256;
    $18 = $sLP38$i;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$18 + 4 >> 2] = 0;
    $23 = 256;
   } else $23 = $15;
   if (HEAP32[$encControl + 64 >> 2] | 0) {
    HEAP32[$mode55$i >> 2] = 0;
    $fs_kHz$0$i = ($orig_kHz$0$i | 0) == 16 ? 12 : 8;
    break;
   }
   if (($23 | 0) < 1) {
    HEAP32[$encControl + 88 >> 2] = 1;
    $maxBits$i = $encControl + 56 | 0;
    $24 = HEAP32[$maxBits$i >> 2] | 0;
    HEAP32[$maxBits$i >> 2] = $24 - (($24 * 5 | 0) / ((HEAP32[$encControl + 24 >> 2] | 0) + 5 | 0) | 0);
    $fs_kHz$0$i = $orig_kHz$0$i;
    break;
   } else {
    HEAP32[$mode55$i >> 2] = -2;
    $fs_kHz$0$i = $orig_kHz$0$i;
    break;
   }
  }
  if (($mul$i4 | 0) >= ($5 | 0)) {
   $mode127$i = $psEnc + 28 | 0;
   if ((HEAP32[$mode127$i >> 2] | 0) >= 0) {
    $fs_kHz$0$i = $orig_kHz$0$i;
    break;
   }
   HEAP32[$mode127$i >> 2] = 1;
   $fs_kHz$0$i = $orig_kHz$0$i;
   break;
  }
  if (HEAP32[$encControl + 64 >> 2] | 0) {
   HEAP32[$transition_frame_no$i >> 2] = 0;
   $27 = $sLP38$i;
   HEAP32[$27 >> 2] = 0;
   HEAP32[$27 + 4 >> 2] = 0;
   HEAP32[$psEnc + 28 >> 2] = 1;
   $fs_kHz$0$i = ($orig_kHz$0$i | 0) == 8 ? 12 : 16;
   break;
  }
  $mode108$i = $psEnc + 28 | 0;
  if (!(HEAP32[$mode108$i >> 2] | 0)) {
   HEAP32[$encControl + 88 >> 2] = 1;
   $maxBits113$i = $encControl + 56 | 0;
   $32 = HEAP32[$maxBits113$i >> 2] | 0;
   HEAP32[$maxBits113$i >> 2] = $32 - (($32 * 5 | 0) / ((HEAP32[$encControl + 24 >> 2] | 0) + 5 | 0) | 0);
   $fs_kHz$0$i = $orig_kHz$0$i;
   break;
  } else {
   HEAP32[$mode108$i >> 2] = 1;
   $fs_kHz$0$i = $orig_kHz$0$i;
   break;
  }
 } while (0);
 $spec$select = ($force_fs_kHz | 0) == 0 ? $fs_kHz$0$i : $force_fs_kHz;
 _silk_setup_resamplers($psEnc, $spec$select);
 $35 = HEAP32[$encControl + 24 >> 2] | 0;
 $PacketSize_ms1$i = $psEnc + 4612 | 0;
 if ((HEAP32[$PacketSize_ms1$i >> 2] | 0) == ($35 | 0)) $ret$1$i = 0; else {
  switch ($35 | 0) {
  case 10:
  case 20:
  case 40:
  case 60:
   {
    $ret$0$i = 0;
    break;
   }
  default:
   $ret$0$i = -103;
  }
  do if (($35 | 0) < 11) {
   HEAP32[$psEnc + 5744 >> 2] = 1;
   HEAP32[$psEnc + 4580 >> 2] = ($35 | 0) == 10 ? 2 : 1;
   $conv16$i = $spec$select << 16 >> 16;
   HEAP32[$psEnc + 4584 >> 2] = Math_imul($35 << 16 >> 16, $conv16$i) | 0;
   HEAP32[$psEnc + 4548 >> 2] = $conv16$i * 14;
   $pitch_contour_iCDF$i = $psEnc + 4688 | 0;
   if ((HEAP32[$fs_kHz1$i >> 2] | 0) == 8) {
    HEAP32[$pitch_contour_iCDF$i >> 2] = 51964;
    break;
   } else {
    HEAP32[$pitch_contour_iCDF$i >> 2] = 51952;
    break;
   }
  } else {
   HEAP32[$psEnc + 5744 >> 2] = ($35 >>> 0) / 20 | 0;
   HEAP32[$psEnc + 4580 >> 2] = 4;
   $conv37$i = $spec$select << 16 >> 16;
   HEAP32[$psEnc + 4584 >> 2] = $conv37$i * 20;
   HEAP32[$psEnc + 4548 >> 2] = $conv37$i * 24;
   $pitch_contour_iCDF52$i = $psEnc + 4688 | 0;
   if ((HEAP32[$fs_kHz1$i >> 2] | 0) == 8) {
    HEAP32[$pitch_contour_iCDF52$i >> 2] = 51941;
    break;
   } else {
    HEAP32[$pitch_contour_iCDF52$i >> 2] = 25072;
    break;
   }
  } while (0);
  HEAP32[$PacketSize_ms1$i >> 2] = $35;
  HEAP32[$psEnc + 4608 >> 2] = 0;
  $ret$1$i = $ret$0$i;
 }
 $cmp62$i = ($spec$select | 0) == 8;
 switch ($spec$select | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(52494, 52556, 241);
 }
 $39 = HEAP32[$psEnc + 4580 >> 2] | 0;
 switch ($39 | 0) {
 case 4:
 case 2:
  break;
 default:
  _celt_fatal(52577, 52556, 242);
 }
 do if ((HEAP32[$fs_kHz1$i >> 2] | 0) == ($spec$select | 0)) {
  $47 = HEAP32[$psEnc + 4588 >> 2] | 0;
  $48 = HEAP32[$psEnc + 4584 >> 2] | 0;
  $51 = $spec$select;
 } else {
  $41 = $psEnc + 7168 | 0;
  HEAP32[$41 >> 2] = 0;
  HEAP32[$41 + 4 >> 2] = 0;
  HEAP32[$41 + 8 >> 2] = 0;
  $42 = $psEnc + 16 | 0;
  HEAP32[$42 >> 2] = 0;
  HEAP32[$42 + 4 >> 2] = 0;
  HEAP32[$psEnc + 5740 >> 2] = 0;
  HEAP32[$psEnc + 5748 >> 2] = 0;
  HEAP32[$psEnc + 4608 >> 2] = 0;
  _memset($psEnc + 148 | 0, 0, 4384) | 0;
  HEAP32[$psEnc + 4544 >> 2] = 100;
  HEAP32[$psEnc + 4664 >> 2] = 1;
  HEAP8[$41 >> 0] = 10;
  HEAP32[$psEnc + 4476 >> 2] = 100;
  HEAP32[$psEnc + 4492 >> 2] = 65536;
  HEAP8[$psEnc + 4541 >> 0] = 0;
  HEAP32[$fs_kHz1$i >> 2] = $spec$select;
  $cmp111$i = ($39 | 0) == 4;
  $pitch_contour_iCDF115$i = $psEnc + 4688 | 0;
  if ($cmp62$i) {
   HEAP32[$pitch_contour_iCDF115$i >> 2] = $cmp111$i ? 51941 : 51964;
   $$sink61 = 10;
   $silk_NLSF_CB_WB$sink = 44020;
  } else {
   HEAP32[$pitch_contour_iCDF115$i >> 2] = $cmp111$i ? 25072 : 51952;
   $cond89$i = ($spec$select | 0) == 12;
   $$sink61 = $cond89$i ? 10 : 16;
   $silk_NLSF_CB_WB$sink = $cond89$i ? 44020 : 44060;
  }
  HEAP32[$psEnc + 4640 >> 2] = $$sink61;
  HEAP32[$psEnc + 4692 >> 2] = $silk_NLSF_CB_WB$sink;
  $mul151$i = $spec$select * 5 | 0;
  HEAP32[$psEnc + 4588 >> 2] = $mul151$i;
  $mul161$i = Math_imul($39 << 16 >> 16, $spec$select * 327680 >> 16) | 0;
  HEAP32[$psEnc + 4584 >> 2] = $mul161$i;
  $sext85$i = $spec$select << 16;
  $conv165$i = $sext85$i >> 16;
  HEAP32[$psEnc + 4592 >> 2] = $conv165$i * 20;
  HEAP32[$psEnc + 4596 >> 2] = $sext85$i >> 15;
  HEAP32[$psEnc + 4552 >> 2] = $conv165$i * 18;
  HEAP32[$psEnc + 4548 >> 2] = Math_imul($cmp111$i ? 24 : 14, $conv165$i) | 0;
  if (($spec$select | 0) == 16) {
   HEAP32[$psEnc + 4684 >> 2] = 51926;
   $47 = 80;
   $48 = $mul161$i;
   $51 = 16;
   break;
  }
  $pitch_lag_low_bits_iCDF206$i = $psEnc + 4684 | 0;
  if (($spec$select | 0) == 12) {
   HEAP32[$pitch_lag_low_bits_iCDF206$i >> 2] = 51920;
   $47 = 60;
   $48 = $mul161$i;
   $51 = 12;
   break;
  } else {
   HEAP32[$pitch_lag_low_bits_iCDF206$i >> 2] = 51911;
   $47 = $mul151$i;
   $48 = $mul161$i;
   $51 = $spec$select;
   break;
  }
 } while (0);
 if ((Math_imul($47, $39) | 0) != ($48 | 0)) _celt_fatal(52650, 52556, 302);
 $49 = HEAP32[$encControl + 36 >> 2] | 0;
 if ($49 >>> 0 >= 11) _celt_fatal(52748, 52556, 315);
 do if (!$49) {
  HEAP32[$psEnc + 4644 >> 2] = 0;
  HEAP32[$psEnc + 4652 >> 2] = 52429;
  $pitchEstimationLPCOrder$i = $psEnc + 4648 | 0;
  HEAP32[$pitchEstimationLPCOrder$i >> 2] = 6;
  HEAP32[$psEnc + 4636 >> 2] = 12;
  $mul$i50 = $51 * 3 | 0;
  HEAP32[$psEnc + 4600 >> 2] = $mul$i50;
  HEAP32[$psEnc + 4628 >> 2] = 1;
  HEAP32[$psEnc + 4632 >> 2] = 0;
  HEAP32[$psEnc + 4660 >> 2] = 2;
  $53 = 6;
  $54 = $mul$i50;
  $mul89$i$sink = 0;
  $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder$i;
 } else {
  if (($49 | 0) < 2) {
   HEAP32[$psEnc + 4644 >> 2] = 1;
   HEAP32[$psEnc + 4652 >> 2] = 49807;
   $pitchEstimationLPCOrder8$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder8$i >> 2] = 8;
   HEAP32[$psEnc + 4636 >> 2] = 14;
   $mul11$i = $51 * 5 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul11$i;
   HEAP32[$psEnc + 4628 >> 2] = 1;
   HEAP32[$psEnc + 4632 >> 2] = 0;
   HEAP32[$psEnc + 4660 >> 2] = 3;
   $53 = 8;
   $54 = $mul11$i;
   $mul89$i$sink = 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder8$i;
   break;
  }
  if (($49 | 0) == 2) {
   HEAP32[$psEnc + 4644 >> 2] = 0;
   HEAP32[$psEnc + 4652 >> 2] = 52429;
   $pitchEstimationLPCOrder22$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder22$i >> 2] = 6;
   HEAP32[$psEnc + 4636 >> 2] = 12;
   $mul25$i = $51 * 3 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul25$i;
   HEAP32[$psEnc + 4628 >> 2] = 2;
   HEAP32[$psEnc + 4632 >> 2] = 0;
   HEAP32[$psEnc + 4660 >> 2] = 2;
   $53 = 6;
   $54 = $mul25$i;
   $mul89$i$sink = 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder22$i;
   break;
  }
  if (($49 | 0) < 4) {
   HEAP32[$psEnc + 4644 >> 2] = 1;
   HEAP32[$psEnc + 4652 >> 2] = 49807;
   $pitchEstimationLPCOrder36$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder36$i >> 2] = 8;
   HEAP32[$psEnc + 4636 >> 2] = 14;
   $mul39$i = $51 * 5 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul39$i;
   HEAP32[$psEnc + 4628 >> 2] = 2;
   HEAP32[$psEnc + 4632 >> 2] = 0;
   HEAP32[$psEnc + 4660 >> 2] = 4;
   $53 = 8;
   $54 = $mul39$i;
   $mul89$i$sink = 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder36$i;
   break;
  }
  if (($49 | 0) < 6) {
   HEAP32[$psEnc + 4644 >> 2] = 1;
   HEAP32[$psEnc + 4652 >> 2] = 48497;
   $pitchEstimationLPCOrder50$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder50$i >> 2] = 10;
   HEAP32[$psEnc + 4636 >> 2] = 16;
   $mul53$i = $51 * 5 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul53$i;
   HEAP32[$psEnc + 4628 >> 2] = 2;
   HEAP32[$psEnc + 4632 >> 2] = 1;
   HEAP32[$psEnc + 4660 >> 2] = 6;
   $53 = 10;
   $54 = $mul53$i;
   $mul89$i$sink = $51 * 983 | 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder50$i;
   break;
  }
  $pitchEstimationComplexity64$i = $psEnc + 4644 | 0;
  if (($49 | 0) < 8) {
   HEAP32[$pitchEstimationComplexity64$i >> 2] = 1;
   HEAP32[$psEnc + 4652 >> 2] = 47186;
   $pitchEstimationLPCOrder66$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder66$i >> 2] = 12;
   HEAP32[$psEnc + 4636 >> 2] = 20;
   $mul69$i = $51 * 5 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul69$i;
   HEAP32[$psEnc + 4628 >> 2] = 3;
   HEAP32[$psEnc + 4632 >> 2] = 1;
   HEAP32[$psEnc + 4660 >> 2] = 8;
   $53 = 12;
   $54 = $mul69$i;
   $mul89$i$sink = $51 * 983 | 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder66$i;
   break;
  } else {
   HEAP32[$pitchEstimationComplexity64$i >> 2] = 2;
   HEAP32[$psEnc + 4652 >> 2] = 45875;
   $pitchEstimationLPCOrder80$i = $psEnc + 4648 | 0;
   HEAP32[$pitchEstimationLPCOrder80$i >> 2] = 16;
   HEAP32[$psEnc + 4636 >> 2] = 24;
   $mul83$i = $51 * 5 | 0;
   HEAP32[$psEnc + 4600 >> 2] = $mul83$i;
   HEAP32[$psEnc + 4628 >> 2] = 4;
   HEAP32[$psEnc + 4632 >> 2] = 1;
   HEAP32[$psEnc + 4660 >> 2] = 16;
   $53 = 16;
   $54 = $mul83$i;
   $mul89$i$sink = $51 * 983 | 0;
   $pitchEstimationLPCOrder97$pre$phi$iZ2D = $pitchEstimationLPCOrder80$i;
   break;
  }
 } while (0);
 HEAP32[$psEnc + 4672 >> 2] = $mul89$i$sink;
 $52 = HEAP32[$psEnc + 4640 >> 2] | 0;
 $cond$i$i = ($53 | 0) < ($52 | 0) ? $53 : $52;
 HEAP32[$pitchEstimationLPCOrder97$pre$phi$iZ2D >> 2] = $cond$i$i;
 $add$i = ($51 * 5 | 0) + ($54 << 1) | 0;
 HEAP32[$psEnc + 4604 >> 2] = $add$i;
 HEAP32[$psEnc + 4624 >> 2] = $49;
 if (($cond$i$i | 0) >= 17) _celt_fatal(52802, 52556, 393);
 if (($add$i | 0) >= 241) _celt_fatal(52880, 52556, 398);
 $55 = HEAP32[$encControl + 32 >> 2] | 0;
 HEAP32[$psEnc + 4616 >> 2] = $55;
 $encControl$idx$val = HEAP32[$encControl + 44 >> 2] | 0;
 $LBRR_enabled$i = $psEnc + 6092 | 0;
 $56 = HEAP32[$LBRR_enabled$i >> 2] | 0;
 HEAP32[$LBRR_enabled$i >> 2] = $encControl$idx$val;
 if ($encControl$idx$val | 0) {
  if (!$56) $$sink62 = 7; else {
   $sub$i = (Math_imul($55 >> 16, -26214) | 0) + 7 - ((($55 & 65535) * 26214 | 0) >>> 16) | 0;
   $$sink62 = ($sub$i | 0) > 2 ? $sub$i : 2;
  }
  HEAP32[$psEnc + 6096 >> 2] = $$sink62;
 }
 HEAP32[$controlled_since_last_payload >> 2] = 1;
 $retval$0 = $ret$1$i;
 return $retval$0 | 0;
}

function _silk_A2NLSF_FLP($NLSF_Q15, $pAR, $LPC_order) {
 $NLSF_Q15 = $NLSF_Q15 | 0;
 $pAR = $pAR | 0;
 $LPC_order = $LPC_order | 0;
 var $$$i = 0, $$pre$i = 0, $1 = 0, $11 = 0, $24 = 0, $25 = 0, $26 = 0, $36 = 0, $P$i = 0, $PQ$i = 0, $Q$i = 0, $a_fix_Q16 = 0, $add$1$i = 0, $add$2$i = 0, $add$i = 0, $add110$i = 0, $add110119$i = 0, $add151$i$i = 0, $add151$i111$i = 0, $add151$i168$i = 0, $add151$i54$i = 0, $add19$i$i = 0, $add32$1$i = 0, $add32$i = 0, $add71$i = 0, $arrayidx$i$i = 0, $arrayidx$i173$i = 0, $arrayidx$i2$i = 0, $arrayidx$i59$i$pre$phiZZZ2D = 0, $arrayidx14$i123$i = 0, $arrayidx14$i66$i = 0, $arrayidx2$i118$i = 0, $arrayidx2$i61$i = 0, $arrayidx22$i$i = 0, $arrayidx31$i128$i = 0, $arrayidx31$i71$i = 0, $arrayidx48$i133$i = 0, $arrayidx48$i76$i = 0, $arrayidx65$i138$i = 0, $arrayidx65$i81$i = 0, $arrayidx82$i143$i = 0, $arrayidx82$i86$i = 0, $arrayidx99$i148$i = 0, $arrayidx99$i91$i = 0, $call12$i = 0, $call33$1$i = 0, $call33$2$i = 0, $call33$i = 0, $chirp_Q16$addr$0$lcssa$i$i = 0, $chirp_Q16$addr$029$i$i = 0, $cmp$i1$i = 0, $cmp26$i$i = 0, $conv10792113$i = 0, $conv11$i = 0, $conv2$i$i = 0, $conv24$i$i = 0, $conv99$i = 0, $div98$i = 0, $ffrac$1$1$i = 0, $ffrac$1$2$i = 0, $ffrac$1$i = 0, $ffrac$2$i = 0, $i$0$ph$ph$i = 0, $i$028$i$i = 0, $i$07 = 0, $inc114$i = 0, $inc114120$i = 0, $inc75$i = 0, $inc93$i = 0, $k$0$i = 0, $k$0$ph$i = 0, $n$074$in$i$i = 0, $n$074$in$i104$i = 0, $n$074$in$i161$i = 0, $n$074$in$i47$i = 0, $or$cond1$1$i = 0, $or$cond1$2$i = 0, $or$cond1$i = 0, $p$1$ph$i = 0, $p$1$ph124$i = 0, $p$1$ph124$ph$be$i = 0, $p$1$ph124$ph$i = 0, $root_ix$1$ph$i = 0, $root_ix$1$ph122$i = 0, $root_ix$1$ph122$ph$be$i = 0, $root_ix$1$ph122$ph$i = 0, $shr$i = 0, $shr$i177$i = 0, $shr$lcssa$i$i = 0, $shr27$i$i = 0, $shr30$i$i = 0, $sub$i$i = 0, $sub1$i$i = 0, $sub118$i = 0, $sub56$i = 0, $thr$0$i = 0, $thr$0$ph$i = 0, $xhi$1$1$i = 0, $xhi$1$i = 0, $xlo$0$i = 0, $xlo$0$ph$i = 0, $xlo$2$1$i = 0, $xlo$2$i = 0, $y32$073$i$i = 0, $y32$073$i105$i = 0, $y32$073$i162$i = 0, $y32$073$i48$i = 0, $y32$1$i$i = 0, $y32$1$i171$i = 0, $yhi$1$1$i = 0, $yhi$1$2$i = 0, $yhi$1$i = 0, $ylo$1$i = 0, $ylo$1$ph$i = 0, $ylo$1$ph123$i = 0, $ylo$1$ph123$ph$be$i = 0, $ylo$1$ph123$ph$i = 0, $ylo$3$1$i = 0, $ylo$3$2$i = 0, $ylo$3$i = 0, label = 0, sp = 0, $n$074$in$i$i$looptemp = 0, $n$074$in$i47$i$looptemp = 0, $n$074$in$i161$i$looptemp = 0, $n$074$in$i104$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $P$i = sp + 128 | 0;
 $Q$i = sp + 64 | 0;
 $PQ$i = sp + 184 | 0;
 $a_fix_Q16 = sp;
 if (($LPC_order | 0) > 0) {
  $i$07 = 0;
  do {
   HEAP32[$a_fix_Q16 + ($i$07 << 2) >> 2] = _lrintf(+HEAPF32[$pAR + ($i$07 << 2) >> 2] * 65536.0) | 0;
   $i$07 = $i$07 + 1 | 0;
  } while (($i$07 | 0) != ($LPC_order | 0));
 }
 HEAP32[$PQ$i >> 2] = $P$i;
 HEAP32[$PQ$i + 4 >> 2] = $Q$i;
 $shr$i = $LPC_order >> 1;
 _silk_A2NLSF_init($a_fix_Q16, $P$i, $Q$i, $shr$i);
 $arrayidx$i$i = $P$i + ($shr$i << 2) | 0;
 $1 = HEAP32[$arrayidx$i$i >> 2] | 0;
 $cmp$i1$i = ($shr$i | 0) == 8;
 if ($cmp$i1$i) $y32$1$i$i = (((((((($1 << 1) + (HEAP32[$P$i + 28 >> 2] | 0) << 1) + (HEAP32[$P$i + 24 >> 2] | 0) << 1) + (HEAP32[$P$i + 20 >> 2] | 0) << 1) + (HEAP32[$P$i + 16 >> 2] | 0) << 1) + (HEAP32[$P$i + 12 >> 2] | 0) << 1) + (HEAP32[$P$i + 8 >> 2] | 0) << 1) + (HEAP32[$P$i + 4 >> 2] | 0) << 1) + (HEAP32[$P$i >> 2] | 0) | 0; else if (($LPC_order | 0) > 1) {
  $n$074$in$i$i = $shr$i;
  $y32$073$i$i = $1;
  while (1) {
   $n$074$in$i$i$looptemp = $n$074$in$i$i;
   $n$074$in$i$i = $n$074$in$i$i + -1 | 0;
   $add151$i$i = ($y32$073$i$i << 1) + (HEAP32[$P$i + ($n$074$in$i$i << 2) >> 2] | 0) | 0;
   if (($n$074$in$i$i$looptemp | 0) <= 1) {
    $y32$1$i$i = $add151$i$i;
    break;
   } else $y32$073$i$i = $add151$i$i;
  }
 } else $y32$1$i$i = $1;
 do if (($y32$1$i$i | 0) < 0) {
  HEAP16[$NLSF_Q15 >> 1] = 0;
  $arrayidx$i2$i = $Q$i + ($shr$i << 2) | 0;
  $11 = HEAP32[$arrayidx$i2$i >> 2] | 0;
  if ($cmp$i1$i) {
   $arrayidx$i59$i$pre$phiZZZ2D = $arrayidx$i2$i;
   $p$1$ph$i = $Q$i;
   $root_ix$1$ph$i = 1;
   $ylo$1$ph$i = (((((((($11 << 1) + (HEAP32[$Q$i + 28 >> 2] | 0) << 1) + (HEAP32[$Q$i + 24 >> 2] | 0) << 1) + (HEAP32[$Q$i + 20 >> 2] | 0) << 1) + (HEAP32[$Q$i + 16 >> 2] | 0) << 1) + (HEAP32[$Q$i + 12 >> 2] | 0) << 1) + (HEAP32[$Q$i + 8 >> 2] | 0) << 1) + (HEAP32[$Q$i + 4 >> 2] | 0) << 1) + (HEAP32[$Q$i >> 2] | 0) | 0;
   break;
  }
  if (($LPC_order | 0) > 1) {
   $n$074$in$i47$i = $shr$i;
   $y32$073$i48$i = $11;
   while (1) {
    $n$074$in$i47$i$looptemp = $n$074$in$i47$i;
    $n$074$in$i47$i = $n$074$in$i47$i + -1 | 0;
    $add151$i54$i = ($y32$073$i48$i << 1) + (HEAP32[$Q$i + ($n$074$in$i47$i << 2) >> 2] | 0) | 0;
    if (($n$074$in$i47$i$looptemp | 0) <= 1) {
     $arrayidx$i59$i$pre$phiZZZ2D = $arrayidx$i2$i;
     $p$1$ph$i = $Q$i;
     $root_ix$1$ph$i = 1;
     $ylo$1$ph$i = $add151$i54$i;
     break;
    } else $y32$073$i48$i = $add151$i54$i;
   }
  } else {
   $arrayidx$i59$i$pre$phiZZZ2D = $arrayidx$i2$i;
   $p$1$ph$i = $Q$i;
   $root_ix$1$ph$i = 1;
   $ylo$1$ph$i = $11;
  }
 } else {
  $arrayidx$i59$i$pre$phiZZZ2D = $Q$i + ($shr$i << 2) | 0;
  $p$1$ph$i = $P$i;
  $root_ix$1$ph$i = 0;
  $ylo$1$ph$i = $y32$1$i$i;
 } while (0);
 $sub1$i$i = $LPC_order + -1 | 0;
 $cmp26$i$i = ($LPC_order | 0) > 1;
 $arrayidx22$i$i = $a_fix_Q16 + ($sub1$i$i << 2) | 0;
 $arrayidx2$i118$i = $P$i + 28 | 0;
 $arrayidx14$i123$i = $P$i + 24 | 0;
 $arrayidx31$i128$i = $P$i + 20 | 0;
 $arrayidx48$i133$i = $P$i + 16 | 0;
 $arrayidx65$i138$i = $P$i + 12 | 0;
 $arrayidx82$i143$i = $P$i + 8 | 0;
 $arrayidx99$i148$i = $P$i + 4 | 0;
 $arrayidx2$i61$i = $Q$i + 28 | 0;
 $arrayidx14$i66$i = $Q$i + 24 | 0;
 $arrayidx31$i71$i = $Q$i + 20 | 0;
 $arrayidx48$i76$i = $Q$i + 16 | 0;
 $arrayidx65$i81$i = $Q$i + 12 | 0;
 $arrayidx82$i86$i = $Q$i + 8 | 0;
 $arrayidx99$i91$i = $Q$i + 4 | 0;
 $i$0$ph$ph$i = 0;
 $p$1$ph124$ph$i = $p$1$ph$i;
 $root_ix$1$ph122$ph$i = $root_ix$1$ph$i;
 $ylo$1$ph123$ph$i = $ylo$1$ph$i;
 L23 : while (1) {
  $k$0$ph$i = 1;
  $p$1$ph124$i = $p$1$ph124$ph$i;
  $root_ix$1$ph122$i = $root_ix$1$ph122$ph$i;
  $thr$0$ph$i = 0;
  $xlo$0$ph$i = 8192;
  $ylo$1$ph123$i = $ylo$1$ph123$ph$i;
  L25 : while (1) {
   $k$0$i = $k$0$ph$i;
   $thr$0$i = $thr$0$ph$i;
   $xlo$0$i = $xlo$0$ph$i;
   $ylo$1$i = $ylo$1$ph123$i;
   while (1) {
    $conv11$i = HEAP16[26752 + ($k$0$i << 1) >> 1] | 0;
    $call12$i = _silk_A2NLSF_eval_poly($p$1$ph124$i, $conv11$i, $shr$i) | 0;
    if (!(($ylo$1$i | 0) > 0 | ($call12$i | 0) < ($thr$0$i | 0))) break;
    if (!(($ylo$1$i | 0) < 0 | ($call12$i | 0) > (0 - $thr$0$i | 0))) break;
    if (($k$0$i | 0) > 127) break L25; else {
     $k$0$i = $k$0$i + 1 | 0;
     $thr$0$i = 0;
     $xlo$0$i = $conv11$i;
     $ylo$1$i = $call12$i;
    }
   }
   $add$i = $xlo$0$i + $conv11$i | 0;
   $add32$i = ($add$i >> 1) + ($add$i & 1) | 0;
   $call33$i = _silk_A2NLSF_eval_poly($p$1$ph124$i, $add32$i, $shr$i) | 0;
   if (($ylo$1$i | 0) < 1 & ($call33$i | 0) > -1) {
    $ffrac$1$i = -256;
    $xhi$1$i = $add32$i;
    $xlo$2$i = $xlo$0$i;
    $yhi$1$i = $call33$i;
    $ylo$3$i = $ylo$1$i;
   } else {
    $or$cond1$i = ($ylo$1$i | 0) > -1 & ($call33$i | 0) < 1;
    $ffrac$1$i = $or$cond1$i ? -256 : -128;
    $xhi$1$i = $or$cond1$i ? $add32$i : $conv11$i;
    $xlo$2$i = $or$cond1$i ? $xlo$0$i : $add32$i;
    $yhi$1$i = $or$cond1$i ? $call33$i : $call12$i;
    $ylo$3$i = $or$cond1$i ? $ylo$1$i : $call33$i;
   }
   $add$1$i = $xhi$1$i + $xlo$2$i | 0;
   $add32$1$i = ($add$1$i >> 1) + ($add$1$i & 1) | 0;
   $call33$1$i = _silk_A2NLSF_eval_poly($p$1$ph124$i, $add32$1$i, $shr$i) | 0;
   if (($ylo$3$i | 0) < 1 & ($call33$1$i | 0) > -1) {
    $ffrac$1$1$i = $ffrac$1$i;
    $xhi$1$1$i = $add32$1$i;
    $xlo$2$1$i = $xlo$2$i;
    $yhi$1$1$i = $call33$1$i;
    $ylo$3$1$i = $ylo$3$i;
   } else {
    $or$cond1$1$i = ($ylo$3$i | 0) > -1 & ($call33$1$i | 0) < 1;
    $ffrac$1$1$i = ($or$cond1$1$i ? 0 : 64) | $ffrac$1$i;
    $xhi$1$1$i = $or$cond1$1$i ? $add32$1$i : $xhi$1$i;
    $xlo$2$1$i = $or$cond1$1$i ? $xlo$2$i : $add32$1$i;
    $yhi$1$1$i = $or$cond1$1$i ? $call33$1$i : $yhi$1$i;
    $ylo$3$1$i = $or$cond1$1$i ? $ylo$3$i : $call33$1$i;
   }
   $add$2$i = $xhi$1$1$i + $xlo$2$1$i | 0;
   $call33$2$i = _silk_A2NLSF_eval_poly($p$1$ph124$i, ($add$2$i >> 1) + ($add$2$i & 1) | 0, $shr$i) | 0;
   if (($ylo$3$1$i | 0) < 1 & ($call33$2$i | 0) > -1) {
    $ffrac$1$2$i = $ffrac$1$1$i;
    $yhi$1$2$i = $call33$2$i;
    $ylo$3$2$i = $ylo$3$1$i;
   } else {
    $or$cond1$2$i = ($ylo$3$1$i | 0) > -1 & ($call33$2$i | 0) < 1;
    $ffrac$1$2$i = ($or$cond1$2$i ? 0 : 32) + $ffrac$1$1$i | 0;
    $yhi$1$2$i = $or$cond1$2$i ? $call33$2$i : $yhi$1$1$i;
    $ylo$3$2$i = $or$cond1$2$i ? $ylo$3$1$i : $call33$2$i;
   }
   $$$i = ($call12$i | 0) == 0 & 1;
   $sub56$i = $ylo$3$2$i - $yhi$1$2$i | 0;
   if (((($ylo$3$2$i | 0) > 0 ? $ylo$3$2$i : 0 - $ylo$3$2$i | 0) | 0) < 65536) if (!$sub56$i) $ffrac$2$i = $ffrac$1$2$i; else $ffrac$2$i = ((($sub56$i >> 1) + ($ylo$3$2$i << 5) | 0) / ($sub56$i | 0) | 0) + $ffrac$1$2$i | 0; else $ffrac$2$i = (($ylo$3$2$i | 0) / ($sub56$i >> 5 | 0) | 0) + $ffrac$1$2$i | 0;
   $add71$i = $ffrac$2$i + ($k$0$i << 8) | 0;
   HEAP16[$NLSF_Q15 + ($root_ix$1$ph122$i << 1) >> 1] = ($add71$i | 0) < 32767 ? $add71$i : 32767;
   $inc75$i = $root_ix$1$ph122$i + 1 | 0;
   if (($inc75$i | 0) >= ($LPC_order | 0)) {
    label = 55;
    break L23;
   }
   $k$0$ph$i = $k$0$i;
   $p$1$ph124$i = HEAP32[$PQ$i + (($inc75$i & 1) << 2) >> 2] | 0;
   $root_ix$1$ph122$i = $inc75$i;
   $thr$0$ph$i = $$$i;
   $xlo$0$ph$i = HEAP16[26752 + ($k$0$i + -1 << 1) >> 1] | 0;
   $ylo$1$ph123$i = 4096 - ($inc75$i << 12 & 8192) | 0;
  }
  $inc93$i = $i$0$ph$ph$i + 1 | 0;
  if ($i$0$ph$ph$i >>> 0 > 15) break;
  $sub118$i = 65536 - (2 << $i$0$ph$ph$i) | 0;
  $sub$i$i = $sub118$i + -65536 | 0;
  $shr27$i$i = $sub118$i >> 16;
  if ($cmp26$i$i) {
   $chirp_Q16$addr$029$i$i = $sub118$i;
   $i$028$i$i = 0;
   $shr30$i$i = $shr27$i$i;
   while (1) {
    $arrayidx$i173$i = $a_fix_Q16 + ($i$028$i$i << 2) | 0;
    $24 = HEAP32[$arrayidx$i173$i >> 2] | 0;
    $conv2$i$i = $24 << 16 >> 16;
    HEAP32[$arrayidx$i173$i >> 2] = ((Math_imul($conv2$i$i, $chirp_Q16$addr$029$i$i & 65535) | 0) >> 16) + (Math_imul($conv2$i$i, $shr30$i$i) | 0) + (Math_imul(($24 >> 15) + 1 >> 1, $chirp_Q16$addr$029$i$i) | 0);
    $add19$i$i = (((Math_imul($chirp_Q16$addr$029$i$i, $sub$i$i) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$029$i$i | 0;
    $i$028$i$i = $i$028$i$i + 1 | 0;
    $shr$i177$i = $add19$i$i >> 16;
    if (($i$028$i$i | 0) == ($sub1$i$i | 0)) {
     $chirp_Q16$addr$0$lcssa$i$i = $add19$i$i;
     $shr$lcssa$i$i = $shr$i177$i;
     break;
    } else {
     $chirp_Q16$addr$029$i$i = $add19$i$i;
     $shr30$i$i = $shr$i177$i;
    }
   }
  } else {
   $chirp_Q16$addr$0$lcssa$i$i = $sub118$i;
   $shr$lcssa$i$i = $shr27$i$i;
  }
  $25 = HEAP32[$arrayidx22$i$i >> 2] | 0;
  $conv24$i$i = $25 << 16 >> 16;
  HEAP32[$arrayidx22$i$i >> 2] = ((Math_imul($conv24$i$i, $chirp_Q16$addr$0$lcssa$i$i & 65535) | 0) >> 16) + (Math_imul($conv24$i$i, $shr$lcssa$i$i) | 0) + (Math_imul(($25 >> 15) + 1 >> 1, $chirp_Q16$addr$0$lcssa$i$i) | 0);
  _silk_A2NLSF_init($a_fix_Q16, $P$i, $Q$i, $shr$i);
  $26 = HEAP32[$arrayidx$i$i >> 2] | 0;
  if ($cmp$i1$i) $y32$1$i171$i = (((((((($26 << 1) + (HEAP32[$arrayidx2$i118$i >> 2] | 0) << 1) + (HEAP32[$arrayidx14$i123$i >> 2] | 0) << 1) + (HEAP32[$arrayidx31$i128$i >> 2] | 0) << 1) + (HEAP32[$arrayidx48$i133$i >> 2] | 0) << 1) + (HEAP32[$arrayidx65$i138$i >> 2] | 0) << 1) + (HEAP32[$arrayidx82$i143$i >> 2] | 0) << 1) + (HEAP32[$arrayidx99$i148$i >> 2] | 0) << 1) + (HEAP32[$P$i >> 2] | 0) | 0; else if ($cmp26$i$i) {
   $n$074$in$i161$i = $shr$i;
   $y32$073$i162$i = $26;
   while (1) {
    $n$074$in$i161$i$looptemp = $n$074$in$i161$i;
    $n$074$in$i161$i = $n$074$in$i161$i + -1 | 0;
    $add151$i168$i = ($y32$073$i162$i << 1) + (HEAP32[$P$i + ($n$074$in$i161$i << 2) >> 2] | 0) | 0;
    if (($n$074$in$i161$i$looptemp | 0) <= 1) {
     $y32$1$i171$i = $add151$i168$i;
     break;
    } else $y32$073$i162$i = $add151$i168$i;
   }
  } else $y32$1$i171$i = $26;
  do if (($y32$1$i171$i | 0) < 0) {
   HEAP16[$NLSF_Q15 >> 1] = 0;
   $36 = HEAP32[$arrayidx$i59$i$pre$phiZZZ2D >> 2] | 0;
   if ($cmp$i1$i) {
    $p$1$ph124$ph$be$i = $Q$i;
    $root_ix$1$ph122$ph$be$i = 1;
    $ylo$1$ph123$ph$be$i = (((((((($36 << 1) + (HEAP32[$arrayidx2$i61$i >> 2] | 0) << 1) + (HEAP32[$arrayidx14$i66$i >> 2] | 0) << 1) + (HEAP32[$arrayidx31$i71$i >> 2] | 0) << 1) + (HEAP32[$arrayidx48$i76$i >> 2] | 0) << 1) + (HEAP32[$arrayidx65$i81$i >> 2] | 0) << 1) + (HEAP32[$arrayidx82$i86$i >> 2] | 0) << 1) + (HEAP32[$arrayidx99$i91$i >> 2] | 0) << 1) + (HEAP32[$Q$i >> 2] | 0) | 0;
    break;
   }
   if ($cmp26$i$i) {
    $n$074$in$i104$i = $shr$i;
    $y32$073$i105$i = $36;
    while (1) {
     $n$074$in$i104$i$looptemp = $n$074$in$i104$i;
     $n$074$in$i104$i = $n$074$in$i104$i + -1 | 0;
     $add151$i111$i = ($y32$073$i105$i << 1) + (HEAP32[$Q$i + ($n$074$in$i104$i << 2) >> 2] | 0) | 0;
     if (($n$074$in$i104$i$looptemp | 0) <= 1) {
      $p$1$ph124$ph$be$i = $Q$i;
      $root_ix$1$ph122$ph$be$i = 1;
      $ylo$1$ph123$ph$be$i = $add151$i111$i;
      break;
     } else $y32$073$i105$i = $add151$i111$i;
    }
   } else {
    $p$1$ph124$ph$be$i = $Q$i;
    $root_ix$1$ph122$ph$be$i = 1;
    $ylo$1$ph123$ph$be$i = $36;
   }
  } else {
   $p$1$ph124$ph$be$i = $P$i;
   $root_ix$1$ph122$ph$be$i = 0;
   $ylo$1$ph123$ph$be$i = $y32$1$i171$i;
  } while (0);
  $i$0$ph$ph$i = $inc93$i;
  $p$1$ph124$ph$i = $p$1$ph124$ph$be$i;
  $root_ix$1$ph122$ph$i = $root_ix$1$ph122$ph$be$i;
  $ylo$1$ph123$ph$i = $ylo$1$ph123$ph$be$i;
 }
 if ((label | 0) == 55) {
  STACKTOP = sp;
  return;
 }
 $div98$i = 32768 / ($LPC_order + 1 | 0) | 0;
 $conv99$i = $div98$i & 65535;
 HEAP16[$NLSF_Q15 >> 1] = $conv99$i;
 if (!$cmp26$i$i) {
  STACKTOP = sp;
  return;
 }
 $conv10792113$i = $div98$i << 1;
 HEAP16[$NLSF_Q15 + 2 >> 1] = $conv10792113$i;
 if (($LPC_order | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 $$pre$i = $conv99$i;
 $add110119$i = $conv10792113$i & 131070;
 $inc114120$i = 2;
 while (1) {
  $add110$i = ($add110119$i & 65535) + ($$pre$i & 65535) | 0;
  HEAP16[$NLSF_Q15 + ($inc114120$i << 1) >> 1] = $add110$i;
  $inc114$i = $inc114120$i + 1 | 0;
  if (($inc114$i | 0) == ($LPC_order | 0)) break;
  $$pre$i = HEAP16[$NLSF_Q15 >> 1] | 0;
  $add110119$i = $add110$i;
  $inc114120$i = $inc114$i;
 }
 STACKTOP = sp;
 return;
}

function _silk_CNG($psDec, $psDecCtrl, $frame, $length) {
 $psDec = $psDec | 0;
 $psDecCtrl = $psDecCtrl | 0;
 $frame = $frame | 0;
 $length = $length | 0;
 var $$pre293 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $9 = 0, $A_Q12 = 0, $CNG_smth_Gain_Q16 = 0, $LPC_order172 = 0, $LPC_pred_Q10$0 = 0, $NLSF_acc_Q15$013$i = 0, $add$i233 = 0, $add$ptr = 0, $add108 = 0, $add358 = 0, $add477 = 0, $add586 = 0, $add650 = 0, $arraydecay173 = 0, $arrayidx467 = 0, $arrayidx564 = 0, $arrayidx8 = 0, $cmp112$i = 0, $cmp29 = 0, $cmp360 = 0, $cond = 0, $cond561 = 0, $conv127 = 0, $conv144 = 0, $conv194 = 0, $conv211 = 0, $conv228 = 0, $conv245 = 0, $conv262 = 0, $conv279 = 0, $conv296 = 0, $conv313 = 0, $conv330 = 0, $conv347 = 0, $conv368 = 0, $conv385 = 0, $conv402 = 0, $conv419 = 0, $conv436 = 0, $conv453 = 0, $conv570 = 0, $conv79 = 0, $conv84 = 0, $conv9 = 0, $div$i = 0, $exc_mask$0$i = 0, $fs_kHz1 = 0, $gain_Q16$0 = 0, $i$012$i = 0, $i$013$i = 0, $i$0292 = 0, $i$1288 = 0, $i$2284 = 0, $i$3282 = 0, $lossCnt = 0, $max_Gain_Q16$0286 = 0, $mul195 = 0, $mul212 = 0, $mul229 = 0, $mul246 = 0, $mul263 = 0, $mul280 = 0, $mul297 = 0, $mul314 = 0, $mul331 = 0, $mul369 = 0, $mul386 = 0, $mul403 = 0, $mul420 = 0, $mul437 = 0, $nb_subfr = 0, $rand_seed = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i258 = 0, $sCNG = 0, $seed$0$lcssa$i = 0, $seed$014$i = 0, $shl476 = 0, $shr115 = 0, $shr119 = 0, $shr188299 = 0, $shr203 = 0, $shr220 = 0, $shr237 = 0, $shr254 = 0, $shr271 = 0, $shr288 = 0, $shr3$i = 0, $shr3$i263 = 0, $shr305 = 0, $shr322 = 0, $shr339 = 0, $shr377 = 0, $shr394 = 0, $shr411 = 0, $shr428 = 0, $shr445 = 0, $shr584 = 0, $spec$select228 = 0, $spec$select278 = 0, $sub = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i$i$i243 = 0, $sub$i$i242 = 0, $sub123 = 0, $sub162 = 0, $sub59 = 0, $subfr$0$lcssa = 0, $subfr$0287 = 0, $subfr_length = 0, $vla = 0, dest = 0, sp = 0, src = 0, stop = 0, $48$looptemp = 0, $50$looptemp = 0, $52$looptemp = 0, $54$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $A_Q12 = sp;
 $sCNG = $psDec + 2772 | 0;
 $0 = HEAP32[$psDec + 2316 >> 2] | 0;
 $fs_kHz1 = $psDec + 4156 | 0;
 if (($0 | 0) != (HEAP32[$fs_kHz1 >> 2] | 0)) {
  $2 = HEAP32[$psDec + 2340 >> 2] | 0;
  $div$i = 32767 / ($2 + 1 | 0) | 0;
  if (($2 | 0) > 0) {
   $NLSF_acc_Q15$013$i = 0;
   $i$012$i = 0;
   do {
    $NLSF_acc_Q15$013$i = $NLSF_acc_Q15$013$i + $div$i | 0;
    HEAP16[$psDec + 4052 + ($i$012$i << 1) >> 1] = $NLSF_acc_Q15$013$i;
    $i$012$i = $i$012$i + 1 | 0;
   } while (($i$012$i | 0) != ($2 | 0));
  }
  HEAP32[$psDec + 4148 >> 2] = 0;
  HEAP32[$psDec + 4152 >> 2] = 3176576;
  HEAP32[$fs_kHz1 >> 2] = $0;
 }
 $lossCnt = $psDec + 4160 | 0;
 if (!(HEAP32[$lossCnt >> 2] | 0)) {
  if (!(HEAP32[$psDec + 4164 >> 2] | 0)) {
   $5 = HEAP32[$psDec + 2340 >> 2] | 0;
   if (($5 | 0) > 0) {
    $i$0292 = 0;
    do {
     $arrayidx8 = $psDec + 4052 + ($i$0292 << 1) | 0;
     $conv9 = HEAP16[$arrayidx8 >> 1] | 0;
     $sub = (HEAP16[$psDec + 2344 + ($i$0292 << 1) >> 1] | 0) - $conv9 | 0;
     HEAP16[$arrayidx8 >> 1] = (($sub >> 16) * 16348 | 0) + $conv9 + ((($sub & 65535) * 16348 | 0) >>> 16);
     $i$0292 = $i$0292 + 1 | 0;
    } while (($i$0292 | 0) != ($5 | 0));
   }
   $nb_subfr = $psDec + 2324 | 0;
   $9 = HEAP32[$nb_subfr >> 2] | 0;
   if (($9 | 0) > 0) {
    $i$1288 = 0;
    $max_Gain_Q16$0286 = 0;
    $subfr$0287 = 0;
    while (1) {
     $10 = HEAP32[$psDecCtrl + 16 + ($i$1288 << 2) >> 2] | 0;
     $cmp29 = ($10 | 0) > ($max_Gain_Q16$0286 | 0);
     $spec$select228 = $cmp29 ? $i$1288 : $subfr$0287;
     $i$1288 = $i$1288 + 1 | 0;
     if (($i$1288 | 0) == ($9 | 0)) {
      $subfr$0$lcssa = $spec$select228;
      break;
     } else {
      $max_Gain_Q16$0286 = $cmp29 ? $10 : $max_Gain_Q16$0286;
      $subfr$0287 = $spec$select228;
     }
    }
   } else $subfr$0$lcssa = 0;
   $subfr_length = $psDec + 2332 | 0;
   $11 = HEAP32[$subfr_length >> 2] | 0;
   _memmove($psDec + 2772 + ($11 << 2) | 0, $sCNG | 0, Math_imul(($9 << 2) + -4 | 0, $11) | 0) | 0;
   $12 = HEAP32[$subfr_length >> 2] | 0;
   _memcpy($sCNG | 0, $psDec + 4 + ((Math_imul($12, $subfr$0$lcssa) | 0) << 2) | 0, $12 << 2 | 0) | 0;
   $13 = HEAP32[$nb_subfr >> 2] | 0;
   if (($13 | 0) > 0) {
    $CNG_smth_Gain_Q16 = $psDec + 4148 | 0;
    $15 = HEAP32[$CNG_smth_Gain_Q16 >> 2] | 0;
    $i$2284 = 0;
    do {
     $sub59 = (HEAP32[$psDecCtrl + 16 + ($i$2284 << 2) >> 2] | 0) - $15 | 0;
     $15 = (($sub59 >> 16) * 4634 | 0) + $15 + ((($sub59 & 65535) * 4634 | 0) >>> 16) | 0;
     HEAP32[$CNG_smth_Gain_Q16 >> 2] = $15;
     $i$2284 = $i$2284 + 1 | 0;
    } while (($i$2284 | 0) != ($13 | 0));
   }
  }
  if (!(HEAP32[$lossCnt >> 2] | 0)) {
   _memset($psDec + 4084 | 0, 0, HEAP32[$psDec + 2340 >> 2] << 2 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $17 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($length + 16 << 2) | 0) + 15 & -16) | 0;
 $conv79 = HEAP16[$psDec + 4228 >> 1] | 0;
 $19 = HEAP32[$psDec + 4248 >> 2] | 0;
 $conv84 = $19 << 16 >> 16;
 $add108 = ((Math_imul($conv84, $conv79 & 65535) | 0) >> 16) + (Math_imul($conv84, $conv79 >> 16) | 0) + (Math_imul(($19 >> 15) + 1 >> 1, $conv79) | 0) | 0;
 $$pre293 = HEAP32[$psDec + 4148 >> 2] | 0;
 $shr115 = $add108 >> 16;
 if (($add108 | 0) > 2097151 | ($$pre293 | 0) > 8388608) {
  $shr119 = $$pre293 >> 16;
  $sub123 = (Math_imul($shr119, $shr119) | 0) - (Math_imul($shr115 << 5, $shr115) | 0) | 0;
  if (($sub123 | 0) < 1) $gain_Q16$0 = 0; else {
   $20 = Math_clz32($sub123 | 0) | 0;
   $sub$i$i242 = 24 - $20 | 0;
   $sub$i$i$i243 = 0 - $sub$i$i242 | 0;
   do if (!$sub$i$i242) $retval$0$i$i$i258 = $sub123; else if (($sub$i$i242 | 0) < 0) {
    $retval$0$i$i$i258 = $sub123 >>> ($sub$i$i242 + 32 | 0) | $sub123 << $sub$i$i$i243;
    break;
   } else {
    $retval$0$i$i$i258 = $sub123 << 32 - $sub$i$i242 | $sub123 >>> $sub$i$i242;
    break;
   } while (0);
   $shr3$i263 = (($20 & 1 | 0) == 0 ? 46214 : 32768) >>> ($20 >>> 1);
   $21 = (Math_imul($retval$0$i$i$i258 & 127, 13959168) | 0) >>> 16;
   $gain_Q16$0 = ((Math_imul($21, $shr3$i263 >> 16) | 0) + $shr3$i263 << 16) + (Math_imul($21, $shr3$i263 & 65535) | 0) & -65536;
  }
 } else {
  $conv127 = $add108 << 16 >> 16;
  $conv144 = $$pre293 << 16 >> 16;
  $sub162 = (Math_imul($conv144, $$pre293 >> 16) | 0) - (((Math_imul($conv127, $add108 & 65535) | 0) >> 16) + (Math_imul($conv127, $shr115) | 0) + (Math_imul(($add108 >> 15) + 1 >> 1, $add108) | 0) << 5) + ((Math_imul($conv144, $$pre293 & 65535) | 0) >> 16) + (Math_imul(($$pre293 >> 15) + 1 >> 1, $$pre293) | 0) | 0;
  if (($sub162 | 0) < 1) $gain_Q16$0 = 0; else {
   $23 = Math_clz32($sub162 | 0) | 0;
   $sub$i$i = 24 - $23 | 0;
   $sub$i$i$i = 0 - $sub$i$i | 0;
   do if (!$sub$i$i) $retval$0$i$i$i = $sub162; else if (($sub$i$i | 0) < 0) {
    $retval$0$i$i$i = $sub162 >>> ($sub$i$i + 32 | 0) | $sub162 << $sub$i$i$i;
    break;
   } else {
    $retval$0$i$i$i = $sub162 << 32 - $sub$i$i | $sub162 >>> $sub$i$i;
    break;
   } while (0);
   $shr3$i = (($23 & 1 | 0) == 0 ? 46214 : 32768) >>> ($23 >>> 1);
   $24 = (Math_imul($retval$0$i$i$i & 127, 13959168) | 0) >>> 16;
   $gain_Q16$0 = (Math_imul($24, $shr3$i >> 16) | 0) + $shr3$i + ((Math_imul($24, $shr3$i & 65535) | 0) >>> 16) << 8;
  }
 }
 $exc_mask$0$i = 255;
 while (1) if (($exc_mask$0$i | 0) > ($length | 0)) $exc_mask$0$i = $exc_mask$0$i >> 1; else break;
 $add$ptr = $vla + 64 | 0;
 $rand_seed = $psDec + 4152 | 0;
 $26 = HEAP32[$rand_seed >> 2] | 0;
 $cmp112$i = ($length | 0) > 0;
 if ($cmp112$i) {
  $i$013$i = 0;
  $seed$014$i = $26;
  while (1) {
   $add$i233 = (Math_imul($seed$014$i, 196314165) | 0) + 907633515 | 0;
   HEAP32[$add$ptr + ($i$013$i << 2) >> 2] = HEAP32[$psDec + 2772 + (($add$i233 >> 24 & $exc_mask$0$i) << 2) >> 2];
   $i$013$i = $i$013$i + 1 | 0;
   if (($i$013$i | 0) == ($length | 0)) {
    $seed$0$lcssa$i = $add$i233;
    break;
   } else $seed$014$i = $add$i233;
  }
 } else $seed$0$lcssa$i = $26;
 HEAP32[$rand_seed >> 2] = $seed$0$lcssa$i;
 $LPC_order172 = $psDec + 2340 | 0;
 _silk_NLSF2A($A_Q12, $psDec + 4052 | 0, HEAP32[$LPC_order172 >> 2] | 0);
 $arraydecay173 = $psDec + 4084 | 0;
 dest = $vla;
 src = $arraydecay173;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $29 = HEAP32[$LPC_order172 >> 2] | 0;
 switch ($29 | 0) {
 case 16:
 case 10:
  break;
 default:
  _celt_fatal(50079, 50049, 149);
 }
 if ($cmp112$i) {
  $shr188299 = $29 >>> 1;
  $conv194 = HEAP16[$A_Q12 >> 1] | 0;
  $conv211 = HEAP16[$A_Q12 + 2 >> 1] | 0;
  $conv228 = HEAP16[$A_Q12 + 4 >> 1] | 0;
  $conv245 = HEAP16[$A_Q12 + 6 >> 1] | 0;
  $conv262 = HEAP16[$A_Q12 + 8 >> 1] | 0;
  $conv279 = HEAP16[$A_Q12 + 10 >> 1] | 0;
  $conv296 = HEAP16[$A_Q12 + 12 >> 1] | 0;
  $conv313 = HEAP16[$A_Q12 + 14 >> 1] | 0;
  $conv330 = HEAP16[$A_Q12 + 16 >> 1] | 0;
  $conv347 = HEAP16[$A_Q12 + 18 >> 1] | 0;
  $cmp360 = ($29 | 0) == 16;
  $conv368 = HEAP16[$A_Q12 + 20 >> 1] | 0;
  $conv385 = HEAP16[$A_Q12 + 22 >> 1] | 0;
  $conv402 = HEAP16[$A_Q12 + 24 >> 1] | 0;
  $conv419 = HEAP16[$A_Q12 + 26 >> 1] | 0;
  $conv436 = HEAP16[$A_Q12 + 28 >> 1] | 0;
  $conv453 = HEAP16[$A_Q12 + 30 >> 1] | 0;
  $conv570 = $gain_Q16$0 << 10 >> 16;
  $shr584 = ($gain_Q16$0 >> 21) + 1 >> 1;
  $46 = HEAP32[$vla + 60 >> 2] | 0;
  $48 = HEAP32[$vla + 52 >> 2] | 0;
  $50 = HEAP32[$vla + 44 >> 2] | 0;
  $52 = HEAP32[$vla + 36 >> 2] | 0;
  $54 = HEAP32[$vla + 28 >> 2] | 0;
  $i$3282 = 0;
  while (1) {
   $mul195 = Math_imul($46 >> 16, $conv194) | 0;
   $shr203 = (Math_imul($46 & 65535, $conv194) | 0) >> 16;
   $48$looptemp = $48;
   $48 = HEAP32[$vla + ($i$3282 + 14 << 2) >> 2] | 0;
   $mul212 = Math_imul($48 >> 16, $conv211) | 0;
   $shr220 = (Math_imul($48 & 65535, $conv211) | 0) >> 16;
   $mul229 = Math_imul($48$looptemp >> 16, $conv228) | 0;
   $shr237 = (Math_imul($48$looptemp & 65535, $conv228) | 0) >> 16;
   $50$looptemp = $50;
   $50 = HEAP32[$vla + ($i$3282 + 12 << 2) >> 2] | 0;
   $mul246 = Math_imul($50 >> 16, $conv245) | 0;
   $shr254 = (Math_imul($50 & 65535, $conv245) | 0) >> 16;
   $mul263 = Math_imul($50$looptemp >> 16, $conv262) | 0;
   $shr271 = (Math_imul($50$looptemp & 65535, $conv262) | 0) >> 16;
   $52$looptemp = $52;
   $52 = HEAP32[$vla + ($i$3282 + 10 << 2) >> 2] | 0;
   $mul280 = Math_imul($52 >> 16, $conv279) | 0;
   $shr288 = (Math_imul($52 & 65535, $conv279) | 0) >> 16;
   $mul297 = Math_imul($52$looptemp >> 16, $conv296) | 0;
   $shr305 = (Math_imul($52$looptemp & 65535, $conv296) | 0) >> 16;
   $54$looptemp = $54;
   $54 = HEAP32[$vla + ($i$3282 + 8 << 2) >> 2] | 0;
   $mul314 = Math_imul($54 >> 16, $conv313) | 0;
   $shr322 = (Math_imul($54 & 65535, $conv313) | 0) >> 16;
   $mul331 = Math_imul($54$looptemp >> 16, $conv330) | 0;
   $shr339 = (Math_imul($54$looptemp & 65535, $conv330) | 0) >> 16;
   $55 = HEAP32[$vla + ($i$3282 + 6 << 2) >> 2] | 0;
   $add358 = $mul195 + $shr188299 + $shr203 + $mul212 + $shr220 + $mul229 + $shr237 + $mul246 + $shr254 + $mul263 + $shr271 + $mul280 + $shr288 + $mul297 + $shr305 + $mul314 + $shr322 + $mul331 + $shr339 + (Math_imul($55 >> 16, $conv347) | 0) + ((Math_imul($55 & 65535, $conv347) | 0) >> 16) | 0;
   if ($cmp360) {
    $56 = HEAP32[$vla + ($i$3282 + 5 << 2) >> 2] | 0;
    $mul369 = Math_imul($56 >> 16, $conv368) | 0;
    $shr377 = (Math_imul($56 & 65535, $conv368) | 0) >> 16;
    $57 = HEAP32[$vla + ($i$3282 + 4 << 2) >> 2] | 0;
    $mul386 = Math_imul($57 >> 16, $conv385) | 0;
    $shr394 = (Math_imul($57 & 65535, $conv385) | 0) >> 16;
    $58 = HEAP32[$vla + ($i$3282 + 3 << 2) >> 2] | 0;
    $mul403 = Math_imul($58 >> 16, $conv402) | 0;
    $shr411 = (Math_imul($58 & 65535, $conv402) | 0) >> 16;
    $59 = HEAP32[$vla + ($i$3282 + 2 << 2) >> 2] | 0;
    $mul420 = Math_imul($59 >> 16, $conv419) | 0;
    $shr428 = (Math_imul($59 & 65535, $conv419) | 0) >> 16;
    $60 = HEAP32[$vla + ($i$3282 + 1 << 2) >> 2] | 0;
    $mul437 = Math_imul($60 >> 16, $conv436) | 0;
    $shr445 = (Math_imul($60 & 65535, $conv436) | 0) >> 16;
    $61 = HEAP32[$vla + ($i$3282 << 2) >> 2] | 0;
    $LPC_pred_Q10$0 = $mul369 + $add358 + $shr377 + $mul386 + $shr394 + $mul403 + $shr411 + $mul420 + $shr428 + $mul437 + $shr445 + (Math_imul($61 >> 16, $conv453) | 0) + ((Math_imul($61 & 65535, $conv453) | 0) >> 16) | 0;
   } else $LPC_pred_Q10$0 = $add358;
   $arrayidx467 = $vla + ($i$3282 + 16 << 2) | 0;
   $62 = HEAP32[$arrayidx467 >> 2] | 0;
   $cond = ($LPC_pred_Q10$0 | 0) > -134217728 ? $LPC_pred_Q10$0 : -134217728;
   $shl476 = (($cond | 0) < 134217727 ? $cond : 134217727) << 4;
   $add477 = $shl476 + $62 | 0;
   if (($add477 | 0) > -1) $cond561 = ($shl476 & $62 | 0) < 0 ? -2147483648 : $add477; else $cond561 = ($shl476 | $62 | 0) > -1 ? 2147483647 : $add477;
   HEAP32[$arrayidx467 >> 2] = $cond561;
   $arrayidx564 = $frame + ($i$3282 << 1) | 0;
   $add586 = (Math_imul($cond561 >> 16, $conv570) | 0) + (Math_imul($cond561, $shr584) | 0) + ((Math_imul($cond561 & 65535, $conv570) | 0) >> 16) | 0;
   $add650 = (($add586 | 0) > 8388479 ? 32767 : ($add586 | 0) < -8388736 ? -32768 : ($add586 >> 7) + 1 >> 1) + (HEAP16[$arrayidx564 >> 1] | 0) | 0;
   $spec$select278 = ($add650 | 0) > -32768 ? $add650 : -32768;
   HEAP16[$arrayidx564 >> 1] = ($spec$select278 | 0) < 32767 ? $spec$select278 : 32767;
   $i$3282 = $i$3282 + 1 | 0;
   if (($i$3282 | 0) == ($length | 0)) break; else $46 = $cond561;
  }
 }
 dest = $arraydecay173;
 src = $vla + ($length << 2) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _llvm_stackrestore($17 | 0);
 STACKTOP = sp;
 return;
}

function _silk_burg_modified_FLP($A, $x, $minInvGain, $subfr_length, $nb_subfr, $D) {
 $A = $A | 0;
 $x = $x | 0;
 $minInvGain = +$minInvGain;
 $subfr_length = $subfr_length | 0;
 $nb_subfr = $nb_subfr | 0;
 $D = $D | 0;
 var $$pre = 0.0, $14 = 0.0, $16 = 0.0, $18 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $42 = 0.0, $45 = 0, $52 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $Af = 0, $C0$0$lcssa = 0.0, $C0$0200 = 0.0, $CAb = 0, $CAf = 0, $C_first_row = 0, $C_last_row = 0, $add$ptr = 0, $add$ptr236 = 0, $add$ptr28 = 0, $add$ptr28$us = 0, $add107 = 0.0, $add112 = 0.0, $add132 = 0.0, $add136 = 0.0, $add140 = 0.0, $add18 = 0.0, $add253 = 0.0, $add255 = 0.0, $add28$i24 = 0.0, $add39$i = 0.0, $add39$i39 = 0.0, $arrayidx = 0, $arrayidx119 = 0, $arrayidx168 = 0, $arrayidx171 = 0, $arrayidx200$phi$trans$insert = 0, $arrayidx203 = 0, $arrayidx44$us = 0, $arrayidx54$us = 0, $arrayidx80 = 0, $arrayidx80$us = 0, $arrayidx88 = 0, $arrayidx88$us = 0, $call8 = 0.0, $cmp2240 = 0, $cmp32$i2 = 0, $cmp99215 = 0, $conv = 0.0, $conv$i = 0.0, $conv$i7 = 0.0, $conv14$i = 0.0, $conv14$i16 = 0.0, $conv149 = 0.0, $conv22$i = 0.0, $conv22$i21 = 0.0, $conv266 = 0.0, $conv33 = 0.0, $conv35$i = 0.0, $conv35$i37 = 0.0, $conv6$i = 0.0, $conv6$i11 = 0.0, $div = 0.0, $i$0$lcssa$i = 0, $i$0$lcssa$i29 = 0, $i$033$i = 0, $i$033$i5 = 0, $i$129$i = 0, $i$129$i35 = 0, $inc213280 = 0, $indvars$iv = 0, $indvars$iv260 = 0, $invGain$0235 = 0.0, $invGain$1 = 0.0, $k$0207$us = 0, $k$1212 = 0, $k$1212$us = 0, $k$2216 = 0, $k$3222 = 0, $k$4230 = 0, $k$7203 = 0, $k$8194 = 0, $mul = 0, $mul148 = 0.0, $mul16 = 0.0, $n$0239 = 0, $n$1233 = 0, $nrg_b$0$lcssa = 0.0, $nrg_b$0225 = 0.0, $nrg_f$0$lcssa = 0.0, $nrg_f$0224 = 0.0, $nrg_f$1$lcssa = 0.0, $nrg_f$1195 = 0.0, $nrg_f$2 = 0.0, $num$0$lcssa = 0.0, $num$0223 = 0.0, $rc$1 = 0.0, $reached_max_gain$1 = 0, $result$0$lcssa$i = 0.0, $result$0$lcssa$i30 = 0.0, $result$034$i = 0.0, $result$034$i4 = 0.0, $result$1$lcssa$i = 0.0, $result$1$lcssa$i43 = 0.0, $result$130$i = 0.0, $result$130$i34 = 0.0, $s$0241 = 0, $s$1214 = 0, $s$1214$us = 0, $s$2199 = 0, $sub$i = 0, $sub$i1 = 0, $sub104 = 0, $sub169 = 0, $sub238 = 0.0, $sub30 = 0, $sub31 = 0, $sub39 = 0, $tmp1$0208$us = 0.0, $tmp1$1$lcssa = 0.0, $tmp1$1217 = 0.0, $tmp1$2$lcssa = 0.0, $tmp1$2196 = 0.0, $tmp2$0209$us = 0.0, $tmp2$1218 = 0.0, label = 0, sp = 0, $n$1233$looptemp = 0, $k$8194$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $C_first_row = sp + 800 | 0;
 $C_last_row = sp + 608 | 0;
 $CAf = sp + 400 | 0;
 $CAb = sp + 192 | 0;
 $Af = sp;
 $mul = Math_imul($nb_subfr, $subfr_length) | 0;
 if (($mul | 0) >= 385) _celt_fatal(54353, 54413, 55);
 $sub$i = $mul + -3 | 0;
 if (($mul | 0) > 3) {
  $i$033$i = 0;
  $result$034$i = 0.0;
  do {
   $conv$i = +HEAPF32[$x + ($i$033$i << 2) >> 2];
   $conv6$i = +HEAPF32[$x + (($i$033$i | 1) << 2) >> 2];
   $conv14$i = +HEAPF32[$x + (($i$033$i | 2) << 2) >> 2];
   $conv22$i = +HEAPF32[$x + (($i$033$i | 3) << 2) >> 2];
   $result$034$i = $result$034$i + ($conv$i * $conv$i + $conv6$i * $conv6$i + $conv14$i * $conv14$i + $conv22$i * $conv22$i);
   $i$033$i = $i$033$i + 4 | 0;
  } while (($i$033$i | 0) < ($sub$i | 0));
  $i$0$lcssa$i = $mul & -4;
  $result$0$lcssa$i = $result$034$i;
 } else {
  $i$0$lcssa$i = 0;
  $result$0$lcssa$i = 0.0;
 }
 if (($i$0$lcssa$i | 0) < ($mul | 0)) {
  $i$129$i = $i$0$lcssa$i;
  $result$130$i = $result$0$lcssa$i;
  while (1) {
   $conv35$i = +HEAPF32[$x + ($i$129$i << 2) >> 2];
   $add39$i = $result$130$i + $conv35$i * $conv35$i;
   $i$129$i = $i$129$i + 1 | 0;
   if (($i$129$i | 0) == ($mul | 0)) {
    $result$1$lcssa$i = $add39$i;
    break;
   } else $result$130$i = $add39$i;
  }
 } else $result$1$lcssa$i = $result$0$lcssa$i;
 _memset($C_first_row | 0, 0, 192) | 0;
 $cmp2240 = ($nb_subfr | 0) > 0;
 if (!(($D | 0) < 1 | $cmp2240 ^ 1)) {
  $s$0241 = 0;
  do {
   $add$ptr = $x + ((Math_imul($s$0241, $subfr_length) | 0) << 2) | 0;
   $n$0239 = 1;
   while (1) {
    $call8 = +_silk_inner_product_FLP($add$ptr, $add$ptr + ($n$0239 << 2) | 0, $subfr_length - $n$0239 | 0);
    $arrayidx = $C_first_row + ($n$0239 + -1 << 3) | 0;
    HEAPF64[$arrayidx >> 3] = $call8 + +HEAPF64[$arrayidx >> 3];
    if (($n$0239 | 0) == ($D | 0)) break; else $n$0239 = $n$0239 + 1 | 0;
   }
   $s$0241 = $s$0241 + 1 | 0;
  } while (($s$0241 | 0) != ($nb_subfr | 0));
 }
 _memcpy($C_last_row | 0, $C_first_row | 0, 192) | 0;
 $mul16 = $result$1$lcssa$i * 9.999999747378752e-06;
 $add18 = $result$1$lcssa$i + $mul16 + 9.999999717180685e-10;
 HEAPF64[$CAf >> 3] = $add18;
 HEAPF64[$CAb >> 3] = $add18;
 L23 : do if (($D | 0) > 0) {
  $conv149 = $minInvGain;
  $indvars$iv = 1;
  $indvars$iv260 = 2;
  $invGain$0235 = 1.0;
  $n$1233 = 0;
  while (1) {
   $7 = $indvars$iv >>> 1;
   L27 : do if ($cmp2240) {
    $sub30 = $subfr_length - $n$1233 | 0;
    $sub31 = $sub30 + -1 | 0;
    $sub39 = $n$1233 + -1 | 0;
    if (!$n$1233) {
     $s$1214 = 0;
     while (1) {
      $add$ptr28 = $x + ((Math_imul($s$1214, $subfr_length) | 0) << 2) | 0;
      $conv = +HEAPF32[$add$ptr28 >> 2];
      $conv33 = +HEAPF32[$add$ptr28 + ($sub31 << 2) >> 2];
      $k$1212 = 0;
      do {
       $arrayidx80 = $CAf + ($k$1212 << 3) | 0;
       HEAPF64[$arrayidx80 >> 3] = +HEAPF64[$arrayidx80 >> 3] - $conv * +HEAPF32[$add$ptr28 + (0 - $k$1212 << 2) >> 2];
       $arrayidx88 = $CAb + ($k$1212 << 3) | 0;
       HEAPF64[$arrayidx88 >> 3] = +HEAPF64[$arrayidx88 >> 3] - $conv33 * +HEAPF32[$add$ptr28 + ($sub31 + $k$1212 << 2) >> 2];
       $k$1212 = $k$1212 + 1 | 0;
      } while (($k$1212 | 0) != ($indvars$iv | 0));
      $s$1214 = $s$1214 + 1 | 0;
      if (($s$1214 | 0) == ($nb_subfr | 0)) break L27;
     }
    }
    $s$1214$us = 0;
    do {
     $add$ptr28$us = $x + ((Math_imul($s$1214$us, $subfr_length) | 0) << 2) | 0;
     $8 = +HEAPF32[$add$ptr28$us + ($n$1233 << 2) >> 2];
     $9 = +HEAPF32[$add$ptr28$us + ($sub31 << 2) >> 2];
     $k$0207$us = 0;
     $tmp1$0208$us = $8;
     $tmp2$0209$us = $9;
     do {
      $14 = +HEAPF32[$add$ptr28$us + ($sub39 - $k$0207$us << 2) >> 2];
      $arrayidx44$us = $C_first_row + ($k$0207$us << 3) | 0;
      HEAPF64[$arrayidx44$us >> 3] = +HEAPF64[$arrayidx44$us >> 3] - $8 * $14;
      $16 = +HEAPF32[$add$ptr28$us + ($k$0207$us + $sub30 << 2) >> 2];
      $arrayidx54$us = $C_last_row + ($k$0207$us << 3) | 0;
      HEAPF64[$arrayidx54$us >> 3] = +HEAPF64[$arrayidx54$us >> 3] - $9 * $16;
      $18 = +HEAPF64[$Af + ($k$0207$us << 3) >> 3];
      $tmp1$0208$us = $tmp1$0208$us + $18 * $14;
      $tmp2$0209$us = $tmp2$0209$us + $18 * $16;
      $k$0207$us = $k$0207$us + 1 | 0;
     } while (($k$0207$us | 0) != ($n$1233 | 0));
     $k$1212$us = 0;
     do {
      $arrayidx80$us = $CAf + ($k$1212$us << 3) | 0;
      HEAPF64[$arrayidx80$us >> 3] = +HEAPF64[$arrayidx80$us >> 3] - $tmp1$0208$us * +HEAPF32[$add$ptr28$us + ($n$1233 - $k$1212$us << 2) >> 2];
      $arrayidx88$us = $CAb + ($k$1212$us << 3) | 0;
      HEAPF64[$arrayidx88$us >> 3] = +HEAPF64[$arrayidx88$us >> 3] - $tmp2$0209$us * +HEAPF32[$add$ptr28$us + ($sub31 + $k$1212$us << 2) >> 2];
      $k$1212$us = $k$1212$us + 1 | 0;
     } while (($k$1212$us | 0) != ($indvars$iv | 0));
     $s$1214$us = $s$1214$us + 1 | 0;
    } while (($s$1214$us | 0) != ($nb_subfr | 0));
   } while (0);
   $25 = +HEAPF64[$C_first_row + ($n$1233 << 3) >> 3];
   $26 = +HEAPF64[$C_last_row + ($n$1233 << 3) >> 3];
   $cmp99215 = ($n$1233 | 0) == 0;
   if ($cmp99215) {
    $30 = $26;
    $tmp1$1$lcssa = $25;
   } else {
    $k$2216 = 0;
    $tmp1$1217 = $25;
    $tmp2$1218 = $26;
    while (1) {
     $27 = +HEAPF64[$Af + ($k$2216 << 3) >> 3];
     $sub104 = $n$1233 - $k$2216 + -1 | 0;
     $add107 = $tmp1$1217 + $27 * +HEAPF64[$C_last_row + ($sub104 << 3) >> 3];
     $add112 = $tmp2$1218 + $27 * +HEAPF64[$C_first_row + ($sub104 << 3) >> 3];
     $k$2216 = $k$2216 + 1 | 0;
     if (($k$2216 | 0) == ($n$1233 | 0)) {
      $30 = $add112;
      $tmp1$1$lcssa = $add107;
      break;
     } else {
      $tmp1$1217 = $add107;
      $tmp2$1218 = $add112;
     }
    }
   }
   $n$1233$looptemp = $n$1233;
   $n$1233 = $n$1233 + 1 | 0;
   HEAPF64[$CAf + ($n$1233 << 3) >> 3] = $tmp1$1$lcssa;
   $arrayidx119 = $CAb + ($n$1233 << 3) | 0;
   HEAPF64[$arrayidx119 >> 3] = $30;
   $31 = +HEAPF64[$CAb >> 3];
   $32 = +HEAPF64[$CAf >> 3];
   if ($cmp99215) {
    $nrg_b$0$lcssa = $31;
    $nrg_f$0$lcssa = $32;
    $num$0$lcssa = $30;
   } else {
    $k$3222 = 0;
    $nrg_b$0225 = $31;
    $nrg_f$0224 = $32;
    $num$0223 = $30;
    while (1) {
     $33 = +HEAPF64[$Af + ($k$3222 << 3) >> 3];
     $add132 = $num$0223 + $33 * +HEAPF64[$CAb + ($n$1233$looptemp - $k$3222 << 3) >> 3];
     $k$3222 = $k$3222 + 1 | 0;
     $add136 = $nrg_b$0225 + $33 * +HEAPF64[$CAb + ($k$3222 << 3) >> 3];
     $add140 = $nrg_f$0224 + $33 * +HEAPF64[$CAf + ($k$3222 << 3) >> 3];
     if (($k$3222 | 0) == ($n$1233$looptemp | 0)) {
      $nrg_b$0$lcssa = $add136;
      $nrg_f$0$lcssa = $add140;
      $num$0$lcssa = $add132;
      break;
     } else {
      $nrg_b$0225 = $add136;
      $nrg_f$0224 = $add140;
      $num$0223 = $add132;
     }
    }
   }
   $div = $num$0$lcssa * -2.0 / ($nrg_f$0$lcssa + $nrg_b$0$lcssa);
   $mul148 = $invGain$0235 * (1.0 - $div * $div);
   if (!($mul148 <= $conv149)) {
    $invGain$1 = $mul148;
    $rc$1 = $div;
    $reached_max_gain$1 = 0;
   } else {
    $37 = +Math_sqrt(+(1.0 - $conv149 / $invGain$0235));
    $invGain$1 = $conv149;
    $rc$1 = $num$0$lcssa > 0.0 ? -$37 : $37;
    $reached_max_gain$1 = 1;
   }
   if ($n$1233 & 2147483646 | 0) {
    $sub169 = $n$1233$looptemp + -1 | 0;
    $k$4230 = 0;
    do {
     $arrayidx168 = $Af + ($k$4230 << 3) | 0;
     $38 = +HEAPF64[$arrayidx168 >> 3];
     $arrayidx171 = $Af + ($sub169 - $k$4230 << 3) | 0;
     $39 = +HEAPF64[$arrayidx171 >> 3];
     HEAPF64[$arrayidx168 >> 3] = $38 + $rc$1 * $39;
     HEAPF64[$arrayidx171 >> 3] = $39 + $rc$1 * $38;
     $k$4230 = $k$4230 + 1 | 0;
    } while (($k$4230 | 0) != ($7 | 0));
   }
   HEAPF64[$Af + ($n$1233$looptemp << 3) >> 3] = $rc$1;
   if ($reached_max_gain$1 | 0) break;
   HEAPF64[$CAf >> 3] = $32 + $rc$1 * $30;
   HEAPF64[$arrayidx119 >> 3] = $30 + $rc$1 * $32;
   $inc213280 = 1;
   do {
    $arrayidx200$phi$trans$insert = $CAf + ($inc213280 << 3) | 0;
    $$pre = +HEAPF64[$arrayidx200$phi$trans$insert >> 3];
    $arrayidx203 = $CAb + ($n$1233 - $inc213280 << 3) | 0;
    $42 = +HEAPF64[$arrayidx203 >> 3];
    HEAPF64[$arrayidx200$phi$trans$insert >> 3] = $$pre + $rc$1 * $42;
    HEAPF64[$arrayidx203 >> 3] = $42 + $rc$1 * $$pre;
    $inc213280 = $inc213280 + 1 | 0;
   } while (($inc213280 | 0) != ($indvars$iv260 | 0));
   if (($n$1233 | 0) >= ($D | 0)) {
    label = 58;
    break;
   } else {
    $indvars$iv = $indvars$iv + 1 | 0;
    $indvars$iv260 = $indvars$iv260 + 1 | 0;
    $invGain$0235 = $invGain$1;
   }
  }
  if ((label | 0) == 58) {
   $k$8194 = 0;
   $nrg_f$1195 = +HEAPF64[$CAf >> 3];
   $tmp1$2196 = 1.0;
   while (1) {
    $52 = +HEAPF64[$Af + ($k$8194 << 3) >> 3];
    $k$8194$looptemp = $k$8194;
    $k$8194 = $k$8194 + 1 | 0;
    $add253 = $nrg_f$1195 + $52 * +HEAPF64[$CAf + ($k$8194 << 3) >> 3];
    $add255 = $tmp1$2196 + $52 * $52;
    HEAPF32[$A + ($k$8194$looptemp << 2) >> 2] = -$52;
    if (($k$8194 | 0) == ($D | 0)) {
     $nrg_f$1$lcssa = $add253;
     $tmp1$2$lcssa = $add255;
     break L23;
    } else {
     $nrg_f$1195 = $add253;
     $tmp1$2196 = $add255;
    }
   }
  }
  if (($n$1233 | 0) < ($D | 0)) _memset($Af + ($n$1233 << 3) | 0, 0, $D - $n$1233 << 3 | 0) | 0;
  $k$7203 = 0;
  do {
   HEAPF32[$A + ($k$7203 << 2) >> 2] = -+HEAPF64[$Af + ($k$7203 << 3) >> 3];
   $k$7203 = $k$7203 + 1 | 0;
  } while (($k$7203 | 0) != ($D | 0));
  if ($cmp2240) {
   $sub$i1 = $D + -3 | 0;
   $cmp32$i2 = ($D | 0) > 3;
   $45 = $D & -4;
   $C0$0200 = $result$1$lcssa$i;
   $s$2199 = 0;
   while (1) {
    $add$ptr236 = $x + ((Math_imul($s$2199, $subfr_length) | 0) << 2) | 0;
    if ($cmp32$i2) {
     $i$033$i5 = 0;
     $result$034$i4 = 0.0;
     while (1) {
      $conv$i7 = +HEAPF32[$add$ptr236 + ($i$033$i5 << 2) >> 2];
      $conv6$i11 = +HEAPF32[$add$ptr236 + (($i$033$i5 | 1) << 2) >> 2];
      $conv14$i16 = +HEAPF32[$add$ptr236 + (($i$033$i5 | 2) << 2) >> 2];
      $conv22$i21 = +HEAPF32[$add$ptr236 + (($i$033$i5 | 3) << 2) >> 2];
      $add28$i24 = $result$034$i4 + ($conv$i7 * $conv$i7 + $conv6$i11 * $conv6$i11 + $conv14$i16 * $conv14$i16 + $conv22$i21 * $conv22$i21);
      $i$033$i5 = $i$033$i5 + 4 | 0;
      if (($i$033$i5 | 0) >= ($sub$i1 | 0)) {
       $i$0$lcssa$i29 = $45;
       $result$0$lcssa$i30 = $add28$i24;
       break;
      } else $result$034$i4 = $add28$i24;
     }
    } else {
     $i$0$lcssa$i29 = 0;
     $result$0$lcssa$i30 = 0.0;
    }
    if (($i$0$lcssa$i29 | 0) < ($D | 0)) {
     $i$129$i35 = $i$0$lcssa$i29;
     $result$130$i34 = $result$0$lcssa$i30;
     while (1) {
      $conv35$i37 = +HEAPF32[$add$ptr236 + ($i$129$i35 << 2) >> 2];
      $add39$i39 = $result$130$i34 + $conv35$i37 * $conv35$i37;
      $i$129$i35 = $i$129$i35 + 1 | 0;
      if (($i$129$i35 | 0) == ($D | 0)) {
       $result$1$lcssa$i43 = $add39$i39;
       break;
      } else $result$130$i34 = $add39$i39;
     }
    } else $result$1$lcssa$i43 = $result$0$lcssa$i30;
    $sub238 = $C0$0200 - $result$1$lcssa$i43;
    $s$2199 = $s$2199 + 1 | 0;
    if (($s$2199 | 0) == ($nb_subfr | 0)) {
     $C0$0$lcssa = $sub238;
     break;
    } else $C0$0200 = $sub238;
   }
  } else $C0$0$lcssa = $result$1$lcssa$i;
  $nrg_f$2 = $invGain$1 * $C0$0$lcssa;
  $conv266 = $nrg_f$2;
  STACKTOP = sp;
  return +$conv266;
 } else {
  $nrg_f$1$lcssa = $add18;
  $tmp1$2$lcssa = 1.0;
 } while (0);
 $nrg_f$2 = $nrg_f$1$lcssa - $mul16 * $tmp1$2$lcssa;
 $conv266 = $nrg_f$2;
 STACKTOP = sp;
 return +$conv266;
}

function _silk_stereo_find_predictor($ratio_Q14, $x, $y, $mid_res_amp_Q0, $length, $smooth_coef_Q16) {
 $ratio_Q14 = $ratio_Q14 | 0;
 $x = $x | 0;
 $y = $y | 0;
 $mid_res_amp_Q0 = $mid_res_amp_Q0 | 0;
 $length = $length | 0;
 $smooth_coef_Q16 = $smooth_coef_Q16 | 0;
 var $23 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $add = 0, $add$i = 0, $add$i185 = 0, $add18 = 0, $add22$i = 0, $add34$i = 0, $add34$i197 = 0, $add45 = 0, $add70 = 0, $add90 = 0, $and9$i157 = 0, $and9$i89 = 0, $arrayidx71 = 0, $call10155 = 0, $call5225 = 0, $cmp$i$i$i133 = 0, $cmp$i$i$i65 = 0, $cmp44$i = 0, $cmp44$i205 = 0, $cmp57$i = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i51 = 0, $cond$i165 = 0, $cond$i227 = 0, $cond10 = 0, $cond113 = 0, $cond25 = 0, $conv$i = 0, $conv$i25 = 0, $conv12 = 0, $conv12$i = 0, $conv12$i180 = 0, $conv16$i = 0, $conv16$i43 = 0, $conv32$i = 0, $conv32$i57 = 0, $conv33 = 0, $conv38$i = 0, $conv38$i61 = 0, $conv5$i = 0, $conv5$i29 = 0, $conv53$i = 0, $conv53$i75 = 0, $conv61 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i38 = 0, $i$058$i = 0, $i$058$i23 = 0, $i$07$i = 0, $i$1$lcssa$i = 0, $i$1$lcssa$i70 = 0, $i$154$i = 0, $i$154$i55 = 0, $mul$i26 = 0, $mul$i3 = 0, $mul34 = 0, $mul35$i = 0, $mul35$i58 = 0, $nrg$0$lcssa$i = 0, $nrg$0$lcssa$i39 = 0, $nrg$059$i = 0, $nrg$059$i22 = 0, $nrg$1$i = 0, $nrg$1$i48 = 0, $nrg$2$lcssa$i = 0, $nrg$2$lcssa$i71 = 0, $nrg$255$i = 0, $nrg$255$i54 = 0, $nrg$3$i = 0, $nrg$3$i80 = 0, $retval$0$i = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i113 = 0, $retval$0$i$i$i147 = 0, $retval$0$i$i$i79 = 0, $shl$i = 0, $shl$i170 = 0, $shl10$i = 0, $shl10$i175 = 0, $shl73 = 0, $shl73$pn = 0, $shr = 0, $shr2 = 0, $shr3$i152 = 0, $shr3$i84 = 0, $shr4$i153 = 0, $shr4$i85 = 0, $shr41$i = 0, $shr41$i$shr43$i = 0, $shr41$i203 = 0, $shr41$i203$shr43$i204 = 0, $shr43$i = 0, $shr43$i$shr41$i = 0, $shr43$i204 = 0, $shr43$i204$shr41$i203 = 0, $spec$select = 0, $spec$select52 = 0, $sub$i$i$i132 = 0, $sub$i$i$i64 = 0, $sub$i$i131 = 0, $sub$i$i63 = 0, $sub$i1 = 0, $sub1$i2 = 0, $sub23$i = 0, $sub23$i190 = 0, $sub24$i = 0, $sub24$i50 = 0, $sub37$i = 0, $sub37$i200 = 0, $sub40$i = 0, $sub40$i202 = 0, $sum$0$lcssa$i84 = 0, $sum$08$i = 0;
 $sub$i1 = 31 - (Math_clz32($length | 0) | 0) | 0;
 $sub1$i2 = $length + -1 | 0;
 $cmp57$i = ($length | 0) > 1;
 if ($cmp57$i) {
  $i$058$i = 0;
  $nrg$059$i = $length;
  do {
   $conv$i = HEAP16[$x + ($i$058$i << 1) >> 1] | 0;
   $mul$i3 = Math_imul($conv$i, $conv$i) | 0;
   $conv5$i = HEAP16[$x + (($i$058$i | 1) << 1) >> 1] | 0;
   $nrg$059$i = (((Math_imul($conv5$i, $conv5$i) | 0) + $mul$i3 | 0) >>> $sub$i1) + $nrg$059$i | 0;
   $i$058$i = $i$058$i + 2 | 0;
  } while (($i$058$i | 0) < ($sub1$i2 | 0));
  $i$0$lcssa$i = $length & -2;
  $nrg$0$lcssa$i = $nrg$059$i;
 } else {
  $i$0$lcssa$i = 0;
  $nrg$0$lcssa$i = $length;
 }
 if (($i$0$lcssa$i | 0) < ($length | 0)) {
  $conv16$i = HEAP16[$x + ($i$0$lcssa$i << 1) >> 1] | 0;
  $nrg$1$i = ((Math_imul($conv16$i, $conv16$i) | 0) >>> $sub$i1) + $nrg$0$lcssa$i | 0;
 } else $nrg$1$i = $nrg$0$lcssa$i;
 $add22$i = $sub$i1 + 3 | 0;
 $sub24$i = $add22$i - (Math_clz32($nrg$1$i | 0) | 0) | 0;
 $cond$i$i = ($sub24$i | 0) > 0 ? $sub24$i : 0;
 if ($cmp57$i) {
  $i$154$i = 0;
  $nrg$255$i = 0;
  do {
   $conv32$i = HEAP16[$x + ($i$154$i << 1) >> 1] | 0;
   $mul35$i = Math_imul($conv32$i, $conv32$i) | 0;
   $conv38$i = HEAP16[$x + (($i$154$i | 1) << 1) >> 1] | 0;
   $nrg$255$i = (((Math_imul($conv38$i, $conv38$i) | 0) + $mul35$i | 0) >>> $cond$i$i) + $nrg$255$i | 0;
   $i$154$i = $i$154$i + 2 | 0;
  } while (($i$154$i | 0) < ($sub1$i2 | 0));
  $i$1$lcssa$i = $length & -2;
  $nrg$2$lcssa$i = $nrg$255$i;
 } else {
  $i$1$lcssa$i = 0;
  $nrg$2$lcssa$i = 0;
 }
 if (($i$1$lcssa$i | 0) < ($length | 0)) {
  $conv53$i = HEAP16[$x + ($i$1$lcssa$i << 1) >> 1] | 0;
  $nrg$3$i = ((Math_imul($conv53$i, $conv53$i) | 0) >>> $cond$i$i) + $nrg$2$lcssa$i | 0;
 } else $nrg$3$i = $nrg$2$lcssa$i;
 if ($cmp57$i) {
  $i$058$i23 = 0;
  $nrg$059$i22 = $length;
  do {
   $conv$i25 = HEAP16[$y + ($i$058$i23 << 1) >> 1] | 0;
   $mul$i26 = Math_imul($conv$i25, $conv$i25) | 0;
   $conv5$i29 = HEAP16[$y + (($i$058$i23 | 1) << 1) >> 1] | 0;
   $nrg$059$i22 = (((Math_imul($conv5$i29, $conv5$i29) | 0) + $mul$i26 | 0) >>> $sub$i1) + $nrg$059$i22 | 0;
   $i$058$i23 = $i$058$i23 + 2 | 0;
  } while (($i$058$i23 | 0) < ($sub1$i2 | 0));
  $i$0$lcssa$i38 = $length & -2;
  $nrg$0$lcssa$i39 = $nrg$059$i22;
 } else {
  $i$0$lcssa$i38 = 0;
  $nrg$0$lcssa$i39 = $length;
 }
 if (($i$0$lcssa$i38 | 0) < ($length | 0)) {
  $conv16$i43 = HEAP16[$y + ($i$0$lcssa$i38 << 1) >> 1] | 0;
  $nrg$1$i48 = ((Math_imul($conv16$i43, $conv16$i43) | 0) >>> $sub$i1) + $nrg$0$lcssa$i39 | 0;
 } else $nrg$1$i48 = $nrg$0$lcssa$i39;
 $sub24$i50 = $add22$i - (Math_clz32($nrg$1$i48 | 0) | 0) | 0;
 $cond$i$i51 = ($sub24$i50 | 0) > 0 ? $sub24$i50 : 0;
 if ($cmp57$i) {
  $i$154$i55 = 0;
  $nrg$255$i54 = 0;
  do {
   $conv32$i57 = HEAP16[$y + ($i$154$i55 << 1) >> 1] | 0;
   $mul35$i58 = Math_imul($conv32$i57, $conv32$i57) | 0;
   $conv38$i61 = HEAP16[$y + (($i$154$i55 | 1) << 1) >> 1] | 0;
   $nrg$255$i54 = (((Math_imul($conv38$i61, $conv38$i61) | 0) + $mul35$i58 | 0) >>> $cond$i$i51) + $nrg$255$i54 | 0;
   $i$154$i55 = $i$154$i55 + 2 | 0;
  } while (($i$154$i55 | 0) < ($sub1$i2 | 0));
  $i$1$lcssa$i70 = $length & -2;
  $nrg$2$lcssa$i71 = $nrg$255$i54;
 } else {
  $i$1$lcssa$i70 = 0;
  $nrg$2$lcssa$i71 = 0;
 }
 if (($i$1$lcssa$i70 | 0) < ($length | 0)) {
  $conv53$i75 = HEAP16[$y + ($i$1$lcssa$i70 << 1) >> 1] | 0;
  $nrg$3$i80 = ((Math_imul($conv53$i75, $conv53$i75) | 0) >>> $cond$i$i51) + $nrg$2$lcssa$i71 | 0;
 } else $nrg$3$i80 = $nrg$2$lcssa$i71;
 $cond$i = ($cond$i$i | 0) > ($cond$i$i51 | 0) ? $cond$i$i : $cond$i$i51;
 $add = ($cond$i & 1) + $cond$i | 0;
 $shr = $nrg$3$i80 >> $add - $cond$i$i51;
 $shr2 = $nrg$3$i >> $add - $cond$i$i;
 $cond$i227 = ($shr2 | 0) > 1 ? $shr2 : 1;
 if (($length | 0) > 0) {
  $i$07$i = 0;
  $sum$08$i = 0;
  do {
   $sum$08$i = ((Math_imul(HEAP16[$y + ($i$07$i << 1) >> 1] | 0, HEAP16[$x + ($i$07$i << 1) >> 1] | 0) | 0) >> $add) + $sum$08$i | 0;
   $i$07$i = $i$07$i + 1 | 0;
  } while (($i$07$i | 0) != ($length | 0));
  $23 = ($sum$08$i | 0) > 0 ? $sum$08$i : 0 - $sum$08$i | 0;
  $sum$0$lcssa$i84 = $sum$08$i;
 } else {
  $23 = 0;
  $sum$0$lcssa$i84 = 0;
 }
 $24 = Math_clz32($23 | 0) | 0;
 $shl$i170 = $sum$0$lcssa$i84 << $24 + -1;
 $25 = Math_clz32((($cond$i227 | 0) > 0 ? $cond$i227 : 0 - $cond$i227 | 0) | 0) | 0;
 $shl10$i175 = $cond$i227 << $25 + -1;
 $conv12$i180 = (536870911 / ($shl10$i175 >> 16 | 0) | 0) << 16 >> 16;
 $add$i185 = ((Math_imul($shl$i170 & 65535, $conv12$i180) | 0) >> 16) + (Math_imul($shl$i170 >> 16, $conv12$i180) | 0) | 0;
 $30 = ___muldi3($add$i185 | 0, (($add$i185 | 0) < 0) << 31 >> 31 | 0, $shl10$i175 | 0, (($shl10$i175 | 0) < 0) << 31 >> 31 | 0) | 0;
 $32 = _bitshift64Lshr($30 | 0, getTempRet0() | 0, 29) | 0;
 getTempRet0() | 0;
 $sub23$i190 = $shl$i170 - ($32 & -8) | 0;
 $add34$i197 = (Math_imul($sub23$i190 >> 16, $conv12$i180) | 0) + $add$i185 + ((Math_imul($sub23$i190 & 65535, $conv12$i180) | 0) >> 16) | 0;
 $sub37$i200 = $24 + 15 + (1 - $25) | 0;
 if (($sub37$i200 | 0) < 0) {
  $sub40$i202 = 0 - $sub37$i200 | 0;
  $shr41$i203 = -2147483648 >> $sub40$i202;
  $shr43$i204 = 2147483647 >>> $sub40$i202;
  $cmp44$i205 = ($shr41$i203 | 0) > ($shr43$i204 | 0);
  $shr41$i203$shr43$i204 = $cmp44$i205 ? $shr41$i203 : $shr43$i204;
  $shr43$i204$shr41$i203 = $cmp44$i205 ? $shr43$i204 : $shr41$i203;
  $call5225 = (($add34$i197 | 0) > ($shr41$i203$shr43$i204 | 0) ? $shr41$i203$shr43$i204 : ($add34$i197 | 0) < ($shr43$i204$shr41$i203 | 0) ? $shr43$i204$shr41$i203 : $add34$i197) << $sub40$i202;
 } else $call5225 = ($sub37$i200 | 0) < 32 ? $add34$i197 >> $sub37$i200 : 0;
 $cond = ($call5225 | 0) > -16384 ? $call5225 : -16384;
 $cond10 = ($cond | 0) < 16384 ? $cond : 16384;
 $conv12 = $cond10 << 16 >> 16;
 $add18 = ((Math_imul($conv12, $cond10 & 65535) | 0) >> 16) + (Math_imul($conv12, $cond10 >> 16) | 0) | 0;
 $cond25 = ($add18 | 0) > 0 ? $add18 : 0 - $add18 | 0;
 $cond$i165 = ($cond25 | 0) < ($smooth_coef_Q16 | 0) ? $smooth_coef_Q16 : $cond25;
 $36 = $add >>> 1;
 $37 = HEAP32[$mid_res_amp_Q0 >> 2] | 0;
 $38 = Math_clz32($cond$i227 | 0) | 0;
 $sub$i$i131 = 24 - $38 | 0;
 $sub$i$i$i132 = 0 - $sub$i$i131 | 0;
 $cmp$i$i$i133 = ($sub$i$i131 | 0) == 0;
 do if ($cmp$i$i$i133) $retval$0$i$i$i147 = $cond$i227; else if (($sub$i$i131 | 0) < 0) {
  $retval$0$i$i$i147 = $cond$i227 >>> ($sub$i$i131 + 32 | 0) | $cond$i227 << $sub$i$i$i132;
  break;
 } else {
  $retval$0$i$i$i147 = $cond$i227 << 32 - $sub$i$i131 | $cond$i227 >>> $sub$i$i131;
  break;
 } while (0);
 $shr3$i152 = (($38 & 1 | 0) == 0 ? 46214 : 32768) >>> ($38 >>> 1);
 $shr4$i153 = $shr3$i152 >> 16;
 $39 = (Math_imul($retval$0$i$i$i147 & 127, 13959168) | 0) >>> 16;
 $and9$i157 = $shr3$i152 & 65535;
 $conv33 = $cond$i165 << 16 >> 16;
 $mul34 = Math_imul(((Math_imul($39, $shr4$i153) | 0) + $shr3$i152 + ((Math_imul($39, $and9$i157) | 0) >>> 16) << $36) - $37 >> 16, $conv33) | 0;
 do if ($cmp$i$i$i133) $retval$0$i$i$i113 = $cond$i227; else if (($sub$i$i131 | 0) < 0) {
  $retval$0$i$i$i113 = $cond$i227 >>> ($sub$i$i131 + 32 | 0) | $cond$i227 << $sub$i$i$i132;
  break;
 } else {
  $retval$0$i$i$i113 = $cond$i227 << 32 - $sub$i$i131 | $cond$i227 >>> $sub$i$i131;
  break;
 } while (0);
 $41 = (Math_imul($retval$0$i$i$i113 & 127, 13959168) | 0) >>> 16;
 $add45 = $mul34 + $37 + ((Math_imul(((Math_imul($41, $shr4$i153) | 0) + $shr3$i152 + ((Math_imul($41, $and9$i157) | 0) >>> 16) << $36) - $37 & 65535, $conv33) | 0) >> 16) | 0;
 HEAP32[$mid_res_amp_Q0 >> 2] = $add45;
 $conv61 = $add18 << 16 >> 16;
 $add70 = $shr - (((Math_imul($conv12, $sum$0$lcssa$i84 & 65535) | 0) >> 16) + (Math_imul($conv12, $sum$0$lcssa$i84 >> 16) | 0) << 4) + (((Math_imul($conv61, $cond$i227 & 65535) | 0) >> 16) + (Math_imul($conv61, $cond$i227 >>> 16) | 0) << 6) | 0;
 $arrayidx71 = $mid_res_amp_Q0 + 4 | 0;
 $44 = HEAP32[$arrayidx71 >> 2] | 0;
 if (($add70 | 0) < 1) {
  $retval$0$i = 0;
  $shl73$pn = 0;
 } else {
  $45 = Math_clz32($add70 | 0) | 0;
  $sub$i$i63 = 24 - $45 | 0;
  $sub$i$i$i64 = 0 - $sub$i$i63 | 0;
  $cmp$i$i$i65 = ($sub$i$i63 | 0) == 0;
  do if ($cmp$i$i$i65) $retval$0$i$i$i79 = $add70; else if (($sub$i$i63 | 0) < 0) {
   $retval$0$i$i$i79 = $add70 >>> ($sub$i$i63 + 32 | 0) | $add70 << $sub$i$i$i64;
   break;
  } else {
   $retval$0$i$i$i79 = $add70 << 32 - $sub$i$i63 | $add70 >>> $sub$i$i63;
   break;
  } while (0);
  $shr3$i84 = (($45 & 1 | 0) == 0 ? 46214 : 32768) >>> ($45 >>> 1);
  $shr4$i85 = $shr3$i84 >> 16;
  $46 = (Math_imul($retval$0$i$i$i79 & 127, 13959168) | 0) >>> 16;
  $and9$i89 = $shr3$i84 & 65535;
  $shl73 = (Math_imul($46, $shr4$i85) | 0) + $shr3$i84 + ((Math_imul($46, $and9$i89) | 0) >>> 16) << $36;
  do if ($cmp$i$i$i65) $retval$0$i$i$i = $add70; else if (($sub$i$i63 | 0) < 0) {
   $retval$0$i$i$i = $add70 >>> ($sub$i$i63 + 32 | 0) | $add70 << $sub$i$i$i64;
   break;
  } else {
   $retval$0$i$i$i = $add70 << 32 - $sub$i$i63 | $add70 >>> $sub$i$i63;
   break;
  } while (0);
  $48 = (Math_imul($retval$0$i$i$i & 127, 13959168) | 0) >>> 16;
  $retval$0$i = (Math_imul($48, $shr4$i85) | 0) + $shr3$i84 + ((Math_imul($48, $and9$i89) | 0) >>> 16) | 0;
  $shl73$pn = $shl73;
 }
 $add90 = (Math_imul($shl73$pn - $44 >> 16, $conv33) | 0) + $44 + ((Math_imul(($retval$0$i << $36) - $44 & 65535, $conv33) | 0) >> 16) | 0;
 HEAP32[$arrayidx71 >> 2] = $add90;
 $spec$select = ($add45 | 0) > 1 ? $add45 : 1;
 $50 = Math_clz32((($add90 | 0) > 0 ? $add90 : 0 - $add90 | 0) | 0) | 0;
 $shl$i = $add90 << $50 + -1;
 $51 = Math_clz32((($spec$select | 0) > 0 ? $spec$select : 0 - $spec$select | 0) | 0) | 0;
 $shl10$i = $spec$select << $51 + -1;
 $conv12$i = (536870911 / ($shl10$i >> 16 | 0) | 0) << 16 >> 16;
 $add$i = ((Math_imul($shl$i & 65535, $conv12$i) | 0) >> 16) + (Math_imul($shl$i >> 16, $conv12$i) | 0) | 0;
 $56 = ___muldi3($add$i | 0, (($add$i | 0) < 0) << 31 >> 31 | 0, $shl10$i | 0, (($shl10$i | 0) < 0) << 31 >> 31 | 0) | 0;
 $58 = _bitshift64Lshr($56 | 0, getTempRet0() | 0, 29) | 0;
 getTempRet0() | 0;
 $sub23$i = $shl$i - ($58 & -8) | 0;
 $add34$i = (Math_imul($sub23$i >> 16, $conv12$i) | 0) + $add$i + ((Math_imul($sub23$i & 65535, $conv12$i) | 0) >> 16) | 0;
 $sub37$i = 1 - $51 + 14 + $50 | 0;
 if (($sub37$i | 0) < 0) {
  $sub40$i = 0 - $sub37$i | 0;
  $shr41$i = -2147483648 >> $sub40$i;
  $shr43$i = 2147483647 >>> $sub40$i;
  $cmp44$i = ($shr41$i | 0) > ($shr43$i | 0);
  $shr41$i$shr43$i = $cmp44$i ? $shr41$i : $shr43$i;
  $shr43$i$shr41$i = $cmp44$i ? $shr43$i : $shr41$i;
  $call10155 = (($add34$i | 0) > ($shr41$i$shr43$i | 0) ? $shr41$i$shr43$i : ($add34$i | 0) < ($shr43$i$shr41$i | 0) ? $shr43$i$shr41$i : $add34$i) << $sub40$i;
  $60 = ($call10155 | 0) > 0;
  $spec$select52 = $60 ? $call10155 : 0;
  $61 = ($spec$select52 | 0) < 32767;
  $cond113 = $61 ? $spec$select52 : 32767;
  HEAP32[$ratio_Q14 >> 2] = $cond113;
  return $cond10 | 0;
 } else {
  $call10155 = ($sub37$i | 0) < 32 ? $add34$i >> $sub37$i : 0;
  $60 = ($call10155 | 0) > 0;
  $spec$select52 = $60 ? $call10155 : 0;
  $61 = ($spec$select52 | 0) < 32767;
  $cond113 = $61 ? $spec$select52 : 32767;
  HEAP32[$ratio_Q14 >> 2] = $cond113;
  return $cond10 | 0;
 }
 return 0;
}

function _silk_NLSF2A($a_Q12, $NLSF, $d) {
 $a_Q12 = $a_Q12 | 0;
 $NLSF = $NLSF | 0;
 $d = $d | 0;
 var $$pre30$i = 0, $$pre30$i82 = 0, $101 = 0, $102 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $P = 0, $Q = 0, $a32_QA1 = 0, $add12$i = 0, $add12$i63 = 0, $add19$i = 0, $add19$i$i = 0, $add26 = 0, $add29 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx13$i = 0, $arrayidx13$i64 = 0, $arrayidx2$i = 0, $arrayidx2$i49 = 0, $arrayidx21 = 0, $arrayidx22$i = 0, $arrayidx22$i$i = 0, $arrayidx22$i6 = 0, $arrayidx22$i81 = 0, $arrayidx42$i = 0, $arrayidx6$i = 0, $arrayidx6$i57 = 0, $chirp_Q16$addr$0$lcssa$i = 0, $chirp_Q16$addr$0$lcssa$i$i = 0, $chirp_Q16$addr$029$i = 0, $chirp_Q16$addr$029$i$i = 0, $cmp2396 = 0, $cmp27$i = 0, $cmp7$us$i = 0, $cond = 0, $cond$us$i = 0, $cond25$us$i = 0, $cond99$i = 0, $conv = 0, $conv2$i = 0, $conv2$i$i = 0, $conv24$i = 0, $conv24$i$i = 0, $conv7 = 0, $cos_LSF_QA = 0, $i$0$lcssa$i = 0, $i$028$i = 0, $i$028$i$i = 0, $i$085$us$i = 0, $i$095$us = 0, $idx$084$us$i = 0, $idx$180$us$i = 0, $inc32$us$i = 0, $k$028$i = 0, $k$028$i52 = 0, $k$082$us$i = 0, $k$099 = 0, $k$176$i = 0, $k$197 = 0, $k$278$i = 0, $k$292$us = 0, $maxabs$081$us$i = 0, $phitmp = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$lcssa$i = 0, $shr$lcssa$i$i = 0, $shr15 = 0, $shr16$us$i = 0, $shr18 = 0, $shr27$i = 0, $shr27$i$i = 0, $shr30$i = 0, $shr30$i$i = 0, $shr51$i = 0, $sub$i = 0, $sub$i$i = 0, $sub$i48 = 0, $sub1$i = 0, $sub1$i$i = 0, $sub21$i130$in = 0, $sub21$i71118$in = 0, $sub29$us$i = 0, $sub33 = 0, $sub33$i = 0, $sub33$i84 = 0, $sub38 = 0, $sub53$us = 0, sp = 0, $32$looptemp = 0, $sub21$i130$in$looptemp = 0, $72$looptemp = 0, $sub21$i71118$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $cos_LSF_QA = sp + 224 | 0;
 $P = sp + 160 | 0;
 $Q = sp + 96 | 0;
 $a32_QA1 = sp;
 switch ($d | 0) {
 case 10:
 case 16:
  break;
 default:
  _celt_fatal(53072, 53105, 89);
 }
 $cond = ($d | 0) == 16 ? 27024 : 53119;
 $k$099 = 0;
 do {
  $conv = HEAP16[$NLSF + ($k$099 << 1) >> 1] | 0;
  $shr = $conv >> 8;
  $conv7 = HEAP16[26752 + ($shr << 1) >> 1] | 0;
  $shr15 = ((Math_imul((HEAP16[26752 + ($shr + 1 << 1) >> 1] | 0) - $conv7 | 0, $conv & 255) | 0) + ($conv7 << 8) >> 3) + 1 >> 1;
  HEAP32[$cos_LSF_QA + (HEAPU8[$cond + $k$099 >> 0] << 2) >> 2] = $shr15;
  $k$099 = $k$099 + 1 | 0;
 } while (($k$099 | 0) != ($d | 0));
 $phitmp = 0 - (HEAP32[$cos_LSF_QA >> 2] | 0) | 0;
 $shr18 = $d >> 1;
 HEAP32[$P >> 2] = 65536;
 $arrayidx2$i = $P + 4 | 0;
 HEAP32[$arrayidx2$i >> 2] = $phitmp;
 $cmp27$i = ($d | 0) > 3;
 L7 : do if ($cmp27$i) {
  $101 = $phitmp;
  $5 = 65536;
  $9 = $phitmp;
  $k$028$i = 1;
  while (1) {
   $4 = HEAP32[$cos_LSF_QA + ($k$028$i << 1 << 2) >> 2] | 0;
   $7 = (($4 | 0) < 0) << 31 >> 31;
   $arrayidx6$i = $P + ($k$028$i << 2) | 0;
   $11 = ___muldi3($4 | 0, $7 | 0, $9 | 0, (($9 | 0) < 0) << 31 >> 31 | 0) | 0;
   $13 = _bitshift64Lshr($11 | 0, getTempRet0() | 0, 15) | 0;
   $15 = _i64Add($13 | 0, getTempRet0() | 0, 1, 0) | 0;
   $17 = _bitshift64Lshr($15 | 0, getTempRet0() | 0, 1) | 0;
   getTempRet0() | 0;
   $add12$i = $k$028$i + 1 | 0;
   $arrayidx13$i = $P + ($add12$i << 2) | 0;
   HEAP32[$arrayidx13$i >> 2] = ($5 << 1) - $17;
   if ($k$028$i >>> 0 > 1) {
    $19 = HEAP32[$P + ($k$028$i + -2 << 2) >> 2] | 0;
    $22 = ___muldi3($5 | 0, (($5 | 0) < 0) << 31 >> 31 | 0, $4 | 0, $7 | 0) | 0;
    $24 = _bitshift64Lshr($22 | 0, getTempRet0() | 0, 15) | 0;
    $26 = _i64Add($24 | 0, getTempRet0() | 0, 1, 0) | 0;
    $28 = _bitshift64Lshr($26 | 0, getTempRet0() | 0, 1) | 0;
    getTempRet0() | 0;
    HEAP32[$arrayidx6$i >> 2] = $19 + $9 - $28;
    if (($k$028$i | 0) != 2) {
     $32 = $19;
     $sub21$i130$in = $k$028$i;
     do {
      $sub21$i130$in$looptemp = $sub21$i130$in;
      $sub21$i130$in = $sub21$i130$in + -1 | 0;
      $arrayidx22$i = $P + ($sub21$i130$in << 2) | 0;
      $$pre30$i = HEAP32[$arrayidx22$i >> 2] | 0;
      $32$looptemp = $32;
      $32 = HEAP32[$P + ($sub21$i130$in$looptemp + -3 << 2) >> 2] | 0;
      $34 = ___muldi3($32$looptemp | 0, (($32$looptemp | 0) < 0) << 31 >> 31 | 0, $4 | 0, $7 | 0) | 0;
      $36 = _bitshift64Lshr($34 | 0, getTempRet0() | 0, 15) | 0;
      $38 = _i64Add($36 | 0, getTempRet0() | 0, 1, 0) | 0;
      $40 = _bitshift64Lshr($38 | 0, getTempRet0() | 0, 1) | 0;
      getTempRet0() | 0;
      HEAP32[$arrayidx22$i >> 2] = $32 + $$pre30$i - $40;
     } while (($sub21$i130$in$looptemp | 0) > 3);
    }
    $42 = HEAP32[$arrayidx2$i >> 2] | 0;
   } else $42 = $101;
   $sub33$i = $42 - $4 | 0;
   HEAP32[$arrayidx2$i >> 2] = $sub33$i;
   if (($add12$i | 0) == ($shr18 | 0)) break L7;
   $101 = $sub33$i;
   $5 = HEAP32[$arrayidx6$i >> 2] | 0;
   $9 = HEAP32[$arrayidx13$i >> 2] | 0;
   $k$028$i = $add12$i;
  }
 } while (0);
 $arrayidx21 = $cos_LSF_QA + 4 | 0;
 HEAP32[$Q >> 2] = 65536;
 $sub$i48 = 0 - (HEAP32[$arrayidx21 >> 2] | 0) | 0;
 $arrayidx2$i49 = $Q + 4 | 0;
 HEAP32[$arrayidx2$i49 >> 2] = $sub$i48;
 L21 : do if ($cmp27$i) {
  $102 = $sub$i48;
  $45 = 65536;
  $49 = $sub$i48;
  $k$028$i52 = 1;
  while (1) {
   $44 = HEAP32[$arrayidx21 + ($k$028$i52 << 1 << 2) >> 2] | 0;
   $47 = (($44 | 0) < 0) << 31 >> 31;
   $arrayidx6$i57 = $Q + ($k$028$i52 << 2) | 0;
   $51 = ___muldi3($44 | 0, $47 | 0, $49 | 0, (($49 | 0) < 0) << 31 >> 31 | 0) | 0;
   $53 = _bitshift64Lshr($51 | 0, getTempRet0() | 0, 15) | 0;
   $55 = _i64Add($53 | 0, getTempRet0() | 0, 1, 0) | 0;
   $57 = _bitshift64Lshr($55 | 0, getTempRet0() | 0, 1) | 0;
   getTempRet0() | 0;
   $add12$i63 = $k$028$i52 + 1 | 0;
   $arrayidx13$i64 = $Q + ($add12$i63 << 2) | 0;
   HEAP32[$arrayidx13$i64 >> 2] = ($45 << 1) - $57;
   if ($k$028$i52 >>> 0 > 1) {
    $59 = HEAP32[$Q + ($k$028$i52 + -2 << 2) >> 2] | 0;
    $62 = ___muldi3($45 | 0, (($45 | 0) < 0) << 31 >> 31 | 0, $44 | 0, $47 | 0) | 0;
    $64 = _bitshift64Lshr($62 | 0, getTempRet0() | 0, 15) | 0;
    $66 = _i64Add($64 | 0, getTempRet0() | 0, 1, 0) | 0;
    $68 = _bitshift64Lshr($66 | 0, getTempRet0() | 0, 1) | 0;
    getTempRet0() | 0;
    HEAP32[$arrayidx6$i57 >> 2] = $59 + $49 - $68;
    if (($k$028$i52 | 0) != 2) {
     $72 = $59;
     $sub21$i71118$in = $k$028$i52;
     do {
      $sub21$i71118$in$looptemp = $sub21$i71118$in;
      $sub21$i71118$in = $sub21$i71118$in + -1 | 0;
      $arrayidx22$i81 = $Q + ($sub21$i71118$in << 2) | 0;
      $$pre30$i82 = HEAP32[$arrayidx22$i81 >> 2] | 0;
      $72$looptemp = $72;
      $72 = HEAP32[$Q + ($sub21$i71118$in$looptemp + -3 << 2) >> 2] | 0;
      $74 = ___muldi3($72$looptemp | 0, (($72$looptemp | 0) < 0) << 31 >> 31 | 0, $44 | 0, $47 | 0) | 0;
      $76 = _bitshift64Lshr($74 | 0, getTempRet0() | 0, 15) | 0;
      $78 = _i64Add($76 | 0, getTempRet0() | 0, 1, 0) | 0;
      $80 = _bitshift64Lshr($78 | 0, getTempRet0() | 0, 1) | 0;
      getTempRet0() | 0;
      HEAP32[$arrayidx22$i81 >> 2] = $72 + $$pre30$i82 - $80;
     } while (($sub21$i71118$in$looptemp | 0) > 3);
    }
    $82 = HEAP32[$arrayidx2$i49 >> 2] | 0;
   } else $82 = $102;
   $sub33$i84 = $82 - $44 | 0;
   HEAP32[$arrayidx2$i49 >> 2] = $sub33$i84;
   if (($add12$i63 | 0) == ($shr18 | 0)) break L21;
   $102 = $sub33$i84;
   $45 = HEAP32[$arrayidx6$i57 >> 2] | 0;
   $49 = HEAP32[$arrayidx13$i64 >> 2] | 0;
   $k$028$i52 = $add12$i63;
  }
 } while (0);
 $cmp2396 = ($d | 0) > 1;
 L35 : do if ($cmp2396) {
  $sub38 = $d + -1 | 0;
  $84 = HEAP32[$P >> 2] | 0;
  $86 = HEAP32[$Q >> 2] | 0;
  $k$197 = 0;
  while (1) {
   $add26 = $k$197 + 1 | 0;
   $83 = HEAP32[$P + ($add26 << 2) >> 2] | 0;
   $add29 = $84 + $83 | 0;
   $85 = HEAP32[$Q + ($add26 << 2) >> 2] | 0;
   $sub33 = $85 - $86 | 0;
   HEAP32[$a32_QA1 + ($k$197 << 2) >> 2] = 0 - ($sub33 + $add29);
   HEAP32[$a32_QA1 + ($sub38 - $k$197 << 2) >> 2] = $sub33 - $add29;
   if (($add26 | 0) >= ($shr18 | 0)) break L35;
   $84 = $83;
   $86 = $85;
   $k$197 = $add26;
  }
 } while (0);
 L41 : do if (($d | 0) > 0) {
  $sub1$i$i = $d + -1 | 0;
  $arrayidx22$i$i = $a32_QA1 + ($sub1$i$i << 2) | 0;
  $i$085$us$i = 0;
  $idx$084$us$i = 0;
  while (1) {
   $idx$180$us$i = $idx$084$us$i;
   $k$082$us$i = 0;
   $maxabs$081$us$i = 0;
   do {
    $90 = HEAP32[$a32_QA1 + ($k$082$us$i << 2) >> 2] | 0;
    $cond$us$i = ($90 | 0) > 0 ? $90 : 0 - $90 | 0;
    $cmp7$us$i = ($cond$us$i | 0) > ($maxabs$081$us$i | 0);
    $idx$180$us$i = $cmp7$us$i ? $k$082$us$i : $idx$180$us$i;
    $maxabs$081$us$i = $cmp7$us$i ? $cond$us$i : $maxabs$081$us$i;
    $k$082$us$i = $k$082$us$i + 1 | 0;
   } while (($k$082$us$i | 0) != ($d | 0));
   $shr16$us$i = ($maxabs$081$us$i >> 4) + 1 >> 1;
   if (($maxabs$081$us$i | 0) <= 1048559) {
    $i$0$lcssa$i = $i$085$us$i;
    break;
   }
   $cond25$us$i = ($shr16$us$i | 0) < 163838 ? $shr16$us$i : 163838;
   $sub29$us$i = 65470 - ((($cond25$us$i << 14) + -536854528 | 0) / ((Math_imul($cond25$us$i, $idx$180$us$i + 1 | 0) | 0) >> 2 | 0) | 0) | 0;
   $sub$i$i = $sub29$us$i + -65536 | 0;
   $shr27$i$i = $sub29$us$i >> 16;
   if ($cmp2396) {
    $chirp_Q16$addr$029$i$i = $sub29$us$i;
    $i$028$i$i = 0;
    $shr30$i$i = $shr27$i$i;
    while (1) {
     $arrayidx$i$i = $a32_QA1 + ($i$028$i$i << 2) | 0;
     $88 = HEAP32[$arrayidx$i$i >> 2] | 0;
     $conv2$i$i = $88 << 16 >> 16;
     HEAP32[$arrayidx$i$i >> 2] = ((Math_imul($conv2$i$i, $chirp_Q16$addr$029$i$i & 65535) | 0) >> 16) + (Math_imul($conv2$i$i, $shr30$i$i) | 0) + (Math_imul(($88 >> 15) + 1 >> 1, $chirp_Q16$addr$029$i$i) | 0);
     $add19$i$i = (((Math_imul($chirp_Q16$addr$029$i$i, $sub$i$i) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$029$i$i | 0;
     $i$028$i$i = $i$028$i$i + 1 | 0;
     $shr$i$i = $add19$i$i >> 16;
     if (($i$028$i$i | 0) == ($sub1$i$i | 0)) {
      $chirp_Q16$addr$0$lcssa$i$i = $add19$i$i;
      $shr$lcssa$i$i = $shr$i$i;
      break;
     } else {
      $chirp_Q16$addr$029$i$i = $add19$i$i;
      $shr30$i$i = $shr$i$i;
     }
    }
   } else {
    $chirp_Q16$addr$0$lcssa$i$i = $sub29$us$i;
    $shr$lcssa$i$i = $shr27$i$i;
   }
   $89 = HEAP32[$arrayidx22$i$i >> 2] | 0;
   $conv24$i$i = $89 << 16 >> 16;
   HEAP32[$arrayidx22$i$i >> 2] = ((Math_imul($conv24$i$i, $chirp_Q16$addr$0$lcssa$i$i & 65535) | 0) >> 16) + (Math_imul($conv24$i$i, $shr$lcssa$i$i) | 0) + (Math_imul(($89 >> 15) + 1 >> 1, $chirp_Q16$addr$0$lcssa$i$i) | 0);
   $inc32$us$i = $i$085$us$i + 1 | 0;
   if ($inc32$us$i >>> 0 < 10) {
    $i$085$us$i = $inc32$us$i;
    $idx$084$us$i = $idx$180$us$i;
   } else {
    $i$0$lcssa$i = $inc32$us$i;
    break;
   }
  }
  if (($i$0$lcssa$i | 0) != 10) {
   $k$278$i = 0;
   while (1) {
    HEAP16[$a_Q12 + ($k$278$i << 1) >> 1] = (((HEAP32[$a32_QA1 + ($k$278$i << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
    $k$278$i = $k$278$i + 1 | 0;
    if (($k$278$i | 0) == ($d | 0)) break L41;
   }
  }
  $k$176$i = 0;
  do {
   $arrayidx42$i = $a32_QA1 + ($k$176$i << 2) | 0;
   $91 = HEAP32[$arrayidx42$i >> 2] | 0;
   $shr51$i = $91 >> 4;
   if (($91 | 0) > 1048559) $cond99$i = 32767; else if (($91 | 0) < -1048592) $cond99$i = -32768; else $cond99$i = $shr51$i + 1 >> 1;
   HEAP16[$a_Q12 + ($k$176$i << 1) >> 1] = $cond99$i;
   HEAP32[$arrayidx42$i >> 2] = $cond99$i << 16 >> 11;
   $k$176$i = $k$176$i + 1 | 0;
  } while (($k$176$i | 0) != ($d | 0));
 } while (0);
 if (_silk_LPC_inverse_pred_gain_c($a_Q12, $d) | 0) {
  STACKTOP = sp;
  return;
 }
 $sub1$i = $d + -1 | 0;
 $arrayidx22$i6 = $a32_QA1 + ($sub1$i << 2) | 0;
 $i$095$us = 0;
 do {
  $sub53$us = 65536 - (2 << $i$095$us) | 0;
  $sub$i = $sub53$us + -65536 | 0;
  $shr27$i = $sub53$us >> 16;
  if ($cmp2396) {
   $chirp_Q16$addr$029$i = $sub53$us;
   $i$028$i = 0;
   $shr30$i = $shr27$i;
   while (1) {
    $arrayidx$i = $a32_QA1 + ($i$028$i << 2) | 0;
    $95 = HEAP32[$arrayidx$i >> 2] | 0;
    $conv2$i = $95 << 16 >> 16;
    HEAP32[$arrayidx$i >> 2] = ((Math_imul($conv2$i, $chirp_Q16$addr$029$i & 65535) | 0) >> 16) + (Math_imul($conv2$i, $shr30$i) | 0) + (Math_imul(($95 >> 15) + 1 >> 1, $chirp_Q16$addr$029$i) | 0);
    $add19$i = (((Math_imul($chirp_Q16$addr$029$i, $sub$i) | 0) >> 15) + 1 >> 1) + $chirp_Q16$addr$029$i | 0;
    $i$028$i = $i$028$i + 1 | 0;
    $shr$i = $add19$i >> 16;
    if (($i$028$i | 0) == ($sub1$i | 0)) {
     $chirp_Q16$addr$0$lcssa$i = $add19$i;
     $shr$lcssa$i = $shr$i;
     break;
    } else {
     $chirp_Q16$addr$029$i = $add19$i;
     $shr30$i = $shr$i;
    }
   }
  } else {
   $chirp_Q16$addr$0$lcssa$i = $sub53$us;
   $shr$lcssa$i = $shr27$i;
  }
  $96 = HEAP32[$arrayidx22$i6 >> 2] | 0;
  $conv24$i = $96 << 16 >> 16;
  HEAP32[$arrayidx22$i6 >> 2] = ((Math_imul($conv24$i, $chirp_Q16$addr$0$lcssa$i & 65535) | 0) >> 16) + (Math_imul($conv24$i, $shr$lcssa$i) | 0) + (Math_imul(($96 >> 15) + 1 >> 1, $chirp_Q16$addr$0$lcssa$i) | 0);
  $k$292$us = 0;
  do {
   HEAP16[$a_Q12 + ($k$292$us << 1) >> 1] = (((HEAP32[$a32_QA1 + ($k$292$us << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
   $k$292$us = $k$292$us + 1 | 0;
  } while (($k$292$us | 0) != ($d | 0));
  $i$095$us = $i$095$us + 1 | 0;
 } while ($i$095$us >>> 0 < 16 & (_silk_LPC_inverse_pred_gain_c($a_Q12, $d) | 0) == 0);
 STACKTOP = sp;
 return;
}

function _silk_stereo_decode_pred($psRangeDec, $pred_Q13) {
 $psRangeDec = $psRangeDec | 0;
 $pred_Q13 = $pred_Q13 | 0;
 var $$pre14$i$i = 0, $$pre14$i$i110 = 0, $$pre14$i$i153 = 0, $$pre14$i$i24 = 0, $$pre14$i$i67 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $add = 0, $add$1 = 0, $add25 = 0, $add25$1 = 0, $add38 = 0, $add38$1 = 0, $add44 = 0, $add44$1 = 0, $add48 = 0, $add48$1 = 0, $and = 0, $and$1 = 0, $and7$i$i = 0, $and7$i$i126 = 0, $and7$i$i169 = 0, $and7$i$i83 = 0, $arrayidx22 = 0, $arrayidx22$1 = 0, $arrayidx26 = 0, $arrayidx26$1 = 0, $arrayidx49$1 = 0, $cond$i$i$i = 0, $cond$i$i$i120 = 0, $cond$i$i$i163 = 0, $cond$i$i$i34 = 0, $cond$i$i$i77 = 0, $conv = 0, $conv$1 = 0, $conv27 = 0, $conv27$1 = 0, $conv46 = 0, $conv46$1 = 0, $div = 0, $inc$i$i$i = 0, $inc$i$i$i116 = 0, $inc$i$i$i159 = 0, $inc$i$i$i30 = 0, $inc$i$i$i73 = 0, $mul$i = 0, $mul$i138 = 0, $mul$i52 = 0, $mul$i9 = 0, $mul$i95 = 0, $mul17 = 0, $mul17$1 = 0, $mul29 = 0, $mul29$1 = 0, $mul36 = 0, $mul36$1 = 0, $mul43 = 0, $mul43$1 = 0, $mul47 = 0, $mul47$1 = 0, $nbits_total$i$i = 0, $nbits_total$i$i102 = 0, $nbits_total$i$i145 = 0, $nbits_total$i$i16 = 0, $nbits_total$i$i59 = 0, $offs$i$i$i = 0, $offs$i$i$i104 = 0, $offs$i$i$i147 = 0, $offs$i$i$i18 = 0, $offs$i$i$i61 = 0, $rem$i$i = 0, $rem$i$i103 = 0, $rem$i$i146 = 0, $rem$i$i17 = 0, $rem$i$i60 = 0, $ret$0$i = 0, $ret$0$i134 = 0, $ret$0$i48 = 0, $ret$0$i5 = 0, $ret$0$i91 = 0, $rng$i = 0, $s$0$i = 0, $s$0$i133 = 0, $s$0$i4 = 0, $s$0$i47 = 0, $s$0$i90 = 0, $shl$i$i = 0, $shl$i$i113 = 0, $shl$i$i156 = 0, $shl$i$i70 = 0, $shr = 0, $shr$1 = 0, $shr$i = 0, $shr$i132 = 0, $shr$i3 = 0, $shr$i46 = 0, $shr$i89 = 0, $sub = 0, $sub$i = 0, $sub$i12 = 0, $sub$i141 = 0, $sub$i55 = 0, $sub$i98 = 0, $sub28 = 0, $sub28$1 = 0, $sub3$i = 0, $sub3$i13 = 0, $sub3$i142 = 0, $sub3$i56 = 0, $sub3$i99 = 0, $sub55 = 0, $val$i = 0;
 $rng$i = $psRangeDec + 28 | 0;
 $0 = HEAP32[$rng$i >> 2] | 0;
 $val$i = $psRangeDec + 32 | 0;
 $1 = HEAP32[$val$i >> 2] | 0;
 $shr$i = $0 >>> 8;
 $ret$0$i = -1;
 $s$0$i = $0;
 while (1) {
  $ret$0$i = $ret$0$i + 1 | 0;
  $mul$i = Math_imul($shr$i, HEAPU8[24864 + $ret$0$i >> 0] | 0) | 0;
  if ($1 >>> 0 >= $mul$i >>> 0) break; else $s$0$i = $mul$i;
 }
 $sub$i = $1 - $mul$i | 0;
 HEAP32[$val$i >> 2] = $sub$i;
 $sub3$i = $s$0$i - $mul$i | 0;
 HEAP32[$rng$i >> 2] = $sub3$i;
 if ($sub3$i >>> 0 < 8388609) {
  $nbits_total$i$i = $psRangeDec + 20 | 0;
  $rem$i$i = $psRangeDec + 40 | 0;
  $offs$i$i$i = $psRangeDec + 24 | 0;
  $$pre14$i$i = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $11 = $sub$i;
  $3 = HEAP32[$nbits_total$i$i >> 2] | 0;
  $4 = $sub3$i;
  $5 = HEAP32[$offs$i$i$i >> 2] | 0;
  $8 = HEAP32[$rem$i$i >> 2] | 0;
  while (1) {
   $3 = $3 + 8 | 0;
   HEAP32[$nbits_total$i$i >> 2] = $3;
   $shl$i$i = $4 << 8;
   HEAP32[$rng$i >> 2] = $shl$i$i;
   if ($5 >>> 0 < $$pre14$i$i >>> 0) {
    $6 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i = $5 + 1 | 0;
    HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
    $67 = $inc$i$i$i;
    $cond$i$i$i = HEAPU8[$6 + $5 >> 0] | 0;
   } else {
    $67 = $5;
    $cond$i$i$i = 0;
   }
   HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
   $and7$i$i = ($11 << 8 & 2147483392 | ($cond$i$i$i | $8 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i >> 2] = $and7$i$i;
   if ($shl$i$i >>> 0 >= 8388609) {
    $13 = $shl$i$i;
    $15 = $and7$i$i;
    break;
   } else {
    $11 = $and7$i$i;
    $4 = $shl$i$i;
    $5 = $67;
    $8 = $cond$i$i$i;
   }
  }
 } else {
  $13 = $sub3$i;
  $15 = $sub$i;
 }
 $div = ($ret$0$i | 0) / 5 | 0;
 $12 = Math_imul($div, -5) | 0;
 $shr$i132 = $13 >>> 8;
 $ret$0$i134 = -1;
 $s$0$i133 = $13;
 while (1) {
  $ret$0$i134 = $ret$0$i134 + 1 | 0;
  $mul$i138 = Math_imul($shr$i132, HEAPU8[51908 + $ret$0$i134 >> 0] | 0) | 0;
  if ($15 >>> 0 >= $mul$i138 >>> 0) break; else $s$0$i133 = $mul$i138;
 }
 $sub = $12 + $ret$0$i | 0;
 $sub$i141 = $15 - $mul$i138 | 0;
 HEAP32[$val$i >> 2] = $sub$i141;
 $sub3$i142 = $s$0$i133 - $mul$i138 | 0;
 HEAP32[$rng$i >> 2] = $sub3$i142;
 if ($sub3$i142 >>> 0 < 8388609) {
  $nbits_total$i$i145 = $psRangeDec + 20 | 0;
  $rem$i$i146 = $psRangeDec + 40 | 0;
  $offs$i$i$i147 = $psRangeDec + 24 | 0;
  $$pre14$i$i153 = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $16 = HEAP32[$nbits_total$i$i145 >> 2] | 0;
  $17 = $sub3$i142;
  $18 = HEAP32[$offs$i$i$i147 >> 2] | 0;
  $21 = HEAP32[$rem$i$i146 >> 2] | 0;
  $24 = $sub$i141;
  while (1) {
   $16 = $16 + 8 | 0;
   HEAP32[$nbits_total$i$i145 >> 2] = $16;
   $shl$i$i156 = $17 << 8;
   HEAP32[$rng$i >> 2] = $shl$i$i156;
   if ($18 >>> 0 < $$pre14$i$i153 >>> 0) {
    $19 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i159 = $18 + 1 | 0;
    HEAP32[$offs$i$i$i147 >> 2] = $inc$i$i$i159;
    $68 = $inc$i$i$i159;
    $cond$i$i$i163 = HEAPU8[$19 + $18 >> 0] | 0;
   } else {
    $68 = $18;
    $cond$i$i$i163 = 0;
   }
   HEAP32[$rem$i$i146 >> 2] = $cond$i$i$i163;
   $and7$i$i169 = ($24 << 8 & 2147483392 | ($cond$i$i$i163 | $21 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i >> 2] = $and7$i$i169;
   if ($shl$i$i156 >>> 0 >= 8388609) {
    $25 = $shl$i$i156;
    $27 = $and7$i$i169;
    break;
   } else {
    $17 = $shl$i$i156;
    $18 = $68;
    $21 = $cond$i$i$i163;
    $24 = $and7$i$i169;
   }
  }
 } else {
  $25 = $sub3$i142;
  $27 = $sub$i141;
 }
 $shr$i89 = $25 >>> 8;
 $ret$0$i91 = -1;
 $s$0$i90 = $25;
 while (1) {
  $ret$0$i91 = $ret$0$i91 + 1 | 0;
  $mul$i95 = Math_imul($shr$i89, HEAPU8[51915 + $ret$0$i91 >> 0] | 0) | 0;
  if ($27 >>> 0 >= $mul$i95 >>> 0) break; else $s$0$i90 = $mul$i95;
 }
 $sub$i98 = $27 - $mul$i95 | 0;
 HEAP32[$val$i >> 2] = $sub$i98;
 $sub3$i99 = $s$0$i90 - $mul$i95 | 0;
 HEAP32[$rng$i >> 2] = $sub3$i99;
 if ($sub3$i99 >>> 0 < 8388609) {
  $nbits_total$i$i102 = $psRangeDec + 20 | 0;
  $rem$i$i103 = $psRangeDec + 40 | 0;
  $offs$i$i$i104 = $psRangeDec + 24 | 0;
  $$pre14$i$i110 = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $28 = HEAP32[$nbits_total$i$i102 >> 2] | 0;
  $29 = $sub3$i99;
  $30 = HEAP32[$offs$i$i$i104 >> 2] | 0;
  $33 = HEAP32[$rem$i$i103 >> 2] | 0;
  $36 = $sub$i98;
  while (1) {
   $28 = $28 + 8 | 0;
   HEAP32[$nbits_total$i$i102 >> 2] = $28;
   $shl$i$i113 = $29 << 8;
   HEAP32[$rng$i >> 2] = $shl$i$i113;
   if ($30 >>> 0 < $$pre14$i$i110 >>> 0) {
    $31 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i116 = $30 + 1 | 0;
    HEAP32[$offs$i$i$i104 >> 2] = $inc$i$i$i116;
    $69 = $inc$i$i$i116;
    $cond$i$i$i120 = HEAPU8[$31 + $30 >> 0] | 0;
   } else {
    $69 = $30;
    $cond$i$i$i120 = 0;
   }
   HEAP32[$rem$i$i103 >> 2] = $cond$i$i$i120;
   $and7$i$i126 = ($36 << 8 & 2147483392 | ($cond$i$i$i120 | $33 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i >> 2] = $and7$i$i126;
   if ($shl$i$i113 >>> 0 >= 8388609) {
    $37 = $shl$i$i113;
    $39 = $and7$i$i126;
    break;
   } else {
    $29 = $shl$i$i113;
    $30 = $69;
    $33 = $cond$i$i$i120;
    $36 = $and7$i$i126;
   }
  }
 } else {
  $37 = $sub3$i99;
  $39 = $sub$i98;
 }
 $shr$i46 = $37 >>> 8;
 $ret$0$i48 = -1;
 $s$0$i47 = $37;
 while (1) {
  $ret$0$i48 = $ret$0$i48 + 1 | 0;
  $mul$i52 = Math_imul($shr$i46, HEAPU8[51908 + $ret$0$i48 >> 0] | 0) | 0;
  if ($39 >>> 0 >= $mul$i52 >>> 0) break; else $s$0$i47 = $mul$i52;
 }
 $sub$i55 = $39 - $mul$i52 | 0;
 HEAP32[$val$i >> 2] = $sub$i55;
 $sub3$i56 = $s$0$i47 - $mul$i52 | 0;
 HEAP32[$rng$i >> 2] = $sub3$i56;
 if ($sub3$i56 >>> 0 < 8388609) {
  $nbits_total$i$i59 = $psRangeDec + 20 | 0;
  $rem$i$i60 = $psRangeDec + 40 | 0;
  $offs$i$i$i61 = $psRangeDec + 24 | 0;
  $$pre14$i$i67 = HEAP32[$psRangeDec + 4 >> 2] | 0;
  $40 = HEAP32[$nbits_total$i$i59 >> 2] | 0;
  $41 = $sub3$i56;
  $42 = HEAP32[$offs$i$i$i61 >> 2] | 0;
  $45 = HEAP32[$rem$i$i60 >> 2] | 0;
  $48 = $sub$i55;
  while (1) {
   $40 = $40 + 8 | 0;
   HEAP32[$nbits_total$i$i59 >> 2] = $40;
   $shl$i$i70 = $41 << 8;
   HEAP32[$rng$i >> 2] = $shl$i$i70;
   if ($42 >>> 0 < $$pre14$i$i67 >>> 0) {
    $43 = HEAP32[$psRangeDec >> 2] | 0;
    $inc$i$i$i73 = $42 + 1 | 0;
    HEAP32[$offs$i$i$i61 >> 2] = $inc$i$i$i73;
    $70 = $inc$i$i$i73;
    $cond$i$i$i77 = HEAPU8[$43 + $42 >> 0] | 0;
   } else {
    $70 = $42;
    $cond$i$i$i77 = 0;
   }
   HEAP32[$rem$i$i60 >> 2] = $cond$i$i$i77;
   $and7$i$i83 = ($48 << 8 & 2147483392 | ($cond$i$i$i77 | $45 << 8) >>> 1 & 255) ^ 255;
   HEAP32[$val$i >> 2] = $and7$i$i83;
   if ($shl$i$i70 >>> 0 >= 8388609) {
    $49 = $shl$i$i70;
    $51 = $and7$i$i83;
    break;
   } else {
    $41 = $shl$i$i70;
    $42 = $70;
    $45 = $cond$i$i$i77;
    $48 = $and7$i$i83;
   }
  }
 } else {
  $49 = $sub3$i56;
  $51 = $sub$i55;
 }
 $shr$i3 = $49 >>> 8;
 $ret$0$i5 = -1;
 $s$0$i4 = $49;
 while (1) {
  $ret$0$i5 = $ret$0$i5 + 1 | 0;
  $mul$i9 = Math_imul($shr$i3, HEAPU8[51915 + $ret$0$i5 >> 0] | 0) | 0;
  if ($51 >>> 0 >= $mul$i9 >>> 0) break; else $s$0$i4 = $mul$i9;
 }
 $sub$i12 = $51 - $mul$i9 | 0;
 HEAP32[$val$i >> 2] = $sub$i12;
 $sub3$i13 = $s$0$i4 - $mul$i9 | 0;
 HEAP32[$rng$i >> 2] = $sub3$i13;
 if ($sub3$i13 >>> 0 >= 8388609) {
  $mul17 = $div * 3 | 0;
  $add = $ret$0$i134 + $mul17 | 0;
  $arrayidx22 = 24832 + ($add << 1) | 0;
  $61 = HEAP16[$arrayidx22 >> 1] | 0;
  $conv = $61 << 16 >> 16;
  $add25 = $add + 1 | 0;
  $arrayidx26 = 24832 + ($add25 << 1) | 0;
  $62 = HEAP16[$arrayidx26 >> 1] | 0;
  $conv27 = $62 << 16 >> 16;
  $sub28 = $conv27 - $conv | 0;
  $shr = $sub28 >> 16;
  $mul29 = $shr * 6554 | 0;
  $and = $sub28 & 65535;
  $mul36 = $and * 6554 | 0;
  $63 = $mul36 >>> 16;
  $add38 = $63 + $mul29 | 0;
  $mul43 = $ret$0$i91 << 17;
  $add44 = $mul43 >> 16;
  $conv46 = $add44 | 1;
  $mul47 = Math_imul($add38, $conv46) | 0;
  $add48 = $mul47 + $conv | 0;
  $mul17$1 = $sub * 3 | 0;
  $add$1 = $ret$0$i48 + $mul17$1 | 0;
  $arrayidx22$1 = 24832 + ($add$1 << 1) | 0;
  $64 = HEAP16[$arrayidx22$1 >> 1] | 0;
  $conv$1 = $64 << 16 >> 16;
  $add25$1 = $add$1 + 1 | 0;
  $arrayidx26$1 = 24832 + ($add25$1 << 1) | 0;
  $65 = HEAP16[$arrayidx26$1 >> 1] | 0;
  $conv27$1 = $65 << 16 >> 16;
  $sub28$1 = $conv27$1 - $conv$1 | 0;
  $shr$1 = $sub28$1 >> 16;
  $mul29$1 = $shr$1 * 6554 | 0;
  $and$1 = $sub28$1 & 65535;
  $mul36$1 = $and$1 * 6554 | 0;
  $66 = $mul36$1 >>> 16;
  $add38$1 = $66 + $mul29$1 | 0;
  $mul43$1 = $ret$0$i5 << 17;
  $add44$1 = $mul43$1 >> 16;
  $conv46$1 = $add44$1 | 1;
  $mul47$1 = Math_imul($add38$1, $conv46$1) | 0;
  $add48$1 = $mul47$1 + $conv$1 | 0;
  $arrayidx49$1 = $pred_Q13 + 4 | 0;
  HEAP32[$arrayidx49$1 >> 2] = $add48$1;
  $sub55 = $add48 - $add48$1 | 0;
  HEAP32[$pred_Q13 >> 2] = $sub55;
  return;
 }
 $nbits_total$i$i16 = $psRangeDec + 20 | 0;
 $rem$i$i17 = $psRangeDec + 40 | 0;
 $offs$i$i$i18 = $psRangeDec + 24 | 0;
 $$pre14$i$i24 = HEAP32[$psRangeDec + 4 >> 2] | 0;
 $52 = HEAP32[$nbits_total$i$i16 >> 2] | 0;
 $53 = $sub3$i13;
 $54 = HEAP32[$offs$i$i$i18 >> 2] | 0;
 $57 = HEAP32[$rem$i$i17 >> 2] | 0;
 $60 = $sub$i12;
 while (1) {
  $52 = $52 + 8 | 0;
  HEAP32[$nbits_total$i$i16 >> 2] = $52;
  $53 = $53 << 8;
  HEAP32[$rng$i >> 2] = $53;
  if ($54 >>> 0 < $$pre14$i$i24 >>> 0) {
   $55 = HEAP32[$psRangeDec >> 2] | 0;
   $inc$i$i$i30 = $54 + 1 | 0;
   HEAP32[$offs$i$i$i18 >> 2] = $inc$i$i$i30;
   $71 = $inc$i$i$i30;
   $cond$i$i$i34 = HEAPU8[$55 + $54 >> 0] | 0;
  } else {
   $71 = $54;
   $cond$i$i$i34 = 0;
  }
  HEAP32[$rem$i$i17 >> 2] = $cond$i$i$i34;
  $60 = ($60 << 8 & 2147483392 | ($cond$i$i$i34 | $57 << 8) >>> 1 & 255) ^ 255;
  HEAP32[$val$i >> 2] = $60;
  if ($53 >>> 0 >= 8388609) break; else {
   $54 = $71;
   $57 = $cond$i$i$i34;
  }
 }
 $mul17 = $div * 3 | 0;
 $add = $ret$0$i134 + $mul17 | 0;
 $arrayidx22 = 24832 + ($add << 1) | 0;
 $61 = HEAP16[$arrayidx22 >> 1] | 0;
 $conv = $61 << 16 >> 16;
 $add25 = $add + 1 | 0;
 $arrayidx26 = 24832 + ($add25 << 1) | 0;
 $62 = HEAP16[$arrayidx26 >> 1] | 0;
 $conv27 = $62 << 16 >> 16;
 $sub28 = $conv27 - $conv | 0;
 $shr = $sub28 >> 16;
 $mul29 = $shr * 6554 | 0;
 $and = $sub28 & 65535;
 $mul36 = $and * 6554 | 0;
 $63 = $mul36 >>> 16;
 $add38 = $63 + $mul29 | 0;
 $mul43 = $ret$0$i91 << 17;
 $add44 = $mul43 >> 16;
 $conv46 = $add44 | 1;
 $mul47 = Math_imul($add38, $conv46) | 0;
 $add48 = $mul47 + $conv | 0;
 $mul17$1 = $sub * 3 | 0;
 $add$1 = $ret$0$i48 + $mul17$1 | 0;
 $arrayidx22$1 = 24832 + ($add$1 << 1) | 0;
 $64 = HEAP16[$arrayidx22$1 >> 1] | 0;
 $conv$1 = $64 << 16 >> 16;
 $add25$1 = $add$1 + 1 | 0;
 $arrayidx26$1 = 24832 + ($add25$1 << 1) | 0;
 $65 = HEAP16[$arrayidx26$1 >> 1] | 0;
 $conv27$1 = $65 << 16 >> 16;
 $sub28$1 = $conv27$1 - $conv$1 | 0;
 $shr$1 = $sub28$1 >> 16;
 $mul29$1 = $shr$1 * 6554 | 0;
 $and$1 = $sub28$1 & 65535;
 $mul36$1 = $and$1 * 6554 | 0;
 $66 = $mul36$1 >>> 16;
 $add38$1 = $66 + $mul29$1 | 0;
 $mul43$1 = $ret$0$i5 << 17;
 $add44$1 = $mul43$1 >> 16;
 $conv46$1 = $add44$1 | 1;
 $mul47$1 = Math_imul($add38$1, $conv46$1) | 0;
 $add48$1 = $mul47$1 + $conv$1 | 0;
 $arrayidx49$1 = $pred_Q13 + 4 | 0;
 HEAP32[$arrayidx49$1 >> 2] = $add48$1;
 $sub55 = $add48 - $add48$1 | 0;
 HEAP32[$pred_Q13 >> 2] = $sub55;
 return;
}

function _update_filter($st) {
 $st = $st | 0;
 var $$pre = 0, $$pre277 = 0, $$pre278 = 0, $$pre280 = 0, $$pre282 = 0, $$pre283 = 0, $$pre284 = 0, $0 = 0, $1 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $55 = 0, $56 = 0, $6 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $80 = 0, $add = 0, $add158265 = 0, $add193 = 0, $add246 = 0, $add250 = 0, $add344 = 0, $add351 = 0, $add390 = 0, $add391 = 0, $add398 = 0, $add75 = 0, $arrayidx244 = 0, $arrayidx331 = 0, $arrayidx379 = 0, $call$i = 0, $call$i228 = 0, $cmp119$peel = 0, $cmp27 = 0, $cmp35 = 0, $cmp44 = 0, $cmp53 = 0, $conv130 = 0.0, $conv165 = 0.0, $conv169 = 0.0, $cutoff122 = 0, $cutoff162 = 0, $dec252239$in = 0, $dec253$in = 0, $den_rate = 0, $div = 0, $div$i = 0, $div1$i = 0, $div124$neg = 0, $div131 = 0.0, $div336 = 0, $div382 = 0, $div6$i = 0, $filt_len = 0, $i$0262 = 0, $i153$0267 = 0, $i371$0258 = 0, $inc309 = 0, $inc415 = 0, $indvar = 0, $j$0260 = 0, $j243$2$lcssa = 0, $j243$2$neg247 = 0, $j243$2246 = 0, $j243$4244 = 0, $j377$0256 = 0, $last_sample = 0, $mem203 = 0, $mem255 = 0, $mem395 = 0, $mem_alloc_size = 0, $min_sinc_table_length$0 = 0, $mul$i = 0, $mul139 = 0, $mul224234 = 0, $mul256 = 0, $mul261 = 0, $mul295 = 0, $mul350 = 0, $mul397 = 0, $mul71 = 0, $nb_channels373 = 0, $oversample3 = 0, $quality = 0, $resampler_basic_interpolate_double$resampler_basic_interpolate_single$sink = 0, $retval$0 = 0, $sinc_table103 = 0, $sinc_table137 = 0, $sinc_table_length = 0, $spec$select289 = 0, $sub247 = 0, $sub289 = 0, $sub296 = 0, $sub304 = 0, $sub313 = 0, $sub341 = 0, $sub387 = 0, label = 0, $j$0260$looptemp = 0;
 $filt_len = $st + 24 | 0;
 $0 = HEAP32[$filt_len >> 2] | 0;
 $mem_alloc_size = $st + 28 | 0;
 $1 = HEAP32[$mem_alloc_size >> 2] | 0;
 $2 = HEAP32[$st + 8 >> 2] | 0;
 $den_rate = $st + 12 | 0;
 $3 = HEAP32[$den_rate >> 2] | 0;
 $div = ($2 >>> 0) / ($3 >>> 0) | 0;
 HEAP32[$st + 36 >> 2] = $div;
 HEAP32[$st + 40 >> 2] = $2 - (Math_imul($div, $3) | 0);
 $quality = $st + 16 | 0;
 $6 = HEAP32[$quality >> 2] | 0;
 $7 = HEAP32[34816 + ($6 * 20 | 0) + 4 >> 2] | 0;
 $oversample3 = $st + 48 | 0;
 HEAP32[$oversample3 >> 2] = $7;
 $8 = HEAP32[34816 + ($6 * 20 | 0) >> 2] | 0;
 HEAP32[$filt_len >> 2] = $8;
 if ($2 >>> 0 > $3 >>> 0) {
  HEAPF32[$st + 44 >> 2] = +HEAPF32[34816 + ($6 * 20 | 0) + 8 >> 2] * +($3 >>> 0) / +($2 >>> 0);
  $div$i = ($8 >>> 0) / ($3 >>> 0) | 0;
  $11 = $8 - (Math_imul($div$i, $3) | 0) | 0;
  $div1$i = 4294967295 / ($2 >>> 0) | 0;
  if (!($11 >>> 0 > $div1$i >>> 0 | $div$i >>> 0 > $div1$i >>> 0)) {
   $mul$i = Math_imul($div$i, $2) | 0;
   $div6$i = ((Math_imul($11, $2) | 0) >>> 0) / ($3 >>> 0) | 0;
   if ($mul$i >>> 0 <= ~$div6$i >>> 0) {
    $add = $mul$i + 7 + $div6$i & -8;
    HEAP32[$filt_len >> 2] = $add;
    $cmp27 = $3 << 1 >>> 0 < $2 >>> 0;
    $cmp35 = $3 << 2 >>> 0 < $2 >>> 0;
    $cmp44 = $3 << 3 >>> 0 < $2 >>> 0;
    $cmp53 = $3 << 4 >>> 0 < $2 >>> 0;
    $spec$select289 = $7 >>> ($cmp27 & 1) >>> ($cmp35 & 1) >>> ($cmp44 & 1) >>> ($cmp53 & 1);
    if ($cmp27 | $cmp35 | $cmp44 | $cmp53) HEAP32[$oversample3 >> 2] = $spec$select289;
    if (!$spec$select289) {
     HEAP32[$oversample3 >> 2] = 1;
     $17 = $add;
     $18 = 1;
     label = 9;
    } else {
     $17 = $add;
     $18 = $spec$select289;
     label = 9;
    }
   }
  }
 } else {
  HEAP32[$st + 44 >> 2] = HEAP32[34816 + ($6 * 20 | 0) + 12 >> 2];
  $17 = $8;
  $18 = $7;
  label = 9;
 }
 do if ((label | 0) == 9) {
  $mul71 = Math_imul($17, $3) | 0;
  $add75 = (Math_imul($18, $17) | 0) + 8 | 0;
  if ($mul71 >>> 0 > $add75 >>> 0) label = 11; else if ((536870911 / ($3 >>> 0) | 0) >>> 0 < $17 >>> 0) label = 11; else {
   $79 = 1;
   $min_sinc_table_length$0 = $mul71;
  }
  if ((label | 0) == 11) if ((536870903 / ($18 >>> 0) | 0) >>> 0 < $17 >>> 0) break; else {
   $79 = 0;
   $min_sinc_table_length$0 = $add75;
  }
  $sinc_table_length = $st + 80 | 0;
  if ((HEAP32[$sinc_table_length >> 2] | 0) >>> 0 < $min_sinc_table_length$0 >>> 0) {
   $sinc_table103 = $st + 76 | 0;
   $call$i228 = _realloc(HEAP32[$sinc_table103 >> 2] | 0, $min_sinc_table_length$0 << 2) | 0;
   if (!$call$i228) break;
   HEAP32[$sinc_table103 >> 2] = $call$i228;
   HEAP32[$sinc_table_length >> 2] = $min_sinc_table_length$0;
  }
  if ($79) {
   $21 = HEAP32[$den_rate >> 2] | 0;
   if (!$21) $$pre284 = HEAP32[$filt_len >> 2] | 0; else {
    $cutoff122 = $st + 44 | 0;
    $sinc_table137 = $st + 76 | 0;
    $$pre280 = HEAP32[$filt_len >> 2] | 0;
    $conv130 = +($21 >>> 0);
    $cmp119$peel = $$pre280 >>> 0 > 1;
    $div124$neg = ($$pre280 | 0) / -2 | 0;
    $22 = $$pre280;
    $i$0262 = 0;
    while (1) {
     if (!$22) $80 = 0; else {
      $div131 = +($i$0262 >>> 0) / $conv130;
      $$pre282 = HEAP32[34816 + ((HEAP32[$quality >> 2] | 0) * 20 | 0) + 16 >> 2] | 0;
      $$pre283 = HEAP32[$sinc_table137 >> 2] | 0;
      HEAPF32[$$pre283 + ((Math_imul($22, $i$0262) | 0) << 2) >> 2] = +_sinc(+HEAPF32[$cutoff122 >> 2], +((($22 | 0) / -2 | 0) + 1 | 0) - $div131, $22, $$pre282);
      if ($cmp119$peel) {
       $mul139 = Math_imul($$pre280, $i$0262) | 0;
       $j$0260 = 1;
       do {
        $j$0260$looptemp = $j$0260;
        $j$0260 = $j$0260 + 1 | 0;
        HEAPF32[$$pre283 + ($mul139 + $j$0260$looptemp << 2) >> 2] = +_sinc(+HEAPF32[$cutoff122 >> 2], +($j$0260 + $div124$neg | 0) - $div131, $$pre280, $$pre282);
       } while (($j$0260 | 0) != ($$pre280 | 0));
       $80 = $$pre280;
      } else $80 = $$pre280;
     }
     $i$0262 = $i$0262 + 1 | 0;
     if (($i$0262 | 0) == ($21 | 0)) {
      $$pre284 = $$pre280;
      break;
     } else $22 = $80;
    }
   }
   $30 = $$pre284;
   $resampler_basic_interpolate_double$resampler_basic_interpolate_single$sink = (HEAP32[$quality >> 2] | 0) > 8 ? 39 : 40;
  } else {
   $26 = HEAP32[$oversample3 >> 2] | 0;
   $27 = HEAP32[$filt_len >> 2] | 0;
   $add158265 = (Math_imul($27, $26) | 0) + 4 | 0;
   if (($add158265 | 0) > -4) {
    $cutoff162 = $st + 44 | 0;
    $$pre = HEAP32[$quality >> 2] | 0;
    $$pre277 = HEAP32[34816 + ($$pre * 20 | 0) + 16 >> 2] | 0;
    $$pre278 = HEAP32[$st + 76 >> 2] | 0;
    $conv165 = +($26 >>> 0);
    $conv169 = +($27 >>> 1 >>> 0);
    $i153$0267 = -4;
    do {
     HEAPF32[$$pre278 + ($i153$0267 + 4 << 2) >> 2] = +_sinc(+HEAPF32[$cutoff162 >> 2], +($i153$0267 | 0) / $conv165 - $conv169, $27, $$pre277);
     $i153$0267 = $i153$0267 + 1 | 0;
    } while (($i153$0267 | 0) != ($add158265 | 0));
    $29 = $$pre;
   } else $29 = HEAP32[$quality >> 2] | 0;
   $30 = $27;
   $resampler_basic_interpolate_double$resampler_basic_interpolate_single$sink = ($29 | 0) > 8 ? 41 : 42;
  }
  HEAP32[$st + 84 >> 2] = $resampler_basic_interpolate_double$resampler_basic_interpolate_single$sink;
  $add193 = $30 + -1 + (HEAP32[$st + 32 >> 2] | 0) | 0;
  $32 = HEAP32[$mem_alloc_size >> 2] | 0;
  if ($add193 >>> 0 > $32 >>> 0) {
   $33 = HEAP32[$st + 20 >> 2] | 0;
   if ((536870911 / ($33 >>> 0) | 0) >>> 0 < $add193 >>> 0) break;
   $mem203 = $st + 72 | 0;
   $call$i = _realloc(HEAP32[$mem203 >> 2] | 0, Math_imul($add193 << 2, $33) | 0) | 0;
   if (!$call$i) break;
   HEAP32[$mem203 >> 2] = $call$i;
   HEAP32[$mem_alloc_size >> 2] = $add193;
   $37 = $add193;
  } else $37 = $32;
  if (!(HEAP32[$st + 56 >> 2] | 0)) {
   $mul224234 = Math_imul($37, HEAP32[$st + 20 >> 2] | 0) | 0;
   if (!$mul224234) {
    $retval$0 = 0;
    return $retval$0 | 0;
   }
   _memset(HEAP32[$st + 72 >> 2] | 0, 0, $mul224234 << 2 | 0) | 0;
   $retval$0 = 0;
   return $retval$0 | 0;
  }
  $40 = HEAP32[$filt_len >> 2] | 0;
  if ($40 >>> 0 <= $0 >>> 0) {
   if ($40 >>> 0 >= $0 >>> 0) {
    $retval$0 = 0;
    return $retval$0 | 0;
   }
   $nb_channels373 = $st + 20 | 0;
   if (!(HEAP32[$nb_channels373 >> 2] | 0)) {
    $retval$0 = 0;
    return $retval$0 | 0;
   }
   $71 = HEAP32[$st + 68 >> 2] | 0;
   $mem395 = $st + 72 | 0;
   $73 = $40;
   $i371$0258 = 0;
   while (1) {
    $arrayidx379 = $71 + ($i371$0258 << 2) | 0;
    $72 = HEAP32[$arrayidx379 >> 2] | 0;
    $div382 = ($0 - $73 | 0) >>> 1;
    HEAP32[$arrayidx379 >> 2] = $div382;
    $74 = HEAP32[$filt_len >> 2] | 0;
    $sub387 = $div382 + $72 | 0;
    $add390 = $sub387 + -1 | 0;
    if (($add390 | 0) != (0 - $74 | 0)) {
     $75 = HEAP32[$mem395 >> 2] | 0;
     $mul397 = Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $i371$0258) | 0;
     $add391 = $add390 + $74 | 0;
     $j377$0256 = 0;
     do {
      $add398 = $mul397 + $j377$0256 | 0;
      HEAP32[$75 + ($add398 << 2) >> 2] = HEAP32[$75 + ($add398 + $div382 << 2) >> 2];
      $j377$0256 = $j377$0256 + 1 | 0;
     } while ($j377$0256 >>> 0 < $add391 >>> 0);
    }
    HEAP32[$arrayidx379 >> 2] = $sub387;
    $inc415 = $i371$0258 + 1 | 0;
    if ($inc415 >>> 0 >= (HEAP32[$nb_channels373 >> 2] | 0) >>> 0) {
     $retval$0 = 0;
     break;
    }
    $73 = HEAP32[$filt_len >> 2] | 0;
    $i371$0258 = $inc415;
   }
   return $retval$0 | 0;
  }
  $41 = HEAP32[$st + 20 >> 2] | 0;
  if (!$41) {
   $retval$0 = 0;
   return $retval$0 | 0;
  }
  $42 = HEAP32[$st + 68 >> 2] | 0;
  $sub247 = $0 + -1 | 0;
  $mem255 = $st + 72 | 0;
  $last_sample = $st + 60 | 0;
  $44 = ($41 << 2) + -4 | 0;
  $dec253$in = $41;
  $indvar = 0;
  while (1) {
   $46 = $44 + (Math_imul($indvar, -4) | 0) | 0;
   $dec253$in = $dec253$in + -1 | 0;
   $arrayidx244 = $42 + ($dec253$in << 2) | 0;
   $47 = HEAP32[$arrayidx244 >> 2] | 0;
   $add246 = ($47 << 1) + $0 | 0;
   $add250 = $sub247 + $47 | 0;
   if ($add250 | 0) {
    $48 = HEAP32[$mem255 >> 2] | 0;
    $mul256 = Math_imul($dec253$in, $1) | 0;
    $mul261 = Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $dec253$in) | 0;
    $dec252239$in = $add250;
    do {
     $dec252239$in = $dec252239$in + -1 | 0;
     HEAP32[$48 + ($dec252239$in + $47 + $mul261 << 2) >> 2] = HEAP32[$48 + ($dec252239$in + $mul256 << 2) >> 2];
    } while (($dec252239$in | 0) != 0);
   }
   if ($47 | 0) _memset((HEAP32[$mem255 >> 2] | 0) + (Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $46) | 0) | 0, 0, $47 << 2 | 0) | 0;
   HEAP32[$arrayidx244 >> 2] = 0;
   $55 = HEAP32[$filt_len >> 2] | 0;
   if ($add246 >>> 0 < $55 >>> 0) {
    $sub289 = $add246 + -1 | 0;
    if (!$sub289) $j243$2$lcssa = 0; else {
     $56 = HEAP32[$mem255 >> 2] | 0;
     $mul295 = Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $dec253$in) | 0;
     $sub296 = $add246 + -2 | 0;
     $sub304 = $55 + -2 | 0;
     $j243$2$neg247 = 0;
     $j243$2246 = 0;
     while (1) {
      HEAP32[$56 + ($sub304 + $j243$2$neg247 + $mul295 << 2) >> 2] = HEAP32[$56 + ($sub296 + $j243$2$neg247 + $mul295 << 2) >> 2];
      $inc309 = $j243$2246 + 1 | 0;
      if (($inc309 | 0) == ($sub289 | 0)) {
       $j243$2$lcssa = $sub289;
       break;
      } else {
       $j243$2$neg247 = ~$j243$2246;
       $j243$2246 = $inc309;
      }
     }
    }
    $sub313 = $55 + -1 | 0;
    if ($sub313 >>> 0 > $j243$2$lcssa >>> 0) _memset((HEAP32[$mem255 >> 2] | 0) + (Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $46) | 0) | 0, 0, $sub313 - $j243$2$lcssa << 2 | 0) | 0;
    $arrayidx331 = (HEAP32[$last_sample >> 2] | 0) + ($dec253$in << 2) | 0;
    HEAP32[$arrayidx331 >> 2] = (HEAP32[$arrayidx331 >> 2] | 0) + (($55 - $add246 | 0) >>> 1);
   } else {
    $div336 = ($add246 - $55 | 0) >>> 1;
    HEAP32[$arrayidx244 >> 2] = $div336;
    $66 = HEAP32[$filt_len >> 2] | 0;
    $sub341 = $div336 + -1 | 0;
    if (($sub341 | 0) != (0 - $66 | 0)) {
     $67 = HEAP32[$mem255 >> 2] | 0;
     $mul350 = Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $dec253$in) | 0;
     $add344 = $sub341 + $66 | 0;
     $j243$4244 = 0;
     do {
      $add351 = $mul350 + $j243$4244 | 0;
      HEAP32[$67 + ($add351 << 2) >> 2] = HEAP32[$67 + ($add351 + $div336 << 2) >> 2];
      $j243$4244 = $j243$4244 + 1 | 0;
     } while ($j243$4244 >>> 0 < $add344 >>> 0);
    }
   }
   if (!$dec253$in) {
    $retval$0 = 0;
    break;
   } else $indvar = $indvar + 1 | 0;
  }
  return $retval$0 | 0;
 } while (0);
 HEAP32[$st + 84 >> 2] = 43;
 HEAP32[$filt_len >> 2] = $0;
 $retval$0 = 1;
 return $retval$0 | 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $125 = 0, $127 = 0, $13 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0, $cmp112 = 0, $cmp25 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0, $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179159 = 0, $conv179162 = 0, $conv207152$pre$phiZ2D = 0, $conv238177 = 0, $conv238180 = 0, $conv267166$pre$phiZ2D = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $spec$select132 = 0, $sub = 0, $sub111191 = 0, $sub111194 = 0, $sub131187 = 0, $tobool65 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[16056] = 28;
  $148 = 0;
  $149 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1137 = $cond44;
    label = 47;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[36689 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0, 0);
     $148 = 0;
     $149 = 0;
     break L1;
    }
    if ($tobool65) {
     $148 = 0;
     $149 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $148 = 0;
    $149 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1137 = $cond59;
    label = 47;
   }
  } else {
   $spec$select132 = $cmp25 ? 10 : $base;
   if ($spec$select132 >>> 0 > (HEAPU8[36689 + $c$0 >> 0] | 0) >>> 0) {
    $base$addr$1 = $spec$select132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0, 0);
    HEAP32[16056] = 28;
    $148 = 0;
    $149 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111191 = $c$1 + -48 | 0;
   if ($sub111191 >>> 0 < 10) {
    $sub111194 = $sub111191;
    $x$0193 = 0;
    do {
     $x$0193 = ($x$0193 * 10 | 0) + $sub111194 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $cond128 = HEAPU8[$23 >> 0] | 0;
     } else $cond128 = ___shgetc($f) | 0;
     $sub111194 = $cond128 + -48 | 0;
     $cmp112 = $sub111194 >>> 0 < 10;
    } while ($cmp112 & $x$0193 >>> 0 < 429496729);
    if ($cmp112) {
     $27 = $x$0193;
     $28 = 0;
     $c$3185 = $cond128;
     $sub131187 = $sub111194;
     while (1) {
      $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
      $30 = getTempRet0() | 0;
      $32 = (($sub131187 | 0) < 0) << 31 >> 31;
      $34 = ~$32;
      if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131187 >>> 0) {
       $150 = $27;
       $151 = $28;
       $base$addr$1136 = 10;
       $c$8 = $c$3185;
       label = 76;
       break L43;
      }
      $27 = _i64Add($29 | 0, $30 | 0, $sub131187 | 0, $32 | 0) | 0;
      $28 = getTempRet0() | 0;
      $42 = HEAP32[$rpos >> 2] | 0;
      if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $42 + 1;
       $cond162 = HEAPU8[$42 >> 0] | 0;
      } else $cond162 = ___shgetc($f) | 0;
      $sub131187 = $cond162 + -48 | 0;
      if (!($sub131187 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3185 = $cond162;
     }
     if ($sub131187 >>> 0 > 9) {
      $125 = $28;
      $127 = $27;
      $neg$1 = $neg$0;
     } else {
      $150 = $27;
      $151 = $28;
      $base$addr$1136 = 10;
      $c$8 = $cond162;
      label = 76;
     }
    } else {
     $125 = 0;
     $127 = $x$0193;
     $neg$1 = $neg$0;
    }
   } else {
    $125 = 0;
    $127 = 0;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1137 = $c$1;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[57442 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $51 = HEAP8[36689 + $c$1137 >> 0] | 0;
    $conv179159 = $51 & 255;
    if ($base$addr$1135 >>> 0 > $conv179159 >>> 0) {
     $conv179162 = $conv179159;
     $x$1161 = 0;
     do {
      $x$1161 = $conv179162 | $x$1161 << $conv176;
      $52 = HEAP32[$rpos >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $52 + 1;
       $cond202 = HEAPU8[$52 >> 0] | 0;
      } else $cond202 = ___shgetc($f) | 0;
      $55 = HEAP8[36689 + $cond202 >> 0] | 0;
      $conv179162 = $55 & 255;
     } while ($x$1161 >>> 0 < 134217728 & $base$addr$1135 >>> 0 > $conv179162 >>> 0);
     $152 = $55;
     $60 = 0;
     $62 = $x$1161;
     $c$4$lcssa = $cond202;
     $conv207152$pre$phiZ2D = $conv179162;
    } else {
     $152 = $51;
     $60 = 0;
     $62 = 0;
     $c$4$lcssa = $c$1137;
     $conv207152$pre$phiZ2D = $conv179159;
    }
    $57 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $58 = getTempRet0() | 0;
    if ($base$addr$1135 >>> 0 <= $conv207152$pre$phiZ2D >>> 0 | ($58 >>> 0 < $60 >>> 0 | ($58 | 0) == ($60 | 0) & $57 >>> 0 < $62 >>> 0)) {
     $150 = $62;
     $151 = $60;
     $base$addr$1136 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 76;
     break;
    }
    $66 = $62;
    $67 = $60;
    $71 = $152;
    while (1) {
     $68 = _bitshift64Shl($66 | 0, $67 | 0, $conv176 | 0) | 0;
     $69 = getTempRet0() | 0;
     $72 = $68 | $71 & 255;
     $73 = HEAP32[$rpos >> 2] | 0;
     if ($73 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $73 + 1;
      $cond233 = HEAPU8[$73 >> 0] | 0;
     } else $cond233 = ___shgetc($f) | 0;
     $71 = HEAP8[36689 + $cond233 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($71 & 255) >>> 0 | ($69 >>> 0 > $58 >>> 0 | ($69 | 0) == ($58 | 0) & $72 >>> 0 > $57 >>> 0)) {
      $150 = $72;
      $151 = $69;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond233;
      label = 76;
      break L63;
     } else {
      $66 = $72;
      $67 = $69;
     }
    }
   }
   $82 = HEAP8[36689 + $c$1137 >> 0] | 0;
   $conv238177 = $82 & 255;
   if ($base$addr$1135 >>> 0 > $conv238177 >>> 0) {
    $conv238180 = $conv238177;
    $x$2179 = 0;
    do {
     $x$2179 = $conv238180 + (Math_imul($x$2179, $base$addr$1135) | 0) | 0;
     $83 = HEAP32[$rpos >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $83 + 1;
      $cond262 = HEAPU8[$83 >> 0] | 0;
     } else $cond262 = ___shgetc($f) | 0;
     $86 = HEAP8[36689 + $cond262 >> 0] | 0;
     $conv238180 = $86 & 255;
    } while ($x$2179 >>> 0 < 119304647 & $base$addr$1135 >>> 0 > $conv238180 >>> 0);
    $153 = $86;
    $154 = $x$2179;
    $155 = 0;
    $c$6$lcssa = $cond262;
    $conv267166$pre$phiZ2D = $conv238180;
   } else {
    $153 = $82;
    $154 = 0;
    $155 = 0;
    $c$6$lcssa = $c$1137;
    $conv267166$pre$phiZ2D = $conv238177;
   }
   if ($base$addr$1135 >>> 0 > $conv267166$pre$phiZ2D >>> 0) {
    $88 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $89 = getTempRet0() | 0;
    $100 = $153;
    $91 = $155;
    $93 = $154;
    $c$7168 = $c$6$lcssa;
    while (1) {
     if ($91 >>> 0 > $89 >>> 0 | ($91 | 0) == ($89 | 0) & $93 >>> 0 > $88 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $97 = ___muldi3($93 | 0, $91 | 0, $base$addr$1135 | 0, 0) | 0;
     $98 = getTempRet0() | 0;
     $99 = $100 & 255;
     if ($98 >>> 0 > 4294967295 | ($98 | 0) == -1 & $97 >>> 0 > ~$99 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $107 = _i64Add($97 | 0, $98 | 0, $99 | 0, 0) | 0;
     $108 = getTempRet0() | 0;
     $109 = HEAP32[$rpos >> 2] | 0;
     if ($109 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $109 + 1;
      $cond301 = HEAPU8[$109 >> 0] | 0;
     } else $cond301 = ___shgetc($f) | 0;
     $100 = HEAP8[36689 + $cond301 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($100 & 255) >>> 0) {
      $150 = $107;
      $151 = $108;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond301;
      label = 76;
      break;
     } else {
      $91 = $108;
      $93 = $107;
      $c$7168 = $cond301;
     }
    }
   } else {
    $150 = $154;
    $151 = $155;
    $base$addr$1136 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($base$addr$1136 >>> 0 > (HEAPU8[36689 + $c$8 >> 0] | 0) >>> 0) {
   do {
    $114 = HEAP32[$rpos >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $114 + 1;
     $cond328 = HEAPU8[$114 >> 0] | 0;
    } else $cond328 = ___shgetc($f) | 0;
   } while ($base$addr$1136 >>> 0 > (HEAPU8[36689 + $cond328 >> 0] | 0) >>> 0);
   HEAP32[16056] = 68;
   $125 = $1;
   $127 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $125 = $151;
   $127 = $150;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($125 >>> 0 < $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[16056] = 68;
    $135 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $148 = getTempRet0() | 0;
    $149 = $135;
    break;
   }
   if ($125 >>> 0 > $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 > $0 >>> 0) {
    HEAP32[16056] = 68;
    $148 = $1;
    $149 = $0;
    break;
   }
  }
  $143 = (($neg$1 | 0) < 0) << 31 >> 31;
  $146 = _i64Subtract($127 ^ $neg$1 | 0, $125 ^ $143 | 0, $neg$1 | 0, $143 | 0) | 0;
  $148 = getTempRet0() | 0;
  $149 = $146;
 } while (0);
 setTempRet0($148 | 0);
 return $149 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b$0, $__e$0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $43 = 0, $46 = 0, $47 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__einp_$i$i = 0, $__einp_$i$i117 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i116 = 0, $__opt$0 = 0, $__tab_$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i130 = 0, $call$i40 = 0, $call4$i$i$i = 0, $call4$i$i$i160 = 0, $call4$i$i$i67 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i158 = 0, $retval$0$i$i$i$i65 = 0, $retval$0$i$i125 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i179 = 0, $retval$0$i$i13$i$i86 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp23$byval_copy >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $__tab_$i = $call$i + 8 | 0;
 $0 = 0;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $57 = $__b$sroa$0$0;
   $__e$sroa$0$8 = $__e$sroa$0$0;
   break;
  }
  $1 = $__b$sroa$0$0;
  if (!$__b$sroa$0$0) {
   $18 = $1;
   $46 = 0;
   $67 = 1;
   $__b$sroa$0$1 = 0;
  } else {
   $2 = HEAP32[$__b$sroa$0$0 + 12 >> 2] | 0;
   if (($2 | 0) == (HEAP32[$__b$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__b$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__b$sroa$0$0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$2 >> 0] | 0) | 0;
   $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
   $18 = $call4$i$i$i ? 0 : $1;
   $46 = $call4$i$i$i ? 0 : $__b$sroa$0$0;
   $67 = $call4$i$i$i;
   $__b$sroa$0$1 = $call4$i$i$i ? 0 : $__b$sroa$0$0;
  }
  $6 = $__e$sroa$0$0;
  if (!$__e$sroa$0$0) {
   $$ph = $6;
   label = 13;
  } else {
   $7 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$7 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) {
    $$ph = 0;
    label = 13;
   } else if ($67) {
    $19 = $6;
    $__e$sroa$0$2 = $__e$sroa$0$0;
   } else {
    $__e$sroa$0$7 = $__e$sroa$0$0;
    label = 59;
    break;
   }
  }
  if ((label | 0) == 13) {
   label = 0;
   if ($67) {
    $__e$sroa$0$7 = 0;
    label = 59;
    break;
   } else {
    $19 = $$ph;
    $__e$sroa$0$2 = 0;
   }
  }
  L21 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 1 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    $__e$sroa$0$7 = $__e$sroa$0$2;
    label = 59;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$incdec$ptr >> 0] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 2 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      $__e$sroa$0$7 = $__e$sroa$0$2;
      label = 59;
      break L1;
     }
     $20 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 31]($call$i, HEAP8[$incdec$ptr16 >> 0] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $20 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $17 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $18;
   HEAP32[$agg$tmp23 >> 2] = $19;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   $__b$sroa$0$4 = FUNCTION_TABLE_iiiiiiiii[$17 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $__e$sroa$0$6 = $__e$sroa$0$2;
   $__fmtb$addr$4 = $20 + 2 | 0;
  } else {
   $21 = HEAP8[$__fmtb$addr$0 >> 0] | 0;
   if ($21 << 24 >> 24 > -1) {
    $22 = HEAP32[$__tab_$i >> 2] | 0;
    if (HEAP16[$22 + ($21 << 24 >> 24 << 1) >> 1] & 8192) {
     $__fmtb$addr$0$pn = $__fmtb$addr$0;
     while (1) {
      $__fmtb$addr$3 = $__fmtb$addr$0$pn + 1 | 0;
      if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
       $__fmtb$addr$3$lcssa = $__fmte;
       break;
      }
      $24 = HEAP8[$__fmtb$addr$3 >> 0] | 0;
      if ($24 << 24 >> 24 <= -1) {
       $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
       break;
      }
      if (!(HEAP16[$22 + ($24 << 24 >> 24 << 1) >> 1] & 8192)) {
       $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
       break;
      } else $__fmtb$addr$0$pn = $__fmtb$addr$3;
     }
     $26 = $46;
     $31 = $__e$sroa$0$2;
     $__b$sroa$0$2 = $__b$sroa$0$1;
     $__e$sroa$0$3 = $__e$sroa$0$2;
     while (1) {
      if (!$26) {
       $36 = 0;
       $68 = 1;
       $__b$sroa$0$3 = $__b$sroa$0$2;
      } else {
       $27 = HEAP32[$26 + 12 >> 2] | 0;
       if (($27 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $retval$0$i$i$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $retval$0$i$i$i$i65 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
       $call4$i$i$i67 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i65) | 0;
       $36 = $call4$i$i$i67 ? 0 : $26;
       $68 = $call4$i$i$i67;
       $__b$sroa$0$3 = $call4$i$i$i67 ? 0 : $__b$sroa$0$2;
      }
      if (!$31) {
       $__e$sroa$0$4 = $__e$sroa$0$3;
       label = 38;
      } else {
       $32 = HEAP32[$31 + 12 >> 2] | 0;
       if (($32 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $retval$0$i$i13$i$i86 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 63]($31) | 0; else $retval$0$i$i13$i$i86 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$32 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i86) | 0) {
        $__e$sroa$0$4 = 0;
        label = 38;
       } else if ($68) {
        $69 = $31;
        $__e$sroa$0$5 = $__e$sroa$0$3;
       } else {
        $__b$sroa$0$4 = $__b$sroa$0$3;
        $__e$sroa$0$6 = $__e$sroa$0$3;
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L21;
       }
      }
      if ((label | 0) == 38) {
       label = 0;
       if ($68) {
        $__b$sroa$0$4 = $__b$sroa$0$3;
        $__e$sroa$0$6 = $__e$sroa$0$4;
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L21;
       } else {
        $69 = 0;
        $__e$sroa$0$5 = $__e$sroa$0$4;
       }
      }
      $__ninp_$i$i = $36 + 12 | 0;
      $37 = HEAP32[$__ninp_$i$i >> 2] | 0;
      $__einp_$i$i = $36 + 16 | 0;
      if (($37 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
      if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
       $__b$sroa$0$4 = $__b$sroa$0$3;
       $__e$sroa$0$6 = $__e$sroa$0$5;
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
       $__b$sroa$0$4 = $__b$sroa$0$3;
       $__e$sroa$0$6 = $__e$sroa$0$5;
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L21;
      }
      $43 = HEAP32[$__ninp_$i$i >> 2] | 0;
      if (($43 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 40 >> 2] & 63]($36) | 0; else HEAP32[$__ninp_$i$i >> 2] = $43 + 1;
      $26 = $36;
      $31 = $69;
      $__b$sroa$0$2 = $__b$sroa$0$3;
      $__e$sroa$0$3 = $__e$sroa$0$5;
     }
    }
   }
   $__ninp_$i$i116 = $46 + 12 | 0;
   $47 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   $__einp_$i$i117 = $46 + 16 | 0;
   if (($47 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) $retval$0$i$i125 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0; else $retval$0$i$i125 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$47 >> 0] | 0) | 0;
   $call$i130 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 15]($call$i, $retval$0$i$i125 & 255) | 0;
   if ($call$i130 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 15]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[$__err >> 2] = 4;
    $__b$sroa$0$4 = $__b$sroa$0$1;
    $__e$sroa$0$6 = $__e$sroa$0$2;
    $__fmtb$addr$4 = $__fmtb$addr$0;
    break;
   }
   $54 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   if (($54 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0; else HEAP32[$__ninp_$i$i116 >> 2] = $54 + 1;
   $__b$sroa$0$4 = $__b$sroa$0$1;
   $__e$sroa$0$6 = $__e$sroa$0$2;
   $__fmtb$addr$4 = $__fmtb$addr$0 + 1 | 0;
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__b$sroa$0$0 = $__b$sroa$0$4;
  $__e$sroa$0$0 = $__e$sroa$0$6;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 59) {
  HEAP32[$__err >> 2] = 4;
  $57 = $46;
  $__e$sroa$0$8 = $__e$sroa$0$7;
 }
 if (!$57) {
  $70 = 1;
  $retval$sroa$0$0$copyload = 0;
 } else {
  $58 = HEAP32[$57 + 12 >> 2] | 0;
  if (($58 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) $retval$0$i$i$i$i158 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 63]($57) | 0; else $retval$0$i$i$i$i158 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$58 >> 0] | 0) | 0;
  $call4$i$i$i160 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i158) | 0;
  $70 = $call4$i$i$i160;
  $retval$sroa$0$0$copyload = $call4$i$i$i160 ? 0 : $57;
 }
 if (!$__e$sroa$0$8) label = 70; else {
  $62 = HEAP32[$__e$sroa$0$8 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$__e$sroa$0$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i179 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$8 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$8) | 0; else $retval$0$i$i13$i$i179 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$62 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i179) | 0) label = 70; else if (!$70) label = 72;
 }
 if ((label | 0) == 70) if ($70) label = 72;
 if ((label | 0) == 72) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b$0, $__e$0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $41 = 0, $44 = 0, $45 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__einp_$i$i = 0, $__einp_$i$i107 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i106 = 0, $__opt$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i119 = 0, $call$i40 = 0, $call4$i$i$i = 0, $call4$i$i$i149 = 0, $call4$i$i$i64 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i147 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i115 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i168 = 0, $retval$0$i$i13$i$i83 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp23$byval_copy >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $0 = 0;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $55 = $__b$sroa$0$0;
   $__e$sroa$0$8 = $__e$sroa$0$0;
   break;
  }
  $1 = $__b$sroa$0$0;
  if (!$__b$sroa$0$0) {
   $18 = $1;
   $44 = 0;
   $65 = 1;
   $__b$sroa$0$1 = 0;
  } else {
   $2 = HEAP32[$__b$sroa$0$0 + 12 >> 2] | 0;
   if (($2 | 0) == (HEAP32[$__b$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__b$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__b$sroa$0$0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$2 >> 2] | 0) | 0;
   $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
   $18 = $call4$i$i$i ? 0 : $1;
   $44 = $call4$i$i$i ? 0 : $__b$sroa$0$0;
   $65 = $call4$i$i$i;
   $__b$sroa$0$1 = $call4$i$i$i ? 0 : $__b$sroa$0$0;
  }
  $6 = $__e$sroa$0$0;
  if (!$__e$sroa$0$0) {
   $$ph = $6;
   label = 13;
  } else {
   $7 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$7 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) {
    $$ph = 0;
    label = 13;
   } else if ($65) {
    $19 = $6;
    $__e$sroa$0$2 = $__e$sroa$0$0;
   } else {
    $__e$sroa$0$7 = $__e$sroa$0$0;
    label = 56;
    break;
   }
  }
  if ((label | 0) == 13) {
   label = 0;
   if ($65) {
    $__e$sroa$0$7 = 0;
    label = 56;
    break;
   } else {
    $19 = $$ph;
    $__e$sroa$0$2 = 0;
   }
  }
  L21 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 4 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    $__e$sroa$0$7 = $__e$sroa$0$2;
    label = 56;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$incdec$ptr >> 2] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 8 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      $__e$sroa$0$7 = $__e$sroa$0$2;
      label = 56;
      break L1;
     }
     $20 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 31]($call$i, HEAP32[$incdec$ptr16 >> 2] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $20 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $17 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $18;
   HEAP32[$agg$tmp23 >> 2] = $19;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   $__b$sroa$0$4 = FUNCTION_TABLE_iiiiiiiii[$17 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $__e$sroa$0$6 = $__e$sroa$0$2;
   $__fmtb$addr$4 = $20 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
    $__ninp_$i$i106 = $44 + 12 | 0;
    $45 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    $__einp_$i$i107 = $44 + 16 | 0;
    if (($45 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) $retval$0$i$i115 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 63]($44) | 0; else $retval$0$i$i115 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
    $call$i119 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, $retval$0$i$i115) | 0;
    if (($call$i119 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
     HEAP32[$__err >> 2] = 4;
     $__b$sroa$0$4 = $__b$sroa$0$1;
     $__e$sroa$0$6 = $__e$sroa$0$2;
     $__fmtb$addr$4 = $__fmtb$addr$0;
     break;
    }
    $52 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    if (($52 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 40 >> 2] & 63]($44) | 0; else HEAP32[$__ninp_$i$i106 >> 2] = $52 + 4;
    $__b$sroa$0$4 = $__b$sroa$0$1;
    $__e$sroa$0$6 = $__e$sroa$0$2;
    $__fmtb$addr$4 = $__fmtb$addr$0 + 4 | 0;
    break;
   }
   $__fmtb$addr$0$pn = $__fmtb$addr$0;
   while (1) {
    $__fmtb$addr$3 = $__fmtb$addr$0$pn + 4 | 0;
    if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
     $__fmtb$addr$3$lcssa = $__fmte;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, HEAP32[$__fmtb$addr$3 >> 2] | 0) | 0) $__fmtb$addr$0$pn = $__fmtb$addr$3; else {
     $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
     break;
    }
   }
   $25 = $44;
   $30 = $__e$sroa$0$2;
   $__b$sroa$0$2 = $__b$sroa$0$1;
   $__e$sroa$0$3 = $__e$sroa$0$2;
   while (1) {
    if (!$25) {
     $35 = 0;
     $66 = 1;
     $__b$sroa$0$3 = $__b$sroa$0$2;
    } else {
     $26 = HEAP32[$25 + 12 >> 2] | 0;
     if (($26 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) $retval$0$i$i$i$i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0; else $retval$0$i$i$i$i62 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$26 >> 2] | 0) | 0;
     $call4$i$i$i64 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i62) | 0;
     $35 = $call4$i$i$i64 ? 0 : $25;
     $66 = $call4$i$i$i64;
     $__b$sroa$0$3 = $call4$i$i$i64 ? 0 : $__b$sroa$0$2;
    }
    if (!$30) {
     $__e$sroa$0$4 = $__e$sroa$0$3;
     label = 36;
    } else {
     $31 = HEAP32[$30 + 12 >> 2] | 0;
     if (($31 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $retval$0$i$i13$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; else $retval$0$i$i13$i$i83 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$31 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i83) | 0) {
      $__e$sroa$0$4 = 0;
      label = 36;
     } else if ($66) {
      $67 = $30;
      $__e$sroa$0$5 = $__e$sroa$0$3;
     } else {
      $__b$sroa$0$4 = $__b$sroa$0$3;
      $__e$sroa$0$6 = $__e$sroa$0$3;
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L21;
     }
    }
    if ((label | 0) == 36) {
     label = 0;
     if ($66) {
      $__b$sroa$0$4 = $__b$sroa$0$3;
      $__e$sroa$0$6 = $__e$sroa$0$4;
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L21;
     } else {
      $67 = 0;
      $__e$sroa$0$5 = $__e$sroa$0$4;
     }
    }
    $__ninp_$i$i = $35 + 12 | 0;
    $36 = HEAP32[$__ninp_$i$i >> 2] | 0;
    $__einp_$i$i = $35 + 16 | 0;
    if (($36 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, 8192, $retval$0$i$i) | 0)) {
     $__b$sroa$0$4 = $__b$sroa$0$3;
     $__e$sroa$0$6 = $__e$sroa$0$5;
     $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
     break L21;
    }
    $41 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($41 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 40 >> 2] & 63]($35) | 0; else HEAP32[$__ninp_$i$i >> 2] = $41 + 4;
    $25 = $35;
    $30 = $67;
    $__b$sroa$0$2 = $__b$sroa$0$3;
    $__e$sroa$0$3 = $__e$sroa$0$5;
   }
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__b$sroa$0$0 = $__b$sroa$0$4;
  $__e$sroa$0$0 = $__e$sroa$0$6;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 56) {
  HEAP32[$__err >> 2] = 4;
  $55 = $44;
  $__e$sroa$0$8 = $__e$sroa$0$7;
 }
 if (!$55) {
  $68 = 1;
  $retval$sroa$0$0$copyload = 0;
 } else {
  $56 = HEAP32[$55 + 12 >> 2] | 0;
  if (($56 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) $retval$0$i$i$i$i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 63]($55) | 0; else $retval$0$i$i$i$i147 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$56 >> 2] | 0) | 0;
  $call4$i$i$i149 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i147) | 0;
  $68 = $call4$i$i$i149;
  $retval$sroa$0$0$copyload = $call4$i$i$i149 ? 0 : $55;
 }
 if (!$__e$sroa$0$8) label = 67; else {
  $60 = HEAP32[$__e$sroa$0$8 + 12 >> 2] | 0;
  if (($60 | 0) == (HEAP32[$__e$sroa$0$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$8 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$8) | 0; else $retval$0$i$i13$i$i168 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$60 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i168) | 0) label = 67; else if (!$68) label = 69;
 }
 if ((label | 0) == 67) if ($68) label = 69;
 if ((label | 0) == 69) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd620 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[16415] | 0;
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!($1 & 3)) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) return;
  if ((HEAP32[16416] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $20 = HEAP32[$head209 >> 2] | 0;
   if (($20 & 3 | 0) != 3) {
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[16413] = $add17;
   HEAP32[$head209 >> 2] = $20 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[16411] = HEAP32[16411] & ~(1 << $shr);
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   } else {
    HEAP32[$4 + 12 >> 2] = $5;
    HEAP32[$5 + 8 >> 2] = $4;
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
  $7 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $8 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($8 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $10 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$10) {
    $11 = HEAP32[$child >> 2] | 0;
    if (!$11) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $11;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $10;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $12 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$12) {
     $arrayidx113 = $R$1 + 16 | 0;
     $13 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$13) break; else {
      $R$1$be = $13;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $12;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   HEAP32[$RP$1 >> 2] = 0;
   $R$3 = $R$1;
  } else {
   $9 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   HEAP32[$9 + 12 >> 2] = $8;
   HEAP32[$8 + 8 >> 2] = $9;
   $R$3 = $8;
  } while (0);
  if (!$7) {
   $21 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $14 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 65948 + ($14 << 2) | 0;
   if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[16412] = HEAP32[16412] & ~(1 << $14);
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break;
    }
   } else {
    $arrayidx149 = $7 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $7 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break;
    }
   }
   HEAP32[$R$3 + 24 >> 2] = $7;
   $child171 = $add$ptr16 + 16 | 0;
   $18 = HEAP32[$child171 >> 2] | 0;
   if ($18 | 0) {
    HEAP32[$R$3 + 16 >> 2] = $18;
    HEAP32[$18 + 24 >> 2] = $R$3;
   }
   $19 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$19) {
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else {
    HEAP32[$R$3 + 20 >> 2] = $19;
    HEAP32[$19 + 24 >> 2] = $R$3;
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   }
  }
 } else {
  $21 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($21 >>> 0 >= $add$ptr6 >>> 0) return;
 $head231 = $add$ptr6 + 4 | 0;
 $22 = HEAP32[$head231 >> 2] | 0;
 if (!($22 & 1)) return;
 if (!($22 & 2)) {
  if ((HEAP32[16417] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[16414] | 0) + $psize$1 | 0;
   HEAP32[16414] = $add246;
   HEAP32[16417] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[16416] | 0)) return;
   HEAP32[16416] = 0;
   HEAP32[16413] = 0;
   return;
  }
  if ((HEAP32[16416] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[16413] | 0) + $psize$1 | 0;
   HEAP32[16413] = $add258;
   HEAP32[16416] = $21;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$21 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($22 & -8) + $psize$1 | 0;
  $shr268 = $22 >>> 3;
  do if ($22 >>> 0 < 256) {
   $28 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $29 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   if (($29 | 0) == ($28 | 0)) {
    HEAP32[16411] = HEAP32[16411] & ~(1 << $shr268);
    break;
   } else {
    HEAP32[$28 + 12 >> 2] = $29;
    HEAP32[$29 + 8 >> 2] = $28;
    break;
   }
  } else {
   $31 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $32 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($32 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $34 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$34) {
     $35 = HEAP32[$child361 >> 2] | 0;
     if (!$35) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $35;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $34;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $36 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$36) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $37 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$37) break; else {
       $R332$1$be = $37;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $36;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    HEAP32[$RP360$1 >> 2] = 0;
    $R332$3 = $R332$1;
   } else {
    $33 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    HEAP32[$33 + 12 >> 2] = $32;
    HEAP32[$32 + 8 >> 2] = $33;
    $R332$3 = $32;
   } while (0);
   if ($31 | 0) {
    $38 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 65948 + ($38 << 2) | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[16412] = HEAP32[16412] & ~(1 << $38);
      break;
     }
    } else {
     $arrayidx419 = $31 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $31 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break;
    }
    HEAP32[$R332$3 + 24 >> 2] = $31;
    $child443 = $add$ptr6 + 16 | 0;
    $42 = HEAP32[$child443 >> 2] | 0;
    if ($42 | 0) {
     HEAP32[$R332$3 + 16 >> 2] = $42;
     HEAP32[$42 + 24 >> 2] = $R332$3;
    }
    $43 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($43 | 0) {
     HEAP32[$R332$3 + 20 >> 2] = $43;
     HEAP32[$43 + 24 >> 2] = $R332$3;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$21 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[16416] | 0)) {
   HEAP32[16413] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $22 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$21 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 65684 + ($shr501 << 1 << 2) | 0;
  $45 = HEAP32[16411] | 0;
  $shl511 = 1 << $shr501;
  if (!($45 & $shl511)) {
   HEAP32[16411] = $45 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $46 = $arrayidx509 + 8 | 0;
   $$pre$phiZ2D = $46;
   $F510$0 = HEAP32[$46 >> 2] | 0;
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 65948 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $48 = HEAP32[16412] | 0;
 $shl573 = 1 << $I534$0;
 L112 : do if (!($48 & $shl573)) {
  HEAP32[16412] = $48 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $49 = HEAP32[$arrayidx567 >> 2] | 0;
  L115 : do if ((HEAP32[$49 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) $T$0$lcssa = $49; else {
   $K583$0266 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0265 = $49;
   while (1) {
    $arrayidx599 = $T$0265 + 16 + ($K583$0266 >>> 31 << 2) | 0;
    $51 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$51) break;
    if ((HEAP32[$51 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $51;
     break L115;
    } else {
     $K583$0266 = $K583$0266 << 1;
     $T$0265 = $51;
    }
   }
   HEAP32[$arrayidx599 >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0265;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break L112;
  } while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $53 = HEAP32[$fd620 >> 2] | 0;
  HEAP32[$53 + 12 >> 2] = $p$1;
  HEAP32[$fd620 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $53;
  HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$p$1 + 24 >> 2] = 0;
 } while (0);
 $dec = (HEAP32[16419] | 0) + -1 | 0;
 HEAP32[16419] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 66100;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[16419] = -1;
 return;
}

function _quant_coarse_energy_impl($m, $start, $end, $eBands, $oldEBands, $budget, $tell, $prob_model, $error, $enc, $C, $LM, $intra, $max_decay, $lfe) {
 $m = $m | 0;
 $start = $start | 0;
 $end = $end | 0;
 $eBands = $eBands | 0;
 $oldEBands = $oldEBands | 0;
 $budget = $budget | 0;
 $tell = $tell | 0;
 $prob_model = $prob_model | 0;
 $error = $error | 0;
 $enc = $enc | 0;
 $C = $C | 0;
 $LM = $LM | 0;
 $intra = $intra | 0;
 $max_decay = +$max_decay;
 $lfe = $lfe | 0;
 var $$pre = 0, $0 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add157 = 0, $add26$i = 0, $add38$i = 0, $add43 = 0, $add5 = 0, $add6$i = 0, $arrayidx104 = 0, $arrayidx107 = 0, $arrayidx17 = 0, $badness$0$lcssa = 0, $badness$086 = 0, $badness$1 = 0, $beta$0 = 0.0, $c$0 = 0, $cmp1$i = 0, $cmp1$lcssa$i = 0, $cmp146$i = 0, $cmp54 = 0, $coef$0 = 0.0, $cond120 = 0, $cond147 = 0, $cond183 = 0, $cond68 = 0, $conv$i20$i$i$i$i = 0, $conv153 = 0.0, $conv20 = 0, $enc$idx = 0, $enc$idx$val = 0, $enc$idx82 = 0, $enc$idx82$val = 0, $end_offs$i$i$i$i$i = 0, $error$i$i$i$i = 0, $ext15$i$i$i$i = 0, $fl$0$lcssa$i = 0, $fl$050$i = 0, $fl$1$i = 0, $fs$addr$0$i = 0, $fs$addr$0$lcssa$i = 0, $fs$addr$045$i = 0, $fs$addr$052$i = 0, $fs$addr$1$i = 0, $fs$addr$2$i5 = 0, $i$0$lcssa$i = 0, $i$051$i = 0, $i$087 = 0, $inc$i = 0, $mul$i = 0, $mul103 = 0, $mul16 = 0.0, $mul50 = 0, $mul52 = 0, $nbEBands = 0, $offs$i$i$i$i$i = 0, $or$cond1 = 0, $prev = 0, $qi$0 = 0, $qi$1 = 0, $qi$2 = 0, $qi$3 = 0, $qi$4 = 0, $qi$5 = 0, $rem$i$i$i$i = 0, $retval$0$i$i$i$i$i = 0, $retval$0$i25$i$i$i$i = 0, $shl = 0, $shl109 = 0, $shr$i$i = 0, $shr$i$i$i = 0, $shr$i$i8 = 0, $shr$i7$i$i$i = 0, $spec$select = 0, $storage$i$i$i$i$i = 0, $storemerge = 0, $storemerge$i$i = 0, $sub$i = 0, $sub159 = 0, $sub16$i = 0, $sub16$sub17$i = 0, $sub17$i = 0, $sub18 = 0.0, $sub2$i$i = 0, $sub2$i$neg = 0, $sub35 = 0.0, $sub49 = 0, $sub53 = 0, $tobool179 = 0, $tobool81 = 0, $val$i$i$i = 0, $xor$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $prev = sp;
 $0 = $prev;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 if (($tell + 3 | 0) <= ($budget | 0)) _ec_enc_bit_logp($enc, $intra, 3);
 if (!$intra) {
  $beta$0 = +HEAPF32[20768 + ($LM << 2) >> 2];
  $coef$0 = +HEAPF32[20752 + ($LM << 2) >> 2];
 } else {
  $beta$0 = .149993896484375;
  $coef$0 = 0.0;
 }
 if (($start | 0) >= ($end | 0)) {
  $badness$0$lcssa = 0;
  $tobool179 = ($lfe | 0) == 0;
  $cond183 = $tobool179 ? $badness$0$lcssa : 0;
  STACKTOP = sp;
  return $cond183 | 0;
 }
 $nbEBands = $m + 8 | 0;
 $enc$idx = $enc + 20 | 0;
 $enc$idx82 = $enc + 28 | 0;
 $sub2$i$neg = $budget + 32 | 0;
 $mul50 = $C * 3 | 0;
 $tobool81 = ($lfe | 0) != 0;
 $val$i$i$i = $enc + 32 | 0;
 $ext15$i$i$i$i = $enc + 36 | 0;
 $rem$i$i$i$i = $enc + 40 | 0;
 $offs$i$i$i$i$i = $enc + 24 | 0;
 $end_offs$i$i$i$i$i = $enc + 8 | 0;
 $storage$i$i$i$i$i = $enc + 4 | 0;
 $error$i$i$i$i = $enc + 44 | 0;
 $$pre = HEAP32[$nbEBands >> 2] | 0;
 $badness$086 = 0;
 $i$087 = $start;
 L10 : while (1) {
  $mul52 = Math_imul($mul50, $end - $i$087 | 0) | 0;
  $cmp54 = ($i$087 | 0) != ($start | 0);
  $or$cond1 = $tobool81 & ($i$087 | 0) > 1;
  $mul103 = (($i$087 | 0) < 20 ? $i$087 : 20) << 1;
  $arrayidx104 = $prob_model + $mul103 | 0;
  $arrayidx107 = $prob_model + ($mul103 | 1) | 0;
  $6 = $$pre;
  $badness$1 = $badness$086;
  $c$0 = 0;
  do {
   $add5 = (Math_imul($6, $c$0) | 0) + $i$087 | 0;
   $7 = +HEAPF32[$eBands + ($add5 << 2) >> 2];
   $8 = +HEAPF32[$oldEBands + ($add5 << 2) >> 2];
   $mul16 = $coef$0 * ($8 < -9.0 ? -9.0 : $8);
   $arrayidx17 = $prev + ($c$0 << 2) | 0;
   $9 = +HEAPF32[$arrayidx17 >> 2];
   $sub18 = $7 - $mul16 - $9;
   $conv20 = ~~+Math_floor(+($sub18 + .5));
   $sub35 = ($8 < -28.0 ? -28.0 : $8) - $max_decay;
   $add43 = $conv20 + ~~($sub35 - $7) | 0;
   $storemerge = $7 < $sub35 & ($conv20 | 0) < 0 ? (($add43 | 0) < 0 ? $add43 : 0) : $conv20;
   $enc$idx$val = HEAP32[$enc$idx >> 2] | 0;
   $enc$idx82$val = HEAP32[$enc$idx82 >> 2] | 0;
   $sub49 = $sub2$i$neg - $enc$idx$val - (Math_clz32($enc$idx82$val | 0) | 0) | 0;
   $sub53 = $sub49 - $mul52 | 0;
   if ($cmp54 & ($sub53 | 0) < 24) {
    $cond68 = ($storemerge | 0) < 1 ? $storemerge : 1;
    if (($sub53 | 0) < 16) $qi$0 = ($cond68 | 0) > -1 ? $cond68 : -1; else $qi$0 = $cond68;
   } else $qi$0 = $storemerge;
   $qi$1 = $or$cond1 ? (($qi$0 | 0) < 0 ? $qi$0 : 0) : $qi$0;
   do if (($sub49 | 0) > 14) {
    $shl = (HEAPU8[$arrayidx104 >> 0] | 0) << 7;
    $shl109 = (HEAPU8[$arrayidx107 >> 0] | 0) << 6;
    if (!$qi$1) {
     $fs$addr$2$i5 = $shl;
     $qi$3 = 0;
     $shr$i$i8 = $enc$idx82$val >>> 15;
     label = 26;
    } else {
     $sub$i = $qi$1 >> 31;
     $xor$i = $sub$i + $qi$1 ^ $sub$i;
     $fs$addr$045$i = (Math_imul(16384 - $shl109 | 0, 32736 - $shl | 0) | 0) >>> 15;
     $cmp146$i = ($fs$addr$045$i | 0) == 0;
     if (($xor$i | 0) > 1 & ($cmp146$i ^ 1)) {
      $fl$050$i = $shl;
      $fs$addr$052$i = $fs$addr$045$i;
      $i$051$i = 1;
      while (1) {
       $mul$i = $fs$addr$052$i << 1;
       $add6$i = $fl$050$i + 2 + $mul$i | 0;
       $inc$i = $i$051$i + 1 | 0;
       $fs$addr$0$i = (Math_imul($mul$i, $shl109) | 0) >>> 15;
       $cmp1$i = ($fs$addr$0$i | 0) == 0;
       if (($xor$i | 0) > ($inc$i | 0) & ($cmp1$i ^ 1)) {
        $fl$050$i = $add6$i;
        $fs$addr$052$i = $fs$addr$0$i;
        $i$051$i = $inc$i;
       } else {
        $cmp1$lcssa$i = $cmp1$i;
        $fl$0$lcssa$i = $add6$i;
        $fs$addr$0$lcssa$i = $fs$addr$0$i;
        $i$0$lcssa$i = $inc$i;
        break;
       }
      }
     } else {
      $cmp1$lcssa$i = $cmp146$i;
      $fl$0$lcssa$i = $shl;
      $fs$addr$0$lcssa$i = $fs$addr$045$i;
      $i$0$lcssa$i = 1;
     }
     if ($cmp1$lcssa$i) {
      $sub16$i = $xor$i - $i$0$lcssa$i | 0;
      $sub17$i = (($qi$1 >>> 31 | 32768) - $fl$0$lcssa$i >> 1) + -1 | 0;
      $sub16$sub17$i = ($sub16$i | 0) < ($sub17$i | 0) ? $sub16$i : $sub17$i;
      $add26$i = $fl$0$lcssa$i + $sub$i + ($sub16$sub17$i << 1 | 1) | 0;
      $fl$1$i = $add26$i;
      $fs$addr$1$i = ($add26$i | 0) != 32768 & 1;
      $qi$2 = $i$0$lcssa$i + $sub$i + $sub16$sub17$i ^ $sub$i;
     } else {
      $add38$i = $fs$addr$0$lcssa$i + 1 | 0;
      $fl$1$i = ($add38$i & ~$sub$i) + $fl$0$lcssa$i | 0;
      $fs$addr$1$i = $add38$i;
      $qi$2 = $qi$1;
     }
     if (($fs$addr$1$i + $fl$1$i | 0) >>> 0 >= 32769) {
      label = 21;
      break L10;
     }
     if (!$fs$addr$1$i) {
      label = 23;
      break L10;
     }
     $shr$i$i = $enc$idx82$val >>> 15;
     if (!$fl$1$i) {
      $fs$addr$2$i5 = $fs$addr$1$i;
      $qi$3 = $qi$2;
      $shr$i$i8 = $shr$i$i;
      label = 26;
     } else {
      $sub2$i$i = $enc$idx82$val - (Math_imul($shr$i$i, 32768 - $fl$1$i | 0) | 0) | 0;
      HEAP32[$val$i$i$i >> 2] = $sub2$i$i + (HEAP32[$val$i$i$i >> 2] | 0);
      $qi$4 = $qi$2;
      $storemerge$i$i = Math_imul($shr$i$i, $fs$addr$1$i) | 0;
     }
    }
    if ((label | 0) == 26) {
     label = 0;
     $qi$4 = $qi$3;
     $storemerge$i$i = $enc$idx82$val - (Math_imul($shr$i$i8, 32768 - $fs$addr$2$i5 | 0) | 0) | 0;
    }
    HEAP32[$enc$idx82 >> 2] = $storemerge$i$i;
    if ($storemerge$i$i >>> 0 < 8388609) {
     $19 = HEAP32[$val$i$i$i >> 2] | 0;
     $41 = $enc$idx$val;
     $42 = $storemerge$i$i;
     do {
      $shr$i$i$i = $19 >>> 23;
      if (($shr$i$i$i | 0) == 255) {
       HEAP32[$ext15$i$i$i$i >> 2] = (HEAP32[$ext15$i$i$i$i >> 2] | 0) + 1;
       $34 = $19;
       $35 = $42;
       $36 = $41;
      } else {
       $shr$i7$i$i$i = $19 >>> 31;
       $20 = HEAP32[$rem$i$i$i$i >> 2] | 0;
       if (($20 | 0) > -1) {
        $21 = HEAP32[$offs$i$i$i$i$i >> 2] | 0;
        if (((HEAP32[$end_offs$i$i$i$i$i >> 2] | 0) + $21 | 0) >>> 0 < (HEAP32[$storage$i$i$i$i$i >> 2] | 0) >>> 0) {
         $24 = HEAP32[$enc >> 2] | 0;
         HEAP32[$offs$i$i$i$i$i >> 2] = $21 + 1;
         HEAP8[$24 + $21 >> 0] = $20 + $shr$i7$i$i$i;
         $retval$0$i$i$i$i$i = 0;
        } else $retval$0$i$i$i$i$i = -1;
        HEAP32[$error$i$i$i$i >> 2] = HEAP32[$error$i$i$i$i >> 2] | $retval$0$i$i$i$i$i;
       }
       $26 = HEAP32[$ext15$i$i$i$i >> 2] | 0;
       if ($26 | 0) {
        $conv$i20$i$i$i$i = $shr$i7$i$i$i + 255 & 255;
        $43 = $26;
        do {
         $27 = HEAP32[$offs$i$i$i$i$i >> 2] | 0;
         if (((HEAP32[$end_offs$i$i$i$i$i >> 2] | 0) + $27 | 0) >>> 0 < (HEAP32[$storage$i$i$i$i$i >> 2] | 0) >>> 0) {
          $30 = HEAP32[$enc >> 2] | 0;
          HEAP32[$offs$i$i$i$i$i >> 2] = $27 + 1;
          HEAP8[$30 + $27 >> 0] = $conv$i20$i$i$i$i;
          $32 = HEAP32[$ext15$i$i$i$i >> 2] | 0;
          $retval$0$i25$i$i$i$i = 0;
         } else {
          $32 = $43;
          $retval$0$i25$i$i$i$i = -1;
         }
         HEAP32[$error$i$i$i$i >> 2] = HEAP32[$error$i$i$i$i >> 2] | $retval$0$i25$i$i$i$i;
         $43 = $32 + -1 | 0;
         HEAP32[$ext15$i$i$i$i >> 2] = $43;
        } while (($43 | 0) != 0);
       }
       HEAP32[$rem$i$i$i$i >> 2] = $shr$i$i$i & 255;
       $34 = HEAP32[$val$i$i$i >> 2] | 0;
       $35 = HEAP32[$enc$idx82 >> 2] | 0;
       $36 = HEAP32[$enc$idx >> 2] | 0;
      }
      $19 = $34 << 8 & 2147483392;
      HEAP32[$val$i$i$i >> 2] = $19;
      $42 = $35 << 8;
      HEAP32[$enc$idx82 >> 2] = $42;
      $41 = $36 + 8 | 0;
      HEAP32[$enc$idx >> 2] = $41;
     } while ($42 >>> 0 < 8388609);
     $qi$5 = $qi$4;
    } else $qi$5 = $qi$4;
   } else {
    if (($sub49 | 0) > 1) {
     $cond120 = ($qi$1 | 0) < 1 ? $qi$1 : 1;
     $spec$select = ($cond120 | 0) > -1 ? $cond120 : -1;
     _ec_enc_icdf($enc, $spec$select << 1 ^ $spec$select >> 31, 49626, 2);
     $qi$5 = $spec$select;
     break;
    }
    if (($sub49 | 0) == 1) {
     $cond147 = ($qi$1 | 0) < 0 ? $qi$1 : 0;
     _ec_enc_bit_logp($enc, 0 - $cond147 | 0, 1);
     $qi$5 = $cond147;
    } else $qi$5 = -1;
   } while (0);
   $conv153 = +($qi$5 | 0);
   $6 = HEAP32[$nbEBands >> 2] | 0;
   $add157 = (Math_imul($6, $c$0) | 0) + $i$087 | 0;
   HEAPF32[$error + ($add157 << 2) >> 2] = $sub18 - $conv153;
   $sub159 = $storemerge - $qi$5 | 0;
   $badness$1 = (($sub159 | 0) > -1 ? $sub159 : 0 - $sub159 | 0) + $badness$1 | 0;
   HEAPF32[$oldEBands + ($add157 << 2) >> 2] = $9 + $mul16 + $conv153;
   HEAPF32[$arrayidx17 >> 2] = $9 + $conv153 - $beta$0 * $conv153;
   $c$0 = $c$0 + 1 | 0;
  } while (($c$0 | 0) < ($C | 0));
  $i$087 = $i$087 + 1 | 0;
  if (($i$087 | 0) == ($end | 0)) {
   $badness$0$lcssa = $badness$1;
   label = 48;
   break;
  } else {
   $$pre = $6;
   $badness$086 = $badness$1;
  }
 }
 if ((label | 0) == 21) _celt_fatal(49267, 49298, 88); else if ((label | 0) == 23) _celt_fatal(49313, 49298, 89); else if ((label | 0) == 48) {
  $tobool179 = ($lfe | 0) == 0;
  $cond183 = $tobool179 ? $badness$0$lcssa : 0;
  STACKTOP = sp;
  return $cond183 | 0;
 }
 return 0;
}

function _pitch_search($x_lp, $y, $len, $max_pitch, $pitch) {
 $x_lp = $x_lp | 0;
 $y = $y | 0;
 $len = $len | 0;
 $max_pitch = $max_pitch | 0;
 $pitch = $pitch | 0;
 var $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $Syy$0$lcssa$i = 0.0, $Syy$0$lcssa$i60 = 0.0, $Syy$057$i = 0.0, $Syy$057$i53 = 0.0, $Syy$150$i = 0.0, $Syy$150$i69 = 0.0, $add = 0, $add$i = 0.0, $add$i56 = 0.0, $add$ptr$us = 0, $add50$i = 0.0, $add50$i95 = 0.0, $arrayidx29 = 0, $arrayidx29$us = 0, $best_den$sroa$0$054$i = 0.0, $best_den$sroa$0$054$i65 = 0.0, $best_den$sroa$0$2$i = 0.0, $best_den$sroa$0$2$i88 = 0.0, $best_den$sroa$6$053$i = 0.0, $best_den$sroa$6$053$i66 = 0.0, $best_den$sroa$6$2$i = 0.0, $best_den$sroa$6$2$i87 = 0.0, $best_num$sroa$0$052$i = 0.0, $best_num$sroa$0$052$i67 = 0.0, $best_num$sroa$0$2$i = 0.0, $best_num$sroa$0$2$i86 = 0.0, $best_num$sroa$6$051$i = 0.0, $best_num$sroa$6$051$i68 = 0.0, $best_num$sroa$6$2$i = 0.0, $best_num$sroa$6$2$i85 = 0.0, $best_pitch$sroa$0$0 = 0, $best_pitch$sroa$0$1 = 0, $best_pitch$sroa$0$3 = 0, $best_pitch$sroa$0$4 = 0, $best_pitch$sroa$0$5117 = 0, $best_pitch$sroa$10$0 = 0, $best_pitch$sroa$10$1 = 0, $cmp27120 = 0, $cmp9125 = 0, $i$0121 = 0, $i$0121$us = 0, $i$055$i = 0, $i$055$i64 = 0, $i$07$i$us = 0, $j$0126 = 0, $j$058$i = 0, $j$058$i52 = 0, $j$1124 = 0, $mul14$i = 0.0, $mul14$i73 = 0.0, $mul15$i = 0.0, $mul15$i74 = 0.0, $mul31 = 0, $mul34 = 0, $mul82 = 0, $offset$1 = 0, $shr118 = 0, $shr22 = 0, $shr4 = 0, $shr40 = 0, $shr47$pre$phiZ2D = 0, $shr6119 = 0, $sub = 0, $sub$us = 0, $sub35 = 0, $sub35$us = 0, $sub83 = 0, $vla = 0, $vla5 = 0, $vla7 = 0, $xy$08$i$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($len | 0) <= 0) _celt_fatal(49510, 49457, 302);
 $add = $max_pitch + $len | 0;
 $shr118 = $len >>> 2;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shr118 << 2) | 0) + 15 & -16) | 0;
 $shr4 = $add >> 2;
 $vla5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shr4 << 2) | 0) + 15 & -16) | 0;
 $shr6119 = $max_pitch >>> 1;
 $vla7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shr6119 << 2) | 0) + 15 & -16) | 0;
 $cmp9125 = ($shr118 | 0) == 0;
 if (!$cmp9125) {
  $j$0126 = 0;
  do {
   HEAP32[$vla + ($j$0126 << 2) >> 2] = HEAP32[$x_lp + ($j$0126 << 1 << 2) >> 2];
   $j$0126 = $j$0126 + 1 | 0;
  } while (($j$0126 | 0) != ($shr118 | 0));
 }
 if (($add | 0) > 3) {
  $j$1124 = 0;
  do {
   HEAP32[$vla5 + ($j$1124 << 2) >> 2] = HEAP32[$y + ($j$1124 << 1 << 2) >> 2];
   $j$1124 = $j$1124 + 1 | 0;
  } while (($j$1124 | 0) < ($shr4 | 0));
 }
 $shr22 = $max_pitch >> 2;
 _celt_pitch_xcorr_c($vla, $vla5, $vla7, $shr118, $shr22);
 if ($cmp9125) $Syy$0$lcssa$i = 1.0; else {
  $Syy$057$i = 1.0;
  $j$058$i = 0;
  while (1) {
   $2 = +HEAPF32[$vla5 + ($j$058$i << 2) >> 2];
   $add$i = $Syy$057$i + $2 * $2;
   $j$058$i = $j$058$i + 1 | 0;
   if (($j$058$i | 0) == ($shr118 | 0)) {
    $Syy$0$lcssa$i = $add$i;
    break;
   } else $Syy$057$i = $add$i;
  }
 }
 $19 = 0;
 $Syy$150$i = $Syy$0$lcssa$i;
 $best_den$sroa$0$054$i = 0.0;
 $best_den$sroa$6$053$i = 0.0;
 $best_num$sroa$0$052$i = -1.0;
 $best_num$sroa$6$051$i = -1.0;
 $best_pitch$sroa$0$0 = 0;
 $best_pitch$sroa$10$0 = 1;
 $i$055$i = 0;
 while (1) {
  $3 = +HEAPF32[$vla7 + ($i$055$i << 2) >> 2];
  if ($3 > 0.0) {
   $mul14$i = $3 * 9.999999960041972e-13;
   $mul15$i = $mul14$i * $mul14$i;
   if ($best_den$sroa$6$053$i * $mul15$i > $best_num$sroa$6$051$i * $Syy$150$i) if ($best_den$sroa$0$054$i * $mul15$i > $best_num$sroa$0$052$i * $Syy$150$i) {
    $20 = $i$055$i;
    $best_den$sroa$0$2$i = $Syy$150$i;
    $best_den$sroa$6$2$i = $best_den$sroa$0$054$i;
    $best_num$sroa$0$2$i = $mul15$i;
    $best_num$sroa$6$2$i = $best_num$sroa$0$052$i;
    $best_pitch$sroa$0$1 = $i$055$i;
    $best_pitch$sroa$10$1 = $19;
   } else {
    $20 = $19;
    $best_den$sroa$0$2$i = $best_den$sroa$0$054$i;
    $best_den$sroa$6$2$i = $Syy$150$i;
    $best_num$sroa$0$2$i = $best_num$sroa$0$052$i;
    $best_num$sroa$6$2$i = $mul15$i;
    $best_pitch$sroa$0$1 = $best_pitch$sroa$0$0;
    $best_pitch$sroa$10$1 = $i$055$i;
   } else {
    $20 = $19;
    $best_den$sroa$0$2$i = $best_den$sroa$0$054$i;
    $best_den$sroa$6$2$i = $best_den$sroa$6$053$i;
    $best_num$sroa$0$2$i = $best_num$sroa$0$052$i;
    $best_num$sroa$6$2$i = $best_num$sroa$6$051$i;
    $best_pitch$sroa$0$1 = $best_pitch$sroa$0$0;
    $best_pitch$sroa$10$1 = $best_pitch$sroa$10$0;
   }
  } else {
   $20 = $19;
   $best_den$sroa$0$2$i = $best_den$sroa$0$054$i;
   $best_den$sroa$6$2$i = $best_den$sroa$6$053$i;
   $best_num$sroa$0$2$i = $best_num$sroa$0$052$i;
   $best_num$sroa$6$2$i = $best_num$sroa$6$051$i;
   $best_pitch$sroa$0$1 = $best_pitch$sroa$0$0;
   $best_pitch$sroa$10$1 = $best_pitch$sroa$10$0;
  }
  $4 = +HEAPF32[$vla5 + ($i$055$i + $shr118 << 2) >> 2];
  $5 = +HEAPF32[$vla5 + ($i$055$i << 2) >> 2];
  $add50$i = $Syy$150$i + ($4 * $4 - $5 * $5);
  $i$055$i = $i$055$i + 1 | 0;
  if (($i$055$i | 0) == ($shr22 | 0)) break; else {
   $19 = $20;
   $Syy$150$i = $add50$i < 1.0 ? 1.0 : $add50$i;
   $best_den$sroa$0$054$i = $best_den$sroa$0$2$i;
   $best_den$sroa$6$053$i = $best_den$sroa$6$2$i;
   $best_num$sroa$0$052$i = $best_num$sroa$0$2$i;
   $best_num$sroa$6$051$i = $best_num$sroa$6$2$i;
   $best_pitch$sroa$0$0 = $best_pitch$sroa$0$1;
   $best_pitch$sroa$10$0 = $best_pitch$sroa$10$1;
  }
 }
 $cmp27120 = ($shr6119 | 0) == 0;
 L27 : do if ($cmp27120) $shr47$pre$phiZ2D = $len >> 1; else {
  $mul31 = $best_pitch$sroa$0$1 << 1;
  $mul34 = $best_pitch$sroa$10$1 << 1;
  $shr40 = $len >> 1;
  if (($len | 0) <= 1) {
   $i$0121 = 0;
   while (1) {
    $arrayidx29 = $vla7 + ($i$0121 << 2) | 0;
    HEAPF32[$arrayidx29 >> 2] = 0.0;
    $sub = $i$0121 - $mul31 | 0;
    if (((($sub | 0) > -1 ? $sub : 0 - $sub | 0) | 0) > 2) {
     $sub35 = $i$0121 - $mul34 | 0;
     if (((($sub35 | 0) > -1 ? $sub35 : 0 - $sub35 | 0) | 0) <= 2) label = 31;
    } else label = 31;
    if ((label | 0) == 31) {
     label = 0;
     HEAPF32[$arrayidx29 >> 2] = 0.0;
    }
    $i$0121 = $i$0121 + 1 | 0;
    if (($i$0121 | 0) == ($shr6119 | 0)) {
     $shr47$pre$phiZ2D = $shr40;
     break L27;
    }
   }
  }
  $i$0121$us = 0;
  do {
   $arrayidx29$us = $vla7 + ($i$0121$us << 2) | 0;
   HEAPF32[$arrayidx29$us >> 2] = 0.0;
   $sub$us = $i$0121$us - $mul31 | 0;
   if (((($sub$us | 0) > -1 ? $sub$us : 0 - $sub$us | 0) | 0) > 2) {
    $sub35$us = $i$0121$us - $mul34 | 0;
    if (((($sub35$us | 0) > -1 ? $sub35$us : 0 - $sub35$us | 0) | 0) <= 2) label = 25;
   } else label = 25;
   if ((label | 0) == 25) {
    label = 0;
    $add$ptr$us = $y + ($i$0121$us << 2) | 0;
    $i$07$i$us = 0;
    $xy$08$i$us = 0.0;
    do {
     $xy$08$i$us = $xy$08$i$us + +HEAPF32[$x_lp + ($i$07$i$us << 2) >> 2] * +HEAPF32[$add$ptr$us + ($i$07$i$us << 2) >> 2];
     $i$07$i$us = $i$07$i$us + 1 | 0;
    } while (($i$07$i$us | 0) != ($shr40 | 0));
    HEAPF32[$arrayidx29$us >> 2] = $xy$08$i$us < -1.0 ? -1.0 : $xy$08$i$us;
   }
   $i$0121$us = $i$0121$us + 1 | 0;
  } while (($i$0121$us | 0) != ($shr6119 | 0));
  $shr47$pre$phiZ2D = $shr40;
 } while (0);
 if (($len | 0) > 1) {
  $Syy$057$i53 = 1.0;
  $j$058$i52 = 0;
  while (1) {
   $12 = +HEAPF32[$y + ($j$058$i52 << 2) >> 2];
   $add$i56 = $Syy$057$i53 + $12 * $12;
   $j$058$i52 = $j$058$i52 + 1 | 0;
   if (($j$058$i52 | 0) == ($shr47$pre$phiZ2D | 0)) {
    $Syy$0$lcssa$i60 = $add$i56;
    break;
   } else $Syy$057$i53 = $add$i56;
  }
 } else $Syy$0$lcssa$i60 = 1.0;
 if ($cmp27120) {
  $best_pitch$sroa$0$5117 = 0;
  $offset$1 = 0;
  $mul82 = $best_pitch$sroa$0$5117 << 1;
  $sub83 = $mul82 - $offset$1 | 0;
  HEAP32[$pitch >> 2] = $sub83;
  STACKTOP = sp;
  return;
 }
 $Syy$150$i69 = $Syy$0$lcssa$i60;
 $best_den$sroa$0$054$i65 = 0.0;
 $best_den$sroa$6$053$i66 = 0.0;
 $best_num$sroa$0$052$i67 = -1.0;
 $best_num$sroa$6$051$i68 = -1.0;
 $best_pitch$sroa$0$3 = 0;
 $i$055$i64 = 0;
 while (1) {
  $13 = +HEAPF32[$vla7 + ($i$055$i64 << 2) >> 2];
  if ($13 > 0.0) {
   $mul14$i73 = $13 * 9.999999960041972e-13;
   $mul15$i74 = $mul14$i73 * $mul14$i73;
   if ($best_den$sroa$6$053$i66 * $mul15$i74 > $best_num$sroa$6$051$i68 * $Syy$150$i69) if ($best_den$sroa$0$054$i65 * $mul15$i74 > $best_num$sroa$0$052$i67 * $Syy$150$i69) {
    $best_den$sroa$0$2$i88 = $Syy$150$i69;
    $best_den$sroa$6$2$i87 = $best_den$sroa$0$054$i65;
    $best_num$sroa$0$2$i86 = $mul15$i74;
    $best_num$sroa$6$2$i85 = $best_num$sroa$0$052$i67;
    $best_pitch$sroa$0$4 = $i$055$i64;
   } else {
    $best_den$sroa$0$2$i88 = $best_den$sroa$0$054$i65;
    $best_den$sroa$6$2$i87 = $Syy$150$i69;
    $best_num$sroa$0$2$i86 = $best_num$sroa$0$052$i67;
    $best_num$sroa$6$2$i85 = $mul15$i74;
    $best_pitch$sroa$0$4 = $best_pitch$sroa$0$3;
   } else {
    $best_den$sroa$0$2$i88 = $best_den$sroa$0$054$i65;
    $best_den$sroa$6$2$i87 = $best_den$sroa$6$053$i66;
    $best_num$sroa$0$2$i86 = $best_num$sroa$0$052$i67;
    $best_num$sroa$6$2$i85 = $best_num$sroa$6$051$i68;
    $best_pitch$sroa$0$4 = $best_pitch$sroa$0$3;
   }
  } else {
   $best_den$sroa$0$2$i88 = $best_den$sroa$0$054$i65;
   $best_den$sroa$6$2$i87 = $best_den$sroa$6$053$i66;
   $best_num$sroa$0$2$i86 = $best_num$sroa$0$052$i67;
   $best_num$sroa$6$2$i85 = $best_num$sroa$6$051$i68;
   $best_pitch$sroa$0$4 = $best_pitch$sroa$0$3;
  }
  $14 = +HEAPF32[$y + ($i$055$i64 + $shr47$pre$phiZ2D << 2) >> 2];
  $15 = +HEAPF32[$y + ($i$055$i64 << 2) >> 2];
  $add50$i95 = $Syy$150$i69 + ($14 * $14 - $15 * $15);
  $i$055$i64 = $i$055$i64 + 1 | 0;
  if (($i$055$i64 | 0) == ($shr6119 | 0)) break; else {
   $Syy$150$i69 = $add50$i95 < 1.0 ? 1.0 : $add50$i95;
   $best_den$sroa$0$054$i65 = $best_den$sroa$0$2$i88;
   $best_den$sroa$6$053$i66 = $best_den$sroa$6$2$i87;
   $best_num$sroa$0$052$i67 = $best_num$sroa$0$2$i86;
   $best_num$sroa$6$051$i68 = $best_num$sroa$6$2$i85;
   $best_pitch$sroa$0$3 = $best_pitch$sroa$0$4;
  }
 }
 if (!(($best_pitch$sroa$0$4 | 0) > 0 & ($best_pitch$sroa$0$4 | 0) < ($shr6119 + -1 | 0))) {
  $best_pitch$sroa$0$5117 = $best_pitch$sroa$0$4;
  $offset$1 = 0;
  $mul82 = $best_pitch$sroa$0$5117 << 1;
  $sub83 = $mul82 - $offset$1 | 0;
  HEAP32[$pitch >> 2] = $sub83;
  STACKTOP = sp;
  return;
 }
 $16 = +HEAPF32[$vla7 + ($best_pitch$sroa$0$4 + -1 << 2) >> 2];
 $17 = +HEAPF32[$vla7 + ($best_pitch$sroa$0$4 << 2) >> 2];
 $18 = +HEAPF32[$vla7 + ($best_pitch$sroa$0$4 + 1 << 2) >> 2];
 if ($18 - $16 > ($17 - $16) * .699999988079071) {
  $best_pitch$sroa$0$5117 = $best_pitch$sroa$0$4;
  $offset$1 = 1;
  $mul82 = $best_pitch$sroa$0$5117 << 1;
  $sub83 = $mul82 - $offset$1 | 0;
  HEAP32[$pitch >> 2] = $sub83;
  STACKTOP = sp;
  return;
 }
 $best_pitch$sroa$0$5117 = $best_pitch$sroa$0$4;
 $offset$1 = ($16 - $18 > ($17 - $18) * .699999988079071) << 31 >> 31;
 $mul82 = $best_pitch$sroa$0$5117 << 1;
 $sub83 = $mul82 - $offset$1 | 0;
 HEAP32[$pitch >> 2] = $sub83;
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$pre135 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $19 = 0, $21 = 0, $26 = 0, $29 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $conv132$pre$phi138Z2D = 0, $conv132$pre$phiZ2D = 0, $conv152 = 0, $conv38 = 0, $conv99 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr137 = 0, $incdec$ptr163 = 0, $incdec$ptr165 = 0, $incdec$ptr180 = 0, $incdec$ptr67 = 0, $incdec$ptr78 = 0, $or168 = 0, $or183 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$0102 = 0, $s$1 = 0, $s$1$ph = 0, $s$10 = 0, $s$11147 = 0, $s$11148 = 0, $s$119194 = 0, $s$2123 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6$lcssa = 0, $s$6$ph = 0, $s$6116 = 0, $s$7106 = 0, $s$8 = 0, $s$8$ph = 0, $s$8141 = 0, $s$9 = 0, $s$9$sink = 0, $sub100 = 0, $sub133$pre$phiZ2D = 0, $sub143 = 0, $sub173 = 0, $sub188 = 0, $sub36 = 0, $sub47 = 0, $tobool7 = 0, $wn$addr$0100 = 0, $wn$addr$1 = 0, $wn$addr$1$ph = 0, $wn$addr$2122 = 0, $wn$addr$3 = 0, $wn$addr$4 = 0, $wn$addr$5$ph = 0, $wn$addr$5114 = 0, $wn$addr$6104 = 0, $wn$addr$7 = 0, $wn$addr$7$ph = 0, $wn$addr$7139 = 0, $wn$addr$8 = 0, $wn$addr$9 = 0, $wn$addr$9144 = 0, $ws$addr$0101 = 0, $ws$addr$1$ph = 0, $ws$addr$1115 = 0, $ws$addr$2105 = 0, $ws$addr$3 = 0, $ws$addr$3$ph = 0, $ws$addr$3140 = 0, $ws$addr$4 = 0, $ws$addr$5 = 0, $ws$addr$5145 = 0, $ws$addr$5146 = 0, label = 0, $s$7106$looptemp = 0, $ws$addr$2105$looptemp = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $1 = HEAP32[$st >> 2] | 0;
  if (!$1) label = 5; else if (!$ws) {
   $c$2 = $1;
   $s$4 = $0;
   $wn$addr$4 = $wn;
   label = 25;
  } else {
   HEAP32[$st >> 2] = 0;
   $c$4 = $1;
   $s$9 = $0;
   $wn$addr$8 = $wn;
   $ws$addr$4 = $ws;
   label = 46;
  }
 }
 L5 : do if ((label | 0) == 5) {
  $tobool7 = ($ws | 0) != 0;
  if (HEAP32[HEAP32[11892] >> 2] | 0) if ($tobool7) {
   $s$6$ph = $0;
   $wn$addr$5$ph = $wn;
   $ws$addr$1$ph = $ws;
   label = 32;
   break;
  } else {
   $s$1$ph = $0;
   $wn$addr$1$ph = $wn;
   label = 15;
   break;
  }
  if (!$tobool7) {
   $retval$0 = _strlen($0) | 0;
   label = 62;
   break;
  }
  L13 : do if (!$wn) $s$0$lcssa = $0; else {
   $s$0102 = $0;
   $wn$addr$0100 = $wn;
   $ws$addr$0101 = $ws;
   while (1) {
    $4 = HEAP8[$s$0102 >> 0] | 0;
    if (!($4 << 24 >> 24)) break;
    $incdec$ptr = $s$0102 + 1 | 0;
    HEAP32[$ws$addr$0101 >> 2] = $4 << 24 >> 24 & 57343;
    $dec = $wn$addr$0100 + -1 | 0;
    if (!$dec) {
     $s$0$lcssa = $incdec$ptr;
     break L13;
    } else {
     $s$0102 = $incdec$ptr;
     $wn$addr$0100 = $dec;
     $ws$addr$0101 = $ws$addr$0101 + 4 | 0;
    }
   }
   HEAP32[$ws$addr$0101 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
   $retval$0 = $wn - $wn$addr$0100 | 0;
   label = 62;
   break L5;
  } while (0);
  HEAP32[$src >> 2] = $s$0$lcssa;
  $retval$0 = $wn;
  label = 62;
 } while (0);
 L20 : while (1) {
  L21 : do if ((label | 0) == 15) {
   label = 0;
   $s$1 = $s$1$ph;
   $wn$addr$1 = $wn$addr$1$ph;
   while (1) {
    $5 = HEAP8[$s$1 >> 0] | 0;
    if ((($5 & 255) + -1 | 0) >>> 0 < 127) if (!($s$1 & 3)) {
     $7 = HEAP32[$s$1 >> 2] | 0;
     $8 = $7 & 255;
     if (!(($7 + -16843009 | $7) & -2139062144)) {
      $s$2123 = $s$1;
      $wn$addr$2122 = $wn$addr$1;
      while (1) {
       $add$ptr = $s$2123 + 4 | 0;
       $sub36 = $wn$addr$2122 + -4 | 0;
       $9 = HEAP32[$add$ptr >> 2] | 0;
       if (!(($9 + -16843009 | $9) & -2139062144)) {
        $s$2123 = $add$ptr;
        $wn$addr$2122 = $sub36;
       } else {
        $11 = $9 & 255;
        $s$3 = $add$ptr;
        $wn$addr$3 = $sub36;
        break;
       }
      }
     } else {
      $11 = $8;
      $s$3 = $s$1;
      $wn$addr$3 = $wn$addr$1;
     }
    } else {
     $11 = $5;
     $s$3 = $s$1;
     $wn$addr$3 = $wn$addr$1;
    } else {
     $11 = $5;
     $s$3 = $s$1;
     $wn$addr$3 = $wn$addr$1;
    }
    $conv38 = $11 & 255;
    if (($conv38 + -1 | 0) >>> 0 >= 127) break;
    $s$1 = $s$3 + 1 | 0;
    $wn$addr$1 = $wn$addr$3 + -1 | 0;
   }
   $sub47 = $conv38 + -194 | 0;
   if ($sub47 >>> 0 > 50) {
    $32 = $11;
    $s$11147 = $s$3;
    $wn$addr$9144 = $wn$addr$3;
    $ws$addr$5145 = $ws;
    label = 56;
   } else {
    $c$2 = HEAP32[36480 + ($sub47 << 2) >> 2] | 0;
    $s$4 = $s$3 + 1 | 0;
    $wn$addr$4 = $wn$addr$3;
    label = 25;
    continue L20;
   }
  } else if ((label | 0) == 25) {
   label = 0;
   $14 = (HEAPU8[$s$4 >> 0] | 0) >>> 3;
   if (($14 + -16 | $14 + ($c$2 >> 26)) >>> 0 > 7) {
    $c$6 = $c$2;
    $s$9$sink = $s$4;
    $wn$addr$9 = $wn$addr$4;
    $ws$addr$5 = $ws;
    label = 54;
   } else {
    $incdec$ptr67 = $s$4 + 1 | 0;
    if (!($c$2 & 33554432)) $s$5 = $incdec$ptr67; else {
     if ((HEAP8[$incdec$ptr67 >> 0] & -64) << 24 >> 24 != -128) {
      $c$6 = $c$2;
      $s$9$sink = $s$4;
      $wn$addr$9 = $wn$addr$4;
      $ws$addr$5 = $ws;
      label = 54;
      break;
     }
     $incdec$ptr78 = $s$4 + 2 | 0;
     if (!($c$2 & 524288)) $s$5 = $incdec$ptr78; else {
      if ((HEAP8[$incdec$ptr78 >> 0] & -64) << 24 >> 24 != -128) {
       $c$6 = $c$2;
       $s$9$sink = $s$4;
       $wn$addr$9 = $wn$addr$4;
       $ws$addr$5 = $ws;
       label = 54;
       break;
      }
      $s$5 = $s$4 + 3 | 0;
     }
    }
    $s$1$ph = $s$5;
    $wn$addr$1$ph = $wn$addr$4 + -1 | 0;
    label = 15;
    continue L20;
   }
  } else if ((label | 0) == 32) {
   label = 0;
   L23 : do if (!$wn$addr$5$ph) $s$6$lcssa = $s$6$ph; else {
    $s$6116 = $s$6$ph;
    $wn$addr$5114 = $wn$addr$5$ph;
    $ws$addr$1115 = $ws$addr$1$ph;
    while (1) {
     $19 = HEAP8[$s$6116 >> 0] | 0;
     $conv99 = $19 & 255;
     $sub100 = $conv99 + -1 | 0;
     if ($sub100 >>> 0 < 127) if (($s$6116 & 3 | 0) == 0 & $wn$addr$5114 >>> 0 > 4) {
      $s$7106 = $s$6116;
      $wn$addr$6104 = $wn$addr$5114;
      $ws$addr$2105 = $ws$addr$1115;
      while (1) {
       $21 = HEAP32[$s$7106 >> 2] | 0;
       if (($21 + -16843009 | $21) & -2139062144 | 0) {
        $26 = $21 & 255;
        $s$8$ph = $s$7106;
        $wn$addr$7$ph = $wn$addr$6104;
        $ws$addr$3$ph = $ws$addr$2105;
        break;
       }
       HEAP32[$ws$addr$2105 >> 2] = $21 & 255;
       HEAP32[$ws$addr$2105 + 4 >> 2] = HEAPU8[$s$7106 + 1 >> 0];
       HEAP32[$ws$addr$2105 + 8 >> 2] = HEAPU8[$s$7106 + 2 >> 0];
       $s$7106$looptemp = $s$7106;
       $s$7106 = $s$7106 + 4 | 0;
       $ws$addr$2105$looptemp = $ws$addr$2105;
       $ws$addr$2105 = $ws$addr$2105 + 16 | 0;
       HEAP32[$ws$addr$2105$looptemp + 12 >> 2] = HEAPU8[$s$7106$looptemp + 3 >> 0];
       $wn$addr$6104 = $wn$addr$6104 + -4 | 0;
       if ($wn$addr$6104 >>> 0 <= 4) {
        label = 40;
        break;
       }
      }
      if ((label | 0) == 40) {
       label = 0;
       $26 = HEAP8[$s$7106 >> 0] | 0;
       $s$8$ph = $s$7106;
       $wn$addr$7$ph = $wn$addr$6104;
       $ws$addr$3$ph = $ws$addr$2105;
      }
      $$pre135 = $26 & 255;
      $33 = $26;
      $conv132$pre$phiZ2D = $$pre135;
      $s$8 = $s$8$ph;
      $sub133$pre$phiZ2D = $$pre135 + -1 | 0;
      $wn$addr$7 = $wn$addr$7$ph;
      $ws$addr$3 = $ws$addr$3$ph;
      label = 42;
     } else {
      $conv132$pre$phi138Z2D = $conv99;
      $s$8141 = $s$6116;
      $wn$addr$7139 = $wn$addr$5114;
      $ws$addr$3140 = $ws$addr$1115;
     } else {
      $33 = $19;
      $conv132$pre$phiZ2D = $conv99;
      $s$8 = $s$6116;
      $sub133$pre$phiZ2D = $sub100;
      $wn$addr$7 = $wn$addr$5114;
      $ws$addr$3 = $ws$addr$1115;
      label = 42;
     }
     if ((label | 0) == 42) {
      label = 0;
      if ($sub133$pre$phiZ2D >>> 0 < 127) {
       $conv132$pre$phi138Z2D = $conv132$pre$phiZ2D;
       $s$8141 = $s$8;
       $wn$addr$7139 = $wn$addr$7;
       $ws$addr$3140 = $ws$addr$3;
      } else break;
     }
     $incdec$ptr137 = $s$8141 + 1 | 0;
     HEAP32[$ws$addr$3140 >> 2] = $conv132$pre$phi138Z2D;
     $wn$addr$5114 = $wn$addr$7139 + -1 | 0;
     if (!$wn$addr$5114) {
      $s$6$lcssa = $incdec$ptr137;
      break L23;
     } else {
      $s$6116 = $incdec$ptr137;
      $ws$addr$1115 = $ws$addr$3140 + 4 | 0;
     }
    }
    $sub143 = $conv132$pre$phiZ2D + -194 | 0;
    if ($sub143 >>> 0 > 50) {
     $32 = $33;
     $s$11147 = $s$8;
     $wn$addr$9144 = $wn$addr$7;
     $ws$addr$5145 = $ws$addr$3;
     label = 56;
     break L21;
    }
    $c$4 = HEAP32[36480 + ($sub143 << 2) >> 2] | 0;
    $s$9 = $s$8 + 1 | 0;
    $wn$addr$8 = $wn$addr$7;
    $ws$addr$4 = $ws$addr$3;
    label = 46;
    continue L20;
   } while (0);
   HEAP32[$src >> 2] = $s$6$lcssa;
   $retval$0 = $wn;
   label = 62;
   continue L20;
  } else if ((label | 0) == 46) {
   label = 0;
   $conv152 = HEAPU8[$s$9 >> 0] | 0;
   $29 = $conv152 >>> 3;
   if (($29 + -16 | $29 + ($c$4 >> 26)) >>> 0 > 7) {
    $c$6 = $c$4;
    $s$9$sink = $s$9;
    $wn$addr$9 = $wn$addr$8;
    $ws$addr$5 = $ws$addr$4;
    label = 54;
   } else {
    $incdec$ptr165 = $s$9 + 1 | 0;
    $or168 = $conv152 + -128 | $c$4 << 6;
    do if (($or168 | 0) < 0) {
     $sub173 = (HEAPU8[$incdec$ptr165 >> 0] | 0) + -128 | 0;
     if ($sub173 >>> 0 <= 63) {
      $incdec$ptr180 = $s$9 + 2 | 0;
      $or183 = $sub173 | $or168 << 6;
      if (($or183 | 0) >= 0) {
       $c$5 = $or183;
       $s$10 = $incdec$ptr180;
       break;
      }
      $sub188 = (HEAPU8[$incdec$ptr180 >> 0] | 0) + -128 | 0;
      if ($sub188 >>> 0 <= 63) {
       $c$5 = $sub188 | $or183 << 6;
       $s$10 = $s$9 + 3 | 0;
       break;
      }
     }
     HEAP32[16056] = 25;
     $s$119194 = $s$9 + -1 | 0;
     break L21;
    } else {
     $c$5 = $or168;
     $s$10 = $incdec$ptr165;
    } while (0);
    HEAP32[$ws$addr$4 >> 2] = $c$5;
    $s$6$ph = $s$10;
    $wn$addr$5$ph = $wn$addr$8 + -1 | 0;
    $ws$addr$1$ph = $ws$addr$4 + 4 | 0;
    label = 32;
    continue L20;
   }
  } else if ((label | 0) == 62) {
   label = 0;
   return $retval$0 | 0;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   $incdec$ptr163 = $s$9$sink + -1 | 0;
   if (!$c$6) {
    $32 = HEAP8[$incdec$ptr163 >> 0] | 0;
    $s$11147 = $incdec$ptr163;
    $wn$addr$9144 = $wn$addr$9;
    $ws$addr$5145 = $ws$addr$5;
    label = 56;
   } else {
    $s$11148 = $incdec$ptr163;
    $ws$addr$5146 = $ws$addr$5;
    label = 60;
   }
  }
  if ((label | 0) == 56) {
   label = 0;
   if (!($32 << 24 >> 24)) {
    if ($ws$addr$5145 | 0) {
     HEAP32[$ws$addr$5145 >> 2] = 0;
     HEAP32[$src >> 2] = 0;
    }
    $retval$0 = $wn - $wn$addr$9144 | 0;
    label = 62;
    continue;
   } else {
    $s$11148 = $s$11147;
    $ws$addr$5146 = $ws$addr$5145;
    label = 60;
   }
  }
  if ((label | 0) == 60) {
   label = 0;
   HEAP32[16056] = 25;
   if (!$ws$addr$5146) {
    $retval$0 = -1;
    label = 62;
    continue;
   } else $s$119194 = $s$11148;
  }
  HEAP32[$src >> 2] = $s$119194;
  $retval$0 = -1;
  label = 62;
 }
 return 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd635 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  if ((HEAP32[16416] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $19 = HEAP32[$head201 >> 2] | 0;
   if (($19 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[16413] = $add6;
   HEAP32[$head201 >> 2] = $19 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $3 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $4 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   if (($4 | 0) == ($3 | 0)) {
    HEAP32[16411] = HEAP32[16411] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   } else {
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$4 + 8 >> 2] = $3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
  $6 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $7 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($7 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $9 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$9) {
    $10 = HEAP32[$child >> 2] | 0;
    if (!$10) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $10;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $9;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $11 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$11) {
     $arrayidx100 = $R$1 + 16 | 0;
     $12 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$12) break; else {
      $R$1$be = $12;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $11;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   HEAP32[$RP$1 >> 2] = 0;
   $R$3 = $R$1;
  } else {
   $8 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   HEAP32[$8 + 12 >> 2] = $7;
   HEAP32[$7 + 8 >> 2] = $8;
   $R$3 = $7;
  } while (0);
  if (!$6) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $13 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 65948 + ($13 << 2) | 0;
   if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[16412] = HEAP32[16412] & ~(1 << $13);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break;
    }
   } else {
    $arrayidx138 = $6 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $6 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break;
    }
   }
   HEAP32[$R$3 + 24 >> 2] = $6;
   $child161 = $add$ptr5 + 16 | 0;
   $17 = HEAP32[$child161 >> 2] | 0;
   if ($17 | 0) {
    HEAP32[$R$3 + 16 >> 2] = $17;
    HEAP32[$17 + 24 >> 2] = $R$3;
   }
   $18 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$18) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else {
    HEAP32[$R$3 + 20 >> 2] = $18;
    HEAP32[$18 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $head223 = $add$ptr + 4 | 0;
 $20 = HEAP32[$head223 >> 2] | 0;
 if (!($20 & 2)) {
  if ((HEAP32[16417] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[16414] | 0) + $psize$addr$1 | 0;
   HEAP32[16414] = $add230;
   HEAP32[16417] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[16416] | 0)) return;
   HEAP32[16416] = 0;
   HEAP32[16413] = 0;
   return;
  }
  if ((HEAP32[16416] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[16413] | 0) + $psize$addr$1 | 0;
   HEAP32[16413] = $add248;
   HEAP32[16416] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($20 & -8) + $psize$addr$1 | 0;
  $shr259 = $20 >>> 3;
  do if ($20 >>> 0 < 256) {
   $26 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $27 = HEAP32[$add$ptr + 12 >> 2] | 0;
   if (($27 | 0) == ($26 | 0)) {
    HEAP32[16411] = HEAP32[16411] & ~(1 << $shr259);
    break;
   } else {
    HEAP32[$26 + 12 >> 2] = $27;
    HEAP32[$27 + 8 >> 2] = $26;
    break;
   }
  } else {
   $29 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $30 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($30 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $32 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$32) {
     $33 = HEAP32[$child358 >> 2] | 0;
     if (!$33) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $33;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $32;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $34 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$34) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $35 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$35) break; else {
       $R328$1$be = $35;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $34;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    HEAP32[$RP357$1 >> 2] = 0;
    $R328$3 = $R328$1;
   } else {
    $31 = HEAP32[$add$ptr + 8 >> 2] | 0;
    HEAP32[$31 + 12 >> 2] = $30;
    HEAP32[$30 + 8 >> 2] = $31;
    $R328$3 = $30;
   } while (0);
   if ($29 | 0) {
    $36 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 65948 + ($36 << 2) | 0;
    if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[16412] = HEAP32[16412] & ~(1 << $36);
      break;
     }
    } else {
     $arrayidx420 = $29 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $29 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break;
    }
    HEAP32[$R328$3 + 24 >> 2] = $29;
    $child445 = $add$ptr + 16 | 0;
    $40 = HEAP32[$child445 >> 2] | 0;
    if ($40 | 0) {
     HEAP32[$R328$3 + 16 >> 2] = $40;
     HEAP32[$40 + 24 >> 2] = $R328$3;
    }
    $41 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($41 | 0) {
     HEAP32[$R328$3 + 20 >> 2] = $41;
     HEAP32[$41 + 24 >> 2] = $R328$3;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[16416] | 0)) {
   HEAP32[16413] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $20 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 65684 + ($shr507 << 1 << 2) | 0;
  $43 = HEAP32[16411] | 0;
  $shl519 = 1 << $shr507;
  if (!($43 & $shl519)) {
   HEAP32[16411] = $43 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $44 = $arrayidx516 + 8 | 0;
   $$pre$phiZ2D = $44;
   $F517$0 = HEAP32[$44 >> 2] | 0;
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 65948 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $46 = HEAP32[16412] | 0;
 $shl586 = 1 << $I545$0;
 if (!($46 & $shl586)) {
  HEAP32[16412] = $46 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579 >> 2] | 0;
 L104 : do if ((HEAP32[$47 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $47; else {
  $K597$010 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$09 = $47;
  while (1) {
   $arrayidx613 = $T$09 + 16 + ($K597$010 >>> 31 << 2) | 0;
   $49 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$49) break;
   if ((HEAP32[$49 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $49;
    break L104;
   } else {
    $K597$010 = $K597$010 << 1;
    $T$09 = $49;
   }
  }
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$09;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $51 = HEAP32[$fd635 >> 2] | 0;
 HEAP32[$51 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $51;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function _quant_coarse_energy($m, $start, $end, $effEnd, $eBands, $oldEBands, $budget, $error, $enc, $C, $LM, $nbAvailableBytes, $force_intra, $delayedIntra, $two_pass, $loss_rate, $lfe) {
 $m = $m | 0;
 $start = $start | 0;
 $end = $end | 0;
 $effEnd = $effEnd | 0;
 $eBands = $eBands | 0;
 $oldEBands = $oldEBands | 0;
 $budget = $budget | 0;
 $error = $error | 0;
 $enc = $enc | 0;
 $C = $C | 0;
 $LM = $LM | 0;
 $nbAvailableBytes = $nbAvailableBytes | 0;
 $force_intra = $force_intra | 0;
 $delayedIntra = $delayedIntra | 0;
 $two_pass = $two_pass | 0;
 $loss_rate = $loss_rate | 0;
 $lfe = $lfe | 0;
 var $12 = 0, $15 = 0, $17 = 0, $2 = 0, $24 = 0.0, $6 = 0, $7 = 0, $add$ptr = 0, $add$us$i = 0, $badness1$0 = 0, $c$0$us$i = 0, $call71 = 0, $cmp16 = 0, $cond$i = 0.0, $conv14 = 0, $dist$0$us$i = 0.0, $dist$1$lcssa$lcssa$i = 0.0, $dist$116$us$i = 0.0, $enc$idx = 0, $enc$idx104 = 0, $enc_intra_state$sroa$0$0$copyload = 0, $enc_intra_state$sroa$5 = 0, $enc_intra_state$sroa$5$0$$sroa_idx = 0, $enc_intra_state$sroa$5115$0$copyload = 0, $enc_intra_state$sroa$6 = 0, $enc_start_state$sroa$0 = 0, $enc_start_state$sroa$4$0$$sroa_idx135 = 0, $enc_start_state$sroa$4$0$copyload = 0, $enc_start_state$sroa$5 = 0, $i$015$us$i = 0, $mul$us$i = 0, $mul112 = 0, $mul23 = 0.0, $mul33 = 0, $mul35 = 0, $mul93 = 0, $nbEBands = 0, $shr$i = 0, $shr$i7 = 0, $shr3$i = 0, $shr3$i8 = 0, $spec$select = 0, $spec$select102 = 0, $spec$select103 = 0.0, $storemerge = 0.0, $sub = 0, $sub$i = 0, $sub$i5 = 0, $sub$us$i = 0.0, $sub1$i = 0, $sub54 = 0, $sub7$i = 0, $vla = 0, $vla36 = 0, $vla60 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $enc_start_state$sroa$0 = sp + 72 | 0;
 $enc_start_state$sroa$5 = sp + 48 | 0;
 $enc_intra_state$sroa$5 = sp + 24 | 0;
 $enc_intra_state$sroa$6 = sp;
 if (!$force_intra) if (!$two_pass) {
  $sub = $end - $start | 0;
  if (+HEAPF32[$delayedIntra >> 2] > +(Math_imul($sub << 1, $C) | 0)) $6 = (Math_imul($sub, $C) | 0) < ($nbAvailableBytes | 0) & 1; else $6 = 0;
 } else $6 = 0; else $6 = 1;
 $conv14 = ~~(+HEAPF32[$delayedIntra >> 2] * +($budget >>> 0) * +($loss_rate | 0) / +($C << 9 | 0));
 $nbEBands = $m + 8 | 0;
 $2 = HEAP32[$nbEBands >> 2] | 0;
 if (($start | 0) < ($effEnd | 0)) {
  $c$0$us$i = 0;
  $dist$0$us$i = 0.0;
  while (1) {
   $mul$us$i = Math_imul($c$0$us$i, $2) | 0;
   $dist$116$us$i = $dist$0$us$i;
   $i$015$us$i = $start;
   do {
    $add$us$i = $i$015$us$i + $mul$us$i | 0;
    $sub$us$i = +HEAPF32[$eBands + ($add$us$i << 2) >> 2] - +HEAPF32[$oldEBands + ($add$us$i << 2) >> 2];
    $dist$116$us$i = $dist$116$us$i + $sub$us$i * $sub$us$i;
    $i$015$us$i = $i$015$us$i + 1 | 0;
   } while (($i$015$us$i | 0) != ($effEnd | 0));
   $c$0$us$i = $c$0$us$i + 1 | 0;
   if (($c$0$us$i | 0) >= ($C | 0)) {
    $dist$1$lcssa$lcssa$i = $dist$116$us$i;
    break;
   } else $dist$0$us$i = $dist$116$us$i;
  }
 } else $dist$1$lcssa$lcssa$i = 0.0;
 $cond$i = $dist$1$lcssa$lcssa$i > 200.0 ? 200.0 : $dist$1$lcssa$lcssa$i;
 $enc$idx = $enc + 20 | 0;
 $enc$idx104 = $enc + 28 | 0;
 $sub1$i = (HEAP32[$enc$idx >> 2] | 0) + -32 + (Math_clz32(HEAP32[$enc$idx104 >> 2] | 0) | 0) | 0;
 $cmp16 = ($sub1$i + 3 | 0) >>> 0 > $budget >>> 0;
 $spec$select = $cmp16 ? 0 : $6;
 $spec$select102 = $cmp16 ? 0 : $two_pass;
 $mul23 = +($nbAvailableBytes | 0) * .125;
 $spec$select103 = ($lfe | 0) == 0 ? (($end - $start | 0) > 10 ? ($mul23 > 16.0 ? 16.0 : $mul23) : 16.0) : 3.0;
 HEAP32[$enc_start_state$sroa$0 >> 2] = HEAP32[$enc >> 2];
 HEAP32[$enc_start_state$sroa$0 + 4 >> 2] = HEAP32[$enc + 4 >> 2];
 HEAP32[$enc_start_state$sroa$0 + 8 >> 2] = HEAP32[$enc + 8 >> 2];
 HEAP32[$enc_start_state$sroa$0 + 12 >> 2] = HEAP32[$enc + 12 >> 2];
 HEAP32[$enc_start_state$sroa$0 + 16 >> 2] = HEAP32[$enc + 16 >> 2];
 HEAP32[$enc_start_state$sroa$0 + 20 >> 2] = HEAP32[$enc + 20 >> 2];
 $enc_start_state$sroa$4$0$$sroa_idx135 = $enc + 24 | 0;
 $enc_start_state$sroa$4$0$copyload = HEAP32[$enc_start_state$sroa$4$0$$sroa_idx135 >> 2] | 0;
 HEAP32[$enc_start_state$sroa$5 >> 2] = HEAP32[$enc$idx104 >> 2];
 HEAP32[$enc_start_state$sroa$5 + 4 >> 2] = HEAP32[$enc$idx104 + 4 >> 2];
 HEAP32[$enc_start_state$sroa$5 + 8 >> 2] = HEAP32[$enc$idx104 + 8 >> 2];
 HEAP32[$enc_start_state$sroa$5 + 12 >> 2] = HEAP32[$enc$idx104 + 12 >> 2];
 HEAP32[$enc_start_state$sroa$5 + 16 >> 2] = HEAP32[$enc$idx104 + 16 >> 2];
 $mul33 = Math_imul($2, $C) | 0;
 $7 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul33 << 2) | 0) + 15 & -16) | 0;
 $mul35 = Math_imul(HEAP32[$nbEBands >> 2] | 0, $C) | 0;
 $vla36 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul35 << 2) | 0) + 15 & -16) | 0;
 _memcpy($vla | 0, $oldEBands | 0, $mul35 << 2 | 0) | 0;
 if (!($spec$select102 | $spec$select)) $badness1$0 = 0; else $badness1$0 = _quant_coarse_energy_impl($m, $start, $end, $eBands, $vla, $budget, $sub1$i, 20416 + ($LM * 84 | 0) + 42 | 0, $vla36, $enc, $C, $LM, 1, $spec$select103, $lfe) | 0;
 if ($spec$select | 0) {
  $mul112 = $C << 2;
  _memcpy($oldEBands | 0, $vla | 0, Math_imul($mul112, HEAP32[$nbEBands >> 2] | 0) | 0) | 0;
  _memcpy($error | 0, $vla36 | 0, Math_imul($mul112, HEAP32[$nbEBands >> 2] | 0) | 0) | 0;
  $storemerge = $cond$i;
  HEAPF32[$delayedIntra >> 2] = $storemerge;
  _llvm_stackrestore($7 | 0);
  STACKTOP = sp;
  return;
 }
 $12 = HEAP32[$enc$idx104 >> 2] | 0;
 $sub$i = 32 - (Math_clz32($12 | 0) | 0) | 0;
 $shr$i = $12 >>> ($sub$i + -16 | 0);
 $shr3$i = $shr$i >>> 12;
 $sub7$i = (Math_imul($sub$i, -8) | 0) + (HEAP32[$enc$idx >> 2] << 3) + (($shr$i >>> 0 > (HEAP32[5744 + ($shr3$i + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i) | 0;
 $enc_intra_state$sroa$0$0$copyload = HEAP32[$enc >> 2] | 0;
 $enc_intra_state$sroa$5$0$$sroa_idx = $enc + 4 | 0;
 HEAP32[$enc_intra_state$sroa$5 >> 2] = HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx >> 2];
 HEAP32[$enc_intra_state$sroa$5 + 4 >> 2] = HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 4 >> 2];
 HEAP32[$enc_intra_state$sroa$5 + 8 >> 2] = HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 8 >> 2];
 HEAP32[$enc_intra_state$sroa$5 + 12 >> 2] = HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 12 >> 2];
 HEAP32[$enc_intra_state$sroa$5 + 16 >> 2] = HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 16 >> 2];
 $enc_intra_state$sroa$5115$0$copyload = HEAP32[$enc_start_state$sroa$4$0$$sroa_idx135 >> 2] | 0;
 HEAP32[$enc_intra_state$sroa$6 >> 2] = HEAP32[$enc$idx104 >> 2];
 HEAP32[$enc_intra_state$sroa$6 + 4 >> 2] = HEAP32[$enc$idx104 + 4 >> 2];
 HEAP32[$enc_intra_state$sroa$6 + 8 >> 2] = HEAP32[$enc$idx104 + 8 >> 2];
 HEAP32[$enc_intra_state$sroa$6 + 12 >> 2] = HEAP32[$enc$idx104 + 12 >> 2];
 HEAP32[$enc_intra_state$sroa$6 + 16 >> 2] = HEAP32[$enc$idx104 + 16 >> 2];
 $add$ptr = $enc_intra_state$sroa$0$0$copyload + $enc_start_state$sroa$4$0$copyload | 0;
 $sub54 = $enc_intra_state$sroa$5115$0$copyload - $enc_start_state$sroa$4$0$copyload | 0;
 $15 = _llvm_stacksave() | 0;
 $vla60 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($sub54 | 0) == 0 ? 1 : $sub54) | 0) + 15 & -16) | 0;
 _memcpy($vla60 | 0, $add$ptr | 0, $sub54 | 0) | 0;
 HEAP32[$enc >> 2] = HEAP32[$enc_start_state$sroa$0 >> 2];
 HEAP32[$enc + 4 >> 2] = HEAP32[$enc_start_state$sroa$0 + 4 >> 2];
 HEAP32[$enc + 8 >> 2] = HEAP32[$enc_start_state$sroa$0 + 8 >> 2];
 HEAP32[$enc + 12 >> 2] = HEAP32[$enc_start_state$sroa$0 + 12 >> 2];
 HEAP32[$enc + 16 >> 2] = HEAP32[$enc_start_state$sroa$0 + 16 >> 2];
 HEAP32[$enc + 20 >> 2] = HEAP32[$enc_start_state$sroa$0 + 20 >> 2];
 HEAP32[$enc_start_state$sroa$4$0$$sroa_idx135 >> 2] = $enc_start_state$sroa$4$0$copyload;
 HEAP32[$enc$idx104 >> 2] = HEAP32[$enc_start_state$sroa$5 >> 2];
 HEAP32[$enc$idx104 + 4 >> 2] = HEAP32[$enc_start_state$sroa$5 + 4 >> 2];
 HEAP32[$enc$idx104 + 8 >> 2] = HEAP32[$enc_start_state$sroa$5 + 8 >> 2];
 HEAP32[$enc$idx104 + 12 >> 2] = HEAP32[$enc_start_state$sroa$5 + 12 >> 2];
 HEAP32[$enc$idx104 + 16 >> 2] = HEAP32[$enc_start_state$sroa$5 + 16 >> 2];
 $call71 = _quant_coarse_energy_impl($m, $start, $end, $eBands, $oldEBands, $budget, $sub1$i, 20416 + ($LM * 84 | 0) | 0, $error, $enc, $C, $LM, 0, $spec$select103, $lfe) | 0;
 do if ($spec$select102 | 0) {
  if (($badness1$0 | 0) >= ($call71 | 0)) {
   if (($badness1$0 | 0) != ($call71 | 0)) break;
   $17 = HEAP32[$enc$idx104 >> 2] | 0;
   $sub$i5 = 32 - (Math_clz32($17 | 0) | 0) | 0;
   $shr$i7 = $17 >>> ($sub$i5 + -16 | 0);
   $shr3$i8 = $shr$i7 >>> 12;
   if (((Math_imul($sub$i5, -8) | 0) + (HEAP32[$enc$idx >> 2] << 3) + (($shr$i7 >>> 0 > (HEAP32[5744 + ($shr3$i8 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $shr3$i8) + $conv14 | 0) <= ($sub7$i | 0)) break;
  }
  HEAP32[$enc >> 2] = $enc_intra_state$sroa$0$0$copyload;
  HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx >> 2] = HEAP32[$enc_intra_state$sroa$5 >> 2];
  HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 4 >> 2] = HEAP32[$enc_intra_state$sroa$5 + 4 >> 2];
  HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 8 >> 2] = HEAP32[$enc_intra_state$sroa$5 + 8 >> 2];
  HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 12 >> 2] = HEAP32[$enc_intra_state$sroa$5 + 12 >> 2];
  HEAP32[$enc_intra_state$sroa$5$0$$sroa_idx + 16 >> 2] = HEAP32[$enc_intra_state$sroa$5 + 16 >> 2];
  HEAP32[$enc_start_state$sroa$4$0$$sroa_idx135 >> 2] = $enc_intra_state$sroa$5115$0$copyload;
  HEAP32[$enc$idx104 >> 2] = HEAP32[$enc_intra_state$sroa$6 >> 2];
  HEAP32[$enc$idx104 + 4 >> 2] = HEAP32[$enc_intra_state$sroa$6 + 4 >> 2];
  HEAP32[$enc$idx104 + 8 >> 2] = HEAP32[$enc_intra_state$sroa$6 + 8 >> 2];
  HEAP32[$enc$idx104 + 12 >> 2] = HEAP32[$enc_intra_state$sroa$6 + 12 >> 2];
  HEAP32[$enc$idx104 + 16 >> 2] = HEAP32[$enc_intra_state$sroa$6 + 16 >> 2];
  _memcpy($add$ptr | 0, $vla60 | 0, $sub54 | 0) | 0;
  $mul93 = $C << 2;
  _memcpy($oldEBands | 0, $vla | 0, Math_imul($mul93, HEAP32[$nbEBands >> 2] | 0) | 0) | 0;
  _memcpy($error | 0, $vla36 | 0, Math_imul($mul93, HEAP32[$nbEBands >> 2] | 0) | 0) | 0;
  _llvm_stackrestore($15 | 0);
  $storemerge = $cond$i;
  HEAPF32[$delayedIntra >> 2] = $storemerge;
  _llvm_stackrestore($7 | 0);
  STACKTOP = sp;
  return;
 } while (0);
 _llvm_stackrestore($15 | 0);
 $24 = +HEAPF32[20752 + ($LM << 2) >> 2];
 $storemerge = $cond$i + $24 * $24 * +HEAPF32[$delayedIntra >> 2];
 HEAPF32[$delayedIntra >> 2] = $storemerge;
 _llvm_stackrestore($7 | 0);
 STACKTOP = sp;
 return;
}

function _silk_LPC_inverse_pred_gain_c($A_Q12, $order) {
 $A_Q12 = $A_Q12 | 0;
 $order = $order | 0;
 var $$lcssa$i = 0, $1 = 0, $10 = 0, $101 = 0, $107 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $125 = 0, $126 = 0, $129 = 0, $13 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $74 = 0, $76 = 0, $78 = 0, $80 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $Atmp_QA = 0, $DC_resp$013 = 0, $add26$i$i = 0, $arrayidx30$i = 0, $arrayidx33$i = 0, $call23149$i = 0, $cmp257$i = 0, $cmp34$i = 0, $cmp35$i$i = 0, $cmp45$i = 0, $cond159$i = 0, $cond373$i = 0, $conv = 0, $conv4$i$i = 0, $div$i$i = 0, $k$0$in178$i = 0, $k$0$in178$i$phi = 0, $k$012 = 0, $k$0173$i = 0, $k$0179$i = 0, $n$0172$i = 0, $retval$0 = 0, $shl$i$i = 0, $shl10$i$i = 0, $shl14$i = 0, $shl2$i$i = 0, $shl487$i = 0, $shr$i$i = 0, $shr26185$i = 0, $shr32$i$i = 0, $shr32$i$i$shr34$i$i = 0, $shr34$i$i = 0, $shr34$i$i$shr32$i$i = 0, $spec$select141$i = 0, $spec$select147$i = 0, $sub22$i = 0, $sub230$i = 0, $sub255$i = 0, $sub28$i$i = 0, $sub31$i = 0, $sub31$i$i = 0, $sub44$i = 0, $sub475$i = 0, $sub481$i = 0, $sub5$i = 0, $sub8$i = 0, $tobool$i = 0, $tobool270$i = 0, $tobool294$i = 0, $tobool80$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $Atmp_QA = sp;
 if (($order | 0) > 0) {
  $DC_resp$013 = 0;
  $k$012 = 0;
  do {
   $conv = HEAP16[$A_Q12 + ($k$012 << 1) >> 1] | 0;
   $DC_resp$013 = $DC_resp$013 + $conv | 0;
   HEAP32[$Atmp_QA + ($k$012 << 2) >> 2] = $conv << 12;
   $k$012 = $k$012 + 1 | 0;
  } while (($k$012 | 0) != ($order | 0));
  if (($DC_resp$013 | 0) > 4095) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $k$0173$i = $order + -1 | 0;
 $1 = HEAP32[$Atmp_QA + ($k$0173$i << 2) >> 2] | 0;
 $2 = ($1 + 16773022 | 0) >>> 0 > 33546044;
 L8 : do if (($order | 0) > 1) {
  $10 = 0;
  $139 = $2;
  $3 = $1;
  $9 = 1073741824;
  $k$0$in178$i = $order;
  $k$0179$i = $k$0173$i;
  L10 : while (1) {
   if ($139) {
    $retval$0 = 0;
    label = 31;
    break;
   }
   $sub5$i = 0 - ($3 << 7) | 0;
   $5 = (($sub5$i | 0) < 0) << 31 >> 31;
   ___muldi3($sub5$i | 0, $5 | 0, $sub5$i | 0, $5 | 0) | 0;
   $sub8$i = 1073741824 - (getTempRet0() | 0) | 0;
   $11 = ___muldi3($9 | 0, $10 | 0, $sub8$i | 0, (($sub8$i | 0) < 0) << 31 >> 31 | 0) | 0;
   $13 = _bitshift64Lshr($11 | 0, getTempRet0() | 0, 30) | 0;
   getTempRet0() | 0;
   $shl14$i = $13 & -4;
   if (($shl14$i | 0) < 107374) {
    $retval$0 = 0;
    label = 31;
    break;
   }
   $15 = Math_clz32((($sub8$i | 0) > 0 ? $sub8$i : 0 - $sub8$i | 0) | 0) | 0;
   $sub22$i = 32 - $15 | 0;
   $shl$i$i = $sub8$i << $15 + -1;
   $shr$i$i = $shl$i$i >> 16;
   $div$i$i = 536870911 / ($shr$i$i | 0) | 0;
   $shl2$i$i = $div$i$i << 16;
   $conv4$i$i = $shl2$i$i >> 16;
   $shl10$i$i = 0 - (((Math_imul($conv4$i$i, $shl$i$i & 65535) | 0) >> 16) + (Math_imul($conv4$i$i, $shr$i$i) | 0) << 3) | 0;
   $add26$i$i = (Math_imul(($div$i$i >> 15) + 1 >> 1, $shl10$i$i) | 0) + $shl2$i$i + (Math_imul($shl10$i$i >> 16, $conv4$i$i) | 0) + ((Math_imul($shl10$i$i & 65528, $conv4$i$i) | 0) >> 16) | 0;
   $sub28$i$i = -30 - $sub22$i + (62 - $15) | 0;
   if (($sub28$i$i | 0) < 1) {
    $sub31$i$i = 0 - $sub28$i$i | 0;
    $shr32$i$i = -2147483648 >> $sub31$i$i;
    $shr34$i$i = 2147483647 >>> $sub31$i$i;
    $cmp35$i$i = ($shr32$i$i | 0) > ($shr34$i$i | 0);
    $shr32$i$i$shr34$i$i = $cmp35$i$i ? $shr32$i$i : $shr34$i$i;
    $shr34$i$i$shr32$i$i = $cmp35$i$i ? $shr34$i$i : $shr32$i$i;
    $call23149$i = (($add26$i$i | 0) > ($shr32$i$i$shr34$i$i | 0) ? $shr32$i$i$shr34$i$i : ($add26$i$i | 0) < ($shr34$i$i$shr32$i$i | 0) ? $shr34$i$i$shr32$i$i : $add26$i$i) << $sub31$i$i;
   } else $call23149$i = ($sub28$i$i | 0) < 32 ? $add26$i$i >> $sub28$i$i : 0;
   $shr26185$i = $k$0$in178$i >>> 1;
   $sub31$i = $k$0179$i + -1 | 0;
   $cmp34$i = ($sub22$i | 0) == 1;
   $17 = (($call23149$i | 0) < 0) << 31 >> 31;
   $sub230$i = $sub22$i + -1 | 0;
   $n$0172$i = 0;
   do {
    $arrayidx30$i = $Atmp_QA + ($n$0172$i << 2) | 0;
    $18 = HEAP32[$arrayidx30$i >> 2] | 0;
    $arrayidx33$i = $Atmp_QA + ($sub31$i - $n$0172$i << 2) | 0;
    $19 = HEAP32[$arrayidx33$i >> 2] | 0;
    $22 = ___muldi3($19 | 0, (($19 | 0) < 0) << 31 >> 31 | 0, $sub5$i | 0, $5 | 0) | 0;
    $24 = _bitshift64Lshr($22 | 0, getTempRet0() | 0, 30) | 0;
    $26 = _i64Add($24 | 0, getTempRet0() | 0, 1, 0) | 0;
    $28 = _bitshift64Lshr($26 | 0, getTempRet0() | 0, 1) | 0;
    getTempRet0() | 0;
    $sub44$i = $18 - $28 | 0;
    $cmp45$i = ($sub44$i | 0) > -1;
    if ($cmp34$i) {
     if ($cmp45$i) {
      $tobool$i = (($28 ^ -2147483648) & $18 | 0) < 0;
      $38 = $tobool$i ? -2147483648 : $sub44$i;
      $39 = $tobool$i ? -1 : (($sub44$i | 0) < 0) << 31 >> 31;
      $cond159$i = $tobool$i ? -2147483648 : $sub44$i;
     } else {
      $tobool80$i = (($18 ^ -2147483648) & $28 | 0) < 0;
      $38 = $tobool80$i ? 2147483647 : $sub44$i;
      $39 = $tobool80$i ? 0 : (($sub44$i | 0) < 0) << 31 >> 31;
      $cond159$i = $tobool80$i ? 2147483647 : $sub44$i;
     }
     $40 = ___muldi3($38 | 0, $39 | 0, $call23149$i | 0, $17 | 0) | 0;
     $42 = _bitshift64Ashr($40 | 0, getTempRet0() | 0, 1) | 0;
     $43 = getTempRet0() | 0;
     $46 = ___muldi3($cond159$i | 0, (($cond159$i | 0) < 0) << 31 >> 31 | 0, $call23149$i | 0, $17 | 0) | 0;
     getTempRet0() | 0;
     $49 = _i64Add($46 & 1 | 0, 0, $42 | 0, $43 | 0) | 0;
     $63 = $49;
     $64 = getTempRet0() | 0;
    } else {
     $spec$select141$i = ((($cmp45$i ? $28 : $18) ^ -2147483648) & ($cmp45$i ? $18 : $28) | 0) < 0 ? $sub44$i >> 31 ^ -2147483648 : $sub44$i;
     $55 = ___muldi3($spec$select141$i | 0, (($spec$select141$i | 0) < 0) << 31 >> 31 | 0, $call23149$i | 0, $17 | 0) | 0;
     $57 = _bitshift64Ashr($55 | 0, getTempRet0() | 0, $sub230$i | 0) | 0;
     $59 = _i64Add($57 | 0, getTempRet0() | 0, 1, 0) | 0;
     $61 = _bitshift64Ashr($59 | 0, getTempRet0() | 0, 1) | 0;
     $63 = $61;
     $64 = getTempRet0() | 0;
    }
    $65 = _i64Add($63 | 0, $64 | 0, -2147483648, 0) | 0;
    $66 = getTempRet0() | 0;
    if ($66 >>> 0 > 0 | ($66 | 0) == 0 & $65 >>> 0 > 4294967295) {
     $retval$0 = 0;
     label = 31;
     break L10;
    }
    HEAP32[$arrayidx30$i >> 2] = $63;
    $74 = ___muldi3($18 | 0, (($18 | 0) < 0) << 31 >> 31 | 0, $sub5$i | 0, $5 | 0) | 0;
    $76 = _bitshift64Lshr($74 | 0, getTempRet0() | 0, 30) | 0;
    $78 = _i64Add($76 | 0, getTempRet0() | 0, 1, 0) | 0;
    $80 = _bitshift64Lshr($78 | 0, getTempRet0() | 0, 1) | 0;
    getTempRet0() | 0;
    $sub255$i = $19 - $80 | 0;
    $cmp257$i = ($sub255$i | 0) > -1;
    if ($cmp34$i) {
     if ($cmp257$i) {
      $tobool270$i = (($80 ^ -2147483648) & $19 | 0) < 0;
      $90 = $tobool270$i ? -2147483648 : $sub255$i;
      $91 = $tobool270$i ? -1 : (($sub255$i | 0) < 0) << 31 >> 31;
      $cond373$i = $tobool270$i ? -2147483648 : $sub255$i;
     } else {
      $tobool294$i = (($19 ^ -2147483648) & $80 | 0) < 0;
      $90 = $tobool294$i ? 2147483647 : $sub255$i;
      $91 = $tobool294$i ? 0 : (($sub255$i | 0) < 0) << 31 >> 31;
      $cond373$i = $tobool294$i ? 2147483647 : $sub255$i;
     }
     $92 = ___muldi3($90 | 0, $91 | 0, $call23149$i | 0, $17 | 0) | 0;
     $94 = _bitshift64Ashr($92 | 0, getTempRet0() | 0, 1) | 0;
     $95 = getTempRet0() | 0;
     $98 = ___muldi3($cond373$i | 0, (($cond373$i | 0) < 0) << 31 >> 31 | 0, $call23149$i | 0, $17 | 0) | 0;
     getTempRet0() | 0;
     $101 = _i64Add($98 & 1 | 0, 0, $94 | 0, $95 | 0) | 0;
     $115 = $101;
     $116 = getTempRet0() | 0;
    } else {
     $spec$select147$i = ((($cmp257$i ? $80 : $19) ^ -2147483648) & ($cmp257$i ? $19 : $80) | 0) < 0 ? $sub255$i >> 31 ^ -2147483648 : $sub255$i;
     $107 = ___muldi3($spec$select147$i | 0, (($spec$select147$i | 0) < 0) << 31 >> 31 | 0, $call23149$i | 0, $17 | 0) | 0;
     $109 = _bitshift64Ashr($107 | 0, getTempRet0() | 0, $sub230$i | 0) | 0;
     $111 = _i64Add($109 | 0, getTempRet0() | 0, 1, 0) | 0;
     $113 = _bitshift64Ashr($111 | 0, getTempRet0() | 0, 1) | 0;
     $115 = $113;
     $116 = getTempRet0() | 0;
    }
    $117 = _i64Add($115 | 0, $116 | 0, -2147483648, 0) | 0;
    $118 = getTempRet0() | 0;
    if ($118 >>> 0 > 0 | ($118 | 0) == 0 & $117 >>> 0 > 4294967295) {
     $retval$0 = 0;
     label = 31;
     break L10;
    }
    HEAP32[$arrayidx33$i >> 2] = $115;
    $n$0172$i = $n$0172$i + 1 | 0;
   } while ($n$0172$i >>> 0 < $shr26185$i >>> 0);
   $3 = HEAP32[$Atmp_QA + ($sub31$i << 2) >> 2] | 0;
   $125 = (($shl14$i | 0) < 0) << 31 >> 31;
   $126 = ($3 + 16773022 | 0) >>> 0 > 33546044;
   if (($k$0179$i | 0) <= 1) {
    $$lcssa$i = $126;
    $133 = $shl14$i;
    $134 = $125;
    break L8;
   } else {
    $k$0$in178$i$phi = $k$0179$i;
    $10 = $125;
    $139 = $126;
    $9 = $shl14$i;
    $k$0179$i = $sub31$i;
    $k$0$in178$i = $k$0$in178$i$phi;
   }
  }
  if ((label | 0) == 31) {
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } else {
  $$lcssa$i = $2;
  $133 = 1073741824;
  $134 = 0;
 } while (0);
 if ($$lcssa$i) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $sub475$i = 0 - (HEAP32[$Atmp_QA >> 2] << 7) | 0;
 $129 = (($sub475$i | 0) < 0) << 31 >> 31;
 ___muldi3($sub475$i | 0, $129 | 0, $sub475$i | 0, $129 | 0) | 0;
 $sub481$i = 1073741824 - (getTempRet0() | 0) | 0;
 $135 = ___muldi3($133 | 0, $134 | 0, $sub481$i | 0, (($sub481$i | 0) < 0) << 31 >> 31 | 0) | 0;
 $137 = _bitshift64Lshr($135 | 0, getTempRet0() | 0, 30) | 0;
 getTempRet0() | 0;
 $shl487$i = $137 & -4;
 $retval$0 = ($shl487$i | 0) < 107374 ? 0 : $shl487$i;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _hexfloat($f, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $54 = 0, $55 = 0, $6 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $79 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $cmp206 = 0, $cmp54 = 0, $cond29 = 0, $cond46 = 0, $conv241112 = 0.0, $conv253$pre$phiZ2D = 0.0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $mul143 = 0, $or$cond = 0, $or$cond103 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub239111 = 0, $sub260 = 0.0, $tobool108 = 0, $tobool138 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, label = 0, $45$looptemp = 0, $46$looptemp = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $c$0$ph = HEAPU8[$0 >> 0] | 0;
 } else $c$0$ph = ___shgetc($f) | 0;
 $c$0 = $c$0$ph;
 $gotdig$0 = 0;
 L5 : while (1) {
  switch ($c$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $105 = 0;
    $106 = 0;
    $c$3$ph = $c$0;
    $gotdig$3$ph = $gotdig$0;
    $gotrad$1$ph = 0;
    break L5;
   }
  }
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$0$be = HEAPU8[$3 >> 0] | 0;
  } else $c$0$be = ___shgetc($f) | 0;
  $c$0 = $c$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 10) {
  $6 = HEAP32[$rpos >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $6 + 1;
   $cond29 = HEAPU8[$6 >> 0] | 0;
  } else $cond29 = ___shgetc($f) | 0;
  if (($cond29 | 0) == 48) {
   $12 = 0;
   $13 = 0;
   while (1) {
    $9 = HEAP32[$rpos >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $9 + 1;
     $cond46 = HEAPU8[$9 >> 0] | 0;
    } else $cond46 = ___shgetc($f) | 0;
    $14 = _i64Add($12 | 0, $13 | 0, -1, -1) | 0;
    $15 = getTempRet0() | 0;
    if (($cond46 | 0) == 48) {
     $12 = $14;
     $13 = $15;
    } else {
     $105 = $14;
     $106 = $15;
     $c$3$ph = $cond46;
     $gotdig$3$ph = 1;
     $gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $105 = 0;
   $106 = 0;
   $c$3$ph = $cond29;
   $gotdig$3$ph = $gotdig$0;
   $gotrad$1$ph = 1;
  }
 }
 $17 = 0;
 $19 = 0;
 $37 = $105;
 $39 = $106;
 $c$3 = $c$3$ph;
 $gotdig$3 = $gotdig$3$ph;
 $gotrad$1 = $gotrad$1$ph;
 $gottail$0 = 0;
 $scale$0 = 1.0;
 $x$0 = 0;
 $y$0 = 0.0;
 while (1) {
  $sub = $c$3 + -48 | 0;
  $$pre = $c$3 | 32;
  if ($sub >>> 0 < 10) label = 24; else {
   $cmp54 = ($c$3 | 0) == 46;
   if (!($cmp54 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) if (!$gotrad$1) {
    $107 = $19;
    $108 = $17;
    $109 = $19;
    $110 = $17;
    $gotdig$4 = $gotdig$3;
    $gotrad$2 = 1;
    $gottail$2 = $gottail$0;
    $scale$2 = $scale$0;
    $x$2 = $x$0;
    $y$2 = $y$0;
   } else {
    $c$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $d$0 = ($c$3 | 0) > 57 ? $$pre + -87 | 0 : $sub;
   do if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
    $gottail$1 = $gottail$0;
    $scale$1 = $scale$0;
    $x$1 = $d$0 + ($x$0 << 4) | 0;
    $y$1 = $y$0;
   } else if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 14) {
    $div = $scale$0 * .0625;
    $gottail$1 = $gottail$0;
    $scale$1 = $div;
    $x$1 = $x$0;
    $y$1 = $y$0 + $div * +($d$0 | 0);
    break;
   } else {
    $or$cond = ($gottail$0 | 0) != 0 | ($d$0 | 0) == 0;
    $gottail$1 = $or$cond ? $gottail$0 : 1;
    $scale$1 = $scale$0;
    $x$1 = $x$0;
    $y$1 = $or$cond ? $y$0 : $y$0 + $scale$0 * .5;
    break;
   } while (0);
   $28 = _i64Add($19 | 0, $17 | 0, 1, 0) | 0;
   $107 = $37;
   $108 = $39;
   $109 = $28;
   $110 = getTempRet0() | 0;
   $gotdig$4 = 1;
   $gotrad$2 = $gotrad$1;
   $gottail$2 = $gottail$1;
   $scale$2 = $scale$1;
   $x$2 = $x$1;
   $y$2 = $y$1;
  }
  $30 = HEAP32[$rpos >> 2] | 0;
  if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $30 + 1;
   $c$3$be = HEAPU8[$30 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
  $17 = $110;
  $19 = $109;
  $37 = $107;
  $39 = $108;
  $c$3 = $c$3$be;
  $gotdig$3 = $gotdig$4;
  $gotrad$1 = $gotrad$2;
  $gottail$0 = $gottail$2;
  $scale$0 = $scale$2;
  $x$0 = $x$2;
  $y$0 = $y$2;
 }
 do if (!$gotdig$3) {
  $tobool108 = (HEAP32[$shend >> 2] | 0) == 0;
  if (!$tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!$pok) ___shlim($f, 0, 0); else if (!$tobool108) {
   $35 = HEAP32[$rpos >> 2] | 0;
   HEAP32[$rpos >> 2] = $35 + -1;
   if ($gotrad$1 | 0) HEAP32[$rpos >> 2] = $35 + -2;
  }
  $retval$0 = +($sign | 0) * 0.0;
 } else {
  $tobool138 = ($gotrad$1 | 0) == 0;
  $36 = $tobool138 ? $19 : $37;
  $38 = $tobool138 ? $17 : $39;
  if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
   $45 = $19;
   $46 = $17;
   $x$3125 = $x$0;
   while (1) {
    $mul143 = $x$3125 << 4;
    $45$looptemp = $45;
    $45 = _i64Add($45 | 0, $46 | 0, 1, 0) | 0;
    $46$looptemp = $46;
    $46 = getTempRet0() | 0;
    if (!(($46$looptemp | 0) < 0 | ($46$looptemp | 0) == 0 & $45$looptemp >>> 0 < 7)) {
     $x$3$lcssa = $mul143;
     break;
    } else $x$3125 = $mul143;
   }
  } else $x$3$lcssa = $x$0;
  if (($c$3$lcssa | 32 | 0) == 112) {
   $54 = _scanexp($f, $pok) | 0;
   $55 = getTempRet0() | 0;
   if (($54 | 0) == 0 & ($55 | 0) == -2147483648) {
    if (!$pok) {
     ___shlim($f, 0, 0);
     $retval$0 = 0.0;
     break;
    }
    if (!(HEAP32[$shend >> 2] | 0)) {
     $67 = 0;
     $68 = 0;
    } else {
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $67 = 0;
     $68 = 0;
    }
   } else {
    $67 = $54;
    $68 = $55;
   }
  } else if (!(HEAP32[$shend >> 2] | 0)) {
   $67 = 0;
   $68 = 0;
  } else {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   $67 = 0;
   $68 = 0;
  }
  $63 = _bitshift64Shl($36 | 0, $38 | 0, 2) | 0;
  $65 = _i64Add($63 | 0, getTempRet0() | 0, -32, -1) | 0;
  $69 = _i64Add($65 | 0, getTempRet0() | 0, $67 | 0, $68 | 0) | 0;
  $70 = getTempRet0() | 0;
  if (!$x$3$lcssa) {
   $retval$0 = +($sign | 0) * 0.0;
   break;
  }
  $sub182 = 0 - $emin | 0;
  $72 = (($sub182 | 0) < 0) << 31 >> 31;
  if (($70 | 0) > ($72 | 0) | ($70 | 0) == ($72 | 0) & $69 >>> 0 > $sub182 >>> 0) {
   HEAP32[16056] = 68;
   $retval$0 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub192 = $emin + -106 | 0;
  $79 = (($sub192 | 0) < 0) << 31 >> 31;
  if (($70 | 0) < ($79 | 0) | ($70 | 0) == ($79 | 0) & $69 >>> 0 < $sub192 >>> 0) {
   HEAP32[16056] = 68;
   $retval$0 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($x$3$lcssa | 0) > -1) {
   $85 = $69;
   $86 = $70;
   $x$4119 = $x$3$lcssa;
   $y$3120 = $y$0;
   while (1) {
    $cmp206 = !($y$3120 >= .5);
    $x$5 = $x$4119 << 1 | ($cmp206 ^ 1) & 1;
    $y$4 = $y$3120 + ($cmp206 ? $y$3120 : $y$3120 + -1.0);
    $87 = _i64Add($85 | 0, $86 | 0, -1, -1) | 0;
    $88 = getTempRet0() | 0;
    if (($x$5 | 0) > -1) {
     $85 = $87;
     $86 = $88;
     $x$4119 = $x$5;
     $y$3120 = $y$4;
    } else {
     $95 = $87;
     $96 = $88;
     $x$4$lcssa = $x$5;
     $y$3$lcssa = $y$4;
     break;
    }
   }
  } else {
   $95 = $69;
   $96 = $70;
   $x$4$lcssa = $x$3$lcssa;
   $y$3$lcssa = $y$0;
  }
  $90 = (($bits | 0) < 0) << 31 >> 31;
  $93 = _i64Subtract(32, 0, $emin | 0, (($emin | 0) < 0) << 31 >> 31 | 0) | 0;
  $97 = _i64Add($93 | 0, getTempRet0() | 0, $95 | 0, $96 | 0) | 0;
  $98 = getTempRet0() | 0;
  if (($98 | 0) < ($90 | 0) | ($98 | 0) == ($90 | 0) & $97 >>> 0 < $bits >>> 0) if (($97 | 0) > 0) {
   $bits$addr$0 = $97;
   label = 65;
  } else {
   $bits$addr$0110 = 0;
   $sub239111 = 84;
   label = 67;
  } else {
   $bits$addr$0 = $bits;
   label = 65;
  }
  if ((label | 0) == 65) if (($bits$addr$0 | 0) < 53) {
   $bits$addr$0110 = $bits$addr$0;
   $sub239111 = 84 - $bits$addr$0 | 0;
   label = 67;
  } else {
   $bias$0 = 0.0;
   $bits$addr$0109 = $bits$addr$0;
   $conv253$pre$phiZ2D = +($sign | 0);
  }
  if ((label | 0) == 67) {
   $conv241112 = +($sign | 0);
   $bias$0 = +_copysignl(+_scalbn(1.0, $sub239111), $conv241112);
   $bits$addr$0109 = $bits$addr$0110;
   $conv253$pre$phiZ2D = $conv241112;
  }
  $or$cond103 = ($x$4$lcssa & 1 | 0) == 0 & ($y$3$lcssa != 0.0 & ($bits$addr$0109 | 0) < 32);
  $sub260 = ($or$cond103 ? 0.0 : $y$3$lcssa) * $conv253$pre$phiZ2D + ($bias$0 + $conv253$pre$phiZ2D * +(($x$4$lcssa + ($or$cond103 & 1) | 0) >>> 0)) - $bias$0;
  if (!($sub260 != 0.0)) HEAP32[16056] = 68;
  $retval$0 = +_scalbnl($sub260, $95);
 } while (0);
 return +$retval$0;
}

function _quant_partition($ctx, $X, $N, $b, $B, $lowband, $LM, $gain, $fill) {
 $ctx = $ctx | 0;
 $X = $X | 0;
 $N = $N | 0;
 $b = $b | 0;
 $B = $B | 0;
 $lowband = $lowband | 0;
 $LM = $LM | 0;
 $gain = +$gain;
 $fill = $fill | 0;
 var $$pre224 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $41 = 0.0, $add$i178214 = 0, $add$i217 = 0, $add$ptr = 0, $add$ptr19 = 0, $add144 = 0, $add48 = 0, $and164 = 0, $b$addr = 0, $call = 0, $cm$0 = 0, $cm$2 = 0, $cm$5 = 0, $cmp$i193 = 0, $cmp11$1$i = 0, $cmp11$2$i = 0, $cmp11$3$i = 0, $cmp11$4$i = 0, $cmp11$5$i = 0, $cmp11$i = 0, $cmp172212 = 0, $cond$i191 = 0, $cond$i207 = 0, $curr_bits$0221 = 0, $dec = 0, $dec$i = 0, $delta$0 = 0, $div = 0, $fill$addr = 0, $hi$0$lo$0$i = 0, $hi$0$shr$1$i = 0, $hi$0$shr$2$i = 0, $hi$0$shr$3$i = 0, $hi$0$shr$4$i = 0, $hi$0$shr$5$i = 0, $hi$0$shr$i = 0, $i$013$i = 0, $i$07$i$i = 0, $j$0213 = 0, $j$1216 = 0, $mul$i1 = 0.0, $mul31 = 0.0, $mul33 = 0.0, $q$0$lcssa231 = 0, $q$0222 = 0, $remaining_bits = 0, $remaining_bits136 = 0, $sctx = 0, $seed = 0, $seed185 = 0, $shl116 = 0, $shr$2$i = 0, $shr$3$i = 0, $shr$4$i = 0, $shr$5$i = 0, $shr$lo$0$1$i = 0, $shr$lo$0$2$i = 0, $shr$lo$0$3$i = 0, $shr$lo$0$4$i = 0, $shr$lo$0$5$i = 0, $shr$lo$0$i = 0, $shr209 = 0, $shr24 = 0, $spec$select$i = 0, $spec$select172 = 0, $spec$select174 = 0, $spec$select210 = 0, $storemerge220 = 0, $sub = 0, $sub119 = 0, $sub137 = 0, $sub163 = 0, $sub82 = 0, $sub83 = 0, $sub95 = 0, $xptr$014$i = 0, $xy$08$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $b$addr = sp + 4 | 0;
 $fill$addr = sp;
 $sctx = sp + 8 | 0;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$fill$addr >> 2] = $fill;
 $0 = HEAP32[$ctx >> 2] | 0;
 $1 = HEAP32[$ctx + 8 >> 2] | 0;
 $3 = HEAP32[$ctx + 20 >> 2] | 0;
 $4 = HEAP32[$ctx + 28 >> 2] | 0;
 $add$ptr = (HEAP32[$1 + 100 >> 2] | 0) + (HEAP16[(HEAP32[$1 + 96 >> 2] | 0) + ((Math_imul(HEAP32[$1 + 8 >> 2] | 0, $LM + 1 | 0) | 0) + (HEAP32[$ctx + 12 >> 2] | 0) << 1) >> 1] | 0) | 0;
 $$pre224 = HEAPU8[$add$ptr >> 0] | 0;
 if (($LM | 0) != -1) if (($N | 0) > 2 ? ((HEAPU8[$add$ptr + $$pre224 >> 0] | 0) + 12 | 0) < ($b | 0) : 0) {
  $shr209 = $N >>> 1;
  $add$ptr19 = $X + ($shr209 << 2) | 0;
  $sub = $LM + -1 | 0;
  if (($B | 0) == 1) HEAP32[$fill$addr >> 2] = $fill & 1 | $fill << 1;
  $shr24 = $B + 1 >> 1;
  _compute_theta($ctx, $sctx, $X, $add$ptr19, $shr209, $b$addr, $shr24, $B, $sub, 0, $fill$addr);
  $12 = HEAP32[$sctx + 12 >> 2] | 0;
  $13 = HEAP32[$sctx + 16 >> 2] | 0;
  $14 = HEAP32[$sctx + 20 >> 2] | 0;
  $mul31 = +(HEAP32[$sctx + 4 >> 2] | 0) * .000030517578125;
  $mul33 = +(HEAP32[$sctx + 8 >> 2] | 0) * .000030517578125;
  do if (($B | 0) < 2 | ($13 & 16383 | 0) == 0) $delta$0 = $12; else if (($13 | 0) > 8192) {
   $delta$0 = $12 - ($12 >> 5 - $LM) | 0;
   break;
  } else {
   $add48 = $12 + ($shr209 << 3 >> 6 - $LM) | 0;
   $delta$0 = ($add48 | 0) < 0 ? $add48 : 0;
   break;
  } while (0);
  $16 = HEAP32[$b$addr >> 2] | 0;
  $div = ($16 - $delta$0 | 0) / 2 | 0;
  $spec$select172 = ($16 | 0) < ($div | 0) ? $16 : $div;
  $spec$select210 = ($spec$select172 | 0) > 0 ? $spec$select172 : 0;
  $sub82 = $16 - $spec$select210 | 0;
  $remaining_bits = $ctx + 32 | 0;
  $sub83 = (HEAP32[$remaining_bits >> 2] | 0) - $14 | 0;
  HEAP32[$remaining_bits >> 2] = $sub83;
  $spec$select174 = ($lowband | 0) == 0 ? 0 : $lowband + ($shr209 << 2) | 0;
  if (($spec$select210 | 0) < ($sub82 | 0)) {
   $21 = HEAP32[$fill$addr >> 2] | 0;
   $shl116 = (_quant_partition($ctx, $add$ptr19, $shr209, $sub82, $shr24, $spec$select174, $sub, $mul33 * $gain, $21 >> $shr24) | 0) << ($B >> 1);
   $sub119 = (HEAP32[$remaining_bits >> 2] | 0) - $sub83 + $sub82 | 0;
   $cm$0 = _quant_partition($ctx, $X, $shr209, (($13 | 0) != 16384 & ($sub119 | 0) > 24 ? $sub119 + -24 | 0 : 0) + $spec$select210 | 0, $shr24, $lowband, $sub, $mul31 * $gain, $21) | 0 | $shl116;
  } else {
   $19 = HEAP32[$fill$addr >> 2] | 0;
   $call = _quant_partition($ctx, $X, $shr209, $spec$select210, $shr24, $lowband, $sub, $mul31 * $gain, $19) | 0;
   $sub95 = (HEAP32[$remaining_bits >> 2] | 0) - $sub83 + $spec$select210 | 0;
   $cm$0 = (_quant_partition($ctx, $add$ptr19, $shr209, (($13 | 0) != 0 & ($sub95 | 0) > 24 ? $sub95 + -24 | 0 : 0) + $sub82 | 0, $shr24, $spec$select174, $sub, $mul33 * $gain, $19 >> $shr24) | 0) << ($B >> 1) | $call;
  }
  $cm$5 = $cm$0;
  STACKTOP = sp;
  return $cm$5 | 0;
 }
 $dec$i = $b + -1 | 0;
 $23 = ($$pre224 + 1 | 0) >>> 1;
 $cmp11$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $23 >> 0] | 0);
 $shr$lo$0$i = $cmp11$i ? $23 : 0;
 $hi$0$shr$i = $cmp11$i ? $$pre224 : $23;
 $25 = ($shr$lo$0$i + 1 + $hi$0$shr$i | 0) >>> 1;
 $cmp11$1$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $25 >> 0] | 0);
 $shr$lo$0$1$i = $cmp11$1$i ? $25 : $shr$lo$0$i;
 $hi$0$shr$1$i = $cmp11$1$i ? $hi$0$shr$i : $25;
 $shr$2$i = $shr$lo$0$1$i + 1 + $hi$0$shr$1$i >> 1;
 $cmp11$2$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $shr$2$i >> 0] | 0);
 $shr$lo$0$2$i = $cmp11$2$i ? $shr$2$i : $shr$lo$0$1$i;
 $hi$0$shr$2$i = $cmp11$2$i ? $hi$0$shr$1$i : $shr$2$i;
 $shr$3$i = $shr$lo$0$2$i + 1 + $hi$0$shr$2$i >> 1;
 $cmp11$3$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $shr$3$i >> 0] | 0);
 $shr$lo$0$3$i = $cmp11$3$i ? $shr$3$i : $shr$lo$0$2$i;
 $hi$0$shr$3$i = $cmp11$3$i ? $hi$0$shr$2$i : $shr$3$i;
 $shr$4$i = $shr$lo$0$3$i + 1 + $hi$0$shr$3$i >> 1;
 $cmp11$4$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $shr$4$i >> 0] | 0);
 $shr$lo$0$4$i = $cmp11$4$i ? $shr$4$i : $shr$lo$0$3$i;
 $hi$0$shr$4$i = $cmp11$4$i ? $hi$0$shr$3$i : $shr$4$i;
 $shr$5$i = $shr$lo$0$4$i + 1 + $hi$0$shr$4$i >> 1;
 $cmp11$5$i = ($dec$i | 0) > (HEAPU8[$add$ptr + $shr$5$i >> 0] | 0);
 $shr$lo$0$5$i = $cmp11$5$i ? $shr$5$i : $shr$lo$0$4$i;
 $hi$0$shr$5$i = $cmp11$5$i ? $hi$0$shr$4$i : $shr$5$i;
 if (!$shr$lo$0$5$i) $cond$i191 = -1; else $cond$i191 = HEAPU8[$add$ptr + $shr$lo$0$5$i >> 0] | 0;
 $hi$0$lo$0$i = ($dec$i - $cond$i191 | 0) > ((HEAPU8[$add$ptr + $hi$0$shr$5$i >> 0] | 0) - $dec$i | 0) ? $hi$0$shr$5$i : $shr$lo$0$5$i;
 $cmp$i193 = ($hi$0$lo$0$i | 0) == 0;
 if ($cmp$i193) $cond$i207 = 0; else $cond$i207 = (HEAPU8[$add$ptr + $hi$0$lo$0$i >> 0] | 0) + 1 | 0;
 $remaining_bits136 = $ctx + 32 | 0;
 $sub137 = (HEAP32[$remaining_bits136 >> 2] | 0) - $cond$i207 | 0;
 HEAP32[$remaining_bits136 >> 2] = $sub137;
 L25 : do if (($sub137 | 0) < 0 & ($hi$0$lo$0$i | 0) > 0) {
  $curr_bits$0221 = $cond$i207;
  $q$0222 = $hi$0$lo$0$i;
  $storemerge220 = $sub137;
  while (1) {
   $add144 = $curr_bits$0221 + $storemerge220 | 0;
   HEAP32[$remaining_bits136 >> 2] = $add144;
   $dec = $q$0222 + -1 | 0;
   if (!$dec) break;
   $curr_bits$0221 = (HEAPU8[$add$ptr + $dec >> 0] | 0) + 1 | 0;
   $storemerge220 = $add144 - $curr_bits$0221 | 0;
   HEAP32[$remaining_bits136 >> 2] = $storemerge220;
   if (!(($storemerge220 | 0) < 0 & ($q$0222 | 0) > 1)) {
    $q$0$lcssa231 = $dec;
    label = 23;
    break L25;
   } else $q$0222 = $dec;
  }
  HEAP32[$remaining_bits136 >> 2] = $add144;
 } else if (!$cmp$i193) {
  $q$0$lcssa231 = $hi$0$lo$0$i;
  label = 23;
 } while (0);
 if ((label | 0) == 23) {
  $spec$select$i = ($q$0$lcssa231 | 0) < 8 ? $q$0$lcssa231 : ($q$0$lcssa231 & 7 | 8) << ($q$0$lcssa231 >> 3) + -1;
  if (!$0) {
   $cm$5 = _alg_unquant($X, $N, $spec$select$i, $3, $B, $4, $gain) | 0;
   STACKTOP = sp;
   return $cm$5 | 0;
  } else {
   $cm$5 = _alg_quant($X, $N, $spec$select$i, $3, $B, $4, $gain, HEAP32[$ctx + 4 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $cm$5 | 0;
  }
 }
 if (!(HEAP32[$ctx + 4 >> 2] | 0)) {
  $cm$5 = 0;
  STACKTOP = sp;
  return $cm$5 | 0;
 }
 $sub163 = (1 << $B) + -1 | 0;
 $and164 = $sub163 & $fill;
 HEAP32[$fill$addr >> 2] = $and164;
 if (!$and164) {
  _memset($X | 0, 0, $N << 2 | 0) | 0;
  $cm$5 = 0;
  STACKTOP = sp;
  return $cm$5 | 0;
 }
 $cmp172212 = ($N | 0) > 0;
 if (!$lowband) {
  if (!$cmp172212) {
   $cm$5 = $sub163;
   STACKTOP = sp;
   return $cm$5 | 0;
  }
  $seed = $ctx + 40 | 0;
  $add$i178214 = HEAP32[$seed >> 2] | 0;
  $j$0213 = 0;
  do {
   $add$i178214 = (Math_imul($add$i178214, 1664525) | 0) + 1013904223 | 0;
   HEAPF32[$X + ($j$0213 << 2) >> 2] = +($add$i178214 >> 20 | 0);
   $j$0213 = $j$0213 + 1 | 0;
  } while (($j$0213 | 0) != ($N | 0));
  HEAP32[$seed >> 2] = $add$i178214;
  $cm$2 = $sub163;
 } else {
  if (!$cmp172212) {
   $cm$5 = $and164;
   STACKTOP = sp;
   return $cm$5 | 0;
  }
  $seed185 = $ctx + 40 | 0;
  $add$i217 = HEAP32[$seed185 >> 2] | 0;
  $j$1216 = 0;
  do {
   $add$i217 = (Math_imul($add$i217, 1664525) | 0) + 1013904223 | 0;
   HEAPF32[$X + ($j$1216 << 2) >> 2] = +HEAPF32[$lowband + ($j$1216 << 2) >> 2] + (($add$i217 & 32768 | 0) == 0 ? -.00390625 : .00390625);
   $j$1216 = $j$1216 + 1 | 0;
  } while (($j$1216 | 0) != ($N | 0));
  HEAP32[$seed185 >> 2] = $add$i217;
  $cm$2 = $and164;
 }
 if (!$cmp172212) {
  $cm$5 = $cm$2;
  STACKTOP = sp;
  return $cm$5 | 0;
 }
 $i$07$i$i = 0;
 $xy$08$i$i = 0.0;
 do {
  $41 = +HEAPF32[$X + ($i$07$i$i << 2) >> 2];
  $xy$08$i$i = $xy$08$i$i + $41 * $41;
  $i$07$i$i = $i$07$i$i + 1 | 0;
 } while (($i$07$i$i | 0) != ($N | 0));
 $mul$i1 = 1.0 / +Math_sqrt(+($xy$08$i$i + 1.0000000036274937e-15)) * $gain;
 $i$013$i = 0;
 $xptr$014$i = $X;
 while (1) {
  HEAPF32[$xptr$014$i >> 2] = $mul$i1 * +HEAPF32[$xptr$014$i >> 2];
  $i$013$i = $i$013$i + 1 | 0;
  if (($i$013$i | 0) == ($N | 0)) {
   $cm$5 = $cm$2;
   break;
  } else $xptr$014$i = $xptr$014$i + 4 | 0;
 }
 STACKTOP = sp;
 return $cm$5 | 0;
}
function _silk_LPC_analysis_filter_FLP($r_LPC, $PredCoef, $s, $length, $Order) {
 $r_LPC = $r_LPC | 0;
 $PredCoef = $PredCoef | 0;
 $s = $s | 0;
 $length = $length | 0;
 $Order = $Order | 0;
 var $arrayidx$i = 0, $arrayidx$i112 = 0, $arrayidx$i154 = 0, $arrayidx$i28 = 0, $arrayidx$i62 = 0, $arrayidx11$i = 0, $arrayidx11$i103 = 0, $arrayidx11$i147 = 0, $arrayidx11$i23 = 0, $arrayidx11$i51 = 0, $arrayidx15$i = 0, $arrayidx15$i104 = 0, $arrayidx15$i148 = 0, $arrayidx15$i24 = 0, $arrayidx15$i52 = 0, $arrayidx19$i = 0, $arrayidx19$i105 = 0, $arrayidx19$i149 = 0, $arrayidx19$i25 = 0, $arrayidx19$i53 = 0, $arrayidx23$i = 0, $arrayidx23$i106 = 0, $arrayidx23$i150 = 0, $arrayidx23$i54 = 0, $arrayidx27$i = 0, $arrayidx27$i107 = 0, $arrayidx27$i151 = 0, $arrayidx27$i55 = 0, $arrayidx31$i = 0, $arrayidx31$i108 = 0, $arrayidx31$i56 = 0, $arrayidx35$i = 0, $arrayidx35$i109 = 0, $arrayidx35$i57 = 0, $arrayidx39$i = 0, $arrayidx39$i58 = 0, $arrayidx4$i = 0, $arrayidx4$i101 = 0, $arrayidx4$i145 = 0, $arrayidx4$i21 = 0, $arrayidx4$i49 = 0, $arrayidx43$i = 0, $arrayidx43$i59 = 0, $arrayidx47$i = 0, $arrayidx51$i = 0, $arrayidx55$i = 0, $arrayidx59$i = 0, $arrayidx7$i = 0, $arrayidx7$i102 = 0, $arrayidx7$i146 = 0, $arrayidx7$i22 = 0, $arrayidx7$i50 = 0, $ix$019$i = 0, $ix$023$i = 0, $ix$027$i = 0, $ix$031$i = 0, $ix$039$i = 0, $mul = 0;
 if (($Order | 0) > ($length | 0)) _celt_fatal(54205, 54239, 218);
 switch ($Order | 0) {
 case 6:
  {
   if (($length | 0) <= 6) {
    $mul = $Order << 2;
    _memset($r_LPC | 0, 0, $mul | 0) | 0;
    return;
   }
   $arrayidx4$i = $PredCoef + 4 | 0;
   $arrayidx7$i = $PredCoef + 8 | 0;
   $arrayidx11$i = $PredCoef + 12 | 0;
   $arrayidx15$i = $PredCoef + 16 | 0;
   $arrayidx19$i = $PredCoef + 20 | 0;
   $ix$019$i = 6;
   do {
    $arrayidx$i = $s + ($ix$019$i + -1 << 2) | 0;
    HEAPF32[$r_LPC + ($ix$019$i << 2) >> 2] = +HEAPF32[$s + ($ix$019$i << 2) >> 2] - (+HEAPF32[$arrayidx$i >> 2] * +HEAPF32[$PredCoef >> 2] + +HEAPF32[$arrayidx$i + -4 >> 2] * +HEAPF32[$arrayidx4$i >> 2] + +HEAPF32[$arrayidx$i + -8 >> 2] * +HEAPF32[$arrayidx7$i >> 2] + +HEAPF32[$arrayidx$i + -12 >> 2] * +HEAPF32[$arrayidx11$i >> 2] + +HEAPF32[$arrayidx$i + -16 >> 2] * +HEAPF32[$arrayidx15$i >> 2] + +HEAPF32[$arrayidx$i + -20 >> 2] * +HEAPF32[$arrayidx19$i >> 2]);
    $ix$019$i = $ix$019$i + 1 | 0;
   } while (($ix$019$i | 0) != ($length | 0));
   $mul = $Order << 2;
   _memset($r_LPC | 0, 0, $mul | 0) | 0;
   return;
  }
 case 8:
  {
   if (($length | 0) <= 8) {
    $mul = $Order << 2;
    _memset($r_LPC | 0, 0, $mul | 0) | 0;
    return;
   }
   $arrayidx4$i145 = $PredCoef + 4 | 0;
   $arrayidx7$i146 = $PredCoef + 8 | 0;
   $arrayidx11$i147 = $PredCoef + 12 | 0;
   $arrayidx15$i148 = $PredCoef + 16 | 0;
   $arrayidx19$i149 = $PredCoef + 20 | 0;
   $arrayidx23$i150 = $PredCoef + 24 | 0;
   $arrayidx27$i151 = $PredCoef + 28 | 0;
   $ix$023$i = 8;
   do {
    $arrayidx$i154 = $s + ($ix$023$i + -1 << 2) | 0;
    HEAPF32[$r_LPC + ($ix$023$i << 2) >> 2] = +HEAPF32[$s + ($ix$023$i << 2) >> 2] - (+HEAPF32[$arrayidx$i154 >> 2] * +HEAPF32[$PredCoef >> 2] + +HEAPF32[$arrayidx$i154 + -4 >> 2] * +HEAPF32[$arrayidx4$i145 >> 2] + +HEAPF32[$arrayidx$i154 + -8 >> 2] * +HEAPF32[$arrayidx7$i146 >> 2] + +HEAPF32[$arrayidx$i154 + -12 >> 2] * +HEAPF32[$arrayidx11$i147 >> 2] + +HEAPF32[$arrayidx$i154 + -16 >> 2] * +HEAPF32[$arrayidx15$i148 >> 2] + +HEAPF32[$arrayidx$i154 + -20 >> 2] * +HEAPF32[$arrayidx19$i149 >> 2] + +HEAPF32[$arrayidx$i154 + -24 >> 2] * +HEAPF32[$arrayidx23$i150 >> 2] + +HEAPF32[$arrayidx$i154 + -28 >> 2] * +HEAPF32[$arrayidx27$i151 >> 2]);
    $ix$023$i = $ix$023$i + 1 | 0;
   } while (($ix$023$i | 0) != ($length | 0));
   $mul = $Order << 2;
   _memset($r_LPC | 0, 0, $mul | 0) | 0;
   return;
  }
 case 10:
  {
   if (($length | 0) <= 10) {
    $mul = $Order << 2;
    _memset($r_LPC | 0, 0, $mul | 0) | 0;
    return;
   }
   $arrayidx4$i101 = $PredCoef + 4 | 0;
   $arrayidx7$i102 = $PredCoef + 8 | 0;
   $arrayidx11$i103 = $PredCoef + 12 | 0;
   $arrayidx15$i104 = $PredCoef + 16 | 0;
   $arrayidx19$i105 = $PredCoef + 20 | 0;
   $arrayidx23$i106 = $PredCoef + 24 | 0;
   $arrayidx27$i107 = $PredCoef + 28 | 0;
   $arrayidx31$i108 = $PredCoef + 32 | 0;
   $arrayidx35$i109 = $PredCoef + 36 | 0;
   $ix$027$i = 10;
   do {
    $arrayidx$i112 = $s + ($ix$027$i + -1 << 2) | 0;
    HEAPF32[$r_LPC + ($ix$027$i << 2) >> 2] = +HEAPF32[$s + ($ix$027$i << 2) >> 2] - (+HEAPF32[$arrayidx$i112 >> 2] * +HEAPF32[$PredCoef >> 2] + +HEAPF32[$arrayidx$i112 + -4 >> 2] * +HEAPF32[$arrayidx4$i101 >> 2] + +HEAPF32[$arrayidx$i112 + -8 >> 2] * +HEAPF32[$arrayidx7$i102 >> 2] + +HEAPF32[$arrayidx$i112 + -12 >> 2] * +HEAPF32[$arrayidx11$i103 >> 2] + +HEAPF32[$arrayidx$i112 + -16 >> 2] * +HEAPF32[$arrayidx15$i104 >> 2] + +HEAPF32[$arrayidx$i112 + -20 >> 2] * +HEAPF32[$arrayidx19$i105 >> 2] + +HEAPF32[$arrayidx$i112 + -24 >> 2] * +HEAPF32[$arrayidx23$i106 >> 2] + +HEAPF32[$arrayidx$i112 + -28 >> 2] * +HEAPF32[$arrayidx27$i107 >> 2] + +HEAPF32[$arrayidx$i112 + -32 >> 2] * +HEAPF32[$arrayidx31$i108 >> 2] + +HEAPF32[$arrayidx$i112 + -36 >> 2] * +HEAPF32[$arrayidx35$i109 >> 2]);
    $ix$027$i = $ix$027$i + 1 | 0;
   } while (($ix$027$i | 0) != ($length | 0));
   $mul = $Order << 2;
   _memset($r_LPC | 0, 0, $mul | 0) | 0;
   return;
  }
 case 12:
  {
   if (($length | 0) <= 12) {
    $mul = $Order << 2;
    _memset($r_LPC | 0, 0, $mul | 0) | 0;
    return;
   }
   $arrayidx4$i49 = $PredCoef + 4 | 0;
   $arrayidx7$i50 = $PredCoef + 8 | 0;
   $arrayidx11$i51 = $PredCoef + 12 | 0;
   $arrayidx15$i52 = $PredCoef + 16 | 0;
   $arrayidx19$i53 = $PredCoef + 20 | 0;
   $arrayidx23$i54 = $PredCoef + 24 | 0;
   $arrayidx27$i55 = $PredCoef + 28 | 0;
   $arrayidx31$i56 = $PredCoef + 32 | 0;
   $arrayidx35$i57 = $PredCoef + 36 | 0;
   $arrayidx39$i58 = $PredCoef + 40 | 0;
   $arrayidx43$i59 = $PredCoef + 44 | 0;
   $ix$031$i = 12;
   do {
    $arrayidx$i62 = $s + ($ix$031$i + -1 << 2) | 0;
    HEAPF32[$r_LPC + ($ix$031$i << 2) >> 2] = +HEAPF32[$s + ($ix$031$i << 2) >> 2] - (+HEAPF32[$arrayidx$i62 >> 2] * +HEAPF32[$PredCoef >> 2] + +HEAPF32[$arrayidx$i62 + -4 >> 2] * +HEAPF32[$arrayidx4$i49 >> 2] + +HEAPF32[$arrayidx$i62 + -8 >> 2] * +HEAPF32[$arrayidx7$i50 >> 2] + +HEAPF32[$arrayidx$i62 + -12 >> 2] * +HEAPF32[$arrayidx11$i51 >> 2] + +HEAPF32[$arrayidx$i62 + -16 >> 2] * +HEAPF32[$arrayidx15$i52 >> 2] + +HEAPF32[$arrayidx$i62 + -20 >> 2] * +HEAPF32[$arrayidx19$i53 >> 2] + +HEAPF32[$arrayidx$i62 + -24 >> 2] * +HEAPF32[$arrayidx23$i54 >> 2] + +HEAPF32[$arrayidx$i62 + -28 >> 2] * +HEAPF32[$arrayidx27$i55 >> 2] + +HEAPF32[$arrayidx$i62 + -32 >> 2] * +HEAPF32[$arrayidx31$i56 >> 2] + +HEAPF32[$arrayidx$i62 + -36 >> 2] * +HEAPF32[$arrayidx35$i57 >> 2] + +HEAPF32[$arrayidx$i62 + -40 >> 2] * +HEAPF32[$arrayidx39$i58 >> 2] + +HEAPF32[$arrayidx$i62 + -44 >> 2] * +HEAPF32[$arrayidx43$i59 >> 2]);
    $ix$031$i = $ix$031$i + 1 | 0;
   } while (($ix$031$i | 0) != ($length | 0));
   $mul = $Order << 2;
   _memset($r_LPC | 0, 0, $mul | 0) | 0;
   return;
  }
 case 16:
  {
   if (($length | 0) <= 16) {
    $mul = $Order << 2;
    _memset($r_LPC | 0, 0, $mul | 0) | 0;
    return;
   }
   $arrayidx4$i21 = $PredCoef + 4 | 0;
   $arrayidx7$i22 = $PredCoef + 8 | 0;
   $arrayidx11$i23 = $PredCoef + 12 | 0;
   $arrayidx15$i24 = $PredCoef + 16 | 0;
   $arrayidx19$i25 = $PredCoef + 20 | 0;
   $arrayidx23$i = $PredCoef + 24 | 0;
   $arrayidx27$i = $PredCoef + 28 | 0;
   $arrayidx31$i = $PredCoef + 32 | 0;
   $arrayidx35$i = $PredCoef + 36 | 0;
   $arrayidx39$i = $PredCoef + 40 | 0;
   $arrayidx43$i = $PredCoef + 44 | 0;
   $arrayidx47$i = $PredCoef + 48 | 0;
   $arrayidx51$i = $PredCoef + 52 | 0;
   $arrayidx55$i = $PredCoef + 56 | 0;
   $arrayidx59$i = $PredCoef + 60 | 0;
   $ix$039$i = 16;
   do {
    $arrayidx$i28 = $s + ($ix$039$i + -1 << 2) | 0;
    HEAPF32[$r_LPC + ($ix$039$i << 2) >> 2] = +HEAPF32[$s + ($ix$039$i << 2) >> 2] - (+HEAPF32[$arrayidx$i28 >> 2] * +HEAPF32[$PredCoef >> 2] + +HEAPF32[$arrayidx$i28 + -4 >> 2] * +HEAPF32[$arrayidx4$i21 >> 2] + +HEAPF32[$arrayidx$i28 + -8 >> 2] * +HEAPF32[$arrayidx7$i22 >> 2] + +HEAPF32[$arrayidx$i28 + -12 >> 2] * +HEAPF32[$arrayidx11$i23 >> 2] + +HEAPF32[$arrayidx$i28 + -16 >> 2] * +HEAPF32[$arrayidx15$i24 >> 2] + +HEAPF32[$arrayidx$i28 + -20 >> 2] * +HEAPF32[$arrayidx19$i25 >> 2] + +HEAPF32[$arrayidx$i28 + -24 >> 2] * +HEAPF32[$arrayidx23$i >> 2] + +HEAPF32[$arrayidx$i28 + -28 >> 2] * +HEAPF32[$arrayidx27$i >> 2] + +HEAPF32[$arrayidx$i28 + -32 >> 2] * +HEAPF32[$arrayidx31$i >> 2] + +HEAPF32[$arrayidx$i28 + -36 >> 2] * +HEAPF32[$arrayidx35$i >> 2] + +HEAPF32[$arrayidx$i28 + -40 >> 2] * +HEAPF32[$arrayidx39$i >> 2] + +HEAPF32[$arrayidx$i28 + -44 >> 2] * +HEAPF32[$arrayidx43$i >> 2] + +HEAPF32[$arrayidx$i28 + -48 >> 2] * +HEAPF32[$arrayidx47$i >> 2] + +HEAPF32[$arrayidx$i28 + -52 >> 2] * +HEAPF32[$arrayidx51$i >> 2] + +HEAPF32[$arrayidx$i28 + -56 >> 2] * +HEAPF32[$arrayidx55$i >> 2] + +HEAPF32[$arrayidx$i28 + -60 >> 2] * +HEAPF32[$arrayidx59$i >> 2]);
    $ix$039$i = $ix$039$i + 1 | 0;
   } while (($ix$039$i | 0) != ($length | 0));
   $mul = $Order << 2;
   _memset($r_LPC | 0, 0, $mul | 0) | 0;
   return;
  }
 default:
  _celt_fatal(56336, 54239, 242);
 }
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $0 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $3 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $42 = 0, $47 = 0, $7 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0143 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky55$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $call4$i15$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i132 = 0, $conv$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i82 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i103 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $0 = HEAP8[$__ky$0 + 11 >> 0] | 0;
  if ($0 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $0 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__e$sroa$0$0 = $__e$0;
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $2 = HEAP32[$__b >> 2] | 0;
  do if (!$2) $12 = 1; else {
   $3 = HEAP32[$2 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 63]($2) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $12 = 1;
    break;
   } else {
    $12 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) {
   $13 = 1;
   $20 = 0;
   $__e$sroa$0$1 = 0;
  } else {
   $7 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$7 >> 0] | 0) | 0;
   $call4$i15$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0;
   $13 = $call4$i15$i$i;
   $20 = $call4$i15$i$i ? 0 : $__e$sroa$0$0;
   $__e$sroa$0$1 = $call4$i15$i$i ? 0 : $__e$sroa$0$0;
  }
  $15 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($12 ^ $13))) break;
  $25 = HEAP32[$15 + 12 >> 2] | 0;
  if (($25 | 0) == (HEAP32[$15 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$25 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($__case_sensitive) $__c$0 = $conv$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $conv$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 11 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $33 = HEAP8[$cond$i$i$i + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $33; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $33) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $35 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($35 << 24 >> 24 < 0) $cond$i132 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i132 = $35 & 255;
    if (($cond$i132 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L66 : do if ($__consume$0$off0) {
   $37 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $37 + 12 | 0;
   $38 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($38 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 40 >> 2] & 63]($37) | 0; else HEAP32[$__ninp_$i$i >> 2] = $38 + 1;
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky55$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky55$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L66;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $42 = HEAP8[$__ky55$0 + 11 >> 0] | 0;
      if ($42 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky55$0 + 4 >> 2] | 0; else $cond$i = $42 & 255;
      if (($cond$i | 0) == ($add | 0)) $__n_does_match$7 = $__n_does_match$6; else {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      }
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky55$0 = $__ky55$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__e$sroa$0$0 = $__e$sroa$0$1;
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if (!$15) $47 = 1; else {
  $16 = HEAP32[$15 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$15 + 16 >> 2] | 0)) $retval$0$i$i$i$i82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0; else $retval$0$i$i$i$i82 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$16 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i82) | 0) {
   HEAP32[$__b >> 2] = 0;
   $47 = 1;
   break;
  } else {
   $47 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$20) label = 39; else {
  $21 = HEAP32[$20 + 12 >> 2] | 0;
  if (($21 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $retval$0$i$i13$i$i103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 63]($20) | 0; else $retval$0$i$i13$i$i103 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i103) | 0) label = 39; else if (!$47) label = 77;
 }
 if ((label | 0) == 39) if ($47) label = 77;
 if ((label | 0) == 77) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 82;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0143 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 82) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0143 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0143 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $26 = 0, $3 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $50 = 0, $8 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0144 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky53$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $call4$i15$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i133 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i84 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i105 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $1 = HEAP8[$__ky$0 + 8 + 3 >> 0] | 0;
  if ($1 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $1 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__e$sroa$0$0 = $__e$0;
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $3 = HEAP32[$__b >> 2] | 0;
  do if (!$3) $13 = 1; else {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$4 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $13 = 1;
    break;
   } else {
    $13 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) {
   $14 = 1;
   $21 = 0;
   $__e$sroa$0$1 = 0;
  } else {
   $8 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   $call4$i15$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0;
   $14 = $call4$i15$i$i;
   $21 = $call4$i15$i$i ? 0 : $__e$sroa$0$0;
   $__e$sroa$0$1 = $call4$i15$i$i ? 0 : $__e$sroa$0$0;
  }
  $16 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($13 ^ $14))) break;
  $26 = HEAP32[$16 + 12 >> 2] | 0;
  if (($26 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 63]($16) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$26 >> 2] | 0) | 0;
  if ($__case_sensitive) $__c$0 = $retval$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $retval$0$i$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 8 + 3 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $35 = HEAP32[$cond$i$i$i + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $35; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $35) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $37 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($37 << 24 >> 24 < 0) $cond$i133 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i133 = $37 & 255;
    if (($cond$i133 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L66 : do if ($__consume$0$off0) {
   $39 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $39 + 12 | 0;
   $40 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 40 >> 2] & 63]($39) | 0; else HEAP32[$__ninp_$i$i >> 2] = $40 + 4;
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky53$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky53$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L66;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $45 = HEAP8[$__ky53$0 + 8 + 3 >> 0] | 0;
      if ($45 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky53$0 + 4 >> 2] | 0; else $cond$i = $45 & 255;
      if (($cond$i | 0) == ($add | 0)) $__n_does_match$7 = $__n_does_match$6; else {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      }
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky53$0 = $__ky53$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__e$sroa$0$0 = $__e$sroa$0$1;
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if (!$16) $50 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 63]($16) | 0; else $retval$0$i$i$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i84) | 0) {
   HEAP32[$__b >> 2] = 0;
   $50 = 1;
   break;
  } else {
   $50 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$21) label = 39; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $retval$0$i$i13$i$i105 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i105) | 0) label = 39; else if (!$50) label = 77;
 }
 if ((label | 0) == 39) if ($50) label = 77;
 if ((label | 0) == 77) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 82;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0144 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 82) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0144 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0144 | 0;
}

function _celt_pitch_xcorr_c($_x, $_y, $xcorr, $len, $max_pitch) {
 $_x = $_x | 0;
 $_y = $_y | 0;
 $xcorr = $xcorr | 0;
 $len = $len | 0;
 $max_pitch = $max_pitch | 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $16 = 0.0, $18 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $44 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add$ptr = 0, $add$ptr16$us = 0, $add104$i = 0.0, $add108$i = 0.0, $add112$i = 0.0, $add116$i = 0.0, $add81$i = 0.0, $add85$i = 0.0, $add89$i = 0.0, $add93$i = 0.0, $cmp3136$i = 0, $i$0$lcssa = 0, $i$051 = 0, $i$07$i$us = 0, $i$149$us = 0, $inc$i = 0, $incdec$ptr2$i = 0, $j$0$lcssa$i = 0, $j$0140$i = 0, $scevgep$i = 0, $sub = 0, $sub$i = 0, $sum$sroa$0$0 = 0, $sum$sroa$0$1 = 0, $sum$sroa$0$2 = 0, $sum$sroa$0$3 = 0, $sum$sroa$15$0 = 0, $sum$sroa$15$1 = 0, $sum$sroa$15$2 = 0, $sum$sroa$15$3 = 0, $sum$sroa$27$0 = 0, $sum$sroa$27$1 = 0, $sum$sroa$27$2 = 0, $sum$sroa$27$3 = 0, $sum$sroa$39$1 = 0, $sum$sroa$39$2 = 0, $sum$sroa$39$3 = 0, $sum$sroa$39$4 = 0, $x$addr$0$lcssa$i = 0, $x$addr$0142$i = 0, $x$addr$1$i = 0, $x$addr$2$i = 0, $xy$08$i$us = 0.0, $y$addr$0$lcssa$i = 0, $y$addr$0141$i = 0, $y$addr$1$i = 0, $y$addr$2$i = 0, $y_0$0$lcssa$i = 0.0, $y_0$0139$i = 0.0, $y_0$1$i = 0.0, $y_1$0$lcssa$i = 0.0, $y_1$0137$i = 0.0, $y_2$0$lcssa$i = 0.0, $y_2$0138$i = 0.0, $y_3$0$lcssa$i = 0.0, $y_3$1$i = 0.0, $y_0$0139$i$looptemp = 0.0, $y_1$0137$i$looptemp = 0.0, $y_2$0138$i$looptemp = 0.0;
 if (($max_pitch | 0) <= 0) _celt_fatal(49427, 49457, 251);
 $sub = $max_pitch + -3 | 0;
 if (($max_pitch | 0) > 3) {
  $sub$i = $len + -3 | 0;
  $cmp3136$i = ($len | 0) == 3;
  $2 = (($sub$i | 0) > 4 ? $sub$i : 4) + -1 & -4;
  $3 = $2 + 4 | 0;
  $4 = $2 + 7 | 0;
  $scevgep$i = $_x + ($3 << 2) | 0;
  if (($len | 0) <= 2) _celt_fatal(49470, 49495, 69);
  $i$051 = 0;
  do {
   $add$ptr = $_y + ($i$051 << 2) | 0;
   $5 = +HEAPF32[$add$ptr >> 2];
   $6 = +HEAPF32[$add$ptr + 4 >> 2];
   $incdec$ptr2$i = $add$ptr + 12 | 0;
   $7 = +HEAPF32[$add$ptr + 8 >> 2];
   if ($cmp3136$i) {
    $26 = 0.0;
    $28 = 0.0;
    $30 = 0.0;
    $32 = 0.0;
    $j$0$lcssa$i = 0;
    $sum$sroa$0$0 = 0;
    $sum$sroa$15$0 = 0;
    $sum$sroa$27$0 = 0;
    $sum$sroa$39$1 = 0;
    $x$addr$0$lcssa$i = $_x;
    $y$addr$0$lcssa$i = $incdec$ptr2$i;
    $y_0$0$lcssa$i = $5;
    $y_1$0$lcssa$i = $6;
    $y_2$0$lcssa$i = $7;
    $y_3$0$lcssa$i = 0.0;
   } else {
    $10 = 0.0;
    $11 = 0.0;
    $12 = 0.0;
    $13 = 0.0;
    $j$0140$i = 0;
    $x$addr$0142$i = $_x;
    $y$addr$0141$i = $incdec$ptr2$i;
    $y_0$0139$i = $5;
    $y_1$0137$i = $6;
    $y_2$0138$i = $7;
    while (1) {
     $8 = +HEAPF32[$x$addr$0142$i >> 2];
     $9 = +HEAPF32[$y$addr$0141$i >> 2];
     $14 = +HEAPF32[$x$addr$0142$i + 4 >> 2];
     $y_0$0139$i$looptemp = $y_0$0139$i;
     $y_0$0139$i = +HEAPF32[$y$addr$0141$i + 4 >> 2];
     $16 = +HEAPF32[$x$addr$0142$i + 8 >> 2];
     $y_1$0137$i$looptemp = $y_1$0137$i;
     $y_1$0137$i = +HEAPF32[$y$addr$0141$i + 8 >> 2];
     $18 = +HEAPF32[$x$addr$0142$i + 12 >> 2];
     $y_2$0138$i$looptemp = $y_2$0138$i;
     $y_2$0138$i = +HEAPF32[$y$addr$0141$i + 12 >> 2];
     $10 = $10 + $y_0$0139$i$looptemp * $8 + $y_1$0137$i$looptemp * $14 + $y_2$0138$i$looptemp * $16 + $9 * $18;
     $11 = $11 + $y_1$0137$i$looptemp * $8 + $y_2$0138$i$looptemp * $14 + $9 * $16 + $y_0$0139$i * $18;
     $12 = $12 + $y_2$0138$i$looptemp * $8 + $9 * $14 + $y_0$0139$i * $16 + $y_1$0137$i * $18;
     $13 = $13 + $8 * $9 + $14 * $y_0$0139$i + $16 * $y_1$0137$i + $18 * $y_2$0138$i;
     $j$0140$i = $j$0140$i + 4 | 0;
     if (($j$0140$i | 0) >= ($sub$i | 0)) break; else {
      $x$addr$0142$i = $x$addr$0142$i + 16 | 0;
      $y$addr$0141$i = $y$addr$0141$i + 16 | 0;
     }
    }
    $20 = (HEAPF32[tempDoublePtr >> 2] = $13, HEAP32[tempDoublePtr >> 2] | 0);
    $21 = (HEAPF32[tempDoublePtr >> 2] = $12, HEAP32[tempDoublePtr >> 2] | 0);
    $22 = (HEAPF32[tempDoublePtr >> 2] = $11, HEAP32[tempDoublePtr >> 2] | 0);
    $26 = $10;
    $28 = $11;
    $30 = $12;
    $32 = $13;
    $j$0$lcssa$i = $3;
    $sum$sroa$0$0 = (HEAPF32[tempDoublePtr >> 2] = $10, HEAP32[tempDoublePtr >> 2] | 0);
    $sum$sroa$15$0 = $22;
    $sum$sroa$27$0 = $21;
    $sum$sroa$39$1 = $20;
    $x$addr$0$lcssa$i = $scevgep$i;
    $y$addr$0$lcssa$i = $add$ptr + ($4 << 2) | 0;
    $y_0$0$lcssa$i = $y_0$0139$i;
    $y_1$0$lcssa$i = $y_1$0137$i;
    $y_2$0$lcssa$i = $y_2$0138$i;
    $y_3$0$lcssa$i = $9;
   }
   $inc$i = $j$0$lcssa$i | 1;
   if (($j$0$lcssa$i | 0) < ($len | 0)) {
    $24 = +HEAPF32[$x$addr$0$lcssa$i >> 2];
    $25 = +HEAPF32[$y$addr$0$lcssa$i >> 2];
    $add81$i = $26 + $y_0$0$lcssa$i * $24;
    $27 = (HEAPF32[tempDoublePtr >> 2] = $add81$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add85$i = $28 + $y_1$0$lcssa$i * $24;
    $29 = (HEAPF32[tempDoublePtr >> 2] = $add85$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add89$i = $30 + $y_2$0$lcssa$i * $24;
    $31 = (HEAPF32[tempDoublePtr >> 2] = $add89$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add93$i = $32 + $24 * $25;
    $36 = $add81$i;
    $38 = $add85$i;
    $40 = $add89$i;
    $42 = $add93$i;
    $sum$sroa$0$1 = $27;
    $sum$sroa$15$1 = $29;
    $sum$sroa$27$1 = $31;
    $sum$sroa$39$2 = (HEAPF32[tempDoublePtr >> 2] = $add93$i, HEAP32[tempDoublePtr >> 2] | 0);
    $x$addr$1$i = $x$addr$0$lcssa$i + 4 | 0;
    $y$addr$1$i = $y$addr$0$lcssa$i + 4 | 0;
    $y_3$1$i = $25;
   } else {
    $36 = $26;
    $38 = $28;
    $40 = $30;
    $42 = $32;
    $sum$sroa$0$1 = $sum$sroa$0$0;
    $sum$sroa$15$1 = $sum$sroa$15$0;
    $sum$sroa$27$1 = $sum$sroa$27$0;
    $sum$sroa$39$2 = $sum$sroa$39$1;
    $x$addr$1$i = $x$addr$0$lcssa$i;
    $y$addr$1$i = $y$addr$0$lcssa$i;
    $y_3$1$i = $y_3$0$lcssa$i;
   }
   if (($inc$i | 0) < ($len | 0)) {
    $34 = +HEAPF32[$x$addr$1$i >> 2];
    $35 = +HEAPF32[$y$addr$1$i >> 2];
    $add104$i = $36 + $y_1$0$lcssa$i * $34;
    $37 = (HEAPF32[tempDoublePtr >> 2] = $add104$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add108$i = $38 + $y_2$0$lcssa$i * $34;
    $39 = (HEAPF32[tempDoublePtr >> 2] = $add108$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add112$i = $40 + $y_3$1$i * $34;
    $41 = (HEAPF32[tempDoublePtr >> 2] = $add112$i, HEAP32[tempDoublePtr >> 2] | 0);
    $add116$i = $42 + $34 * $35;
    $46 = $add104$i;
    $48 = $add108$i;
    $50 = $add112$i;
    $52 = $add116$i;
    $sum$sroa$0$2 = $37;
    $sum$sroa$15$2 = $39;
    $sum$sroa$27$2 = $41;
    $sum$sroa$39$3 = (HEAPF32[tempDoublePtr >> 2] = $add116$i, HEAP32[tempDoublePtr >> 2] | 0);
    $x$addr$2$i = $x$addr$1$i + 4 | 0;
    $y$addr$2$i = $y$addr$1$i + 4 | 0;
    $y_0$1$i = $35;
   } else {
    $46 = $36;
    $48 = $38;
    $50 = $40;
    $52 = $42;
    $sum$sroa$0$2 = $sum$sroa$0$1;
    $sum$sroa$15$2 = $sum$sroa$15$1;
    $sum$sroa$27$2 = $sum$sroa$27$1;
    $sum$sroa$39$3 = $sum$sroa$39$2;
    $x$addr$2$i = $x$addr$1$i;
    $y$addr$2$i = $y$addr$1$i;
    $y_0$1$i = $y_0$0$lcssa$i;
   }
   if (($inc$i + 1 | 0) < ($len | 0)) {
    $44 = +HEAPF32[$x$addr$2$i >> 2];
    $47 = (HEAPF32[tempDoublePtr >> 2] = $46 + $y_2$0$lcssa$i * $44, HEAP32[tempDoublePtr >> 2] | 0);
    $49 = (HEAPF32[tempDoublePtr >> 2] = $48 + $y_3$1$i * $44, HEAP32[tempDoublePtr >> 2] | 0);
    $51 = (HEAPF32[tempDoublePtr >> 2] = $50 + $y_0$1$i * $44, HEAP32[tempDoublePtr >> 2] | 0);
    $sum$sroa$0$3 = $47;
    $sum$sroa$15$3 = $49;
    $sum$sroa$27$3 = $51;
    $sum$sroa$39$4 = (HEAPF32[tempDoublePtr >> 2] = $52 + $44 * +HEAPF32[$y$addr$2$i >> 2], HEAP32[tempDoublePtr >> 2] | 0);
   } else {
    $sum$sroa$0$3 = $sum$sroa$0$2;
    $sum$sroa$15$3 = $sum$sroa$15$2;
    $sum$sroa$27$3 = $sum$sroa$27$2;
    $sum$sroa$39$4 = $sum$sroa$39$3;
   }
   HEAP32[$xcorr + ($i$051 << 2) >> 2] = $sum$sroa$0$3;
   HEAP32[$xcorr + (($i$051 | 1) << 2) >> 2] = $sum$sroa$15$3;
   HEAP32[$xcorr + (($i$051 | 2) << 2) >> 2] = $sum$sroa$27$3;
   HEAP32[$xcorr + (($i$051 | 3) << 2) >> 2] = $sum$sroa$39$4;
   $i$051 = $i$051 + 4 | 0;
  } while (($i$051 | 0) < ($sub | 0));
  $i$0$lcssa = $max_pitch & -4;
 } else $i$0$lcssa = 0;
 if (($i$0$lcssa | 0) >= ($max_pitch | 0)) return;
 if (($len | 0) <= 0) {
  _memset($xcorr + ($i$0$lcssa << 2) | 0, 0, $max_pitch - $i$0$lcssa << 2 | 0) | 0;
  return;
 }
 $i$149$us = $i$0$lcssa;
 do {
  $add$ptr16$us = $_y + ($i$149$us << 2) | 0;
  $i$07$i$us = 0;
  $xy$08$i$us = 0.0;
  do {
   $xy$08$i$us = $xy$08$i$us + +HEAPF32[$_x + ($i$07$i$us << 2) >> 2] * +HEAPF32[$add$ptr16$us + ($i$07$i$us << 2) >> 2];
   $i$07$i$us = $i$07$i$us + 1 | 0;
  } while (($i$07$i$us | 0) != ($len | 0));
  HEAPF32[$xcorr + ($i$149$us << 2) >> 2] = $xy$08$i$us;
  $i$149$us = $i$149$us + 1 | 0;
 } while (($i$149$us | 0) != ($max_pitch | 0));
 return;
}

function _opus_decode_native($st, $data, $len, $pcm, $frame_size, $decode_fec) {
 $st = $st | 0;
 $data = $data | 0;
 $len = $len | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $decode_fec = $decode_fec | 0;
 var $0 = 0, $1 = 0, $13 = 0, $18 = 0, $21 = 0, $3 = 0, $7 = 0, $add$ptr41 = 0, $add120 = 0, $add21$i = 0, $and19$i = 0, $and3$i123 = 0, $arrayidx102 = 0, $audiosize$0$i = 0, $bandwidth$0$i15 = 0, $call = 0, $call108 = 0, $call155 = 0, $call37 = 0, $call58 = 0, $call74 = 0, $channels$i = 0, $cmp$i = 0, $cmp13 = 0, $cmp3 = 0, $cmp5 = 0, $conv$i = 0, $data$addr$0139 = 0, $data$val = 0, $i$0138 = 0, $last_packet_duration53 = 0, $mode = 0, $nb_samples$0$lcssa = 0, $nb_samples$0137 = 0, $offset = 0, $pcm_count$1158 = 0, $retval$6 = 0, $size = 0, $spec$select$i = 0, $stream_channels$i = 0, $sub54 = 0, $tobool = 0, $tobool$i = 0, $toc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $offset = sp + 96 | 0;
 $toc = sp + 100 | 0;
 $size = sp;
 $channels$i = $st + 8 | 0;
 $0 = HEAP32[$channels$i >> 2] | 0;
 if (($0 + -1 | 0) >>> 0 >= 2) _celt_fatal(55208, 55265, 84);
 $1 = HEAP32[$st + 12 >> 2] | 0;
 L4 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
  switch ($1 | 0) {
  case 8e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55284, 55265, 85);
 } else {
  switch ($1 | 0) {
  case 12e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55284, 55265, 85);
 } else {
  if (($1 | 0) < 24e3) {
   switch ($1 | 0) {
   case 16e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(55284, 55265, 85);
  }
  if (($1 | 0) < 48e3) {
   switch ($1 | 0) {
   case 24e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(55284, 55265, 85);
  } else {
   switch ($1 | 0) {
   case 48e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(55284, 55265, 85);
  }
 } while (0);
 if ((HEAP32[$st + 24 >> 2] | 0) != ($1 | 0)) _celt_fatal(55393, 55265, 86);
 $3 = HEAP32[$st + 28 >> 2] | 0;
 L25 : do if (($3 | 0) < 12e3) if (($3 | 0) < 8e3) {
  switch ($3 | 0) {
  case 0:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55451, 55265, 87);
 } else {
  switch ($3 | 0) {
  case 8e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55451, 55265, 87);
 } else if (($3 | 0) < 16e3) {
  switch ($3 | 0) {
  case 12e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55451, 55265, 87);
 } else {
  switch ($3 | 0) {
  case 16e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(55451, 55265, 87);
 } while (0);
 if ((HEAP32[$st + 16 >> 2] | 0) != ($0 | 0)) _celt_fatal(55645, 55265, 88);
 if ((HEAP32[$st + 20 >> 2] | 0) >>> 0 >= 3) _celt_fatal(55707, 55265, 89);
 switch (HEAP32[$st + 32 >> 2] | 0) {
 case 60:
 case 40:
 case 20:
 case 10:
 case 0:
  break;
 default:
  _celt_fatal(55845, 55265, 90);
 }
 $7 = HEAP32[$st + 44 >> 2] | 0;
 if (($7 | 0) <= -1) _celt_fatal(56054, 55265, 92);
 if ($7 | 0) _celt_fatal(56086, 55265, 93);
 $stream_channels$i = $st + 48 | 0;
 if (((HEAP32[$stream_channels$i >> 2] | 0) + -1 | 0) >>> 0 >= 2) _celt_fatal(56130, 55265, 95);
 if ($decode_fec >>> 0 > 1) {
  $retval$6 = -1;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 $tobool = ($decode_fec | 0) != 0;
 $cmp3 = ($len | 0) == 0;
 $cmp5 = ($data | 0) == 0;
 if ($cmp5 | ($cmp3 | $tobool)) if (($frame_size | 0) % (($1 >>> 0) / 400 | 0 | 0) | 0 | 0) {
  $retval$6 = -1;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 if ($cmp5 | $cmp3) {
  $call155 = _opus_decode_frame($st, 0, 0, $pcm, $frame_size, 0) | 0;
  if (($call155 | 0) < 0) {
   $retval$6 = $call155;
   STACKTOP = sp;
   return $retval$6 | 0;
  }
  $pcm_count$1158 = $call155;
  while (1) {
   if (($pcm_count$1158 | 0) >= ($frame_size | 0)) break;
   $call = _opus_decode_frame($st, 0, 0, $pcm + ((Math_imul(HEAP32[$channels$i >> 2] | 0, $pcm_count$1158) | 0) << 2) | 0, $frame_size - $pcm_count$1158 | 0, 0) | 0;
   $cmp13 = ($call | 0) < 0;
   if ($cmp13) {
    $retval$6 = $call;
    label = 62;
    break;
   } else $pcm_count$1158 = ($cmp13 ? 0 : $call) + $pcm_count$1158 | 0;
  }
  if ((label | 0) == 62) {
   STACKTOP = sp;
   return $retval$6 | 0;
  }
  if (($pcm_count$1158 | 0) != ($frame_size | 0)) _celt_fatal(56201, 55265, 652);
  HEAP32[$st + 72 >> 2] = $frame_size;
  $retval$6 = $frame_size;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 if (($len | 0) < 0) {
  $retval$6 = -1;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 $data$val = HEAP8[$data >> 0] | 0;
 $conv$i = $data$val & 255;
 $tobool$i = ($conv$i & 128 | 0) == 0;
 $cmp$i = ($conv$i & 96 | 0) == 96;
 $spec$select$i = $tobool$i ? ($cmp$i ? 1001 : 1e3) : 1002;
 do if ($tobool$i) if ($cmp$i) {
  $13 = $conv$i >>> 4 & 1 | 1104;
  if (!($conv$i & 8)) {
   $audiosize$0$i = ($1 | 0) / 100 | 0;
   $bandwidth$0$i15 = $13;
   break;
  } else {
   $audiosize$0$i = ($1 | 0) / 50 | 0;
   $bandwidth$0$i15 = $13;
   break;
  }
 } else {
  $add21$i = ($conv$i >>> 5 & 3) + 1101 | 0;
  $and19$i = $conv$i >>> 3 & 3;
  if (($and19$i | 0) == 3) {
   $audiosize$0$i = ($1 * 60 | 0) / 1e3 | 0;
   $bandwidth$0$i15 = $add21$i;
   break;
  } else {
   $audiosize$0$i = ($1 << $and19$i | 0) / 100 | 0;
   $bandwidth$0$i15 = $add21$i;
   break;
  }
 } else {
  $and3$i123 = $conv$i >>> 5 & 3;
  $audiosize$0$i = ($1 << ($conv$i >>> 3 & 3) | 0) / 400 | 0;
  $bandwidth$0$i15 = ($and3$i123 | 0) == 0 ? 1101 : $and3$i123 + 1102 | 0;
 } while (0);
 $18 = (($data$val & 255) >>> 2 & 1) + 1 & 255;
 $call37 = _opus_packet_parse_impl($data, $len, $toc, 0, $size, $offset) | 0;
 if (($call37 | 0) < 0) {
  $retval$6 = $call37;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 $add$ptr41 = $data + (HEAP32[$offset >> 2] | 0) | 0;
 if (!$tobool) {
  if ((Math_imul($call37, $audiosize$0$i) | 0) > ($frame_size | 0)) {
   $retval$6 = -2;
   STACKTOP = sp;
   return $retval$6 | 0;
  }
  HEAP32[$st + 56 >> 2] = $spec$select$i;
  HEAP32[$st + 52 >> 2] = $bandwidth$0$i15;
  HEAP32[$st + 64 >> 2] = $audiosize$0$i;
  HEAP32[$stream_channels$i >> 2] = $18;
  L104 : do if (($call37 | 0) > 0) {
   $data$addr$0139 = $add$ptr41;
   $i$0138 = 0;
   $nb_samples$0137 = 0;
   while (1) {
    $arrayidx102 = $size + ($i$0138 << 1) | 0;
    $call108 = _opus_decode_frame($st, $data$addr$0139, HEAP16[$arrayidx102 >> 1] | 0, $pcm + ((Math_imul(HEAP32[$channels$i >> 2] | 0, $nb_samples$0137) | 0) << 2) | 0, $frame_size - $nb_samples$0137 | 0, 0) | 0;
    if (($call108 | 0) < 0) {
     $retval$6 = $call108;
     label = 62;
     break;
    }
    if (($call108 | 0) != ($audiosize$0$i | 0)) {
     label = 59;
     break;
    }
    $add120 = $audiosize$0$i + $nb_samples$0137 | 0;
    $i$0138 = $i$0138 + 1 | 0;
    if (($i$0138 | 0) >= ($call37 | 0)) {
     $nb_samples$0$lcssa = $add120;
     break L104;
    } else {
     $data$addr$0139 = $data$addr$0139 + (HEAP16[$arrayidx102 >> 1] | 0) | 0;
     $nb_samples$0137 = $add120;
    }
   }
   if ((label | 0) == 59) _celt_fatal(56295, 55265, 724); else if ((label | 0) == 62) {
    STACKTOP = sp;
    return $retval$6 | 0;
   }
  } else $nb_samples$0$lcssa = 0; while (0);
  HEAP32[$st + 72 >> 2] = $nb_samples$0$lcssa;
  HEAPF32[$st + 80 >> 2] = 0.0;
  HEAPF32[$st + 76 >> 2] = 0.0;
  $retval$6 = $nb_samples$0$lcssa;
  STACKTOP = sp;
  return $retval$6 | 0;
 }
 if (!(($spec$select$i | 0) == 1002 | ($audiosize$0$i | 0) > ($frame_size | 0))) {
  $mode = $st + 56 | 0;
  if ((HEAP32[$mode >> 2] | 0) != 1002) {
   $last_packet_duration53 = $st + 72 | 0;
   $21 = HEAP32[$last_packet_duration53 >> 2] | 0;
   $sub54 = $frame_size - $audiosize$0$i | 0;
   do if ($sub54 | 0) {
    $call58 = _opus_decode_native($st, 0, 0, $pcm, $sub54, 0) | 0;
    if (($call58 | 0) < 0) {
     HEAP32[$last_packet_duration53 >> 2] = $21;
     $retval$6 = $call58;
     STACKTOP = sp;
     return $retval$6 | 0;
    } else {
     if (($call58 | 0) == ($sub54 | 0)) break;
     _celt_fatal(56243, 55265, 689);
    }
   } while (0);
   HEAP32[$mode >> 2] = $spec$select$i;
   HEAP32[$st + 52 >> 2] = $bandwidth$0$i15;
   HEAP32[$st + 64 >> 2] = $audiosize$0$i;
   HEAP32[$stream_channels$i >> 2] = $18;
   $call74 = _opus_decode_frame($st, $add$ptr41, HEAP16[$size >> 1] | 0, $pcm + ((Math_imul(HEAP32[$channels$i >> 2] | 0, $sub54) | 0) << 2) | 0, $audiosize$0$i, 1) | 0;
   if (($call74 | 0) < 0) {
    $retval$6 = $call74;
    STACKTOP = sp;
    return $retval$6 | 0;
   }
   HEAP32[$last_packet_duration53 >> 2] = $frame_size;
   $retval$6 = $frame_size;
   STACKTOP = sp;
   return $retval$6 | 0;
  }
 }
 $retval$6 = _opus_decode_native($st, 0, 0, $pcm, $frame_size, 0) | 0;
 STACKTOP = sp;
 return $retval$6 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__size_$i$i$i102 = 0, $__size_$i$i$i111 = 0, $__size_$i$i$i132 = 0, $__size_$i2$i$i113 = 0, $__size_$i2$i$i134 = 0, $__size_$i3$i$i = 0, $add$ptr$i$i69176 = 0, $add$ptr$i159$idx = 0, $call$i = 0, $call$i110 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i138 = 0, $inc = 0, $incdec$ptr$i$i = 0, $incdec$ptr33 = 0, $incdec$ptr42 = 0, $incdec$ptr42178 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $spec$select = 0, $sub$ptr$sub$i$i = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i103 = 0, $tobool$i$i$i112 = 0, $tobool$i$i$i133 = 0, $tobool$i$i88 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i111 = $__sn + 8 + 3 | 0;
 $__size_$i2$i$i113 = $__sn + 4 | 0;
 $__size_$i$i$i132 = $__sym + 8 + 3 | 0;
 $__size_$i2$i$i134 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i102 = $__grp + 11 | 0;
 $__size_$i3$i$i = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i110 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 32) | 0;
    $8 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $call$i110;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $9 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
    $tobool$i$i$i112 = $9 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i112 ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $9 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $12 = HEAP32[($tobool$i$i$i112 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 2] | 0;
     $13 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $12;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $14 = HEAP8[$__size_$i$i$i132 >> 0] | 0;
    $tobool$i$i$i133 = $14 << 24 >> 24 < 0;
    $cond$i$i138 = $tobool$i$i$i133 ? HEAP32[$__size_$i2$i$i134 >> 2] | 0 : $14 & 255;
    if ($tobool | ($cond$i$i138 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $16 = HEAP32[$__me >> 2] | 0;
     $add$ptr$i159$idx = $cond$i$i138 << 2;
     _memmove($16 | 0, ($tobool$i$i$i133 ? HEAP32[$__sym >> 2] | 0 : $__sym) | 0, $add$ptr$i159$idx | 0) | 0;
     HEAP32[$__me >> 2] = $16 + ($add$ptr$i159$idx >> 2 << 2);
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $18 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 4 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$0 >> 2] | 0) | 0)) break;
     $__d$0 = $__d$0 + 4 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -4 | 0;
      $22 = HEAP32[$incdec$ptr33 >> 2] | 0;
      $23 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $23 + 4;
      HEAP32[$23 >> 2] = $22;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     $incdec$ptr42178 = HEAP32[$__me >> 2] | 0;
     while (1) {
      $incdec$ptr42 = $incdec$ptr42178 + 4 | 0;
      if (($__f$1 | 0) <= 0) break;
      HEAP32[$incdec$ptr42178 >> 2] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
      $incdec$ptr42178 = $incdec$ptr42;
     }
     HEAP32[$__me >> 2] = $incdec$ptr42;
     HEAP32[$incdec$ptr42178 >> 2] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0;
     $26 = HEAP32[$__me >> 2] | 0;
     $incdec$ptr51 = $26 + 4 | 0;
     HEAP32[$__me >> 2] = $incdec$ptr51;
     HEAP32[$26 >> 2] = $call$i;
     $38 = $incdec$ptr51;
    } else {
     $27 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
     $tobool$i$i$i103 = $27 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i103 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $27 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i103 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break;
      $31 = HEAP32[$__me >> 2] | 0;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $incdec$ptr63 = $31 + 4 | 0;
       HEAP32[$__me >> 2] = $incdec$ptr63;
       HEAP32[$31 >> 2] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $32 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
       $tobool$i$i88 = $32 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i88 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $32 & 255) >>> 0) {
        $35 = HEAP8[($tobool$i$i88 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        $37 = $incdec$ptr63;
        $__gl$1 = $35 << 24 >> 24 == 127 ? -1 : $35 << 24 >> 24;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $37 = $incdec$ptr63;
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $37 = $31;
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -4 | 0;
      $36 = HEAP32[$incdec$ptr81 >> 2] | 0;
      HEAP32[$__me >> 2] = $37 + 4;
      HEAP32[$37 >> 2] = $36;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
     $38 = HEAP32[$__me >> 2] | 0;
    }
    if (($18 | 0) == ($38 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $18;
     $__last$addr$0$i$i = $38;
     while (1) {
      $incdec$ptr$i$i = $__last$addr$0$i$i + -4 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $39 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
      HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i >> 2];
      HEAP32[$incdec$ptr$i$i >> 2] = $39;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $2 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
 $tobool$i$i = $2 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $2 & 255;
 if ($cond$i >>> 0 > 1) {
  $41 = HEAP32[$__sn >> 2] | 0;
  $add$ptr$i$i69176 = $tobool$i$i ? $41 + 4 | 0 : $__size_$i2$i$i113;
  $42 = HEAP32[$__me >> 2] | 0;
  $sub$ptr$sub$i$i = ($tobool$i$i ? $41 : $__sn) + ($cond$i << 2) - $add$ptr$i$i69176 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($42 | 0, $add$ptr$i$i69176 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$__me >> 2] = $42 + ($sub$ptr$sub$i$i >> 2 << 2);
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function _unquant_energy_finalise($m, $start, $end, $oldEBands, $fine_quant, $fine_priority, $bits_left, $dec, $C) {
 $m = $m | 0;
 $start = $start | 0;
 $end = $end | 0;
 $oldEBands = $oldEBands | 0;
 $fine_quant = $fine_quant | 0;
 $fine_priority = $fine_priority | 0;
 $bits_left = $bits_left | 0;
 $dec = $dec | 0;
 $C = $C | 0;
 var $$pre$i = 0, $$pre$i8 = 0, $$pre21$i = 0, $$pre21$i9 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx14 = 0, $arrayidx14$1 = 0, $available$1$i = 0, $available$1$i27 = 0, $bits_left$addr$1$lcssa = 0, $bits_left$addr$122 = 0, $bits_left$addr$122$1 = 0, $bits_left$addr$2 = 0, $bits_left$addr$2$1 = 0, $bits_left$addr$3 = 0, $bits_left$addr$3$1 = 0, $c$0 = 0, $c$0$1 = 0, $cond$i$i = 0, $cond$i$i$1 = 0, $cond$i$i$2 = 0, $cond$i$i$3 = 0, $cond$i$i20 = 0, $cond$i$i20$1 = 0, $cond$i$i20$2 = 0, $cond$i$i20$3 = 0, $dec16 = 0, $dec16$1 = 0, $end_offs$i$i = 0, $end_offs$i$i4 = 0, $end_window$i = 0, $end_window$i1 = 0, $i$020 = 0, $i$020$1 = 0, $inc$i$i = 0, $inc$i$i$1 = 0, $inc$i$i$2 = 0, $inc$i$i$3 = 0, $inc$i$i15 = 0, $inc$i$i15$1 = 0, $inc$i$i15$2 = 0, $inc$i$i15$3 = 0, $nbEBands = 0, $nbits_total$i = 0, $nbits_total$i32 = 0, $nend_bits$i = 0, $nend_bits$i2 = 0, $storage$i$i = 0, $storage$i$i5 = 0, $window$1$i = 0, $window$1$i28 = 0;
 $nbEBands = $m + 8 | 0;
 if (($start | 0) >= ($end | 0)) return;
 if (($bits_left | 0) < ($C | 0)) $bits_left$addr$1$lcssa = $bits_left; else {
  $end_window$i = $dec + 12 | 0;
  $nend_bits$i = $dec + 16 | 0;
  $end_offs$i$i = $dec + 8 | 0;
  $storage$i$i = $dec + 4 | 0;
  $nbits_total$i = $dec + 20 | 0;
  $bits_left$addr$122 = $bits_left;
  $i$020 = $start;
  while (1) {
   $arrayidx = $fine_quant + ($i$020 << 2) | 0;
   if ((HEAP32[$arrayidx >> 2] | 0) > 7) $bits_left$addr$3 = $bits_left$addr$122; else if (!(HEAP32[$fine_priority + ($i$020 << 2) >> 2] | 0)) {
    $2 = HEAP32[$nend_bits$i >> 2] | 0;
    $5 = HEAP32[$end_window$i >> 2] | 0;
    $bits_left$addr$2 = $bits_left$addr$122;
    $c$0 = 0;
    while (1) {
     if (!$2) {
      $$pre$i = HEAP32[$end_offs$i$i >> 2] | 0;
      $$pre21$i = HEAP32[$storage$i$i >> 2] | 0;
      if ($$pre$i >>> 0 < $$pre21$i >>> 0) {
       $3 = HEAP32[$dec >> 2] | 0;
       $inc$i$i = $$pre$i + 1 | 0;
       HEAP32[$end_offs$i$i >> 2] = $inc$i$i;
       $6 = $inc$i$i;
       $cond$i$i = HEAPU8[$3 + ($$pre21$i - $inc$i$i) >> 0] | 0;
      } else {
       $6 = $$pre$i;
       $cond$i$i = 0;
      }
      if ($6 >>> 0 < $$pre21$i >>> 0) {
       $30 = HEAP32[$dec >> 2] | 0;
       $inc$i$i$1 = $6 + 1 | 0;
       HEAP32[$end_offs$i$i >> 2] = $inc$i$i$1;
       $32 = $inc$i$i$1;
       $cond$i$i$1 = HEAPU8[$30 + ($$pre21$i - $inc$i$i$1) >> 0] | 0;
      } else {
       $32 = $6;
       $cond$i$i$1 = 0;
      }
      if ($32 >>> 0 < $$pre21$i >>> 0) {
       $33 = HEAP32[$dec >> 2] | 0;
       $inc$i$i$2 = $32 + 1 | 0;
       HEAP32[$end_offs$i$i >> 2] = $inc$i$i$2;
       $35 = $inc$i$i$2;
       $cond$i$i$2 = HEAPU8[$33 + ($$pre21$i - $inc$i$i$2) >> 0] | 0;
      } else {
       $35 = $32;
       $cond$i$i$2 = 0;
      }
      if ($35 >>> 0 < $$pre21$i >>> 0) {
       $36 = HEAP32[$dec >> 2] | 0;
       $inc$i$i$3 = $35 + 1 | 0;
       HEAP32[$end_offs$i$i >> 2] = $inc$i$i$3;
       $cond$i$i$3 = HEAPU8[$36 + ($$pre21$i - $inc$i$i$3) >> 0] | 0;
      } else $cond$i$i$3 = 0;
      $available$1$i = 32;
      $window$1$i = $cond$i$i$3 << 24 | ($cond$i$i$2 << 16 | ($cond$i$i$1 << 8 | ($cond$i$i | $5)));
     } else {
      $available$1$i = $2;
      $window$1$i = $5;
     }
     $5 = $window$1$i >>> 1;
     $2 = $available$1$i + -1 | 0;
     HEAP32[$end_window$i >> 2] = $5;
     HEAP32[$nend_bits$i >> 2] = $2;
     HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 1;
     $arrayidx14 = $oldEBands + ((Math_imul(HEAP32[$nbEBands >> 2] | 0, $c$0) | 0) + $i$020 << 2) | 0;
     HEAPF32[$arrayidx14 >> 2] = +HEAPF32[$arrayidx14 >> 2] + (+($window$1$i & 1 | 0) + -.5) * +(1 << 13 - (HEAP32[$arrayidx >> 2] | 0) | 0) * .00006103515625;
     $dec16 = $bits_left$addr$2 + -1 | 0;
     $c$0 = $c$0 + 1 | 0;
     if (($c$0 | 0) >= ($C | 0)) {
      $bits_left$addr$3 = $dec16;
      break;
     } else $bits_left$addr$2 = $dec16;
    }
   } else $bits_left$addr$3 = $bits_left$addr$122;
   $i$020 = $i$020 + 1 | 0;
   if (($i$020 | 0) >= ($end | 0) | ($bits_left$addr$3 | 0) < ($C | 0)) {
    $bits_left$addr$1$lcssa = $bits_left$addr$3;
    break;
   } else $bits_left$addr$122 = $bits_left$addr$3;
  }
 }
 if (($bits_left$addr$1$lcssa | 0) < ($C | 0)) return;
 $end_window$i1 = $dec + 12 | 0;
 $nend_bits$i2 = $dec + 16 | 0;
 $end_offs$i$i4 = $dec + 8 | 0;
 $storage$i$i5 = $dec + 4 | 0;
 $nbits_total$i32 = $dec + 20 | 0;
 $bits_left$addr$122$1 = $bits_left$addr$1$lcssa;
 $i$020$1 = $start;
 while (1) {
  $arrayidx$1 = $fine_quant + ($i$020$1 << 2) | 0;
  if ((HEAP32[$arrayidx$1 >> 2] | 0) > 7) $bits_left$addr$3$1 = $bits_left$addr$122$1; else if ((HEAP32[$fine_priority + ($i$020$1 << 2) >> 2] | 0) == 1) {
   $13 = HEAP32[$nend_bits$i2 >> 2] | 0;
   $16 = HEAP32[$end_window$i1 >> 2] | 0;
   $bits_left$addr$2$1 = $bits_left$addr$122$1;
   $c$0$1 = 0;
   while (1) {
    if (!$13) {
     $$pre$i8 = HEAP32[$end_offs$i$i4 >> 2] | 0;
     $$pre21$i9 = HEAP32[$storage$i$i5 >> 2] | 0;
     if ($$pre$i8 >>> 0 < $$pre21$i9 >>> 0) {
      $14 = HEAP32[$dec >> 2] | 0;
      $inc$i$i15 = $$pre$i8 + 1 | 0;
      HEAP32[$end_offs$i$i4 >> 2] = $inc$i$i15;
      $17 = $inc$i$i15;
      $cond$i$i20 = HEAPU8[$14 + ($$pre21$i9 - $inc$i$i15) >> 0] | 0;
     } else {
      $17 = $$pre$i8;
      $cond$i$i20 = 0;
     }
     if ($17 >>> 0 < $$pre21$i9 >>> 0) {
      $22 = HEAP32[$dec >> 2] | 0;
      $inc$i$i15$1 = $17 + 1 | 0;
      HEAP32[$end_offs$i$i4 >> 2] = $inc$i$i15$1;
      $24 = $inc$i$i15$1;
      $cond$i$i20$1 = HEAPU8[$22 + ($$pre21$i9 - $inc$i$i15$1) >> 0] | 0;
     } else {
      $24 = $17;
      $cond$i$i20$1 = 0;
     }
     if ($24 >>> 0 < $$pre21$i9 >>> 0) {
      $25 = HEAP32[$dec >> 2] | 0;
      $inc$i$i15$2 = $24 + 1 | 0;
      HEAP32[$end_offs$i$i4 >> 2] = $inc$i$i15$2;
      $27 = $inc$i$i15$2;
      $cond$i$i20$2 = HEAPU8[$25 + ($$pre21$i9 - $inc$i$i15$2) >> 0] | 0;
     } else {
      $27 = $24;
      $cond$i$i20$2 = 0;
     }
     if ($27 >>> 0 < $$pre21$i9 >>> 0) {
      $28 = HEAP32[$dec >> 2] | 0;
      $inc$i$i15$3 = $27 + 1 | 0;
      HEAP32[$end_offs$i$i4 >> 2] = $inc$i$i15$3;
      $cond$i$i20$3 = HEAPU8[$28 + ($$pre21$i9 - $inc$i$i15$3) >> 0] | 0;
     } else $cond$i$i20$3 = 0;
     $available$1$i27 = 32;
     $window$1$i28 = $cond$i$i20$3 << 24 | ($cond$i$i20$2 << 16 | ($cond$i$i20$1 << 8 | ($cond$i$i20 | $16)));
    } else {
     $available$1$i27 = $13;
     $window$1$i28 = $16;
    }
    $16 = $window$1$i28 >>> 1;
    $13 = $available$1$i27 + -1 | 0;
    HEAP32[$end_window$i1 >> 2] = $16;
    HEAP32[$nend_bits$i2 >> 2] = $13;
    HEAP32[$nbits_total$i32 >> 2] = (HEAP32[$nbits_total$i32 >> 2] | 0) + 1;
    $arrayidx14$1 = $oldEBands + ((Math_imul(HEAP32[$nbEBands >> 2] | 0, $c$0$1) | 0) + $i$020$1 << 2) | 0;
    HEAPF32[$arrayidx14$1 >> 2] = +HEAPF32[$arrayidx14$1 >> 2] + (+($window$1$i28 & 1 | 0) + -.5) * +(1 << 13 - (HEAP32[$arrayidx$1 >> 2] | 0) | 0) * .00006103515625;
    $dec16$1 = $bits_left$addr$2$1 + -1 | 0;
    $c$0$1 = $c$0$1 + 1 | 0;
    if (($c$0$1 | 0) >= ($C | 0)) {
     $bits_left$addr$3$1 = $dec16$1;
     break;
    } else $bits_left$addr$2$1 = $dec16$1;
   }
  } else $bits_left$addr$3$1 = $bits_left$addr$122$1;
  $i$020$1 = $i$020$1 + 1 | 0;
  if (($i$020$1 | 0) >= ($end | 0) | ($bits_left$addr$3$1 | 0) < ($C | 0)) break; else $bits_left$addr$122$1 = $bits_left$addr$3$1;
 }
 return;
}

function _ec_enc_done($_this) {
 $_this = $_this | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $54 = 0, $57 = 0, $58 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $cmp = 0, $conv$i20$i = 0, $end$1105 = 0, $end_offs = 0, $end_offs$i = 0, $end_offs$i$i = 0, $end_offs$i$i59 = 0, $end_offs$i16$i77$pre$phiZZZ2D = 0, $error = 0, $error$i = 0, $error$i70 = 0, $error26$phi$trans$insert = 0, $error26$pre$phiZ2D = 0, $error8$i80$pre$phiZZ2D = 0, $ext = 0, $ext$i73$phi$trans$insert = 0, $ext$i73$pre$phi112ZZ2D = 0, $ext15$i = 0, $inc = 0, $inc$i53 = 0, $l$1$lcssa = 0, $l$1106 = 0, $offs = 0, $offs$i = 0, $offs$i$i = 0, $offs$i$i58 = 0, $offs$i15$i76$pre$phiZZZ2D = 0, $or22 = 0, $rem$i = 0, $rem$pre$phiZ2D = 0, $retval$0$i = 0, $retval$0$i$i = 0, $retval$0$i$i69 = 0, $retval$0$i25$i = 0, $retval$0$i25$i89 = 0, $shr = 0, $shr$i96 = 0, $shr11 = 0, $shr5 = 0, $spec$select97 = 0, $storage = 0, $storage$i = 0, $storage$i$i = 0, $storage$i$i61 = 0, $storage$i18$i78$pre$phiZZZ2D = 0, $used$0$lcssa = 0, $used$0102 = 0, $window$0$lcssa = 0, $window$0101 = 0, $window$1 = 0, label = 0;
 $0 = HEAP32[$_this + 28 >> 2] | 0;
 $1 = Math_clz32($0 | 0) | 0;
 $shr = 2147483647 >>> $1;
 $2 = HEAP32[$_this + 32 >> 2] | 0;
 $and = $shr + $2 & -2147483648 >> $1;
 $cmp = ($and | $shr) >>> 0 < ($2 + $0 | 0) >>> 0;
 $shr5 = $shr >>> 1;
 $inc = ($cmp ^ 1) & 1;
 $spec$select97 = $1 + $inc | 0;
 if (!$spec$select97) {
  $l$1$lcssa = 0;
  $rem$pre$phiZ2D = $_this + 40 | 0;
 } else {
  $ext15$i = $_this + 36 | 0;
  $rem$i = $_this + 40 | 0;
  $offs$i$i = $_this + 24 | 0;
  $end_offs$i$i = $_this + 8 | 0;
  $storage$i$i = $_this + 4 | 0;
  $error$i = $_this + 44 | 0;
  $3 = ~$spec$select97;
  $7 = $1 + ($3 >>> 0 > 4294967287 ? $3 : -9) + $inc + 8 | 0;
  $end$1105 = $cmp ? $and : $shr5 + $2 & ~$shr5;
  $l$1106 = $spec$select97;
  while (1) {
   $shr11 = $end$1105 >>> 23;
   if (($shr11 | 0) == 255) HEAP32[$ext15$i >> 2] = (HEAP32[$ext15$i >> 2] | 0) + 1; else {
    $shr$i96 = $end$1105 >>> 31;
    $8 = HEAP32[$rem$i >> 2] | 0;
    if (($8 | 0) > -1) {
     $9 = HEAP32[$offs$i$i >> 2] | 0;
     if (((HEAP32[$end_offs$i$i >> 2] | 0) + $9 | 0) >>> 0 < (HEAP32[$storage$i$i >> 2] | 0) >>> 0) {
      $12 = HEAP32[$_this >> 2] | 0;
      HEAP32[$offs$i$i >> 2] = $9 + 1;
      HEAP8[$12 + $9 >> 0] = $8 + $shr$i96;
      $retval$0$i$i = 0;
     } else $retval$0$i$i = -1;
     HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i;
    }
    $14 = HEAP32[$ext15$i >> 2] | 0;
    if ($14 | 0) {
     $conv$i20$i = $shr$i96 + 255 & 255;
     $62 = $14;
     do {
      $15 = HEAP32[$offs$i$i >> 2] | 0;
      if (((HEAP32[$end_offs$i$i >> 2] | 0) + $15 | 0) >>> 0 < (HEAP32[$storage$i$i >> 2] | 0) >>> 0) {
       $18 = HEAP32[$_this >> 2] | 0;
       HEAP32[$offs$i$i >> 2] = $15 + 1;
       HEAP8[$18 + $15 >> 0] = $conv$i20$i;
       $20 = HEAP32[$ext15$i >> 2] | 0;
       $retval$0$i25$i = 0;
      } else {
       $20 = $62;
       $retval$0$i25$i = -1;
      }
      HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i25$i;
      $62 = $20 + -1 | 0;
      HEAP32[$ext15$i >> 2] = $62;
     } while (($62 | 0) != 0);
    }
    HEAP32[$rem$i >> 2] = $shr11 & 255;
   }
   if (($l$1106 | 0) > 8) {
    $end$1105 = $end$1105 << 8 & 2147483392;
    $l$1106 = $l$1106 + -8 | 0;
   } else break;
  }
  $l$1$lcssa = ($7 & -8) - ($spec$select97 + -8) | 0;
  $rem$pre$phiZ2D = $rem$i;
 }
 $25 = HEAP32[$rem$pre$phiZ2D >> 2] | 0;
 if (($25 | 0) > -1) {
  $offs$i$i58 = $_this + 24 | 0;
  $27 = HEAP32[$offs$i$i58 >> 2] | 0;
  $end_offs$i$i59 = $_this + 8 | 0;
  $storage$i$i61 = $_this + 4 | 0;
  if (((HEAP32[$end_offs$i$i59 >> 2] | 0) + $27 | 0) >>> 0 < (HEAP32[$storage$i$i61 >> 2] | 0) >>> 0) {
   $30 = HEAP32[$_this >> 2] | 0;
   HEAP32[$offs$i$i58 >> 2] = $27 + 1;
   HEAP8[$30 + $27 >> 0] = $25;
   $retval$0$i$i69 = 0;
  } else $retval$0$i$i69 = -1;
  $error$i70 = $_this + 44 | 0;
  HEAP32[$error$i70 >> 2] = HEAP32[$error$i70 >> 2] | $retval$0$i$i69;
  $ext$i73$phi$trans$insert = $_this + 36 | 0;
  $$pre = HEAP32[$ext$i73$phi$trans$insert >> 2] | 0;
  if (!$$pre) label = 28; else {
   $63 = $$pre;
   $end_offs$i16$i77$pre$phiZZZ2D = $end_offs$i$i59;
   $error8$i80$pre$phiZZ2D = $error$i70;
   $ext$i73$pre$phi112ZZ2D = $ext$i73$phi$trans$insert;
   $offs$i15$i76$pre$phiZZZ2D = $offs$i$i58;
   $storage$i18$i78$pre$phiZZZ2D = $storage$i$i61;
   label = 24;
  }
 } else {
  $ext = $_this + 36 | 0;
  $26 = HEAP32[$ext >> 2] | 0;
  if ($26 | 0) {
   $63 = $26;
   $end_offs$i16$i77$pre$phiZZZ2D = $_this + 8 | 0;
   $error8$i80$pre$phiZZ2D = $_this + 44 | 0;
   $ext$i73$pre$phi112ZZ2D = $ext;
   $offs$i15$i76$pre$phiZZZ2D = $_this + 24 | 0;
   $storage$i18$i78$pre$phiZZZ2D = $_this + 4 | 0;
   label = 24;
  }
 }
 if ((label | 0) == 24) {
  $64 = $63;
  do {
   $32 = HEAP32[$offs$i15$i76$pre$phiZZZ2D >> 2] | 0;
   if (((HEAP32[$end_offs$i16$i77$pre$phiZZZ2D >> 2] | 0) + $32 | 0) >>> 0 < (HEAP32[$storage$i18$i78$pre$phiZZZ2D >> 2] | 0) >>> 0) {
    $35 = HEAP32[$_this >> 2] | 0;
    HEAP32[$offs$i15$i76$pre$phiZZZ2D >> 2] = $32 + 1;
    HEAP8[$35 + $32 >> 0] = -1;
    $37 = HEAP32[$ext$i73$pre$phi112ZZ2D >> 2] | 0;
    $retval$0$i25$i89 = 0;
   } else {
    $37 = $64;
    $retval$0$i25$i89 = -1;
   }
   HEAP32[$error8$i80$pre$phiZZ2D >> 2] = HEAP32[$error8$i80$pre$phiZZ2D >> 2] | $retval$0$i25$i89;
   $64 = $37 + -1 | 0;
   HEAP32[$ext$i73$pre$phi112ZZ2D >> 2] = $64;
  } while (($64 | 0) != 0);
  label = 28;
 }
 if ((label | 0) == 28) HEAP32[$rem$pre$phiZ2D >> 2] = 0;
 $38 = HEAP32[$_this + 12 >> 2] | 0;
 $39 = HEAP32[$_this + 16 >> 2] | 0;
 if (($39 | 0) > 7) {
  $offs$i = $_this + 24 | 0;
  $end_offs$i = $_this + 8 | 0;
  $storage$i = $_this + 4 | 0;
  $error = $_this + 44 | 0;
  $40 = ~$39;
  $43 = $39 + (($40 | 0) > -16 ? $40 : -16) + 8 | 0;
  $used$0102 = $39;
  $window$0101 = $38;
  while (1) {
   $45 = HEAP32[$end_offs$i >> 2] | 0;
   $46 = HEAP32[$storage$i >> 2] | 0;
   if (($45 + (HEAP32[$offs$i >> 2] | 0) | 0) >>> 0 < $46 >>> 0) {
    $47 = HEAP32[$_this >> 2] | 0;
    $inc$i53 = $45 + 1 | 0;
    HEAP32[$end_offs$i >> 2] = $inc$i53;
    HEAP8[$47 + ($46 - $inc$i53) >> 0] = $window$0101;
    $retval$0$i = 0;
   } else $retval$0$i = -1;
   $or22 = HEAP32[$error >> 2] | $retval$0$i;
   HEAP32[$error >> 2] = $or22;
   $window$0101 = $window$0101 >>> 8;
   if (($used$0102 | 0) <= 15) break; else $used$0102 = $used$0102 + -8 | 0;
  }
  $52 = $or22;
  $error26$pre$phiZ2D = $error;
  $used$0$lcssa = $39 + -8 - ($43 & -8) | 0;
  $window$0$lcssa = $window$0101;
 } else {
  $error26$phi$trans$insert = $_this + 44 | 0;
  $52 = HEAP32[$error26$phi$trans$insert >> 2] | 0;
  $error26$pre$phiZ2D = $error26$phi$trans$insert;
  $used$0$lcssa = $39;
  $window$0$lcssa = $38;
 }
 if ($52 | 0) return;
 $offs = $_this + 24 | 0;
 $54 = HEAP32[$offs >> 2] | 0;
 $storage = $_this + 4 | 0;
 $end_offs = $_this + 8 | 0;
 _memset((HEAP32[$_this >> 2] | 0) + $54 | 0, 0, (HEAP32[$storage >> 2] | 0) - $54 - (HEAP32[$end_offs >> 2] | 0) | 0) | 0;
 if (($used$0$lcssa | 0) <= 0) return;
 $57 = HEAP32[$end_offs >> 2] | 0;
 $58 = HEAP32[$storage >> 2] | 0;
 if ($58 >>> 0 <= $57 >>> 0) {
  HEAP32[$error26$pre$phiZ2D >> 2] = -1;
  return;
 }
 if (($used$0$lcssa | 0) > ($l$1$lcssa | 0) ? ((HEAP32[$offs >> 2] | 0) + $57 | 0) >>> 0 >= $58 >>> 0 : 0) {
  HEAP32[$error26$pre$phiZ2D >> 2] = -1;
  $window$1 = $window$0$lcssa & (1 << $l$1$lcssa) + -1;
 } else $window$1 = $window$0$lcssa;
 $arrayidx = (HEAP32[$_this >> 2] | 0) + ($58 + ~$57) | 0;
 HEAP8[$arrayidx >> 0] = $window$1 | (HEAPU8[$arrayidx >> 0] | 0);
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__size_$i$i$i106 = 0, $__size_$i$i$i117 = 0, $__size_$i$i$i170 = 0, $__size_$i3$i$i108 = 0, $__size_$i3$i$i119 = 0, $__size_$i3$i$i172 = 0, $__tab_$i = 0, $call$i = 0, $call$i115 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i176 = 0, $inc = 0, $incdec$ptr$i$i = 0, $incdec$ptr33 = 0, $incdec$ptr81 = 0, $spec$select = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i107 = 0, $tobool$i$i$i118 = 0, $tobool$i$i$i171 = 0, $tobool$i$i89 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i117 = $__sn + 11 | 0;
 $__size_$i3$i$i119 = $__sn + 4 | 0;
 $__size_$i$i$i170 = $__sym + 11 | 0;
 $__size_$i3$i$i172 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $__tab_$i = $__ct + 8 | 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i106 = $__grp + 11 | 0;
 $__size_$i3$i$i108 = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i115 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 32) | 0;
    $6 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i115;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $7 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
    $tobool$i$i$i118 = $7 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i118 ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $7 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $10 = HEAP8[($tobool$i$i$i118 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 0] | 0;
     $11 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $10;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $12 = HEAP8[$__size_$i$i$i170 >> 0] | 0;
    $tobool$i$i$i171 = $12 << 24 >> 24 < 0;
    $cond$i$i176 = $tobool$i$i$i171 ? HEAP32[$__size_$i3$i$i172 >> 2] | 0 : $12 & 255;
    if ($tobool | ($cond$i$i176 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $14 = HEAP32[$__me >> 2] | 0;
     _memmove($14 | 0, ($tobool$i$i$i171 ? HEAP32[$__sym >> 2] | 0 : $__sym) | 0, $cond$i$i176 | 0) | 0;
     HEAP32[$__me >> 2] = $14 + $cond$i$i176;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $16 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 1 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     $17 = HEAP8[$__d$0 >> 0] | 0;
     if ($17 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($17 << 24 >> 24 << 1) >> 1] & 2048)) break;
     $__d$0 = $__d$0 + 1 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -1 | 0;
      $21 = HEAP8[$incdec$ptr33 >> 0] | 0;
      $22 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $22 + 1;
      HEAP8[$22 >> 0] = $21;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     while (1) {
      $24 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $24 + 1;
      if (($__f$1 | 0) <= 0) break;
      HEAP8[$24 >> 0] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP8[$24 >> 0] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    L32 : do if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0;
     $26 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $call$i;
    } else {
     $27 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
     $tobool$i$i$i107 = $27 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i107 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $27 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i107 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break L32;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $31 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $31 + 1;
       HEAP8[$31 >> 0] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $32 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
       $tobool$i$i89 = $32 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i89 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $32 & 255) >>> 0) {
        $35 = HEAP8[($tobool$i$i89 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        $__gl$1 = $35 << 24 >> 24 == 127 ? -1 : $35 << 24 >> 24;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -1 | 0;
      $36 = HEAP8[$incdec$ptr81 >> 0] | 0;
      $37 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $37 + 1;
      HEAP8[$37 >> 0] = $36;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
    } while (0);
    $38 = HEAP32[$__me >> 2] | 0;
    if (($16 | 0) == ($38 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $16;
     $__last$addr$0$i$i = $38;
     while (1) {
      $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $39 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
      HEAP8[$incdec$ptr$i$i >> 0] = $39;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $0 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $0 & 255;
 if ($cond$i >>> 0 > 1) {
  $41 = HEAP32[$__me >> 2] | 0;
  $42 = $cond$i + -1 | 0;
  _memmove($41 | 0, ($tobool$i$i ? HEAP32[$__sn >> 2] | 0 : $__sn) + 1 | 0, $42 | 0) | 0;
  HEAP32[$__me >> 2] = $41 + $42;
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $30 = 0, $37 = 0, $7 = 0, $add$ptr = 0, $add$ptr77 = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $call$i = 0, $call5 = 0, $call80 = 0, $cond$i$i103123 = 0, $cond$i$i87117 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp72$byval_copy = sp + 12 | 0;
 $agg$tmp71$byval_copy = sp + 8 | 0;
 $agg$tmp71 = sp + 4 | 0;
 $agg$tmp72 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp72$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp72$byval_copy >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp72$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 63]($add$ptr) | 0;
   $7 = HEAP8[$call5 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   $cond$i$i87117 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i87117, $cond$i$i87117 + (($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $7 & 255) << 2) | 0) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 12 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41440, 41472) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41472, 41504) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 28 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 4 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41504, 41548) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41552, 41572) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($__tm, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41584, 41616) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $30 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp71$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp72$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$30 & 63]($this, $agg$tmp71$byval_copy, $agg$tmp72$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 63]($add$ptr77) | 0;
   $37 = HEAP8[$call80 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i90 = $37 << 24 >> 24 < 0;
   $cond$i$i103123 = $tobool$i$i$i90 ? HEAP32[$call80 >> 2] | 0 : $call80;
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i103123, $cond$i$i103123 + (($tobool$i$i$i90 ? HEAP32[$call80 + 4 >> 2] | 0 : $37 & 255) << 2) | 0) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $29 = 0, $35 = 0, $6 = 0, $add$ptr = 0, $add$ptr77 = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $call$i = 0, $call5 = 0, $call80 = 0, $cond$i$i106127 = 0, $cond$i$i88121 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp72$byval_copy = sp + 12 | 0;
 $agg$tmp71$byval_copy = sp + 8 | 0;
 $agg$tmp71 = sp + 4 | 0;
 $agg$tmp72 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp72$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp72$byval_copy >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp72$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 63]($add$ptr) | 0;
   $6 = HEAP8[$call5 + 11 >> 0] | 0;
   $tobool$i$i$i = $6 << 24 >> 24 < 0;
   $cond$i$i88121 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i88121, $cond$i$i88121 + ($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $6 & 255) | 0) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 12 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 58962, 58970) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 58970, 58978) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 28 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 4 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 58978, 58989) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 58989, 58994) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($__tm, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 58994, 59002) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $29 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp71$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp72$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$29 & 63]($this, $agg$tmp71$byval_copy, $agg$tmp72$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 63]($add$ptr77) | 0;
   $35 = HEAP8[$call80 + 11 >> 0] | 0;
   $tobool$i$i$i92 = $35 << 24 >> 24 < 0;
   $cond$i$i106127 = $tobool$i$i$i92 ? HEAP32[$call80 >> 2] | 0 : $call80;
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i106127, $cond$i$i106127 + ($tobool$i$i$i92 ? HEAP32[$call80 + 4 >> 2] | 0 : $35 & 255) | 0) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i102 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i103 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i81 = 0, $call$i84 = 0, $call$i87 = 0, $call$i90 = 0, $call$i99 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i104 = 0, $incdec$ptr21 = 0, $incdec$ptr87 = 0, $incdec$ptr91 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65324) | 0;
 $call$i81 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65332) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $call$i81);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i84 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $call$i84;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i87 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 4;
  HEAP32[$7 >> 2] = $call$i87;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i90 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 4;
  HEAP32[$10 >> 2] = $call$i90;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   __ZNSt3__26__clocEv() | 0;
   if (!(___isxdigit_l($conv25) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   __ZNSt3__26__clocEv() | 0;
   if (!(___isdigit_l($conv34) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (!(($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $add$ptr = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $$pre$phiZ2D = $call$i;
  $41 = $add$ptr;
 } else {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i99 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 16 >> 2] & 63]($call$i81) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $call$i99;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 4;
   HEAP32[$32 >> 2] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) {
   $$pre$phiZ2D = $call$i;
   $41 = $add$ptr78;
  } else {
   $__first$addr$0$i$i102 = $add$ptr78;
   $__last$addr$0$i$i103 = $21;
   while (1) {
    $incdec$ptr$i$i104 = $__last$addr$0$i$i103 + -4 | 0;
    if ($__first$addr$0$i$i102 >>> 0 >= $incdec$ptr$i$i104 >>> 0) {
     $$pre$phiZ2D = $call$i;
     $41 = $21;
     break L19;
    }
    $22 = HEAP32[$__first$addr$0$i$i102 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i102 >> 2] = HEAP32[$incdec$ptr$i$i104 >> 2];
    HEAP32[$incdec$ptr$i$i104 >> 2] = $22;
    $__first$addr$0$i$i102 = $__first$addr$0$i$i102 + 4 | 0;
    $__last$addr$0$i$i103 = $incdec$ptr$i$i104;
   }
  }
 } while (0);
 $42 = $41;
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $39 = $42;
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 15]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr91 = $37 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr91;
  HEAP32[$37 >> 2] = $call$i111;
  $42 = $incdec$ptr91;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 12 >> 2] & 63]($call$i81) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr87 = $35 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr87;
  HEAP32[$35 >> 2] = $call$i120;
  $39 = $incdec$ptr87;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, $__nf$3, $__ne, $39) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _opus_encoder_create($Fs, $channels, $application, $error) {
 $Fs = $Fs | 0;
 $channels = $channels | 0;
 $application = $application | 0;
 $error = $error | 0;
 var $3 = 0, $5 = 0, $Fs27$i = 0, $add$ptr25$i = 0, $arch$i = 0, $call$i29 = 0, $complexity$i = 0, $reass$mul$i$i = 0, $ret$0$i$i$i = 0, $retval$0 = 0, $retval$0$i = 0, $silk_mode$i = 0, $upsample$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($Fs | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($Fs | 0) < 24e3) switch ($Fs | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($Fs | 0) < 48e3) switch ($Fs | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($Fs | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 L13 : do if ((label | 0) == 2) if (($channels + -1 | 0) >>> 0 <= 1) {
  switch ($application | 0) {
  case 2048:
  case 2049:
  case 2051:
   break;
  default:
   break L13;
  }
  $reass$mul$i$i = $channels * 4912 | 0;
  $call$i29 = _malloc($reass$mul$i$i + 38600 | 0) | 0;
  if (!$call$i29) {
   if (!$error) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   HEAP32[$error >> 2] = -7;
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  L24 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
  case 8e3:
   {
    label = 10;
    break L24;
    break;
   }
  default:
   {
    $retval$0$i = -1;
    break L24;
   }
  } else switch ($Fs | 0) {
  case 12e3:
   {
    label = 10;
    break L24;
    break;
   }
  default:
   {
    $retval$0$i = -1;
    break L24;
   }
  } else {
   if (($Fs | 0) < 24e3) switch ($Fs | 0) {
   case 16e3:
    {
     label = 10;
     break L24;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L24;
    }
   }
   if (($Fs | 0) < 48e3) switch ($Fs | 0) {
   case 24e3:
    {
     label = 10;
     break L24;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L24;
    }
   } else switch ($Fs | 0) {
   case 48e3:
    {
     label = 10;
     break L24;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L24;
    }
   }
  } while (0);
  L36 : do if ((label | 0) == 10) {
   switch ($application | 0) {
   case 2048:
   case 2049:
   case 2051:
    break;
   default:
    {
     $retval$0$i = -1;
     break L36;
    }
   }
   _memset($call$i29 | 0, 0, $reass$mul$i$i + 38600 | 0) | 0;
   HEAP32[$call$i29 + 4 >> 2] = 18140;
   HEAP32[$call$i29 >> 2] = 38356;
   $add$ptr25$i = $call$i29 + 38356 | 0;
   HEAP32[$call$i29 + 112 >> 2] = $channels;
   HEAP32[$call$i29 + 14192 >> 2] = $channels;
   $Fs27$i = $call$i29 + 144 | 0;
   HEAP32[$Fs27$i >> 2] = $Fs;
   $arch$i = $call$i29 + 180 | 0;
   HEAP32[$arch$i >> 2] = 0;
   $silk_mode$i = $call$i29 + 8 | 0;
   _silk_InitEncoder($call$i29 + 18140 | 0, 0, $silk_mode$i);
   HEAP32[$silk_mode$i >> 2] = $channels;
   HEAP32[$call$i29 + 12 >> 2] = $channels;
   HEAP32[$call$i29 + 16 >> 2] = HEAP32[$Fs27$i >> 2];
   HEAP32[$call$i29 + 20 >> 2] = 16e3;
   HEAP32[$call$i29 + 24 >> 2] = 8e3;
   HEAP32[$call$i29 + 28 >> 2] = 16e3;
   HEAP32[$call$i29 + 32 >> 2] = 20;
   HEAP32[$call$i29 + 36 >> 2] = 25e3;
   HEAP32[$call$i29 + 40 >> 2] = 0;
   $complexity$i = $call$i29 + 44 | 0;
   HEAP32[$complexity$i >> 2] = 9;
   HEAP32[$call$i29 + 48 >> 2] = 0;
   HEAP32[$call$i29 + 56 >> 2] = 0;
   HEAP32[$call$i29 + 60 >> 2] = 0;
   HEAP32[$call$i29 + 76 >> 2] = 0;
   $3 = HEAP32[$arch$i >> 2] | 0;
   _memset($add$ptr25$i | 0, 0, $reass$mul$i$i + 244 | 0) | 0;
   HEAP32[$add$ptr25$i >> 2] = 43640;
   HEAP32[$call$i29 + 38360 >> 2] = $channels;
   HEAP32[$call$i29 + 38364 >> 2] = $channels;
   $upsample$i$i$i = $call$i29 + 38384 | 0;
   HEAP32[$upsample$i$i$i >> 2] = 1;
   HEAP32[$call$i29 + 38388 >> 2] = 0;
   HEAP32[$call$i29 + 38392 >> 2] = 21;
   HEAP32[$call$i29 + 38404 >> 2] = 1;
   HEAP32[$call$i29 + 38428 >> 2] = $3;
   HEAP32[$call$i29 + 38408 >> 2] = 1;
   HEAP32[$call$i29 + 38372 >> 2] = 1;
   HEAP32[$call$i29 + 38396 >> 2] = -1;
   HEAP32[$call$i29 + 38400 >> 2] = 0;
   HEAP32[$call$i29 + 38368 >> 2] = 0;
   HEAP32[$call$i29 + 38380 >> 2] = 5;
   HEAP32[$call$i29 + 38416 >> 2] = 24;
   _opus_custom_encoder_ctl($add$ptr25$i, 4028, $vararg_buffer) | 0;
   L39 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
   case 8e3:
    {
     $ret$0$i$i$i = 6;
     break L39;
     break;
    }
   default:
    _celt_fatal(56336, 47869, 84);
   } else switch ($Fs | 0) {
   case 12e3:
    {
     $ret$0$i$i$i = 4;
     break L39;
     break;
    }
   default:
    _celt_fatal(56336, 47869, 84);
   } else {
    if (($Fs | 0) < 24e3) switch ($Fs | 0) {
    case 16e3:
     {
      $ret$0$i$i$i = 3;
      break L39;
      break;
     }
    default:
     _celt_fatal(56336, 47869, 84);
    }
    if (($Fs | 0) >= 48e3) {
     switch ($Fs | 0) {
     case 48e3:
      {
       $ret$0$i$i$i = 1;
       break L39;
       break;
      }
     default:
      {}
     }
     _celt_fatal(56336, 47869, 84);
    }
    switch ($Fs | 0) {
    case 24e3:
     {
      $ret$0$i$i$i = 2;
      break L39;
      break;
     }
    default:
     _celt_fatal(56336, 47869, 84);
    }
   } while (0);
   HEAP32[$upsample$i$i$i >> 2] = $ret$0$i$i$i;
   HEAP32[$vararg_buffer1 >> 2] = 0;
   _opus_custom_encoder_ctl($add$ptr25$i, 10016, $vararg_buffer1) | 0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$complexity$i >> 2];
   _opus_custom_encoder_ctl($add$ptr25$i, 4010, $vararg_buffer3) | 0;
   HEAP32[$call$i29 + 148 >> 2] = 1;
   HEAP32[$call$i29 + 152 >> 2] = 1;
   HEAP32[$call$i29 + 164 >> 2] = -1e3;
   HEAP32[$call$i29 + 160 >> 2] = (Math_imul($channels, $Fs) | 0) + 3e3;
   HEAP32[$call$i29 + 108 >> 2] = $application;
   HEAP32[$call$i29 + 124 >> 2] = -1e3;
   HEAP32[$call$i29 + 128 >> 2] = -1e3;
   HEAP32[$call$i29 + 132 >> 2] = 1105;
   HEAP32[$call$i29 + 120 >> 2] = -1e3;
   HEAP32[$call$i29 + 136 >> 2] = -1e3;
   HEAP32[$call$i29 + 140 >> 2] = -1;
   $5 = HEAP32[$Fs27$i >> 2] | 0;
   HEAP32[$call$i29 + 172 >> 2] = ($5 | 0) / 100 | 0;
   HEAP32[$call$i29 + 168 >> 2] = 24;
   HEAP32[$call$i29 + 156 >> 2] = 5e3;
   HEAP32[$call$i29 + 116 >> 2] = ($5 | 0) / 250 | 0;
   HEAP16[$call$i29 + 14196 >> 1] = 16384;
   HEAPF32[$call$i29 + 14204 >> 2] = 1.0;
   HEAP32[$call$i29 + 14200 >> 2] = 193536;
   HEAP32[$call$i29 + 14252 >> 2] = 1;
   HEAP32[$call$i29 + 14224 >> 2] = 1001;
   HEAP32[$call$i29 + 14240 >> 2] = 1105;
   HEAP32[$call$i29 + 188 >> 2] = 0;
   HEAP32[$call$i29 + 196 >> 2] = $5;
   _memset($call$i29 + 200 | 0, 0, 13992) | 0;
   HEAP32[$call$i29 + 192 >> 2] = $application;
   $retval$0$i = 0;
  } while (0);
  if ($error | 0) HEAP32[$error >> 2] = $retval$0$i;
  if (!$retval$0$i) {
   $retval$0 = $call$i29;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  _free($call$i29);
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 if (!$error) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$error >> 2] = -1;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _opus_custom_encoder_ctl($st, $request, $varargs) {
 $st = $st | 0;
 $request = $request | 0;
 $varargs = $varargs | 0;
 var $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $14 = 0, $145 = 0, $146 = 0, $153 = 0, $154 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $22 = 0, $23 = 0, $31 = 0, $32 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $70 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $93 = 0, $94 = 0, $add$ptr = 0, $add$ptr150 = 0, $add$ptr155 = 0, $ap = 0, $i$0124 = 0, $mul = 0, $mul149 = 0, $mul163122 = 0, $nbEBands148 = 0, $retval$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 do switch ($request | 0) {
 case 4010:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   if ($6 >>> 0 > 10) label = 43; else {
    HEAP32[$st + 24 >> 2] = $6;
    label = 42;
   }
   break;
  }
 case 10010:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   if (($14 | 0) < 0) label = 43; else if (($14 | 0) < (HEAP32[(HEAP32[$st >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$st + 32 >> 2] = $14;
    label = 42;
   } else label = 43;
   break;
  }
 case 10012:
  {
   $22 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $23 = HEAP32[$22 >> 2] | 0;
   HEAP32[$ap >> 2] = $22 + 4;
   if (($23 | 0) < 1) label = 43; else if (($23 | 0) > (HEAP32[(HEAP32[$st >> 2] | 0) + 8 >> 2] | 0)) label = 43; else {
    HEAP32[$st + 36 >> 2] = $23;
    label = 42;
   }
   break;
  }
 case 10002:
  {
   $31 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $32 = HEAP32[$31 >> 2] | 0;
   HEAP32[$ap >> 2] = $31 + 4;
   if ($32 >>> 0 > 2) label = 43; else {
    HEAP32[$st + 20 >> 2] = ($32 | 0) != 2 & 1;
    HEAP32[$st + 12 >> 2] = ($32 | 0) == 0 & 1;
    label = 42;
   }
   break;
  }
 case 4014:
  {
   $39 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $40 = HEAP32[$39 >> 2] | 0;
   HEAP32[$ap >> 2] = $39 + 4;
   if ($40 >>> 0 > 100) label = 43; else {
    HEAP32[$st + 56 >> 2] = $40;
    label = 42;
   }
   break;
  }
 case 4020:
  {
   $47 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $48 = HEAP32[$47 >> 2] | 0;
   HEAP32[$ap >> 2] = $47 + 4;
   HEAP32[$st + 52 >> 2] = $48;
   label = 42;
   break;
  }
 case 4006:
  {
   $54 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $55 = HEAP32[$54 >> 2] | 0;
   HEAP32[$ap >> 2] = $54 + 4;
   HEAP32[$st + 44 >> 2] = $55;
   label = 42;
   break;
  }
 case 4002:
  {
   $61 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $62 = HEAP32[$61 >> 2] | 0;
   HEAP32[$ap >> 2] = $61 + 4;
   if (($62 | 0) < 501 & ($62 | 0) != -1) label = 43; else {
    $mul = (HEAP32[$st + 4 >> 2] | 0) * 26e4 | 0;
    HEAP32[$st + 40 >> 2] = ($62 | 0) < ($mul | 0) ? $62 : $mul;
    label = 42;
   }
   break;
  }
 case 10008:
  {
   $69 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $70 = HEAP32[$69 >> 2] | 0;
   HEAP32[$ap >> 2] = $69 + 4;
   if (($70 + -1 | 0) >>> 0 > 1) label = 43; else {
    HEAP32[$st + 8 >> 2] = $70;
    label = 42;
   }
   break;
  }
 case 4036:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   if (($78 + -8 | 0) >>> 0 > 16) label = 43; else {
    HEAP32[$st + 60 >> 2] = $78;
    label = 42;
   }
   break;
  }
 case 4037:
  {
   $85 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $86 = HEAP32[$85 >> 2] | 0;
   HEAP32[$ap >> 2] = $85 + 4;
   HEAP32[$86 >> 2] = HEAP32[$st + 60 >> 2];
   label = 42;
   break;
  }
 case 4046:
  {
   $93 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $94 = HEAP32[$93 >> 2] | 0;
   HEAP32[$ap >> 2] = $93 + 4;
   if ($94 >>> 0 > 1) label = 43; else {
    HEAP32[$st + 68 >> 2] = $94;
    label = 42;
   }
   break;
  }
 case 4047:
  {
   $101 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $102 = HEAP32[$101 >> 2] | 0;
   HEAP32[$ap >> 2] = $101 + 4;
   if (!$102) label = 43; else {
    HEAP32[$102 >> 2] = HEAP32[$st + 68 >> 2];
    label = 42;
   }
   break;
  }
 case 4028:
  {
   $104 = HEAP32[$st + 4 >> 2] | 0;
   $105 = HEAP32[$st >> 2] | 0;
   $106 = HEAP32[$105 + 4 >> 2] | 0;
   $add$ptr = $st + 244 + ((Math_imul($106 + 1024 | 0, $104) | 0) << 2) | 0;
   $nbEBands148 = $105 + 8 | 0;
   $107 = HEAP32[$nbEBands148 >> 2] | 0;
   $mul149 = Math_imul($107, $104) | 0;
   $add$ptr150 = $add$ptr + ($mul149 << 2) | 0;
   $add$ptr155 = $add$ptr150 + ($mul149 << 2) | 0;
   _memset($st + 76 | 0, 0, (Math_imul(($106 << 2) + 4096 + ($107 << 4) | 0, $104) | 0) + 168 | 0) | 0;
   $mul163122 = Math_imul(HEAP32[$nbEBands148 >> 2] | 0, $104) | 0;
   if (($mul163122 | 0) > 0) {
    $i$0124 = 0;
    do {
     HEAPF32[$add$ptr155 + ($i$0124 << 2) >> 2] = -28.0;
     HEAPF32[$add$ptr150 + ($i$0124 << 2) >> 2] = -28.0;
     $i$0124 = $i$0124 + 1 | 0;
    } while (($i$0124 | 0) != ($mul163122 | 0));
   }
   HEAP32[$st + 216 >> 2] = 0;
   HEAPF32[$st + 84 >> 2] = 1.0;
   HEAP32[$st + 80 >> 2] = 2;
   HEAP32[$st + 88 >> 2] = 256;
   HEAP32[$st + 96 >> 2] = 0;
   HEAP32[$st + 100 >> 2] = 0;
   label = 42;
   break;
  }
 case 10016:
  {
   $114 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $115 = HEAP32[$114 >> 2] | 0;
   HEAP32[$ap >> 2] = $114 + 4;
   HEAP32[$st + 48 >> 2] = $115;
   label = 42;
   break;
  }
 case 10022:
  {
   $121 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $122 = HEAP32[$121 >> 2] | 0;
   HEAP32[$ap >> 2] = $121 + 4;
   if (!$122) label = 42; else {
    dest = $st + 120 | 0;
    src = $122;
    stop = dest + 64 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    label = 42;
   }
   break;
  }
 case 10028:
  {
   $128 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $129 = HEAP32[$128 >> 2] | 0;
   HEAP32[$ap >> 2] = $128 + 4;
   if (!$129) label = 42; else {
    $130 = $129;
    $135 = HEAP32[$130 + 4 >> 2] | 0;
    $136 = $st + 184 | 0;
    HEAP32[$136 >> 2] = HEAP32[$130 >> 2];
    HEAP32[$136 + 4 >> 2] = $135;
    label = 42;
   }
   break;
  }
 case 10015:
  {
   $145 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $146 = HEAP32[$145 >> 2] | 0;
   HEAP32[$ap >> 2] = $145 + 4;
   if (!$146) label = 43; else {
    HEAP32[$146 >> 2] = HEAP32[$st >> 2];
    label = 42;
   }
   break;
  }
 case 4031:
  {
   $153 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $154 = HEAP32[$153 >> 2] | 0;
   HEAP32[$ap >> 2] = $153 + 4;
   if (!$154) label = 43; else {
    HEAP32[$154 >> 2] = HEAP32[$st + 76 >> 2];
    label = 42;
   }
   break;
  }
 case 10024:
  {
   $161 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $162 = HEAP32[$161 >> 2] | 0;
   HEAP32[$ap >> 2] = $161 + 4;
   HEAP32[$st + 64 >> 2] = $162;
   label = 42;
   break;
  }
 case 10026:
  {
   $168 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $169 = HEAP32[$168 >> 2] | 0;
   HEAP32[$ap >> 2] = $168 + 4;
   HEAP32[$st + 236 >> 2] = $169;
   label = 42;
   break;
  }
 default:
  {
   $retval$0 = -5;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } while (0);
 if ((label | 0) == 42) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 43) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__decimal_point >> 2] | 0;
 $5 = HEAP32[$__thousands_sep >> 2] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$7 >> 2] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF32[$__v >> 2] = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__decimal_point >> 2] | 0;
 $5 = HEAP32[$__thousands_sep >> 2] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$7 >> 2] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__decimal_point >> 2] | 0;
 $5 = HEAP32[$__thousands_sep >> 2] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$7 >> 2] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__decimal_point >> 0] | 0;
 $5 = HEAP8[$__thousands_sep >> 0] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$7 >> 0] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF32[$__v >> 2] = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__decimal_point >> 0] | 0;
 $5 = HEAP8[$__thousands_sep >> 0] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$7 >> 0] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__decimal_point >> 0] | 0;
 $5 = HEAP8[$__thousands_sep >> 0] | 0;
 $11 = $__b$0;
 $6 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$6) {
   $23 = 0;
   $39 = 0;
   $48 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $7 = HEAP32[$6 + 12 >> 2] | 0;
   if (($7 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($6) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$7 >> 0] | 0) | 0;
   $call4$i$i$i24 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22) | 0;
   $23 = $call4$i$i$i24 ? 0 : $6;
   $39 = $call4$i$i$i24 ? 0 : $11;
   $48 = $call4$i$i$i24;
   $__b$sroa$0$1 = $call4$i$i$i24 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $12 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43) | 0) label = 17; else if ($48) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $42 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($48) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $17 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $17 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $17 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $23 + 12 | 0;
  $24 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $23 + 16 | 0;
  if (($24 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $4, $5, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $42 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 40 >> 2] & 63]($23) | 0; else HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
  $11 = $39;
  $6 = $23;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) == 0) $36 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $34 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $34;
  $36 = $incdec$ptr;
 } else $36 = $$pre;
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $36, $__err);
 if (!$23) {
  $49 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $37 = HEAP32[$23 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $49 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$42) label = 44; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$49) label = 46;
 }
 if ((label | 0) == 44) if ($49) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $43 = 0;
   $52 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $43 = $call4$i$i$i30 ? 0 : $10;
   $52 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($52) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $46 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($52) {
    $46 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $46 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $43;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $40 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $40 = $incdec$ptr;
 } else $40 = $$pre;
 $34 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $35 = getTempRet0() | 0;
 $36 = $__v;
 HEAP32[$36 >> 2] = $34;
 HEAP32[$36 + 4 >> 2] = $35;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $40, $__err);
 if (!$22) {
  $53 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $41 = HEAP32[$22 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $53 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$46) label = 44; else {
  $47 = HEAP32[$46 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$47 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$53) label = 46;
 }
 if ((label | 0) == 44) if ($53) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $43 = 0;
   $52 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $43 = $call4$i$i$i30 ? 0 : $10;
   $52 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($52) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $46 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($52) {
    $46 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $46 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $43;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $40 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $40 = $incdec$ptr;
 } else $40 = $$pre;
 $34 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $35 = getTempRet0() | 0;
 $36 = $__v;
 HEAP32[$36 >> 2] = $34;
 HEAP32[$36 + 4 >> 2] = $35;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $40, $__err);
 if (!$22) {
  $53 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $41 = HEAP32[$22 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $53 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$46) label = 44; else {
  $47 = HEAP32[$46 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$47 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$53) label = 46;
 }
 if ((label | 0) == 44) if ($53) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function _opus_packet_parse_impl($data, $len, $out_toc, $frames, $size, $payload_offset) {
 $data = $data | 0;
 $len = $len | 0;
 $out_toc = $out_toc | 0;
 $frames = $frames | 0;
 $size = $size | 0;
 $payload_offset = $payload_offset | 0;
 var $2 = 0, $5 = 0, $6 = 0, $add$ptr76 = 0, $and19$i = 0, $and35 = 0, $audiosize$0$i = 0, $cmp55 = 0, $conv$i = 0, $conv$i142 = 0, $conv$i160 = 0, $conv112 = 0, $conv16 = 0, $conv34 = 0, $conv80 = 0, $count$0200 = 0, $data$addr$0 = 0, $data$addr$2188 = 0, $data$addr$3220 = 0, $data$addr$4203 = 0, $data$addr$6211 = 0, $dec = 0, $dec43 = 0, $div101 = 0, $div204 = 0, $i$0217 = 0, $i$1215 = 0, $i$3210 = 0, $inc194 = 0, $incdec$ptr = 0, $incdec$ptr33 = 0, $last_size$0219 = 0, $last_size$1201 = 0, $len$addr$0 = 0, $len$addr$2186 = 0, $len$addr$3218 = 0, $retval$0$i156 = 0, $retval$0$i174 = 0, $retval$2 = 0, $storemerge = 0, $storemerge248 = 0, $sub = 0, $sub108 = 0, $sub73 = 0, $trunc = 0, label = 0, $data$addr$0$looptemp = 0;
 if (($len | 0) < 0 | ($size | 0) == 0) {
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 if (!$len) {
  $retval$2 = -4;
  return $retval$2 | 0;
 }
 $trunc = HEAP8[$data >> 0] | 0;
 $conv$i = $trunc & 255;
 do if (!($conv$i & 128)) {
  if (($conv$i & 96 | 0) == 96) {
   $audiosize$0$i = ($conv$i & 8 | 0) == 0 ? 480 : 960;
   break;
  }
  $and19$i = $conv$i >>> 3 & 3;
  if (($and19$i | 0) == 3) $audiosize$0$i = 2880; else $audiosize$0$i = (48e3 << $and19$i >>> 0) / 100 | 0;
 } else $audiosize$0$i = (48e3 << ($conv$i >>> 3 & 3) >>> 0) / 400 | 0; while (0);
 $incdec$ptr = $data + 1 | 0;
 $dec = $len + -1 | 0;
 L15 : do switch ($trunc & 3) {
 case 0:
  {
   $count$0200 = 1;
   $data$addr$4203 = $incdec$ptr;
   $last_size$1201 = $dec;
   break;
  }
 case 1:
  {
   if (!($dec & 1)) {
    $div204 = $dec >>> 1;
    HEAP16[$size >> 1] = $div204;
    $count$0200 = 2;
    $data$addr$4203 = $incdec$ptr;
    $last_size$1201 = $div204;
    break L15;
   } else {
    $retval$2 = -4;
    return $retval$2 | 0;
   }
   break;
  }
 case 2:
  {
   if (($len | 0) < 2) {
    HEAP16[$size >> 1] = -1;
    $retval$2 = -4;
    return $retval$2 | 0;
   }
   $2 = HEAP8[$incdec$ptr >> 0] | 0;
   $conv$i160 = $2 & 255;
   do if (($2 & 255) < 252) {
    $retval$0$i174 = 1;
    $storemerge = $2 & 255;
   } else {
    if (($len | 0) >= 3) {
     $retval$0$i174 = 2;
     $storemerge = (HEAPU8[$data + 2 >> 0] << 2) + $conv$i160 & 65535;
     break;
    }
    HEAP16[$size >> 1] = -1;
    $retval$2 = -4;
    return $retval$2 | 0;
   } while (0);
   HEAP16[$size >> 1] = $storemerge;
   $sub = $dec - $retval$0$i174 | 0;
   $conv16 = $storemerge << 16 >> 16;
   if (($sub | 0) < ($conv16 | 0)) {
    $retval$2 = -4;
    return $retval$2 | 0;
   } else {
    $count$0200 = 2;
    $data$addr$4203 = $incdec$ptr + $retval$0$i174 | 0;
    $last_size$1201 = $sub - $conv16 | 0;
    break L15;
   }
   break;
  }
 default:
  {
   if (($len | 0) < 2) {
    $retval$2 = -4;
    return $retval$2 | 0;
   }
   $incdec$ptr33 = $data + 2 | 0;
   $conv34 = HEAPU8[$incdec$ptr >> 0] | 0;
   $and35 = $conv34 & 63;
   if (($and35 | 0) == 0 | (Math_imul($and35, $audiosize$0$i) | 0) >>> 0 > 5760) {
    $retval$2 = -4;
    return $retval$2 | 0;
   }
   $dec43 = $len + -2 | 0;
   if (!($conv34 & 64)) {
    $data$addr$2188 = $incdec$ptr33;
    $len$addr$2186 = $dec43;
   } else {
    $data$addr$0 = $incdec$ptr33;
    $len$addr$0 = $dec43;
    do {
     if (($len$addr$0 | 0) < 1) {
      $retval$2 = -4;
      label = 53;
      break;
     }
     $data$addr$0$looptemp = $data$addr$0;
     $data$addr$0 = $data$addr$0 + 1 | 0;
     $5 = HEAP8[$data$addr$0$looptemp >> 0] | 0;
     $cmp55 = $5 << 24 >> 24 == -1;
     $len$addr$0 = $len$addr$0 + -1 - ($cmp55 ? 254 : $5 & 255) | 0;
    } while ($cmp55);
    if ((label | 0) == 53) return $retval$2 | 0;
    if (($len$addr$0 | 0) < 0) {
     $retval$2 = -4;
     return $retval$2 | 0;
    } else {
     $data$addr$2188 = $data$addr$0;
     $len$addr$2186 = $len$addr$0;
    }
   }
   if (!($conv34 & 128)) {
    $div101 = ($len$addr$2186 | 0) / ($and35 | 0) | 0;
    if ((Math_imul($div101, $and35) | 0) != ($len$addr$2186 | 0)) {
     $retval$2 = -4;
     return $retval$2 | 0;
    }
    $sub108 = $and35 + -1 | 0;
    if ($and35 >>> 0 <= 1) {
     $count$0200 = $and35;
     $data$addr$4203 = $data$addr$2188;
     $last_size$1201 = $div101;
     break L15;
    }
    $conv112 = $div101 & 65535;
    $i$1215 = 0;
    while (1) {
     HEAP16[$size + ($i$1215 << 1) >> 1] = $conv112;
     $i$1215 = $i$1215 + 1 | 0;
     if (($i$1215 | 0) == ($sub108 | 0)) {
      $count$0200 = $and35;
      $data$addr$4203 = $data$addr$2188;
      $last_size$1201 = $div101;
      break L15;
     }
    }
   }
   $sub73 = $and35 + -1 | 0;
   if ($and35 >>> 0 > 1) {
    $data$addr$3220 = $data$addr$2188;
    $i$0217 = 0;
    $last_size$0219 = $len$addr$2186;
    $len$addr$3218 = $len$addr$2186;
    while (1) {
     $add$ptr76 = $size + ($i$0217 << 1) | 0;
     if (($len$addr$3218 | 0) < 1) {
      label = 32;
      break;
     }
     $6 = HEAP8[$data$addr$3220 >> 0] | 0;
     $conv$i142 = $6 & 255;
     if (($6 & 255) < 252) {
      $retval$0$i156 = 1;
      $storemerge248 = $6 & 255;
     } else {
      if (($len$addr$3218 | 0) < 2) {
       label = 36;
       break;
      }
      $retval$0$i156 = 2;
      $storemerge248 = (HEAPU8[$data$addr$3220 + 1 >> 0] << 2) + $conv$i142 & 65535;
     }
     HEAP16[$add$ptr76 >> 1] = $storemerge248;
     $len$addr$3218 = $len$addr$3218 - $retval$0$i156 | 0;
     $conv80 = $storemerge248 << 16 >> 16;
     if (($len$addr$3218 | 0) < ($conv80 | 0)) {
      $retval$2 = -4;
      label = 53;
      break;
     }
     $data$addr$3220 = $data$addr$3220 + $retval$0$i156 | 0;
     $last_size$0219 = $last_size$0219 - $retval$0$i156 - $conv80 | 0;
     $i$0217 = $i$0217 + 1 | 0;
     if (($i$0217 | 0) >= ($sub73 | 0)) {
      label = 40;
      break;
     }
    }
    if ((label | 0) == 32) {
     HEAP16[$add$ptr76 >> 1] = -1;
     $retval$2 = -4;
     return $retval$2 | 0;
    } else if ((label | 0) == 36) {
     HEAP16[$add$ptr76 >> 1] = -1;
     $retval$2 = -4;
     return $retval$2 | 0;
    } else if ((label | 0) == 40) {
     if (($last_size$0219 | 0) < 0) $retval$2 = -4; else {
      $count$0200 = $and35;
      $data$addr$4203 = $data$addr$3220;
      $last_size$1201 = $last_size$0219;
      break L15;
     }
     return $retval$2 | 0;
    } else if ((label | 0) == 53) return $retval$2 | 0;
   } else {
    $count$0200 = $and35;
    $data$addr$4203 = $data$addr$2188;
    $last_size$1201 = $len$addr$2186;
   }
  }
 } while (0);
 if (($last_size$1201 | 0) > 1275) {
  $retval$2 = -4;
  return $retval$2 | 0;
 }
 HEAP16[$size + ($count$0200 + -1 << 1) >> 1] = $last_size$1201;
 if ($payload_offset | 0) HEAP32[$payload_offset >> 2] = $data$addr$4203 - $data;
 if (!(($count$0200 | 0) == 0 | ($frames | 0) == 0)) {
  $data$addr$6211 = $data$addr$4203;
  $i$3210 = 0;
  while (1) {
   HEAP32[$frames + ($i$3210 << 2) >> 2] = $data$addr$6211;
   $inc194 = $i$3210 + 1 | 0;
   if (($inc194 | 0) == ($count$0200 | 0)) break; else {
    $data$addr$6211 = $data$addr$6211 + (HEAP16[$size + ($i$3210 << 1) >> 1] | 0) | 0;
    $i$3210 = $inc194;
   }
  }
 }
 if (!$out_toc) {
  $retval$2 = $count$0200;
  return $retval$2 | 0;
 }
 HEAP8[$out_toc >> 0] = $trunc;
 $retval$2 = $count$0200;
 return $retval$2 | 0;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi153Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $20 = 0, $25 = 0, $6 = 0, $call$i = 0, $call$i87 = 0, $ref$tmp = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65524) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i);
   $1 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i);
   if ((HEAP8[$__sn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 11 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $$pre$phiZ2D = $call$i;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 63]($ref$tmp, $call$i);
   $6 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $6;
   HEAP8[$__pat + 1 >> 0] = $6 >> 8;
   HEAP8[$__pat + 2 >> 0] = $6 >> 16;
   HEAP8[$__pat + 3 >> 0] = $6 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i);
   if ((HEAP8[$__sn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 11 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $$pre$phiZ2D = $call$i;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__sym + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i) | 0;
 } else {
  $call$i87 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65516) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i87);
   $20 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $20;
   HEAP8[$__pat + 1 >> 0] = $20 >> 8;
   HEAP8[$__pat + 2 >> 0] = $20 >> 16;
   HEAP8[$__pat + 3 >> 0] = $20 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i87);
   if ((HEAP8[$__sn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 11 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $$pre$phi153Z2D = $call$i87;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 40 >> 2] & 63]($ref$tmp, $call$i87);
   $25 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $25;
   HEAP8[$__pat + 1 >> 0] = $25 >> 8;
   HEAP8[$__pat + 2 >> 0] = $25 >> 16;
   HEAP8[$__pat + 3 >> 0] = $25 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i87);
   if ((HEAP8[$__sn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 11 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $$pre$phi153Z2D = $call$i87;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 12 >> 2] & 63]($call$i87) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 16 >> 2] & 63]($call$i87) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi153Z2D >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i87);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi153Z2D >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i87);
  if ((HEAP8[$__sym + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i87 >> 2] | 0) + 36 >> 2] & 63]($call$i87) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $43 = 0;
   $52 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $43 = $call4$i$i$i30 ? 0 : $10;
   $52 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($52) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $46 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($52) {
    $46 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $46 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $43;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $40 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $40 = $incdec$ptr;
 } else $40 = $$pre;
 $34 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $35 = getTempRet0() | 0;
 $36 = $__v;
 HEAP32[$36 >> 2] = $34;
 HEAP32[$36 + 4 >> 2] = $35;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $40, $__err);
 if (!$22) {
  $53 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $41 = HEAP32[$22 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $53 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$46) label = 44; else {
  $47 = HEAP32[$46 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$47 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$53) label = 46;
 }
 if ((label | 0) == 44) if ($53) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP16[$__v >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$35 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$35 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$35 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $43 = 0;
   $52 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $43 = $call4$i$i$i30 ? 0 : $10;
   $52 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($52) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $46 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($52) {
    $46 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $46 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $43;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $40 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $40 = $incdec$ptr;
 } else $40 = $$pre;
 $34 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $35 = getTempRet0() | 0;
 $36 = $__v;
 HEAP32[$36 >> 2] = $34;
 HEAP32[$36 + 4 >> 2] = $35;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $40, $__err);
 if (!$22) {
  $53 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $41 = HEAP32[$22 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $53 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$46) label = 44; else {
  $47 = HEAP32[$46 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$47 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$53) label = 46;
 }
 if ((label | 0) == 44) if ($53) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP32[$__thousands_sep >> 2] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, $call2) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$35 >> 2] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i101 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i102 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i80 = 0, $call$i83 = 0, $call$i86 = 0, $call$i89 = 0, $call$i98 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i103 = 0, $incdec$ptr21 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65292) | 0;
 $call$i80 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65308) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $call$i80);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $call$i83;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i86 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 1;
  HEAP8[$7 >> 0] = $call$i86;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 1;
  HEAP8[$10 >> 0] = $call$i89;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   __ZNSt3__26__clocEv() | 0;
   if (!(___isxdigit_l($conv25) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   __ZNSt3__26__clocEv() | 0;
   if (!(___isdigit_l($conv34) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (!(($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
  $$pre$phiZ2D = $call$i;
 } else {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 16 >> 2] & 63]($call$i80) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $call$i98;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 1;
   HEAP8[$32 >> 0] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) $$pre$phiZ2D = $call$i; else {
   $__first$addr$0$i$i101 = $add$ptr78;
   $__last$addr$0$i$i102 = $21;
   while (1) {
    $incdec$ptr$i$i103 = $__last$addr$0$i$i102 + -1 | 0;
    if ($__first$addr$0$i$i101 >>> 0 >= $incdec$ptr$i$i103 >>> 0) {
     $$pre$phiZ2D = $call$i;
     break L19;
    }
    $22 = HEAP8[$__first$addr$0$i$i101 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i101 >> 0] = HEAP8[$incdec$ptr$i$i103 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i103 >> 0] = $22;
    $__first$addr$0$i$i101 = $__first$addr$0$i$i101 + 1 | 0;
    $__last$addr$0$i$i102 = $incdec$ptr$i$i103;
   }
  }
 } while (0);
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 15]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $37 + 1;
  HEAP8[$37 >> 0] = $call$i111;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 12 >> 2] & 63]($call$i80) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $35 + 1;
  HEAP8[$35 >> 0] = $call$i120;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $26 = 0, $33 = 0, $8 = 0, $call$i = 0, $call$i75 = 0, $ref$tmp = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65540) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i);
   $1 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i);
   if ((HEAP8[$__sn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 63]($ref$tmp, $call$i);
   $8 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $8;
   HEAP8[$__pat + 1 >> 0] = $8 >> 8;
   HEAP8[$__pat + 2 >> 0] = $8 >> 16;
   HEAP8[$__pat + 3 >> 0] = $8 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i);
   if ((HEAP8[$__sn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__sym + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i) | 0;
 } else {
  $call$i75 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65532) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i75);
   $26 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $26;
   HEAP8[$__pat + 1 >> 0] = $26 >> 8;
   HEAP8[$__pat + 2 >> 0] = $26 >> 16;
   HEAP8[$__pat + 3 >> 0] = $26 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i75);
   if ((HEAP8[$__sn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 40 >> 2] & 63]($ref$tmp, $call$i75);
   $33 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP8[$__pat >> 0] = $33;
   HEAP8[$__pat + 1 >> 0] = $33 >> 8;
   HEAP8[$__pat + 2 >> 0] = $33 >> 16;
   HEAP8[$__pat + 3 >> 0] = $33 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i75);
   if ((HEAP8[$__sn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0);
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 12 >> 2] & 63]($call$i75) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 16 >> 2] & 63]($call$i75) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i75);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i75);
  if ((HEAP8[$__sym + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i75 >> 2] | 0) + 36 >> 2] & 63]($call$i75) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP16[$__v >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($__b$0, $__e$0, $__iob, $__err, $__v) {
 $__b$0 = $__b$0 | 0;
 $__e$0 = $__e$0 | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__iob$idx$val = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $incdec$ptr = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp;
 $__g_end = sp + 164 | 0;
 $__dc = sp + 160 | 0;
 $__iob$idx$val = HEAP32[$__iob + 4 >> 2] | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob$idx$val) | 0;
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $4 = HEAP8[$__thousands_sep >> 0] | 0;
 $10 = $__b$0;
 $5 = $__b$0;
 $__a$0 = $cond$i$i;
 $__b$sroa$0$0 = $__b$0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  if (!$5) {
   $22 = 0;
   $37 = 0;
   $46 = 1;
   $__b$sroa$0$1 = $__b$sroa$0$0;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   $call4$i$i$i30 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0;
   $22 = $call4$i$i$i30 ? 0 : $5;
   $37 = $call4$i$i$i30 ? 0 : $10;
   $46 = $call4$i$i$i30;
   $__b$sroa$0$1 = $call4$i$i$i30 ? 0 : $__b$sroa$0$0;
  }
  if (!$__e$sroa$0$0) label = 17; else {
   $11 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 17; else if ($46) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $40 = $__e$sroa$0$0;
    $__a$2 = $__a$0;
    break;
   }
  }
  if ((label | 0) == 17) {
   label = 0;
   if ($46) {
    $40 = 0;
    $__a$2 = $__a$0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, $4, $__grouping, $__g, $__g_end, 41392) | 0) {
   $40 = $__e$sroa$0$2;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $10 = $37;
  $5 = $22;
  $__a$0 = $__a$1;
  $__b$sroa$0$0 = $__b$sroa$0$1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $30 = HEAP8[$__grouping + 11 >> 0] | 0;
 $$pre = HEAP32[$__g_end >> 2] | 0;
 if (!(($30 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $30 & 255) | 0)) $34 = $$pre; else if (($$pre - $__g | 0) < 160) {
  $32 = HEAP32[$__dc >> 2] | 0;
  $incdec$ptr = $$pre + 4 | 0;
  HEAP32[$__g_end >> 2] = $incdec$ptr;
  HEAP32[$$pre >> 2] = $32;
  $34 = $incdec$ptr;
 } else $34 = $$pre;
 HEAP32[$__v >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $34, $__err);
 if (!$22) {
  $47 = 1;
  $__b$sroa$0$2 = $__b$sroa$0$1;
 } else {
  $35 = HEAP32[$22 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
  $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0;
  $47 = $call4$i$i$i;
  $__b$sroa$0$2 = $call4$i$i$i ? 0 : $__b$sroa$0$1;
 }
 if (!$40) label = 44; else {
  $41 = HEAP32[$40 + 12 >> 2] | 0;
  if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$41 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 44; else if (!$47) label = 46;
 }
 if ((label | 0) == 44) if ($47) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $__b$sroa$0$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i12 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i100 = 0, $cond$i65 = 0, $cond$i91 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i32 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i53 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $vararg_buffer = sp + 264 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 292 | 0;
 $ref$tmp = sp + 280 | 0;
 $__a_end = sp + 276 | 0;
 $__g = sp;
 $__g_end = sp + 272 | 0;
 $__dc = sp + 268 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65324) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, 41392, 41418, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 $__i$0$i$i12 = 0;
 while (1) {
  if (($__i$0$i$i12 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i12 << 2) >> 2] = 0;
  $__i$0$i$i12 = $__i$0$i$i12 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $44 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if (!$5) {
   $22 = 0;
   $35 = 0;
   $45 = 1;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i32 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i32 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i32) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $35 = 0;
    $45 = 1;
   } else {
    $22 = $5;
    $35 = $44;
    $45 = 0;
   }
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if (!$10) label = 22; else {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i13$i$i53 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i53) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($45) {
    $46 = $10;
    break;
   } else {
    $38 = $10;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($45) {
    $38 = 0;
    $__a$2 = $__a$0;
    break;
   } else $46 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i65 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i65 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i91 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i91 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i91);
   $cond$i$i100 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i100 + $cond$i65;
   $__a$1 = $cond$i$i100;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $38 = $46;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
  $44 = $35;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 0, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$22) $47 = 1; else {
  $33 = HEAP32[$22 + 12 >> 2] | 0;
  if (($33 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $47 = 1;
  } else $47 = 0;
 }
 do if (!$38) label = 50; else {
  $39 = HEAP32[$38 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 63]($38) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($47) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($47) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i99 = 0, $cond$i64 = 0, $cond$i90 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp + 192 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 220 | 0;
 $ref$tmp = sp + 208 | 0;
 $__a_end = sp + 204 | 0;
 $__g = sp;
 $__g_end = sp + 200 | 0;
 $__dc = sp + 196 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65292) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, 41392, 41418, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $44 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if (!$5) {
   $22 = 0;
   $35 = 0;
   $45 = 1;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 63]($5) | 0; else $retval$0$i$i$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i31) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $35 = 0;
    $45 = 1;
   } else {
    $22 = $5;
    $35 = $44;
    $45 = 0;
   }
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if (!$10) label = 22; else {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i13$i$i52 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i52) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($45) {
    $46 = $10;
    break;
   } else {
    $38 = $10;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($45) {
    $38 = 0;
    $__a$2 = $__a$0;
    break;
   } else $46 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i64 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i64 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i64 << 1);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i90 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i90 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i90);
   $cond$i$i99 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i99 + $cond$i64;
   $__a$1 = $cond$i$i99;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $38 = $46;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; else HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
  $44 = $35;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 0, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$22) $47 = 1; else {
  $33 = HEAP32[$22 + 12 >> 2] | 0;
  if (($33 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $47 = 1;
  } else $47 = 0;
 }
 do if (!$38) label = 50; else {
  $39 = HEAP32[$38 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 63]($38) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($47) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($47) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _silk_NLSF_stabilize($NLSF_Q15, $NDeltaMin_Q15, $L) {
 $NLSF_Q15 = $NLSF_Q15 | 0;
 $NDeltaMin_Q15 = $NDeltaMin_Q15 | 0;
 $L = $L | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $17 = 0, $23 = 0, $3 = 0, $6 = 0, $I$0$lcssa = 0, $I$0174 = 0, $add232 = 0, $add54 = 0, $add54197 = 0, $add60 = 0, $add60$sub73 = 0, $add81 = 0, $add89 = 0, $arrayidx11$i = 0, $arrayidx14$pre$phi$iZ2D = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx225 = 0, $arrayidx280 = 0, $arrayidx5$i = 0, $arrayidx58 = 0, $arrayidx77 = 0, $arrayidx79 = 0, $cmp16 = 0, $cmp25 = 0, $cmp5173 = 0, $cmp74 = 0, $cond$i = 0, $cond$i162 = 0, $conv2 = 0, $conv216 = 0, $conv218 = 0, $conv22 = 0, $conv226 = 0, $conv258 = 0, $conv267 = 0, $conv281 = 0, $dec204 = 0, $i$0175 = 0, $i$022$i = 0, $i$1172 = 0, $i$2170 = 0, $inc56198 = 0, $j$020$in$i = 0, $loops$0186 = 0, $max_center_Q15$0$lcssa = 0, $min_center_Q15$0$lcssa = 0, $min_diff_Q15$0$lcssa = 0, $min_diff_Q15$0176 = 0, $shr = 0, $spec$select = 0, $spec$select155 = 0, $spec$select156 = 0, $spec$select158 = 0, $sub = 0, $sub15 = 0, $sub194 = 0, $sub24 = 0, $sub270 = 0, $sub288 = 0, $sub4 = 0, $sub67 = 0, $sub67200 = 0, $sub67203 = 0, $sub73 = 0, $sub73$add60 = 0, label = 0, $3$looptemp = 0, $j$020$in$i$looptemp = 0;
 $cmp5173 = ($L | 0) > 1;
 $sub4 = $L + -1 | 0;
 $arrayidx19 = $NLSF_Q15 + ($sub4 << 1) | 0;
 $arrayidx21 = $NDeltaMin_Q15 + ($L << 1) | 0;
 $loops$0186 = 0;
 do {
  $0 = HEAP16[$NLSF_Q15 >> 1] | 0;
  $1 = HEAP16[$NDeltaMin_Q15 >> 1] | 0;
  $conv2 = $1 << 16 >> 16;
  $sub = ($0 << 16 >> 16) - $conv2 | 0;
  if ($cmp5173) {
   $3 = $0;
   $I$0174 = 0;
   $i$0175 = 1;
   $min_diff_Q15$0176 = $sub;
   while (1) {
    $3$looptemp = $3;
    $3 = HEAP16[$NLSF_Q15 + ($i$0175 << 1) >> 1] | 0;
    $sub15 = ($3 << 16 >> 16) - ($3$looptemp << 16 >> 16) - (HEAP16[$NDeltaMin_Q15 + ($i$0175 << 1) >> 1] | 0) | 0;
    $cmp16 = ($sub15 | 0) < ($min_diff_Q15$0176 | 0);
    $spec$select = $cmp16 ? $i$0175 : $I$0174;
    $spec$select155 = $cmp16 ? $sub15 : $min_diff_Q15$0176;
    $i$0175 = $i$0175 + 1 | 0;
    if (($i$0175 | 0) == ($L | 0)) {
     $I$0$lcssa = $spec$select;
     $min_diff_Q15$0$lcssa = $spec$select155;
     break;
    } else {
     $I$0174 = $spec$select;
     $min_diff_Q15$0176 = $spec$select155;
    }
   }
  } else {
   $I$0$lcssa = 0;
   $min_diff_Q15$0$lcssa = $sub;
  }
  $6 = HEAP16[$arrayidx21 >> 1] | 0;
  $conv22 = $6 << 16 >> 16;
  $sub24 = 32768 - (HEAP16[$arrayidx19 >> 1] | 0) - $conv22 | 0;
  $cmp25 = ($sub24 | 0) < ($min_diff_Q15$0$lcssa | 0);
  $spec$select156 = $cmp25 ? $L : $I$0$lcssa;
  if ((($cmp25 ? $sub24 : $min_diff_Q15$0$lcssa) | 0) > -1) {
   label = 35;
   break;
  }
  do if (!$spec$select156) HEAP16[$NLSF_Q15 >> 1] = $1; else {
   if (($spec$select156 | 0) == ($L | 0)) {
    HEAP16[$arrayidx19 >> 1] = 32768 - ($6 & 65535);
    break;
   }
   if (($spec$select156 | 0) > 0) if (($spec$select156 | 0) == 1) $min_center_Q15$0$lcssa = $conv2; else {
    $add54197 = $conv2;
    $inc56198 = 1;
    while (1) {
     $add54 = $add54197 + (HEAP16[$NDeltaMin_Q15 + ($inc56198 << 1) >> 1] | 0) | 0;
     $inc56198 = $inc56198 + 1 | 0;
     if (($inc56198 | 0) == ($spec$select156 | 0)) {
      $min_center_Q15$0$lcssa = $add54;
      break;
     } else $add54197 = $add54;
    }
   } else $min_center_Q15$0$lcssa = 0;
   $arrayidx58 = $NDeltaMin_Q15 + ($spec$select156 << 1) | 0;
   $shr = HEAP16[$arrayidx58 >> 1] >> 1;
   $add60 = $shr + $min_center_Q15$0$lcssa | 0;
   if (($spec$select156 | 0) < ($L | 0)) {
    $sub67200 = 32768 - $conv22 | 0;
    if (($sub4 | 0) > ($spec$select156 | 0)) {
     $dec204 = $sub4;
     $sub67203 = $sub67200;
     while (1) {
      $sub67 = $sub67203 - (HEAP16[$NDeltaMin_Q15 + ($dec204 << 1) >> 1] | 0) | 0;
      $dec204 = $dec204 + -1 | 0;
      if (($dec204 | 0) <= ($spec$select156 | 0)) {
       $max_center_Q15$0$lcssa = $sub67;
       break;
      } else $sub67203 = $sub67;
     }
    } else $max_center_Q15$0$lcssa = $sub67200;
   } else $max_center_Q15$0$lcssa = 32768;
   $sub73 = $max_center_Q15$0$lcssa - $shr | 0;
   $cmp74 = ($add60 | 0) > ($sub73 | 0);
   $arrayidx77 = $NLSF_Q15 + ($spec$select156 + -1 << 1) | 0;
   $arrayidx79 = $NLSF_Q15 + ($spec$select156 << 1) | 0;
   $add81 = (HEAP16[$arrayidx79 >> 1] | 0) + (HEAP16[$arrayidx77 >> 1] | 0) | 0;
   $add89 = ($add81 >> 1) + ($add81 & 1) | 0;
   $add60$sub73 = $cmp74 ? $add60 : $sub73;
   $sub73$add60 = $cmp74 ? $sub73 : $add60;
   $sub194 = (($add89 | 0) > ($add60$sub73 | 0) ? $add60$sub73 : ($add89 | 0) < ($sub73$add60 | 0) ? $sub73$add60 : $add89) - $shr | 0;
   HEAP16[$arrayidx77 >> 1] = $sub194;
   HEAP16[$arrayidx79 >> 1] = $sub194 + (HEAPU16[$arrayidx58 >> 1] | 0);
  } while (0);
  $loops$0186 = $loops$0186 + 1 | 0;
 } while ($loops$0186 >>> 0 < 20);
 if ((label | 0) == 35) return;
 if (($loops$0186 | 0) != 20) return;
 if (($L | 0) <= 0) _celt_fatal(53410, 53398, 144);
 if (($L | 0) != 1) {
  $i$022$i = 1;
  do {
   $11 = HEAP16[$NLSF_Q15 + ($i$022$i << 1) >> 1] | 0;
   $j$020$in$i = $i$022$i;
   while (1) {
    $j$020$in$i$looptemp = $j$020$in$i;
    $j$020$in$i = $j$020$in$i + -1 | 0;
    $arrayidx5$i = $NLSF_Q15 + ($j$020$in$i << 1) | 0;
    $12 = HEAP16[$arrayidx5$i >> 1] | 0;
    $arrayidx11$i = $NLSF_Q15 + ($j$020$in$i$looptemp << 1) | 0;
    if ($11 << 16 >> 16 >= $12 << 16 >> 16) {
     $arrayidx14$pre$phi$iZ2D = $arrayidx11$i;
     break;
    }
    HEAP16[$arrayidx11$i >> 1] = $12;
    if (($j$020$in$i$looptemp | 0) <= 1) {
     $arrayidx14$pre$phi$iZ2D = $arrayidx5$i;
     break;
    }
   }
   HEAP16[$arrayidx14$pre$phi$iZ2D >> 1] = $11;
   $i$022$i = $i$022$i + 1 | 0;
  } while (($i$022$i | 0) < ($L | 0));
 }
 $conv216 = HEAP16[$NLSF_Q15 >> 1] | 0;
 $conv218 = HEAP16[$NDeltaMin_Q15 >> 1] | 0;
 $cond$i = ($conv216 | 0) > ($conv218 | 0) ? $conv216 : $conv218;
 HEAP16[$NLSF_Q15 >> 1] = $cond$i;
 if ($cmp5173) {
  $17 = $cond$i;
  $i$1172 = 1;
  do {
   $arrayidx225 = $NLSF_Q15 + ($i$1172 << 1) | 0;
   $conv226 = HEAP16[$arrayidx225 >> 1] | 0;
   $add232 = $17 + (HEAP16[$NDeltaMin_Q15 + ($i$1172 << 1) >> 1] | 0) | 0;
   $spec$select158 = ($add232 | 0) > -32768 ? $add232 : -32768;
   $conv258 = (($spec$select158 | 0) < 32767 ? $spec$select158 : 32767) << 16 >> 16;
   $17 = ($conv258 | 0) < ($conv226 | 0) ? $conv226 : $conv258;
   HEAP16[$arrayidx225 >> 1] = $17;
   $i$1172 = $i$1172 + 1 | 0;
  } while (($i$1172 | 0) != ($L | 0));
 }
 $conv267 = HEAP16[$arrayidx19 >> 1] | 0;
 $sub270 = 32768 - (HEAP16[$arrayidx21 >> 1] | 0) | 0;
 $cond$i162 = ($sub270 | 0) > ($conv267 | 0) ? $conv267 : $sub270;
 HEAP16[$arrayidx19 >> 1] = $cond$i162;
 if (!$cmp5173) return;
 $23 = $cond$i162;
 $i$2170 = $L + -2 | 0;
 while (1) {
  $arrayidx280 = $NLSF_Q15 + ($i$2170 << 1) | 0;
  $conv281 = HEAP16[$arrayidx280 >> 1] | 0;
  $sub288 = ($23 << 16 >> 16) - (HEAP16[$NDeltaMin_Q15 + ($i$2170 + 1 << 1) >> 1] | 0) | 0;
  $23 = ($sub288 | 0) > ($conv281 | 0) ? $conv281 : $sub288;
  HEAP16[$arrayidx280 >> 1] = $23;
  if (($i$2170 | 0) <= 0) break; else $i$2170 = $i$2170 + -1 | 0;
 }
 return;
}

function _silk_encode_indices($psEncC, $psRangeEnc, $FrameIndex, $encode_LBRR, $condCoding) {
 $psEncC = $psEncC | 0;
 $psRangeEnc = $psRangeEnc | 0;
 $FrameIndex = $FrameIndex | 0;
 $encode_LBRR = $encode_LBRR | 0;
 $condCoding = $condCoding | 0;
 var $11 = 0, $15 = 0, $16 = 0, $19 = 0, $23 = 0, $24 = 0, $41 = 0, $55 = 0, $56 = 0, $PERIndex = 0, $Seed = 0, $add = 0, $arrayidx40 = 0, $arrayidx70 = 0, $cmp20 = 0, $cmp22$i = 0, $cmp9 = 0, $conv$i = 0, $conv152 = 0, $conv189 = 0, $conv191 = 0, $conv24 = 0, $conv56$pre$phiZ2D = 0, $conv71 = 0, $div = 0, $ec_ix = 0, $ec_prevLagIndex = 0, $ec_prevLagIndex166$pre$phiZ2D = 0, $ec_prevSignalType190 = 0, $ec_sel_ptr$024$i = 0, $i$0109 = 0, $i$023$i = 0, $i$1107 = 0, $k$0103 = 0, $lagIndex = 0, $lagIndex151 = 0, $lagIndex165$pre$phiZ2D = 0, $nb_subfr = 0, $psIndices$0 = 0, $psNLSF_CB = 0, $shr153 = 0, $signalType = 0, $sub138 = 0, $sub163 = 0, $tobool = 0, label = 0, sp = 0, $i$1107$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ec_ix = sp;
 $tobool = ($encode_LBRR | 0) != 0;
 $psIndices$0 = $tobool ? $psEncC + 6100 + ($FrameIndex * 36 | 0) | 0 : $psEncC + 4736 | 0;
 $signalType = $psIndices$0 + 29 | 0;
 $add = (HEAP8[$signalType >> 0] << 1) + (HEAP8[$psIndices$0 + 30 >> 0] | 0) | 0;
 if ($add >>> 0 >= 6) _celt_fatal(51222, 51274, 59);
 $cmp9 = ($add | 0) > 1;
 if (!(($encode_LBRR | 0) == 0 | $cmp9)) _celt_fatal(51296, 51274, 60);
 if ($tobool | $cmp9) _ec_enc_icdf($psRangeEnc, $add + -2 | 0, 51897, 8); else _ec_enc_icdf($psRangeEnc, $add, 51901, 8);
 $cmp20 = ($condCoding | 0) == 2;
 $conv24 = HEAP8[$psIndices$0 >> 0] | 0;
 if ($cmp20) _ec_enc_icdf($psRangeEnc, $conv24, 20848, 8); else {
  _ec_enc_icdf($psRangeEnc, $conv24 >> 3, 20816 + (HEAP8[$signalType >> 0] << 3) | 0, 8);
  _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 >> 0] & 7, 51926, 8);
 }
 $nb_subfr = $psEncC + 4580 | 0;
 if ((HEAP32[$nb_subfr >> 2] | 0) > 1) {
  $i$0109 = 1;
  do {
   _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 + $i$0109 >> 0] | 0, 20848, 8);
   $i$0109 = $i$0109 + 1 | 0;
  } while (($i$0109 | 0) < (HEAP32[$nb_subfr >> 2] | 0));
 }
 $arrayidx40 = $psIndices$0 + 8 | 0;
 $psNLSF_CB = $psEncC + 4692 | 0;
 $11 = HEAP32[$psNLSF_CB >> 2] | 0;
 _ec_enc_icdf($psRangeEnc, HEAP8[$arrayidx40 >> 0] | 0, (HEAP32[$11 + 16 >> 2] | 0) + (Math_imul(HEAP8[$signalType >> 0] >> 1, HEAP16[$11 >> 1] | 0) | 0) | 0, 8);
 $15 = HEAP32[$psNLSF_CB >> 2] | 0;
 $16 = HEAP16[$15 + 2 >> 1] | 0;
 $cmp22$i = $16 << 16 >> 16 > 0;
 if ($cmp22$i) {
  $conv$i = $16 << 16 >> 16;
  $ec_sel_ptr$024$i = (HEAP32[$15 + 24 >> 2] | 0) + ((Math_imul($conv$i, HEAP8[$arrayidx40 >> 0] | 0) | 0) / 2 | 0) | 0;
  $i$023$i = 0;
  while (1) {
   $19 = HEAP8[$ec_sel_ptr$024$i >> 0] | 0;
   HEAP16[$ec_ix + ($i$023$i << 1) >> 1] = (($19 & 255) >>> 1 & 7) * 9;
   HEAP16[$ec_ix + (($i$023$i | 1) << 1) >> 1] = (($19 & 255) >>> 5) * 9 & 255;
   $i$023$i = $i$023$i + 2 | 0;
   if (($i$023$i | 0) >= ($conv$i | 0)) {
    $conv56$pre$phiZ2D = $conv$i;
    break;
   } else $ec_sel_ptr$024$i = $ec_sel_ptr$024$i + 1 | 0;
  }
 } else $conv56$pre$phiZ2D = $16 << 16 >> 16;
 if ((HEAP32[$psEncC + 4640 >> 2] | 0) != ($conv56$pre$phiZ2D | 0)) _celt_fatal(51350, 51274, 93);
 if ($cmp22$i) {
  $24 = $15;
  $i$1107 = 0;
  do {
   $i$1107$looptemp = $i$1107;
   $i$1107 = $i$1107 + 1 | 0;
   $arrayidx70 = $psIndices$0 + 8 + $i$1107 | 0;
   $23 = HEAP8[$arrayidx70 >> 0] | 0;
   $conv71 = $23 << 24 >> 24;
   do if ($23 << 24 >> 24 > 3) {
    _ec_enc_icdf($psRangeEnc, 8, (HEAP32[$24 + 28 >> 2] | 0) + (HEAP16[$ec_ix + ($i$1107$looptemp << 1) >> 1] | 0) | 0, 8);
    _ec_enc_icdf($psRangeEnc, (HEAP8[$arrayidx70 >> 0] | 0) + -4 | 0, 51934, 8);
   } else if ($23 << 24 >> 24 < -3) {
    _ec_enc_icdf($psRangeEnc, 0, (HEAP32[$24 + 28 >> 2] | 0) + (HEAP16[$ec_ix + ($i$1107$looptemp << 1) >> 1] | 0) | 0, 8);
    _ec_enc_icdf($psRangeEnc, -4 - (HEAP8[$arrayidx70 >> 0] | 0) | 0, 51934, 8);
    break;
   } else {
    _ec_enc_icdf($psRangeEnc, $conv71 + 4 | 0, (HEAP32[$24 + 28 >> 2] | 0) + (HEAP16[$ec_ix + ($i$1107$looptemp << 1) >> 1] | 0) | 0, 8);
    break;
   } while (0);
   $24 = HEAP32[$psNLSF_CB >> 2] | 0;
  } while (($i$1107 | 0) < (HEAP16[$24 + 2 >> 1] | 0));
 }
 if ((HEAP32[$nb_subfr >> 2] | 0) == 4) _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 + 31 >> 0] | 0, 51903, 8);
 if ((HEAP8[$signalType >> 0] | 0) != 2) {
  $55 = HEAP8[$signalType >> 0] | 0;
  $conv189 = $55 << 24 >> 24;
  $ec_prevSignalType190 = $psEncC + 5768 | 0;
  HEAP32[$ec_prevSignalType190 >> 2] = $conv189;
  $Seed = $psIndices$0 + 34 | 0;
  $56 = HEAP8[$Seed >> 0] | 0;
  $conv191 = $56 << 24 >> 24;
  _ec_enc_icdf($psRangeEnc, $conv191, 51911, 8);
  STACKTOP = sp;
  return;
 }
 if ($cmp20) if ((HEAP32[$psEncC + 5768 >> 2] | 0) == 2) {
  $lagIndex = $psIndices$0 + 26 | 0;
  $ec_prevLagIndex = $psEncC + 5772 | 0;
  $sub138 = (HEAP16[$lagIndex >> 1] | 0) - (HEAP16[$ec_prevLagIndex >> 1] | 0) | 0;
  $41 = ($sub138 + 8 | 0) >>> 0 > 19;
  _ec_enc_icdf($psRangeEnc, $41 ? 0 : $sub138 + 9 | 0, 25040, 8);
  if ($41) label = 34; else {
   $ec_prevLagIndex166$pre$phiZ2D = $ec_prevLagIndex;
   $lagIndex165$pre$phiZ2D = $lagIndex;
  }
 } else label = 34; else label = 34;
 if ((label | 0) == 34) {
  $lagIndex151 = $psIndices$0 + 26 | 0;
  $conv152 = HEAP16[$lagIndex151 >> 1] | 0;
  $shr153 = HEAP32[$psEncC + 4576 >> 2] >> 1;
  $div = ($conv152 | 0) / ($shr153 | 0) | 0;
  $sub163 = $conv152 - (Math_imul($div << 16 >> 16, $shr153 << 16 >> 16) | 0) | 0;
  _ec_enc_icdf($psRangeEnc, $div, 25008, 8);
  _ec_enc_icdf($psRangeEnc, $sub163, HEAP32[$psEncC + 4684 >> 2] | 0, 8);
  $ec_prevLagIndex166$pre$phiZ2D = $psEncC + 5772 | 0;
  $lagIndex165$pre$phiZ2D = $lagIndex151;
 }
 HEAP16[$ec_prevLagIndex166$pre$phiZ2D >> 1] = HEAP16[$lagIndex165$pre$phiZ2D >> 1] | 0;
 _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 + 28 >> 0] | 0, HEAP32[$psEncC + 4688 >> 2] | 0, 8);
 $PERIndex = $psIndices$0 + 32 | 0;
 _ec_enc_icdf($psRangeEnc, HEAP8[$PERIndex >> 0] | 0, 51853, 8);
 if ((HEAP32[$nb_subfr >> 2] | 0) > 0) {
  $k$0103 = 0;
  do {
   _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 + 4 + $k$0103 >> 0] | 0, HEAP32[43996 + (HEAP8[$PERIndex >> 0] << 2) >> 2] | 0, 8);
   $k$0103 = $k$0103 + 1 | 0;
  } while (($k$0103 | 0) < (HEAP32[$nb_subfr >> 2] | 0));
 }
 if ($condCoding | 0) {
  $55 = HEAP8[$signalType >> 0] | 0;
  $conv189 = $55 << 24 >> 24;
  $ec_prevSignalType190 = $psEncC + 5768 | 0;
  HEAP32[$ec_prevSignalType190 >> 2] = $conv189;
  $Seed = $psIndices$0 + 34 | 0;
  $56 = HEAP8[$Seed >> 0] | 0;
  $conv191 = $56 << 24 >> 24;
  _ec_enc_icdf($psRangeEnc, $conv191, 51911, 8);
  STACKTOP = sp;
  return;
 }
 _ec_enc_icdf($psRangeEnc, HEAP8[$psIndices$0 + 33 >> 0] | 0, 51894, 8);
 $55 = HEAP8[$signalType >> 0] | 0;
 $conv189 = $55 << 24 >> 24;
 $ec_prevSignalType190 = $psEncC + 5768 | 0;
 HEAP32[$ec_prevSignalType190 >> 2] = $conv189;
 $Seed = $psIndices$0 + 34 | 0;
 $56 = HEAP8[$Seed >> 0] | 0;
 $conv191 = $56 << 24 >> 24;
 _ec_enc_icdf($psRangeEnc, $conv191, 51911, 8);
 STACKTOP = sp;
 return;
}

function _celt_iir($_x, $den, $_y, $N, $mem) {
 $_x = $_x | 0;
 $den = $den | 0;
 $_y = $_y | 0;
 $N = $N | 0;
 $mem = $mem | 0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $41 = 0.0, $43 = 0.0, $add = 0, $add$ptr = 0, $add103 = 0.0, $add30 = 0, $add33 = 0, $add36 = 0, $add49 = 0.0, $add72 = 0.0, $arrayidx101 = 0, $arrayidx70 = 0, $i$1105 = 0, $i$3$lcssa = 0, $i$3100 = 0, $i$497$us = 0, $j$0140$i = 0, $j$094$us = 0, $sub25 = 0, $sub40 = 0.0, $sub52 = 0.0, $sub75 = 0.0, $sum119$095$us = 0.0, $vla1 = 0, $vla2 = 0, $x$addr$0142$i = 0, $y$addr$0141$i = 0, $y_0$0139$i = 0.0, $y_1$0137$i = 0.0, $y_2$0138$i = 0.0, sp = 0, $y_0$0139$i$looptemp = 0.0, $y_1$0137$i$looptemp = 0.0, $y_2$0138$i$looptemp = 0.0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vla2 = sp;
 $add = $N + 24 | 0;
 $vla1 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($add << 2) | 0) + 15 & -16) | 0;
 HEAP32[$vla2 >> 2] = HEAP32[$den + 92 >> 2];
 HEAP32[$vla2 + 4 >> 2] = HEAP32[$den + 88 >> 2];
 HEAP32[$vla2 + 8 >> 2] = HEAP32[$den + 84 >> 2];
 HEAP32[$vla2 + 12 >> 2] = HEAP32[$den + 80 >> 2];
 HEAP32[$vla2 + 16 >> 2] = HEAP32[$den + 76 >> 2];
 HEAP32[$vla2 + 20 >> 2] = HEAP32[$den + 72 >> 2];
 HEAP32[$vla2 + 24 >> 2] = HEAP32[$den + 68 >> 2];
 HEAP32[$vla2 + 28 >> 2] = HEAP32[$den + 64 >> 2];
 HEAP32[$vla2 + 32 >> 2] = HEAP32[$den + 60 >> 2];
 HEAP32[$vla2 + 36 >> 2] = HEAP32[$den + 56 >> 2];
 HEAP32[$vla2 + 40 >> 2] = HEAP32[$den + 52 >> 2];
 HEAP32[$vla2 + 44 >> 2] = HEAP32[$den + 48 >> 2];
 HEAP32[$vla2 + 48 >> 2] = HEAP32[$den + 44 >> 2];
 HEAP32[$vla2 + 52 >> 2] = HEAP32[$den + 40 >> 2];
 HEAP32[$vla2 + 56 >> 2] = HEAP32[$den + 36 >> 2];
 HEAP32[$vla2 + 60 >> 2] = HEAP32[$den + 32 >> 2];
 HEAP32[$vla2 + 64 >> 2] = HEAP32[$den + 28 >> 2];
 HEAP32[$vla2 + 68 >> 2] = HEAP32[$den + 24 >> 2];
 HEAP32[$vla2 + 72 >> 2] = HEAP32[$den + 20 >> 2];
 HEAP32[$vla2 + 76 >> 2] = HEAP32[$den + 16 >> 2];
 HEAP32[$vla2 + 80 >> 2] = HEAP32[$den + 12 >> 2];
 HEAP32[$vla2 + 84 >> 2] = HEAP32[$den + 8 >> 2];
 HEAP32[$vla2 + 88 >> 2] = HEAP32[$den + 4 >> 2];
 HEAP32[$vla2 + 92 >> 2] = HEAP32[$den >> 2];
 $i$1105 = 0;
 do {
  HEAPF32[$vla1 + ($i$1105 << 2) >> 2] = -+HEAPF32[$mem + (23 - $i$1105 << 2) >> 2];
  $i$1105 = $i$1105 + 1 | 0;
 } while (($i$1105 | 0) != 24);
 if (($add | 0) > 24) _memset($vla1 + 96 | 0, 0, $N << 2 | 0) | 0;
 $sub25 = $N + -3 | 0;
 if (($N | 0) > 3) {
  $arrayidx70 = $den + 4 | 0;
  $arrayidx101 = $den + 8 | 0;
  $i$3100 = 0;
  do {
   $add30 = $i$3100 | 1;
   $add33 = $i$3100 | 2;
   $add36 = $i$3100 | 3;
   $add$ptr = $vla1 + ($i$3100 << 2) | 0;
   $35 = +HEAPF32[$_x + ($i$3100 << 2) >> 2];
   $36 = +HEAPF32[$_x + ($add30 << 2) >> 2];
   $37 = +HEAPF32[$_x + ($add33 << 2) >> 2];
   $38 = +HEAPF32[$_x + ($add36 << 2) >> 2];
   $j$0140$i = 0;
   $x$addr$0142$i = $vla2;
   $y$addr$0141$i = $add$ptr + 12 | 0;
   $y_0$0139$i = +HEAPF32[$add$ptr >> 2];
   $y_1$0137$i = +HEAPF32[$add$ptr + 4 >> 2];
   $y_2$0138$i = +HEAPF32[$add$ptr + 8 >> 2];
   while (1) {
    $33 = +HEAPF32[$x$addr$0142$i >> 2];
    $34 = +HEAPF32[$y$addr$0141$i >> 2];
    $39 = +HEAPF32[$x$addr$0142$i + 4 >> 2];
    $y_0$0139$i$looptemp = $y_0$0139$i;
    $y_0$0139$i = +HEAPF32[$y$addr$0141$i + 4 >> 2];
    $41 = +HEAPF32[$x$addr$0142$i + 8 >> 2];
    $y_1$0137$i$looptemp = $y_1$0137$i;
    $y_1$0137$i = +HEAPF32[$y$addr$0141$i + 8 >> 2];
    $43 = +HEAPF32[$x$addr$0142$i + 12 >> 2];
    $y_2$0138$i$looptemp = $y_2$0138$i;
    $y_2$0138$i = +HEAPF32[$y$addr$0141$i + 12 >> 2];
    $35 = $y_0$0139$i$looptemp * $33 + $35 + $y_1$0137$i$looptemp * $39 + $y_2$0138$i$looptemp * $41 + $34 * $43;
    $36 = $y_1$0137$i$looptemp * $33 + $36 + $y_2$0138$i$looptemp * $39 + $34 * $41 + $y_0$0139$i * $43;
    $37 = $y_2$0138$i$looptemp * $33 + $37 + $34 * $39 + $y_0$0139$i * $41 + $y_1$0137$i * $43;
    $38 = $33 * $34 + $38 + $39 * $y_0$0139$i + $41 * $y_1$0137$i + $43 * $y_2$0138$i;
    $j$0140$i = $j$0140$i + 4 | 0;
    if ($j$0140$i >>> 0 >= 21) break; else {
     $x$addr$0142$i = $x$addr$0142$i + 16 | 0;
     $y$addr$0141$i = $y$addr$0141$i + 16 | 0;
    }
   }
   $sub40 = -$35;
   HEAPF32[$vla1 + ($i$3100 + 24 << 2) >> 2] = $sub40;
   HEAPF32[$_y + ($i$3100 << 2) >> 2] = $35;
   $add49 = $36 + +HEAPF32[$den >> 2] * $sub40;
   $sub52 = -$add49;
   HEAPF32[$vla1 + ($i$3100 + 25 << 2) >> 2] = $sub52;
   HEAPF32[$_y + ($add30 << 2) >> 2] = $add49;
   $add72 = $37 + +HEAPF32[$den >> 2] * $sub52 + +HEAPF32[$arrayidx70 >> 2] * $sub40;
   $sub75 = -$add72;
   HEAPF32[$vla1 + ($i$3100 + 26 << 2) >> 2] = $sub75;
   HEAPF32[$_y + ($add33 << 2) >> 2] = $add72;
   $add103 = $38 + +HEAPF32[$den >> 2] * $sub75 + +HEAPF32[$arrayidx70 >> 2] * $sub52 + +HEAPF32[$arrayidx101 >> 2] * $sub40;
   HEAPF32[$vla1 + ($i$3100 + 27 << 2) >> 2] = -$add103;
   HEAPF32[$_y + ($add36 << 2) >> 2] = $add103;
   $i$3100 = $i$3100 + 4 | 0;
  } while (($i$3100 | 0) < ($sub25 | 0));
  $i$3$lcssa = $N & -4;
 } else $i$3$lcssa = 0;
 if (($i$3$lcssa | 0) < ($N | 0)) {
  $i$497$us = $i$3$lcssa;
  do {
   $j$094$us = 0;
   $sum119$095$us = +HEAPF32[$_x + ($i$497$us << 2) >> 2];
   do {
    $sum119$095$us = $sum119$095$us - +HEAPF32[$vla2 + ($j$094$us << 2) >> 2] * +HEAPF32[$vla1 + ($j$094$us + $i$497$us << 2) >> 2];
    $j$094$us = $j$094$us + 1 | 0;
   } while (($j$094$us | 0) != 24);
   HEAPF32[$vla1 + ($i$497$us + 24 << 2) >> 2] = $sum119$095$us;
   HEAPF32[$_y + ($i$497$us << 2) >> 2] = $sum119$095$us;
   $i$497$us = $i$497$us + 1 | 0;
  } while (($i$497$us | 0) != ($N | 0));
 }
 HEAP32[$mem >> 2] = HEAP32[$_y + ($N + -1 << 2) >> 2];
 HEAP32[$mem + 4 >> 2] = HEAP32[$_y + ($N + -2 << 2) >> 2];
 HEAP32[$mem + 8 >> 2] = HEAP32[$_y + ($N + -3 << 2) >> 2];
 HEAP32[$mem + 12 >> 2] = HEAP32[$_y + ($N + -4 << 2) >> 2];
 HEAP32[$mem + 16 >> 2] = HEAP32[$_y + ($N + -5 << 2) >> 2];
 HEAP32[$mem + 20 >> 2] = HEAP32[$_y + ($N + -6 << 2) >> 2];
 HEAP32[$mem + 24 >> 2] = HEAP32[$_y + ($N + -7 << 2) >> 2];
 HEAP32[$mem + 28 >> 2] = HEAP32[$_y + ($N + -8 << 2) >> 2];
 HEAP32[$mem + 32 >> 2] = HEAP32[$_y + ($N + -9 << 2) >> 2];
 HEAP32[$mem + 36 >> 2] = HEAP32[$_y + ($N + -10 << 2) >> 2];
 HEAP32[$mem + 40 >> 2] = HEAP32[$_y + ($N + -11 << 2) >> 2];
 HEAP32[$mem + 44 >> 2] = HEAP32[$_y + ($N + -12 << 2) >> 2];
 HEAP32[$mem + 48 >> 2] = HEAP32[$_y + ($N + -13 << 2) >> 2];
 HEAP32[$mem + 52 >> 2] = HEAP32[$_y + ($N + -14 << 2) >> 2];
 HEAP32[$mem + 56 >> 2] = HEAP32[$_y + ($N + -15 << 2) >> 2];
 HEAP32[$mem + 60 >> 2] = HEAP32[$_y + ($N + -16 << 2) >> 2];
 HEAP32[$mem + 64 >> 2] = HEAP32[$_y + ($N + -17 << 2) >> 2];
 HEAP32[$mem + 68 >> 2] = HEAP32[$_y + ($N + -18 << 2) >> 2];
 HEAP32[$mem + 72 >> 2] = HEAP32[$_y + ($N + -19 << 2) >> 2];
 HEAP32[$mem + 76 >> 2] = HEAP32[$_y + ($N + -20 << 2) >> 2];
 HEAP32[$mem + 80 >> 2] = HEAP32[$_y + ($N + -21 << 2) >> 2];
 HEAP32[$mem + 84 >> 2] = HEAP32[$_y + ($N + -22 << 2) >> 2];
 HEAP32[$mem + 88 >> 2] = HEAP32[$_y + ($N + -23 << 2) >> 2];
 HEAP32[$mem + 92 >> 2] = HEAP32[$_y + ($N + -24 << 2) >> 2];
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $17 = 0, $18 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $17 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr64 = $this + 16 + ($17 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($17 | 0) <= 1) break;
   $18 = HEAP32[$this + 8 >> 2] | 0;
   if (!($18 & 2)) {
    $number_to_static_ptr76 = $info + 36 | 0;
    if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $search_done110 = $info + 54 | 0;
      $p65$2 = $incdec$ptr69;
      while (1) {
       if (HEAP8[$search_done110 >> 0] | 0) break L1;
       if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p65$2 = $p65$2 + 8 | 0;
       if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
      }
     }
     $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
     $search_done92 = $info + 54 | 0;
     $p65$1 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done92 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$1 = $p65$1 + 8 | 0;
      if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    }
   }
   $search_done79 = $info + 54 | 0;
   $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done79 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $add$ptr = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
     $found_our_static_ptr = $info + 52 | 0;
     $found_any_static_type = $info + 53 | 0;
     $search_done = $info + 54 | 0;
     $__flags34 = $this + 8 | 0;
     $path_dst_ptr_to_static_ptr = $info + 24 | 0;
     $does_dst_type_point_to_our_static_type$0 = 0;
     $is_dst_type_derived_from_static_type13$0$off0 = 0;
     $p$0 = $this + 16 | 0;
     L33 : while (1) {
      if ($p$0 >>> 0 >= $add$ptr >>> 0) {
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr >> 0] = 0;
      HEAP8[$found_any_static_type >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
      if (HEAP8[$search_done >> 0] | 0) {
       label = 18;
       break;
      }
      do if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
       $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
       $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      } else {
       if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags34 >> 2] & 1)) {
        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
        break;
       }
       if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       }
       if (!(HEAP32[$__flags34 >> 2] & 2)) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = 1;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
       }
      } while (0);
      $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
      $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
      $p$0 = $p$0 + 8 | 0;
     }
     if ((label | 0) == 18) if ($is_dst_type_derived_from_static_type13$0$off0) {
      $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
      label = 19;
     } else {
      $12 = 4;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
     }
     if ((label | 0) == 19) {
      $12 = 3;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
     }
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
     if ($does_dst_type_point_to_our_static_type$273 & 1) break;
    }
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $9 = 0, $R$1$be$i = 0, $R$1$i = 0, $R$1$ph$i = 0, $R$3$i = 0, $RP$1$be$i = 0, $RP$1$i = 0, $RP$1$ph$i = 0, $add$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr17$i = 0, $add$ptr303$i = 0, $add$ptr41$i = 0, $add$ptr66$i = 0, $add$ptr67$i = 0, $add105$i = 0, $add58$i = 0, $and$i = 0, $arrayidx179$i = 0, $arrayidx186$i = 0, $arrayidx190$i = 0, $arrayidx206$i = 0, $arrayidx226$i = 0, $call12 = 0, $child$i = 0, $child249$i = 0, $cond = 0, $head$i = 0, $head299$i = 0, $head31$i = 0, $head318$i = 0, $head79$i = 0, $head92$i = 0, $mem$1 = 0, $shr$i = 0, $storemerge$i = 0, $storemerge1$i = 0, $sub = 0, $sub$i = 0, $sub110$i = 0, $sub40$i = 0, $sub62$i = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[16056] = 48;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
 $add$ptr = $oldmem + -8 | 0;
 $head$i = $oldmem + -4 | 0;
 $0 = HEAP32[$head$i >> 2] | 0;
 $and$i = $0 & -8;
 $add$ptr$i = $add$ptr + $and$i | 0;
 do if (!($0 & 3)) {
  if (!($cond >>> 0 < 256 | $and$i >>> 0 < ($cond | 4) >>> 0)) if (($and$i - $cond | 0) >>> 0 <= HEAP32[16531] << 1 >>> 0) {
   $mem$1 = $oldmem;
   return $mem$1 | 0;
  }
 } else {
  if ($and$i >>> 0 >= $cond >>> 0) {
   $sub$i = $and$i - $cond | 0;
   if ($sub$i >>> 0 <= 15) {
    $mem$1 = $oldmem;
    return $mem$1 | 0;
   }
   $add$ptr17$i = $add$ptr + $cond | 0;
   HEAP32[$head$i >> 2] = $0 & 1 | $cond | 2;
   HEAP32[$add$ptr17$i + 4 >> 2] = $sub$i | 3;
   $head31$i = $add$ptr$i + 4 | 0;
   HEAP32[$head31$i >> 2] = HEAP32[$head31$i >> 2] | 1;
   _dispose_chunk($add$ptr17$i, $sub$i);
   $mem$1 = $oldmem;
   return $mem$1 | 0;
  }
  if ((HEAP32[16417] | 0) == ($add$ptr$i | 0)) {
   $add$i = (HEAP32[16414] | 0) + $and$i | 0;
   $sub40$i = $add$i - $cond | 0;
   $add$ptr41$i = $add$ptr + $cond | 0;
   if ($add$i >>> 0 <= $cond >>> 0) break;
   HEAP32[$head$i >> 2] = $0 & 1 | $cond | 2;
   HEAP32[$add$ptr41$i + 4 >> 2] = $sub40$i | 1;
   HEAP32[16417] = $add$ptr41$i;
   HEAP32[16414] = $sub40$i;
   $mem$1 = $oldmem;
   return $mem$1 | 0;
  }
  if ((HEAP32[16416] | 0) == ($add$ptr$i | 0)) {
   $add58$i = (HEAP32[16413] | 0) + $and$i | 0;
   if ($add58$i >>> 0 < $cond >>> 0) break;
   $sub62$i = $add58$i - $cond | 0;
   if ($sub62$i >>> 0 > 15) {
    $add$ptr66$i = $add$ptr + $cond | 0;
    $add$ptr67$i = $add$ptr + $add58$i | 0;
    HEAP32[$head$i >> 2] = $0 & 1 | $cond | 2;
    HEAP32[$add$ptr66$i + 4 >> 2] = $sub62$i | 1;
    HEAP32[$add$ptr67$i >> 2] = $sub62$i;
    $head79$i = $add$ptr67$i + 4 | 0;
    HEAP32[$head79$i >> 2] = HEAP32[$head79$i >> 2] & -2;
    $storemerge$i = $add$ptr66$i;
    $storemerge1$i = $sub62$i;
   } else {
    HEAP32[$head$i >> 2] = $0 & 1 | $add58$i | 2;
    $head92$i = $add$ptr + $add58$i + 4 | 0;
    HEAP32[$head92$i >> 2] = HEAP32[$head92$i >> 2] | 1;
    $storemerge$i = 0;
    $storemerge1$i = 0;
   }
   HEAP32[16413] = $storemerge1$i;
   HEAP32[16416] = $storemerge$i;
   $mem$1 = $oldmem;
   return $mem$1 | 0;
  }
  $9 = HEAP32[$add$ptr$i + 4 >> 2] | 0;
  if (!($9 & 2)) {
   $add105$i = ($9 & -8) + $and$i | 0;
   if ($add105$i >>> 0 >= $cond >>> 0) {
    $sub110$i = $add105$i - $cond | 0;
    $shr$i = $9 >>> 3;
    do if ($9 >>> 0 < 256) {
     $10 = HEAP32[$add$ptr$i + 8 >> 2] | 0;
     $11 = HEAP32[$add$ptr$i + 12 >> 2] | 0;
     if (($11 | 0) == ($10 | 0)) {
      HEAP32[16411] = HEAP32[16411] & ~(1 << $shr$i);
      break;
     } else {
      HEAP32[$10 + 12 >> 2] = $11;
      HEAP32[$11 + 8 >> 2] = $10;
      break;
     }
    } else {
     $13 = HEAP32[$add$ptr$i + 24 >> 2] | 0;
     $14 = HEAP32[$add$ptr$i + 12 >> 2] | 0;
     do if (($14 | 0) == ($add$ptr$i | 0)) {
      $child$i = $add$ptr$i + 16 | 0;
      $arrayidx179$i = $child$i + 4 | 0;
      $16 = HEAP32[$arrayidx179$i >> 2] | 0;
      if (!$16) {
       $17 = HEAP32[$child$i >> 2] | 0;
       if (!$17) {
        $R$3$i = 0;
        break;
       } else {
        $R$1$ph$i = $17;
        $RP$1$ph$i = $child$i;
       }
      } else {
       $R$1$ph$i = $16;
       $RP$1$ph$i = $arrayidx179$i;
      }
      $R$1$i = $R$1$ph$i;
      $RP$1$i = $RP$1$ph$i;
      while (1) {
       $arrayidx186$i = $R$1$i + 20 | 0;
       $18 = HEAP32[$arrayidx186$i >> 2] | 0;
       if (!$18) {
        $arrayidx190$i = $R$1$i + 16 | 0;
        $19 = HEAP32[$arrayidx190$i >> 2] | 0;
        if (!$19) break; else {
         $R$1$be$i = $19;
         $RP$1$be$i = $arrayidx190$i;
        }
       } else {
        $R$1$be$i = $18;
        $RP$1$be$i = $arrayidx186$i;
       }
       $R$1$i = $R$1$be$i;
       $RP$1$i = $RP$1$be$i;
      }
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
     } else {
      $15 = HEAP32[$add$ptr$i + 8 >> 2] | 0;
      HEAP32[$15 + 12 >> 2] = $14;
      HEAP32[$14 + 8 >> 2] = $15;
      $R$3$i = $14;
     } while (0);
     if ($13 | 0) {
      $20 = HEAP32[$add$ptr$i + 28 >> 2] | 0;
      $arrayidx206$i = 65948 + ($20 << 2) | 0;
      if ((HEAP32[$arrayidx206$i >> 2] | 0) == ($add$ptr$i | 0)) {
       HEAP32[$arrayidx206$i >> 2] = $R$3$i;
       if (!$R$3$i) {
        HEAP32[16412] = HEAP32[16412] & ~(1 << $20);
        break;
       }
      } else {
       $arrayidx226$i = $13 + 16 | 0;
       HEAP32[((HEAP32[$arrayidx226$i >> 2] | 0) == ($add$ptr$i | 0) ? $arrayidx226$i : $13 + 20 | 0) >> 2] = $R$3$i;
       if (!$R$3$i) break;
      }
      HEAP32[$R$3$i + 24 >> 2] = $13;
      $child249$i = $add$ptr$i + 16 | 0;
      $24 = HEAP32[$child249$i >> 2] | 0;
      if ($24 | 0) {
       HEAP32[$R$3$i + 16 >> 2] = $24;
       HEAP32[$24 + 24 >> 2] = $R$3$i;
      }
      $25 = HEAP32[$child249$i + 4 >> 2] | 0;
      if ($25 | 0) {
       HEAP32[$R$3$i + 20 >> 2] = $25;
       HEAP32[$25 + 24 >> 2] = $R$3$i;
      }
     }
    } while (0);
    if ($sub110$i >>> 0 < 16) {
     HEAP32[$head$i >> 2] = $0 & 1 | $add105$i | 2;
     $head299$i = $add$ptr + $add105$i + 4 | 0;
     HEAP32[$head299$i >> 2] = HEAP32[$head299$i >> 2] | 1;
     $mem$1 = $oldmem;
     return $mem$1 | 0;
    } else {
     $add$ptr303$i = $add$ptr + $cond | 0;
     HEAP32[$head$i >> 2] = $0 & 1 | $cond | 2;
     HEAP32[$add$ptr303$i + 4 >> 2] = $sub110$i | 3;
     $head318$i = $add$ptr + $add105$i + 4 | 0;
     HEAP32[$head318$i >> 2] = HEAP32[$head318$i >> 2] | 1;
     _dispose_chunk($add$ptr303$i, $sub110$i);
     $mem$1 = $oldmem;
     return $mem$1 | 0;
    }
   }
  }
 } while (0);
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $28 = HEAP32[$head$i >> 2] | 0;
 $sub = ($28 & -8) - (($28 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function _alg_unquant($X, $N, $K, $spread, $B, $dec, $gain) {
 $X = $X | 0;
 $N = $N | 0;
 $K = $K | 0;
 $spread = $spread | 0;
 $B = $B | 0;
 $dec = $dec | 0;
 $gain = +$gain;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $_i$addr$0$lcssa$i$i = 0, $_i$addr$0108$i$i = 0, $_i$addr$1$i$i = 0, $_k$addr$0$lcssa$i$i = 0, $_k$addr$0107$i$i = 0, $_k$addr$1$i$i = 0, $_k$addr$2$i$i = 0, $_k$addr$3$i$i = 0, $_k$addr$4$i$i = 0, $_k$addr$5$i$i = 0, $_n$addr$0111$i$i = 0, $_y$addr$0$lcssa$i$i = 0, $_y$addr$0109$i$i = 0, $_y$addr$1$i$i = 0, $add$i2 = 0, $add35$i$i = 0, $add74$i$i = 0, $add80$i$i = 0, $call$i = 0, $collapse_mask$0$i = 0, $conv101$i$i = 0.0, $conv29$i$i = 0.0, $conv66$i$i = 0.0, $conv92$i$i = 0.0, $dec$i$i = 0, $dec52$i$i = 0, $div$i$i = 0, $i$0$i = 0, $i$0$i13 = 0, $j$0$i = 0, $mul$i = 0.0, $mul$i14 = 0, $or4$i = 0, $p$0$i$i = 0, $p$1$i$i = 0, $retval$0$i = 0, $shr$i$i = 0, $spec$select$i$i = 0, $sub$i$i = 0, $sub48$i$i = 0, $sub50$i$i = 0, $sub77$i$i = 0, $sub79$i$i = 0, $sub9$i$i = 0, $tmp$0$i = 0, $vla = 0, $xor$i$i = 0, $xor62$i$i = 0, $xor88$i$i = 0, $xor98$i$i = 0, $yy$0$lcssa$i$i = 0.0, $yy$0110$i$i = 0.0, $yy$1$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 if (($K | 0) <= 0) _celt_fatal(49922, 49848, 371);
 if (($N | 0) <= 1) _celt_fatal(49983, 49848, 372);
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($N << 2) | 0) + 15 & -16) | 0;
 $add$i2 = $K + 1 | 0;
 $call$i = _ec_dec_uint($dec, (HEAP32[(HEAP32[592 + ((($add$i2 | 0) > ($N | 0) ? $N : $add$i2) << 2) >> 2] | 0) + ((($add$i2 | 0) < ($N | 0) ? $N : $add$i2) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + ((($N | 0) < ($K | 0) ? $N : $K) << 2) >> 2] | 0) + ((($N | 0) > ($K | 0) ? $N : $K) << 2) >> 2] | 0) | 0) | 0;
 if (($N | 0) == 2) {
  $_i$addr$0$lcssa$i$i = $call$i;
  $_k$addr$0$lcssa$i$i = $K;
  $_y$addr$0$lcssa$i$i = $vla;
  $yy$0$lcssa$i$i = 0.0;
 } else {
  $_i$addr$0108$i$i = $call$i;
  $_k$addr$0107$i$i = $K;
  $_n$addr$0111$i$i = $N;
  $_y$addr$0109$i$i = $vla;
  $yy$0110$i$i = 0.0;
  while (1) {
   do if (($_k$addr$0107$i$i | 0) < ($_n$addr$0111$i$i | 0)) {
    $10 = HEAP32[(HEAP32[592 + ($_k$addr$0107$i$i << 2) >> 2] | 0) + ($_n$addr$0111$i$i << 2) >> 2] | 0;
    $add35$i$i = $_k$addr$0107$i$i + 1 | 0;
    $12 = HEAP32[(HEAP32[592 + ($add35$i$i << 2) >> 2] | 0) + ($_n$addr$0111$i$i << 2) >> 2] | 0;
    if ($_i$addr$0108$i$i >>> 0 >= $10 >>> 0 & $_i$addr$0108$i$i >>> 0 < $12 >>> 0) {
     HEAP32[$_y$addr$0109$i$i >> 2] = 0;
     $_i$addr$1$i$i = $_i$addr$0108$i$i - $10 | 0;
     $_k$addr$5$i$i = $_k$addr$0107$i$i;
     $yy$1$i$i = $yy$0110$i$i;
     break;
    }
    $sub48$i$i = ($_i$addr$0108$i$i >>> 0 >= $12 >>> 0) << 31 >> 31;
    $sub50$i$i = $_i$addr$0108$i$i - ($12 & $sub48$i$i) | 0;
    $_k$addr$4$i$i = $_k$addr$0107$i$i;
    while (1) {
     $dec52$i$i = $_k$addr$4$i$i + -1 | 0;
     $14 = HEAP32[(HEAP32[592 + ($dec52$i$i << 2) >> 2] | 0) + ($_n$addr$0111$i$i << 2) >> 2] | 0;
     if ($sub50$i$i >>> 0 < $14 >>> 0) $_k$addr$4$i$i = $dec52$i$i; else break;
    }
    $xor62$i$i = $add35$i$i + $sub48$i$i - $_k$addr$4$i$i ^ $sub48$i$i;
    HEAP32[$_y$addr$0109$i$i >> 2] = $xor62$i$i << 16 >> 16;
    $conv66$i$i = +(($xor62$i$i & 65535) << 16 >> 16);
    $_i$addr$1$i$i = $sub50$i$i - $14 | 0;
    $_k$addr$5$i$i = $dec52$i$i;
    $yy$1$i$i = $yy$0110$i$i + $conv66$i$i * $conv66$i$i;
   } else {
    $4 = HEAP32[592 + ($_n$addr$0111$i$i << 2) >> 2] | 0;
    $5 = HEAP32[$4 + ($_k$addr$0107$i$i + 1 << 2) >> 2] | 0;
    $sub$i$i = ($_i$addr$0108$i$i >>> 0 >= $5 >>> 0) << 31 >> 31;
    $sub9$i$i = $_i$addr$0108$i$i - ($5 & $sub$i$i) | 0;
    if ((HEAP32[$4 + ($_n$addr$0111$i$i << 2) >> 2] | 0) >>> 0 > $sub9$i$i >>> 0) {
     $_k$addr$1$i$i = $_n$addr$0111$i$i;
     while (1) {
      $dec$i$i = $_k$addr$1$i$i + -1 | 0;
      $8 = HEAP32[(HEAP32[592 + ($dec$i$i << 2) >> 2] | 0) + ($_n$addr$0111$i$i << 2) >> 2] | 0;
      if ($8 >>> 0 > $sub9$i$i >>> 0) $_k$addr$1$i$i = $dec$i$i; else {
       $_k$addr$3$i$i = $dec$i$i;
       $p$1$i$i = $8;
       break;
      }
     }
    } else {
     $_k$addr$2$i$i = $_k$addr$0107$i$i;
     while (1) {
      $p$0$i$i = HEAP32[$4 + ($_k$addr$2$i$i << 2) >> 2] | 0;
      if ($p$0$i$i >>> 0 > $sub9$i$i >>> 0) $_k$addr$2$i$i = $_k$addr$2$i$i + -1 | 0; else {
       $_k$addr$3$i$i = $_k$addr$2$i$i;
       $p$1$i$i = $p$0$i$i;
       break;
      }
     }
    }
    $xor$i$i = $_k$addr$0107$i$i + $sub$i$i - $_k$addr$3$i$i ^ $sub$i$i;
    HEAP32[$_y$addr$0109$i$i >> 2] = $xor$i$i << 16 >> 16;
    $conv29$i$i = +(($xor$i$i & 65535) << 16 >> 16);
    $_i$addr$1$i$i = $sub9$i$i - $p$1$i$i | 0;
    $_k$addr$5$i$i = $_k$addr$3$i$i;
    $yy$1$i$i = $yy$0110$i$i + $conv29$i$i * $conv29$i$i;
   } while (0);
   $_y$addr$1$i$i = $_y$addr$0109$i$i + 4 | 0;
   if (($_n$addr$0111$i$i | 0) > 3) {
    $_i$addr$0108$i$i = $_i$addr$1$i$i;
    $_k$addr$0107$i$i = $_k$addr$5$i$i;
    $_n$addr$0111$i$i = $_n$addr$0111$i$i + -1 | 0;
    $_y$addr$0109$i$i = $_y$addr$1$i$i;
    $yy$0110$i$i = $yy$1$i$i;
   } else {
    $_i$addr$0$lcssa$i$i = $_i$addr$1$i$i;
    $_k$addr$0$lcssa$i$i = $_k$addr$5$i$i;
    $_y$addr$0$lcssa$i$i = $_y$addr$1$i$i;
    $yy$0$lcssa$i$i = $yy$1$i$i;
    break;
   }
  }
 }
 $add74$i$i = $_k$addr$0$lcssa$i$i << 1 | 1;
 $sub77$i$i = ($_i$addr$0$lcssa$i$i >>> 0 >= $add74$i$i >>> 0) << 31 >> 31;
 $sub79$i$i = $_i$addr$0$lcssa$i$i - ($add74$i$i & $sub77$i$i) | 0;
 $add80$i$i = $sub79$i$i + 1 | 0;
 $shr$i$i = $add80$i$i >>> 1;
 $spec$select$i$i = $sub79$i$i - (($shr$i$i | 0) == 0 ? 0 : ($add80$i$i & -2) + -1 | 0) | 0;
 $xor88$i$i = $_k$addr$0$lcssa$i$i + $sub77$i$i - $shr$i$i ^ $sub77$i$i;
 HEAP32[$_y$addr$0$lcssa$i$i >> 2] = $xor88$i$i << 16 >> 16;
 $conv92$i$i = +(($xor88$i$i & 65535) << 16 >> 16);
 $xor98$i$i = $shr$i$i - $spec$select$i$i ^ 0 - $spec$select$i$i;
 HEAP32[$_y$addr$0$lcssa$i$i + 4 >> 2] = $xor98$i$i << 16 >> 16;
 $conv101$i$i = +(($xor98$i$i & 65535) << 16 >> 16);
 $mul$i = 1.0 / +Math_sqrt(+($yy$0$lcssa$i$i + $conv92$i$i * $conv92$i$i + $conv101$i$i * $conv101$i$i)) * $gain;
 $i$0$i = 0;
 do {
  HEAPF32[$X + ($i$0$i << 2) >> 2] = $mul$i * +(HEAP32[$vla + ($i$0$i << 2) >> 2] | 0);
  $i$0$i = $i$0$i + 1 | 0;
 } while (($i$0$i | 0) != ($N | 0));
 _exp_rotation($X, $N, -1, $B, $K, $spread);
 if (($B | 0) < 2) {
  $retval$0$i = 1;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 $div$i$i = ($N >>> 0) / ($B >>> 0) | 0;
 $collapse_mask$0$i = 0;
 $i$0$i13 = 0;
 while (1) {
  $mul$i14 = Math_imul($i$0$i13, $div$i$i) | 0;
  $j$0$i = 0;
  $tmp$0$i = 0;
  do {
   $tmp$0$i = HEAP32[$vla + ($j$0$i + $mul$i14 << 2) >> 2] | $tmp$0$i;
   $j$0$i = $j$0$i + 1 | 0;
  } while (($j$0$i | 0) < ($div$i$i | 0));
  $or4$i = (($tmp$0$i | 0) != 0 & 1) << $i$0$i13 | $collapse_mask$0$i;
  $i$0$i13 = $i$0$i13 + 1 | 0;
  if (($i$0$i13 | 0) == ($B | 0)) {
   $retval$0$i = $or4$i;
   break;
  } else $collapse_mask$0$i = $or4$i;
 }
 STACKTOP = sp;
 return $retval$0$i | 0;
}

function _exp_rotation($X, $len, $dir, $stride, $K, $spread) {
 $X = $X | 0;
 $len = $len | 0;
 $dir = $dir | 0;
 $stride = $stride | 0;
 $K = $K | 0;
 $spread = $spread | 0;
 var $$pre167 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $Xptr$041$i = 0, $Xptr$041$i127 = 0, $Xptr$041$i54 = 0, $Xptr$041$i90 = 0, $Xptr$138$i = 0, $Xptr$138$i109 = 0, $Xptr$138$i147 = 0, $Xptr$138$i73 = 0, $arrayidx2$i = 0, $arrayidx2$i128 = 0, $arrayidx21$i = 0, $arrayidx21$i110 = 0, $arrayidx21$i148 = 0, $arrayidx21$i74 = 0, $cmp1637$i142 = 0, $cmp1637$i68 = 0, $cmp27 = 0, $cmp40$i124 = 0, $cmp40$i51 = 0, $conv13 = 0.0, $conv9 = 0.0, $div = 0.0, $div$i = 0, $i$0162 = 0, $i$042$i = 0, $i$042$i126 = 0, $i$042$i53 = 0, $i$042$i89 = 0, $i$139$i = 0, $i$139$i108 = 0, $i$139$i146 = 0, $i$139$i72 = 0, $mul6 = 0.0, $shr = 0, $stride2$0 = 0, $stride2$1 = 0, $sub$i122 = 0.0, $sub1$i123 = 0, $sub1$i50 = 0, $sub10$i141 = 0, $sub10$i67 = 0, $sub37 = 0.0, $sub9$i140 = 0, $tobool = 0, $8$looptemp = 0.0, $Xptr$041$i90$looptemp = 0, $12$looptemp = 0.0, $Xptr$041$i54$looptemp = 0;
 if (($K << 1 | 0) >= ($len | 0) | ($spread | 0) == 0) return;
 $div = +($len | 0) / +((Math_imul(HEAP32[43972 + ($spread + -1 << 2) >> 2] | 0, $K) | 0) + $len | 0);
 $mul6 = $div * $div * .5;
 $conv9 = +Math_cos(+($mul6 * 1.5707963705062866));
 $conv13 = +Math_cos(+((1.0 - $mul6) * 1.5707963705062866));
 if (($stride << 3 | 0) > ($len | 0)) $stride2$1 = 0; else {
  $shr = $stride >> 2;
  $stride2$0 = 1;
  while (1) if (((Math_imul((Math_imul($stride2$0, $stride2$0) | 0) + $stride2$0 | 0, $stride) | 0) + $shr | 0) < ($len | 0)) $stride2$0 = $stride2$0 + 1 | 0; else {
   $stride2$1 = $stride2$0;
   break;
  }
 }
 $div$i = ($len >>> 0) / ($stride >>> 0) | 0;
 if (($stride | 0) <= 0) return;
 $cmp27 = ($dir | 0) < 0;
 $tobool = ($stride2$1 | 0) == 0;
 $sub37 = -$conv13;
 $sub1$i50 = $div$i + -1 | 0;
 $cmp40$i51 = ($div$i | 0) > 1;
 $sub$i122 = -$conv9;
 $sub1$i123 = $div$i - $stride2$1 | 0;
 $cmp40$i124 = ($sub1$i123 | 0) > 0;
 $sub10$i67 = $div$i + -3 | 0;
 $cmp1637$i68 = ($div$i | 0) > 2;
 $sub9$i140 = $div$i - ($stride2$1 << 1) | 0;
 $sub10$i141 = $sub9$i140 + -1 | 0;
 $cmp1637$i142 = ($sub9$i140 | 0) > 0;
 $i$0162 = 0;
 do {
  $$pre167 = $X + ((Math_imul($i$0162, $div$i) | 0) << 2) | 0;
  if ($cmp27) {
   if (!$tobool) {
    if ($cmp40$i124) {
     $Xptr$041$i127 = $$pre167;
     $i$042$i126 = 0;
     while (1) {
      $3 = +HEAPF32[$Xptr$041$i127 >> 2];
      $arrayidx2$i128 = $Xptr$041$i127 + ($stride2$1 << 2) | 0;
      $4 = +HEAPF32[$arrayidx2$i128 >> 2];
      HEAPF32[$arrayidx2$i128 >> 2] = $3 * $conv9 + $4 * $conv13;
      HEAPF32[$Xptr$041$i127 >> 2] = $3 * $conv13 + $4 * $sub$i122;
      $i$042$i126 = $i$042$i126 + 1 | 0;
      if (($i$042$i126 | 0) == ($sub1$i123 | 0)) break; else $Xptr$041$i127 = $Xptr$041$i127 + 4 | 0;
     }
    }
    if ($cmp1637$i142) {
     $Xptr$138$i147 = $$pre167 + ($sub10$i141 << 2) | 0;
     $i$139$i146 = $sub10$i141;
     while (1) {
      $5 = +HEAPF32[$Xptr$138$i147 >> 2];
      $arrayidx21$i148 = $Xptr$138$i147 + ($stride2$1 << 2) | 0;
      $6 = +HEAPF32[$arrayidx21$i148 >> 2];
      HEAPF32[$arrayidx21$i148 >> 2] = $5 * $conv9 + $6 * $conv13;
      HEAPF32[$Xptr$138$i147 >> 2] = $5 * $conv13 + $6 * $sub$i122;
      if (($i$139$i146 | 0) > 0) {
       $Xptr$138$i147 = $Xptr$138$i147 + -4 | 0;
       $i$139$i146 = $i$139$i146 + -1 | 0;
      } else break;
     }
    }
   }
   if ($cmp40$i51) {
    $8 = +HEAPF32[$$pre167 >> 2];
    $Xptr$041$i90 = $$pre167;
    $i$042$i89 = 0;
    do {
     $Xptr$041$i90$looptemp = $Xptr$041$i90;
     $Xptr$041$i90 = $Xptr$041$i90 + 4 | 0;
     $7 = +HEAPF32[$Xptr$041$i90 >> 2];
     $8$looptemp = $8;
     $8 = $8 * $conv13 + $7 * $conv9;
     HEAPF32[$Xptr$041$i90 >> 2] = $8;
     HEAPF32[$Xptr$041$i90$looptemp >> 2] = $8$looptemp * $conv9 + $7 * $sub37;
     $i$042$i89 = $i$042$i89 + 1 | 0;
    } while (($i$042$i89 | 0) != ($sub1$i50 | 0));
   }
   if ($cmp1637$i68) {
    $Xptr$138$i109 = $$pre167 + ($sub10$i67 << 2) | 0;
    $i$139$i108 = $sub10$i67;
    while (1) {
     $9 = +HEAPF32[$Xptr$138$i109 >> 2];
     $arrayidx21$i110 = $Xptr$138$i109 + 4 | 0;
     $10 = +HEAPF32[$arrayidx21$i110 >> 2];
     HEAPF32[$arrayidx21$i110 >> 2] = $9 * $conv13 + $10 * $conv9;
     HEAPF32[$Xptr$138$i109 >> 2] = $9 * $conv9 + $10 * $sub37;
     if (($i$139$i108 | 0) > 0) {
      $Xptr$138$i109 = $Xptr$138$i109 + -4 | 0;
      $i$139$i108 = $i$139$i108 + -1 | 0;
     } else break;
    }
   }
  } else {
   if ($cmp40$i51) {
    $12 = +HEAPF32[$$pre167 >> 2];
    $Xptr$041$i54 = $$pre167;
    $i$042$i53 = 0;
    do {
     $Xptr$041$i54$looptemp = $Xptr$041$i54;
     $Xptr$041$i54 = $Xptr$041$i54 + 4 | 0;
     $11 = +HEAPF32[$Xptr$041$i54 >> 2];
     $12$looptemp = $12;
     $12 = $12 * $sub37 + $11 * $conv9;
     HEAPF32[$Xptr$041$i54 >> 2] = $12;
     HEAPF32[$Xptr$041$i54$looptemp >> 2] = $12$looptemp * $conv9 + $11 * $conv13;
     $i$042$i53 = $i$042$i53 + 1 | 0;
    } while (($i$042$i53 | 0) != ($sub1$i50 | 0));
   }
   if ($cmp1637$i68) {
    $Xptr$138$i73 = $$pre167 + ($sub10$i67 << 2) | 0;
    $i$139$i72 = $sub10$i67;
    while (1) {
     $13 = +HEAPF32[$Xptr$138$i73 >> 2];
     $arrayidx21$i74 = $Xptr$138$i73 + 4 | 0;
     $14 = +HEAPF32[$arrayidx21$i74 >> 2];
     HEAPF32[$arrayidx21$i74 >> 2] = $13 * $sub37 + $14 * $conv9;
     HEAPF32[$Xptr$138$i73 >> 2] = $13 * $conv9 + $14 * $conv13;
     if (($i$139$i72 | 0) > 0) {
      $Xptr$138$i73 = $Xptr$138$i73 + -4 | 0;
      $i$139$i72 = $i$139$i72 + -1 | 0;
     } else break;
    }
   }
   if (!$tobool) {
    if ($cmp40$i124) {
     $Xptr$041$i = $$pre167;
     $i$042$i = 0;
     while (1) {
      $15 = +HEAPF32[$Xptr$041$i >> 2];
      $arrayidx2$i = $Xptr$041$i + ($stride2$1 << 2) | 0;
      $16 = +HEAPF32[$arrayidx2$i >> 2];
      HEAPF32[$arrayidx2$i >> 2] = $15 * $sub$i122 + $16 * $conv13;
      HEAPF32[$Xptr$041$i >> 2] = $15 * $conv13 + $16 * $conv9;
      $i$042$i = $i$042$i + 1 | 0;
      if (($i$042$i | 0) == ($sub1$i123 | 0)) break; else $Xptr$041$i = $Xptr$041$i + 4 | 0;
     }
    }
    if ($cmp1637$i142) {
     $Xptr$138$i = $$pre167 + ($sub10$i141 << 2) | 0;
     $i$139$i = $sub10$i141;
     while (1) {
      $17 = +HEAPF32[$Xptr$138$i >> 2];
      $arrayidx21$i = $Xptr$138$i + ($stride2$1 << 2) | 0;
      $18 = +HEAPF32[$arrayidx21$i >> 2];
      HEAPF32[$arrayidx21$i >> 2] = $17 * $sub$i122 + $18 * $conv13;
      HEAPF32[$Xptr$138$i >> 2] = $17 * $conv13 + $18 * $conv9;
      if (($i$139$i | 0) > 0) {
       $Xptr$138$i = $Xptr$138$i + -4 | 0;
       $i$139$i = $i$139$i + -1 | 0;
      } else break;
     }
    }
   }
  }
  $i$0162 = $i$0162 + 1 | 0;
 } while (($i$0162 | 0) != ($stride | 0));
 return;
}

function _opus_repacketizer_out_range_impl($rp, $end, $data, $maxlen, $pad) {
 $rp = $rp | 0;
 $end = $end | 0;
 $data = $data | 0;
 $maxlen = $maxlen | 0;
 $pad = $pad | 0;
 var $$pre = 0, $13 = 0, $15 = 0, $17 = 0, $21 = 0, $25 = 0, $30 = 0, $5 = 0, $6 = 0, $add$i = 0, $add$i4 = 0, $add$ptr = 0, $add$ptr197 = 0, $add122 = 0, $add122$lcssa = 0, $add122162 = 0, $add122164 = 0, $add129 = 0, $add148 = 0, $add39 = 0, $add62 = 0, $arrayidx217 = 0, $cmp9615114 = 0, $cmp9615115 = 0, $cmp9615116 = 0, $conv141 = 0, $conv159 = 0, $conv17 = 0, $conv195 = 0, $conv33 = 0, $conv74 = 0, $div = 0, $i$0152 = 0, $i$3140 = 0, $i$4137 = 0, $inc124165 = 0, $incdec$ptr72 = 0, $ptr$0129 = 0, $ptr$1 = 0, $ptr$2$lcssa = 0, $ptr$3 = 0, $ptr$4139 = 0, $ptr$720 = 0, $ptr$9136 = 0, $retval$0$i = 0, $retval$0$i11 = 0, $retval$1 = 0, $sub110 = 0, $sub163 = 0, $sub190 = 0, $tot_size$1128 = 0, $tot_size$4 = 0, $tot_size$5 = 0, $tot_size$719 = 0, $vbr$0130 = 0, label = 0;
 if (($end | 0) <= 0) {
  $retval$1 = -1;
  return $retval$1 | 0;
 }
 if ((HEAP32[$rp + 4 >> 2] | 0) < ($end | 0)) {
  $retval$1 = -1;
  return $retval$1 | 0;
 }
 $add$ptr = $rp + 200 | 0;
 L7 : do switch ($end | 0) {
 case 1:
  {
   $conv17 = HEAP16[$add$ptr >> 1] | 0;
   if (($conv17 | 0) < ($maxlen | 0)) {
    HEAP8[$data >> 0] = HEAP8[$rp >> 0] & -4;
    $ptr$0129 = $data + 1 | 0;
    $tot_size$1128 = $conv17 + 1 | 0;
    label = 15;
    break L7;
   } else {
    $retval$1 = -2;
    return $retval$1 | 0;
   }
   break;
  }
 case 2:
  {
   $5 = HEAP16[$rp + 202 >> 1] | 0;
   $6 = HEAP16[$add$ptr >> 1] | 0;
   $conv33 = $6 << 16 >> 16;
   if ($5 << 16 >> 16 == $6 << 16 >> 16) {
    $add39 = $conv33 << 1 | 1;
    if (($add39 | 0) > ($maxlen | 0)) {
     $retval$1 = -2;
     return $retval$1 | 0;
    } else {
     HEAP8[$data >> 0] = HEAP8[$rp >> 0] & -4 | 1;
     $ptr$0129 = $data + 1 | 0;
     $tot_size$1128 = $add39;
     label = 15;
     break L7;
    }
   }
   $add62 = ($5 << 16 >> 16) + 2 + $conv33 + ($6 << 16 >> 16 > 251 & 1) | 0;
   if (($add62 | 0) > ($maxlen | 0)) {
    $retval$1 = -2;
    return $retval$1 | 0;
   }
   $incdec$ptr72 = $data + 1 | 0;
   HEAP8[$data >> 0] = HEAP8[$rp >> 0] & -4 | 2;
   $13 = HEAP16[$add$ptr >> 1] | 0;
   $conv74 = $13 << 16 >> 16;
   if ($13 << 16 >> 16 < 252) {
    HEAP8[$incdec$ptr72 >> 0] = $13;
    $retval$0$i = 1;
   } else {
    $add$i = $conv74 | 252;
    HEAP8[$incdec$ptr72 >> 0] = $add$i;
    HEAP8[$data + 2 >> 0] = ($conv74 - ($add$i & 255) | 0) >>> 2;
    $retval$0$i = 2;
   }
   $ptr$0129 = $incdec$ptr72 + $retval$0$i | 0;
   $tot_size$1128 = $add62;
   label = 15;
   break;
  }
 default:
  {
   $17 = HEAP16[$add$ptr >> 1] | 0;
   $cmp9615116 = ($end | 0) > 1;
   label = 17;
  }
 } while (0);
 if ((label | 0) == 15) if (($pad | 0) != 0 & ($tot_size$1128 | 0) < ($maxlen | 0)) {
  $15 = HEAP16[$add$ptr >> 1] | 0;
  if (($end | 0) > 1) {
   $17 = $15;
   $cmp9615116 = 1;
   label = 17;
  } else {
   $21 = $15;
   $cmp9615115 = 0;
   label = 25;
  }
 } else {
  $ptr$720 = $ptr$0129;
  $tot_size$719 = $tot_size$1128;
 }
 L30 : do if ((label | 0) == 17) {
  $i$0152 = 1;
  while (1) {
   if ((HEAP16[$rp + 200 + ($i$0152 << 1) >> 1] | 0) != $17 << 16 >> 16) break;
   $i$0152 = $i$0152 + 1 | 0;
   if (($i$0152 | 0) >= ($end | 0)) {
    $21 = $17;
    $cmp9615115 = $cmp9615116;
    label = 25;
    break L30;
   }
  }
  $sub110 = $end + -1 | 0;
  $add122162 = ($17 << 16 >> 16) + 2 + ($17 << 16 >> 16 > 251 ? 2 : 1) | 0;
  if (($end | 0) > 2) {
   $add122164 = $add122162;
   $inc124165 = 1;
   while (1) {
    $$pre = HEAP16[$rp + 200 + ($inc124165 << 1) >> 1] | 0;
    $add122 = $add122164 + ($$pre << 16 >> 16) + ($$pre << 16 >> 16 > 251 ? 2 : 1) | 0;
    $inc124165 = $inc124165 + 1 | 0;
    if (($inc124165 | 0) == ($sub110 | 0)) {
     $add122$lcssa = $add122;
     break;
    } else $add122164 = $add122;
   }
  } else $add122$lcssa = $add122162;
  $add129 = $add122$lcssa + (HEAP16[$rp + 200 + ($sub110 << 1) >> 1] | 0) | 0;
  if (($add129 | 0) > ($maxlen | 0)) {
   $retval$1 = -2;
   return $retval$1 | 0;
  } else {
   HEAP8[$data >> 0] = HEAP8[$rp >> 0] | 3;
   $conv141 = ($end | 128) & 255;
   HEAP8[$data + 1 >> 0] = $conv141;
   $25 = $conv141;
   $cmp9615114 = $cmp9615116;
   $tot_size$4 = $add129;
   $vbr$0130 = 1;
   label = 27;
   break;
  }
 } while (0);
 do if ((label | 0) == 25) {
  $add148 = (Math_imul($21 << 16 >> 16, $end) | 0) + 2 | 0;
  if (($add148 | 0) > ($maxlen | 0)) {
   $retval$1 = -2;
   return $retval$1 | 0;
  } else {
   HEAP8[$data >> 0] = HEAP8[$rp >> 0] | 3;
   $conv159 = $end & 255;
   HEAP8[$data + 1 >> 0] = $conv159;
   $25 = $conv159;
   $cmp9615114 = $cmp9615115;
   $tot_size$4 = $add148;
   $vbr$0130 = 0;
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 27) {
  $ptr$1 = $data + 2 | 0;
  $sub163 = $maxlen - $tot_size$4 | 0;
  if (($pad | 0) == 0 | ($sub163 | 0) == 0) {
   $ptr$3 = $ptr$1;
   $tot_size$5 = $tot_size$4;
  } else {
   HEAP8[$data + 1 >> 0] = $25 | 64;
   $div = ($sub163 + -1 | 0) / 255 | 0;
   if (($sub163 | 0) > 255) {
    _memset($ptr$1 | 0, -1, (($div | 0) > 1 ? $div : 1) | 0) | 0;
    $ptr$2$lcssa = $data + ((($div | 0) > 1 ? $div : 1) + 2) | 0;
   } else $ptr$2$lcssa = $ptr$1;
   HEAP8[$ptr$2$lcssa >> 0] = $sub163 + 255 + (Math_imul($div, -255) | 0);
   $ptr$3 = $ptr$2$lcssa + 1 | 0;
   $tot_size$5 = $maxlen;
  }
  if ($vbr$0130) {
   $sub190 = $end + -1 | 0;
   if ($cmp9615114) {
    $i$3140 = 0;
    $ptr$4139 = $ptr$3;
    while (1) {
     $30 = HEAP16[$rp + 200 + ($i$3140 << 1) >> 1] | 0;
     $conv195 = $30 << 16 >> 16;
     if ($30 << 16 >> 16 < 252) {
      HEAP8[$ptr$4139 >> 0] = $30;
      $retval$0$i11 = 1;
     } else {
      $add$i4 = $conv195 | 252;
      HEAP8[$ptr$4139 >> 0] = $add$i4;
      HEAP8[$ptr$4139 + 1 >> 0] = ($conv195 - ($add$i4 & 255) | 0) >>> 2;
      $retval$0$i11 = 2;
     }
     $add$ptr197 = $ptr$4139 + $retval$0$i11 | 0;
     $i$3140 = $i$3140 + 1 | 0;
     if (($i$3140 | 0) >= ($sub190 | 0)) {
      $ptr$720 = $add$ptr197;
      $tot_size$719 = $tot_size$5;
      break;
     } else $ptr$4139 = $add$ptr197;
    }
   } else {
    $ptr$720 = $ptr$3;
    $tot_size$719 = $tot_size$5;
   }
  } else {
   $ptr$720 = $ptr$3;
   $tot_size$719 = $tot_size$5;
  }
 }
 $i$4137 = 0;
 $ptr$9136 = $ptr$720;
 do {
  $arrayidx217 = $rp + 200 + ($i$4137 << 1) | 0;
  _memmove($ptr$9136 | 0, HEAP32[$rp + 8 + ($i$4137 << 2) >> 2] | 0, HEAP16[$arrayidx217 >> 1] | 0) | 0;
  $ptr$9136 = $ptr$9136 + (HEAP16[$arrayidx217 >> 1] | 0) | 0;
  $i$4137 = $i$4137 + 1 | 0;
 } while (($i$4137 | 0) != ($end | 0));
 if (!(($pad | 0) != 0 & $ptr$9136 >>> 0 < ($data + $maxlen | 0) >>> 0)) {
  $retval$1 = $tot_size$719;
  return $retval$1 | 0;
 }
 _memset($ptr$9136 | 0, 0, $data + ($maxlen - $ptr$9136) | 0) | 0;
 $retval$1 = $tot_size$719;
 return $retval$1 | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i21 = 0, $__ninp_$i$i97 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $call4$i15$i$i65 = 0, $conv = 0, $conv$i = 0, $conv$i82 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i120 = 0, $retval$0$i$i$i$i42 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i141 = 0, $retval$0$i$i13$i$i63 = 0, $retval$0$i$i81 = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $60 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $60 = 1;
   break;
  } else {
   $60 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$__e$0) label = 13; else {
  $5 = HEAP32[$__e$0 + 12 >> 2] | 0;
  if (($5 | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 63]($__e$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 13; else if ($60) {
   $61 = $__e$0;
   label = 16;
  } else label = 15;
 }
 if ((label | 0) == 13) if ($60) label = 15; else {
  $61 = 0;
  label = 16;
 }
 L20 : do if ((label | 0) == 15) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 16) {
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($conv$i << 24 >> 24 > -1) {
   $__tab_$i = $__ct + 8 | 0;
   if (HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $conv$i, 0) | 0) << 24 >> 24;
    $19 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i21 = $19 + 12 | 0;
    $20 = HEAP32[$__ninp_$i$i21 >> 2] | 0;
    if (($20 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 40 >> 2] & 63]($19) | 0; else HEAP32[$__ninp_$i$i21 >> 2] = $20 + 1;
    $28 = $61;
    $33 = $61;
    $__n$addr$0$in = $__n;
    $__r$0$in = $conv;
    while (1) {
     $__r$0 = $__r$0$in + -48 | 0;
     $__n$addr$0 = $__n$addr$0$in + -1 | 0;
     $23 = HEAP32[$__b >> 2] | 0;
     do if (!$23) $35 = 1; else {
      $24 = HEAP32[$23 + 12 >> 2] | 0;
      if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0; else $retval$0$i$i$i$i42 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i42) | 0) {
       HEAP32[$__b >> 2] = 0;
       $35 = 1;
       break;
      } else {
       $35 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$28) {
      $36 = 1;
      $54 = $33;
      $62 = 0;
     } else {
      $29 = HEAP32[$28 + 12 >> 2] | 0;
      if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i13$i$i63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $retval$0$i$i13$i$i63 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$29 >> 0] | 0) | 0;
      $call4$i15$i$i65 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i63) | 0;
      $36 = $call4$i15$i$i65;
      $54 = $call4$i15$i$i65 ? 0 : $33;
      $62 = $call4$i15$i$i65 ? 0 : $28;
     }
     $38 = HEAP32[$__b >> 2] | 0;
     if (!(($__n$addr$0$in | 0) > 1 & ($35 ^ $36))) break;
     $39 = HEAP32[$38 + 12 >> 2] | 0;
     if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 63]($38) | 0; else $retval$0$i$i81 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
     $conv$i82 = $retval$0$i$i81 & 255;
     if ($conv$i82 << 24 >> 24 <= -1) {
      $retval$2 = $__r$0;
      break L20;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i81 << 24 >> 24 << 1) >> 1] & 2048)) {
      $retval$2 = $__r$0;
      break L20;
     }
     $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $conv$i82, 0) | 0) << 24 >> 24) | 0;
     $46 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i97 = $46 + 12 | 0;
     $47 = HEAP32[$__ninp_$i$i97 >> 2] | 0;
     if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0; else HEAP32[$__ninp_$i$i97 >> 2] = $47 + 1;
     $28 = $62;
     $33 = $54;
     $__n$addr$0$in = $__n$addr$0;
     $__r$0$in = $add;
    }
    do if (!$38) $63 = 1; else {
     $50 = HEAP32[$38 + 12 >> 2] | 0;
     if (($50 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i$i$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 63]($38) | 0; else $retval$0$i$i$i$i120 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$50 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i120) | 0) {
      HEAP32[$__b >> 2] = 0;
      $63 = 1;
      break;
     } else {
      $63 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    if (!$54) label = 60; else {
     $55 = HEAP32[$54 + 12 >> 2] | 0;
     if (($55 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) $retval$0$i$i13$i$i141 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 63]($54) | 0; else $retval$0$i$i13$i$i141 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$55 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i141) | 0) label = 60; else if ($63) {
      $retval$2 = $__r$0;
      break;
     }
    }
    if ((label | 0) == 60) if (!$63) {
     $retval$2 = $__r$0;
     break;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $retval$2 = $__r$0;
    break;
   }
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$2 = 0;
 } while (0);
 return $retval$2 | 0;
}

function _speex_resampler_process_float($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $add$i = 0, $add$ptr = 0, $add$ptr$i63 = 0, $add$ptr15$i = 0, $add$ptr33 = 0, $arrayidx = 0, $arrayidx$i52 = 0, $arrayidx$i68 = 0, $arrayidx3$i = 0, $call$i = 0, $call$i66 = 0, $cmp1290 = 0, $cond = 0, $filt_len = 0, $i$024$i = 0, $ilen$096 = 0, $ilen$1 = 0, $in$addr$097 = 0, $j$02$i = 0, $j$02$i76 = 0, $j$091 = 0, $last_sample$i67 = 0, $magic_samples = 0, $mem = 0, $mem_alloc_size = 0, $mul = 0, $olen$0106 = 0, $olen$195 = 0, $olen$2 = 0, $out$addr$0105 = 0, $out$addr$194 = 0, $out_len$addr$i = 0, $out_stride = 0, $resampler_ptr$i65 = 0, $scevgep = 0, $started$i64 = 0, $sub = 0, $sub$i = 0, $sub2 = 0, $sub26 = 0, $sub27 = 0, $sub3 = 0, $sub36 = 0, $sub37 = 0, $sub6$i72 = 0, $tmp_in_len$i = 0, $tobool10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $out_len$addr$i = sp + 4 | 0;
 $tmp_in_len$i = sp;
 $0 = HEAP32[$in_len >> 2] | 0;
 $1 = HEAP32[$out_len >> 2] | 0;
 $mem = $st + 72 | 0;
 $2 = HEAP32[$mem >> 2] | 0;
 $mem_alloc_size = $st + 28 | 0;
 $3 = HEAP32[$mem_alloc_size >> 2] | 0;
 $mul = Math_imul($3, $channel_index) | 0;
 $add$ptr = $2 + ($mul << 2) | 0;
 $filt_len = $st + 24 | 0;
 $4 = HEAP32[$filt_len >> 2] | 0;
 $sub = $4 + -1 | 0;
 $sub2 = $3 - $sub | 0;
 $5 = HEAP32[$st + 88 >> 2] | 0;
 $magic_samples = $st + 68 | 0;
 $arrayidx = (HEAP32[$magic_samples >> 2] | 0) + ($channel_index << 2) | 0;
 if (!(HEAP32[$arrayidx >> 2] | 0)) {
  $olen$0106 = $1;
  $out$addr$0105 = $out;
 } else {
  HEAP32[$out_len$addr$i >> 2] = $1;
  HEAP32[$tmp_in_len$i >> 2] = HEAP32[$arrayidx >> 2];
  HEAP32[$st + 56 >> 2] = 1;
  $call$i = FUNCTION_TABLE_iiiiiii[HEAP32[$st + 84 >> 2] & 63]($st, $channel_index, $add$ptr, $tmp_in_len$i, $out, $out_len$addr$i) | 0;
  $arrayidx$i52 = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
  $11 = HEAP32[$arrayidx$i52 >> 2] | 0;
  $12 = HEAP32[$tmp_in_len$i >> 2] | 0;
  if (($11 | 0) < ($12 | 0)) {
   HEAP32[$tmp_in_len$i >> 2] = $11;
   $14 = $11;
  } else $14 = $12;
  HEAP32[$out_len$addr$i >> 2] = $call$i;
  HEAP32[$arrayidx$i52 >> 2] = (HEAP32[$arrayidx$i52 >> 2] | 0) - $14;
  $15 = HEAP32[$tmp_in_len$i >> 2] | 0;
  if (($4 | 0) > 1) {
   $j$02$i = 0;
   do {
    HEAP32[$add$ptr + ($j$02$i << 2) >> 2] = HEAP32[$add$ptr + ($j$02$i + $15 << 2) >> 2];
    $j$02$i = $j$02$i + 1 | 0;
   } while (($j$02$i | 0) != ($sub | 0));
  }
  $arrayidx3$i = (HEAP32[$magic_samples >> 2] | 0) + ($channel_index << 2) | 0;
  $sub$i = (HEAP32[$arrayidx3$i >> 2] | 0) - $15 | 0;
  HEAP32[$arrayidx3$i >> 2] = $sub$i;
  if ($sub$i | 0) {
   $19 = HEAP32[$tmp_in_len$i >> 2] | 0;
   $i$024$i = 0;
   do {
    $add$i = $i$024$i + $sub | 0;
    HEAP32[$add$ptr + ($add$i << 2) >> 2] = HEAP32[$add$ptr + ($add$i + $19 << 2) >> 2];
    $i$024$i = $i$024$i + 1 | 0;
   } while (($i$024$i | 0) != ($sub$i | 0));
  }
  $21 = HEAP32[$out_len$addr$i >> 2] | 0;
  $add$ptr15$i = $out + ((Math_imul(HEAP32[$st + 92 >> 2] | 0, $21) | 0) << 2) | 0;
  $sub3 = $1 - $21 | 0;
  if (!(HEAP32[$arrayidx3$i >> 2] | 0)) {
   $olen$0106 = $sub3;
   $out$addr$0105 = $add$ptr15$i;
  } else {
   $ilen$1 = $0;
   $olen$2 = $sub3;
   $47 = HEAP32[$in_len >> 2] | 0;
   $sub36 = $47 - $ilen$1 | 0;
   HEAP32[$in_len >> 2] = $sub36;
   $48 = HEAP32[$out_len >> 2] | 0;
   $sub37 = $48 - $olen$2 | 0;
   HEAP32[$out_len >> 2] = $sub37;
   STACKTOP = sp;
   return;
  }
 }
 if (!(($olen$0106 | 0) != 0 & ($0 | 0) != 0)) {
  $ilen$1 = $0;
  $olen$2 = $olen$0106;
  $47 = HEAP32[$in_len >> 2] | 0;
  $sub36 = $47 - $ilen$1 | 0;
  HEAP32[$in_len >> 2] = $sub36;
  $48 = HEAP32[$out_len >> 2] | 0;
  $sub37 = $48 - $olen$2 | 0;
  HEAP32[$out_len >> 2] = $sub37;
  STACKTOP = sp;
  return;
 }
 $started$i64 = $st + 56 | 0;
 $resampler_ptr$i65 = $st + 84 | 0;
 $last_sample$i67 = $st + 60 | 0;
 $out_stride = $st + 92 | 0;
 $scevgep = $2 + ($4 + $mul + -1 << 2) | 0;
 $27 = $4 + -2 - $3 | 0;
 $ilen$096 = $0;
 $in$addr$097 = $in;
 $olen$195 = $olen$0106;
 $out$addr$194 = $out$addr$0105;
 while (1) {
  $cond = $ilen$096 >>> 0 > $sub2 >>> 0 ? $sub2 : $ilen$096;
  HEAP32[$out_len$addr$i >> 2] = $cond;
  HEAP32[$tmp_in_len$i >> 2] = $olen$195;
  $tobool10 = ($in$addr$097 | 0) != 0;
  $cmp1290 = ($cond | 0) != 0;
  if ($tobool10) {
   if ($cmp1290) {
    $j$091 = 0;
    do {
     HEAP32[$add$ptr + ($j$091 + $sub << 2) >> 2] = HEAP32[$in$addr$097 + ((Math_imul($j$091, $5) | 0) << 2) >> 2];
     $j$091 = $j$091 + 1 | 0;
    } while ($j$091 >>> 0 < $cond >>> 0);
   }
  } else if ($cmp1290) {
   $29 = ~$ilen$096;
   _memset($scevgep | 0, 0, -4 - (($27 >>> 0 > $29 >>> 0 ? $27 : $29) << 2) | 0) | 0;
  }
  $33 = HEAP32[$filt_len >> 2] | 0;
  $add$ptr$i63 = (HEAP32[$mem >> 2] | 0) + ((Math_imul(HEAP32[$mem_alloc_size >> 2] | 0, $channel_index) | 0) << 2) | 0;
  HEAP32[$started$i64 >> 2] = 1;
  $call$i66 = FUNCTION_TABLE_iiiiiii[HEAP32[$resampler_ptr$i65 >> 2] & 63]($st, $channel_index, $add$ptr$i63, $out_len$addr$i, $out$addr$194, $tmp_in_len$i) | 0;
  $arrayidx$i68 = (HEAP32[$last_sample$i67 >> 2] | 0) + ($channel_index << 2) | 0;
  $38 = HEAP32[$arrayidx$i68 >> 2] | 0;
  $39 = HEAP32[$out_len$addr$i >> 2] | 0;
  if (($38 | 0) < ($39 | 0)) {
   HEAP32[$out_len$addr$i >> 2] = $38;
   $41 = $38;
  } else $41 = $39;
  HEAP32[$tmp_in_len$i >> 2] = $call$i66;
  HEAP32[$arrayidx$i68 >> 2] = (HEAP32[$arrayidx$i68 >> 2] | 0) - $41;
  $42 = HEAP32[$out_len$addr$i >> 2] | 0;
  $sub6$i72 = $33 + -1 | 0;
  if (($33 | 0) > 1) {
   $j$02$i76 = 0;
   do {
    HEAP32[$add$ptr$i63 + ($j$02$i76 << 2) >> 2] = HEAP32[$add$ptr$i63 + ($j$02$i76 + $42 << 2) >> 2];
    $j$02$i76 = $j$02$i76 + 1 | 0;
   } while (($j$02$i76 | 0) != ($sub6$i72 | 0));
  }
  $sub26 = $ilen$096 - $42 | 0;
  $44 = HEAP32[$tmp_in_len$i >> 2] | 0;
  $sub27 = $olen$195 - $44 | 0;
  $out$addr$194 = $out$addr$194 + ((Math_imul(HEAP32[$out_stride >> 2] | 0, $44) | 0) << 2) | 0;
  $add$ptr33 = $in$addr$097 + ((Math_imul($42, $5) | 0) << 2) | 0;
  if (!(($sub27 | 0) != 0 & ($sub26 | 0) != 0)) {
   $ilen$1 = $sub26;
   $olen$2 = $sub27;
   break;
  } else {
   $ilen$096 = $sub26;
   $in$addr$097 = $tobool10 ? $add$ptr33 : 0;
   $olen$195 = $sub27;
  }
 }
 $47 = HEAP32[$in_len >> 2] | 0;
 $sub36 = $47 - $ilen$1 | 0;
 HEAP32[$in_len >> 2] = $sub36;
 $48 = HEAP32[$out_len >> 2] | 0;
 $sub37 = $48 - $olen$2 | 0;
 HEAP32[$out_len >> 2] = $sub37;
 STACKTOP = sp;
 return;
}

function _clt_mdct_forward_c($l, $in, $out, $window, $overlap, $shift, $stride) {
 $l = $l | 0;
 $in = $in | 0;
 $out = $out | 0;
 $window = $window | 0;
 $overlap = $overlap | 0;
 $shift = $shift | 0;
 $stride = $stride | 0;
 var $0 = 0, $1 = 0.0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $6 = 0.0, $N$0$lcssa = 0, $add$ptr = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $add$ptr37 = 0, $add$ptr7 = 0, $fp$0129 = 0, $i$0166 = 0, $i$1$lcssa = 0, $i$1157 = 0, $i$2$lcssa = 0, $i$2147 = 0, $i$3142 = 0, $i$4135 = 0, $i$5132 = 0, $idx$neg = 0, $idxprom = 0, $inc34 = 0, $incdec$ptr28 = 0, $mul128 = 0, $scevgep = 0, $shr = 0, $shr$lcssa = 0, $shr164 = 0, $shr167 = 0, $shr18 = 0, $shr4 = 0, $shr6 = 0, $sub = 0, $sub41 = 0, $sub54 = 0, $trig$0$lcssa = 0, $trig$0165 = 0, $vla = 0, $vla5 = 0, $wp1$0153 = 0, $wp1$1138 = 0, $wp2$0152 = 0, $wp2$1137 = 0, $xp1$0$lcssa = 0, $xp1$0156 = 0, $xp1$1$lcssa = 0, $xp1$1146 = 0, $xp1$2141 = 0, $xp2$0$lcssa = 0, $xp2$0155 = 0, $xp2$1$lcssa = 0, $xp2$1145 = 0, $xp2$2140 = 0, $yp$0$lcssa = 0, $yp$0154 = 0, $yp$1$lcssa = 0, $yp$1144 = 0, $yp$2139 = 0, $yp1$0130 = 0, $yp2$0131 = 0, $yp73$0134 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l + 8 + ($shift << 2) >> 2] | 0;
 $1 = +HEAPF32[$0 + 4 >> 2];
 $2 = HEAP32[$l >> 2] | 0;
 $3 = HEAP32[$l + 24 >> 2] | 0;
 $shr164 = $2 >> 1;
 if (($shift | 0) > 0) {
  $i$0166 = 0;
  $shr167 = $shr164;
  $trig$0165 = $3;
  while (1) {
   $add$ptr = $trig$0165 + ($shr167 << 2) | 0;
   $i$0166 = $i$0166 + 1 | 0;
   $shr = $shr167 >> 1;
   if (($i$0166 | 0) == ($shift | 0)) {
    $N$0$lcssa = $shr167;
    $shr$lcssa = $shr;
    $trig$0$lcssa = $add$ptr;
    break;
   } else {
    $shr167 = $shr;
    $trig$0165 = $add$ptr;
   }
  }
 } else {
  $N$0$lcssa = $2;
  $shr$lcssa = $shr164;
  $trig$0$lcssa = $3;
 }
 $shr4 = $N$0$lcssa >> 2;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shr$lcssa << 2) | 0) + 15 & -16) | 0;
 $vla5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shr4 << 3) | 0) + 15 & -16) | 0;
 $shr6 = $overlap >> 1;
 $add$ptr7 = $in + ($shr6 << 2) | 0;
 $add$ptr11 = $in + ($shr$lcssa << 2) + -4 + ($shr6 << 2) | 0;
 $add$ptr13 = $window + ($shr6 << 2) | 0;
 $shr18 = $overlap + 3 >> 2;
 if (($overlap | 0) > 0) {
  $sub = 0 - $shr$lcssa | 0;
  $i$1157 = 0;
  $wp1$0153 = $add$ptr13;
  $wp2$0152 = $add$ptr13 + -4 | 0;
  $xp1$0156 = $add$ptr7;
  $xp2$0155 = $add$ptr11;
  $yp$0154 = $vla;
  while (1) {
   $4 = +HEAPF32[$wp2$0152 >> 2];
   $6 = +HEAPF32[$wp1$0153 >> 2];
   HEAPF32[$yp$0154 >> 2] = $4 * +HEAPF32[$xp1$0156 + ($shr$lcssa << 2) >> 2] + $6 * +HEAPF32[$xp2$0155 >> 2];
   $incdec$ptr28 = $yp$0154 + 8 | 0;
   HEAPF32[$yp$0154 + 4 >> 2] = $6 * +HEAPF32[$xp1$0156 >> 2] - $4 * +HEAPF32[$xp2$0155 + ($sub << 2) >> 2];
   $add$ptr29 = $xp1$0156 + 8 | 0;
   $add$ptr30 = $xp2$0155 + -8 | 0;
   $inc34 = $i$1157 + 1 | 0;
   if (($inc34 | 0) < ($shr18 | 0)) {
    $i$1157 = $inc34;
    $wp1$0153 = $wp1$0153 + 8 | 0;
    $wp2$0152 = $wp2$0152 + -8 | 0;
    $xp1$0156 = $add$ptr29;
    $xp2$0155 = $add$ptr30;
    $yp$0154 = $incdec$ptr28;
   } else {
    $i$1$lcssa = $inc34;
    $xp1$0$lcssa = $add$ptr29;
    $xp2$0$lcssa = $add$ptr30;
    $yp$0$lcssa = $incdec$ptr28;
    break;
   }
  }
 } else {
  $i$1$lcssa = 0;
  $xp1$0$lcssa = $add$ptr7;
  $xp2$0$lcssa = $add$ptr11;
  $yp$0$lcssa = $vla;
 }
 $add$ptr37 = $window + ($overlap << 2) + -4 | 0;
 $sub41 = $shr4 - $shr18 | 0;
 if (($i$1$lcssa | 0) < ($sub41 | 0)) {
  $10 = $shr4 << 1;
  $12 = $i$1$lcssa + $shr18 << 1;
  $13 = $10 - $12 | 0;
  $scevgep = $yp$0$lcssa + ($13 << 2) | 0;
  $i$2147 = $i$1$lcssa;
  $xp1$1146 = $xp1$0$lcssa;
  $xp2$1145 = $xp2$0$lcssa;
  $yp$1144 = $yp$0$lcssa;
  while (1) {
   HEAP32[$yp$1144 >> 2] = HEAP32[$xp2$1145 >> 2];
   HEAP32[$yp$1144 + 4 >> 2] = HEAP32[$xp1$1146 >> 2];
   $i$2147 = $i$2147 + 1 | 0;
   if (($i$2147 | 0) == ($sub41 | 0)) break; else {
    $xp1$1146 = $xp1$1146 + 8 | 0;
    $xp2$1145 = $xp2$1145 + -8 | 0;
    $yp$1144 = $yp$1144 + 8 | 0;
   }
  }
  $i$2$lcssa = $sub41;
  $xp1$1$lcssa = $xp1$0$lcssa + ($13 << 2) | 0;
  $xp2$1$lcssa = $xp2$0$lcssa + ($12 - $10 << 2) | 0;
  $yp$1$lcssa = $scevgep;
 } else {
  $i$2$lcssa = $i$1$lcssa;
  $xp1$1$lcssa = $xp1$0$lcssa;
  $xp2$1$lcssa = $xp2$0$lcssa;
  $yp$1$lcssa = $yp$0$lcssa;
 }
 if (($i$2$lcssa | 0) < ($shr4 | 0)) {
  $sub54 = 0 - $shr$lcssa | 0;
  $i$3142 = $i$2$lcssa;
  $wp1$1138 = $window;
  $wp2$1137 = $add$ptr37;
  $xp1$2141 = $xp1$1$lcssa;
  $xp2$2140 = $xp2$1$lcssa;
  $yp$2139 = $yp$1$lcssa;
  while (1) {
   HEAPF32[$yp$2139 >> 2] = +HEAPF32[$wp2$1137 >> 2] * +HEAPF32[$xp2$2140 >> 2] - +HEAPF32[$wp1$1138 >> 2] * +HEAPF32[$xp1$2141 + ($sub54 << 2) >> 2];
   HEAPF32[$yp$2139 + 4 >> 2] = +HEAPF32[$wp2$1137 >> 2] * +HEAPF32[$xp1$2141 >> 2] + +HEAPF32[$wp1$1138 >> 2] * +HEAPF32[$xp2$2140 + ($shr$lcssa << 2) >> 2];
   $i$3142 = $i$3142 + 1 | 0;
   if (($i$3142 | 0) == ($shr4 | 0)) break; else {
    $wp1$1138 = $wp1$1138 + 8 | 0;
    $wp2$1137 = $wp2$1137 + -8 | 0;
    $xp1$2141 = $xp1$2141 + 8 | 0;
    $xp2$2140 = $xp2$2140 + -8 | 0;
    $yp$2139 = $yp$2139 + 8 | 0;
   }
  }
 }
 if (($N$0$lcssa | 0) <= 3) {
  _opus_fft_impl($0, $vla5);
  STACKTOP = sp;
  return;
 }
 $25 = HEAP32[$0 + 44 >> 2] | 0;
 $i$4135 = 0;
 $yp73$0134 = $vla;
 while (1) {
  $26 = +HEAPF32[$trig$0$lcssa + ($i$4135 << 2) >> 2];
  $27 = +HEAPF32[$trig$0$lcssa + ($i$4135 + $shr4 << 2) >> 2];
  $28 = +HEAPF32[$yp73$0134 >> 2];
  $29 = +HEAPF32[$yp73$0134 + 4 >> 2];
  $idxprom = HEAP16[$25 + ($i$4135 << 1) >> 1] | 0;
  HEAPF32[$vla5 + ($idxprom << 3) >> 2] = $1 * ($26 * $28 - $27 * $29);
  HEAPF32[$vla5 + ($idxprom << 3) + 4 >> 2] = $1 * ($27 * $28 + $26 * $29);
  $i$4135 = $i$4135 + 1 | 0;
  if (($i$4135 | 0) >= ($shr4 | 0)) break; else $yp73$0134 = $yp73$0134 + 8 | 0;
 }
 _opus_fft_impl($0, $vla5);
 $mul128 = $stride << 1;
 $idx$neg = 0 - $mul128 | 0;
 $fp$0129 = $vla5;
 $i$5132 = 0;
 $yp1$0130 = $out;
 $yp2$0131 = $out + ((Math_imul($shr$lcssa + -1 | 0, $stride) | 0) << 2) | 0;
 while (1) {
  $31 = +HEAPF32[$fp$0129 + 4 >> 2];
  $32 = +HEAPF32[$trig$0$lcssa + ($i$5132 + $shr4 << 2) >> 2];
  $33 = +HEAPF32[$fp$0129 >> 2];
  $34 = +HEAPF32[$trig$0$lcssa + ($i$5132 << 2) >> 2];
  HEAPF32[$yp1$0130 >> 2] = $31 * $32 - $33 * $34;
  HEAPF32[$yp2$0131 >> 2] = $32 * $33 + $31 * $34;
  $i$5132 = $i$5132 + 1 | 0;
  if (($i$5132 | 0) >= ($shr4 | 0)) break; else {
   $fp$0129 = $fp$0129 + 8 | 0;
   $yp1$0130 = $yp1$0130 + ($mul128 << 2) | 0;
   $yp2$0131 = $yp2$0131 + ($idx$neg << 2) | 0;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $24 = 0, $call$i = 0, $call$i65 = 0, $ref$tmp = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65540) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i);
  $1 = HEAP32[$ref$tmp >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__nsn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0);
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__psn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0);
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__sym + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i) | 0;
 } else {
  $call$i65 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65532) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i65);
  $24 = HEAP32[$ref$tmp >> 2] | 0;
  HEAP8[$__pat >> 0] = $24;
  HEAP8[$__pat + 1 >> 0] = $24 >> 8;
  HEAP8[$__pat + 2 >> 0] = $24 >> 16;
  HEAP8[$__pat + 3 >> 0] = $24 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i65);
  if ((HEAP8[$__nsn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0);
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i65);
  if ((HEAP8[$__psn + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0);
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 12 >> 2] & 63]($call$i65) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 16 >> 2] & 63]($call$i65) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i65);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i65);
  if ((HEAP8[$__sym + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 8 + 3 >> 0] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($ref$tmp, 0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i65 >> 2] | 0) + 36 >> 2] & 63]($call$i65) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc$0$0$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc$0$0$val = $__loc$0$0$val | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $18 = 0, $call$i = 0, $call$i77 = 0, $ref$tmp = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65524) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i);
  $1 = HEAP32[$ref$tmp >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__nsn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0);
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__psn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0);
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i);
  if ((HEAP8[$__sym + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i) | 0;
 } else {
  $call$i77 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$0$0$val, 65516) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 44 >> 2] & 63]($ref$tmp, $call$i77);
  $18 = HEAP32[$ref$tmp >> 2] | 0;
  HEAP8[$__pat >> 0] = $18;
  HEAP8[$__pat + 1 >> 0] = $18 >> 8;
  HEAP8[$__pat + 2 >> 0] = $18 >> 16;
  HEAP8[$__pat + 3 >> 0] = $18 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 32 >> 2] & 63]($ref$tmp, $call$i77);
  if ((HEAP8[$__nsn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0);
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 28 >> 2] & 63]($ref$tmp, $call$i77);
  if ((HEAP8[$__psn + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0);
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 12 >> 2] & 63]($call$i77) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 16 >> 2] & 63]($call$i77) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 20 >> 2] & 63]($ref$tmp, $call$i77);
  if ((HEAP8[$__grp + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0);
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 24 >> 2] & 63]($ref$tmp, $call$i77);
  if ((HEAP8[$__sym + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0);
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP8[$ref$tmp + 11 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i77 >> 2] | 0) + 36 >> 2] & 63]($call$i77) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i24 = 0, $__ninp_$i$i93 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $call4$i15$i$i68 = 0, $conv = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i116 = 0, $retval$0$i$i$i$i45 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i137 = 0, $retval$0$i$i13$i$i66 = 0, $retval$0$i$i84 = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $58 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $58 = 1;
   break;
  } else {
   $58 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$__e$0) label = 13; else {
  $5 = HEAP32[$__e$0 + 12 >> 2] | 0;
  if (($5 | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 63]($__e$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 13; else if ($58) {
   $59 = $__e$0;
   label = 16;
  } else label = 15;
 }
 if ((label | 0) == 13) if ($58) label = 15; else {
  $59 = 0;
  label = 16;
 }
 L20 : do if ((label | 0) == 15) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 16) {
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$2 = 0;
   break;
  }
  $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24;
  $18 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i24 = $18 + 12 | 0;
  $19 = HEAP32[$__ninp_$i$i24 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] & 63]($18) | 0; else HEAP32[$__ninp_$i$i24 >> 2] = $19 + 4;
  $27 = $59;
  $32 = $59;
  $__n$addr$0$in = $__n;
  $__r$0$in = $conv;
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $__n$addr$0 = $__n$addr$0$in + -1 | 0;
   $22 = HEAP32[$__b >> 2] | 0;
   do if (!$22) $34 = 1; else {
    $23 = HEAP32[$22 + 12 >> 2] | 0;
    if (($23 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $retval$0$i$i$i$i45 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i45) | 0) {
     HEAP32[$__b >> 2] = 0;
     $34 = 1;
     break;
    } else {
     $34 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$27) {
    $35 = 1;
    $52 = $32;
    $60 = 0;
   } else {
    $28 = HEAP32[$27 + 12 >> 2] | 0;
    if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i13$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; else $retval$0$i$i13$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
    $call4$i15$i$i68 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i66) | 0;
    $35 = $call4$i15$i$i68;
    $52 = $call4$i15$i$i68 ? 0 : $32;
    $60 = $call4$i15$i$i68 ? 0 : $27;
   }
   $37 = HEAP32[$__b >> 2] | 0;
   if (!(($__n$addr$0$in | 0) > 1 & ($34 ^ $35))) break;
   $38 = HEAP32[$37 + 12 >> 2] | 0;
   if (($38 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $retval$0$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($37) | 0; else $retval$0$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$38 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $retval$0$i$i84) | 0)) {
    $retval$2 = $__r$0;
    break L20;
   }
   $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i84, 0) | 0) << 24 >> 24) | 0;
   $44 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i93 = $44 + 12 | 0;
   $45 = HEAP32[$__ninp_$i$i93 >> 2] | 0;
   if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 40 >> 2] & 63]($44) | 0; else HEAP32[$__ninp_$i$i93 >> 2] = $45 + 4;
   $27 = $60;
   $32 = $52;
   $__n$addr$0$in = $__n$addr$0;
   $__r$0$in = $add;
  }
  do if (!$37) $61 = 1; else {
   $48 = HEAP32[$37 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $retval$0$i$i$i$i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($37) | 0; else $retval$0$i$i$i$i116 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i116) | 0) {
    HEAP32[$__b >> 2] = 0;
    $61 = 1;
    break;
   } else {
    $61 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$52) label = 58; else {
   $53 = HEAP32[$52 + 12 >> 2] | 0;
   if (($53 | 0) == (HEAP32[$52 + 16 >> 2] | 0)) $retval$0$i$i13$i$i137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$52 >> 2] | 0) + 36 >> 2] & 63]($52) | 0; else $retval$0$i$i13$i$i137 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i137) | 0) label = 58; else if ($61) {
    $retval$2 = $__r$0;
    break;
   }
  }
  if ((label | 0) == 58) if (!$61) {
   $retval$2 = $__r$0;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $retval$2 = $__r$0;
 } while (0);
 return $retval$2 | 0;
}

function _resampler_basic_interpolate_double($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $accum$sroa$0$186$us = 0.0, $accum$sroa$12$189$us = 0.0, $accum$sroa$6$187$us = 0.0, $accum$sroa$9$188$us = 0.0, $add24$us = 0, $add93 = 0, $add93$us = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx9$us = 0, $cmp94 = 0, $cmp94$us = 0, $conv$i = 0.0, $conv$i$us = 0.0, $conv15 = 0.0, $conv23$i = 0.0, $conv23$i$us = 0.0, $conv26$i = 0.0, $conv26$i$us = 0.0, $div$us = 0, $div16 = 0.0, $div16$us = 0.0, $inc89 = 0, $inc89$us = 0, $j$085$us = 0, $last_sample$0$lcssa = 0, $last_sample$095 = 0, $last_sample$095$us = 0, $last_sample$1 = 0, $last_sample$1$us = 0, $mul$i = 0.0, $mul$i$us = 0.0, $mul$us = 0, $mul3$i = 0.0, $mul3$i$us = 0.0, $mul5$i = 0.0, $mul5$i$us = 0.0, $out_sample$0$lcssa = 0, $out_sample$096 = 0, $out_sample$096$us = 0, $oversample = 0, $samp_frac_num$0$lcssa = 0, $samp_frac_num$094 = 0, $samp_frac_num$094$us = 0, $samp_frac_num$1 = 0, $samp_frac_num$1$us = 0, $sinc_table = 0, $sub$us = 0, label = 0;
 $0 = HEAP32[$st + 24 >> 2] | 0;
 $arrayidx = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
 $2 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx3 = (HEAP32[$st + 64 >> 2] | 0) + ($channel_index << 2) | 0;
 $4 = HEAP32[$arrayidx3 >> 2] | 0;
 $5 = HEAP32[$st + 92 >> 2] | 0;
 $6 = HEAP32[$st + 36 >> 2] | 0;
 $7 = HEAP32[$st + 40 >> 2] | 0;
 $8 = HEAP32[$st + 12 >> 2] | 0;
 $9 = HEAP32[$in_len >> 2] | 0;
 if (($2 | 0) >= ($9 | 0)) {
  $last_sample$0$lcssa = $2;
  $out_sample$0$lcssa = 0;
  $samp_frac_num$0$lcssa = $4;
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 $10 = HEAP32[$out_len >> 2] | 0;
 $oversample = $st + 48 | 0;
 $conv15 = +($8 >>> 0);
 $sinc_table = $st + 76 | 0;
 if (($0 | 0) <= 0) {
  $last_sample$095 = $2;
  $out_sample$096 = 0;
  $samp_frac_num$094 = $4;
  while (1) {
   if (($out_sample$096 | 0) >= ($10 | 0)) {
    $last_sample$0$lcssa = $last_sample$095;
    $out_sample$0$lcssa = $out_sample$096;
    $samp_frac_num$0$lcssa = $samp_frac_num$094;
    label = 11;
    break;
   }
   $div16 = +((((Math_imul(HEAP32[$oversample >> 2] | 0, $samp_frac_num$094) | 0) >>> 0) % ($8 >>> 0) | 0) >>> 0) / $conv15;
   $mul$i = $div16 * .16666999459266663;
   $mul3$i = $div16 * ($div16 * $mul$i);
   $mul5$i = $div16 * ($div16 * .5);
   $conv$i = $mul3$i - $mul$i;
   $conv23$i = $div16 + $mul5$i - $div16 * $mul5$i;
   $conv26$i = $mul5$i - $div16 * .3333300054073334 - $mul3$i;
   $inc89 = $out_sample$096 + 1 | 0;
   HEAPF32[$out + ((Math_imul($out_sample$096, $5) | 0) << 2) >> 2] = $conv$i * 0.0 + $conv23$i * 0.0 + (1.0 - $conv$i - $conv23$i - $conv26$i) * 0.0 + $conv26$i * 0.0;
   $add93 = $samp_frac_num$094 + $7 | 0;
   $cmp94 = $add93 >>> 0 < $8 >>> 0;
   $samp_frac_num$1 = $add93 - ($cmp94 ? 0 : $8) | 0;
   $last_sample$1 = $last_sample$095 + $6 + (($cmp94 ^ 1) & 1) | 0;
   if (($last_sample$1 | 0) < ($9 | 0)) {
    $last_sample$095 = $last_sample$1;
    $out_sample$096 = $inc89;
    $samp_frac_num$094 = $samp_frac_num$1;
   } else {
    $last_sample$0$lcssa = $last_sample$1;
    $out_sample$0$lcssa = $inc89;
    $samp_frac_num$0$lcssa = $samp_frac_num$1;
    label = 11;
    break;
   }
  }
  if ((label | 0) == 11) {
   HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
   HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
   return $out_sample$0$lcssa | 0;
  }
 }
 $last_sample$095$us = $2;
 $out_sample$096$us = 0;
 $samp_frac_num$094$us = $4;
 while (1) {
  if (($out_sample$096$us | 0) >= ($10 | 0)) {
   $last_sample$0$lcssa = $last_sample$095$us;
   $out_sample$0$lcssa = $out_sample$096$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$094$us;
   label = 11;
   break;
  }
  $arrayidx9$us = $in + ($last_sample$095$us << 2) | 0;
  $11 = HEAP32[$oversample >> 2] | 0;
  $mul$us = Math_imul($11, $samp_frac_num$094$us) | 0;
  $div$us = ($mul$us >>> 0) / ($8 >>> 0) | 0;
  $13 = $mul$us - (Math_imul($div$us, $8) | 0) | 0;
  $14 = HEAP32[$sinc_table >> 2] | 0;
  $add24$us = 4 - $div$us | 0;
  $accum$sroa$0$186$us = 0.0;
  $accum$sroa$12$189$us = 0.0;
  $accum$sroa$6$187$us = 0.0;
  $accum$sroa$9$188$us = 0.0;
  $j$085$us = 0;
  do {
   $15 = +HEAPF32[$arrayidx9$us + ($j$085$us << 2) >> 2];
   $j$085$us = $j$085$us + 1 | 0;
   $sub$us = $add24$us + (Math_imul($j$085$us, $11) | 0) | 0;
   $accum$sroa$0$186$us = $accum$sroa$0$186$us + $15 * +HEAPF32[$14 + ($sub$us + -2 << 2) >> 2];
   $accum$sroa$6$187$us = $accum$sroa$6$187$us + $15 * +HEAPF32[$14 + ($sub$us + -1 << 2) >> 2];
   $accum$sroa$9$188$us = $accum$sroa$9$188$us + $15 * +HEAPF32[$14 + ($sub$us << 2) >> 2];
   $accum$sroa$12$189$us = $accum$sroa$12$189$us + $15 * +HEAPF32[$14 + ($sub$us + 1 << 2) >> 2];
  } while (($j$085$us | 0) != ($0 | 0));
  $div16$us = +($13 >>> 0) / $conv15;
  $mul$i$us = $div16$us * .16666999459266663;
  $mul3$i$us = $div16$us * ($div16$us * $mul$i$us);
  $mul5$i$us = $div16$us * ($div16$us * .5);
  $conv$i$us = $mul3$i$us - $mul$i$us;
  $conv23$i$us = $div16$us + $mul5$i$us - $div16$us * $mul5$i$us;
  $conv26$i$us = $mul5$i$us - $div16$us * .3333300054073334 - $mul3$i$us;
  $inc89$us = $out_sample$096$us + 1 | 0;
  HEAPF32[$out + ((Math_imul($out_sample$096$us, $5) | 0) << 2) >> 2] = $accum$sroa$0$186$us * $conv$i$us + $accum$sroa$6$187$us * $conv23$i$us + $accum$sroa$9$188$us * (1.0 - $conv$i$us - $conv23$i$us - $conv26$i$us) + $accum$sroa$12$189$us * $conv26$i$us;
  $add93$us = $samp_frac_num$094$us + $7 | 0;
  $cmp94$us = $add93$us >>> 0 < $8 >>> 0;
  $samp_frac_num$1$us = $add93$us - ($cmp94$us ? 0 : $8) | 0;
  $last_sample$1$us = $last_sample$095$us + $6 + (($cmp94$us ^ 1) & 1) | 0;
  if (($last_sample$1$us | 0) < ($9 | 0)) {
   $last_sample$095$us = $last_sample$1$us;
   $out_sample$096$us = $inc89$us;
   $samp_frac_num$094$us = $samp_frac_num$1$us;
  } else {
   $last_sample$0$lcssa = $last_sample$1$us;
   $out_sample$0$lcssa = $inc89$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$1$us;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 return 0;
}

function _resampler_basic_interpolate_single($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $accum$sroa$0$081$us = 0.0, $accum$sroa$12$178$us = 0.0, $accum$sroa$6$080$us = 0.0, $accum$sroa$9$079$us = 0.0, $add22$i = 0.0, $add22$i$us = 0.0, $add22$us = 0, $add79 = 0, $add79$us = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx9$us = 0, $cmp80 = 0, $cmp80$us = 0, $conv15 = 0.0, $div$us = 0, $div16 = 0.0, $div16$us = 0.0, $inc75 = 0, $inc75$us = 0, $j$077$us = 0, $last_sample$0$lcssa = 0, $last_sample$087 = 0, $last_sample$087$us = 0, $last_sample$1 = 0, $last_sample$1$us = 0, $mul$i = 0.0, $mul$i$us = 0.0, $mul$us = 0, $mul3$i = 0.0, $mul3$i$us = 0.0, $mul5$i = 0.0, $mul5$i$us = 0.0, $out_sample$0$lcssa = 0, $out_sample$088 = 0, $out_sample$088$us = 0, $oversample = 0, $samp_frac_num$0$lcssa = 0, $samp_frac_num$086 = 0, $samp_frac_num$086$us = 0, $samp_frac_num$1 = 0, $samp_frac_num$1$us = 0, $sinc_table = 0, $sub$i = 0.0, $sub$i$us = 0.0, $sub$us = 0, $sub18$i = 0.0, $sub18$i$us = 0.0, label = 0;
 $0 = HEAP32[$st + 24 >> 2] | 0;
 $arrayidx = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
 $2 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx3 = (HEAP32[$st + 64 >> 2] | 0) + ($channel_index << 2) | 0;
 $4 = HEAP32[$arrayidx3 >> 2] | 0;
 $5 = HEAP32[$st + 92 >> 2] | 0;
 $6 = HEAP32[$st + 36 >> 2] | 0;
 $7 = HEAP32[$st + 40 >> 2] | 0;
 $8 = HEAP32[$st + 12 >> 2] | 0;
 $9 = HEAP32[$in_len >> 2] | 0;
 if (($2 | 0) >= ($9 | 0)) {
  $last_sample$0$lcssa = $2;
  $out_sample$0$lcssa = 0;
  $samp_frac_num$0$lcssa = $4;
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 $10 = HEAP32[$out_len >> 2] | 0;
 $oversample = $st + 48 | 0;
 $conv15 = +($8 >>> 0);
 $sinc_table = $st + 76 | 0;
 if (($0 | 0) <= 0) {
  $last_sample$087 = $2;
  $out_sample$088 = 0;
  $samp_frac_num$086 = $4;
  while (1) {
   if (($out_sample$088 | 0) >= ($10 | 0)) {
    $last_sample$0$lcssa = $last_sample$087;
    $out_sample$0$lcssa = $out_sample$088;
    $samp_frac_num$0$lcssa = $samp_frac_num$086;
    label = 11;
    break;
   }
   $div16 = +((((Math_imul(HEAP32[$oversample >> 2] | 0, $samp_frac_num$086) | 0) >>> 0) % ($8 >>> 0) | 0) >>> 0) / $conv15;
   $mul$i = $div16 * .16666999459266663;
   $mul3$i = $div16 * ($div16 * $mul$i);
   $add22$i = $mul3$i - $mul$i;
   $mul5$i = $div16 * ($div16 * .5);
   $sub$i = $div16 + $mul5$i - $div16 * $mul5$i;
   $sub18$i = $mul5$i - $div16 * .3333300054073334 - $mul3$i;
   $inc75 = $out_sample$088 + 1 | 0;
   HEAPF32[$out + ((Math_imul($out_sample$088, $5) | 0) << 2) >> 2] = $sub18$i * 0.0 + ((1.0 - $add22$i - $sub$i - $sub18$i) * 0.0 + ($sub$i * 0.0 + $add22$i * 0.0));
   $add79 = $samp_frac_num$086 + $7 | 0;
   $cmp80 = $add79 >>> 0 < $8 >>> 0;
   $samp_frac_num$1 = $add79 - ($cmp80 ? 0 : $8) | 0;
   $last_sample$1 = $last_sample$087 + $6 + (($cmp80 ^ 1) & 1) | 0;
   if (($last_sample$1 | 0) < ($9 | 0)) {
    $last_sample$087 = $last_sample$1;
    $out_sample$088 = $inc75;
    $samp_frac_num$086 = $samp_frac_num$1;
   } else {
    $last_sample$0$lcssa = $last_sample$1;
    $out_sample$0$lcssa = $inc75;
    $samp_frac_num$0$lcssa = $samp_frac_num$1;
    label = 11;
    break;
   }
  }
  if ((label | 0) == 11) {
   HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
   HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
   return $out_sample$0$lcssa | 0;
  }
 }
 $last_sample$087$us = $2;
 $out_sample$088$us = 0;
 $samp_frac_num$086$us = $4;
 while (1) {
  if (($out_sample$088$us | 0) >= ($10 | 0)) {
   $last_sample$0$lcssa = $last_sample$087$us;
   $out_sample$0$lcssa = $out_sample$088$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$086$us;
   label = 11;
   break;
  }
  $arrayidx9$us = $in + ($last_sample$087$us << 2) | 0;
  $11 = HEAP32[$oversample >> 2] | 0;
  $mul$us = Math_imul($11, $samp_frac_num$086$us) | 0;
  $div$us = ($mul$us >>> 0) / ($8 >>> 0) | 0;
  $13 = $mul$us - (Math_imul($div$us, $8) | 0) | 0;
  $14 = HEAP32[$sinc_table >> 2] | 0;
  $add22$us = 4 - $div$us | 0;
  $accum$sroa$0$081$us = 0.0;
  $accum$sroa$12$178$us = 0.0;
  $accum$sroa$6$080$us = 0.0;
  $accum$sroa$9$079$us = 0.0;
  $j$077$us = 0;
  do {
   $15 = +HEAPF32[$arrayidx9$us + ($j$077$us << 2) >> 2];
   $j$077$us = $j$077$us + 1 | 0;
   $sub$us = $add22$us + (Math_imul($j$077$us, $11) | 0) | 0;
   $accum$sroa$0$081$us = $accum$sroa$0$081$us + $15 * +HEAPF32[$14 + ($sub$us + -2 << 2) >> 2];
   $accum$sroa$6$080$us = $accum$sroa$6$080$us + $15 * +HEAPF32[$14 + ($sub$us + -1 << 2) >> 2];
   $accum$sroa$9$079$us = $accum$sroa$9$079$us + $15 * +HEAPF32[$14 + ($sub$us << 2) >> 2];
   $accum$sroa$12$178$us = $accum$sroa$12$178$us + $15 * +HEAPF32[$14 + ($sub$us + 1 << 2) >> 2];
  } while (($j$077$us | 0) != ($0 | 0));
  $div16$us = +($13 >>> 0) / $conv15;
  $mul$i$us = $div16$us * .16666999459266663;
  $mul3$i$us = $div16$us * ($div16$us * $mul$i$us);
  $add22$i$us = $mul3$i$us - $mul$i$us;
  $mul5$i$us = $div16$us * ($div16$us * .5);
  $sub$i$us = $div16$us + $mul5$i$us - $div16$us * $mul5$i$us;
  $sub18$i$us = $mul5$i$us - $div16$us * .3333300054073334 - $mul3$i$us;
  $inc75$us = $out_sample$088$us + 1 | 0;
  HEAPF32[$out + ((Math_imul($out_sample$088$us, $5) | 0) << 2) >> 2] = $sub18$i$us * $accum$sroa$12$178$us + ($accum$sroa$9$079$us * (1.0 - $add22$i$us - $sub$i$us - $sub18$i$us) + ($sub$i$us * $accum$sroa$6$080$us + $add22$i$us * $accum$sroa$0$081$us));
  $add79$us = $samp_frac_num$086$us + $7 | 0;
  $cmp80$us = $add79$us >>> 0 < $8 >>> 0;
  $samp_frac_num$1$us = $add79$us - ($cmp80$us ? 0 : $8) | 0;
  $last_sample$1$us = $last_sample$087$us + $6 + (($cmp80$us ^ 1) & 1) | 0;
  if (($last_sample$1$us | 0) < ($9 | 0)) {
   $last_sample$087$us = $last_sample$1$us;
   $out_sample$088$us = $inc75$us;
   $samp_frac_num$086$us = $samp_frac_num$1$us;
  } else {
   $last_sample$0$lcssa = $last_sample$1$us;
   $out_sample$0$lcssa = $inc75$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$1$us;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 return 0;
}

function _silk_stereo_quant_pred($pred_Q13, $ix) {
 $pred_Q13 = $pred_Q13 | 0;
 $ix = $ix | 0;
 var $0 = 0, $11 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $add12 = 0, $add12$1 = 0, $add24 = 0, $add24$1 = 0, $add24$1$1 = 0, $add24$159 = 0, $add24$2 = 0, $add24$2$1 = 0, $add24$3 = 0, $add24$3$1 = 0, $add24$4 = 0, $add24$4$1 = 0, $arrayidx25$1 = 0, $arrayidx38$1 = 0, $arrayidx41 = 0, $arrayidx41$1 = 0, $cond = 0, $cond$1 = 0, $cond$1$1 = 0, $cond$163 = 0, $cond$2 = 0, $cond$2$1 = 0, $cond$3 = 0, $cond$3$1 = 0, $conv = 0, $conv$1 = 0, $conv36 = 0, $conv36$1 = 0, $err_min_Q13$050 = 0, $err_min_Q13$050$1 = 0, $i$051 = 0, $i$051$1 = 0, $quant_pred_Q13$152 = 0, $quant_pred_Q13$152$1 = 0, $quant_pred_Q13$3 = 0, $quant_pred_Q13$3$1 = 0, $sub = 0, $sub$1 = 0, $sub26 = 0, $sub26$1 = 0, $sub26$1$1 = 0, $sub26$160 = 0, $sub26$2 = 0, $sub26$2$1 = 0, $sub26$3 = 0, $sub26$3$1 = 0, $sub26$4 = 0, $sub26$4$1 = 0, label = 0, $i$051$looptemp = 0, $i$051$1$looptemp = 0;
 $arrayidx41 = $ix + 1 | 0;
 $0 = -13732;
 $err_min_Q13$050 = 2147483647;
 $i$051 = 0;
 $quant_pred_Q13$152 = 0;
 while (1) {
  $conv = $0 << 16 >> 16;
  $i$051$looptemp = $i$051;
  $i$051 = $i$051 + 1 | 0;
  $0 = HEAP16[24832 + ($i$051 << 1) >> 1] | 0;
  $sub = ($0 << 16 >> 16) - $conv | 0;
  $add12 = ((($sub & 65535) * 6554 | 0) >>> 16) + (($sub >> 16) * 6554 | 0) | 0;
  $conv36 = $i$051$looptemp & 255;
  $add24 = $add12 + $conv | 0;
  $sub26 = (HEAP32[$pred_Q13 >> 2] | 0) - $add24 | 0;
  $cond = ($sub26 | 0) > 0 ? $sub26 : 0 - $sub26 | 0;
  if (($cond | 0) >= ($err_min_Q13$050 | 0)) {
   label = 3;
   break;
  }
  HEAP8[$ix >> 0] = $conv36;
  HEAP8[$arrayidx41 >> 0] = 0;
  $add24$1 = ($add12 * 3 | 0) + $conv | 0;
  $sub26$1 = (HEAP32[$pred_Q13 >> 2] | 0) - $add24$1 | 0;
  $cond$1 = ($sub26$1 | 0) > 0 ? $sub26$1 : 0 - $sub26$1 | 0;
  if (($cond$1 | 0) >= ($cond | 0)) {
   $6 = $conv36;
   $quant_pred_Q13$3 = $add24;
   break;
  }
  HEAP8[$ix >> 0] = $conv36;
  HEAP8[$arrayidx41 >> 0] = 1;
  $add24$2 = ($add12 * 5 | 0) + $conv | 0;
  $sub26$2 = (HEAP32[$pred_Q13 >> 2] | 0) - $add24$2 | 0;
  $cond$2 = ($sub26$2 | 0) > 0 ? $sub26$2 : 0 - $sub26$2 | 0;
  if (($cond$2 | 0) >= ($cond$1 | 0)) {
   $6 = $conv36;
   $quant_pred_Q13$3 = $add24$1;
   break;
  }
  HEAP8[$ix >> 0] = $conv36;
  HEAP8[$arrayidx41 >> 0] = 2;
  $add24$3 = ($add12 * 7 | 0) + $conv | 0;
  $sub26$3 = (HEAP32[$pred_Q13 >> 2] | 0) - $add24$3 | 0;
  $cond$3 = ($sub26$3 | 0) > 0 ? $sub26$3 : 0 - $sub26$3 | 0;
  if (($cond$3 | 0) >= ($cond$2 | 0)) {
   $6 = $conv36;
   $quant_pred_Q13$3 = $add24$2;
   break;
  }
  HEAP8[$ix >> 0] = $conv36;
  HEAP8[$arrayidx41 >> 0] = 3;
  $add24$4 = ($add12 * 9 | 0) + $conv | 0;
  $sub26$4 = (HEAP32[$pred_Q13 >> 2] | 0) - $add24$4 | 0;
  $err_min_Q13$050 = ($sub26$4 | 0) > 0 ? $sub26$4 : 0 - $sub26$4 | 0;
  if (($err_min_Q13$050 | 0) >= ($cond$3 | 0)) {
   $6 = $conv36;
   $quant_pred_Q13$3 = $add24$3;
   break;
  }
  HEAP8[$ix >> 0] = $conv36;
  HEAP8[$arrayidx41 >> 0] = 4;
  if ($i$051 >>> 0 >= 15) {
   $6 = $conv36;
   $quant_pred_Q13$3 = $add24$4;
   break;
  } else $quant_pred_Q13$152 = $add24$4;
 }
 if ((label | 0) == 3) {
  $6 = HEAP8[$ix >> 0] | 0;
  $quant_pred_Q13$3 = $quant_pred_Q13$152;
 }
 $5 = ($6 << 24 >> 24) / 3 | 0;
 HEAP8[$ix + 2 >> 0] = $5;
 HEAP8[$ix >> 0] = (Math_imul($5 << 24 >> 24, -3) | 0) + ($6 & 255);
 HEAP32[$pred_Q13 >> 2] = $quant_pred_Q13$3;
 $arrayidx25$1 = $pred_Q13 + 4 | 0;
 $arrayidx38$1 = $ix + 3 | 0;
 $arrayidx41$1 = $ix + 4 | 0;
 $11 = -13732;
 $err_min_Q13$050$1 = 2147483647;
 $i$051$1 = 0;
 $quant_pred_Q13$152$1 = $quant_pred_Q13$3;
 while (1) {
  $conv$1 = $11 << 16 >> 16;
  $i$051$1$looptemp = $i$051$1;
  $i$051$1 = $i$051$1 + 1 | 0;
  $11 = HEAP16[24832 + ($i$051$1 << 1) >> 1] | 0;
  $sub$1 = ($11 << 16 >> 16) - $conv$1 | 0;
  $add12$1 = ((($sub$1 & 65535) * 6554 | 0) >>> 16) + (($sub$1 >> 16) * 6554 | 0) | 0;
  $conv36$1 = $i$051$1$looptemp & 255;
  $add24$159 = $add12$1 + $conv$1 | 0;
  $sub26$160 = (HEAP32[$arrayidx25$1 >> 2] | 0) - $add24$159 | 0;
  $cond$163 = ($sub26$160 | 0) > 0 ? $sub26$160 : 0 - $sub26$160 | 0;
  if (($cond$163 | 0) >= ($err_min_Q13$050$1 | 0)) {
   label = 11;
   break;
  }
  HEAP8[$arrayidx38$1 >> 0] = $conv36$1;
  HEAP8[$arrayidx41$1 >> 0] = 0;
  $add24$1$1 = ($add12$1 * 3 | 0) + $conv$1 | 0;
  $sub26$1$1 = (HEAP32[$arrayidx25$1 >> 2] | 0) - $add24$1$1 | 0;
  $cond$1$1 = ($sub26$1$1 | 0) > 0 ? $sub26$1$1 : 0 - $sub26$1$1 | 0;
  if (($cond$1$1 | 0) >= ($cond$163 | 0)) {
   $20 = $conv36$1;
   $quant_pred_Q13$3$1 = $add24$159;
   break;
  }
  HEAP8[$arrayidx38$1 >> 0] = $conv36$1;
  HEAP8[$arrayidx41$1 >> 0] = 1;
  $add24$2$1 = ($add12$1 * 5 | 0) + $conv$1 | 0;
  $sub26$2$1 = (HEAP32[$arrayidx25$1 >> 2] | 0) - $add24$2$1 | 0;
  $cond$2$1 = ($sub26$2$1 | 0) > 0 ? $sub26$2$1 : 0 - $sub26$2$1 | 0;
  if (($cond$2$1 | 0) >= ($cond$1$1 | 0)) {
   $20 = $conv36$1;
   $quant_pred_Q13$3$1 = $add24$1$1;
   break;
  }
  HEAP8[$arrayidx38$1 >> 0] = $conv36$1;
  HEAP8[$arrayidx41$1 >> 0] = 2;
  $add24$3$1 = ($add12$1 * 7 | 0) + $conv$1 | 0;
  $sub26$3$1 = (HEAP32[$arrayidx25$1 >> 2] | 0) - $add24$3$1 | 0;
  $cond$3$1 = ($sub26$3$1 | 0) > 0 ? $sub26$3$1 : 0 - $sub26$3$1 | 0;
  if (($cond$3$1 | 0) >= ($cond$2$1 | 0)) {
   $20 = $conv36$1;
   $quant_pred_Q13$3$1 = $add24$2$1;
   break;
  }
  HEAP8[$arrayidx38$1 >> 0] = $conv36$1;
  HEAP8[$arrayidx41$1 >> 0] = 3;
  $add24$4$1 = ($add12$1 * 9 | 0) + $conv$1 | 0;
  $sub26$4$1 = (HEAP32[$arrayidx25$1 >> 2] | 0) - $add24$4$1 | 0;
  $err_min_Q13$050$1 = ($sub26$4$1 | 0) > 0 ? $sub26$4$1 : 0 - $sub26$4$1 | 0;
  if (($err_min_Q13$050$1 | 0) >= ($cond$3$1 | 0)) {
   $20 = $conv36$1;
   $quant_pred_Q13$3$1 = $add24$3$1;
   break;
  }
  HEAP8[$arrayidx38$1 >> 0] = $conv36$1;
  HEAP8[$arrayidx41$1 >> 0] = 4;
  if ($i$051$1 >>> 0 >= 15) {
   $20 = $conv36$1;
   $quant_pred_Q13$3$1 = $add24$4$1;
   break;
  } else $quant_pred_Q13$152$1 = $add24$4$1;
 }
 if ((label | 0) == 11) {
  $20 = HEAP8[$arrayidx38$1 >> 0] | 0;
  $quant_pred_Q13$3$1 = $quant_pred_Q13$152$1;
 }
 $19 = ($20 << 24 >> 24) / 3 | 0;
 HEAP8[$ix + 5 >> 0] = $19;
 HEAP8[$arrayidx38$1 >> 0] = (Math_imul($19 << 24 >> 24, -3) | 0) + ($20 & 255);
 HEAP32[$arrayidx25$1 >> 2] = $quant_pred_Q13$3$1;
 HEAP32[$pred_Q13 >> 2] = (HEAP32[$pred_Q13 >> 2] | 0) - $quant_pred_Q13$3$1;
 return;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $17 = 0, $22 = 0, $3 = 0, $30 = 0, $7 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0, $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0, $tobool181 = 0, $tobool55 = 0, $tobool61 = 0, $trunc = 0, label = 0;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0 = 24;
   $emin$0 = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 default:
  $retval$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $0 = HEAP32[$rpos >> 2] | 0;
   if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $0 + 1;
    $cond = HEAPU8[$0 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L13 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub13 = 1 - ((($cond | 0) == 45 & 1) << 1) | 0;
    $3 = HEAP32[$rpos >> 2] | 0;
    if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $3 + 1;
     $c$0 = HEAPU8[$3 >> 0] | 0;
     $sign$0 = $sub13;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $sub13;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $sign$0 = 1;
   }
  } while (0);
  $c$197 = $c$0;
  $i$096 = 0;
  while (1) {
   if (($c$197 | 32 | 0) != (HEAP8[57501 + $i$096 >> 0] | 0)) {
    $c$1$lcssa = $c$197;
    $trunc = $i$096;
    break;
   }
   do if ($i$096 >>> 0 < 7) {
    $7 = HEAP32[$rpos >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $7 + 1;
     $c$2 = HEAPU8[$7 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$197; while (0);
   $i$096 = $i$096 + 1 | 0;
   if ($i$096 >>> 0 >= 8) {
    $c$1$lcssa = $c$2;
    $trunc = 8;
    break;
   } else $c$197 = $c$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $tobool55 = ($pok | 0) != 0;
    if ($tobool55 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $c$395 = $c$1$lcssa;
     $i$294 = 0;
     while (1) {
      if (($c$395 | 32 | 0) != (HEAP8[57510 + $i$294 >> 0] | 0)) {
       $c$5 = $c$395;
       $i$3 = $i$294;
       label = 39;
       break L34;
      }
      do if ($i$294 >>> 0 < 2) {
       $14 = HEAP32[$rpos >> 2] | 0;
       if ($14 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $14 + 1;
        $c$4 = HEAPU8[$14 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$395; while (0);
      $i$294 = $i$294 + 1 | 0;
      if ($i$294 >>> 0 >= 3) break; else $c$395 = $c$4;
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $trunc;
     label = 39;
    } while (0);
    L45 : do if ((label | 0) == 39) {
     switch ($i$3 | 0) {
     case 3:
      {
       break L45;
       break;
      }
     case 0:
      break;
     default:
      {
       if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       HEAP32[16056] = 28;
       ___shlim($f, 0, 0);
       $retval$0 = 0.0;
       break L4;
      }
     }
     if (($c$5 | 0) == 48) {
      $30 = HEAP32[$rpos >> 2] | 0;
      if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $30 + 1;
       $cond231 = HEAPU8[$30 >> 0] | 0;
      } else $cond231 = ___shgetc($f) | 0;
      if (($cond231 | 32 | 0) == 120) {
       $retval$0 = +_hexfloat($f, $bits$0, $emin$0, $sign$0, $pok);
       break L4;
      }
      if (!(HEAP32[$shend >> 2] | 0)) $c$6 = 48; else {
       HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       $c$6 = 48;
      }
     } else $c$6 = $c$5;
     $retval$0 = +_decfloat($f, $c$6, $bits$0, $emin$0, $sign$0, $pok);
     break L4;
    } while (0);
    $17 = HEAP32[$rpos >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $17 + 1;
     $cond135 = HEAPU8[$17 >> 0] | 0;
    } else $cond135 = ___shgetc($f) | 0;
    if (($cond135 | 0) != 40) {
     if (!(HEAP32[$shend >> 2] | 0)) {
      $retval$0 = nan;
      break L4;
     }
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $retval$0 = nan;
     break L4;
    }
    $i$4 = 1;
    while (1) {
     $22 = HEAP32[$rpos >> 2] | 0;
     if ($22 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $22 + 1;
      $cond159 = HEAPU8[$22 >> 0] | 0;
     } else $cond159 = ___shgetc($f) | 0;
     if (!(($cond159 + -48 | 0) >>> 0 < 10 | ($cond159 + -65 | 0) >>> 0 < 26)) if (!(($cond159 | 0) == 95 | ($cond159 + -97 | 0) >>> 0 < 26)) break;
     $i$4 = $i$4 + 1 | 0;
    }
    if (($cond159 | 0) == 41) {
     $retval$0 = nan;
     break L4;
    }
    $tobool181 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$tobool55) {
     HEAP32[16056] = 28;
     ___shlim($f, 0, 0);
     $retval$0 = 0.0;
     break L4;
    }
    if (!$i$4) {
     $retval$0 = nan;
     break L4;
    }
    $dec19293$in = $i$4;
    while (1) {
     $dec19293$in = $dec19293$in + -1 | 0;
     if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     if (!$dec19293$in) {
      $retval$0 = nan;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $tobool61 = (HEAP32[$shend >> 2] | 0) == 0;
   if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $trunc >>> 0 > 3) {
    $i$190 = $trunc;
    do {
     if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $i$190 = $i$190 + -1 | 0;
    } while ($i$190 >>> 0 > 3);
   }
  }
  $retval$0 = +($sign$0 | 0) * inf;
 } while (0);
 return +$retval$0;
}

function _speex_resampler_init($nb_channels, $in_rate, $out_rate, $quality, $err) {
 $nb_channels = $nb_channels | 0;
 $in_rate = $in_rate | 0;
 $out_rate = $out_rate | 0;
 $quality = $quality | 0;
 $err = $err | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $26 = 0, $a$addr$07$i$i$i = 0, $a$addr$07$i$i$i$phi = 0, $add$i$i$i = 0, $arrayidx$i$i = 0, $b$addr$06$i$i$i = 0, $call$i$i = 0, $call$i1$i = 0, $call$i15$i = 0, $call$i30$i = 0, $call36$i = 0, $den_rate12$i$i = 0, $div$i$i$i = 0, $div1$i$i$i = 0, $div21$i$i = 0, $div6$i$i$i = 0, $i$043$i$i = 0, $inc$i$i = 0, $initialised$i = 0, $last_sample$i = 0, $last_sample$i2 = 0, $magic_samples$i4 = 0, $mem$i = 0, $mul$i = 0, $mul$i$i$i = 0, $nb_channels19$i = 0, $num_rate15$i$i = 0, $out_rate4$i$i = 0, $quality18$i = 0, $rem$i$i$i = 0, $retval$0$i = 0, $samp_frac_num$i6 = 0, $st$0$i = 0, label = 0;
 if (($nb_channels | 0) == 0 | ($in_rate | 0) == 0 | ($out_rate | 0) == 0 | $quality >>> 0 > 10) {
  if (!$err) {
   $retval$0$i = 0;
   return $retval$0$i | 0;
  }
  HEAP32[$err >> 2] = 3;
  $retval$0$i = 0;
  return $retval$0$i | 0;
 }
 $call$i1$i = _malloc(96) | 0;
 if (!$call$i1$i) {
  if (!$err) {
   $retval$0$i = 0;
   return $retval$0$i | 0;
  }
  HEAP32[$err >> 2] = 1;
  $retval$0$i = 0;
  return $retval$0$i | 0;
 }
 if (HEAP32[$call$i1$i + -4 >> 2] & 3 | 0) _memset($call$i1$i | 0, 0, 96) | 0;
 $initialised$i = $call$i1$i + 52 | 0;
 $quality18$i = $call$i1$i + 16 | 0;
 HEAP32[$call$i1$i >> 2] = 0;
 HEAP32[$call$i1$i + 4 >> 2] = 0;
 HEAP32[$call$i1$i + 8 >> 2] = 0;
 HEAP32[$call$i1$i + 12 >> 2] = 0;
 HEAP32[$quality18$i >> 2] = -1;
 $mem$i = $call$i1$i + 72 | 0;
 HEAPF32[$call$i1$i + 44 >> 2] = 1.0;
 $nb_channels19$i = $call$i1$i + 20 | 0;
 HEAP32[$nb_channels19$i >> 2] = $nb_channels;
 HEAP32[$call$i1$i + 88 >> 2] = 1;
 HEAP32[$call$i1$i + 92 >> 2] = 1;
 HEAP32[$call$i1$i + 32 >> 2] = 160;
 $mul$i = $nb_channels << 2;
 $call$i$i = _malloc($mul$i) | 0;
 do if (!$call$i$i) {
  $last_sample$i = $call$i1$i + 60 | 0;
  HEAP32[$last_sample$i >> 2] = 0;
  $26 = $last_sample$i;
 } else {
  if (HEAP32[$call$i$i + -4 >> 2] & 3 | 0) _memset($call$i$i | 0, 0, $mul$i | 0) | 0;
  $last_sample$i2 = $call$i1$i + 60 | 0;
  HEAP32[$last_sample$i2 >> 2] = $call$i$i;
  $call$i15$i = _malloc($mul$i) | 0;
  if (!$call$i15$i) {
   HEAP32[$call$i1$i + 68 >> 2] = 0;
   $26 = $last_sample$i2;
   break;
  }
  if (HEAP32[$call$i15$i + -4 >> 2] & 3 | 0) _memset($call$i15$i | 0, 0, $mul$i | 0) | 0;
  $magic_samples$i4 = $call$i1$i + 68 | 0;
  HEAP32[$magic_samples$i4 >> 2] = $call$i15$i;
  $call$i30$i = _malloc($mul$i) | 0;
  if (!$call$i30$i) {
   HEAP32[$call$i1$i + 64 >> 2] = 0;
   $26 = $last_sample$i2;
   break;
  }
  if (HEAP32[$call$i30$i + -4 >> 2] & 3 | 0) _memset($call$i30$i | 0, 0, $mul$i | 0) | 0;
  $samp_frac_num$i6 = $call$i1$i + 64 | 0;
  HEAP32[$samp_frac_num$i6 >> 2] = $call$i30$i;
  HEAP32[$quality18$i >> 2] = $quality;
  $out_rate4$i$i = $call$i1$i + 4 | 0;
  if ((HEAP32[$call$i1$i >> 2] | 0) == ($in_rate | 0)) if ((HEAP32[$out_rate4$i$i >> 2] | 0) == ($out_rate | 0)) if ((HEAP32[$call$i1$i + 8 >> 2] | 0) == ($in_rate | 0)) {
   if ((HEAP32[$call$i1$i + 12 >> 2] | 0) != ($out_rate | 0)) label = 25;
  } else label = 25; else label = 25; else label = 25;
  L40 : do if ((label | 0) == 25) {
   $den_rate12$i$i = $call$i1$i + 12 | 0;
   $10 = HEAP32[$den_rate12$i$i >> 2] | 0;
   HEAP32[$call$i1$i >> 2] = $in_rate;
   HEAP32[$out_rate4$i$i >> 2] = $out_rate;
   $num_rate15$i$i = $call$i1$i + 8 | 0;
   HEAP32[$num_rate15$i$i >> 2] = $in_rate;
   HEAP32[$den_rate12$i$i >> 2] = $out_rate;
   $a$addr$07$i$i$i = $in_rate;
   $b$addr$06$i$i$i = $out_rate;
   while (1) {
    $rem$i$i$i = ($a$addr$07$i$i$i >>> 0) % ($b$addr$06$i$i$i >>> 0) | 0;
    if (!$rem$i$i$i) break; else {
     $a$addr$07$i$i$i$phi = $b$addr$06$i$i$i;
     $b$addr$06$i$i$i = $rem$i$i$i;
     $a$addr$07$i$i$i = $a$addr$07$i$i$i$phi;
    }
   }
   HEAP32[$num_rate15$i$i >> 2] = ($in_rate >>> 0) / ($b$addr$06$i$i$i >>> 0) | 0;
   $div21$i$i = ($out_rate >>> 0) / ($b$addr$06$i$i$i >>> 0) | 0;
   HEAP32[$den_rate12$i$i >> 2] = $div21$i$i;
   L45 : do if ($10 | 0) if (HEAP32[$nb_channels19$i >> 2] | 0) {
    $15 = $div21$i$i;
    $i$043$i$i = 0;
    while (1) {
     $arrayidx$i$i = $call$i30$i + ($i$043$i$i << 2) | 0;
     $12 = HEAP32[$arrayidx$i$i >> 2] | 0;
     $div$i$i$i = ($12 >>> 0) / ($10 >>> 0) | 0;
     $14 = $12 - (Math_imul($div$i$i$i, $10) | 0) | 0;
     $div1$i$i$i = 4294967295 / ($15 >>> 0) | 0;
     if ($14 >>> 0 > $div1$i$i$i >>> 0 | $div$i$i$i >>> 0 > $div1$i$i$i >>> 0) break L40;
     $mul$i$i$i = Math_imul($div$i$i$i, $15) | 0;
     $div6$i$i$i = ((Math_imul($14, $15) | 0) >>> 0) / ($10 >>> 0) | 0;
     if ($mul$i$i$i >>> 0 > ~$div6$i$i$i >>> 0) break L40;
     $add$i$i$i = $div6$i$i$i + $mul$i$i$i | 0;
     HEAP32[$arrayidx$i$i >> 2] = $add$i$i$i;
     $16 = HEAP32[$den_rate12$i$i >> 2] | 0;
     if ($add$i$i$i >>> 0 >= $16 >>> 0) HEAP32[$arrayidx$i$i >> 2] = $16 + -1;
     $inc$i$i = $i$043$i$i + 1 | 0;
     if ($inc$i$i >>> 0 >= (HEAP32[$nb_channels19$i >> 2] | 0) >>> 0) break L45;
     $15 = HEAP32[$den_rate12$i$i >> 2] | 0;
     $i$043$i$i = $inc$i$i;
    }
   } while (0);
   if (HEAP32[$initialised$i >> 2] | 0) _update_filter($call$i1$i) | 0;
  } while (0);
  $call36$i = _update_filter($call$i1$i) | 0;
  if (!$call36$i) {
   HEAP32[$initialised$i >> 2] = 1;
   $st$0$i = $call$i1$i;
  } else {
   _free(HEAP32[$mem$i >> 2] | 0);
   _free(HEAP32[$call$i1$i + 76 >> 2] | 0);
   _free(HEAP32[$last_sample$i2 >> 2] | 0);
   _free(HEAP32[$magic_samples$i4 >> 2] | 0);
   _free(HEAP32[$samp_frac_num$i6 >> 2] | 0);
   _free($call$i1$i);
   $st$0$i = 0;
  }
  if (!$err) {
   $retval$0$i = $st$0$i;
   return $retval$0$i | 0;
  }
  HEAP32[$err >> 2] = $call36$i;
  $retval$0$i = $st$0$i;
  return $retval$0$i | 0;
 } while (0);
 if ($err | 0) HEAP32[$err >> 2] = 1;
 _free(HEAP32[$call$i1$i + 76 >> 2] | 0);
 _free(HEAP32[$26 >> 2] | 0);
 _free(HEAP32[$call$i1$i + 68 >> 2] | 0);
 _free(HEAP32[$call$i1$i + 64 >> 2] | 0);
 _free($call$i1$i);
 $retval$0$i = 0;
 return $retval$0$i | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0, $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $retval$0 = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv = $4 & 2047;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $10 = getTempRet0() | 0;
 L1 : do if (($9 | 0) == 0 & ($10 | 0) == 0) label = 3; else {
  $14 = ___DOUBLE_BITS_207($y) | 0;
  $16 = (getTempRet0() | 0) & 2147483647;
  if (($conv | 0) == 2047 | ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0)) label = 3; else {
   $22 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $23 = getTempRet0() | 0;
   if (!($23 >>> 0 > $10 >>> 0 | ($23 | 0) == ($10 | 0) & $22 >>> 0 > $9 >>> 0)) return +(($22 | 0) == ($9 | 0) & ($23 | 0) == ($10 | 0) ? $x * 0.0 : $x);
   if (!$conv) {
    $32 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $33 = getTempRet0() | 0;
    if (($33 | 0) > -1 | ($33 | 0) == -1 & $32 >>> 0 > 4294967295) {
     $39 = $32;
     $40 = $33;
     $ex$081 = 0;
     while (1) {
      $dec = $ex$081 + -1 | 0;
      $39 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0;
      $40 = getTempRet0() | 0;
      if (!(($40 | 0) > -1 | ($40 | 0) == -1 & $39 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $dec;
       break;
      } else $ex$081 = $dec;
     }
    } else $ex$0$lcssa = 0;
    $48 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $72 = $48;
    $73 = getTempRet0() | 0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $72 = $0;
    $73 = $1 & 1048575 | 1048576;
    $ex$1 = $conv;
   }
   if (!$conv5) {
    $52 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $53 = getTempRet0() | 0;
    if (($53 | 0) > -1 | ($53 | 0) == -1 & $52 >>> 0 > 4294967295) {
     $59 = $52;
     $60 = $53;
     $ey$077 = 0;
     while (1) {
      $dec64 = $ey$077 + -1 | 0;
      $59 = _bitshift64Shl($59 | 0, $60 | 0, 1) | 0;
      $60 = getTempRet0() | 0;
      if (!(($60 | 0) > -1 | ($60 | 0) == -1 & $59 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $dec64;
       break;
      } else $ey$077 = $dec64;
     }
    } else $ey$0$lcssa = 0;
    $68 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $74 = $68;
    $75 = getTempRet0() | 0;
    $ey$1 = $ey$0$lcssa;
   } else {
    $74 = $2;
    $75 = $3 & 1048575 | 1048576;
    $ey$1 = $conv5;
   }
   $76 = _i64Subtract($72 | 0, $73 | 0, $74 | 0, $75 | 0) | 0;
   $77 = getTempRet0() | 0;
   $82 = ($77 | 0) > -1 | ($77 | 0) == -1 & $76 >>> 0 > 4294967295;
   L25 : do if (($ex$1 | 0) > ($ey$1 | 0)) {
    $136 = $72;
    $137 = $73;
    $84 = $76;
    $86 = $77;
    $cmp8571 = $82;
    $ex$268 = $ex$1;
    while (1) {
     if ($cmp8571) if (($84 | 0) == 0 & ($86 | 0) == 0) break; else {
      $88 = $84;
      $89 = $86;
     } else {
      $88 = $136;
      $89 = $137;
     }
     $90 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
     $91 = getTempRet0() | 0;
     $dec96 = $ex$268 + -1 | 0;
     $92 = _i64Subtract($90 | 0, $91 | 0, $74 | 0, $75 | 0) | 0;
     $93 = getTempRet0() | 0;
     $98 = ($93 | 0) > -1 | ($93 | 0) == -1 & $92 >>> 0 > 4294967295;
     if (($dec96 | 0) > ($ey$1 | 0)) {
      $136 = $90;
      $137 = $91;
      $84 = $92;
      $86 = $93;
      $cmp8571 = $98;
      $ex$268 = $dec96;
     } else {
      $100 = $92;
      $102 = $93;
      $134 = $90;
      $135 = $91;
      $cmp85$lcssa = $98;
      $ex$2$lcssa = $dec96;
      break L25;
     }
    }
    $retval$0 = $x * 0.0;
    break L1;
   } else {
    $100 = $76;
    $102 = $77;
    $134 = $72;
    $135 = $73;
    $cmp85$lcssa = $82;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($cmp85$lcssa) if (($100 | 0) == 0 & ($102 | 0) == 0) {
    $retval$0 = $x * 0.0;
    break;
   } else {
    $105 = $102;
    $107 = $100;
   } else {
    $105 = $135;
    $107 = $134;
   }
   if ($105 >>> 0 < 1048576 | ($105 | 0) == 1048576 & $107 >>> 0 < 0) {
    $111 = $107;
    $112 = $105;
    $ex$362 = $ex$2$lcssa;
    while (1) {
     $113 = _bitshift64Shl($111 | 0, $112 | 0, 1) | 0;
     $114 = getTempRet0() | 0;
     $dec117 = $ex$362 + -1 | 0;
     if ($114 >>> 0 < 1048576 | ($114 | 0) == 1048576 & $113 >>> 0 < 0) {
      $111 = $113;
      $112 = $114;
      $ex$362 = $dec117;
     } else {
      $120 = $113;
      $121 = $114;
      $ex$3$lcssa = $dec117;
      break;
     }
    }
   } else {
    $120 = $107;
    $121 = $105;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $122 = _i64Add($120 | 0, $121 | 0, 0, -1048576) | 0;
    $123 = getTempRet0() | 0;
    $124 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $131 = $123 | (getTempRet0() | 0);
    $132 = $122 | $124;
   } else {
    $128 = _bitshift64Lshr($120 | 0, $121 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $131 = getTempRet0() | 0;
    $132 = $128;
   }
   HEAP32[tempDoublePtr >> 2] = $132;
   HEAP32[tempDoublePtr + 4 >> 2] = $131 | $8;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $mul = $x * $y;
  $retval$0 = $mul / $mul;
 }
 return +$retval$0;
}

function _silk_resampler_init($S, $Fs_Hz_in, $Fs_Hz_out, $forEnc) {
 $S = $S | 0;
 $Fs_Hz_in = $Fs_Hz_in | 0;
 $Fs_Hz_out = $Fs_Hz_out | 0;
 $forEnc = $forEnc | 0;
 var $1 = 0, $arrayidx71$sink = 0, $conv154 = 0, $div94 = 0, $mul92 = 0, $mul98 = 0, $resampler_function = 0, $resampler_function91 = 0, $shl168 = 0, $storemerge = 0, $up2x$0 = 0;
 _memset($S | 0, 0, 300) | 0;
 if (!$forEnc) {
  L3 : do if (($Fs_Hz_in | 0) < 12e3) {
   switch ($Fs_Hz_in | 0) {
   case 8e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 101);
  } else if (($Fs_Hz_in | 0) < 16e3) {
   switch ($Fs_Hz_in | 0) {
   case 12e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 101);
  } else {
   switch ($Fs_Hz_in | 0) {
   case 16e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 101);
  } while (0);
  L13 : do if (($Fs_Hz_out | 0) < 16e3) if (($Fs_Hz_out | 0) < 12e3) {
   switch ($Fs_Hz_out | 0) {
   case 8e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 101);
  } else {
   switch ($Fs_Hz_out | 0) {
   case 12e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 101);
  } else {
   if (($Fs_Hz_out | 0) < 24e3) {
    switch ($Fs_Hz_out | 0) {
    case 16e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 101);
   }
   if (($Fs_Hz_out | 0) < 48e3) {
    switch ($Fs_Hz_out | 0) {
    case 24e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 101);
   } else {
    switch ($Fs_Hz_out | 0) {
    case 48e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 101);
   }
  } while (0);
  $arrayidx71$sink = (($Fs_Hz_out >>> 12) - (($Fs_Hz_out | 0) > 16e3 & 1) >> (($Fs_Hz_out | 0) > 24e3 & 1)) + -1 + (53261 + ((($Fs_Hz_in >>> 12) + -1 | 0) * 5 | 0)) | 0;
 } else {
  L32 : do if (($Fs_Hz_in | 0) < 16e3) if (($Fs_Hz_in | 0) < 12e3) {
   switch ($Fs_Hz_in | 0) {
   case 8e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 94);
  } else {
   switch ($Fs_Hz_in | 0) {
   case 12e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 94);
  } else {
   if (($Fs_Hz_in | 0) < 24e3) {
    switch ($Fs_Hz_in | 0) {
    case 16e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 94);
   }
   if (($Fs_Hz_in | 0) < 48e3) {
    switch ($Fs_Hz_in | 0) {
    case 24e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 94);
   } else {
    switch ($Fs_Hz_in | 0) {
    case 48e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(56336, 53229, 94);
   }
  } while (0);
  L50 : do if (($Fs_Hz_out | 0) < 12e3) {
   switch ($Fs_Hz_out | 0) {
   case 8e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 94);
  } else if (($Fs_Hz_out | 0) < 16e3) {
   switch ($Fs_Hz_out | 0) {
   case 12e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 94);
  } else {
   switch ($Fs_Hz_out | 0) {
   case 16e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(56336, 53229, 94);
  } while (0);
  $arrayidx71$sink = ($Fs_Hz_out >>> 12) + -1 + (53246 + (((($Fs_Hz_in >>> 12) - (($Fs_Hz_in | 0) > 16e3 & 1) >> (($Fs_Hz_in | 0) > 24e3 & 1)) + -1 | 0) * 3 | 0)) | 0;
 }
 HEAP32[$S + 292 >> 2] = HEAP8[$arrayidx71$sink >> 0];
 $div94 = ($Fs_Hz_in >>> 0) / 1e3 | 0;
 HEAP32[$S + 284 >> 2] = $div94;
 HEAP32[$S + 288 >> 2] = ($Fs_Hz_out >>> 0) / 1e3 | 0;
 HEAP32[$S + 268 >> 2] = $div94 * 10;
 do if (($Fs_Hz_out | 0) > ($Fs_Hz_in | 0)) {
  $resampler_function = $S + 264 | 0;
  if (($Fs_Hz_in << 1 | 0) == ($Fs_Hz_out | 0)) {
   HEAP32[$resampler_function >> 2] = 1;
   $up2x$0 = 0;
   break;
  } else {
   HEAP32[$resampler_function >> 2] = 2;
   $up2x$0 = 1;
   break;
  }
 } else {
  $resampler_function91 = $S + 264 | 0;
  if (($Fs_Hz_out | 0) >= ($Fs_Hz_in | 0)) {
   HEAP32[$resampler_function91 >> 2] = 0;
   $up2x$0 = 0;
   break;
  }
  HEAP32[$resampler_function91 >> 2] = 3;
  $mul92 = $Fs_Hz_out << 2;
  if (($mul92 | 0) == ($Fs_Hz_in * 3 | 0)) {
   HEAP32[$S + 280 >> 2] = 3;
   HEAP32[$S + 276 >> 2] = 18;
   HEAP32[$S + 296 >> 2] = 27296;
   $up2x$0 = 0;
   break;
  }
  $mul98 = $Fs_Hz_out * 3 | 0;
  if (($mul98 | 0) == ($Fs_Hz_in << 1 | 0)) {
   HEAP32[$S + 280 >> 2] = 2;
   HEAP32[$S + 276 >> 2] = 18;
   HEAP32[$S + 296 >> 2] = 27360;
   $up2x$0 = 0;
   break;
  }
  if (($Fs_Hz_out << 1 | 0) == ($Fs_Hz_in | 0)) {
   HEAP32[$S + 280 >> 2] = 1;
   HEAP32[$S + 276 >> 2] = 24;
   HEAP32[$S + 296 >> 2] = 27408;
   $up2x$0 = 0;
   break;
  }
  if (($mul98 | 0) == ($Fs_Hz_in | 0)) {
   HEAP32[$S + 280 >> 2] = 1;
   HEAP32[$S + 276 >> 2] = 36;
   HEAP32[$S + 296 >> 2] = 27440;
   $up2x$0 = 0;
   break;
  }
  if (($mul92 | 0) == ($Fs_Hz_in | 0)) {
   HEAP32[$S + 280 >> 2] = 1;
   HEAP32[$S + 276 >> 2] = 36;
   HEAP32[$S + 296 >> 2] = 27488;
   $up2x$0 = 0;
   break;
  }
  if (($Fs_Hz_out * 6 | 0) == ($Fs_Hz_in | 0)) {
   HEAP32[$S + 280 >> 2] = 1;
   HEAP32[$S + 276 >> 2] = 36;
   HEAP32[$S + 296 >> 2] = 27536;
   $up2x$0 = 0;
   break;
  } else _celt_fatal(56336, 53229, 154);
 } while (0);
 $conv154 = $Fs_Hz_out << 16 >> 16;
 $1 = (($Fs_Hz_out >>> 15) + 1 | 0) >>> 1;
 $shl168 = $Fs_Hz_in << $up2x$0;
 $storemerge = (($Fs_Hz_in << ($up2x$0 | 14) | 0) / ($Fs_Hz_out | 0) | 0) << 2;
 while (1) if (((Math_imul($storemerge >> 16, $conv154) | 0) + (Math_imul($storemerge, $1) | 0) + ((Math_imul($storemerge & 65535, $conv154) | 0) >> 16) | 0) < ($shl168 | 0)) $storemerge = $storemerge + 1 | 0; else break;
 HEAP32[$S + 272 >> 2] = $storemerge;
 return;
}

function _ec_dec_uint($_this, $_ft) {
 $_this = $_this | 0;
 $_ft = $_ft | 0;
 var $$pre14$i$i = 0, $$pre14$i$i70 = 0, $$pre21$i = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $add = 0, $add$i = 0, $add$i38 = 0, $available$0$i = 0, $available$1$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i80 = 0, $dec = 0, $div$i$i = 0, $div$i$i34 = 0, $end_offs$i$i = 0, $end_window$i = 0, $inc$i$i = 0, $inc$i$i$i = 0, $inc$i$i$i76 = 0, $mul$i = 0, $mul$i49 = 0, $nbits_total$i = 0, $nbits_total$i$i = 0, $nbits_total$i$i62 = 0, $nend_bits$i = 0, $offs$i$i$i = 0, $offs$i$i$i64 = 0, $or = 0, $rem$i$i = 0, $rem$i$i63 = 0, $retval$1 = 0, $rng$i = 0, $rng$i33 = 0, $shl = 0, $shr = 0, $spec$select = 0, $spec$select90 = 0, $sub = 0, $sub1$i = 0, $sub1$i51 = 0, $sub3 = 0, $sub6$i = 0, $sub6$i41 = 0, $val$i = 0, $val$i36 = 0, $window$0$i = 0, $window$1$i = 0;
 if ($_ft >>> 0 <= 1) _celt_fatal(49073, 49059, 203);
 $dec = $_ft + -1 | 0;
 $sub = 32 - (Math_clz32($dec | 0) | 0) | 0;
 if (($sub | 0) <= 8) {
  $rng$i33 = $_this + 28 | 0;
  $24 = HEAP32[$rng$i33 >> 2] | 0;
  $div$i$i34 = ($24 >>> 0) / ($_ft >>> 0) | 0;
  HEAP32[$_this + 36 >> 2] = $div$i$i34;
  $val$i36 = $_this + 32 | 0;
  $25 = HEAP32[$val$i36 >> 2] | 0;
  $add$i38 = (($25 >>> 0) / ($div$i$i34 >>> 0) | 0) + 1 | 0;
  $sub6$i41 = $_ft - ($add$i38 >>> 0 > $_ft >>> 0 ? $_ft : $add$i38) | 0;
  $mul$i = Math_imul($dec - $sub6$i41 | 0, $div$i$i34) | 0;
  $sub1$i = $25 - $mul$i | 0;
  HEAP32[$val$i36 >> 2] = $sub1$i;
  $spec$select90 = ($sub6$i41 | 0) == 0 ? $24 - $mul$i | 0 : $div$i$i34;
  HEAP32[$rng$i33 >> 2] = $spec$select90;
  if ($spec$select90 >>> 0 >= 8388609) {
   $retval$1 = $sub6$i41;
   return $retval$1 | 0;
  }
  $nbits_total$i$i = $_this + 20 | 0;
  $rem$i$i = $_this + 40 | 0;
  $offs$i$i$i = $_this + 24 | 0;
  $$pre14$i$i = HEAP32[$_this + 4 >> 2] | 0;
  $26 = HEAP32[$nbits_total$i$i >> 2] | 0;
  $27 = $spec$select90;
  $28 = HEAP32[$offs$i$i$i >> 2] | 0;
  $31 = HEAP32[$rem$i$i >> 2] | 0;
  $34 = $sub1$i;
  while (1) {
   $26 = $26 + 8 | 0;
   HEAP32[$nbits_total$i$i >> 2] = $26;
   $27 = $27 << 8;
   HEAP32[$rng$i33 >> 2] = $27;
   if ($28 >>> 0 < $$pre14$i$i >>> 0) {
    $29 = HEAP32[$_this >> 2] | 0;
    $inc$i$i$i = $28 + 1 | 0;
    HEAP32[$offs$i$i$i >> 2] = $inc$i$i$i;
    $37 = $inc$i$i$i;
    $cond$i$i$i = HEAPU8[$29 + $28 >> 0] | 0;
   } else {
    $37 = $28;
    $cond$i$i$i = 0;
   }
   HEAP32[$rem$i$i >> 2] = $cond$i$i$i;
   $34 = (($cond$i$i$i | $31 << 8) >>> 1 & 255 | $34 << 8 & 2147483392) ^ 255;
   HEAP32[$val$i36 >> 2] = $34;
   if ($27 >>> 0 >= 8388609) {
    $retval$1 = $sub6$i41;
    break;
   } else {
    $28 = $37;
    $31 = $cond$i$i$i;
   }
  }
  return $retval$1 | 0;
 }
 $sub3 = $sub + -8 | 0;
 $shr = $dec >>> $sub3;
 $add = $shr + 1 | 0;
 $rng$i = $_this + 28 | 0;
 $1 = HEAP32[$rng$i >> 2] | 0;
 $div$i$i = ($1 >>> 0) / ($add >>> 0) | 0;
 HEAP32[$_this + 36 >> 2] = $div$i$i;
 $val$i = $_this + 32 | 0;
 $2 = HEAP32[$val$i >> 2] | 0;
 $add$i = (($2 >>> 0) / ($div$i$i >>> 0) | 0) + 1 | 0;
 $sub6$i = $add - ($add$i >>> 0 > $add >>> 0 ? $add : $add$i) | 0;
 $mul$i49 = Math_imul($shr - $sub6$i | 0, $div$i$i) | 0;
 $sub1$i51 = $2 - $mul$i49 | 0;
 HEAP32[$val$i >> 2] = $sub1$i51;
 $spec$select = ($sub6$i | 0) == 0 ? $1 - $mul$i49 | 0 : $div$i$i;
 HEAP32[$rng$i >> 2] = $spec$select;
 if ($spec$select >>> 0 < 8388609) {
  $nbits_total$i$i62 = $_this + 20 | 0;
  $rem$i$i63 = $_this + 40 | 0;
  $offs$i$i$i64 = $_this + 24 | 0;
  $$pre14$i$i70 = HEAP32[$_this + 4 >> 2] | 0;
  $11 = $sub1$i51;
  $3 = HEAP32[$nbits_total$i$i62 >> 2] | 0;
  $4 = $spec$select;
  $5 = HEAP32[$offs$i$i$i64 >> 2] | 0;
  $8 = HEAP32[$rem$i$i63 >> 2] | 0;
  while (1) {
   $3 = $3 + 8 | 0;
   HEAP32[$nbits_total$i$i62 >> 2] = $3;
   $4 = $4 << 8;
   HEAP32[$rng$i >> 2] = $4;
   if ($5 >>> 0 < $$pre14$i$i70 >>> 0) {
    $6 = HEAP32[$_this >> 2] | 0;
    $inc$i$i$i76 = $5 + 1 | 0;
    HEAP32[$offs$i$i$i64 >> 2] = $inc$i$i$i76;
    $35 = $inc$i$i$i76;
    $cond$i$i$i80 = HEAPU8[$6 + $5 >> 0] | 0;
   } else {
    $35 = $5;
    $cond$i$i$i80 = 0;
   }
   HEAP32[$rem$i$i63 >> 2] = $cond$i$i$i80;
   $11 = (($cond$i$i$i80 | $8 << 8) >>> 1 & 255 | $11 << 8 & 2147483392) ^ 255;
   HEAP32[$val$i >> 2] = $11;
   if ($4 >>> 0 >= 8388609) break; else {
    $5 = $35;
    $8 = $cond$i$i$i80;
   }
  }
 }
 $shl = $sub6$i << $sub3;
 $end_window$i = $_this + 12 | 0;
 $12 = HEAP32[$end_window$i >> 2] | 0;
 $nend_bits$i = $_this + 16 | 0;
 $13 = HEAP32[$nend_bits$i >> 2] | 0;
 if ($13 >>> 0 < $sub3 >>> 0) {
  $end_offs$i$i = $_this + 8 | 0;
  $14 = ($13 | 0) > 17;
  $15 = 7 - $13 | 0;
  $$pre21$i = HEAP32[$_this + 4 >> 2] | 0;
  $16 = HEAP32[$end_offs$i$i >> 2] | 0;
  $available$0$i = $13;
  $window$0$i = $12;
  while (1) {
   if ($16 >>> 0 < $$pre21$i >>> 0) {
    $17 = HEAP32[$_this >> 2] | 0;
    $inc$i$i = $16 + 1 | 0;
    HEAP32[$end_offs$i$i >> 2] = $inc$i$i;
    $36 = $inc$i$i;
    $cond$i$i = HEAPU8[$17 + ($$pre21$i - $inc$i$i) >> 0] | 0;
   } else {
    $36 = $16;
    $cond$i$i = 0;
   }
   $window$0$i = $cond$i$i << $available$0$i | $window$0$i;
   if (($available$0$i | 0) >= 17) break; else {
    $16 = $36;
    $available$0$i = $available$0$i + 8 | 0;
   }
  }
  $available$1$i = $13 + 8 + ($15 + ($14 ? $13 : 17) & -8) | 0;
  $window$1$i = $window$0$i;
 } else {
  $available$1$i = $13;
  $window$1$i = $12;
 }
 HEAP32[$end_window$i >> 2] = $window$1$i >>> $sub3;
 HEAP32[$nend_bits$i >> 2] = $available$1$i - $sub3;
 $nbits_total$i = $_this + 20 | 0;
 HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + $sub3;
 $or = $window$1$i & (1 << $sub3) + -1 | $shl;
 if ($or >>> 0 <= $dec >>> 0) {
  $retval$1 = $or;
  return $retval$1 | 0;
 }
 HEAP32[$_this + 44 >> 2] = 1;
 $retval$1 = $dec;
 return $retval$1 | 0;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i75 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i76 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i54 = 0, $call$i60 = 0, $call$i63 = 0, $call$i66 = 0, $call$i69 = 0, $call$i72 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i77 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65324) | 0;
 $call$i54 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65332) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $call$i54);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (!(($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i60 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 4;
    HEAP32[$6 >> 2] = $call$i60;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 4;
   HEAP32[$10 >> 2] = $call$i63;
   $call$i66 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 4;
   HEAP32[$13 >> 2] = $call$i66;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i72 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 16 >> 2] & 63]($call$i54) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 4;
    HEAP32[$23 >> 2] = $call$i72;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i69 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 4;
   HEAP32[$28 >> 2] = $call$i69;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52 << 2) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i75 = $add$ptr54;
   $__last$addr$0$i$i76 = $17;
   while (1) {
    $incdec$ptr$i$i77 = $__last$addr$0$i$i76 + -4 | 0;
    if ($__first$addr$0$i$i75 >>> 0 >= $incdec$ptr$i$i77 >>> 0) break;
    $18 = HEAP32[$__first$addr$0$i$i75 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i75 >> 2] = HEAP32[$incdec$ptr$i$i77 >> 2];
    HEAP32[$incdec$ptr$i$i77 >> 2] = $18;
    $__first$addr$0$i$i75 = $__first$addr$0$i$i75 + 4 | 0;
    $__last$addr$0$i$i76 = $incdec$ptr$i$i77;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i74 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i75 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i53 = 0, $call$i59 = 0, $call$i62 = 0, $call$i65 = 0, $call$i68 = 0, $call$i71 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i76 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65292) | 0;
 $call$i53 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65308) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $call$i53);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (!(($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i59;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i62 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $call$i62;
   $call$i65 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 1;
   HEAP8[$13 >> 0] = $call$i65;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 16 >> 2] & 63]($call$i53) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $call$i71;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i68 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 1;
   HEAP8[$28 >> 0] = $call$i68;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i74 = $add$ptr54;
   $__last$addr$0$i$i75 = $17;
   while (1) {
    $incdec$ptr$i$i76 = $__last$addr$0$i$i75 + -1 | 0;
    if ($__first$addr$0$i$i74 >>> 0 >= $incdec$ptr$i$i76 >>> 0) break;
    $18 = HEAP8[$__first$addr$0$i$i74 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i74 >> 0] = HEAP8[$incdec$ptr$i$i76 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i76 >> 0] = $18;
    $__first$addr$0$i$i74 = $__first$addr$0$i$i74 + 1 | 0;
    $__last$addr$0$i$i75 = $incdec$ptr$i$i76;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}
function _silk_VQ_WMat_EC_c($ind, $res_nrg_Q15, $rate_dist_Q8, $gain_Q7, $XX_Q17, $xX_Q17, $cb_Q7, $cb_gain_Q7, $cl_Q5, $subfr_len, $max_gain_Q7, $L) {
 $ind = $ind | 0;
 $res_nrg_Q15 = $res_nrg_Q15 | 0;
 $rate_dist_Q8 = $rate_dist_Q8 | 0;
 $gain_Q7 = $gain_Q7 | 0;
 $XX_Q17 = $XX_Q17 | 0;
 $xX_Q17 = $xX_Q17 | 0;
 $cb_Q7 = $cb_Q7 | 0;
 $cb_gain_Q7 = $cb_gain_Q7 | 0;
 $cl_Q5 = $cl_Q5 | 0;
 $subfr_len = $subfr_len | 0;
 $max_gain_Q7 = $max_gain_Q7 | 0;
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0, $add = 0, $add100 = 0, $add111 = 0, $add136 = 0, $add156 = 0, $add169 = 0, $add174 = 0, $add182 = 0, $add32 = 0, $add37 = 0, $add48 = 0, $add65 = 0, $add70 = 0, $add81 = 0, $and$i$i = 0, $arrayidx101 = 0, $arrayidx107 = 0, $arrayidx126 = 0, $arrayidx132 = 0, $arrayidx152 = 0, $arrayidx25 = 0, $arrayidx28 = 0, $arrayidx33 = 0, $arrayidx38 = 0, $arrayidx61 = 0, $arrayidx66 = 0, $arrayidx71 = 0, $arrayidx77 = 0, $arrayidx96 = 0, $cb_row_Q7$0103 = 0, $conv = 0, $conv173 = 0, $conv27 = 0, $conv30 = 0, $conv35 = 0, $conv40 = 0, $conv46 = 0, $k$0104 = 0, $mul116 = 0, $mul141 = 0, $mul178 = 0, $mul52 = 0, $mul86 = 0, $retval$0$i$i$i = 0, $shl = 0, $shl106 = 0, $shl11 = 0, $shl131 = 0, $shl15 = 0, $shl3 = 0, $shl43 = 0, $shl7 = 0, $shl76 = 0, $shr122 = 0, $shr147 = 0, $shr57 = 0, $shr92 = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub19 = 0;
 $0 = HEAP32[$xX_Q17 >> 2] | 0;
 $1 = HEAP32[$xX_Q17 + 4 >> 2] | 0;
 $2 = HEAP32[$xX_Q17 + 8 >> 2] | 0;
 $shl11 = HEAP32[$xX_Q17 + 12 >> 2] << 7;
 $shl15 = HEAP32[$xX_Q17 + 16 >> 2] << 8;
 HEAP32[$rate_dist_Q8 >> 2] = 2147483647;
 HEAP32[$res_nrg_Q15 >> 2] = 2147483647;
 HEAP8[$ind >> 0] = 0;
 $shl7 = $2 << 7;
 $shl3 = $1 << 7;
 $shl = $0 << 7;
 $arrayidx25 = $XX_Q17 + 4 | 0;
 $arrayidx28 = $XX_Q17 + 8 | 0;
 $arrayidx33 = $XX_Q17 + 12 | 0;
 $arrayidx38 = $XX_Q17 + 16 | 0;
 $arrayidx61 = $XX_Q17 + 28 | 0;
 $arrayidx66 = $XX_Q17 + 32 | 0;
 $arrayidx71 = $XX_Q17 + 36 | 0;
 $arrayidx77 = $XX_Q17 + 24 | 0;
 $arrayidx96 = $XX_Q17 + 52 | 0;
 $arrayidx101 = $XX_Q17 + 56 | 0;
 $arrayidx107 = $XX_Q17 + 48 | 0;
 $arrayidx126 = $XX_Q17 + 76 | 0;
 $arrayidx132 = $XX_Q17 + 72 | 0;
 $arrayidx152 = $XX_Q17 + 96 | 0;
 $conv173 = $subfr_len << 16 >> 16;
 $cb_row_Q7$0103 = $cb_Q7;
 $k$0104 = 0;
 while (1) {
  $conv = HEAPU8[$cb_gain_Q7 + $k$0104 >> 0] | 0;
  $sub19 = $conv - $max_gain_Q7 | 0;
  $conv27 = HEAP8[$cb_row_Q7$0103 + 1 >> 0] | 0;
  $add = (Math_imul(HEAP32[$arrayidx25 >> 2] | 0, $conv27) | 0) - $shl | 0;
  $conv30 = HEAP8[$cb_row_Q7$0103 + 2 >> 0] | 0;
  $add32 = $add + (Math_imul(HEAP32[$arrayidx28 >> 2] | 0, $conv30) | 0) | 0;
  $conv35 = HEAP8[$cb_row_Q7$0103 + 3 >> 0] | 0;
  $add37 = $add32 + (Math_imul(HEAP32[$arrayidx33 >> 2] | 0, $conv35) | 0) | 0;
  $conv40 = HEAP8[$cb_row_Q7$0103 + 4 >> 0] | 0;
  $shl43 = $add37 + (Math_imul(HEAP32[$arrayidx38 >> 2] | 0, $conv40) | 0) << 1;
  $conv46 = HEAP8[$cb_row_Q7$0103 >> 0] | 0;
  $add48 = $shl43 + (Math_imul(HEAP32[$XX_Q17 >> 2] | 0, $conv46) | 0) | 0;
  $mul52 = Math_imul($add48 >> 16, $conv46) | 0;
  $shr57 = (Math_imul($add48 & 65535, $conv46) | 0) >> 16;
  $add65 = (Math_imul(HEAP32[$arrayidx61 >> 2] | 0, $conv30) | 0) - $shl3 | 0;
  $add70 = $add65 + (Math_imul(HEAP32[$arrayidx66 >> 2] | 0, $conv35) | 0) | 0;
  $shl76 = $add70 + (Math_imul(HEAP32[$arrayidx71 >> 2] | 0, $conv40) | 0) << 1;
  $add81 = $shl76 + (Math_imul(HEAP32[$arrayidx77 >> 2] | 0, $conv27) | 0) | 0;
  $mul86 = Math_imul($add81 >> 16, $conv27) | 0;
  $shr92 = (Math_imul($add81 & 65535, $conv27) | 0) >> 16;
  $add100 = (Math_imul(HEAP32[$arrayidx96 >> 2] | 0, $conv35) | 0) - $shl7 | 0;
  $shl106 = $add100 + (Math_imul(HEAP32[$arrayidx101 >> 2] | 0, $conv40) | 0) << 1;
  $add111 = $shl106 + (Math_imul(HEAP32[$arrayidx107 >> 2] | 0, $conv30) | 0) | 0;
  $mul116 = Math_imul($add111 >> 16, $conv30) | 0;
  $shr122 = (Math_imul($add111 & 65535, $conv30) | 0) >> 16;
  $shl131 = (Math_imul(HEAP32[$arrayidx126 >> 2] | 0, $conv40) | 0) - $shl11 << 1;
  $add136 = $shl131 + (Math_imul(HEAP32[$arrayidx132 >> 2] | 0, $conv35) | 0) | 0;
  $mul141 = Math_imul($add136 >> 16, $conv35) | 0;
  $shr147 = (Math_imul($add136 & 65535, $conv35) | 0) >> 16;
  $add156 = (Math_imul(HEAP32[$arrayidx152 >> 2] | 0, $conv40) | 0) - $shl15 | 0;
  $add169 = $mul52 + 32801 + $shr57 + $mul86 + $shr92 + $mul116 + $shr122 + (Math_imul($add156 >> 16, $conv40) | 0) + $mul141 + ((Math_imul($add156 & 65535, $conv40) | 0) >> 16) + $shr147 | 0;
  if (($add169 | 0) > -1) {
   $add174 = $add169 + ((($sub19 | 0) > 0 ? $sub19 : 0) << 11) | 0;
   $26 = Math_clz32($add174 | 0) | 0;
   $sub$i$i = 24 - $26 | 0;
   $sub$i$i$i = 0 - $sub$i$i | 0;
   do if (!$sub$i$i) $retval$0$i$i$i = $add174; else if (($sub$i$i | 0) < 0) {
    $retval$0$i$i$i = $add174 >>> ($sub$i$i + 32 | 0) | $add174 << $sub$i$i$i;
    break;
   } else {
    $retval$0$i$i$i = $add174 << 32 - $sub$i$i | $add174 >>> $sub$i$i;
    break;
   } while (0);
   $and$i$i = $retval$0$i$i$i & 127;
   $mul178 = Math_imul(((3968 - ($26 << 7) | $and$i$i) << 16) + (Math_imul($and$i$i * 179 | 0, 128 - $and$i$i | 0) | 0) + -125829120 >> 16, $conv173) | 0;
   $add182 = $mul178 + (HEAPU8[$cl_Q5 + $k$0104 >> 0] << 2) | 0;
   if (($add182 | 0) <= (HEAP32[$rate_dist_Q8 >> 2] | 0)) {
    HEAP32[$rate_dist_Q8 >> 2] = $add182;
    HEAP32[$res_nrg_Q15 >> 2] = $add174;
    HEAP8[$ind >> 0] = $k$0104;
    HEAP32[$gain_Q7 >> 2] = $conv;
   }
  }
  $k$0104 = $k$0104 + 1 | 0;
  if (($k$0104 | 0) == ($L | 0)) break; else $cb_row_Q7$0103 = $cb_row_Q7$0103 + 5 | 0;
 }
 return;
}

function _transient_analysis($in, $len, $C, $tf_estimate, $tf_chan, $allow_weak_transients, $weak_transient) {
 $in = $in | 0;
 $len = $len | 0;
 $C = $C | 0;
 $tf_estimate = $tf_estimate | 0;
 $tf_chan = $tf_chan | 0;
 $allow_weak_transients = $allow_weak_transients | 0;
 $weak_transient = $weak_transient | 0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $6 = 0.0, $8 = 0.0, $add112 = 0, $add25 = 0.0, $add4 = 0.0, $arrayidx39 = 0, $c$0107 = 0, $cmp1192 = 0, $cmp288 = 0, $cmp68102 = 0, $cmp87 = 0, $cond = 0.0, $cond150 = 0.0, $conv50 = 0.0, $conv53 = 0.0, $div = 0, $div120 = 0, $div55 = 0.0, $i$091 = 0, $i$195 = 0, $i$2100$in = 0, $i$3104 = 0, $is_transient$0 = 0, $mask_metric$0$lcssa115 = 0, $mask_metric$0108 = 0, $mask_metric$1 = 0, $maxE$0$lcssa = 0.0, $maxE$098 = 0.0, $mean$0$lcssa111 = 0.0, $mean$093 = 0.0, $mem0$090 = 0.0, $mem0$194 = 0.0, $mem0$299 = 0.0, $mem1$089 = 0.0, $mul = 0, $mul119 = 0, $mul13 = 0, $mul71 = 0.0, $spec$select = 0.0, $sub140 = 0.0, $sub159 = 0.0, $sub67 = 0, $tobool = 0, $unmask$0$lcssa = 0, $unmask$0103 = 0, $vla = 0, dest = 0, label = 0, sp = 0, stop = 0, $i$2100$in$looptemp = 0;
 sp = STACKTOP;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len << 2) | 0) + 15 & -16) | 0;
 HEAP32[$weak_transient >> 2] = 0;
 $tobool = ($allow_weak_transients | 0) != 0;
 $spec$select = $tobool ? .03125 : .0625;
 $div = ($len | 0) / 2 | 0;
 do if (($C | 0) > 0) {
  $cmp288 = ($len | 0) > 0;
  $cmp1192 = ($len | 0) > 1;
  $conv50 = +($div | 0);
  $conv53 = +($div | 0);
  $sub67 = $div + -5 | 0;
  $cmp68102 = ($len | 0) > 35;
  $mul119 = ($div * 6 | 0) + -102 | 0;
  $c$0107 = 0;
  $mask_metric$0108 = 0;
  while (1) {
   if ($cmp288) {
    $mul = Math_imul($c$0107, $len) | 0;
    $i$091 = 0;
    $mem0$090 = 0.0;
    $mem1$089 = 0.0;
    while (1) {
     $1 = +HEAPF32[$in + ($i$091 + $mul << 2) >> 2];
     $add4 = $mem0$090 + $1;
     HEAPF32[$vla + ($i$091 << 2) >> 2] = $add4;
     $i$091 = $i$091 + 1 | 0;
     if (($i$091 | 0) == ($len | 0)) break; else {
      $mem0$090 = $mem1$089 + $add4 - $1 * 2.0;
      $mem1$089 = $1 - $add4 * .5;
     }
    }
   }
   dest = $vla;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if ($cmp1192) {
    $i$195 = 0;
    $mean$093 = 0.0;
    $mem0$194 = 0.0;
    do {
     $mul13 = $i$195 << 1;
     $2 = +HEAPF32[$vla + ($mul13 << 2) >> 2];
     $3 = +HEAPF32[$vla + (($mul13 | 1) << 2) >> 2];
     $add25 = $2 * $2 + $3 * $3;
     $mean$093 = $mean$093 + $add25;
     $mem0$194 = $mem0$194 + $spec$select * ($add25 - $mem0$194);
     HEAPF32[$vla + ($i$195 << 2) >> 2] = $mem0$194;
     $i$195 = $i$195 + 1 | 0;
    } while (($i$195 | 0) != ($div | 0));
    $i$2100$in = $div;
    $maxE$098 = 0.0;
    $mem0$299 = 0.0;
    while (1) {
     $i$2100$in$looptemp = $i$2100$in;
     $i$2100$in = $i$2100$in + -1 | 0;
     $arrayidx39 = $vla + ($i$2100$in << 2) | 0;
     $mem0$299 = $mem0$299 + (+HEAPF32[$arrayidx39 >> 2] - $mem0$299) * .125;
     HEAPF32[$arrayidx39 >> 2] = $mem0$299;
     $cond = $maxE$098 > $mem0$299 ? $maxE$098 : $mem0$299;
     if (($i$2100$in$looptemp | 0) <= 1) {
      $maxE$0$lcssa = $cond;
      $mean$0$lcssa111 = $mean$093;
      break;
     } else $maxE$098 = $cond;
    }
   } else {
    $maxE$0$lcssa = 0.0;
    $mean$0$lcssa111 = 0.0;
   }
   $div55 = $conv53 / (+Math_sqrt(+($mean$0$lcssa111 * $maxE$0$lcssa * .5 * $conv50)) + 1.0000000036274937e-15);
   $6 = +HEAPF32[$vla >> 2];
   if ($6 != $6 | 0.0 != 0.0) {
    label = 12;
    break;
   }
   if ($div55 != $div55 | 0.0 != 0.0) {
    label = 14;
    break;
   }
   if ($cmp68102) {
    $mul71 = $div55 * 64.0;
    $i$3104 = 12;
    $unmask$0103 = 0;
    while (1) {
     $8 = +Math_floor(+($mul71 * (+HEAPF32[$vla + ($i$3104 << 2) >> 2] + 1.0000000036274937e-15)));
     $cmp87 = ($8 >= 127.0 ? 127.0 : $8) < 0.0;
     $add112 = $unmask$0103 + (HEAPU8[464 + ~~($8 > 127.0 | $cmp87 ? ($cmp87 ? 0.0 : 127.0) : $8) >> 0] | 0) | 0;
     $i$3104 = $i$3104 + 4 | 0;
     if (($i$3104 | 0) >= ($sub67 | 0)) {
      $unmask$0$lcssa = $add112;
      break;
     } else $unmask$0103 = $add112;
    }
   } else $unmask$0$lcssa = 0;
   $div120 = ($unmask$0$lcssa << 8 | 0) / ($mul119 | 0) | 0;
   if (($div120 | 0) > ($mask_metric$0108 | 0)) {
    HEAP32[$tf_chan >> 2] = $c$0107;
    $mask_metric$1 = $div120;
   } else $mask_metric$1 = $mask_metric$0108;
   $c$0107 = $c$0107 + 1 | 0;
   if (($c$0107 | 0) >= ($C | 0)) {
    label = 21;
    break;
   } else $mask_metric$0108 = $mask_metric$1;
  }
  if ((label | 0) == 12) _celt_fatal(48036, 47917, 369); else if ((label | 0) == 14) _celt_fatal(48074, 47917, 370); else if ((label | 0) == 21) {
   if (!($tobool & ($mask_metric$1 + -201 | 0) >>> 0 < 399)) {
    $is_transient$0 = ($mask_metric$1 | 0) > 200 & 1;
    $mask_metric$0$lcssa115 = $mask_metric$1;
    break;
   }
   HEAP32[$weak_transient >> 2] = 1;
   $is_transient$0 = 0;
   $mask_metric$0$lcssa115 = $mask_metric$1;
   break;
  }
 } else {
  $is_transient$0 = 0;
  $mask_metric$0$lcssa115 = 0;
 } while (0);
 $sub140 = +Math_sqrt(+(+($mask_metric$0$lcssa115 * 27 | 0))) + -42.0;
 $cond150 = $sub140 < 0.0 ? 0.0 : $sub140;
 $sub159 = ($cond150 > 163.0 ? 163.0 : $cond150) * .006899999920278788 + -.139;
 HEAPF32[$tf_estimate >> 2] = +Math_sqrt(+($sub159 < 0.0 ? 0.0 : $sub159));
 STACKTOP = sp;
 return $is_transient$0 | 0;
}

function _celt_synthesis($mode, $X, $out_syn, $oldBandE, $start, $effEnd, $C, $CC, $isTransient, $LM, $downsample, $silence) {
 $mode = $mode | 0;
 $X = $X | 0;
 $out_syn = $out_syn | 0;
 $oldBandE = $oldBandE | 0;
 $start = $start | 0;
 $effEnd = $effEnd | 0;
 $C = $C | 0;
 $CC = $CC | 0;
 $isTransient = $isTransient | 0;
 $LM = $LM | 0;
 $downsample = $downsample | 0;
 $silence = $silence | 0;
 var $0 = 0, $1 = 0, $2 = 0, $B$0 = 0, $NB$0 = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr23 = 0, $add$ptr36 = 0, $add$ptr58 = 0, $add$ptr65 = 0, $add$ptr65$us = 0, $add$ptr67 = 0, $add$ptr67$us = 0, $add$ptr75$us = 0, $arrayidx = 0, $arrayidx42 = 0, $arrayidx73$us = 0, $b$0132 = 0, $b$1130 = 0, $b$2134 = 0, $b$3138$us = 0, $c$0 = 0, $c$0$us = 0, $i$0136 = 0, $inc80 = 0, $inc80$us = 0, $mdct = 0, $mdct54 = 0, $mdct71 = 0, $mode$idx1$val = 0, $mode$idx2 = 0, $mode$idx3$val = 0, $mode$idx6 = 0, $shift$0 = 0, $shl = 0, $shl3 = 0, $shortMdctSize = 0, $tobool = 0, $vla = 0, $window = 0, $window59 = 0, $window76 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mode + 4 >> 2] | 0;
 $1 = HEAP32[$mode + 8 >> 2] | 0;
 $shortMdctSize = $mode + 44 | 0;
 $2 = HEAP32[$shortMdctSize >> 2] | 0;
 $shl = $2 << $LM;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($shl << 2) | 0) + 15 & -16) | 0;
 $shl3 = 1 << $LM;
 $tobool = ($isTransient | 0) == 0;
 $shift$0 = (HEAP32[$mode + 36 >> 2] | 0) - ($tobool ? $LM : 0) | 0;
 $NB$0 = $tobool ? $shl : $2;
 $B$0 = $tobool ? 1 : $shl3;
 if (($C | 0) == 1 & ($CC | 0) == 2) {
  _denormalise_bands(HEAP32[$mode + 32 >> 2] | 0, $2, $X, $vla, $oldBandE, $start, $effEnd, $shl3, $downsample, $silence);
  $arrayidx = $out_syn + 4 | 0;
  $add$ptr = (HEAP32[$arrayidx >> 2] | 0) + ((($0 | 0) / 2 | 0) << 2) | 0;
  _memcpy($add$ptr | 0, $vla | 0, $shl << 2 | 0) | 0;
  if (($B$0 | 0) <= 0) {
   STACKTOP = sp;
   return;
  }
  $mdct = $mode + 64 | 0;
  $window = $mode + 60 | 0;
  $b$0132 = 0;
  do {
   $add$ptr15 = (HEAP32[$out_syn >> 2] | 0) + ((Math_imul($b$0132, $NB$0) | 0) << 2) | 0;
   _clt_mdct_backward_c($mdct, $add$ptr + ($b$0132 << 2) | 0, $add$ptr15, HEAP32[$window >> 2] | 0, $0, $shift$0, $B$0);
   $b$0132 = $b$0132 + 1 | 0;
  } while (($b$0132 | 0) != ($B$0 | 0));
  $b$1130 = 0;
  do {
   $add$ptr23 = (HEAP32[$arrayidx >> 2] | 0) + ((Math_imul($b$1130, $NB$0) | 0) << 2) | 0;
   _clt_mdct_backward_c($mdct, $vla + ($b$1130 << 2) | 0, $add$ptr23, HEAP32[$window >> 2] | 0, $0, $shift$0, $B$0);
   $b$1130 = $b$1130 + 1 | 0;
  } while (($b$1130 | 0) != ($B$0 | 0));
  STACKTOP = sp;
  return;
 }
 if (($C | 0) == 2 & ($CC | 0) == 1) {
  $add$ptr36 = (HEAP32[$out_syn >> 2] | 0) + ((($0 | 0) / 2 | 0) << 2) | 0;
  $mode$idx6 = $mode + 32 | 0;
  _denormalise_bands(HEAP32[$mode$idx6 >> 2] | 0, $2, $X, $vla, $oldBandE, $start, $effEnd, $shl3, $downsample, $silence);
  _denormalise_bands(HEAP32[$mode$idx6 >> 2] | 0, HEAP32[$shortMdctSize >> 2] | 0, $X + ($shl << 2) | 0, $add$ptr36, $oldBandE + ($1 << 2) | 0, $start, $effEnd, $shl3, $downsample, $silence);
  if (($shl | 0) > 0) {
   $i$0136 = 0;
   do {
    $arrayidx42 = $vla + ($i$0136 << 2) | 0;
    HEAPF32[$arrayidx42 >> 2] = +HEAPF32[$arrayidx42 >> 2] * .5 + +HEAPF32[$add$ptr36 + ($i$0136 << 2) >> 2] * .5;
    $i$0136 = $i$0136 + 1 | 0;
   } while (($i$0136 | 0) != ($shl | 0));
  }
  if (($B$0 | 0) <= 0) {
   STACKTOP = sp;
   return;
  }
  $mdct54 = $mode + 64 | 0;
  $window59 = $mode + 60 | 0;
  $b$2134 = 0;
  do {
   $add$ptr58 = (HEAP32[$out_syn >> 2] | 0) + ((Math_imul($b$2134, $NB$0) | 0) << 2) | 0;
   _clt_mdct_backward_c($mdct54, $vla + ($b$2134 << 2) | 0, $add$ptr58, HEAP32[$window59 >> 2] | 0, $0, $shift$0, $B$0);
   $b$2134 = $b$2134 + 1 | 0;
  } while (($b$2134 | 0) != ($B$0 | 0));
  STACKTOP = sp;
  return;
 }
 $mdct71 = $mode + 64 | 0;
 $window76 = $mode + 60 | 0;
 $mode$idx2 = $mode + 32 | 0;
 if (($B$0 | 0) <= 0) {
  $c$0 = 0;
  $mode$idx1$val = $2;
  while (1) {
   $add$ptr65 = $X + ((Math_imul($c$0, $shl) | 0) << 2) | 0;
   $add$ptr67 = $oldBandE + ((Math_imul($c$0, $1) | 0) << 2) | 0;
   _denormalise_bands(HEAP32[$mode$idx2 >> 2] | 0, $mode$idx1$val, $add$ptr65, $vla, $add$ptr67, $start, $effEnd, $shl3, $downsample, $silence);
   $inc80 = $c$0 + 1 | 0;
   if (($inc80 | 0) >= ($CC | 0)) break;
   $c$0 = $inc80;
   $mode$idx1$val = HEAP32[$shortMdctSize >> 2] | 0;
  }
  STACKTOP = sp;
  return;
 }
 $c$0$us = 0;
 $mode$idx3$val = $2;
 while (1) {
  $add$ptr65$us = $X + ((Math_imul($c$0$us, $shl) | 0) << 2) | 0;
  $add$ptr67$us = $oldBandE + ((Math_imul($c$0$us, $1) | 0) << 2) | 0;
  _denormalise_bands(HEAP32[$mode$idx2 >> 2] | 0, $mode$idx3$val, $add$ptr65$us, $vla, $add$ptr67$us, $start, $effEnd, $shl3, $downsample, $silence);
  $arrayidx73$us = $out_syn + ($c$0$us << 2) | 0;
  $b$3138$us = 0;
  do {
   $add$ptr75$us = (HEAP32[$arrayidx73$us >> 2] | 0) + ((Math_imul($b$3138$us, $NB$0) | 0) << 2) | 0;
   _clt_mdct_backward_c($mdct71, $vla + ($b$3138$us << 2) | 0, $add$ptr75$us, HEAP32[$window76 >> 2] | 0, $0, $shift$0, $B$0);
   $b$3138$us = $b$3138$us + 1 | 0;
  } while (($b$3138$us | 0) != ($B$0 | 0));
  $inc80$us = $c$0$us + 1 | 0;
  if (($inc80$us | 0) >= ($CC | 0)) break;
  $c$0$us = $inc80$us;
  $mode$idx3$val = HEAP32[$shortMdctSize >> 2] | 0;
 }
 STACKTOP = sp;
 return;
}

function _resampler_basic_direct_double($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $accum$sroa$0$172$us = 0.0, $accum$sroa$12$175$us = 0.0, $accum$sroa$6$173$us = 0.0, $accum$sroa$9$174$us = 0.0, $add17$us = 0, $add25$us = 0, $add33$us = 0, $add53 = 0, $add53$us = 0, $arrayidx = 0, $arrayidx10$us = 0, $arrayidx11$us = 0, $arrayidx3 = 0, $cmp54 = 0, $cmp54$us = 0, $inc = 0, $inc$us = 0, $j$071$us = 0, $last_sample$0$lcssa = 0, $last_sample$081 = 0, $last_sample$081$us = 0, $last_sample$1 = 0, $last_sample$1$us = 0, $out_sample$0$lcssa = 0, $out_sample$082 = 0, $out_sample$082$us = 0, $samp_frac_num$0$lcssa = 0, $samp_frac_num$080 = 0, $samp_frac_num$080$us = 0, $samp_frac_num$1 = 0, $samp_frac_num$1$us = 0, label = 0;
 $0 = HEAP32[$st + 24 >> 2] | 0;
 $arrayidx = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
 $2 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx3 = (HEAP32[$st + 64 >> 2] | 0) + ($channel_index << 2) | 0;
 $4 = HEAP32[$arrayidx3 >> 2] | 0;
 $5 = HEAP32[$st + 76 >> 2] | 0;
 $6 = HEAP32[$st + 92 >> 2] | 0;
 $7 = HEAP32[$st + 36 >> 2] | 0;
 $8 = HEAP32[$st + 40 >> 2] | 0;
 $9 = HEAP32[$st + 12 >> 2] | 0;
 $10 = HEAP32[$in_len >> 2] | 0;
 if (($2 | 0) >= ($10 | 0)) {
  $last_sample$0$lcssa = $2;
  $out_sample$0$lcssa = 0;
  $samp_frac_num$0$lcssa = $4;
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 $11 = HEAP32[$out_len >> 2] | 0;
 if (($0 | 0) <= 0) {
  $last_sample$081 = $2;
  $out_sample$082 = 0;
  $samp_frac_num$080 = $4;
  while (1) {
   if (($out_sample$082 | 0) >= ($11 | 0)) {
    $last_sample$0$lcssa = $last_sample$081;
    $out_sample$0$lcssa = $out_sample$082;
    $samp_frac_num$0$lcssa = $samp_frac_num$080;
    label = 11;
    break;
   }
   $inc = $out_sample$082 + 1 | 0;
   HEAPF32[$out + ((Math_imul($out_sample$082, $6) | 0) << 2) >> 2] = 0.0;
   $add53 = $samp_frac_num$080 + $8 | 0;
   $cmp54 = $add53 >>> 0 < $9 >>> 0;
   $samp_frac_num$1 = $add53 - ($cmp54 ? 0 : $9) | 0;
   $last_sample$1 = $last_sample$081 + $7 + (($cmp54 ^ 1) & 1) | 0;
   if (($last_sample$1 | 0) < ($10 | 0)) {
    $last_sample$081 = $last_sample$1;
    $out_sample$082 = $inc;
    $samp_frac_num$080 = $samp_frac_num$1;
   } else {
    $last_sample$0$lcssa = $last_sample$1;
    $out_sample$0$lcssa = $inc;
    $samp_frac_num$0$lcssa = $samp_frac_num$1;
    label = 11;
    break;
   }
  }
  if ((label | 0) == 11) {
   HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
   HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
   return $out_sample$0$lcssa | 0;
  }
 }
 $last_sample$081$us = $2;
 $out_sample$082$us = 0;
 $samp_frac_num$080$us = $4;
 while (1) {
  if (($out_sample$082$us | 0) >= ($11 | 0)) {
   $last_sample$0$lcssa = $last_sample$081$us;
   $out_sample$0$lcssa = $out_sample$082$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$080$us;
   label = 11;
   break;
  }
  $arrayidx10$us = $5 + ((Math_imul($samp_frac_num$080$us, $0) | 0) << 2) | 0;
  $arrayidx11$us = $in + ($last_sample$081$us << 2) | 0;
  $accum$sroa$0$172$us = 0.0;
  $accum$sroa$12$175$us = 0.0;
  $accum$sroa$6$173$us = 0.0;
  $accum$sroa$9$174$us = 0.0;
  $j$071$us = 0;
  do {
   $accum$sroa$0$172$us = $accum$sroa$0$172$us + +HEAPF32[$arrayidx10$us + ($j$071$us << 2) >> 2] * +HEAPF32[$arrayidx11$us + ($j$071$us << 2) >> 2];
   $add17$us = $j$071$us | 1;
   $accum$sroa$6$173$us = $accum$sroa$6$173$us + +HEAPF32[$arrayidx10$us + ($add17$us << 2) >> 2] * +HEAPF32[$arrayidx11$us + ($add17$us << 2) >> 2];
   $add25$us = $j$071$us | 2;
   $accum$sroa$9$174$us = $accum$sroa$9$174$us + +HEAPF32[$arrayidx10$us + ($add25$us << 2) >> 2] * +HEAPF32[$arrayidx11$us + ($add25$us << 2) >> 2];
   $add33$us = $j$071$us | 3;
   $accum$sroa$12$175$us = $accum$sroa$12$175$us + +HEAPF32[$arrayidx10$us + ($add33$us << 2) >> 2] * +HEAPF32[$arrayidx11$us + ($add33$us << 2) >> 2];
   $j$071$us = $j$071$us + 4 | 0;
  } while (($j$071$us | 0) < ($0 | 0));
  $inc$us = $out_sample$082$us + 1 | 0;
  HEAPF32[$out + ((Math_imul($out_sample$082$us, $6) | 0) << 2) >> 2] = $accum$sroa$0$172$us + $accum$sroa$6$173$us + $accum$sroa$9$174$us + $accum$sroa$12$175$us;
  $add53$us = $samp_frac_num$080$us + $8 | 0;
  $cmp54$us = $add53$us >>> 0 < $9 >>> 0;
  $samp_frac_num$1$us = $add53$us - ($cmp54$us ? 0 : $9) | 0;
  $last_sample$1$us = $last_sample$081$us + $7 + (($cmp54$us ^ 1) & 1) | 0;
  if (($last_sample$1$us | 0) < ($10 | 0)) {
   $last_sample$081$us = $last_sample$1$us;
   $out_sample$082$us = $inc$us;
   $samp_frac_num$080$us = $samp_frac_num$1$us;
  } else {
   $last_sample$0$lcssa = $last_sample$1$us;
   $out_sample$0$lcssa = $inc$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$1$us;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 return 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $12 = 0, $15 = 0, $18 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i35 = 0, $__i$0$i$i42 = 0, $__loc$idx$val = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i75$sink = 0, $cond$i83$sink = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $vararg_buffer1 = sp + 912 | 0;
 $vararg_buffer = sp + 904 | 0;
 $__buf = sp + 800 | 0;
 $__bb = sp + 976 | 0;
 $__digits = sp + 400 | 0;
 $__pat = sp + 980 | 0;
 $__dp = sp + 972 | 0;
 $__ts = sp + 968 | 0;
 $__grp = sp + 956 | 0;
 $__sym = sp + 944 | 0;
 $__sn = sp + 932 | 0;
 $__fd = sp + 928 | 0;
 $__mbuf = sp;
 $__mi = sp + 924 | 0;
 $__me = sp + 920 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$vararg_buffer >> 3] = $__units;
 $call = _snprintf($__buf, 0, 0, $vararg_buffer) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 59743, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5 << 2) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $3 = $0;
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $3 = $__buf;
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($vararg_buffer, $__iob);
 $__loc$idx$val = HEAP32[$vararg_buffer >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65324) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $6 = 0; else $6 = (HEAP8[$3 >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i35 = 0;
 while (1) {
  if (($__i$0$i$i35 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i35 << 2) >> 2] = 0;
  $__i$0$i$i35 = $__i$0$i$i35 + 1 | 0;
 }
 $__i$0$i$i42 = 0;
 while (1) {
  if (($__i$0$i$i42 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i42 << 2) >> 2] = 0;
  $__i$0$i$i42 = $__i$0$i$i42 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $6, $__loc$idx$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $7 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($7 | 0)) {
  $9 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $12 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $7 + 1 + ($__n$0 - $7 << 1) | 0;
  $cond$i75$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
  $cond$i83$sink = $12 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $12 & 255;
 } else {
  $15 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $18 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $7 + 2 | 0;
  $cond$i75$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $15 & 255;
  $cond$i83$sink = $18 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $18 & 255;
 }
 $add33 = $add31$sink + $cond$i75$sink + $cond$i83$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33 << 2) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $call$i, $6, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $7);
 $call46 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($vararg_buffer);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $10 = 0, $12 = 0, $14 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i37 = 0, $__i$0$i$i45 = 0, $__loc$idx$val = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i80$sink = 0, $cond$i89$sink = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $vararg_buffer1 = sp + 336 | 0;
 $vararg_buffer = sp + 328 | 0;
 $__buf = sp + 224 | 0;
 $__bb = sp + 392 | 0;
 $__digits = sp + 112 | 0;
 $__pat = sp + 400 | 0;
 $__dp = sp + 397 | 0;
 $__ts = sp + 396 | 0;
 $__grp = sp + 380 | 0;
 $__sym = sp + 368 | 0;
 $__sn = sp + 356 | 0;
 $__fd = sp + 352 | 0;
 $__mbuf = sp;
 $__mi = sp + 348 | 0;
 $__me = sp + 344 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$vararg_buffer >> 3] = $__units;
 $call = _snprintf($__buf, 0, 0, $vararg_buffer) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 59743, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $3 = $0;
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $3 = $__buf;
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($vararg_buffer, $__iob);
 $__loc$idx$val = HEAP32[$vararg_buffer >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65292) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $6 = 0; else $6 = (HEAP8[$3 >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i37 = 0;
 while (1) {
  if (($__i$0$i$i37 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i37 << 2) >> 2] = 0;
  $__i$0$i$i37 = $__i$0$i$i37 + 1 | 0;
 }
 $__i$0$i$i45 = 0;
 while (1) {
  if (($__i$0$i$i45 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i45 << 2) >> 2] = 0;
  $__i$0$i$i45 = $__i$0$i$i45 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $6, $__loc$idx$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $7 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($7 | 0)) {
  $8 = HEAP8[$__sn + 11 >> 0] | 0;
  $10 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $7 + 1 + ($__n$0 - $7 << 1) | 0;
  $cond$i80$sink = $8 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $8 & 255;
  $cond$i89$sink = $10 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $10 & 255;
 } else {
  $12 = HEAP8[$__sn + 11 >> 0] | 0;
  $14 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $7 + 2 | 0;
  $cond$i80$sink = $12 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $12 & 255;
  $cond$i89$sink = $14 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $14 & 255;
 }
 $add33 = $add31$sink + $cond$i80$sink + $cond$i89$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $call$i, $6, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $7);
 $call46 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($vararg_buffer);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function _opus_decoder_create($Fs, $channels, $error) {
 $Fs = $Fs | 0;
 $channels = $channels | 0;
 $error = $error | 0;
 var $add$ptr19$i = 0, $call$i24 = 0, $downsample$i$i$i = 0, $reass$mul$i$i = 0, $ret$0$i$i$i = 0, $retval$0 = 0, $retval$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($Fs | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($Fs | 0) < 24e3) switch ($Fs | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($Fs | 0) < 48e3) switch ($Fs | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($Fs | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 if ((label | 0) == 2) if (($channels + -1 | 0) >>> 0 <= 1) {
  $reass$mul$i$i = $channels * 8768 | 0;
  $call$i24 = _malloc($reass$mul$i$i + 9404 | 0) | 0;
  if (!$call$i24) {
   if (!$error) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   HEAP32[$error >> 2] = -7;
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  L23 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
  case 8e3:
   {
    label = 9;
    break L23;
    break;
   }
  default:
   {
    $retval$0$i = -1;
    break L23;
   }
  } else switch ($Fs | 0) {
  case 12e3:
   {
    label = 9;
    break L23;
    break;
   }
  default:
   {
    $retval$0$i = -1;
    break L23;
   }
  } else {
   if (($Fs | 0) < 24e3) switch ($Fs | 0) {
   case 16e3:
    {
     label = 9;
     break L23;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L23;
    }
   }
   if (($Fs | 0) < 48e3) switch ($Fs | 0) {
   case 24e3:
    {
     label = 9;
     break L23;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L23;
    }
   } else switch ($Fs | 0) {
   case 48e3:
    {
     label = 9;
     break L23;
     break;
    }
   default:
    {
     $retval$0$i = -1;
     break L23;
    }
   }
  } while (0);
  if ((label | 0) == 9) {
   _memset($call$i24 | 0, 0, $reass$mul$i$i + 9404 | 0) | 0;
   HEAP32[$call$i24 + 4 >> 2] = 88;
   HEAP32[$call$i24 >> 2] = 8640;
   $add$ptr19$i = $call$i24 + 8640 | 0;
   HEAP32[$call$i24 + 8 >> 2] = $channels;
   HEAP32[$call$i24 + 48 >> 2] = $channels;
   HEAP32[$call$i24 + 12 >> 2] = $Fs;
   HEAP32[$call$i24 + 24 >> 2] = $Fs;
   HEAP32[$call$i24 + 16 >> 2] = $channels;
   _silk_InitDecoder($call$i24 + 88 | 0);
   _memset($add$ptr19$i | 0, 0, $reass$mul$i$i + 764 | 0) | 0;
   HEAP32[$add$ptr19$i >> 2] = 43640;
   HEAP32[$call$i24 + 8644 >> 2] = 120;
   HEAP32[$call$i24 + 8648 >> 2] = $channels;
   HEAP32[$call$i24 + 8652 >> 2] = $channels;
   $downsample$i$i$i = $call$i24 + 8656 | 0;
   HEAP32[$downsample$i$i$i >> 2] = 1;
   HEAP32[$call$i24 + 8660 >> 2] = 0;
   HEAP32[$call$i24 + 8664 >> 2] = 21;
   HEAP32[$call$i24 + 8668 >> 2] = 1;
   HEAP32[$call$i24 + 8672 >> 2] = ($channels | 0) == 1 & 1;
   HEAP32[$call$i24 + 8676 >> 2] = 0;
   _opus_custom_decoder_ctl($add$ptr19$i, 4028, $vararg_buffer) | 0;
   L37 : do if (($Fs | 0) < 16e3) if (($Fs | 0) < 12e3) switch ($Fs | 0) {
   case 8e3:
    {
     $ret$0$i$i$i = 6;
     break L37;
     break;
    }
   default:
    _celt_fatal(56336, 47869, 84);
   } else switch ($Fs | 0) {
   case 12e3:
    {
     $ret$0$i$i$i = 4;
     break L37;
     break;
    }
   default:
    _celt_fatal(56336, 47869, 84);
   } else {
    if (($Fs | 0) < 24e3) switch ($Fs | 0) {
    case 16e3:
     {
      $ret$0$i$i$i = 3;
      break L37;
      break;
     }
    default:
     _celt_fatal(56336, 47869, 84);
    }
    if (($Fs | 0) >= 48e3) {
     switch ($Fs | 0) {
     case 48e3:
      {
       $ret$0$i$i$i = 1;
       break L37;
       break;
      }
     default:
      {}
     }
     _celt_fatal(56336, 47869, 84);
    }
    switch ($Fs | 0) {
    case 24e3:
     {
      $ret$0$i$i$i = 2;
      break L37;
      break;
     }
    default:
     _celt_fatal(56336, 47869, 84);
    }
   } while (0);
   HEAP32[$downsample$i$i$i >> 2] = $ret$0$i$i$i;
   HEAP32[$vararg_buffer1 >> 2] = 0;
   _opus_custom_decoder_ctl($add$ptr19$i, 10016, $vararg_buffer1) | 0;
   HEAP32[$call$i24 + 60 >> 2] = 0;
   HEAP32[$call$i24 + 64 >> 2] = ($Fs >>> 0) / 400 | 0;
   HEAP32[$call$i24 + 44 >> 2] = 0;
   $retval$0$i = 0;
  }
  if ($error | 0) HEAP32[$error >> 2] = $retval$0$i;
  if (!$retval$0$i) {
   $retval$0 = $call$i24;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  _free($call$i24);
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!$error) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$error >> 2] = -1;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26locale5__impC2Em() {
 HEAP32[15993] = 0;
 HEAP32[15992] = 47076;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em();
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(64112, 58259, __ZNSt3__211char_traitsIcE6lengthEPKc(58259) | 0);
 HEAP32[15995] = HEAP32[15994];
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_();
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_();
 return;
}

function ___get_locale($cat, $val) {
 $cat = $cat | 0;
 $val = $val | 0;
 var $11 = 0, $15 = 0, $18 = 0, $5 = 0, $9 = 0, $add = 0, $arrayidx103 = 0, $buf = 0, $call = 0, $call110 = 0, $call113 = 0, $call139 = 0, $call3 = 0, $call84 = 0, $call9 = 0, $call91 = 0, $map_size = 0, $n$0$lcssa = 0, $n$085 = 0, $name120 = 0, $name144 = 0, $new$4 = 0, $p$084 = 0, $p$182 = 0, $path$180 = 0, $retval$0 = 0, $sub = 0, $sub96 = 0, $val$addr$1 = 0, $val$addr$290 = 0, $val$addr$291 = 0, $val$addr$292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp;
 $map_size = sp + 256 | 0;
 do if (!(HEAP8[$val >> 0] | 0)) {
  $call = _getenv(57514) | 0;
  if ($call | 0) if (HEAP8[$call >> 0] | 0) {
   $val$addr$1 = $call;
   break;
  }
  $call3 = _getenv(41312 + ($cat * 12 | 0) | 0) | 0;
  if ($call3 | 0) if (HEAP8[$call3 >> 0] | 0) {
   $val$addr$1 = $call3;
   break;
  }
  $call9 = _getenv(57521) | 0;
  if ($call9 | 0) if (HEAP8[$call9 >> 0] | 0) {
   $val$addr$1 = $call9;
   break;
  }
  $val$addr$1 = 57526;
 } else $val$addr$1 = $val; while (0);
 $n$085 = 0;
 L13 : while (1) {
  switch (HEAP8[$val$addr$1 + $n$085 >> 0] | 0) {
  case 47:
  case 0:
   {
    $n$0$lcssa = $n$085;
    break L13;
    break;
   }
  default:
   {}
  }
  $n$085 = $n$085 + 1 | 0;
  if ($n$085 >>> 0 >= 15) {
   $n$0$lcssa = 15;
   break;
  }
 }
 $5 = HEAP8[$val$addr$1 >> 0] | 0;
 if ($5 << 24 >> 24 == 46) {
  $val$addr$290 = 57526;
  label = 15;
 } else if (!(HEAP8[$val$addr$1 + $n$0$lcssa >> 0] | 0)) if ($5 << 24 >> 24 == 67) {
  $val$addr$290 = $val$addr$1;
  label = 15;
 } else {
  $val$addr$291 = $val$addr$1;
  label = 16;
 } else {
  $val$addr$290 = 57526;
  label = 15;
 }
 if ((label | 0) == 15) if (!(HEAP8[$val$addr$290 + 1 >> 0] | 0)) {
  $val$addr$292 = $val$addr$290;
  label = 18;
 } else {
  $val$addr$291 = $val$addr$290;
  label = 16;
 }
 L22 : do if ((label | 0) == 16) if (!(_strcmp($val$addr$291, 57526) | 0)) {
  $val$addr$292 = $val$addr$291;
  label = 18;
 } else if (!(_strcmp($val$addr$291, 57534) | 0)) {
  $val$addr$292 = $val$addr$291;
  label = 18;
 } else {
  $9 = HEAP32[16058] | 0;
  if ($9 | 0) {
   $p$084 = $9;
   do {
    if (!(_strcmp($val$addr$291, $p$084 + 8 | 0) | 0)) {
     $retval$0 = $p$084;
     break L22;
    }
    $p$084 = HEAP32[$p$084 + 24 >> 2] | 0;
   } while (($p$084 | 0) != 0);
  }
  $11 = HEAP32[16058] | 0;
  if ($11 | 0) {
   $p$182 = $11;
   do {
    if (!(_strcmp($val$addr$291, $p$182 + 8 | 0) | 0)) {
     $retval$0 = $p$182;
     break L22;
    }
    $p$182 = HEAP32[$p$182 + 24 >> 2] | 0;
   } while (($p$182 | 0) != 0);
  }
  L38 : do if (!(HEAP32[16036] | 0)) {
   $call84 = _getenv(57540) | 0;
   if (!$call84) label = 40; else if (!(HEAP8[$call84 >> 0] | 0)) label = 40; else {
    $sub96 = 254 - $n$0$lcssa | 0;
    $add = $n$0$lcssa + 1 | 0;
    $path$180 = $call84;
    while (1) {
     $call91 = ___strchrnul($path$180) | 0;
     $15 = HEAP8[$call91 >> 0] | 0;
     $sub = $call91 - $path$180 + (($15 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if ($sub >>> 0 < $sub96 >>> 0) {
      _memcpy($buf | 0, $path$180 | 0, $sub | 0) | 0;
      $arrayidx103 = $buf + $sub | 0;
      HEAP8[$arrayidx103 >> 0] = 47;
      _memcpy($arrayidx103 + 1 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
      HEAP8[$buf + ($add + $sub) >> 0] = 0;
      $call110 = ___map_file($buf | 0, $map_size | 0) | 0;
      if ($call110 | 0) break;
      $18 = HEAP8[$call91 >> 0] | 0;
     } else $18 = $15;
     $path$180 = $call91 + ($18 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[$path$180 >> 0] | 0)) {
      label = 40;
      break L38;
     }
    }
    $call113 = _malloc(28) | 0;
    if (!$call113) {
     ___munmap($call110, HEAP32[$map_size >> 2] | 0);
     label = 40;
     break;
    } else {
     HEAP32[$call113 >> 2] = $call110;
     HEAP32[$call113 + 4 >> 2] = HEAP32[$map_size >> 2];
     $name120 = $call113 + 8 | 0;
     _memcpy($name120 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
     HEAP8[$name120 + $n$0$lcssa >> 0] = 0;
     HEAP32[$call113 + 24 >> 2] = HEAP32[16058];
     HEAP32[16058] = $call113;
     $new$4 = $call113;
     break;
    }
   }
  } else label = 40; while (0);
  if ((label | 0) == 40) {
   $call139 = _malloc(28) | 0;
   if (!$call139) $new$4 = $call139; else {
    HEAP32[$call139 >> 2] = 36448;
    HEAP32[$call139 + 4 >> 2] = 20;
    $name144 = $call139 + 8 | 0;
    _memcpy($name144 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
    HEAP8[$name144 + $n$0$lcssa >> 0] = 0;
    HEAP32[$call139 + 24 >> 2] = HEAP32[16058];
    HEAP32[16058] = $call139;
    $new$4 = $call139;
   }
  }
  $retval$0 = ($cat | 0) == 0 & ($new$4 | 0) == 0 ? 44180 : $new$4;
 } while (0);
 do if ((label | 0) == 18) {
  if (!$cat) if ((HEAP8[$val$addr$292 + 1 >> 0] | 0) == 46) {
   $retval$0 = 44180;
   break;
  }
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _downmix_and_resample($downmix, $_x, $y, $S, $subframe, $offset, $c2, $C, $Fs) {
 $downmix = $downmix | 0;
 $_x = $_x | 0;
 $y = $y | 0;
 $S = $S | 0;
 $subframe = $subframe | 0;
 $offset = $offset | 0;
 $c2 = $c2 | 0;
 $C = $C | 0;
 $Fs = $Fs | 0;
 var $0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $add$i = 0.0, $add23$i = 0.0, $add28$i = 0.0, $arrayidx = 0, $arrayidx18$i = 0, $arrayidx18$i42 = 0, $arrayidx9$i = 0, $arrayidx9$i41 = 0, $cmp1 = 0, $cmp2176 = 0, $div$i = 0, $div$i39 = 0, $hp_ener$043$i = 0.0, $j$077 = 0, $j$175 = 0, $k$042$i = 0, $k$042$i45 = 0, $mul$i = 0, $mul$i46 = 0, $mul11$i = 0.0, $mul11$i55 = 0.0, $mul2$i = 0.0, $mul2$i49 = 0.0, $mul20$i = 0.0, $mul37 = 0, $mul45 = 0, $offset$addr$0 = 0, $ret$0 = 0.0, $retval$0 = 0.0, $scale$0 = 0.0, $subframe$addr$0 = 0, $vla = 0, $vla39 = 0, sp = 0;
 sp = STACKTOP;
 if (!$subframe) {
  $retval$0 = 0.0;
  STACKTOP = sp;
  return +$retval$0;
 }
 $cmp1 = ($Fs | 0) == 48e3;
 if ($cmp1) {
  $offset$addr$0 = $offset << 1;
  $subframe$addr$0 = $subframe << 1;
 } else if (($Fs | 0) == 16e3) {
  $offset$addr$0 = ($offset << 1 | 0) / 3 | 0;
  $subframe$addr$0 = ($subframe << 1 | 0) / 3 | 0;
 } else {
  $offset$addr$0 = $offset;
  $subframe$addr$0 = $subframe;
 }
 $0 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($subframe$addr$0 << 2) | 0) + 15 & -16) | 0;
 FUNCTION_TABLE_viiiiiii[$downmix & 1]($_x, $vla, $subframe$addr$0, $offset$addr$0, 0, $c2, $C);
 if (($c2 | 0) == -2) $scale$0 = .000030517578125 / +($C | 0); else $scale$0 = ($c2 | 0) > -1 ? .0000152587890625 : .000030517578125;
 $cmp2176 = ($subframe$addr$0 | 0) > 0;
 if ($cmp2176) {
  $j$077 = 0;
  do {
   $arrayidx = $vla + ($j$077 << 2) | 0;
   HEAPF32[$arrayidx >> 2] = $scale$0 * +HEAPF32[$arrayidx >> 2];
   $j$077 = $j$077 + 1 | 0;
  } while (($j$077 | 0) != ($subframe$addr$0 | 0));
 }
 L18 : do if ($cmp1) {
  $div$i = ($subframe$addr$0 | 0) / 2 | 0;
  if (($subframe$addr$0 | 0) > 1) {
   $arrayidx9$i = $S + 4 | 0;
   $arrayidx18$i = $S + 8 | 0;
   $hp_ener$043$i = 0.0;
   $k$042$i = 0;
   while (1) {
    $mul$i = $k$042$i << 1;
    $2 = +HEAPF32[$vla + ($mul$i << 2) >> 2];
    $3 = +HEAPF32[$S >> 2];
    $mul2$i = ($2 - $3) * .6074370741844177;
    $add$i = $3 + $mul2$i;
    HEAPF32[$S >> 2] = $2 + $mul2$i;
    $4 = +HEAPF32[$vla + (($mul$i | 1) << 2) >> 2];
    $5 = +HEAPF32[$arrayidx9$i >> 2];
    $mul11$i = ($4 - $5) * .15062999725341797;
    HEAPF32[$arrayidx9$i >> 2] = $4 + $mul11$i;
    $6 = +HEAPF32[$arrayidx18$i >> 2];
    $mul20$i = (-$4 - $6) * .15062999725341797;
    $add23$i = $add$i + $6 + $mul20$i;
    HEAPF32[$arrayidx18$i >> 2] = $mul20$i - $4;
    $add28$i = $hp_ener$043$i + $add23$i * $add23$i;
    HEAPF32[$y + ($k$042$i << 2) >> 2] = ($add$i + $5 + $mul11$i) * .5;
    $k$042$i = $k$042$i + 1 | 0;
    if (($k$042$i | 0) == ($div$i | 0)) {
     $ret$0 = $add28$i;
     break;
    } else $hp_ener$043$i = $add28$i;
   }
  } else $ret$0 = 0.0;
 } else {
  if (($Fs | 0) >= 24e3) {
   switch ($Fs | 0) {
   case 24e3:
    break;
   default:
    {
     $ret$0 = 0.0;
     break L18;
    }
   }
   _memcpy($y | 0, $vla | 0, $subframe$addr$0 << 2 | 0) | 0;
   $ret$0 = 0.0;
   break;
  }
  switch ($Fs | 0) {
  case 16e3:
   break;
  default:
   {
    $ret$0 = 0.0;
    break L18;
   }
  }
  $mul37 = $subframe$addr$0 * 3 | 0;
  $7 = _llvm_stacksave() | 0;
  $vla39 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($mul37 << 2) | 0) + 15 & -16) | 0;
  if ($cmp2176) {
   $j$175 = 0;
   do {
    $8 = HEAP32[$vla + ($j$175 << 2) >> 2] | 0;
    $mul45 = $j$175 * 3 | 0;
    HEAP32[$vla39 + ($mul45 << 2) >> 2] = $8;
    HEAP32[$vla39 + ($mul45 + 1 << 2) >> 2] = $8;
    HEAP32[$vla39 + ($mul45 + 2 << 2) >> 2] = $8;
    $j$175 = $j$175 + 1 | 0;
   } while (($j$175 | 0) != ($subframe$addr$0 | 0));
  }
  $div$i39 = ($mul37 | 0) / 2 | 0;
  if (($mul37 | 0) > 1) {
   $arrayidx9$i41 = $S + 4 | 0;
   $arrayidx18$i42 = $S + 8 | 0;
   $k$042$i45 = 0;
   do {
    $mul$i46 = $k$042$i45 << 1;
    $9 = +HEAPF32[$vla39 + ($mul$i46 << 2) >> 2];
    $10 = +HEAPF32[$S >> 2];
    $mul2$i49 = ($9 - $10) * .6074370741844177;
    HEAPF32[$S >> 2] = $9 + $mul2$i49;
    $11 = +HEAPF32[$vla39 + (($mul$i46 | 1) << 2) >> 2];
    $12 = +HEAPF32[$arrayidx9$i41 >> 2];
    $mul11$i55 = ($11 - $12) * .15062999725341797;
    HEAPF32[$arrayidx9$i41 >> 2] = $11 + $mul11$i55;
    HEAPF32[$arrayidx18$i42 >> 2] = (-$11 - +HEAPF32[$arrayidx18$i42 >> 2]) * .15062999725341797 - $11;
    HEAPF32[$y + ($k$042$i45 << 2) >> 2] = ($10 + $mul2$i49 + $12 + $mul11$i55) * .5;
    $k$042$i45 = $k$042$i45 + 1 | 0;
   } while (($k$042$i45 | 0) != ($div$i39 | 0));
  }
  _llvm_stackrestore($7 | 0);
  $ret$0 = 0.0;
 } while (0);
 _llvm_stackrestore($0 | 0);
 $retval$0 = $ret$0;
 STACKTOP = sp;
 return +$retval$0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__atoms = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__loc$idx$val = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $call$i = 0, $call16 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast32 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $vararg_buffer = sp + 560 | 0;
 $__wbuf = sp + 160 | 0;
 $__wb = sp + 576 | 0;
 $__wn = sp + 568 | 0;
 $__loc = sp + 564 | 0;
 $__neg = sp + 584 | 0;
 $__atoms = sp + 112 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 93;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65324) | 0;
 HEAP8[$__neg >> 0] = 0;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, HEAP32[$__e >> 2] | 0, $__intl, $__loc$idx$val, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, 59637, 59647, $__atoms) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 392) {
   $call16 = _malloc(($sub$ptr$sub >>> 2) + 2 | 0) | 0;
   if (!$call16) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call16;
    $__nc$0 = $call16;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $__atoms + 40 | 0;
  $sub$ptr$rhs$cast32 = $__atoms;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP32[$__w$0 >> 2] | 0;
   $__first$addr$0$i = $__atoms;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP32[$__first$addr$0$i >> 2] | 0) == ($12 | 0)) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 4 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[59637 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast32 >> 2) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 4 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 0, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc();
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if (!$16) $29 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 63]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if (!$21) label = 32; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  } else if ($29) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($29) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 127]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__atoms = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__loc$idx$val = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $call$i = 0, $call15 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer = sp + 216 | 0;
 $__wbuf = sp + 112 | 0;
 $__wb = sp + 232 | 0;
 $__wn = sp + 224 | 0;
 $__loc = sp + 220 | 0;
 $__neg = sp + 250 | 0;
 $__atoms = sp + 240 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 93;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65292) | 0;
 HEAP8[$__neg >> 0] = 0;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, HEAP32[$__e >> 2] | 0, $__intl, $__loc$idx$val, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, 59527, 59537, $__atoms) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 98) {
   $call15 = _malloc($sub$ptr$sub + 2 | 0) | 0;
   if (!$call15) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call15;
    $__nc$0 = $call15;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $__atoms + 10 | 0;
  $sub$ptr$rhs$cast31 = $__atoms;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP8[$__w$0 >> 0] | 0;
   $__first$addr$0$i = $__atoms;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP8[$__first$addr$0$i >> 0] | 0) == $12 << 24 >> 24) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 1 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[59527 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast31) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 1 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 0, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc();
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if (!$16) $29 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 63]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if (!$21) label = 32; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  } else if ($29) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($29) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 127]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $1 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i26 = 0, $__loc = 0, $__loc$idx$val = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add18$sink = 0, $add20 = 0, $call$i = 0, $call23 = 0, $call33 = 0, $cond$i$i109 = 0, $cond$i40 = 0, $cond$i81$sink = 0, $cond$i89$sink = 0, $tobool$i$i = 0, $tobool$i$i35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 $__loc = sp + 456 | 0;
 $__pat = sp + 460 | 0;
 $__dp = sp + 452 | 0;
 $__ts = sp + 448 | 0;
 $__grp = sp + 436 | 0;
 $__sym = sp + 424 | 0;
 $__sn = sp + 412 | 0;
 $__fd = sp + 408 | 0;
 $__mbuf = sp;
 $__mi = sp + 404 | 0;
 $__me = sp + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65324) | 0;
 $__size_$i$i = $__digits + 8 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 $__size_$i2$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i2$i >> 2] | 0 : $1 & 255) | 0)) $6 = 0; else {
  $4 = HEAP32[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 2] | 0;
  $6 = ($4 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, 45) | 0);
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 $__i$0$i$i26 = 0;
 while (1) {
  if (($__i$0$i$i26 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i26 << 2) >> 2] = 0;
  $__i$0$i$i26 = $__i$0$i$i26 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $6, $__loc$idx$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $7 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i35 = $7 << 24 >> 24 < 0;
 $cond$i40 = $tobool$i$i35 ? HEAP32[$__size_$i2$i >> 2] | 0 : $7 & 255;
 $9 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i40 | 0) > ($9 | 0)) {
  $11 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $14 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 1 + ($cond$i40 - $9 << 1) | 0;
  $cond$i81$sink = $14 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $14 & 255;
  $cond$i89$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $11 & 255;
 } else {
  $17 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $20 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 2 | 0;
  $cond$i81$sink = $20 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $20 & 255;
  $cond$i89$sink = $17 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $17 & 255;
 }
 $add20 = $add18$sink + $cond$i89$sink + $cond$i81$sink | 0;
 if ($add20 >>> 0 > 100) {
  $call23 = _malloc($add20 << 2) | 0;
  if (!$call23) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call23;
   $__mb$0 = $call23;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i109 = $tobool$i$i35 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i109, $cond$i$i109 + ($cond$i40 << 2) | 0, $call$i, $6, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $9);
 $call33 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call33 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $0 = 0, $11 = 0, $13 = 0, $15 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i27 = 0, $__loc = 0, $__loc$idx$val = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add19$sink = 0, $add21 = 0, $call$i = 0, $call24 = 0, $call34 = 0, $cond$i$i118 = 0, $cond$i42 = 0, $cond$i88$sink = 0, $cond$i97$sink = 0, $tobool$i$i = 0, $tobool$i$i37 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $__loc = sp + 148 | 0;
 $__pat = sp + 156 | 0;
 $__dp = sp + 153 | 0;
 $__ts = sp + 152 | 0;
 $__grp = sp + 136 | 0;
 $__sym = sp + 124 | 0;
 $__sn = sp + 112 | 0;
 $__fd = sp + 108 | 0;
 $__mbuf = sp;
 $__mi = sp + 104 | 0;
 $__me = sp + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65292) | 0;
 $__size_$i$i = $__digits + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $__size_$i3$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i3$i >> 2] | 0 : $0 & 255) | 0)) $5 = 0; else {
  $3 = HEAP8[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 0] | 0;
  $5 = $3 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, 45) | 0) << 24 >> 24;
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 $__i$0$i$i27 = 0;
 while (1) {
  if (($__i$0$i$i27 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i27 << 2) >> 2] = 0;
  $__i$0$i$i27 = $__i$0$i$i27 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $5, $__loc$idx$val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $6 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i37 = $6 << 24 >> 24 < 0;
 $cond$i42 = $tobool$i$i37 ? HEAP32[$__size_$i3$i >> 2] | 0 : $6 & 255;
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i42 | 0) > ($8 | 0)) {
  $9 = HEAP8[$__sn + 11 >> 0] | 0;
  $11 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 1 + ($cond$i42 - $8 << 1) | 0;
  $cond$i88$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $11 & 255;
  $cond$i97$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
 } else {
  $13 = HEAP8[$__sn + 11 >> 0] | 0;
  $15 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 2 | 0;
  $cond$i88$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $15 & 255;
  $cond$i97$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $13 & 255;
 }
 $add21 = $add19$sink + $cond$i97$sink + $cond$i88$sink | 0;
 if ($add21 >>> 0 > 100) {
  $call24 = _malloc($add21) | 0;
  if (!$call24) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call24;
   $__mb$0 = $call24;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i118 = $tobool$i$i37 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i118, $cond$i$i118 + $cond$i42 | 0, $call$i, $5, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $8);
 $call34 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__mb$0, HEAP32[$__mi >> 2] | 0, HEAP32[$__me >> 2] | 0, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call34 | 0;
}

function _opus_custom_decoder_ctl($st, $request, $varargs) {
 $st = $st | 0;
 $request = $request | 0;
 $varargs = $varargs | 0;
 var $14 = 0, $15 = 0, $23 = 0, $24 = 0, $31 = 0, $32 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $69 = 0, $75 = 0, $76 = 0, $83 = 0, $84 = 0, $91 = 0, $92 = 0, $add$ptr56 = 0, $add$ptr60 = 0, $add$ptr64 = 0, $ap = 0, $error = 0, $i$074 = 0, $mul59 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 do switch ($request | 0) {
 case 10010:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   if (($6 | 0) < 0) label = 30; else if (($6 | 0) < (HEAP32[(HEAP32[$st >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$st + 20 >> 2] = $6;
    label = 29;
   } else label = 30;
   break;
  }
 case 10012:
  {
   $14 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $15 = HEAP32[$14 >> 2] | 0;
   HEAP32[$ap >> 2] = $14 + 4;
   if (($15 | 0) < 1) label = 30; else if (($15 | 0) > (HEAP32[(HEAP32[$st >> 2] | 0) + 8 >> 2] | 0)) label = 30; else {
    HEAP32[$st + 24 >> 2] = $15;
    label = 29;
   }
   break;
  }
 case 10008:
  {
   $23 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$ap >> 2] = $23 + 4;
   if (($24 + -1 | 0) >>> 0 > 1) label = 30; else {
    HEAP32[$st + 12 >> 2] = $24;
    label = 29;
   }
   break;
  }
 case 10007:
  {
   $31 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $32 = HEAP32[$31 >> 2] | 0;
   HEAP32[$ap >> 2] = $31 + 4;
   if (!$32) label = 30; else {
    $error = $st + 44 | 0;
    HEAP32[$32 >> 2] = HEAP32[$error >> 2];
    HEAP32[$error >> 2] = 0;
    label = 29;
   }
   break;
  }
 case 4027:
  {
   $39 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $40 = HEAP32[$39 >> 2] | 0;
   HEAP32[$ap >> 2] = $39 + 4;
   if (!$40) label = 30; else {
    HEAP32[$40 >> 2] = (HEAP32[$st + 4 >> 2] | 0) / (HEAP32[$st + 16 >> 2] | 0) | 0;
    label = 29;
   }
   break;
  }
 case 4028:
  {
   $44 = HEAP32[$st + 8 >> 2] | 0;
   $add$ptr56 = $st + 92 + ((Math_imul((HEAP32[$st + 4 >> 2] | 0) + 2048 | 0, $44) | 0) << 2) + ($44 * 24 << 2) | 0;
   $45 = HEAP32[$st >> 2] | 0;
   $46 = HEAP32[$45 + 8 >> 2] | 0;
   $mul59 = $46 << 1;
   $add$ptr60 = $add$ptr56 + ($mul59 << 2) | 0;
   $add$ptr64 = $add$ptr60 + ($mul59 << 2) | 0;
   _memset($st + 40 | 0, 0, ($46 << 5) + 52 + (Math_imul((HEAP32[$45 + 4 >> 2] << 2) + 8288 | 0, $44) | 0) | 0) | 0;
   if (($46 | 0) > 0) {
    $i$074 = 0;
    do {
     HEAPF32[$add$ptr64 + ($i$074 << 2) >> 2] = -28.0;
     HEAPF32[$add$ptr60 + ($i$074 << 2) >> 2] = -28.0;
     $i$074 = $i$074 + 1 | 0;
    } while (($i$074 | 0) < ($mul59 | 0));
   }
   HEAP32[$st + 56 >> 2] = 1;
   label = 29;
   break;
  }
 case 4033:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   if (!$53) label = 30; else {
    HEAP32[$53 >> 2] = HEAP32[$st + 60 >> 2];
    label = 29;
   }
   break;
  }
 case 10015:
  {
   $60 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$ap >> 2] = $60 + 4;
   if (!$61) label = 30; else {
    HEAP32[$61 >> 2] = HEAP32[$st >> 2];
    label = 29;
   }
   break;
  }
 case 10016:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   HEAP32[$st + 28 >> 2] = $69;
   label = 29;
   break;
  }
 case 4031:
  {
   $75 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $76 = HEAP32[$75 >> 2] | 0;
   HEAP32[$ap >> 2] = $75 + 4;
   if (!$76) label = 30; else {
    HEAP32[$76 >> 2] = HEAP32[$st + 40 >> 2];
    label = 29;
   }
   break;
  }
 case 4046:
  {
   $83 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $84 = HEAP32[$83 >> 2] | 0;
   HEAP32[$ap >> 2] = $83 + 4;
   if ($84 >>> 0 > 1) label = 30; else {
    HEAP32[$st + 32 >> 2] = $84;
    label = 29;
   }
   break;
  }
 case 4047:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   if (!$92) label = 30; else {
    HEAP32[$92 >> 2] = HEAP32[$st + 32 >> 2];
    label = 29;
   }
   break;
  }
 default:
  {
   $retval$0 = -5;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } while (0);
 if ((label | 0) == 29) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 30) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _pitch_downsample($x, $x_lp, $len, $C) {
 $x = $x | 0;
 $x_lp = $x_lp | 0;
 $len = $len | 0;
 $C = $C | 0;
 var $0 = 0, $1 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $28 = 0.0, $29 = 0.0, $8 = 0, $9 = 0.0, $ac = 0, $add101 = 0.0, $add54 = 0.0, $add86 = 0.0, $add91 = 0.0, $add96 = 0.0, $arrayidx41 = 0, $arrayidx41$peel = 0, $arrayidx61 = 0, $arrayidx61$1 = 0, $arrayidx61$2 = 0, $arrayidx61$3 = 0, $arrayidx79$1 = 0, $arrayidx79$2 = 0, $arrayidx79$3 = 0, $cmp55 = 0, $i$038$i = 0, $i$056 = 0, $i$154 = 0, $inc$i = 0, $lpc = 0, $mem0$033$i = 0.0, $mem0$033$i$phi = 0.0, $mem1$034$i = 0.0, $mem2$035$i = 0.0, $mem3$036$i = 0.0, $mem4$037$i = 0.0, $mul = 0, $mul104 = 0.0, $mul19 = 0.0, $mul27 = 0, $mul80 = 0.0, $mul80$1 = 0.0, $mul80$2 = 0.0, $mul80$3 = 0.0, $shr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $ac = sp + 16 | 0;
 $lpc = sp;
 $shr = $len >> 1;
 $cmp55 = ($len | 0) > 3;
 $0 = HEAP32[$x >> 2] | 0;
 $1 = +HEAPF32[$0 + 4 >> 2];
 if ($cmp55) {
  HEAPF32[$x_lp + 4 >> 2] = (+HEAPF32[$0 + 8 >> 2] + ($1 + +HEAPF32[$0 + 12 >> 2]) * .5) * .5;
  if (($len | 0) > 5) {
   $i$056 = 2;
   do {
    $mul = $i$056 << 1;
    HEAPF32[$x_lp + ($i$056 << 2) >> 2] = (+HEAPF32[$0 + ($mul << 2) >> 2] + (+HEAPF32[$0 + ($mul + -1 << 2) >> 2] + +HEAPF32[$0 + (($mul | 1) << 2) >> 2]) * .5) * .5;
    $i$056 = $i$056 + 1 | 0;
   } while (($i$056 | 0) < ($shr | 0));
  }
 }
 $mul19 = ($1 * .5 + +HEAPF32[$0 >> 2]) * .5;
 HEAPF32[$x_lp >> 2] = $mul19;
 if (($C | 0) == 2) {
  $8 = HEAP32[$x + 4 >> 2] | 0;
  $9 = +HEAPF32[$8 + 4 >> 2];
  if ($cmp55) {
   $arrayidx41$peel = $x_lp + 4 | 0;
   HEAPF32[$arrayidx41$peel >> 2] = +HEAPF32[$arrayidx41$peel >> 2] + (+HEAPF32[$8 + 8 >> 2] + ($9 + +HEAPF32[$8 + 12 >> 2]) * .5) * .5;
   if (($len | 0) > 5) {
    $i$154 = 2;
    do {
     $mul27 = $i$154 << 1;
     $arrayidx41 = $x_lp + ($i$154 << 2) | 0;
     HEAPF32[$arrayidx41 >> 2] = +HEAPF32[$arrayidx41 >> 2] + (+HEAPF32[$8 + ($mul27 << 2) >> 2] + (+HEAPF32[$8 + ($mul27 + -1 << 2) >> 2] + +HEAPF32[$8 + (($mul27 | 1) << 2) >> 2]) * .5) * .5;
     $i$154 = $i$154 + 1 | 0;
    } while (($i$154 | 0) < ($shr | 0));
    $18 = +HEAPF32[$x_lp >> 2];
   } else $18 = $mul19;
  } else $18 = $mul19;
  $add54 = $18 + ($9 * .5 + +HEAPF32[$8 >> 2]) * .5;
  HEAPF32[$x_lp >> 2] = $add54;
  $29 = $add54;
 } else $29 = $mul19;
 __celt_autocorr($x_lp, $ac, 0, 0, 4, $shr);
 HEAPF32[$ac >> 2] = +HEAPF32[$ac >> 2] * 1.000100016593933;
 $arrayidx61 = $ac + 4 | 0;
 $20 = +HEAPF32[$arrayidx61 >> 2];
 HEAPF32[$arrayidx61 >> 2] = $20 - $20 * .00800000037997961 * .00800000037997961;
 $arrayidx61$1 = $ac + 8 | 0;
 $21 = +HEAPF32[$arrayidx61$1 >> 2];
 HEAPF32[$arrayidx61$1 >> 2] = $21 - $21 * .01600000075995922 * .01600000075995922;
 $arrayidx61$2 = $ac + 12 | 0;
 $22 = +HEAPF32[$arrayidx61$2 >> 2];
 HEAPF32[$arrayidx61$2 >> 2] = $22 - $22 * .024000000208616257 * .024000000208616257;
 $arrayidx61$3 = $ac + 16 | 0;
 $23 = +HEAPF32[$arrayidx61$3 >> 2];
 HEAPF32[$arrayidx61$3 >> 2] = $23 - $23 * .03200000151991844 * .03200000151991844;
 __celt_lpc($lpc, $ac, 4);
 $mul80 = +HEAPF32[$lpc >> 2] * .8999999761581421;
 HEAPF32[$lpc >> 2] = $mul80;
 $arrayidx79$1 = $lpc + 4 | 0;
 $mul80$1 = +HEAPF32[$arrayidx79$1 >> 2] * .809999942779541;
 HEAPF32[$arrayidx79$1 >> 2] = $mul80$1;
 $arrayidx79$2 = $lpc + 8 | 0;
 $mul80$2 = +HEAPF32[$arrayidx79$2 >> 2] * .7289999127388;
 HEAPF32[$arrayidx79$2 >> 2] = $mul80$2;
 $arrayidx79$3 = $lpc + 12 | 0;
 $mul80$3 = +HEAPF32[$arrayidx79$3 >> 2] * .6560999155044556;
 HEAPF32[$arrayidx79$3 >> 2] = $mul80$3;
 $add86 = $mul80 + .800000011920929;
 $add91 = $mul80$1 + $mul80 * .800000011920929;
 $add96 = $mul80$2 + $mul80$1 * .800000011920929;
 $add101 = $mul80$3 + $mul80$2 * .800000011920929;
 $mul104 = $mul80$3 * .800000011920929;
 if (($len | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $28 = $29;
 $i$038$i = 0;
 $mem0$033$i = 0.0;
 $mem1$034$i = 0.0;
 $mem2$035$i = 0.0;
 $mem3$036$i = 0.0;
 $mem4$037$i = 0.0;
 while (1) {
  HEAPF32[$x_lp + ($i$038$i << 2) >> 2] = $mul104 * $mem4$037$i + ($add101 * $mem3$036$i + ($add96 * $mem2$035$i + ($add91 * $mem1$034$i + ($add86 * $mem0$033$i + $28))));
  $inc$i = $i$038$i + 1 | 0;
  if (($inc$i | 0) == ($shr | 0)) break;
  $mem0$033$i$phi = $28;
  $28 = +HEAPF32[$x_lp + ($inc$i << 2) >> 2];
  $i$038$i = $inc$i;
  $mem4$037$i = $mem3$036$i;
  $mem3$036$i = $mem2$035$i;
  $mem2$035$i = $mem1$034$i;
  $mem1$034$i = $mem0$033$i;
  $mem0$033$i = $mem0$033$i$phi;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $__l = 0, $add$ptr31 = 0, $call$i = 0, $call$i$i = 0, $call$i$i59 = 0, $call$i$i64 = 0, $call$i60 = 0, $call$i65 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr43 = 0, $retval$1$ph = 0, $retval$2 = 0, $save_state = 0, $storemerge = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $to$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP8[$fend$0 >> 0] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 1 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $20 = $frm$addr$0;
   label = 33;
   break;
  }
  $1 = $st;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $save_state;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $sub$ptr$lhs$cast = $fend$1;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbsnrtowcs($to$addr$0, $frm_nxt, $sub$ptr$lhs$cast - $frm$addr$0 | 0, $sub$ptr$lhs$cast7 - $to$addr$0 >> 2, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  if (($call$i | 0) == -1) {
   label = 10;
   break;
  }
  $add$ptr31 = (HEAP32[$to_nxt >> 2] | 0) + ($call$i << 2) | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr31;
  if (($add$ptr31 | 0) == ($to_end | 0)) {
   label = 30;
   break;
  }
  $$pre = HEAP32[$frm_nxt >> 2] | 0;
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $21 = $add$ptr31;
   $22 = $$pre;
   $fend$4$ph = $frm_end;
  } else {
   $call$i$i64 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i65 = _mbrtowc($add$ptr31, $$pre, 1, $st) | 0;
   if ($call$i$i64 | 0) ___uselocale($call$i$i64) | 0;
   if ($call$i65 | 0) {
    $retval$1$ph = 2;
    label = 29;
    break;
   }
   HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
   $incdec$ptr43 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr43;
   $fend$2 = $incdec$ptr43;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP8[$fend$2 >> 0] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 1 | 0;
   }
   $21 = HEAP32[$to_nxt >> 2] | 0;
   $22 = $incdec$ptr43;
   $fend$4$ph = $fend$2$lcssa;
  }
  $fend$1 = $fend$4$ph;
  $frm$addr$0 = $22;
  $to$addr$0 = $21;
 }
 do if ((label | 0) == 10) {
  $frm$addr$1 = $frm$addr$0;
  $storemerge = $to$addr$0;
  L29 : while (1) {
   HEAP32[$to_nxt >> 2] = $storemerge;
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    label = 19;
    break;
   }
   $call$i$i59 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i60 = _mbrtowc($storemerge, $frm$addr$1, $sub$ptr$lhs$cast - $frm$addr$1 | 0, $save_state) | 0;
   if ($call$i$i59 | 0) ___uselocale($call$i$i59) | 0;
   switch ($call$i60 | 0) {
   case -1:
    {
     label = 15;
     break L29;
     break;
    }
   case -2:
    {
     label = 16;
     break L29;
     break;
    }
   case 0:
    {
     $$sink = 1;
     break;
    }
   default:
    $$sink = $call$i60;
   }
   $frm$addr$1 = $frm$addr$1 + $$sink | 0;
   $storemerge = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 15) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 2;
   label = 29;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 1;
   label = 29;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = ($frm$addr$1 | 0) != ($frm_end | 0) & 1;
   label = 29;
   break;
  }
 } else if ((label | 0) == 30) {
  $20 = HEAP32[$frm_nxt >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 29) $retval$2 = $retval$1$ph; else if ((label | 0) == 33) $retval$2 = ($20 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _celt_fir_c($x, $num, $y, $N) {
 $x = $x | 0;
 $num = $num | 0;
 $y = $y | 0;
 $N = $N | 0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $39 = 0.0, $41 = 0.0, $add = 0, $add$ptr18 = 0, $add12 = 0, $add15 = 0, $add42$us = 0, $arrayidx8 = 0, $i$1$lcssa = 0, $i$151 = 0, $i$249$us = 0, $j$0140$i = 0, $j$046$us = 0, $sub5 = 0, $sum36$047$us = 0.0, $vla1 = 0, $x$addr$0142$i = 0, $y$addr$0141$i = 0, $y_0$0139$i = 0.0, $y_1$0137$i = 0.0, $y_2$0138$i = 0.0, sp = 0, $y_0$0139$i$looptemp = 0.0, $y_1$0137$i$looptemp = 0.0, $y_2$0138$i$looptemp = 0.0;
 sp = STACKTOP;
 if (($x | 0) == ($y | 0)) _celt_fatal(49534, 49559, 102);
 $vla1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP32[$vla1 >> 2] = HEAP32[$num + 92 >> 2];
 HEAP32[$vla1 + 4 >> 2] = HEAP32[$num + 88 >> 2];
 HEAP32[$vla1 + 8 >> 2] = HEAP32[$num + 84 >> 2];
 HEAP32[$vla1 + 12 >> 2] = HEAP32[$num + 80 >> 2];
 HEAP32[$vla1 + 16 >> 2] = HEAP32[$num + 76 >> 2];
 HEAP32[$vla1 + 20 >> 2] = HEAP32[$num + 72 >> 2];
 HEAP32[$vla1 + 24 >> 2] = HEAP32[$num + 68 >> 2];
 HEAP32[$vla1 + 28 >> 2] = HEAP32[$num + 64 >> 2];
 HEAP32[$vla1 + 32 >> 2] = HEAP32[$num + 60 >> 2];
 HEAP32[$vla1 + 36 >> 2] = HEAP32[$num + 56 >> 2];
 HEAP32[$vla1 + 40 >> 2] = HEAP32[$num + 52 >> 2];
 HEAP32[$vla1 + 44 >> 2] = HEAP32[$num + 48 >> 2];
 HEAP32[$vla1 + 48 >> 2] = HEAP32[$num + 44 >> 2];
 HEAP32[$vla1 + 52 >> 2] = HEAP32[$num + 40 >> 2];
 HEAP32[$vla1 + 56 >> 2] = HEAP32[$num + 36 >> 2];
 HEAP32[$vla1 + 60 >> 2] = HEAP32[$num + 32 >> 2];
 HEAP32[$vla1 + 64 >> 2] = HEAP32[$num + 28 >> 2];
 HEAP32[$vla1 + 68 >> 2] = HEAP32[$num + 24 >> 2];
 HEAP32[$vla1 + 72 >> 2] = HEAP32[$num + 20 >> 2];
 HEAP32[$vla1 + 76 >> 2] = HEAP32[$num + 16 >> 2];
 HEAP32[$vla1 + 80 >> 2] = HEAP32[$num + 12 >> 2];
 HEAP32[$vla1 + 84 >> 2] = HEAP32[$num + 8 >> 2];
 HEAP32[$vla1 + 88 >> 2] = HEAP32[$num + 4 >> 2];
 HEAP32[$vla1 + 92 >> 2] = HEAP32[$num >> 2];
 $sub5 = $N + -3 | 0;
 if (($N | 0) > 3) {
  $i$151 = 0;
  do {
   $arrayidx8 = $x + ($i$151 << 2) | 0;
   $add = $i$151 | 1;
   $add12 = $i$151 | 2;
   $add15 = $i$151 | 3;
   $add$ptr18 = $arrayidx8 + -96 | 0;
   $33 = +HEAPF32[$arrayidx8 >> 2];
   $34 = +HEAPF32[$x + ($add << 2) >> 2];
   $35 = +HEAPF32[$x + ($add12 << 2) >> 2];
   $36 = +HEAPF32[$x + ($add15 << 2) >> 2];
   $j$0140$i = 0;
   $x$addr$0142$i = $vla1;
   $y$addr$0141$i = $add$ptr18 + 12 | 0;
   $y_0$0139$i = +HEAPF32[$add$ptr18 >> 2];
   $y_1$0137$i = +HEAPF32[$add$ptr18 + 4 >> 2];
   $y_2$0138$i = +HEAPF32[$add$ptr18 + 8 >> 2];
   while (1) {
    $31 = +HEAPF32[$x$addr$0142$i >> 2];
    $32 = +HEAPF32[$y$addr$0141$i >> 2];
    $37 = +HEAPF32[$x$addr$0142$i + 4 >> 2];
    $y_0$0139$i$looptemp = $y_0$0139$i;
    $y_0$0139$i = +HEAPF32[$y$addr$0141$i + 4 >> 2];
    $39 = +HEAPF32[$x$addr$0142$i + 8 >> 2];
    $y_1$0137$i$looptemp = $y_1$0137$i;
    $y_1$0137$i = +HEAPF32[$y$addr$0141$i + 8 >> 2];
    $41 = +HEAPF32[$x$addr$0142$i + 12 >> 2];
    $y_2$0138$i$looptemp = $y_2$0138$i;
    $y_2$0138$i = +HEAPF32[$y$addr$0141$i + 12 >> 2];
    $33 = $y_0$0139$i$looptemp * $31 + $33 + $y_1$0137$i$looptemp * $37 + $y_2$0138$i$looptemp * $39 + $32 * $41;
    $34 = $y_1$0137$i$looptemp * $31 + $34 + $y_2$0138$i$looptemp * $37 + $32 * $39 + $y_0$0139$i * $41;
    $35 = $y_2$0138$i$looptemp * $31 + $35 + $32 * $37 + $y_0$0139$i * $39 + $y_1$0137$i * $41;
    $36 = $31 * $32 + $36 + $37 * $y_0$0139$i + $39 * $y_1$0137$i + $41 * $y_2$0138$i;
    $j$0140$i = $j$0140$i + 4 | 0;
    if ($j$0140$i >>> 0 >= 21) break; else {
     $x$addr$0142$i = $x$addr$0142$i + 16 | 0;
     $y$addr$0141$i = $y$addr$0141$i + 16 | 0;
    }
   }
   HEAPF32[$y + ($i$151 << 2) >> 2] = $33;
   HEAPF32[$y + ($add << 2) >> 2] = $34;
   HEAPF32[$y + ($add12 << 2) >> 2] = $35;
   HEAPF32[$y + ($add15 << 2) >> 2] = $36;
   $i$151 = $i$151 + 4 | 0;
  } while (($i$151 | 0) < ($sub5 | 0));
  $i$1$lcssa = $N & -4;
 } else $i$1$lcssa = 0;
 if (($i$1$lcssa | 0) >= ($N | 0)) {
  STACKTOP = sp;
  return;
 }
 $i$249$us = $i$1$lcssa;
 do {
  $add42$us = $i$249$us + -24 | 0;
  $j$046$us = 0;
  $sum36$047$us = +HEAPF32[$x + ($i$249$us << 2) >> 2];
  do {
   $sum36$047$us = $sum36$047$us + +HEAPF32[$vla1 + ($j$046$us << 2) >> 2] * +HEAPF32[$x + ($add42$us + $j$046$us << 2) >> 2];
   $j$046$us = $j$046$us + 1 | 0;
  } while (($j$046$us | 0) != 24);
  HEAPF32[$y + ($i$249$us << 2) >> 2] = $sum36$047$us;
  $i$249$us = $i$249$us + 1 | 0;
 } while (($i$249$us | 0) != ($N | 0));
 STACKTOP = sp;
 return;
}

function _encode_multiframe_packet($st, $pcm, $nb_frames, $frame_size, $data, $out_data_bytes, $to_celt, $lsb_depth) {
 $st = $st | 0;
 $pcm = $pcm | 0;
 $nb_frames = $nb_frames | 0;
 $frame_size = $frame_size | 0;
 $data = $data | 0;
 $out_data_bytes = $out_data_bytes | 0;
 $to_celt = $to_celt | 0;
 $lsb_depth = $lsb_depth | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $add$ptr47 = 0, $add$ptr47$us = 0, $call48 = 0, $call48$us = 0, $call64 = 0, $channels = 0, $div12 = 0, $div5 = 0, $force_channels = 0, $i$069 = 0, $i$069$us = 0, $nonfinal_frame = 0, $repacketize_len$0 = 0, $retval$0 = 0, $rp = 0, $spec$select = 0, $spec$select67 = 0, $sub35 = 0, $toMono = 0, $use_vbr = 0, $user_bandwidth = 0, $user_forced_mode = 0, $vla = 0, $vla$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $rp = sp;
 $spec$select = ($nb_frames | 0) == 2 ? 3 : $nb_frames << 1;
 $use_vbr = $st + 148 | 0;
 if (!(HEAP32[$use_vbr >> 2] | 0)) if ((HEAP32[$st + 164 >> 2] | 0) == -1) $repacketize_len$0 = $out_data_bytes; else {
  $div5 = ((HEAP32[$st + 160 >> 2] | 0) * 3 | 0) / (((HEAP32[$st + 144 >> 2] | 0) * 24 | 0) / (Math_imul($frame_size, $nb_frames) | 0) | 0 | 0) | 0;
  $repacketize_len$0 = ($div5 | 0) < ($out_data_bytes | 0) ? $div5 : $out_data_bytes;
 } else $repacketize_len$0 = $out_data_bytes;
 $div12 = ($repacketize_len$0 - $spec$select | 0) / ($nb_frames | 0) | 0;
 $spec$select67 = ($div12 | 0) > 1275 ? 1276 : $div12 + 1 | 0;
 $vla$alloca_mul = Math_imul($spec$select67, $nb_frames) | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 HEAP32[$rp + 4 >> 2] = 0;
 $user_forced_mode = $st + 136 | 0;
 $4 = HEAP32[$user_forced_mode >> 2] | 0;
 $user_bandwidth = $st + 128 | 0;
 $5 = HEAP32[$user_bandwidth >> 2] | 0;
 $force_channels = $st + 120 | 0;
 $6 = HEAP32[$force_channels >> 2] | 0;
 HEAP32[$user_forced_mode >> 2] = HEAP32[$st + 14224 >> 2];
 HEAP32[$user_bandwidth >> 2] = HEAP32[$st + 14240 >> 2];
 $9 = HEAP32[$st + 14192 >> 2] | 0;
 HEAP32[$force_channels >> 2] = $9;
 $toMono = $st + 68 | 0;
 $10 = HEAP32[$toMono >> 2] | 0;
 if (!$10) HEAP32[$st + 14232 >> 2] = $9; else HEAP32[$force_channels >> 2] = 1;
 L9 : do if (($nb_frames | 0) > 0) {
  $sub35 = $nb_frames + -1 | 0;
  $nonfinal_frame = $st + 18132 | 0;
  $channels = $st + 112 | 0;
  if (!$to_celt) {
   $i$069 = 0;
   while (1) {
    HEAP32[$toMono >> 2] = 0;
    HEAP32[$nonfinal_frame >> 2] = ($i$069 | 0) < ($sub35 | 0) & 1;
    $add$ptr47 = $vla + (Math_imul($i$069, $spec$select67) | 0) | 0;
    $call48 = _opus_encode_native($st, $pcm + ((Math_imul(Math_imul($i$069, $frame_size) | 0, HEAP32[$channels >> 2] | 0) | 0) << 2) | 0, $frame_size, $add$ptr47, $spec$select67, $lsb_depth, 0, 0, 0, 0, 0) | 0;
    if (($call48 | 0) < 0) {
     $retval$0 = -3;
     label = 21;
     break;
    }
    $i$069 = $i$069 + 1 | 0;
    if ((_opus_repacketizer_cat($rp, $add$ptr47, $call48) | 0) < 0) {
     $retval$0 = -3;
     label = 21;
     break;
    }
    if (($i$069 | 0) >= ($nb_frames | 0)) break L9;
   }
   if ((label | 0) == 21) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
  $i$069$us = 0;
  while (1) {
   HEAP32[$toMono >> 2] = 0;
   HEAP32[$nonfinal_frame >> 2] = ($i$069$us | 0) < ($sub35 | 0) & 1;
   if (($i$069$us | 0) == ($sub35 | 0)) HEAP32[$user_forced_mode >> 2] = 1002;
   $add$ptr47$us = $vla + (Math_imul($i$069$us, $spec$select67) | 0) | 0;
   $call48$us = _opus_encode_native($st, $pcm + ((Math_imul(Math_imul($i$069$us, $frame_size) | 0, HEAP32[$channels >> 2] | 0) | 0) << 2) | 0, $frame_size, $add$ptr47$us, $spec$select67, $lsb_depth, 0, 0, 0, 0, 0) | 0;
   if (($call48$us | 0) < 0) {
    $retval$0 = -3;
    label = 21;
    break;
   }
   $i$069$us = $i$069$us + 1 | 0;
   if ((_opus_repacketizer_cat($rp, $add$ptr47$us, $call48$us) | 0) < 0) {
    $retval$0 = -3;
    label = 21;
    break;
   }
   if (($i$069$us | 0) >= ($nb_frames | 0)) break L9;
  }
  if ((label | 0) == 21) {
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } while (0);
 $call64 = _opus_repacketizer_out_range_impl($rp, $nb_frames, $data, $repacketize_len$0, (HEAP32[$use_vbr >> 2] | 0) == 0 & 1) | 0;
 if (($call64 | 0) < 0) {
  $retval$0 = -3;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$user_forced_mode >> 2] = $4;
 HEAP32[$user_bandwidth >> 2] = $5;
 HEAP32[$force_channels >> 2] = $6;
 HEAP32[$toMono >> 2] = $10;
 $retval$0 = $call64;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _clt_mdct_backward_c($l, $in, $out, $window, $overlap, $shift, $stride) {
 $l = $l | 0;
 $in = $in | 0;
 $out = $out | 0;
 $window = $window | 0;
 $overlap = $overlap | 0;
 $shift = $shift | 0;
 $stride = $stride | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $N$0$lcssa = 0, $add$ptr = 0, $add$ptr43$pn = 0, $add$ptr6 = 0, $add$ptr90$pn = 0, $add$ptr93$pn = 0, $arrayidx55 = 0, $arrayidx66 = 0, $bitrev$0133 = 0, $div = 0, $i$0140 = 0, $i$1136 = 0, $i$2$neg130 = 0, $i$2129 = 0, $i$3122 = 0, $idx$neg = 0, $inc87 = 0, $mul23 = 0, $mul28 = 0, $shr = 0, $shr$lcssa = 0, $shr138 = 0, $shr141 = 0, $shr3 = 0, $shr49 = 0, $sub = 0, $sub70 = 0, $trig$0$lcssa = 0, $trig$0139 = 0, $wp1$0121 = 0, $xp1$0135 = 0, $xp2$0134 = 0, $yp0$0128 = 0, $yp192$0120 = 0;
 $0 = HEAP32[$l >> 2] | 0;
 $1 = HEAP32[$l + 24 >> 2] | 0;
 $shr138 = $0 >> 1;
 if (($shift | 0) > 0) {
  $i$0140 = 0;
  $shr141 = $shr138;
  $trig$0139 = $1;
  while (1) {
   $add$ptr = $trig$0139 + ($shr141 << 2) | 0;
   $i$0140 = $i$0140 + 1 | 0;
   $shr = $shr141 >> 1;
   if (($i$0140 | 0) == ($shift | 0)) {
    $N$0$lcssa = $shr141;
    $shr$lcssa = $shr;
    $trig$0$lcssa = $add$ptr;
    break;
   } else {
    $shr141 = $shr;
    $trig$0139 = $add$ptr;
   }
  }
 } else {
  $N$0$lcssa = $0;
  $shr$lcssa = $shr138;
  $trig$0$lcssa = $1;
 }
 $shr3 = $N$0$lcssa >> 2;
 $add$ptr6 = $out + ($overlap >> 1 << 2) | 0;
 $2 = HEAP32[$l + 8 + ($shift << 2) >> 2] | 0;
 if (($N$0$lcssa | 0) > 3) {
  $sub = $shr$lcssa + -1 | 0;
  $mul28 = $stride << 1;
  $idx$neg = 0 - $mul28 | 0;
  $bitrev$0133 = HEAP32[$2 + 44 >> 2] | 0;
  $i$1136 = 0;
  $xp1$0135 = $in;
  $xp2$0134 = $in + ((Math_imul($sub, $stride) | 0) << 2) | 0;
  while (1) {
   $5 = +HEAPF32[$xp2$0134 >> 2];
   $6 = +HEAPF32[$trig$0$lcssa + ($i$1136 << 2) >> 2];
   $7 = +HEAPF32[$xp1$0135 >> 2];
   $8 = +HEAPF32[$trig$0$lcssa + ($i$1136 + $shr3 << 2) >> 2];
   $mul23 = HEAP16[$bitrev$0133 >> 1] << 1;
   HEAPF32[$add$ptr6 + (($mul23 | 1) << 2) >> 2] = $5 * $6 + $7 * $8;
   HEAPF32[$add$ptr6 + ($mul23 << 2) >> 2] = $6 * $7 - $5 * $8;
   $i$1136 = $i$1136 + 1 | 0;
   if (($i$1136 | 0) >= ($shr3 | 0)) break; else {
    $bitrev$0133 = $bitrev$0133 + 2 | 0;
    $xp1$0135 = $xp1$0135 + ($mul28 << 2) | 0;
    $xp2$0134 = $xp2$0134 + ($idx$neg << 2) | 0;
   }
  }
  _opus_fft_impl($2, $add$ptr6);
  $shr49 = $shr3 + 1 >> 1;
  $sub70 = $shr3 + -1 | 0;
  $add$ptr43$pn = $add$ptr6 + ($shr$lcssa << 2) | 0;
  $i$2$neg130 = 0;
  $i$2129 = 0;
  $yp0$0128 = $add$ptr6;
  while (1) {
   $arrayidx55 = $yp0$0128 + 4 | 0;
   $9 = +HEAPF32[$arrayidx55 >> 2];
   $10 = +HEAPF32[$yp0$0128 >> 2];
   $11 = +HEAPF32[$trig$0$lcssa + ($i$2129 << 2) >> 2];
   $12 = +HEAPF32[$trig$0$lcssa + ($i$2129 + $shr3 << 2) >> 2];
   $arrayidx66 = $add$ptr43$pn + -4 | 0;
   $add$ptr43$pn = $add$ptr43$pn + -8 | 0;
   $13 = +HEAPF32[$arrayidx66 >> 2];
   $14 = +HEAPF32[$add$ptr43$pn >> 2];
   HEAPF32[$yp0$0128 >> 2] = $9 * $11 + $10 * $12;
   HEAPF32[$arrayidx66 >> 2] = $9 * $12 - $10 * $11;
   $15 = +HEAPF32[$trig$0$lcssa + ($sub70 + $i$2$neg130 << 2) >> 2];
   $16 = +HEAPF32[$trig$0$lcssa + ($sub + $i$2$neg130 << 2) >> 2];
   HEAPF32[$add$ptr43$pn >> 2] = $13 * $15 + $14 * $16;
   HEAPF32[$arrayidx55 >> 2] = $13 * $16 - $14 * $15;
   $inc87 = $i$2129 + 1 | 0;
   if (($inc87 | 0) >= ($shr49 | 0)) break; else {
    $i$2$neg130 = ~$i$2129;
    $i$2129 = $inc87;
    $yp0$0128 = $yp0$0128 + 8 | 0;
   }
  }
 } else _opus_fft_impl($2, $add$ptr6);
 $div = ($overlap | 0) / 2 | 0;
 if (($overlap | 0) <= 1) return;
 $add$ptr90$pn = $out + ($overlap << 2) | 0;
 $add$ptr93$pn = $window + ($overlap << 2) | 0;
 $i$3122 = 0;
 $wp1$0121 = $window;
 $yp192$0120 = $out;
 while (1) {
  $add$ptr93$pn = $add$ptr93$pn + -4 | 0;
  $add$ptr90$pn = $add$ptr90$pn + -4 | 0;
  $17 = +HEAPF32[$add$ptr90$pn >> 2];
  $18 = +HEAPF32[$yp192$0120 >> 2];
  $19 = +HEAPF32[$add$ptr93$pn >> 2];
  $20 = +HEAPF32[$wp1$0121 >> 2];
  HEAPF32[$yp192$0120 >> 2] = $18 * $19 - $17 * $20;
  HEAPF32[$add$ptr90$pn >> 2] = $17 * $19 + $18 * $20;
  $i$3122 = $i$3122 + 1 | 0;
  if (($i$3122 | 0) == ($div | 0)) break; else {
   $wp1$0121 = $wp1$0121 + 4 | 0;
   $yp192$0120 = $yp192$0120 + 4 | 0;
  }
 }
 return;
}

function _resampler_basic_direct_single($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add20 = 0, $add20$us = 0, $arrayidx = 0, $arrayidx10$us = 0, $arrayidx11$us = 0, $arrayidx3 = 0, $cmp21 = 0, $cmp21$us = 0, $inc16 = 0, $inc16$us = 0, $j$045$us = 0, $last_sample$0$lcssa = 0, $last_sample$048 = 0, $last_sample$048$us = 0, $last_sample$1 = 0, $last_sample$1$us = 0, $out_sample$0$lcssa = 0, $out_sample$049 = 0, $out_sample$049$us = 0, $samp_frac_num$0$lcssa = 0, $samp_frac_num$047 = 0, $samp_frac_num$047$us = 0, $samp_frac_num$1 = 0, $samp_frac_num$1$us = 0, $sum$044$us = 0.0, label = 0;
 $0 = HEAP32[$st + 24 >> 2] | 0;
 $arrayidx = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
 $2 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx3 = (HEAP32[$st + 64 >> 2] | 0) + ($channel_index << 2) | 0;
 $4 = HEAP32[$arrayidx3 >> 2] | 0;
 $5 = HEAP32[$st + 76 >> 2] | 0;
 $6 = HEAP32[$st + 92 >> 2] | 0;
 $7 = HEAP32[$st + 36 >> 2] | 0;
 $8 = HEAP32[$st + 40 >> 2] | 0;
 $9 = HEAP32[$st + 12 >> 2] | 0;
 $10 = HEAP32[$in_len >> 2] | 0;
 if (($2 | 0) >= ($10 | 0)) {
  $last_sample$0$lcssa = $2;
  $out_sample$0$lcssa = 0;
  $samp_frac_num$0$lcssa = $4;
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 $11 = HEAP32[$out_len >> 2] | 0;
 if (($0 | 0) <= 0) {
  $last_sample$048 = $2;
  $out_sample$049 = 0;
  $samp_frac_num$047 = $4;
  while (1) {
   if (($out_sample$049 | 0) >= ($11 | 0)) {
    $last_sample$0$lcssa = $last_sample$048;
    $out_sample$0$lcssa = $out_sample$049;
    $samp_frac_num$0$lcssa = $samp_frac_num$047;
    label = 11;
    break;
   }
   $inc16 = $out_sample$049 + 1 | 0;
   HEAPF32[$out + ((Math_imul($out_sample$049, $6) | 0) << 2) >> 2] = 0.0;
   $add20 = $samp_frac_num$047 + $8 | 0;
   $cmp21 = $add20 >>> 0 < $9 >>> 0;
   $samp_frac_num$1 = $add20 - ($cmp21 ? 0 : $9) | 0;
   $last_sample$1 = $last_sample$048 + $7 + (($cmp21 ^ 1) & 1) | 0;
   if (($last_sample$1 | 0) < ($10 | 0)) {
    $last_sample$048 = $last_sample$1;
    $out_sample$049 = $inc16;
    $samp_frac_num$047 = $samp_frac_num$1;
   } else {
    $last_sample$0$lcssa = $last_sample$1;
    $out_sample$0$lcssa = $inc16;
    $samp_frac_num$0$lcssa = $samp_frac_num$1;
    label = 11;
    break;
   }
  }
  if ((label | 0) == 11) {
   HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
   HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
   return $out_sample$0$lcssa | 0;
  }
 }
 $last_sample$048$us = $2;
 $out_sample$049$us = 0;
 $samp_frac_num$047$us = $4;
 while (1) {
  if (($out_sample$049$us | 0) >= ($11 | 0)) {
   $last_sample$0$lcssa = $last_sample$048$us;
   $out_sample$0$lcssa = $out_sample$049$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$047$us;
   label = 11;
   break;
  }
  $arrayidx10$us = $5 + ((Math_imul($samp_frac_num$047$us, $0) | 0) << 2) | 0;
  $arrayidx11$us = $in + ($last_sample$048$us << 2) | 0;
  $j$045$us = 0;
  $sum$044$us = 0.0;
  do {
   $sum$044$us = $sum$044$us + +HEAPF32[$arrayidx10$us + ($j$045$us << 2) >> 2] * +HEAPF32[$arrayidx11$us + ($j$045$us << 2) >> 2];
   $j$045$us = $j$045$us + 1 | 0;
  } while (($j$045$us | 0) != ($0 | 0));
  $inc16$us = $out_sample$049$us + 1 | 0;
  HEAPF32[$out + ((Math_imul($out_sample$049$us, $6) | 0) << 2) >> 2] = $sum$044$us;
  $add20$us = $samp_frac_num$047$us + $8 | 0;
  $cmp21$us = $add20$us >>> 0 < $9 >>> 0;
  $samp_frac_num$1$us = $add20$us - ($cmp21$us ? 0 : $9) | 0;
  $last_sample$1$us = $last_sample$048$us + $7 + (($cmp21$us ^ 1) & 1) | 0;
  if (($last_sample$1$us | 0) < ($10 | 0)) {
   $last_sample$048$us = $last_sample$1$us;
   $out_sample$049$us = $inc16$us;
   $samp_frac_num$047$us = $samp_frac_num$1$us;
  } else {
   $last_sample$0$lcssa = $last_sample$1$us;
   $out_sample$0$lcssa = $inc16$us;
   $samp_frac_num$0$lcssa = $samp_frac_num$1$us;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 return 0;
}

function _op_pvq_search_c($X, $iy, $K, $N) {
 $X = $X | 0;
 $iy = $iy | 0;
 $K = $K | 0;
 $N = $N | 0;
 var $12 = 0.0, $17 = 0.0, $2 = 0.0, $20 = 0, $8 = 0.0, $add103 = 0.0, $add47 = 0.0, $add51 = 0.0, $add70 = 0.0, $add76 = 0.0, $add78 = 0.0, $add84 = 0.0, $add86 = 0.0, $arrayidx = 0, $arrayidx102 = 0, $arrayidx106 = 0, $arrayidx110 = 0, $best_den$0 = 0.0, $best_id$0 = 0, $best_num$0 = 0.0, $cmp90 = 0, $conv39 = 0, $conv42 = 0.0, $conv65 = 0.0, $i$0106 = 0, $j$0 = 0, $j$1 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $mul = 0.0, $mul87 = 0.0, $pulsesLeft$0 = 0, $pulsesLeft$1 = 0, $sub = 0, $sum$0 = 0.0, $sum$1 = 0.0, $vla = 0, $vla1 = 0, $xy$0 = 0.0, $xy$1 = 0.0, $xy$2104 = 0.0, $yy$0 = 0.0, $yy$1 = 0.0, $yy$3$lcssa = 0.0, $yy$3105 = 0.0, sp = 0;
 sp = STACKTOP;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($N << 2) | 0) + 15 & -16) | 0;
 $vla1 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($N << 2) | 0) + 15 & -16) | 0;
 _memset($vla | 0, 0, (($N | 0) > 1 ? $N : 1) << 2 | 0) | 0;
 $j$0 = 0;
 do {
  $arrayidx = $X + ($j$0 << 2) | 0;
  $2 = +HEAPF32[$arrayidx >> 2];
  HEAP32[$vla1 + ($j$0 << 2) >> 2] = $2 < 0.0 & 1;
  HEAPF32[$arrayidx >> 2] = +Math_abs(+$2);
  HEAP32[$iy + ($j$0 << 2) >> 2] = 0;
  $j$0 = $j$0 + 1 | 0;
 } while (($j$0 | 0) < ($N | 0));
 if (($N >> 1 | 0) < ($K | 0)) {
  $j$1 = 0;
  $sum$0 = 0.0;
  do {
   $sum$0 = $sum$0 + +HEAPF32[$X + ($j$1 << 2) >> 2];
   $j$1 = $j$1 + 1 | 0;
  } while (($j$1 | 0) < ($N | 0));
  if ($sum$0 > 1.0000000036274937e-15 & $sum$0 < 64.0) $sum$1 = $sum$0; else {
   HEAPF32[$X >> 2] = 1.0;
   _memset($X + 4 | 0, 0, ((($N | 0) > 2 ? $N : 2) << 2) + -4 | 0) | 0;
   $sum$1 = 1.0;
  }
  $mul = (+($K | 0) + .800000011920929) * (1.0 / $sum$1);
  $j$3 = 0;
  $pulsesLeft$0 = $K;
  $xy$0 = 0.0;
  $yy$0 = 0.0;
  while (1) {
   $8 = +HEAPF32[$X + ($j$3 << 2) >> 2];
   $conv39 = ~~+Math_floor(+($mul * $8));
   HEAP32[$iy + ($j$3 << 2) >> 2] = $conv39;
   $conv42 = +($conv39 | 0);
   $add47 = $yy$0 + $conv42 * $conv42;
   $add51 = $xy$0 + $8 * $conv42;
   HEAPF32[$vla + ($j$3 << 2) >> 2] = $conv42 * 2.0;
   $sub = $pulsesLeft$0 - $conv39 | 0;
   $j$3 = $j$3 + 1 | 0;
   if (($j$3 | 0) >= ($N | 0)) {
    $pulsesLeft$1 = $sub;
    $xy$1 = $add51;
    $yy$1 = $add47;
    break;
   } else {
    $pulsesLeft$0 = $sub;
    $xy$0 = $add51;
    $yy$0 = $add47;
   }
  }
 } else {
  $pulsesLeft$1 = $K;
  $xy$1 = 0.0;
  $yy$1 = 0.0;
 }
 if (($pulsesLeft$1 | 0) > ($N + 3 | 0)) {
  $conv65 = +($pulsesLeft$1 | 0);
  $add70 = $yy$1 + $conv65 * $conv65 + +HEAPF32[$vla >> 2] * $conv65;
  HEAP32[$iy >> 2] = (HEAP32[$iy >> 2] | 0) + $pulsesLeft$1;
  $yy$3$lcssa = $add70;
 } else if (($pulsesLeft$1 | 0) > 0) {
  $12 = +HEAPF32[$X >> 2];
  $i$0106 = 0;
  $xy$2104 = $xy$1;
  $yy$3105 = $yy$1;
  while (1) {
   $add76 = $yy$3105 + 1.0;
   $add78 = $xy$2104 + $12;
   $best_den$0 = $add76 + +HEAPF32[$vla >> 2];
   $best_id$0 = 0;
   $best_num$0 = $add78 * $add78;
   $j$4 = 1;
   while (1) {
    $add84 = $xy$2104 + +HEAPF32[$X + ($j$4 << 2) >> 2];
    $add86 = $add76 + +HEAPF32[$vla + ($j$4 << 2) >> 2];
    $mul87 = $add84 * $add84;
    $cmp90 = $best_den$0 * $mul87 > $best_num$0 * $add86;
    $best_id$0 = $cmp90 ? $j$4 : $best_id$0;
    $j$4 = $j$4 + 1 | 0;
    if (($j$4 | 0) >= ($N | 0)) break; else {
     $best_den$0 = $cmp90 ? $add86 : $best_den$0;
     $best_num$0 = $cmp90 ? $mul87 : $best_num$0;
    }
   }
   $xy$2104 = $xy$2104 + +HEAPF32[$X + ($best_id$0 << 2) >> 2];
   $arrayidx102 = $vla + ($best_id$0 << 2) | 0;
   $17 = +HEAPF32[$arrayidx102 >> 2];
   $add103 = $add76 + $17;
   HEAPF32[$arrayidx102 >> 2] = $17 + 2.0;
   $arrayidx106 = $iy + ($best_id$0 << 2) | 0;
   HEAP32[$arrayidx106 >> 2] = (HEAP32[$arrayidx106 >> 2] | 0) + 1;
   $i$0106 = $i$0106 + 1 | 0;
   if (($i$0106 | 0) == ($pulsesLeft$1 | 0)) {
    $yy$3$lcssa = $add103;
    break;
   } else $yy$3105 = $add103;
  }
 } else $yy$3$lcssa = $yy$1;
 $j$5 = 0;
 do {
  $arrayidx110 = $iy + ($j$5 << 2) | 0;
  $20 = HEAP32[$vla1 + ($j$5 << 2) >> 2] | 0;
  HEAP32[$arrayidx110 >> 2] = (HEAP32[$arrayidx110 >> 2] ^ 0 - $20) + $20;
  $j$5 = $j$5 + 1 | 0;
 } while (($j$5 | 0) < ($N | 0));
 STACKTOP = sp;
 return +$yy$3$lcssa;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $5 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i$i = 0, $call$i$i56 = 0, $call$i$i61 = 0, $call$i57 = 0, $call$i62 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph69 = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr51 = 0, $n$0 = 0, $p$0 = 0, $retval$1 = 0, $retval$4 = 0, $sub$ptr$lhs$cast7 = 0, $tmp = 0, $to$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP32[$fend$0 >> 2] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 4 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 L6 : while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $14 = $frm$addr$0;
   label = 35;
   break;
  }
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _wcsnrtombs($to$addr$0, $frm_nxt, $fend$1 - $frm$addr$0 >> 2, $sub$ptr$lhs$cast7 - $to$addr$0 | 0) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -1:
   {
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $retval$4 = 1;
    break L6;
    break;
   }
  default:
   {}
  }
  $add$ptr27 = (HEAP32[$to_nxt >> 2] | 0) + $call$i | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr27;
  if (($add$ptr27 | 0) == ($to_end | 0)) {
   label = 33;
   break;
  }
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $15 = $add$ptr27;
   $16 = HEAP32[$frm_nxt >> 2] | 0;
   $fend$5$ph69 = $frm_end;
  } else {
   $call$i$i61 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i62 = _wcrtomb($tmp, 0) | 0;
   if ($call$i$i61 | 0) ___uselocale($call$i$i61) | 0;
   if (($call$i62 | 0) == -1) {
    $retval$1 = 2;
    label = 32;
    break;
   }
   if ($call$i62 >>> 0 > ($sub$ptr$lhs$cast7 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $retval$1 = 1;
    label = 32;
    break;
   }
   $n$0 = $call$i62;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) break;
    $11 = HEAP8[$p$0 >> 0] | 0;
    $12 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $12 + 1;
    HEAP8[$12 >> 0] = $11;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
   $incdec$ptr51 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr51;
   $fend$2 = $incdec$ptr51;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP32[$fend$2 >> 2] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 4 | 0;
   }
   $15 = HEAP32[$to_nxt >> 2] | 0;
   $16 = $incdec$ptr51;
   $fend$5$ph69 = $fend$2$lcssa;
  }
  $fend$1 = $fend$5$ph69;
  $frm$addr$0 = $16;
  $to$addr$0 = $15;
 }
 if ((label | 0) == 10) {
  HEAP32[$to_nxt >> 2] = $to$addr$0;
  $5 = $to$addr$0;
  $frm$addr$1 = $frm$addr$0;
  while (1) {
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) break;
   $3 = HEAP32[$frm$addr$1 >> 2] | 0;
   $call$i$i56 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i57 = _wcrtomb($5, $3) | 0;
   if ($call$i$i56 | 0) ___uselocale($call$i$i56) | 0;
   if (($call$i57 | 0) == -1) break;
   $add$ptr = (HEAP32[$to_nxt >> 2] | 0) + $call$i57 | 0;
   HEAP32[$to_nxt >> 2] = $add$ptr;
   $5 = $add$ptr;
   $frm$addr$1 = $frm$addr$1 + 4 | 0;
  }
  HEAP32[$frm_nxt >> 2] = $frm$addr$1;
  $retval$4 = 2;
 } else if ((label | 0) == 32) $retval$4 = $retval$1; else if ((label | 0) == 33) {
  $14 = HEAP32[$frm_nxt >> 2] | 0;
  label = 35;
 }
 if ((label | 0) == 35) $retval$4 = ($14 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and58 = 0, $retval$2 = 0, $sub$ptr$sub31 = 0;
 L1 : do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (!(HEAP8[$__in_units >> 0] | 0)) $retval$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (!(($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0)) $retval$2 = 0; else {
   $4 = HEAP32[$__g_end >> 2] | 0;
   if (($4 - $__g | 0) < 160) {
    $5 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $4 + 4;
    HEAP32[$4 >> 2] = $5;
    $retval$2 = 0;
   } else $retval$2 = 0;
  }
 } else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $6 = HEAP8[$__grouping + 11 >> 0] | 0;
   if (($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $retval$2 = -1;
     break;
    }
    $9 = HEAP32[$__g_end >> 2] | 0;
    if (($9 - $__g | 0) >= 160) {
     $retval$2 = 0;
     break;
    }
    $10 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $10;
    HEAP32[$__dc >> 2] = 0;
    $retval$2 = 0;
    break;
   }
  }
  $add$ptr = $__atoms + 32 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub31 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub31 | 0) > 31) $retval$2 = -1; else {
   $12 = HEAP8[41392 + $sub$ptr$sub31 >> 0] | 0;
   switch ($sub$ptr$sub31 | 0) {
   case 24:
   case 25:
    {
     $13 = HEAP32[$__a_end >> 2] | 0;
     if (($13 | 0) != ($__a | 0)) if ((HEAP8[$13 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127)) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $13 + 1;
     HEAP8[$13 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     $18 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $18 + 1;
     HEAP8[$18 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $and58 = $12 & 95;
     if (($and58 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $and58 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $22 = HEAP8[$__grouping + 11 >> 0] | 0;
       if (($22 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $22 & 255) | 0) {
        $24 = HEAP32[$__g_end >> 2] | 0;
        if (($24 - $__g | 0) < 160) {
         $25 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $24 + 4;
         HEAP32[$24 >> 2] = $25;
        }
       }
      }
     }
     $26 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $12;
     if (($sub$ptr$sub31 | 0) > 21) {
      $retval$2 = 0;
      break L1;
     }
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
     $retval$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function _deemphasis($in, $pcm, $N, $C, $downsample, $coef, $mem) {
 $in = $in | 0;
 $pcm = $pcm | 0;
 $N = $N | 0;
 $C = $C | 0;
 $downsample = $downsample | 0;
 $coef = $coef | 0;
 $mem = $mem | 0;
 var $0 = 0.0, $1 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $add$ptr = 0, $add$ptr$us = 0, $add13$us = 0.0, $add21 = 0.0, $add5$i = 0.0, $add8$i = 0.0, $arrayidx3$i = 0, $arrayidx7 = 0, $arrayidx7$us = 0, $c$0 = 0, $c$0$us = 0, $cmp1157 = 0, $cmp3461 = 0, $div = 0, $in$idx$val = 0, $in$val = 0, $j$02$i = 0, $j$058$us = 0, $j$155 = 0, $j$262$us = 0, $m$0$lcssa$us = 0.0, $m$059$us = 0.0, $m$1$lcssa = 0.0, $m$156 = 0.0, $m0$0$lcssa$i = 0.0, $m0$04$i = 0.0, $m1$0$lcssa$i = 0.0, $m1$03$i = 0.0, $mul$i = 0.0, $mul$us = 0.0, $mul11$i = 0, $mul22 = 0.0, $mul9$i = 0.0, $vla = 0, sp = 0;
 sp = STACKTOP;
 if (!(($C | 0) != 2 | ($downsample | 0) != 1)) {
  $0 = +HEAPF32[$coef >> 2];
  $in$val = HEAP32[$in >> 2] | 0;
  $in$idx$val = HEAP32[$in + 4 >> 2] | 0;
  $1 = +HEAPF32[$mem >> 2];
  $arrayidx3$i = $mem + 4 | 0;
  $2 = +HEAPF32[$arrayidx3$i >> 2];
  if (($N | 0) > 0) {
   $j$02$i = 0;
   $m0$04$i = $1;
   $m1$03$i = $2;
   while (1) {
    $add5$i = $m0$04$i + (+HEAPF32[$in$val + ($j$02$i << 2) >> 2] + 1.0000000031710769e-30);
    $add8$i = $m1$03$i + (+HEAPF32[$in$idx$val + ($j$02$i << 2) >> 2] + 1.0000000031710769e-30);
    $mul$i = $0 * $add5$i;
    $mul9$i = $0 * $add8$i;
    $mul11$i = $j$02$i << 1;
    HEAPF32[$pcm + ($mul11$i << 2) >> 2] = $add5$i * .000030517578125;
    HEAPF32[$pcm + (($mul11$i | 1) << 2) >> 2] = $add8$i * .000030517578125;
    $j$02$i = $j$02$i + 1 | 0;
    if (($j$02$i | 0) == ($N | 0)) {
     $m0$0$lcssa$i = $mul$i;
     $m1$0$lcssa$i = $mul9$i;
     break;
    } else {
     $m0$04$i = $mul$i;
     $m1$03$i = $mul9$i;
    }
   }
  } else {
   $m0$0$lcssa$i = $1;
   $m1$0$lcssa$i = $2;
  }
  HEAPF32[$mem >> 2] = $m0$0$lcssa$i;
  HEAPF32[$arrayidx3$i >> 2] = $m1$0$lcssa$i;
  STACKTOP = sp;
  return;
 }
 $5 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($N << 2) | 0) + 15 & -16) | 0;
 $6 = +HEAPF32[$coef >> 2];
 $div = ($N | 0) / ($downsample | 0) | 0;
 $cmp1157 = ($N | 0) > 0;
 $cmp3461 = ($div | 0) > 0;
 if (($downsample | 0) > 1) {
  $c$0$us = 0;
  do {
   $arrayidx7$us = $mem + ($c$0$us << 2) | 0;
   $7 = +HEAPF32[$arrayidx7$us >> 2];
   $8 = HEAP32[$in + ($c$0$us << 2) >> 2] | 0;
   $add$ptr$us = $pcm + ($c$0$us << 2) | 0;
   if ($cmp1157) {
    $j$058$us = 0;
    $m$059$us = $7;
    while (1) {
     $add13$us = $m$059$us + (+HEAPF32[$8 + ($j$058$us << 2) >> 2] + 1.0000000031710769e-30);
     $mul$us = $6 * $add13$us;
     HEAPF32[$vla + ($j$058$us << 2) >> 2] = $add13$us;
     $j$058$us = $j$058$us + 1 | 0;
     if (($j$058$us | 0) == ($N | 0)) {
      $m$0$lcssa$us = $mul$us;
      break;
     } else $m$059$us = $mul$us;
    }
   } else $m$0$lcssa$us = $7;
   HEAPF32[$arrayidx7$us >> 2] = $m$0$lcssa$us;
   if ($cmp3461) {
    $j$262$us = 0;
    do {
     HEAPF32[$add$ptr$us + ((Math_imul($j$262$us, $C) | 0) << 2) >> 2] = +HEAPF32[$vla + ((Math_imul($j$262$us, $downsample) | 0) << 2) >> 2] * .000030517578125;
     $j$262$us = $j$262$us + 1 | 0;
    } while (($j$262$us | 0) != ($div | 0));
   }
   $c$0$us = $c$0$us + 1 | 0;
  } while (($c$0$us | 0) < ($C | 0));
 } else {
  $c$0 = 0;
  do {
   $arrayidx7 = $mem + ($c$0 << 2) | 0;
   $11 = +HEAPF32[$arrayidx7 >> 2];
   $12 = HEAP32[$in + ($c$0 << 2) >> 2] | 0;
   $add$ptr = $pcm + ($c$0 << 2) | 0;
   if ($cmp1157) {
    $j$155 = 0;
    $m$156 = $11;
    while (1) {
     $add21 = $m$156 + (+HEAPF32[$12 + ($j$155 << 2) >> 2] + 1.0000000031710769e-30);
     $mul22 = $6 * $add21;
     HEAPF32[$add$ptr + ((Math_imul($j$155, $C) | 0) << 2) >> 2] = $add21 * .000030517578125;
     $j$155 = $j$155 + 1 | 0;
     if (($j$155 | 0) == ($N | 0)) {
      $m$1$lcssa = $mul22;
      break;
     } else $m$156 = $mul22;
    }
   } else $m$1$lcssa = $11;
   HEAPF32[$arrayidx7 >> 2] = $m$1$lcssa;
   $c$0 = $c$0 + 1 | 0;
  } while (($c$0 | 0) < ($C | 0));
 }
 _llvm_stackrestore($5 | 0);
 STACKTOP = sp;
 return;
}

function _silk_gains_quant($ind, $gain_Q16, $prev_ind, $conditional, $nb_subfr) {
 $ind = $ind | 0;
 $gain_Q16 = $gain_Q16 | 0;
 $prev_ind = $prev_ind | 0;
 $conditional = $conditional | 0;
 $nb_subfr = $nb_subfr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $15 = 0, $17 = 0, $21 = 0, $3 = 0, $5 = 0, $add143 = 0, $add168 = 0, $add38 = 0, $add99 = 0, $and$i = 0, $and$i$i = 0, $arrayidx = 0, $arrayidx9 = 0, $cond$i89 = 0, $cond13194 = 0, $cond29 = 0, $cond88 = 0, $conv101 = 0, $conv111 = 0, $conv145 = 0, $conv161 = 0, $conv8 = 0, $conv89 = 0, $conv96 = 0, $conv98 = 0, $inc = 0, $k$096 = 0, $retval$0$i = 0, $retval$0$i$i$i = 0, $shl$i2 = 0, $shr18$i = 0, $shr22$pn$i = 0, $spec$select8793 = 0, $storemerge$in = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub95 = 0;
 if (($nb_subfr | 0) <= 0) return;
 $k$096 = 0;
 do {
  $arrayidx = $gain_Q16 + ($k$096 << 2) | 0;
  $0 = HEAP32[$arrayidx >> 2] | 0;
  $1 = Math_clz32($0 | 0) | 0;
  $sub$i$i = 24 - $1 | 0;
  $sub$i$i$i = 0 - $sub$i$i | 0;
  do if (!$sub$i$i) $retval$0$i$i$i = $0; else if (($sub$i$i | 0) < 0) {
   $retval$0$i$i$i = $0 >>> ($sub$i$i + 32 | 0) | $0 << $sub$i$i$i;
   break;
  } else {
   $retval$0$i$i$i = $0 << 32 - $sub$i$i | $0 >>> $sub$i$i;
   break;
  } while (0);
  $and$i$i = $retval$0$i$i$i & 127;
  $3 = ((((3968 - ($1 << 7) | $and$i$i) << 16) + (Math_imul($and$i$i * 179 | 0, 128 - $and$i$i | 0) | 0) + -136970240 >> 16) * 2251 | 0) >>> 16;
  $conv8 = $3 & 255;
  $arrayidx9 = $ind + $k$096 | 0;
  HEAP8[$arrayidx9 >> 0] = $conv8;
  if (($3 << 24 >> 24 | 0) < (HEAP8[$prev_ind >> 0] | 0)) {
   $inc = $conv8 + 1 << 24 >> 24;
   HEAP8[$arrayidx9 >> 0] = $inc;
   $5 = $inc;
  } else $5 = $conv8;
  $cond29 = $5 << 24 >> 24 > 63 ? 63 : ($5 << 24 >> 24 > 0 ? $5 : 0) & 255;
  HEAP8[$arrayidx9 >> 0] = $cond29;
  $10 = HEAP8[$prev_ind >> 0] | 0;
  if (!($k$096 | $conditional)) {
   $add38 = ($10 << 24 >> 24) + -4 | 0;
   if ($10 << 24 >> 24 > 67) $cond88 = ($cond29 | 0) > ($add38 | 0) ? $add38 : $cond29 >>> 0 > 63 ? $cond29 : 63; else $cond88 = $cond29 >>> 0 > 63 ? 63 : ($cond29 | 0) < ($add38 | 0) ? $add38 : $cond29;
   $conv89 = $cond88 & 255;
   HEAP8[$arrayidx9 >> 0] = $conv89;
   HEAP8[$prev_ind >> 0] = $conv89;
   $21 = $conv89;
  } else {
   $sub95 = $cond29 - ($10 & 255) | 0;
   $conv96 = $sub95 & 255;
   HEAP8[$arrayidx9 >> 0] = $conv96;
   $conv98 = HEAP8[$prev_ind >> 0] | 0;
   $add99 = $conv98 + 8 | 0;
   $conv101 = $sub95 << 24 >> 24;
   if (($conv101 | 0) > ($add99 | 0)) {
    $conv111 = (($conv101 + 1 + (504 - $conv98) | 0) >>> 1) + $add99 & 255;
    HEAP8[$arrayidx9 >> 0] = $conv111;
    $15 = $conv111;
   } else $15 = $conv96;
   $spec$select8793 = $15 << 24 >> 24 > -4 ? $15 : -4;
   $cond13194 = $spec$select8793 << 24 >> 24 < 36 ? $spec$select8793 : 36;
   $17 = $cond13194 << 24 >> 24;
   HEAP8[$arrayidx9 >> 0] = $cond13194;
   if (($add99 | 0) < ($17 | 0)) {
    $add143 = ($17 << 1) - $add99 + (HEAPU8[$prev_ind >> 0] | 0) | 0;
    HEAP8[$prev_ind >> 0] = $add143;
    $conv145 = $add143 << 24 >> 24;
    $storemerge$in = ($conv145 | 0) < 63 ? $conv145 : 63;
   } else $storemerge$in = (HEAPU8[$prev_ind >> 0] | 0) + $17 | 0;
   HEAP8[$prev_ind >> 0] = $storemerge$in;
   HEAP8[$arrayidx9 >> 0] = (HEAPU8[$arrayidx9 >> 0] | 0) + 4;
   $21 = HEAP8[$prev_ind >> 0] | 0;
  }
  $conv161 = $21 << 24 >> 24;
  $add168 = ($conv161 * 29 | 0) + 2090 + ($conv161 * 7281 >> 16) | 0;
  $cond$i89 = ($add168 | 0) < 3967 ? $add168 : 3967;
  if (($cond$i89 | 0) < 0) $retval$0$i = 0; else if (($cond$i89 | 0) > 3966) $retval$0$i = 2147483647; else {
   $shr18$i = $cond$i89 >>> 7;
   $shl$i2 = 1 << $shr18$i;
   $and$i = $cond$i89 & 127;
   if (($cond$i89 | 0) < 2048) $shr22$pn$i = ((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i << $shr18$i >> 7; else $shr22$pn$i = Math_imul(((Math_imul(Math_imul($and$i, -174) | 0, 128 - $and$i | 0) | 0) >> 16) + $and$i | 0, $shl$i2 >> 7) | 0;
   $retval$0$i = $shr22$pn$i + $shl$i2 | 0;
  }
  HEAP32[$arrayidx >> 2] = $retval$0$i;
  $k$096 = $k$096 + 1 | 0;
 } while (($k$096 | 0) != ($nb_subfr | 0));
 return;
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $1 = 0, $__bn$i37 = 0, $__buf$i36 = 0, $__i$0$i$i = 0, $__i$0$i$i21 = 0, $__mb$i35 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i51 = 0, $__r$0$i = 0, $__r$0$i40 = 0, $__wb$addr$0$i = 0, $__wn$i = 0, $add$ptr = 0, $add$ptr$i38 = 0, $add$ptr141 = 0, $add$ptr5$i = 0, $call$i = 0, $call$i46 = 0, $call8 = 0, $cond$i$i$i1663 = 0, $cond$i$i$i33 = 0, $sub$ptr$lhs$cast$i = 0, $temp$lvalue = 0, $temp$lvalue9 = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i35 = sp + 168 | 0;
 $__buf$i36 = sp;
 $__bn$i37 = sp + 164 | 0;
 $__wn$i = sp + 160 | 0;
 $__ndflt = sp + 128 | 0;
 $temp$lvalue = sp + 152 | 0;
 $temp$lvalue9 = sp + 144 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$temp$lvalue + 4 >> 2] = 0;
 HEAP32[$temp$lvalue >> 2] = 46932;
 $1 = HEAP8[$__dflt + 8 + 3 >> 0] | 0;
 $tobool$i$i$i$i = $1 << 24 >> 24 < 0;
 $cond$i$i$i1663 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i1663 + (($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $1 & 255) << 2) | 0;
 $add$ptr$i38 = $__buf$i36 + 32 | 0;
 $__r$0$i40 = 0;
 $__wb$addr$0$i = $cond$i$i$i1663;
 while (1) {
  if (!(($__r$0$i40 | 0) != 2 & $__wb$addr$0$i >>> 0 < $add$ptr >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $__wb$addr$0$i;
  $call$i46 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue >> 2] | 0) + 12 >> 2] & 15]($temp$lvalue, $__mb$i35, $__wb$addr$0$i, $add$ptr, $__wn$i, $__buf$i36, $add$ptr$i38, $__bn$i37) | 0;
  if (($call$i46 | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__wb$addr$0$i | 0)) {
   label = 8;
   break;
  }
  $__p$0$i51 = $__buf$i36;
  while (1) {
   if ($__p$0$i51 >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i51 >> 0] | 0);
   $__p$0$i51 = $__p$0$i51 + 1 | 0;
  }
  $__r$0$i40 = $call$i46;
  $__wb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
 }
 if ((label | 0) == 8) __ZNSt3__221__throw_runtime_errorEPKc();
 $cond$i$i$i33 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $__i$0$i$i21 = 0;
 while (1) {
  if (($__i$0$i$i21 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i21 << 2) >> 2] = 0;
  $__i$0$i$i21 = $__i$0$i$i21 + 1 | 0;
 }
 $call8 = _catgets($cond$i$i$i33) | 0;
 HEAP32[$temp$lvalue9 + 4 >> 2] = 0;
 HEAP32[$temp$lvalue9 >> 2] = 46980;
 $add$ptr141 = $cond$i$i$i33 + (_strlen($call8) | 0) | 0;
 $sub$ptr$lhs$cast$i = $add$ptr141;
 $add$ptr5$i = $__buf$i36 + 128 | 0;
 $__nb$addr$0$i = $cond$i$i$i33;
 $__r$0$i = 0;
 while (1) {
  if (!(($__r$0$i | 0) != 2 & $__nb$addr$0$i >>> 0 < $add$ptr141 >>> 0)) {
   label = 23;
   break;
  }
  HEAP32[$__wn$i >> 2] = $__nb$addr$0$i;
  $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue9 >> 2] | 0) + 16 >> 2] & 15]($temp$lvalue9, $__mb$i35, $__nb$addr$0$i, ($sub$ptr$lhs$cast$i - $__nb$addr$0$i | 0) > 32 ? $__nb$addr$0$i + 32 | 0 : $add$ptr141, $__wn$i, $__buf$i36, $add$ptr5$i, $__bn$i37) | 0;
  if (($call$i | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__nb$addr$0$i | 0)) {
   label = 19;
   break;
  }
  $__p$0$i = $__buf$i36;
  while (1) {
   if ($__p$0$i >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i >> 2] | 0);
   $__p$0$i = $__p$0$i + 4 | 0;
  }
  $__nb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i = $call$i;
 }
 if ((label | 0) == 19) __ZNSt3__221__throw_runtime_errorEPKc(); else if ((label | 0) == 23) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
}

function _silk_resampler_private_IIR_FIR($SS, $out, $in, $inLen) {
 $SS = $SS | 0;
 $out = $out | 0;
 $in = $in | 0;
 $inLen = $inLen | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add17$i = 0, $add24$i = 0, $add31$i = 0, $add38$i = 0, $add46$i = 0, $add54$i = 0, $add62$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx11 = 0, $arrayidx6 = 0, $batchSize = 0, $in$addr$0 = 0, $inLen$addr$0 = 0, $inLen$addr$0$ = 0, $incdec$ptr$i = 0, $index_Q16$034$i = 0, $mul10$i = 0, $out$addr$0 = 0, $out$addr$0$lcssa$i = 0, $out$addr$035$i = 0, $sFIR = 0, $shl = 0, $sub = 0, $sub$i = 0, $vla = 0, sp = 0;
 sp = STACKTOP;
 $batchSize = $SS + 268 | 0;
 $0 = HEAP32[$batchSize >> 2] | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($0 << 1) + 8 << 1) | 0) + 15 & -16) | 0;
 $sFIR = $SS + 24 | 0;
 HEAP32[$vla >> 2] = HEAP32[$sFIR >> 2];
 HEAP32[$vla + 4 >> 2] = HEAP32[$sFIR + 4 >> 2];
 HEAP32[$vla + 8 >> 2] = HEAP32[$sFIR + 8 >> 2];
 HEAP32[$vla + 12 >> 2] = HEAP32[$sFIR + 12 >> 2];
 $1 = HEAP32[$SS + 272 >> 2] | 0;
 $arrayidx = $vla + 16 | 0;
 $2 = $0;
 $in$addr$0 = $in;
 $inLen$addr$0 = $inLen;
 $out$addr$0 = $out;
 while (1) {
  $inLen$addr$0$ = ($inLen$addr$0 | 0) < ($2 | 0) ? $inLen$addr$0 : $2;
  _silk_resampler_private_up2_HQ($SS, $arrayidx, $in$addr$0, $inLen$addr$0$);
  $shl = $inLen$addr$0$ << 17;
  if (($shl | 0) > 0) {
   $index_Q16$034$i = 0;
   $out$addr$035$i = $out$addr$0;
   while (1) {
    $3 = (($index_Q16$034$i & 65535) * 12 | 0) >>> 16;
    $arrayidx$i = $vla + ($index_Q16$034$i >> 16 << 1) | 0;
    $mul10$i = Math_imul(HEAP16[27584 + ($3 << 3) >> 1] | 0, HEAP16[$arrayidx$i >> 1] | 0) | 0;
    $add17$i = (Math_imul(HEAP16[27584 + ($3 << 3) + 2 >> 1] | 0, HEAP16[$arrayidx$i + 2 >> 1] | 0) | 0) + $mul10$i | 0;
    $add24$i = $add17$i + (Math_imul(HEAP16[27584 + ($3 << 3) + 4 >> 1] | 0, HEAP16[$arrayidx$i + 4 >> 1] | 0) | 0) | 0;
    $add31$i = $add24$i + (Math_imul(HEAP16[27584 + ($3 << 3) + 6 >> 1] | 0, HEAP16[$arrayidx$i + 6 >> 1] | 0) | 0) | 0;
    $sub$i = 11 - $3 | 0;
    $add38$i = $add31$i + (Math_imul(HEAP16[27584 + ($sub$i << 3) + 6 >> 1] | 0, HEAP16[$arrayidx$i + 8 >> 1] | 0) | 0) | 0;
    $add46$i = $add38$i + (Math_imul(HEAP16[27584 + ($sub$i << 3) + 4 >> 1] | 0, HEAP16[$arrayidx$i + 10 >> 1] | 0) | 0) | 0;
    $add54$i = $add46$i + (Math_imul(HEAP16[27584 + ($sub$i << 3) + 2 >> 1] | 0, HEAP16[$arrayidx$i + 12 >> 1] | 0) | 0) | 0;
    $add62$i = $add54$i + (Math_imul(HEAP16[27584 + ($sub$i << 3) >> 1] | 0, HEAP16[$arrayidx$i + 14 >> 1] | 0) | 0) | 0;
    $incdec$ptr$i = $out$addr$035$i + 2 | 0;
    HEAP16[$out$addr$035$i >> 1] = ($add62$i | 0) > 1073725439 ? 32767 : ($add62$i | 0) < -1073758208 ? -32768 : (($add62$i >>> 14) + 1 | 0) >>> 1 & 65535;
    $index_Q16$034$i = $index_Q16$034$i + $1 | 0;
    if (($index_Q16$034$i | 0) >= ($shl | 0)) {
     $out$addr$0$lcssa$i = $incdec$ptr$i;
     break;
    } else $out$addr$035$i = $incdec$ptr$i;
   }
  } else $out$addr$0$lcssa$i = $out$addr$0;
  $sub = $inLen$addr$0 - $inLen$addr$0$ | 0;
  if (($sub | 0) <= 0) break;
  $arrayidx6 = $vla + ($inLen$addr$0$ << 1 << 1) | 0;
  HEAP32[$vla >> 2] = HEAP32[$arrayidx6 >> 2];
  HEAP32[$vla + 4 >> 2] = HEAP32[$arrayidx6 + 4 >> 2];
  HEAP32[$vla + 8 >> 2] = HEAP32[$arrayidx6 + 8 >> 2];
  HEAP32[$vla + 12 >> 2] = HEAP32[$arrayidx6 + 12 >> 2];
  $2 = HEAP32[$batchSize >> 2] | 0;
  $in$addr$0 = $in$addr$0 + ($inLen$addr$0$ << 1) | 0;
  $inLen$addr$0 = $sub;
  $out$addr$0 = $out$addr$0$lcssa$i;
 }
 $arrayidx11 = $vla + ($inLen$addr$0$ << 1 << 1) | 0;
 HEAP16[$sFIR >> 1] = HEAP16[$arrayidx11 >> 1] | 0;
 HEAP16[$sFIR + 2 >> 1] = HEAP16[$arrayidx11 + 2 >> 1] | 0;
 HEAP16[$sFIR + 4 >> 1] = HEAP16[$arrayidx11 + 4 >> 1] | 0;
 HEAP16[$sFIR + 6 >> 1] = HEAP16[$arrayidx11 + 6 >> 1] | 0;
 HEAP16[$sFIR + 8 >> 1] = HEAP16[$arrayidx11 + 8 >> 1] | 0;
 HEAP16[$sFIR + 10 >> 1] = HEAP16[$arrayidx11 + 10 >> 1] | 0;
 HEAP16[$sFIR + 12 >> 1] = HEAP16[$arrayidx11 + 12 >> 1] | 0;
 HEAP16[$sFIR + 14 >> 1] = HEAP16[$arrayidx11 + 14 >> 1] | 0;
 STACKTOP = sp;
 return;
}

function _silk_NSQ_wrapper_FLP($psEnc, $psEncCtrl, $psIndices, $psNSQ, $pulses, $x) {
 $psEnc = $psEnc | 0;
 $psEncCtrl = $psEncCtrl | 0;
 $psIndices = $psIndices | 0;
 $psNSQ = $psNSQ | 0;
 $pulses = $pulses | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $15 = 0, $9 = 0, $AR_Q13 = 0, $Gains_Q16 = 0, $HarmShapeGain_Q14 = 0, $LF_shp_Q14 = 0, $LTPCoef_Q14 = 0, $LTP_scale_Q14$0 = 0, $PredCoef_Q12 = 0, $Tilt_Q14 = 0, $add$us = 0, $call$i72 = 0, $cmp92 = 0, $i$093$us = 0, $i$188 = 0, $i$286 = 0, $i$382$us = 0, $i$382$us$1 = 0, $i$480 = 0, $i$578 = 0, $j$090$us = 0, $mul$us = 0, $mul43 = 0, $shl = 0, $x16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $x16 = sp + 368 | 0;
 $Gains_Q16 = sp + 352 | 0;
 $PredCoef_Q12 = sp + 288 | 0;
 $LTPCoef_Q14 = sp + 240 | 0;
 $AR_Q13 = sp + 48 | 0;
 $LF_shp_Q14 = sp + 32 | 0;
 $Tilt_Q14 = sp + 16 | 0;
 $HarmShapeGain_Q14 = sp;
 $0 = HEAP32[$psEnc + 4580 >> 2] | 0;
 $cmp92 = ($0 | 0) > 0;
 if ($cmp92) {
  $1 = HEAP32[$psEnc + 4636 >> 2] | 0;
  if (($1 | 0) > 0) {
   $i$093$us = 0;
   do {
    $mul$us = $i$093$us * 24 | 0;
    $j$090$us = 0;
    do {
     $add$us = $j$090$us + $mul$us | 0;
     HEAP16[$AR_Q13 + ($add$us << 1) >> 1] = _lrintf(+HEAPF32[$psEncCtrl + 244 + ($add$us << 2) >> 2] * 8192.0) | 0;
     $j$090$us = $j$090$us + 1 | 0;
    } while (($j$090$us | 0) != ($1 | 0));
    $i$093$us = $i$093$us + 1 | 0;
   } while (($i$093$us | 0) != ($0 | 0));
  }
  $i$188 = 0;
  do {
   $shl = (_lrintf(+HEAPF32[$psEncCtrl + 644 + ($i$188 << 2) >> 2] * 16384.0) | 0) << 16;
   HEAP32[$LF_shp_Q14 + ($i$188 << 2) >> 2] = (_lrintf(+HEAPF32[$psEncCtrl + 628 + ($i$188 << 2) >> 2] * 16384.0) | 0) & 65535 | $shl;
   HEAP32[$Tilt_Q14 + ($i$188 << 2) >> 2] = _lrintf(+HEAPF32[$psEncCtrl + 660 + ($i$188 << 2) >> 2] * 16384.0) | 0;
   HEAP32[$HarmShapeGain_Q14 + ($i$188 << 2) >> 2] = _lrintf(+HEAPF32[$psEncCtrl + 676 + ($i$188 << 2) >> 2] * 16384.0) | 0;
   $i$188 = $i$188 + 1 | 0;
  } while (($i$188 | 0) != ($0 | 0));
 }
 $call$i72 = _lrintf(+HEAPF32[$psEncCtrl + 692 >> 2] * 1024.0) | 0;
 $mul43 = $0 * 5 | 0;
 if ($cmp92) {
  $i$286 = 0;
  do {
   HEAP16[$LTPCoef_Q14 + ($i$286 << 1) >> 1] = _lrintf(+HEAPF32[$psEncCtrl + 144 + ($i$286 << 2) >> 2] * 16384.0) | 0;
   $i$286 = $i$286 + 1 | 0;
  } while (($i$286 | 0) < ($mul43 | 0));
 }
 $9 = HEAP32[$psEnc + 4640 >> 2] | 0;
 if (($9 | 0) > 0) {
  $i$382$us = 0;
  do {
   HEAP16[$PredCoef_Q12 + ($i$382$us << 1) >> 1] = _lrintf(+HEAPF32[$psEncCtrl + 16 + ($i$382$us << 2) >> 2] * 4096.0) | 0;
   $i$382$us = $i$382$us + 1 | 0;
  } while (($i$382$us | 0) != ($9 | 0));
  $i$382$us$1 = 0;
  do {
   HEAP16[$PredCoef_Q12 + 32 + ($i$382$us$1 << 1) >> 1] = _lrintf(+HEAPF32[$psEncCtrl + 80 + ($i$382$us$1 << 2) >> 2] * 4096.0) | 0;
   $i$382$us$1 = $i$382$us$1 + 1 | 0;
  } while (($i$382$us$1 | 0) != ($9 | 0));
 }
 if ($cmp92) {
  $i$480 = 0;
  do {
   HEAP32[$Gains_Q16 + ($i$480 << 2) >> 2] = _lrintf(+HEAPF32[$psEncCtrl + ($i$480 << 2) >> 2] * 65536.0) | 0;
   $i$480 = $i$480 + 1 | 0;
  } while (($i$480 | 0) != ($0 | 0));
 }
 if ((HEAP8[$psIndices + 29 >> 0] | 0) == 2) $LTP_scale_Q14$0 = HEAP16[47592 + (HEAP8[$psIndices + 33 >> 0] << 1) >> 1] | 0; else $LTP_scale_Q14$0 = 0;
 $15 = HEAP32[$psEnc + 4584 >> 2] | 0;
 if (($15 | 0) > 0) {
  $i$578 = 0;
  do {
   HEAP16[$x16 + ($i$578 << 1) >> 1] = _lrintf(+HEAPF32[$x + ($i$578 << 2) >> 2]) | 0;
   $i$578 = $i$578 + 1 | 0;
  } while (($i$578 | 0) != ($15 | 0));
 }
 if ((HEAP32[$psEnc + 4628 >> 2] | 0) <= 1) if ((HEAP32[$psEnc + 4672 >> 2] | 0) <= 0) {
  _silk_NSQ_c($psEnc, $psNSQ, $psIndices, $x16, $pulses, $PredCoef_Q12, $LTPCoef_Q14, $AR_Q13, $HarmShapeGain_Q14, $Tilt_Q14, $LF_shp_Q14, $Gains_Q16, $psEncCtrl + 228 | 0, $call$i72, $LTP_scale_Q14$0);
  STACKTOP = sp;
  return;
 }
 _silk_NSQ_del_dec_c($psEnc, $psNSQ, $psIndices, $x16, $pulses, $PredCoef_Q12, $LTPCoef_Q14, $AR_Q13, $HarmShapeGain_Q14, $Tilt_Q14, $LF_shp_Q14, $Gains_Q16, $psEncCtrl + 228 | 0, $call$i72, $LTP_scale_Q14$0);
 STACKTOP = sp;
 return;
}

function _comb_filter($y, $x, $T0, $T1, $N, $g0, $g1, $tapset0, $tapset1, $window, $overlap) {
 $y = $y | 0;
 $x = $x | 0;
 $T0 = $T0 | 0;
 $T1 = $T1 | 0;
 $N = $N | 0;
 $g0 = +$g0;
 $g1 = +$g1;
 $tapset0 = $tapset0 | 0;
 $tapset1 = $tapset1 | 0;
 $window = $window | 0;
 $overlap = $overlap | 0;
 var $10 = 0.0, $11 = 0.0, $22 = 0.0, $add$ptr113 = 0, $add$ptr114 = 0, $add29 = 0, $cmp1 = 0, $cond = 0, $cond11 = 0, $i$0$lcssa = 0, $i$0109 = 0, $i$033$i = 0, $mul13 = 0.0, $mul16 = 0.0, $mul19 = 0.0, $mul22 = 0.0, $mul25 = 0.0, $mul28 = 0.0, $mul52 = 0.0, $overlap$addr$0 = 0, $sub = 0, $sub115 = 0, $sub34 = 0, $sub37 = 0, $sub47 = 0, $sub54 = 0.0, $sub56 = 0, $sub9$i = 0, $x1$0110 = 0.0, $x1$029$i = 0.0, $x2$0111 = 0.0, $x2$0111$phi = 0.0, $x2$030$i = 0.0, $x2$030$i$phi = 0.0, $x3$0112 = 0.0, $x3$031$i = 0.0, $x4$0113 = 0.0, $x4$032$i = 0.0;
 $cmp1 = $g1 == 0.0;
 if ($g0 == 0.0 & $cmp1) {
  if (($x | 0) == ($y | 0)) return;
  _memmove($y | 0, $x | 0, $N << 2 | 0) | 0;
  return;
 }
 $cond = ($T0 | 0) > 15 ? $T0 : 15;
 $cond11 = ($T1 | 0) > 15 ? $T1 : 15;
 $sub = 0 - $cond11 | 0;
 $mul13 = +HEAPF32[224 + ($tapset0 * 12 | 0) >> 2] * $g0;
 $mul16 = +HEAPF32[224 + ($tapset0 * 12 | 0) + 4 >> 2] * $g0;
 $mul19 = +HEAPF32[224 + ($tapset0 * 12 | 0) + 8 >> 2] * $g0;
 $mul22 = +HEAPF32[224 + ($tapset1 * 12 | 0) >> 2] * $g1;
 $mul25 = +HEAPF32[224 + ($tapset1 * 12 | 0) + 4 >> 2] * $g1;
 $mul28 = +HEAPF32[224 + ($tapset1 * 12 | 0) + 8 >> 2] * $g1;
 $add29 = 1 - $cond11 | 0;
 $sub34 = ~$cond11;
 $sub37 = -2 - $cond11 | 0;
 $overlap$addr$0 = ($cond | 0) == ($cond11 | 0) & $g0 == $g1 & ($tapset0 | 0) == ($tapset1 | 0) ? 0 : $overlap;
 if (($overlap$addr$0 | 0) > 0) {
  $sub47 = 2 - $cond11 | 0;
  $i$0109 = 0;
  $x1$0110 = +HEAPF32[$x + ($add29 << 2) >> 2];
  $x2$0111 = +HEAPF32[$x + ($sub << 2) >> 2];
  $x3$0112 = +HEAPF32[$x + ($sub34 << 2) >> 2];
  $x4$0113 = +HEAPF32[$x + ($sub37 << 2) >> 2];
  while (1) {
   $10 = +HEAPF32[$x + ($sub47 + $i$0109 << 2) >> 2];
   $11 = +HEAPF32[$window + ($i$0109 << 2) >> 2];
   $mul52 = $11 * $11;
   $sub54 = 1.0 - $mul52;
   $sub56 = $i$0109 - $cond | 0;
   HEAPF32[$y + ($i$0109 << 2) >> 2] = ($x4$0113 + $10) * ($mul28 * $mul52) + (($x1$0110 + $x3$0112) * ($mul25 * $mul52) + ($x2$0111 * ($mul22 * $mul52) + (+HEAPF32[$x + ($i$0109 << 2) >> 2] + +HEAPF32[$x + ($sub56 << 2) >> 2] * ($mul13 * $sub54) + $mul16 * $sub54 * (+HEAPF32[$x + ($sub56 + 1 << 2) >> 2] + +HEAPF32[$x + ($sub56 + -1 << 2) >> 2]) + $mul19 * $sub54 * (+HEAPF32[$x + ($sub56 + 2 << 2) >> 2] + +HEAPF32[$x + ($sub56 + -2 << 2) >> 2]))));
   $i$0109 = $i$0109 + 1 | 0;
   if (($i$0109 | 0) == ($overlap$addr$0 | 0)) {
    $i$0$lcssa = $overlap$addr$0;
    break;
   } else {
    $x2$0111$phi = $x1$0110;
    $x1$0110 = $10;
    $x4$0113 = $x3$0112;
    $x3$0112 = $x2$0111;
    $x2$0111 = $x2$0111$phi;
   }
  }
 } else $i$0$lcssa = 0;
 if ($cmp1) {
  if (($x | 0) == ($y | 0)) return;
  _memmove($y + ($overlap$addr$0 << 2) | 0, $x + ($overlap$addr$0 << 2) | 0, $N - $overlap$addr$0 << 2 | 0) | 0;
  return;
 }
 $add$ptr113 = $y + ($i$0$lcssa << 2) | 0;
 $add$ptr114 = $x + ($i$0$lcssa << 2) | 0;
 $sub115 = $N - $i$0$lcssa | 0;
 if (($sub115 | 0) <= 0) return;
 $sub9$i = 2 - $cond11 | 0;
 $i$033$i = 0;
 $x1$029$i = +HEAPF32[$add$ptr114 + ($add29 << 2) >> 2];
 $x2$030$i = +HEAPF32[$add$ptr114 + ($sub << 2) >> 2];
 $x3$031$i = +HEAPF32[$add$ptr114 + ($sub34 << 2) >> 2];
 $x4$032$i = +HEAPF32[$add$ptr114 + ($sub37 << 2) >> 2];
 while (1) {
  $22 = +HEAPF32[$add$ptr114 + ($sub9$i + $i$033$i << 2) >> 2];
  HEAPF32[$add$ptr113 + ($i$033$i << 2) >> 2] = $mul28 * ($x4$032$i + $22) + ($mul25 * ($x3$031$i + $x1$029$i) + ($mul22 * $x2$030$i + +HEAPF32[$add$ptr114 + ($i$033$i << 2) >> 2]));
  $i$033$i = $i$033$i + 1 | 0;
  if (($i$033$i | 0) == ($sub115 | 0)) break; else {
   $x2$030$i$phi = $x1$029$i;
   $x1$029$i = $22;
   $x4$032$i = $x3$031$i;
   $x3$031$i = $x2$030$i;
   $x2$030$i = $x2$030$i$phi;
  }
 }
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and55 = 0, $retval$2 = 0, $sub$ptr$sub28 = 0;
 L1 : do if (($__ct | 0) == ($__decimal_point | 0)) if (!(HEAP8[$__in_units >> 0] | 0)) $retval$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (!(($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0)) $retval$2 = 0; else {
   $4 = HEAP32[$__g_end >> 2] | 0;
   if (($4 - $__g | 0) < 160) {
    $5 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $4 + 4;
    HEAP32[$4 >> 2] = $5;
    $retval$2 = 0;
   } else $retval$2 = 0;
  }
 } else {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $6 = HEAP8[$__grouping + 11 >> 0] | 0;
   if (($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $retval$2 = -1;
     break;
    }
    $9 = HEAP32[$__g_end >> 2] | 0;
    if (($9 - $__g | 0) >= 160) {
     $retval$2 = 0;
     break;
    }
    $10 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $10;
    HEAP32[$__dc >> 2] = 0;
    $retval$2 = 0;
    break;
   }
  }
  $add$ptr = $__atoms + 128 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub28 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub28 | 0) > 124) $retval$2 = -1; else {
   $12 = HEAP8[41392 + ($sub$ptr$sub28 >> 2) >> 0] | 0;
   $13 = $sub$ptr$sub28 + -88 | 0;
   switch ($13 >>> 2 | $13 << 30 | 0) {
   case 2:
   case 3:
    {
     $17 = HEAP32[$__a_end >> 2] | 0;
     if (($17 | 0) != ($__a | 0)) if ((HEAP8[$17 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127)) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $17 + 1;
     HEAP8[$17 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     HEAP8[$__exp >> 0] = 80;
     break;
    }
   default:
    {
     $and55 = $12 & 95;
     if (($and55 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $and55 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $25 = HEAP8[$__grouping + 11 >> 0] | 0;
       if (($25 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $25 & 255) | 0) {
        $27 = HEAP32[$__g_end >> 2] | 0;
        if (($27 - $__g | 0) < 160) {
         $28 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $27 + 4;
         HEAP32[$27 >> 2] = $28;
        }
       }
      }
     }
    }
   }
   $29 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $29 + 1;
   HEAP8[$29 >> 0] = $12;
   if (($sub$ptr$sub28 | 0) > 84) $retval$2 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $retval$2 = 0;
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $__loc = 0, $__loc$idx$val = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp$0$val$cast = 0, $call$i = 0, $call$i19 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $__wbuf = sp;
 $__wb = sp + 408 | 0;
 $__wn = sp + 404 | 0;
 $__loc = sp + 400 | 0;
 $__neg = sp + 416 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 93;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65324) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 $agg$tmp$0$val$cast = $2;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $agg$tmp$0$val$cast, $__intl, $__loc$idx$val, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  $__size_$i1$i = $__v + 8 + 3 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   __ZNSt3__211char_traitsIwE6assignERwRKw(HEAP32[$__v >> 2] | 0, 0);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   __ZNSt3__211char_traitsIwE6assignERwRKw($__v, 0);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, 45) | 0);
  $call$i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 15]($call$i, 48) | 0;
  $11 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $11 + -4 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP32[$__w$0 >> 2] | 0) != ($call$i19 | 0)) break;
   $__w$0 = $__w$0 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($__v, $__w$0, $11) | 0;
 }
 $13 = HEAP32[$__b >> 2] | 0;
 do if (!$13) $26 = 1; else {
  $14 = HEAP32[$13 + 12 >> 2] | 0;
  if (($14 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $26 = 1;
   break;
  } else {
   $26 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$2) label = 25; else {
  $18 = HEAP32[$agg$tmp$0$val$cast + 12 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$agg$tmp$0$val$cast + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 63]($agg$tmp$0$val$cast) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$18 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($26) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($26) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $24 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($24 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 127]($24);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $__loc = 0, $__loc$idx$val = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp$0$val$cast = 0, $call$i = 0, $call$i18 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__wbuf = sp;
 $__wb = sp + 112 | 0;
 $__wn = sp + 104 | 0;
 $__loc = sp + 100 | 0;
 $__neg = sp + 120 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 93;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx$val, 65292) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 $agg$tmp$0$val$cast = $2;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $agg$tmp$0$val$cast, $__intl, $__loc$idx$val, HEAP32[$__iob + 4 >> 2] | 0, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  $__size_$i1$i = $__v + 11 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   __ZNSt3__211char_traitsIcE6assignERcRKc(HEAP32[$__v >> 2] | 0, 0);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   __ZNSt3__211char_traitsIcE6assignERcRKc($__v, 0);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, 45) | 0);
  $call$i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 15]($call$i, 48) | 0;
  $10 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $10 + -1 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP8[$__w$0 >> 0] | 0) != $call$i18 << 24 >> 24) break;
   $__w$0 = $__w$0 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($__v, $__w$0, $10) | 0;
 }
 $12 = HEAP32[$__b >> 2] | 0;
 do if (!$12) $25 = 1; else {
  $13 = HEAP32[$12 + 12 >> 2] | 0;
  if (($13 | 0) == (HEAP32[$12 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$13 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $25 = 1;
   break;
  } else {
   $25 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$2) label = 25; else {
  $17 = HEAP32[$agg$tmp$0$val$cast + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$agg$tmp$0$val$cast + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 63]($agg$tmp$0$val$cast) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($25) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($25) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $23 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($23 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 127]($23);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $add$ptr36 = 0, $add$ptr364 = 0, $add15 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$055 = 0, $cnt$1 = 0, $cnt$248 = 0, $cnt$3 = 0, $div = 0, $inc = 0, $n$addr$054 = 0, $n$addr$1 = 0, $n$addr$247 = 0, $s = 0, $s$promoted = 0, $s$promoted7 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $wbuf = 0, $wn$addr$0 = 0, $wn$addr$153 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$446 = 0, $ws$0 = 0, $ws$140 = 0, $ws$156 = 0, $ws$2 = 0, $ws$349 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf = sp;
 $s = sp + 1024 | 0;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $tobool = ($wcs | 0) != 0;
 $wn$addr$0 = $tobool ? $wn : 256;
 $ws$0 = $tobool ? $wcs : $wbuf;
 $$cast = $0;
 L1 : do if (($wn$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $11 = $0;
  $cnt$055 = 0;
  $n$addr$054 = $n;
  $s$promoted7 = $$cast;
  $wn$addr$153 = $wn$addr$0;
  $ws$156 = $ws$0;
  while (1) {
   $div = $n$addr$054 >>> 2;
   $cmp = $div >>> 0 >= $wn$addr$153 >>> 0;
   if (!($n$addr$054 >>> 0 > 131 | $cmp)) {
    $10 = $11;
    $cnt$1 = $cnt$055;
    $n$addr$1 = $n$addr$054;
    $s$promoted = $s$promoted7;
    $wn$addr$3 = $wn$addr$153;
    $ws$140 = $ws$156;
    break L1;
   }
   $spec$select = $cmp ? $wn$addr$153 : $div;
   $sub = $n$addr$054 - $spec$select | 0;
   $call = _mbsrtowcs($ws$156, $s, $spec$select, $st) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($ws$156 | 0) == ($wbuf | 0);
   $wn$addr$2 = $wn$addr$153 - ($cmp11 ? 0 : $call) | 0;
   $ws$2 = $cmp11 ? $ws$156 : $ws$156 + ($call << 2) | 0;
   $add15 = $call + $cnt$055 | 0;
   $3 = HEAP32[$s >> 2] | 0;
   $4 = $3;
   if (($wn$addr$2 | 0) != 0 & ($3 | 0) != 0) {
    $11 = $4;
    $cnt$055 = $add15;
    $n$addr$054 = $sub;
    $s$promoted7 = $3;
    $wn$addr$153 = $wn$addr$2;
    $ws$156 = $ws$2;
   } else {
    $10 = $4;
    $cnt$1 = $add15;
    $n$addr$1 = $sub;
    $s$promoted = $3;
    $wn$addr$3 = $wn$addr$2;
    $ws$140 = $ws$2;
    break L1;
   }
  }
  $$pr$pre = HEAP32[$s >> 2] | 0;
  $10 = $$pr$pre;
  $cnt$1 = -1;
  $n$addr$1 = $sub;
  $s$promoted = $$pr$pre;
  $wn$addr$3 = 0;
  $ws$140 = $ws$156;
 } else {
  $10 = $0;
  $cnt$1 = 0;
  $n$addr$1 = $n;
  $s$promoted = $$cast;
  $wn$addr$3 = $wn$addr$0;
  $ws$140 = $ws$0;
 } while (0);
 L9 : do if (!$s$promoted) {
  $9 = $10;
  $cnt$3 = $cnt$1;
 } else if (($wn$addr$3 | 0) != 0 & ($n$addr$1 | 0) != 0) {
  $add$ptr364 = $s$promoted;
  $cnt$248 = $cnt$1;
  $n$addr$247 = $n$addr$1;
  $wn$addr$446 = $wn$addr$3;
  $ws$349 = $ws$140;
  while (1) {
   $call24 = _mbrtowc($ws$349, $add$ptr364, $n$addr$247, $st) | 0;
   if (($call24 + 2 | 0) >>> 0 < 3) break;
   $add$ptr36 = $add$ptr364 + $call24 | 0;
   $n$addr$247 = $n$addr$247 - $call24 | 0;
   $wn$addr$446 = $wn$addr$446 + -1 | 0;
   $inc = $cnt$248 + 1 | 0;
   if (!(($wn$addr$446 | 0) != 0 & ($n$addr$247 | 0) != 0)) {
    label = 15;
    break;
   } else {
    $add$ptr364 = $add$ptr36;
    $cnt$248 = $inc;
    $ws$349 = $ws$349 + 4 | 0;
   }
  }
  if ((label | 0) == 15) {
   HEAP32[$s >> 2] = $add$ptr36;
   $9 = $add$ptr36;
   $cnt$3 = $inc;
   break;
  }
  HEAP32[$s >> 2] = $add$ptr364;
  $6 = $add$ptr364;
  switch ($call24 | 0) {
  case -1:
   {
    $9 = $6;
    $cnt$3 = -1;
    break L9;
    break;
   }
  case 0:
   {
    HEAP32[$s >> 2] = 0;
    $9 = 0;
    $cnt$3 = $cnt$248;
    break L9;
    break;
   }
  default:
   {
    HEAP32[$st >> 2] = 0;
    $9 = $6;
    $cnt$3 = $cnt$248;
    break L9;
   }
  }
 } else {
  $9 = $10;
  $cnt$3 = $cnt$1;
 } while (0);
 if ($tobool) HEAP32[$src >> 2] = $9;
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $5 = 0, $add$ptr202$sink = 0, $and161 = 0, $conv14 = 0, $conv146 = 0, $conv149 = 0, $conv163 = 0, $conv36 = 0, $conv82 = 0, $incdec$ptr201 = 0, $incdec$ptr217 = 0, $retval$8 = 0, $sub$ptr$lhs$cast154 = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre = $frm_end;
 $sub$ptr$lhs$cast154 = $to_end;
 $1 = $to;
 L1 : while (1) {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  if ($0 >>> 0 >= $frm_end >>> 0) {
   $retval$8 = 0;
   break;
  }
  if ($1 >>> 0 >= $to_end >>> 0) {
   $retval$8 = 1;
   break;
  }
  $2 = HEAP8[$0 >> 0] | 0;
  $conv14 = $2 & 255;
  do if ($2 << 24 >> 24 > -1) {
   HEAP16[$1 >> 1] = $2 & 255;
   $add$ptr202$sink = $0 + 1 | 0;
  } else {
   if (($2 & 255) < 194) {
    $retval$8 = 2;
    break L1;
   }
   if (($2 & 255) < 224) {
    if (($$pre - $0 | 0) < 2) {
     $retval$8 = 1;
     break L1;
    }
    $conv36 = HEAPU8[$0 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L1;
    }
    HEAP16[$1 >> 1] = $conv36 & 63 | $conv14 << 6 & 1984;
    $add$ptr202$sink = $0 + 2 | 0;
    break;
   }
   if (($2 & 255) < 240) {
    if (($$pre - $0 | 0) < 3) {
     $retval$8 = 1;
     break L1;
    }
    $4 = HEAP8[$0 + 1 >> 0] | 0;
    $5 = HEAP8[$0 + 2 >> 0] | 0;
    switch ($2 << 24 >> 24) {
    case -32:
     {
      if (($4 & -32) << 24 >> 24 != -96) {
       $retval$8 = 2;
       break L1;
      }
      break;
     }
    case -19:
     {
      if (($4 & -32) << 24 >> 24 != -128) {
       $retval$8 = 2;
       break L1;
      }
      break;
     }
    default:
     if (($4 & -64) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L1;
     }
    }
    $conv82 = $5 & 255;
    if (($conv82 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L1;
    }
    HEAP16[$1 >> 1] = ($4 & 63) << 6 | $conv14 << 12 | $conv82 & 63;
    $add$ptr202$sink = $0 + 3 | 0;
    break;
   }
   if (($2 & 255) >= 245) {
    $retval$8 = 2;
    break L1;
   }
   if (($$pre - $0 | 0) < 4) {
    $retval$8 = 1;
    break L1;
   }
   $10 = HEAP8[$0 + 1 >> 0] | 0;
   $11 = HEAP8[$0 + 2 >> 0] | 0;
   $12 = HEAP8[$0 + 3 >> 0] | 0;
   switch ($2 << 24 >> 24) {
   case -16:
    {
     if (($10 + 112 & 255) >= 48) {
      $retval$8 = 2;
      break L1;
     }
     break;
    }
   case -12:
    {
     if (($10 & -16) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L1;
     }
     break;
    }
   default:
    if (($10 & -64) << 24 >> 24 != -128) {
     $retval$8 = 2;
     break L1;
    }
   }
   $conv146 = $11 & 255;
   if (($conv146 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L1;
   }
   $conv149 = $12 & 255;
   if (($conv149 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L1;
   }
   if (($sub$ptr$lhs$cast154 - $1 | 0) < 4) {
    $retval$8 = 1;
    break L1;
   }
   $and161 = $conv14 & 7;
   $conv163 = $10 & 255;
   if (($conv163 << 12 & 196608 | $and161 << 18) >>> 0 > 1114111) {
    $retval$8 = 2;
    break L1;
   }
   HEAP16[$1 >> 1] = $conv163 << 2 & 60 | $conv146 >>> 4 & 3 | (($conv163 >>> 4 & 3 | $and161 << 2) << 6) + 16320 | 55296;
   $incdec$ptr201 = $1 + 2 | 0;
   HEAP32[$to_nxt >> 2] = $incdec$ptr201;
   HEAP16[$incdec$ptr201 >> 1] = $conv149 & 63 | $conv146 << 6 & 960 | 56320;
   $add$ptr202$sink = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[$frm_nxt >> 2] = $add$ptr202$sink;
  $incdec$ptr217 = (HEAP32[$to_nxt >> 2] | 0) + 2 | 0;
  HEAP32[$to_nxt >> 2] = $incdec$ptr217;
  $1 = $incdec$ptr217;
 }
 return $retval$8 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($__b, $__e$0, $__err, $__ct) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $5 = 0, $9 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i27 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i48 = 0, label = 0;
 $__tab_$i = $__ct + 8 | 0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $31 = 1; else {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $31 = 1;
    break;
   } else {
    $31 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) label = 14; else {
   $5 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 14; else if ($31) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $25 = $__e$sroa$0$0;
    break;
   }
  }
  if ((label | 0) == 14) {
   label = 0;
   if ($31) {
    $25 = 0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $9 = HEAP32[$__b >> 2] | 0;
  $10 = HEAP32[$9 + 12 >> 2] | 0;
  if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 63]($9) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
  if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
   $25 = $__e$sroa$0$2;
   break;
  }
  if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $25 = $__e$sroa$0$2;
   break;
  }
  $16 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i6 = $16 + 12 | 0;
  $17 = HEAP32[$__ninp_$i$i6 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] & 63]($16) | 0; else HEAP32[$__ninp_$i$i6 >> 2] = $17 + 1;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $20 = HEAP32[$__b >> 2] | 0;
 do if (!$20) $32 = 1; else {
  $21 = HEAP32[$20 + 12 >> 2] | 0;
  if (($21 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $retval$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 63]($20) | 0; else $retval$0$i$i$i$i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i27) | 0) {
   HEAP32[$__b >> 2] = 0;
   $32 = 1;
   break;
  } else {
   $32 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$25) label = 37; else {
  $26 = HEAP32[$25 + 12 >> 2] | 0;
  if (($26 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) $retval$0$i$i13$i$i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0; else $retval$0$i$i13$i$i48 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$26 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i48) | 0) label = 37; else if (!$32) label = 39;
 }
 if ((label | 0) == 37) if ($32) label = 39;
 if ((label | 0) == 39) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i56$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr20 = 0, $call29 = 0, $call62 = 0, $call73 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (!(HEAP8[$__last_consumed_is_next_ >> 0] | 0)) {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 8;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    $retval$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr20 = $__1buf + 1 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr20, $__inxt) | 0) {
     case 3:
      {
       label = 14;
       break L11;
       break;
      }
     case 2:
      {
       label = 16;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 16;
      break;
     }
     $call29 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call29 | 0) == -1) {
      label = 16;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call29;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 14) HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0; else if ((label | 0) == 16) {
     $retval$9 = -1;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 18;
   } else {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$3 = $$sroa$speculated;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $call73 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0;
     HEAP32[$this + 48 >> 2] = $call73;
     $retval$9 = $call73;
     break;
    }
    $__i56$0 = $__nread$3;
    while (1) {
     if (($__i56$0 | 0) <= 0) break;
     $__i56$0 = $__i56$0 + -1 | 0;
     $call62 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__extbuf + $__i56$0 >> 0] | 0) | 0;
     if ((_ungetc($call62, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      $retval$9 = -1;
      break L21;
     }
    }
    $retval$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   HEAP32[$__last_consumed_ >> 2] = -1;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i58$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr21 = 0, $call30 = 0, $call65 = 0, $call76 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (!(HEAP8[$__last_consumed_is_next_ >> 0] | 0)) {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 8;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    $retval$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr21 = $__1buf + 4 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr21, $__inxt) | 0) {
     case 3:
      {
       label = 14;
       break L11;
       break;
      }
     case 2:
      {
       label = 16;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 16;
      break;
     }
     $call30 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call30 | 0) == -1) {
      label = 16;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call30;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 14) HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0]; else if ((label | 0) == 16) {
     $retval$9 = -1;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 18;
   } else {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
    $__nread$3 = $$sroa$speculated;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $call76 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0;
     HEAP32[$this + 48 >> 2] = $call76;
     $retval$9 = $call76;
     break;
    }
    $__i58$0 = $__nread$3;
    while (1) {
     if (($__i58$0 | 0) <= 0) break;
     $__i58$0 = $__i58$0 + -1 | 0;
     $call65 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$__extbuf + $__i58$0 >> 0] | 0) | 0;
     if ((_ungetc($call65, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      $retval$9 = -1;
      break L21;
     }
    }
    $retval$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   HEAP32[$__last_consumed_ >> 2] = -1;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $or2438 = 0, $or37 = 0, $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $__flags = $this + 8 | 0;
   $search_done = $info + 54 | 0;
   $12 = $5;
   $9 = $4;
   $found_any_static_type$0 = $or2438;
   $found_our_static_ptr$0 = $or37;
   $p$0 = $this + 24 | 0;
   while (1) {
    $7 = $found_any_static_type$0 & 1;
    $8 = $found_our_static_ptr$0 & 1;
    if (HEAP8[$search_done >> 0] | 0) {
     $found_any_static_type$1$off0$in = $7;
     $found_our_static_ptr$1$off0$in = $8;
     break L4;
    }
    if (!($9 << 24 >> 24)) {
     if ($12 << 24 >> 24) if (!(HEAP32[$__flags >> 2] & 1)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     if (!(HEAP32[$__flags >> 2] & 2)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $9 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
    $or5850 = $9 | $8;
    $12 = HEAP8[$found_any_static_type5 >> 0] | 0;
    $or6651 = $12 | $7;
    $p$0 = $p$0 + 8 | 0;
    if ($p$0 >>> 0 >= $add$ptr >>> 0) {
     $found_any_static_type$1$off0$in = $or6651;
     $found_our_static_ptr$1$off0$in = $or5850;
     break;
    } else {
     $found_any_static_type$0 = $or6651;
     $found_our_static_ptr$0 = $or5850;
    }
   }
  } else {
   $found_any_static_type$1$off0$in = $or2438;
   $found_our_static_ptr$1$off0$in = $or37;
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $found_any_static_type$1$off0$in << 24 >> 24 != 0 & 1;
 }
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($__b, $__e$0, $__err, $__ct) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $5 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $32 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $32 = 1;
   break;
  } else {
   $32 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$__e$0) label = 13; else {
  $5 = HEAP32[$__e$0 + 12 >> 2] | 0;
  if (($5 | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 63]($__e$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i) | 0) label = 13; else if ($32) {
   $26 = $__e$0;
   label = 16;
  } else label = 15;
 }
 if ((label | 0) == 13) if ($32) label = 15; else {
  $26 = 0;
  label = 16;
 }
 do if ((label | 0) == 15) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 16) {
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $retval$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $17 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $17 + 12 | 0;
  $18 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 40 >> 2] & 63]($17) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $33 = 1; else {
    $21 = $$pre;
    label = 24;
   }
  } else {
   HEAP32[$__ninp_$i$i7 >> 2] = $18 + 1;
   $21 = $17;
   label = 24;
  }
  do if ((label | 0) == 24) {
   $22 = HEAP32[$21 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28) | 0) {
    HEAP32[$__b >> 2] = 0;
    $33 = 1;
    break;
   } else {
    $33 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$26) label = 35; else {
   $27 = HEAP32[$26 + 12 >> 2] | 0;
   if (($27 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49) | 0) label = 35; else if ($33) break;
  }
  if ((label | 0) == 35) if (!$33) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($__b, $__e$0, $__err, $__ct) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $5 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $32 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
   HEAP32[$__b >> 2] = 0;
   $32 = 1;
   break;
  } else {
   $32 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$__e$0) label = 13; else {
  $5 = HEAP32[$__e$0 + 12 >> 2] | 0;
  if (($5 | 0) == (HEAP32[$__e$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$0 >> 2] | 0) + 36 >> 2] & 63]($__e$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 13; else if ($32) {
   $26 = $__e$0;
   label = 16;
  } else label = 15;
 }
 if ((label | 0) == 13) if ($32) label = 15; else {
  $26 = 0;
  label = 16;
 }
 do if ((label | 0) == 15) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 16) {
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $17 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $17 + 12 | 0;
  $18 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 40 >> 2] & 63]($17) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $33 = 1; else {
    $21 = $$pre;
    label = 24;
   }
  } else {
   HEAP32[$__ninp_$i$i7 >> 2] = $18 + 4;
   $21 = $17;
   label = 24;
  }
  do if ((label | 0) == 24) {
   $22 = HEAP32[$21 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28) | 0) {
    HEAP32[$__b >> 2] = 0;
    $33 = 1;
    break;
   } else {
    $33 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$26) label = 35; else {
   $27 = HEAP32[$26 + 12 >> 2] | 0;
   if (($27 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49) | 0) label = 35; else if ($33) break;
  }
  if ((label | 0) == 35) if (!$33) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($__b, $__e$0, $__err, $__ct) {
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $5 = 0, $9 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$2 = 0, $__ninp_$i$i5 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i47 = 0, label = 0;
 $__e$sroa$0$0 = $__e$0;
 while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $30 = 1; else {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i) | 0) {
    HEAP32[$__b >> 2] = 0;
    $30 = 1;
    break;
   } else {
    $30 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  if (!$__e$sroa$0$0) label = 14; else {
   $5 = HEAP32[$__e$sroa$0$0 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$__e$sroa$0$0 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$__e$sroa$0$0 >> 2] | 0) + 36 >> 2] & 63]($__e$sroa$0$0) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i) | 0) label = 14; else if ($30) $__e$sroa$0$2 = $__e$sroa$0$0; else {
    $24 = $__e$sroa$0$0;
    break;
   }
  }
  if ((label | 0) == 14) {
   label = 0;
   if ($30) {
    $24 = 0;
    break;
   } else $__e$sroa$0$2 = 0;
  }
  $9 = HEAP32[$__b >> 2] | 0;
  $10 = HEAP32[$9 + 12 >> 2] | 0;
  if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 63]($9) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $retval$0$i$i) | 0)) {
   $24 = $__e$sroa$0$2;
   break;
  }
  $15 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i5 = $15 + 12 | 0;
  $16 = HEAP32[$__ninp_$i$i5 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$15 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 40 >> 2] & 63]($15) | 0; else HEAP32[$__ninp_$i$i5 >> 2] = $16 + 4;
  $__e$sroa$0$0 = $__e$sroa$0$2;
 }
 $19 = HEAP32[$__b >> 2] | 0;
 do if (!$19) $31 = 1; else {
  $20 = HEAP32[$19 + 12 >> 2] | 0;
  if (($20 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) $retval$0$i$i$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] & 63]($19) | 0; else $retval$0$i$i$i$i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$20 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26) | 0) {
   HEAP32[$__b >> 2] = 0;
   $31 = 1;
   break;
  } else {
   $31 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 if (!$24) label = 36; else {
  $25 = HEAP32[$24 + 12 >> 2] | 0;
  if (($25 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $retval$0$i$i13$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0; else $retval$0$i$i13$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$25 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i47) | 0) label = 36; else if (!$31) label = 38;
 }
 if ((label | 0) == 36) if ($31) label = 38;
 if ((label | 0) == 38) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function _wcsnrtombs($dst, $wcs, $wn, $n) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $add15 = 0, $add35 = 0, $buf = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$054 = 0, $cnt$1 = 0, $cnt$247 = 0, $cnt$3 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $n$addr$0 = 0, $n$addr$152 = 0, $n$addr$2 = 0, $n$addr$3 = 0, $n$addr$445 = 0, $s$0 = 0, $s$139 = 0, $s$155 = 0, $s$2 = 0, $s$348 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $tobool28 = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$246 = 0, $ws = 0, $ws$promoted = 0, $ws$promoted7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp;
 $ws = sp + 256 | 0;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $tobool = ($dst | 0) != 0;
 $n$addr$0 = $tobool ? $n : 256;
 $s$0 = $tobool ? $dst : $buf;
 $$cast = $0;
 L1 : do if (($n$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $12 = $0;
  $cnt$054 = 0;
  $n$addr$152 = $n$addr$0;
  $s$155 = $s$0;
  $wn$addr$053 = $wn;
  $ws$promoted7 = $$cast;
  while (1) {
   $cmp = $wn$addr$053 >>> 0 >= $n$addr$152 >>> 0;
   if (!($cmp | $wn$addr$053 >>> 0 > 32)) {
    $11 = $12;
    $cnt$1 = $cnt$054;
    $n$addr$3 = $n$addr$152;
    $s$139 = $s$155;
    $wn$addr$1 = $wn$addr$053;
    $ws$promoted = $ws$promoted7;
    break L1;
   }
   $spec$select = $cmp ? $n$addr$152 : $wn$addr$053;
   $sub = $wn$addr$053 - $spec$select | 0;
   $call = _wcsrtombs($s$155, $ws, $spec$select) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($s$155 | 0) == ($buf | 0);
   $n$addr$2 = $n$addr$152 - ($cmp11 ? 0 : $call) | 0;
   $s$2 = $cmp11 ? $s$155 : $s$155 + $call | 0;
   $add15 = $call + $cnt$054 | 0;
   $3 = HEAP32[$ws >> 2] | 0;
   $4 = $3;
   if (($n$addr$2 | 0) != 0 & ($3 | 0) != 0) {
    $12 = $4;
    $cnt$054 = $add15;
    $n$addr$152 = $n$addr$2;
    $s$155 = $s$2;
    $wn$addr$053 = $sub;
    $ws$promoted7 = $3;
   } else {
    $11 = $4;
    $cnt$1 = $add15;
    $n$addr$3 = $n$addr$2;
    $s$139 = $s$2;
    $wn$addr$1 = $sub;
    $ws$promoted = $3;
    break L1;
   }
  }
  $$pr$pre = HEAP32[$ws >> 2] | 0;
  $11 = $$pr$pre;
  $cnt$1 = -1;
  $n$addr$3 = 0;
  $s$139 = $s$155;
  $wn$addr$1 = $sub;
  $ws$promoted = $$pr$pre;
 } else {
  $11 = $0;
  $cnt$1 = 0;
  $n$addr$3 = $n$addr$0;
  $s$139 = $s$0;
  $wn$addr$1 = $wn;
  $ws$promoted = $$cast;
 } while (0);
 do if (!$ws$promoted) {
  $10 = $11;
  $cnt$3 = $cnt$1;
 } else if (($n$addr$3 | 0) != 0 & ($wn$addr$1 | 0) != 0) {
  $cnt$247 = $cnt$1;
  $incdec$ptr4 = $ws$promoted;
  $n$addr$445 = $n$addr$3;
  $s$348 = $s$139;
  $wn$addr$246 = $wn$addr$1;
  while (1) {
   $call24 = _wcrtomb($s$348, HEAP32[$incdec$ptr4 >> 2] | 0) | 0;
   if (($call24 + 1 | 0) >>> 0 < 2) {
    label = 11;
    break;
   }
   $incdec$ptr = $incdec$ptr4 + 4 | 0;
   $wn$addr$246 = $wn$addr$246 + -1 | 0;
   $n$addr$445 = $n$addr$445 - $call24 | 0;
   $add35 = $call24 + $cnt$247 | 0;
   if (!(($n$addr$445 | 0) != 0 & ($wn$addr$246 | 0) != 0)) {
    label = 13;
    break;
   } else {
    $cnt$247 = $add35;
    $incdec$ptr4 = $incdec$ptr;
    $s$348 = $s$348 + $call24 | 0;
   }
  }
  if ((label | 0) == 11) {
   $tobool28 = ($call24 | 0) == 0;
   HEAP32[$ws >> 2] = $tobool28 ? 0 : $incdec$ptr4;
   $10 = $tobool28 ? 0 : $incdec$ptr4;
   $cnt$3 = $tobool28 ? $cnt$247 : -1;
   break;
  } else if ((label | 0) == 13) {
   HEAP32[$ws >> 2] = $incdec$ptr;
   $10 = $incdec$ptr;
   $cnt$3 = $add35;
   break;
  }
 } else {
  $10 = $11;
  $cnt$3 = $cnt$1;
 } while (0);
 if ($tobool) HEAP32[$wcs >> 2] = $10;
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $9 = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $cmp44 = 0, $cmp64 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv7 = 0, $neg$0 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $tobool115 = 0, $x$047 = 0, label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $cond = HEAPU8[$0 >> 0] | 0;
 } else $cond = ___shgetc($f) | 0;
 switch ($cond | 0) {
 case 43:
 case 45:
  {
   $conv7 = ($cond | 0) == 45 & 1;
   $3 = HEAP32[$rpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $3 + 1;
    $cond19 = HEAPU8[$3 >> 0] | 0;
   } else $cond19 = ___shgetc($f) | 0;
   $sub = $cond19 + -48 | 0;
   if (($pok | 0) != 0 & $sub >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
    $45 = -2147483648;
    $46 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    label = 15;
   } else {
    $c$0 = $cond19;
    $neg$0 = $conv7;
    $sub31$pre$phiZ2D = $sub;
    label = 12;
   }
   break;
  }
 default:
  {
   $c$0 = $cond;
   $neg$0 = 0;
   $sub31$pre$phiZ2D = $cond + -48 | 0;
   label = 12;
  }
 }
 do if ((label | 0) == 12) {
  if ($sub31$pre$phiZ2D >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
   $45 = -2147483648;
   $46 = 0;
   break;
  } else {
   label = 15;
   break;
  }
  $c$146 = $c$0;
  $x$047 = 0;
  while (1) {
   $x$047 = $c$146 + -48 + ($x$047 * 10 | 0) | 0;
   $9 = HEAP32[$rpos >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $9 + 1;
    $cond60 = HEAPU8[$9 >> 0] | 0;
   } else $cond60 = ___shgetc($f) | 0;
   $cmp44 = ($cond60 + -48 | 0) >>> 0 < 10;
   if (!($cmp44 & ($x$047 | 0) < 214748364)) break; else $c$146 = $cond60;
  }
  $14 = (($x$047 | 0) < 0) << 31 >> 31;
  if ($cmp44) {
   $15 = $x$047;
   $16 = $14;
   $c$241 = $cond60;
   while (1) {
    $17 = ___muldi3($15 | 0, $16 | 0, 10, 0) | 0;
    $18 = getTempRet0() | 0;
    $21 = _i64Add($c$241 | 0, (($c$241 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $15 = _i64Add($21 | 0, getTempRet0() | 0, $17 | 0, $18 | 0) | 0;
    $16 = getTempRet0() | 0;
    $25 = HEAP32[$rpos >> 2] | 0;
    if ($25 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $25 + 1;
     $cond87 = HEAPU8[$25 >> 0] | 0;
    } else $cond87 = ___shgetc($f) | 0;
    $cmp64 = ($cond87 + -48 | 0) >>> 0 < 10;
    if (!($cmp64 & (($16 | 0) < 21474836 | ($16 | 0) == 21474836 & $15 >>> 0 < 2061584302))) break; else $c$241 = $cond87;
   }
   if ($cmp64) {
    do {
     $34 = HEAP32[$rpos >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $34 + 1;
      $cond106 = HEAPU8[$34 >> 0] | 0;
     } else $cond106 = ___shgetc($f) | 0;
    } while (($cond106 + -48 | 0) >>> 0 < 10);
    $39 = $15;
    $40 = $16;
   } else {
    $39 = $15;
    $40 = $16;
   }
  } else {
   $39 = $x$047;
   $40 = $14;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $tobool115 = ($neg$0 | 0) == 0;
  $41 = _i64Subtract(0, 0, $39 | 0, $40 | 0) | 0;
  $42 = getTempRet0() | 0;
  $45 = $tobool115 ? $40 : $42;
  $46 = $tobool115 ? $39 : $41;
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $45 = -2147483648;
  $46 = 0;
 }
 setTempRet0($45 | 0);
 return $46 | 0;
}

function _silk_NLSF_decode($pNLSF_Q15, $NLSFIndices, $psNLSF_CB) {
 $pNLSF_Q15 = $pNLSF_Q15 | 0;
 $NLSFIndices = $NLSFIndices | 0;
 $psNLSF_CB = $psNLSF_CB | 0;
 var $$pre12 = 0, $0 = 0, $11 = 0, $21 = 0, $add = 0, $add26$i = 0, $arrayidx$i3 = 0, $arrayidx10 = 0, $arrayidx16 = 0, $cmp22$i = 0, $cond = 0, $conv$i = 0, $conv$i1 = 0, $conv17$i = 0, $conv18 = 0, $conv18$lcssa = 0, $conv5$i5 = 0, $conv9$pre$phiZ2D = 0, $deltaMin_Q15 = 0, $ec_sel_ptr$024$i = 0, $i$019$in$i = 0, $i$023$i = 0, $i$028 = 0, $mul = 0, $order$i = 0, $out_Q10$018$i = 0, $out_Q10$1$i = 0, $pred_Q8 = 0, $res_Q10 = 0, $shl$i = 0, $shr$i = 0, $sub$i = 0, label = 0, sp = 0, $i$019$in$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $pred_Q8 = sp + 32 | 0;
 $res_Q10 = sp;
 $order$i = $psNLSF_CB + 2 | 0;
 $0 = HEAP16[$order$i >> 1] | 0;
 $cmp22$i = $0 << 16 >> 16 > 0;
 if ($cmp22$i) {
  $conv$i1 = $0 << 16 >> 16;
  $arrayidx$i3 = (HEAP32[$psNLSF_CB + 24 >> 2] | 0) + ((Math_imul($conv$i1, HEAP8[$NLSFIndices >> 0] | 0) | 0) / 2 | 0) | 0;
  $$pre12 = HEAP32[$psNLSF_CB + 20 >> 2] | 0;
  $ec_sel_ptr$024$i = $arrayidx$i3;
  $i$023$i = 0;
  while (1) {
   $conv5$i5 = HEAPU8[$ec_sel_ptr$024$i >> 0] | 0;
   $sub$i = $conv$i1 + -1 | 0;
   HEAP8[$pred_Q8 + $i$023$i >> 0] = HEAP8[$$pre12 + (($sub$i & 0 - ($conv5$i5 & 1)) + $i$023$i) >> 0] | 0;
   $add26$i = $i$023$i | 1;
   HEAP8[$pred_Q8 + $add26$i >> 0] = HEAP8[$$pre12 + ($add26$i + ($sub$i & 0 - ($conv5$i5 >>> 4 & 1))) >> 0] | 0;
   $i$023$i = $i$023$i + 2 | 0;
   if (($i$023$i | 0) >= ($conv$i1 | 0)) break; else $ec_sel_ptr$024$i = $ec_sel_ptr$024$i + 1 | 0;
  }
  if ($cmp22$i) {
   $conv$i = $0 << 16 >> 16;
   $conv17$i = HEAP16[$psNLSF_CB + 4 >> 1] | 0;
   $i$019$in$i = $conv$i;
   $out_Q10$018$i = 0;
   do {
    $i$019$in$i$looptemp = $i$019$in$i;
    $i$019$in$i = $i$019$in$i + -1 | 0;
    $shr$i = (Math_imul($out_Q10$018$i << 16 >> 16, HEAPU8[$pred_Q8 + $i$019$in$i >> 0] | 0) | 0) >> 8;
    $11 = HEAP8[$NLSFIndices + $i$019$in$i$looptemp >> 0] | 0;
    $shl$i = $11 << 24 >> 24 << 10;
    if ($11 << 24 >> 24 > 0) $out_Q10$1$i = $shl$i + -102 | 0; else $out_Q10$1$i = $11 << 24 >> 24 == 0 ? $shl$i : $shl$i | 102;
    $out_Q10$018$i = (Math_imul($out_Q10$1$i >> 16, $conv17$i) | 0) + $shr$i + ((Math_imul($out_Q10$1$i & 65535, $conv17$i) | 0) >> 16) | 0;
    HEAP16[$res_Q10 + ($i$019$in$i << 1) >> 1] = $out_Q10$018$i;
   } while (($i$019$in$i$looptemp | 0) > 1);
   $conv9$pre$phiZ2D = $conv$i;
  } else label = 5;
 } else label = 5;
 if ((label | 0) == 5) $conv9$pre$phiZ2D = $0 << 16 >> 16;
 $mul = Math_imul($conv9$pre$phiZ2D, HEAP8[$NLSFIndices >> 0] | 0) | 0;
 $arrayidx10 = (HEAP32[$psNLSF_CB + 8 >> 2] | 0) + $mul | 0;
 $arrayidx16 = (HEAP32[$psNLSF_CB + 12 >> 2] | 0) + ($mul << 1) | 0;
 if (!$cmp22$i) {
  $conv18$lcssa = $conv9$pre$phiZ2D;
  $deltaMin_Q15 = $psNLSF_CB + 36 | 0;
  $21 = HEAP32[$deltaMin_Q15 >> 2] | 0;
  _silk_NLSF_stabilize($pNLSF_Q15, $21, $conv18$lcssa);
  STACKTOP = sp;
  return;
 }
 $i$028 = 0;
 do {
  $add = (HEAPU8[$arrayidx10 + $i$028 >> 0] << 7) + ((HEAP16[$res_Q10 + ($i$028 << 1) >> 1] << 14 | 0) / (HEAP16[$arrayidx16 + ($i$028 << 1) >> 1] | 0) | 0) | 0;
  $cond = ($add | 0) > 0 ? $add : 0;
  HEAP16[$pNLSF_Q15 + ($i$028 << 1) >> 1] = ($cond | 0) < 32767 ? $cond : 32767;
  $i$028 = $i$028 + 1 | 0;
  $conv18 = HEAP16[$order$i >> 1] | 0;
 } while (($i$028 | 0) < ($conv18 | 0));
 $conv18$lcssa = $conv18;
 $deltaMin_Q15 = $psNLSF_CB + 36 | 0;
 $21 = HEAP32[$deltaMin_Q15 >> 2] | 0;
 _silk_NLSF_stabilize($pNLSF_Q15, $21, $conv18$lcssa);
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter($out, $in, $B, $len, $d) {
 $out = $out | 0;
 $in = $in | 0;
 $B = $B | 0;
 $len = $len | 0;
 $d = $d | 0;
 var $add = 0, $add$us = 0, $add21 = 0, $add21$us = 0, $add27 = 0, $add27$us = 0, $add33 = 0, $add33$us = 0, $add39 = 0, $add50$us = 0, $arrayidx = 0, $arrayidx$us = 0, $arrayidx13 = 0, $arrayidx18 = 0, $arrayidx24 = 0, $arrayidx30 = 0, $arrayidx36 = 0, $ix$050 = 0, $ix$050$us = 0, $j$048$us = 0, $mul = 0, $mul$us = 0, $mul78 = 0, $out32_Q12$047$us = 0, $shr65 = 0, $shr65$us = 0, $sub63 = 0, $sub63$us = 0;
 if (($d | 0) <= 5) _celt_fatal(52962, 52987, 67);
 if ($d & 1 | 0) _celt_fatal(53014, 52987, 68);
 if (($d | 0) > ($len | 0)) _celt_fatal(53045, 52987, 69);
 if (($d | 0) >= ($len | 0)) {
  $mul78 = $d << 1;
  _memset($out | 0, 0, $mul78 | 0) | 0;
  return;
 }
 $arrayidx13 = $B + 2 | 0;
 $arrayidx18 = $B + 4 | 0;
 $arrayidx24 = $B + 6 | 0;
 $arrayidx30 = $B + 8 | 0;
 $arrayidx36 = $B + 10 | 0;
 if (($d | 0) <= 6) {
  $ix$050 = 6;
  do {
   $arrayidx = $in + ($ix$050 + -1 << 1) | 0;
   $mul = Math_imul(HEAP16[$B >> 1] | 0, HEAP16[$arrayidx >> 1] | 0) | 0;
   $add = (Math_imul(HEAP16[$arrayidx13 >> 1] | 0, HEAP16[$arrayidx + -2 >> 1] | 0) | 0) + $mul | 0;
   $add21 = $add + (Math_imul(HEAP16[$arrayidx18 >> 1] | 0, HEAP16[$arrayidx + -4 >> 1] | 0) | 0) | 0;
   $add27 = $add21 + (Math_imul(HEAP16[$arrayidx24 >> 1] | 0, HEAP16[$arrayidx + -6 >> 1] | 0) | 0) | 0;
   $add33 = $add27 + (Math_imul(HEAP16[$arrayidx30 >> 1] | 0, HEAP16[$arrayidx + -8 >> 1] | 0) | 0) | 0;
   $add39 = $add33 + (Math_imul(HEAP16[$arrayidx36 >> 1] | 0, HEAP16[$arrayidx + -10 >> 1] | 0) | 0) | 0;
   $sub63 = (HEAP16[$in + ($ix$050 << 1) >> 1] << 12) - $add39 | 0;
   $shr65 = ($sub63 >> 11) + 1 >> 1;
   HEAP16[$out + ($ix$050 << 1) >> 1] = ($sub63 | 0) > 134215679 ? 32767 : (($shr65 | 0) > -32768 ? $shr65 : -32768) & 65535;
   $ix$050 = $ix$050 + 1 | 0;
  } while (($ix$050 | 0) != ($len | 0));
  $mul78 = $d << 1;
  _memset($out | 0, 0, $mul78 | 0) | 0;
  return;
 }
 $ix$050$us = $d;
 do {
  $arrayidx$us = $in + ($ix$050$us + -1 << 1) | 0;
  $mul$us = Math_imul(HEAP16[$B >> 1] | 0, HEAP16[$arrayidx$us >> 1] | 0) | 0;
  $add$us = (Math_imul(HEAP16[$arrayidx13 >> 1] | 0, HEAP16[$arrayidx$us + -2 >> 1] | 0) | 0) + $mul$us | 0;
  $add21$us = $add$us + (Math_imul(HEAP16[$arrayidx18 >> 1] | 0, HEAP16[$arrayidx$us + -4 >> 1] | 0) | 0) | 0;
  $add27$us = $add21$us + (Math_imul(HEAP16[$arrayidx24 >> 1] | 0, HEAP16[$arrayidx$us + -6 >> 1] | 0) | 0) | 0;
  $add33$us = $add27$us + (Math_imul(HEAP16[$arrayidx30 >> 1] | 0, HEAP16[$arrayidx$us + -8 >> 1] | 0) | 0) | 0;
  $j$048$us = 6;
  $out32_Q12$047$us = $add33$us + (Math_imul(HEAP16[$arrayidx36 >> 1] | 0, HEAP16[$arrayidx$us + -10 >> 1] | 0) | 0) | 0;
  do {
   $add50$us = (Math_imul(HEAP16[$B + ($j$048$us << 1) >> 1] | 0, HEAP16[$arrayidx$us + (0 - $j$048$us << 1) >> 1] | 0) | 0) + $out32_Q12$047$us | 0;
   $out32_Q12$047$us = $add50$us + (Math_imul(HEAP16[$B + (($j$048$us | 1) << 1) >> 1] | 0, HEAP16[$arrayidx$us + (~$j$048$us << 1) >> 1] | 0) | 0) | 0;
   $j$048$us = $j$048$us + 2 | 0;
  } while (($j$048$us | 0) < ($d | 0));
  $sub63$us = (HEAP16[$in + ($ix$050$us << 1) >> 1] << 12) - $out32_Q12$047$us | 0;
  $shr65$us = ($sub63$us >> 11) + 1 >> 1;
  HEAP16[$out + ($ix$050$us << 1) >> 1] = ($sub63$us | 0) > 134215679 ? 32767 : (($shr65$us | 0) > -32768 ? $shr65$us : -32768) & 65535;
  $ix$050$us = $ix$050$us + 1 | 0;
 } while (($ix$050$us | 0) != ($len | 0));
 $mul78 = $d << 1;
 _memset($out | 0, 0, $mul78 | 0) | 0;
 return;
}

function _silk_InitEncoder($encState, $arch, $encStatus) {
 $encState = $encState | 0;
 $arch = $arch | 0;
 $encStatus = $encStatus | 0;
 var $11 = 0, $14 = 0, $inWBmodeWithoutVariableLP$i = 0, dest = 0, stop = 0;
 _memset($encState | 0, 0, 20216) | 0;
 HEAP32[$encState + 5092 >> 2] = $arch;
 HEAP32[$encState + 8 >> 2] = 193536;
 HEAP32[$encState + 12 >> 2] = 193536;
 HEAP32[$encState + 4664 >> 2] = 1;
 dest = $encState + 36 | 0;
 stop = dest + 60 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$encState + 128 >> 2] = 50;
 HEAP32[$encState + 132 >> 2] = 25;
 HEAP32[$encState + 136 >> 2] = 16;
 HEAP32[$encState + 140 >> 2] = 12;
 HEAP32[$encState + 96 >> 2] = 5e3;
 HEAP32[$encState + 112 >> 2] = 429496;
 HEAP32[$encState + 100 >> 2] = 2500;
 HEAP32[$encState + 116 >> 2] = 858993;
 HEAP32[$encState + 104 >> 2] = 1600;
 HEAP32[$encState + 120 >> 2] = 1342177;
 HEAP32[$encState + 108 >> 2] = 1200;
 HEAP32[$encState + 124 >> 2] = 1789569;
 HEAP32[$encState + 144 >> 2] = 15;
 HEAP32[$encState + 76 >> 2] = 25600;
 HEAP32[$encState + 80 >> 2] = 25600;
 HEAP32[$encState + 84 >> 2] = 25600;
 HEAP32[$encState + 88 >> 2] = 25600;
 _memset($encState + 10064 | 0, 0, 10064) | 0;
 HEAP32[$encState + 15156 >> 2] = $arch;
 HEAP32[$encState + 10072 >> 2] = 193536;
 HEAP32[$encState + 10076 >> 2] = 193536;
 HEAP32[$encState + 14728 >> 2] = 1;
 dest = $encState + 10100 | 0;
 stop = dest + 60 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$encState + 10192 >> 2] = 50;
 HEAP32[$encState + 10196 >> 2] = 25;
 HEAP32[$encState + 10200 >> 2] = 16;
 HEAP32[$encState + 10204 >> 2] = 12;
 HEAP32[$encState + 10160 >> 2] = 5e3;
 HEAP32[$encState + 10176 >> 2] = 429496;
 HEAP32[$encState + 10164 >> 2] = 2500;
 HEAP32[$encState + 10180 >> 2] = 858993;
 HEAP32[$encState + 10168 >> 2] = 1600;
 HEAP32[$encState + 10184 >> 2] = 1342177;
 HEAP32[$encState + 10172 >> 2] = 1200;
 HEAP32[$encState + 10188 >> 2] = 1789569;
 HEAP32[$encState + 10208 >> 2] = 15;
 HEAP32[$encState + 10140 >> 2] = 25600;
 HEAP32[$encState + 10144 >> 2] = 25600;
 HEAP32[$encState + 10148 >> 2] = 25600;
 HEAP32[$encState + 10152 >> 2] = 25600;
 HEAP32[$encState + 20192 >> 2] = 1;
 HEAP32[$encState + 20196 >> 2] = 1;
 HEAP32[$encStatus >> 2] = 1;
 HEAP32[$encStatus + 4 >> 2] = 1;
 HEAP32[$encStatus + 8 >> 2] = HEAP32[$encState + 4556 >> 2];
 HEAP32[$encStatus + 12 >> 2] = HEAP32[$encState + 4564 >> 2];
 HEAP32[$encStatus + 16 >> 2] = HEAP32[$encState + 4568 >> 2];
 HEAP32[$encStatus + 20 >> 2] = HEAP32[$encState + 4572 >> 2];
 HEAP32[$encStatus + 24 >> 2] = HEAP32[$encState + 4612 >> 2];
 HEAP32[$encStatus + 28 >> 2] = HEAP32[$encState + 4608 >> 2];
 HEAP32[$encStatus + 32 >> 2] = HEAP32[$encState + 4616 >> 2];
 HEAP32[$encStatus + 36 >> 2] = HEAP32[$encState + 4624 >> 2];
 HEAP32[$encStatus + 40 >> 2] = HEAP32[$encState + 6088 >> 2];
 HEAP32[$encStatus + 48 >> 2] = HEAP32[$encState + 6076 >> 2];
 HEAP32[$encStatus + 52 >> 2] = HEAP32[$encState + 4676 >> 2];
 $11 = HEAP32[$encState + 4576 >> 2] | 0;
 HEAP32[$encStatus + 72 >> 2] = ($11 << 16 >> 16) * 1e3;
 HEAP32[$encStatus + 76 >> 2] = HEAP32[$encState + 4536 >> 2];
 if (($11 | 0) != 16) {
  $14 = 0;
  $inWBmodeWithoutVariableLP$i = $encStatus + 80 | 0;
  HEAP32[$inWBmodeWithoutVariableLP$i >> 2] = $14;
  return;
 }
 $14 = (HEAP32[$encState + 28 >> 2] | 0) == 0 & 1;
 $inWBmodeWithoutVariableLP$i = $encStatus + 80 | 0;
 HEAP32[$inWBmodeWithoutVariableLP$i >> 2] = $14;
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre64 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $add101 = 0, $and85 = 0, $arrayidx = 0, $conv = 0, $conv73 = 0, $incdec$ptr168 = 0, $retval$4 = 0, $sub$ptr$lhs$cast67 = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre64 = $to_end;
 $sub$ptr$lhs$cast67 = $frm_end;
 $0 = HEAP32[$frm_nxt >> 2] | 0;
 L1 : while (1) {
  if ($0 >>> 0 >= $frm_end >>> 0) {
   $retval$4 = 0;
   break;
  }
  $1 = HEAP16[$0 >> 1] | 0;
  $conv = $1 & 65535;
  do if (($1 & 65535) < 128) {
   $2 = HEAP32[$to_nxt >> 2] | 0;
   if (($$pre64 - $2 | 0) < 1) {
    $retval$4 = 1;
    break L1;
   }
   HEAP32[$to_nxt >> 2] = $2 + 1;
   HEAP8[$2 >> 0] = $1;
  } else {
   if (($1 & 65535) < 2048) {
    $3 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre64 - $3 | 0) < 2) {
     $retval$4 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = $conv >>> 6 | 192;
    $5 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $conv & 63 | 128;
    break;
   }
   if (($1 & 65535) < 55296) {
    $6 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre64 - $6 | 0) < 3) {
     $retval$4 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $conv >>> 12 | 224;
    $9 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $9 + 1;
    HEAP8[$9 >> 0] = $conv >>> 6 & 63 | 128;
    $10 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $conv & 63 | 128;
    break;
   }
   if (($1 & 65535) >= 56320) {
    if (($1 & 65535) < 57344) {
     $retval$4 = 2;
     break L1;
    }
    $21 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre64 - $21 | 0) < 3) {
     $retval$4 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $conv >>> 12 | 224;
    $24 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $24 + 1;
    HEAP8[$24 >> 0] = $conv >>> 6 & 63 | 128;
    $25 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $conv & 63 | 128;
    break;
   }
   if (($sub$ptr$lhs$cast67 - $0 | 0) < 4) {
    $retval$4 = 1;
    break L1;
   }
   $arrayidx = $0 + 2 | 0;
   $conv73 = HEAPU16[$arrayidx >> 1] | 0;
   if (($conv73 & 64512 | 0) != 56320) {
    $retval$4 = 2;
    break L1;
   }
   if (($$pre64 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
    $retval$4 = 1;
    break L1;
   }
   $and85 = $conv & 960;
   if ((($and85 << 10) + 65536 | 0) >>> 0 > 1114111) {
    $retval$4 = 2;
    break L1;
   }
   HEAP32[$frm_nxt >> 2] = $arrayidx;
   $add101 = ($and85 >>> 6) + 1 | 0;
   $15 = HEAP32[$to_nxt >> 2] | 0;
   HEAP32[$to_nxt >> 2] = $15 + 1;
   HEAP8[$15 >> 0] = $add101 >>> 2 | 240;
   $17 = HEAP32[$to_nxt >> 2] | 0;
   HEAP32[$to_nxt >> 2] = $17 + 1;
   HEAP8[$17 >> 0] = $conv >>> 2 & 15 | $add101 << 4 & 48 | 128;
   $19 = HEAP32[$to_nxt >> 2] | 0;
   HEAP32[$to_nxt >> 2] = $19 + 1;
   HEAP8[$19 >> 0] = $conv << 4 & 48 | $conv73 >>> 6 & 15 | 128;
   $20 = HEAP32[$to_nxt >> 2] | 0;
   HEAP32[$to_nxt >> 2] = $20 + 1;
   HEAP8[$20 >> 0] = $conv73 & 63 | 128;
  } while (0);
  $incdec$ptr168 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
  HEAP32[$frm_nxt >> 2] = $incdec$ptr168;
  $0 = $incdec$ptr168;
 }
 return $retval$4 | 0;
}

function _wcsrtombs($s, $ws, $n) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, $call = 0, $call$pn = 0, $call15 = 0, $call37 = 0, $n$addr$061 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0, $n$addr$270 = 0, $n$addr$3 = 0, $n$addr$465 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$071 = 0, $s$addr$1 = 0, $s$addr$266 = 0, $s$addr$3 = 0, $ws2$062 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 L1 : do if (!$s) {
  $0 = HEAP32[$ws >> 2] | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  if (!$1) $retval$0 = 0; else {
   $2 = $1;
   $n$addr$061 = 0;
   $ws2$062 = $0;
   while (1) {
    if ($2 >>> 0 > 127) {
     $call = _wcrtomb($buf, $2) | 0;
     if (($call | 0) == -1) {
      $retval$0 = -1;
      break L1;
     } else $call$pn = $call;
    } else $call$pn = 1;
    $n$addr$1 = $call$pn + $n$addr$061 | 0;
    $ws2$062 = $ws2$062 + 4 | 0;
    $2 = HEAP32[$ws2$062 >> 2] | 0;
    if (!$2) {
     $retval$0 = $n$addr$1;
     break;
    } else $n$addr$061 = $n$addr$1;
   }
  }
 } else {
  L10 : do if ($n >>> 0 > 3) {
   $5 = HEAP32[$ws >> 2] | 0;
   $n$addr$270 = $n;
   $s$addr$071 = $s;
   while (1) {
    $4 = HEAP32[$5 >> 2] | 0;
    if (($4 + -1 | 0) >>> 0 > 126) {
     if (!$4) break;
     $call15 = _wcrtomb($s$addr$071, $4) | 0;
     if (($call15 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     $6 = $5;
     $n$addr$3 = $n$addr$270 - $call15 | 0;
     $s$addr$1 = $s$addr$071 + $call15 | 0;
    } else {
     HEAP8[$s$addr$071 >> 0] = $4;
     $6 = HEAP32[$ws >> 2] | 0;
     $n$addr$3 = $n$addr$270 + -1 | 0;
     $s$addr$1 = $s$addr$071 + 1 | 0;
    }
    $5 = $6 + 4 | 0;
    HEAP32[$ws >> 2] = $5;
    if ($n$addr$3 >>> 0 <= 3) {
     $n$addr$2$lcssa = $n$addr$3;
     $s$addr$0$lcssa = $s$addr$1;
     break L10;
    } else {
     $n$addr$270 = $n$addr$3;
     $s$addr$071 = $s$addr$1;
    }
   }
   HEAP8[$s$addr$071 >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $retval$0 = $n - $n$addr$270 | 0;
   break L1;
  } else {
   $n$addr$2$lcssa = $n;
   $s$addr$0$lcssa = $s;
  } while (0);
  if (!$n$addr$2$lcssa) $retval$0 = $n; else {
   $8 = HEAP32[$ws >> 2] | 0;
   $n$addr$465 = $n$addr$2$lcssa;
   $s$addr$266 = $s$addr$0$lcssa;
   while (1) {
    $7 = HEAP32[$8 >> 2] | 0;
    if (($7 + -1 | 0) >>> 0 > 126) {
     if (!$7) {
      label = 20;
      break;
     }
     $call37 = _wcrtomb($buf, $7) | 0;
     if (($call37 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     if ($n$addr$465 >>> 0 < $call37 >>> 0) {
      label = 23;
      break;
     }
     _wcrtomb($s$addr$266, HEAP32[$8 >> 2] | 0) | 0;
     $10 = $8;
     $n$addr$5 = $n$addr$465 - $call37 | 0;
     $s$addr$3 = $s$addr$266 + $call37 | 0;
    } else {
     HEAP8[$s$addr$266 >> 0] = $7;
     $10 = HEAP32[$ws >> 2] | 0;
     $n$addr$5 = $n$addr$465 + -1 | 0;
     $s$addr$3 = $s$addr$266 + 1 | 0;
    }
    $8 = $10 + 4 | 0;
    HEAP32[$ws >> 2] = $8;
    if (!$n$addr$5) {
     $retval$0 = $n;
     break L1;
    } else {
     $n$addr$465 = $n$addr$5;
     $s$addr$266 = $s$addr$3;
    }
   }
   if ((label | 0) == 20) {
    HEAP8[$s$addr$266 >> 0] = 0;
    HEAP32[$ws >> 2] = 0;
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   } else if ((label | 0) == 23) {
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $ref$tmp40 = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 58472, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = $__nar;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 do if (($8 | 0) == ($__nar | 0)) {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } else {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $ref$tmp40 = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 66148, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = $__nar;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 do if (($8 | 0) == ($__nar | 0)) {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } else {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $ref$tmp40 = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 58472, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = $__nar;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 if (($8 | 0) == ($__nar | 0)) {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $ref$tmp40 = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 66148, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = $__nar;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 if (($8 | 0) == ($__nar | 0)) {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $__ob$0, HEAP32[$__op >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function _compute_dense($layer, $output, $input) {
 $layer = $layer | 0;
 $output = $output | 0;
 $input = $input | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $11 = 0.0, $12 = 0.0, $14 = 0.0, $3 = 0, $6 = 0.0, $arrayidx14 = 0, $arrayidx23 = 0, $arrayidx6 = 0, $arrayidx7$us$i = 0, $cmp42 = 0, $cmp7$i = 0, $cmp7$i$i = 0, $conv10$i = 0, $conv10$i$i = 0, $conv4$us$i = 0.0, $i$012$us$i = 0, $i$043 = 0, $i$141 = 0, $i$239 = 0, $i$337 = 0, $j$010$us$i = 0, $mul$i34 = 0.0, $retval$0$i = 0.0, $retval$0$i$i = 0.0, $sub13$i = 0.0, $sub13$i$i = 0.0, $x$addr$0$i = 0.0, $x$addr$0$i$i = 0.0;
 $0 = HEAP32[$layer + 8 >> 2] | 0;
 $1 = HEAP32[$layer + 12 >> 2] | 0;
 $cmp42 = ($1 | 0) > 0;
 if ($cmp42) {
  $$pre = HEAP32[$layer >> 2] | 0;
  $i$043 = 0;
  do {
   HEAPF32[$output + ($i$043 << 2) >> 2] = +(HEAP8[$$pre + $i$043 >> 0] | 0);
   $i$043 = $i$043 + 1 | 0;
  } while (($i$043 | 0) != ($1 | 0));
  $3 = HEAP32[$layer + 4 >> 2] | 0;
  if (($0 | 0) > 0) {
   $i$012$us$i = 0;
   do {
    $arrayidx7$us$i = $output + ($i$012$us$i << 2) | 0;
    $6 = +HEAPF32[$arrayidx7$us$i >> 2];
    $j$010$us$i = 0;
    do {
     $conv4$us$i = +(HEAP8[$3 + ((Math_imul($j$010$us$i, $1) | 0) + $i$012$us$i) >> 0] | 0);
     $6 = $6 + +HEAPF32[$input + ($j$010$us$i << 2) >> 2] * $conv4$us$i;
     HEAPF32[$arrayidx7$us$i >> 2] = $6;
     $j$010$us$i = $j$010$us$i + 1 | 0;
    } while (($j$010$us$i | 0) != ($0 | 0));
    $i$012$us$i = $i$012$us$i + 1 | 0;
   } while (($i$012$us$i | 0) != ($1 | 0));
  }
  $i$141 = 0;
  do {
   $arrayidx6 = $output + ($i$141 << 2) | 0;
   HEAPF32[$arrayidx6 >> 2] = +HEAPF32[$arrayidx6 >> 2] * .0078125;
   $i$141 = $i$141 + 1 | 0;
  } while (($i$141 | 0) != ($1 | 0));
 }
 if (!(HEAP32[$layer + 16 >> 2] | 0)) {
  if (!$cmp42) return;
  $i$337 = 0;
  do {
   $arrayidx23 = $output + ($i$337 << 2) | 0;
   $12 = +HEAPF32[$arrayidx23 >> 2];
   if ($12 < 8.0) if ($12 > -8.0) if ($12 != $12 | 0.0 != 0.0) $retval$0$i = 0.0; else {
    $cmp7$i = $12 < 0.0;
    $x$addr$0$i = $cmp7$i ? -$12 : $12;
    $conv10$i = ~~+Math_floor(+($x$addr$0$i * 25.0 + .5));
    $sub13$i = $x$addr$0$i - +($conv10$i | 0) * .03999999910593033;
    $14 = +HEAPF32[29008 + ($conv10$i << 2) >> 2];
    $retval$0$i = ($cmp7$i ? -1.0 : 1.0) * ($14 + (1.0 - $sub13$i * $14) * ($sub13$i * (1.0 - $14 * $14)));
   } else $retval$0$i = -1.0; else $retval$0$i = 1.0;
   HEAPF32[$arrayidx23 >> 2] = $retval$0$i;
   $i$337 = $i$337 + 1 | 0;
  } while (($i$337 | 0) != ($1 | 0));
  return;
 } else {
  if (!$cmp42) return;
  $i$239 = 0;
  do {
   $arrayidx14 = $output + ($i$239 << 2) | 0;
   $mul$i34 = +HEAPF32[$arrayidx14 >> 2] * .5;
   if ($mul$i34 < 8.0) if ($mul$i34 > -8.0) if ($mul$i34 != $mul$i34 | 0.0 != 0.0) $retval$0$i$i = .5; else {
    $cmp7$i$i = $mul$i34 < 0.0;
    $x$addr$0$i$i = $cmp7$i$i ? -$mul$i34 : $mul$i34;
    $conv10$i$i = ~~+Math_floor(+($x$addr$0$i$i * 25.0 + .5));
    $sub13$i$i = $x$addr$0$i$i - +($conv10$i$i | 0) * .03999999910593033;
    $11 = +HEAPF32[29008 + ($conv10$i$i << 2) >> 2];
    $retval$0$i$i = ($cmp7$i$i ? -1.0 : 1.0) * ($11 + (1.0 - $sub13$i$i * $11) * ($sub13$i$i * (1.0 - $11 * $11))) * .5 + .5;
   } else $retval$0$i$i = 0.0; else $retval$0$i$i = 1.0;
   HEAPF32[$arrayidx14 >> 2] = $retval$0$i$i;
   $i$239 = $i$239 + 1 | 0;
  } while (($i$239 | 0) != ($1 | 0));
  return;
 }
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $5 = 0, $conv14 = 0, $conv142 = 0, $conv145 = 0, $conv36 = 0, $conv80 = 0, $incdec$ptr184 = 0, $or164 = 0, $or164$sink = 0, $retval$9 = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre = $frm_end;
 $1 = $to;
 L1 : while (1) {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  if ($0 >>> 0 >= $frm_end >>> 0) {
   $retval$9 = 0;
   break;
  }
  if ($1 >>> 0 >= $to_end >>> 0) {
   $retval$9 = 1;
   break;
  }
  $2 = HEAP8[$0 >> 0] | 0;
  $conv14 = $2 & 255;
  do if ($2 << 24 >> 24 > -1) {
   $$sink = 1;
   $or164$sink = $conv14;
  } else {
   if (($2 & 255) < 194) {
    $retval$9 = 2;
    break L1;
   }
   if (($2 & 255) < 224) {
    if (($$pre - $0 | 0) < 2) {
     $retval$9 = 1;
     break L1;
    }
    $conv36 = HEAPU8[$0 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L1;
    }
    $$sink = 2;
    $or164$sink = $conv36 & 63 | $conv14 << 6 & 1984;
    break;
   }
   if (($2 & 255) < 240) {
    if (($$pre - $0 | 0) < 3) {
     $retval$9 = 1;
     break L1;
    }
    $4 = HEAP8[$0 + 1 >> 0] | 0;
    $5 = HEAP8[$0 + 2 >> 0] | 0;
    switch ($2 << 24 >> 24) {
    case -32:
     {
      if (($4 & -32) << 24 >> 24 != -96) {
       $retval$9 = 2;
       break L1;
      }
      break;
     }
    case -19:
     {
      if (($4 & -32) << 24 >> 24 != -128) {
       $retval$9 = 2;
       break L1;
      }
      break;
     }
    default:
     if (($4 & -64) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L1;
     }
    }
    $conv80 = $5 & 255;
    if (($conv80 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L1;
    }
    $$sink = 3;
    $or164$sink = ($4 & 63) << 6 | $conv14 << 12 & 61440 | $conv80 & 63;
    break;
   }
   if (($2 & 255) >= 245) {
    $retval$9 = 2;
    break L1;
   }
   if (($$pre - $0 | 0) < 4) {
    $retval$9 = 1;
    break L1;
   }
   $10 = HEAP8[$0 + 1 >> 0] | 0;
   $11 = HEAP8[$0 + 2 >> 0] | 0;
   $12 = HEAP8[$0 + 3 >> 0] | 0;
   switch ($2 << 24 >> 24) {
   case -16:
    {
     if (($10 + 112 & 255) >= 48) {
      $retval$9 = 2;
      break L1;
     }
     break;
    }
   case -12:
    {
     if (($10 & -16) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L1;
     }
     break;
    }
   default:
    if (($10 & -64) << 24 >> 24 != -128) {
     $retval$9 = 2;
     break L1;
    }
   }
   $conv142 = $11 & 255;
   if (($conv142 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L1;
   }
   $conv145 = $12 & 255;
   if (($conv145 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L1;
   }
   $or164 = ($10 & 63) << 12 | $conv14 << 18 & 1835008 | $conv142 << 6 & 4032 | $conv145 & 63;
   if ($or164 >>> 0 > 1114111) {
    $retval$9 = 2;
    break L1;
   } else {
    $$sink = 4;
    $or164$sink = $or164;
   }
  } while (0);
  HEAP32[$1 >> 2] = $or164$sink;
  HEAP32[$frm_nxt >> 2] = $0 + $$sink;
  $incdec$ptr184 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  HEAP32[$to_nxt >> 2] = $incdec$ptr184;
  $1 = $incdec$ptr184;
 }
 return $retval$9 | 0;
}

function _silk_setup_resamplers($psEnc, $fs_kHz) {
 $psEnc = $psEnc | 0;
 $fs_kHz = $fs_kHz | 0;
 var $0 = 0, $14 = 0, $5 = 0, $API_fs_Hz = 0, $API_fs_Hz11 = 0, $API_fs_Hz26 = 0, $API_fs_Hz53$pre$phiZ2D = 0, $add14 = 0, $call$i = 0, $fs_kHz1 = 0, $k$011$in$i = 0, $k$07$in$i = 0, $mul17 = 0, $mul18 = 0, $mul31 = 0, $prev_API_fs_Hz55 = 0, $resampler_state37 = 0, $spec$select$i = 0, $temp_resampler_state = 0, $vla = 0, $vla32 = 0, sp = 0, $k$011$in$i$looptemp = 0, $k$07$in$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $temp_resampler_state = sp;
 $fs_kHz1 = $psEnc + 4576 | 0;
 $0 = HEAP32[$fs_kHz1 >> 2] | 0;
 if (($0 | 0) == ($fs_kHz | 0)) {
  $API_fs_Hz = $psEnc + 4556 | 0;
  if ((HEAP32[$psEnc + 4560 >> 2] | 0) == (HEAP32[$API_fs_Hz >> 2] | 0)) {
   $API_fs_Hz53$pre$phiZ2D = $API_fs_Hz;
   $14 = HEAP32[$API_fs_Hz53$pre$phiZ2D >> 2] | 0;
   $prev_API_fs_Hz55 = $psEnc + 4560 | 0;
   HEAP32[$prev_API_fs_Hz55 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 }
 if (!$0) {
  $API_fs_Hz11 = $psEnc + 4556 | 0;
  _silk_resampler_init($psEnc + 5776 | 0, HEAP32[$API_fs_Hz11 >> 2] | 0, $fs_kHz * 1e3 | 0, 1);
  $API_fs_Hz53$pre$phiZ2D = $API_fs_Hz11;
  $14 = HEAP32[$API_fs_Hz53$pre$phiZ2D >> 2] | 0;
  $prev_API_fs_Hz55 = $psEnc + 4560 | 0;
  HEAP32[$prev_API_fs_Hz55 >> 2] = $14;
  STACKTOP = sp;
  return;
 }
 $add14 = ((HEAP32[$psEnc + 4580 >> 2] | 0) * 10 | 0) + 5 | 0;
 $mul17 = Math_imul($add14, $0) | 0;
 $mul18 = Math_imul($add14, $fs_kHz) | 0;
 $5 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((($mul17 | 0) > ($mul18 | 0) ? $mul17 : $mul18) << 1) | 0) + 15 & -16) | 0;
 if (($mul17 | 0) > 0) {
  $k$011$in$i = $mul17;
  do {
   $k$011$in$i$looptemp = $k$011$in$i;
   $k$011$in$i = $k$011$in$i + -1 | 0;
   $call$i = _lrintf(+HEAPF32[$psEnc + 7180 + ($k$011$in$i << 2) >> 2]) | 0;
   $spec$select$i = ($call$i | 0) > -32768 ? $call$i : -32768;
   HEAP16[$vla + ($k$011$in$i << 1) >> 1] = ($spec$select$i | 0) < 32767 ? $spec$select$i : 32767;
  } while (($k$011$in$i$looptemp | 0) > 1);
 }
 $API_fs_Hz26 = $psEnc + 4556 | 0;
 _silk_resampler_init($temp_resampler_state, (HEAP32[$fs_kHz1 >> 2] << 16 >> 16) * 1e3 | 0, HEAP32[$API_fs_Hz26 >> 2] | 0, 0);
 $mul31 = Math_imul((HEAP32[$API_fs_Hz26 >> 2] | 0) / 1e3 | 0, $add14) | 0;
 $vla32 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul31 << 1) | 0) + 15 & -16) | 0;
 _silk_resampler($temp_resampler_state, $vla32, $vla, $mul17);
 $resampler_state37 = $psEnc + 5776 | 0;
 _silk_resampler_init($resampler_state37, HEAP32[$API_fs_Hz26 >> 2] | 0, ($fs_kHz << 16 >> 16) * 1e3 | 0, 1);
 _silk_resampler($resampler_state37, $vla, $vla32, $mul31);
 if (($mul18 | 0) > 0) {
  $k$07$in$i = $mul18;
  do {
   $k$07$in$i$looptemp = $k$07$in$i;
   $k$07$in$i = $k$07$in$i + -1 | 0;
   HEAPF32[$psEnc + 7180 + ($k$07$in$i << 2) >> 2] = +(HEAP16[$vla + ($k$07$in$i << 1) >> 1] | 0);
  } while (($k$07$in$i$looptemp | 0) > 1);
 }
 _llvm_stackrestore($5 | 0);
 $API_fs_Hz53$pre$phiZ2D = $API_fs_Hz26;
 $14 = HEAP32[$API_fs_Hz53$pre$phiZ2D >> 2] | 0;
 $prev_API_fs_Hz55 = $psEnc + 4560 | 0;
 HEAP32[$prev_API_fs_Hz55 >> 2] = $14;
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp1 = 0, $retval$1 = 0, $sub$ptr$div19 = 0, $sub$ptr$sub18 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp1 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$cmp1) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp1 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (($__ct | 0) == ($__thousands_sep | 0) ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 104 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub18 = $__first$addr$0$lcssa$i - $__atoms | 0;
  $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
  if (($sub$ptr$sub18 | 0) > 92) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$div19 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub18 | 0) >= 88) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[41392 + $sub$ptr$div19 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[41392 + $sub$ptr$div19 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function _alg_quant($X, $N, $K, $spread, $B, $enc, $gain, $resynth) {
 $X = $X | 0;
 $N = $N | 0;
 $K = $K | 0;
 $spread = $spread | 0;
 $B = $B | 0;
 $enc = $enc | 0;
 $gain = +$gain;
 $resynth = $resynth | 0;
 var $0 = 0, $4 = 0, $add$i$i = 0, $add$i4 = 0, $add25$i$i = 0, $call = 0.0, $collapse_mask$0$i = 0, $div$i$i = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i21 = 0, $i$1$i$i = 0, $j$0$i = 0, $j$0$i$i = 0, $k$0$i$i = 0, $mul$i = 0.0, $mul$i22 = 0, $or4$i = 0, $retval$0$i = 0, $sub$i$i = 0, $sub3$i$i = 0, $tmp$0$i = 0, $vla = 0, sp = 0, $j$0$i$i$looptemp = 0;
 sp = STACKTOP;
 if (($K | 0) <= 0) _celt_fatal(49789, 49848, 338);
 if (($N | 0) <= 1) _celt_fatal(49858, 49848, 339);
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($N + 3 << 2) | 0) + 15 & -16) | 0;
 _exp_rotation($X, $N, 1, $B, $K, $spread);
 $call = +_op_pvq_search_c($X, $vla, $K, $N);
 $sub$i$i = $N + -1 | 0;
 $0 = HEAP32[$vla + ($sub$i$i << 2) >> 2] | 0;
 $i$0$i$i = $0 >>> 31;
 $j$0$i$i = $sub$i$i;
 $k$0$i$i = ($0 | 0) > -1 ? $0 : 0 - $0 | 0;
 while (1) {
  $j$0$i$i$looptemp = $j$0$i$i;
  $j$0$i$i = $j$0$i$i + -1 | 0;
  $sub3$i$i = $N - $j$0$i$i | 0;
  $add$i$i = (HEAP32[(HEAP32[592 + ((($sub3$i$i | 0) < ($k$0$i$i | 0) ? $sub3$i$i : $k$0$i$i) << 2) >> 2] | 0) + ((($sub3$i$i | 0) > ($k$0$i$i | 0) ? $sub3$i$i : $k$0$i$i) << 2) >> 2] | 0) + $i$0$i$i | 0;
  $4 = HEAP32[$vla + ($j$0$i$i << 2) >> 2] | 0;
  $k$0$i$i = (($4 | 0) > -1 ? $4 : 0 - $4 | 0) + $k$0$i$i | 0;
  $add25$i$i = $k$0$i$i + 1 | 0;
  if (($4 | 0) < 0) $i$1$i$i = (HEAP32[(HEAP32[592 + ((($sub3$i$i | 0) > ($k$0$i$i | 0) ? $add25$i$i : $sub3$i$i) << 2) >> 2] | 0) + ((($sub3$i$i | 0) > ($add25$i$i | 0) ? $sub3$i$i : $add25$i$i) << 2) >> 2] | 0) + $add$i$i | 0; else $i$1$i$i = $add$i$i;
  if (($j$0$i$i$looptemp | 0) <= 1) break; else $i$0$i$i = $i$1$i$i;
 }
 $add$i4 = $K + 1 | 0;
 _ec_enc_uint($enc, $i$1$i$i, (HEAP32[(HEAP32[592 + ((($add$i4 | 0) > ($N | 0) ? $N : $add$i4) << 2) >> 2] | 0) + ((($add$i4 | 0) < ($N | 0) ? $N : $add$i4) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + ((($N | 0) < ($K | 0) ? $N : $K) << 2) >> 2] | 0) + ((($N | 0) > ($K | 0) ? $N : $K) << 2) >> 2] | 0) | 0);
 if ($resynth | 0) {
  $mul$i = 1.0 / +Math_sqrt(+$call) * $gain;
  $i$0$i = 0;
  do {
   HEAPF32[$X + ($i$0$i << 2) >> 2] = $mul$i * +(HEAP32[$vla + ($i$0$i << 2) >> 2] | 0);
   $i$0$i = $i$0$i + 1 | 0;
  } while (($i$0$i | 0) != ($N | 0));
  _exp_rotation($X, $N, -1, $B, $K, $spread);
 }
 if (($B | 0) < 2) {
  $retval$0$i = 1;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 $div$i$i = ($N >>> 0) / ($B >>> 0) | 0;
 $collapse_mask$0$i = 0;
 $i$0$i21 = 0;
 while (1) {
  $mul$i22 = Math_imul($i$0$i21, $div$i$i) | 0;
  $j$0$i = 0;
  $tmp$0$i = 0;
  do {
   $tmp$0$i = HEAP32[$vla + ($j$0$i + $mul$i22 << 2) >> 2] | $tmp$0$i;
   $j$0$i = $j$0$i + 1 | 0;
  } while (($j$0$i | 0) < ($div$i$i | 0));
  $or4$i = (($tmp$0$i | 0) != 0 & 1) << $i$0$i21 | $collapse_mask$0$i;
  $i$0$i21 = $i$0$i21 + 1 | 0;
  if (($i$0$i21 | 0) == ($B | 0)) {
   $retval$0$i = $or4$i;
   break;
  } else $collapse_mask$0$i = $or4$i;
 }
 STACKTOP = sp;
 return $retval$0$i | 0;
}

function _ec_enc_icdf($_this, $_s, $_icdf, $_ftb) {
 $_this = $_this | 0;
 $_s = $_s | 0;
 $_icdf = $_icdf | 0;
 $_ftb = $_ftb | 0;
 var $0 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $conv$i20$i$i = 0, $end_offs$i$i$i = 0, $error$i$i = 0, $ext15$i$i = 0, $mul = 0, $nbits_total$i = 0, $offs$i$i$i = 0, $rem$i$i = 0, $retval$0$i$i$i = 0, $retval$0$i25$i$i = 0, $rng = 0, $shr = 0, $shr$i = 0, $shr$i7$i = 0, $storage$i$i$i = 0, $storemerge = 0, $val = 0, $val$i = 0;
 $rng = $_this + 28 | 0;
 $0 = HEAP32[$rng >> 2] | 0;
 $shr = $0 >>> $_ftb;
 if (($_s | 0) > 0) {
  $arrayidx = $_icdf + ($_s + -1) | 0;
  $mul = Math_imul($shr, HEAPU8[$arrayidx >> 0] | 0) | 0;
  $val = $_this + 32 | 0;
  HEAP32[$val >> 2] = (HEAP32[$val >> 2] | 0) + $0 - $mul;
  $storemerge = Math_imul((HEAPU8[$arrayidx >> 0] | 0) - (HEAPU8[$_icdf + $_s >> 0] | 0) | 0, $shr) | 0;
 } else $storemerge = $0 - (Math_imul($shr, HEAPU8[$_icdf + $_s >> 0] | 0) | 0) | 0;
 HEAP32[$rng >> 2] = $storemerge;
 if ($storemerge >>> 0 >= 8388609) return;
 $val$i = $_this + 32 | 0;
 $ext15$i$i = $_this + 36 | 0;
 $nbits_total$i = $_this + 20 | 0;
 $rem$i$i = $_this + 40 | 0;
 $offs$i$i$i = $_this + 24 | 0;
 $end_offs$i$i$i = $_this + 8 | 0;
 $storage$i$i$i = $_this + 4 | 0;
 $error$i$i = $_this + 44 | 0;
 $24 = $storemerge;
 $6 = HEAP32[$val$i >> 2] | 0;
 do {
  $shr$i = $6 >>> 23;
  if (($shr$i | 0) == 255) {
   HEAP32[$ext15$i$i >> 2] = (HEAP32[$ext15$i$i >> 2] | 0) + 1;
   $21 = $6;
   $22 = $24;
  } else {
   $shr$i7$i = $6 >>> 31;
   $7 = HEAP32[$rem$i$i >> 2] | 0;
   if (($7 | 0) > -1) {
    $8 = HEAP32[$offs$i$i$i >> 2] | 0;
    if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $8 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
     $11 = HEAP32[$_this >> 2] | 0;
     HEAP32[$offs$i$i$i >> 2] = $8 + 1;
     HEAP8[$11 + $8 >> 0] = $7 + $shr$i7$i;
     $retval$0$i$i$i = 0;
    } else $retval$0$i$i$i = -1;
    HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i$i$i;
   }
   $13 = HEAP32[$ext15$i$i >> 2] | 0;
   if ($13 | 0) {
    $conv$i20$i$i = $shr$i7$i + 255 & 255;
    $25 = $13;
    do {
     $14 = HEAP32[$offs$i$i$i >> 2] | 0;
     if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $14 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
      $17 = HEAP32[$_this >> 2] | 0;
      HEAP32[$offs$i$i$i >> 2] = $14 + 1;
      HEAP8[$17 + $14 >> 0] = $conv$i20$i$i;
      $19 = HEAP32[$ext15$i$i >> 2] | 0;
      $retval$0$i25$i$i = 0;
     } else {
      $19 = $25;
      $retval$0$i25$i$i = -1;
     }
     HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i25$i$i;
     $25 = $19 + -1 | 0;
     HEAP32[$ext15$i$i >> 2] = $25;
    } while (($25 | 0) != 0);
   }
   HEAP32[$rem$i$i >> 2] = $shr$i & 255;
   $21 = HEAP32[$val$i >> 2] | 0;
   $22 = HEAP32[$rng >> 2] | 0;
  }
  $6 = $21 << 8 & 2147483392;
  HEAP32[$val$i >> 2] = $6;
  $24 = $22 << 8;
  HEAP32[$rng >> 2] = $24;
  HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 8;
 } while ($24 >>> 0 < 8388609);
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp2 = 0, $retval$1 = 0, $sub$ptr$sub25 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp2 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$cmp2) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp2 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 26 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub25 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub25 | 0) > 23) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$sub25 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub25 | 0) >= 22) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[41392 + $sub$ptr$sub25 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[41392 + $sub$ptr$sub25 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i8 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp$byval_copy >> 2] | 0, 65332) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 63]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 63]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 8 + 3 | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $7 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i2$i$i = $agg$tmp$byval_copy + 4 | 0;
  $10 = $7;
  $8 = $6;
  $__i$sroa$0$0 = $6 << 24 >> 24 < 0 ? $7 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i8 = $8 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i8 ? $10 : $agg$tmp$byval_copy) + (($tobool$i$i$i8 ? HEAP32[$__size_$i2$i$i >> 2] | 0 : $8 & 255) << 2) | 0)) break;
   $11 = HEAP32[$__i$sroa$0$0 >> 2] | 0;
   $12 = HEAP32[$__s >> 2] | 0;
   if ($12 | 0) {
    $__nout_$i$i = $12 + 24 | 0;
    $13 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($13 | 0) == (HEAP32[$12 + 28 >> 2] | 0)) {
     $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$15 & 15]($12, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $11;
     $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i) | 0) HEAP32[$__s >> 2] = 0;
   }
   $10 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 4 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function _ec_encode($_this, $_fl, $_fh, $_ft) {
 $_this = $_this | 0;
 $_fl = $_fl | 0;
 $_fh = $_fh | 0;
 $_ft = $_ft | 0;
 var $0 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $conv$i20$i$i = 0, $div$i = 0, $end_offs$i$i$i = 0, $error$i$i = 0, $ext15$i$i = 0, $nbits_total$i = 0, $offs$i$i$i = 0, $rem$i$i = 0, $retval$0$i$i$i = 0, $retval$0$i25$i$i = 0, $rng = 0, $shr$i = 0, $shr$i7$i = 0, $storage$i$i$i = 0, $storemerge = 0, $sub2 = 0, $val = 0, $val$i = 0;
 $rng = $_this + 28 | 0;
 $0 = HEAP32[$rng >> 2] | 0;
 $div$i = ($0 >>> 0) / ($_ft >>> 0) | 0;
 if (!$_fl) $storemerge = $0 - (Math_imul($div$i, $_ft - $_fh | 0) | 0) | 0; else {
  $sub2 = $0 - (Math_imul($div$i, $_ft - $_fl | 0) | 0) | 0;
  $val = $_this + 32 | 0;
  HEAP32[$val >> 2] = $sub2 + (HEAP32[$val >> 2] | 0);
  $storemerge = Math_imul($div$i, $_fh - $_fl | 0) | 0;
 }
 HEAP32[$rng >> 2] = $storemerge;
 if ($storemerge >>> 0 >= 8388609) return;
 $val$i = $_this + 32 | 0;
 $ext15$i$i = $_this + 36 | 0;
 $nbits_total$i = $_this + 20 | 0;
 $rem$i$i = $_this + 40 | 0;
 $offs$i$i$i = $_this + 24 | 0;
 $end_offs$i$i$i = $_this + 8 | 0;
 $storage$i$i$i = $_this + 4 | 0;
 $error$i$i = $_this + 44 | 0;
 $2 = HEAP32[$val$i >> 2] | 0;
 $20 = $storemerge;
 do {
  $shr$i = $2 >>> 23;
  if (($shr$i | 0) == 255) {
   HEAP32[$ext15$i$i >> 2] = (HEAP32[$ext15$i$i >> 2] | 0) + 1;
   $17 = $2;
   $18 = $20;
  } else {
   $shr$i7$i = $2 >>> 31;
   $3 = HEAP32[$rem$i$i >> 2] | 0;
   if (($3 | 0) > -1) {
    $4 = HEAP32[$offs$i$i$i >> 2] | 0;
    if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $4 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
     $7 = HEAP32[$_this >> 2] | 0;
     HEAP32[$offs$i$i$i >> 2] = $4 + 1;
     HEAP8[$7 + $4 >> 0] = $3 + $shr$i7$i;
     $retval$0$i$i$i = 0;
    } else $retval$0$i$i$i = -1;
    HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i$i$i;
   }
   $9 = HEAP32[$ext15$i$i >> 2] | 0;
   if ($9 | 0) {
    $conv$i20$i$i = $shr$i7$i + 255 & 255;
    $21 = $9;
    do {
     $10 = HEAP32[$offs$i$i$i >> 2] | 0;
     if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $10 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
      $13 = HEAP32[$_this >> 2] | 0;
      HEAP32[$offs$i$i$i >> 2] = $10 + 1;
      HEAP8[$13 + $10 >> 0] = $conv$i20$i$i;
      $15 = HEAP32[$ext15$i$i >> 2] | 0;
      $retval$0$i25$i$i = 0;
     } else {
      $15 = $21;
      $retval$0$i25$i$i = -1;
     }
     HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i25$i$i;
     $21 = $15 + -1 | 0;
     HEAP32[$ext15$i$i >> 2] = $21;
    } while (($21 | 0) != 0);
   }
   HEAP32[$rem$i$i >> 2] = $shr$i & 255;
   $17 = HEAP32[$val$i >> 2] | 0;
   $18 = HEAP32[$rng >> 2] | 0;
  }
  $2 = $17 << 8 & 2147483392;
  HEAP32[$val$i >> 2] = $2;
  $20 = $18 << 8;
  HEAP32[$rng >> 2] = $20;
  HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 8;
 } while ($20 >>> 0 < 8388609);
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i9 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp$byval_copy >> 2] | 0, 65308) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 63]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 63]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 11 | 0;
  $5 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $6 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i3$i$i = $agg$tmp$byval_copy + 4 | 0;
  $7 = $5;
  $9 = $6;
  $__i$sroa$0$0 = $5 << 24 >> 24 < 0 ? $6 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i9 = $7 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i9 ? $9 : $agg$tmp$byval_copy) + ($tobool$i$i$i9 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $7 & 255) | 0)) break;
   $10 = HEAP8[$__i$sroa$0$0 >> 0] | 0;
   $11 = HEAP32[$__s >> 2] | 0;
   if ($11 | 0) {
    $__nout_$i$i = $11 + 24 | 0;
    $12 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($12 | 0) == (HEAP32[$11 + 28 >> 2] | 0)) {
     $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$14 & 15]($11, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $10;
     $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i) | 0) HEAP32[$__s >> 2] = 0;
   }
   $7 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $9 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 1 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $call3 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp2$byval_copy = sp;
 $agg$tmp$byval_copy = sp + 36 | 0;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 28 | 0;
 $agg$tmp2 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  $call3 = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $call3;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = $call3;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp2$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp2$byval_copy >> 2] | 0, 65324) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp2$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp2$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp2$byval_copy >> 2] | 0, 65332) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp2$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 63]($agg$tmp2$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 63]($agg$tmp2$byval_copy + 12 | 0, $call$i16);
  $add$ptr = $agg$tmp2$byval_copy + 24 | 0;
  HEAP8[$__v >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2] | 0, $agg$tmp2$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp2$byval_copy | 0) & 1;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp2$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $call3 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp2$byval_copy = sp;
 $agg$tmp$byval_copy = sp + 36 | 0;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 28 | 0;
 $agg$tmp2 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  $call3 = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $call3;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = $call3;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp2$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp2$byval_copy >> 2] | 0, 65292) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp2$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp2$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$agg$tmp2$byval_copy >> 2] | 0, 65308) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp2$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 63]($agg$tmp2$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 63]($agg$tmp2$byval_copy + 12 | 0, $call$i16);
  $add$ptr = $agg$tmp2$byval_copy + 24 | 0;
  HEAP8[$__v >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2] | 0, $agg$tmp2$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp2$byval_copy | 0) & 1;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp2$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $5 = 0, $8 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i6380 = 0, $cond$i32 = 0, $cond$i38 = 0, $cond$i72 = 0, $cond$i74 = 0, $scevgep = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $sub$ptr$rhs$cast$i$i = $__first;
 $__temp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i32 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $cond$i74 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i32 = 10;
  $cond$i74 = $0 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i6380 = HEAP32[$this >> 2] | 0;
   $cond$i72 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i6380 = $this;
   $cond$i72 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i6380, $cond$i$i6380 + $cond$i72 | 0) | 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $5 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i = $5 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $5 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__temp);
   break;
  }
  if (($cond$i32 - $cond$i74 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i32, $cond$i74 + $sub$ptr$sub$i$i - $cond$i32 | 0, $cond$i74, $cond$i74);
   $8 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $8 = $0;
  if ($8 << 24 >> 24 < 0) $cond$i38 = HEAP32[$this >> 2] | 0; else $cond$i38 = $this;
  $scevgep = $__last + ($cond$i74 - $sub$ptr$rhs$cast$i$i) | 0;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i38 + $cond$i74 | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, HEAP8[$__first$addr$0 >> 0] | 0);
   $__first$addr$0 = $__first$addr$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i38 + $scevgep | 0, 0);
  $add20 = $cond$i74 + $sub$ptr$sub$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function _compute_mdcts($mode, $shortBlocks, $in, $out, $C, $CC, $LM, $upsample) {
 $mode = $mode | 0;
 $shortBlocks = $shortBlocks | 0;
 $in = $in | 0;
 $out = $out | 0;
 $C = $C | 0;
 $CC = $CC | 0;
 $LM = $LM | 0;
 $upsample = $upsample | 0;
 var $0 = 0, $1 = 0, $B$074 = 0, $N$076 = 0, $add$ptr$us = 0, $add$ptr6$us = 0, $add81 = 0, $arrayidx19 = 0, $arrayidx41$us = 0, $b$066$us = 0, $c$0$us = 0, $c$1 = 0, $c$1$us = 0, $conv = 0.0, $div = 0, $i$064 = 0, $i$162$us = 0, $mdct77 = 0, $mul = 0, $mul39$us = 0, $mul52 = 0, $mul79 = 0, $mul8$us = 0, $shift$075 = 0, $shl = 0, $shl$pn = 0, $window82 = 0, label = 0;
 $0 = HEAP32[$mode + 4 >> 2] | 0;
 $1 = HEAP32[$mode + 44 >> 2] | 0;
 if (!$shortBlocks) {
  $shl = $1 << $LM;
  $B$074 = 1;
  $N$076 = $shl;
  $shift$075 = (HEAP32[$mode + 36 >> 2] | 0) - $LM | 0;
  $shl$pn = $shl;
  label = 4;
 } else {
  $mul = Math_imul($1, $shortBlocks) | 0;
  if (($shortBlocks | 0) > 0) {
   $B$074 = $shortBlocks;
   $N$076 = $1;
   $shift$075 = HEAP32[$mode + 36 >> 2] | 0;
   $shl$pn = $mul;
   label = 4;
  } else $mul79 = $mul;
 }
 if ((label | 0) == 4) {
  $mdct77 = $mode + 64 | 0;
  $add81 = $shl$pn + $0 | 0;
  $window82 = $mode + 60 | 0;
  $c$0$us = 0;
  do {
   $add$ptr$us = $in + ((Math_imul($c$0$us, $add81) | 0) << 2) | 0;
   $mul8$us = Math_imul($shl$pn, $c$0$us) | 0;
   $b$066$us = 0;
   do {
    $add$ptr6$us = $add$ptr$us + ((Math_imul($b$066$us, $N$076) | 0) << 2) | 0;
    _clt_mdct_forward_c($mdct77, $add$ptr6$us, $out + ($b$066$us + $mul8$us << 2) | 0, HEAP32[$window82 >> 2] | 0, $0, $shift$075, $B$074);
    $b$066$us = $b$066$us + 1 | 0;
   } while (($b$066$us | 0) < ($B$074 | 0));
   $c$0$us = $c$0$us + 1 | 0;
  } while (($c$0$us | 0) < ($CC | 0));
  $mul79 = $shl$pn;
 }
 if (($C | 0) == 1 & ($CC | 0) == 2 & ($mul79 | 0) > 0) {
  $i$064 = 0;
  do {
   $arrayidx19 = $out + ($i$064 << 2) | 0;
   HEAPF32[$arrayidx19 >> 2] = +HEAPF32[$arrayidx19 >> 2] * .5 + +HEAPF32[$out + ($i$064 + $mul79 << 2) >> 2] * .5;
   $i$064 = $i$064 + 1 | 0;
  } while (($i$064 | 0) != ($mul79 | 0));
 }
 if (($upsample | 0) == 1) return;
 $div = ($mul79 | 0) / ($upsample | 0) | 0;
 $mul52 = $mul79 - $div << 2;
 $conv = +($upsample | 0);
 if (($div | 0) <= 0) {
  $c$1 = 0;
  do {
   _memset($out + ((Math_imul($mul79, $c$1) | 0) + $div << 2) | 0, 0, $mul52 | 0) | 0;
   $c$1 = $c$1 + 1 | 0;
  } while (($c$1 | 0) < ($C | 0));
  return;
 }
 $c$1$us = 0;
 do {
  $mul39$us = Math_imul($mul79, $c$1$us) | 0;
  $i$162$us = 0;
  do {
   $arrayidx41$us = $out + ($i$162$us + $mul39$us << 2) | 0;
   HEAPF32[$arrayidx41$us >> 2] = +HEAPF32[$arrayidx41$us >> 2] * $conv;
   $i$162$us = $i$162$us + 1 | 0;
  } while (($i$162$us | 0) != ($div | 0));
  _memset($out + ($mul39$us + $div << 2) | 0, 0, $mul52 | 0) | 0;
  $c$1$us = $c$1$us + 1 | 0;
 } while (($c$1$us | 0) < ($C | 0));
 return;
}

function _silk_NLSF_VQ_weights_laroia($pNLSFW_Q_OUT, $pNLSF_Q15, $D) {
 $pNLSFW_Q_OUT = $pNLSFW_Q_OUT | 0;
 $pNLSF_Q15 = $pNLSF_Q15 | 0;
 $D = $D | 0;
 var $6 = 0, $add = 0, $add16 = 0, $add24 = 0, $add37 = 0, $add49 = 0, $arrayidx17 = 0, $arrayidx44 = 0, $arrayidx53 = 0, $cmp$i35 = 0, $cmp$i37 = 0, $cond$i36 = 0, $cond$i38 = 0, $conv = 0, $conv45 = 0, $conv51 = 0, $div23 = 0, $div36 = 0, $div48 = 0, $div9 = 0, $k$052 = 0, $sub = 0, $sub13 = 0, $sub21 = 0, $sub34 = 0, $sub46 = 0, $tmp2_int$0$lcssa = 0, $tmp2_int$053 = 0;
 if (($D | 0) <= 0) _celt_fatal(53129, 53153, 51);
 if ($D & 1 | 0) _celt_fatal(53183, 53153, 52);
 $conv = HEAP16[$pNLSF_Q15 >> 1] | 0;
 $sub = (HEAP16[$pNLSF_Q15 + 2 >> 1] | 0) - $conv | 0;
 $div9 = 131072 / ((($sub | 0) > 1 ? $sub : 1) >>> 0) | 0;
 $add = $div9 + (131072 / ((($conv | 0) > 1 ? $conv : 1) >>> 0) | 0) | 0;
 HEAP16[$pNLSFW_Q_OUT >> 1] = $add >>> 0 < 32767 ? $add : 32767;
 $sub13 = $D + -1 | 0;
 if (($D | 0) <= 2) {
  $tmp2_int$0$lcssa = $div9;
  $arrayidx44 = $pNLSF_Q15 + ($sub13 << 1) | 0;
  $6 = HEAP16[$arrayidx44 >> 1] | 0;
  $conv45 = $6 << 16 >> 16;
  $sub46 = 32768 - $conv45 | 0;
  $cmp$i37 = ($sub46 | 0) > 1;
  $cond$i38 = $cmp$i37 ? $sub46 : 1;
  $div48 = 131072 / ($cond$i38 >>> 0) | 0;
  $add49 = $div48 + $tmp2_int$0$lcssa | 0;
  $cmp$i35 = $add49 >>> 0 < 32767;
  $cond$i36 = $cmp$i35 ? $add49 : 32767;
  $conv51 = $cond$i36 & 65535;
  $arrayidx53 = $pNLSFW_Q_OUT + ($sub13 << 1) | 0;
  HEAP16[$arrayidx53 >> 1] = $conv51;
  return;
 }
 $k$052 = 1;
 $tmp2_int$053 = $div9;
 while (1) {
  $add16 = $k$052 + 1 | 0;
  $arrayidx17 = $pNLSF_Q15 + ($add16 << 1) | 0;
  $sub21 = (HEAP16[$arrayidx17 >> 1] | 0) - (HEAP16[$pNLSF_Q15 + ($k$052 << 1) >> 1] | 0) | 0;
  $div23 = 131072 / ((($sub21 | 0) > 1 ? $sub21 : 1) >>> 0) | 0;
  $add24 = $div23 + $tmp2_int$053 | 0;
  HEAP16[$pNLSFW_Q_OUT + ($k$052 << 1) >> 1] = $add24 >>> 0 < 32767 ? $add24 : 32767;
  $k$052 = $k$052 + 2 | 0;
  $sub34 = (HEAP16[$pNLSF_Q15 + ($k$052 << 1) >> 1] | 0) - (HEAP16[$arrayidx17 >> 1] | 0) | 0;
  $div36 = 131072 / ((($sub34 | 0) > 1 ? $sub34 : 1) >>> 0) | 0;
  $add37 = $div36 + $div23 | 0;
  HEAP16[$pNLSFW_Q_OUT + ($add16 << 1) >> 1] = $add37 >>> 0 < 32767 ? $add37 : 32767;
  if (($k$052 | 0) >= ($sub13 | 0)) {
   $tmp2_int$0$lcssa = $div36;
   break;
  } else $tmp2_int$053 = $div36;
 }
 $arrayidx44 = $pNLSF_Q15 + ($sub13 << 1) | 0;
 $6 = HEAP16[$arrayidx44 >> 1] | 0;
 $conv45 = $6 << 16 >> 16;
 $sub46 = 32768 - $conv45 | 0;
 $cmp$i37 = ($sub46 | 0) > 1;
 $cond$i38 = $cmp$i37 ? $sub46 : 1;
 $div48 = 131072 / ($cond$i38 >>> 0) | 0;
 $add49 = $div48 + $tmp2_int$0$lcssa | 0;
 $cmp$i35 = $add49 >>> 0 < 32767;
 $cond$i36 = $cmp$i35 ? $add49 : 32767;
 $conv51 = $cond$i36 & 65535;
 $arrayidx53 = $pNLSFW_Q_OUT + ($sub13 << 1) | 0;
 HEAP16[$arrayidx53 >> 1] = $conv51;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $10 = 0, $7 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i5874 = 0, $cond$i31 = 0, $cond$i36 = 0, $cond$i66 = 0, $cond$i68 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__temp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i31 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $cond$i68 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i31 = 1;
  $cond$i68 = $1 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i5874 = HEAP32[$this >> 2] | 0;
   $cond$i66 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i5874 = $this;
   $cond$i66 = $1 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__first, $cond$i$i5874, $cond$i$i5874 + ($cond$i66 << 2) | 0) | 0) {
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $7 = HEAP8[$__temp + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $7 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__temp);
   break;
  }
  if (($cond$i31 - $cond$i68 | 0) >>> 0 < $sub$ptr$div$i$i >>> 0) {
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $cond$i31, $cond$i68 + $sub$ptr$div$i$i - $cond$i31 | 0, $cond$i68, $cond$i68);
   $10 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $10 = $1;
  if ($10 << 24 >> 24 < 0) $cond$i36 = HEAP32[$this >> 2] | 0; else $cond$i36 = $this;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i36 + ($cond$i68 << 2) | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, HEAP32[$__first$addr$0 >> 2] | 0);
   $__first$addr$0 = $__first$addr$0 + 4 | 0;
   $__p$0 = $__p$0 + 4 | 0;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, 0);
  $add20 = $cond$i68 + $sub$ptr$div$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63624] | 0)) if (___cxa_guard_acquire(63624) | 0) {
  $arrayctor$cur = 63008;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 63296);
  ___cxa_guard_release(63624);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63008, 45616) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63020, 45648) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63032, 45684) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63044, 45708) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63056, 45732) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63068, 45748) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63080, 45768) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63092, 45788) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63104, 45816) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63116, 45856) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63128, 45888) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63140, 45924) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63152, 45960) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63164, 45976) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63176, 45992) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63188, 46008) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63200, 45732) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63212, 46024) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63224, 46040) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63236, 46056) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63248, 46072) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63260, 46088) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63272, 46104) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63284, 46120) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63544] | 0)) if (___cxa_guard_acquire(63544) | 0) {
  $arrayctor$cur = 62512;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 62800);
  ___cxa_guard_release(63544);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62512, 58747) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62524, 58755) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62536, 58764) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62548, 58770) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62560, 58776) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62572, 58780) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62584, 58785) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62596, 58790) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62608, 58797) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62620, 58807) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62632, 58815) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62644, 58824) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62656, 58833) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62668, 58837) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62680, 58841) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62692, 58845) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62704, 58776) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62716, 58849) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62728, 58853) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62740, 58857) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62752, 58861) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62764, 58865) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62776, 58869) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62788, 58873) | 0;
 return;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $4 = 0, $6 = 0, $7 = 0, $c$036 = 0, $c$2 = 0, $conv42 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $n$addr$035 = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0, $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 $spec$select = ($st | 0) == 0 ? 64228 : $st;
 $0 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$src) if (!$0) $retval$0 = 0; else label = 19; else {
  $spec$select32 = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $retval$0 = -2; else {
   if (!$0) {
    $1 = HEAP8[$src >> 0] | 0;
    if ($1 << 24 >> 24 > -1) {
     HEAP32[$spec$select32 >> 2] = $1 & 255;
     $retval$0 = $1 << 24 >> 24 != 0 & 1;
     break;
    }
    if (!(HEAP32[HEAP32[11892] >> 2] | 0)) {
     HEAP32[$spec$select32 >> 2] = $1 << 24 >> 24 & 57343;
     $retval$0 = 1;
     break;
    }
    $sub = ($1 & 255) + -194 | 0;
    if ($sub >>> 0 > 50) {
     label = 19;
     break;
    }
    $4 = HEAP32[36480 + ($sub << 2) >> 2] | 0;
    $dec = $n + -1 | 0;
    if (!$dec) $c$2 = $4; else {
     $c$036 = $4;
     $n$addr$035 = $dec;
     $s$037 = $src + 1 | 0;
     label = 11;
    }
   } else {
    $c$036 = $0;
    $n$addr$035 = $n;
    $s$037 = $src;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $conv42 = HEAPU8[$s$037 >> 0] | 0;
    $6 = $conv42 >>> 3;
    if (($6 + -16 | $6 + ($c$036 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $or5446 = $conv42 + -128 | $c$036 << 6;
    $dec5547 = $n$addr$035 + -1 | 0;
    if (($or5446 | 0) < 0) {
     $dec5551 = $dec5547;
     $or5450 = $or5446;
     $s$037$pn = $s$037;
     while (1) {
      $s$037$pn = $s$037$pn + 1 | 0;
      if (!$dec5551) {
       $c$2 = $or5450;
       break L14;
      }
      $7 = HEAP8[$s$037$pn >> 0] | 0;
      if (($7 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $or54 = ($7 & 255) + -128 | $or5450 << 6;
      $dec55 = $dec5551 + -1 | 0;
      if (($or54 | 0) >= 0) {
       $dec55$lcssa = $dec55;
       $or54$lcssa = $or54;
       break;
      } else {
       $dec5551 = $dec55;
       $or5450 = $or54;
      }
     }
    } else {
     $dec55$lcssa = $dec5547;
     $or54$lcssa = $or5446;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select32 >> 2] = $or54$lcssa;
    $retval$0 = $n - $dec55$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $c$2;
   $retval$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  HEAP32[16056] = 25;
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _ec_enc_bit_logp($_this, $_val, $_logp) {
 $_this = $_this | 0;
 $_val = $_val | 0;
 $_logp = $_logp | 0;
 var $0 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $cond = 0, $conv$i20$i$i = 0, $end_offs$i$i$i = 0, $error$i$i = 0, $ext15$i$i = 0, $nbits_total$i = 0, $offs$i$i$i = 0, $rem$i$i = 0, $retval$0$i$i$i = 0, $retval$0$i25$i$i = 0, $rng = 0, $shr = 0, $shr$i = 0, $shr$i7$i = 0, $storage$i$i$i = 0, $sub = 0, $tobool = 0, $val = 0;
 $rng = $_this + 28 | 0;
 $0 = HEAP32[$rng >> 2] | 0;
 $val = $_this + 32 | 0;
 $shr = $0 >>> $_logp;
 $sub = $0 - $shr | 0;
 $tobool = ($_val | 0) != 0;
 if ($tobool) HEAP32[$val >> 2] = (HEAP32[$val >> 2] | 0) + $sub;
 $cond = $tobool ? $shr : $sub;
 HEAP32[$rng >> 2] = $cond;
 if ($cond >>> 0 >= 8388609) return;
 $ext15$i$i = $_this + 36 | 0;
 $nbits_total$i = $_this + 20 | 0;
 $rem$i$i = $_this + 40 | 0;
 $offs$i$i$i = $_this + 24 | 0;
 $end_offs$i$i$i = $_this + 8 | 0;
 $storage$i$i$i = $_this + 4 | 0;
 $error$i$i = $_this + 44 | 0;
 $2 = HEAP32[$val >> 2] | 0;
 $20 = $cond;
 do {
  $shr$i = $2 >>> 23;
  if (($shr$i | 0) == 255) {
   HEAP32[$ext15$i$i >> 2] = (HEAP32[$ext15$i$i >> 2] | 0) + 1;
   $17 = $2;
   $18 = $20;
  } else {
   $shr$i7$i = $2 >>> 31;
   $3 = HEAP32[$rem$i$i >> 2] | 0;
   if (($3 | 0) > -1) {
    $4 = HEAP32[$offs$i$i$i >> 2] | 0;
    if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $4 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
     $7 = HEAP32[$_this >> 2] | 0;
     HEAP32[$offs$i$i$i >> 2] = $4 + 1;
     HEAP8[$7 + $4 >> 0] = $3 + $shr$i7$i;
     $retval$0$i$i$i = 0;
    } else $retval$0$i$i$i = -1;
    HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i$i$i;
   }
   $9 = HEAP32[$ext15$i$i >> 2] | 0;
   if ($9 | 0) {
    $conv$i20$i$i = $shr$i7$i + 255 & 255;
    $21 = $9;
    do {
     $10 = HEAP32[$offs$i$i$i >> 2] | 0;
     if (((HEAP32[$end_offs$i$i$i >> 2] | 0) + $10 | 0) >>> 0 < (HEAP32[$storage$i$i$i >> 2] | 0) >>> 0) {
      $13 = HEAP32[$_this >> 2] | 0;
      HEAP32[$offs$i$i$i >> 2] = $10 + 1;
      HEAP8[$13 + $10 >> 0] = $conv$i20$i$i;
      $15 = HEAP32[$ext15$i$i >> 2] | 0;
      $retval$0$i25$i$i = 0;
     } else {
      $15 = $21;
      $retval$0$i25$i$i = -1;
     }
     HEAP32[$error$i$i >> 2] = HEAP32[$error$i$i >> 2] | $retval$0$i25$i$i;
     $21 = $15 + -1 | 0;
     HEAP32[$ext15$i$i >> 2] = $21;
    } while (($21 | 0) != 0);
   }
   HEAP32[$rem$i$i >> 2] = $shr$i & 255;
   $17 = HEAP32[$val >> 2] | 0;
   $18 = HEAP32[$rng >> 2] | 0;
  }
  $2 = $17 << 8 & 2147483392;
  HEAP32[$val >> 2] = $2;
  $20 = $18 << 8;
  HEAP32[$rng >> 2] = $20;
  HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + 8;
 } while ($20 >>> 0 < 8388609);
 return;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   _pop_arg_long_double($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _silk_resampler_private_up2_HQ($S, $out, $in, $len) {
 $S = $S | 0;
 $out = $out | 0;
 $in = $in | 0;
 $len = $len | 0;
 var $add = 0, $add10076 = 0, $add19 = 0, $add21 = 0, $add2272 = 0, $add36 = 0, $add3773 = 0, $add68 = 0, $add7 = 0, $add70 = 0, $add7174 = 0, $add82 = 0, $add84 = 0, $add8575 = 0, $add871 = 0, $add99 = 0, $arrayidx10 = 0, $arrayidx24 = 0, $arrayidx59 = 0, $arrayidx73 = 0, $arrayidx87 = 0, $k$070 = 0, $mul57 = 0, $shl = 0, $sub = 0, $sub11 = 0, $sub25 = 0, $sub60 = 0, $sub74 = 0, $sub88 = 0;
 if (($len | 0) <= 0) return;
 $arrayidx10 = $S + 4 | 0;
 $arrayidx24 = $S + 8 | 0;
 $arrayidx59 = $S + 12 | 0;
 $arrayidx73 = $S + 16 | 0;
 $arrayidx87 = $S + 20 | 0;
 $add10076 = HEAP32[$arrayidx87 >> 2] | 0;
 $add2272 = HEAP32[$arrayidx10 >> 2] | 0;
 $add3773 = HEAP32[$arrayidx24 >> 2] | 0;
 $add7174 = HEAP32[$arrayidx59 >> 2] | 0;
 $add8575 = HEAP32[$arrayidx73 >> 2] | 0;
 $add871 = HEAP32[$S >> 2] | 0;
 $k$070 = 0;
 do {
  $shl = HEAP16[$in + ($k$070 << 1) >> 1] << 10;
  $sub = $shl - $add871 | 0;
  $add = ((($sub & 65535) * 1746 | 0) >>> 16) + (($sub >> 16) * 1746 | 0) | 0;
  $add7 = $add + $add871 | 0;
  $add871 = $add + $shl | 0;
  $sub11 = $add7 - $add2272 | 0;
  $add19 = ((($sub11 & 65535) * 14986 | 0) >>> 16) + (($sub11 >> 16) * 14986 | 0) | 0;
  $add21 = $add19 + $add2272 | 0;
  $add2272 = $add19 + $add7 | 0;
  $sub25 = $add21 - $add3773 | 0;
  $add36 = ((Math_imul($sub25 & 65535, -26453) | 0) >> 16) + (Math_imul($sub25 >> 16, -26453) | 0) + $add21 | 0;
  $add3773 = $add36 + $sub25 | 0;
  $mul57 = $k$070 << 1;
  HEAP16[$out + ($mul57 << 1) >> 1] = ($add36 | 0) > 33553919 ? 32767 : ($add36 | 0) < -33554944 ? -32768 : (($add36 >>> 9) + 1 | 0) >>> 1 & 65535;
  $sub60 = $shl - $add7174 | 0;
  $add68 = ((($sub60 & 65535) * 6854 | 0) >>> 16) + (($sub60 >> 16) * 6854 | 0) | 0;
  $add70 = $add68 + $add7174 | 0;
  $add7174 = $add68 + $shl | 0;
  $sub74 = $add70 - $add8575 | 0;
  $add82 = ((($sub74 & 65535) * 25769 | 0) >>> 16) + (($sub74 >> 16) * 25769 | 0) | 0;
  $add84 = $add82 + $add8575 | 0;
  $add8575 = $add82 + $add70 | 0;
  $sub88 = $add84 - $add10076 | 0;
  $add99 = ((Math_imul($sub88 & 65535, -9994) | 0) >> 16) + (Math_imul($sub88 >> 16, -9994) | 0) + $add84 | 0;
  $add10076 = $add99 + $sub88 | 0;
  HEAP16[$out + (($mul57 | 1) << 1) >> 1] = ($add99 | 0) > 33553919 ? 32767 : ($add99 | 0) < -33554944 ? -32768 : (($add99 >>> 9) + 1 | 0) >>> 1 & 65535;
  $k$070 = $k$070 + 1 | 0;
 } while (($k$070 | 0) != ($len | 0));
 HEAP32[$S >> 2] = $add871;
 HEAP32[$arrayidx10 >> 2] = $add2272;
 HEAP32[$arrayidx24 >> 2] = $add3773;
 HEAP32[$arrayidx59 >> 2] = $add7174;
 HEAP32[$arrayidx73 >> 2] = $add8575;
 HEAP32[$arrayidx87 >> 2] = $add10076;
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $$pre1$pre$phiZZ2D = 0, $0 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $retval$0 = 0, $rpos = 0, $rpos33$phi$trans$insert$pre$phiZZZZ2D = 0, $shcnt30 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0;
 $shlim = $f + 112 | 0;
 $0 = $shlim;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == 0 & ($5 | 0) == 0) label = 3; else {
  $9 = $f + 120 | 0;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  if (($14 | 0) < ($5 | 0) | (($14 | 0) == ($5 | 0) ? (HEAP32[$9 >> 2] | 0) >>> 0 < $2 >>> 0 : 0)) label = 3; else label = 4;
 }
 if ((label | 0) == 3) {
  $call = ___uflow($f) | 0;
  if (($call | 0) < 0) label = 4; else {
   $20 = $shlim;
   $22 = HEAP32[$20 >> 2] | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (($22 | 0) == 0 & ($25 | 0) == 0) {
    $$pre1$pre$phiZZ2D = $f + 4 | 0;
    $66 = $$pre;
    label = 9;
   } else {
    $rpos = $f + 4 | 0;
    $30 = HEAP32[$rpos >> 2] | 0;
    $sub$ptr$sub = $$pre - $30 | 0;
    $32 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
    $33 = $f + 120 | 0;
    $39 = _i64Subtract($22 | 0, $25 | 0, HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
    $40 = getTempRet0() | 0;
    $46 = $$pre;
    if (($40 | 0) > ($32 | 0) | ($40 | 0) == ($32 | 0) & $39 >>> 0 > $sub$ptr$sub >>> 0) {
     $$pre1$pre$phiZZ2D = $rpos;
     $66 = $46;
     label = 9;
    } else {
     HEAP32[$f + 104 >> 2] = $30 + ($39 + -1);
     $47 = $46;
     $rpos33$phi$trans$insert$pre$phiZZZZ2D = $rpos;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 104 >> 2] = $$pre;
    $47 = $66;
    $rpos33$phi$trans$insert$pre$phiZZZZ2D = $$pre1$pre$phiZZ2D;
   }
   if (!$47) $64 = HEAP32[$rpos33$phi$trans$insert$pre$phiZZZZ2D >> 2] | 0; else {
    $48 = HEAP32[$rpos33$phi$trans$insert$pre$phiZZZZ2D >> 2] | 0;
    $add = $47 + 1 - $48 | 0;
    $shcnt30 = $f + 120 | 0;
    $51 = $shcnt30;
    $57 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, $add | 0, (($add | 0) < 0) << 31 >> 31 | 0) | 0;
    $58 = getTempRet0() | 0;
    $59 = $shcnt30;
    HEAP32[$59 >> 2] = $57;
    HEAP32[$59 + 4 >> 2] = $58;
    $64 = $48;
   }
   $arrayidx = $64 + -1 | 0;
   if (($call | 0) == (HEAPU8[$arrayidx >> 0] | 0 | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 104 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__29DoIOSInitC2Ev() {
 var $0 = 0, $1 = 0, $__fmtflags_$i$i = 0, $__fmtflags_$i$i22 = 0, $vbase$offset$ptr18 = 0, $vbase$offset$ptr23 = 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t();
 HEAP32[16061] = 44520;
 HEAP32[16063] = 44540;
 HEAP32[16062] = 0;
 __ZNSt3__28ios_base4initEPv(64252, 64924);
 HEAP32[16081] = 0;
 HEAP32[16082] = -1;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t();
 HEAP32[16083] = 44560;
 HEAP32[16085] = 44580;
 HEAP32[16084] = 0;
 __ZNSt3__28ios_base4initEPv(64340, 64988);
 HEAP32[16103] = 0;
 HEAP32[16104] = -1;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(65052, 41936, 65100);
 HEAP32[16105] = 44600;
 HEAP32[16106] = 44620;
 __ZNSt3__28ios_base4initEPv(64424, 65052);
 HEAP32[16124] = 0;
 HEAP32[16125] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(65108, 41936, 65156);
 HEAP32[16126] = 44640;
 HEAP32[16127] = 44660;
 __ZNSt3__28ios_base4initEPv(64508, 65108);
 HEAP32[16145] = 0;
 HEAP32[16146] = -1;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(65164, 41648, 65212);
 HEAP32[16147] = 44600;
 HEAP32[16148] = 44620;
 __ZNSt3__28ios_base4initEPv(64592, 65164);
 HEAP32[16166] = 0;
 HEAP32[16167] = -1;
 $0 = HEAP32[64588 + (HEAP32[(HEAP32[16147] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[16189] = 44600;
 HEAP32[16190] = 44620;
 __ZNSt3__28ios_base4initEPv(64760, $0);
 HEAP32[16208] = 0;
 HEAP32[16209] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(65220, 41648, 65268);
 HEAP32[16168] = 44640;
 HEAP32[16169] = 44660;
 __ZNSt3__28ios_base4initEPv(64676, 65220);
 HEAP32[16187] = 0;
 HEAP32[16188] = -1;
 $1 = HEAP32[64672 + (HEAP32[(HEAP32[16168] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[16210] = 44640;
 HEAP32[16211] = 44660;
 __ZNSt3__28ios_base4initEPv(64844, $1);
 HEAP32[16229] = 0;
 HEAP32[16230] = -1;
 HEAP32[64244 + (HEAP32[(HEAP32[16061] | 0) + -12 >> 2] | 0) + 72 >> 2] = 64420;
 HEAP32[64332 + (HEAP32[(HEAP32[16083] | 0) + -12 >> 2] | 0) + 72 >> 2] = 64504;
 $vbase$offset$ptr18 = (HEAP32[16147] | 0) + -12 | 0;
 $__fmtflags_$i$i = 64588 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i >> 2] = HEAP32[$__fmtflags_$i$i >> 2] | 8192;
 $vbase$offset$ptr23 = (HEAP32[16168] | 0) + -12 | 0;
 $__fmtflags_$i$i22 = 64672 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i22 >> 2] = HEAP32[$__fmtflags_$i$i22 >> 2] | 8192;
 HEAP32[64588 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 72 >> 2] = 64420;
 HEAP32[64672 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 72 >> 2] = 64504;
 return;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$pre = 0, $0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $9 = 0, $conv14 = 0, $frm_nxt$1 = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0;
 $$pre = $frm_end;
 $frm_nxt$1 = $frm;
 $nchar16_t$0 = 0;
 L1 : while (1) {
  if (!($nchar16_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $0 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $0 & 255;
  do if ($0 << 24 >> 24 > -1) {
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
   $nchar16_t$2 = $nchar16_t$0;
  } else {
   if (($0 & 255) < 194) break L1;
   if (($0 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L1;
    if ((HEAP8[$frm_nxt$1 + 1 >> 0] & -64) << 24 >> 24 != -128) break L1;
    $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
    $nchar16_t$2 = $nchar16_t$0;
    break;
   }
   if (($0 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L1;
    $3 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $4 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($0 << 24 >> 24) {
    case -32:
     {
      if (!(($3 & -32) << 24 >> 24 == -96 & ($4 & -64) << 24 >> 24 == -128)) break L1;
      break;
     }
    case -19:
     {
      if (!(($3 & -32) << 24 >> 24 == -128 & ($4 & -64) << 24 >> 24 == -128)) break L1;
      break;
     }
    default:
     if (!(($3 & -64) << 24 >> 24 == -128 & ($4 & -64) << 24 >> 24 == -128)) break L1;
    }
    $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
    $nchar16_t$2 = $nchar16_t$0;
    break;
   }
   if (($0 & 255) >= 245) break L1;
   if (($mx - $nchar16_t$0 | 0) >>> 0 < 2 | ($$pre - $frm_nxt$1 | 0) < 4) break L1;
   $9 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $10 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $11 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($0 << 24 >> 24) {
   case -16:
    {
     if (!(($9 + 112 & 255) < 48 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
     break;
    }
   case -12:
    {
     if (!(($9 & -16) << 24 >> 24 == -128 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
     break;
    }
   default:
    if (!(($9 & -64) << 24 >> 24 == -128 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
   }
   if ((($9 & 48) << 12 | $conv14 << 18 & 1835008) >>> 0 > 1114111) break L1; else {
    $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
    $nchar16_t$2 = $nchar16_t$0 + 1 | 0;
   }
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar16_t$0 = $nchar16_t$2 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function _silk_A2NLSF_init($a_Q16, $P, $Q, $dd) {
 $a_Q16 = $a_Q16 | 0;
 $P = $P | 0;
 $Q = $Q | 0;
 $dd = $dd | 0;
 var $arrayidx21 = 0, $arrayidx25 = 0, $arrayidx3 = 0, $arrayidx4$i = 0, $arrayidx4$i43 = 0, $arrayidx5 = 0, $arrayidx8$i = 0, $arrayidx8$i51 = 0, $k$016$i = 0, $k$016$i36 = 0, $k$060 = 0, $k$158 = 0, $n$014$i = 0, $n$014$i40 = 0, $sub = 0, $k$158$looptemp = 0;
 HEAP32[$P + ($dd << 2) >> 2] = 65536;
 HEAP32[$Q + ($dd << 2) >> 2] = 65536;
 if (($dd | 0) <= 0) return;
 $sub = $dd + -1 | 0;
 $k$060 = 0;
 do {
  $arrayidx3 = $a_Q16 + ($sub - $k$060 << 2) | 0;
  $arrayidx5 = $a_Q16 + ($k$060 + $dd << 2) | 0;
  HEAP32[$P + ($k$060 << 2) >> 2] = 0 - ((HEAP32[$arrayidx5 >> 2] | 0) + (HEAP32[$arrayidx3 >> 2] | 0));
  HEAP32[$Q + ($k$060 << 2) >> 2] = (HEAP32[$arrayidx5 >> 2] | 0) - (HEAP32[$arrayidx3 >> 2] | 0);
  $k$060 = $k$060 + 1 | 0;
 } while (($k$060 | 0) != ($dd | 0));
 $k$158 = $dd;
 do {
  $k$158$looptemp = $k$158;
  $k$158 = $k$158 + -1 | 0;
  $arrayidx21 = $P + ($k$158 << 2) | 0;
  HEAP32[$arrayidx21 >> 2] = (HEAP32[$arrayidx21 >> 2] | 0) - (HEAP32[$P + ($k$158$looptemp << 2) >> 2] | 0);
  $arrayidx25 = $Q + ($k$158 << 2) | 0;
  HEAP32[$arrayidx25 >> 2] = (HEAP32[$arrayidx25 >> 2] | 0) + (HEAP32[$Q + ($k$158$looptemp << 2) >> 2] | 0);
 } while (($k$158$looptemp | 0) > 1);
 if (($dd | 0) < 2) return;
 $k$016$i = 2;
 while (1) {
  if (($k$016$i | 0) < ($dd | 0)) {
   $n$014$i = $dd;
   do {
    $arrayidx4$i = $P + ($n$014$i + -2 << 2) | 0;
    HEAP32[$arrayidx4$i >> 2] = (HEAP32[$arrayidx4$i >> 2] | 0) - (HEAP32[$P + ($n$014$i << 2) >> 2] | 0);
    $n$014$i = $n$014$i + -1 | 0;
   } while (($n$014$i | 0) > ($k$016$i | 0));
  }
  $arrayidx8$i = $P + ($k$016$i + -2 << 2) | 0;
  HEAP32[$arrayidx8$i >> 2] = (HEAP32[$arrayidx8$i >> 2] | 0) - (HEAP32[$P + ($k$016$i << 2) >> 2] << 1);
  if (($k$016$i | 0) == ($dd | 0)) break; else $k$016$i = $k$016$i + 1 | 0;
 }
 $k$016$i36 = 2;
 while (1) {
  if (($k$016$i36 | 0) < ($dd | 0)) {
   $n$014$i40 = $dd;
   do {
    $arrayidx4$i43 = $Q + ($n$014$i40 + -2 << 2) | 0;
    HEAP32[$arrayidx4$i43 >> 2] = (HEAP32[$arrayidx4$i43 >> 2] | 0) - (HEAP32[$Q + ($n$014$i40 << 2) >> 2] | 0);
    $n$014$i40 = $n$014$i40 + -1 | 0;
   } while (($n$014$i40 | 0) > ($k$016$i36 | 0));
  }
  $arrayidx8$i51 = $Q + ($k$016$i36 + -2 << 2) | 0;
  HEAP32[$arrayidx8$i51 >> 2] = (HEAP32[$arrayidx8$i51 >> 2] | 0) - (HEAP32[$Q + ($k$016$i36 << 2) >> 2] << 1);
  if (($k$016$i36 | 0) == ($dd | 0)) break; else $k$016$i36 = $k$016$i36 + 1 | 0;
 }
 return;
}

function _denormalise_bands($m$0$5$val, $m$0$8$val, $X, $freq, $bandLogE, $start, $end, $M, $downsample, $silence) {
 $m$0$5$val = $m$0$5$val | 0;
 $m$0$8$val = $m$0$8$val | 0;
 $X = $X | 0;
 $freq = $freq | 0;
 $bandLogE = $bandLogE | 0;
 $start = $start | 0;
 $end = $end | 0;
 $M = $M | 0;
 $downsample = $downsample | 0;
 $silence = $silence | 0;
 var $1 = 0, $3 = 0, $add29 = 0.0, $bound$0 = 0, $conv38 = 0.0, $div = 0, $f$0$lcssa = 0, $f$146 = 0, $f$2 = 0, $i$148 = 0, $j$0 = 0, $mul = 0, $mul11 = 0, $mul2 = 0, $mul23 = 0, $mul26 = 0, $spec$select = 0, $spec$select43 = 0, $spec$select44 = 0, $tobool = 0, $x$047 = 0, $x$1 = 0, $f$2$looptemp = 0, $x$1$looptemp = 0, $i$148$looptemp = 0;
 $mul = Math_imul($m$0$8$val, $M) | 0;
 $mul2 = Math_imul(HEAP16[$m$0$5$val + ($end << 1) >> 1] | 0, $M) | 0;
 if (($downsample | 0) == 1) $bound$0 = $mul2; else {
  $div = ($mul | 0) / ($downsample | 0) | 0;
  $bound$0 = ($mul2 | 0) < ($div | 0) ? $mul2 : $div;
 }
 $tobool = ($silence | 0) == 0;
 $spec$select = $tobool ? $bound$0 : 0;
 $spec$select43 = $tobool ? $end : 0;
 $spec$select44 = $tobool ? $start : 0;
 $1 = HEAP16[$m$0$5$val + ($spec$select44 << 1) >> 1] | 0;
 $mul11 = Math_imul($1 << 16 >> 16, $M) | 0;
 if (($mul11 | 0) > 0) {
  _memset($freq | 0, 0, $mul11 << 2 | 0) | 0;
  $f$0$lcssa = $freq + ($mul11 << 2) | 0;
 } else $f$0$lcssa = $freq;
 if (($spec$select44 | 0) < ($spec$select43 | 0)) {
  $3 = $1;
  $f$146 = $f$0$lcssa;
  $i$148 = $spec$select44;
  $x$047 = $X + ($mul11 << 2) | 0;
  while (1) {
   $mul23 = Math_imul($3 << 16 >> 16, $M) | 0;
   $i$148$looptemp = $i$148;
   $i$148 = $i$148 + 1 | 0;
   $3 = HEAP16[$m$0$5$val + ($i$148 << 1) >> 1] | 0;
   $mul26 = Math_imul($3 << 16 >> 16, $M) | 0;
   $add29 = +HEAPF32[$bandLogE + ($i$148$looptemp << 2) >> 2] + +HEAPF32[20304 + ($i$148$looptemp << 2) >> 2];
   $conv38 = +Math_exp(+(($add29 > 32.0 ? 32.0 : $add29) * .6931471805599453));
   $f$2 = $f$146;
   $j$0 = $mul23;
   $x$1 = $x$047;
   do {
    $x$1$looptemp = $x$1;
    $x$1 = $x$1 + 4 | 0;
    $f$2$looptemp = $f$2;
    $f$2 = $f$2 + 4 | 0;
    HEAPF32[$f$2$looptemp >> 2] = +HEAPF32[$x$1$looptemp >> 2] * $conv38;
    $j$0 = $j$0 + 1 | 0;
   } while (($j$0 | 0) < ($mul26 | 0));
   if (($i$148 | 0) == ($spec$select43 | 0)) break; else {
    $f$146 = $f$2;
    $x$047 = $x$1;
   }
  }
 }
 if (($spec$select44 | 0) > ($spec$select43 | 0)) _celt_fatal(47598, 47629, 263); else {
  _memset($freq + ($spec$select << 2) | 0, 0, $mul - $spec$select << 2 | 0) | 0;
  return;
 }
}

function _silk_PLC_energy($energy1, $shift1, $energy2, $shift2, $exc_Q14, $prevGain_Q10, $subfr_length, $nb_subfr) {
 $energy1 = $energy1 | 0;
 $shift1 = $shift1 | 0;
 $energy2 = $energy2 | 0;
 $shift2 = $shift2 | 0;
 $exc_Q14 = $exc_Q14 | 0;
 $prevGain_Q10 = $prevGain_Q10 | 0;
 $subfr_length = $subfr_length | 0;
 $nb_subfr = $nb_subfr | 0;
 var $0 = 0, $1 = 0, $5 = 0, $6 = 0, $add$ptr$us = 0, $add30$us = 0, $add30$us$1 = 0, $arrayidx113$pre$phiZ2D = 0, $conv7$us = 0, $conv7$us$1 = 0, $i$074$us = 0, $i$074$us$1 = 0, $mul4$us = 0, $mul4$us$1 = 0, $shr28$us = 0, $shr28$us$1 = 0, $vla = 0, sp = 0;
 sp = STACKTOP;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($subfr_length << 1 << 1) | 0) + 15 & -16) | 0;
 if (($subfr_length | 0) <= 0) {
  $arrayidx113$pre$phiZ2D = $vla + ($subfr_length << 1) | 0;
  _silk_sum_sqr_shift($energy1, $shift1, $vla, $subfr_length);
  _silk_sum_sqr_shift($energy2, $shift2, $arrayidx113$pre$phiZ2D, $subfr_length);
  STACKTOP = sp;
  return;
 }
 $mul4$us = Math_imul($nb_subfr + -2 | 0, $subfr_length) | 0;
 $0 = HEAP32[$prevGain_Q10 >> 2] | 0;
 $conv7$us = $0 << 16 >> 16;
 $shr28$us = ($0 >> 15) + 1 >> 1;
 $i$074$us = 0;
 do {
  $1 = HEAP32[$exc_Q14 + ($i$074$us + $mul4$us << 2) >> 2] | 0;
  $add30$us = ((Math_imul($conv7$us, $1 & 65535) | 0) >> 16) + (Math_imul($conv7$us, $1 >> 16) | 0) + (Math_imul($shr28$us, $1) | 0) | 0;
  HEAP16[$vla + ($i$074$us << 1) >> 1] = ($add30$us | 0) > 8388607 ? 32767 : ($add30$us | 0) < -8388608 ? -32768 : $add30$us >>> 8 & 65535;
  $i$074$us = $i$074$us + 1 | 0;
 } while (($i$074$us | 0) != ($subfr_length | 0));
 $add$ptr$us = $vla + ($subfr_length << 1) | 0;
 $mul4$us$1 = Math_imul($nb_subfr + -1 | 0, $subfr_length) | 0;
 $5 = HEAP32[$prevGain_Q10 + 4 >> 2] | 0;
 $conv7$us$1 = $5 << 16 >> 16;
 $shr28$us$1 = ($5 >> 15) + 1 >> 1;
 $i$074$us$1 = 0;
 do {
  $6 = HEAP32[$exc_Q14 + ($i$074$us$1 + $mul4$us$1 << 2) >> 2] | 0;
  $add30$us$1 = ((Math_imul($conv7$us$1, $6 & 65535) | 0) >> 16) + (Math_imul($conv7$us$1, $6 >> 16) | 0) + (Math_imul($shr28$us$1, $6) | 0) | 0;
  HEAP16[$add$ptr$us + ($i$074$us$1 << 1) >> 1] = ($add30$us$1 | 0) > 8388607 ? 32767 : ($add30$us$1 | 0) < -8388608 ? -32768 : $add30$us$1 >>> 8 & 65535;
  $i$074$us$1 = $i$074$us$1 + 1 | 0;
 } while (($i$074$us$1 | 0) != ($subfr_length | 0));
 $arrayidx113$pre$phiZ2D = $add$ptr$us;
 _silk_sum_sqr_shift($energy1, $shift1, $vla, $subfr_length);
 _silk_sum_sqr_shift($energy2, $shift2, $arrayidx113$pre$phiZ2D, $subfr_length);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $tobool19 = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 3]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    do if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $found_our_static_ptr = $info + 52 | 0;
     HEAP8[$found_our_static_ptr >> 0] = 0;
     $found_any_static_type = $info + 53 | 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     $5 = HEAP32[$this + 8 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 7]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
      break;
     } else {
      $tobool19 = (HEAP8[$found_our_static_ptr >> 0] | 0) == 0;
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
      if ($tobool19) break; else break L1;
     }
    } while (0);
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__ig$0 = 0, $__last$addr$0$i$i = 0, $__r$0 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr4 = 0, $cond$i$i32 = 0, $conv$i$i = 0, $conv$i$i28$pre$phiZZZ2D = 0, $incdec$ptr$i$i = 0, $or$cond34 = 0, $sub$ptr$lhs$cast17 = 0, $tobool$i$i$i = 0, label = 0;
 $__size_$i$i = $__grouping + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $__size_$i3$i = $__grouping + 4 | 0;
 $1 = HEAP32[$__size_$i3$i >> 2] | 0;
 $conv$i$i = $0 & 255;
 do if (($0 << 24 >> 24 < 0 ? $1 : $conv$i$i) | 0) if (($__g_end - $__g | 0) > 4) {
  if (($__g | 0) == ($__g_end | 0)) {
   $4 = $0;
   $6 = $1;
   $conv$i$i28$pre$phiZZZ2D = $conv$i$i;
  } else {
   $__first$addr$0$i$i = $__g;
   $__last$addr$0$i$i = $__g_end;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -4 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
    $2 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
    HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i >> 2];
    HEAP32[$incdec$ptr$i$i >> 2] = $2;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
   $$pre = HEAP8[$__size_$i$i >> 0] | 0;
   $4 = $$pre;
   $6 = HEAP32[$__size_$i3$i >> 2] | 0;
   $conv$i$i28$pre$phiZZZ2D = $$pre & 255;
  }
  $tobool$i$i$i = $4 << 24 >> 24 < 0;
  $cond$i$i32 = $tobool$i$i$i ? HEAP32[$__grouping >> 2] | 0 : $__grouping;
  $add$ptr4 = $__g_end + -4 | 0;
  $sub$ptr$lhs$cast17 = $cond$i$i32 + ($tobool$i$i$i ? $6 : $conv$i$i28$pre$phiZZZ2D) | 0;
  $__ig$0 = $cond$i$i32;
  $__r$0 = $__g;
  while (1) {
   $7 = HEAP8[$__ig$0 >> 0] | 0;
   $or$cond34 = $7 << 24 >> 24 > 0 & $7 << 24 >> 24 != 127;
   if ($__r$0 >>> 0 >= $add$ptr4 >>> 0) break;
   if ($or$cond34) if ((HEAP32[$__r$0 >> 2] | 0) != ($7 << 24 >> 24 | 0)) {
    label = 12;
    break;
   }
   $__ig$0 = ($sub$ptr$lhs$cast17 - $__ig$0 | 0) > 1 ? $__ig$0 + 1 | 0 : $__ig$0;
   $__r$0 = $__r$0 + 4 | 0;
  }
  if ((label | 0) == 12) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if ($or$cond34) if (((HEAP32[$add$ptr4 >> 2] | 0) + -1 | 0) >>> 0 >= $7 << 24 >> 24 >>> 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function _memchr($src, $n) {
 $src = $src | 0;
 $n = $n | 0;
 var $3 = 0, $5 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $n$addr$0$lcssa = 0, $n$addr$044 = 0, $n$addr$1$lcssa = 0, $n$addr$134 = 0, $n$addr$2 = 0, $n$addr$23 = 0, $n$addr$327 = 0, $s$0$lcssa = 0, $s$045 = 0, $s$1 = 0, $s$14 = 0, $s$228 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool242 = 0, $w$0$lcssa = 0, $w$035 = 0, label = 0;
 $tobool242 = ($n | 0) != 0;
 L1 : do if ($tobool242 & ($src & 3 | 0) != 0) {
  $n$addr$044 = $n;
  $s$045 = $src;
  while (1) {
   if (!(HEAP8[$s$045 >> 0] | 0)) {
    $n$addr$23 = $n$addr$044;
    $s$14 = $s$045;
    label = 13;
    break L1;
   }
   $incdec$ptr = $s$045 + 1 | 0;
   $dec = $n$addr$044 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$044 = $dec;
    $s$045 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool242;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  if (!(HEAP8[$s$0$lcssa >> 0] | 0)) {
   $n$addr$2 = $n$addr$0$lcssa;
   $s$1 = $s$0$lcssa;
  } else {
   L11 : do if ($n$addr$0$lcssa >>> 0 > 3) {
    $n$addr$134 = $n$addr$0$lcssa;
    $w$035 = $s$0$lcssa;
    while (1) {
     $3 = HEAP32[$w$035 >> 2] | 0;
     if (($3 & -2139062144 ^ -2139062144) & $3 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$134;
      $w$0$lcssa = $w$035;
      break L11;
     }
     $incdec$ptr21 = $w$035 + 4 | 0;
     $sub22 = $n$addr$134 + -4 | 0;
     if ($sub22 >>> 0 > 3) {
      $n$addr$134 = $sub22;
      $w$035 = $incdec$ptr21;
     } else {
      $n$addr$1$lcssa = $sub22;
      $w$0$lcssa = $incdec$ptr21;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa;
    $w$0$lcssa = $s$0$lcssa;
   } while (0);
   $n$addr$2 = $n$addr$1$lcssa;
   $s$1 = $w$0$lcssa;
  }
  if (!$n$addr$2) $5 = 0; else {
   $n$addr$23 = $n$addr$2;
   $s$14 = $s$1;
   label = 13;
  }
 } else $5 = 0;
 L18 : do if ((label | 0) == 13) {
  $n$addr$327 = $n$addr$23;
  $s$228 = $s$14;
  while (1) {
   if (!(HEAP8[$s$228 >> 0] | 0)) {
    $5 = $s$228;
    break L18;
   }
   $n$addr$327 = $n$addr$327 + -1 | 0;
   if (!$n$addr$327) {
    $5 = 0;
    break;
   } else $s$228 = $s$228 + 1 | 0;
  }
 } while (0);
 return $5 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $incdec$ptr84 = 0, $retval$2 = 0, $sub$ptr$sub39 = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre39 = $to_end;
 $0 = HEAP32[$frm_nxt >> 2] | 0;
 L1 : while (1) {
  if ($0 >>> 0 >= $frm_end >>> 0) {
   $retval$2 = 0;
   break;
  }
  $1 = HEAP32[$0 >> 2] | 0;
  if ($1 >>> 0 > 1114111 | ($1 & -2048 | 0) == 55296) {
   $retval$2 = 2;
   break;
  }
  do if ($1 >>> 0 < 128) {
   $2 = HEAP32[$to_nxt >> 2] | 0;
   if (($$pre39 - $2 | 0) < 1) {
    $retval$2 = 1;
    break L1;
   }
   HEAP32[$to_nxt >> 2] = $2 + 1;
   HEAP8[$2 >> 0] = $1;
  } else {
   if ($1 >>> 0 < 2048) {
    $3 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre39 - $3 | 0) < 2) {
     $retval$2 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = $1 >>> 6 | 192;
    $4 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $4 + 1;
    HEAP8[$4 >> 0] = $1 & 63 | 128;
    break;
   }
   $5 = HEAP32[$to_nxt >> 2] | 0;
   $sub$ptr$sub39 = $$pre39 - $5 | 0;
   if ($1 >>> 0 < 65536) {
    if (($sub$ptr$sub39 | 0) < 3) {
     $retval$2 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $1 >>> 12 | 224;
    $6 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $1 >>> 6 & 63 | 128;
    $7 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = $1 & 63 | 128;
    break;
   } else {
    if (($sub$ptr$sub39 | 0) < 4) {
     $retval$2 = 1;
     break L1;
    }
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $1 >>> 18 | 240;
    $8 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $8 + 1;
    HEAP8[$8 >> 0] = $1 >>> 12 & 63 | 128;
    $9 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $9 + 1;
    HEAP8[$9 >> 0] = $1 >>> 6 & 63 | 128;
    $10 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $1 & 63 | 128;
    break;
   }
  } while (0);
  $incdec$ptr84 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
  HEAP32[$frm_nxt >> 2] = $incdec$ptr84;
  $0 = $incdec$ptr84;
 }
 return $retval$2 | 0;
}

function ___dynamic_cast($static_ptr) {
 $static_ptr = $static_ptr | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $src2dst_offset5 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = 42224;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = 42240;
 $src2dst_offset5 = $info + 12 | 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $src2dst_offset5;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$src2dst_offset5 + 40 >> 1] = 0;
 HEAP8[$src2dst_offset5 + 42 >> 0] = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($2, 42224, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 7]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 3]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) if (!((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _silk_A2NLSF_eval_poly($p, $x, $dd) {
 $p = $p | 0;
 $x = $x | 0;
 $dd = $dd | 0;
 var $0 = 0, $add115 = 0, $add13 = 0, $add151 = 0, $add30 = 0, $add47 = 0, $add64 = 0, $add81 = 0, $add98 = 0, $conv138 = 0, $conv3 = 0, $n$074$in = 0, $shl = 0, $shr11 = 0, $shr149 = 0, $y32$073 = 0, $y32$1 = 0, $n$074$in$looptemp = 0;
 $0 = HEAP32[$p + ($dd << 2) >> 2] | 0;
 $shl = $x << 4;
 if (($dd | 0) == 8) {
  $conv3 = $x << 20 >> 16;
  $shr11 = ($shl >> 15) + 1 >> 1;
  $add13 = (Math_imul($0 >> 16, $conv3) | 0) + (Math_imul($0, $shr11) | 0) + ((Math_imul($0 & 65535, $conv3) | 0) >> 16) + (HEAP32[$p + 28 >> 2] | 0) | 0;
  $add30 = (Math_imul($add13, $shr11) | 0) + (HEAP32[$p + 24 >> 2] | 0) + (Math_imul($add13 >> 16, $conv3) | 0) + ((Math_imul($add13 & 65535, $conv3) | 0) >> 16) | 0;
  $add47 = (Math_imul($add30, $shr11) | 0) + (HEAP32[$p + 20 >> 2] | 0) + (Math_imul($add30 >> 16, $conv3) | 0) + ((Math_imul($add30 & 65535, $conv3) | 0) >> 16) | 0;
  $add64 = (Math_imul($add47, $shr11) | 0) + (HEAP32[$p + 16 >> 2] | 0) + (Math_imul($add47 >> 16, $conv3) | 0) + ((Math_imul($add47 & 65535, $conv3) | 0) >> 16) | 0;
  $add81 = (Math_imul($add64, $shr11) | 0) + (HEAP32[$p + 12 >> 2] | 0) + (Math_imul($add64 >> 16, $conv3) | 0) + ((Math_imul($add64 & 65535, $conv3) | 0) >> 16) | 0;
  $add98 = (Math_imul($add81, $shr11) | 0) + (HEAP32[$p + 8 >> 2] | 0) + (Math_imul($add81 >> 16, $conv3) | 0) + ((Math_imul($add81 & 65535, $conv3) | 0) >> 16) | 0;
  $add115 = (Math_imul($add98, $shr11) | 0) + (HEAP32[$p + 4 >> 2] | 0) + (Math_imul($add98 >> 16, $conv3) | 0) + ((Math_imul($add98 & 65535, $conv3) | 0) >> 16) | 0;
  $y32$1 = (Math_imul($add115, $shr11) | 0) + (HEAP32[$p >> 2] | 0) + (Math_imul($add115 >> 16, $conv3) | 0) + ((Math_imul($add115 & 65535, $conv3) | 0) >> 16) | 0;
  return $y32$1 | 0;
 }
 if (($dd | 0) <= 0) {
  $y32$1 = $0;
  return $y32$1 | 0;
 }
 $conv138 = $x << 20 >> 16;
 $shr149 = ($shl >> 15) + 1 >> 1;
 $n$074$in = $dd;
 $y32$073 = $0;
 while (1) {
  $n$074$in$looptemp = $n$074$in;
  $n$074$in = $n$074$in + -1 | 0;
  $add151 = (Math_imul($y32$073 >> 16, $conv138) | 0) + (Math_imul($y32$073, $shr149) | 0) + ((Math_imul($y32$073 & 65535, $conv138) | 0) >> 16) + (HEAP32[$p + ($n$074$in << 2) >> 2] | 0) | 0;
  if (($n$074$in$looptemp | 0) <= 1) {
   $y32$1 = $add151;
   break;
  } else $y32$073 = $add151;
 }
 return $y32$1 | 0;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$pre = 0, $0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $9 = 0, $conv14 = 0, $frm_nxt$1 = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0;
 $$pre = $frm_end;
 $frm_nxt$1 = $frm;
 $nchar32_t$0 = 0;
 L1 : while (1) {
  if (!($nchar32_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $0 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $0 & 255;
  do if ($0 << 24 >> 24 > -1) $frm_nxt$5 = $frm_nxt$1 + 1 | 0; else {
   if (($0 & 255) < 194) break L1;
   if (($0 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L1;
    if ((HEAP8[$frm_nxt$1 + 1 >> 0] & -64) << 24 >> 24 != -128) break L1;
    $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
    break;
   }
   if (($0 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L1;
    $3 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $4 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($0 << 24 >> 24) {
    case -32:
     {
      if (!(($3 & -32) << 24 >> 24 == -96 & ($4 & -64) << 24 >> 24 == -128)) break L1;
      break;
     }
    case -19:
     {
      if (!(($3 & -32) << 24 >> 24 == -128 & ($4 & -64) << 24 >> 24 == -128)) break L1;
      break;
     }
    default:
     if (!(($3 & -64) << 24 >> 24 == -128 & ($4 & -64) << 24 >> 24 == -128)) break L1;
    }
    $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
    break;
   }
   if (($0 & 255) >= 245) break L1;
   if (($$pre - $frm_nxt$1 | 0) < 4) break L1;
   $9 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $10 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $11 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($0 << 24 >> 24) {
   case -16:
    {
     if (!(($9 + 112 & 255) < 48 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
     break;
    }
   case -12:
    {
     if (!(($9 & -16) << 24 >> 24 == -128 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
     break;
    }
   default:
    if (!(($9 & -64) << 24 >> 24 == -128 & ($10 & -64) << 24 >> 24 == -128 & ($11 & -64) << 24 >> 24 == -128)) break L1;
   }
   if ((($9 & 48) << 12 | $conv14 << 18 & 1835008) >>> 0 > 1114111) break L1; else $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar32_t$0 = $nchar32_t$0 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call2 = 0, $incdec$ptr = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 L1 : do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$__last_consumed_is_next_ >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1) | 0) ^ 1) & 1;
  $retval$1 = $1;
 } else {
  do if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   HEAP32[$__ci >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $retval$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $__file_ = $this + 32 | 0;
   while (1) {
    $7 = HEAP32[$__enxt >> 2] | 0;
    if ($7 >>> 0 <= $__extbuf >>> 0) {
     label = 11;
     break;
    }
    $incdec$ptr = $7 + -1 | 0;
    HEAP32[$__enxt >> 2] = $incdec$ptr;
    if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
     label = 14;
     break;
    }
   }
   if ((label | 0) == 11) {
    $__last_consumed_33$pre$phiZ2D = $__last_consumed_12;
    break;
   } else if ((label | 0) == 14) {
    $retval$1 = -1;
    break L1;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call2 = 0, $incdec$ptr = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 L1 : do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$__last_consumed_is_next_ >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($1) | 0) ^ 1) & 1;
  $retval$1 = $1;
 } else {
  do if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   HEAP8[$__ci >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $retval$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $__file_ = $this + 32 | 0;
   while (1) {
    $7 = HEAP32[$__enxt >> 2] | 0;
    if ($7 >>> 0 <= $__extbuf >>> 0) {
     label = 11;
     break;
    }
    $incdec$ptr = $7 + -1 | 0;
    HEAP32[$__enxt >> 2] = $incdec$ptr;
    if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
     label = 14;
     break;
    }
   }
   if ((label | 0) == 11) {
    $__last_consumed_33$pre$phiZ2D = $__last_consumed_12;
    break;
   } else if ((label | 0) == 14) {
    $retval$1 = -1;
    break L1;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _resampler_basic_zero($st, $channel_index, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $channel_index = $channel_index | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add10 = 0, $arrayidx = 0, $arrayidx3 = 0, $cmp11 = 0, $inc = 0, $last_sample$0$lcssa = 0, $last_sample$029 = 0, $last_sample$1 = 0, $out_sample$0$lcssa = 0, $out_sample$030 = 0, $samp_frac_num$0$lcssa = 0, $samp_frac_num$028 = 0, $samp_frac_num$1 = 0, label = 0;
 $arrayidx = (HEAP32[$st + 60 >> 2] | 0) + ($channel_index << 2) | 0;
 $1 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx3 = (HEAP32[$st + 64 >> 2] | 0) + ($channel_index << 2) | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $4 = HEAP32[$st + 92 >> 2] | 0;
 $5 = HEAP32[$st + 36 >> 2] | 0;
 $6 = HEAP32[$st + 40 >> 2] | 0;
 $7 = HEAP32[$st + 12 >> 2] | 0;
 $8 = HEAP32[$in_len >> 2] | 0;
 if (($1 | 0) >= ($8 | 0)) {
  $last_sample$0$lcssa = $1;
  $out_sample$0$lcssa = 0;
  $samp_frac_num$0$lcssa = $3;
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 $9 = HEAP32[$out_len >> 2] | 0;
 $last_sample$029 = $1;
 $out_sample$030 = 0;
 $samp_frac_num$028 = $3;
 while (1) {
  if (($out_sample$030 | 0) >= ($9 | 0)) {
   $last_sample$0$lcssa = $last_sample$029;
   $out_sample$0$lcssa = $out_sample$030;
   $samp_frac_num$0$lcssa = $samp_frac_num$028;
   label = 5;
   break;
  }
  $inc = $out_sample$030 + 1 | 0;
  HEAPF32[$out + ((Math_imul($out_sample$030, $4) | 0) << 2) >> 2] = 0.0;
  $add10 = $samp_frac_num$028 + $6 | 0;
  $cmp11 = $add10 >>> 0 < $7 >>> 0;
  $samp_frac_num$1 = $add10 - ($cmp11 ? 0 : $7) | 0;
  $last_sample$1 = $last_sample$029 + $5 + (($cmp11 ^ 1) & 1) | 0;
  if (($last_sample$1 | 0) < ($8 | 0)) {
   $last_sample$029 = $last_sample$1;
   $out_sample$030 = $inc;
   $samp_frac_num$028 = $samp_frac_num$1;
  } else {
   $last_sample$0$lcssa = $last_sample$1;
   $out_sample$0$lcssa = $inc;
   $samp_frac_num$0$lcssa = $samp_frac_num$1;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 5) {
  HEAP32[$arrayidx >> 2] = $last_sample$0$lcssa;
  HEAP32[$arrayidx3 >> 2] = $samp_frac_num$0$lcssa;
  return $out_sample$0$lcssa | 0;
 }
 return 0;
}

function _ec_enc_uint($_this, $_fl, $_ft) {
 $_this = $_this | 0;
 $_fl = $_fl | 0;
 $_ft = $_ft | 0;
 var $1 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add6$pre$phi$iZ2D = 0, $and = 0, $dec = 0, $end_offs$i$i = 0, $end_window$i = 0, $error$i = 0, $inc$i$i = 0, $nbits_total$i = 0, $nend_bits$i = 0, $offs$i$i = 0, $retval$0$i$i = 0, $shr4 = 0, $storage$i$i = 0, $sub = 0, $sub3 = 0, $used$0$i = 0, $used$1$i = 0, $window$0$i = 0, $window$1$i = 0;
 if ($_ft >>> 0 <= 1) _celt_fatal(49073, 49097, 180);
 $dec = $_ft + -1 | 0;
 $sub = 32 - (Math_clz32($dec | 0) | 0) | 0;
 if (($sub | 0) <= 8) {
  _ec_encode($_this, $_fl, $_fl + 1 | 0, $_ft);
  return;
 }
 $sub3 = $sub + -8 | 0;
 $shr4 = $_fl >>> $sub3;
 _ec_encode($_this, $shr4, $shr4 + 1 | 0, ($dec >>> $sub3) + 1 | 0);
 $and = (1 << $sub3) + -1 & $_fl;
 $end_window$i = $_this + 12 | 0;
 $1 = HEAP32[$end_window$i >> 2] | 0;
 $nend_bits$i = $_this + 16 | 0;
 $2 = HEAP32[$nend_bits$i >> 2] | 0;
 $add$i = $2 + $sub3 | 0;
 if ($add$i >>> 0 > 32) {
  $offs$i$i = $_this + 24 | 0;
  $end_offs$i$i = $_this + 8 | 0;
  $storage$i$i = $_this + 4 | 0;
  $error$i = $_this + 44 | 0;
  $3 = ~$2;
  $4 = ($3 | 0) > -16;
  $5 = $2 + 8 | 0;
  $used$0$i = $2;
  $window$0$i = $1;
  while (1) {
   $7 = HEAP32[$end_offs$i$i >> 2] | 0;
   $8 = HEAP32[$storage$i$i >> 2] | 0;
   if (($7 + (HEAP32[$offs$i$i >> 2] | 0) | 0) >>> 0 < $8 >>> 0) {
    $9 = HEAP32[$_this >> 2] | 0;
    $inc$i$i = $7 + 1 | 0;
    HEAP32[$end_offs$i$i >> 2] = $inc$i$i;
    HEAP8[$9 + ($8 - $inc$i$i) >> 0] = $window$0$i;
    $retval$0$i$i = 0;
   } else $retval$0$i$i = -1;
   HEAP32[$error$i >> 2] = HEAP32[$error$i >> 2] | $retval$0$i$i;
   $window$0$i = $window$0$i >>> 8;
   if (($used$0$i | 0) <= 15) break; else $used$0$i = $used$0$i + -8 | 0;
  }
  $14 = $2 + -8 - ($5 + ($4 ? $3 : -16) & -8) | 0;
  $add6$pre$phi$iZ2D = $14 + $sub3 | 0;
  $used$1$i = $14;
  $window$1$i = $window$0$i;
 } else {
  $add6$pre$phi$iZ2D = $add$i;
  $used$1$i = $2;
  $window$1$i = $1;
 }
 HEAP32[$end_window$i >> 2] = $and << $used$1$i | $window$1$i;
 HEAP32[$nend_bits$i >> 2] = $add6$pre$phi$iZ2D;
 $nbits_total$i = $_this + 20 | 0;
 HEAP32[$nbits_total$i >> 2] = (HEAP32[$nbits_total$i >> 2] | 0) + $sub3;
 return;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c) | 0) label = 14; else {
  HEAP32[$__1buf >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) | 0;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $retval$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 4 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 7;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 13;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 13;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $retval$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $retval$4 = __ZNSt3__211char_traitsIwE7not_eofEj($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c) | 0) label = 14; else {
  HEAP8[$__1buf >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $retval$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 1 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 7;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 13;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 13;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $retval$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $retval$4 = __ZNSt3__211char_traitsIcE7not_eofEi($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _opus_repacketizer_cat($rp, $data, $len) {
 $rp = $rp | 0;
 $data = $data | 0;
 $len = $len | 0;
 var $$off0 = 0, $0 = 0, $8 = 0, $and19$i = 0, $audiosize$0$i = 0, $call28$i = 0, $conv$i = 0, $extract$t10 = 0, $nb_frames$i = 0, $retval$0$i = 0, $retval$0$i57 = 0, $tmp_toc$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp_toc$i = sp;
 if (($len | 0) < 1) {
  $retval$0$i = -4;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 $nb_frames$i = $rp + 4 | 0;
 $0 = HEAP32[$nb_frames$i >> 2] | 0;
 if (!$0) {
  HEAP8[$rp >> 0] = HEAP8[$data >> 0] | 0;
  $conv$i = HEAPU8[$data >> 0] | 0;
  do if (!($conv$i & 128)) {
   if (($conv$i & 96 | 0) == 96) {
    $audiosize$0$i = ($conv$i & 8 | 0) == 0 ? 80 : 160;
    break;
   }
   $and19$i = $conv$i >>> 3 & 3;
   if (($and19$i | 0) == 3) $audiosize$0$i = 480; else $audiosize$0$i = (8e3 << $and19$i >>> 0) / 100 | 0;
  } else $audiosize$0$i = (8e3 << ($conv$i >>> 3 & 3) >>> 0) / 400 | 0; while (0);
  HEAP32[$rp + 296 >> 2] = $audiosize$0$i;
  $$off0 = HEAP8[$data >> 0] | 0;
 } else {
  $extract$t10 = HEAP8[$data >> 0] | 0;
  if ((($extract$t10 ^ HEAP8[$rp >> 0]) & 255) > 3) {
   $retval$0$i = -4;
   STACKTOP = sp;
   return $retval$0$i | 0;
  } else $$off0 = $extract$t10;
 }
 switch ($$off0 & 3) {
 case 0:
  {
   $retval$0$i57 = 1;
   break;
  }
 case 3:
  {
   if (($len | 0) < 2) {
    $retval$0$i = -4;
    STACKTOP = sp;
    return $retval$0$i | 0;
   }
   $8 = HEAP8[$data + 1 >> 0] & 63;
   if (!($8 << 24 >> 24)) {
    $retval$0$i = -4;
    STACKTOP = sp;
    return $retval$0$i | 0;
   } else $retval$0$i57 = $8 & 255;
   break;
  }
 default:
  $retval$0$i57 = 2;
 }
 if ((Math_imul($0 + $retval$0$i57 | 0, HEAP32[$rp + 296 >> 2] | 0) | 0) > 960) {
  $retval$0$i = -4;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 $call28$i = _opus_packet_parse_impl($data, $len, $tmp_toc$i, $rp + 8 + ($0 << 2) | 0, $rp + 200 + ($0 << 1) | 0, 0) | 0;
 if (($call28$i | 0) < 1) {
  $retval$0$i = $call28$i;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 HEAP32[$nb_frames$i >> 2] = (HEAP32[$nb_frames$i >> 2] | 0) + $retval$0$i57;
 $retval$0$i = 0;
 STACKTOP = sp;
 return $retval$0$i | 0;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s$0, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s$0 = $__s$0 | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $cmp22 = 0, $retval$sroa$0$2 = 0, $sub$ptr$div = 0, $sub$ptr$div31 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 do if (!$__s$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$div = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast >> 2;
  $__width_$i = $__iob + 12 | 0;
  $0 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($0 | 0) > ($sub$ptr$div | 0) ? $0 - $sub$ptr$div | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
  if (($sub$ptr$sub6 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__ob, $sub$ptr$div7) | 0) != ($sub$ptr$div7 | 0)) {
   $retval$sroa$0$2 = 0;
   break;
  }
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($__sp, $__ns$0, $__fl);
   $cmp22 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, (HEAP8[$__sp + 8 + 3 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
   if (!$cmp22) {
    $retval$sroa$0$2 = 0;
    break;
   }
  }
  $sub$ptr$sub30 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  $sub$ptr$div31 = $sub$ptr$sub30 >> 2;
  if (($sub$ptr$sub30 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__op, $sub$ptr$div31) | 0) != ($sub$ptr$div31 | 0)) {
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $__s$0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58477] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58478] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58479] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58480] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58481] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58482] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58483, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($and$lobit << 1 | 24) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58477] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58478] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58479] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58480] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58481] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58482] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58483, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($and$lobit << 1 | 24) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 512) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58477] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58478] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58479] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58480] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58481] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58482] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58483, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($and$lobit << 1 | 21) << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58477] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58478] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58479] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58480] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58481] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58482] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58483, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($and$lobit << 1 | 21) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _silk_sum_sqr_shift($energy, $shift, $x, $len) {
 $energy = $energy | 0;
 $shift = $shift | 0;
 $x = $x | 0;
 $len = $len | 0;
 var $cmp57 = 0, $cond$i = 0, $conv = 0, $conv16 = 0, $conv32 = 0, $conv38 = 0, $conv5 = 0, $conv53 = 0, $i$0$lcssa = 0, $i$058 = 0, $i$1$lcssa = 0, $i$154 = 0, $mul = 0, $mul35 = 0, $nrg$0$lcssa = 0, $nrg$059 = 0, $nrg$1 = 0, $nrg$2$lcssa = 0, $nrg$255 = 0, $nrg$3 = 0, $sub = 0, $sub1 = 0, $sub24 = 0;
 $sub = 31 - (Math_clz32($len | 0) | 0) | 0;
 $sub1 = $len + -1 | 0;
 $cmp57 = ($len | 0) > 1;
 if ($cmp57) {
  $i$058 = 0;
  $nrg$059 = $len;
  do {
   $conv = HEAP16[$x + ($i$058 << 1) >> 1] | 0;
   $mul = Math_imul($conv, $conv) | 0;
   $conv5 = HEAP16[$x + (($i$058 | 1) << 1) >> 1] | 0;
   $nrg$059 = (((Math_imul($conv5, $conv5) | 0) + $mul | 0) >>> $sub) + $nrg$059 | 0;
   $i$058 = $i$058 + 2 | 0;
  } while (($i$058 | 0) < ($sub1 | 0));
  $i$0$lcssa = $len & -2;
  $nrg$0$lcssa = $nrg$059;
 } else {
  $i$0$lcssa = 0;
  $nrg$0$lcssa = $len;
 }
 if (($i$0$lcssa | 0) < ($len | 0)) {
  $conv16 = HEAP16[$x + ($i$0$lcssa << 1) >> 1] | 0;
  $nrg$1 = ((Math_imul($conv16, $conv16) | 0) >>> $sub) + $nrg$0$lcssa | 0;
 } else $nrg$1 = $nrg$0$lcssa;
 $sub24 = $sub + 3 - (Math_clz32($nrg$1 | 0) | 0) | 0;
 $cond$i = ($sub24 | 0) > 0 ? $sub24 : 0;
 if ($cmp57) {
  $i$154 = 0;
  $nrg$255 = 0;
  do {
   $conv32 = HEAP16[$x + ($i$154 << 1) >> 1] | 0;
   $mul35 = Math_imul($conv32, $conv32) | 0;
   $conv38 = HEAP16[$x + (($i$154 | 1) << 1) >> 1] | 0;
   $nrg$255 = (((Math_imul($conv38, $conv38) | 0) + $mul35 | 0) >>> $cond$i) + $nrg$255 | 0;
   $i$154 = $i$154 + 2 | 0;
  } while (($i$154 | 0) < ($sub1 | 0));
  $i$1$lcssa = $len & -2;
  $nrg$2$lcssa = $nrg$255;
 } else {
  $i$1$lcssa = 0;
  $nrg$2$lcssa = 0;
 }
 if (($i$1$lcssa | 0) >= ($len | 0)) {
  $nrg$3 = $nrg$2$lcssa;
  HEAP32[$shift >> 2] = $cond$i;
  HEAP32[$energy >> 2] = $nrg$3;
  return;
 }
 $conv53 = HEAP16[$x + ($i$1$lcssa << 1) >> 1] | 0;
 $nrg$3 = ((Math_imul($conv53, $conv53) | 0) >>> $cond$i) + $nrg$2$lcssa | 0;
 HEAP32[$shift >> 2] = $cond$i;
 HEAP32[$energy >> 2] = $nrg$3;
 return;
}

function _silk_schur_FLP($refl_coef, $auto_corr, $order) {
 $refl_coef = $refl_coef | 0;
 $auto_corr = $auto_corr | 0;
 $order = $order | 0;
 var $$pre = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $C = 0, $arrayidx11 = 0, $arrayidx13 = 0, $arrayidx28 = 0, $arrayidx30$phi$trans$insert = 0, $conv = 0.0, $conv46 = 0.0, $div = 0.0, $inc4043 = 0, $indvars$iv = 0, $k$0 = 0, $k$132 = 0, sp = 0, $k$132$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $C = sp;
 if ($order >>> 0 >= 25) _celt_fatal(55054, 55114, 44);
 $k$0 = 0;
 while (1) {
  $conv = +HEAPF32[$auto_corr + ($k$0 << 2) >> 2];
  HEAPF64[$C + ($k$0 << 4) + 8 >> 3] = $conv;
  HEAPF64[$C + ($k$0 << 4) >> 3] = $conv;
  if (($k$0 | 0) < ($order | 0)) $k$0 = $k$0 + 1 | 0; else break;
 }
 $arrayidx13 = $C + 8 | 0;
 if (($order | 0) <= 0) {
  $5 = +HEAPF64[$arrayidx13 >> 3];
  $conv46 = $5;
  STACKTOP = sp;
  return +$conv46;
 }
 $indvars$iv = $order;
 $k$132 = 0;
 while (1) {
  $k$132$looptemp = $k$132;
  $k$132 = $k$132 + 1 | 0;
  $arrayidx11 = $C + ($k$132 << 4) | 0;
  $2 = +HEAPF64[$arrayidx11 >> 3];
  $3 = +HEAPF64[$arrayidx13 >> 3];
  $div = -$2 / ($3 > 9.999999717180685e-10 ? $3 : 9.999999717180685e-10);
  HEAPF32[$refl_coef + ($k$132$looptemp << 2) >> 2] = $div;
  if (($k$132$looptemp | 0) < ($order | 0)) {
   HEAPF64[$arrayidx11 >> 3] = $2 + $div * $3;
   HEAPF64[$arrayidx13 >> 3] = $3 + $div * $2;
   if (($indvars$iv | 0) != 1) {
    $inc4043 = 1;
    do {
     $arrayidx30$phi$trans$insert = $C + ($inc4043 << 4) + 8 | 0;
     $$pre = +HEAPF64[$arrayidx30$phi$trans$insert >> 3];
     $arrayidx28 = $C + ($k$132 + $inc4043 << 4) | 0;
     $4 = +HEAPF64[$arrayidx28 >> 3];
     HEAPF64[$arrayidx28 >> 3] = $4 + $div * $$pre;
     HEAPF64[$arrayidx30$phi$trans$insert >> 3] = $$pre + $div * $4;
     $inc4043 = $inc4043 + 1 | 0;
    } while (($inc4043 | 0) != ($indvars$iv | 0));
   }
  }
  if (($k$132 | 0) == ($order | 0)) break; else $indvars$iv = $indvars$iv + -1 | 0;
 }
 $5 = +HEAPF64[$arrayidx13 >> 3];
 $conv46 = $5;
 STACKTOP = sp;
 return +$conv46;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s$0, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s$0 = $__s$0 | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $cmp21 = 0, $retval$sroa$0$2 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub29 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 do if (!$__s$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
  $__width_$i = $__iob + 12 | 0;
  $0 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($0 | 0) > ($sub$ptr$sub | 0) ? $0 - $sub$ptr$sub | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  if (($sub$ptr$sub6 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__ob, $sub$ptr$sub6) | 0) != ($sub$ptr$sub6 | 0)) {
   $retval$sroa$0$2 = 0;
   break;
  }
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($__sp, $__ns$0, $__fl);
   $cmp21 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, (HEAP8[$__sp + 11 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   if (!$cmp21) {
    $retval$sroa$0$2 = 0;
    break;
   }
  }
  $sub$ptr$sub29 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  if (($sub$ptr$sub29 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__s$0 >> 2] | 0) + 48 >> 2] & 31]($__s$0, $__op, $sub$ptr$sub29) | 0) != ($sub$ptr$sub29 | 0)) {
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $__s$0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__oe = sp + 20 | 0;
 $ref$tmp = sp + 16 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58474, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $vararg_buffer;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($and$lobit << 1 | 44) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add$ptr7 = 0, $add3 = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__oe = sp + 20 | 0;
 $ref$tmp = sp + 16 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58474, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $vararg_buffer;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($and$lobit << 1 | 44) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $cmp26 = 0, $cnt$0 = 0, $fd = 0, $iov$0 = 0, $iov$1 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovs = 0, $num = 0, $rem$0 = 0, $retval$1$ph = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $iovs = sp;
 $num = sp + 16 | 0;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $fd = $f + 60 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $sub$ptr$sub + $len | 0;
 while (1) {
  if (!(___wasi_syscall_ret(___wasi_fd_write(HEAP32[$fd >> 2] | 0, $iov$0 | 0, $iovcnt$0 | 0, $num | 0) | 0) | 0)) $3 = HEAP32[$num >> 2] | 0; else {
   HEAP32[$num >> 2] = -1;
   $3 = -1;
  }
  if (($rem$0 | 0) == ($3 | 0)) {
   label = 6;
   break;
  }
  if (($3 | 0) < 0) {
   label = 8;
   break;
  }
  $9 = HEAP32[$iov$0 + 4 >> 2] | 0;
  $cmp26 = $3 >>> 0 > $9 >>> 0;
  $iov$1 = $cmp26 ? $iov$0 + 8 | 0 : $iov$0;
  $cnt$0 = $3 - ($cmp26 ? $9 : 0) | 0;
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
  $iov_len38 = $iov$1 + 4 | 0;
  HEAP32[$iov_len38 >> 2] = (HEAP32[$iov_len38 >> 2] | 0) - $cnt$0;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$0 + ($cmp26 << 31 >> 31) | 0;
  $rem$0 = $rem$0 - $3 | 0;
 }
 if ((label | 0) == 6) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$1$ph = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0 | 0) == 2) $retval$1$ph = 0; else $retval$1$ph = $len - (HEAP32[$iov$0 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$1$ph | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__oe = sp + 20 | 0;
 $ref$tmp = sp + 16 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58474, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $vararg_buffer;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($add << 1) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $call11 = 0, $call4 = 0, $call8 = 0, $ref$tmp = 0, $vararg_buffer = 0, $vla = 0, $vla10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__oe = sp + 20 | 0;
 $ref$tmp = sp + 16 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 58474, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $add3 | 0) + 15 & -16) | 0;
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $vararg_buffer;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $vararg_buffer) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, HEAP32[$__fmtflags_$i >> 2] | 0) | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($add << 1) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $vararg_buffer, $__oe, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vla10, HEAP32[$vararg_buffer >> 2] | 0, HEAP32[$__oe >> 2] | 0, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add15 = 0, $add1545 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $sub28 = 0, $sub29 = 0;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add15 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add15 >>> 0 > 1073741823) _abort(); else $add1545 = $add15;
 } else $add1545 = 1073741807;
 $call$i$i$i = __Znwm($add1545 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy);
 if ($__n_add | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add);
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) + ($__n_add << 2) | 0, $cond$i + ($__n_copy << 2) + ($__n_del << 2) | 0, $sub29);
 if (($__old_cap | 0) != 1) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1545 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 __ZNSt3__211char_traitsIwE6assignERwRKw($call$i$i$i + ($add48 << 2) | 0, 0);
 return;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $0 = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__wb$addr$0$i = 0, $add$ptr = 0, $add$ptr141 = 0, $cond$i$i$i25 = 0, $cond$i$i$i4149 = 0, $tobool$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $0 = HEAP8[$__dflt + 11 >> 0] | 0;
 $tobool$i$i$i$i = $0 << 24 >> 24 < 0;
 $cond$i$i$i4149 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i4149 + ($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $0 & 255) | 0;
 $__wb$addr$0$i = $cond$i$i$i4149;
 while (1) {
  if ($__wb$addr$0$i >>> 0 >= $add$ptr >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__wb$addr$0$i >> 0] | 0);
  $__wb$addr$0$i = $__wb$addr$0$i + 1 | 0;
 }
 $cond$i$i$i25 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $add$ptr141 = $cond$i$i$i25 + (_strlen(_catgets($cond$i$i$i25) | 0) | 0) | 0;
 $__nb$addr$0$i = $cond$i$i$i25;
 while (1) {
  if ($__nb$addr$0$i >>> 0 >= $add$ptr141 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$__nb$addr$0$i >> 0] | 0);
  $__nb$addr$0$i = $__nb$addr$0$i + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i$i = 0, $agg$tmp1$sroa$0$1$i$i = 0, $call$i$i$i$i$i = 0, $call4$i$i$i$i = 0, $retval$0$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $__nar = sp;
 $__ne = sp + 400 | 0;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP32[$__first$addr$0$i$i$i >> 2] | 0;
  $5 = $agg$tmp1$sroa$0$0$i$i;
  if (!$agg$tmp1$sroa$0$0$i$i) $agg$tmp1$sroa$0$1$i$i = 0; else {
   $__nout_$i$i$i$i$i = $5 + 24 | 0;
   $6 = HEAP32[$__nout_$i$i$i$i$i >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 28 >> 2] | 0)) {
    $9 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
    $retval$0$i$i$i$i$i = FUNCTION_TABLE_iii[$9 & 15]($5, $call$i$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i$i >> 2] = $6 + 4;
    HEAP32[$6 >> 2] = $4;
    $retval$0$i$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
   }
   $call4$i$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i$i) | 0;
   $agg$tmp1$sroa$0$1$i$i = $call4$i$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i$i;
  }
  $__first$addr$0$i$i$i = $__first$addr$0$i$i$i + 4 | 0;
  $agg$tmp1$sroa$0$0$i$i = $agg$tmp1$sroa$0$1$i$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i$i | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i$i = 0, $agg$tmp1$sroa$0$1$i$i = 0, $call$i$i$i$i$i = 0, $call4$i$i$i$i = 0, $retval$0$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__nar = sp;
 $__ne = sp + 100 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP8[$__first$addr$0$i$i$i >> 0] | 0;
  $5 = $agg$tmp1$sroa$0$0$i$i;
  if (!$agg$tmp1$sroa$0$0$i$i) $agg$tmp1$sroa$0$1$i$i = 0; else {
   $__nout_$i$i$i$i$i = $5 + 24 | 0;
   $6 = HEAP32[$__nout_$i$i$i$i$i >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 28 >> 2] | 0)) {
    $9 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
    $retval$0$i$i$i$i$i = FUNCTION_TABLE_iii[$9 & 15]($5, $call$i$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i$i >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $4;
    $retval$0$i$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
   }
   $call4$i$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i$i) | 0;
   $agg$tmp1$sroa$0$1$i$i = $call4$i$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i$i;
  }
  $__first$addr$0$i$i$i = $__first$addr$0$i$i$i + 1 | 0;
  $agg$tmp1$sroa$0$0$i$i = $agg$tmp1$sroa$0$1$i$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i$i | 0;
}

function ___vfprintf_internal($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $retval$0 = -1; else {
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $add = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $sub28 = 0, $sub29 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond40 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond40 = -17;
 $call$i$i$i = __Znwm($cond40) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub29) | 0;
 if (($__old_cap | 0) != 10) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond40 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + $add48 | 0, 0);
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $add$ptr = 0, $add$ptr13 = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, $ref$tmp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $vararg_buffer = sp + 32 | 0;
 $__fmt = sp + 184 | 0;
 $__nar = sp;
 $ref$tmp = sp + 180 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58466] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58467] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58468] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58469] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58470] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58471] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $vararg_buffer) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, $__nar, $add$ptr, $vararg_buffer) | 0;
 $add$ptr13 = $vararg_buffer + ($call3 << 2) | 0;
 $call21 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vararg_buffer, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $vararg_buffer + ($call6 - $__nar << 2) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function __ZNSt3__2L11init_wweeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63640] | 0)) if (___cxa_guard_acquire(63640) | 0) {
  $arrayctor$cur = 63296;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 63464);
  ___cxa_guard_release(63640);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63296, 46136) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63308, 46164) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63320, 46192) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63332, 46224) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63344, 46264) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63356, 46300) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63368, 46328) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63380, 46364) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63392, 46380) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63404, 46396) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63416, 46412) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63428, 46428) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63440, 46444) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(63452, 46460) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63560] | 0)) if (___cxa_guard_acquire(63560) | 0) {
  $arrayctor$cur = 62800;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 62968);
  ___cxa_guard_release(63560);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62800, 58877) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62812, 58884) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62824, 58891) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62836, 58899) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62848, 58909) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62860, 58918) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62872, 58925) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62884, 58934) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62896, 58938) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62908, 58942) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62920, 58946) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62932, 58950) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62944, 58954) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62956, 58958) | 0;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $add$ptr = 0, $add$ptr13 = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, $ref$tmp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp + 32 | 0;
 $__fmt = sp + 76 | 0;
 $__nar = sp;
 $ref$tmp = sp + 72 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[58466] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[58467] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[58468] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[58469] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[58470] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[58471] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $vararg_buffer) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, $__nar, $add$ptr, $vararg_buffer) | 0;
 $add$ptr13 = $vararg_buffer + $call3 | 0;
 $call21 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(HEAP32[$__s >> 2] | 0, $vararg_buffer, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $vararg_buffer + ($call6 - $__nar) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function _interleave_hadamard($X, $N0, $stride, $hadamard) {
 $X = $X | 0;
 $N0 = $N0 | 0;
 $stride = $stride | 0;
 $hadamard = $hadamard | 0;
 var $add$ptr1 = 0, $i$041$us = 0, $i$136$us = 0, $j$039$us = 0, $j$134$us = 0, $mul = 0, $mul19$us = 0, $mul31 = 0, $mul5$us = 0, $vla = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($stride, $N0) | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
 if (!$hadamard) {
  if (!(($stride | 0) > 0 & ($N0 | 0) > 0)) {
   $mul31 = $mul << 2;
   _memcpy($X | 0, $vla | 0, $mul31 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $i$136$us = 0;
  do {
   $mul19$us = Math_imul($i$136$us, $N0) | 0;
   $j$134$us = 0;
   do {
    HEAP32[$vla + ((Math_imul($j$134$us, $stride) | 0) + $i$136$us << 2) >> 2] = HEAP32[$X + ($j$134$us + $mul19$us << 2) >> 2];
    $j$134$us = $j$134$us + 1 | 0;
   } while (($j$134$us | 0) != ($N0 | 0));
   $i$136$us = $i$136$us + 1 | 0;
  } while (($i$136$us | 0) != ($stride | 0));
  $mul31 = $mul << 2;
  _memcpy($X | 0, $vla | 0, $mul31 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $add$ptr1 = 48 + ($stride << 2) + -8 | 0;
  if (!(($stride | 0) > 0 & ($N0 | 0) > 0)) {
   $mul31 = $mul << 2;
   _memcpy($X | 0, $vla | 0, $mul31 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $i$041$us = 0;
  do {
   $mul5$us = Math_imul(HEAP32[$add$ptr1 + ($i$041$us << 2) >> 2] | 0, $N0) | 0;
   $j$039$us = 0;
   do {
    HEAP32[$vla + ((Math_imul($j$039$us, $stride) | 0) + $i$041$us << 2) >> 2] = HEAP32[$X + ($mul5$us + $j$039$us << 2) >> 2];
    $j$039$us = $j$039$us + 1 | 0;
   } while (($j$039$us | 0) != ($N0 | 0));
   $i$041$us = $i$041$us + 1 | 0;
  } while (($i$041$us | 0) != ($stride | 0));
  $mul31 = $mul << 2;
  _memcpy($X | 0, $vla | 0, $mul31 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _silk_resampler($S, $out, $in, $inLen) {
 $S = $S | 0;
 $out = $out | 0;
 $in = $in | 0;
 $inLen = $inLen | 0;
 var $0 = 0, $1 = 0, $15 = 0, $Fs_in_kHz = 0, $delayBuf = 0, $inputDelay = 0, $sub = 0;
 $Fs_in_kHz = $S + 284 | 0;
 $0 = HEAP32[$Fs_in_kHz >> 2] | 0;
 if (($0 | 0) > ($inLen | 0)) _celt_fatal(53276, 53229, 184);
 $inputDelay = $S + 292 | 0;
 $1 = HEAP32[$inputDelay >> 2] | 0;
 if (($0 | 0) < ($1 | 0)) _celt_fatal(53316, 53229, 186);
 $sub = $0 - $1 | 0;
 $delayBuf = $S + 168 | 0;
 _memcpy($S + 168 + ($1 << 1) | 0, $in | 0, $sub << 1 | 0) | 0;
 switch (HEAP32[$S + 264 >> 2] | 0) {
 case 1:
  {
   _silk_resampler_private_up2_HQ($S, $out, $delayBuf, HEAP32[$Fs_in_kHz >> 2] | 0);
   _silk_resampler_private_up2_HQ($S, $out + (HEAP32[$S + 288 >> 2] << 1) | 0, $in + ($sub << 1) | 0, $inLen - (HEAP32[$Fs_in_kHz >> 2] | 0) | 0);
   break;
  }
 case 2:
  {
   _silk_resampler_private_IIR_FIR($S, $out, $delayBuf, HEAP32[$Fs_in_kHz >> 2] | 0);
   _silk_resampler_private_IIR_FIR($S, $out + (HEAP32[$S + 288 >> 2] << 1) | 0, $in + ($sub << 1) | 0, $inLen - (HEAP32[$Fs_in_kHz >> 2] | 0) | 0);
   break;
  }
 case 3:
  {
   _silk_resampler_private_down_FIR($S, $out, $delayBuf, HEAP32[$Fs_in_kHz >> 2] | 0);
   _silk_resampler_private_down_FIR($S, $out + (HEAP32[$S + 288 >> 2] << 1) | 0, $in + ($sub << 1) | 0, $inLen - (HEAP32[$Fs_in_kHz >> 2] | 0) | 0);
   break;
  }
 default:
  {
   _memcpy($out | 0, $delayBuf | 0, HEAP32[$Fs_in_kHz >> 2] << 1 | 0) | 0;
   _memcpy($out + (HEAP32[$S + 288 >> 2] << 1) | 0, $in + ($sub << 1) | 0, $inLen - (HEAP32[$Fs_in_kHz >> 2] | 0) << 1 | 0) | 0;
  }
 }
 $15 = HEAP32[$inputDelay >> 2] | 0;
 _memcpy($delayBuf | 0, $in + ($inLen - $15 << 1) | 0, $15 << 1 | 0) | 0;
 return;
}

function __celt_lpc($_lpc, $ac, $p) {
 $_lpc = $_lpc | 0;
 $ac = $ac | 0;
 $p = $p | 0;
 var $0 = 0.0, $2 = 0, $6 = 0.0, $7 = 0.0, $add = 0.0, $arrayidx18 = 0, $arrayidx21 = 0, $div = 0.0, $error$054 = 0.0, $i$055 = 0, $indvars$iv = 0, $j$050 = 0, $j$152 = 0, $rr$0$lcssa = 0.0, $rr$049 = 0.0, $sub12 = 0.0, $sub19 = 0, $i$055$looptemp = 0;
 $0 = +HEAPF32[$ac >> 2];
 _memset($_lpc | 0, 0, $p << 2 | 0) | 0;
 if (!(+HEAPF32[$ac >> 2] != 0.0)) return;
 $error$054 = $0;
 $i$055 = 0;
 $indvars$iv = 1;
 while (1) {
  $2 = $indvars$iv >>> 1;
  if (!$i$055) $rr$0$lcssa = 0.0; else {
   $j$050 = 0;
   $rr$049 = 0.0;
   while (1) {
    $add = $rr$049 + +HEAPF32[$_lpc + ($j$050 << 2) >> 2] * +HEAPF32[$ac + ($i$055 - $j$050 << 2) >> 2];
    $j$050 = $j$050 + 1 | 0;
    if (($j$050 | 0) == ($i$055 | 0)) {
     $rr$0$lcssa = $add;
     break;
    } else $rr$049 = $add;
   }
  }
  $i$055$looptemp = $i$055;
  $i$055 = $i$055 + 1 | 0;
  $div = ($rr$0$lcssa + +HEAPF32[$ac + ($i$055 << 2) >> 2]) / $error$054;
  $sub12 = -$div;
  HEAPF32[$_lpc + ($i$055$looptemp << 2) >> 2] = $sub12;
  if ($i$055 & 2147483646 | 0) {
   $sub19 = $i$055$looptemp + -1 | 0;
   $j$152 = 0;
   do {
    $arrayidx18 = $_lpc + ($j$152 << 2) | 0;
    $6 = +HEAPF32[$arrayidx18 >> 2];
    $arrayidx21 = $_lpc + ($sub19 - $j$152 << 2) | 0;
    $7 = +HEAPF32[$arrayidx21 >> 2];
    HEAPF32[$arrayidx18 >> 2] = $6 + $7 * $sub12;
    HEAPF32[$arrayidx21 >> 2] = $7 + $6 * $sub12;
    $j$152 = $j$152 + 1 | 0;
   } while (($j$152 | 0) != ($2 | 0));
  }
  $error$054 = $error$054 - $error$054 * ($div * $div);
  if (!(($i$055 | 0) < ($p | 0) ? !($error$054 < +HEAPF32[$ac >> 2] * 1.0000000474974513e-03) : 0)) break; else $indvars$iv = $indvars$iv + 1 | 0;
 }
 return;
}

function __celt_autocorr($x, $ac, $window, $overlap, $lag, $n) {
 $x = $x | 0;
 $ac = $ac | 0;
 $window = $window | 0;
 $overlap = $overlap | 0;
 $lag = $lag | 0;
 $n = $n | 0;
 var $2 = 0.0, $add = 0, $add29 = 0, $add37 = 0.0, $arrayidx41 = 0, $d$0$lcssa = 0.0, $d$047 = 0.0, $i$151 = 0, $i$246 = 0, $k$049 = 0, $sub = 0, $sub15 = 0, $vla = 0, $xptr$0 = 0, sp = 0;
 sp = STACKTOP;
 $sub = $n - $lag | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($n << 2) | 0) + 15 & -16) | 0;
 if (($n | 0) <= 0) _celt_fatal(49575, 49559, 228);
 if (($overlap | 0) <= -1) _celt_fatal(49597, 49559, 229);
 if (!$overlap) $xptr$0 = $x; else {
  _memcpy($vla | 0, $x | 0, $n << 2 | 0) | 0;
  $i$151 = 0;
  do {
   $2 = +HEAPF32[$window + ($i$151 << 2) >> 2];
   HEAPF32[$vla + ($i$151 << 2) >> 2] = +HEAPF32[$x + ($i$151 << 2) >> 2] * $2;
   $sub15 = $n - $i$151 + -1 | 0;
   HEAPF32[$vla + ($sub15 << 2) >> 2] = $2 * +HEAPF32[$x + ($sub15 << 2) >> 2];
   $i$151 = $i$151 + 1 | 0;
  } while (($i$151 | 0) != ($overlap | 0));
  $xptr$0 = $vla;
 }
 $add = $lag + 1 | 0;
 _celt_pitch_xcorr_c($xptr$0, $xptr$0, $ac, $sub, $add);
 $k$049 = 0;
 do {
  $add29 = $k$049 + $sub | 0;
  if (($add29 | 0) < ($n | 0)) {
   $d$047 = 0.0;
   $i$246 = $add29;
   while (1) {
    $add37 = $d$047 + +HEAPF32[$xptr$0 + ($i$246 << 2) >> 2] * +HEAPF32[$xptr$0 + ($i$246 - $k$049 << 2) >> 2];
    $i$246 = $i$246 + 1 | 0;
    if (($i$246 | 0) == ($n | 0)) {
     $d$0$lcssa = $add37;
     break;
    } else $d$047 = $add37;
   }
  } else $d$0$lcssa = 0.0;
  $arrayidx41 = $ac + ($k$049 << 2) | 0;
  HEAPF32[$arrayidx41 >> 2] = $d$0$lcssa + +HEAPF32[$arrayidx41 >> 2];
  $k$049 = $k$049 + 1 | 0;
 } while (($k$049 | 0) != ($add | 0));
 STACKTOP = sp;
 return;
}

function _opus_encode_float($st, $pcm, $analysis_frame_size, $data, $out_data_bytes) {
 $st = $st | 0;
 $pcm = $pcm | 0;
 $analysis_frame_size = $analysis_frame_size | 0;
 $data = $data | 0;
 $out_data_bytes = $out_data_bytes | 0;
 var $0 = 0, $1 = 0, $div$i = 0, $mul29$i = 0, $new_size$0$i = 0, $new_size$037$i = 0, $retval$0$i = 0, $variable_duration$off$i = 0;
 $0 = HEAP32[$st + 156 >> 2] | 0;
 $1 = HEAP32[$st + 144 >> 2] | 0;
 $div$i = ($1 | 0) / 400 | 0;
 do if (($div$i | 0) > ($analysis_frame_size | 0)) $retval$0$i = -1; else {
  if (($0 | 0) == 5e3) $new_size$037$i = $analysis_frame_size; else {
   $variable_duration$off$i = $0 + -5001 | 0;
   if ($variable_duration$off$i >>> 0 >= 9) {
    $retval$0$i = -1;
    break;
   }
   if (($0 | 0) < 5006) $new_size$0$i = $div$i << $variable_duration$off$i; else $new_size$0$i = (Math_imul($0 + -5003 | 0, $1) | 0) / 50 | 0;
   if (($new_size$0$i | 0) > ($analysis_frame_size | 0)) {
    $retval$0$i = -1;
    break;
   } else $new_size$037$i = $new_size$0$i;
  }
  if (!(($new_size$037$i * 100 | 0) == ($1 | 0) | (($new_size$037$i * 400 | 0) == ($1 | 0) | ($new_size$037$i * 200 | 0) == ($1 | 0)))) {
   $mul29$i = $new_size$037$i * 50 | 0;
   if (!(($mul29$i | 0) == ($1 * 6 | 0) | (($mul29$i | 0) == ($1 * 5 | 0) | (($mul29$i | 0) == ($1 << 2 | 0) | (($mul29$i | 0) == ($1 * 3 | 0) | (($mul29$i | 0) == ($1 | 0) | ($new_size$037$i * 25 | 0) == ($1 | 0))))))) {
    $retval$0$i = -1;
    break;
   }
  }
  $retval$0$i = $new_size$037$i;
 } while (0);
 return _opus_encode_native($st, $pcm, $retval$0$i, $data, $out_data_bytes, 24, $pcm, $analysis_frame_size, -2, HEAP32[$st + 112 >> 2] | 0, 1) | 0;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $8 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$3 = 0, $__len$addr$0 = 0, $and6 = 0, $and7 = 0, $cmp8 = 0, $specify_precision$0$off0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $__fmtp$addr$1 = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$1 = $__fmtp$addr$0 + 1 | 0;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags & 16384;
 $cmp8 = ($and6 | 0) == 260;
 if ($cmp8) {
  $__fmtp$addr$2 = $__fmtp$addr$1;
  $specify_precision$0$off0 = 0;
 } else {
  HEAP8[$__fmtp$addr$1 >> 0] = 46;
  HEAP8[$__fmtp$addr$1 + 1 >> 0] = 42;
  $__fmtp$addr$2 = $__fmtp$addr$1 + 2 | 0;
  $specify_precision$0$off0 = 1;
 }
 $__fmtp$addr$3 = $__fmtp$addr$2;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$3 >> 0] = $0;
  $__fmtp$addr$3 = $__fmtp$addr$3 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 L14 : do switch ($and6 & 511) {
 case 4:
  {
   $$sink = $and7 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   $$sink = $and7 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   $8 = $and7 >>> 9 & 255;
   if ($cmp8) {
    $$sink = $8 ^ 97;
    break L14;
   } else {
    $$sink = $8 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[$__fmtp$addr$3 >> 0] = $$sink;
 return $specify_precision$0$off0 | 0;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0) $retval$2 = 1; else if (!$thrown_type) $retval$2 = 0; else {
  $1 = ___dynamic_cast($thrown_type) | 0;
  if (!$1) $retval$2 = 0; else {
   HEAP32[$info >> 2] = $1;
   HEAP32[$info + 4 >> 2] = 0;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $number_of_dst_type = $info + 48 | 0;
   dest = $dst_ptr_leading_to_static_ptr;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
   HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
   HEAP32[$number_of_dst_type >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 7]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$dst_ptr_leading_to_static_ptr >> 2];
    $retval$0 = 1;
   } else $retval$0 = 0;
   $retval$2 = $retval$0;
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _sinc($cutoff, $x, $N, $window_func) {
 $cutoff = +$cutoff;
 $x = +$x;
 $N = $N | 0;
 $window_func = $window_func | 0;
 var $0 = 0.0, $add1$i = 0.0, $conv = 0.0, $conv19 = 0.0, $conv2$i = 0, $conv3 = 0.0, $conv4$i = 0.0, $conv8$i = 0.0, $div = 0.0, $mul$i = 0.0, $mul11 = 0.0, $mul13$i = 0.0, $mul6$i = 0.0, $mul9$i = 0.0, $retval$0 = 0.0, $sub$i = 0.0, $sub19$i = 0.0, $sub31$i = 0.0, $window_func$idx$val = 0;
 $conv = $x;
 $0 = +Math_abs(+$conv);
 if ($0 < 1.0e-06) {
  $retval$0 = $cutoff;
  return +$retval$0;
 }
 $conv3 = +($N | 0);
 if ($0 > $conv3 * .5) {
  $retval$0 = 0.0;
  return +$retval$0;
 }
 $mul11 = $cutoff * $x * 3.141592653589793;
 $div = +Math_sin(+$mul11) * $cutoff / $mul11;
 $conv19 = +Math_abs(+($conv * 2.0 / $conv3));
 $window_func$idx$val = HEAP32[$window_func >> 2] | 0;
 $mul$i = $conv19 * +(HEAP32[$window_func + 4 >> 2] | 0);
 $conv2$i = ~~+Math_floor(+$mul$i);
 $sub$i = $mul$i - +($conv2$i | 0);
 $conv4$i = $sub$i;
 $mul6$i = $sub$i * $sub$i;
 $conv8$i = $sub$i * $mul6$i;
 $mul9$i = $conv8$i * .1666666667;
 $add1$i = $mul9$i - $conv4$i * .1666666667;
 $mul13$i = $mul6$i * .5;
 $sub19$i = $mul13$i + $conv4$i - $conv8$i * .5;
 $sub31$i = $mul13$i - $conv4$i * .3333333333 - $mul9$i;
 $retval$0 = $div * (+HEAPF64[$window_func$idx$val + ($conv2$i + 3 << 3) >> 3] * $add1$i + (+HEAPF64[$window_func$idx$val + ($conv2$i + 2 << 3) >> 3] * $sub19$i + (+HEAPF64[$window_func$idx$val + ($conv2$i << 3) >> 3] * $sub31$i + +HEAPF64[$window_func$idx$val + ($conv2$i + 1 << 3) >> 3] * (1.0 - $add1$i - $sub19$i - $sub31$i))));
 return +$retval$0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function ___strchrnul($s) {
 $s = $s | 0;
 var $3 = 0, $4 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $retval$1 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, label = 0;
 L1 : do if (!($s & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $s$addr$036 = $s;
  while (1) {
   switch (HEAP8[$s$addr$036 >> 0] | 0) {
   case 0:
   case 58:
    {
     $retval$1 = $s$addr$036;
     break L1;
     break;
    }
   default:
    {}
   }
   $incdec$ptr = $s$addr$036 + 1 | 0;
   if (!($incdec$ptr & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break L1;
   } else $s$addr$036 = $incdec$ptr;
  }
 } while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L8 : do if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) {
   $4 = $3;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    if (($4 & -2139062144 ^ -2139062144) & ($4 ^ 976894522) + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L8;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $4 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($4 & -2139062144 ^ -2139062144) & $4 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $s$addr$1 = $w$0$lcssa;
  while (1) switch (HEAP8[$s$addr$1 >> 0] | 0) {
  case 0:
  case 58:
   {
    $retval$1 = $s$addr$1;
    break L6;
    break;
   }
  default:
   $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function _deinterleave_hadamard($X, $N0, $stride, $hadamard) {
 $X = $X | 0;
 $N0 = $N0 | 0;
 $stride = $stride | 0;
 $hadamard = $hadamard | 0;
 var $add$ptr2 = 0, $i$042$us = 0, $i$137$us = 0, $j$040$us = 0, $j$135$us = 0, $mul = 0, $mul24$us = 0, $mul9$us = 0, $vla = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($stride, $N0) | 0;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($mul << 2) | 0) + 15 & -16) | 0;
 if (($stride | 0) <= 0) _celt_fatal(47743, 47629, 591);
 if (!$hadamard) {
  if (($N0 | 0) > 0) {
   $i$137$us = 0;
   do {
    $mul24$us = Math_imul($i$137$us, $N0) | 0;
    $j$135$us = 0;
    do {
     HEAP32[$vla + ($j$135$us + $mul24$us << 2) >> 2] = HEAP32[$X + ((Math_imul($j$135$us, $stride) | 0) + $i$137$us << 2) >> 2];
     $j$135$us = $j$135$us + 1 | 0;
    } while (($j$135$us | 0) != ($N0 | 0));
    $i$137$us = $i$137$us + 1 | 0;
   } while (($i$137$us | 0) != ($stride | 0));
  }
 } else {
  $add$ptr2 = 48 + ($stride << 2) + -8 | 0;
  if (($N0 | 0) > 0) {
   $i$042$us = 0;
   do {
    $mul9$us = Math_imul(HEAP32[$add$ptr2 + ($i$042$us << 2) >> 2] | 0, $N0) | 0;
    $j$040$us = 0;
    do {
     HEAP32[$vla + ($mul9$us + $j$040$us << 2) >> 2] = HEAP32[$X + ((Math_imul($j$040$us, $stride) | 0) + $i$042$us << 2) >> 2];
     $j$040$us = $j$040$us + 1 | 0;
    } while (($j$040$us | 0) != ($N0 | 0));
    $i$042$us = $i$042$us + 1 | 0;
   } while (($i$042$us | 0) != ($stride | 0));
  }
 }
 _memcpy($X | 0, $vla | 0, $mul << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _silk_ana_filt_bank_1($in, $S, $outL, $outH, $N) {
 $in = $in | 0;
 $S = $S | 0;
 $outL = $outL | 0;
 $outH = $outH | 0;
 $N = $N | 0;
 var $add10 = 0, $add1142 = 0, $add27 = 0, $add29 = 0, $add3043 = 0, $add32 = 0, $arrayidx18 = 0, $k$041 = 0, $mul = 0, $shl = 0, $shl17 = 0, $shr = 0, $sub = 0, $sub19 = 0, $sub54 = 0;
 $shr = $N >> 1;
 if (($N | 0) <= 1) return;
 $arrayidx18 = $S + 4 | 0;
 $add1142 = HEAP32[$S >> 2] | 0;
 $add3043 = HEAP32[$arrayidx18 >> 2] | 0;
 $k$041 = 0;
 do {
  $mul = $k$041 << 1;
  $shl = HEAP16[$in + ($mul << 1) >> 1] << 10;
  $sub = $shl - $add1142 | 0;
  $add10 = ((Math_imul($sub & 65535, -24290) | 0) >> 16) + (Math_imul($sub >> 16, -24290) | 0) + $shl | 0;
  $add1142 = $add10 + $sub | 0;
  $shl17 = HEAP16[$in + (($mul | 1) << 1) >> 1] << 10;
  $sub19 = $shl17 - $add3043 | 0;
  $add27 = ((($sub19 & 65535) * 10788 | 0) >>> 16) + (($sub19 >> 16) * 10788 | 0) | 0;
  $add29 = $add27 + $add3043 | 0;
  $add3043 = $add27 + $shl17 | 0;
  $add32 = $add29 + $add10 | 0;
  HEAP16[$outL + ($k$041 << 1) >> 1] = ($add32 | 0) > 67107839 ? 32767 : ($add32 | 0) < -67109888 ? -32768 : (($add32 >>> 10) + 1 | 0) >>> 1 & 65535;
  $sub54 = $add29 - $add10 | 0;
  HEAP16[$outH + ($k$041 << 1) >> 1] = ($sub54 | 0) > 67107839 ? 32767 : ($sub54 | 0) < -67109888 ? -32768 : (($sub54 >>> 10) + 1 | 0) >>> 1 & 65535;
  $k$041 = $k$041 + 1 | 0;
 } while (($k$041 | 0) < ($shr | 0));
 HEAP32[$S >> 2] = $add1142;
 HEAP32[$arrayidx18 >> 2] = $add3043;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add14 = 0, $add1435 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $sub23 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add14 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add14 >>> 0 > 1073741823) _abort(); else $add1435 = $add14;
 } else $add1435 = 1073741807;
 $call$i$i$i = __Znwm($add1435 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy);
 $sub23 = $__old_sz - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) | 0, $cond$i + ($__n_copy << 2) | 0, $sub23);
 if (($__old_cap | 0) != 1) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1435 | -2147483648;
 return;
}

function _silk_inner_product_FLP($data1, $data2, $dataSize) {
 $data1 = $data1 | 0;
 $data2 = $data2 | 0;
 $dataSize = $dataSize | 0;
 var $add12 = 0, $add20 = 0, $add39 = 0.0, $add4 = 0, $i$0$lcssa = 0, $i$031 = 0, $i$128 = 0, $result$0$lcssa = 0.0, $result$032 = 0.0, $result$1$lcssa = 0.0, $result$129 = 0.0, $sub = 0;
 $sub = $dataSize + -3 | 0;
 if (($dataSize | 0) > 3) {
  $i$031 = 0;
  $result$032 = 0.0;
  do {
   $add4 = $i$031 | 1;
   $add12 = $i$031 | 2;
   $add20 = $i$031 | 3;
   $result$032 = $result$032 + (+HEAPF32[$data1 + ($i$031 << 2) >> 2] * +HEAPF32[$data2 + ($i$031 << 2) >> 2] + +HEAPF32[$data1 + ($add4 << 2) >> 2] * +HEAPF32[$data2 + ($add4 << 2) >> 2] + +HEAPF32[$data1 + ($add12 << 2) >> 2] * +HEAPF32[$data2 + ($add12 << 2) >> 2] + +HEAPF32[$data1 + ($add20 << 2) >> 2] * +HEAPF32[$data2 + ($add20 << 2) >> 2]);
   $i$031 = $i$031 + 4 | 0;
  } while (($i$031 | 0) < ($sub | 0));
  $i$0$lcssa = $dataSize & -4;
  $result$0$lcssa = $result$032;
 } else {
  $i$0$lcssa = 0;
  $result$0$lcssa = 0.0;
 }
 if (($i$0$lcssa | 0) >= ($dataSize | 0)) {
  $result$1$lcssa = $result$0$lcssa;
  return +$result$1$lcssa;
 }
 $i$128 = $i$0$lcssa;
 $result$129 = $result$0$lcssa;
 while (1) {
  $add39 = $result$129 + +HEAPF32[$data1 + ($i$128 << 2) >> 2] * +HEAPF32[$data2 + ($i$128 << 2) >> 2];
  $i$128 = $i$128 + 1 | 0;
  if (($i$128 | 0) == ($dataSize | 0)) {
   $result$1$lcssa = $add39;
   break;
  } else $result$129 = $add39;
 }
 return +$result$1$lcssa;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, -10, -1) | 0;
   $13 = _i64Add($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp + (Math_imul($y$010, -10) | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function _downmix_float($_x, $y, $subframe, $offset, $c1, $c2, $C) {
 $_x = $_x | 0;
 $y = $y | 0;
 $subframe = $subframe | 0;
 $offset = $offset | 0;
 $c1 = $c1 | 0;
 $c2 = $c2 | 0;
 $C = $C | 0;
 var $arrayidx13 = 0, $arrayidx31$us = 0, $c$036$us = 0, $cmp38 = 0, $j$039 = 0, $j$132 = 0, $j$234$us = 0, $mul12 = 0.0, $mul30$us = 0.0;
 $cmp38 = ($subframe | 0) > 0;
 if ($cmp38) {
  $j$039 = 0;
  do {
   HEAPF32[$y + ($j$039 << 2) >> 2] = +HEAPF32[$_x + ((Math_imul($j$039 + $offset | 0, $C) | 0) + $c1 << 2) >> 2] * 32768.0;
   $j$039 = $j$039 + 1 | 0;
  } while (($j$039 | 0) != ($subframe | 0));
 }
 if (($c2 | 0) > -1) {
  if (!$cmp38) return;
  $j$132 = 0;
  do {
   $mul12 = +HEAPF32[$_x + ((Math_imul($j$132 + $offset | 0, $C) | 0) + $c2 << 2) >> 2] * 32768.0;
   $arrayidx13 = $y + ($j$132 << 2) | 0;
   HEAPF32[$arrayidx13 >> 2] = +HEAPF32[$arrayidx13 >> 2] + $mul12;
   $j$132 = $j$132 + 1 | 0;
  } while (($j$132 | 0) != ($subframe | 0));
  return;
 }
 if (($C | 0) < 2 | ($c2 | 0) != -2 | $cmp38 ^ 1) return;
 $c$036$us = 1;
 do {
  $j$234$us = 0;
  do {
   $mul30$us = +HEAPF32[$_x + ((Math_imul($j$234$us + $offset | 0, $C) | 0) + $c$036$us << 2) >> 2] * 32768.0;
   $arrayidx31$us = $y + ($j$234$us << 2) | 0;
   HEAPF32[$arrayidx31$us >> 2] = +HEAPF32[$arrayidx31$us >> 2] + $mul30$us;
   $j$234$us = $j$234$us + 1 | 0;
  } while (($j$234$us | 0) != ($subframe | 0));
  $c$036$us = $c$036$us + 1 | 0;
 } while (($c$036$us | 0) != ($C | 0));
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below) {
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   $number_to_static_ptr26 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
  $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if (($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$cast = 0, $$pr = 0, $0 = 0, $3 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $iov = 0, $iov_len = 0, $num = 0, $retval$0 = 0, $rpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $iov = sp;
 $num = sp + 16 | 0;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 if (!(___wasi_syscall_ret(___wasi_fd_read(HEAP32[$f + 60 >> 2] | 0, $iov | 0, 2, $num | 0) | 0) | 0)) {
  $$pr = HEAP32[$num >> 2] | 0;
  if (($$pr | 0) < 1) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len >> 2] | 0;
   if ($$pr >>> 0 > $5 >>> 0) {
    $6 = HEAP32[$buf3 >> 2] | 0;
    $rpos = $f + 4 | 0;
    HEAP32[$rpos >> 2] = $6;
    $$cast = $6;
    HEAP32[$f + 8 >> 2] = $$cast + ($$pr - $5);
    if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
     HEAP32[$rpos >> 2] = $$cast + 1;
     HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
     $retval$0 = $len;
    }
   } else $retval$0 = $$pr;
  }
 } else {
  HEAP32[$num >> 2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$f >> 2] = $3 & 48 ^ 16 | HEAP32[$f >> 2];
  $retval$0 = $3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $10 = 0;
  $11 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $10 = 0;
    $11 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[16056] | 0;
  if (!$4) HEAP32[16056] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $12 = -1;
   $13 = -1;
   break;
  } else {
   $6 = _i64Subtract(0, 0, $2 | 0, $3 | 0) | 0;
   $7 = getTempRet0() | 0;
   $12 = $cmp1 ? $6 : $2;
   $13 = $cmp1 ? $7 : $3;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $12 = 0;
   $13 = 0;
  } while (0);
  $10 = $13;
  $11 = $12;
 } while (0);
 setTempRet0($10 | 0);
 STACKTOP = sp;
 return $11 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($__n) {
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__v = 0, $add = 0, $mul$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $0 = HEAP32[15996] | 0;
 $1 = HEAP32[15995] | 0;
 do if ($0 - $1 >> 2 >>> 0 < $__n >>> 0) {
  $2 = HEAP32[15994] | 0;
  $sub$ptr$div$i = $1 - $2 >> 2;
  $add = $sub$ptr$div$i + $__n | 0;
  if ($add >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(); else {
   $sub$ptr$sub$i$i$i = $0 - $2 | 0;
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < 536870911 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : 1073741823, $sub$ptr$div$i);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($__v);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__n); while (0);
 STACKTOP = sp;
 return;
}

function _speex_resampler_process_interleaved_float($st, $in, $in_len, $out, $out_len) {
 $st = $st | 0;
 $in = $in | 0;
 $in_len = $in_len | 0;
 $out = $out | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i$029 = 0, $i$029$us = 0, $in_stride = 0, $nb_channels = 0, $out_stride = 0;
 $0 = HEAP32[$out_len >> 2] | 0;
 $1 = HEAP32[$in_len >> 2] | 0;
 $in_stride = $st + 88 | 0;
 $2 = HEAP32[$in_stride >> 2] | 0;
 $out_stride = $st + 92 | 0;
 $3 = HEAP32[$out_stride >> 2] | 0;
 $nb_channels = $st + 20 | 0;
 $4 = HEAP32[$nb_channels >> 2] | 0;
 HEAP32[$out_stride >> 2] = $4;
 HEAP32[$in_stride >> 2] = $4;
 if ($4 | 0) if (!$in) {
  $i$029$us = 0;
  do {
   HEAP32[$out_len >> 2] = $0;
   HEAP32[$in_len >> 2] = $1;
   _speex_resampler_process_float($st, $i$029$us, 0, $in_len, $out + ($i$029$us << 2) | 0, $out_len);
   $i$029$us = $i$029$us + 1 | 0;
  } while ($i$029$us >>> 0 < (HEAP32[$nb_channels >> 2] | 0) >>> 0);
 } else {
  $i$029 = 0;
  do {
   HEAP32[$out_len >> 2] = $0;
   HEAP32[$in_len >> 2] = $1;
   _speex_resampler_process_float($st, $i$029, $in + ($i$029 << 2) | 0, $in_len, $out + ($i$029 << 2) | 0, $out_len);
   $i$029 = $i$029 + 1 | 0;
  } while ($i$029 >>> 0 < (HEAP32[$nb_channels >> 2] | 0) >>> 0);
 }
 HEAP32[$in_stride >> 2] = $2;
 HEAP32[$out_stride >> 2] = $3;
 return (HEAP32[$st + 84 >> 2] | 0) == 43 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call3 = 0, $sub = 0, $sub$ptr$div = 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $__s$addr$0, $$sroa$speculated);
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + ($$sroa$speculated << 2);
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + ($$sroa$speculated << 2) | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($this, $call3) | 0) == -1) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 var $$sroa$speculated = 0, $add = 0, $call$i$i$i = 0, $cond$i = 0, $cond30 = 0, $mul = 0, $sub23 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond30 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond30 = -17;
 $call$i$i$i = __Znwm($cond30) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy | 0, $cond$i + $__n_copy | 0, $sub23) | 0;
 if (($__old_cap | 0) != 10) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond30 | -2147483648;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0;
 do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below); else if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[16056] | 0;
  if (!$4) HEAP32[16056] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 65535 | ($4 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    $retval$0 = -1;
    break;
   }
   if ($cmp1) $retval$0 = 0 - $2 & 65535; else $retval$0 = $2 & 65535;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call3 = 0, $sub = 0, $sub$ptr$sub = 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $__s$addr$0, $$sroa$speculated) | 0;
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + $$sroa$speculated;
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + $$sroa$speculated | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($this, $call3) | 0) == -1) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__p2 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0;
 } else {
  $0 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $1 = _strtoll_l($__a, $__p2, $__base) | 0;
  $2 = getTempRet0() | 0;
  $3 = HEAP32[16056] | 0;
  if (!$3) HEAP32[16056] = $0;
  L7 : do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   do if (($3 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0) {
     $retval$0 = 2147483647;
     break L7;
    }
   } else {
    if (($2 | 0) < -1 | ($2 | 0) == -1 & $1 >>> 0 < 2147483648) {
     HEAP32[$__err >> 2] = 4;
     break;
    }
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 2147483647) {
     HEAP32[$__err >> 2] = 4;
     $retval$0 = 2147483647;
     break L7;
    } else {
     $retval$0 = $1;
     break L7;
    }
   } while (0);
   $retval$0 = -2147483648;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[16056] | 0;
  if (!$4) HEAP32[16056] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[16056] | 0;
  if (!$4) HEAP32[16056] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $2 = 0, $5 = 0, $9 = 0, $add$ptr = 0, $call = 0, $cond$i = 0, $cond$i18 = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 63]($add$ptr) | 0;
 $2 = HEAP8[$call + 8 + 3 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $2 & 255;
 $5 = HEAP8[$call + 20 + 3 >> 0] | 0;
 if ($5 << 24 >> 24 < 0) $cond$i18 = HEAP32[$call + 16 >> 2] | 0; else $cond$i18 = $5 & 255;
 do if (($cond$i | 0) == (0 - $cond$i18 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $9 = HEAP32[$__h >> 2] | 0;
  if (($9 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($9 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $9 + 12;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $3 = 0, $7 = 0, $add$ptr = 0, $call = 0, $cond$i = 0, $cond$i19 = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 63]($add$ptr) | 0;
 $1 = HEAP8[$call + 11 >> 0] | 0;
 if ($1 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $1 & 255;
 $3 = HEAP8[$call + 12 + 11 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) $cond$i19 = HEAP32[$call + 16 >> 2] | 0; else $cond$i19 = $3 & 255;
 do if (($cond$i | 0) == (0 - $cond$i19 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $7 = HEAP32[$__h >> 2] | 0;
  if (($7 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($7 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $7 + 12;
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $sub$ptr$div$i$i = 0;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 do if ($sub$ptr$div$i$i >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } else {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, HEAP32[$__first$addr$0 >> 2] | 0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, 0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $sub$ptr$div$i$i = 0;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 do if ($sub$ptr$div$i$i >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } else {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, HEAP32[$__first$addr$0 >> 2] | 0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, 0);
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function ___newlocale($mask, $name, $loc) {
 $mask = $mask | 0;
 $name = $name | 0;
 $loc = $loc | 0;
 var $i$028 = 0, $i$126 = 0, $j$027 = 0, $lm$0 = 0, $retval$0 = 0, $tmp = 0, $tobool11 = 0, $tobool8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmp = sp;
 L1 : do if (!(___loc_is_allocated($loc) | 0)) {
  $tobool8 = ($loc | 0) != 0;
  $i$126 = 0;
  $j$027 = 0;
  do {
   $tobool11 = (1 << $i$126 & $mask | 0) == 0;
   if ($tobool8 & $tobool11) $lm$0 = HEAP32[$loc + ($i$126 << 2) >> 2] | 0; else $lm$0 = ___get_locale($i$126, $tobool11 ? 66148 : $name) | 0;
   $j$027 = $j$027 + (($lm$0 | 0) != 0 & 1) | 0;
   HEAP32[$tmp + ($i$126 << 2) >> 2] = $lm$0;
   $i$126 = $i$126 + 1 | 0;
  } while (($i$126 | 0) != 6);
  switch ($j$027 & 2147483647 | 0) {
  case 0:
   {
    $retval$0 = 64200;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[$tmp >> 2] | 0) == 44180) {
     $retval$0 = 44208;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $retval$0 = $loc;
 } else {
  $i$028 = 0;
  do {
   if (1 << $i$028 & $mask | 0) HEAP32[$loc + ($i$028 << 2) >> 2] = ___get_locale($i$028, $name) | 0;
   $i$028 = $i$028 + 1 | 0;
  } while (($i$028 | 0) != 6);
  $retval$0 = $loc;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 42080, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  HEAP32[16056] = 61;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $add = 0, $cond$i23 = 0, $cond$i28 = 0, $cond$i33 = 0, $tobool$i$i = 0;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i23 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i33 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i23 = $1 & 255;
  $cond$i33 = 1;
 }
 if (($cond$i33 - $cond$i23 | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i33, $cond$i23 + $__n - $cond$i33 | 0, $cond$i23, $cond$i23, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i28 = HEAP32[$this >> 2] | 0; else $cond$i28 = $this;
  __ZNSt3__211char_traitsIwE4copyEPwPKwm($cond$i28 + ($cond$i23 << 2) | 0, $__s, $__n);
  $add = $cond$i23 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i28 + ($add << 2) | 0, 0);
 }
 return $this | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $sub = 0, $sub$ptr$div = 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s$addr$0, $0, $4);
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + ($4 << 2);
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + ($4 << 2) | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($call11 | 0) == -1) break;
   HEAP32[$__s$addr$0 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($call11) | 0;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $and$i$i = 0, $call$i$i$i = 0, $sub$ptr$sub$i$i = 0;
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $__first$addr$0 = $__first;
 $__p$1 = $__p$0;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, HEAP8[$__first$addr$0 >> 0] | 0);
  $__first$addr$0 = $__first$addr$0 + 1 | 0;
  $__p$1 = $__p$1 + 1 | 0;
 }
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $sub$ptr$sub$i$i | 0, 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $and$i$i = 0, $call$i$i$i = 0, $sub$ptr$sub$i$i = 0;
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $__first$addr$0 = $__first;
 $__p$1 = $__p$0;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, HEAP8[$__first$addr$0 >> 0] | 0);
  $__first$addr$0 = $__first$addr$0 + 1 | 0;
  $__p$1 = $__p$1 + 1 | 0;
 }
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $sub$ptr$sub$i$i | 0, 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $sub = 0, $sub$ptr$sub = 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s$addr$0, $0, $4) | 0;
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + $4;
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + $4 | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($call11 | 0) == -1) break;
   HEAP8[$__s$addr$0 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($call11) | 0;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $add = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $tobool$i$i = 0;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i24 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i35 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i24 = $0 & 255;
  $cond$i35 = 10;
 }
 if (($cond$i35 - $cond$i24 | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i35, $cond$i24 + $__n - $cond$i35 | 0, $cond$i24, $cond$i24, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i30 = HEAP32[$this >> 2] | 0; else $cond$i30 = $this;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($cond$i30 + $cond$i24 | 0, $__s, $__n) | 0;
  $add = $cond$i24 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i30 + $add | 0, 0);
 }
 return $this | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $tobool$i = 0, label = 0;
 $0 = $this + 8 | 0;
 $__size_$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $1 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = $1 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $5 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $5;
 }
 $__p$0 = $call12$pn + ($__sz$0 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__c);
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + 4 | 0, 0);
 return;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 93;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 127]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 94;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 93;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 127]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 94;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $__loc$idx1$val = 0, $call$i = 0, $call$i5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx1$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx1$val, 65324) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, 41392, 41424, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx1$val, 65332) | 0;
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 63]($call$i5) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 63]($call$i5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $__loc$idx1$val = 0, $call$i = 0, $call$i5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $__loc$idx1$val = HEAP32[$__loc >> 2] | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx1$val, 65292) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 7]($call$i, 41392, 41424, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc$idx1$val, 65308) | 0;
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 63]($call$i5) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 63]($call$i5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $3 = 0, $__size_$i$i = 0, $add8 = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i33 = 0;
 if ($__n | 0) {
  $__size_$i$i = $this + 11 | 0;
  $0 = HEAP8[$__size_$i$i >> 0] | 0;
  if ($0 << 24 >> 24 < 0) {
   $cond$i22 = HEAP32[$this + 4 >> 2] | 0;
   $cond$i33 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   $cond$i22 = $0 & 255;
   $cond$i33 = 10;
  }
  if (($cond$i33 - $cond$i22 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i33, $cond$i22 + $__n - $cond$i33 | 0, $cond$i22, $cond$i22);
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $3 = $0;
  if ($3 << 24 >> 24 < 0) $cond$i32 = HEAP32[$this >> 2] | 0; else $cond$i32 = $this;
  __ZNSt3__211char_traitsIcE6assignEPcmc($cond$i32 + $cond$i22 | 0, $__n, 0) | 0;
  $add8 = $cond$i22 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add8; else HEAP8[$__size_$i$i >> 0] = $add8;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i32 + $add8 | 0, 0);
 }
 return $this | 0;
}

function __ZNSt3__211__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $4 = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $tobool$i = 0, label = 0;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = $0 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $4 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $4;
 }
 $__p$0 = $call12$pn + $__sz$0 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__c);
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + 1 | 0, 0);
 return;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call16 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 93;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 1 : $mul4) : -1;
 $sub$ptr$sub10 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $call16 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call16) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call16;
  $8 = $call16;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call16;
  if (!$$pr) $8 = $call16; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 127]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 94;
 HEAP32[$__n >> 2] = $8 + $sub$ptr$sub10;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $3;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i18 = 0, $cond$i23 = 0, $tobool$i$i = 0;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0; else $cond$i = 1;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i23 = HEAP32[$this + 4 >> 2] | 0; else $cond$i23 = $1 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i, $__n - $cond$i | 0, $cond$i23, 0, $cond$i23, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i18 = HEAP32[$this >> 2] | 0; else $cond$i18 = $this;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm($cond$i18, $__s, $__n);
  __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i18 + ($__n << 2) | 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($__v) {
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_6 = 0, $__value_$i$i$i = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[15994] | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[15995] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[15994] | 0;
 HEAP32[15994] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[15995] | 0;
 HEAP32[15995] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[15996] | 0;
 HEAP32[15996] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $tobool$i$i = 0;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i25 = HEAP32[$this + 4 >> 2] | 0; else $cond$i25 = $0 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i, $__n - $cond$i | 0, $cond$i25, 0, $cond$i25, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i19 = HEAP32[$this >> 2] | 0; else $cond$i19 = $this;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19, $__s, $__n) | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i19 + $__n | 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } while (0);
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _silk_InitDecoder($decState) {
 $decState = $decState | 0;
 var $sStereo = 0;
 _memset($decState + 4 | 0, 0, 4260) | 0;
 HEAP32[$decState + 2376 >> 2] = 1;
 HEAP32[$decState >> 2] = 65536;
 HEAP32[$decState + 4168 >> 2] = 0;
 HEAP32[$decState + 4148 >> 2] = 0;
 HEAP32[$decState + 4152 >> 2] = 3176576;
 HEAP32[$decState + 4172 >> 2] = 0;
 HEAP32[$decState + 4244 >> 2] = 65536;
 HEAP32[$decState + 4248 >> 2] = 65536;
 HEAP32[$decState + 4260 >> 2] = 20;
 HEAP32[$decState + 4256 >> 2] = 2;
 _memset($decState + 4268 | 0, 0, 4260) | 0;
 HEAP32[$decState + 6640 >> 2] = 1;
 HEAP32[$decState + 4264 >> 2] = 65536;
 HEAP32[$decState + 8432 >> 2] = 0;
 HEAP32[$decState + 8412 >> 2] = 0;
 HEAP32[$decState + 8416 >> 2] = 3176576;
 HEAP32[$decState + 8436 >> 2] = 0;
 HEAP32[$decState + 8508 >> 2] = 65536;
 HEAP32[$decState + 8512 >> 2] = 65536;
 HEAP32[$decState + 8524 >> 2] = 20;
 HEAP32[$decState + 8520 >> 2] = 2;
 $sStereo = $decState + 8528 | 0;
 HEAP32[$sStereo >> 2] = 0;
 HEAP32[$sStereo + 4 >> 2] = 0;
 HEAP32[$sStereo + 8 >> 2] = 0;
 HEAP32[$decState + 8548 >> 2] = 0;
 return;
}

function _wcrtomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[11892] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   HEAP32[16056] = 25;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   HEAP32[16056] = 25;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $4 = 0, $5 = 0, $call$i = 0, $call$i$i = 0, $dec = 0, $n$0 = 0, $p$0 = 0, $retval$0 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $call$i$i = ___uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $call$i = _wcrtomb($tmp, 0) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 L4 : do if (($call$i + 1 | 0) >>> 0 < 2) $retval$0 = 2; else {
  $dec = $call$i + -1 | 0;
  if ($dec >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) $retval$0 = 1; else {
   $n$0 = $dec;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) {
     $retval$0 = 0;
     break L4;
    }
    $4 = HEAP8[$p$0 >> 0] | 0;
    $5 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $4;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$2$ph = 0, $__len$addr$0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) $__fmtp$addr$2$ph = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$2$ph = $__fmtp$addr$0 + 1 | 0;
 }
 $__fmtp$addr$2 = $__fmtp$addr$2$ph;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$2 >> 0] = $0;
  $__fmtp$addr$2 = $__fmtp$addr$2 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 switch ($__flags & 74) {
 case 64:
  {
   $$sink = 111;
   break;
  }
 case 8:
  {
   $$sink = $__flags >>> 9 & 32 ^ 120;
   break;
  }
 default:
  $$sink = $__signd ? 100 : 117;
 }
 HEAP8[$__fmtp$addr$2 >> 0] = $$sink;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $call = 0, $call$i = 0, $call$i$i = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__nar = sp;
 $__ne = sp + 116 | 0;
 $mb = sp + 104 | 0;
 $__nb = sp + 112 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $0 = $mb;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($__wb, HEAP32[$__we >> 2] | 0) | 0;
 $call$i$i = ___uselocale(HEAP32[$this >> 2] | 0) | 0;
 $call$i = _mbsrtowcs($__wb, $__nb, $call, $mb) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 if (($call$i | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(); else {
  HEAP32[$__we >> 2] = $__wb + ($call$i << 2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $12 = 0;
  $13 = 0;
 } else {
  $0 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $1 = _strtoll_l($__a, $__p2, $__base) | 0;
  $2 = getTempRet0() | 0;
  $3 = HEAP32[16056] | 0;
  if (!$3) HEAP32[16056] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($3 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $9 = ($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0;
   $14 = $9 ? -1 : 0;
   $15 = $9 ? 2147483647 : -2147483648;
  } else {
   $14 = $1;
   $15 = $2;
  } else {
   HEAP32[$__err >> 2] = 4;
   $14 = 0;
   $15 = 0;
  }
  $12 = $15;
  $13 = $14;
 }
 setTempRet0($12 | 0);
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below) {
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 do if (!$0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   $number_to_static_ptr11 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
  if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 } while (0);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$sink = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $frm$addr$0 = 0, $nbytes$0 = 0, $nwchar_t$0 = 0, $sub$ptr$lhs$cast = 0;
 $sub$ptr$lhs$cast = $frm_end;
 $__l = $this + 8 | 0;
 $frm$addr$0 = $frm;
 $nbytes$0 = 0;
 $nwchar_t$0 = 0;
 L1 : while (1) {
  if (($frm$addr$0 | 0) == ($frm_end | 0) | $nwchar_t$0 >>> 0 >= $mx >>> 0) break;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbrlen($frm$addr$0, $sub$ptr$lhs$cast - $frm$addr$0 | 0, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1;
    break;
   }
  default:
   $$sink = $call$i;
  }
  $frm$addr$0 = $frm$addr$0 + $$sink | 0;
  $nbytes$0 = $$sink + $nbytes$0 | 0;
  $nwchar_t$0 = $nwchar_t$0 + 1 | 0;
 }
 return $nbytes$0 | 0;
}

function _silk_stereo_encode_pred($psRangeEnc, $ix) {
 $psRangeEnc = $psRangeEnc | 0;
 $ix = $ix | 0;
 var $2 = 0, $5 = 0, $add = 0, $arrayidx16 = 0, $arrayidx16$1 = 0;
 $add = ((HEAP8[$ix + 2 >> 0] | 0) * 5 | 0) + (HEAP8[$ix + 5 >> 0] | 0) | 0;
 if (($add | 0) >= 25) _celt_fatal(53434, 53459, 44);
 _ec_enc_icdf($psRangeEnc, $add, 24864, 8);
 $2 = HEAP8[$ix >> 0] | 0;
 if ($2 << 24 >> 24 >= 3) _celt_fatal(53485, 53459, 47);
 $arrayidx16 = $ix + 1 | 0;
 if ((HEAP8[$arrayidx16 >> 0] | 0) >= 5) _celt_fatal(53520, 53459, 48);
 _ec_enc_icdf($psRangeEnc, $2 << 24 >> 24, 51908, 8);
 _ec_enc_icdf($psRangeEnc, HEAP8[$arrayidx16 >> 0] | 0, 51915, 8);
 $5 = HEAP8[$ix + 3 >> 0] | 0;
 if ($5 << 24 >> 24 >= 3) _celt_fatal(53485, 53459, 47);
 $arrayidx16$1 = $ix + 4 | 0;
 if ((HEAP8[$arrayidx16$1 >> 0] | 0) < 5) {
  _ec_enc_icdf($psRangeEnc, $5 << 24 >> 24, 51908, 8);
  _ec_enc_icdf($psRangeEnc, HEAP8[$arrayidx16$1 >> 0] | 0, 51915, 8);
  return;
 } else _celt_fatal(53520, 53459, 48);
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $mul = $x * 8988465674311579538646525.0e283;
  $cmp1 = ($n | 0) > 2046;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $n + -1023 | 0;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 } else if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $cmp11 = ($n | 0) < -2044;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $n + 1022 | 0;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = 0.0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $0 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $call1$i = +_strtold_l($__a, $__p2);
  $1 = HEAP32[16056] | 0;
  if (!$1) HEAP32[16056] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = 0.0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $0 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $call1$i = +_strtof_l($__a, $__p2);
  $1 = HEAP32[16056] | 0;
  if (!$1) HEAP32[16056] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = 0.0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $0 = HEAP32[16056] | 0;
  HEAP32[16056] = 0;
  __ZNSt3__26__clocEv() | 0;
  $call1$i = +_strtod_l($__a, $__p2);
  $1 = HEAP32[16056] | 0;
  if (!$1) HEAP32[16056] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $sub$ptr$sub = $4 - $5 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 7]($f, $sub$ptr$sub, (($sub$ptr$sub | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $arrayinit$element = 0, $arrayinit$element2 = 0, $call = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $arrayinit$element = $fmt + 1 | 0;
 HEAP8[$arrayinit$element >> 0] = $__fmt;
 $arrayinit$element2 = $fmt + 2 | 0;
 HEAP8[$arrayinit$element2 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$arrayinit$element >> 0] = $__mod;
  HEAP8[$arrayinit$element2 >> 0] = $__fmt;
 }
 $call = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($__nb, HEAP32[$__ne >> 2] | 0) | 0;
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, $call | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $4 = 0, $add$ptr = 0, $call = 0, $cond$i$i1016 = 0, $tobool$i$i$i = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 63]($add$ptr) | 0;
 $4 = HEAP8[$call + 8 + 3 >> 0] | 0;
 $tobool$i$i$i = $4 << 24 >> 24 < 0;
 $cond$i$i1016 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 return __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i1016, $cond$i$i1016 + (($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $4 & 255) << 2) | 0) | 0;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP8[$__lo1$addr$0 >> 0] | 0;
  $1 = HEAP8[$__lo2$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 < $1 << 24 >> 24) {
   $retval$0 = -1;
   break;
  }
  if ($1 << 24 >> 24 < $0 << 24 >> 24) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 1 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 1 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $3 = 0, $add$ptr = 0, $call = 0, $cond$i$i1117 = 0, $tobool$i$i$i = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 63]($add$ptr) | 0;
 $3 = HEAP8[$call + 11 >> 0] | 0;
 $tobool$i$i$i = $3 << 24 >> 24 < 0;
 $cond$i$i1117 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 return __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, $cond$i$i1117, $cond$i$i1117 + ($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $3 & 255) | 0) | 0;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob$0$1$val) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob$0$1$val = $__iob$0$1$val | 0;
 var $0 = 0, $retval$0 = 0, label = 0;
 L1 : do switch (($__iob$0$1$val & 176) << 24 >> 24) {
 case 16:
  {
   $0 = HEAP8[$__nb >> 0] | 0;
   switch ($0 << 24 >> 24) {
   case 43:
   case 45:
    {
     $retval$0 = $__nb + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($__ne - $__nb | 0) > 1 & $0 << 24 >> 24 == 48) {
    switch (HEAP8[$__nb + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $retval$0 = $__nb + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $retval$0 = $__ne;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $retval$0 = $__nb;
 return $retval$0 | 0;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP32[$__lo1$addr$0 >> 2] | 0;
  $1 = HEAP32[$__lo2$addr$0 >> 2] | 0;
  if (($0 | 0) < ($1 | 0)) {
   $retval$0 = -1;
   break;
  }
  if (($1 | 0) < ($0 | 0)) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 4 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 4 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function __ZNSt3__26locale5__impD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__shared_owners_$i = 0, $facets_ = 0, $i$0 = 0;
 HEAP32[$this >> 2] = 47076;
 $facets_ = $this + 8 | 0;
 $__end_$i = $this + 12 | 0;
 $i$0 = 0;
 while (1) {
  $1 = HEAP32[$facets_ >> 2] | 0;
  if ($i$0 >>> 0 >= (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2 >>> 0) break;
  $3 = HEAP32[$1 + ($i$0 << 2) >> 2] | 0;
  if ($3 | 0) {
   $__shared_owners_$i = $3 + 4 | 0;
   $4 = HEAP32[$__shared_owners_$i >> 2] | 0;
   HEAP32[$__shared_owners_$i >> 2] = $4 + -1;
   if (!$4) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 127]($3);
  }
  $i$0 = $i$0 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($facets_);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 do if ($__sz >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__sz;
   $__p$0 = $call$i$i$i;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm($__p$0, $__s, $__sz);
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__sz << 2) | 0, 0);
 return;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($f, $id) {
 $f = $f | 0;
 $id = $id | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $__shared_owners_$i = 0, $__shared_owners_$i6 = 0;
 $__shared_owners_$i = $f + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 $3 = HEAP32[15994] | 0;
 if ((HEAP32[15995] | 0) - $3 >> 2 >>> 0 > $id >>> 0) $5 = $3; else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($id + 1 | 0);
  $5 = HEAP32[15994] | 0;
 }
 $6 = HEAP32[$5 + ($id << 2) >> 2] | 0;
 if ($6 | 0) {
  $__shared_owners_$i6 = $6 + 4 | 0;
  $7 = HEAP32[$__shared_owners_$i6 >> 2] | 0;
  HEAP32[$__shared_owners_$i6 >> 2] = $7 + -1;
  if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] & 127]($6);
 }
 HEAP32[(HEAP32[15994] | 0) + ($id << 2) >> 2] = $f;
 return;
}

function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $10 = 0, $11 = 0, $call = 0.0, $f = 0, $rend = 0, $rpos = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 $rend = $f + 8 | 0;
 HEAP32[$rend >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $call = +___floatscan($f, $prec, 1);
 $0 = $f + 120 | 0;
 $sub$ptr$sub = (HEAP32[$rpos >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
 $10 = _i64Add(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
 $11 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = ($10 | 0) == 0 & ($11 | 0) == 0 ? $s : $s + $10 | 0;
 STACKTOP = sp;
 return +$call;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 do if ($__n >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $__n;
  $__p$0 = $this;
 } else {
  $and$i$i = $__n + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__n;
   $__p$0 = $call$i$i$i;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw($__p$0, $__n, $__c);
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__n << 2) | 0, 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $tobool$i$i = 0;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 do if ($cond$i >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n - $cond$i | 0) | 0; else if ($tobool$i$i) {
  __ZNSt3__211char_traitsIcE6assignERcRKc((HEAP32[$this >> 2] | 0) + $__n | 0, 0);
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($this + $__n | 0, 0);
  HEAP8[$__size_$i$i >> 0] = $__n;
  break;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $call = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 63]($add$ptr) | 0;
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $call = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 63]($add$ptr) | 0;
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $3 = 0, $4 = 0, $__tx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__tx = sp;
 __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2EPPS3_m($__tx, $this + 8 | 0, $__n);
 $$pre = HEAP32[$__tx >> 2] | 0;
 $0 = HEAP32[$__tx + 4 >> 2] | 0;
 $3 = ($0 - $$pre | 0) >>> 2;
 $4 = $$pre;
 while (1) {
  if (($4 | 0) == ($0 | 0)) break;
  HEAP32[$4 >> 2] = 0;
  $4 = $4 + 4 | 0;
 }
 HEAP32[$__tx >> 2] = $$pre + ($3 << 2);
 __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev($__tx);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($this, $call2) | 0) == -1) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 4 | 0;
  }
 } else $retval$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($this, $call2) | 0) == -1) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 1 | 0;
  }
 } else $retval$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $call = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 63]($add$ptr) | 0;
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e$0, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $call = 0, $sub$ptr$sub = 0;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 63]($add$ptr) | 0;
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e$0, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65324) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65292) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__tm + 20 | 0, $__b, HEAP32[$__e >> 2] | 0, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 7]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__n) {
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $3 = 0, $4 = 0, $__pos_ = 0, $__tx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__tx = sp;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2ERS6_m($__tx, $__n);
 $__pos_ = $__tx + 4 | 0;
 $$pre = HEAP32[$__pos_ >> 2] | 0;
 $0 = HEAP32[$__tx + 8 >> 2] | 0;
 $3 = ($0 - $$pre | 0) >>> 2;
 $4 = $$pre;
 while (1) {
  if (($4 | 0) == ($0 | 0)) break;
  HEAP32[$4 >> 2] = 0;
  $4 = $4 + 4 | 0;
 }
 HEAP32[$__pos_ >> 2] = $$pre + ($3 << 2);
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev($__tx);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 44676;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, HEAP32[$this + 4 >> 2] | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65604) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 44740;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, HEAP32[$this + 4 >> 2] | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$ref$tmp >> 2] | 0, 65596) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 7]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__sz >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__sz | 0, 0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $2 = 0, $offset_to_base$0 = 0, $shr = 0;
 $$pre = HEAP32[$this + 4 >> 2] | 0;
 if (!$adjustedPtr) $offset_to_base$0 = 0; else {
  $shr = $$pre >> 8;
  if (!($$pre & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 }
 $2 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 7]($2, $info, $adjustedPtr + $offset_to_base$0 | 0, ($$pre & 2 | 0) == 0 ? 2 : $path_below);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($this, $__cap, $__start) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 63992;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 < 29 & (HEAP8[64104] | 0) == 0) {
  HEAP8[64104] = 1;
  $cond = 63992;
  break;
 } else {
  $cond = __Znwm($__cap << 2) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 if ($__n >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__n;
  $__p$0 = $this;
 } else {
  $and$i$i = $__n + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc($__p$0, $__n, $__c) | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__n | 0, 0);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 do if ($2 | 0) {
  $3 = HEAP32[$this + 16 >> 2] | 0;
  if (($2 | 0) == ($3 | 0)) {
   HEAP8[$3 + 112 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   break;
  }
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE17cxa_guard_acquireEv($this) {
 $this = $this | 0;
 var $guard_byte = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $guard_byte = sp;
 __ZN12_GLOBAL__N_19AtomicIntIhEC2EPh($guard_byte, HEAP32[$this + 4 >> 2] | 0);
 if (!((__ZN12_GLOBAL__N_19AtomicIntIhE4loadENSt3__212_GLOBAL__N_121__libcpp_atomic_orderE(HEAP8[HEAP32[$guard_byte >> 2] >> 0] | 0) | 0) << 24 >> 24)) $retval$0 = __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreads17acquire_init_byteEv(HEAP32[(__ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE7derivedEv($this) | 0) + 8 >> 2] | 0) | 0; else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 3]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65332) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 63]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65308) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 63]($call$i) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 63]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function _strtox_639($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $f = 0, $rpos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $2 = $f + 8 | 0;
 HEAP32[$2 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $3 = ___intscan($f, $base, 1, $0, $1) | 0;
 $4 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$rpos >> 2] | 0) + (HEAP32[$f + 120 >> 2] | 0) - (HEAP32[$2 >> 2] | 0));
 setTempRet0($4 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65604) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 63]($call$i) | 0;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1) | 0) & 1;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65596) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 63]($call$i) | 0;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1) | 0) & 1;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(); else return;
}

function _pad_571($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $sub & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$018 = 0, $dec14$in = 0, $n$addr$117 = 0, $s$addr$016 = 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  $dec14$in = $n;
  do {
   $dec14$in = $dec14$in + -1 | 0;
   HEAP32[$d + ($dec14$in << 2) >> 2] = HEAP32[$s + ($dec14$in << 2) >> 2];
  } while (($dec14$in | 0) != 0);
 } else if ($n | 0) {
  $d$addr$018 = $d;
  $n$addr$117 = $n;
  $s$addr$016 = $s;
  while (1) {
   $n$addr$117 = $n$addr$117 + -1 | 0;
   HEAP32[$d$addr$018 >> 2] = HEAP32[$s$addr$016 >> 2];
   if (!$n$addr$117) break; else {
    $d$addr$018 = $d$addr$018 + 4 | 0;
    $s$addr$016 = $s$addr$016 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$pr = 0, $1 = 0, $3 = 0, $incdec$ptr = 0, $retval$1 = 0, $rpos = 0;
 do if (($c | 0) == -1) $retval$1 = -1; else {
  $rpos = $f + 4 | 0;
  $1 = HEAP32[$rpos >> 2] | 0;
  if (!$1) {
   ___toread($f) | 0;
   $$pr = HEAP32[$rpos >> 2] | 0;
   if (!$$pr) {
    $retval$1 = -1;
    break;
   } else $3 = $$pr;
  } else $3 = $1;
  if ($3 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   $incdec$ptr = $3 + -1 | 0;
   HEAP32[$rpos >> 2] = $incdec$ptr;
   HEAP8[$incdec$ptr >> 0] = $c;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $retval$1 = $c;
  } else $retval$1 = -1;
 } while (0);
 return $retval$1 | 0;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63608] | 0)) if (___cxa_guard_acquire(63608) | 0) {
  $arrayctor$cur = 62976;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 63e3);
  ___cxa_guard_release(63608);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(62976, 45592) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(62988, 45604) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[63528] | 0)) if (___cxa_guard_acquire(63528) | 0) {
  $arrayctor$cur = 62480;
  do {
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 62504);
  ___cxa_guard_release(63528);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62480, 58741) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(62492, 58744) | 0;
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[37424 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 7]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE17cxa_guard_releaseEv($this) {
 $this = $this | 0;
 var $guard_byte = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $guard_byte = sp;
 __ZN12_GLOBAL__N_19AtomicIntIhEC2EPh($guard_byte, HEAP32[$this + 4 >> 2] | 0);
 __ZN12_GLOBAL__N_19AtomicIntIhE5storeEhNSt3__212_GLOBAL__N_121__libcpp_atomic_orderE(HEAP32[$guard_byte >> 2] | 0);
 __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreads17release_init_byteEv(HEAP32[(__ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE7derivedEv($this) | 0) + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___shlim($f, $0, $1) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $sub$ptr$sub = 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = HEAP32[$f + 8 >> 2] | 0;
 $7 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $6 - $7 | 0;
 $9 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
 $10 = $f + 120 | 0;
 HEAP32[$10 >> 2] = $sub$ptr$sub;
 HEAP32[$10 + 4 >> 2] = $9;
 if ((($0 | 0) != 0 | ($1 | 0) != 0) & (($9 | 0) > ($1 | 0) | ($9 | 0) == ($1 | 0) & $sub$ptr$sub >>> 0 > $0 >>> 0)) HEAP32[$f + 104 >> 2] = $7 + $0; else HEAP32[$f + 104 >> 2] = $6;
 return;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 >= 128) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  if (!((HEAP16[37696 + ($0 << 1) >> 1] & $m) << 16 >> 16)) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $add = 0, $add$ptr4 = 0, $call = 0, $cookie = 0, $k$0 = 0, $spec$select = 0;
 $cookie = $f + 84 | 0;
 $0 = HEAP32[$cookie >> 2] | 0;
 $add = $len + 256 | 0;
 $call = _memchr($0, $add) | 0;
 $k$0 = ($call | 0) == 0 ? $add : $call - $0 | 0;
 $spec$select = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $0 | 0, $spec$select | 0) | 0;
 HEAP32[$f + 4 >> 2] = $0 + $spec$select;
 $add$ptr4 = $0 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $add$ptr4;
 HEAP32[$cookie >> 2] = $add$ptr4;
 return $spec$select | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($__h, $__b, $__e$0, $__err, $__ct) {
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($0 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($__h, $__b, $__e$0, $__err, $__ct) {
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($0 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function _store_int($dest, $size, $0, $1) {
 $dest = $dest | 0;
 $size = $size | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 L1 : do if ($dest | 0) switch ($size | 0) {
 case -2:
  {
   HEAP8[$dest >> 0] = $0;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$dest >> 1] = $0;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 3:
  {
   $4 = $dest;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($__d, $__b, $__e$0, $__err, $__ct) {
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($0 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($__d, $__b, $__e$0, $__err, $__ct) {
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 3) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($0 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($__d, $__b, $__e$0, $__err, $__ct) {
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($0 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($__d, $__b, $__e$0, $__err, $__ct) {
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 3) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($0 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ret = sp;
 if (!(___wasi_syscall_ret(___wasi_fd_seek(HEAP32[$f + 60 >> 2] | 0, $0 | 0, $1 | 0, $whence & 255 | 0, $ret | 0) | 0) | 0)) {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 } else {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $1 = 0, $2 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $1 = $high - $low | 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $2 = HEAP32[$low$addr$0 >> 2] | 0;
  HEAP8[$dest$addr$0 >> 0] = $2 >>> 0 < 128 ? $2 & 255 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low + ($1 >>> 2 << 2) | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($__m, $__b, $__e$0, $__err, $__ct) {
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($0 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($__m, $__b, $__e$0, $__err, $__ct) {
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($0 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($__w, $__b, $__e$0, $__err, $__ct) {
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 1) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($0 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($__s, $__b, $__e$0, $__err, $__ct) {
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($0 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($__m, $__b, $__e$0, $__err, $__ct) {
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($0 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($__w, $__b, $__e$0, $__err, $__ct) {
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 1) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($0 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($__s, $__b, $__e$0, $__err, $__ct) {
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($0 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($__m, $__b, $__e$0, $__err, $__ct) {
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($0 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($__h, $__b, $__e$0, $__err, $__ct) {
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($0 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($__h, $__b, $__e$0, $__err, $__ct) {
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 2) | 0;
 $0 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($0 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $0 | 4;
 return;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $0 = 0, $cond = 0, $low$addr$0 = 0, $vec$addr$0 = 0;
 $low$addr$0 = $low;
 $vec$addr$0 = $vec;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) $cond = HEAPU16[37696 + ($0 << 1) >> 1] | 0; else $cond = 0;
  HEAP16[$vec$addr$0 >> 1] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
  $vec$addr$0 = $vec$addr$0 + 2 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) if ((HEAP16[37696 + ($0 << 1) >> 1] & $m) << 16 >> 16) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($__iob, $__atoms) {
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65324) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 7]($call$i, 41392, 41418, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $__atoms | 0;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $call = _vsnprintf(0, 0, $fmt, $ap2) | 0;
 if (($call | 0) < 0) $retval$0 = -1; else {
  $add = $call + 1 | 0;
  $call4 = _malloc($add) | 0;
  HEAP32[$s >> 2] = $call4;
  if (!$call4) $retval$0 = -1; else $retval$0 = _vsnprintf($call4, $add, $fmt, $ap) | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _getc($f) {
 $f = $f | 0;
 var $1 = 0, $cmp1 = 0, $retval$0 = 0, $rpos = 0;
 $rpos = $f + 4 | 0;
 $1 = HEAP32[$rpos >> 2] | 0;
 $cmp1 = $1 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0;
 do if ((HEAP32[$f + 76 >> 2] | 0) < 0) if ($cmp1) {
  HEAP32[$rpos >> 2] = $1 + 1;
  $retval$0 = HEAPU8[$1 >> 0] | 0;
  break;
 } else {
  $retval$0 = ___uflow($f) | 0;
  break;
 } else if ($cmp1) {
  HEAP32[$rpos >> 2] = $1 + 1;
  $retval$0 = HEAPU8[$1 >> 0] | 0;
  break;
 } else {
  $retval$0 = ___uflow($f) | 0;
  break;
 } while (0);
 return $retval$0 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function __ZNSt3__26locale2id5__getEv($this) {
 $this = $this | 0;
 var $__f$i = 0, $__p$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__f$i = sp + 16 | 0;
 $__p$i = sp + 12 | 0;
 $ref$tmp = sp;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($ref$tmp, 92, 0, $this);
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$__f$i >> 2] = $ref$tmp;
  HEAP32[$__p$i >> 2] = $__f$i;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($this, $__p$i);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $0 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  HEAP8[$dest$addr$0 >> 0] = $0 << 24 >> 24 > -1 ? $0 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function _getint($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0;
 $0 = HEAP32[$s >> 2] | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 if (!(_isdigit($1 << 24 >> 24) | 0)) $i$0$lcssa = 0; else {
  $2 = $1;
  $3 = $0;
  $i$07 = 0;
  while (1) {
   $add = ($i$07 * 10 | 0) + -48 + ($2 << 24 >> 24) | 0;
   $3 = $3 + 1 | 0;
   HEAP32[$s >> 2] = $3;
   $2 = HEAP8[$3 >> 0] | 0;
   if (!(_isdigit($2 << 24 >> 24) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function __ZNSt3__28ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $__loc_ = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $__loc_ = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($__loc_);
 return;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below) {
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 }
 return;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t() {
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(64988);
 HEAP32[16247] = 44804;
 HEAP32[16255] = 41792;
 HEAP32[16257] = 65044;
 HEAP32[16259] = -1;
 HEAP8[65040] = 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, HEAP32[16248] | 0);
 __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE(64988, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t() {
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(64924);
 HEAP32[16231] = 44868;
 HEAP32[16239] = 41792;
 HEAP32[16241] = 64980;
 HEAP32[16243] = -1;
 HEAP8[64976] = 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, HEAP32[16232] | 0);
 __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE(64924, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($__y, $__b, $__e$0, $__err, $__ct) {
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e$0 = $__e$0 | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $call = 0;
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e$0, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 return __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 41616, 41648) | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 return __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__tm, 59002, 59010) | 0;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vasprintf($__s, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $1 = 0, $__l = 0, $call$i$i = 0, $call$i$i1 = 0, $call$i2 = 0;
 $__l = $this + 8 | 0;
 $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 $1 = HEAP32[$__l >> 2] | 0;
 if (!$1) return 1;
 $call$i$i1 = ___uselocale($1) | 0;
 $call$i2 = ___ctype_get_mb_cur_max() | 0;
 if ($call$i$i1 | 0) ___uselocale($call$i$i1) | 0;
 return ($call$i2 | 0) == 1 | 0;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsscanf($__s, 58256, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 if ((HEAP8[$__str + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, HEAP32[$__str >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0); else {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 }
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) $cond = HEAP32[40256 + ($0 << 24 >> 24 << 2) >> 2] & 255; else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) $cond = HEAP32[38720 + ($0 << 24 >> 24 << 2) >> 2] & 255; else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($__sz) {
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $sub$ptr$div$i = 0;
 $1 = HEAP32[15994] | 0;
 $sub$ptr$div$i = (HEAP32[15995] | 0) - $1 >> 2;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($__sz - $sub$ptr$div$i | 0); else if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[15995] = $2 + ($__sz << 2);
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 return __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(HEAP32[$__b >> 2] | 0, HEAP32[$__e >> 2] | 0, $__iob, $__err, $__v) | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
 return;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this) {
 $this = $this | 0;
 var $__fn_ = 0, $__index_ = 0, $dec = 0, $i$0 = 0;
 $__fn_ = $this + 32 | 0;
 $__index_ = $this + 36 | 0;
 $i$0 = HEAP32[$this + 40 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $dec = $i$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$__fn_ >> 2] | 0) + ($dec << 2) >> 2] & 0](0, $this, HEAP32[(HEAP32[$__index_ >> 2] | 0) + ($dec << 2) >> 2] | 0);
  $i$0 = $dec;
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) $cond = HEAP32[40256 + ($0 << 2) >> 2] | 0; else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) $cond = HEAP32[38720 + ($0 << 2) >> 2] | 0; else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65604) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2] | 0, 65596) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 63]($call$i) | 0) & 1;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $retval$0 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $retval$0 = -1; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 4;
  $retval$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $retval$0 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $retval$0 = -1; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 1;
  $retval$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP8[$dest$addr$0 >> 0] = HEAP8[$low$addr$0 >> 0] | 0;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP32[$dest$addr$0 >> 2] = HEAP8[$low$addr$0 >> 0];
  $dest$addr$0 = $dest$addr$0 + 4 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$06 = 0, $n$addr$05 = 0, $s$addr$04 = 0;
 if ($n | 0) {
  $d$addr$06 = $d;
  $n$addr$05 = $n;
  $s$addr$04 = $s;
  while (1) {
   $n$addr$05 = $n$addr$05 + -1 | 0;
   HEAP32[$d$addr$06 >> 2] = HEAP32[$s$addr$04 >> 2];
   if (!$n$addr$05) break; else {
    $d$addr$06 = $d$addr$06 + 4 | 0;
    $s$addr$04 = $s$addr$04 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function ___cxa_guard_acquire($raw_guard_object) {
 $raw_guard_object = $raw_guard_object | 0;
 var $call = 0, $imp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $imp = sp;
 __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreadsCI2NS0_11GuardObjectIS1_EEEPj($imp, $raw_guard_object);
 $call = __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE17cxa_guard_acquireEv($imp) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = (HEAP32[$__p$0 >> 2] | 0) + ($__h$0 << 4) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 4 | 0;
 }
 return $__h$0 | 0;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = ($__h$0 << 4) + (HEAP8[$__p$0 >> 0] | 0) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 1 | 0;
 }
 return $__h$0 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _arg_n($ap, $n) {
 $ap = $ap | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $ap2 = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $i$0 = $n;
 while (1) {
  $5 = (HEAP32[$ap2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$ap2 >> 2] = $5 + 4;
  if ($i$0 >>> 0 > 1) $i$0 = $i$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 do if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $0;
  if (($0 | 0) == ($this + 16 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($this) {
 $this = $this | 0;
 var $$unpack = 0, $$unpack2 = 0, $1 = 0, $4 = 0;
 $$unpack = HEAP32[$this + 4 >> 2] | 0;
 $$unpack2 = HEAP32[$this + 8 >> 2] | 0;
 $1 = (HEAP32[$this >> 2] | 0) + ($$unpack2 >> 1) | 0;
 if (!($$unpack2 & 1)) $4 = $$unpack; else $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$unpack >> 2] | 0;
 FUNCTION_TABLE_vi[$4 & 127]($1);
 return;
}

function ___cxa_guard_release($raw_guard_object) {
 $raw_guard_object = $raw_guard_object | 0;
 var $imp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $imp = sp;
 __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreadsCI2NS0_11GuardObjectIS1_EEEPj($imp, $raw_guard_object);
 __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE17cxa_guard_releaseEv($imp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 44452;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 44388;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $0 = 0, $call$i = 0, $call$i$i = 0, $cond = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if (!$0) $cond = 1; else {
  $call$i$i = ___uselocale($0) | 0;
  $call$i = ___ctype_get_mb_cur_max() | 0;
  if (!$call$i$i) $cond = $call$i; else {
   ___uselocale($call$i$i) | 0;
   $cond = $call$i;
  }
 }
 return $cond | 0;
}

function _opus_decode_float($st, $data, $len, $pcm, $frame_size, $decode_fec) {
 $st = $st | 0;
 $data = $data | 0;
 $len = $len | 0;
 $pcm = $pcm | 0;
 $frame_size = $frame_size | 0;
 $decode_fec = $decode_fec | 0;
 var $retval$0 = 0;
 if (($frame_size | 0) < 1) $retval$0 = -1; else $retval$0 = _opus_decode_native($st, $data, $len, $pcm, $frame_size, $decode_fec) | 0;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreads17acquire_init_byteEv($this$0$0$2$val) {
 $this$0$0$2$val = $this$0$0$2$val | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this$0$0$2$val >> 0] | 0;
 do if ($0 << 24 >> 24 == 1) $retval$0 = 0; else if (!($0 & 2)) {
  HEAP8[$this$0$0$2$val >> 0] = 2;
  $retval$0 = 1;
  break;
 } else _abort_message(); while (0);
 return $retval$0 | 0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $call = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 HEAP32[$f + 32 >> 2] = 24;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $call = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $retval$0 = 0;
 if ($use_strcmp) if (($x | 0) == ($y | 0)) $retval$0 = 1; else $retval$0 = (_strcmp(HEAP32[$x + 4 >> 2] | 0, HEAP32[$y + 4 >> 2] | 0) | 0) == 0; else $retval$0 = (HEAP32[$x + 4 >> 2] | 0) == (HEAP32[$y + 4 >> 2] | 0);
 return $retval$0 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function _celt_fatal($str, $file, $line) {
 $str = $str | 0;
 $file = $file | 0;
 $line = $line | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $file;
 HEAP32[$vararg_buffer + 4 >> 2] = $line;
 HEAP32[$vararg_buffer + 8 >> 2] = $str;
 _fprintf(0, 0, $vararg_buffer);
 _abort();
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm() {
 var $retval$0$i$i$in = 0;
 if (!(HEAP8[64104] | 0)) {
  HEAP8[64104] = 1;
  $retval$0$i$i$in = 63992;
 } else $retval$0$i$i$in = __Znwm(112) | 0;
 HEAP32[15995] = $retval$0$i$i$in;
 HEAP32[15994] = $retval$0$i$i$in;
 HEAP32[15996] = $retval$0$i$i$in + 112;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em() {
 HEAP32[15994] = 0;
 HEAP32[15995] = 0;
 HEAP32[15996] = 0;
 HEAP8[64104] = 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm();
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(28);
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $cond9 = 0, $mul = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $call1 = ___fwritex($src, $mul, $f) | 0;
 if (($call1 | 0) == ($mul | 0)) $cond9 = $nmemb; else $cond9 = ($call1 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($iob$0$1$val) {
 $iob$0$1$val = $iob$0$1$val | 0;
 var $retval$0 = 0;
 switch ($iob$0$1$val & 74) {
 case 64:
  {
   $retval$0 = 8;
   break;
  }
 case 8:
  {
   $retval$0 = 16;
   break;
  }
 case 0:
  {
   $retval$0 = 0;
   break;
  }
 default:
  $retval$0 = 10;
 }
 return $retval$0 | 0;
}

function __ZNSt3__26localeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__shared_owners_$i = $0 + 4 | 0;
 $1 = HEAP32[$__shared_owners_$i >> 2] | 0;
 HEAP32[$__shared_owners_$i >> 2] = $1 + -1;
 if (!$1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 127]($0);
 return;
}

function __ZNSt3__28ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 44372;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this);
 __ZNSt3__26localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(___toread($f) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2EPPS3_m($this, $__p, $__n) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = HEAP32[$__p >> 2];
 HEAP32[$this + 4 >> 2] = (HEAP32[$__p >> 2] | 0) + ($__n << 2);
 HEAP32[$this + 8 >> 2] = $__p;
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63576] | 0)) if (___cxa_guard_acquire(63576) | 0) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(65444, 45424, __ZNSt3__211char_traitsIwE6lengthEPKw(45424) | 0);
  ___cxa_guard_release(63576);
 }
 return 65444;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63584] | 0)) if (___cxa_guard_acquire(63584) | 0) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(65456, 45460, __ZNSt3__211char_traitsIwE6lengthEPKw(45460) | 0);
  ___cxa_guard_release(63584);
 }
 return 65456;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63592] | 0)) if (___cxa_guard_acquire(63592) | 0) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(65468, 45508, __ZNSt3__211char_traitsIwE6lengthEPKw(45508) | 0);
  ___cxa_guard_release(63592);
 }
 return 65468;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63568] | 0)) if (___cxa_guard_acquire(63568) | 0) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(65432, 45388, __ZNSt3__211char_traitsIwE6lengthEPKw(45388) | 0);
  ___cxa_guard_release(63568);
 }
 return 65432;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63496] | 0)) if (___cxa_guard_acquire(63496) | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(65376, 58699, __ZNSt3__211char_traitsIcE6lengthEPKc(58699) | 0);
  ___cxa_guard_release(63496);
 }
 return 65376;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63504] | 0)) if (___cxa_guard_acquire(63504) | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(65388, 58708, __ZNSt3__211char_traitsIcE6lengthEPKc(58708) | 0);
  ___cxa_guard_release(63504);
 }
 return 65388;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63512] | 0)) if (___cxa_guard_acquire(63512) | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(65400, 58720, __ZNSt3__211char_traitsIcE6lengthEPKc(58720) | 0);
  ___cxa_guard_release(63512);
 }
 return 65400;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63488] | 0)) if (___cxa_guard_acquire(63488) | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(65364, 58690, __ZNSt3__211char_traitsIcE6lengthEPKc(58690) | 0);
  ___cxa_guard_release(63488);
 }
 return 65364;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $d$addr$05 = 0, $n$addr$04 = 0;
 if ($n | 0) {
  $d$addr$05 = $d;
  $n$addr$04 = $n;
  while (1) {
   $n$addr$04 = $n$addr$04 + -1 | 0;
   HEAP32[$d$addr$05 >> 2] = $c;
   if (!$n$addr$04) break; else $d$addr$05 = $d$addr$05 + 4 | 0;
  }
 }
 return $d | 0;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E($flag, $arg) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 do {} while ((HEAP32[$flag >> 2] | 0) == 1);
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$arg >> 2] >> 2] | 0);
  HEAP32[$flag >> 2] = -1;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsnprintf($s, 100, 59743, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2ERS6_m($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 63976;
 $0 = HEAP32[15995] | 0;
 HEAP32[$this + 4 >> 2] = $0;
 HEAP32[$this + 8 >> 2] = $0 + ($__n << 2);
 return;
}

function __ZNSt3__26localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[(__ZNSt3__26locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 $__shared_owners_$i = $0 + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $sub$ptr$sub = 0;
 $sub$ptr$sub = $end - $frm | 0;
 return ($sub$ptr$sub >>> 0 < $mx >>> 0 ? $sub$ptr$sub : $mx) | 0;
}

function __ZNSt3__28numpunctIwEC2Em() {
 var $__i$0$i$i = 0;
 HEAP32[15939] = 0;
 HEAP32[15938] = 47188;
 HEAP32[15940] = 46;
 HEAP32[15941] = 44;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[63768 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__28numpunctIcEC2Em() {
 var $__i$0$i$i = 0;
 HEAP32[15933] = 0;
 HEAP32[15932] = 47148;
 HEAP8[63736] = 46;
 HEAP8[63737] = 44;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[63740 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__26localeC2ERKS0_($this, $l$0$0$val) {
 $this = $this | 0;
 $l$0$0$val = $l$0$0$val | 0;
 var $__shared_owners_$i = 0;
 HEAP32[$this >> 2] = $l$0$0$val;
 $__shared_owners_$i = $l$0$0$val + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(((high | 0) < 0 ? -1 : 0) | 0);
 return high >> bits - 32 | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsscanf($s, 59538, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx) | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, __ZNSt3__211char_traitsIwE6lengthEPKw($__s) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNKSt3__26locale5__imp9has_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $1 = 0, $4 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $1 >> 2 >>> 0 > $id >>> 0) $4 = (HEAP32[$1 + ($id << 2) >> 2] | 0) != 0; else $4 = 0;
 return $4 | 0;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 47220, __ZNSt3__211char_traitsIwE6lengthEPKw(47220) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 60314, __ZNSt3__211char_traitsIcE6lengthEPKc(60314) | 0);
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 47244, __ZNSt3__211char_traitsIwE6lengthEPKw(47244) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 60320, __ZNSt3__211char_traitsIcE6lengthEPKc(60320) | 0);
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__l = 0;
 HEAP32[$this >> 2] = 47028;
 $__l = $this + 8 | 0;
 $0 = HEAP32[$__l >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$__l >> 2] | 0);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this, $$01, $$12, $id) {
 $this = $this | 0;
 $$01 = $$01 | 0;
 $$12 = $$12 | 0;
 $id = $id | 0;
 HEAP32[$this >> 2] = $id;
 HEAP32[$this + 4 >> 2] = $$01;
 HEAP32[$this + 8 >> 2] = $$12;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63616] | 0)) if (___cxa_guard_acquire(63616) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[16371] = 63008;
  ___cxa_guard_release(63616);
 }
 return HEAP32[16371] | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63536] | 0)) if (___cxa_guard_acquire(63536) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[16354] = 62512;
  ___cxa_guard_release(63536);
 }
 return HEAP32[16354] | 0;
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 _vfprintf(41648, 47826, $ap) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63632] | 0)) if (___cxa_guard_acquire(63632) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[16372] = 63296;
  ___cxa_guard_release(63632);
 }
 return HEAP32[16372] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63600] | 0)) if (___cxa_guard_acquire(63600) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[16370] = 62976;
  ___cxa_guard_release(63600);
 }
 return HEAP32[16370] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63552] | 0)) if (___cxa_guard_acquire(63552) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[16355] = 62800;
  ___cxa_guard_release(63552);
 }
 return HEAP32[16355] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[63520] | 0)) if (___cxa_guard_acquire(63520) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[16353] = 62480;
  ___cxa_guard_release(63520);
 }
 return HEAP32[16353] | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15975] = 0;
 HEAP32[15974] = 47272;
 __ZNSt3__220__time_get_c_storageIwEC2Ev();
 HEAP32[15974] = 45312;
 HEAP32[15976] = 45360;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15971] = 0;
 HEAP32[15970] = 47272;
 __ZNSt3__220__time_get_c_storageIcEC2Ev();
 HEAP32[15970] = 45228;
 HEAP32[15972] = 45276;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEEC2EPj($this, $g) {
 $this = $this | 0;
 $g = $g | 0;
 HEAP32[$this >> 2] = $g;
 HEAP32[$this + 4 >> 2] = $g;
 HEAP32[$this + 8 >> 2] = $g + 1;
 HEAP32[$this + 12 >> 2] = 0;
 return;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _speex_resampler_destroy($st) {
 $st = $st | 0;
 _free(HEAP32[$st + 72 >> 2] | 0);
 _free(HEAP32[$st + 76 >> 2] | 0);
 _free(HEAP32[$st + 60 >> 2] | 0);
 _free(HEAP32[$st + 68 >> 2] | 0);
 _free(HEAP32[$st + 64 >> 2] | 0);
 _free($st);
 return;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 if ($__n | 0) _memset($__s | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a) | 0) & 255 | 0, $__n | 0) | 0;
 return $__s | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function __ZNKSt3__26locale5__imp9use_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 if (__ZNKSt3__26locale5__imp9has_facetEl($this, $id) | 0) return HEAP32[(HEAP32[$this + 8 >> 2] | 0) + ($id << 2) >> 2] | 0; else _abort();
 return 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 8 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNKSt3__25ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = (HEAP16[37696 + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; else $cond = 0;
 return $cond | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15983] = 0;
 HEAP32[15982] = 47272;
 HEAP32[15984] = __ZNSt3__26__clocEv() | 0;
 HEAP32[15982] = 46508;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15979] = 0;
 HEAP32[15978] = 47272;
 HEAP32[15980] = __ZNSt3__26__clocEv() | 0;
 HEAP32[15978] = 46484;
 return;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[64128] | 0)) if (___cxa_guard_acquire(64128) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv();
  HEAP32[16410] = 65636;
  ___cxa_guard_release(64128);
 }
 return HEAP32[16410] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[63960] | 0)) if (___cxa_guard_acquire(63960) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv();
  HEAP32[16408] = 65628;
  ___cxa_guard_release(63960);
 }
 return HEAP32[16408] | 0;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreadsCI2NS0_11GuardObjectIS1_EEEPj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEEC2EPj($this, $0);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($__iob, $__atoms) {
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($__iob, $__atoms) | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c << 24 >> 24 > -1) $cond = HEAP32[38720 + ($c << 24 >> 24 << 2) >> 2] & 255; else $cond = $c;
 return $cond | 0;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $retval$0 = 0;
 if (!$f) if (!(HEAP32[11058] | 0)) $retval$0 = 0; else $retval$0 = _fflush(HEAP32[11058] | 0) | 0; else $retval$0 = ___fflush_unlocked($f) | 0;
 return $retval$0 | 0;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c << 24 >> 24 > -1) $cond = HEAP32[40256 + (($c & 255) << 2) >> 2] & 255; else $cond = $c;
 return $cond | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63872, __ZNSt3__26locale2id5__getEv(65572) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63864, __ZNSt3__26locale2id5__getEv(65564) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63856, __ZNSt3__26locale2id5__getEv(65556) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63848, __ZNSt3__26locale2id5__getEv(65548) | 0);
 return;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE($this$0$0$val, $x) {
 $this$0$0$val = $this$0$0$val | 0;
 $x = $x | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl($this$0$0$val, __ZNSt3__26locale2id5__getEv($x) | 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63928, __ZNSt3__26locale2id5__getEv(65508) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63912, __ZNSt3__26locale2id5__getEv(65500) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63896, __ZNSt3__26locale2id5__getEv(65492) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63880, __ZNSt3__26locale2id5__getEv(65424) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63808, __ZNSt3__26locale2id5__getEv(65356) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63800, __ZNSt3__26locale2id5__getEv(65348) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63792, __ZNSt3__26locale2id5__getEv(65340) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63784, __ZNSt3__26locale2id5__getEv(65316) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[63480] | 0)) if (___cxa_guard_acquire(63480) | 0) {
  HEAP32[16325] = ___newlocale(2147483647, 58259, 0) | 0;
  ___cxa_guard_release(63480);
 }
 return HEAP32[16325] | 0;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev($this) {
 $this = $this | 0;
 HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev($this) {
 $this = $this | 0;
 HEAP32[HEAP32[$this + 8 >> 2] >> 2] = HEAP32[$this >> 2];
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = HEAP32[40256 + ($c << 2) >> 2] | 0; else $cond = $c;
 return $cond | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = HEAP32[38720 + ($c << 2) >> 2] | 0; else $cond = $c;
 return $cond | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function ___DOUBLE_BITS_574($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function ___DOUBLE_BITS_207($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function __ZNSt3__25ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 47096;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) if (HEAP8[$this + 12 >> 0] | 0) __ZdaPv($0);
 return;
}

function ___wasi_syscall_ret($code) {
 $code = $code | 0;
 var $retval$0 = 0;
 if (!($code << 16 >> 16)) $retval$0 = 0; else {
  HEAP32[16056] = $code & 65535;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__210__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_639($s, $p, $base, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function ___uselocale($new) {
 $new = $new | 0;
 var $0 = 0;
 $0 = HEAP32[11892] | 0;
 if ($new | 0) HEAP32[11892] = ($new | 0) == (-1 | 0) ? 64176 : $new;
 return (($0 | 0) == 64176 ? -1 : $0) | 0;
}

function _wcslen($s) {
 $s = $s | 0;
 var $s$addr$0 = 0;
 $s$addr$0 = $s;
 while (1) if (!(HEAP32[$s$addr$0 >> 2] | 0)) break; else $s$addr$0 = $s$addr$0 + 4 | 0;
 return $s$addr$0 - $s >> 2 | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_639($s, $p, $base, -1, -1) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNKSt3__28ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__26localeC2ERKS0_($agg$result, HEAP32[$this + 28 >> 2] | 0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__28numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 47188;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 return;
}

function __ZNSt3__28numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 47148;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 return;
}

function __ZN12_GLOBAL__N_19AtomicIntIhE5storeEhNSt3__212_GLOBAL__N_121__libcpp_atomic_orderE($this$0$0$val) {
 $this$0$0$val = $this$0$0$val | 0;
 HEAP8[$this$0$0$val >> 0] = 1;
 return;
}

function __ZN12_GLOBAL__N_19AtomicIntIhE4loadENSt3__212_GLOBAL__N_121__libcpp_atomic_orderE($this$0$0$val$val) {
 $this$0$0$val$val = $this$0$0$val$val | 0;
 return $this$0$0$val$val | 0;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63712, __ZNSt3__26locale2id5__getEv(65612) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63720, __ZNSt3__26locale2id5__getEv(65620) | 0);
 return;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _wmemmove($__s1, $__s2, $__n) | 0;
 return;
}
function globalCtors() {
 __GLOBAL__I_000101();
 __GLOBAL__I_000101_1293();
 ___emscripten_environ_constructor();
 __GLOBAL__sub_I_iostream_cpp();
 __GLOBAL__sub_I_memory_resource_cpp();
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63696, __ZNSt3__26locale2id5__getEv(65604) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63688, __ZNSt3__26locale2id5__getEv(65596) | 0);
 return;
}

function __ZNSt3__211char_traitsIwE7not_eofEj($__c) {
 $__c = $__c | 0;
 var $call1 = 0;
 $call1 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c) | 0;
 return ($call1 ? 0 : $__c) | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _wmemcpy($__s1, $__s2, $__n) | 0;
 return;
}

function __ZNSt3__211char_traitsIcE7not_eofEi($__c) {
 $__c = $__c | 0;
 var $call1 = 0;
 $call1 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c) | 0;
 return ($call1 ? 0 : $__c) | 0;
}

function _strtoull_l($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function _strtoll_l($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 127]($this);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117InitByteNoThreads17release_init_byteEv($this$0$0$2$val) {
 $this$0$0$2$val = $this$0$0$2$val | 0;
 HEAP8[$this$0$0$2$val >> 0] = 1;
 return;
}

function b9(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(9);
 return 0;
}

function __ZNSt3__28ios_base4InitC2Ev() {
 if (!(HEAP8[63472] | 0)) if (___cxa_guard_acquire(63472) | 0) {
  __ZNSt3__29DoIOSInitC2Ev();
  ___cxa_guard_release(63472);
 }
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63840, __ZNSt3__26locale2id5__getEv(65540) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63832, __ZNSt3__26locale2id5__getEv(65532) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63824, __ZNSt3__26locale2id5__getEv(65524) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63816, __ZNSt3__26locale2id5__getEv(65516) | 0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__211char_traitsIwE6assignEPwmw($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 if ($__n | 0) _wmemset($__s, $__a, $__n) | 0;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__26locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[16326] | 0;
 HEAP32[16326] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63752, __ZNSt3__26locale2id5__getEv(65332) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63728, __ZNSt3__26locale2id5__getEv(65308) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63952, __ZNSt3__26locale2id5__getEv(65588) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63944, __ZNSt3__26locale2id5__getEv(65580) | 0);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63656, __ZNSt3__26locale2id5__getEv(65284) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63648, __ZNSt3__26locale2id5__getEv(65276) | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15969] = 0;
 HEAP32[15968] = 46840;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15967] = 0;
 HEAP32[15966] = 46812;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15965] = 0;
 HEAP32[15964] = 46784;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15963] = 0;
 HEAP32[15962] = 46756;
 return;
}

function __Znwm($size) {
 $size = $size | 0;
 var $call = 0;
 $call = _malloc(($size | 0) == 0 ? 1 : $size) | 0;
 if (!$call) _abort(); else return $call | 0;
 return 0;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63680, __ZNSt3__26locale2id5__getEv(65324) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_() {
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(63664, __ZNSt3__26locale2id5__getEv(65292) | 0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 44452;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 44388;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15953] = 0;
 HEAP32[15952] = 45176;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15951] = 0;
 HEAP32[15950] = 45124;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15949] = 0;
 HEAP32[15948] = 45060;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15947] = 0;
 HEAP32[15946] = 44996;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc) | 0;
 return $retval$0 | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr) {
 $__ptr = $__ptr | 0;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 8 | 0);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0);
}

function b8(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(8);
 return 0;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw($__c1, $__c2$val) {
 $__c1 = $__c1 | 0;
 $__c2$val = $__c2$val | 0;
 HEAP32[$__c1 >> 2] = $__c2$val;
 return;
}

function __ZNSt3__211__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2$val) {
 $__c1 = $__c1 | 0;
 $__c2$val = $__c2$val | 0;
 HEAP8[$__c1 >> 0] = $__c2$val;
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function b16(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(16);
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function ___emscripten_stdout_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 setTempRet0(0);
 return 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em() {
 HEAP32[15925] = 0;
 HEAP32[15924] = 47028;
 HEAP32[15926] = __ZNSt3__26__clocEv() | 0;
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(65636, HEAP32[(__ZNSt3__26locale7classicEv() | 0) >> 2] | 0);
 return;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[16407] = 63968;
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function b7(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(7);
 return 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin >> 2 | 0;
}

function b6(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(6);
 return 0;
}

function ___munmap($start, $len) {
 $start = $start | 0;
 $len = $len | 0;
 ___syscall_ret(___syscall91($start | 0, $len | 0) | 0);
 return;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) == 0 ? 64236 : $st) | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function __ZNSt3__25ctypeIcEC2EPKtbm() {
 HEAP32[15917] = 0;
 HEAP32[15916] = 47096;
 HEAP8[63676] = 0;
 HEAP32[15918] = 37696;
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin | 0;
}

function __ZNSt3__210__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111GuardObjectINS0_17InitByteNoThreadsEE7derivedEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[15929] = 0;
 HEAP32[15928] = 47408;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[15931] = 0;
 HEAP32[15930] = 47456;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b15(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(15);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em();
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[15923] = 0;
 HEAP32[15922] = 47360;
 return;
}

function ___loc_is_allocated($loc) {
 $loc = $loc | 0;
 return ($loc | 0) != 44208 & (($loc | 0) != 0 & ($loc | 0) != 64200) & 1 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap) | 0;
}

function __ZNSt3__210__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $1 = 0;
 if (!$st) $1 = 1; else $1 = (HEAP32[$st >> 2] | 0) == 0 & 1;
 return $1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 return (___wasi_fd_close(_dummy_464(HEAP32[$f + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__26locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[15961] = 0;
 HEAP32[15960] = 46700;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[15959] = 0;
 HEAP32[15958] = 46644;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[15957] = 0;
 HEAP32[15956] = 46588;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[15955] = 0;
 HEAP32[15954] = 46532;
 return;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_19AtomicIntIhEC2EPh($this, $b) {
 $this = $this | 0;
 $b = $b | 0;
 HEAP32[$this >> 2] = $b;
 return;
}

function __ZNSt3__28numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(5);
 return 0;
}

function b4(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(4);
 return 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[15989] = 0;
 HEAP32[15988] = 46900;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[15987] = 0;
 HEAP32[15986] = 46868;
 return;
}

function __ZNSt3__28ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__25ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__25ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[15915] = 0;
 HEAP32[15914] = 44964;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[15913] = 0;
 HEAP32[15912] = 44932;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[15921] = 0;
 HEAP32[15920] = 47292;
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function b14(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(14);
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 return ((($c | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($c) | 0) != 0) & 1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm();
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c1) {
 $__c1 = $__c1 | 0;
 return ($__c1 | 0) == -1 | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c1) {
 $__c1 = $__c1 | 0;
 return ($__c1 | 0) == -1 | 0;
}

function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr | 0;
 __ZdlPv($__ptr);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em();
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em();
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em();
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function b3(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(3);
 return 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__28messagesIwE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 if ($r >>> 0 > 4294963200) HEAP32[16056] = 0 - $r;
 return;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function _rintf(f) {
 f = +f;
 return f - +Math_floor(f) != .5 ? +_round(f) : +_round(f / 2.0) * 2.0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s | 0;
 return _wcslen($__s) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 return _strlen($__s) | 0;
}

function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(13);
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function ___ctype_get_mb_cur_max() {
 return ((HEAP32[HEAP32[11892] >> 2] | 0) == 0 ? 1 : 4) | 0;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function _freelocale($l) {
 $l = $l | 0;
 if (___loc_is_allocated($l) | 0) _free($l);
 return;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function __ZNSt3__26locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _round(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNSt3__28messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__28messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b2(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(2);
 return 0;
}

function __ZNSt3__27collateIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__27collateIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv() {
 _abort();
}

function _strtold_l($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtold($s, $p));
}

function _strtold($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 2));
}

function __ZNSt3__25ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv() {
 _abort();
}

function _strtof($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 0));
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 1));
}

function _strtof_l($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtof($s, $p));
}

function _strtod_l($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtod($s, $p));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev() {
 HEAP32[15976] = 47540;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev() {
 HEAP32[15972] = 47504;
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(64240);
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function b12(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(12);
}

function __ZNSt3__210moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev();
 return;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function _opus_decoder_destroy($st) {
 $st = $st | 0;
 _free($st);
 return;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__26locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__28messagesIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__28messagesIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__27collateIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__27collateIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function b1(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(1);
 return 0;
}

function ___isxdigit_l($c) {
 $c = $c | 0;
 return _isxdigit($c) | 0;
}

function ___isdigit_l($c) {
 $c = $c | 0;
 return _isdigit($c) | 0;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function ___emscripten_stdout_close($f) {
 $f = $f | 0;
 return 0;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function b11(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(11);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _lrintf($x) {
 $x = +$x;
 return ~~+_rintf(+$x) | 0;
}

function __ZNSt3__221__throw_runtime_errorEPKc() {
 _abort();
}

function _dummy_464($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function __GLOBAL__sub_I_memory_resource_cpp() {
 return;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function _catgets($s) {
 $s = $s | 0;
 return $s | 0;
}

function _emscripten_get_sbrk_ptr() {
 return 66176;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function ___errno_location() {
 return 64224;
}

function __GLOBAL__I_000101_1293() {
 return;
}

function stackSave() {
 return STACKTOP | 0;
}

function b10(p0) {
 p0 = p0 | 0;
 abort(10);
}

function _abort_message() {
 _llvm_trap();
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,___emscripten_stdout_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv
,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv
,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,b1];
var FUNCTION_TABLE_iiii = [b2,___stdio_write,___stdio_read,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,_do_read,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,___stdio_seek,___emscripten_stdout_seek,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw];
var FUNCTION_TABLE_iiiiid = [b4,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiid = [b6,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b6];
var FUNCTION_TABLE_iiiiiii = [b7,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,_resampler_basic_direct_double,_resampler_basic_direct_single,_resampler_basic_interpolate_double,_resampler_basic_interpolate_single,_resampler_basic_zero,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiii = [b8,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8];
var FUNCTION_TABLE_iiiiiiiii = [b9,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_vi = [b10,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev
,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev
,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__26locale2id6__initEv,__ZNSt3__212__do_nothingEPv,_free,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_vii = [b11,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv
,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viii = [b12];
var FUNCTION_TABLE_viiii = [b13,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_];
var FUNCTION_TABLE_viiiii = [b14,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b15,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE];
var FUNCTION_TABLE_viiiiiii = [b16,_downmix_float];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _opus_decode_float: _opus_decode_float, _opus_decoder_create: _opus_decoder_create, _opus_decoder_destroy: _opus_decoder_destroy, _opus_encode_float: _opus_encode_float, _opus_encoder_create: _opus_encoder_create, _opus_encoder_ctl: _opus_encoder_ctl, _rintf: _rintf, _speex_resampler_destroy: _speex_resampler_destroy, _speex_resampler_init: _speex_resampler_init, _speex_resampler_process_interleaved_float: _speex_resampler_process_interleaved_float, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = asm["___errno_location"]

/** @type {function(...*):?} */
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"]

/** @type {function(...*):?} */
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"]

/** @type {function(...*):?} */
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"]

/** @type {function(...*):?} */
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"]

/** @type {function(...*):?} */
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"]

/** @type {function(...*):?} */
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"]

/** @type {function(...*):?} */
var _free = Module["_free"] = asm["_free"]

/** @type {function(...*):?} */
var _i64Add = Module["_i64Add"] = asm["_i64Add"]

/** @type {function(...*):?} */
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"]

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = asm["_malloc"]

/** @type {function(...*):?} */
var _memcpy = Module["_memcpy"] = asm["_memcpy"]

/** @type {function(...*):?} */
var _memmove = Module["_memmove"] = asm["_memmove"]

/** @type {function(...*):?} */
var _memset = Module["_memset"] = asm["_memset"]

/** @type {function(...*):?} */
var _opus_decode_float = Module["_opus_decode_float"] = asm["_opus_decode_float"]

/** @type {function(...*):?} */
var _opus_decoder_create = Module["_opus_decoder_create"] = asm["_opus_decoder_create"]

/** @type {function(...*):?} */
var _opus_decoder_destroy = Module["_opus_decoder_destroy"] = asm["_opus_decoder_destroy"]

/** @type {function(...*):?} */
var _opus_encode_float = Module["_opus_encode_float"] = asm["_opus_encode_float"]

/** @type {function(...*):?} */
var _opus_encoder_create = Module["_opus_encoder_create"] = asm["_opus_encoder_create"]

/** @type {function(...*):?} */
var _opus_encoder_ctl = Module["_opus_encoder_ctl"] = asm["_opus_encoder_ctl"]

/** @type {function(...*):?} */
var _rintf = Module["_rintf"] = asm["_rintf"]

/** @type {function(...*):?} */
var _speex_resampler_destroy = Module["_speex_resampler_destroy"] = asm["_speex_resampler_destroy"]

/** @type {function(...*):?} */
var _speex_resampler_init = Module["_speex_resampler_init"] = asm["_speex_resampler_init"]

/** @type {function(...*):?} */
var _speex_resampler_process_interleaved_float = Module["_speex_resampler_process_interleaved_float"] = asm["_speex_resampler_process_interleaved_float"]

/** @type {function(...*):?} */
var globalCtors = Module["globalCtors"] = asm["globalCtors"]

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"]

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = asm["stackRestore"]

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = asm["stackSave"]

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"]

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"]

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"]

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"]

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"]

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"]

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"]

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"]

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"]

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"]

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"]

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"]

/** @type {function(...*):?} */
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"]
Module['__ZZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKvE5__fmt'] = 58466;
Module['__ZZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwmE5__fmt'] = 58477;;




// === Auto-generated postamble setup entry stuff ===

// asm.js startup is synchronous
Module['asm'] = asm;








































































































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        var e = new Error('could not load memory initializer ' + memoryInitializer);
          readyPromiseReject(e);
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;


/** @param {boolean|number=} implicit */
function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}








  return FastSound.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = FastSound;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return FastSound; });
    else if (typeof exports === 'object')
      exports["FastSound"] = FastSound;
    