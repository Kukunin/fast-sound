
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(Module) {
  Module = Module || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)


// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;




function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 50336;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in FILESYSTEM=0
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function _abort() {
      Module['abort']();
    }

   

   

   



   

  var _llvm_cos_f64=Math_cos;

  var _llvm_ctlz_i32=true;

  
  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }function _llvm_exp2_f64() {
  return _llvm_exp2_f32.apply(null, arguments)
  }

  var _llvm_exp_f64=Math_exp;

  var _llvm_fabs_f32=Math_abs;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_floor_f32=Math_floor;

  var _llvm_floor_f64=Math_floor;

  
  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }function _llvm_log10_f64() {
  return _llvm_log10_f32.apply(null, arguments)
  }

  var _llvm_log_f64=Math_log;

  var _llvm_sin_f64=Math_sin;

  var _llvm_sqrt_f32=Math_sqrt;

  var _llvm_sqrt_f64=Math_sqrt;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    } 
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall6": ___syscall6, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_exp2_f64": _llvm_exp2_f64, "_llvm_exp_f64": _llvm_exp_f64, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f32": _llvm_floor_f32, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_log_f64": _llvm_log_f64, "_llvm_sin_f64": _llvm_sin_f64, "_llvm_sqrt_f32": _llvm_sqrt_f32, "_llvm_sqrt_f64": _llvm_sqrt_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall6=env.___syscall6;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_cos_f64=env._llvm_cos_f64;
  var _llvm_exp2_f32=env._llvm_exp2_f32;
  var _llvm_exp2_f64=env._llvm_exp2_f64;
  var _llvm_exp_f64=env._llvm_exp_f64;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _llvm_floor_f32=env._llvm_floor_f32;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_log10_f32=env._llvm_log10_f32;
  var _llvm_log10_f64=env._llvm_log10_f64;
  var _llvm_log_f64=env._llvm_log_f64;
  var _llvm_sin_f64=env._llvm_sin_f64;
  var _llvm_sqrt_f32=env._llvm_sqrt_f32;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _opus_encode_native($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$ = 0, $$$01025 = 0, $$0 = 0, $$01001 = 0.0, $$01002 = 0, $$010031182 = 0, $$01004 = 0, $$01010$lcssa = 0.0, $$010101181 = 0.0, $$01012 = 0, $$01017 = 0, $$01018 = 0, $$01021 = 0, $$01022 = 0, $$01023 = 0, $$01024 = 0, $$01025 = 0, $$01026 = 0, $$01035 = 0, $$01037 = 0, $$01041 = 0, $$01042 = 0, $$01044 = 0, $$010481232 = 0.0, $$01050 = 0, $$010501106 = 0, $$01052 = 0.0, $$0981 = 0, $$09861111 = 0, $$09861112 = 0, $$09861114 = 0, $$0989 = 0, $$0992 = 0, $$0999 = 0, $$1 = 0, $$1060 = 0, $$1077 = 0, $$110111179 = 0.0, $$11013 = 0, $$11019 = 0, $$11029$ph = 0, $$11034 = 0, $$11036 = 0, $$11043 = 0, $$11049 = 0.0, $$1105411041218 = 0, $$11056$ph$ph = 0, $$1105611021219 = 0, $$11058$ph$ph = 0, $$1105811001220 = 0, $$19791180 = 0, $$1987 = 0, $$1993 = 0, $$2 = 0, $$21006$ph = 0, $$21020 = 0, $$21039 = 0, $$21047 = 0, $$29801174 = 0, $$2984 = 0, $$31007 = 0, $$31015$ph = 0, $$31172 = 0, $$3985 = 0, $$3995 = 0, $$41016 = 0, $$41169 = 0, $$5 = 0, $$51009 = 0, $$5997$ph = 0, $$6 = 0, $$6998 = 0, $$71134 = 0, $$alloca_mul97 = 0, $$idx1088$val = 0, $$idx1095 = 0, $$idx1096 = 0, $$mux1162 = 0, $$not1151 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert1205 = 0, $$pr = 0, $$pr1121 = 0, $$pr1123 = 0, $$pre$phi12101224Z2D = 0, $$pre$phi1210Z2D = 0, $$pre$phi1211Z2D = 0, $$pre$phiZ2D = 0, $$pre$pr = 0, $$pre1199 = 0, $$pre1202 = 0, $$pre1206 = 0, $$sink = 0, $$sink1241 = 0, $$sink1242 = 0, $$sink1243 = 0, $$sink1246 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $167 = 0, $169 = 0, $17 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $188 = 0, $19 = 0, $196 = 0, $198 = 0, $199 = 0, $20 = 0, $202 = 0, $203 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $217 = 0.0, $22 = 0, $225 = 0, $23 = 0, $230 = 0, $234 = 0, $240 = 0, $241 = 0, $254 = 0, $264 = 0, $267 = 0, $270 = 0, $271 = 0, $274 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $284 = 0, $287 = 0, $291 = 0, $292 = 0, $304 = 0, $307 = 0, $310 = 0, $313 = 0, $314 = 0, $315 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $330 = 0, $331 = 0, $334 = 0, $335 = 0, $336 = 0, $339 = 0, $341 = 0, $343 = 0, $346 = 0, $349 = 0, $35 = 0, $352 = 0, $354 = 0, $355 = 0, $357 = 0, $36 = 0, $360 = 0, $368 = 0, $374 = 0, $377 = 0, $386 = 0, $388 = 0, $389 = 0, $391 = 0, $392 = 0, $393 = 0, $406 = 0, $413 = 0, $415 = 0, $418 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $431 = 0, $439 = 0, $44 = 0, $442 = 0, $443 = 0, $444 = 0, $45 = 0, $451 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $461 = 0, $463 = 0, $464 = 0, $465 = 0.0, $471 = 0, $472 = 0, $481 = 0, $482 = 0, $483 = 0, $488 = 0, $49 = 0, $491 = 0, $492 = 0, $495 = 0, $507 = 0, $51 = 0, $511 = 0, $512 = 0, $514 = 0, $517 = 0, $518 = 0.0, $519 = 0, $521 = 0, $522 = 0.0, $53 = 0, $534 = 0, $535 = 0, $537 = 0, $538 = 0, $543 = 0, $544 = 0, $546 = 0, $549 = 0, $550 = 0, $553 = 0, $555 = 0, $563 = 0, $564 = 0, $567 = 0, $568 = 0, $57 = 0, $573 = 0, $574 = 0, $576 = 0, $577 = 0, $578 = 0, $581 = 0, $593 = 0, $596 = 0, $597 = 0, $598 = 0, $60 = 0, $604 = 0, $606 = 0, $614 = 0, $615 = 0, $617 = 0, $62 = 0, $631 = 0, $634 = 0, $643 = 0, $653 = 0, $659 = 0, $663 = 0, $667 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $674 = 0, $675 = 0, $683 = 0, $684 = 0, $686 = 0, $687 = 0, $688 = 0, $69 = 0.0, $690 = 0, $691 = 0, $695 = 0, $699 = 0, $702 = 0, $703 = 0, $704 = 0, $706 = 0, $707 = 0, $71 = 0.0, $720 = 0, $721 = 0.0, $724 = 0, $731 = 0, $74 = 0, $748 = 0, $749 = 0, $75 = 0, $756 = 0, $764 = 0, $766 = 0, $767 = 0, $774 = 0, $775 = 0, $777 = 0, $779 = 0, $782 = 0, $787 = 0, $788 = 0, $798 = 0, $799 = 0, $805 = 0, $807 = 0, $812 = 0, $825 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $842 = 0, $857 = 0, $858 = 0, $896 = 0, $899 = 0, $909 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $93 = 0, $98 = 0, $or$cond271139 = 0, $or$cond3 = 0, $spec$select = 0, $spec$select1062 = 0, $spec$select1066 = 0, $spec$select1071 = 0, $spec$select1085 = 0, $spec$select1086 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $vararg_buffer82 = sp + 232 | 0;
 $vararg_buffer79 = sp + 224 | 0;
 $vararg_buffer76 = sp + 216 | 0;
 $vararg_buffer73 = sp + 208 | 0;
 $vararg_buffer70 = sp + 200 | 0;
 $vararg_buffer68 = sp + 192 | 0;
 $vararg_buffer65 = sp + 184 | 0;
 $vararg_buffer62 = sp + 176 | 0;
 $vararg_buffer59 = sp + 168 | 0;
 $vararg_buffer57 = sp + 160 | 0;
 $vararg_buffer54 = sp + 152 | 0;
 $vararg_buffer52 = sp + 144 | 0;
 $vararg_buffer49 = sp + 136 | 0;
 $vararg_buffer46 = sp + 128 | 0;
 $vararg_buffer43 = sp + 120 | 0;
 $vararg_buffer40 = sp + 112 | 0;
 $vararg_buffer37 = sp + 104 | 0;
 $vararg_buffer34 = sp + 96 | 0;
 $vararg_buffer31 = sp + 88 | 0;
 $vararg_buffer28 = sp + 80 | 0;
 $vararg_buffer25 = sp + 72 | 0;
 $vararg_buffer22 = sp + 64 | 0;
 $vararg_buffer19 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $11 = sp + 472 | 0;
 $12 = sp + 424 | 0;
 $13 = sp + 420 | 0;
 $14 = sp + 416 | 0;
 $15 = sp + 352 | 0;
 $16 = sp + 252 | 0;
 $17 = sp + 248 | 0;
 $18 = sp + 240 | 0;
 $19 = sp + 478 | 0;
 $20 = sp + 476 | 0;
 HEAP32[$13 >> 2] = 0;
 $22 = ($4 | 0) < 1276 ? $4 : 1276;
 $23 = $0 + 18132 | 0;
 HEAP32[$23 >> 2] = 0;
 if (($2 | 0) < 1 | ($22 | 0) < 1) {
  $$2 = -1;
  STACKTOP = sp;
  return $$2 | 0;
 }
 if (($22 | 0) == 1) if ((HEAP32[$0 + 144 >> 2] | 0) == ($2 * 10 | 0)) {
  $$2 = -2;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $33 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
 $35 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 $36 = $0 + 108 | 0;
 if ((HEAP32[$36 >> 2] | 0) == 2051) $$01026 = 0; else $$01026 = HEAP32[$0 + 116 >> 2] | 0;
 $42 = HEAP32[$0 + 168 >> 2] | 0;
 $$ = ($42 | 0) > ($5 | 0) ? $5 : $42;
 HEAP32[$vararg_buffer >> 2] = $14;
 _opus_custom_encoder_ctl($35, 10015, $vararg_buffer) | 0;
 HEAP32[$15 >> 2] = 0;
 $44 = $0 + 8 | 0;
 $45 = $0 + 44 | 0;
 do if ((HEAP32[$45 >> 2] | 0) > 6) {
  $51 = HEAP32[$0 + 144 >> 2] | 0;
  if (($51 | 0) > 15999) {
   $53 = $0 + 112 | 0;
   if (_is_digital_silence($1, $2, HEAP32[$53 >> 2] | 0, $$) | 0) {
    $57 = $0 + 18116 | 0;
    HEAP32[$57 >> 2] = 0;
    $$1105411041218 = 1;
    $$1105611021219 = -1;
    $$1105811001220 = -1;
    $355 = $57;
    break;
   }
   $60 = HEAP32[$0 + 7636 >> 2] | 0;
   $62 = HEAP32[$0 + 7640 >> 2] | 0;
   _run_analysis($0 + 188 | 0, HEAP32[$14 >> 2] | 0, $6, $7, $2, $8, $9, $51, $$, $10, $15);
   if (+HEAPF32[$15 + 36 >> 2] > .10000000149011612) {
    $67 = $0 + 18124 | 0;
    $69 = +HEAPF32[$67 >> 2] * .9990000128746033;
    $71 = +_compute_frame_energy($1, $2, HEAP32[$53 >> 2] | 0);
    HEAPF32[$67 >> 2] = $69 > $71 ? $69 : $71;
    $$11056$ph$ph = $62;
    $$11058$ph$ph = $60;
   } else {
    $$11056$ph$ph = $62;
    $$11058$ph$ph = $60;
   }
  } else {
   $$11056$ph$ph = -1;
   $$11058$ph$ph = -1;
  }
  $$pre$pr = HEAP32[$15 >> 2] | 0;
  $74 = $0 + 140 | 0;
  HEAP32[$74 >> 2] = -1;
  $75 = $0 + 18116 | 0;
  HEAP32[$75 >> 2] = 0;
  if (!$$pre$pr) {
   $$1105411041218 = 0;
   $$1105611021219 = $$11056$ph$ph;
   $$1105811001220 = $$11058$ph$ph;
   $355 = $75;
  } else {
   if ((HEAP32[$0 + 124 >> 2] | 0) == -1e3) {
    switch (HEAP32[$0 + 14224 >> 2] | 0) {
    case 0:
     {
      $$sink = $15 + 20 | 0;
      break;
     }
    case 1002:
     {
      $$sink = $15 + 28 | 0;
      break;
     }
    default:
     $$sink = $15 + 24 | 0;
    }
    HEAP32[$74 >> 2] = ~~+Math_floor(+((1.0 - +HEAPF32[$$sink >> 2]) * 100.0 + .5));
   }
   $93 = HEAP32[$15 + 32 >> 2] | 0;
   if (($93 | 0) < 13) {
    HEAP32[$75 >> 2] = 1101;
    $$1105411041218 = 0;
    $$1105611021219 = $$11056$ph$ph;
    $$1105811001220 = $$11058$ph$ph;
    $355 = $75;
    break;
   }
   if (($93 | 0) < 15) {
    HEAP32[$75 >> 2] = 1102;
    $$1105411041218 = 0;
    $$1105611021219 = $$11056$ph$ph;
    $$1105811001220 = $$11058$ph$ph;
    $355 = $75;
    break;
   }
   if (($93 | 0) < 17) {
    HEAP32[$75 >> 2] = 1103;
    $$1105411041218 = 0;
    $$1105611021219 = $$11056$ph$ph;
    $$1105811001220 = $$11058$ph$ph;
    $355 = $75;
    break;
   }
   if (($93 | 0) < 19) {
    HEAP32[$75 >> 2] = 1104;
    $$1105411041218 = 0;
    $$1105611021219 = $$11056$ph$ph;
    $$1105811001220 = $$11058$ph$ph;
    $355 = $75;
    break;
   } else {
    HEAP32[$75 >> 2] = 1105;
    $$1105411041218 = 0;
    $$1105611021219 = $$11056$ph$ph;
    $$1105811001220 = $$11058$ph$ph;
    $355 = $75;
    break;
   }
  }
 } else {
  HEAP32[$0 + 140 >> 2] = -1;
  $49 = $0 + 18116 | 0;
  HEAP32[$49 >> 2] = 0;
  $$1105411041218 = 0;
  $$1105611021219 = -1;
  $$1105811001220 = -1;
  $355 = $49;
 } while (0);
 $98 = $0 + 112 | 0;
 if ((HEAP32[$98 >> 2] | 0) == 2) if ((HEAP32[$0 + 120 >> 2] | 0) == 1) $$01052 = 0.0; else $$01052 = +_compute_stereo_width($1, $2, HEAP32[$0 + 144 >> 2] | 0, $0 + 14256 | 0); else $$01052 = 0.0;
 $108 = _user_bitrate_to_bitrate($0, $2, $22) | 0;
 $109 = $0 + 160 | 0;
 HEAP32[$109 >> 2] = $108;
 $110 = $0 + 144 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 $112 = ($111 | 0) / ($2 | 0) | 0;
 $113 = $0 + 148 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!$114) {
  $117 = ($111 * 12 | 0) / ($2 | 0) | 0;
  $122 = ((($117 | 0) / 2 | 0) + (($108 * 12 | 0) / 8 | 0) | 0) / ($117 | 0) | 0;
  $$1060 = ($122 | 0) < ($22 | 0) ? $122 : $22;
  $126 = (Math_imul($117 << 3, $$1060) | 0) / 12 | 0;
  HEAP32[$109 >> 2] = $126;
  if (($$1060 | 0) > 1) {
   $$01050 = $$1060;
   $130 = $126;
   label = 34;
  } else $$010501106 = 1;
 } else {
  $$01050 = $22;
  $130 = $108;
  label = 34;
 }
 do if ((label | 0) == 34) if (($$01050 | 0) < 3 | ($130 | 0) < ($112 * 24 | 0)) $$010501106 = $$01050; else {
  $133 = Math_imul($$01050, $112) | 0;
  if (($112 | 0) < 50) if (($133 | 0) < 300 | ($130 | 0) < 2400) {
   $$010501106 = $$01050;
   break;
  }
  $176 = $133 << 3;
  $177 = HEAP32[$98 >> 2] | 0;
  $178 = HEAP32[$45 >> 2] | 0;
  $179 = $0 + 40 | 0;
  $180 = HEAP32[$179 >> 2] | 0;
  $181 = _compute_equiv_rate($130, $177, $112, $114, 0, $178, $180) | 0;
  L55 : do switch (HEAP32[$0 + 124 >> 2] | 0) {
  case 3001:
   {
    $$01023 = 127;
    break;
   }
  case 3002:
   {
    $$01023 = 0;
    break;
   }
  default:
   {
    $185 = HEAP32[$0 + 140 >> 2] | 0;
    if (($185 | 0) > -1) {
     $188 = $185 * 327 >> 8;
     $$01023 = (HEAP32[$36 >> 2] | 0) == 2049 ? (($188 | 0) < 115 ? $188 : 115) : $188;
     break L55;
    } else {
     $$01023 = (HEAP32[$36 >> 2] | 0) == 2048 ? 115 : 48;
     break L55;
    }
   }
  } while (0);
  $196 = HEAP32[$0 + 120 >> 2] | 0;
  $198 = ($177 | 0) == 2;
  if (($196 | 0) == -1e3) if ($198) {
   $202 = ((Math_imul($$01023, $$01023) | 0) * 2e3 | 0) >>> 14;
   $203 = $0 + 14188 | 0;
   $207 = ($181 | 0) > (((HEAP32[$203 >> 2] | 0) == 2 ? 16e3 : 18e3) + $202 | 0) ? 2 : 1;
   HEAP32[$203 >> 2] = $207;
   $$pre$phiZ2D = $203;
   $209 = $207;
  } else label = 58; else if ($198) {
   $199 = $0 + 14188 | 0;
   HEAP32[$199 >> 2] = $196;
   $$pre$phiZ2D = $199;
   $209 = $196;
  } else label = 58;
  if ((label | 0) == 58) {
   $208 = $0 + 14188 | 0;
   HEAP32[$208 >> 2] = $177;
   $$pre$phiZ2D = $208;
   $209 = $177;
  }
  $210 = _compute_equiv_rate($130, $209, $112, $114, 0, $178, $180) | 0;
  $211 = HEAP32[$36 >> 2] | 0;
  do if (($211 | 0) == 2051) {
   $$sink1241 = $0 + 14220 | 0;
   label = 74;
  } else {
   $215 = HEAP32[$0 + 136 >> 2] | 0;
   if (($215 | 0) == -1e3) {
    $217 = 1.0 - $$01052;
    $225 = ~~($$01052 * 1.0e4 + $217 * 1.0e4);
    $230 = ((Math_imul(Math_imul($$01023, $$01023) | 0, ~~($$01052 * 44.0e3 + $217 * 64.0e3) - $225 | 0) | 0) >> 14) + $225 | 0;
    $spec$select1066 = ($211 | 0) == 2048 ? $230 + 8e3 | 0 : $230;
    $234 = HEAP32[$0 + 14224 >> 2] | 0;
    if (($234 | 0) == 1002) $$11034 = $spec$select1066 + -4e3 | 0; else $$11034 = ($234 | 0) > 0 ? $spec$select1066 + 4e3 | 0 : $spec$select1066;
    $240 = ($210 | 0) < ($$11034 | 0) ? 1e3 : 1002;
    $241 = $0 + 14220 | 0;
    HEAP32[$241 >> 2] = $240;
    if (!(HEAP32[$0 + 48 >> 2] | 0)) $909 = $240; else if (($180 | 0) > (128 - $$01023 >> 4 | 0)) {
     HEAP32[$241 >> 2] = 1e3;
     $909 = 1e3;
    } else $909 = $240;
    if (!(HEAP32[$0 + 184 >> 2] | 0)) {
     HEAP32[$0 + 56 >> 2] = 0;
     $910 = $909;
    } else {
     $254 = (HEAP32[$15 >> 2] | $$1105411041218 | 0) == 0;
     HEAP32[$0 + 56 >> 2] = $254 & 1;
     if (($$01023 | 0) > 100 & $254) {
      HEAP32[$241 >> 2] = 1e3;
      $910 = 1e3;
     } else $910 = $909;
    }
    if (($$01050 | 0) < ((Math_imul(($112 | 0) > 50 ? 9e3 : 6e3, $2) | 0) / ($111 << 3 | 0) | 0 | 0)) {
     $$sink1241 = $241;
     label = 74;
     break;
    } else {
     $$pre$phi1210Z2D = $241;
     $267 = $910;
    }
   } else {
    $264 = $0 + 14220 | 0;
    HEAP32[$264 >> 2] = $215;
    $$pre$phi1210Z2D = $264;
    $267 = $215;
   }
   $270 = (($111 | 0) / 100 | 0 | 0) > ($2 | 0);
   if ($270 & ($267 | 0) != 1002) {
    HEAP32[$$pre$phi1210Z2D >> 2] = 1002;
    $$pre$phi12101224Z2D = $$pre$phi1210Z2D;
    $911 = 1;
    $912 = 1002;
   } else {
    $$pre$phi12101224Z2D = $$pre$phi1210Z2D;
    $911 = $270;
    $912 = $267;
   }
  } while (0);
  if ((label | 0) == 74) {
   HEAP32[$$sink1241 >> 2] = 1002;
   $$pre$phi12101224Z2D = $$sink1241;
   $911 = (($111 | 0) / 100 | 0 | 0) > ($2 | 0);
   $912 = 1002;
  }
  $271 = $0 + 176 | 0;
  if (!(HEAP32[$271 >> 2] | 0)) $277 = $912; else {
   HEAP32[$$pre$phi12101224Z2D >> 2] = 1002;
   $277 = 1002;
  }
  $274 = $0 + 14224 | 0;
  $275 = HEAP32[$274 >> 2] | 0;
  if (($275 | 0) > 0) {
   $278 = ($277 | 0) != 1002;
   $279 = ($275 | 0) == 1002;
   $$mux1162 = ($279 ^ $278 ^ 1) & 1;
   if ($279 | $278) {
    $$01012 = $$mux1162;
    $$01021 = 0;
    $$0992 = $$mux1162;
    $287 = $277;
   } else if ($911) {
    $$01012 = 0;
    $$01021 = 0;
    $$0992 = 0;
    $287 = 1002;
   } else {
    HEAP32[$$pre$phi12101224Z2D >> 2] = $275;
    $$01012 = 0;
    $$01021 = 1;
    $$0992 = 1;
    $287 = $275;
   }
  } else {
   $$01012 = 0;
   $$01021 = 0;
   $$0992 = 0;
   $287 = $277;
  }
  if (($209 | 0) == 1) if ((HEAP32[$0 + 14228 >> 2] | 0) == 2) {
   $284 = $0 + 68 | 0;
   if (!(HEAP32[$284 >> 2] | 0)) if (($275 | 0) == 1002 | ($287 | 0) == 1002) label = 88; else {
    HEAP32[$284 >> 2] = 1;
    HEAP32[$$pre$phiZ2D >> 2] = 2;
    $291 = 2;
   } else label = 88;
  } else label = 88; else label = 88;
  if ((label | 0) == 88) {
   HEAP32[$0 + 68 >> 2] = 0;
   $291 = $209;
  }
  $292 = _compute_equiv_rate($130, $291, $112, $114, $287, $178, $180) | 0;
  do if (($287 | 0) == 1002) {
   $$09861112 = 0;
   $324 = 1;
   $913 = 1002;
   label = 95;
  } else {
   if (($275 | 0) == 1002) {
    _silk_InitEncoder($33, HEAP32[$0 + 180 >> 2] | 0, $16);
    $$pr = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    if (($$pr | 0) == 1002) {
     $$09861112 = 1;
     $324 = 1;
     $913 = 1002;
     label = 95;
     break;
    } else {
     $$09861114 = 1;
     $914 = $$pr;
    }
   } else {
    $$09861114 = 0;
    $914 = $287;
   }
   if (!(HEAP32[$0 + 14248 >> 2] | 0)) if (!(HEAP32[$0 + 84 >> 2] | 0)) {
    $$phi$trans$insert = $0 + 14236 | 0;
    $$09861111 = $$09861114;
    $$pre$phi1211Z2D = $$phi$trans$insert;
    $331 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $336 = $914;
    $360 = 0;
   } else {
    $$09861112 = $$09861114;
    $324 = 0;
    $913 = $914;
    label = 95;
   } else {
    $$09861112 = $$09861114;
    $324 = 0;
    $913 = $914;
    label = 95;
   }
  } while (0);
  if ((label | 0) == 95) {
   $304 = Math_imul($$01023, $$01023) | 0;
   $307 = (($304 * 2500 | 0) >>> 14) + 11e3 | 0;
   $310 = (($304 * 2e3 | 0) >>> 14) + 12e3 | 0;
   $313 = (HEAP32[$0 + 14248 >> 2] | 0) == 0;
   $314 = $0 + 14240 | 0;
   do if ($313) {
    $315 = HEAP32[$314 >> 2] | 0;
    if (($292 | 0) < ($310 + (($315 | 0) < 1105 ? 2e3 : -2e3) | 0)) if (($292 | 0) < ($307 + (($315 | 0) < 1104 ? 1e3 : -1e3) | 0)) {
     if (($292 | 0) >= ((($315 | 0) < 1103 ? 9700 : 8300) | 0)) {
      $$11029$ph = 1103;
      label = 100;
      break;
     }
     if (($292 | 0) < ((($315 | 0) < 1102 ? 9700 : 8300) | 0)) {
      $$11029$ph = 1101;
      label = 100;
     } else $322 = 1103;
    } else {
     $$11029$ph = 1104;
     label = 100;
    } else {
     $$11029$ph = 1105;
     label = 100;
    }
   } else if (($292 | 0) < ($310 | 0)) if (($292 | 0) < ($307 | 0)) {
    $$11029$ph = ($292 | 0) < 9e3 ? 1101 : 1103;
    label = 100;
   } else {
    $$11029$ph = 1104;
    label = 100;
   } else {
    $$11029$ph = 1105;
    label = 100;
   } while (0);
   if ((label | 0) == 100) $322 = $$11029$ph;
   HEAP32[$314 >> 2] = $322;
   $323 = $0 + 14236 | 0;
   HEAP32[$323 >> 2] = $322;
   if ($324 | $313 ^ 1) {
    $$09861111 = $$09861112;
    $$pre$phi1211Z2D = $323;
    $331 = $322;
    $336 = $913;
    $360 = $324 | $313;
   } else if (($322 | 0) > 1103 & (HEAP32[$0 + 88 >> 2] | 0) == 0) {
    HEAP32[$323 >> 2] = 1103;
    $$09861111 = $$09861112;
    $$pre$phi1211Z2D = $323;
    $331 = 1103;
    $336 = $913;
    $360 = 0;
   } else {
    $$09861111 = $$09861112;
    $$pre$phi1211Z2D = $323;
    $331 = $322;
    $336 = $913;
    $360 = 0;
   }
  }
  $330 = HEAP32[$0 + 132 >> 2] | 0;
  if (($331 | 0) > ($330 | 0)) {
   HEAP32[$$pre$phi1211Z2D >> 2] = $330;
   $915 = $330;
  } else $915 = $331;
  $334 = HEAP32[$0 + 128 >> 2] | 0;
  $335 = ($334 | 0) == -1e3;
  if ($335) $339 = $915; else {
   HEAP32[$$pre$phi1211Z2D >> 2] = $334;
   $339 = $334;
  }
  if (($133 | 0) < 1875 & ($336 | 0) != 1002) {
   $spec$select1071 = ($339 | 0) < 1103 ? $339 : 1103;
   HEAP32[$$pre$phi1211Z2D >> 2] = $spec$select1071;
   $343 = $spec$select1071;
  } else $343 = $339;
  $341 = HEAP32[$110 >> 2] | 0;
  do if (($341 | 0) < 24001) {
   if (($343 | 0) > 1104) {
    HEAP32[$$pre$phi1211Z2D >> 2] = 1104;
    $346 = 1104;
   } else $346 = $343;
   if (($341 | 0) >= 16001) {
    $368 = $346;
    break;
   }
   if (($346 | 0) > 1103) {
    HEAP32[$$pre$phi1211Z2D >> 2] = 1103;
    $349 = 1103;
   } else $349 = $346;
   if (($341 | 0) >= 12001) {
    $368 = $349;
    break;
   }
   if (($349 | 0) > 1102) {
    HEAP32[$$pre$phi1211Z2D >> 2] = 1102;
    $352 = 1102;
   } else $352 = $349;
   if (!(($341 | 0) < 8001 & ($352 | 0) > 1101)) {
    $368 = $352;
    break;
   }
   HEAP32[$$pre$phi1211Z2D >> 2] = 1101;
   $368 = 1101;
  } else $368 = $343; while (0);
  $354 = HEAP32[$355 >> 2] | 0;
  if (!(($354 | 0) == 0 | $335 ^ 1)) {
   $357 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $$not1151 = $360 ^ 1;
   do if (($292 | 0) > ($357 * 18e3 | 0) | $$not1151) {
    if (!(($292 | 0) > ($357 * 24e3 | 0) | $$not1151)) {
     $$01025 = 1102;
     break;
    }
    $$01025 = ($292 | 0) > ($357 * 3e4 | 0) ? (($292 | 0) > ($357 * 44e3 | 0) ? 1105 : 1104) : 1103;
   } else $$01025 = 1101; while (0);
   $$$01025 = ($354 | 0) > ($$01025 | 0) ? $354 : $$01025;
   HEAP32[$355 >> 2] = $$$01025;
   HEAP32[$$pre$phi1211Z2D >> 2] = ($368 | 0) < ($$$01025 | 0) ? $368 : $$$01025;
  }
  $374 = $0 + 52 | 0;
  HEAP32[$374 >> 2] = _decide_fec(HEAP32[$0 + 48 >> 2] | 0, HEAP32[$179 >> 2] | 0, HEAP32[$374 >> 2] | 0, $336, $$pre$phi1211Z2D, $292) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $$;
  _opus_custom_encoder_ctl($35, 4036, $vararg_buffer1) | 0;
  $377 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
  do if (($377 | 0) == 1002) {
   if ((HEAP32[$$pre$phi1211Z2D >> 2] | 0) != 1102) break;
   HEAP32[$$pre$phi1211Z2D >> 2] = 1103;
  } while (0);
  if (!(HEAP32[$271 >> 2] | 0)) {
   $$pr1123 = HEAP32[$$pre$phi1211Z2D >> 2] | 0;
   if (($377 | 0) == 1e3 & ($$pr1123 | 0) > 1103) {
    $$ph = $$pr1123;
    $$sink1242 = 1001;
    label = 133;
   } else {
    $386 = $$pr1123;
    label = 132;
   }
  } else {
   HEAP32[$$pre$phi1211Z2D >> 2] = 1101;
   $386 = 1101;
   label = 132;
  }
  if ((label | 0) == 132) if (($386 | 0) < 1104 & ($377 | 0) == 1001) {
   $$ph = $386;
   $$sink1242 = 1e3;
   label = 133;
  } else {
   $$pr1121 = $377;
   $491 = $386;
  }
  if ((label | 0) == 133) {
   HEAP32[$$pre$phi12101224Z2D >> 2] = $$sink1242;
   $$pr1121 = $$sink1242;
   $491 = $$ph;
  }
  $388 = HEAP32[$110 >> 2] | 0;
  $389 = ($388 | 0) / 50 | 0;
  $391 = ($$pr1121 | 0) == 1e3;
  do if (($389 | 0) >= ($2 | 0) | $391) {
   $392 = $388 * 3 | 0;
   $393 = ($392 | 0) / 50 | 0;
   if (($393 | 0) < ($2 | 0)) {
    if (!$391) {
     $$01024 = $389;
     break;
    }
    if ((($388 << 1 | 0) / 25 | 0 | 0) == ($2 | 0)) {
     $$01024 = ($388 | 0) / 25 | 0;
     break;
    } else {
     $$01024 = (($392 | 0) / 25 | 0 | 0) == ($2 | 0) ? $393 : $389;
     break;
    }
   }
   $406 = $0 + 14244 | 0;
   if (!(HEAP32[$406 >> 2] | 0)) {
    $$11013 = $$01012;
    $$1987 = $$09861111;
    $$1993 = $$0992;
   } else {
    HEAP32[$406 >> 2] = 0;
    $$11013 = 1;
    $$1987 = 2;
    $$1993 = 1;
   }
   $$pre1199 = HEAP32[$109 >> 2] | 0;
   if (($$1993 | 0) == 0 | ($$pr1121 | 0) == 1002) {
    $$01004 = 0;
    $$3995 = 0;
   } else {
    $413 = _compute_redundancy_bytes($$01050, $$pre1199, $112, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
    $$01004 = $413;
    $$3995 = ($413 | 0) == 0 ? 0 : $$1993;
   }
   $415 = $$01050 - $$01004 | 0;
   $418 = (Math_imul($$pre1199, $2) | 0) / ($388 << 3 | 0) | 0;
   $420 = $3 + 1 | 0;
   $421 = $$01050 + -1 | 0;
   _ec_enc_init($12, $420, $421);
   $422 = $$01026 + $2 | 0;
   $424 = Math_imul(HEAP32[$98 >> 2] | 0, $422) | 0;
   $425 = _llvm_stacksave() | 0;
   $426 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($424 << 2) | 0) + 15 & -16) | 0;
   $427 = $0 + 14276 | 0;
   $428 = $0 + 172 | 0;
   $431 = HEAP32[$98 >> 2] | 0;
   _memcpy($426 | 0, $0 + 14276 + ((Math_imul((HEAP32[$428 >> 2] | 0) - $$01026 | 0, $431) | 0) << 2) | 0, Math_imul($$01026 << 2, $431) | 0) | 0;
   if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1002) {
    $439 = (_silk_lin2log(60) | 0) << 8;
    $$01022 = $439;
    $455 = HEAP32[$98 >> 2] | 0;
   } else {
    $$01022 = HEAP32[$33 + 8 >> 2] | 0;
    $455 = $431;
   }
   $442 = $0 + 14196 | 0;
   $443 = HEAP32[$442 >> 2] | 0;
   $444 = $$01022 - $443 | 0;
   $451 = (($444 >> 16) * 983 | 0) + $443 + ((($444 & 65535) * 983 | 0) >>> 16) | 0;
   HEAP32[$442 >> 2] = $451;
   $456 = $426 + ((Math_imul($455, $$01026) | 0) << 2) | 0;
   $457 = $0 + 14204 | 0;
   $458 = HEAP32[$110 >> 2] | 0;
   if ((HEAP32[$36 >> 2] | 0) == 2048) _hp_cutoff($1, _silk_log2lin($451 >> 8) | 0, $456, $457, $2, $455, $458); else _dc_reject($1, $456, $457, $2, $455, $458);
   $461 = HEAP32[$98 >> 2] | 0;
   $463 = $426 + ((Math_imul($461, $$01026) | 0) << 2) | 0;
   $464 = Math_imul($461, $2) | 0;
   $465 = +_celt_inner_prod_c_666($463, $463, $464);
   if (!($465 < 1.0e9) | ($465 != $465 | 0.0 != 0.0)) {
    _memset($463 | 0, 0, $464 << 2 | 0) | 0;
    HEAP32[$457 >> 2] = 0;
    HEAP32[$457 + 4 >> 2] = 0;
    HEAP32[$457 + 8 >> 2] = 0;
    HEAP32[$457 + 12 >> 2] = 0;
   }
   L202 : do if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1002) {
    $$11049 = 1.0;
    $$21039 = $491;
    $$31007 = $$01004;
    $$41016 = $$11013;
    $$6998 = $$3995;
    label = 217;
   } else {
    $471 = _llvm_stacksave() | 0;
    $472 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($464 << 1) | 0) + 15 & -16) | 0;
    $$01017 = (HEAP32[$15 >> 2] | 0) == 0 ? -1 : +HEAPF32[$15 + 36 >> 2] >= .10000000149011612 & 1;
    $481 = Math_imul(((($415 | 0) < ($418 | 0) ? $415 : $418) << 3) + -8 | 0, $112) | 0;
    $482 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    $483 = ($482 | 0) == 1001;
    do if ($483) {
     $488 = HEAP32[$113 >> 2] | 0;
     $492 = _compute_silk_rate_for_hybrid($481, $491, (HEAP32[$110 >> 2] | 0) == ($2 * 50 | 0) & 1, $488, HEAP32[$374 >> 2] | 0, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
     HEAP32[$0 + 36 >> 2] = $492;
     $495 = HEAP32[$0 + 14252 >> 2] | 0;
     if ($495 | 0) {
      $507 = $488;
      $517 = $495;
      $537 = $492;
      label = 161;
      break;
     }
     $$010481232 = 1.0 - +Math_exp(+(+($492 - $481 | 0) * .0009765625 * .6931471805599453));
     $576 = $492;
    } else {
     HEAP32[$0 + 36 >> 2] = $481;
     $$pre1202 = HEAP32[$0 + 14252 >> 2] | 0;
     if (!$$pre1202) {
      $$010481232 = 1.0;
      $576 = $481;
      break;
     }
     $507 = HEAP32[$113 >> 2] | 0;
     $517 = $$pre1202;
     $537 = $481;
     label = 161;
    } while (0);
    do if ((label | 0) == 161) {
     if (!$507) {
      $$010481232 = 1.0;
      $576 = $537;
      break;
     }
     if (HEAP32[$271 >> 2] | 0) {
      $$010481232 = 1.0;
      $576 = $537;
      break;
     }
     $511 = HEAP32[$$pre$phi1211Z2D >> 2] | 0;
     switch ($511 | 0) {
     case 1101:
      {
       $$01001 = 8.0e3;
       $$01002 = 13;
       break;
      }
     case 1102:
      {
       $$01001 = 12.0e3;
       $$01002 = 15;
       break;
      }
     default:
      {
       $$01001 = 16.0e3;
       $$01002 = 17;
      }
     }
     $512 = HEAP32[$98 >> 2] | 0;
     if (($512 | 0) > 0) {
      $$010031182 = 0;
      $$010101181 = 0.0;
      while (1) {
       $514 = $$010031182 * 21 | 0;
       $$110111179 = $$010101181;
       $$19791180 = 0;
       do {
        $518 = +HEAPF32[$517 + ($$19791180 + $514 << 2) >> 2];
        $519 = $518 < .5;
        $521 = !(($519 ? $518 : .5) > -2.0);
        $522 = $521 | $519 ^ 1 ? ($521 ? -2.0 : .5) : $518;
        $$110111179 = $$110111179 + ($522 > 0.0 ? $522 * .5 : $522);
        $$19791180 = $$19791180 + 1 | 0;
       } while (($$19791180 | 0) != ($$01002 | 0));
       $$010031182 = $$010031182 + 1 | 0;
       if (($$010031182 | 0) == ($512 | 0)) {
        $$01010$lcssa = $$110111179;
        break;
       } else $$010101181 = $$110111179;
      }
     } else $$01010$lcssa = 0.0;
     $534 = ~~($$01001 * ($$01010$lcssa / +($$01002 | 0) * +($512 | 0) + .20000000298023224));
     $535 = $0 + 36 | 0;
     $538 = (Math_imul($537, -2) | 0) / 3 | 0;
     $$1077 = ($538 | 0) < ($534 | 0) ? $534 : $538;
     if (($511 & -2 | 0) == 1104) {
      $543 = (($$1077 * 3 | 0) / 5 | 0) + $537 | 0;
      HEAP32[$535 >> 2] = $543;
      $$010481232 = 1.0;
      $576 = $543;
      break;
     } else {
      $544 = $$1077 + $537 | 0;
      HEAP32[$535 >> 2] = $544;
      $$010481232 = 1.0;
      $576 = $544;
      break;
     }
    } while (0);
    $546 = HEAP32[$110 >> 2] | 0;
    HEAP32[$0 + 32 >> 2] = ($2 * 1e3 | 0) / ($546 | 0) | 0;
    $549 = HEAP32[$98 >> 2] | 0;
    HEAP32[$44 >> 2] = $549;
    $550 = HEAP32[$$pre$phiZ2D >> 2] | 0;
    HEAP32[$0 + 12 >> 2] = $550;
    L229 : do switch ($491 | 0) {
    case 1101:
     {
      $$sink1243 = 8e3;
      break;
     }
    case 1102:
     {
      $$sink1243 = 12e3;
      break;
     }
    default:
     {
      if (($491 | 0) == 1103 | $483) {
       $$sink1243 = 16e3;
       break L229;
      }
      _celt_fatal(49492, 49579, 1755);
     }
    } while (0);
    $553 = $0 + 28 | 0;
    HEAP32[$553 >> 2] = $$sink1243;
    HEAP32[$0 + 24 >> 2] = $483 ? 16e3 : 8e3;
    $555 = $0 + 20 | 0;
    HEAP32[$555 >> 2] = 16e3;
    do if (($482 | 0) == 1e3) {
     $$0999 = ($112 | 0) > 50 ? ($133 << 4 | 0) / 3 | 0 : $176;
     if (($$0999 | 0) >= 8e3) break;
     HEAP32[$555 >> 2] = 12e3;
     HEAP32[$553 >> 2] = $$sink1243 >>> 0 < 12e3 ? $$sink1243 : 12e3;
     if (($$0999 | 0) >= 7e3) break;
     HEAP32[$555 >> 2] = 8e3;
     HEAP32[$553 >> 2] = 8e3;
    } while (0);
    $563 = HEAP32[$113 >> 2] | 0;
    $564 = ($563 | 0) == 0;
    HEAP32[$0 + 60 >> 2] = $564 & 1;
    $567 = $421 << 3;
    $568 = $0 + 64 | 0;
    HEAP32[$568 >> 2] = $567;
    do if (($$01004 | 0) > 1 & ($$3995 | 0) != 0) {
     $573 = $567 - ($$01004 << 3 | 1) | 0;
     HEAP32[$568 >> 2] = $573;
     if (!$483) {
      $578 = $573;
      break;
     }
     $574 = $573 + -20 | 0;
     HEAP32[$568 >> 2] = $574;
     $578 = $574;
    } else $578 = $567; while (0);
    do if ($564) {
     if (!$483) break;
     $577 = (Math_imul($576, $2) | 0) / ($546 | 0) | 0;
     HEAP32[$568 >> 2] = ($578 | 0) < ($577 | 0) ? $578 : $577;
    } else {
     if (!$483) break;
     $581 = (Math_imul($578, $546) | 0) / ($2 | 0) | 0;
     HEAP32[$568 >> 2] = (Math_imul(_compute_silk_rate_for_hybrid($581, $491, ($546 | 0) == ($2 * 50 | 0) & 1, $563, HEAP32[$374 >> 2] | 0, $550) | 0, $2) | 0) / ($546 | 0) | 0;
    } while (0);
    if (!$$1987) $615 = $549; else {
     HEAP32[$17 >> 2] = 0;
     $593 = ($546 | 0) / 400 | 0;
     $596 = Math_imul((HEAP32[$428 >> 2] | 0) - $593 - (HEAP32[$0 + 116 >> 2] | 0) | 0, $549) | 0;
     $597 = $0 + 14276 + ($596 << 2) | 0;
     $598 = HEAP32[$14 >> 2] | 0;
     _gain_fade($597, $597, 0.0, 1.0, HEAP32[$598 + 4 >> 2] | 0, $593, $549, HEAP32[$598 + 60 >> 2] | 0, $546);
     _memset($427 | 0, 0, $596 << 2 | 0) | 0;
     $604 = HEAP32[$428 >> 2] | 0;
     $606 = Math_imul(HEAP32[$98 >> 2] | 0, $604) | 0;
     if (($606 | 0) > 0) {
      $$29801174 = 0;
      do {
       HEAP16[$472 + ($$29801174 << 1) >> 1] = _FLOAT2INT16_669(+HEAPF32[$0 + 14276 + ($$29801174 << 2) >> 2]) | 0;
       $$29801174 = $$29801174 + 1 | 0;
      } while (($$29801174 | 0) != ($606 | 0));
      _silk_Encode($33, $44, $472, $604, 0, $17, $$1987, $$01017) | 0;
     } else _silk_Encode($33, $44, $472, $604, 0, $17, $$1987, $$01017) | 0;
     HEAP32[$0 + 72 >> 2] = 0;
     $615 = HEAP32[$98 >> 2] | 0;
    }
    $614 = Math_imul($615, $2) | 0;
    do if (($614 | 0) > 0) {
     $617 = Math_imul($615, $$01026) | 0;
     HEAP16[$472 >> 1] = _FLOAT2INT16_669(+HEAPF32[$426 + ($617 << 2) >> 2]) | 0;
     if (($614 | 0) == 1) break;
     $$31172 = 1;
     do {
      HEAP16[$472 + ($$31172 << 1) >> 1] = _FLOAT2INT16_669(+HEAPF32[$426 + ($617 + $$31172 << 2) >> 2]) | 0;
      $$31172 = $$31172 + 1 | 0;
     } while (($$31172 | 0) < ($614 | 0));
    } while (0);
    do if (!(_silk_Encode($33, $44, $472, $2, $12, $11, 0, $$01017) | 0)) {
     $631 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
     $634 = HEAP32[$0 + 80 >> 2] | 0;
     L267 : do if (($631 | 0) == 1e3) {
      L269 : do if (($634 | 0) < 12e3) switch ($634 | 0) {
      case 8e3:
       {
        $$01037 = 1101;
        break L267;
        break;
       }
      default:
       {}
      } else if (($634 | 0) < 16e3) {
       switch ($634 | 0) {
       case 12e3:
        break;
       default:
        break L269;
       }
       $$01037 = 1102;
       break L267;
      } else {
       switch ($634 | 0) {
       case 16e3:
        break;
       default:
        break L269;
       }
       $$01037 = 1103;
       break L267;
      } while (0);
      $$01037 = $491;
     } else {
      if (($634 | 0) == 16e3) {
       $$01037 = $491;
       break;
      }
      _celt_fatal(49598, 49579, 1863);
     } while (0);
     if (!(HEAP32[$0 + 96 >> 2] | 0)) $643 = 0; else $643 = (HEAP32[$0 + 18128 >> 2] | 0) == 0;
     HEAP32[$0 + 72 >> 2] = $643 & 1;
     if (!(HEAP32[$11 >> 2] | 0)) {
      HEAP32[$23 >> 2] = 0;
      HEAP8[$3 >> 0] = _gen_toc($631, (HEAP32[$110 >> 2] | 0) / ($2 | 0) | 0, $$01037, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      $$0 = 1;
      break;
     }
     if ($643) {
      $653 = _compute_redundancy_bytes($$01050, HEAP32[$109 >> 2] | 0, $112, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      HEAP32[$406 >> 2] = 1;
      $$21006$ph = $653;
      $$31015$ph = 0;
      $$5997$ph = ($653 | 0) != 0 & 1;
     } else {
      $$21006$ph = $$01004;
      $$31015$ph = $$11013;
      $$5997$ph = $$3995;
     }
     _llvm_stackrestore($471 | 0);
     $$11049 = $$010481232;
     $$21039 = $$01037;
     $$31007 = $$21006$ph;
     $$41016 = $$31015$ph;
     $$6998 = $$5997$ph;
     label = 217;
     break L202;
    } else $$0 = -3; while (0);
    _llvm_stackrestore($471 | 0);
    $$1 = $$0;
   } while (0);
   L291 : do if ((label | 0) == 217) {
    switch ($$21039 | 0) {
    case 1101:
     {
      $$0989 = 13;
      break;
     }
    case 1103:
    case 1102:
     {
      $$0989 = 17;
      break;
     }
    case 1104:
     {
      $$0989 = 19;
      break;
     }
    default:
     $$0989 = 21;
    }
    HEAP32[$vararg_buffer4 >> 2] = $$0989;
    _opus_custom_encoder_ctl($35, 10012, $vararg_buffer4) | 0;
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
    _opus_custom_encoder_ctl($35, 10008, $vararg_buffer7) | 0;
    HEAP32[$vararg_buffer10 >> 2] = -1;
    _opus_custom_encoder_ctl($35, 4002, $vararg_buffer10) | 0;
    do if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1e3) {
     $659 = HEAP32[$98 >> 2] | 0;
     $$alloca_mul97 = ((Math_imul(HEAP32[$110 >> 2] | 0, $659) | 0) / 400 | 0) << 2;
     $663 = STACKTOP;
     STACKTOP = STACKTOP + ((1 * $$alloca_mul97 | 0) + 15 & -16) | 0;
     $707 = $659;
     $812 = $663;
    } else {
     HEAP32[$vararg_buffer13 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 4006, $vararg_buffer13) | 0;
     HEAP32[$vararg_buffer16 >> 2] = (HEAP32[$0 + 76 >> 2] | 0) == 0 ? 2 : 0;
     _opus_custom_encoder_ctl($35, 10002, $vararg_buffer16) | 0;
     $667 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
     $670 = (HEAP32[$113 >> 2] | 0) != 0;
     do if (($667 | 0) == 1001) if ($670) {
      HEAP32[$vararg_buffer19 >> 2] = (HEAP32[$109 >> 2] | 0) - (HEAP32[$0 + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($35, 4002, $vararg_buffer19) | 0;
      HEAP32[$vararg_buffer22 >> 2] = 0;
      _opus_custom_encoder_ctl($35, 4020, $vararg_buffer22) | 0;
      label = 229;
      break;
     } else {
      $671 = HEAP32[$98 >> 2] | 0;
      $672 = HEAP32[$110 >> 2] | 0;
      $674 = (Math_imul($672, $671) | 0) / 400 | 0;
      $675 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($674 << 2) | 0) + 15 & -16) | 0;
      $691 = 1001;
      $695 = $672;
      $699 = $671;
      $702 = $674;
      $703 = $675;
      break;
     } else {
      if (!$670) {
       $688 = $667;
       label = 230;
       break;
      }
      HEAP32[$vararg_buffer25 >> 2] = 1;
      _opus_custom_encoder_ctl($35, 4006, $vararg_buffer25) | 0;
      HEAP32[$vararg_buffer28 >> 2] = HEAP32[$0 + 152 >> 2];
      _opus_custom_encoder_ctl($35, 4020, $vararg_buffer28) | 0;
      HEAP32[$vararg_buffer31 >> 2] = HEAP32[$109 >> 2];
      _opus_custom_encoder_ctl($35, 4002, $vararg_buffer31) | 0;
      label = 229;
     } while (0);
     if ((label | 0) == 229) {
      $688 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
      label = 230;
     }
     if ((label | 0) == 230) {
      $683 = HEAP32[$98 >> 2] | 0;
      $684 = HEAP32[$110 >> 2] | 0;
      $686 = (Math_imul($684, $683) | 0) / 400 | 0;
      $687 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($686 << 2) | 0) + 15 & -16) | 0;
      if (($688 | 0) == 1e3) {
       $707 = $683;
       $812 = $687;
       break;
      } else {
       $691 = $688;
       $695 = $684;
       $699 = $683;
       $702 = $686;
       $703 = $687;
      }
     }
     $690 = HEAP32[$274 >> 2] | 0;
     if (!(($691 | 0) != ($690 | 0) & ($690 | 0) > 0)) {
      $707 = $699;
      $812 = $703;
      break;
     }
     _memcpy($703 | 0, $0 + 14276 + ((Math_imul((($695 | 0) / -400 | 0) - $$01026 + (HEAP32[$428 >> 2] | 0) | 0, $699) | 0) << 2) | 0, $702 << 2 | 0) | 0;
     $707 = $699;
     $812 = $703;
    } while (0);
    $704 = HEAP32[$428 >> 2] | 0;
    $706 = Math_imul($704 - $422 | 0, $707) | 0;
    if (($706 | 0) > 0) {
     _memmove($427 | 0, $0 + 14276 + ((Math_imul($707, $2) | 0) << 2) | 0, $706 << 2 | 0) | 0;
     _memcpy($0 + 14276 + ($706 << 2) | 0, $426 | 0, Math_imul($422 << 2, $707) | 0) | 0;
    } else _memcpy($427 | 0, $426 + ((Math_imul($422 - $704 | 0, $707) | 0) << 2) | 0, Math_imul($707 << 2, $704) | 0) | 0;
    $720 = $0 + 14200 | 0;
    $721 = +HEAPF32[$720 >> 2];
    if ($$11049 < 1.0 | $721 < 1.0) {
     $724 = HEAP32[$14 >> 2] | 0;
     _gain_fade($426, $426, $721, $$11049, HEAP32[$724 + 4 >> 2] | 0, $2, HEAP32[$98 >> 2] | 0, HEAP32[$724 + 60 >> 2] | 0, HEAP32[$110 >> 2] | 0);
    }
    HEAPF32[$720 >> 2] = $$11049;
    $731 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    if (($731 | 0) == 1001) {
     if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == 1) label = 240;
    } else label = 240;
    if ((label | 0) == 240) {
     do if (($292 | 0) > 32e3) $$sink1246 = 16384; else {
      if (($292 | 0) < 16e3) {
       $$sink1246 = 0;
       break;
      }
      $$sink1246 = 16384 - ((65536e3 - ($292 << 11) | 0) / ($292 + -14e3 | 0) | 0) | 0;
     } while (0);
     HEAP32[$0 + 92 >> 2] = $$sink1246;
    }
    do if (!(HEAP32[$0 + 14252 >> 2] | 0)) {
     if ((HEAP32[$98 >> 2] | 0) != 2) {
      $764 = $731;
      break;
     }
     $748 = $0 + 14192 | 0;
     $749 = HEAP16[$748 >> 1] | 0;
     $$phi$trans$insert1205 = $0 + 92 | 0;
     $$pre1206 = HEAP32[$$phi$trans$insert1205 >> 2] | 0;
     if (!($749 << 16 >> 16 < 16384 | ($$pre1206 | 0) < 16384)) {
      $764 = $731;
      break;
     }
     $756 = HEAP32[$14 >> 2] | 0;
     _stereo_fade($426, $426, +($749 << 16 >> 16) * .00006103515625, +($$pre1206 | 0) * .00006103515625, HEAP32[$756 + 4 >> 2] | 0, $2, HEAP32[$756 + 60 >> 2] | 0, HEAP32[$110 >> 2] | 0);
     HEAP16[$748 >> 1] = HEAP32[$$phi$trans$insert1205 >> 2];
     $764 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    } else $764 = $731; while (0);
    do if (($764 | 0) == 1002) label = 255; else {
     $$idx1095 = $12 + 20 | 0;
     $$idx1096 = $12 + 28 | 0;
     $766 = _ec_tell_671(HEAP32[$$idx1095 >> 2] | 0, HEAP32[$$idx1096 >> 2] | 0) | 0;
     $767 = ($764 | 0) == 1001;
     if ((($767 ? 37 : 17) + $766 | 0) > ($421 << 3 | 0)) {
      label = 255;
      break;
     }
     if ($767) _ec_enc_bit_logp($12, $$6998, 12);
     if (!$$6998) {
      label = 255;
      break;
     }
     _ec_enc_bit_logp($12, $$41016, 1);
     $774 = (HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1001;
     $775 = _ec_tell_671(HEAP32[$$idx1095 >> 2] | 0, HEAP32[$$idx1096 >> 2] | 0) | 0;
     $$0981 = $421 - ($775 + ($774 ? 18 : 7) >> 3) | 0;
     $777 = ($$0981 | 0) < ($$31007 | 0) ? $$0981 : $$31007;
     $779 = ($777 | 0) > 2 ? $777 : 2;
     $spec$select1085 = ($779 | 0) < 257 ? $779 : 257;
     if (!$774) {
      $$51009 = $spec$select1085;
      $$71134 = $$6998;
      $799 = 1;
      break;
     }
     _ec_enc_uint($12, $spec$select1085 + -2 | 0, 256);
     $$51009 = $spec$select1085;
     $$71134 = $$6998;
     $799 = 1;
    } while (0);
    if ((label | 0) == 255) {
     HEAP32[$406 >> 2] = 0;
     $$51009 = 0;
     $$71134 = 0;
     $799 = 0;
    }
    $782 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    $spec$select1086 = ($782 | 0) == 1002 ? 0 : 17;
    if (($782 | 0) == 1e3) {
     $787 = (_ec_tell_671(HEAP32[$12 + 20 >> 2] | 0, HEAP32[$12 + 28 >> 2] | 0) | 0) + 7 >> 3;
     _ec_enc_done($12);
     $$01018 = $787;
     $$2984 = $787;
    } else {
     $788 = $421 - $$51009 | 0;
     _ec_enc_shrink($12, $788);
     $$01018 = $788;
     $$2984 = 0;
    }
    do if ($799) label = 262; else {
     if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) != 1e3) {
      label = 262;
      break;
     }
     $835 = ($$41016 | 0) != 0;
     $or$cond271139 = 0;
    } while (0);
    do if ((label | 0) == 262) {
     HEAP32[$vararg_buffer34 >> 2] = $15;
     _opus_custom_encoder_ctl($35, 10022, $vararg_buffer34) | 0;
     if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1001) {
      HEAP32[$18 >> 2] = HEAP32[$0 + 100 >> 2];
      HEAP32[$18 + 4 >> 2] = HEAP32[$0 + 104 >> 2];
      HEAP32[$vararg_buffer37 >> 2] = $18;
      _opus_custom_encoder_ctl($35, 10028, $vararg_buffer37) | 0;
     }
     $798 = ($$41016 | 0) != 0;
     if (!($798 & $799)) {
      $835 = $798;
      $or$cond271139 = 0;
      break;
     }
     HEAP32[$vararg_buffer40 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 10010, $vararg_buffer40) | 0;
     HEAP32[$vararg_buffer43 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 4006, $vararg_buffer43) | 0;
     HEAP32[$vararg_buffer46 >> 2] = -1;
     _opus_custom_encoder_ctl($35, 4002, $vararg_buffer46) | 0;
     if ((_celt_encode_with_ec($35, $426, (HEAP32[$110 >> 2] | 0) / 200 | 0, $420 + $$01018 | 0, $$51009, 0) | 0) < 0) {
      $$1 = -3;
      break L291;
     }
     HEAP32[$vararg_buffer49 >> 2] = $13;
     _opus_custom_encoder_ctl($35, 4031, $vararg_buffer49) | 0;
     _opus_custom_encoder_ctl($35, 4028, $vararg_buffer52) | 0;
     $835 = 1;
     $or$cond271139 = 1;
    } while (0);
    HEAP32[$vararg_buffer54 >> 2] = $spec$select1086;
    _opus_custom_encoder_ctl($35, 10010, $vararg_buffer54) | 0;
    $805 = HEAP32[$$pre$phi12101224Z2D >> 2] | 0;
    do if (($805 | 0) == 1e3) {
     $$11019 = $$01018;
     $$3985 = $$2984;
    } else {
     $807 = HEAP32[$274 >> 2] | 0;
     if (($805 | 0) != ($807 | 0) & ($807 | 0) > 0) {
      _opus_custom_encoder_ctl($35, 4028, $vararg_buffer57) | 0;
      _celt_encode_with_ec($35, $812, (HEAP32[$110 >> 2] | 0) / 400 | 0, $19, 2, 0) | 0;
      HEAP32[$vararg_buffer59 >> 2] = 0;
      _opus_custom_encoder_ctl($35, 10002, $vararg_buffer59) | 0;
     }
     if ((_ec_tell_671(HEAP32[$12 + 20 >> 2] | 0, HEAP32[$12 + 28 >> 2] | 0) | 0) > ($$01018 << 3 | 0)) {
      $$11019 = $$01018;
      $$3985 = $$2984;
      break;
     }
     do if ($or$cond271139) {
      if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) != 1001) break;
      if (!(HEAP32[$113 >> 2] | 0)) break;
      HEAP32[$vararg_buffer62 >> 2] = (HEAP32[$109 >> 2] | 0) - (HEAP32[$0 + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($35, 4002, $vararg_buffer62) | 0;
     } while (0);
     HEAP32[$vararg_buffer65 >> 2] = HEAP32[$113 >> 2];
     _opus_custom_encoder_ctl($35, 4006, $vararg_buffer65) | 0;
     $825 = _celt_encode_with_ec($35, $426, $2, 0, $$01018, $12) | 0;
     if (($825 | 0) < 0) {
      $$1 = -3;
      break L291;
     }
     if (!$or$cond271139) {
      $$11019 = $$01018;
      $$3985 = $825;
      break;
     }
     if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) != 1001) {
      $$11019 = $$01018;
      $$3985 = $825;
      break;
     }
     if (!(HEAP32[$113 >> 2] | 0)) {
      $$11019 = $$01018;
      $$3985 = $825;
      break;
     }
     _memmove($420 + $825 | 0, $420 + $$01018 | 0, $$51009 | 0) | 0;
     $$11019 = $$01018 + $$51009 | 0;
     $$3985 = $825;
    } while (0);
    if (!(($$71134 | 0) == 0 | $835)) {
     $836 = HEAP32[$110 >> 2] | 0;
     $837 = ($836 | 0) / 200 | 0;
     $838 = ($836 | 0) / 400 | 0;
     _opus_custom_encoder_ctl($35, 4028, $vararg_buffer68) | 0;
     HEAP32[$vararg_buffer70 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 10010, $vararg_buffer70) | 0;
     HEAP32[$vararg_buffer73 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 10002, $vararg_buffer73) | 0;
     HEAP32[$vararg_buffer76 >> 2] = 0;
     _opus_custom_encoder_ctl($35, 4006, $vararg_buffer76) | 0;
     HEAP32[$vararg_buffer79 >> 2] = -1;
     _opus_custom_encoder_ctl($35, 4002, $vararg_buffer79) | 0;
     if ((HEAP32[$$pre$phi12101224Z2D >> 2] | 0) == 1001) {
      _ec_enc_shrink($12, $$3985);
      $$21020 = $$3985;
     } else $$21020 = $$11019;
     $842 = $2 - $837 | 0;
     _celt_encode_with_ec($35, $426 + ((Math_imul(HEAP32[$98 >> 2] | 0, $842 - $838 | 0) | 0) << 2) | 0, $838, $20, 2, 0) | 0;
     if ((_celt_encode_with_ec($35, $426 + ((Math_imul(HEAP32[$98 >> 2] | 0, $842) | 0) << 2) | 0, $837, $420 + $$21020 | 0, $$51009, 0) | 0) < 0) {
      $$1 = -3;
      break;
     }
     HEAP32[$vararg_buffer82 >> 2] = $13;
     _opus_custom_encoder_ctl($35, 4031, $vararg_buffer82) | 0;
    }
    HEAP8[$3 >> 0] = _gen_toc(HEAP32[$$pre$phi12101224Z2D >> 2] | 0, (HEAP32[$110 >> 2] | 0) / ($2 | 0) | 0, $$21039, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
    $857 = $12 + 28 | 0;
    $858 = HEAP32[$857 >> 2] | 0;
    HEAP32[$23 >> 2] = HEAP32[$13 >> 2] ^ $858;
    if (!$$01021) $storemerge = HEAP32[$$pre$phi12101224Z2D >> 2] | 0; else $storemerge = 1002;
    HEAP32[$274 >> 2] = $storemerge;
    HEAP32[$0 + 14228 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
    HEAP32[$0 + 14232 >> 2] = $2;
    HEAP32[$0 + 14248 >> 2] = 0;
    do if (!(HEAP32[$0 + 184 >> 2] | 0)) $$idx1088$val = $858; else {
     if (!(HEAP32[$15 >> 2] | $$1105411041218)) {
      $$idx1088$val = $858;
      break;
     }
     if (!(_decide_dtx_mode(+HEAPF32[$15 + 36 >> 2], $0 + 18120 | 0, +HEAPF32[$0 + 18124 >> 2], $1, $2, HEAP32[$98 >> 2] | 0, $$1105411041218) | 0)) {
      $$idx1088$val = HEAP32[$857 >> 2] | 0;
      break;
     } else {
      HEAP32[$23 >> 2] = 0;
      HEAP8[$3 >> 0] = _gen_toc(HEAP32[$$pre$phi12101224Z2D >> 2] | 0, (HEAP32[$110 >> 2] | 0) / ($2 | 0) | 0, $$21039, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      $$1 = 1;
      break L291;
     }
    } while (0);
    L395 : do if ((_ec_tell_671(HEAP32[$12 + 20 >> 2] | 0, $$idx1088$val) | 0) > ($421 << 3 | 0)) {
     if (($$01050 | 0) < 2) {
      $$1 = -2;
      break L291;
     }
     HEAP8[$420 >> 0] = 0;
     HEAP32[$23 >> 2] = 0;
     $$5 = 1;
    } else {
     if (!(($$3985 | 0) > 2 & (($799 | (HEAP32[$$pre$phi12101224Z2D >> 2] | 0) != 1e3) ^ 1))) {
      $$5 = $$3985;
      break;
     }
     $$41169 = $$3985;
     while (1) {
      if (HEAP8[$3 + $$41169 >> 0] | 0) {
       $$5 = $$41169;
       break L395;
      }
      $896 = $$41169 + -1 | 0;
      if (($$41169 | 0) > 3) $$41169 = $896; else {
       $$5 = $896;
       break;
      }
     }
    } while (0);
    $899 = $$51009 + 1 + $$5 | 0;
    if (!(HEAP32[$113 >> 2] | 0)) if (!(_opus_packet_pad($3, $899, $$01050) | 0)) $$6 = $$01050; else {
     $$1 = -3;
     break;
    } else $$6 = $899;
    $$1 = $$6;
   } while (0);
   _llvm_stackrestore($425 | 0);
   $$2 = $$1;
   STACKTOP = sp;
   return $$2 | 0;
  } else $$01024 = $389; while (0);
  if (($$1105811001220 | 0) != -1) {
   HEAP32[$0 + 7636 >> 2] = $$1105811001220;
   HEAP32[$0 + 7640 >> 2] = $$1105611021219;
  }
  $$2 = _encode_multiframe_packet($0, $1, ($2 | 0) / ($$01024 | 0) | 0, $$01024, $3, $4, $$01021, $$) | 0;
  STACKTOP = sp;
  return $$2 | 0;
 } while (0);
 $137 = HEAP32[$0 + 14220 >> 2] | 0;
 $139 = HEAP32[$0 + 14236 >> 2] | 0;
 $spec$select = ($139 | 0) == 0 ? 1101 : $139;
 $spec$select1062 = ($112 | 0) > 100 ? 1002 : ($137 | 0) == 0 ? 1e3 : $137;
 $or$cond3 = ($112 | 0) == 25 & ($spec$select1062 | 0) != 1e3;
 $$01042 = $or$cond3 & 1;
 $$01035 = $or$cond3 ? 50 : $112;
 do if (($$01035 | 0) < 17) {
  if (($4 | 0) != 1) if (!(($spec$select1062 | 0) == 1e3 & ($$01035 | 0) != 10)) {
   $$01041 = (50 / ($$01035 | 0) | 0) & 255;
   $$11036 = 50;
   $$11043 = 3;
   $$21047 = $spec$select1062;
   break;
  }
  $$01041 = 0;
  $$11036 = ($$01035 | 0) == 12 ? 25 : 16;
  $$11043 = ($$01035 | 0) < 13 & 1;
  $$21047 = 1e3;
 } else {
  $$01041 = 0;
  $$11036 = $$01035;
  $$11043 = $$01042;
  $$21047 = $spec$select1062;
 } while (0);
 if (($spec$select | 0) > 1103 & ($$21047 | 0) == 1e3) $$01044 = 1103; else $$01044 = ($spec$select | 0) == 1102 & ($$21047 | 0) == 1002 ? 1101 : ($spec$select | 0) < 1105 & ($$21047 | 0) == 1001 ? 1104 : $spec$select;
 HEAP8[$3 >> 0] = $$11043 | (_gen_toc($$21047, $$11036, $$01044, HEAP32[$0 + 14188 >> 2] | 0) | 0) & 255;
 $167 = $$11043 >>> 0 < 2 ? 1 : 2;
 $169 = ($$010501106 | 0) > ($167 | 0) ? $$010501106 : $167;
 if (($$11043 | 0) == 3) HEAP8[$3 + 1 >> 0] = $$01041;
 if (HEAP32[$113 >> 2] | 0) {
  $$2 = $167;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $175 = (_opus_packet_pad($3, $167, $169) | 0) == 0;
 $$2 = $175 ? $169 : -3;
 STACKTOP = sp;
 return $$2 | 0;
}

function _celt_encode_with_ec($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$0 = 0, $$01052 = 0, $$01057 = 0.0, $$010621276 = 0, $$01063$lcssa1417 = 0, $$01063$lcssa1418 = 0, $$010631275 = 0, $$010641274 = 0, $$01065 = 0, $$01065$idx$val3 = 0, $$01065$idx10$val = 0, $$01065$idx10$val39 = 0, $$01065$idx10$val40 = 0, $$01065$idx10$val41 = 0, $$01065$idx10$val42 = 0, $$01065$idx10$val43 = 0, $$01065$idx10$val44 = 0, $$01065$idx10$val45 = 0, $$01065$idx1171 = 0, $$01065$idx1172 = 0, $$01065$idx1175 = 0, $$01065$idx1176 = 0, $$01065$idx1179 = 0, $$01065$idx1179$val = 0, $$01065$idx4$val = 0, $$01065$idx7$val = 0, $$01065$idx8$val = 0, $$01065$idx9$val = 0, $$01065$idx9$val31 = 0, $$01065$idx9$val32 = 0, $$01065$idx9$val33 = 0, $$01065$idx9$val34 = 0, $$01065$idx9$val35 = 0, $$01065$idx9$val36 = 0, $$01065$idx9$val37 = 0, $$010661362 = 0, $$01072 = 0, $$01077$lcssa = 0.0, $$010771324 = 0.0, $$010771324$us = 0.0, $$010781323 = 0.0, $$010781323$us = 0.0, $$0108111911197 = 0, $$01083$us = 0.0, $$010841351$us = 0, $$010861350$us = 0.0, $$010891349$us = 0.0, $$01092$lcssa = 0, $$010921333 = 0, $$010921333$us = 0, $$01094 = 0, $$01095 = 0, $$010981365 = 0, $$01099 = 0, $$01100 = 0, $$01101 = 0, $$01107 = 0, $$01109 = 0, $$011131294 = 0, $$01115 = 0, $$01119$ph = 0.0, $$011191205 = 0.0, $$01120 = 0.0, $$01121$ph = 0.0, $$011211204 = 0.0, $$011221189$ph = 0, $$0112211891199 = 0, $$01123 = 0, $$01125$lcssa = 0, $$011251293 = 0, $$01127 = 0, $$01133 = 0, $$011341187 = 0, $$01135 = 0, $$1 = 0, $$101313 = 0, $$11053 = 0, $$11059 = 0, $$110671359 = 0, $$110731352$us = 0, $$110821210 = 0, $$110821211 = 0, $$110851341$us = 0, $$110871340$us = 0.0, $$110901339$us = 0.0, $$11093 = 0, $$11093$us = 0, $$1109611901198 = 0, $$11102 = 0, $$11108 = 0, $$11110 = 0, $$11117 = 0, $$11126$lcssa1415 = 0, $$11126$lcssa1416 = 0, $$111261273 = 0, $$11128 = 0, $$111301$us = 0, $$1139 = 0, $$1142 = 0.0, $$1148 = 0.0, $$1150$us = 0.0, $$1151$us = 0.0, $$1156 = 0, $$1157 = 0, $$1166 = 0, $$121295 = 0, $$131266$us = 0, $$141263 = 0, $$151260 = 0, $$161248$us = 0, $$171249$us = 0, $$171249$us1254 = 0, $$2 = 0, $$21060 = 0, $$210681342$us = 0, $$21074$us = 0, $$21088 = 0.0, $$21091 = 0.0, $$210971208 = 0, $$210971209 = 0, $$21103 = 0, $$21111 = 0, $$21129$lcssa = 0, $$211291292 = 0, $$31061 = 0, $$310691334 = 0, $$310691334$us = 0, $$31075$us = 0, $$311301272 = 0, $$4 = 0, $$4$ = 0, $$410701330 = 0, $$41076$us = 0, $$41076$us1253 = 0, $$41105 = 0, $$41131 = 0, $$411311419 = 0, $$411311420 = 0, $$5 = 0, $$510711325 = 0, $$510711325$us = 0, $$51132 = 0, $$61319 = 0, $$71307 = 0, $$81310 = 0, $$alloca_mul11 = 0, $$alloca_mul17 = 0, $$alloca_mul29 = 0, $$idx1$val = 0, $$idx11 = 0, $$idx2$val = 0, $$ph1193 = 0, $$ph1194 = 0, $$ph1195 = 0, $$pr = 0, $$pre = 0, $$pre$phi1412Z2D = 0, $$pre$phi48Z2D = 0, $$pre1405$pre = 0, $10 = 0, $102 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $132 = 0.0, $136 = 0.0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $163 = 0, $168 = 0, $17 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $20 = 0, $203 = 0.0, $206 = 0.0, $21 = 0, $211 = 0, $215 = 0, $217 = 0, $218 = 0, $22 = 0, $223 = 0, $233 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $252 = 0, $253 = 0, $257 = 0.0, $258 = 0, $26 = 0, $263 = 0, $264 = 0, $265 = 0.0, $269 = 0.0, $272 = 0, $276 = 0, $277 = 0.0, $279 = 0.0, $28 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $289 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $301 = 0.0, $302 = 0, $304 = 0, $305 = 0.0, $31 = 0, $313 = 0, $314 = 0, $328 = 0.0, $337 = 0.0, $339 = 0.0, $34 = 0, $342 = 0, $343 = 0, $349 = 0.0, $350 = 0.0, $357 = 0.0, $36 = 0, $360 = 0.0, $364 = 0.0, $37 = 0, $376 = 0.0, $379 = 0.0, $38 = 0, $387 = 0.0, $390 = 0, $392 = 0.0, $402 = 0, $403 = 0.0, $406 = 0.0, $409 = 0.0, $41 = 0, $414 = 0.0, $416 = 0.0, $418 = 0.0, $421 = 0.0, $423 = 0.0, $428 = 0, $429 = 0.0, $430 = 0.0, $432 = 0.0, $434 = 0.0, $438 = 0, $440 = 0, $446 = 0, $453 = 0.0, $454 = 0, $46 = 0, $460 = 0, $467 = 0, $468 = 0, $469 = 0, $474 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $484 = 0, $486 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $540 = 0, $542 = 0, $547 = 0, $549 = 0, $55 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $57 = 0, $571 = 0, $572 = 0, $574 = 0, $576 = 0, $58 = 0, $582 = 0, $585 = 0, $588 = 0, $589 = 0, $594 = 0, $598 = 0, $6 = 0, $601 = 0, $606 = 0, $608 = 0, $625 = 0, $626 = 0, $630 = 0, $632 = 0, $633 = 0, $65 = 0, $653 = 0, $659 = 0.0, $66 = 0, $663 = 0, $667 = 0, $67 = 0, $671 = 0, $674 = 0, $677 = 0, $679 = 0, $681 = 0, $684 = 0, $685 = 0, $686 = 0, $692 = 0, $695 = 0, $697 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $706 = 0, $71 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $721 = 0, $722 = 0, $727 = 0, $740 = 0, $744 = 0, $745 = 0, $747 = 0, $748 = 0, $750 = 0, $751 = 0, $754 = 0, $76 = 0, $763 = 0, $774 = 0, $775 = 0, $776 = 0, $778 = 0.0, $779 = 0, $781 = 0, $79 = 0, $798 = 0, $799 = 0.0, $8 = 0, $801 = 0.0, $805 = 0, $806 = 0, $809 = 0, $81 = 0, $814 = 0, $819 = 0, $820 = 0, $829 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $85 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $or$cond161202 = 0, $spec$select1141 = 0, $spec$select1147 = 0, $spec$select1149 = 0, $spec$select1161 = 0, $spec$select1217 = 0, $spec$select1218 = 0, $spec$select1224 = 0, $spec$select1231 = 0, $spec$select1232 = 0, $storemerge = 0, $storemerge1136 = 0, label = 0, sp = 0, $$210681342$us$looptemp = 0, $313$looptemp = 0, $$121295$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 $17 = HEAP32[$0 + 4 >> 2] | 0;
 $19 = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$7 >> 2] = 15;
 HEAPF32[$8 >> 2] = 0.0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 8 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $24 = HEAP32[$20 + 4 >> 2] | 0;
 $25 = $20 + 32 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $28 = HEAP32[$0 + 32 >> 2] | 0;
 $30 = HEAP32[$0 + 36 >> 2] | 0;
 $31 = ($28 | 0) != 0;
 HEAPF32[$12 >> 2] = 0.0;
 if (($1 | 0) == 0 | ($4 | 0) < 2) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $34 = $0 + 28 | 0;
 $36 = Math_imul(HEAP32[$34 >> 2] | 0, $2) | 0;
 $37 = $20 + 36 | 0;
 $38 = HEAP32[$37 >> 2] | 0;
 if (($38 | 0) < 0) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $41 = HEAP32[$20 + 44 >> 2] | 0;
 $$010981365 = 0;
 while (1) {
  if (($41 << $$010981365 | 0) == ($36 | 0)) break;
  if (($$010981365 | 0) < ($38 | 0)) $$010981365 = $$010981365 + 1 | 0; else {
   $$1 = -1;
   label = 232;
   break;
  }
 }
 if ((label | 0) == 232) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 $46 = 1 << $$010981365;
 $48 = $0 + 244 + ((Math_imul($24, $17) | 0) << 2) | 0;
 $51 = $0 + 244 + ((Math_imul($24 + 1024 | 0, $17) | 0) << 2) | 0;
 $52 = Math_imul($22, $17) | 0;
 $53 = $51 + ($52 << 2) | 0;
 $54 = $53 + ($52 << 2) | 0;
 $55 = $54 + ($52 << 2) | 0;
 $56 = ($5 | 0) == 0;
 if ($56) {
  $$01100 = 0;
  $$01127 = 1;
  $$01133 = 1;
 } else {
  $$idx1$val = HEAP32[$5 + 20 >> 2] | 0;
  $$idx2$val = HEAP32[$5 + 28 >> 2] | 0;
  $57 = _ec_tell_frac($$idx1$val, $$idx2$val) | 0;
  $58 = _ec_tell($$idx1$val, $$idx2$val) | 0;
  $$01100 = $58 + 4 >> 3;
  $$01127 = $58;
  $$01133 = $57;
 }
 if (HEAP32[$0 + 48 >> 2] | 0) _celt_fatal(39758, 39794, 1547);
 $65 = ($4 | 0) < 1275 ? $4 : 1275;
 $66 = $65 - $$01100 | 0;
 $67 = $0 + 44 | 0;
 $$pre = HEAP32[$0 + 40 >> 2] | 0;
 $70 = ($$pre | 0) == -1;
 if (!(HEAP32[$67 >> 2] | 0)) if ($70) {
  $$01109 = $66;
  $$01115 = 0;
  $$11059 = $65;
  $97 = -1;
 } else {
  $79 = Math_imul($$pre, $36) | 0;
  $81 = HEAP32[$20 >> 2] | 0;
  $85 = ($79 + (($$01127 | 0) > 1 ? $$01127 : 0) + ($81 << 2) | 0) / ($81 << 3 | 0) | 0;
  $$ = ($65 | 0) < ($85 | 0) ? $65 : $85;
  $spec$select1217 = ($$ | 0) > 2 ? $$ : 2;
  $$01109 = $spec$select1217 - $$01100 | 0;
  $$01115 = 0;
  $$11059 = $spec$select1217;
  $97 = $$pre;
 } else if ($70) {
  $$01109 = $66;
  $$01115 = 0;
  $$11059 = $65;
  $97 = -1;
 } else {
  $71 = HEAP32[$20 >> 2] | 0;
  $76 = (($71 >> 4) + (Math_imul($$pre, $36) | 0) | 0) / ($71 >> 3 | 0) | 0;
  $$01109 = $76 >> 6;
  $$01115 = $76;
  $$11059 = $65;
  $97 = $$pre;
 }
 $89 = 3 - $$010981365 | 0;
 $92 = ($19 * 40 | 0) + 20 | 0;
 $95 = Math_imul((400 >>> $$010981365) + -50 | 0, $92) | 0;
 $96 = ($$11059 * 400 >> $89) - $95 | 0;
 $99 = $97 - $95 | 0;
 $spec$select1218 = ($97 | 0) == -1 | ($96 | 0) < ($99 | 0) ? $96 : $99;
 if ($56) {
  _ec_enc_init($6, $3, $$11059);
  $$01065 = $6;
 } else $$01065 = $5;
 $102 = ($$01115 | 0) > 0;
 if ($102) if (!(HEAP32[$0 + 52 >> 2] | 0)) {
  $$01101 = $66;
  $$21060 = $$11059;
 } else {
  $107 = ($$01127 | 0) == 1 ? 2 : 0;
  $112 = ($$01115 << 1) - (HEAP32[$0 + 208 >> 2] | 0) >> 6;
  $$1139 = ($107 | 0) > ($112 | 0) ? $107 : $112;
  if (($$1139 | 0) < ($66 | 0)) {
   $115 = $$1139 + $$01100 | 0;
   _ec_enc_shrink($$01065, $115);
   $$01101 = $$1139;
   $$21060 = $115;
  } else {
   $$01101 = $66;
   $$21060 = $$11059;
  }
 } else {
  $$01101 = $66;
  $$21060 = $$11059;
 }
 $116 = $$21060 << 3;
 $118 = HEAP32[$20 + 12 >> 2] | 0;
 $119 = ($30 | 0) > ($118 | 0);
 $spec$select1141 = $119 ? $118 : $30;
 $120 = $36 + $24 | 0;
 $121 = Math_imul($120, $17) | 0;
 $122 = _llvm_stacksave() | 0;
 $123 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($121 << 2) | 0) + 15 & -16) | 0;
 $124 = $0 + 224 | 0;
 $125 = +HEAPF32[$124 >> 2];
 $127 = Math_imul($36 - $24 | 0, $19) | 0;
 $128 = HEAP32[$34 >> 2] | 0;
 $129 = ($127 | 0) / ($128 | 0) | 0;
 $130 = +_celt_maxabs16($1, $129);
 $132 = $125 > $130 ? $125 : $130;
 $136 = +_celt_maxabs16($1 + ($129 << 2) | 0, (Math_imul($24, $19) | 0) / ($128 | 0) | 0);
 HEAPF32[$124 >> 2] = $136;
 $$1142 = $132 > $136 ? $132 : $136;
 $138 = $0 + 60 | 0;
 $143 = $$1142 <= 1.0 / +(1 << HEAP32[$138 >> 2] | 0);
 if (($$01127 | 0) == 1) {
  _ec_enc_bit_logp($$01065, $143 & 1, 15);
  if ($143) {
   $146 = $$01100 + 2 | 0;
   $148 = ($$21060 | 0) < ($146 | 0) ? $$21060 : $146;
   if ($102) {
    _ec_enc_shrink($$01065, $148);
    $$11102 = 2;
    $$11110 = $148;
    $$31061 = $148;
    $$pre$phi1412Z2D = $148 << 3;
   } else {
    $$11102 = $$01101;
    $$11110 = $$01109;
    $$31061 = $$21060;
    $$pre$phi1412Z2D = $116;
   }
   $$01065$idx1179 = $$01065 + 20 | 0;
   $$01065$idx1179$val = HEAP32[$$01065$idx1179 >> 2] | 0;
   HEAP32[$$01065$idx1179 >> 2] = $$01065$idx1179$val + $$pre$phi1412Z2D - (_ec_tell($$01065$idx1179$val, HEAP32[$$01065 + 28 >> 2] | 0) | 0);
   $$011341187 = 1;
   $$11117 = $$pre$phi1412Z2D;
   $$11128 = $$pre$phi1412Z2D;
   $$21103 = $$11102;
   $$21111 = $$11110;
   $$4 = $$31061;
   $684 = 1;
  } else {
   $$011341187 = 0;
   $$11117 = $116;
   $$11128 = 1;
   $$21103 = $$01101;
   $$21111 = $$01109;
   $$4 = $$21060;
   $684 = 0;
  }
 } else {
  $$011341187 = 0;
  $$11117 = $116;
  $$11128 = $$01127;
  $$21103 = $$01101;
  $$21111 = $$01109;
  $$4 = $$21060;
  $684 = 0;
 }
 $153 = $0 + 16 | 0;
 $154 = $$1142 > 65536.0;
 $155 = $20 + 16 | 0;
 $$idx11 = $20 + 20 | 0;
 $$01072 = 0;
 do {
  $163 = $123 + ((Math_imul($$01072, $120) | 0) << 2) + ($24 << 2) | 0;
  _celt_preemphasis($1 + ($$01072 << 2) | 0, $163, $36, $17, HEAP32[$34 >> 2] | 0, +HEAPF32[$155 >> 2], +HEAPF32[$$idx11 >> 2], $0 + 192 + ($$01072 << 2) | 0, $154 & (HEAP32[$153 >> 2] | 0) != 0 & 1);
  $$01072 = $$01072 + 1 | 0;
 } while (($$01072 | 0) < ($17 | 0));
 $168 = $0 + 64 | 0;
 if (($$21103 | 0) > 3 & (HEAP32[$168 >> 2] | 0) != 0) if (!($$011341187 | $28)) label = 31; else $186 = 0; else if (($$011341187 | $28 | 0) != 0 | ($$21103 | 0) <= ($19 * 12 | 0)) $186 = 0; else label = 31;
 if ((label | 0) == 31) if (!(HEAP32[$0 + 20 >> 2] | 0)) $186 = (HEAP32[$0 + 24 >> 2] | 0) > 4; else $186 = 0;
 $187 = $0 + 100 | 0;
 $188 = HEAP32[$187 >> 2] | 0;
 $189 = $0 + 120 | 0;
 $190 = _run_prefilter($0, $123, $48, $17, $36, $188, $7, $8, $15, $186 & 1, $$21103, $189) | 0;
 if (+HEAPF32[$8 >> 2] > .4000000059604645) label = 35; else if (+HEAPF32[$0 + 108 >> 2] > .4000000059604645) label = 35; else $$01135 = 0;
 do if ((label | 0) == 35) {
  if (HEAP32[$189 >> 2] | 0) if (!(+HEAPF32[$0 + 124 >> 2] > .3)) {
   $$01135 = 0;
   break;
  }
  $203 = +(HEAP32[$7 >> 2] | 0);
  $206 = +(HEAP32[$0 + 104 >> 2] | 0);
  $$01135 = ($206 * 1.26 < $203 | $206 * .79 > $203) & 1;
 } while (0);
 $211 = ($190 | 0) == 0;
 if ($211) {
  if (!($31 | ($$11128 + 16 | 0) > ($$11117 | 0))) _ec_enc_bit_logp($$01065, 0, 1);
 } else {
  _ec_enc_bit_logp($$01065, 1, 1);
  $215 = (HEAP32[$7 >> 2] | 0) + 1 | 0;
  $217 = 32 - (Math_clz32($215 | 0) | 0) | 0;
  $218 = $217 + -5 | 0;
  _ec_enc_uint($$01065, $218, 6);
  _ec_enc_bits($$01065, $215 - (16 << $218) | 0, $217 + -1 | 0);
  _ec_enc_bits($$01065, HEAP32[$15 >> 2] | 0, 3);
  _ec_enc_icdf($$01065, $188, 39814, 2);
 }
 $223 = $0 + 24 | 0;
 if ((HEAP32[$223 >> 2] | 0) > 0) if (!(HEAP32[$168 >> 2] | 0)) {
  if ($31 & ($$21111 | 0) < 15) $233 = (HEAP32[$0 + 184 >> 2] | 0) != 2; else $233 = 0;
  $$01095 = _transient_analysis($123, $120, $17, $12, $11, $233 & 1, $14) | 0;
 } else $$01095 = 0; else $$01095 = 0;
 $235 = ($$010981365 | 0) != 0;
 if ($235) {
  $238 = ((_ec_tell(HEAP32[$$01065 + 20 >> 2] | 0, HEAP32[$$01065 + 28 >> 2] | 0) | 0) + 3 | 0) > ($$11117 | 0);
  $239 = ($$01095 | 0) == 0;
  $spec$select1147 = $239 ? 0 : $46;
  if ($238) label = 49; else {
   $$alloca_mul17 = (Math_imul($36, $17) | 0) << 2;
   $245 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul17 | 0) + 15 & -16) | 0;
   $246 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($52 << 2) | 0) + 15 & -16) | 0;
   $247 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($52 << 2) | 0) + 15 & -16) | 0;
   if ($239) {
    $$011221189$ph = 0;
    $$ph1193 = $247;
    $$ph1194 = $246;
    $$ph1195 = $245;
    label = 51;
   } else {
    $252 = Math_imul($22, $19) | 0;
    $253 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($252 << 2) | 0) + 15 & -16) | 0;
    if ((HEAP32[$223 >> 2] | 0) > 7) {
     _compute_mdcts($20, 0, $123, $245, $19, $17, $$010981365, HEAP32[$34 >> 2] | 0);
     _compute_band_energies($20, $245, $246, $spec$select1141, $19, $$010981365);
     _amp2Log2($20, $spec$select1141, $30, $246, $253, $19);
     if (($252 | 0) > 0) {
      $257 = +($$010981365 | 0) * .5;
      $$010661362 = 0;
      do {
       $258 = $253 + ($$010661362 << 2) | 0;
       HEAPF32[$258 >> 2] = $257 + +HEAPF32[$258 >> 2];
       $$010661362 = $$010661362 + 1 | 0;
      } while (($$010661362 | 0) != ($252 | 0));
      $$0108111911197 = $spec$select1147;
      $$0112211891199 = 0;
      $$1109611901198 = $$01095;
      $264 = $245;
      $272 = $246;
      $284 = $247;
      $285 = $252;
      $402 = 1;
      $438 = $253;
      $835 = 1;
     } else {
      $$0108111911197 = $46;
      $$0112211891199 = 0;
      $$1109611901198 = $$01095;
      $264 = $245;
      $272 = $246;
      $284 = $247;
      $285 = $252;
      $402 = 1;
      $438 = $253;
      $835 = 1;
     }
    } else {
     $$0108111911197 = $46;
     $$0112211891199 = 0;
     $$1109611901198 = $$01095;
     $264 = $245;
     $272 = $246;
     $284 = $247;
     $285 = $252;
     $402 = 1;
     $438 = $253;
     $835 = 0;
    }
   }
  }
 } else label = 49;
 if ((label | 0) == 49) {
  $$alloca_mul11 = (Math_imul($36, $17) | 0) << 2;
  $241 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $$alloca_mul11 | 0) + 15 & -16) | 0;
  $242 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($52 << 2) | 0) + 15 & -16) | 0;
  $243 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($52 << 2) | 0) + 15 & -16) | 0;
  $$011221189$ph = 1;
  $$ph1193 = $243;
  $$ph1194 = $242;
  $$ph1195 = $241;
  label = 51;
 }
 if ((label | 0) == 51) {
  $248 = Math_imul($22, $19) | 0;
  $249 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($248 << 2) | 0) + 15 & -16) | 0;
  $$0108111911197 = 0;
  $$0112211891199 = $$011221189$ph;
  $$1109611901198 = 0;
  $264 = $$ph1195;
  $272 = $$ph1194;
  $284 = $$ph1193;
  $285 = $248;
  $402 = 0;
  $438 = $249;
  $835 = 0;
 }
 $263 = $0 + 72 | 0;
 _compute_mdcts($20, $$0108111911197, $123, $264, $19, $17, $$010981365, HEAP32[$34 >> 2] | 0);
 $265 = +HEAPF32[$264 >> 2];
 if ($265 != $265 | 0.0 != 0.0) _celt_fatal(39817, 39794, 1729);
 if (($19 | 0) == 1) if (($17 | 0) == 2) {
  HEAP32[$11 >> 2] = 0;
  $or$cond161202 = 1;
 } else $or$cond161202 = 0; else {
  $269 = +HEAPF32[$264 + ($36 << 2) >> 2];
  if ($269 != $269 | 0.0 != 0.0) _celt_fatal(39817, 39794, 1729); else $or$cond161202 = 0;
 }
 _compute_band_energies($20, $264, $272, $spec$select1141, $19, $$010981365);
 if ((HEAP32[$168 >> 2] | 0) != 0 & ($30 | 0) > 2) {
  $$110671359 = 2;
  do {
   $276 = $272 + ($$110671359 << 2) | 0;
   $277 = +HEAPF32[$276 >> 2];
   $279 = +HEAPF32[$272 >> 2] * 9.999999747378752e-05;
   $$1148 = $277 < $279 ? $277 : $279;
   HEAPF32[$276 >> 2] = $$1148 > 1.0000000036274937e-15 ? $$1148 : 1.0000000036274937e-15;
   $$110671359 = $$110671359 + 1 | 0;
  } while (($$110671359 | 0) != ($30 | 0));
 }
 _amp2Log2($20, $spec$select1141, $30, $272, $284, $19);
 $286 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($285 << 2) | 0) + 15 & -16) | 0;
 $287 = $30 << 2;
 _memset($286 | 0, 0, $287 | 0) | 0;
 if ($31) {
  $$01119$ph = 0.0;
  $$01121$ph = 0.0;
  label = 92;
 } else {
  $289 = HEAP32[$0 + 236 >> 2] | 0;
  if (!$289) {
   $$01119$ph = 0.0;
   $$01121$ph = 0.0;
   label = 92;
  } else {
   $291 = HEAP32[$168 >> 2] | 0;
   if (!$291) {
    $294 = HEAP32[$0 + 92 >> 2] | 0;
    $spec$select1149 = ($294 | 0) > 2 ? $294 : 2;
    if (!(($19 | 0) > 0 & ($spec$select1149 | 0) > 0)) _celt_fatal(39890, 39794, 1770);
    $$pre1405$pre = HEAP16[$26 >> 1] | 0;
    $$010841351$us = 0;
    $$010861350$us = 0.0;
    $$010891349$us = 0.0;
    $$110731352$us = 0;
    while (1) {
     $298 = Math_imul($$110731352$us, $22) | 0;
     $$110851341$us = $$010841351$us;
     $$110871340$us = $$010861350$us;
     $$110901339$us = $$010891349$us;
     $$210681342$us = 0;
     $313 = $$pre1405$pre;
     do {
      $301 = +HEAPF32[$289 + ($$210681342$us + $298 << 2) >> 2];
      $302 = $301 < .25;
      $304 = !(($302 ? $301 : .25) > -2.0);
      $305 = $304 | $302 ^ 1 ? ($304 ? -2.0 : .25) : $301;
      $$01083$us = $305 > 0.0 ? $305 * .5 : $305;
      $$210681342$us$looptemp = $$210681342$us;
      $$210681342$us = $$210681342$us + 1 | 0;
      $313$looptemp = $313;
      $313 = HEAP16[$26 + ($$210681342$us << 1) >> 1] | 0;
      $314 = ($313 << 16 >> 16) - ($313$looptemp << 16 >> 16) | 0;
      $$110901339$us = $$110901339$us + $$01083$us * +($314 | 0);
      $$110851341$us = $314 + $$110851341$us | 0;
      $$110871340$us = $$110871340$us + $$01083$us * +(($$210681342$us$looptemp << 1 | 1) - $spec$select1149 | 0);
     } while ($$210681342$us >>> 0 < $spec$select1149 >>> 0);
     $$110731352$us = $$110731352$us + 1 | 0;
     if (($$110731352$us | 0) == ($19 | 0)) break; else {
      $$010841351$us = $$110851341$us;
      $$010861350$us = $$110871340$us;
      $$010891349$us = $$110901339$us;
     }
    }
    if (($$110851341$us | 0) <= 0) _celt_fatal(39890, 39794, 1770);
    $328 = +($$110851341$us | 0);
    $337 = $$110871340$us * 6.0 / +(Math_imul(Math_imul(Math_imul($spec$select1149, $19) | 0, $spec$select1149 + -1 | 0) | 0, $spec$select1149 + 1 | 0) | 0) * .5;
    $339 = $337 < .03099999949336052 ? $337 : .03099999949336052;
    $342 = (HEAP16[$26 + ($spec$select1149 << 1) >> 1] | 0) / 2 | 0;
    $$01094 = 0;
    while (1) {
     $343 = $$01094 + 1 | 0;
     if ((HEAP16[$26 + ($343 << 1) >> 1] | 0) < $342 << 16 >> 16) $$01094 = $343; else break;
    }
    $349 = $$110901339$us / $328 + .20000000298023224;
    $350 = $339 > -.03099999949336052 ? $339 : -.03099999949336052;
    if (($19 | 0) == 2) {
     $$010921333$us = 0;
     $$310691334$us = 0;
     while (1) {
      $357 = +HEAPF32[$289 + ($$310691334$us << 2) >> 2];
      $360 = +HEAPF32[$289 + ($$310691334$us + $22 << 2) >> 2];
      $$1150$us = $357 > $360 ? $357 : $360;
      $364 = ($$1150$us < 0.0 ? $$1150$us : 0.0) - ($349 + $350 * +($$310691334$us - $$01094 | 0));
      if ($364 > .25) {
       HEAPF32[$286 + ($$310691334$us << 2) >> 2] = $364 + -.25;
       $$11093$us = $$010921333$us + 1 | 0;
      } else $$11093$us = $$010921333$us;
      $$310691334$us = $$310691334$us + 1 | 0;
      if ($$310691334$us >>> 0 >= $spec$select1149 >>> 0) {
       $$01092$lcssa = $$11093$us;
       break;
      } else $$010921333$us = $$11093$us;
     }
    } else {
     $$010921333 = 0;
     $$310691334 = 0;
     while (1) {
      $376 = +HEAPF32[$289 + ($$310691334 << 2) >> 2];
      $379 = ($376 < 0.0 ? $376 : 0.0) - ($349 + $350 * +($$310691334 - $$01094 | 0));
      if ($379 > .25) {
       HEAPF32[$286 + ($$310691334 << 2) >> 2] = $379 + -.25;
       $$11093 = $$010921333 + 1 | 0;
      } else $$11093 = $$010921333;
      $$310691334 = $$310691334 + 1 | 0;
      if ($$310691334 >>> 0 >= $spec$select1149 >>> 0) {
       $$01092$lcssa = $$11093;
       break;
      } else $$010921333 = $$11093;
     }
    }
    do if (($$01092$lcssa | 0) > 2) {
     $387 = $349 + .25;
     if ($387 > 0.0) {
      _memset($286 | 0, 0, $spec$select1149 << 2 | 0) | 0;
      $$21088 = 0.0;
      $$21091 = 0.0;
      break;
     }
     $$410701330 = 0;
     do {
      $390 = $286 + ($$410701330 << 2) | 0;
      $392 = +HEAPF32[$390 >> 2] + -.25;
      HEAPF32[$390 >> 2] = $392 < 0.0 ? 0.0 : $392;
      $$410701330 = $$410701330 + 1 | 0;
     } while ($$410701330 >>> 0 < $spec$select1149 >>> 0);
     $$21088 = $350;
     $$21091 = $387;
    } else {
     $$21088 = $350;
     $$21091 = $349;
    } while (0);
    $$01119$ph = $$21088 * 64.0;
    $$01121$ph = $$21091 + .20000000298023224;
    label = 92;
   } else {
    $$011191205 = 0.0;
    $$01120 = 0.0;
    $$011211204 = 0.0;
    $446 = $291;
   }
  }
 }
 if ((label | 0) == 92) {
  $$pr = HEAP32[$168 >> 2] | 0;
  if (!$$pr) {
   $403 = $402 ? +($$010981365 | 0) * .5 : 0.0;
   if (($30 | 0) > ($28 | 0)) if (($19 | 0) == 2) {
    $$010771324$us = 0.0;
    $$010781323$us = -10.0;
    $$510711325$us = $28;
    while (1) {
     $406 = $$010781323$us + -1.0;
     $409 = +HEAPF32[$284 + ($$510711325$us << 2) >> 2] - $403;
     $$1151$us = $406 > $409 ? $406 : $409;
     $414 = +HEAPF32[$284 + ($$510711325$us + $22 << 2) >> 2] - $403;
     $$010781323$us = $$1151$us > $414 ? $$1151$us : $414;
     $416 = $$010771324$us + $$010781323$us;
     $$510711325$us = $$510711325$us + 1 | 0;
     if (($$510711325$us | 0) == ($30 | 0)) {
      $$01077$lcssa = $416;
      break;
     } else $$010771324$us = $416;
    }
   } else {
    $$010771324 = 0.0;
    $$010781323 = -10.0;
    $$510711325 = $28;
    while (1) {
     $418 = $$010781323 + -1.0;
     $421 = +HEAPF32[$284 + ($$510711325 << 2) >> 2] - $403;
     $$010781323 = $418 > $421 ? $418 : $421;
     $423 = $$010771324 + $$010781323;
     $$510711325 = $$510711325 + 1 | 0;
     if (($$510711325 | 0) == ($30 | 0)) {
      $$01077$lcssa = $423;
      break;
     } else $$010771324 = $423;
    }
   } else $$01077$lcssa = 0.0;
   $428 = $0 + 240 | 0;
   $429 = +HEAPF32[$428 >> 2];
   $430 = $$01077$lcssa / +($30 - $28 | 0) - $429;
   $432 = $430 < -1.5 ? -1.5 : $430;
   $434 = $432 > 3.0 ? 3.0 : $432;
   HEAPF32[$428 >> 2] = $429 + $434 * .019999999552965164;
   $$011191205 = $$01119$ph;
   $$01120 = $434;
   $$011211204 = $$01121$ph;
   $446 = 0;
  } else {
   $$011191205 = $$01119$ph;
   $$01120 = 0.0;
   $$011211204 = $$01121$ph;
   $446 = $$pr;
  }
 }
 if (!$835) _memcpy($438 | 0, $284 | 0, $285 << 2 | 0) | 0;
 do if ($235) {
  $$01065$idx1175 = $$01065 + 20 | 0;
  $$01065$idx1176 = $$01065 + 28 | 0;
  $440 = (_ec_tell(HEAP32[$$01065$idx1175 >> 2] | 0, HEAP32[$$01065$idx1176 >> 2] | 0) | 0) + 3 | 0;
  do if (($$1109611901198 | 0) != 0 | ($440 | 0) > ($$11117 | 0)) {
   $$110821211 = $$0108111911197;
   $$210971208 = $$1109611901198;
   $$pre$phi48Z2D = $440;
  } else {
   if (!(($446 | $28 | 0) == 0 & (HEAP32[$223 >> 2] | 0) > 4)) {
    $$110821211 = $$0108111911197;
    $$210971208 = 0;
    $$pre$phi48Z2D = $440;
    break;
   }
   if (!(_patch_transient_decision($284, $51, $22, $28, $30, $19) | 0)) {
    $$110821211 = $$0108111911197;
    $$210971208 = 0;
    $$pre$phi48Z2D = $440;
    break;
   }
   _compute_mdcts($20, $46, $123, $264, $19, $17, $$010981365, HEAP32[$34 >> 2] | 0);
   _compute_band_energies($20, $264, $272, $spec$select1141, $19, $$010981365);
   _amp2Log2($20, $spec$select1141, $30, $272, $284, $19);
   if (($285 | 0) > 0) {
    $453 = +($$010981365 | 0) * .5;
    $$61319 = 0;
    do {
     $454 = $438 + ($$61319 << 2) | 0;
     HEAPF32[$454 >> 2] = $453 + +HEAPF32[$454 >> 2];
     $$61319 = $$61319 + 1 | 0;
    } while (($$61319 | 0) != ($285 | 0));
   }
   HEAPF32[$12 >> 2] = .20000000298023224;
   $$110821211 = $46;
   $$210971208 = 1;
   $$pre$phi48Z2D = (_ec_tell(HEAP32[$$01065$idx1175 >> 2] | 0, HEAP32[$$01065$idx1176 >> 2] | 0) | 0) + 3 | 0;
  } while (0);
  if (($$pre$phi48Z2D | 0) > ($$11117 | 0)) {
   $$110821210 = $$110821211;
   $$210971209 = $$210971208;
   break;
  }
  _ec_enc_bit_logp($$01065, $$210971208, 3);
  $$110821210 = $$110821211;
  $$210971209 = $$210971208;
 } else {
  $$110821210 = $$0108111911197;
  $$210971209 = $$1109611901198;
 } while (0);
 $$alloca_mul29 = (Math_imul($36, $19) | 0) << 2;
 $460 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul29 | 0) + 15 & -16) | 0;
 _normalise_bands($20, $264, $460, $272, $spec$select1141, $19, $46);
 do if ($31 | ($$21111 | 0) < ($19 * 15 | 0)) $836 = 0; else {
  if ((HEAP32[$223 >> 2] | 0) <= 1) {
   $836 = 0;
   break;
  }
  $836 = (HEAP32[$168 >> 2] | 0) == 0;
 } while (0);
 $467 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $468 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $469 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $474 = $0 + 52 | 0;
 $477 = +_dynalloc_analysis($284, $438, $22, $28, $30, $19, $467, HEAP32[$138 >> 2] | 0, HEAP32[$20 + 56 >> 2] | 0, $$210971209, HEAP32[$67 >> 2] | 0, HEAP32[$474 >> 2] | 0, $26, $$010981365, $$21111, $13, HEAP32[$168 >> 2] | 0, $286, $189, $468, $469);
 $478 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 L173 : do if ($836) {
  $479 = 20480 / ($$21111 | 0) | 0;
  $484 = _tf_analysis($20, $spec$select1141, $$210971209, $478, ($479 | 0) < 78 ? 80 : $479 + 2 | 0, $460, $36, $$010981365, +HEAPF32[$12 >> 2], HEAP32[$11 >> 2] | 0, $468) | 0;
  if (!$119) {
   $$01099 = $484;
   break;
  }
  $486 = $478 + ($spec$select1141 + -1 << 2) | 0;
  $$71307 = $118;
  do {
   HEAP32[$478 + ($$71307 << 2) >> 2] = HEAP32[$486 >> 2];
   $$71307 = $$71307 + 1 | 0;
  } while (($$71307 | 0) != ($30 | 0));
  $$01099 = $484;
 } else {
  if ($31 & (HEAP32[$14 >> 2] | 0) != 0) {
   if (($30 | 0) <= 0) {
    $$01099 = 0;
    break;
   }
   $$81310 = 0;
   while (1) {
    HEAP32[$478 + ($$81310 << 2) >> 2] = 1;
    $$81310 = $$81310 + 1 | 0;
    if (($$81310 | 0) == ($30 | 0)) {
     $$01099 = 0;
     break L173;
    }
   }
  }
  do if ($31 & ($$21111 | 0) < 15) {
   if ((HEAP32[$0 + 184 >> 2] | 0) == 2) break;
   if (($30 | 0) <= 0) {
    $$01099 = $$210971209;
    break L173;
   }
   _memset($478 | 0, 0, $287 | 0) | 0;
   $$01099 = $$210971209;
   break L173;
  } while (0);
  if (($30 | 0) <= 0) {
   $$01099 = 0;
   break;
  }
  $$101313 = 0;
  do {
   HEAP32[$478 + ($$101313 << 2) >> 2] = $$210971209;
   $$101313 = $$101313 + 1 | 0;
  } while (($$101313 | 0) != ($30 | 0));
  $$01099 = 0;
 } while (0);
 $503 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($285 << 2) | 0) + 15 & -16) | 0;
 $504 = ($30 | 0) > ($28 | 0);
 if ($504) {
  $$21074$us = 0;
  do {
   $505 = Math_imul($$21074$us, $22) | 0;
   $$111301$us = $28;
   do {
    $506 = $$111301$us + $505 | 0;
    $507 = $284 + ($506 << 2) | 0;
    $508 = +HEAPF32[$507 >> 2];
    if (+Math_abs(+($508 - +HEAPF32[$51 + ($506 << 2) >> 2])) < 2.0) HEAPF32[$507 >> 2] = $508 - +HEAPF32[$55 + ($506 << 2) >> 2] * .25;
    $$111301$us = $$111301$us + 1 | 0;
   } while (($$111301$us | 0) != ($30 | 0));
   $$21074$us = $$21074$us + 1 | 0;
  } while (($$21074$us | 0) < ($19 | 0));
 }
 _quant_coarse_energy($20, $28, $30, $spec$select1141, $284, $51, $$11117, $503, $$01065, $19, $$010981365, $$21103, HEAP32[$0 + 12 >> 2] | 0, $0 + 84 | 0, (HEAP32[$223 >> 2] | 0) > 3 & 1, HEAP32[$0 + 56 >> 2] | 0, HEAP32[$168 >> 2] | 0);
 _tf_encode($28, $30, $$210971209, $478, $$010981365, $$01099, $$01065);
 $$01065$idx1171 = $$01065 + 20 | 0;
 $$01065$idx1172 = $$01065 + 28 | 0;
 if (((_ec_tell(HEAP32[$$01065$idx1171 >> 2] | 0, HEAP32[$$01065$idx1172 >> 2] | 0) | 0) + 4 | 0) <= ($$11117 | 0)) {
  L207 : do if (!(HEAP32[$168 >> 2] | 0)) {
   if ($31) {
    if (!(HEAP32[$223 >> 2] | 0)) {
     HEAP32[$0 + 80 >> 2] = 0;
     $553 = 0;
     break;
    }
    $540 = $0 + 80 | 0;
    if (!$$210971209) {
     HEAP32[$540 >> 2] = 3;
     $553 = 3;
     break;
    } else {
     HEAP32[$540 >> 2] = 2;
     $553 = 2;
     break;
    }
   }
   $542 = HEAP32[$223 >> 2] | 0;
   do if (!$$110821210) {
    if (($$21103 | 0) < ($19 * 10 | 0) | ($542 | 0) < 3) break;
    $549 = $0 + 80 | 0;
    $552 = _spreading_decision($20, $460, $0 + 88 | 0, HEAP32[$549 >> 2] | 0, $0 + 96 | 0, $187, ($211 ^ 1) & 1, $spec$select1141, $19, $46, $469) | 0;
    HEAP32[$549 >> 2] = $552;
    $553 = $552;
    break L207;
   } while (0);
   $547 = $0 + 80 | 0;
   if (!$542) {
    HEAP32[$547 >> 2] = 0;
    $553 = 0;
    break;
   } else {
    HEAP32[$547 >> 2] = 2;
    $553 = 2;
    break;
   }
  } else {
   HEAP32[$187 >> 2] = 0;
   HEAP32[$0 + 80 >> 2] = 2;
   $553 = 2;
  } while (0);
  _ec_enc_icdf($$01065, $553, 39916, 5);
 }
 if (HEAP32[$168 >> 2] | 0) HEAP32[$467 >> 2] = ($$21111 | 0) > 26 ? 8 : ($$21111 | 0) / 3 | 0;
 $559 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 _init_caps($20, $559, $$010981365, $19);
 $560 = $$11117 << 3;
 $$01065$idx$val3 = HEAP32[$$01065$idx1171 >> 2] | 0;
 $$01065$idx4$val = HEAP32[$$01065$idx1172 >> 2] | 0;
 $561 = _ec_tell_frac($$01065$idx$val3, $$01065$idx4$val) | 0;
 if ($504) {
  $$01065$idx10$val45 = $$01065$idx4$val;
  $$01065$idx9$val37 = $$01065$idx$val3;
  $$011131294 = 6;
  $$011251293 = 0;
  $$121295 = $28;
  $$211291292 = $561;
  while (1) {
   $$121295$looptemp = $$121295;
   $$121295 = $$121295 + 1 | 0;
   $571 = (Math_imul((HEAP16[$26 + ($$121295 << 1) >> 1] | 0) - (HEAP16[$26 + ($$121295$looptemp << 1) >> 1] | 0) | 0, $19) | 0) << $$010981365;
   $572 = $571 << 3;
   $574 = ($571 | 0) > 48 ? $571 : 48;
   $$1156 = ($572 | 0) < ($574 | 0) ? $572 : $574;
   $576 = $467 + ($$121295$looptemp << 2) | 0;
   do if ((($$011131294 << 3) + $$211291292 | 0) < ($560 - $$011251293 | 0)) {
    $582 = HEAP32[$559 + ($$121295$looptemp << 2) >> 2] | 0;
    $$010621276 = 0;
    $$010631275 = 0;
    $$010641274 = $$011131294;
    $$01065$idx10$val44 = $$01065$idx10$val45;
    $$01065$idx9$val36 = $$01065$idx9$val37;
    $$111261273 = $$011251293;
    $$311301272 = $$211291292;
    while (1) {
     if (($$010631275 | 0) >= ($582 | 0)) {
      $$01065$idx10$val43 = $$01065$idx10$val44;
      $$01065$idx9$val35 = $$01065$idx9$val36;
      $$41131 = $$311301272;
      label = 163;
      break;
     }
     $585 = ($$010621276 | 0) < (HEAP32[$576 >> 2] | 0);
     _ec_enc_bit_logp($$01065, $585 & 1, $$010641274);
     $$01065$idx9$val36 = HEAP32[$$01065$idx1171 >> 2] | 0;
     $$01065$idx10$val44 = HEAP32[$$01065$idx1172 >> 2] | 0;
     $$311301272 = _ec_tell_frac($$01065$idx9$val36, $$01065$idx10$val44) | 0;
     if (!$585) {
      $$01065$idx10$val43 = $$01065$idx10$val44;
      $$01065$idx9$val35 = $$01065$idx9$val36;
      $$41131 = $$311301272;
      label = 163;
      break;
     }
     $588 = $$010631275 + $$1156 | 0;
     $589 = $$111261273 + $$1156 | 0;
     if (($$311301272 + 8 | 0) >= ($560 - $589 | 0)) {
      label = 162;
      break;
     } else {
      $$010621276 = $$010621276 + 1 | 0;
      $$010631275 = $588;
      $$010641274 = 1;
      $$111261273 = $589;
     }
    }
    if ((label | 0) == 162) {
     label = 0;
     $594 = $$011131294 + -1 | 0;
     $$01063$lcssa1417 = $588;
     $$01065$idx10$val41 = $$01065$idx10$val44;
     $$01065$idx9$val33 = $$01065$idx9$val36;
     $$11126$lcssa1415 = $589;
     $$411311419 = $$311301272;
     $837 = ($594 | 0) > 2 ? $594 : 2;
     break;
    } else if ((label | 0) == 163) {
     label = 0;
     $598 = $$011131294 + -1 | 0;
     if (!$$010621276) {
      $$01063$lcssa1418 = $$010631275;
      $$01065$idx10$val42 = $$01065$idx10$val43;
      $$01065$idx9$val34 = $$01065$idx9$val35;
      $$11126$lcssa1416 = $$111261273;
      $$411311420 = $$41131;
      label = 164;
      break;
     } else {
      $$01063$lcssa1417 = $$010631275;
      $$01065$idx10$val41 = $$01065$idx10$val43;
      $$01065$idx9$val33 = $$01065$idx9$val35;
      $$11126$lcssa1415 = $$111261273;
      $$411311419 = $$41131;
      $837 = ($598 | 0) > 2 ? $598 : 2;
      break;
     }
    }
   } else {
    $$01063$lcssa1418 = 0;
    $$01065$idx10$val42 = $$01065$idx10$val45;
    $$01065$idx9$val34 = $$01065$idx9$val37;
    $$11126$lcssa1416 = $$011251293;
    $$411311420 = $$211291292;
    label = 164;
   } while (0);
   if ((label | 0) == 164) {
    label = 0;
    $$01063$lcssa1417 = $$01063$lcssa1418;
    $$01065$idx10$val41 = $$01065$idx10$val42;
    $$01065$idx9$val33 = $$01065$idx9$val34;
    $$11126$lcssa1415 = $$11126$lcssa1416;
    $$411311419 = $$411311420;
    $837 = $$011131294;
   }
   HEAP32[$576 >> 2] = $$01063$lcssa1417;
   if (($$121295 | 0) == ($30 | 0)) {
    $$01065$idx10$val40 = $$01065$idx10$val41;
    $$01065$idx9$val32 = $$01065$idx9$val33;
    $$01125$lcssa = $$11126$lcssa1415;
    $$21129$lcssa = $$411311419;
    break;
   } else {
    $$01065$idx10$val45 = $$01065$idx10$val41;
    $$01065$idx9$val37 = $$01065$idx9$val33;
    $$011131294 = $837;
    $$011251293 = $$11126$lcssa1415;
    $$211291292 = $$411311419;
   }
  }
 } else {
  $$01065$idx10$val40 = $$01065$idx4$val;
  $$01065$idx9$val32 = $$01065$idx$val3;
  $$01125$lcssa = 0;
  $$21129$lcssa = $561;
 }
 $601 = ($19 | 0) == 2;
 if ($601) {
  if ($$010981365 | 0) HEAP32[$9 >> 2] = _stereo_analysis(HEAP32[$25 >> 2] | 0, $460, $$010981365, $36) | 0;
  $606 = $0 + 232 | 0;
  $608 = _hysteresis_decision(+(($spec$select1218 | 0) / 1e3 | 0 | 0), HEAP32[$606 >> 2] | 0) | 0;
  $$1157 = ($28 | 0) > ($608 | 0) ? $28 : $608;
  HEAP32[$606 >> 2] = ($30 | 0) < ($$1157 | 0) ? $30 : $$1157;
 }
 if (($$21129$lcssa + 48 | 0) > ($560 - $$01125$lcssa | 0)) {
  $$01065$idx10$val39 = $$01065$idx10$val40;
  $$01065$idx9$val31 = $$01065$idx9$val32;
  $$11108 = 5;
  $$51132 = $$21129$lcssa;
 } else {
  do if (($28 | 0) > 0) label = 173; else {
   if (HEAP32[$168 >> 2] | 0) {
    label = 173;
    break;
   }
   $$01107 = _alloc_trim_analysis($20, $460, $284, $30, $$010981365, $19, $36, $189, $0 + 228 | 0, +HEAPF32[$12 >> 2], HEAP32[$0 + 232 >> 2] | 0, $$011191205, $spec$select1218) | 0;
  } while (0);
  if ((label | 0) == 173) {
   HEAPF32[$0 + 228 >> 2] = 0.0;
   $$01107 = 5;
  }
  _ec_enc_icdf($$01065, $$01107, 39920, 7);
  $$01065$idx7$val = HEAP32[$$01065$idx1171 >> 2] | 0;
  $$01065$idx8$val = HEAP32[$$01065$idx1172 >> 2] | 0;
  $$01065$idx10$val39 = $$01065$idx8$val;
  $$01065$idx9$val31 = $$01065$idx7$val;
  $$11108 = $$01107;
  $$51132 = _ec_tell_frac($$01065$idx7$val, $$01065$idx8$val) | 0;
 }
 if ($102) {
  $625 = (HEAP32[$37 >> 2] | 0) - $$010981365 | 0;
  $626 = 1275 >>> $89;
  $$4$ = ($$4 | 0) < ($626 | 0) ? $$4 : $626;
  if ($31) {
   $630 = (Math_imul($19, -72) | 0) + -32 + $$01115 | 0;
   $$01052 = ($630 | 0) > 0 ? $630 : 0;
  } else $$01052 = $$01115 - ($92 << 3) | 0;
  $632 = HEAP32[$474 >> 2] | 0;
  $633 = ($632 | 0) == 0;
  if ($633) $$11053 = $$01052; else $$11053 = (HEAP32[$0 + 216 >> 2] >> $625) + $$01052 | 0;
  do if ($31) {
   $653 = HEAP32[$0 + 188 >> 2] | 0;
   $659 = +HEAPF32[$12 >> 2];
   $663 = (($653 | 0) < 100 ? 96 >>> $89 : 0) + $$11053 + (($653 | 0) > 100 ? 0 - (144 >>> $89) | 0 : 0) + ~~(($659 + -.25) * 400.0) | 0;
   if (!($659 > .699999988079071)) {
    $$2 = $663;
    break;
   }
   $$2 = ($663 | 0) > 400 ? $663 : 400;
  } else $$2 = _compute_vbr(HEAP32[$21 >> 2] | 0, HEAP32[$25 >> 2] | 0, $189, $$11053, $$010981365, $spec$select1218, HEAP32[$0 + 92 >> 2] | 0, $19, HEAP32[$0 + 232 >> 2] | 0, $632, +HEAPF32[$0 + 228 >> 2], HEAP32[$13 >> 2] | 0, +HEAPF32[$12 >> 2], $$01135, $477, HEAP32[$168 >> 2] | 0, (HEAP32[$0 + 236 >> 2] | 0) != 0 & 1, $$011211204, $$01120) | 0; while (0);
  $667 = $$2 + $$51132 | 0;
  $671 = ($$01125$lcssa + 63 + $$51132 >> 6) + 2 | 0;
  $674 = $$01133 + 359 + $$01125$lcssa >> 6;
  $spec$select1224 = $31 ? (($671 | 0) > ($674 | 0) ? $671 : $674) : $671;
  $677 = $667 + 32 >> 6;
  $679 = ($spec$select1224 | 0) > ($677 | 0) ? $spec$select1224 : $677;
  $681 = ($$4$ | 0) < ($679 | 0) ? $$4$ : $679;
  $spec$select1161 = $684 ? 2 : $681;
  $685 = $0 + 220 | 0;
  $686 = HEAP32[$685 >> 2] | 0;
  if (($686 | 0) < 970) {
   HEAP32[$685 >> 2] = $686 + 1;
   $$01057 = 1.0 / +($686 + 21 | 0);
  } else $$01057 = 1.0000000474974513e-03;
  $692 = $0 + 208 | 0;
  do if ($633) $$41105 = $spec$select1161; else {
   $695 = ($684 ? 128 : $681 << 6) - $$01115 + (HEAP32[$692 >> 2] | 0) | 0;
   HEAP32[$692 >> 2] = $695;
   $697 = $0 + 216 | 0;
   $700 = $0 + 212 | 0;
   $701 = HEAP32[$700 >> 2] | 0;
   $706 = $701 + ~~($$01057 * +((($684 ? 0 : $667 - $$01115 | 0) << $625) - (HEAP32[$697 >> 2] | 0) - $701 | 0)) | 0;
   HEAP32[$700 >> 2] = $706;
   HEAP32[$697 >> 2] = 0 - $706;
   if (($695 | 0) >= 0) {
    $$41105 = $spec$select1161;
    break;
   }
   HEAP32[$692 >> 2] = 0;
   $$41105 = ($684 ? 0 : ($695 | 0) / -64 | 0) + $spec$select1161 | 0;
  } while (0);
  $713 = ($$4$ | 0) < ($$41105 | 0) ? $$4$ : $$41105;
  _ec_enc_shrink($$01065, $713);
  $$01065$idx10$val = HEAP32[$$01065$idx1172 >> 2] | 0;
  $$01065$idx9$val = HEAP32[$$01065$idx1171 >> 2] | 0;
  $$5 = $713;
 } else {
  $$01065$idx10$val = $$01065$idx10$val39;
  $$01065$idx9$val = $$01065$idx9$val31;
  $$5 = $$4;
 }
 $714 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $715 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $716 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $717 = $$5 << 3;
 $718 = $$5 << 6;
 $721 = $718 - (_ec_tell_frac($$01065$idx9$val, $$01065$idx10$val) | 0) + -1 | 0;
 $722 = ($$210971209 | 0) != 0;
 $spec$select1231 = $$010981365 >>> 0 > 1 & $722 & ($721 | 0) >= (($$010981365 << 3) + 16 | 0);
 $spec$select1232 = $spec$select1231 ? 8 : 0;
 $727 = $721 - $spec$select1232 | 0;
 if (!(HEAP32[$189 >> 2] | 0)) $$01123 = $30 + -1 | 0; else {
  do if (($spec$select1218 | 0) < ($19 * 32e3 | 0)) $$0 = 13; else {
   if (($spec$select1218 | 0) < ($19 * 48e3 | 0)) {
    $$0 = 16;
    break;
   }
   $$0 = ($spec$select1218 | 0) < ($19 * 6e4 | 0) ? 18 : ($spec$select1218 | 0) < ($19 * 8e4 | 0) ? 19 : 20;
  } while (0);
  $740 = HEAP32[$0 + 152 >> 2] | 0;
  $$01123 = ($740 | 0) > ($$0 | 0) ? $740 : $$0;
 }
 $744 = $0 + 232 | 0;
 $745 = $0 + 92 | 0;
 $747 = _clt_compute_allocation($20, $28, $30, $467, $559, $$11108, $744, $9, $727, $10, $715, $714, $716, $19, $$010981365, $$01065, 1, HEAP32[$745 >> 2] | 0, (HEAP32[$168 >> 2] | 0) == 0 ? $$01123 : 1) | 0;
 $748 = HEAP32[$745 >> 2] | 0;
 if (!$748) $storemerge = $747; else {
  $750 = $748 + 1 | 0;
  $751 = $748 + -1 | 0;
  $$1166 = ($751 | 0) > ($747 | 0) ? $751 : $747;
  $storemerge = ($750 | 0) < ($$1166 | 0) ? $750 : $$1166;
 }
 HEAP32[$745 >> 2] = $storemerge;
 _quant_fine_energy($20, $28, $30, $51, $503, $714, $$01065, $19);
 $754 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $285 | 0) + 15 & -16) | 0;
 $763 = $0 + 76 | 0;
 _quant_all_bands(1, $20, $28, $30, $460, $601 ? $460 + ($36 << 2) | 0 : 0, $754, $272, $715, $$110821210, HEAP32[$0 + 80 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$744 >> 2] | 0, $478, $718 - $spec$select1232 | 0, HEAP32[$10 >> 2] | 0, $$01065, $$010981365, $747, $763, HEAP32[$223 >> 2] | 0, HEAP32[$263 >> 2] | 0, HEAP32[$0 + 68 >> 2] | 0);
 if ($spec$select1231) _ec_enc_bits($$01065, (HEAP32[$0 + 116 >> 2] | 0) < 2 & 1, 1);
 _quant_energy_finalise($20, $28, $30, $51, $503, $714, $716, $717 - (_ec_tell(HEAP32[$$01065$idx1171 >> 2] | 0, HEAP32[$$01065$idx1172 >> 2] | 0) | 0) | 0, $$01065, $19);
 $774 = $52 << 2;
 _memset($55 | 0, 0, $774 | 0) | 0;
 if ($504) {
  $$31075$us = 0;
  do {
   $775 = Math_imul($$31075$us, $22) | 0;
   $$131266$us = $28;
   do {
    $776 = $$131266$us + $775 | 0;
    $778 = +HEAPF32[$503 + ($776 << 2) >> 2];
    $779 = $778 > .5;
    $781 = ($779 ? .5 : $778) < -.5;
    HEAPF32[$55 + ($776 << 2) >> 2] = $779 | $781 ? ($781 ? -.5 : .5) : $778;
    $$131266$us = $$131266$us + 1 | 0;
   } while (($$131266$us | 0) != ($30 | 0));
   $$31075$us = $$31075$us + 1 | 0;
  } while (($$31075$us | 0) < ($19 | 0));
 }
 if ($684 & ($285 | 0) > 0) {
  $$141263 = 0;
  do {
   HEAPF32[$51 + ($$141263 << 2) >> 2] = -28.0;
   $$141263 = $$141263 + 1 | 0;
  } while (($$141263 | 0) != ($285 | 0));
 }
 HEAP32[$0 + 104 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$0 + 108 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$0 + 112 >> 2] = $188;
 if ($or$cond161202) _memcpy($51 + ($22 << 2) | 0, $51 | 0, $22 << 2 | 0) | 0;
 do if ($722) {
  if (($52 | 0) <= 0) break;
  $$151260 = 0;
  do {
   $798 = $53 + ($$151260 << 2) | 0;
   $799 = +HEAPF32[$798 >> 2];
   $801 = +HEAPF32[$51 + ($$151260 << 2) >> 2];
   HEAPF32[$798 >> 2] = $799 < $801 ? $799 : $801;
   $$151260 = $$151260 + 1 | 0;
  } while (($$151260 | 0) != ($52 | 0));
 } else {
  _memcpy($54 | 0, $53 | 0, $774 | 0) | 0;
  _memcpy($53 | 0, $51 | 0, $774 | 0) | 0;
 } while (0);
 $805 = ($30 | 0) < ($22 | 0);
 do if (($28 | 0) > 0) {
  $$41076$us = 0;
  do {
   $806 = Math_imul($$41076$us, $22) | 0;
   $$161248$us = 0;
   do {
    $814 = $$161248$us + $806 | 0;
    HEAPF32[$51 + ($814 << 2) >> 2] = 0.0;
    HEAPF32[$54 + ($814 << 2) >> 2] = -28.0;
    HEAPF32[$53 + ($814 << 2) >> 2] = -28.0;
    $$161248$us = $$161248$us + 1 | 0;
   } while (($$161248$us | 0) != ($28 | 0));
   if ($805) {
    $$171249$us = $30;
    do {
     $809 = $$171249$us + $806 | 0;
     HEAPF32[$51 + ($809 << 2) >> 2] = 0.0;
     HEAPF32[$54 + ($809 << 2) >> 2] = -28.0;
     HEAPF32[$53 + ($809 << 2) >> 2] = -28.0;
     $$171249$us = $$171249$us + 1 | 0;
    } while (($$171249$us | 0) != ($22 | 0));
   }
   $$41076$us = $$41076$us + 1 | 0;
  } while (($$41076$us | 0) < ($17 | 0));
 } else {
  if (!$805) break;
  $$41076$us1253 = 0;
  do {
   $819 = Math_imul($$41076$us1253, $22) | 0;
   $$171249$us1254 = $30;
   do {
    $820 = $$171249$us1254 + $819 | 0;
    HEAPF32[$51 + ($820 << 2) >> 2] = 0.0;
    HEAPF32[$54 + ($820 << 2) >> 2] = -28.0;
    HEAPF32[$53 + ($820 << 2) >> 2] = -28.0;
    $$171249$us1254 = $$171249$us1254 + 1 | 0;
   } while (($$171249$us1254 | 0) != ($22 | 0));
   $$41076$us1253 = $$41076$us1253 + 1 | 0;
  } while (($$41076$us1253 | 0) < ($17 | 0));
 } while (0);
 $829 = $0 + 116 | 0;
 if (!($$210971209 | $$0112211891199)) $storemerge1136 = 0; else $storemerge1136 = (HEAP32[$829 >> 2] | 0) + 1 | 0;
 HEAP32[$829 >> 2] = $storemerge1136;
 HEAP32[$763 >> 2] = HEAP32[$$01065$idx1172 >> 2];
 _ec_enc_done($$01065);
 $834 = (_ec_get_error(HEAP32[$$01065 + 44 >> 2] | 0) | 0) == 0;
 _llvm_stackrestore($122 | 0);
 $$1 = $834 ? $$5 : -3;
 STACKTOP = sp;
 return $$1 | 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1001 = 0, $1006 = 0, $101 = 0, $1012 = 0, $1015 = 0, $1016 = 0, $102 = 0, $1023 = 0, $1035 = 0, $1040 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $1058 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $340 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $563 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $595 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $609 = 0, $618 = 0, $619 = 0, $62 = 0, $625 = 0, $627 = 0, $631 = 0, $634 = 0, $636 = 0, $64 = 0, $640 = 0, $642 = 0, $647 = 0, $648 = 0, $649 = 0, $655 = 0, $656 = 0, $657 = 0, $661 = 0, $67 = 0, $671 = 0, $673 = 0, $678 = 0, $679 = 0, $680 = 0, $686 = 0, $688 = 0, $69 = 0, $692 = 0, $698 = 0, $7 = 0, $70 = 0, $702 = 0, $708 = 0, $71 = 0, $710 = 0, $716 = 0, $72 = 0, $720 = 0, $721 = 0, $726 = 0, $73 = 0, $732 = 0, $737 = 0, $740 = 0, $741 = 0, $744 = 0, $746 = 0, $748 = 0, $750 = 0, $762 = 0, $767 = 0, $769 = 0, $77 = 0, $772 = 0, $774 = 0, $777 = 0, $780 = 0, $781 = 0, $782 = 0, $784 = 0, $786 = 0, $787 = 0, $789 = 0, $790 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $805 = 0, $810 = 0, $813 = 0, $814 = 0, $820 = 0, $828 = 0, $83 = 0, $834 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $843 = 0, $844 = 0, $850 = 0, $855 = 0, $856 = 0, $859 = 0, $861 = 0, $864 = 0, $869 = 0, $87 = 0, $875 = 0, $877 = 0, $879 = 0, $880 = 0, $887 = 0, $899 = 0, $9 = 0, $904 = 0, $911 = 0, $912 = 0, $913 = 0, $92 = 0, $921 = 0, $925 = 0, $929 = 0, $93 = 0, $931 = 0, $937 = 0, $938 = 0, $940 = 0, $941 = 0, $943 = 0, $945 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $958 = 0, $96 = 0, $960 = 0, $966 = 0, $971 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $987 = 0, $992 = 0, $993 = 0, $996 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $960$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[12440] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 49800 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[12440] = $8 & ~(1 << $14); else {
    if ((HEAP32[12444] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[12442] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 49800 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[12440] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[12444] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[12445] | 0;
     $93 = $37 >>> 3;
     $95 = 49800 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[12440] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[12444] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[12442] = $84;
    HEAP32[12445] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[12441] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[50064 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[12444] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 50064 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[12441] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[12444] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[12444] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[12444] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[12445] | 0;
      $229 = $37 >>> 3;
      $231 = 49800 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[12440] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[12444] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[12442] = $$0191$i;
     HEAP32[12445] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[12441] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[50064 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[50064 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $340 = HEAP32[$$535618$i + 20 >> 2] | 0; else $340 = $336;
     if (!$340) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $340;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[12442] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[12444] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 50064 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[12441] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[12444] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[12444] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[12444] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 49800 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[12440] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[12440] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[12444] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 50064 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($467 & $469)) {
      HEAP32[12441] = $467 | $469;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[12444] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[12444] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[12442] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[12445] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[12445] = $515;
   HEAP32[12442] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[12442] = 0;
   HEAP32[12445] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[12443] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[12443] = $530;
  $531 = HEAP32[12446] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[12446] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[12558] | 0)) {
  HEAP32[12560] = 4096;
  HEAP32[12559] = 4096;
  HEAP32[12561] = -1;
  HEAP32[12562] = -1;
  HEAP32[12563] = 0;
  HEAP32[12551] = 0;
  HEAP32[12558] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[12560] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[12550] | 0;
 if ($550 | 0) {
  $552 = HEAP32[12548] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[12551] & 4)) {
  $559 = HEAP32[12446] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 50208;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) {
     $563 = $$0$i$i + 4 | 0;
     if (($561 + (HEAP32[$563 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    }
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $595 = _sbrk($593 | 0) | 0;
    if (($595 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$563 >> 2] | 0) | 0)) if (($595 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $595;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $595;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[12559] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[12548] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[12550] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $601 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $605 = HEAP32[12560] | 0;
   $609 = $544 - $$2253$ph$i + $605 & 0 - $605;
   if ($609 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($609 | 0) | 0) == (-1 | 0)) {
    _sbrk($601 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $609 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[12551] = HEAP32[12551] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $618 = _sbrk($548 | 0) | 0;
  $619 = _sbrk(0) | 0;
  $625 = $619 - $618 | 0;
  $627 = $625 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($618 | 0) == (-1 | 0) | $627 ^ 1 | $618 >>> 0 < $619 >>> 0 & (($618 | 0) != (-1 | 0) & ($619 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $627 ? $625 : $$4236$i;
   $$748$i = $618;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $631 = (HEAP32[12548] | 0) + $$723947$i | 0;
  HEAP32[12548] = $631;
  if ($631 >>> 0 > (HEAP32[12549] | 0) >>> 0) HEAP32[12549] = $631;
  $634 = HEAP32[12446] | 0;
  L294 : do if (!$634) {
   $636 = HEAP32[12444] | 0;
   if (($636 | 0) == 0 | $$748$i >>> 0 < $636 >>> 0) HEAP32[12444] = $$748$i;
   HEAP32[12552] = $$748$i;
   HEAP32[12553] = $$723947$i;
   HEAP32[12555] = 0;
   HEAP32[12449] = HEAP32[12558];
   HEAP32[12448] = -1;
   HEAP32[12453] = 49800;
   HEAP32[12452] = 49800;
   HEAP32[12455] = 49808;
   HEAP32[12454] = 49808;
   HEAP32[12457] = 49816;
   HEAP32[12456] = 49816;
   HEAP32[12459] = 49824;
   HEAP32[12458] = 49824;
   HEAP32[12461] = 49832;
   HEAP32[12460] = 49832;
   HEAP32[12463] = 49840;
   HEAP32[12462] = 49840;
   HEAP32[12465] = 49848;
   HEAP32[12464] = 49848;
   HEAP32[12467] = 49856;
   HEAP32[12466] = 49856;
   HEAP32[12469] = 49864;
   HEAP32[12468] = 49864;
   HEAP32[12471] = 49872;
   HEAP32[12470] = 49872;
   HEAP32[12473] = 49880;
   HEAP32[12472] = 49880;
   HEAP32[12475] = 49888;
   HEAP32[12474] = 49888;
   HEAP32[12477] = 49896;
   HEAP32[12476] = 49896;
   HEAP32[12479] = 49904;
   HEAP32[12478] = 49904;
   HEAP32[12481] = 49912;
   HEAP32[12480] = 49912;
   HEAP32[12483] = 49920;
   HEAP32[12482] = 49920;
   HEAP32[12485] = 49928;
   HEAP32[12484] = 49928;
   HEAP32[12487] = 49936;
   HEAP32[12486] = 49936;
   HEAP32[12489] = 49944;
   HEAP32[12488] = 49944;
   HEAP32[12491] = 49952;
   HEAP32[12490] = 49952;
   HEAP32[12493] = 49960;
   HEAP32[12492] = 49960;
   HEAP32[12495] = 49968;
   HEAP32[12494] = 49968;
   HEAP32[12497] = 49976;
   HEAP32[12496] = 49976;
   HEAP32[12499] = 49984;
   HEAP32[12498] = 49984;
   HEAP32[12501] = 49992;
   HEAP32[12500] = 49992;
   HEAP32[12503] = 5e4;
   HEAP32[12502] = 5e4;
   HEAP32[12505] = 50008;
   HEAP32[12504] = 50008;
   HEAP32[12507] = 50016;
   HEAP32[12506] = 50016;
   HEAP32[12509] = 50024;
   HEAP32[12508] = 50024;
   HEAP32[12511] = 50032;
   HEAP32[12510] = 50032;
   HEAP32[12513] = 50040;
   HEAP32[12512] = 50040;
   HEAP32[12515] = 50048;
   HEAP32[12514] = 50048;
   $640 = $$723947$i + -40 | 0;
   $642 = $$748$i + 8 | 0;
   $647 = ($642 & 7 | 0) == 0 ? 0 : 0 - $642 & 7;
   $648 = $$748$i + $647 | 0;
   $649 = $640 - $647 | 0;
   HEAP32[12446] = $648;
   HEAP32[12443] = $649;
   HEAP32[$648 + 4 >> 2] = $649 | 1;
   HEAP32[$$748$i + $640 + 4 >> 2] = 40;
   HEAP32[12447] = HEAP32[12562];
  } else {
   $$024372$i = 50208;
   while (1) {
    $655 = HEAP32[$$024372$i >> 2] | 0;
    $656 = $$024372$i + 4 | 0;
    $657 = HEAP32[$656 >> 2] | 0;
    if (($$748$i | 0) == ($655 + $657 | 0)) {
     label = 199;
     break;
    }
    $661 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$661) break; else $$024372$i = $661;
   }
   if ((label | 0) == 199) if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $634 >>> 0 & $655 >>> 0 <= $634 >>> 0) {
    HEAP32[$656 >> 2] = $657 + $$723947$i;
    $671 = (HEAP32[12443] | 0) + $$723947$i | 0;
    $673 = $634 + 8 | 0;
    $678 = ($673 & 7 | 0) == 0 ? 0 : 0 - $673 & 7;
    $679 = $634 + $678 | 0;
    $680 = $671 - $678 | 0;
    HEAP32[12446] = $679;
    HEAP32[12443] = $680;
    HEAP32[$679 + 4 >> 2] = $680 | 1;
    HEAP32[$634 + $671 + 4 >> 2] = 40;
    HEAP32[12447] = HEAP32[12562];
    break;
   }
   $686 = HEAP32[12444] | 0;
   if ($$748$i >>> 0 < $686 >>> 0) {
    HEAP32[12444] = $$748$i;
    $750 = $$748$i;
   } else $750 = $686;
   $688 = $$748$i + $$723947$i | 0;
   $$124471$i = 50208;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($688 | 0)) {
     label = 207;
     break;
    }
    $692 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$692) break; else $$124471$i = $692;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $698 = $$124471$i + 4 | 0;
    HEAP32[$698 >> 2] = (HEAP32[$698 >> 2] | 0) + $$723947$i;
    $702 = $$748$i + 8 | 0;
    $708 = $$748$i + (($702 & 7 | 0) == 0 ? 0 : 0 - $702 & 7) | 0;
    $710 = $688 + 8 | 0;
    $716 = $688 + (($710 & 7 | 0) == 0 ? 0 : 0 - $710 & 7) | 0;
    $720 = $708 + $$0197 | 0;
    $721 = $716 - $708 - $$0197 | 0;
    HEAP32[$708 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($634 | 0) == ($716 | 0)) {
     $726 = (HEAP32[12443] | 0) + $721 | 0;
     HEAP32[12443] = $726;
     HEAP32[12446] = $720;
     HEAP32[$720 + 4 >> 2] = $726 | 1;
    } else {
     if ((HEAP32[12445] | 0) == ($716 | 0)) {
      $732 = (HEAP32[12442] | 0) + $721 | 0;
      HEAP32[12442] = $732;
      HEAP32[12445] = $720;
      HEAP32[$720 + 4 >> 2] = $732 | 1;
      HEAP32[$720 + $732 >> 2] = $732;
      break;
     }
     $737 = HEAP32[$716 + 4 >> 2] | 0;
     if (($737 & 3 | 0) == 1) {
      $740 = $737 & -8;
      $741 = $737 >>> 3;
      L325 : do if ($737 >>> 0 < 256) {
       $744 = HEAP32[$716 + 8 >> 2] | 0;
       $746 = HEAP32[$716 + 12 >> 2] | 0;
       $748 = 49800 + ($741 << 1 << 2) | 0;
       do if (($744 | 0) != ($748 | 0)) {
        if ($750 >>> 0 > $744 >>> 0) _abort();
        if ((HEAP32[$744 + 12 >> 2] | 0) == ($716 | 0)) break;
        _abort();
       } while (0);
       if (($746 | 0) == ($744 | 0)) {
        HEAP32[12440] = HEAP32[12440] & ~(1 << $741);
        break;
       }
       do if (($746 | 0) == ($748 | 0)) $$pre$phi17$i$iZ2D = $746 + 8 | 0; else {
        if ($750 >>> 0 > $746 >>> 0) _abort();
        $762 = $746 + 8 | 0;
        if ((HEAP32[$762 >> 2] | 0) == ($716 | 0)) {
         $$pre$phi17$i$iZ2D = $762;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$744 + 12 >> 2] = $746;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $744;
      } else {
       $767 = HEAP32[$716 + 24 >> 2] | 0;
       $769 = HEAP32[$716 + 12 >> 2] | 0;
       do if (($769 | 0) == ($716 | 0)) {
        $780 = $716 + 16 | 0;
        $781 = $780 + 4 | 0;
        $782 = HEAP32[$781 >> 2] | 0;
        if (!$782) {
         $784 = HEAP32[$780 >> 2] | 0;
         if (!$784) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $784;
          $$1292$i$i$ph = $780;
         }
        } else {
         $$1290$i$i$ph = $782;
         $$1292$i$i$ph = $781;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $786 = $$1290$i$i + 20 | 0;
         $787 = HEAP32[$786 >> 2] | 0;
         if (!$787) {
          $789 = $$1290$i$i + 16 | 0;
          $790 = HEAP32[$789 >> 2] | 0;
          if (!$790) break; else {
           $$1290$i$i$be = $790;
           $$1292$i$i$be = $789;
          }
         } else {
          $$1290$i$i$be = $787;
          $$1292$i$i$be = $786;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($750 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $772 = HEAP32[$716 + 8 >> 2] | 0;
        if ($750 >>> 0 > $772 >>> 0) _abort();
        $774 = $772 + 12 | 0;
        if ((HEAP32[$774 >> 2] | 0) != ($716 | 0)) _abort();
        $777 = $769 + 8 | 0;
        if ((HEAP32[$777 >> 2] | 0) == ($716 | 0)) {
         HEAP32[$774 >> 2] = $769;
         HEAP32[$777 >> 2] = $772;
         $$3$i$i = $769;
         break;
        } else _abort();
       } while (0);
       if (!$767) break;
       $795 = HEAP32[$716 + 28 >> 2] | 0;
       $796 = 50064 + ($795 << 2) | 0;
       do if ((HEAP32[$796 >> 2] | 0) == ($716 | 0)) {
        HEAP32[$796 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[12441] = HEAP32[12441] & ~(1 << $795);
        break L325;
       } else if ((HEAP32[12444] | 0) >>> 0 > $767 >>> 0) _abort(); else {
        $805 = $767 + 16 | 0;
        HEAP32[((HEAP32[$805 >> 2] | 0) == ($716 | 0) ? $805 : $767 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $810 = HEAP32[12444] | 0;
       if ($810 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $767;
       $813 = $716 + 16 | 0;
       $814 = HEAP32[$813 >> 2] | 0;
       do if ($814 | 0) if ($810 >>> 0 > $814 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $814;
        HEAP32[$814 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $820 = HEAP32[$813 + 4 >> 2] | 0;
       if (!$820) break;
       if ((HEAP32[12444] | 0) >>> 0 > $820 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $716 + $740 | 0;
      $$0286$i$i = $740 + $721 | 0;
     } else {
      $$0$i16$i = $716;
      $$0286$i$i = $721;
     }
     $828 = $$0$i16$i + 4 | 0;
     HEAP32[$828 >> 2] = HEAP32[$828 >> 2] & -2;
     HEAP32[$720 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$720 + $$0286$i$i >> 2] = $$0286$i$i;
     $834 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $837 = 49800 + ($834 << 1 << 2) | 0;
      $838 = HEAP32[12440] | 0;
      $839 = 1 << $834;
      do if (!($838 & $839)) {
       HEAP32[12440] = $838 | $839;
       $$0294$i$i = $837;
       $$pre$phi$i18$iZ2D = $837 + 8 | 0;
      } else {
       $843 = $837 + 8 | 0;
       $844 = HEAP32[$843 >> 2] | 0;
       if ((HEAP32[12444] | 0) >>> 0 <= $844 >>> 0) {
        $$0294$i$i = $844;
        $$pre$phi$i18$iZ2D = $843;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $720;
      HEAP32[$$0294$i$i + 12 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $$0294$i$i;
      HEAP32[$720 + 12 >> 2] = $837;
      break;
     }
     $850 = $$0286$i$i >>> 8;
     do if (!$850) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $855 = ($850 + 1048320 | 0) >>> 16 & 8;
      $856 = $850 << $855;
      $859 = ($856 + 520192 | 0) >>> 16 & 4;
      $861 = $856 << $859;
      $864 = ($861 + 245760 | 0) >>> 16 & 2;
      $869 = 14 - ($859 | $855 | $864) + ($861 << $864 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($869 + 7 | 0) & 1 | $869 << 1;
     } while (0);
     $875 = 50064 + ($$0295$i$i << 2) | 0;
     HEAP32[$720 + 28 >> 2] = $$0295$i$i;
     $877 = $720 + 16 | 0;
     HEAP32[$877 + 4 >> 2] = 0;
     HEAP32[$877 >> 2] = 0;
     $879 = HEAP32[12441] | 0;
     $880 = 1 << $$0295$i$i;
     if (!($879 & $880)) {
      HEAP32[12441] = $879 | $880;
      HEAP32[$875 >> 2] = $720;
      HEAP32[$720 + 24 >> 2] = $875;
      HEAP32[$720 + 12 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $720;
      break;
     }
     $887 = HEAP32[$875 >> 2] | 0;
     L410 : do if ((HEAP32[$887 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $887; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $887;
      while (1) {
       $904 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $899 = HEAP32[$904 >> 2] | 0;
       if (!$899) break;
       if ((HEAP32[$899 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $899;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $899;
       }
      }
      if ((HEAP32[12444] | 0) >>> 0 > $904 >>> 0) _abort(); else {
       HEAP32[$904 >> 2] = $720;
       HEAP32[$720 + 24 >> 2] = $$028810$i$i;
       HEAP32[$720 + 12 >> 2] = $720;
       HEAP32[$720 + 8 >> 2] = $720;
       break L317;
      }
     } while (0);
     $911 = $$0288$lcssa$i$i + 8 | 0;
     $912 = HEAP32[$911 >> 2] | 0;
     $913 = HEAP32[12444] | 0;
     if ($913 >>> 0 <= $912 >>> 0 & $913 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$912 + 12 >> 2] = $720;
      HEAP32[$911 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $912;
      HEAP32[$720 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$720 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $708 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 50208;
   while (1) {
    $921 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($921 >>> 0 <= $634 >>> 0) {
     $925 = $921 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($925 >>> 0 > $634 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $929 = $925 + -47 | 0;
   $931 = $929 + 8 | 0;
   $937 = $929 + (($931 & 7 | 0) == 0 ? 0 : 0 - $931 & 7) | 0;
   $938 = $634 + 16 | 0;
   $940 = $937 >>> 0 < $938 >>> 0 ? $634 : $937;
   $941 = $940 + 8 | 0;
   $943 = $$723947$i + -40 | 0;
   $945 = $$748$i + 8 | 0;
   $950 = ($945 & 7 | 0) == 0 ? 0 : 0 - $945 & 7;
   $951 = $$748$i + $950 | 0;
   $952 = $943 - $950 | 0;
   HEAP32[12446] = $951;
   HEAP32[12443] = $952;
   HEAP32[$951 + 4 >> 2] = $952 | 1;
   HEAP32[$$748$i + $943 + 4 >> 2] = 40;
   HEAP32[12447] = HEAP32[12562];
   $958 = $940 + 4 | 0;
   HEAP32[$958 >> 2] = 27;
   HEAP32[$941 >> 2] = HEAP32[12552];
   HEAP32[$941 + 4 >> 2] = HEAP32[12553];
   HEAP32[$941 + 8 >> 2] = HEAP32[12554];
   HEAP32[$941 + 12 >> 2] = HEAP32[12555];
   HEAP32[12552] = $$748$i;
   HEAP32[12553] = $$723947$i;
   HEAP32[12555] = 0;
   HEAP32[12554] = $941;
   $960 = $940 + 24 | 0;
   do {
    $960$looptemp = $960;
    $960 = $960 + 4 | 0;
    HEAP32[$960 >> 2] = 7;
   } while (($960$looptemp + 8 | 0) >>> 0 < $925 >>> 0);
   if (($940 | 0) != ($634 | 0)) {
    $966 = $940 - $634 | 0;
    HEAP32[$958 >> 2] = HEAP32[$958 >> 2] & -2;
    HEAP32[$634 + 4 >> 2] = $966 | 1;
    HEAP32[$940 >> 2] = $966;
    $971 = $966 >>> 3;
    if ($966 >>> 0 < 256) {
     $974 = 49800 + ($971 << 1 << 2) | 0;
     $975 = HEAP32[12440] | 0;
     $976 = 1 << $971;
     if (!($975 & $976)) {
      HEAP32[12440] = $975 | $976;
      $$0211$i$i = $974;
      $$pre$phi$i$iZ2D = $974 + 8 | 0;
     } else {
      $980 = $974 + 8 | 0;
      $981 = HEAP32[$980 >> 2] | 0;
      if ((HEAP32[12444] | 0) >>> 0 > $981 >>> 0) _abort(); else {
       $$0211$i$i = $981;
       $$pre$phi$i$iZ2D = $980;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $634;
     HEAP32[$$0211$i$i + 12 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $$0211$i$i;
     HEAP32[$634 + 12 >> 2] = $974;
     break;
    }
    $987 = $966 >>> 8;
    if (!$987) $$0212$i$i = 0; else if ($966 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $992 = ($987 + 1048320 | 0) >>> 16 & 8;
     $993 = $987 << $992;
     $996 = ($993 + 520192 | 0) >>> 16 & 4;
     $998 = $993 << $996;
     $1001 = ($998 + 245760 | 0) >>> 16 & 2;
     $1006 = 14 - ($996 | $992 | $1001) + ($998 << $1001 >>> 15) | 0;
     $$0212$i$i = $966 >>> ($1006 + 7 | 0) & 1 | $1006 << 1;
    }
    $1012 = 50064 + ($$0212$i$i << 2) | 0;
    HEAP32[$634 + 28 >> 2] = $$0212$i$i;
    HEAP32[$634 + 20 >> 2] = 0;
    HEAP32[$938 >> 2] = 0;
    $1015 = HEAP32[12441] | 0;
    $1016 = 1 << $$0212$i$i;
    if (!($1015 & $1016)) {
     HEAP32[12441] = $1015 | $1016;
     HEAP32[$1012 >> 2] = $634;
     HEAP32[$634 + 24 >> 2] = $1012;
     HEAP32[$634 + 12 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $634;
     break;
    }
    $1023 = HEAP32[$1012 >> 2] | 0;
    L451 : do if ((HEAP32[$1023 + 4 >> 2] & -8 | 0) == ($966 | 0)) $$0207$lcssa$i$i = $1023; else {
     $$02065$i$i = $966 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1023;
     while (1) {
      $1040 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1035 = HEAP32[$1040 >> 2] | 0;
      if (!$1035) break;
      if ((HEAP32[$1035 + 4 >> 2] & -8 | 0) == ($966 | 0)) {
       $$0207$lcssa$i$i = $1035;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1035;
      }
     }
     if ((HEAP32[12444] | 0) >>> 0 > $1040 >>> 0) _abort(); else {
      HEAP32[$1040 >> 2] = $634;
      HEAP32[$634 + 24 >> 2] = $$02074$i$i;
      HEAP32[$634 + 12 >> 2] = $634;
      HEAP32[$634 + 8 >> 2] = $634;
      break L294;
     }
    } while (0);
    $1047 = $$0207$lcssa$i$i + 8 | 0;
    $1048 = HEAP32[$1047 >> 2] | 0;
    $1049 = HEAP32[12444] | 0;
    if ($1049 >>> 0 <= $1048 >>> 0 & $1049 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1048 + 12 >> 2] = $634;
     HEAP32[$1047 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $1048;
     HEAP32[$634 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$634 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1058 = HEAP32[12443] | 0;
  if ($1058 >>> 0 > $$0197 >>> 0) {
   $1060 = $1058 - $$0197 | 0;
   HEAP32[12443] = $1060;
   $1061 = HEAP32[12446] | 0;
   $1062 = $1061 + $$0197 | 0;
   HEAP32[12446] = $1062;
   HEAP32[$1062 + 4 >> 2] = $1060 | 1;
   HEAP32[$1061 + 4 >> 2] = $$0197 | 3;
   $$0 = $1061 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[12580] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _tonality_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$ = 0.0, $$$0719 = 0.0, $$0703 = 0, $$0704 = 0, $$0705841 = 0, $$0715834 = 0.0, $$0717833 = 0.0, $$0718832 = 0.0, $$0719$lcssa = 0.0, $$0719793 = 0.0, $$0720831 = 0.0, $$0723804 = 0.0, $$0725803 = 0, $$0726830 = 0.0, $$0727829 = 0.0, $$0730$lcssa = 0.0, $$0730816 = 0.0, $$0731$lcssa = 0.0, $$0731815 = 0.0, $$0732$lcssa = 0.0, $$0732814 = 0.0, $$0733828 = 0.0, $$0734799 = 0.0, $$0735798 = 0, $$0742797 = 0.0, $$0743805 = 0.0, $$0744796 = 0.0, $$0746795 = 0.0, $$1707835 = 0, $$1716 = 0.0, $$1736 = 0, $$1840 = 0, $$2708813 = 0, $$2737 = 0, $$2748 = 0.0, $$2839 = 0, $$3709812 = 0, $$3738 = 0, $$3738$off = 0, $$4710811 = 0, $$4739 = 0, $$4817 = 0, $$6712800 = 0, $$6806 = 0, $$755 = 0.0, $$756 = 0.0, $$757 = 0.0, $$763 = 0.0, $$766 = 0.0, $$7794 = 0, $$op = 0.0, $$phi$trans$insert887 = 0, $$pre$phi951Z2D = 0, $$pre$phi955Z2D = 0, $$pre$phi957Z2D = 0, $$pre$phi959Z2D = 0, $$pre$phi961Z2D = 0, $$pre$phi963Z2D = 0, $$pre$phi965Z2D = 0, $$pre$phi969Z2D = 0, $$pre900 = 0.0, $$pre902 = 0.0, $$pre904 = 0.0, $$pre906 = 0.0, $$pre908 = 0.0, $$pre910 = 0.0, $$pre912 = 0.0, $$pre914 = 0.0, $$pre916 = 0.0, $$pre919 = 0.0, $$pre921 = 0.0, $$pre923 = 0.0, $$pre925 = 0.0, $$pre927 = 0.0, $$pre929 = 0.0, $$pre931 = 0.0, $$pre933 = 0.0, $$pre935 = 0.0, $$pre937 = 0.0, $$pre939 = 0.0, $$pre941 = 0.0, $10 = 0, $1001 = 0.0, $1006 = 0.0, $1011 = 0.0, $1016 = 0.0, $1017 = 0.0, $1018 = 0.0, $102 = 0.0, $1023 = 0.0, $1028 = 0.0, $1033 = 0.0, $1038 = 0.0, $104 = 0.0, $1043 = 0.0, $1048 = 0.0, $1053 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $112 = 0.0, $113 = 0, $115 = 0.0, $117 = 0.0, $118 = 0.0, $1184 = 0.0, $1188 = 0.0, $1189 = 0, $119 = 0.0, $1191 = 0.0, $1194 = 0, $12 = 0, $1201 = 0, $1202 = 0, $1206 = 0, $1208 = 0, $1209 = 0.0, $1213 = 0, $1217 = 0, $1218 = 0.0, $122 = 0.0, $1221 = 0, $1222 = 0.0, $1225 = 0, $1226 = 0.0, $1227 = 0, $1228 = 0.0, $123 = 0.0, $1232 = 0, $1236 = 0, $1237 = 0.0, $1240 = 0, $1241 = 0, $1242 = 0.0, $1245 = 0, $1246 = 0.0, $1247 = 0, $1248 = 0.0, $125 = 0.0, $1252 = 0, $1256 = 0, $1257 = 0.0, $1260 = 0, $1261 = 0, $1262 = 0.0, $1265 = 0, $1266 = 0.0, $1267 = 0, $1268 = 0.0, $1272 = 0, $1273 = 0.0, $1276 = 0, $1277 = 0.0, $1279 = 0.0, $1280 = 0, $1282 = 0.0, $129 = 0.0, $1295 = 0.0, $1298 = 0.0, $13 = 0, $1301 = 0.0, $1307 = 0.0, $1313 = 0.0, $1319 = 0.0, $132 = 0.0, $1326 = 0.0, $1328 = 0.0, $133 = 0.0, $1333 = 0.0, $1334 = 0.0, $1338 = 0.0, $134 = 0, $1345 = 0.0, $1346 = 0.0, $1350 = 0.0, $1356 = 0, $1359 = 0.0, $1362 = 0.0, $1363 = 0, $1366 = 0.0, $1370 = 0, $1373 = 0.0, $1377 = 0, $1383 = 0, $1389 = 0, $1395 = 0, $14 = 0, $1401 = 0, $1407 = 0, $1419 = 0, $1422 = 0, $1424 = 0, $1426 = 0, $1429 = 0, $1431 = 0, $1433 = 0, $1436 = 0, $1438 = 0, $1440 = 0, $1443 = 0, $1445 = 0, $1447 = 0.0, $1495 = 0, $15 = 0, $153 = 0.0, $159 = 0.0, $16 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $205 = 0.0, $208 = 0.0, $21 = 0, $213 = 0.0, $216 = 0.0, $22 = 0, $220 = 0.0, $224 = 0.0, $229 = 0.0, $23 = 0, $232 = 0.0, $236 = 0.0, $24 = 0, $240 = 0.0, $245 = 0.0, $248 = 0.0, $252 = 0.0, $256 = 0.0, $264 = 0.0, $265 = 0, $269 = 0, $272 = 0.0, $274 = 0, $276 = 0.0, $28 = 0.0, $280 = 0.0, $284 = 0.0, $286 = 0.0, $287 = 0.0, $289 = 0.0, $293 = 0.0, $299 = 0.0, $30 = 0.0, $305 = 0.0, $308 = 0.0, $31 = 0, $313 = 0.0, $32 = 0, $321 = 0, $322 = 0, $324 = 0.0, $326 = 0.0, $33 = 0, $332 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $339 = 0.0, $34 = 0, $341 = 0.0, $344 = 0.0, $346 = 0.0, $350 = 0.0, $352 = 0.0, $355 = 0.0, $357 = 0.0, $360 = 0.0, $362 = 0.0, $365 = 0.0, $367 = 0.0, $370 = 0.0, $372 = 0.0, $375 = 0.0, $377 = 0.0, $380 = 0.0, $382 = 0.0, $385 = 0.0, $395 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $401 = 0.0, $402 = 0, $404 = 0.0, $407 = 0.0, $417 = 0.0, $42 = 0, $424 = 0.0, $428 = 0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $435 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $448 = 0, $45 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $460 = 0.0, $467 = 0.0, $468 = 0.0, $47 = 0, $474 = 0.0, $48 = 0, $482 = 0, $486 = 0, $488 = 0.0, $49 = 0, $490 = 0.0, $492 = 0.0, $494 = 0.0, $496 = 0.0, $498 = 0.0, $500 = 0.0, $502 = 0.0, $504 = 0.0, $507 = 0.0, $51 = 0.0, $512 = 0.0, $517 = 0.0, $52 = 0, $522 = 0.0, $527 = 0.0, $532 = 0.0, $537 = 0.0, $54 = 0.0, $542 = 0.0, $547 = 0.0, $55 = 0, $552 = 0.0, $557 = 0.0, $56 = 0, $562 = 0.0, $567 = 0.0, $572 = 0.0, $577 = 0.0, $58 = 0, $582 = 0.0, $587 = 0.0, $59 = 0, $592 = 0.0, $594 = 0.0, $601 = 0.0, $602 = 0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $610 = 0.0, $611 = 0, $612 = 0, $617 = 0, $619 = 0.0, $62 = 0.0, $621 = 0, $623 = 0.0, $627 = 0.0, $631 = 0.0, $634 = 0.0, $638 = 0, $641 = 0, $643 = 0.0, $650 = 0.0, $661 = 0.0, $665 = 0.0, $668 = 0.0, $669 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $674 = 0.0, $701 = 0, $705 = 0.0, $706 = 0, $708 = 0.0, $710 = 0.0, $712 = 0, $714 = 0.0, $718 = 0.0, $720 = 0.0, $722 = 0.0, $724 = 0.0, $73 = 0, $757 = 0.0, $789 = 0.0, $821 = 0.0, $84 = 0, $853 = 0.0, $9 = 0, $93 = 0.0, $96 = 0.0, $97 = 0, $986 = 0.0, $99 = 0.0, $991 = 0.0, $996 = 0.0, $spec$select765 = 0, label = 0, sp = 0, $$2839$looptemp = 0, $159$looptemp = 0.0, $$1707835$looptemp = 0, $269$looptemp = 0, $428$looptemp = 0, $448$looptemp = 0, $$6712800$looptemp = 0, $617$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11280 | 0;
 $9 = sp + 11200 | 0;
 $10 = sp + 11120 | 0;
 $11 = sp + 11008 | 0;
 $12 = sp + 11272 | 0;
 $13 = sp + 10928 | 0;
 $14 = sp + 9968 | 0;
 $15 = sp + 9888 | 0;
 $16 = sp + 9808 | 0;
 $17 = sp + 9728 | 0;
 $18 = sp + 9600 | 0;
 $19 = sp + 5760 | 0;
 $20 = sp + 1920 | 0;
 $21 = sp + 960 | 0;
 $22 = sp;
 $23 = $0 + 7436 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $$op = 1.0 / +($24 + 1 | 0);
 $28 = ($24 | 0) > 9 ? .10000000149011612 : $$op;
 $30 = ($24 | 0) > 24 ? .03999999910593033 : $$op;
 $31 = ($24 | 0) > 99;
 $32 = ($24 | 0) < 2;
 $33 = $0 + 8 | 0;
 $34 = HEAP32[$33 >> 2] | 0;
 L1 : do if (($34 | 0) < 48e3) {
  switch ($34 | 0) {
  case 16e3:
   break;
  default:
   {
    $$0703 = $3;
    $$0704 = $4;
    break L1;
   }
  }
  $$0703 = ($3 * 3 | 0) / 2 | 0;
  $$0704 = ($4 * 3 | 0) / 2 | 0;
 } else {
  switch ($34 | 0) {
  case 48e3:
   break;
  default:
   {
    $$0703 = $3;
    $$0704 = $4;
    break L1;
   }
  }
  $$0703 = ($3 | 0) / 2 | 0;
  $$0704 = ($4 | 0) / 2 | 0;
 } while (0);
 $42 = HEAP32[$1 + 72 >> 2] | 0;
 $44 = $0 + 5772 | 0;
 if (!$24) {
  HEAP32[$44 >> 2] = 240;
  $47 = 240;
 } else $47 = HEAP32[$44 >> 2] | 0;
 $45 = $0 + 2892 | 0;
 $48 = $0 + 7588 | 0;
 $49 = 720 - $47 | 0;
 $51 = +_downmix_and_resample($8, $2, $0 + 2892 + ($47 << 2) | 0, $48, ($$0703 | 0) < ($49 | 0) ? $$0703 : $49, $$0704, $5, $6, $34);
 $52 = $0 + 7456 | 0;
 $54 = $51 + +HEAPF32[$52 >> 2];
 HEAPF32[$52 >> 2] = $54;
 $55 = HEAP32[$44 >> 2] | 0;
 $56 = $55 + $$0703 | 0;
 if (($56 | 0) < 720) {
  HEAP32[$44 >> 2] = $56;
  STACKTOP = sp;
  return;
 }
 $58 = $0 + 7444 | 0;
 $59 = HEAP32[$58 >> 2] | 0;
 HEAP32[$58 >> 2] = (($59 | 0) > 98 ? -99 : 1) + $59;
 $$0705841 = 0;
 do {
  $62 = +HEAPF32[27952 + ($$0705841 << 2) >> 2];
  HEAPF32[$19 + ($$0705841 << 3) >> 2] = $62 * +HEAPF32[$0 + 2892 + ($$0705841 << 2) >> 2];
  HEAPF32[$19 + ($$0705841 << 3) + 4 >> 2] = $62 * +HEAPF32[$0 + 2892 + ($$0705841 + 240 << 2) >> 2];
  $73 = 480 - $$0705841 + -1 | 0;
  HEAPF32[$19 + ($73 << 3) >> 2] = $62 * +HEAPF32[$0 + 2892 + ($73 << 2) >> 2];
  HEAPF32[$19 + ($73 << 3) + 4 >> 2] = $62 * +HEAPF32[$0 + 2892 + (719 - $$0705841 << 2) >> 2];
  $$0705841 = $$0705841 + 1 | 0;
 } while (($$0705841 | 0) != 240);
 $84 = $0 + 7600 + ($59 << 6) | 0;
 _memcpy($45 | 0, $0 + 4812 | 0, 960) | 0;
 HEAPF32[$52 >> 2] = +_downmix_and_resample($8, $2, $0 + 3852 | 0, $48, $56 + -720 | 0, $$0704 + 720 - $55 | 0, $5, $6, HEAP32[$33 >> 2] | 0);
 HEAP32[$44 >> 2] = $56 + -480;
 _opus_fft_c($42, $19, $20);
 $93 = +HEAPF32[$20 >> 2];
 if ($93 != $93 | 0.0 != 0.0) {
  HEAP32[$84 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $$1840 = 1;
 do {
  $96 = +HEAPF32[$20 + ($$1840 << 3) >> 2];
  $97 = 480 - $$1840 | 0;
  $99 = +HEAPF32[$20 + ($97 << 3) >> 2];
  $102 = +HEAPF32[$20 + ($$1840 << 3) + 4 >> 2];
  $104 = +HEAPF32[$20 + ($97 << 3) + 4 >> 2];
  $109 = +_fast_atan2f_756($102 - $104, $96 + $99) * .15915493667125702;
  $110 = $0 + 12 + ($$1840 << 2) | 0;
  $112 = $109 - +HEAPF32[$110 >> 2];
  $113 = $0 + 972 + ($$1840 << 2) | 0;
  $115 = $112 - +HEAPF32[$113 >> 2];
  $117 = +_fast_atan2f_756($99 - $96, $102 + $104) * .15915493667125702;
  $118 = $117 - $109;
  $119 = $118 - $112;
  $122 = $115 - +(_lrintf($115) | 0);
  $123 = +Math_abs(+$122);
  $125 = $122 * $122;
  $129 = $119 - +(_lrintf($119) | 0);
  HEAPF32[$22 + ($$1840 << 2) >> 2] = $123 + +Math_abs(+$129);
  $132 = $129 * $129;
  $133 = $132 * $132;
  $134 = $0 + 1932 + ($$1840 << 2) | 0;
  HEAPF32[$21 + ($$1840 << 2) >> 2] = 1.0 / ((+HEAPF32[$134 >> 2] + $125 * $125 + $133 * 2.0) * .25 * 62341.81640625 + 1.0) + -.014999999664723873;
  HEAPF32[$14 + ($$1840 << 2) >> 2] = 1.0 / ($133 * 62341.81640625 + 1.0) + -.014999999664723873;
  HEAPF32[$110 >> 2] = $117;
  HEAPF32[$113 >> 2] = $118;
  HEAPF32[$134 >> 2] = $133;
  $$1840 = $$1840 + 1 | 0;
 } while (($$1840 | 0) != 240);
 $$2839 = 2;
 $159 = +HEAPF32[$14 + 8 >> 2];
 do {
  $153 = +HEAPF32[$14 + ($$2839 + -1 << 2) >> 2];
  $$2839$looptemp = $$2839;
  $$2839 = $$2839 + 1 | 0;
  $159$looptemp = $159;
  $159 = +HEAPF32[$14 + ($$2839 << 2) >> 2];
  $$ = $153 > $159 ? $153 : $159;
  $161 = $21 + ($$2839$looptemp << 2) | 0;
  $162 = +HEAPF32[$161 >> 2];
  $163 = ($159$looptemp < $$ ? $159$looptemp : $$) + -.10000000149011612;
  HEAPF32[$161 >> 2] = ($162 > $163 ? $162 : $163) * .8999999761581421;
 } while (($$2839 | 0) != 239);
 $166 = $0 + 7600 + ($59 << 6) + 16 | 0;
 HEAPF32[$166 >> 2] = 0.0;
 if (!(HEAP32[$23 >> 2] | 0)) {
  HEAPF32[$0 + 7008 >> 2] = 1.0e10;
  HEAPF32[$0 + 7080 >> 2] = -1.0e10;
  HEAPF32[$0 + 7012 >> 2] = 1.0e10;
  HEAPF32[$0 + 7084 >> 2] = -1.0e10;
  HEAPF32[$0 + 7016 >> 2] = 1.0e10;
  HEAPF32[$0 + 7088 >> 2] = -1.0e10;
  HEAPF32[$0 + 7020 >> 2] = 1.0e10;
  HEAPF32[$0 + 7092 >> 2] = -1.0e10;
  HEAPF32[$0 + 7024 >> 2] = 1.0e10;
  HEAPF32[$0 + 7096 >> 2] = -1.0e10;
  HEAPF32[$0 + 7028 >> 2] = 1.0e10;
  HEAPF32[$0 + 7100 >> 2] = -1.0e10;
  HEAPF32[$0 + 7032 >> 2] = 1.0e10;
  HEAPF32[$0 + 7104 >> 2] = -1.0e10;
  HEAPF32[$0 + 7036 >> 2] = 1.0e10;
  HEAPF32[$0 + 7108 >> 2] = -1.0e10;
  HEAPF32[$0 + 7040 >> 2] = 1.0e10;
  HEAPF32[$0 + 7112 >> 2] = -1.0e10;
  HEAPF32[$0 + 7044 >> 2] = 1.0e10;
  HEAPF32[$0 + 7116 >> 2] = -1.0e10;
  HEAPF32[$0 + 7048 >> 2] = 1.0e10;
  HEAPF32[$0 + 7120 >> 2] = -1.0e10;
  HEAPF32[$0 + 7052 >> 2] = 1.0e10;
  HEAPF32[$0 + 7124 >> 2] = -1.0e10;
  HEAPF32[$0 + 7056 >> 2] = 1.0e10;
  HEAPF32[$0 + 7128 >> 2] = -1.0e10;
  HEAPF32[$0 + 7060 >> 2] = 1.0e10;
  HEAPF32[$0 + 7132 >> 2] = -1.0e10;
  HEAPF32[$0 + 7064 >> 2] = 1.0e10;
  HEAPF32[$0 + 7136 >> 2] = -1.0e10;
  HEAPF32[$0 + 7068 >> 2] = 1.0e10;
  HEAPF32[$0 + 7140 >> 2] = -1.0e10;
  HEAPF32[$0 + 7072 >> 2] = 1.0e10;
  HEAPF32[$0 + 7144 >> 2] = -1.0e10;
  HEAPF32[$0 + 7076 >> 2] = 1.0e10;
  HEAPF32[$0 + 7148 >> 2] = -1.0e10;
 }
 $205 = $93 * 2.0;
 $208 = +HEAPF32[$20 + 4 >> 2] * 2.0;
 $213 = +HEAPF32[$20 + 8 >> 2];
 $216 = +HEAPF32[$20 + 3832 >> 2];
 $220 = +HEAPF32[$20 + 12 >> 2];
 $224 = +HEAPF32[$20 + 3836 >> 2];
 $229 = +HEAPF32[$20 + 16 >> 2];
 $232 = +HEAPF32[$20 + 3824 >> 2];
 $236 = +HEAPF32[$20 + 20 >> 2];
 $240 = +HEAPF32[$20 + 3828 >> 2];
 $245 = +HEAPF32[$20 + 24 >> 2];
 $248 = +HEAPF32[$20 + 3816 >> 2];
 $252 = +HEAPF32[$20 + 28 >> 2];
 $256 = +HEAPF32[$20 + 3820 >> 2];
 $264 = +Math_log(+($205 * $205 + $208 * $208 + ($213 * $213 + $216 * $216 + $220 * $220 + $224 * $224) + ($229 * $229 + $232 * $232 + $236 * $236 + $240 * $240) + ($245 * $245 + $248 * $248 + $252 * $252 + $256 * $256) + 1.000000013351432e-10)) * .7213475108146667;
 HEAPF32[$15 >> 2] = $264;
 $265 = $0 + 7432 | 0;
 $$0715834 = 0.0;
 $$0717833 = 0.0;
 $$0718832 = 0.0;
 $$0720831 = 0.0;
 $$0726830 = 0.0;
 $$0727829 = 0.0;
 $$0733828 = 0.0;
 $$1707835 = 0;
 $269 = 4;
 while (1) {
  $$1707835$looptemp = $$1707835;
  $$1707835 = $$1707835 + 1 | 0;
  $269$looptemp = $269;
  $269 = HEAP32[28912 + ($$1707835 << 2) >> 2] | 0;
  if (($269$looptemp | 0) < ($269 | 0)) {
   $$0730816 = 0.0;
   $$0731815 = 0.0;
   $$0732814 = 0.0;
   $$4817 = $269$looptemp;
   while (1) {
    $272 = +HEAPF32[$20 + ($$4817 << 3) >> 2];
    $274 = 480 - $$4817 | 0;
    $276 = +HEAPF32[$20 + ($274 << 3) >> 2];
    $280 = +HEAPF32[$20 + ($$4817 << 3) + 4 >> 2];
    $284 = +HEAPF32[$20 + ($274 << 3) + 4 >> 2];
    $286 = $272 * $272 + $276 * $276 + $280 * $280 + $284 * $284;
    $287 = $$0732814 + $286;
    $289 = +HEAPF32[$21 + ($$4817 << 2) >> 2];
    $293 = $$0731815 + $286 * ($289 < 0.0 ? 0.0 : $289);
    $299 = $$0730816 + $286 * 2.0 * (.5 - +HEAPF32[$22 + ($$4817 << 2) >> 2]);
    $$4817 = $$4817 + 1 | 0;
    if (($$4817 | 0) == ($269 | 0)) {
     $$0730$lcssa = $299;
     $$0731$lcssa = $293;
     $$0732$lcssa = $287;
     break;
    } else {
     $$0730816 = $299;
     $$0731815 = $293;
     $$0732814 = $287;
    }
   }
  } else {
   $$0730$lcssa = 0.0;
   $$0731$lcssa = 0.0;
   $$0732$lcssa = 0.0;
  }
  if (!($$0732$lcssa < 1.0e9) | ($$0732$lcssa != $$0732$lcssa | 0.0 != 0.0)) {
   label = 24;
   break;
  }
  HEAPF32[$0 + 5856 + ((HEAP32[$265 >> 2] | 0) * 72 | 0) + ($$1707835$looptemp << 2) >> 2] = $$0732$lcssa;
  $305 = $$0732$lcssa + 1.0000000036274937e-15;
  $$0718832 = $$0718832 + $$0730$lcssa / $305;
  $308 = $$0732$lcssa + 1.000000013351432e-10;
  $$0733828 = $$0733828 + +Math_sqrt(+$308);
  $313 = +Math_log(+$308);
  HEAPF32[$10 + ($$1707835$looptemp << 2) >> 2] = $313;
  HEAPF32[$15 + ($$1707835 << 2) >> 2] = $313 * .7213475108146667;
  HEAPF32[$0 + 6432 + ((HEAP32[$265 >> 2] | 0) * 72 | 0) + ($$1707835$looptemp << 2) >> 2] = $313;
  $321 = $0 + 7080 + ($$1707835$looptemp << 2) | 0;
  if (!(HEAP32[$23 >> 2] | 0)) {
   $322 = $0 + 7008 + ($$1707835$looptemp << 2) | 0;
   HEAPF32[$322 >> 2] = $313;
   HEAPF32[$321 >> 2] = $313;
   $$pre$phi951Z2D = $322;
   $324 = $313;
   $326 = $313;
  } else {
   $$phi$trans$insert887 = $0 + 7008 + ($$1707835$looptemp << 2) | 0;
   $$pre$phi951Z2D = $$phi$trans$insert887;
   $324 = +HEAPF32[$321 >> 2];
   $326 = +HEAPF32[$$phi$trans$insert887 >> 2];
  }
  do if ($326 + 7.5 < $324) if ($324 - $313 > $313 - $326) {
   $332 = $324 + -.009999999776482582;
   HEAPF32[$321 >> 2] = $332;
   $335 = $332;
   break;
  } else {
   HEAPF32[$$pre$phi951Z2D >> 2] = $326 + .009999999776482582;
   $335 = $324;
   break;
  } else $335 = $324; while (0);
  if ($335 < $313) {
   HEAPF32[$321 >> 2] = $313;
   $336 = $313 + -15.0;
   $337 = +HEAPF32[$$pre$phi951Z2D >> 2];
   $$755 = $336 > $337 ? $336 : $337;
   HEAPF32[$$pre$phi951Z2D >> 2] = $$755;
   $344 = $$755;
   $346 = $313;
  } else {
   $339 = +HEAPF32[$$pre$phi951Z2D >> 2];
   $341 = $313 + 15.0;
   if ($339 > $313) {
    $$756 = $341 < $335 ? $341 : $335;
    HEAPF32[$$pre$phi951Z2D >> 2] = $313;
    HEAPF32[$321 >> 2] = $$756;
    $344 = $313;
    $346 = $$756;
   } else {
    $344 = $339;
    $346 = $335;
   }
  }
  $350 = +HEAPF32[$0 + 5856 + ($$1707835$looptemp << 2) >> 2];
  $352 = +Math_sqrt(+$350) + 0.0;
  $355 = +HEAPF32[$0 + 5928 + ($$1707835$looptemp << 2) >> 2];
  $357 = $352 + +Math_sqrt(+$355);
  $360 = +HEAPF32[$0 + 6e3 + ($$1707835$looptemp << 2) >> 2];
  $362 = $357 + +Math_sqrt(+$360);
  $365 = +HEAPF32[$0 + 6072 + ($$1707835$looptemp << 2) >> 2];
  $367 = $362 + +Math_sqrt(+$365);
  $370 = +HEAPF32[$0 + 6144 + ($$1707835$looptemp << 2) >> 2];
  $372 = $367 + +Math_sqrt(+$370);
  $375 = +HEAPF32[$0 + 6216 + ($$1707835$looptemp << 2) >> 2];
  $377 = $372 + +Math_sqrt(+$375);
  $380 = +HEAPF32[$0 + 6288 + ($$1707835$looptemp << 2) >> 2];
  $382 = $377 + +Math_sqrt(+$380);
  $385 = +HEAPF32[$0 + 6360 + ($$1707835$looptemp << 2) >> 2];
  $$0727829 = $$0727829 + ($313 - $344) / ($346 - $344 + 1.0000000036274937e-15);
  $395 = ($382 + +Math_sqrt(+$385)) / +Math_sqrt(+(($350 + 0.0 + $355 + $360 + $365 + $370 + $375 + $380 + $385) * 8.0 + 1.0e-15));
  $397 = $395 > .9900000095367432 ? .9900000095367432 : $395;
  $398 = $397 * $397;
  $399 = $398 * $398;
  $$0726830 = $$0726830 + $399;
  $401 = $$0731$lcssa / $305;
  $402 = $0 + 5776 + ($$1707835$looptemp << 2) | 0;
  $404 = $399 * +HEAPF32[$402 >> 2];
  $$757 = $401 > $404 ? $401 : $404;
  HEAPF32[$9 + ($$1707835$looptemp << 2) >> 2] = $$757;
  $407 = $$0715834 + $$757;
  if ($$1707835$looptemp >>> 0 > 8) $$1716 = $407 - +HEAPF32[$9 + ($$1707835$looptemp + -9 << 2) >> 2]; else $$1716 = $407;
  $417 = (+($$1707835$looptemp + -18 | 0) * .029999999329447746 + 1.0) * $$1716;
  $$0717833 = $$0717833 > $417 ? $$0717833 : $417;
  $$0720831 = $$0720831 + $$757 * +($$1707835$looptemp + -8 | 0);
  HEAPF32[$402 >> 2] = $$757;
  if ($$1707835 >>> 0 >= 18) break; else $$0715834 = $$1716;
 }
 if ((label | 0) == 24) {
  HEAP32[$84 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 HEAPF32[$16 >> 2] = $264;
 $424 = $264 + -2.5;
 HEAPF32[$17 >> 2] = $424;
 $$2708813 = 1;
 $428 = 4;
 $433 = $264;
 $439 = $424;
 do {
  $428$looptemp = $428;
  $428 = HEAP32[28912 + ($$2708813 << 2) >> 2] | 0;
  $431 = +($428 - $428$looptemp | 0) * 2.0 * .25;
  $432 = $433 + $431;
  $435 = +HEAPF32[$15 + ($$2708813 << 2) >> 2];
  $433 = $432 < $435 ? $432 : $435;
  HEAPF32[$16 + ($$2708813 << 2) >> 2] = $433;
  $438 = $439 - $431;
  $440 = $435 + -2.5;
  $439 = $438 > $440 ? $438 : $440;
  HEAPF32[$17 + ($$2708813 << 2) >> 2] = $439;
  $$2708813 = $$2708813 + 1 | 0;
 } while (($$2708813 | 0) != 19);
 $$3709812 = 16;
 $448 = 192;
 $453 = +HEAPF32[$16 + 68 >> 2];
 $458 = +HEAPF32[$17 + 68 >> 2];
 while (1) {
  $448$looptemp = $448;
  $448 = HEAP32[28912 + ($$3709812 << 2) >> 2] | 0;
  $451 = +($448$looptemp - $448 | 0) * 2.0 * .25;
  $452 = $453 + $451;
  $454 = $16 + ($$3709812 << 2) | 0;
  $455 = +HEAPF32[$454 >> 2];
  $453 = $452 < $455 ? $452 : $455;
  HEAPF32[$454 >> 2] = $453;
  $457 = $458 - $451;
  $459 = $17 + ($$3709812 << 2) | 0;
  $460 = +HEAPF32[$459 >> 2];
  $458 = $457 > $460 ? $457 : $460;
  HEAPF32[$459 >> 2] = $458;
  if (!$$3709812) break; else $$3709812 = $$3709812 + -1 | 0;
 }
 $$4710811 = 0;
 $468 = $264;
 while (1) {
  $467 = +HEAPF32[$17 + ($$4710811 << 2) >> 2] - $468;
  $474 = $468 - (+HEAPF32[$16 + ($$4710811 << 2) >> 2] + 2.5);
  $482 = ~~+Math_floor(+((($467 < 0.0 ? 0.0 : $467) + ($474 < 0.0 ? 0.0 : $474)) * 64.0 + .5));
  HEAP8[$0 + 7600 + ($59 << 6) + 44 + $$4710811 >> 0] = ($482 | 0) < 255 ? $482 : 255;
  $486 = $$4710811 + 1 | 0;
  if (($486 | 0) == 19) break;
  $$4710811 = $486;
  $468 = +HEAPF32[$15 + ($486 << 2) >> 2];
 }
 $$0743805 = 0.0;
 $$6806 = 0;
 do {
  $$pre900 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 20 >> 2];
  $$pre902 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 24 >> 2];
  $$pre904 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 28 >> 2];
  $$pre906 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 32 >> 2];
  $$pre908 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 36 >> 2];
  $$pre910 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 40 >> 2];
  $$pre912 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 44 >> 2];
  $$pre914 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 48 >> 2];
  $$pre916 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 52 >> 2];
  $488 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) >> 2];
  $490 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 4 >> 2];
  $492 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 8 >> 2];
  $494 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 12 >> 2];
  $496 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 16 >> 2];
  $498 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 56 >> 2];
  $500 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 60 >> 2];
  $502 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 64 >> 2];
  $504 = +HEAPF32[$0 + 6432 + ($$6806 * 72 | 0) + 68 >> 2];
  $$0723804 = 999999986991104.0;
  $$0725803 = 0;
  do {
   $507 = $488 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) >> 2];
   $512 = $490 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 4 >> 2];
   $517 = $492 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 8 >> 2];
   $522 = $494 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 12 >> 2];
   $527 = $496 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 16 >> 2];
   $532 = $$pre900 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 20 >> 2];
   $537 = $$pre902 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 24 >> 2];
   $542 = $$pre904 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 28 >> 2];
   $547 = $$pre906 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 32 >> 2];
   $552 = $$pre908 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 36 >> 2];
   $557 = $$pre910 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 40 >> 2];
   $562 = $$pre912 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 44 >> 2];
   $567 = $$pre914 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 48 >> 2];
   $572 = $$pre916 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 52 >> 2];
   $577 = $498 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 56 >> 2];
   $582 = $500 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 60 >> 2];
   $587 = $502 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 64 >> 2];
   $592 = $504 - +HEAPF32[$0 + 6432 + ($$0725803 * 72 | 0) + 68 >> 2];
   $594 = $507 * $507 + 0.0 + $512 * $512 + $517 * $517 + $522 * $522 + $527 * $527 + $532 * $532 + $537 * $537 + $542 * $542 + $547 * $547 + $552 * $552 + $557 * $557 + $562 * $562 + $567 * $567 + $572 * $572 + $577 * $577 + $582 * $582 + $587 * $587 + $592 * $592;
   $$0723804 = ($$0725803 | 0) == ($$6806 | 0) | $$0723804 < $594 ? $$0723804 : $594;
   $$0725803 = $$0725803 + 1 | 0;
  } while (($$0725803 | 0) != 8);
  $$0743805 = $$0743805 + $$0723804;
  $$6806 = $$6806 + 1 | 0;
 } while (($$6806 | 0) != 8);
 $601 = $$0743805 * .125;
 $602 = $7 + -8 | 0;
 $607 = 5.699999746866524e-04 / +(1 << (($602 | 0) > 0 ? $602 : 0) | 0);
 $608 = $607 * $607;
 $609 = $32 ? 0.0 : $31 ? .9900000095367432 : 1.0 - $$op;
 $610 = $608 * 3.0;
 $611 = $0 + 5852 | 0;
 $612 = HEAP32[$611 >> 2] | 0;
 $$0734799 = 0.0;
 $$0735798 = 0;
 $$0742797 = 0.0;
 $$0744796 = 0.0;
 $$0746795 = 0.0;
 $$6712800 = 0;
 $617 = 4;
 while (1) {
  $$6712800$looptemp = $$6712800;
  $$6712800 = $$6712800 + 1 | 0;
  $617$looptemp = $617;
  $617 = HEAP32[28912 + ($$6712800 << 2) >> 2] | 0;
  if (($617 | 0) > ($617$looptemp | 0)) {
   $$0719793 = 0.0;
   $$7794 = $617$looptemp;
   while (1) {
    $619 = +HEAPF32[$20 + ($$7794 << 3) >> 2];
    $621 = 480 - $$7794 | 0;
    $623 = +HEAPF32[$20 + ($621 << 3) >> 2];
    $627 = +HEAPF32[$20 + ($$7794 << 3) + 4 >> 2];
    $631 = +HEAPF32[$20 + ($621 << 3) + 4 >> 2];
    $634 = $$0719793 + ($619 * $619 + $623 * $623 + $627 * $627 + $631 * $631);
    $$7794 = $$7794 + 1 | 0;
    if (($$7794 | 0) == ($617 | 0)) {
     $$0719$lcssa = $634;
     break;
    } else $$0719793 = $634;
   }
  } else $$0719$lcssa = 0.0;
  $$0742797 = $$0742797 > $$0719$lcssa ? $$0742797 : $$0719$lcssa;
  $638 = $$6712800$looptemp >>> 0 < 11;
  $$0746795 = $638 ? $$0746795 : $$0746795 + $$0719$lcssa;
  $$0744796 = $638 ? $$0744796 + $$0719$lcssa : $$0744796;
  $641 = $0 + 7152 + ($$6712800$looptemp << 2) | 0;
  $643 = $609 * +HEAPF32[$641 >> 2];
  $$$0719 = $643 > $$0719$lcssa ? $643 : $$0719$lcssa;
  HEAPF32[$641 >> 2] = $$$0719;
  if ($$0719$lcssa * 1.0e9 > $$0742797) {
   $650 = +($617 - $617$looptemp | 0);
   $$1736 = ($$0719$lcssa > $608 * $650 ? 1 : ($$0719$lcssa > $$$0719 ? $$0719$lcssa : $$$0719) > $610 * $650) ? $$6712800 : $$0735798;
  } else $$1736 = $$0735798;
  HEAP32[$13 + ($$6712800$looptemp << 2) >> 2] = $$0719$lcssa < $$0734799 * (($612 | 0) > ($$6712800$looptemp | 0) ? .009999999776482582 : .05000000074505806) & 1;
  $661 = $$0734799 * .05000000074505806;
  $$0734799 = $661 > $$0719$lcssa ? $661 : $$0719$lcssa;
  if (($$6712800 | 0) == 18) break; else $$0735798 = $$1736;
 }
 $665 = +Math_sqrt(+($601 / 18.0));
 if ((HEAP32[$33 >> 2] | 0) == 48e3) {
  $668 = $54 * 2.7777778450399637e-04;
  $669 = ($612 | 0) == 20;
  $670 = $669 ? 10.0 : 30.0;
  $671 = $668 + $$0746795;
  $672 = $0 + 7224 | 0;
  $674 = $609 * +HEAPF32[$672 >> 2];
  $$763 = $674 > $668 ? $674 : $668;
  HEAPF32[$672 >> 2] = $$763;
  if (($668 > $$763 ? $668 : $$763) > $608 * ($670 * 3.0) * 160.0) label = 60; else if ($668 > $608 * $670 * 160.0) label = 60; else $$2737 = $$1736;
  if ((label | 0) == 60) $$2737 = 20;
  HEAP32[$13 + 72 >> 2] = $668 < $$0734799 * ($669 ? .009999999776482582 : .05000000074505806) & 1;
  $$2748 = $671;
  $$3738 = $$2737;
 } else {
  $$2748 = $$0746795;
  $$3738 = $$1736;
 }
 HEAPF32[$0 + 7600 + ($59 << 6) + 40 >> 2] = $$2748 > $$0744796 ? $$0744796 / $$2748 : 1.0;
 if (($$3738 | 0) == 20) $$4739 = (HEAP32[$13 + 72 >> 2] | 0) == 0 ? 20 : 18; else {
  $$3738$off = $$3738 + -1 | 0;
  if ($$3738$off >>> 0 < 18) $$4739 = (HEAP32[$13 + ($$3738$off << 2) >> 2] | 0) == 0 ? $$3738 : $$3738$off; else $$4739 = $$3738;
 }
 $701 = HEAP32[$23 >> 2] | 0;
 $705 = +_llvm_log10_f64(+$$0733828) * 20.0;
 $706 = $0 + 7424 | 0;
 $708 = +HEAPF32[$706 >> 2] + -.003000000026077032;
 $710 = $708 > $705 ? $708 : $705;
 HEAPF32[$706 >> 2] = $710;
 $712 = $0 + 7428 | 0;
 $714 = (1.0 - $30) * +HEAPF32[$712 >> 2];
 HEAPF32[$712 >> 2] = $705 < $710 + -30.0 ? $30 + $714 : $714;
 $$pre919 = +HEAPF32[$10 + 8 >> 2];
 $$pre921 = +HEAPF32[$10 + 12 >> 2];
 $$pre923 = +HEAPF32[$10 + 16 >> 2];
 $$pre925 = +HEAPF32[$10 + 20 >> 2];
 $$pre927 = +HEAPF32[$10 + 24 >> 2];
 $$pre929 = +HEAPF32[$10 + 28 >> 2];
 $$pre931 = +HEAPF32[$10 + 32 >> 2];
 $$pre933 = +HEAPF32[$10 + 36 >> 2];
 $$pre935 = +HEAPF32[$10 + 40 >> 2];
 $$pre937 = +HEAPF32[$10 + 44 >> 2];
 $$pre939 = +HEAPF32[$10 + 48 >> 2];
 $$pre941 = +HEAPF32[$10 + 52 >> 2];
 $718 = +HEAPF32[$10 >> 2];
 $720 = +HEAPF32[$10 + 4 >> 2];
 $722 = +HEAPF32[$10 + 56 >> 2];
 $724 = +HEAPF32[$10 + 60 >> 2];
 $757 = $718 * .25 + 0.0 + $720 * .25 + $$pre919 * .25 + $$pre921 * .25 + $$pre923 * .25 + $$pre925 * .25 + $$pre927 * .25 + $$pre929 * .25 + $$pre931 * .25 + $$pre933 * .25 + $$pre935 * .25 + $$pre937 * .25 + $$pre939 * .25 + $$pre941 * .25 + $722 * .25 + $724 * .25;
 $789 = $718 * .3518509864807129 + 0.0 + $720 * .3383300006389618 + $$pre919 * .31180599331855774 + $$pre921 * .2732999920845032 + $$pre923 * .22429199516773224 + $$pre925 * .1666640043258667 + $$pre927 * .10263100266456604 + $$pre929 * .03465399891138077 + $$pre931 * -.03465399891138077 + $$pre933 * -.10263100266456604 + $$pre935 * -.1666640043258667 + $$pre937 * -.22429199516773224 + $$pre939 * -.2732999920845032 + $$pre941 * -.31180599331855774 + $722 * -.3383300006389618 + $724 * -.3518509864807129;
 $821 = $718 * .34676000475883484 + 0.0 + $720 * .2939690053462982 + $$pre919 * .19642400741577148 + $$pre921 * .06897500157356262 + $$pre923 * -.06897500157356262 + $$pre925 * -.19642400741577148 + $$pre927 * -.2939690053462982 + $$pre929 * -.34676000475883484 + $$pre931 * -.34676000475883484 + $$pre933 * -.2939690053462982 + $$pre935 * -.19642400741577148 + $$pre937 * -.06897500157356262 + $$pre939 * .06897500157356262 + $$pre941 * .19642400741577148 + $722 * .2939690053462982 + $724 * .34676000475883484;
 $853 = $718 * .3383300006389618 + 0.0 + $720 * .22429199516773224 + $$pre919 * .03465399891138077 + $$pre921 * -.1666640043258667 + $$pre923 * -.31180599331855774 + $$pre925 * -.3518509864807129 + $$pre927 * -.2732999920845032 + $$pre929 * -.10263100266456604 + $$pre931 * .10263100266456604 + $$pre933 * .2732999920845032 + $$pre935 * .3518509864807129 + $$pre937 * .31180599331855774 + $$pre939 * .1666640043258667 + $$pre941 * -.03465399891138077 + $722 * -.22429199516773224 + $724 * -.3383300006389618;
 $spec$select765 = ($701 | 0) < 3 ? 20 : $$4739;
 $986 = +HEAPF32[$0 + 7080 >> 2] + +HEAPF32[$0 + 7008 >> 2];
 $991 = +HEAPF32[$0 + 7084 >> 2] + +HEAPF32[$0 + 7012 >> 2];
 $996 = +HEAPF32[$0 + 7088 >> 2] + +HEAPF32[$0 + 7016 >> 2];
 $1001 = +HEAPF32[$0 + 7092 >> 2] + +HEAPF32[$0 + 7020 >> 2];
 $1006 = +HEAPF32[$0 + 7096 >> 2] + +HEAPF32[$0 + 7024 >> 2];
 $1011 = +HEAPF32[$0 + 7100 >> 2] + +HEAPF32[$0 + 7028 >> 2];
 $1016 = +HEAPF32[$0 + 7104 >> 2] + +HEAPF32[$0 + 7032 >> 2];
 $1017 = +HEAPF32[$0 + 7108 >> 2] + +HEAPF32[$0 + 7036 >> 2];
 $1018 = +HEAPF32[$0 + 7112 >> 2] + +HEAPF32[$0 + 7040 >> 2];
 $1023 = +HEAPF32[$0 + 7116 >> 2] + +HEAPF32[$0 + 7044 >> 2];
 $1028 = +HEAPF32[$0 + 7120 >> 2] + +HEAPF32[$0 + 7048 >> 2];
 $1033 = +HEAPF32[$0 + 7124 >> 2] + +HEAPF32[$0 + 7052 >> 2];
 $1038 = +HEAPF32[$0 + 7128 >> 2] + +HEAPF32[$0 + 7056 >> 2];
 $1043 = +HEAPF32[$0 + 7132 >> 2] + +HEAPF32[$0 + 7060 >> 2];
 $1048 = +HEAPF32[$0 + 7136 >> 2] + +HEAPF32[$0 + 7064 >> 2];
 $1053 = +HEAPF32[$0 + 7140 >> 2] + +HEAPF32[$0 + 7068 >> 2];
 $1184 = $$0718832 / 18.0;
 HEAPF32[$166 >> 2] = $1184 + (1.0 - $1184) * (($701 | 0) < 10 ? .5 : $$0727829 / 18.0);
 $1188 = $$0717833 / 9.0;
 $1189 = $0 + 5848 | 0;
 $1191 = +HEAPF32[$1189 >> 2] * .800000011920929;
 $$766 = $1188 > $1191 ? $1188 : $1191;
 HEAPF32[$1189 >> 2] = $$766;
 $1194 = $0 + 7600 + ($59 << 6) + 8 | 0;
 HEAPF32[$1194 >> 2] = $$0720831 * .015625;
 HEAP32[$265 >> 2] = ((HEAP32[$265 >> 2] | 0) + 1 | 0) % 8 | 0;
 HEAP32[$23 >> 2] = ($701 | 0) < 9999 ? $701 + 1 | 0 : 1e4;
 $1201 = $0 + 7600 + ($59 << 6) + 4 | 0;
 HEAPF32[$1201 >> 2] = $$766;
 $1202 = $0 + 7324 | 0;
 $1206 = $0 + 7228 | 0;
 $1208 = $0 + 7292 | 0;
 $1209 = +HEAPF32[$1208 >> 2];
 $1213 = $0 + 7260 | 0;
 $1217 = $0 + 7356 | 0;
 $1218 = +HEAPF32[$1217 >> 2];
 HEAPF32[$11 >> 2] = +HEAPF32[$1213 >> 2] * .6969299912452698 + ((+HEAPF32[$1206 >> 2] + $1209) * .49195000529289246 - ($757 + +HEAPF32[$1202 >> 2]) * .12298999726772308) - $1218 * 1.4349000453948975;
 $1221 = $0 + 7328 | 0;
 $1222 = +HEAPF32[$1221 >> 2];
 $1225 = $0 + 7232 | 0;
 $1226 = +HEAPF32[$1225 >> 2];
 $1227 = $0 + 7296 | 0;
 $1228 = +HEAPF32[$1227 >> 2];
 $1232 = $0 + 7264 | 0;
 $1236 = $0 + 7360 | 0;
 $1237 = +HEAPF32[$1236 >> 2];
 $1240 = $11 + 4 | 0;
 HEAPF32[$1240 >> 2] = +HEAPF32[$1232 >> 2] * .6969299912452698 + (($1226 + $1228) * .49195000529289246 - ($789 + $1222) * .12298999726772308) - $1237 * 1.4349000453948975;
 $1241 = $0 + 7332 | 0;
 $1242 = +HEAPF32[$1241 >> 2];
 $1245 = $0 + 7236 | 0;
 $1246 = +HEAPF32[$1245 >> 2];
 $1247 = $0 + 7300 | 0;
 $1248 = +HEAPF32[$1247 >> 2];
 $1252 = $0 + 7268 | 0;
 $1256 = $0 + 7364 | 0;
 $1257 = +HEAPF32[$1256 >> 2];
 $1260 = $11 + 8 | 0;
 HEAPF32[$1260 >> 2] = +HEAPF32[$1252 >> 2] * .6969299912452698 + (($1246 + $1248) * .49195000529289246 - ($821 + $1242) * .12298999726772308) - $1257 * 1.4349000453948975;
 $1261 = $0 + 7336 | 0;
 $1262 = +HEAPF32[$1261 >> 2];
 $1265 = $0 + 7240 | 0;
 $1266 = +HEAPF32[$1265 >> 2];
 $1267 = $0 + 7304 | 0;
 $1268 = +HEAPF32[$1267 >> 2];
 $1272 = $0 + 7272 | 0;
 $1273 = +HEAPF32[$1272 >> 2];
 $1276 = $0 + 7368 | 0;
 $1277 = +HEAPF32[$1276 >> 2];
 $1279 = $1273 * .6969299912452698 + (($1266 + $1268) * .49195000529289246 - ($853 + $1262) * .12298999726772308) - $1277 * 1.4349000453948975;
 $1280 = $11 + 12 | 0;
 HEAPF32[$1280 >> 2] = $1279;
 $1282 = 1.0 - $28;
 HEAPF32[$1217 >> 2] = $1282 * $1218 + $28 * $757;
 HEAPF32[$1236 >> 2] = $1282 * $1237 + $28 * $789;
 HEAPF32[$1256 >> 2] = $1282 * $1257 + $28 * $821;
 HEAPF32[$1276 >> 2] = $1282 * $1277 + $28 * $853;
 $1295 = +HEAPF32[$1202 >> 2];
 $1298 = +HEAPF32[$1206 >> 2];
 $1301 = ($757 - $1295) * .6324599981307983 + ($1298 - $1209) * .31622999906539917;
 HEAPF32[$11 + 16 >> 2] = $1301;
 $1307 = ($789 - $1222) * .6324599981307983 + ($1226 - $1228) * .31622999906539917;
 HEAPF32[$11 + 20 >> 2] = $1307;
 $1313 = ($821 - $1242) * .6324599981307983 + ($1246 - $1248) * .31622999906539917;
 HEAPF32[$11 + 24 >> 2] = $1313;
 $1319 = ($853 - $1262) * .6324599981307983 + ($1266 - $1268) * .31622999906539917;
 HEAPF32[$11 + 28 >> 2] = $1319;
 $1326 = +HEAPF32[$1213 >> 2];
 $1328 = ($757 + $1295) * .5345199704170227 - ($1298 + $1209) * .26725998520851135 - $1326 * .5345199704170227;
 HEAPF32[$11 + 32 >> 2] = $1328;
 $1333 = +HEAPF32[$1225 >> 2];
 $1334 = +HEAPF32[$1227 >> 2];
 $1338 = +HEAPF32[$1232 >> 2];
 HEAPF32[$11 + 36 >> 2] = ($789 + +HEAPF32[$1221 >> 2]) * .5345199704170227 - ($1333 + $1334) * .26725998520851135 - $1338 * .5345199704170227;
 $1345 = +HEAPF32[$1245 >> 2];
 $1346 = +HEAPF32[$1247 >> 2];
 $1350 = +HEAPF32[$1252 >> 2];
 HEAPF32[$11 + 40 >> 2] = ($821 + +HEAPF32[$1241 >> 2]) * .5345199704170227 - ($1345 + $1346) * .26725998520851135 - $1350 * .5345199704170227;
 $1356 = $0 + 7388 | 0;
 if ((HEAP32[$23 >> 2] | 0) > 5) {
  $1359 = +HEAPF32[$11 >> 2];
  $1362 = $1282 * +HEAPF32[$1356 >> 2] + $1359 * ($28 * $1359);
  HEAPF32[$1356 >> 2] = $1362;
  $1363 = $0 + 7392 | 0;
  $1366 = +HEAPF32[$1240 >> 2];
  HEAPF32[$1363 >> 2] = $1282 * +HEAPF32[$1363 >> 2] + $1366 * ($28 * $1366);
  $1370 = $0 + 7396 | 0;
  $1373 = +HEAPF32[$1260 >> 2];
  HEAPF32[$1370 >> 2] = $1282 * +HEAPF32[$1370 >> 2] + $1373 * ($28 * $1373);
  $1377 = $0 + 7400 | 0;
  HEAPF32[$1377 >> 2] = $1282 * +HEAPF32[$1377 >> 2] + $1279 * ($28 * $1279);
  $1383 = $0 + 7404 | 0;
  HEAPF32[$1383 >> 2] = $1282 * +HEAPF32[$1383 >> 2] + $1301 * ($28 * $1301);
  $1389 = $0 + 7408 | 0;
  HEAPF32[$1389 >> 2] = $1282 * +HEAPF32[$1389 >> 2] + $1307 * ($28 * $1307);
  $1395 = $0 + 7412 | 0;
  HEAPF32[$1395 >> 2] = $1282 * +HEAPF32[$1395 >> 2] + $1313 * ($28 * $1313);
  $1401 = $0 + 7416 | 0;
  HEAPF32[$1401 >> 2] = $1282 * +HEAPF32[$1401 >> 2] + $1319 * ($28 * $1319);
  $1407 = $0 + 7420 | 0;
  HEAPF32[$1407 >> 2] = $1282 * +HEAPF32[$1407 >> 2] + $1328 * ($28 * $1328);
  $$pre$phi955Z2D = $1363;
  $$pre$phi957Z2D = $1370;
  $$pre$phi959Z2D = $1377;
  $$pre$phi961Z2D = $1383;
  $$pre$phi963Z2D = $1389;
  $$pre$phi965Z2D = $1395;
  $$pre$phi969Z2D = $1407;
  $1447 = $1362;
 } else {
  $$pre$phi955Z2D = $0 + 7392 | 0;
  $$pre$phi957Z2D = $0 + 7396 | 0;
  $$pre$phi959Z2D = $0 + 7400 | 0;
  $$pre$phi961Z2D = $0 + 7404 | 0;
  $$pre$phi963Z2D = $0 + 7408 | 0;
  $$pre$phi965Z2D = $0 + 7412 | 0;
  $$pre$phi969Z2D = $0 + 7420 | 0;
  $1447 = +HEAPF32[$1356 >> 2];
 }
 HEAPF32[$11 >> 2] = $757 - ($986 * .125 + 0.0 + $991 * .125 + $996 * .125 + $1001 * .125 + $1006 * .125 + $1011 * .125 + $1016 * .125 + $1017 * .125 + $1018 * .125 + $1023 * .125 + $1028 * .125 + $1033 * .125 + $1038 * .125 + $1043 * .125 + $1048 * .125 + $1053 * .125);
 HEAPF32[$1240 >> 2] = $789 - ($986 * .17592549324035645 + 0.0 + $991 * .1691650003194809 + $996 * .15590299665927887 + $1001 * .1366499960422516 + $1006 * .11214599758386612 + $1011 * .08333200216293335 + $1016 * .05131550133228302 + $1017 * .017326999455690384 + $1018 * -.017326999455690384 + $1023 * -.05131550133228302 + $1028 * -.08333200216293335 + $1033 * -.11214599758386612 + $1038 * -.1366499960422516 + $1043 * -.15590299665927887 + $1048 * -.1691650003194809 + $1053 * -.17592549324035645);
 HEAPF32[$1260 >> 2] = $821 - ($986 * .17338000237941742 + 0.0 + $991 * .1469845026731491 + $996 * .09821200370788574 + $1001 * .03448750078678131 + $1006 * -.03448750078678131 + $1011 * -.09821200370788574 + $1016 * -.1469845026731491 + $1017 * -.17338000237941742 + $1018 * -.17338000237941742 + $1023 * -.1469845026731491 + $1028 * -.09821200370788574 + $1033 * -.03448750078678131 + $1038 * .03448750078678131 + $1043 * .09821200370788574 + $1048 * .1469845026731491 + $1053 * .17338000237941742);
 HEAPF32[$1280 >> 2] = $853 - ($986 * .1691650003194809 + 0.0 + $991 * .11214599758386612 + $996 * .017326999455690384 + $1001 * -.08333200216293335 + $1006 * -.15590299665927887 + $1011 * -.17592549324035645 + $1016 * -.1366499960422516 + $1017 * -.05131550133228302 + $1018 * .05131550133228302 + $1023 * .1366499960422516 + $1028 * .17592549324035645 + $1033 * .15590299665927887 + $1038 * .08333200216293335 + $1043 * -.017326999455690384 + $1048 * -.11214599758386612 + $1053 * -.1691650003194809);
 HEAPF32[$1202 >> 2] = $1209;
 HEAPF32[$1208 >> 2] = $1326;
 HEAPF32[$1213 >> 2] = $1298;
 HEAPF32[$1206 >> 2] = $757;
 HEAPF32[$1221 >> 2] = $1334;
 HEAPF32[$1227 >> 2] = $1338;
 HEAPF32[$1232 >> 2] = $1333;
 HEAPF32[$1225 >> 2] = $789;
 HEAPF32[$1241 >> 2] = $1346;
 HEAPF32[$1247 >> 2] = $1350;
 HEAPF32[$1252 >> 2] = $1345;
 HEAPF32[$1245 >> 2] = $821;
 HEAP32[$1261 >> 2] = HEAP32[$1267 >> 2];
 HEAPF32[$1267 >> 2] = $1273;
 HEAP32[$1272 >> 2] = HEAP32[$1265 >> 2];
 HEAPF32[$1265 >> 2] = $853;
 $1419 = $0 + 7308 | 0;
 HEAP32[$0 + 7340 >> 2] = HEAP32[$1419 >> 2];
 $1422 = $0 + 7276 | 0;
 HEAP32[$1419 >> 2] = HEAP32[$1422 >> 2];
 $1424 = $0 + 7244 | 0;
 HEAP32[$1422 >> 2] = HEAP32[$1424 >> 2];
 HEAPF32[$1424 >> 2] = $718 * .3266409933567047 + 0.0 + $720 * .13529899716377258 + $$pre919 * -.13529899716377258 + $$pre921 * -.3266409933567047 + $$pre923 * -.3266409933567047 + $$pre925 * -.13529899716377258 + $$pre927 * .13529899716377258 + $$pre929 * .3266409933567047 + $$pre931 * .3266409933567047 + $$pre933 * .13529899716377258 + $$pre935 * -.13529899716377258 + $$pre937 * -.3266409933567047 + $$pre939 * -.3266409933567047 + $$pre941 * -.13529899716377258 + $722 * .13529899716377258 + $724 * .3266409933567047;
 $1426 = $0 + 7312 | 0;
 HEAP32[$0 + 7344 >> 2] = HEAP32[$1426 >> 2];
 $1429 = $0 + 7280 | 0;
 HEAP32[$1426 >> 2] = HEAP32[$1429 >> 2];
 $1431 = $0 + 7248 | 0;
 HEAP32[$1429 >> 2] = HEAP32[$1431 >> 2];
 HEAPF32[$1431 >> 2] = $718 * .31180599331855774 + 0.0 + $720 * .03465399891138077 + $$pre919 * -.2732999920845032 + $$pre921 * -.3383300006389618 + $$pre923 * -.10263100266456604 + $$pre925 * .22429199516773224 + $$pre927 * .3518509864807129 + $$pre929 * .1666640043258667 + $$pre931 * -.1666640043258667 + $$pre933 * -.3518509864807129 + $$pre935 * -.22429199516773224 + $$pre937 * .10263100266456604 + $$pre939 * .3383300006389618 + $$pre941 * .2732999920845032 + $722 * -.03465399891138077 + $724 * -.31180599331855774;
 $1433 = $0 + 7316 | 0;
 HEAP32[$0 + 7348 >> 2] = HEAP32[$1433 >> 2];
 $1436 = $0 + 7284 | 0;
 HEAP32[$1433 >> 2] = HEAP32[$1436 >> 2];
 $1438 = $0 + 7252 | 0;
 HEAP32[$1436 >> 2] = HEAP32[$1438 >> 2];
 HEAPF32[$1438 >> 2] = $718 * .2939690053462982 + 0.0 + $720 * -.06897500157356262 + $$pre919 * -.34676000475883484 + $$pre921 * -.19642400741577148 + $$pre923 * .19642400741577148 + $$pre925 * .34676000475883484 + $$pre927 * .06897500157356262 + $$pre929 * -.2939690053462982 + $$pre931 * -.2939690053462982 + $$pre933 * .06897500157356262 + $$pre935 * .34676000475883484 + $$pre937 * .19642400741577148 + $$pre939 * -.19642400741577148 + $$pre941 * -.34676000475883484 + $722 * -.06897500157356262 + $724 * .2939690053462982;
 $1440 = $0 + 7320 | 0;
 HEAP32[$0 + 7352 >> 2] = HEAP32[$1440 >> 2];
 $1443 = $0 + 7288 | 0;
 HEAP32[$1440 >> 2] = HEAP32[$1443 >> 2];
 $1445 = $0 + 7256 | 0;
 HEAP32[$1443 >> 2] = HEAP32[$1445 >> 2];
 HEAPF32[$1445 >> 2] = $718 * .2732999920845032 + 0.0 + $720 * -.1666640043258667 + $$pre919 * -.3383300006389618 + $$pre921 * .03465399891138077 + $$pre923 * .3518509864807129 + $$pre925 * .10263100266456604 + $$pre927 * -.31180599331855774 + $$pre929 * -.22429199516773224 + $$pre931 * .22429199516773224 + $$pre933 * .31180599331855774 + $$pre935 * -.10263100266456604 + $$pre937 * -.3518509864807129 + $$pre939 * -.03465399891138077 + $$pre941 * .3383300006389618 + $722 * .1666640043258667 + $724 * -.2732999920845032;
 HEAPF32[$11 + 44 >> 2] = +Math_sqrt(+$1447) + -5.6849470138549805;
 HEAPF32[$11 + 48 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi955Z2D >> 2])) + -3.475287914276123;
 HEAPF32[$11 + 52 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi957Z2D >> 2])) + -1.7706340551376343;
 HEAPF32[$11 + 56 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi959Z2D >> 2])) + -1.599784016609192;
 HEAPF32[$11 + 60 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi961Z2D >> 2])) + -3.7732150554656982;
 HEAPF32[$11 + 64 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi963Z2D >> 2])) + -2.1633129119873047;
 HEAPF32[$11 + 68 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi965Z2D >> 2])) + -1.260756015777588;
 HEAPF32[$11 + 76 >> 2] = +Math_sqrt(+(+HEAPF32[$$pre$phi969Z2D >> 2])) + -1.9187949895858765;
 HEAPF32[$11 + 72 >> 2] = $665 + -.7799999713897705;
 HEAPF32[$11 + 80 >> 2] = +HEAPF32[$1201 >> 2] + -.15472300350666046;
 HEAPF32[$11 + 84 >> 2] = +HEAPF32[$166 >> 2] + -.7246429920196533;
 HEAPF32[$11 + 88 >> 2] = $$0726830 / 18.0 + -.7437170147895813;
 HEAPF32[$11 + 92 >> 2] = +HEAPF32[$1194 >> 2] + .06921599805355072;
 HEAPF32[$11 + 96 >> 2] = +HEAPF32[$712 >> 2] + -.06792999804019928;
 _compute_dense(39284, $18, $11);
 $1495 = $0 + 7460 | 0;
 _compute_gru($1495, $18);
 _compute_dense(39304, $12, $1495);
 HEAP32[$0 + 7600 + ($59 << 6) + 36 >> 2] = HEAP32[$12 + 4 >> 2];
 HEAP32[$0 + 7600 + ($59 << 6) + 20 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$0 + 7600 + ($59 << 6) + 32 >> 2] = $spec$select765;
 HEAP32[$611 >> 2] = $spec$select765;
 HEAPF32[$0 + 7600 + ($59 << 6) + 12 >> 2] = $1184;
 HEAP32[$84 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _silk_Encode($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$ = 0, $$0 = 0, $$0$us = 0, $$0503 = 0, $$0503$us = 0, $$0504 = 0, $$0505 = 0, $$0507 = 0, $$0508 = 0, $$0509631 = 0, $$0509631$us = 0, $$0511617 = 0, $$0511617$us = 0, $$0515 = 0, $$0516 = 0, $$0517$lcssa = 0, $$0517608 = 0, $$0519 = 0, $$0519668669 = 0, $$0519668670 = 0, $$0520$lcssa = 0, $$0520571 = 0, $$0521 = 0, $$0521$us = 0, $$0522 = 0, $$0524 = 0, $$0524667671 = 0, $$0524667672 = 0, $$1 = 0, $$1$us = 0, $$10598 = 0, $$10598$us = 0, $$11609 = 0, $$12557 = 0, $$1510628 = 0, $$1512572 = 0, $$1523 = 0, $$2513587 = 0, $$2620 = 0, $$2620$us = 0, $$3514603 = 0, $$3563 = 0, $$4567 = 0, $$5558 = 0, $$6560 = 0, $$7577 = 0, $$8582 = 0, $$8582$us = 0, $$9593 = 0, $$idx538 = 0, $$idx539 = 0, $$lcssa548 = 0, $$lcssa553 = 0, $$pre$phi23Z2D = 0, $$pre$phi27Z2D = 0, $$pre$phi662Z2D = 0, $$pre$phi666Z2D = 0, $$sroa$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx22$us = 0, $$sroa$2$0 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $128 = 0, $134 = 0, $135 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $210 = 0, $211 = 0, $213 = 0, $215 = 0, $218 = 0, $221 = 0, $222 = 0, $236 = 0, $237 = 0, $239 = 0, $252 = 0, $260 = 0, $279 = 0, $281 = 0, $296 = 0, $303 = 0, $308 = 0, $309 = 0, $312 = 0, $326 = 0, $329 = 0, $334 = 0, $346 = 0, $350 = 0, $352 = 0, $353 = 0, $355 = 0, $356 = 0, $357 = 0, $361 = 0, $378 = 0, $379 = 0, $383 = 0, $39 = 0, $403 = 0, $407 = 0, $409 = 0, $414 = 0, $415 = 0, $417 = 0, $421 = 0, $426 = 0, $427 = 0, $429 = 0, $44 = 0, $444 = 0, $45 = 0, $451 = 0, $452 = 0, $458 = 0, $465 = 0, $473 = 0, $474 = 0, $475 = 0, $477 = 0, $478 = 0, $480 = 0, $481 = 0, $482 = 0, $484 = 0, $488 = 0, $489 = 0, $49 = 0, $492 = 0, $497 = 0, $505 = 0, $511 = 0, $519 = 0, $520 = 0, $523 = 0, $528 = 0, $536 = 0, $542 = 0, $551 = 0, $554 = 0, $556 = 0, $561 = 0, $563 = 0, $567 = 0, $580 = 0, $585 = 0, $589 = 0, $60 = 0, $602 = 0, $609 = 0, $62 = 0, $620 = 0, $629 = 0, $63 = 0, $643 = 0, $644 = 0, $645 = 0, $66 = 0, $67 = 0, $69 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 16 | 0;
 $$sroa$0 = sp;
 $9 = sp + 24 | 0;
 if (HEAP32[$1 + 68 >> 2] | 0) {
  HEAP32[$0 + 4664 >> 2] = 1;
  HEAP32[$0 + 14728 >> 2] = 1;
 }
 $15 = $0 + 10064 | 0;
 HEAP32[$0 + 15812 >> 2] = 0;
 $17 = $0 + 5748 | 0;
 HEAP32[$17 >> 2] = 0;
 _check_control_input($1);
 HEAP32[$1 + 88 >> 2] = 0;
 $19 = $1 + 4 | 0;
 $21 = $0 + 20196 | 0;
 if ((HEAP32[$19 >> 2] | 0) > (HEAP32[$21 >> 2] | 0)) {
  _silk_init_encoder($15, HEAP32[$0 + 5092 >> 2] | 0);
  HEAP32[$0 + 20128 >> 2] = 0;
  HEAP32[$0 + 20136 >> 2] = 0;
  HEAP32[$0 + 20140 >> 2] = 0;
  HEAP32[$0 + 20144 >> 2] = 1;
  HEAP32[$0 + 20148 >> 2] = 0;
  HEAP32[$0 + 20152 >> 2] = 1;
  HEAP16[$0 + 20158 >> 1] = 0;
  HEAP16[$0 + 20156 >> 1] = 16384;
  if ((HEAP32[$0 + 20192 >> 2] | 0) == 2) {
   _memcpy($0 + 15840 | 0, $0 + 5776 | 0, 300) | 0;
   $39 = $0;
   $44 = HEAP32[$39 + 4 >> 2] | 0;
   $45 = $15;
   HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
   HEAP32[$45 + 4 >> 2] = $44;
  }
 }
 $49 = $1 + 24 | 0;
 if ((HEAP32[$49 >> 2] | 0) == (HEAP32[$0 + 4612 >> 2] | 0)) $643 = (HEAP32[$21 >> 2] | 0) != (HEAP32[$19 >> 2] | 0); else $643 = 1;
 HEAP32[$0 + 20192 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$19 >> 2];
 $60 = $3 * 100 | 0;
 $62 = HEAP32[$1 + 8 >> 2] | 0;
 $63 = ($60 | 0) / ($62 | 0) | 0;
 $66 = ($63 | 0) > 1 ? $63 >> 1 : 1;
 $67 = ($6 | 0) != 0;
 do if ($67) {
  if (($63 | 0) != 1) _celt_fatal(47580, 42792, 206);
  $69 = ($6 | 0) == 2;
  if ($69) {
   $$sroa$0$0$$sroa_idx = $0 + 16 | 0;
   HEAP32[$$sroa$0 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx >> 2];
   HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx + 4 >> 2];
   HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx + 8 >> 2];
   HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx + 12 >> 2];
   $$sroa$2$0 = HEAP32[$0 + 4576 >> 2] | 0;
  } else $$sroa$2$0 = 0;
  if ((HEAP32[$19 >> 2] | 0) <= 0) {
   $74 = HEAP32[$49 >> 2] | 0;
   HEAP32[$49 >> 2] = 10;
   $75 = $1 + 36 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   HEAP32[$75 >> 2] = 0;
   $$0519668670 = $74;
   $$0524667672 = $76;
   label = 49;
   break;
  }
  if ($69) {
   $$0509631$us = 0;
   do {
    _silk_init_encoder($0 + ($$0509631$us * 10064 | 0) | 0, HEAP32[$0 + ($$0509631$us * 10064 | 0) + 5092 >> 2] | 0);
    $$sroa$0$0$$sroa_idx22$us = $0 + ($$0509631$us * 10064 | 0) + 16 | 0;
    HEAP32[$$sroa$0$0$$sroa_idx22$us >> 2] = HEAP32[$$sroa$0 >> 2];
    HEAP32[$$sroa$0$0$$sroa_idx22$us + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
    HEAP32[$$sroa$0$0$$sroa_idx22$us + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
    HEAP32[$$sroa$0$0$$sroa_idx22$us + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
    HEAP32[$0 + ($$0509631$us * 10064 | 0) + 32 >> 2] = $$sroa$2$0;
    $$0509631$us = $$0509631$us + 1 | 0;
    $81 = HEAP32[$19 >> 2] | 0;
   } while (($$0509631$us | 0) < ($81 | 0));
   $92 = $81;
  } else {
   $$0509631 = 0;
   do {
    _silk_init_encoder($0 + ($$0509631 * 10064 | 0) | 0, HEAP32[$0 + ($$0509631 * 10064 | 0) + 5092 >> 2] | 0);
    $$0509631 = $$0509631 + 1 | 0;
    $87 = HEAP32[$19 >> 2] | 0;
   } while (($$0509631 | 0) < ($87 | 0));
   $92 = $87;
  }
  $89 = HEAP32[$49 >> 2] | 0;
  HEAP32[$49 >> 2] = 10;
  $90 = $1 + 36 | 0;
  $91 = HEAP32[$90 >> 2] | 0;
  HEAP32[$90 >> 2] = 0;
  if (($92 | 0) > 0) {
   $$1510628 = 0;
   do {
    HEAP32[$0 + ($$1510628 * 10064 | 0) + 4668 >> 2] = 0;
    HEAP32[$0 + ($$1510628 * 10064 | 0) + 4680 >> 2] = 1;
    $$1510628 = $$1510628 + 1 | 0;
    $97 = HEAP32[$19 >> 2] | 0;
   } while (($$1510628 | 0) < ($97 | 0));
   $$0519 = $89;
   $$0524 = $91;
   $106 = $97;
   label = 28;
  } else {
   $$0519668670 = $89;
   $$0524667672 = $91;
   label = 49;
  }
 } else {
  if (($3 | 0) < 0 | (Math_imul($63, $62) | 0) != ($60 | 0)) _celt_fatal(47580, 42792, 235);
  if (($3 * 1e3 | 0) > (Math_imul(HEAP32[$49 >> 2] | 0, $62) | 0)) _celt_fatal(47580, 42792, 241); else {
   $$0519 = 0;
   $$0524 = 0;
   $106 = HEAP32[$19 >> 2] | 0;
   label = 28;
   break;
  }
 } while (0);
 if ((label | 0) == 28) if (($106 | 0) > 0) {
  $108 = $0 + 4576 | 0;
  $109 = $0 + 20208 | 0;
  $110 = $0 + 5744 | 0;
  L43 : do if ($643) {
   $$2620$us = 0;
   while (1) {
    if (($$2620$us | 0) == 1) $115 = HEAP32[$108 >> 2] | 0; else $115 = 0;
    $116 = _silk_control_encoder($0 + ($$2620$us * 10064 | 0) | 0, $1, HEAP32[$109 >> 2] | 0, $$2620$us, $115) | 0;
    if ($116 | 0) {
     $$0505 = $116;
     break;
    }
    if ((HEAP32[$110 >> 2] | 0) > 0) {
     $$0511617$us = 0;
     do {
      HEAP32[$0 + ($$2620$us * 10064 | 0) + 4724 + ($$0511617$us << 2) >> 2] = 0;
      $$0511617$us = $$0511617$us + 1 | 0;
     } while (($$0511617$us | 0) < (HEAP32[$110 >> 2] | 0));
    }
    HEAP32[$0 + ($$2620$us * 10064 | 0) + 6080 >> 2] = HEAP32[$0 + ($$2620$us * 10064 | 0) + 6076 >> 2];
    $$2620$us = $$2620$us + 1 | 0;
    $128 = HEAP32[$19 >> 2] | 0;
    if (($$2620$us | 0) >= ($128 | 0)) {
     $$lcssa553 = $128;
     break L43;
    }
   }
   STACKTOP = sp;
   return $$0505 | 0;
  } else {
   $$2620 = 0;
   while (1) {
    if (($$2620 | 0) == 1) $134 = HEAP32[$108 >> 2] | 0; else $134 = 0;
    $135 = _silk_control_encoder($0 + ($$2620 * 10064 | 0) | 0, $1, HEAP32[$109 >> 2] | 0, $$2620, $134) | 0;
    if ($135 | 0) {
     $$0505 = $135;
     break;
    }
    if (HEAP32[$0 + ($$2620 * 10064 | 0) + 4664 >> 2] | 0) if ((HEAP32[$110 >> 2] | 0) > 0) {
     $$0511617 = 0;
     do {
      HEAP32[$0 + ($$2620 * 10064 | 0) + 4724 + ($$0511617 << 2) >> 2] = 0;
      $$0511617 = $$0511617 + 1 | 0;
     } while (($$0511617 | 0) < (HEAP32[$110 >> 2] | 0));
    }
    HEAP32[$0 + ($$2620 * 10064 | 0) + 6080 >> 2] = HEAP32[$0 + ($$2620 * 10064 | 0) + 6076 >> 2];
    $$2620 = $$2620 + 1 | 0;
    $150 = HEAP32[$19 >> 2] | 0;
    if (($$2620 | 0) >= ($150 | 0)) {
     $$lcssa553 = $150;
     break L43;
    }
   }
   STACKTOP = sp;
   return $$0505 | 0;
  } while (0);
  if (($$lcssa553 | 0) == 1) {
   $$0519668669 = $$0519;
   $$0524667671 = $$0524;
   $$pre$phi23Z2D = $109;
   $$pre$phi27Z2D = $110;
   $$pre$phi662Z2D = $108;
   $$pre$phi666Z2D = $0 + 14640 | 0;
   $160 = HEAP32[$108 >> 2] | 0;
  } else {
   $$0519668670 = $$0519;
   $$0524667672 = $$0524;
   label = 49;
  }
 } else {
  $$0519668670 = $$0519;
  $$0524667672 = $$0524;
  label = 49;
 }
 do if ((label | 0) == 49) {
  $153 = $0 + 4576 | 0;
  $154 = HEAP32[$153 >> 2] | 0;
  $155 = $0 + 14640 | 0;
  if (($154 | 0) == (HEAP32[$155 >> 2] | 0)) {
   $$0519668669 = $$0519668670;
   $$0524667671 = $$0524667672;
   $$pre$phi23Z2D = $0 + 20208 | 0;
   $$pre$phi27Z2D = $0 + 5744 | 0;
   $$pre$phi662Z2D = $153;
   $$pre$phi666Z2D = $155;
   $160 = $154;
   break;
  } else _celt_fatal(42807, 42792, 262);
 } while (0);
 $158 = $63 * 10 | 0;
 $159 = Math_imul($160, $158) | 0;
 $161 = $0 + 4556 | 0;
 $165 = (Math_imul($159, HEAP32[$161 >> 2] | 0) | 0) / ($160 * 1e3 | 0) | 0;
 $166 = _llvm_stacksave() | 0;
 $167 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($165 << 1) | 0) + 15 & -16) | 0;
 $168 = $0 + 4584 | 0;
 $169 = $0 + 5740 | 0;
 $170 = $0 + 5776 | 0;
 $171 = $0 + 5096 | 0;
 $172 = $0 + 20200 | 0;
 $173 = $0 + 15840 | 0;
 $174 = $0 + 14648 | 0;
 $175 = $0 + 15804 | 0;
 $176 = $0 + 15160 | 0;
 $177 = $1 + 28 | 0;
 $178 = $0 + 20188 | 0;
 $179 = $0 + 20184 | 0;
 $180 = $0 + 20162 | 0;
 $181 = $0 + 14788 | 0;
 $182 = $0 + 20180 | 0;
 $$idx538 = $4 + 20 | 0;
 $$idx539 = $4 + 28 | 0;
 $183 = $0 + 20128 | 0;
 $184 = $0 + 5100 | 0;
 $185 = $0 + 15164 | 0;
 $186 = $0 + 4532 | 0;
 $187 = $1 + 60 | 0;
 $188 = $0 + 20132 | 0;
 $189 = $0 + 20212 | 0;
 $190 = $0 + 14784 | 0;
 $191 = $1 + 56 | 0;
 $192 = ($66 | 0) == 2;
 $193 = $1 + 52 | 0;
 $194 = $66 + -1 | 0;
 $195 = ($66 | 0) == 3;
 $196 = $8 + 4 | 0;
 $197 = $66 << 1;
 $198 = $0 + 17232 | 0;
 $199 = $0 + 10212 | 0;
 $200 = $0 + 10080 | 0;
 $201 = $0 + 14608 | 0;
 $202 = $0 + 14540 | 0;
 $203 = $0 + 14605 | 0;
 $204 = $0 + 14556 | 0;
 $205 = $0 + 14728 | 0;
 $206 = $0 + 6080 | 0;
 $207 = $0 + 20204 | 0;
 $208 = $0 + 16144 | 0;
 $$0507 = $2;
 $$0508 = $3;
 $$0515 = 0;
 L79 : while (1) {
  $210 = HEAP32[$169 >> 2] | 0;
  $211 = (HEAP32[$168 >> 2] | 0) - $210 | 0;
  $213 = ($211 | 0) < ($159 | 0) ? $211 : $159;
  $215 = Math_imul($213, HEAP32[$161 >> 2] | 0) | 0;
  $218 = ($215 | 0) / ((HEAP32[$$pre$phi662Z2D >> 2] | 0) * 1e3 | 0) | 0;
  L81 : do switch (HEAP32[$1 >> 2] | 0) {
  case 2:
   {
    switch (HEAP32[$19 >> 2] | 0) {
    case 2:
     {
      $221 = HEAP32[$17 >> 2] | 0;
      $222 = ($218 | 0) > 0;
      if ($222) {
       $$3563 = 0;
       do {
        HEAP16[$167 + ($$3563 << 1) >> 1] = HEAP16[$$0507 + ($$3563 << 1 << 1) >> 1] | 0;
        $$3563 = $$3563 + 1 | 0;
       } while (($$3563 | 0) != ($218 | 0));
      }
      if (($221 | 0) == 0 & (HEAP32[$172 >> 2] | 0) == 1) _memcpy($173 | 0, $170 | 0, 300) | 0;
      _silk_resampler($170, $171 + ($210 + 2 << 1) | 0, $167, $218);
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $213;
      $236 = HEAP32[$175 >> 2] | 0;
      $237 = (HEAP32[$174 >> 2] | 0) - $236 | 0;
      $239 = Math_imul(HEAP32[$$pre$phi666Z2D >> 2] | 0, $158) | 0;
      $$ = ($237 | 0) < ($239 | 0) ? $237 : $239;
      if ($222) {
       $$4567 = 0;
       do {
        HEAP16[$167 + ($$4567 << 1) >> 1] = HEAP16[$$0507 + (($$4567 << 1 | 1) << 1) >> 1] | 0;
        $$4567 = $$4567 + 1 | 0;
       } while (($$4567 | 0) != ($218 | 0));
      }
      _silk_resampler($173, $176 + ($236 + 2 << 1) | 0, $167, $218);
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $$;
      $309 = HEAP32[$169 >> 2] | 0;
      break L81;
      break;
     }
    case 1:
     {
      if (($218 | 0) > 0) {
       $$5558 = 0;
       do {
        $252 = $$5558 << 1;
        $260 = (HEAP16[$$0507 + (($252 | 1) << 1) >> 1] | 0) + (HEAP16[$$0507 + ($252 << 1) >> 1] | 0) | 0;
        HEAP16[$167 + ($$5558 << 1) >> 1] = ($260 >>> 1) + ($260 & 1);
        $$5558 = $$5558 + 1 | 0;
       } while (($$5558 | 0) != ($218 | 0));
      }
      _silk_resampler($170, $171 + ($210 + 2 << 1) | 0, $167, $218);
      if ((HEAP32[$172 >> 2] | 0) == 2) if (!(HEAP32[$17 >> 2] | 0)) {
       _silk_resampler($173, $176 + ((HEAP32[$175 >> 2] | 0) + 2 << 1) | 0, $167, $218);
       if ((HEAP32[$168 >> 2] | 0) > 0) {
        $$6560 = 0;
        do {
         $279 = $$6560 + 2 | 0;
         $281 = $171 + ($279 + (HEAP32[$169 >> 2] | 0) << 1) | 0;
         HEAP16[$281 >> 1] = ((HEAP16[$176 + ($279 + (HEAP32[$175 >> 2] | 0) << 1) >> 1] | 0) + (HEAP16[$281 >> 1] | 0) | 0) >>> 1;
         $$6560 = $$6560 + 1 | 0;
        } while (($$6560 | 0) < (HEAP32[$168 >> 2] | 0));
       }
      }
      $296 = (HEAP32[$169 >> 2] | 0) + $213 | 0;
      HEAP32[$169 >> 2] = $296;
      $309 = $296;
      break L81;
      break;
     }
    default:
     {
      label = 74;
      break L79;
     }
    }
    break;
   }
  case 1:
   {
    if ((HEAP32[$19 >> 2] | 0) != 1) {
     label = 74;
     break L79;
    }
    _memcpy($167 | 0, $$0507 | 0, $218 << 1 | 0) | 0;
    _silk_resampler($170, $171 + ($210 + 2 << 1) | 0, $167, $218);
    $303 = (HEAP32[$169 >> 2] | 0) + $213 | 0;
    HEAP32[$169 >> 2] = $303;
    $309 = $303;
    break;
   }
  default:
   {
    label = 74;
    break L79;
   }
  } while (0);
  $$0507 = $$0507 + ((Math_imul(HEAP32[$1 >> 2] | 0, $218) | 0) << 1) | 0;
  $$0508 = $$0508 - $218 | 0;
  HEAP32[$$pre$phi23Z2D >> 2] = 0;
  $308 = HEAP32[$168 >> 2] | 0;
  if (($309 | 0) < ($308 | 0)) {
   $602 = 0;
   break;
  }
  if (($309 | 0) != ($308 | 0)) {
   label = 78;
   break;
  }
  $312 = HEAP32[$19 >> 2] | 0;
  if (($312 | 0) != 1) if ((HEAP32[$175 >> 2] | 0) != (HEAP32[$174 >> 2] | 0)) {
   label = 81;
   break;
  }
  if (!(HEAP32[$17 >> 2] | $6)) {
   HEAP16[$9 >> 1] = 0;
   HEAP8[$9 >> 0] = 0 - (256 >>> (Math_imul((HEAP32[$$pre$phi27Z2D >> 2] | 0) + 1 | 0, $312) | 0));
   _ec_enc_icdf($4, 0, $9, 8);
   $326 = HEAP32[$19 >> 2] | 0;
   if (($326 | 0) > 0) {
    $$7577 = 0;
    do {
     $329 = HEAP32[$0 + ($$7577 * 10064 | 0) + 5744 >> 2] | 0;
     if (($329 | 0) > 0) {
      $$0520571 = 0;
      $$1512572 = 0;
      while (1) {
       $334 = HEAP32[$0 + ($$7577 * 10064 | 0) + 4724 + ($$1512572 << 2) >> 2] << $$1512572 | $$0520571;
       $$1512572 = $$1512572 + 1 | 0;
       if (($$1512572 | 0) == ($329 | 0)) {
        $$0520$lcssa = $334;
        break;
       } else $$0520571 = $334;
      }
     } else $$0520$lcssa = 0;
     HEAP8[$0 + ($$7577 * 10064 | 0) + 4723 >> 0] = ($$0520$lcssa | 0) > 0 & 1;
     if (($$0520$lcssa | 0) != 0 & ($329 | 0) > 1) _ec_enc_icdf($4, $$0520$lcssa + -1 | 0, HEAP32[39276 + ($329 + -2 << 2) >> 2] | 0, 8);
     $$7577 = $$7577 + 1 | 0;
     $346 = HEAP32[$19 >> 2] | 0;
    } while (($$7577 | 0) < ($346 | 0));
    $644 = $346;
   } else $644 = $326;
   if ((HEAP32[$$pre$phi27Z2D >> 2] | 0) > 0) {
    $$2513587 = 0;
    $350 = $644;
    while (1) {
     L138 : do if (($350 | 0) > 0) {
      $352 = $180 + ($$2513587 * 6 | 0) | 0;
      $353 = $181 + ($$2513587 << 2) | 0;
      $355 = $182 + $$2513587 | 0;
      $356 = $$2513587 + -1 | 0;
      if (!$$2513587) {
       $$8582$us = 0;
       $361 = $350;
       while (1) {
        $357 = $0 + ($$8582$us * 10064 | 0) | 0;
        if (!(HEAP32[$0 + ($$8582$us * 10064 | 0) + 4724 >> 2] | 0)) $378 = $361; else {
         do if (($$8582$us | 0) == 0 & ($361 | 0) == 2) {
          _silk_stereo_encode_pred($4, $352);
          if (HEAP32[$353 >> 2] | 0) break;
          _silk_stereo_encode_mid_only($4, HEAP8[$355 >> 0] | 0);
         } while (0);
         _silk_encode_indices($357, $4, 0, 1, 0);
         _silk_encode_pulses($4, HEAP8[$0 + ($$8582$us * 10064 | 0) + 6129 >> 0] | 0, HEAP8[$0 + ($$8582$us * 10064 | 0) + 6130 >> 0] | 0, $0 + ($$8582$us * 10064 | 0) + 6208 | 0, HEAP32[$0 + ($$8582$us * 10064 | 0) + 4584 >> 2] | 0);
         $378 = HEAP32[$19 >> 2] | 0;
        }
        $$8582$us = $$8582$us + 1 | 0;
        if (($$8582$us | 0) >= ($378 | 0)) {
         $645 = $378;
         break L138;
        } else $361 = $378;
       }
      }
      $$8582 = 0;
      $383 = $350;
      while (1) {
       $379 = $0 + ($$8582 * 10064 | 0) | 0;
       if (!(HEAP32[$0 + ($$8582 * 10064 | 0) + 4724 + ($$2513587 << 2) >> 2] | 0)) $403 = $383; else {
        do if (($$8582 | 0) == 0 & ($383 | 0) == 2) {
         _silk_stereo_encode_pred($4, $352);
         if (HEAP32[$353 >> 2] | 0) break;
         _silk_stereo_encode_mid_only($4, HEAP8[$355 >> 0] | 0);
        } while (0);
        if (!(HEAP32[$0 + ($$8582 * 10064 | 0) + 4724 + ($356 << 2) >> 2] | 0)) _silk_encode_indices($379, $4, $$2513587, 1, 0); else _silk_encode_indices($379, $4, $$2513587, 1, 2);
        _silk_encode_pulses($4, HEAP8[$0 + ($$8582 * 10064 | 0) + 6100 + ($$2513587 * 36 | 0) + 29 >> 0] | 0, HEAP8[$0 + ($$8582 * 10064 | 0) + 6100 + ($$2513587 * 36 | 0) + 30 >> 0] | 0, $0 + ($$8582 * 10064 | 0) + 6208 + ($$2513587 * 320 | 0) | 0, HEAP32[$0 + ($$8582 * 10064 | 0) + 4584 >> 2] | 0);
        $403 = HEAP32[$19 >> 2] | 0;
       }
       $$8582 = $$8582 + 1 | 0;
       if (($$8582 | 0) >= ($403 | 0)) {
        $645 = $403;
        break;
       } else $383 = $403;
      }
     } else $645 = $350; while (0);
     $$2513587 = $$2513587 + 1 | 0;
     if (($$2513587 | 0) >= (HEAP32[$$pre$phi27Z2D >> 2] | 0)) {
      $407 = $645;
      break;
     } else $350 = $645;
    }
   } else $407 = $644;
   if (($407 | 0) > 0) {
    $$9593 = 0;
    do {
     $409 = $0 + ($$9593 * 10064 | 0) + 4724 | 0;
     HEAP32[$409 >> 2] = 0;
     HEAP32[$409 + 4 >> 2] = 0;
     HEAP32[$409 + 8 >> 2] = 0;
     $$9593 = $$9593 + 1 | 0;
    } while (($$9593 | 0) < (HEAP32[$19 >> 2] | 0));
   }
   HEAP32[$179 >> 2] = _ec_tell_213(HEAP32[$$idx538 >> 2] | 0, HEAP32[$$idx539 >> 2] | 0) | 0;
  }
  _silk_HP_variable_cutoff($0);
  $414 = HEAP32[$177 >> 2] | 0;
  $415 = HEAP32[$49 >> 2] | 0;
  $417 = (Math_imul($415, $414) | 0) / 1e3 | 0;
  if ($67) $$0516 = $417; else $$0516 = $417 - (HEAP32[$179 >> 2] | 0) | 0;
  $421 = ($$0516 | 0) / (HEAP32[$$pre$phi27Z2D >> 2] | 0) | 0;
  $$0522 = Math_imul($421 << 16 >> 16, ($415 | 0) == 10 ? 100 : 50) | 0;
  $426 = $$0522 - (HEAP32[$178 >> 2] << 1) | 0;
  if ($67) $$1523 = $426; else {
   $427 = HEAP32[$17 >> 2] | 0;
   if (($427 | 0) > 0) {
    $429 = _ec_tell_213(HEAP32[$$idx538 >> 2] | 0, HEAP32[$$idx539 >> 2] | 0) | 0;
    $$1523 = $426 - ($429 - (Math_imul($427, $421) | 0) - (HEAP32[$179 >> 2] | 0) << 1) | 0;
   } else $$1523 = $426;
  }
  if (($414 | 0) > 5e3) $451 = ($$1523 | 0) > ($414 | 0) ? $414 : ($$1523 | 0) > 5e3 ? $$1523 : 5e3; else $451 = ($$1523 | 0) > 5e3 ? 5e3 : ($$1523 | 0) < ($414 | 0) ? $414 : $$1523;
  if ((HEAP32[$19 >> 2] | 0) == 2) {
   $444 = HEAP32[$17 >> 2] | 0;
   _silk_stereo_LR_to_MS($183, $184, $185, $180 + ($444 * 6 | 0) | 0, $182 + $444 | 0, $8, $451, HEAP32[$186 >> 2] | 0, HEAP32[$187 >> 2] | 0, HEAP32[$$pre$phi662Z2D >> 2] | 0, HEAP32[$168 >> 2] | 0);
   $452 = HEAP32[$17 >> 2] | 0;
   if (!(HEAP8[$182 + $452 >> 0] | 0)) {
    if ((HEAP32[$189 >> 2] | 0) == 1) {
     HEAP32[$198 >> 2] = 0;
     HEAP32[$198 + 4 >> 2] = 0;
     HEAP32[$198 + 8 >> 2] = 0;
     $458 = $200;
     HEAP32[$458 >> 2] = 0;
     HEAP32[$458 + 4 >> 2] = 0;
     _memset($199 | 0, 0, 4384) | 0;
     HEAP32[$201 >> 2] = 100;
     HEAP32[$202 >> 2] = 100;
     HEAP8[$198 >> 0] = 10;
     HEAP8[$203 >> 0] = 0;
     HEAP32[$204 >> 2] = 65536;
     HEAP32[$205 >> 2] = 1;
    }
    _silk_encode_do_VAD_FLP($15, $7);
   } else HEAP8[$190 + $452 >> 0] = 0;
   if (!$67) {
    _silk_stereo_encode_pred($4, $180 + ((HEAP32[$17 >> 2] | 0) * 6 | 0) | 0);
    $465 = HEAP32[$17 >> 2] | 0;
    if (!(HEAP8[$190 + $465 >> 0] | 0)) _silk_stereo_encode_mid_only($4, HEAP8[$182 + $465 >> 0] | 0);
   }
  } else {
   HEAP32[$171 >> 2] = HEAP32[$188 >> 2];
   $473 = $171 + (HEAP32[$168 >> 2] << 1) | 0;
   $474 = HEAPU16[$473 >> 1] | HEAPU16[$473 + 2 >> 1] << 16;
   HEAP16[$188 >> 1] = $474;
   HEAP16[$188 + 2 >> 1] = $474 >>> 16;
  }
  _silk_encode_do_VAD_FLP($0, $7);
  $475 = HEAP32[$19 >> 2] | 0;
  L197 : do if (($475 | 0) > 0) {
   $477 = ($$0515 | 0) == 0;
   $478 = ($$0515 | 0) == ($194 | 0);
   $480 = (HEAP32[$196 >> 2] | 0) < 1;
   $481 = ($$0515 | 0) == 1;
   if ($192 & $477) {
    $$10598$us = 0;
    $489 = $475;
    while (1) {
     $482 = HEAP32[$191 >> 2] | 0;
     $484 = ($482 * 3 | 0) / 5 | 0;
     $488 = $478 & (HEAP32[$193 >> 2] | 0) != 0 & 1;
     do if (($489 | 0) == 1) {
      $$0503$us = $488;
      $$0521$us = $451;
      $$1$us = $484;
     } else {
      $492 = HEAP32[$8 + ($$10598$us << 2) >> 2] | 0;
      if (($$10598$us | 0) != 0 | $480) {
       $$0503$us = $488;
       $$0521$us = $492;
       $$1$us = $484;
       break;
      }
      $$0503$us = 0;
      $$0521$us = $492;
      $$1$us = $484 - (($482 | 0) / ($197 | 0) | 0) | 0;
     } while (0);
     if (($$0521$us | 0) > 0) {
      $497 = $0 + ($$10598$us * 10064 | 0) | 0;
      _silk_control_SNR($497, $$0521$us);
      do if ((HEAP32[$17 >> 2] | 0) > ($$10598$us | 0)) {
       if ($$10598$us | 0) if (HEAP32[$189 >> 2] | 0) {
        $$0$us = 1;
        break;
       }
       $$0$us = 2;
      } else $$0$us = 0; while (0);
      _silk_encode_frame_FLP($497, $5, $4, $$0$us, $$1$us, $$0503$us);
     }
     HEAP32[$0 + ($$10598$us * 10064 | 0) + 4668 >> 2] = 0;
     HEAP32[$0 + ($$10598$us * 10064 | 0) + 5740 >> 2] = 0;
     $505 = $0 + ($$10598$us * 10064 | 0) + 5748 | 0;
     HEAP32[$505 >> 2] = (HEAP32[$505 >> 2] | 0) + 1;
     $$10598$us = $$10598$us + 1 | 0;
     $489 = HEAP32[$19 >> 2] | 0;
     if (($$10598$us | 0) >= ($489 | 0)) break L197;
    }
   }
   $$10598 = 0;
   $520 = $475;
   do {
    $511 = HEAP32[$191 >> 2] | 0;
    do if ($195) {
     if ($477) {
      $$0504 = ($511 << 1 | 0) / 5 | 0;
      break;
     }
     if (!$481) {
      $$0504 = $511;
      break;
     }
     $$0504 = ($511 * 3 | 0) / 4 | 0;
    } else $$0504 = $511; while (0);
    $519 = $478 & (HEAP32[$193 >> 2] | 0) != 0 & 1;
    do if (($520 | 0) == 1) {
     $$0503 = $519;
     $$0521 = $451;
     $$1 = $$0504;
    } else {
     $523 = HEAP32[$8 + ($$10598 << 2) >> 2] | 0;
     if (($$10598 | 0) != 0 | $480) {
      $$0503 = $519;
      $$0521 = $523;
      $$1 = $$0504;
      break;
     }
     $$0503 = 0;
     $$0521 = $523;
     $$1 = $$0504 - (($511 | 0) / ($197 | 0) | 0) | 0;
    } while (0);
    if (($$0521 | 0) > 0) {
     $528 = $0 + ($$10598 * 10064 | 0) | 0;
     _silk_control_SNR($528, $$0521);
     do if ((HEAP32[$17 >> 2] | 0) > ($$10598 | 0)) {
      if ($$10598 | 0) if (HEAP32[$189 >> 2] | 0) {
       $$0 = 1;
       break;
      }
      $$0 = 2;
     } else $$0 = 0; while (0);
     _silk_encode_frame_FLP($528, $5, $4, $$0, $$1, $$0503);
    }
    HEAP32[$0 + ($$10598 * 10064 | 0) + 4668 >> 2] = 0;
    HEAP32[$0 + ($$10598 * 10064 | 0) + 5740 >> 2] = 0;
    $536 = $0 + ($$10598 * 10064 | 0) + 5748 | 0;
    HEAP32[$536 >> 2] = (HEAP32[$536 >> 2] | 0) + 1;
    $$10598 = $$10598 + 1 | 0;
    $520 = HEAP32[$19 >> 2] | 0;
   } while (($$10598 | 0) < ($520 | 0));
  } while (0);
  $542 = HEAP32[$17 >> 2] | 0;
  HEAP32[$189 >> 2] = HEAP8[$182 + ($542 + -1) >> 0];
  do if ((HEAP32[$5 >> 2] | 0) > 0) if (($542 | 0) == (HEAP32[$$pre$phi27Z2D >> 2] | 0)) {
   $551 = HEAP32[$19 >> 2] | 0;
   if (($551 | 0) > 0) {
    $$0517608 = 0;
    $$11609 = 0;
    while (1) {
     $554 = HEAP32[$0 + ($$11609 * 10064 | 0) + 5744 >> 2] | 0;
     $556 = $$0517608 << 1;
     if (($554 | 0) > 0) {
      $$3514603 = 0;
      $561 = $556;
      while (1) {
       $563 = ($561 | HEAP8[$0 + ($$11609 * 10064 | 0) + 4720 + $$3514603 >> 0]) << 1;
       $$3514603 = $$3514603 + 1 | 0;
       if (($$3514603 | 0) == ($554 | 0)) {
        $$lcssa548 = $563;
        break;
       } else $561 = $563;
      }
     } else $$lcssa548 = $556;
     $567 = $$lcssa548 | HEAP8[$0 + ($$11609 * 10064 | 0) + 4723 >> 0];
     $$11609 = $$11609 + 1 | 0;
     if (($$11609 | 0) == ($551 | 0)) {
      $$0517$lcssa = $567;
      break;
     } else $$0517608 = $567;
    }
   } else $$0517$lcssa = 0;
   if (!$67) _ec_enc_patch_initial_bits($4, $$0517$lcssa, Math_imul($551, $542 + 1 | 0) | 0);
   do if (HEAP32[$206 >> 2] | 0) {
    if ((HEAP32[$19 >> 2] | 0) != 1) if (!(HEAP32[$208 >> 2] | 0)) break;
    HEAP32[$5 >> 2] = 0;
   } while (0);
   $580 = (HEAP32[$178 >> 2] | 0) + (HEAP32[$5 >> 2] << 3) | 0;
   HEAP32[$178 >> 2] = $580;
   $585 = $580 - ((Math_imul(HEAP32[$49 >> 2] | 0, HEAP32[$177 >> 2] | 0) | 0) / 1e3 | 0) | 0;
   $spec$select = ($585 | 0) > 0 ? $585 : 0;
   HEAP32[$178 >> 2] = ($spec$select | 0) < 1e4 ? $spec$select : 1e4;
   $589 = HEAP32[$207 >> 2] | 0;
   if ((HEAP32[$186 >> 2] | 0) < ((($589 << 16 >> 16) * 3188 >> 16) + 13 | 0)) {
    HEAP32[$$pre$phi23Z2D >> 2] = 1;
    HEAP32[$207 >> 2] = 0;
    break;
   } else {
    HEAP32[$$pre$phi23Z2D >> 2] = 0;
    HEAP32[$207 >> 2] = (HEAP32[$49 >> 2] | 0) + $589;
    break;
   }
  } while (0);
  if (!$$0508) {
   label = 182;
   break;
  } else $$0515 = $$0515 + 1 | 0;
 }
 if ((label | 0) == 74) _celt_fatal(42934, 42792, 320); else if ((label | 0) == 78) _celt_fatal(43020, 42792, 336); else if ((label | 0) == 81) _celt_fatal(43119, 42792, 337); else if ((label | 0) == 182) $602 = HEAP32[$$pre$phi23Z2D >> 2] | 0;
 HEAP32[$172 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$1 + 76 >> 2] = $602;
 if ((HEAP32[$$pre$phi662Z2D >> 2] | 0) == 16) $609 = (HEAP32[$0 + 28 >> 2] | 0) == 0 & 1; else $609 = 0;
 HEAP32[$1 + 80 >> 2] = $609;
 HEAP32[$1 + 72 >> 2] = (HEAP32[$$pre$phi662Z2D >> 2] << 16 >> 16) * 1e3;
 if (!(HEAP32[$187 >> 2] | 0)) $620 = HEAP16[$0 + 20156 >> 1] | 0; else $620 = 0;
 HEAP32[$1 + 84 >> 2] = $620;
 if ($67) {
  HEAP32[$49 >> 2] = $$0519668669;
  HEAP32[$1 + 36 >> 2] = $$0524667671;
  if ((HEAP32[$19 >> 2] | 0) > 0) {
   $$12557 = 0;
   do {
    HEAP32[$0 + ($$12557 * 10064 | 0) + 4668 >> 2] = 0;
    HEAP32[$0 + ($$12557 * 10064 | 0) + 4680 >> 2] = 0;
    $$12557 = $$12557 + 1 | 0;
   } while (($$12557 | 0) < (HEAP32[$19 >> 2] | 0));
  }
 }
 $629 = $0 + 4765 | 0;
 HEAP32[$1 + 92 >> 2] = HEAP8[$629 >> 0];
 HEAP32[$1 + 96 >> 2] = HEAP16[39492 + (HEAP8[$629 >> 0] >> 1 << 2) + (HEAP8[$0 + 4766 >> 0] << 1) >> 1];
 _llvm_stackrestore($166 | 0);
 $$0505 = 0;
 STACKTOP = sp;
 return $$0505 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $104 = 0, $105 = 0, $109 = 0, $11 = 0, $110 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $124 = 0, $127 = 0, $13 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $146 = 0, $148 = 0, $152 = 0, $154 = 0, $159 = 0, $16 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $175 = 0, $176 = 0, $177 = 0, $189 = 0, $203 = 0, $204 = 0, $207 = 0, $212 = 0, $213 = 0, $215 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $238 = 0, $241 = 0, $248 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $26 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $272 = 0, $286 = 0, $291 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $31 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $35 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $388 = 0, $39 = 0.0, $392 = 0, $394 = 0, $397 = 0, $40 = 0, $400 = 0, $411 = 0, $43 = 0, $45 = 0, $48 = 0, $50 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = 0 - $9 | 0;
 $11 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $12 = $11 + 12 | 0;
 $13 = ___DOUBLE_BITS_670($1) | 0;
 $14 = tempRet0;
 if (($14 | 0) < 0) {
  $16 = -$1;
  $17 = ___DOUBLE_BITS_670($16) | 0;
  $$0471 = $16;
  $$0522 = 1;
  $$0523 = 49713;
  $26 = tempRet0;
  $411 = $17;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 49714 : 49719) : 49716;
  $26 = $14;
  $411 = $13;
 }
 do if (0 == 0 & ($26 & 2146435072 | 0) == 2146435072) {
  $31 = ($5 & 32 | 0) != 0;
  $35 = $$0522 + 3 | 0;
  _pad_669($0, 32, $2, $35, $4 & -65537);
  _out($0, $$0523, $$0522);
  _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($31 ? 49744 : 49740) : $31 ? 49732 : 49736, 3);
  _pad_669($0, 32, $2, $35, $4 ^ 8192);
  $$sink757 = $35;
 } else {
  $39 = +_frexpl($$0471, $7) * 2.0;
  $40 = $39 != 0.0;
  if ($40) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $43 = $5 | 32;
  if (($43 | 0) == 97) {
   $45 = $5 & 32;
   $spec$select = ($45 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $48 = $$0522 | 2;
   $50 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($50 | 0) == 0) $$1472 = $39; else {
    $$0511586 = 8.0;
    $$1510587 = $50;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$39 - $$0511586));
     break;
    } else {
     $$1472 = $39 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $64 = HEAP32[$7 >> 2] | 0;
   $67 = ($64 | 0) < 0 ? 0 - $64 | 0 : $64;
   $70 = _fmt_u($67, (($67 | 0) < 0) << 31 >> 31, $12) | 0;
   if (($70 | 0) == ($12 | 0)) {
    $72 = $11 + 11 | 0;
    HEAP8[$72 >> 0] = 48;
    $$0513 = $72;
   } else $$0513 = $70;
   HEAP8[$$0513 + -1 >> 0] = ($64 >> 31 & 2) + 43;
   $80 = $$0513 + -2 | 0;
   HEAP8[$80 >> 0] = $5 + 15;
   $81 = ($3 | 0) < 1;
   $83 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $84 = ~~$$2473;
    $90 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $45 | HEAPU8[36896 + $84 >> 0];
    $$2473 = ($$2473 - +($84 | 0)) * 16.0;
    if (($90 - $9 | 0) == 1) if ($83 & ($81 & $$2473 == 0.0)) $$1526 = $90; else {
     HEAP8[$90 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $90;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $104 = $12;
    $105 = $80;
    $$0527 = $3 + 2 + $104 - $105 | 0;
    $$pre$phi717Z2D = $104;
    $$pre$phi718Z2D = $105;
   } else label = 25;
   if ((label | 0) == 25) {
    $109 = $12;
    $110 = $80;
    $$0527 = $109 - $9 - $110 + $$pre720 | 0;
    $$pre$phi717Z2D = $109;
    $$pre$phi718Z2D = $110;
   }
   $114 = $$0527 + $48 | 0;
   _pad_669($0, 32, $2, $114, $4);
   _out($0, $spec$select, $48);
   _pad_669($0, 48, $2, $114, $4 ^ 65536);
   $116 = $$pre720 - $9 | 0;
   _out($0, $8, $116);
   $117 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_669($0, 48, $$0527 - ($117 + $116) | 0, 0, 0);
   _out($0, $80, $117);
   _pad_669($0, 32, $2, $114, $4 ^ 8192);
   $$sink757 = $114;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($40) {
   $124 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $124;
   $$3 = $39 * 268435456.0;
   $$pr = $124;
  } else {
   $$3 = $39;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $127 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $127;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($127 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $133 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $135 = $$pr;
   while (1) {
    $137 = ($135 | 0) < 29 ? $135 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $140 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $137 | 0) | 0;
      $142 = _i64Add($140 | 0, tempRet0 | 0, $$0497670 | 0, 0) | 0;
      $143 = tempRet0;
      $$0497670 = ___udivdi3($142 | 0, $143 | 0, 1e9, 0) | 0;
      $146 = ___muldi3($$0497670 | 0, tempRet0 | 0, -1e9, -1) | 0;
      $148 = _i64Add($146 | 0, tempRet0 | 0, $142 | 0, $143 | 0) | 0;
      HEAP32[$$0488671 >> 2] = $148;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $152 = $$1482683 + -4 | 0;
      HEAP32[$152 >> 2] = $$0497670;
      $$2483 = $152;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $154 = $$3501676 + -4 | 0;
      if (HEAP32[$154 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($154 >>> 0 > $$2483 >>> 0) $$3501676 = $154; else {
       $$3501$lcssa = $154;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $159 = (HEAP32[$7 >> 2] | 0) - $137 | 0;
    HEAP32[$7 >> 2] = $159;
    if (($159 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $135 = $159;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $159;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $164 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $165 = ($43 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $167 = $$pr564;
   while (1) {
    $166 = 0 - $167 | 0;
    $169 = ($166 | 0) < 9 ? $166 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $175 = (1 << $169) + -1 | 0;
     $176 = 1e9 >>> $169;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $177 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($177 >>> $169) + $$0487657;
      $$0487657 = Math_imul($177 & $175, $176) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $189 = $165 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $189 >> 2 | 0) > ($164 | 0) ? $189 + ($164 << 2) | 0 : $$5503;
    $167 = (HEAP32[$7 >> 2] | 0) + $169 | 0;
    HEAP32[$7 >> 2] = $167;
    if (($167 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $203 = ($133 - $$3484$lcssa >> 2) * 9 | 0;
   $204 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($204 >>> 0 < 10) $$1517 = $203; else {
    $$0516652 = $203;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $207 = $$0516652 + 1 | 0;
     if ($204 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $207;
      break;
     } else $$0516652 = $207;
    }
   }
  } else $$1517 = 0;
  $212 = ($43 | 0) == 103;
  $213 = ($spec$select539 | 0) != 0;
  $215 = $spec$select539 - (($43 | 0) == 102 ? 0 : $$1517) + (($213 & $212) << 31 >> 31) | 0;
  if (($215 | 0) < ((($$4502$lcssa - $133 >> 2) * 9 | 0) + -9 | 0)) {
   $223 = $215 + 9216 | 0;
   $224 = ($223 | 0) / 9 | 0;
   $226 = $$0498 + 4 + ($224 + -1024 << 2) | 0;
   $228 = (Math_imul($224, -9) | 0) + $223 | 0;
   if (($228 | 0) < 8) {
    $$0529$in646 = $228;
    $$1533645 = 10;
    while (1) {
     $230 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $230;
     } else {
      $$1533$lcssa = $230;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $232 = HEAP32[$226 >> 2] | 0;
   $233 = ($232 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = Math_imul($233, $$1533$lcssa) | 0;
   $235 = $232 - $234 | 0;
   $238 = ($226 + 4 | 0) == ($$4502$lcssa | 0);
   if ($238 & ($235 | 0) == 0) {
    $$4492 = $226;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($233 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $241 = $$1533$lcssa >>> 1;
    $spec$select567 = $235 >>> 0 < $241 >>> 0 ? .5 : $238 & ($235 | 0) == ($241 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $248 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $248 ? -$spec$select567 : $spec$select567;
     $$1469 = $248 ? -$spec$select544 : $spec$select544;
    }
    HEAP32[$226 >> 2] = $234;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $234 + $$1533$lcssa | 0;
     HEAP32[$226 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $226;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $226;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($133 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $226;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $272 = $$9507625 + -4 | 0;
    if (HEAP32[$272 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($272 >>> 0 > $$9 >>> 0) $$9507625 = $272; else {
     $$9507$lcssa = $272;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($212) {
   $spec$select548 = $spec$select539 + (($213 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $133 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $12) | 0;
   $320 = $12;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_669($0, 32, $2, $339, $4);
  _out($0, $$0523, $$0522);
  _pad_669($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out($0, 49755, 1);
   if (($$3477 | 0) > 0 & $$5493603 >>> 0 < $$9507$lcssa >>> 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!(($$4478594 | 0) > 9 & $$6494593 >>> 0 < $$9507$lcssa >>> 0)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_669($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $388 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($388 | 0) == ($382 | 0)) {
      HEAP8[$386 >> 0] = 48;
      $$0 = $386;
     } else $$0 = $388;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $394 = $$0 + 1 | 0;
      _out($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $394;
       break;
      }
      _out($0, 49755, 1);
      $$2 = $394;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $10 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $392 = $$1604 + -1 | 0;
       if ($392 >>> 0 > $8 >>> 0) $$1604 = $392; else {
        $$2 = $392;
        break;
       }
      }
     } while (0);
     $397 = $385 - $$2 | 0;
     _out($0, $$2, ($$5609 | 0) > ($397 | 0) ? $397 : $$5609);
     $400 = $$5609 - $397 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($400 | 0) > -1)) {
      $$5$lcssa = $400;
      break;
     } else $$5609 = $400;
    }
   } else $$5$lcssa = $$3477;
   _pad_669($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out($0, $$2515, $12 - $$2515 | 0);
  }
  _pad_669($0, 32, $2, $339, $4 ^ 8192);
  $$sink757 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function _silk_decode_core($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0317 = 0, $$0318381 = 0, $$0319370 = 0, $$0320378 = 0, $$0321387 = 0, $$0322 = 0, $$0323 = 0, $$0326 = 0, $$0327377 = 0, $$0330376 = 0, $$0388 = 0, $$10$sroa_idx = 0, $$12$sroa_idx = 0, $$1328369 = 0, $$14$sroa_idx = 0, $$16$sroa_idx = 0, $$18$sroa_idx = 0, $$2$neg367 = 0, $$2$sroa_idx = 0, $$20$sroa_idx = 0, $$22$sroa_idx = 0, $$2329 = 0, $$2329401 = 0, $$2366 = 0, $$24$sroa_idx = 0, $$26$sroa_idx = 0, $$28$sroa_idx = 0, $$30$sroa_idx = 0, $$3365 = 0, $$4$sroa_idx = 0, $$4371 = 0, $$5373 = 0, $$6$sroa_idx = 0, $$8$sroa_idx = 0, $$lcssa = 0, $$sink = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $131 = 0, $132 = 0, $14 = 0, $142 = 0, $143 = 0, $153 = 0, $154 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $175 = 0, $176 = 0, $186 = 0, $187 = 0, $197 = 0, $198 = 0, $20 = 0, $208 = 0, $209 = 0, $219 = 0, $220 = 0, $230 = 0, $231 = 0, $241 = 0, $242 = 0, $252 = 0, $253 = 0, $263 = 0, $264 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $302 = 0, $303 = 0, $306 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $323 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $351 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $363 = 0, $364 = 0, $367 = 0, $369 = 0, $37 = 0, $372 = 0, $373 = 0, $376 = 0, $378 = 0, $38 = 0, $381 = 0, $382 = 0, $385 = 0, $387 = 0, $390 = 0, $391 = 0, $394 = 0, $396 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $413 = 0, $418 = 0, $425 = 0, $427 = 0, $430 = 0, $431 = 0, $436 = 0, $438 = 0, $439 = 0, $442 = 0, $445 = 0, $447 = 0, $448 = 0, $451 = 0, $454 = 0, $456 = 0, $457 = 0, $46 = 0, $460 = 0, $463 = 0, $465 = 0, $466 = 0, $469 = 0, $47 = 0, $472 = 0, $474 = 0, $475 = 0, $478 = 0, $481 = 0, $483 = 0, $484 = 0, $487 = 0, $490 = 0, $492 = 0, $493 = 0, $496 = 0, $499 = 0, $5 = 0, $501 = 0, $502 = 0, $505 = 0, $508 = 0, $510 = 0, $511 = 0, $514 = 0, $517 = 0, $519 = 0, $543 = 0, $547 = 0, $549 = 0, $550 = 0, $553 = 0, $556 = 0, $558 = 0, $559 = 0, $56 = 0, $562 = 0, $565 = 0, $567 = 0, $568 = 0, $57 = 0, $571 = 0, $574 = 0, $576 = 0, $577 = 0, $580 = 0, $583 = 0, $585 = 0, $586 = 0, $589 = 0, $591 = 0, $593 = 0, $6 = 0, $611 = 0, $613 = 0, $616 = 0, $617 = 0, $62 = 0, $624 = 0, $63 = 0, $632 = 0, $64 = 0, $643 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp;
 $5 = $0 + 2336 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 << 1) | 0) + 15 & -16) | 0;
 $8 = $0 + 2328 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 + $6 << 2) | 0) + 15 & -16) | 0;
 $12 = $0 + 2332 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($13 << 2) | 0) + 15 & -16) | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($13 + 16 << 2) | 0) + 15 & -16) | 0;
 $17 = $0 + 2765 | 0;
 $20 = (HEAP8[$0 + 2767 >> 0] | 0) < 4;
 if (($9 | 0) > 0) {
  $34 = HEAP16[39492 + (HEAP8[$17 >> 0] >> 1 << 2) + (HEAP8[$0 + 2766 >> 0] << 1) >> 1] << 4;
  $$0321387 = HEAP8[$0 + 2770 >> 0] | 0;
  $$0388 = 0;
  while (1) {
   $36 = (Math_imul($$0321387, 196314165) | 0) + 907633515 | 0;
   $37 = $3 + ($$0388 << 1) | 0;
   $38 = HEAP16[$37 >> 1] | 0;
   $40 = $38 << 16 >> 16 << 14;
   $41 = $0 + 4 + ($$0388 << 2) | 0;
   HEAP32[$41 >> 2] = $40;
   if ($38 << 16 >> 16 > 0) {
    $$sink = $40 + -1280 | 0;
    label = 7;
   } else if ($38 << 16 >> 16 < 0) {
    $$sink = $40 | 1280;
    label = 7;
   } else $47 = $40;
   if ((label | 0) == 7) {
    label = 0;
    HEAP32[$41 >> 2] = $$sink;
    $47 = $$sink;
   }
   $46 = $47 + $34 | 0;
   HEAP32[$41 >> 2] = ($36 | 0) < 0 ? 0 - $46 | 0 : $46;
   $$0388 = $$0388 + 1 | 0;
   if (($$0388 | 0) >= (HEAP32[$8 >> 2] | 0)) break; else $$0321387 = $36 + (HEAP16[$37 >> 1] | 0) | 0;
  }
 }
 $56 = $0 + 1284 | 0;
 dest = $16;
 src = $56;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $57 = $0 + 2324 | 0;
 if ((HEAP32[$57 >> 2] | 0) <= 0) {
  dest = $56;
  src = $16;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $62 = $0 + 2340 | 0;
 $63 = $0 + 4160 | 0;
 $64 = $0 + 4164 | 0;
 $65 = $0 + 2308 | 0;
 $66 = $1 + 136 | 0;
 $67 = $16 + 4 | 0;
 $68 = $16 + 8 | 0;
 $69 = $16 + 12 | 0;
 $70 = $16 + 16 | 0;
 $71 = $16 + 20 | 0;
 $72 = $16 + 24 | 0;
 $73 = $16 + 28 | 0;
 $74 = $16 + 32 | 0;
 $75 = $16 + 36 | 0;
 $76 = $16 + 40 | 0;
 $77 = $16 + 44 | 0;
 $78 = $16 + 48 | 0;
 $79 = $16 + 52 | 0;
 $80 = $16 + 56 | 0;
 $81 = $16 + 60 | 0;
 $$2$sroa_idx = $4 + 2 | 0;
 $$4$sroa_idx = $4 + 4 | 0;
 $$6$sroa_idx = $4 + 6 | 0;
 $$8$sroa_idx = $4 + 8 | 0;
 $$10$sroa_idx = $4 + 10 | 0;
 $$12$sroa_idx = $4 + 12 | 0;
 $$14$sroa_idx = $4 + 14 | 0;
 $$16$sroa_idx = $4 + 16 | 0;
 $$18$sroa_idx = $4 + 18 | 0;
 $$20$sroa_idx = $4 + 20 | 0;
 $$22$sroa_idx = $4 + 22 | 0;
 $$24$sroa_idx = $4 + 24 | 0;
 $$26$sroa_idx = $4 + 26 | 0;
 $$28$sroa_idx = $4 + 28 | 0;
 $$30$sroa_idx = $4 + 30 | 0;
 $$0318381 = $0 + 4 | 0;
 $$0320378 = 0;
 $$0327377 = HEAP32[$5 >> 2] | 0;
 $$0330376 = $2;
 L16 : while (1) {
  $83 = $1 + 32 + ($$0320378 >>> 1 << 5) | 0;
  _memcpy($4 | 0, $83 | 0, HEAP32[$62 >> 2] << 1 | 0) | 0;
  $87 = $1 + 96 + ($$0320378 * 5 << 1) | 0;
  $88 = HEAP8[$17 >> 0] | 0;
  $90 = HEAP32[$1 + 16 + ($$0320378 << 2) >> 2] | 0;
  $91 = $90 >>> 6;
  $92 = _silk_INVERSE32_varQ($90) | 0;
  $93 = HEAP32[$0 >> 2] | 0;
  if (($90 | 0) == ($93 | 0)) $$0322 = 65536; else {
   $95 = _silk_DIV32_varQ($93, $90) | 0;
   $96 = $95 >> 16;
   $97 = $95 & 65535;
   $98 = HEAP32[$16 >> 2] | 0;
   $99 = $98 << 16 >> 16;
   HEAP32[$16 >> 2] = ((Math_imul($99, $97) | 0) >> 16) + (Math_imul($99, $96) | 0) + (Math_imul(($98 >> 15) + 1 >> 1, $95) | 0);
   $109 = HEAP32[$67 >> 2] | 0;
   $110 = $109 << 16 >> 16;
   HEAP32[$67 >> 2] = ((Math_imul($110, $97) | 0) >> 16) + (Math_imul($110, $96) | 0) + (Math_imul(($109 >> 15) + 1 >> 1, $95) | 0);
   $120 = HEAP32[$68 >> 2] | 0;
   $121 = $120 << 16 >> 16;
   HEAP32[$68 >> 2] = ((Math_imul($121, $97) | 0) >> 16) + (Math_imul($121, $96) | 0) + (Math_imul(($120 >> 15) + 1 >> 1, $95) | 0);
   $131 = HEAP32[$69 >> 2] | 0;
   $132 = $131 << 16 >> 16;
   HEAP32[$69 >> 2] = ((Math_imul($132, $97) | 0) >> 16) + (Math_imul($132, $96) | 0) + (Math_imul(($131 >> 15) + 1 >> 1, $95) | 0);
   $142 = HEAP32[$70 >> 2] | 0;
   $143 = $142 << 16 >> 16;
   HEAP32[$70 >> 2] = ((Math_imul($143, $97) | 0) >> 16) + (Math_imul($143, $96) | 0) + (Math_imul(($142 >> 15) + 1 >> 1, $95) | 0);
   $153 = HEAP32[$71 >> 2] | 0;
   $154 = $153 << 16 >> 16;
   HEAP32[$71 >> 2] = ((Math_imul($154, $97) | 0) >> 16) + (Math_imul($154, $96) | 0) + (Math_imul(($153 >> 15) + 1 >> 1, $95) | 0);
   $164 = HEAP32[$72 >> 2] | 0;
   $165 = $164 << 16 >> 16;
   HEAP32[$72 >> 2] = ((Math_imul($165, $97) | 0) >> 16) + (Math_imul($165, $96) | 0) + (Math_imul(($164 >> 15) + 1 >> 1, $95) | 0);
   $175 = HEAP32[$73 >> 2] | 0;
   $176 = $175 << 16 >> 16;
   HEAP32[$73 >> 2] = ((Math_imul($176, $97) | 0) >> 16) + (Math_imul($176, $96) | 0) + (Math_imul(($175 >> 15) + 1 >> 1, $95) | 0);
   $186 = HEAP32[$74 >> 2] | 0;
   $187 = $186 << 16 >> 16;
   HEAP32[$74 >> 2] = ((Math_imul($187, $97) | 0) >> 16) + (Math_imul($187, $96) | 0) + (Math_imul(($186 >> 15) + 1 >> 1, $95) | 0);
   $197 = HEAP32[$75 >> 2] | 0;
   $198 = $197 << 16 >> 16;
   HEAP32[$75 >> 2] = ((Math_imul($198, $97) | 0) >> 16) + (Math_imul($198, $96) | 0) + (Math_imul(($197 >> 15) + 1 >> 1, $95) | 0);
   $208 = HEAP32[$76 >> 2] | 0;
   $209 = $208 << 16 >> 16;
   HEAP32[$76 >> 2] = ((Math_imul($209, $97) | 0) >> 16) + (Math_imul($209, $96) | 0) + (Math_imul(($208 >> 15) + 1 >> 1, $95) | 0);
   $219 = HEAP32[$77 >> 2] | 0;
   $220 = $219 << 16 >> 16;
   HEAP32[$77 >> 2] = ((Math_imul($220, $97) | 0) >> 16) + (Math_imul($220, $96) | 0) + (Math_imul(($219 >> 15) + 1 >> 1, $95) | 0);
   $230 = HEAP32[$78 >> 2] | 0;
   $231 = $230 << 16 >> 16;
   HEAP32[$78 >> 2] = ((Math_imul($231, $97) | 0) >> 16) + (Math_imul($231, $96) | 0) + (Math_imul(($230 >> 15) + 1 >> 1, $95) | 0);
   $241 = HEAP32[$79 >> 2] | 0;
   $242 = $241 << 16 >> 16;
   HEAP32[$79 >> 2] = ((Math_imul($242, $97) | 0) >> 16) + (Math_imul($242, $96) | 0) + (Math_imul(($241 >> 15) + 1 >> 1, $95) | 0);
   $252 = HEAP32[$80 >> 2] | 0;
   $253 = $252 << 16 >> 16;
   HEAP32[$80 >> 2] = ((Math_imul($253, $97) | 0) >> 16) + (Math_imul($253, $96) | 0) + (Math_imul(($252 >> 15) + 1 >> 1, $95) | 0);
   $263 = HEAP32[$81 >> 2] | 0;
   $264 = $263 << 16 >> 16;
   HEAP32[$81 >> 2] = ((Math_imul($264, $97) | 0) >> 16) + (Math_imul($264, $96) | 0) + (Math_imul(($263 >> 15) + 1 >> 1, $95) | 0);
   $$0322 = $95;
  }
  HEAP32[$0 >> 2] = $90;
  if (!(HEAP32[$63 >> 2] | 0)) label = 17; else if ((HEAP32[$64 >> 2] | 0) == 2) if ($$0320378 >>> 0 < 2 & $88 << 24 >> 24 != 2) {
   HEAP16[$87 >> 1] = 0;
   HEAP16[$87 + 2 >> 1] = 0;
   HEAP16[$87 + 4 >> 1] = 0;
   HEAP16[$87 + 6 >> 1] = 0;
   HEAP16[$87 + 8 >> 1] = 0;
   HEAP16[$87 + 4 >> 1] = 4096;
   $282 = HEAP32[$65 >> 2] | 0;
   HEAP32[$1 + ($$0320378 << 2) >> 2] = $282;
   $288 = $282;
   label = 20;
  } else label = 17; else label = 17;
  do if ((label | 0) == 17) {
   label = 0;
   if ($88 << 24 >> 24 == 2) {
    $288 = HEAP32[$1 + ($$0320378 << 2) >> 2] | 0;
    label = 20;
    break;
   } else {
    $$0317 = $$0318381;
    $$2329 = $$0327377;
    $425 = HEAP32[$12 >> 2] | 0;
    label = 37;
    break;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   $284 = ($$0320378 | 0) == 0;
   $285 = ($$0320378 | 0) == 2;
   if ($284 | $20 & $285) {
    $286 = HEAP32[$5 >> 2] | 0;
    $289 = HEAP32[$62 >> 2] | 0;
    $290 = $286 - $288 - $289 | 0;
    $291 = $290 + -2 | 0;
    if (($290 | 0) <= 2) {
     label = 22;
     break;
    }
    if ($285) {
     _memcpy($0 + 1348 + ($286 << 1) | 0, $2 | 0, HEAP32[$12 >> 2] << 2 | 0) | 0;
     $302 = HEAP32[$5 >> 2] | 0;
     $303 = HEAP32[$62 >> 2] | 0;
    } else {
     $302 = $286;
     $303 = $289;
    }
    _silk_LPC_analysis_filter($7 + ($291 << 1) | 0, $0 + 1348 + ((Math_imul(HEAP32[$12 >> 2] | 0, $$0320378) | 0) + $291 << 1) | 0, $83, $302 - $291 | 0, $303);
    if ($284) {
     $306 = HEAP32[$66 >> 2] << 16 >> 16;
     $$0323 = ((Math_imul($306, $92 & 65535) | 0) >> 16) + (Math_imul($306, $92 >> 16) | 0) << 2;
    } else $$0323 = $92;
    if (($288 | 0) > -2) {
     $314 = $$0323 >> 16;
     $315 = HEAP32[$5 >> 2] | 0;
     $316 = $$0323 & 65535;
     $317 = $$0327377 + -1 | 0;
     $318 = $288 + 1 | 0;
     $$2$neg367 = 0;
     $$2366 = 0;
     while (1) {
      $323 = HEAP16[$7 + ($$2$neg367 + -1 + $315 << 1) >> 1] | 0;
      HEAP32[$11 + ($317 + $$2$neg367 << 2) >> 2] = ((Math_imul($316, $323) | 0) >> 16) + (Math_imul($314, $323) | 0);
      if (($$2366 | 0) == ($318 | 0)) break; else {
       $$2$neg367 = ~$$2366;
       $$2366 = $$2366 + 1 | 0;
      }
     }
    }
   } else if (($$0322 | 0) != 65536 & ($288 | 0) > -2) {
    $333 = $$0322 >> 16;
    $334 = $$0327377 + -1 | 0;
    $335 = $$0322 & 65535;
    $336 = $288 + 1 | 0;
    $$3365 = 0;
    while (1) {
     $338 = $11 + ($334 - $$3365 << 2) | 0;
     $339 = HEAP32[$338 >> 2] | 0;
     $340 = $339 << 16 >> 16;
     HEAP32[$338 >> 2] = ((Math_imul($340, $335) | 0) >> 16) + (Math_imul($340, $333) | 0) + (Math_imul(($339 >> 15) + 1 >> 1, $$0322) | 0);
     if (($$3365 | 0) == ($336 | 0)) break; else $$3365 = $$3365 + 1 | 0;
    }
   }
   $351 = HEAP32[$12 >> 2] | 0;
   if (($351 | 0) > 0) {
    $356 = $87 + 2 | 0;
    $357 = $87 + 4 | 0;
    $358 = $87 + 6 | 0;
    $359 = $87 + 8 | 0;
    $$0319370 = $11 + ($$0327377 + 2 - $288 << 2) | 0;
    $$1328369 = $$0327377;
    $$4371 = 0;
    while (1) {
     $360 = HEAP32[$$0319370 >> 2] | 0;
     $363 = HEAP16[$87 >> 1] | 0;
     $364 = Math_imul($360 >> 16, $363) | 0;
     $367 = (Math_imul($360 & 65535, $363) | 0) >> 16;
     $369 = HEAP32[$$0319370 + -4 >> 2] | 0;
     $372 = HEAP16[$356 >> 1] | 0;
     $373 = Math_imul($369 >> 16, $372) | 0;
     $376 = (Math_imul($369 & 65535, $372) | 0) >> 16;
     $378 = HEAP32[$$0319370 + -8 >> 2] | 0;
     $381 = HEAP16[$357 >> 1] | 0;
     $382 = Math_imul($378 >> 16, $381) | 0;
     $385 = (Math_imul($378 & 65535, $381) | 0) >> 16;
     $387 = HEAP32[$$0319370 + -12 >> 2] | 0;
     $390 = HEAP16[$358 >> 1] | 0;
     $391 = Math_imul($387 >> 16, $390) | 0;
     $394 = (Math_imul($387 & 65535, $390) | 0) >> 16;
     $396 = HEAP32[$$0319370 + -16 >> 2] | 0;
     $399 = HEAP16[$359 >> 1] | 0;
     $413 = $364 + 2 + $367 + $373 + $376 + $382 + $385 + $391 + $394 + (Math_imul($396 >> 16, $399) | 0) + ((Math_imul($396 & 65535, $399) | 0) >> 16) | 0;
     $418 = ($413 << 1) + (HEAP32[$$0318381 + ($$4371 << 2) >> 2] | 0) | 0;
     HEAP32[$14 + ($$4371 << 2) >> 2] = $418;
     HEAP32[$11 + ($$1328369 << 2) >> 2] = $418 << 1;
     $$4371 = $$4371 + 1 | 0;
     if (($$4371 | 0) == ($351 | 0)) break; else {
      $$0319370 = $$0319370 + 4 | 0;
      $$1328369 = $$1328369 + 1 | 0;
     }
    }
    $$0317 = $14;
    $$2329 = $$0327377 + $351 | 0;
    $425 = $351;
    label = 37;
   } else {
    $$2329401 = $$0327377;
    $$lcssa = $351;
   }
  }
  L53 : do if ((label | 0) == 37) {
   label = 0;
   if (($425 | 0) > 0) {
    $427 = $91 << 16 >> 16;
    $430 = ($90 >> 21) + 1 >> 1;
    $$5373 = 0;
    while (1) {
     $431 = HEAP32[$62 >> 2] | 0;
     switch ($431 | 0) {
     case 16:
     case 10:
      break;
     default:
      {
       label = 40;
       break L16;
      }
     }
     $436 = HEAP32[$16 + ($$5373 + 15 << 2) >> 2] | 0;
     $438 = HEAP16[$4 >> 1] | 0;
     $439 = Math_imul($436 >> 16, $438) | 0;
     $442 = (Math_imul($436 & 65535, $438) | 0) >> 16;
     $445 = HEAP32[$16 + ($$5373 + 14 << 2) >> 2] | 0;
     $447 = HEAP16[$$2$sroa_idx >> 1] | 0;
     $448 = Math_imul($445 >> 16, $447) | 0;
     $451 = (Math_imul($445 & 65535, $447) | 0) >> 16;
     $454 = HEAP32[$16 + ($$5373 + 13 << 2) >> 2] | 0;
     $456 = HEAP16[$$4$sroa_idx >> 1] | 0;
     $457 = Math_imul($454 >> 16, $456) | 0;
     $460 = (Math_imul($454 & 65535, $456) | 0) >> 16;
     $463 = HEAP32[$16 + ($$5373 + 12 << 2) >> 2] | 0;
     $465 = HEAP16[$$6$sroa_idx >> 1] | 0;
     $466 = Math_imul($463 >> 16, $465) | 0;
     $469 = (Math_imul($463 & 65535, $465) | 0) >> 16;
     $472 = HEAP32[$16 + ($$5373 + 11 << 2) >> 2] | 0;
     $474 = HEAP16[$$8$sroa_idx >> 1] | 0;
     $475 = Math_imul($472 >> 16, $474) | 0;
     $478 = (Math_imul($472 & 65535, $474) | 0) >> 16;
     $481 = HEAP32[$16 + ($$5373 + 10 << 2) >> 2] | 0;
     $483 = HEAP16[$$10$sroa_idx >> 1] | 0;
     $484 = Math_imul($481 >> 16, $483) | 0;
     $487 = (Math_imul($481 & 65535, $483) | 0) >> 16;
     $490 = HEAP32[$16 + ($$5373 + 9 << 2) >> 2] | 0;
     $492 = HEAP16[$$12$sroa_idx >> 1] | 0;
     $493 = Math_imul($490 >> 16, $492) | 0;
     $496 = (Math_imul($490 & 65535, $492) | 0) >> 16;
     $499 = HEAP32[$16 + ($$5373 + 8 << 2) >> 2] | 0;
     $501 = HEAP16[$$14$sroa_idx >> 1] | 0;
     $502 = Math_imul($499 >> 16, $501) | 0;
     $505 = (Math_imul($499 & 65535, $501) | 0) >> 16;
     $508 = HEAP32[$16 + ($$5373 + 7 << 2) >> 2] | 0;
     $510 = HEAP16[$$16$sroa_idx >> 1] | 0;
     $511 = Math_imul($508 >> 16, $510) | 0;
     $514 = (Math_imul($508 & 65535, $510) | 0) >> 16;
     $517 = HEAP32[$16 + ($$5373 + 6 << 2) >> 2] | 0;
     $519 = HEAP16[$$18$sroa_idx >> 1] | 0;
     $543 = $439 + ($431 >>> 1) + $442 + $448 + $451 + $457 + $460 + $466 + $469 + $475 + $478 + $484 + $487 + $493 + $496 + $502 + $505 + $511 + $514 + (Math_imul($517 >> 16, $519) | 0) + ((Math_imul($517 & 65535, $519) | 0) >> 16) | 0;
     if (($431 | 0) == 16) {
      $547 = HEAP32[$16 + ($$5373 + 5 << 2) >> 2] | 0;
      $549 = HEAP16[$$20$sroa_idx >> 1] | 0;
      $550 = Math_imul($547 >> 16, $549) | 0;
      $553 = (Math_imul($547 & 65535, $549) | 0) >> 16;
      $556 = HEAP32[$16 + ($$5373 + 4 << 2) >> 2] | 0;
      $558 = HEAP16[$$22$sroa_idx >> 1] | 0;
      $559 = Math_imul($556 >> 16, $558) | 0;
      $562 = (Math_imul($556 & 65535, $558) | 0) >> 16;
      $565 = HEAP32[$16 + ($$5373 + 3 << 2) >> 2] | 0;
      $567 = HEAP16[$$24$sroa_idx >> 1] | 0;
      $568 = Math_imul($565 >> 16, $567) | 0;
      $571 = (Math_imul($565 & 65535, $567) | 0) >> 16;
      $574 = HEAP32[$16 + ($$5373 + 2 << 2) >> 2] | 0;
      $576 = HEAP16[$$26$sroa_idx >> 1] | 0;
      $577 = Math_imul($574 >> 16, $576) | 0;
      $580 = (Math_imul($574 & 65535, $576) | 0) >> 16;
      $583 = HEAP32[$16 + ($$5373 + 1 << 2) >> 2] | 0;
      $585 = HEAP16[$$28$sroa_idx >> 1] | 0;
      $586 = Math_imul($583 >> 16, $585) | 0;
      $589 = (Math_imul($583 & 65535, $585) | 0) >> 16;
      $591 = HEAP32[$16 + ($$5373 << 2) >> 2] | 0;
      $593 = HEAP16[$$30$sroa_idx >> 1] | 0;
      $$0326 = $550 + $543 + $553 + $559 + $562 + $568 + $571 + $577 + $580 + $586 + $589 + (Math_imul($591 >> 16, $593) | 0) + ((Math_imul($591 & 65535, $593) | 0) >> 16) | 0;
     } else $$0326 = $543;
     $611 = HEAP32[$$0317 + ($$5373 << 2) >> 2] | 0;
     $613 = ($$0326 | 0) > -134217728 ? $$0326 : -134217728;
     $616 = (($613 | 0) < 134217727 ? $613 : 134217727) << 4;
     $617 = $616 + $611 | 0;
     if (($617 | 0) > -1) $624 = ($616 & $611 | 0) < 0 ? -2147483648 : $617; else $624 = ($616 | $611 | 0) > -1 ? 2147483647 : $617;
     HEAP32[$16 + ($$5373 + 16 << 2) >> 2] = $624;
     $632 = (Math_imul($624 >> 16, $427) | 0) + (Math_imul($624, $430) | 0) + ((Math_imul($624 & 65535, $427) | 0) >> 16) | 0;
     HEAP16[$$0330376 + ($$5373 << 1) >> 1] = ($632 | 0) > 8388479 ? 32767 : ($632 | 0) < -8388736 ? -32768 : (($632 >>> 7) + 1 | 0) >>> 1 & 65535;
     $$5373 = $$5373 + 1 | 0;
     $643 = HEAP32[$12 >> 2] | 0;
     if (($$5373 | 0) >= ($643 | 0)) {
      $$2329401 = $$2329;
      $$lcssa = $643;
      break L53;
     }
    }
   } else {
    $$2329401 = $$2329;
    $$lcssa = $425;
   }
  } while (0);
  dest = $16;
  src = $16 + ($$lcssa << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$0320378 = $$0320378 + 1 | 0;
  if (($$0320378 | 0) >= (HEAP32[$57 >> 2] | 0)) {
   label = 48;
   break;
  } else {
   $$0318381 = $$0318381 + ($$lcssa << 2) | 0;
   $$0327377 = $$2329401;
   $$0330376 = $$0330376 + ($$lcssa << 1) | 0;
  }
 }
 if ((label | 0) == 22) _celt_fatal(43666, 42094, 144); else if ((label | 0) == 40) _celt_fatal(42113, 42094, 199); else if ((label | 0) == 48) {
  dest = $56;
  src = $16;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
}

function _interp_bits2pulses($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 $23 = $23 | 0;
 var $$$0385$us = 0, $$$0385$us$1 = 0, $$$0385$us$2 = 0, $$$0385$us$3 = 0, $$$0395 = 0, $$$pn$us = 0, $$$pn$us$1 = 0, $$$pn$us$2 = 0, $$$pn$us$3 = 0, $$$pn$us$4 = 0, $$$pn$us$5 = 0, $$0 = 0, $$0374$lcssa = 0, $$0374426 = 0, $$0374451 = 0, $$0374451$us = 0, $$0377 = 0, $$0379465$us = 0, $$0379465$us$1 = 0, $$0379465$us$2 = 0, $$0379465$us$3 = 0, $$0379465$us$4 = 0, $$0379465$us$5 = 0, $$0383$$us$1 = 0, $$0383$$us$2 = 0, $$0383$$us$3 = 0, $$0383$$us$4 = 0, $$0383$$us$5 = 0, $$0395$lcssa = 0, $$0395432 = 0, $$0395449 = 0, $$0395449$phi = 0, $$0395449$us = 0, $$0395449$us$phi = 0, $$0396 = 0, $$0396$us = 0, $$0397$ = 0, $$0397440 = 0, $$0398 = 0, $$0398$ = 0, $$0399464$us = 0, $$0399464$us$1 = 0, $$0399464$us$2 = 0, $$0399464$us$3 = 0, $$0399464$us$4 = 0, $$0399464$us$5 = 0, $$0403434 = 0, $$1375 = 0, $$1375$us = 0, $$1378 = 0, $$1382 = 0, $$1400$us = 0, $$1400$us$1 = 0, $$1400$us$2 = 0, $$1400$us$3 = 0, $$1400$us$4 = 0, $$1400$us$5 = 0, $$2$lcssa = 0, $$2401458 = 0, $$2459 = 0, $$3$lcssa = 0, $$3391441 = 0, $$3429 = 0, $$3450 = 0, $$3450$us = 0, $$4 = 0, $$4$us = 0, $$413 = 0, $$4392435 = 0, $$5 = 0, $$5$us = 0, $$5393433 = 0, $$in = 0, $$in474 = 0, $$in474$1 = 0, $$in474$2 = 0, $$in474$3 = 0, $$in474$4 = 0, $$in474$5 = 0, $$pn = 0, $$pre496 = 0, $101 = 0, $116 = 0, $118 = 0, $121 = 0, $122 = 0, $125 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $170 = 0, $172 = 0, $177 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $194 = 0, $195 = 0, $196 = 0, $202 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $212 = 0, $213 = 0, $216 = 0, $223 = 0, $224 = 0, $227 = 0, $235 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $257 = 0, $258 = 0, $26 = 0, $262 = 0, $264 = 0, $265 = 0, $27 = 0, $272 = 0, $273 = 0, $279 = 0, $281 = 0, $283 = 0, $287 = 0, $297 = 0, $299 = 0, $301 = 0, $302 = 0, $303 = 0, $307 = 0, $308 = 0, $310 = 0, $317 = 0, $320 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $332 = 0, $344 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $365 = 0, $373 = 0, $376 = 0, $378 = 0, $386 = 0, $394 = 0, $397 = 0, $399 = 0, $407 = 0, $415 = 0, $418 = 0, $420 = 0, $428 = 0, $43 = 0, $436 = 0, $439 = 0, $448 = 0, $456 = 0, $46 = 0, $47 = 0, $49 = 0, $57 = 0, $64 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $95 = 0, $96 = 0, $99 = 0, $or$cond3 = 0, $spec$select409 = 0, $spec$select411 = 0, $spec$select412 = 0, $spec$select414 = 0, $storemerge = 0, $storemerge$us = 0, label = 0, $216$looptemp = 0, $$3391441$looptemp = 0, $$4392435$looptemp = 0;
 $24 = $18 << 3;
 $25 = ($18 | 0) > 1;
 $26 = $25 & 1;
 $27 = $19 << 3;
 if (($2 | 0) > ($1 | 0)) {
  $$0379465$us = 0;
  $$0399464$us = 0;
  $$in474 = $2;
  while (1) {
   $$in474 = $$in474 + -1 | 0;
   $35 = (HEAP32[$5 + ($$in474 << 2) >> 2] >> 1) + (HEAP32[$4 + ($$in474 << 2) >> 2] | 0) | 0;
   if ($$0399464$us | 0 ? 1 : ($35 | 0) >= (HEAP32[$6 + ($$in474 << 2) >> 2] | 0)) {
    $43 = HEAP32[$7 + ($$in474 << 2) >> 2] | 0;
    $$$pn$us = ($35 | 0) < ($43 | 0) ? $35 : $43;
    $$1400$us = 1;
   } else {
    $$$pn$us = ($35 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us = 0;
   }
   $$0379465$us = $$$pn$us + $$0379465$us | 0;
   if (($$in474 | 0) <= ($1 | 0)) break; else $$0399464$us = $$1400$us;
  }
  $46 = ($$0379465$us | 0) > ($8 | 0);
  $$$0385$us = $46 ? 32 : 64;
  $47 = $46 ? 16 : 48;
  $$0379465$us$1 = 0;
  $$0399464$us$1 = 0;
  $$in474$1 = $2;
  while (1) {
   $$in474$1 = $$in474$1 + -1 | 0;
   $365 = ((Math_imul(HEAP32[$5 + ($$in474$1 << 2) >> 2] | 0, $47) | 0) >> 6) + (HEAP32[$4 + ($$in474$1 << 2) >> 2] | 0) | 0;
   if ($$0399464$us$1 | 0 ? 1 : ($365 | 0) >= (HEAP32[$6 + ($$in474$1 << 2) >> 2] | 0)) {
    $373 = HEAP32[$7 + ($$in474$1 << 2) >> 2] | 0;
    $$$pn$us$1 = ($365 | 0) < ($373 | 0) ? $365 : $373;
    $$1400$us$1 = 1;
   } else {
    $$$pn$us$1 = ($365 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us$1 = 0;
   }
   $$0379465$us$1 = $$$pn$us$1 + $$0379465$us$1 | 0;
   if (($$in474$1 | 0) <= ($1 | 0)) break; else $$0399464$us$1 = $$1400$us$1;
  }
  $376 = ($$0379465$us$1 | 0) > ($8 | 0);
  $$$0385$us$1 = $376 ? $47 : $$$0385$us;
  $$0383$$us$1 = $376 ? ($46 ? 0 : 32) : $47;
  $378 = ($$0383$$us$1 + $$$0385$us$1 | 0) >>> 1;
  $$0379465$us$2 = 0;
  $$0399464$us$2 = 0;
  $$in474$2 = $2;
  while (1) {
   $$in474$2 = $$in474$2 + -1 | 0;
   $386 = ((Math_imul(HEAP32[$5 + ($$in474$2 << 2) >> 2] | 0, $378) | 0) >> 6) + (HEAP32[$4 + ($$in474$2 << 2) >> 2] | 0) | 0;
   if ($$0399464$us$2 | 0 ? 1 : ($386 | 0) >= (HEAP32[$6 + ($$in474$2 << 2) >> 2] | 0)) {
    $394 = HEAP32[$7 + ($$in474$2 << 2) >> 2] | 0;
    $$$pn$us$2 = ($386 | 0) < ($394 | 0) ? $386 : $394;
    $$1400$us$2 = 1;
   } else {
    $$$pn$us$2 = ($386 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us$2 = 0;
   }
   $$0379465$us$2 = $$$pn$us$2 + $$0379465$us$2 | 0;
   if (($$in474$2 | 0) <= ($1 | 0)) break; else $$0399464$us$2 = $$1400$us$2;
  }
  $397 = ($$0379465$us$2 | 0) > ($8 | 0);
  $$$0385$us$2 = $397 ? $378 : $$$0385$us$1;
  $$0383$$us$2 = $397 ? $$0383$$us$1 : $378;
  $399 = ($$0383$$us$2 + $$$0385$us$2 | 0) >>> 1;
  $$0379465$us$3 = 0;
  $$0399464$us$3 = 0;
  $$in474$3 = $2;
  while (1) {
   $$in474$3 = $$in474$3 + -1 | 0;
   $407 = ((Math_imul(HEAP32[$5 + ($$in474$3 << 2) >> 2] | 0, $399) | 0) >> 6) + (HEAP32[$4 + ($$in474$3 << 2) >> 2] | 0) | 0;
   if ($$0399464$us$3 | 0 ? 1 : ($407 | 0) >= (HEAP32[$6 + ($$in474$3 << 2) >> 2] | 0)) {
    $415 = HEAP32[$7 + ($$in474$3 << 2) >> 2] | 0;
    $$$pn$us$3 = ($407 | 0) < ($415 | 0) ? $407 : $415;
    $$1400$us$3 = 1;
   } else {
    $$$pn$us$3 = ($407 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us$3 = 0;
   }
   $$0379465$us$3 = $$$pn$us$3 + $$0379465$us$3 | 0;
   if (($$in474$3 | 0) <= ($1 | 0)) break; else $$0399464$us$3 = $$1400$us$3;
  }
  $418 = ($$0379465$us$3 | 0) > ($8 | 0);
  $$$0385$us$3 = $418 ? $399 : $$$0385$us$2;
  $$0383$$us$3 = $418 ? $$0383$$us$2 : $399;
  $420 = ($$0383$$us$3 + $$$0385$us$3 | 0) >>> 1;
  $$0379465$us$4 = 0;
  $$0399464$us$4 = 0;
  $$in474$4 = $2;
  while (1) {
   $$in474$4 = $$in474$4 + -1 | 0;
   $428 = ((Math_imul(HEAP32[$5 + ($$in474$4 << 2) >> 2] | 0, $420) | 0) >> 6) + (HEAP32[$4 + ($$in474$4 << 2) >> 2] | 0) | 0;
   if ($$0399464$us$4 | 0 ? 1 : ($428 | 0) >= (HEAP32[$6 + ($$in474$4 << 2) >> 2] | 0)) {
    $436 = HEAP32[$7 + ($$in474$4 << 2) >> 2] | 0;
    $$$pn$us$4 = ($428 | 0) < ($436 | 0) ? $428 : $436;
    $$1400$us$4 = 1;
   } else {
    $$$pn$us$4 = ($428 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us$4 = 0;
   }
   $$0379465$us$4 = $$$pn$us$4 + $$0379465$us$4 | 0;
   if (($$in474$4 | 0) <= ($1 | 0)) break; else $$0399464$us$4 = $$1400$us$4;
  }
  $439 = ($$0379465$us$4 | 0) > ($8 | 0);
  $$0383$$us$4 = $439 ? $$0383$$us$3 : $420;
  $49 = ($$0383$$us$4 + ($439 ? $420 : $$$0385$us$3) | 0) >>> 1;
  $$0379465$us$5 = 0;
  $$0399464$us$5 = 0;
  $$in474$5 = $2;
  while (1) {
   $$in474$5 = $$in474$5 + -1 | 0;
   $448 = ((Math_imul(HEAP32[$5 + ($$in474$5 << 2) >> 2] | 0, $49) | 0) >> 6) + (HEAP32[$4 + ($$in474$5 << 2) >> 2] | 0) | 0;
   if ($$0399464$us$5 | 0 ? 1 : ($448 | 0) >= (HEAP32[$6 + ($$in474$5 << 2) >> 2] | 0)) {
    $456 = HEAP32[$7 + ($$in474$5 << 2) >> 2] | 0;
    $$$pn$us$5 = ($448 | 0) < ($456 | 0) ? $448 : $456;
    $$1400$us$5 = 1;
   } else {
    $$$pn$us$5 = ($448 | 0) < ($24 | 0) ? 0 : $24;
    $$1400$us$5 = 0;
   }
   $$0379465$us$5 = $$$pn$us$5 + $$0379465$us$5 | 0;
   if (($$in474$5 | 0) <= ($1 | 0)) break; else $$0399464$us$5 = $$1400$us$5;
  }
  $$0383$$us$5 = ($$0379465$us$5 | 0) > ($8 | 0) ? $$0383$$us$4 : $49;
  $$2401458 = 0;
  $$2459 = 0;
  $$in = $2;
  while (1) {
   $$in = $$in + -1 | 0;
   $57 = ((Math_imul(HEAP32[$5 + ($$in << 2) >> 2] | 0, $$0383$$us$5) | 0) >> 6) + (HEAP32[$4 + ($$in << 2) >> 2] | 0) | 0;
   $or$cond3 = $$2401458 | 0 ? 1 : ($57 | 0) >= (HEAP32[$6 + ($$in << 2) >> 2] | 0);
   $$0398 = $or$cond3 ? $57 : ($57 | 0) < ($24 | 0) ? 0 : $24;
   $64 = HEAP32[$7 + ($$in << 2) >> 2] | 0;
   $$0398$ = ($$0398 | 0) < ($64 | 0) ? $$0398 : $64;
   HEAP32[$15 + ($$in << 2) >> 2] = $$0398$;
   $67 = $$0398$ + $$2459 | 0;
   if (($$in | 0) <= ($1 | 0)) {
    $$2$lcssa = $67;
    break;
   } else {
    $$2401458 = $or$cond3 ? 1 : $$2401458;
    $$2459 = $67;
   }
  }
 } else $$2$lcssa = 0;
 $69 = $2 + -1 | 0;
 L48 : do if (($69 | 0) > ($3 | 0)) {
  $71 = $0 + 32 | 0;
  $72 = $24 + 8 | 0;
  $74 = $1 + 2 | 0;
  if (!$21) {
   $$0374451$us = $12;
   $$0395449$us = $2;
   $$3450$us = $$2$lcssa;
   $88 = $69;
   while (1) {
    $75 = $8 - $$3450$us | 0;
    $76 = HEAP32[$71 >> 2] | 0;
    $79 = HEAP16[$76 + ($$0395449$us << 1) >> 1] | 0;
    $82 = HEAP16[$76 + ($1 << 1) >> 1] | 0;
    $83 = $79 - $82 | 0;
    $84 = _celt_udiv_156($75, $83) | 0;
    $86 = $75 - (Math_imul($83, $84) | 0) | 0;
    $90 = HEAP16[$76 + ($88 << 1) >> 1] | 0;
    $92 = $86 + ($82 - $90) | 0;
    $95 = $15 + ($88 << 2) | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $99 = (Math_imul($79 - $90 | 0, $84) | 0) + $96 + (($92 | 0) > 0 ? $92 : 0) | 0;
    $101 = HEAP32[$6 + ($88 << 2) >> 2] | 0;
    if (($99 | 0) < ((($101 | 0) > ($72 | 0) ? $101 : $72) | 0)) {
     $$0396$us = $99;
     $$4$us = $$3450$us;
     $116 = $96;
    } else {
     if (_ec_dec_bit_logp($20, 1) | 0) {
      $$0 = $8;
      $$0374426 = $$0374451$us;
      $$0395432 = $$0395449$us;
      $$3429 = $$3450$us;
      break L48;
     }
     $$0396$us = $99 + -8 | 0;
     $$4$us = $$3450$us + 8 | 0;
     $116 = HEAP32[$95 >> 2] | 0;
    }
    if (($$0374451$us | 0) > 0) $$1375$us = HEAPU8[20784 + ($88 - $1) >> 0] | 0; else $$1375$us = $$0374451$us;
    $storemerge$us = ($$0396$us | 0) < ($24 | 0) ? 0 : $24;
    $$5$us = $$4$us - $$0374451$us - $116 + $storemerge$us + $$1375$us | 0;
    HEAP32[$95 >> 2] = $storemerge$us;
    $118 = $88 + -1 | 0;
    if (($118 | 0) > ($3 | 0)) {
     $$0395449$us$phi = $88;
     $$0374451$us = $$1375$us;
     $$3450$us = $$5$us;
     $88 = $118;
     $$0395449$us = $$0395449$us$phi;
    } else {
     $$0374$lcssa = $$1375$us;
     $$0395$lcssa = $88;
     $$3$lcssa = $$5$us;
     label = 20;
     break L48;
    }
   }
  }
  $$0374451 = $12;
  $$0395449 = $2;
  $$3450 = $$2$lcssa;
  $134 = $69;
  while (1) {
   $121 = $8 - $$3450 | 0;
   $122 = HEAP32[$71 >> 2] | 0;
   $125 = HEAP16[$122 + ($$0395449 << 1) >> 1] | 0;
   $128 = HEAP16[$122 + ($1 << 1) >> 1] | 0;
   $129 = $125 - $128 | 0;
   $130 = _celt_udiv_156($121, $129) | 0;
   $132 = $121 - (Math_imul($129, $130) | 0) | 0;
   $136 = HEAP16[$122 + ($134 << 1) >> 1] | 0;
   $138 = $132 + ($128 - $136) | 0;
   $140 = $125 - $136 | 0;
   $141 = $15 + ($134 << 2) | 0;
   $142 = HEAP32[$141 >> 2] | 0;
   $145 = (Math_imul($140, $130) | 0) + $142 + (($138 | 0) > 0 ? $138 : 0) | 0;
   $147 = HEAP32[$6 + ($134 << 2) >> 2] | 0;
   if (($145 | 0) < ((($147 | 0) > ($72 | 0) ? $147 : $72) | 0)) {
    $$0396 = $145;
    $$4 = $$3450;
    $170 = $142;
   } else {
    if (($$0395449 | 0) <= ($74 | 0)) break;
    if (!(($134 | 0) > ($23 | 0) ? 1 : ($145 | 0) <= ((Math_imul($140, ($$0395449 | 0) > 17 ? (($$0395449 | 0) > ($22 | 0) ? 9 : 7) : 0) | 0) << $19 << 3 >> 4 | 0))) break;
    _ec_enc_bit_logp($20, 0, 1);
    $$0396 = $145 + -8 | 0;
    $$4 = $$3450 + 8 | 0;
    $170 = HEAP32[$141 >> 2] | 0;
   }
   if (($$0374451 | 0) > 0) $$1375 = HEAPU8[20784 + ($134 - $1) >> 0] | 0; else $$1375 = $$0374451;
   $storemerge = ($$0396 | 0) < ($24 | 0) ? 0 : $24;
   $$5 = $$4 - $$0374451 - $170 + $storemerge + $$1375 | 0;
   HEAP32[$141 >> 2] = $storemerge;
   $172 = $134 + -1 | 0;
   if (($172 | 0) > ($3 | 0)) {
    $$0395449$phi = $134;
    $$0374451 = $$1375;
    $$3450 = $$5;
    $134 = $172;
    $$0395449 = $$0395449$phi;
   } else {
    $$0374$lcssa = $$1375;
    $$0395$lcssa = $134;
    $$3$lcssa = $$5;
    label = 20;
    break L48;
   }
  }
  _ec_enc_bit_logp($20, 1, 1);
  $$0 = $8;
  $$0374426 = $$0374451;
  $$0395432 = $$0395449;
  $$3429 = $$3450;
 } else {
  $$0374$lcssa = $12;
  $$0395$lcssa = $2;
  $$3$lcssa = $$2$lcssa;
  label = 20;
 } while (0);
 if ((label | 0) == 20) {
  $$0 = $10 + $8 | 0;
  $$0374426 = $$0374$lcssa;
  $$0395432 = $$0395$lcssa;
  $$3429 = $$3$lcssa;
 }
 if (($$0395432 | 0) <= ($1 | 0)) _celt_fatal(41663, 41700, 391);
 do if (($$0374426 | 0) > 0) if (!$21) {
  $185 = (_ec_dec_uint($20, $$0395432 + 1 - $1 | 0) | 0) + $1 | 0;
  HEAP32[$11 >> 2] = $185;
  $186 = $185;
  break;
 } else {
  $177 = HEAP32[$11 >> 2] | 0;
  $$$0395 = ($177 | 0) < ($$0395432 | 0) ? $177 : $$0395432;
  HEAP32[$11 >> 2] = $$$0395;
  _ec_enc_uint($20, $$$0395 - $1 | 0, $$0395432 + 1 - $1 | 0);
  $186 = HEAP32[$11 >> 2] | 0;
  break;
 } else {
  HEAP32[$11 >> 2] = 0;
  $186 = 0;
 } while (0);
 $187 = ($186 | 0) > ($1 | 0);
 $188 = $187 ? 0 : $14;
 do if (($14 | 0) > 0 & $187) if (!$21) {
  HEAP32[$13 >> 2] = _ec_dec_bit_logp($20, 1) | 0;
  break;
 } else {
  _ec_enc_bit_logp($20, HEAP32[$13 >> 2] | 0, 1);
  break;
 } else HEAP32[$13 >> 2] = 0; while (0);
 $194 = $$0 - $$3429 + $188 | 0;
 $195 = $0 + 32 | 0;
 $196 = HEAP32[$195 >> 2] | 0;
 $202 = HEAP16[$196 + ($1 << 1) >> 1] | 0;
 $203 = (HEAP16[$196 + ($$0395432 << 1) >> 1] | 0) - $202 | 0;
 $204 = _celt_udiv_156($194, $203) | 0;
 $206 = $194 - (Math_imul($203, $204) | 0) | 0;
 $207 = $1 + 1 | 0;
 $212 = Math_imul((HEAP16[$196 + ($207 << 1) >> 1] | 0) - $202 | 0, $204) | 0;
 $213 = $15 + ($1 << 2) | 0;
 HEAP32[$213 >> 2] = $212 + (HEAP32[$213 >> 2] | 0);
 if (($207 | 0) != ($$0395432 | 0)) {
  $216 = $207;
  do {
   $$pre496 = HEAP32[$195 >> 2] | 0;
   $216$looptemp = $216;
   $216 = $216 + 1 | 0;
   $223 = Math_imul((HEAP16[$$pre496 + ($216 << 1) >> 1] | 0) - (HEAP16[$$pre496 + ($216$looptemp << 1) >> 1] | 0) | 0, $204) | 0;
   $224 = $15 + ($216$looptemp << 2) | 0;
   HEAP32[$224 >> 2] = $223 + (HEAP32[$224 >> 2] | 0);
  } while (($216 | 0) != ($$0395432 | 0));
 }
 $$0397440 = $206;
 $$3391441 = $1;
 while (1) {
  $227 = HEAP32[$195 >> 2] | 0;
  $$3391441$looptemp = $$3391441;
  $$3391441 = $$3391441 + 1 | 0;
  $235 = (HEAP16[$227 + ($$3391441 << 1) >> 1] | 0) - (HEAP16[$227 + ($$3391441$looptemp << 1) >> 1] | 0) | 0;
  $$0397$ = ($$0397440 | 0) < ($235 | 0) ? $$0397440 : $235;
  $237 = $15 + ($$3391441$looptemp << 2) | 0;
  HEAP32[$237 >> 2] = $$0397$ + (HEAP32[$237 >> 2] | 0);
  if (($$3391441 | 0) == ($$0395432 | 0)) break; else $$0397440 = $$0397440 - $$0397$ | 0;
 }
 $241 = ($18 | 0) == 2;
 $242 = $0 + 56 | 0;
 $243 = $25 ? 4 : 3;
 $$0403434 = 0;
 $$4392435 = $1;
 while (1) {
  $246 = $15 + ($$4392435 << 2) | 0;
  $247 = HEAP32[$246 >> 2] | 0;
  if (($247 | 0) <= -1) {
   label = 49;
   break;
  }
  $249 = HEAP32[$195 >> 2] | 0;
  $$4392435$looptemp = $$4392435;
  $$4392435 = $$4392435 + 1 | 0;
  $257 = (HEAP16[$249 + ($$4392435 << 1) >> 1] | 0) - (HEAP16[$249 + ($$4392435$looptemp << 1) >> 1] | 0) << $19;
  $258 = $247 + $$0403434 | 0;
  if (($257 | 0) > 1) {
   $262 = $258 - (HEAP32[$7 + ($$4392435$looptemp << 2) >> 2] | 0) | 0;
   $spec$select409 = ($262 | 0) > 0 ? $262 : 0;
   $264 = $258 - $spec$select409 | 0;
   HEAP32[$246 >> 2] = $264;
   $265 = Math_imul($257, $18) | 0;
   if ($241 & ($257 | 0) != 2) if (!(HEAP32[$13 >> 2] | 0)) $272 = ($$4392435$looptemp | 0) < (HEAP32[$11 >> 2] | 0); else $272 = 0; else $272 = 0;
   $273 = $265 + ($272 & 1) | 0;
   $279 = Math_imul($27 + (HEAP16[(HEAP32[$242 >> 2] | 0) + ($$4392435$looptemp << 1) >> 1] | 0) | 0, $273) | 0;
   $281 = Math_imul($273, -21) | 0;
   $283 = $273 << 3;
   $spec$select414 = (($257 | 0) == 2 ? $283 >> 2 : 0) + $281 + ($279 >> 1) | 0;
   $287 = $spec$select414 + $264 | 0;
   if (($287 | 0) < ($273 << 4 | 0)) $$pn = $279 >> 2; else $$pn = ($287 | 0) < ($273 * 24 | 0) ? $279 >> 3 : 0;
   $$1382 = $$pn + $spec$select414 | 0;
   $297 = ($273 << 2) + $264 + $$1382 | 0;
   $299 = $16 + ($$4392435$looptemp << 2) | 0;
   $301 = (_celt_udiv_156(($297 | 0) > 0 ? $297 : 0, $273) | 0) >>> 3;
   HEAP32[$299 >> 2] = $301;
   $302 = Math_imul($301, $18) | 0;
   $303 = HEAP32[$246 >> 2] | 0;
   if (($302 | 0) > ($303 >> 3 | 0)) {
    $307 = $303 >> $26 >> 3;
    HEAP32[$299 >> 2] = $307;
    $308 = $307;
   } else $308 = $301;
   $spec$select411 = ($308 | 0) < 8 ? $308 : 8;
   HEAP32[$299 >> 2] = $spec$select411;
   $310 = Math_imul($283, $spec$select411) | 0;
   HEAP32[$17 + ($$4392435$looptemp << 2) >> 2] = ($310 | 0) >= ((HEAP32[$246 >> 2] | 0) + $$1382 | 0) & 1;
   $317 = Math_imul($24, HEAP32[$299 >> 2] | 0) | 0;
   HEAP32[$246 >> 2] = (HEAP32[$246 >> 2] | 0) - $317;
   $$0377 = $spec$select409;
  } else {
   $320 = $258 - $24 | 0;
   $spec$select412 = ($320 | 0) > 0 ? $320 : 0;
   HEAP32[$246 >> 2] = $258 - $spec$select412;
   HEAP32[$16 + ($$4392435$looptemp << 2) >> 2] = 0;
   HEAP32[$17 + ($$4392435$looptemp << 2) >> 2] = 1;
   $$0377 = $spec$select412;
  }
  if (!$$0377) $$1378 = 0; else {
   $326 = $$0377 >>> $243;
   $327 = $16 + ($$4392435$looptemp << 2) | 0;
   $328 = HEAP32[$327 >> 2] | 0;
   $329 = 8 - $328 | 0;
   $$413 = ($326 | 0) < ($329 | 0) ? $326 : $329;
   HEAP32[$327 >> 2] = $$413 + $328;
   $332 = Math_imul($24, $$413) | 0;
   HEAP32[$17 + ($$4392435$looptemp << 2) >> 2] = ($332 | 0) >= ($$0377 - $$0403434 | 0) & 1;
   $$1378 = $$0377 - $332 | 0;
  }
  if ((HEAP32[$246 >> 2] | 0) <= -1) {
   label = 64;
   break;
  }
  if ((HEAP32[$16 + ($$4392435$looptemp << 2) >> 2] | 0) <= -1) {
   label = 66;
   break;
  }
  if (($$4392435 | 0) >= ($$0395432 | 0)) {
   label = 67;
   break;
  } else $$0403434 = $$1378;
 }
 if ((label | 0) == 49) _celt_fatal(41712, 41700, 442); else if ((label | 0) == 64) _celt_fatal(41712, 41700, 513); else if ((label | 0) == 66) _celt_fatal(41743, 41700, 514); else if ((label | 0) == 67) {
  HEAP32[$9 >> 2] = $$1378;
  if (($$4392435 | 0) >= ($2 | 0)) return $$0395432 | 0;
  $$5393433 = $$4392435;
  while (1) {
   $344 = $15 + ($$5393433 << 2) | 0;
   $347 = HEAP32[$344 >> 2] >> $26 >> 3;
   $348 = $16 + ($$5393433 << 2) | 0;
   HEAP32[$348 >> 2] = $347;
   $349 = Math_imul($24, $347) | 0;
   if (($349 | 0) != (HEAP32[$344 >> 2] | 0)) {
    label = 70;
    break;
   }
   HEAP32[$344 >> 2] = 0;
   HEAP32[$17 + ($$5393433 << 2) >> 2] = (HEAP32[$348 >> 2] | 0) < 1 & 1;
   $$5393433 = $$5393433 + 1 | 0;
   if (($$5393433 | 0) >= ($2 | 0)) {
    label = 72;
    break;
   }
  }
  if ((label | 0) == 70) _celt_fatal(41775, 41700, 524); else if ((label | 0) == 72) return $$0395432 | 0;
 }
 return 0;
}

function _opus_decode_frame($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$0 = 0, $$0352400404$ph = 0, $$0352400404500 = 0, $$0355 = 0, $$0356 = 0, $$0357 = 0, $$0357$us = 0, $$0358 = 0, $$0358$us = 0, $$0359398405$ph = 0, $$0359398405499 = 0, $$0359399 = 0, $$0360455 = 0, $$0362 = 0, $$0363504 = 0, $$0366 = 0, $$0368 = 0, $$0370408$ph = 0, $$0370408496 = 0, $$0370409418429 = 0, $$0370409418429517 = 0, $$0371465$us = 0, $$0372433 = 0, $$0372433514 = 0, $$0375422424 = 0, $$0379503 = 0, $$0381406$ph = 0, $$0381406497 = 0, $$1 = 0, $$1354434 = 0, $$1354434512 = 0, $$1361478 = 0, $$1367 = 0, $$1369410$ph = 0, $$1369410493 = 0, $$1374432 = 0, $$1374432515 = 0, $$2377431 = 0, $$2377431516 = 0, $$2474 = 0, $$3471 = 0, $$386 = 0, $$5458 = 0, $$6456 = 0, $$alloca_mul35 = 0, $$alloca_mul40 = 0, $$idx396 = 0, $$idx397 = 0, $$lcssa = 0, $$lcssa453 = 0, $$lcssa454 = 0, $$ph = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $111 = 0, $117 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $137 = 0, $141 = 0, $142 = 0, $144 = 0, $15 = 0, $153 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $181 = 0, $186 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $200 = 0, $208 = 0, $21 = 0, $211 = 0, $228 = 0, $232 = 0, $235 = 0, $24 = 0, $248 = 0, $250 = 0, $256 = 0, $260 = 0, $263 = 0, $265 = 0, $267 = 0, $268 = 0, $271 = 0, $276 = 0, $277 = 0, $28 = 0, $284 = 0, $286 = 0, $288 = 0, $291 = 0, $292 = 0, $293 = 0, $299 = 0, $300 = 0, $303 = 0, $307 = 0, $314 = 0.0, $315 = 0, $319 = 0, $32 = 0, $334 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $44 = 0, $47 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $85 = 0, $9 = 0, $90 = 0, $96 = 0, $98 = 0, $or$cond11446 = 0, $spec$select388 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $vararg_buffer26 = sp + 80 | 0;
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer21 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 84 | 0;
 HEAP32[$8 >> 2] = 0;
 $13 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
 $15 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 $16 = $0 + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = ($17 | 0) / 50 | 0;
 $19 = $18 >> 1;
 $20 = $18 >> 2;
 $21 = $18 >> 3;
 if (($21 | 0) > ($4 | 0)) {
  $$1 = -2;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $24 = (($17 | 0) / 25 | 0) * 3 | 0;
 $$ = ($24 | 0) > ($4 | 0) ? $4 : $24;
 do if (($2 | 0) < 2) {
  $28 = HEAP32[$0 + 64 >> 2] | 0;
  $$0359399 = ($$ | 0) < ($28 | 0) ? $$ : $28;
  label = 5;
 } else if (!$1) {
  $$0359399 = $$;
  label = 5;
 } else {
  $60 = HEAP32[$0 + 64 >> 2] | 0;
  $62 = HEAP32[$0 + 56 >> 2] | 0;
  $64 = HEAP32[$0 + 52 >> 2] | 0;
  _ec_dec_init($6, $1, $2);
  $66 = HEAP32[$0 + 60 >> 2] | 0;
  if (($66 | 0) > 0) {
   $68 = ($62 | 0) == 1002;
   $69 = ($66 | 0) == 1002;
   if ($69 | $68 ^ 1) label = 18; else if (HEAP32[$0 + 68 >> 2] | 0) label = 18;
   if ((label | 0) == 18) {
    if ($68) {
     $$0352400404$ph = $1;
     $$0359398405$ph = $$;
     $$0370408$ph = 1002;
     $$0381406$ph = $64;
     $$1369410$ph = $60;
     $$ph = 1;
     label = 20;
     break;
    }
    if (!$69) {
     $$0352400404$ph = $1;
     $$0359398405$ph = $$;
     $$0370408$ph = $62;
     $$0381406$ph = $64;
     $$1369410$ph = $60;
     $$ph = 1;
     label = 20;
     break;
    }
   }
   $77 = Math_imul(HEAP32[$0 + 8 >> 2] | 0, $20) | 0;
   $$386 = $68 ? 1 : $77;
   $78 = _llvm_stacksave() | 0;
   $79 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * (($68 ? $77 : 1) << 2) | 0) + 15 & -16) | 0;
   if ($68) {
    _opus_decode_frame($0, 0, 0, $79, ($20 | 0) < ($60 | 0) ? $20 : $60, 0) | 0;
    $$0352400404500 = $1;
    $$0359398405499 = $$;
    $$0363504 = $$386;
    $$0366 = $79;
    $$0370408496 = 1002;
    $$0379503 = 1;
    $$0381406497 = $64;
    $$1369410493 = $60;
    $142 = 1;
    $339 = $78;
    $340 = 1;
   } else {
    $$0352400404500 = $1;
    $$0359398405499 = $$;
    $$0363504 = $$386;
    $$0366 = 0;
    $$0370408496 = $62;
    $$0379503 = 1;
    $$0381406497 = $64;
    $$1369410493 = $60;
    $142 = 1;
    $339 = $78;
    $340 = 0;
   }
  } else {
   $$0352400404$ph = $1;
   $$0359398405$ph = $$;
   $$0370408$ph = $62;
   $$0381406$ph = $64;
   $$1369410$ph = $60;
   $$ph = 1;
   label = 20;
  }
 } while (0);
 do if ((label | 0) == 5) {
  $32 = HEAP32[$0 + 60 >> 2] | 0;
  if (!$32) {
   $34 = $0 + 8 | 0;
   if ((Math_imul(HEAP32[$34 >> 2] | 0, $$0359399) | 0) <= 0) {
    $$1 = $$0359399;
    STACKTOP = sp;
    return $$1 | 0;
   }
   $$0360455 = 0;
   do {
    HEAPF32[$3 + ($$0360455 << 2) >> 2] = 0.0;
    $$0360455 = $$0360455 + 1 | 0;
   } while (($$0360455 | 0) < (Math_imul(HEAP32[$34 >> 2] | 0, $$0359399) | 0));
   $$1 = $$0359399;
   STACKTOP = sp;
   return $$1 | 0;
  }
  if (($$0359399 | 0) <= ($18 | 0)) {
   if (($$0359399 | 0) >= ($18 | 0)) {
    $$0352400404$ph = 0;
    $$0359398405$ph = $$0359399;
    $$0370408$ph = $32;
    $$0381406$ph = 0;
    $$1369410$ph = $$0359399;
    $$ph = 0;
    label = 20;
    break;
   }
   $$0352400404$ph = 0;
   $$0359398405$ph = $$0359399;
   $$0370408$ph = $32;
   $$0381406$ph = 0;
   $$1369410$ph = ($$0359399 | 0) > ($19 | 0) ? $19 : ($$0359399 | 0) < ($19 | 0) & (($$0359399 | 0) > ($20 | 0) & ($32 | 0) != 1e3) ? $20 : $$0359399;
   $$ph = 0;
   label = 20;
   break;
  }
  $44 = $0 + 8 | 0;
  $$0356 = $3;
  $$0368 = $$0359399;
  while (1) {
   $47 = _opus_decode_frame($0, 0, 0, $$0356, ($$0368 | 0) < ($18 | 0) ? $$0368 : $18, 0) | 0;
   if (($47 | 0) < 0) {
    $$1 = $47;
    label = 126;
    break;
   }
   $$0356 = $$0356 + ((Math_imul(HEAP32[$44 >> 2] | 0, $47) | 0) << 2) | 0;
   $$0368 = $$0368 - $47 | 0;
   if (($$0368 | 0) <= 0) {
    $$1 = $$0359399;
    label = 126;
    break;
   }
  }
  if ((label | 0) == 126) {
   STACKTOP = sp;
   return $$1 | 0;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0352400404500 = $$0352400404$ph;
  $$0359398405499 = $$0359398405$ph;
  $$0363504 = 1;
  $$0366 = 0;
  $$0370408496 = $$0370408$ph;
  $$0379503 = 0;
  $$0381406497 = $$0381406$ph;
  $$1369410493 = $$1369410$ph;
  $142 = $$ph;
  $339 = _llvm_stacksave() | 0;
  $340 = ($$0370408$ph | 0) == 1002;
 }
 L40 : do if (($$1369410493 | 0) > ($$0359398405499 | 0)) $$0 = -1; else {
  if ($340) {
   $83 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $$0370409418429517 = 1002;
   $$0372433514 = 0;
   $$1354434512 = $2;
   $$1367 = $$0366;
   $$1374432515 = 0;
   $$2377431516 = 0;
   $193 = 0;
   $208 = ($5 | 0) == 0;
   $235 = $83;
   $334 = 0;
   $341 = $$0379503;
  } else {
   $85 = $0 + 8 | 0;
   $$alloca_mul35 = (Math_imul(HEAP32[$85 >> 2] | 0, ($19 | 0) > ($$1369410493 | 0) ? $19 : $$1369410493) | 0) << 1;
   $90 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul35 | 0) + 15 & -16) | 0;
   if ((HEAP32[$0 + 60 >> 2] | 0) == 1002) _silk_InitDecoder($13);
   $96 = ($$1369410493 * 1e3 | 0) / (HEAP32[$16 >> 2] | 0) | 0;
   $98 = $0 + 16 | 0;
   HEAP32[$0 + 32 >> 2] = ($96 | 0) > 10 ? $96 : 10;
   L48 : do if ($142) {
    HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 48 >> 2];
    if (($$0370408496 | 0) != 1e3) {
     HEAP32[$0 + 28 >> 2] = 16e3;
     break;
    }
    switch ($$0381406497 | 0) {
    case 1101:
     {
      HEAP32[$0 + 28 >> 2] = 8e3;
      break L48;
      break;
     }
    case 1102:
     {
      HEAP32[$0 + 28 >> 2] = 12e3;
      break L48;
      break;
     }
    default:
     {
      HEAP32[$0 + 28 >> 2] = 16e3;
      if (($$0381406497 | 0) == 1103) break L48;
      _celt_fatal(47580, 47468, 389);
     }
    }
   } while (0);
   $111 = ($$0352400404500 | 0) == 0 ? 1 : $5 << 1;
   if (!$111) {
    $$0357$us = $90;
    $$0358$us = 0;
    do {
     if (_silk_Decode($13, $98, 0, ($$0358$us | 0) == 0 & 1, $6, $$0357$us, $7) | 0) {
      $$0 = -3;
      break L40;
     }
     $117 = HEAP32[$7 >> 2] | 0;
     $$0357$us = $$0357$us + ((Math_imul(HEAP32[$85 >> 2] | 0, $117) | 0) << 1) | 0;
     $$0358$us = $117 + $$0358$us | 0;
    } while (($$0358$us | 0) < ($$1369410493 | 0));
   } else {
    $$0357 = $90;
    $$0358 = 0;
    do {
     if (!(_silk_Decode($13, $98, $111, ($$0358 | 0) == 0 & 1, $6, $$0357, $7) | 0)) $137 = HEAP32[$85 >> 2] | 0; else {
      HEAP32[$7 >> 2] = $$1369410493;
      $127 = HEAP32[$85 >> 2] | 0;
      if ((Math_imul($127, $$1369410493) | 0) > 0) {
       $$1361478 = 0;
       do {
        HEAP16[$$0357 + ($$1361478 << 1) >> 1] = 0;
        $$1361478 = $$1361478 + 1 | 0;
        $132 = HEAP32[$85 >> 2] | 0;
       } while (($$1361478 | 0) < (Math_imul($132, $$1369410493) | 0));
       $137 = $132;
      } else $137 = $127;
     }
     $135 = HEAP32[$7 >> 2] | 0;
     $$0357 = $$0357 + ((Math_imul($137, $135) | 0) << 1) | 0;
     $$0358 = $135 + $$0358 | 0;
    } while (($$0358 | 0) < ($$1369410493 | 0));
   }
   $141 = ($5 | 0) == 0;
   do if ($141 & $142) {
    $$idx396 = $6 + 20 | 0;
    $$idx397 = $6 + 28 | 0;
    $144 = (_ec_tell_644(HEAP32[$$idx396 >> 2] | 0, HEAP32[$$idx397 >> 2] | 0) | 0) + 17 | 0;
    if (($144 + ((HEAP32[$0 + 56 >> 2] | 0) == 1001 ? 20 : 0) | 0) > ($2 << 3 | 0)) {
     $$0370409418429 = $$0370408496;
     $$0372433 = 0;
     $$1354434 = $2;
     $$1374432 = 0;
     $$2377431 = 0;
     $342 = 1;
    } else {
     if (($$0370408496 | 0) == 1001) {
      $153 = _ec_dec_bit_logp($6, 12) | 0;
      if (!$153) {
       $$0370409418429 = 1001;
       $$0372433 = 0;
       $$1354434 = $2;
       $$1374432 = 0;
       $$2377431 = 0;
       $342 = 1;
       break;
      }
      $155 = _ec_dec_bit_logp($6, 1) | 0;
      $157 = (_ec_dec_uint($6, 256) | 0) + 2 | 0;
      $$0375422424 = $153;
      $$pre$phiZ2D = _ec_tell_644(HEAP32[$$idx396 >> 2] | 0, HEAP32[$$idx397 >> 2] | 0) | 0;
      $164 = $157;
      $343 = $155;
     } else {
      $158 = _ec_dec_bit_logp($6, 1) | 0;
      $159 = _ec_tell_644(HEAP32[$$idx396 >> 2] | 0, HEAP32[$$idx397 >> 2] | 0) | 0;
      $$0375422424 = 1;
      $$pre$phiZ2D = $159;
      $164 = $2 - ($159 + 7 >> 3) | 0;
      $343 = $158;
     }
     $163 = $2 - $164 | 0;
     $166 = ($163 << 3 | 0) < ($$pre$phiZ2D | 0);
     $spec$select388 = $166 ? 0 : $164;
     $167 = $6 + 4 | 0;
     HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) - $spec$select388;
     $$0370409418429 = $$0370408496;
     $$0372433 = $343;
     $$1354434 = $166 ? 0 : $163;
     $$1374432 = $spec$select388;
     $$2377431 = $166 ? 0 : $$0375422424;
     $342 = 1;
    }
   } else {
    $$0370409418429 = $$0370408496;
    $$0372433 = 0;
    $$1354434 = $2;
    $$1374432 = 0;
    $$2377431 = 0;
    $342 = $141;
   } while (0);
   $170 = ($$2377431 | 0) != 0;
   $171 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * (($170 ? 1 : $$0363504) << 2) | 0) + 15 & -16) | 0;
   if ($$0379503 & ($170 ^ 1)) {
    _opus_decode_frame($0, 0, 0, $171, ($20 | 0) < ($$1369410493 | 0) ? $20 : $$1369410493, 0) | 0;
    $$0370409418429517 = $$0370409418429;
    $$0372433514 = $$0372433;
    $$1354434512 = $$1354434;
    $$1367 = $171;
    $$1374432515 = $$1374432;
    $$2377431516 = $$2377431;
    $193 = 17;
    $208 = $342;
    $235 = $90;
    $334 = $170;
    $341 = 1;
   } else {
    $$0370409418429517 = $$0370409418429;
    $$0372433514 = $$0372433;
    $$1354434512 = $$1354434;
    $$1367 = $$0366;
    $$1374432515 = $$1374432;
    $$2377431516 = $$2377431;
    $193 = 17;
    $208 = $342;
    $235 = $90;
    $334 = $170;
    $341 = 0;
   }
  }
  switch ($$0381406497 | 0) {
  case 0:
   break;
  case 1101:
   {
    $$0355 = 13;
    label = 61;
    break;
   }
  case 1103:
  case 1102:
   {
    $$0355 = 17;
    label = 61;
    break;
   }
  case 1104:
   {
    $$0355 = 19;
    label = 61;
    break;
   }
  case 1105:
   {
    $$0355 = 21;
    label = 61;
    break;
   }
  default:
   _celt_fatal(47580, 47468, 488);
  }
  if ((label | 0) == 61) {
   HEAP32[$vararg_buffer >> 2] = $$0355;
   if (_opus_custom_decoder_ctl($15, 10012, $vararg_buffer) | 0) _celt_fatal(47600, 47468, 491);
  }
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 48 >> 2];
  if (_opus_custom_decoder_ctl($15, 10008, $vararg_buffer1) | 0) _celt_fatal(47735, 47468, 493);
  if ($334) {
   $$alloca_mul40 = (Math_imul(HEAP32[$0 + 8 >> 2] | 0, $20) | 0) << 2;
   $186 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul40 | 0) + 15 & -16) | 0;
   if (!$$0372433514) {
    $250 = 0;
    $256 = $186;
    $or$cond11446 = 0;
   } else {
    HEAP32[$vararg_buffer4 >> 2] = 0;
    if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer4) | 0) _celt_fatal(47894, 47468, 502);
    _celt_decode_with_ec($15, $$0352400404500 + $$1354434512 | 0, $$1374432515, $186, $20, 0) | 0;
    HEAP32[$vararg_buffer7 >> 2] = $8;
    if (!(_opus_custom_decoder_ctl($15, 4031, $vararg_buffer7) | 0)) {
     $250 = 1;
     $256 = $186;
     $or$cond11446 = 1;
    } else _celt_fatal(48017, 47468, 505);
   }
  } else {
   $181 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $250 = ($$0372433514 | 0) != 0;
   $256 = $181;
   $or$cond11446 = 0;
  }
  HEAP32[$vararg_buffer10 >> 2] = $193;
  if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer10) | 0) _celt_fatal(48162, 47468, 509);
  do if (($$0370409418429517 | 0) == 1e3) {
   HEAP16[$9 >> 1] = -1;
   $211 = $0 + 8 | 0;
   if ((Math_imul(HEAP32[$211 >> 2] | 0, $$1369410493) | 0) > 0) {
    $$2474 = 0;
    do {
     HEAPF32[$3 + ($$2474 << 2) >> 2] = 0.0;
     $$2474 = $$2474 + 1 | 0;
    } while (($$2474 | 0) < (Math_imul(HEAP32[$211 >> 2] | 0, $$1369410493) | 0));
   }
   if ((HEAP32[$0 + 60 >> 2] | 0) == 1001) {
    if ($or$cond11446) if (HEAP32[$0 + 68 >> 2] | 0) {
     $$0362 = 0;
     break;
    }
    HEAP32[$vararg_buffer15 >> 2] = 0;
    if (!(_opus_custom_decoder_ctl($15, 10010, $vararg_buffer15) | 0)) {
     _celt_decode_with_ec($15, $9, 2, $3, $21, 0) | 0;
     $$0362 = 0;
     break;
    } else _celt_fatal(47894, 47468, 531);
   } else $$0362 = 0;
  } else {
   $198 = ($18 | 0) < ($$1369410493 | 0) ? $18 : $$1369410493;
   $200 = HEAP32[$0 + 60 >> 2] | 0;
   if (($$0370409418429517 | 0) != ($200 | 0) & ($200 | 0) > 0) if (!(HEAP32[$0 + 68 >> 2] | 0)) if (_opus_custom_decoder_ctl($15, 4028, $vararg_buffer13) | 0) _celt_fatal(48303, 47468, 516);
   $$0362 = _celt_decode_with_ec($15, $208 ? $$0352400404500 : 0, $$1354434512, $3, $198, $6) | 0;
  } while (0);
  if (!$340) {
   $228 = $0 + 8 | 0;
   if ((Math_imul(HEAP32[$228 >> 2] | 0, $$1369410493) | 0) > 0) {
    $$3471 = 0;
    do {
     $232 = $3 + ($$3471 << 2) | 0;
     HEAPF32[$232 >> 2] = +HEAPF32[$232 >> 2] + +(HEAP16[$235 + ($$3471 << 1) >> 1] | 0) * .000030517578125;
     $$3471 = $$3471 + 1 | 0;
    } while (($$3471 | 0) < (Math_imul(HEAP32[$228 >> 2] | 0, $$1369410493) | 0));
   }
  }
  HEAP32[$vararg_buffer18 >> 2] = $10;
  if (_opus_custom_decoder_ctl($15, 10015, $vararg_buffer18) | 0) _celt_fatal(48374, 47468, 549);
  $248 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0;
  do if (!(($$2377431516 | 0) == 0 | $250)) {
   if (_opus_custom_decoder_ctl($15, 4028, $vararg_buffer21) | 0) _celt_fatal(48303, 47468, 556);
   HEAP32[$vararg_buffer23 >> 2] = 0;
   if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer23) | 0) _celt_fatal(47894, 47468, 557);
   _celt_decode_with_ec($15, $$0352400404500 + $$1354434512 | 0, $$1374432515, $256, $20, 0) | 0;
   HEAP32[$vararg_buffer26 >> 2] = $8;
   if (!(_opus_custom_decoder_ctl($15, 4031, $vararg_buffer26) | 0)) {
    $260 = HEAP32[$0 + 8 >> 2] | 0;
    $263 = $3 + ((Math_imul($260, $$1369410493 - $21 | 0) | 0) << 2) | 0;
    $265 = $256 + ((Math_imul($260, $21) | 0) << 2) | 0;
    _smooth_fade($263, $265, $263, $21, $260, $248, HEAP32[$16 >> 2] | 0);
    break;
   } else _celt_fatal(48017, 47468, 560);
  } while (0);
  if ($or$cond11446) {
   $267 = $0 + 8 | 0;
   $268 = HEAP32[$267 >> 2] | 0;
   if (($268 | 0) > 0 & ($17 | 0) > 399) {
    $271 = ($17 | 0) > 799;
    $$0371465$us = 0;
    do {
     HEAP32[$3 + ($$0371465$us << 2) >> 2] = HEAP32[$256 + ($$0371465$us << 2) >> 2];
     if ($271) {
      $276 = 1;
      do {
       $277 = (Math_imul(HEAP32[$267 >> 2] | 0, $276) | 0) + $$0371465$us | 0;
       HEAP32[$3 + ($277 << 2) >> 2] = HEAP32[$256 + ($277 << 2) >> 2];
       $276 = $276 + 1 | 0;
      } while (($276 | 0) < ($21 | 0));
     }
     $$0371465$us = $$0371465$us + 1 | 0;
     $284 = HEAP32[$267 >> 2] | 0;
    } while (($$0371465$us | 0) < ($284 | 0));
    $$lcssa454 = $284;
   } else $$lcssa454 = $268;
   $286 = Math_imul($$lcssa454, $21) | 0;
   $288 = $3 + ($286 << 2) | 0;
   _smooth_fade($256 + ($286 << 2) | 0, $288, $288, $21, $$lcssa454, $248, HEAP32[$16 >> 2] | 0);
  }
  do if ($341) {
   $291 = $0 + 8 | 0;
   $292 = HEAP32[$291 >> 2] | 0;
   if (($$1369410493 | 0) < ($20 | 0)) {
    _smooth_fade($$1367, $3, $3, $21, $292, $248, HEAP32[$16 >> 2] | 0);
    break;
   }
   $293 = Math_imul($292, $21) | 0;
   if (($293 | 0) > 0) {
    $$5458 = 0;
    do {
     HEAP32[$3 + ($$5458 << 2) >> 2] = HEAP32[$$1367 + ($$5458 << 2) >> 2];
     $$5458 = $$5458 + 1 | 0;
     $299 = HEAP32[$291 >> 2] | 0;
     $300 = Math_imul($299, $21) | 0;
    } while (($$5458 | 0) < ($300 | 0));
    $$lcssa = $300;
    $$lcssa453 = $299;
   } else {
    $$lcssa = $293;
    $$lcssa453 = $292;
   }
   $303 = $3 + ($$lcssa << 2) | 0;
   _smooth_fade($$1367 + ($$lcssa << 2) | 0, $303, $303, $21, $$lcssa453, $248, HEAP32[$16 >> 2] | 0);
  } while (0);
  $307 = HEAP32[$0 + 40 >> 2] | 0;
  if ($307 | 0) {
   $314 = +Math_exp(+(+($307 | 0) * 6.488140788860619e-04 * .6931471805599453));
   $315 = $0 + 8 | 0;
   if ((Math_imul(HEAP32[$315 >> 2] | 0, $$1369410493) | 0) > 0) {
    $$6456 = 0;
    do {
     $319 = $3 + ($$6456 << 2) | 0;
     HEAPF32[$319 >> 2] = +HEAPF32[$319 >> 2] * $314;
     $$6456 = $$6456 + 1 | 0;
    } while (($$6456 | 0) < (Math_imul(HEAP32[$315 >> 2] | 0, $$1369410493) | 0));
   }
  }
  if (($$1354434512 | 0) < 2) $$sink = 0; else $$sink = HEAP32[$8 >> 2] ^ HEAP32[$6 + 28 >> 2];
  HEAP32[$0 + 84 >> 2] = $$sink;
  HEAP32[$0 + 60 >> 2] = $$0370409418429517;
  HEAP32[$0 + 68 >> 2] = $334 & ($250 ^ 1) & 1;
  $$0 = ($$0362 | 0) < 0 ? $$0362 : $$1369410493;
 } while (0);
 _llvm_stackrestore($339 | 0);
 $$1 = $$0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _celt_decode_with_ec($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$0433 = 0, $$0434$lcssa = 0, $$0434540 = 0, $$0435539 = 0, $$0436 = 0, $$0436$idx$val1 = 0, $$0436$idx2$val = 0, $$0436$idx3$val = 0, $$0436$idx4$val = 0, $$0436$idx489$val = 0, $$0436$idx489$val$pre = 0, $$0436$idx491 = 0, $$0436$idx491$val = 0, $$0436$idx492 = 0, $$0436$idx5$val = 0, $$0436$idx5$val12 = 0, $$0436$idx5$val13 = 0, $$0436$idx5$val14 = 0, $$0436$idx5$val15 = 0, $$0436$idx5$val16 = 0, $$0436$idx6$val = 0, $$0436$idx6$val18 = 0, $$0436$idx6$val19 = 0, $$0436$idx6$val20 = 0, $$0436$idx6$val21 = 0, $$0436$idx6$val22 = 0, $$0437 = 0, $$0439562 = 0, $$0443 = 0, $$0445 = 0, $$0446565 = 0, $$0448495 = 0, $$0448496 = 0, $$0450 = 0, $$0452 = 0, $$0455555 = 0, $$0457 = 0, $$0463$lcssa = 0, $$0463553 = 0, $$0465 = 0.0, $$1 = 0, $$1438 = 0, $$1440556 = 0, $$1451 = 0, $$1453 = 0, $$1458 = 0, $$1464$lcssa = 0, $$1464$lcssa588 = 0, $$1464537 = 0, $$1466 = 0.0, $$2 = 0, $$2$us = 0, $$2441534 = 0, $$2454 = 0, $$3442529 = 0, $$3460$lcssa = 0, $$3460554 = 0, $$4461538 = 0, $$4526 = 0, $$470 = 0, $$471 = 0, $$5462 = 0, $$5462589 = 0, $$5514$us = 0, $$5514$us$1 = 0, $$6515$us = 0, $$6515$us$1 = 0, $$6515$us520 = 0, $$6515$us520$1 = 0, $$alloca_mul19 = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $104 = 0, $11 = 0, $114 = 0, $116 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $142 = 0, $143 = 0, $145 = 0, $15 = 0, $152 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $20 = 0, $203 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $231 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $249 = 0, $251 = 0, $253 = 0, $255 = 0, $26 = 0, $269 = 0, $27 = 0, $274 = 0, $276 = 0.0, $278 = 0.0, $282 = 0, $283 = 0.0, $285 = 0.0, $29 = 0, $290 = 0, $30 = 0, $314 = 0, $319 = 0, $324 = 0, $329 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $48 = 0, $51 = 0, $53 = 0, $6 = 0, $61 = 0, $7 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $82 = 0.0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $98 = 0, $phitmp = 0, $spec$select = 0, $spec$select473 = 0, $spec$select473$us = 0, $spec$select503 = 0, label = 0, sp = 0, $$1440556$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 $13 = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$10 >> 2] = 0;
 $15 = HEAP32[$0 + 12 >> 2] | 0;
 _validate_celt_decoder($0);
 $16 = HEAP32[$0 >> 2] | 0;
 $18 = HEAP32[$16 + 8 >> 2] | 0;
 $20 = HEAP32[$16 + 4 >> 2] | 0;
 $22 = HEAP32[$16 + 32 >> 2] | 0;
 $24 = HEAP32[$0 + 20 >> 2] | 0;
 $26 = HEAP32[$0 + 24 >> 2] | 0;
 $27 = $0 + 16 | 0;
 $29 = Math_imul(HEAP32[$27 >> 2] | 0, $4) | 0;
 $30 = $20 + 2048 | 0;
 $34 = $0 + 92 + ((Math_imul($30, $13) | 0) << 2) + ($13 * 24 << 2) | 0;
 $35 = $18 << 1;
 $36 = $34 + ($35 << 2) | 0;
 $37 = $36 + ($35 << 2) | 0;
 $38 = $37 + ($35 << 2) | 0;
 $40 = HEAP32[$16 + 36 >> 2] | 0;
 if (($40 | 0) < 0) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $42 = $16 + 44 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $$0446565 = 0;
 while (1) {
  if (($43 << $$0446565 | 0) == ($29 | 0)) break;
  if (($$0446565 | 0) < ($40 | 0)) $$0446565 = $$0446565 + 1 | 0; else {
   $$1 = -1;
   label = 85;
   break;
  }
 }
 if ((label | 0) == 85) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 $48 = 1 << $$0446565;
 if ($2 >>> 0 > 1275 | ($3 | 0) == 0) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $51 = 0 - $29 | 0;
 $$0437 = 0;
 do {
  $53 = $0 + 92 + ((Math_imul($$0437, $30) | 0) << 2) | 0;
  HEAP32[$7 + ($$0437 << 2) >> 2] = $53;
  HEAP32[$8 + ($$0437 << 2) >> 2] = $53 + 8192 + ($51 << 2);
  $$0437 = $$0437 + 1 | 0;
 } while (($$0437 | 0) < ($13 | 0));
 $61 = HEAP32[$16 + 12 >> 2] | 0;
 $spec$select = ($26 | 0) > ($61 | 0) ? $61 : $26;
 if (($1 | 0) == 0 | ($2 | 0) < 2) {
  _celt_decode_lost($0, $29, $$0446565);
  _deemphasis($8, $3, $29, $13, HEAP32[$27 >> 2] | 0, $16 + 16 | 0, $0 + 84 | 0);
  $$1 = ($29 | 0) / (HEAP32[$27 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $70 = $0 + 52 | 0;
 HEAP32[$0 + 56 >> 2] = (HEAP32[$70 >> 2] | 0) != 0 & 1;
 if (!$5) {
  _ec_dec_init($6, $1, $2);
  $$0436 = $6;
 } else $$0436 = $5;
 $76 = ($15 | 0) == 1;
 $77 = ($18 | 0) > 0;
 if ($76 & $77) {
  $$0439562 = 0;
  do {
   $78 = $34 + ($$0439562 << 2) | 0;
   $79 = +HEAPF32[$78 >> 2];
   $82 = +HEAPF32[$34 + ($$0439562 + $18 << 2) >> 2];
   HEAPF32[$78 >> 2] = $79 > $82 ? $79 : $82;
   $$0439562 = $$0439562 + 1 | 0;
  } while (($$0439562 | 0) != ($18 | 0));
 }
 $85 = $2 << 3;
 $$0436$idx491 = $$0436 + 20 | 0;
 $$0436$idx491$val = HEAP32[$$0436$idx491 >> 2] | 0;
 $$0436$idx492 = $$0436 + 28 | 0;
 $86 = _ec_tell_40($$0436$idx491$val, HEAP32[$$0436$idx492 >> 2] | 0) | 0;
 if (($86 | 0) < ($85 | 0)) if (($86 | 0) == 1) {
  $89 = _ec_dec_bit_logp($$0436, 15) | 0;
  if (!$89) {
   $$0448495 = 0;
   $$0457 = 1;
   $215 = 0;
  } else {
   $$0436$idx489$val$pre = HEAP32[$$0436$idx491 >> 2] | 0;
   $$0436$idx489$val = $$0436$idx489$val$pre;
   $$0448496 = $89;
   $$pre$phi24Z2D = _ec_tell_40($$0436$idx489$val$pre, HEAP32[$$0436$idx492 >> 2] | 0) | 0;
   label = 19;
  }
 } else {
  $$0448495 = 0;
  $$0457 = $86;
  $215 = 0;
 } else {
  $$0436$idx489$val = $$0436$idx491$val;
  $$0448496 = 1;
  $$pre$phi24Z2D = $86;
  label = 19;
 }
 if ((label | 0) == 19) {
  HEAP32[$$0436$idx491 >> 2] = $$0436$idx489$val + $85 - $$pre$phi24Z2D;
  $$0448495 = $$0448496;
  $$0457 = $85;
  $215 = 1;
 }
 if (($24 | 0) != 0 | ($$0457 + 16 | 0) > ($85 | 0)) {
  $$1451 = 0;
  $$1458 = $$0457;
  $$1466 = 0.0;
  $$2454 = 0;
 } else {
  if (!(_ec_dec_bit_logp($$0436, 1) | 0)) {
   $$0450 = 0;
   $$0465 = 0.0;
   $$1453 = 0;
  } else {
   $98 = _ec_dec_uint($$0436, 6) | 0;
   $103 = (_ec_dec_bits($$0436, $98 + 4 | 0) | 0) + -1 + (16 << $98) | 0;
   $104 = _ec_dec_bits($$0436, 3) | 0;
   if (((_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) + 2 | 0) > ($85 | 0)) $$0452 = 0; else $$0452 = _ec_dec_icdf($$0436, 40936, 2) | 0;
   $$0450 = $103;
   $$0465 = +($104 + 1 | 0) * .09375;
   $$1453 = $$0452;
  }
  $$1451 = $$0450;
  $$1458 = _ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0;
  $$1466 = $$0465;
  $$2454 = $$1453;
 }
 $114 = $$1458 + 3 | 0;
 if (($$0446565 | 0) == 0 | ($114 | 0) > ($85 | 0)) {
  $$0445 = 0;
  $$pre$phiZ2D = $114;
 } else {
  $116 = _ec_dec_bit_logp($$0436, 3) | 0;
  $$0445 = $116;
  $$pre$phiZ2D = (_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) + 3 | 0;
 }
 $118 = ($$0445 | 0) != 0;
 $$470 = $118 ? $48 : 0;
 if (($$pre$phiZ2D | 0) > ($85 | 0)) $121 = 0; else $121 = _ec_dec_bit_logp($$0436, 3) | 0;
 _unquant_coarse_energy($16, $24, $26, $34, $121, $$0436, $15, $$0446565);
 $122 = _llvm_stacksave() | 0;
 $123 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 _tf_decode($24, $26, $$0445, $123, $$0446565, $$0436);
 if (((_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) + 4 | 0) > ($85 | 0)) $$0443 = 2; else $$0443 = _ec_dec_icdf($$0436, 40939, 5) | 0;
 $128 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 _init_caps($16, $128, $$0446565, $15);
 $129 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 $130 = $2 << 6;
 $$0436$idx$val1 = HEAP32[$$0436$idx491 >> 2] | 0;
 $$0436$idx2$val = HEAP32[$$0436$idx492 >> 2] | 0;
 $131 = _ec_tell_frac($$0436$idx$val1, $$0436$idx2$val) | 0;
 if (($24 | 0) < ($26 | 0)) {
  $$0436$idx5$val16 = $$0436$idx$val1;
  $$0436$idx6$val22 = $$0436$idx2$val;
  $$0455555 = 6;
  $$0463553 = $130;
  $$1440556 = $24;
  $$3460554 = $131;
  while (1) {
   $$1440556$looptemp = $$1440556;
   $$1440556 = $$1440556 + 1 | 0;
   $142 = (Math_imul((HEAP16[$22 + ($$1440556 << 1) >> 1] | 0) - (HEAP16[$22 + ($$1440556$looptemp << 1) >> 1] | 0) | 0, $15) | 0) << $$0446565;
   $143 = $142 << 3;
   $145 = ($142 | 0) > 48 ? $142 : 48;
   $$471 = ($143 | 0) < ($145 | 0) ? $143 : $145;
   if ((($$0455555 << 3) + $$3460554 | 0) < ($$0463553 | 0)) {
    $152 = HEAP32[$128 + ($$1440556$looptemp << 2) >> 2] | 0;
    $$0434540 = 0;
    $$0435539 = $$0455555;
    $$0436$idx5$val15 = $$0436$idx5$val16;
    $$0436$idx6$val21 = $$0436$idx6$val22;
    $$1464537 = $$0463553;
    $$4461538 = $$3460554;
    while (1) {
     if (($$0434540 | 0) >= ($152 | 0)) {
      $$0434$lcssa = $$0434540;
      $$0436$idx5$val14 = $$0436$idx5$val15;
      $$0436$idx6$val20 = $$0436$idx6$val21;
      $$1464$lcssa = $$1464537;
      $$5462 = $$4461538;
      break;
     }
     $154 = _ec_dec_bit_logp($$0436, $$0435539) | 0;
     $$0436$idx3$val = HEAP32[$$0436$idx491 >> 2] | 0;
     $$0436$idx4$val = HEAP32[$$0436$idx492 >> 2] | 0;
     $155 = _ec_tell_frac($$0436$idx3$val, $$0436$idx4$val) | 0;
     if (!$154) {
      $$0434$lcssa = $$0434540;
      $$0436$idx5$val14 = $$0436$idx3$val;
      $$0436$idx6$val20 = $$0436$idx4$val;
      $$1464$lcssa = $$1464537;
      $$5462 = $155;
      break;
     }
     $157 = $$0434540 + $$471 | 0;
     $158 = $$1464537 - $$471 | 0;
     if (($155 + 8 | 0) < ($158 | 0)) {
      $$0434540 = $157;
      $$0435539 = 1;
      $$0436$idx5$val15 = $$0436$idx3$val;
      $$0436$idx6$val21 = $$0436$idx4$val;
      $$1464537 = $158;
      $$4461538 = $155;
     } else {
      $$0434$lcssa = $157;
      $$0436$idx5$val14 = $$0436$idx3$val;
      $$0436$idx6$val20 = $$0436$idx4$val;
      $$1464$lcssa = $158;
      $$5462 = $155;
      break;
     }
    }
    HEAP32[$129 + ($$1440556$looptemp << 2) >> 2] = $$0434$lcssa;
    $163 = $$0455555 + -1 | 0;
    $$0436$idx5$val13 = $$0436$idx5$val14;
    $$0436$idx6$val19 = $$0436$idx6$val20;
    $$1464$lcssa588 = $$1464$lcssa;
    $$5462589 = $$5462;
    $329 = ($$0434$lcssa | 0) > 0 ? (($163 | 0) > 2 ? $163 : 2) : $$0455555;
   } else {
    HEAP32[$129 + ($$1440556$looptemp << 2) >> 2] = 0;
    $$0436$idx5$val13 = $$0436$idx5$val16;
    $$0436$idx6$val19 = $$0436$idx6$val22;
    $$1464$lcssa588 = $$0463553;
    $$5462589 = $$3460554;
    $329 = $$0455555;
   }
   if (($$1440556 | 0) == ($26 | 0)) {
    $$0436$idx5$val12 = $$0436$idx5$val13;
    $$0436$idx6$val18 = $$0436$idx6$val19;
    $$0463$lcssa = $$1464$lcssa588;
    $$3460$lcssa = $$5462589;
    break;
   } else {
    $$0436$idx5$val16 = $$0436$idx5$val13;
    $$0436$idx6$val22 = $$0436$idx6$val19;
    $$0455555 = $329;
    $$0463553 = $$1464$lcssa588;
    $$3460554 = $$5462589;
   }
  }
 } else {
  $$0436$idx5$val12 = $$0436$idx$val1;
  $$0436$idx6$val18 = $$0436$idx2$val;
  $$0463$lcssa = $130;
  $$3460$lcssa = $131;
 }
 $166 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 if (($$3460$lcssa + 48 | 0) > ($$0463$lcssa | 0)) {
  $$0436$idx5$val = $$0436$idx5$val12;
  $$0436$idx6$val = $$0436$idx6$val18;
  $181 = 5;
 } else {
  $169 = _ec_dec_icdf($$0436, 40943, 7) | 0;
  $$0436$idx5$val = HEAP32[$$0436$idx491 >> 2] | 0;
  $$0436$idx6$val = HEAP32[$$0436$idx492 >> 2] | 0;
  $181 = $169;
 }
 $172 = $130 - (_ec_tell_frac($$0436$idx5$val, $$0436$idx6$val) | 0) + -1 | 0;
 $177 = $$0446565 >>> 0 > 1 & $118 & ($172 | 0) >= (($$0446565 << 3) + 16 | 0);
 $spec$select503 = $177 ? 8 : 0;
 $179 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 $180 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 $182 = _clt_compute_allocation($16, $24, $26, $129, $128, $181, $9, $10, $172 - $spec$select503 | 0, $11, $179, $166, $180, $15, $$0446565, $$0436, 0, 0, 0) | 0;
 _unquant_fine_energy($16, $24, $26, $34, $166, $$0436, $15);
 $186 = (($20 | 0) / 2 | 0) + 2048 - $29 << 2;
 $$1438 = 0;
 do {
  $188 = HEAP32[$7 + ($$1438 << 2) >> 2] | 0;
  _memmove($188 | 0, $188 + ($29 << 2) | 0, $186 | 0) | 0;
  $$1438 = $$1438 + 1 | 0;
 } while (($$1438 | 0) < ($13 | 0));
 $192 = Math_imul($18, $15) | 0;
 $193 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $192 | 0) + 15 & -16) | 0;
 $$alloca_mul19 = (Math_imul($29, $15) | 0) << 2;
 $195 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul19 | 0) + 15 & -16) | 0;
 $203 = $0 + 40 | 0;
 _quant_all_bands(0, $16, $24, $26, $195, ($15 | 0) == 2 ? $195 + ($29 << 2) | 0 : 0, $193, 0, $179, $$470, $$0443, HEAP32[$10 >> 2] | 0, HEAP32[$9 >> 2] | 0, $123, $130 - $spec$select503 | 0, HEAP32[$11 >> 2] | 0, $$0436, $$0446565, $182, $203, 0, HEAP32[$0 + 36 >> 2] | 0, HEAP32[$0 + 32 >> 2] | 0);
 if ($177) {
  $phitmp = (_ec_dec_bits($$0436, 1) | 0) == 0;
  _unquant_energy_finalise($16, $24, $26, $34, $166, $180, $85 - (_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) | 0, $$0436, $15);
  if (!$phitmp) _anti_collapse($16, $195, $193, $$0446565, $15, $29, $24, $26, $34, $36, $37, $179, HEAP32[$203 >> 2] | 0);
 } else _unquant_energy_finalise($16, $24, $26, $34, $166, $180, $85 - (_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) | 0, $$0436, $15);
 if ($215 & ($192 | 0) > 0) {
  $$2441534 = 0;
  do {
   HEAPF32[$34 + ($$2441534 << 2) >> 2] = -28.0;
   $$2441534 = $$2441534 + 1 | 0;
  } while (($$2441534 | 0) != ($192 | 0));
 }
 _celt_synthesis($16, $195, $8, $34, $24, $spec$select, $15, $13, $$0445, $$0446565, HEAP32[$27 >> 2] | 0, $$0448495);
 $219 = $0 + 60 | 0;
 $220 = $0 + 64 | 0;
 $221 = $0 + 72 | 0;
 $222 = $0 + 68 | 0;
 $223 = $0 + 80 | 0;
 $224 = $0 + 76 | 0;
 $225 = $16 + 60 | 0;
 $226 = ($$0446565 | 0) != 0;
 if ($226) {
  $$2$us = 0;
  do {
   $227 = HEAP32[$219 >> 2] | 0;
   $spec$select473$us = ($227 | 0) > 15 ? $227 : 15;
   HEAP32[$219 >> 2] = $spec$select473$us;
   $229 = HEAP32[$220 >> 2] | 0;
   $231 = ($229 | 0) > 15 ? $229 : 15;
   HEAP32[$220 >> 2] = $231;
   $233 = HEAP32[$8 + ($$2$us << 2) >> 2] | 0;
   _comb_filter($233, $233, $231, $spec$select473$us, HEAP32[$42 >> 2] | 0, +HEAPF32[$221 >> 2], +HEAPF32[$222 >> 2], HEAP32[$223 >> 2] | 0, HEAP32[$224 >> 2] | 0, HEAP32[$225 >> 2] | 0, $20);
   $240 = HEAP32[$42 >> 2] | 0;
   $241 = $233 + ($240 << 2) | 0;
   _comb_filter($241, $241, HEAP32[$219 >> 2] | 0, $$1451, $29 - $240 | 0, +HEAPF32[$222 >> 2], $$1466, HEAP32[$224 >> 2] | 0, $$2454, HEAP32[$225 >> 2] | 0, $20);
   $$2$us = $$2$us + 1 | 0;
  } while (($$2$us | 0) < ($13 | 0));
 } else {
  $$2 = 0;
  do {
   $249 = HEAP32[$219 >> 2] | 0;
   $spec$select473 = ($249 | 0) > 15 ? $249 : 15;
   HEAP32[$219 >> 2] = $spec$select473;
   $251 = HEAP32[$220 >> 2] | 0;
   $253 = ($251 | 0) > 15 ? $251 : 15;
   HEAP32[$220 >> 2] = $253;
   $255 = HEAP32[$8 + ($$2 << 2) >> 2] | 0;
   _comb_filter($255, $255, $253, $spec$select473, HEAP32[$42 >> 2] | 0, +HEAPF32[$221 >> 2], +HEAPF32[$222 >> 2], HEAP32[$223 >> 2] | 0, HEAP32[$224 >> 2] | 0, HEAP32[$225 >> 2] | 0, $20);
   $$2 = $$2 + 1 | 0;
  } while (($$2 | 0) < ($13 | 0));
 }
 HEAP32[$220 >> 2] = HEAP32[$219 >> 2];
 HEAP32[$221 >> 2] = HEAP32[$222 >> 2];
 HEAP32[$223 >> 2] = HEAP32[$224 >> 2];
 HEAP32[$219 >> 2] = $$1451;
 HEAPF32[$222 >> 2] = $$1466;
 HEAP32[$224 >> 2] = $$2454;
 if ($226) {
  HEAP32[$220 >> 2] = $$1451;
  HEAPF32[$221 >> 2] = $$1466;
  HEAP32[$223 >> 2] = $$2454;
 }
 if ($76) _memcpy($34 + ($18 << 2) | 0, $34 | 0, $18 << 2 | 0) | 0;
 if ($118) {
  if ($77) {
   $$4526 = 0;
   do {
    $282 = $36 + ($$4526 << 2) | 0;
    $283 = +HEAPF32[$282 >> 2];
    $285 = +HEAPF32[$34 + ($$4526 << 2) >> 2];
    HEAPF32[$282 >> 2] = $283 < $285 ? $283 : $285;
    $$4526 = $$4526 + 1 | 0;
   } while (($$4526 | 0) < ($35 | 0));
  }
 } else {
  $269 = $18 << 3;
  _memcpy($37 | 0, $36 | 0, $269 | 0) | 0;
  _memcpy($36 | 0, $34 | 0, $269 | 0) | 0;
  $$0 = (HEAP32[$70 >> 2] | 0) < 10 ? +($48 | 0) * 1.0000000474974513e-03 : 1.0;
  if ($77) {
   $$3442529 = 0;
   do {
    $274 = $38 + ($$3442529 << 2) | 0;
    $276 = $$0 + +HEAPF32[$274 >> 2];
    $278 = +HEAPF32[$34 + ($$3442529 << 2) >> 2];
    HEAPF32[$274 >> 2] = $276 < $278 ? $276 : $278;
    $$3442529 = $$3442529 + 1 | 0;
   } while (($$3442529 | 0) < ($35 | 0));
  }
 }
 $290 = ($26 | 0) < ($18 | 0);
 do if (($24 | 0) > 0) {
  $$5514$us = 0;
  do {
   HEAPF32[$34 + ($$5514$us << 2) >> 2] = 0.0;
   HEAPF32[$37 + ($$5514$us << 2) >> 2] = -28.0;
   HEAPF32[$36 + ($$5514$us << 2) >> 2] = -28.0;
   $$5514$us = $$5514$us + 1 | 0;
  } while (($$5514$us | 0) != ($24 | 0));
  if ($290) {
   $$6515$us = $26;
   do {
    HEAPF32[$34 + ($$6515$us << 2) >> 2] = 0.0;
    HEAPF32[$37 + ($$6515$us << 2) >> 2] = -28.0;
    HEAPF32[$36 + ($$6515$us << 2) >> 2] = -28.0;
    $$6515$us = $$6515$us + 1 | 0;
   } while (($$6515$us | 0) != ($18 | 0));
  }
  $$5514$us$1 = 0;
  do {
   $314 = $$5514$us$1 + $18 | 0;
   HEAPF32[$34 + ($314 << 2) >> 2] = 0.0;
   HEAPF32[$37 + ($314 << 2) >> 2] = -28.0;
   HEAPF32[$36 + ($314 << 2) >> 2] = -28.0;
   $$5514$us$1 = $$5514$us$1 + 1 | 0;
  } while (($$5514$us$1 | 0) != ($24 | 0));
  if (!$290) break;
  $$6515$us$1 = $26;
  do {
   $319 = $$6515$us$1 + $18 | 0;
   HEAPF32[$34 + ($319 << 2) >> 2] = 0.0;
   HEAPF32[$37 + ($319 << 2) >> 2] = -28.0;
   HEAPF32[$36 + ($319 << 2) >> 2] = -28.0;
   $$6515$us$1 = $$6515$us$1 + 1 | 0;
  } while (($$6515$us$1 | 0) != ($18 | 0));
 } else {
  if (!$290) break;
  $$6515$us520 = $26;
  do {
   HEAPF32[$34 + ($$6515$us520 << 2) >> 2] = 0.0;
   HEAPF32[$37 + ($$6515$us520 << 2) >> 2] = -28.0;
   HEAPF32[$36 + ($$6515$us520 << 2) >> 2] = -28.0;
   $$6515$us520 = $$6515$us520 + 1 | 0;
  } while (($$6515$us520 | 0) != ($18 | 0));
  $$6515$us520$1 = $26;
  do {
   $324 = $$6515$us520$1 + $18 | 0;
   HEAPF32[$34 + ($324 << 2) >> 2] = 0.0;
   HEAPF32[$37 + ($324 << 2) >> 2] = -28.0;
   HEAPF32[$36 + ($324 << 2) >> 2] = -28.0;
   $$6515$us520$1 = $$6515$us520$1 + 1 | 0;
  } while (($$6515$us520$1 | 0) != ($18 | 0));
 } while (0);
 HEAP32[$203 >> 2] = HEAP32[$$0436$idx492 >> 2];
 _deemphasis($8, $3, $29, $13, HEAP32[$27 >> 2] | 0, $16 + 16 | 0, $0 + 84 | 0);
 HEAP32[$70 >> 2] = 0;
 if ((_ec_tell_40(HEAP32[$$0436$idx491 >> 2] | 0, HEAP32[$$0436$idx492 >> 2] | 0) | 0) > ($85 | 0)) $$0433 = -3; else {
  if (_ec_get_error_44(HEAP32[$$0436 + 44 >> 2] | 0) | 0) HEAP32[$0 + 44 >> 2] = 1;
  $$0433 = ($29 | 0) / (HEAP32[$27 >> 2] | 0) | 0;
 }
 _llvm_stackrestore($122 | 0);
 $$1 = $$0433;
 STACKTOP = sp;
 return $$1 | 0;
}

function _silk_pitch_analysis_core_FLP($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = +$7;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0405 = 0, $$0406 = 0, $$0408575$in = 0, $$0410569 = 0, $$0416567 = 0, $$0418536$us = 0, $$0421568 = 0, $$0424566 = 0, $$0425482$us = 0.0, $$0426565 = 0.0, $$0427481$us = 0.0, $$0428501 = 0, $$04291 = 0, $$0432 = 0.0, $$0433546 = 0, $$0437$lcssa = 0, $$0437500 = 0, $$0440528 = 0.0, $$0445527 = 0.0, $$0447526 = 0, $$0450523 = 0, $$0452525 = 0, $$0457522 = 0.0, $$0460 = 0.0, $$1 = 0, $$10524 = 0, $$1404 = 0, $$1407 = 0, $$1409564 = 0, $$1411541$us = 0, $$1417504 = 0, $$1419520$us = 0, $$1430549 = 0, $$1434 = 0, $$1436 = 0, $$1438$lcssa = 0, $$1438490 = 0, $$1438490$us = 0, $$2412529 = 0, $$2420491 = 0, $$2420491$us = 0, $$2423540$us = 0, $$2431 = 0, $$2439 = 0, $$2439$us = 0, $$2442499 = 0.0, $$2449 = 0, $$2454$lcssa = 0, $$2454498 = 0, $$2459$us = 0.0, $$2557622 = 0, $$3413483$us = 0, $$3443$lcssa = 0.0, $$3443489 = 0.0, $$3443489$us = 0.0, $$3455$lcssa = 0, $$3455488 = 0, $$3455488$us = 0, $$4414480 = 0, $$4414480$us = 0, $$4444 = 0.0, $$4444$us = 0.0, $$4456 = 0, $$4456$us = 0, $$4552 = 0, $$468 = 0, $$5415512 = 0, $$5551 = 0, $$6550 = 0, $$7548 = 0, $$8547 = 0, $$9516$us = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$phi610Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0.0, $105 = 0, $11 = 0, $111 = 0, $112 = 0.0, $12 = 0, $120 = 0, $123 = 0, $124 = 0.0, $126 = 0.0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $146 = 0, $15 = 0, $152 = 0, $16 = 0, $166 = 0, $166$phi = 0, $168 = 0, $17 = 0, $172 = 0, $175 = 0, $18 = 0, $189 = 0, $19 = 0, $194 = 0.0, $197 = 0, $199 = 0, $20 = 0, $200 = 0.0, $21 = 0, $218 = 0, $22 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0, $228 = 0, $229 = 0, $23 = 0, $239 = 0.0, $24 = 0, $243 = 0.0, $244 = 0, $248 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $26 = 0, $266 = 0, $27 = 0, $279 = 0, $280 = 0, $282 = 0, $284 = 0.0, $292 = 0.0, $294 = 0, $30 = 0, $309 = 0, $31 = 0, $32 = 0, $324 = 0, $33 = 0, $335 = 0, $34 = 0, $345 = 0, $35 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $48 = 0, $55 = 0.0, $59 = 0.0, $62 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $78 = 0.0, $79 = 0.0, $82 = 0.0, $94 = 0.0, $98 = 0.0, $or$cond = 0, $spec$select473 = 0, $spec$select474 = 0, $spec$select475 = 0, $storemerge$in = 0, $storemerge461$in = 0, label = 0, sp = 0, $$0408575$in$looptemp = 0, $$0424566$looptemp = 0, $$0421568$looptemp = 0, $146$looptemp = 0, $$6550$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13696 | 0;
 $11 = sp + 12416 | 0;
 $12 = sp + 11776 | 0;
 $13 = sp + 11136 | 0;
 $14 = sp + 10816 | 0;
 $15 = sp + 10784 | 0;
 $16 = sp + 8400 | 0;
 $17 = sp + 8128 | 0;
 $18 = sp + 8080 | 0;
 $19 = sp + 7984 | 0;
 $20 = sp + 7680 | 0;
 $21 = sp + 4960 | 0;
 $22 = sp + 2240 | 0;
 $23 = sp + 960 | 0;
 $24 = sp;
 $25 = ($8 | 0) == 8;
 $26 = ($8 | 0) == 12;
 $27 = ($8 | 0) == 16;
 switch ($8 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(46638, 46700, 112);
 }
 if (($9 | 0) <= -1) _celt_fatal(46737, 46700, 115);
 if (($9 | 0) >= 3) _celt_fatal(46789, 46700, 116);
 $30 = $10 * 5 | 0;
 $31 = $30 + 20 | 0;
 $32 = Math_imul($31, $8) | 0;
 $33 = $31 << 2;
 $34 = $31 << 3;
 $35 = $8 * 5 | 0;
 $36 = $8 << 1;
 $37 = $8 * 18 | 0;
 $38 = $37 + -1 | 0;
 do if ($27) {
  _silk_float2short_array_610($23, $0, $32);
  $39 = $15;
  HEAP32[$39 >> 2] = 0;
  HEAP32[$39 + 4 >> 2] = 0;
  _silk_resampler_down2($15, $13, $23, $32);
  _silk_short2float_array_611($11, $13, $34);
  $$pre$phi610Z2D = $13;
  $$pre$phiZ2D = $15;
 } else {
  if ($26) {
   _silk_float2short_array_610($24, $0, $32);
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   HEAP32[$15 + 8 >> 2] = 0;
   HEAP32[$15 + 12 >> 2] = 0;
   HEAP32[$15 + 16 >> 2] = 0;
   HEAP32[$15 + 20 >> 2] = 0;
   _silk_resampler_down2_3($15, $13, $24, $32);
   _silk_short2float_array_611($11, $13, $34);
   $$pre$phi610Z2D = $13;
   $$pre$phiZ2D = $15;
   break;
  }
  if ($25) {
   _silk_float2short_array_610($13, $0, $34);
   $$pre$phi610Z2D = $13;
   $$pre$phiZ2D = $15;
   break;
  } else _celt_fatal(46841, 46700, 151);
 } while (0);
 $43 = $15;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$43 + 4 >> 2] = 0;
 _silk_resampler_down2($$pre$phiZ2D, $14, $$pre$phi610Z2D, $34);
 _silk_short2float_array_611($12, $14, $33);
 if (($30 | 0) > -20) {
  $$0408575$in = $33;
  do {
   $$0408575$in$looptemp = $$0408575$in;
   $$0408575$in = $$0408575$in + -1 | 0;
   $48 = $12 + ($$0408575$in << 2) | 0;
   $55 = +HEAPF32[$12 + ($$0408575$in$looptemp + -2 << 2) >> 2] + +(~~+HEAPF32[$48 >> 2] | 0);
   if ($55 > 32767.0) $59 = 32767.0; else if ($55 < -32768.0) $59 = -32768.0; else $59 = $55;
   HEAPF32[$48 >> 2] = +(~~$59 << 16 >> 16);
  } while (($$0408575$in$looptemp | 0) > 2);
 }
 $62 = $10 << 2;
 _memset($16 | 0, 0, $10 * 596 | 0) | 0;
 $64 = $10 >> 1;
 L29 : do if (($10 | 0) > 1) {
  $67 = $12 + ($33 << 2) | 0;
  $68 = $17 + 256 | 0;
  $69 = $16 + 32 | 0;
  $$0410569 = 0;
  $$0421568 = $12 + 320 | 0;
  while (1) {
   $$0421568$looptemp = $$0421568;
   $$0421568 = $$0421568 + 160 | 0;
   if ($$0421568 >>> 0 > $67 >>> 0) {
    label = 23;
    break;
   }
   $72 = $$0421568$looptemp + -32 | 0;
   if ($72 >>> 0 < $12 >>> 0) {
    label = 25;
    break;
   }
   if (($$0421568$looptemp + 128 | 0) >>> 0 > $67 >>> 0) {
    label = 27;
    break;
   }
   _celt_pitch_xcorr_c($$0421568$looptemp, $$0421568$looptemp + -288 | 0, $17, 40, 65);
   $78 = +HEAPF32[$68 >> 2];
   $79 = +_silk_energy_FLP($$0421568$looptemp, 40);
   $82 = $79 + +_silk_energy_FLP($72, 40) + 16.0e4;
   HEAPF32[$69 >> 2] = +HEAPF32[$69 >> 2] + $78 * 2.0 / $82;
   $$0416567 = 9;
   $$0424566 = $72;
   $$0426565 = $82;
   do {
    $$0424566$looptemp = $$0424566;
    $$0424566 = $$0424566 + -4 | 0;
    $94 = +HEAPF32[$$0424566 >> 2];
    $98 = +HEAPF32[$$0424566$looptemp + 156 >> 2];
    $$0426565 = $$0426565 + ($94 * $94 - $98 * $98);
    $105 = $16 + ($$0416567 << 2) | 0;
    HEAPF32[$105 >> 2] = +HEAPF32[$105 >> 2] + +HEAPF32[$17 + (72 - $$0416567 << 2) >> 2] * 2.0 / $$0426565;
    $$0416567 = $$0416567 + 1 | 0;
   } while (($$0416567 | 0) != 73);
   $$0410569 = $$0410569 + 1 | 0;
   if (($$0410569 | 0) >= ($64 | 0)) break L29;
  }
  if ((label | 0) == 23) _celt_fatal(46871, 46700, 173); else if ((label | 0) == 25) _celt_fatal(46951, 46700, 178); else if ((label | 0) == 27) _celt_fatal(46993, 46700, 179);
 } while (0);
 $$1409564 = 72;
 while (1) {
  $111 = $16 + ($$1409564 << 2) | 0;
  $112 = +HEAPF32[$111 >> 2];
  HEAPF32[$111 >> 2] = $112 - $112 * +($$1409564 | 0) * .000244140625;
  if ($$1409564 >>> 0 > 8) $$1409564 = $$1409564 + -1 | 0; else break;
 }
 $120 = ($9 << 1) + 4 | 0;
 if (($120 * 3 | 0) >= 25) _celt_fatal(47072, 46700, 218);
 $123 = $16 + 32 | 0;
 _silk_insertion_sort_decreasing_FLP($123, $19, $120);
 $124 = +HEAPF32[$123 >> 2];
 if ($124 < .20000000298023224) _memset($1 | 0, 0, $62 | 0) | 0; else {
  $126 = $124 * $6;
  if (!(($9 | 0) > -2 & $124 > $126)) _celt_fatal(47128, 46700, 241);
  $$2557622 = 0;
  while (1) {
   $133 = $19 + ($$2557622 << 2) | 0;
   HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] << 1) + 16;
   $137 = $$2557622 + 1 | 0;
   if (($137 | 0) >= ($120 | 0)) {
    label = 41;
    break;
   }
   if (+HEAPF32[$16 + ($$2557622 + 9 << 2) >> 2] > $126) $$2557622 = $137; else {
    $$04291 = $137;
    break;
   }
  }
  if ((label | 0) == 41) if (($9 | 0) > -2) $$04291 = $120; else _celt_fatal(47128, 46700, 241);
  _memset($20 + 22 | 0, 0, 274) | 0;
  $$4552 = 0;
  do {
   HEAP16[$20 + (HEAP32[$19 + ($$4552 << 2) >> 2] << 1) >> 1] = 1;
   $$4552 = $$4552 + 1 | 0;
  } while (($$4552 | 0) != ($$04291 | 0));
  $$phi$trans$insert$phi$trans$insert = $20 + 290 | 0;
  $$5551 = 146;
  $146 = HEAP16[$$phi$trans$insert$phi$trans$insert >> 1] | 0;
  while (1) {
   $146$looptemp = $146;
   $146 = HEAP16[$20 + ($$5551 + -2 << 1) >> 1] | 0;
   $152 = $20 + ($$5551 << 1) | 0;
   HEAP16[$152 >> 1] = ($146 & 65535) + ($146$looptemp & 65535) + (HEAPU16[$152 >> 1] | 0);
   if ($$5551 >>> 0 <= 16) break; else $$5551 = $$5551 + -1 | 0;
  }
  $$1430549 = 0;
  $$6550 = 16;
  while (1) {
   $$6550$looptemp = $$6550;
   $$6550 = $$6550 + 1 | 0;
   if ((HEAP16[$20 + ($$6550 << 1) >> 1] | 0) > 0) {
    HEAP32[$19 + ($$1430549 << 2) >> 2] = $$6550$looptemp;
    $$2431 = $$1430549 + 1 | 0;
   } else $$2431 = $$1430549;
   if (($$6550 | 0) == 144) break; else $$1430549 = $$2431;
  }
  $$7548 = 146;
  $166 = HEAP16[$$phi$trans$insert$phi$trans$insert >> 1] | 0;
  $168 = HEAP16[$20 + 288 >> 1] | 0;
  while (1) {
   $172 = HEAP16[$20 + ($$7548 + -3 << 1) >> 1] | 0;
   $175 = $20 + ($$7548 << 1) | 0;
   HEAP16[$175 >> 1] = ($168 & 65535) + ($166 & 65535) + ($172 & 65535) + (HEAPU16[$175 >> 1] | 0);
   if ($$7548 >>> 0 > 16) {
    $166$phi = $168;
    $$7548 = $$7548 + -1 | 0;
    $168 = $172;
    $166 = $166$phi;
   } else break;
  }
  $$0433546 = 0;
  $$8547 = 16;
  while (1) {
   if ((HEAP16[$20 + ($$8547 << 1) >> 1] | 0) > 0) {
    HEAP16[$20 + ($$0433546 << 1) >> 1] = $$8547 + 65534;
    $$1434 = $$0433546 + 1 | 0;
   } else $$1434 = $$0433546;
   $$8547 = $$8547 + 1 | 0;
   if (($$8547 | 0) == 147) break; else $$0433546 = $$1434;
  }
  _memset($16 | 0, 0, 2384) | 0;
  $189 = ($10 | 0) > 0;
  if ($189 & ($$1434 | 0) > 0) {
   $$1411541$us = 0;
   $$2423540$us = $25 ? $0 + 640 | 0 : $11 + 640 | 0;
   while (1) {
    $194 = +_silk_energy_FLP($$2423540$us, 40) + 1.0;
    $$0418536$us = 0;
    do {
     $197 = HEAP16[$20 + ($$0418536$us << 1) >> 1] | 0;
     $199 = $$2423540$us + (0 - $197 << 2) | 0;
     $200 = +_silk_inner_product_FLP($199, $$2423540$us, 40);
     if ($200 > 0.0) $$sink = $200 * 2.0 / ($194 + +_silk_energy_FLP($199, 40)); else $$sink = 0.0;
     HEAPF32[$16 + ($$1411541$us * 596 | 0) + ($197 << 2) >> 2] = $$sink;
     $$0418536$us = $$0418536$us + 1 | 0;
    } while (($$0418536$us | 0) != ($$1434 | 0));
    $$1411541$us = $$1411541$us + 1 | 0;
    if (($$1411541$us | 0) == ($10 | 0)) break; else $$2423540$us = $$2423540$us + 160 | 0;
   }
  }
  if (($5 | 0) > 0) {
   if ($26) $$0406 = ($5 << 1 | 0) / 3 | 0; else $$0406 = $5 >>> ($27 & 1);
   $$0432 = +_silk_log2_619(+($$0406 | 0));
   $$1407 = $$0406;
  } else {
   $$0432 = 0.0;
   $$1407 = $5;
  }
  $218 = ($10 | 0) == 4;
  $spec$select473 = $218 ? 11 : 3;
  $spec$select474 = $218 & ($25 & ($9 | 0) > 0) ? 11 : 3;
  $spec$select475 = $218 ? 27056 : 45385;
  if (($$2431 | 0) > 0) {
   $222 = +($10 | 0);
   $223 = $222 * .20000000298023224;
   $224 = ($$1407 | 0) > 0;
   $225 = $222 * $7;
   $226 = $spec$select474 << 2;
   $$0440528 = 0.0;
   $$0445527 = -1.0e3;
   $$0447526 = -1;
   $$0452525 = 0;
   $$2412529 = 0;
   while (1) {
    $228 = HEAP32[$19 + ($$2412529 << 2) >> 2] | 0;
    if ($189) {
     $$1419520$us = 0;
     do {
      $229 = $18 + ($$1419520$us << 2) | 0;
      HEAPF32[$229 >> 2] = 0.0;
      $$9516$us = 0;
      $239 = 0.0;
      do {
       $239 = +HEAPF32[$16 + ($$9516$us * 596 | 0) + ($228 + (HEAP8[$spec$select475 + ((Math_imul($$9516$us, $spec$select473) | 0) + $$1419520$us) >> 0] | 0) << 2) >> 2] + $239;
       $$9516$us = $$9516$us + 1 | 0;
      } while (($$9516$us | 0) != ($10 | 0));
      HEAPF32[$229 >> 2] = $239;
      $$1419520$us = $$1419520$us + 1 | 0;
     } while (($$1419520$us | 0) != ($spec$select474 | 0));
    } else _memset($18 | 0, 0, $226 | 0) | 0;
    $$0450523 = 0;
    $$0457522 = -1.0e3;
    $$10524 = 0;
    do {
     $243 = +HEAPF32[$18 + ($$10524 << 2) >> 2];
     $244 = $243 > $$0457522;
     $$0457522 = $244 ? $243 : $$0457522;
     $$0450523 = $244 ? $$10524 : $$0450523;
     $$10524 = $$10524 + 1 | 0;
    } while (($$10524 | 0) != ($spec$select474 | 0));
    $248 = +_silk_log2_619(+($228 | 0));
    $250 = $$0457522 - $223 * $248;
    if ($224) {
     $251 = $248 - $$0432;
     $252 = $251 * $251;
     $$0460 = $250 - $252 * ($223 * +HEAPF32[$4 >> 2]) / ($252 + .5);
    } else $$0460 = $250;
    $or$cond = $$0457522 > $225 & $$0460 > $$0445527;
    $$0452525 = $or$cond ? $$0450523 : $$0452525;
    $$0447526 = $or$cond ? $228 : $$0447526;
    $$0440528 = $or$cond ? $$0457522 : $$0440528;
    $$2412529 = $$2412529 + 1 | 0;
    if (($$2412529 | 0) == ($$2431 | 0)) break; else $$0445527 = $or$cond ? $$0460 : $$0445527;
   }
   if (($$0447526 | 0) != -1) {
    HEAPF32[$4 >> 2] = $$0440528 / $222;
    if (($8 | 0) > 8) {
     if ($26) {
      $266 = ($$0447526 << 16 >> 16) * 3 | 0;
      $$2449 = ($266 >> 1) + ($266 & 1) | 0;
     } else $$2449 = $$0447526 << 1;
     if (($36 | 0) < ($37 | 0)) $279 = ($$2449 | 0) < ($37 | 0) ? (($$2449 | 0) < ($36 | 0) ? $36 : $$2449) : $38; else $279 = ($$2449 | 0) > ($36 | 0) ? $36 : ($$2449 | 0) < ($38 | 0) ? $38 : $$2449;
     $280 = _silk_max_int_620($279 + -2 | 0, $36) | 0;
     $282 = _silk_min_int_621($279 + 2 | 0, $38) | 0;
     _silk_P_Ana_calc_corr_st3($22, $0, $280, $35, $10, $9);
     _silk_P_Ana_calc_energy_st3($21, $0, $280, $35, $10, $9);
     $284 = .05000000074505806 / +($279 | 0);
     if ($218) {
      $$1 = 27104;
      $$1404 = HEAP8[45395 + $9 >> 0] | 0;
      $$1436 = 34;
     } else {
      $$1 = 27024;
      $$1404 = 12;
      $$1436 = 12;
     }
     $292 = +_silk_energy_FLP($0 + ($8 * 20 << 2) | 0, Math_imul($35, $10) | 0) + 1.0;
     if (($280 | 0) > ($282 | 0)) {
      $$0437$lcssa = $279;
      $$2454$lcssa = 0;
     } else {
      $294 = ($$1404 | 0) > 0;
      $$0428501 = 0;
      $$0437500 = $279;
      $$1417504 = $280;
      $$2442499 = -1.0e3;
      $$2454498 = 0;
      while (1) {
       L140 : do if ($294) {
        if (!$189) {
         $$1438490 = $$0437500;
         $$2420491 = 0;
         $$3443489 = $$2442499;
         $$3455488 = $$2454498;
         while (1) {
          if ($$3443489 < 0.0) {
           $324 = ($$1417504 + (HEAP8[27104 + $$2420491 >> 0] | 0) | 0) < ($37 | 0);
           $$2439 = $324 ? $$1417504 : $$1438490;
           $$4444 = $324 ? 0.0 : $$3443489;
           $$4456 = $324 ? $$2420491 : $$3455488;
          } else {
           $$2439 = $$1438490;
           $$4444 = $$3443489;
           $$4456 = $$3455488;
          }
          $$2420491 = $$2420491 + 1 | 0;
          if (($$2420491 | 0) == ($$1404 | 0)) {
           $$1438$lcssa = $$2439;
           $$3443$lcssa = $$4444;
           $$3455$lcssa = $$4456;
           break L140;
          } else {
           $$1438490 = $$2439;
           $$3443489 = $$4444;
           $$3455488 = $$4456;
          }
         }
        }
        $$1438490$us = $$0437500;
        $$2420491$us = 0;
        $$3443489$us = $$2442499;
        $$3455488$us = $$2454498;
        while (1) {
         $$0425482$us = 0.0;
         $$0427481$us = $292;
         $$3413483$us = 0;
         do {
          $$0425482$us = $$0425482$us + +HEAPF32[$22 + ($$3413483$us * 680 | 0) + ($$2420491$us * 20 | 0) + ($$0428501 << 2) >> 2];
          $$0427481$us = $$0427481$us + +HEAPF32[$21 + ($$3413483$us * 680 | 0) + ($$2420491$us * 20 | 0) + ($$0428501 << 2) >> 2];
          $$3413483$us = $$3413483$us + 1 | 0;
         } while (($$3413483$us | 0) != ($10 | 0));
         if ($$0425482$us > 0.0) $$2459$us = (1.0 - $284 * +($$2420491$us | 0)) * ($$0425482$us * 2.0 / $$0427481$us); else $$2459$us = 0.0;
         if ($$2459$us > $$3443489$us) {
          $309 = ($$1417504 + (HEAP8[27104 + $$2420491$us >> 0] | 0) | 0) < ($37 | 0);
          $$2439$us = $309 ? $$1417504 : $$1438490$us;
          $$4444$us = $309 ? $$2459$us : $$3443489$us;
          $$4456$us = $309 ? $$2420491$us : $$3455488$us;
         } else {
          $$2439$us = $$1438490$us;
          $$4444$us = $$3443489$us;
          $$4456$us = $$3455488$us;
         }
         $$2420491$us = $$2420491$us + 1 | 0;
         if (($$2420491$us | 0) == ($$1404 | 0)) {
          $$1438$lcssa = $$2439$us;
          $$3443$lcssa = $$4444$us;
          $$3455$lcssa = $$4456$us;
          break;
         } else {
          $$1438490$us = $$2439$us;
          $$3443489$us = $$4444$us;
          $$3455488$us = $$4456$us;
         }
        }
       } else {
        $$1438$lcssa = $$0437500;
        $$3443$lcssa = $$2442499;
        $$3455$lcssa = $$2454498;
       } while (0);
       if (($$1417504 | 0) < ($282 | 0)) {
        $$0428501 = $$0428501 + 1 | 0;
        $$0437500 = $$1438$lcssa;
        $$1417504 = $$1417504 + 1 | 0;
        $$2442499 = $$3443$lcssa;
        $$2454498 = $$3455$lcssa;
       } else {
        $$0437$lcssa = $$1438$lcssa;
        $$2454$lcssa = $$3455$lcssa;
        break;
       }
      }
     }
     if ($189) if (($36 | 0) > ($37 | 0)) {
      $$4414480$us = 0;
      do {
       $335 = $$0437$lcssa + (HEAP8[$$1 + ((Math_imul($$4414480$us, $$1436) | 0) + $$2454$lcssa) >> 0] | 0) | 0;
       HEAP32[$1 + ($$4414480$us << 2) >> 2] = ($335 | 0) > ($36 | 0) ? $36 : ($335 | 0) < ($37 | 0) ? $37 : $335;
       $$4414480$us = $$4414480$us + 1 | 0;
      } while (($$4414480$us | 0) != ($10 | 0));
     } else {
      $$4414480 = 0;
      do {
       $345 = $$0437$lcssa + (HEAP8[$$1 + ((Math_imul($$4414480, $$1436) | 0) + $$2454$lcssa) >> 0] | 0) | 0;
       HEAP32[$1 + ($$4414480 << 2) >> 2] = ($345 | 0) > ($37 | 0) ? $37 : ($345 | 0) < ($36 | 0) ? $36 : $345;
       $$4414480 = $$4414480 + 1 | 0;
      } while (($$4414480 | 0) != ($10 | 0));
     }
     $storemerge$in = $$2454$lcssa;
     $storemerge461$in = $$0437$lcssa - $36 | 0;
    } else {
     if ($189) {
      $$5415512 = 0;
      do {
       $356 = $$0447526 + (HEAP8[$spec$select475 + ((Math_imul($$5415512, $spec$select473) | 0) + $$0452525) >> 0] | 0) | 0;
       $$468 = ($356 | 0) > 16 ? $356 : 16;
       HEAP32[$1 + ($$5415512 << 2) >> 2] = ($$468 | 0) < 144 ? $$468 : 144;
       $$5415512 = $$5415512 + 1 | 0;
      } while (($$5415512 | 0) != ($10 | 0));
     }
     $storemerge$in = $$0452525;
     $storemerge461$in = $$0447526 + 65520 | 0;
    }
    HEAP16[$2 >> 1] = $storemerge461$in;
    HEAP8[$3 >> 0] = $storemerge$in;
    if ((HEAP16[$2 >> 1] | 0) > -1) {
     $$0405 = 0;
     STACKTOP = sp;
     return $$0405 | 0;
    } else _celt_fatal(47164, 46700, 474);
   }
  };
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
 }
 HEAPF32[$4 >> 2] = 0.0;
 HEAP16[$2 >> 1] = 0;
 HEAP8[$3 >> 0] = 0;
 $$0405 = 1;
 STACKTOP = sp;
 return $$0405 | 0;
}

function _silk_encode_frame_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0283$lcssa = 0, $$0283$lcssa$us = 0, $$0283352 = 0, $$0283352$us = 0, $$0284351 = 0, $$0284351$us = 0, $$0285 = 0, $$0288 = 0, $$0289 = 0, $$0291 = 0, $$0293 = 0, $$0295 = 0, $$0296 = 0, $$0298 = 0, $$0300 = 0, $$0302 = 0, $$0304 = 0, $$0306 = 0, $$0308 = 0, $$1290 = 0, $$1292334 = 0, $$1292392 = 0, $$1294333 = 0, $$1297332 = 0, $$1297391 = 0, $$1299331 = 0, $$1301330 = 0, $$1301390 = 0, $$1303329 = 0, $$1305 = 0, $$1307328 = 0, $$1307389 = 0, $$1309326 = 0, $$1335 = 0, $$3357 = 0, $$3357$us = 0, $$4360 = 0, $$5365 = 0, $$idx319 = 0, $$idx320 = 0, $$sroa$0 = 0, $$sroa$4$0 = 0, $$sroa$4$0$$sroa_idx84 = 0, $$sroa$4$0$copyload = 0, $$sroa$4$0$copyload90 = 0, $$sroa$4$1 = 0, $$sroa$4$2 = 0, $$sroa$4$3327 = 0, $$sroa$6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $129 = 0, $13 = 0, $130 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $15 = 0, $159 = 0, $16 = 0, $160 = 0, $163 = 0.0, $167 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $176 = 0, $184 = 0, $186 = 0, $188 = 0, $194 = 0, $196 = 0, $198 = 0, $201 = 0, $21 = 0, $216 = 0, $218 = 0, $22 = 0, $225 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $236 = 0, $238 = 0, $24 = 0, $246 = 0, $248 = 0, $253 = 0, $26 = 0, $261 = 0, $262 = 0, $27 = 0, $29 = 0, $36 = 0, $44 = 0, $53 = 0, $6 = 0, $62 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $88 = 0, $9 = 0, $97 = 0, $indvars$iv = 0, $indvars$iv383 = 0, $scevgep = 0, $spec$select314 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $$3357$us$looptemp = 0, $$3357$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13584 | 0;
 $6 = sp + 12816 | 0;
 $7 = sp + 1328 | 0;
 $8 = sp + 12768 | 0;
 $$sroa$0 = sp + 4040 | 0;
 $$sroa$6 = sp + 4016 | 0;
 $9 = sp + 8416 | 0;
 $10 = sp + 4064 | 0;
 $11 = sp + 1312 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 13568 | 0;
 $15 = sp;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$13 + 12 >> 2] = 0;
 $16 = $0 + 4620 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + 1;
 $21 = $0 + 4770 | 0;
 HEAP8[$21 >> 0] = $17 & 3;
 $22 = $0 + 4592 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $0 + 7180 + ($23 << 2) | 0;
 $26 = $0 + 5098 | 0;
 $27 = $0 + 4584 | 0;
 _silk_LP_variable_cutoff($0 + 16 | 0, $26, HEAP32[$27 >> 2] | 0);
 $29 = $0 + 4576 | 0;
 _silk_short2float_array_542($24 + ((HEAP32[$29 >> 2] | 0) * 5 << 2) | 0, $26, HEAP32[$27 >> 2] | 0);
 $36 = $24 + ((HEAP32[$29 >> 2] | 0) * 5 << 2) | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$36 >> 2] + 9.999999974752427e-07;
 $44 = $24 + ((HEAP32[$27 >> 2] >> 3) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$44 >> 2] = +HEAPF32[$44 >> 2] + 9.999999974752427e-07;
 $53 = $24 + ((HEAP32[$27 >> 2] >> 3 << 1) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$53 >> 2] = +HEAPF32[$53 >> 2] + -9.999999974752427e-07;
 $62 = $24 + (((HEAP32[$27 >> 2] >> 3) * 3 | 0) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$62 >> 2] = +HEAPF32[$62 >> 2] + -9.999999974752427e-07;
 $71 = $24 + ((HEAP32[$27 >> 2] >> 3 << 2) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$71 >> 2] = +HEAPF32[$71 >> 2] + 9.999999974752427e-07;
 $79 = $24 + (((HEAP32[$27 >> 2] >> 3) + (HEAP32[$29 >> 2] | 0) | 0) * 5 << 2) | 0;
 HEAPF32[$79 >> 2] = +HEAPF32[$79 >> 2] + 9.999999974752427e-07;
 $88 = $24 + (((HEAP32[$27 >> 2] >> 3) * 6 | 0) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$88 >> 2] = +HEAPF32[$88 >> 2] + -9.999999974752427e-07;
 $97 = $24 + (((HEAP32[$27 >> 2] >> 3) * 7 | 0) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2) | 0;
 HEAPF32[$97 >> 2] = +HEAPF32[$97 >> 2] + -9.999999974752427e-07;
 $100 = $0 + 4736 | 0;
 $101 = $0 + 7180 | 0;
 $102 = $7 + ($23 << 2) | 0;
 $103 = $0 + 4680 | 0;
 L1 : do if (!(HEAP32[$103 >> 2] | 0)) {
  _silk_find_pitch_lags_FLP($0, $6, $7, $24);
  _silk_noise_shape_analysis_FLP($0, $6, $102, $24);
  _silk_find_pred_coefs_FLP($0, $6, $102, $24, $3);
  _silk_process_gains_FLP($0, $6, $3);
  _silk_LBRR_encode_FLP($0, $6, $24, $3);
  $106 = $0 + 4580 | 0;
  $108 = _silk_gains_ID($100, HEAP32[$106 >> 2] | 0) | 0;
  dest = $8;
  src = $2;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $109 = $0 + 148 | 0;
  _memcpy($9 | 0, $109 | 0, 4352) | 0;
  $110 = HEAP8[$21 >> 0] | 0;
  $111 = $0 + 5772 | 0;
  $112 = HEAP16[$111 >> 1] | 0;
  $113 = $0 + 5768 | 0;
  $114 = HEAP32[$113 >> 2] | 0;
  $115 = $4 + -5 | 0;
  $116 = $0 + 4772 | 0;
  $117 = $6 + 692 | 0;
  $118 = $0 + 4766 | 0;
  $119 = $0 + 5748 | 0;
  $120 = $0 + 4765 | 0;
  $$idx319 = $2 + 20 | 0;
  $$idx320 = $2 + 28 | 0;
  $$sroa$4$0$$sroa_idx84 = $2 + 24 | 0;
  $121 = $6 + 744 | 0;
  $122 = $0 + 7168 | 0;
  $123 = ($3 | 0) == 2;
  $124 = $123 & 1;
  $125 = $0 + 4588 | 0;
  $scevgep = $0 + 4736 | 0;
  $$0285 = 0;
  $$0288 = 0;
  $$0289 = 256;
  $$0291 = -1;
  $$0293 = -1;
  $$0295 = $108;
  $$0296 = 0;
  $$0298 = 0;
  $$0300 = 0;
  $$0302 = 0;
  $$0306 = 0;
  $$0308 = 0;
  $$sroa$4$0 = 0;
  L3 : while (1) {
   $126 = ($$0295 | 0) == ($$0293 | 0);
   if ($126) {
    $$1305 = $$0302;
    $$sroa$4$2 = $$sroa$4$0;
   } else if (($$0295 | 0) == ($$0291 | 0)) {
    $$1305 = $$0300;
    $$sroa$4$2 = $$sroa$4$0;
   } else {
    if ($$0288 | 0) {
     dest = $2;
     src = $8;
     stop = dest + 48 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     _memcpy($109 | 0, $9 | 0, 4352) | 0;
     HEAP8[$21 >> 0] = $110;
     HEAP16[$111 >> 1] = $112;
     HEAP32[$113 >> 2] = $114;
    }
    _silk_NSQ_wrapper_FLP($0, $6, $100, $109, $116, $24);
    $129 = ($$0288 | 0) != 6;
    $130 = ($$0308 | 0) != 0;
    if ($130 | $129) $$sroa$4$1 = $$sroa$4$0; else {
     HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$$sroa$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$$sroa$0 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
     $$sroa$4$0$copyload = HEAP32[$$sroa$4$0$$sroa_idx84 >> 2] | 0;
     HEAP32[$$sroa$6 >> 2] = HEAP32[$$idx320 >> 2];
     HEAP32[$$sroa$6 + 4 >> 2] = HEAP32[$$idx320 + 4 >> 2];
     HEAP32[$$sroa$6 + 8 >> 2] = HEAP32[$$idx320 + 8 >> 2];
     HEAP32[$$sroa$6 + 12 >> 2] = HEAP32[$$idx320 + 12 >> 2];
     HEAP32[$$sroa$6 + 16 >> 2] = HEAP32[$$idx320 + 16 >> 2];
     $$sroa$4$1 = $$sroa$4$0$copyload;
    }
    _silk_encode_indices($0, $2, HEAP32[$119 >> 2] | 0, 0, $3);
    _silk_encode_pulses($2, HEAP8[$120 >> 0] | 0, HEAP8[$118 >> 0] | 0, $116, HEAP32[$27 >> 2] | 0);
    $137 = _ec_tell_543(HEAP32[$$idx319 >> 2] | 0, HEAP32[$$idx320 >> 2] | 0) | 0;
    if (($137 | 0) > ($4 | 0) & (($130 | $129) ^ 1)) {
     HEAP32[$2 >> 2] = HEAP32[$$sroa$0 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$$sroa$0 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$$sroa$0 + 20 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx84 >> 2] = $$sroa$4$1;
     HEAP32[$$idx320 >> 2] = HEAP32[$$sroa$6 >> 2];
     HEAP32[$$idx320 + 4 >> 2] = HEAP32[$$sroa$6 + 4 >> 2];
     HEAP32[$$idx320 + 8 >> 2] = HEAP32[$$sroa$6 + 8 >> 2];
     HEAP32[$$idx320 + 12 >> 2] = HEAP32[$$sroa$6 + 12 >> 2];
     HEAP32[$$idx320 + 16 >> 2] = HEAP32[$$sroa$6 + 16 >> 2];
     $139 = HEAP8[$121 >> 0] | 0;
     HEAP8[$122 >> 0] = $139;
     $140 = HEAP32[$106 >> 2] | 0;
     if (($140 | 0) > 0) _memset($scevgep | 0, 4, $140 | 0) | 0;
     if (!$123) HEAP8[$100 >> 0] = $139;
     HEAP16[$111 >> 1] = $112;
     HEAP32[$113 >> 2] = $114;
     $142 = HEAP32[$27 >> 2] | 0;
     if (($142 | 0) > 0) _memset($116 | 0, 0, $142 | 0) | 0;
     _silk_encode_indices($0, $2, HEAP32[$119 >> 2] | 0, 0, $3);
     _silk_encode_pulses($2, HEAP8[$120 >> 0] | 0, HEAP8[$118 >> 0] | 0, $116, HEAP32[$27 >> 2] | 0);
     $$0304 = _ec_tell_543(HEAP32[$$idx319 >> 2] | 0, HEAP32[$$idx320 >> 2] | 0) | 0;
    } else $$0304 = $137;
    if (($$0288 | $5 | 0) != 0 | ($$0304 | 0) > ($4 | 0)) {
     $$1305 = $$0304;
     $$sroa$4$2 = $$sroa$4$1;
    } else break L1;
   }
   if (($$0288 | 0) == 6) break;
   $159 = ($$1305 | 0) > ($4 | 0);
   L28 : do if ($159) {
    $160 = ($$0308 | 0) == 0;
    if ($160 & $$0288 >>> 0 > 1) {
     $163 = +HEAPF32[$117 >> 2] * 1.5;
     HEAPF32[$117 >> 2] = $163 > 1.5 ? $163 : 1.5;
     HEAP8[$118 >> 0] = 0;
     $$1292392 = -1;
     $$1297391 = $$0296;
     $$1301390 = $$0300;
     $$1307389 = 0;
    } else {
     $171 = $$0289 << 16 >> 16;
     if ($160) {
      $$1292392 = $$0295;
      $$1297391 = $171;
      $$1301390 = $$1305;
      $$1307389 = 1;
     } else {
      $$1292334 = $$0295;
      $$1294333 = $$0293;
      $$1297332 = $171;
      $$1299331 = $$0298;
      $$1301330 = $$1305;
      $$1303329 = $$0302;
      $$1307328 = 1;
      $$1309326 = $$0308;
      $$1335 = $$0285;
      $$sroa$4$3327 = $$sroa$4$2;
      break;
     }
    }
    $172 = HEAP32[$106 >> 2] | 0;
    if (($172 | 0) > 0) {
     $174 = HEAP32[$125 >> 2] | 0;
     if (!$$0288) {
      $$3357$us = 0;
      $indvars$iv383 = $174;
      while (1) {
       $176 = Math_imul($174, $$3357$us) | 0;
       $$3357$us$looptemp = $$3357$us;
       $$3357$us = $$3357$us + 1 | 0;
       if (($176 | 0) < (Math_imul($174, $$3357$us) | 0)) {
        $$0283352$us = 0;
        $$0284351$us = $176;
        while (1) {
         $184 = HEAP8[$0 + 4772 + $$0284351$us >> 0] | 0;
         $186 = (($184 | 0) > -1 ? $184 : 0 - $184 | 0) + $$0283352$us | 0;
         $$0284351$us = $$0284351$us + 1 | 0;
         if (($$0284351$us | 0) == ($indvars$iv383 | 0)) {
          $$0283$lcssa$us = $186;
          break;
         } else $$0283352$us = $186;
        }
       } else $$0283$lcssa$us = 0;
       HEAP32[$15 + ($$3357$us$looptemp << 2) >> 2] = $$0283$lcssa$us;
       HEAP16[$14 + ($$3357$us$looptemp << 1) >> 1] = $$0289;
       if (($$3357$us | 0) == ($172 | 0)) {
        $$1292334 = $$1292392;
        $$1294333 = $$0293;
        $$1297332 = $$1297391;
        $$1299331 = $$0298;
        $$1301330 = $$1301390;
        $$1303329 = $$0302;
        $$1307328 = $$1307389;
        $$1309326 = 0;
        $$1335 = $$0285;
        $$sroa$4$3327 = $$sroa$4$2;
        break L28;
       } else $indvars$iv383 = $indvars$iv383 + $174 | 0;
      }
     }
     $$3357 = 0;
     $indvars$iv = $174;
     while (1) {
      $188 = Math_imul($174, $$3357) | 0;
      $$3357$looptemp = $$3357;
      $$3357 = $$3357 + 1 | 0;
      if (($188 | 0) < (Math_imul($174, $$3357) | 0)) {
       $$0283352 = 0;
       $$0284351 = $188;
       while (1) {
        $194 = HEAP8[$0 + 4772 + $$0284351 >> 0] | 0;
        $196 = (($194 | 0) > -1 ? $194 : 0 - $194 | 0) + $$0283352 | 0;
        $$0284351 = $$0284351 + 1 | 0;
        if (($$0284351 | 0) == ($indvars$iv | 0)) {
         $$0283$lcssa = $196;
         break;
        } else $$0283352 = $196;
       }
      } else $$0283$lcssa = 0;
      $198 = $15 + ($$3357$looptemp << 2) | 0;
      $201 = $13 + ($$3357$looptemp << 2) | 0;
      if (($$0283$lcssa | 0) < (HEAP32[$198 >> 2] | 0)) if (!(HEAP32[$201 >> 2] | 0)) {
       HEAP32[$198 >> 2] = $$0283$lcssa;
       HEAP16[$14 + ($$3357$looptemp << 1) >> 1] = $$0289;
      } else label = 46; else label = 46;
      if ((label | 0) == 46) {
       label = 0;
       HEAP32[$201 >> 2] = 1;
      }
      if (($$3357 | 0) == ($172 | 0)) {
       $$1292334 = $$1292392;
       $$1294333 = $$0293;
       $$1297332 = $$1297391;
       $$1299331 = $$0298;
       $$1301330 = $$1301390;
       $$1303329 = $$0302;
       $$1307328 = $$1307389;
       $$1309326 = 0;
       $$1335 = $$0285;
       $$sroa$4$3327 = $$sroa$4$2;
       break;
      } else $indvars$iv = $indvars$iv + $174 | 0;
     }
    } else {
     $$1292334 = $$1292392;
     $$1294333 = $$0293;
     $$1297332 = $$1297391;
     $$1299331 = $$0298;
     $$1301330 = $$1301390;
     $$1303329 = $$0302;
     $$1307328 = $$1307389;
     $$1309326 = 0;
     $$1335 = $$0285;
     $$sroa$4$3327 = $$sroa$4$2;
    }
   } else {
    if (($$1305 | 0) >= ($115 | 0)) break L1;
    $167 = $$0289 << 16 >> 16;
    if ($126) {
     $$1292334 = $$0291;
     $$1294333 = $$0295;
     $$1297332 = $$0296;
     $$1299331 = $167;
     $$1301330 = $$0300;
     $$1303329 = $$1305;
     $$1307328 = $$0306;
     $$1309326 = 1;
     $$1335 = $$0285;
     $$sroa$4$3327 = $$sroa$4$2;
    } else {
     HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$$sroa$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$$sroa$0 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
     $$sroa$4$0$copyload90 = HEAP32[$$sroa$4$0$$sroa_idx84 >> 2] | 0;
     HEAP32[$$sroa$6 >> 2] = HEAP32[$$idx320 >> 2];
     HEAP32[$$sroa$6 + 4 >> 2] = HEAP32[$$idx320 + 4 >> 2];
     HEAP32[$$sroa$6 + 8 >> 2] = HEAP32[$$idx320 + 8 >> 2];
     HEAP32[$$sroa$6 + 12 >> 2] = HEAP32[$$idx320 + 12 >> 2];
     HEAP32[$$sroa$6 + 16 >> 2] = HEAP32[$$idx320 + 16 >> 2];
     if ($$sroa$4$0$copyload90 >>> 0 >= 1276) {
      label = 29;
      break L3;
     }
     _memcpy($12 | 0, HEAP32[$2 >> 2] | 0, $$sroa$4$0$copyload90 | 0) | 0;
     _memcpy($10 | 0, $109 | 0, 4352) | 0;
     $$1292334 = $$0291;
     $$1294333 = $$0295;
     $$1297332 = $$0296;
     $$1299331 = $167;
     $$1301330 = $$0300;
     $$1303329 = $$1305;
     $$1307328 = $$0306;
     $$1309326 = 1;
     $$1335 = HEAP8[$122 >> 0] | 0;
     $$sroa$4$3327 = $$sroa$4$0$copyload90;
    }
   } while (0);
   do if (!($$1309326 & $$1307328)) {
    if (!$159) {
     $216 = _silk_log2lin((($$1305 - $4 << 7 | 0) / (HEAP32[$27 >> 2] | 0) | 0) + 2048 | 0) | 0;
     $218 = $$0289 << 16 >> 16;
     $$1290 = ((Math_imul($216 & 65535, $218) | 0) >>> 16) + (Math_imul($216 >> 16, $218) | 0) & 65535;
     break;
    }
    if ($$0289 << 16 >> 16 < 16384) $$1290 = $$0289 << 16 >> 16 << 1 & 65535; else $$1290 = 32767;
   } else {
    $225 = $$1297332 - $$1299331 | 0;
    $230 = ((Math_imul($4 - $$1303329 | 0, $225) | 0) / ($$1301330 - $$1303329 | 0) | 0) + $$1299331 | 0;
    $231 = $230 << 16 >> 16;
    $232 = $225 >> 2;
    $233 = $232 + $$1299331 | 0;
    if (($231 | 0) > ($233 | 0)) {
     $$1290 = $233 & 65535;
     break;
    } else {
     $236 = $$1297332 - $232 | 0;
     $$1290 = (($231 | 0) < ($236 | 0) ? $236 : $230) & 65535;
     break;
    }
   } while (0);
   $238 = HEAP32[$106 >> 2] | 0;
   if (($238 | 0) > 0) {
    $$4360 = 0;
    do {
     if (!(HEAP32[$13 + ($$4360 << 2) >> 2] | 0)) $$0 = $$1290; else $$0 = HEAP16[$14 + ($$4360 << 1) >> 1] | 0;
     $246 = HEAP32[$6 + 728 + ($$4360 << 2) >> 2] | 0;
     $248 = $$0 << 16 >> 16;
     $253 = ((Math_imul($246 & 65535, $248) | 0) >> 16) + (Math_imul($246 >> 16, $248) | 0) | 0;
     $spec$select314 = ($253 | 0) > -8388608 ? $253 : -8388608;
     HEAP32[$11 + ($$4360 << 2) >> 2] = (($spec$select314 | 0) < 8388607 ? $spec$select314 : 8388607) << 8;
     $$4360 = $$4360 + 1 | 0;
    } while (($$4360 | 0) != ($238 | 0));
   }
   HEAP8[$122 >> 0] = HEAP8[$121 >> 0] | 0;
   _silk_gains_quant($100, $11, $122, $124, $238);
   $261 = HEAP32[$106 >> 2] | 0;
   $262 = _silk_gains_ID($100, $261) | 0;
   if (($261 | 0) > 0) {
    $$5365 = 0;
    do {
     HEAPF32[$6 + ($$5365 << 2) >> 2] = +(HEAP32[$11 + ($$5365 << 2) >> 2] | 0) * .0000152587890625;
     $$5365 = $$5365 + 1 | 0;
    } while (($$5365 | 0) != ($261 | 0));
   }
   $$0285 = $$1335;
   $$0288 = $$0288 + 1 | 0;
   $$0289 = $$1290;
   $$0291 = $$1292334;
   $$0293 = $$1294333;
   $$0295 = $262;
   $$0296 = $$1297332;
   $$0298 = $$1299331;
   $$0300 = $$1301330;
   $$0302 = $$1303329;
   $$0306 = $$1307328;
   $$0308 = $$1309326;
   $$sroa$4$0 = $$sroa$4$3327;
  }
  if ((label | 0) == 29) _celt_fatal(45920, 45890, 281);
  if (($$0308 | 0) != 0 & ($126 | ($$1305 | 0) > ($4 | 0))) {
   HEAP32[$2 >> 2] = HEAP32[$$sroa$0 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$$sroa$0 + 16 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAP32[$$sroa$0 + 20 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx84 >> 2] = $$sroa$4$2;
   HEAP32[$$idx320 >> 2] = HEAP32[$$sroa$6 >> 2];
   HEAP32[$$idx320 + 4 >> 2] = HEAP32[$$sroa$6 + 4 >> 2];
   HEAP32[$$idx320 + 8 >> 2] = HEAP32[$$sroa$6 + 8 >> 2];
   HEAP32[$$idx320 + 12 >> 2] = HEAP32[$$sroa$6 + 12 >> 2];
   HEAP32[$$idx320 + 16 >> 2] = HEAP32[$$sroa$6 + 16 >> 2];
   if ($$sroa$4$2 >>> 0 < 1276) {
    _memcpy(HEAP32[$2 >> 2] | 0, $12 | 0, $$sroa$4$2 | 0) | 0;
    _memcpy($109 | 0, $10 | 0, 4352) | 0;
    HEAP8[$122 >> 0] = $$0285;
    break;
   } else _celt_fatal(45843, 45890, 251);
  }
 } while (0);
 _memmove($101 | 0, $0 + 7180 + (HEAP32[$27 >> 2] << 2) | 0, ((HEAP32[$29 >> 2] | 0) * 5 | 0) + (HEAP32[$22 >> 2] | 0) << 2 | 0) | 0;
 if (HEAP32[$103 >> 2] | 0) {
  $storemerge = 0;
  HEAP32[$1 >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 + 4544 >> 2] = HEAP32[$6 + 228 + ((HEAP32[$0 + 4580 >> 2] | 0) + -1 << 2) >> 2];
 HEAP8[$0 + 4541 >> 0] = HEAP8[$0 + 4765 >> 0] | 0;
 HEAP32[$0 + 4664 >> 2] = 0;
 $storemerge = (_ec_tell_543(HEAP32[$2 + 20 >> 2] | 0, HEAP32[$2 + 28 >> 2] | 0) | 0) + 7 >> 3;
 HEAP32[$1 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _silk_noise_shape_quantizer_del_dec($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 $23 = $23 | 0;
 $24 = $24 | 0;
 $25 = $25 | 0;
 var $$044833 = 0, $$044938 = 0, $$045070 = 0, $$045269 = 0, $$0454$lcssa = 0, $$045432 = 0, $$0455$lcssa = 0, $$045543 = 0, $$0459 = 0, $$0460 = 0, $$0461$in = 0, $$046126 = 0, $$0462$lcssa = 0, $$046256 = 0, $$046442 = 0, $$0468 = 0, $$0469 = 0, $$0470$lcssa = 0, $$047054 = 0, $$0473 = 0, $$0474$lcssa = 0, $$047431 = 0, $$0475 = 0, $$0476$lcssa = 0, $$047653 = 0, $$071 = 0, $$144 = 0, $$1451 = 0, $$1453 = 0, $$1471 = 0, $$2466$lcssa = 0, $$246655 = 0, $$249 = 0, $$3467 = 0, $$357 = 0, $$465 = 0, $$530 = 0, $101 = 0, $103 = 0, $106 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $135 = 0, $137 = 0, $140 = 0, $142 = 0, $154 = 0, $155 = 0, $156 = 0, $162 = 0, $165 = 0, $166 = 0, $173 = 0, $176 = 0, $183 = 0, $186 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $205 = 0, $209 = 0, $210 = 0, $213 = 0, $217 = 0, $224 = 0, $228 = 0, $236 = 0, $237 = 0, $242 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $259 = 0, $260 = 0, $262 = 0, $27 = 0, $274 = 0, $28 = 0, $280 = 0, $281 = 0, $283 = 0, $286 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $297 = 0, $30 = 0, $304 = 0, $306 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $335 = 0, $341 = 0, $343 = 0, $344 = 0, $345 = 0, $347 = 0, $356 = 0, $360 = 0, $363 = 0, $364 = 0, $367 = 0, $371 = 0, $374 = 0, $378 = 0, $379 = 0, $381 = 0, $382 = 0, $384 = 0, $385 = 0, $388 = 0, $389 = 0, $40 = 0, $401 = 0, $404 = 0, $407 = 0, $408 = 0, $41 = 0, $418 = 0, $42 = 0, $43 = 0, $44 = 0, $442 = 0, $45 = 0, $450 = 0, $455 = 0, $46 = 0, $467 = 0, $47 = 0, $472 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $92 = 0, $94 = 0, $97 = 0, $98 = 0, $sext12 = 0, $spec$select = 0, $spec$select20 = 0, $spec$select22 = 0, $spec$select23 = 0, $spec$select24 = 0, $spec$select87 = 0, $spec$select88 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (($23 | 0) <= 0) _celt_fatal(43717, 43698, 364);
 $27 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($23 * 56 | 0) | 0) + 15 & -16) | 0;
 $28 = $0 + 4336 | 0;
 $29 = $0 + 4332 | 0;
 $30 = $15 >> 6;
 L4 : do if (($18 | 0) > 0) {
  $40 = ($2 | 0) == 2;
  $41 = $9 + 2 | 0;
  $42 = $9 + 4 | 0;
  $43 = $9 + 6 | 0;
  $44 = $9 + 8 | 0;
  $45 = ($11 | 0) > 0;
  $46 = $12 << 16 >> 16;
  $47 = $12 >> 16;
  $48 = $27 + 4 | 0;
  $49 = ($23 | 0) > 1;
  $51 = ($20 & 1 | 0) == 0;
  $52 = $22 << 16 >> 16;
  $53 = $20 >> 1;
  $54 = ($20 | 0) > 2;
  $55 = $20 + -1 | 0;
  $56 = $10 + ($55 << 1) | 0;
  $57 = $13 << 16 >> 16;
  $58 = $14 << 16 >> 16;
  $59 = $14 >> 16;
  $60 = ($16 | 0) > 2048;
  $61 = $16 >>> 1;
  $62 = $61 + -512 | 0;
  $63 = 512 - $61 | 0;
  $64 = $17 + -80 | 0;
  $65 = $16 << 16 >> 16;
  $66 = $17 + 944 | 0;
  $sext12 = $17 << 16;
  $68 = Math_imul($sext12 >> 16, $65) | 0;
  $70 = Math_imul($66 << 16 >> 16, $65) | 0;
  $71 = $17 + -944 | 0;
  $73 = Math_imul(61865984 - $sext12 >> 16, $65) | 0;
  $74 = $27 + 32 | 0;
  $75 = ($19 | 0) < 1;
  $$045070 = $0 + 1280 + (1 - $11 + (HEAP32[$28 >> 2] | 0) << 2) | 0;
  $$045269 = $6 + (2 - $11 + (HEAP32[$29 >> 2] | 0) << 2) | 0;
  $$071 = 0;
  L6 : while (1) {
   if ($40) {
    $76 = HEAP32[$$045269 >> 2] | 0;
    $79 = HEAP16[$9 >> 1] | 0;
    $80 = Math_imul($76 >> 16, $79) | 0;
    $83 = (Math_imul($76 & 65535, $79) | 0) >> 16;
    $85 = HEAP32[$$045269 + -4 >> 2] | 0;
    $88 = HEAP16[$41 >> 1] | 0;
    $89 = Math_imul($85 >> 16, $88) | 0;
    $92 = (Math_imul($85 & 65535, $88) | 0) >> 16;
    $94 = HEAP32[$$045269 + -8 >> 2] | 0;
    $97 = HEAP16[$42 >> 1] | 0;
    $98 = Math_imul($94 >> 16, $97) | 0;
    $101 = (Math_imul($94 & 65535, $97) | 0) >> 16;
    $103 = HEAP32[$$045269 + -12 >> 2] | 0;
    $106 = HEAP16[$43 >> 1] | 0;
    $107 = Math_imul($103 >> 16, $106) | 0;
    $110 = (Math_imul($103 & 65535, $106) | 0) >> 16;
    $112 = HEAP32[$$045269 + -16 >> 2] | 0;
    $115 = HEAP16[$44 >> 1] | 0;
    $$0475 = $80 + 2 + $83 + $89 + $92 + $98 + $101 + $107 + $110 + (Math_imul($112 >> 16, $115) | 0) + ((Math_imul($112 & 65535, $115) | 0) >> 16) << 1;
    $$1453 = $$045269 + 4 | 0;
   } else {
    $$0475 = 0;
    $$1453 = $$045269;
   }
   if ($45) {
    $135 = (HEAP32[$$045070 + -8 >> 2] | 0) + (HEAP32[$$045070 >> 2] | 0) | 0;
    $137 = Math_imul($135 >> 16, $46) | 0;
    $140 = (Math_imul($135 & 65535, $46) | 0) >> 16;
    $142 = HEAP32[$$045070 + -4 >> 2] | 0;
    $$0473 = $$0475 - ((Math_imul($142 >> 16, $47) | 0) + $137 + $140 + ((Math_imul($142 & 65535, $47) | 0) >> 16) << 2) | 0;
    $$1451 = $$045070 + 4 | 0;
   } else {
    $$0473 = 0;
    $$1451 = $$045070;
   }
   $154 = $$071 + 15 | 0;
   $155 = $3 + ($$071 << 2) | 0;
   $$044938 = 0;
   do {
    $156 = $1 + ($$044938 * 1300 | 0) + 1288 | 0;
    HEAP32[$156 >> 2] = (Math_imul(HEAP32[$156 >> 2] | 0, 196314165) | 0) + 907633515;
    $162 = (_silk_noise_shape_quantizer_short_prediction_c_242($1 + ($$044938 * 1300 | 0) + ($154 << 2) | 0, $8, $21) | 0) << 4;
    if (!$51) break L6;
    $165 = $1 + ($$044938 * 1300 | 0) + 1184 | 0;
    $166 = HEAP32[$165 >> 2] | 0;
    $173 = (Math_imul($166 >> 16, $52) | 0) + (HEAP32[$1 + ($$044938 * 1300 | 0) + 1284 >> 2] | 0) + ((Math_imul($166 & 65535, $52) | 0) >> 16) | 0;
    $176 = (HEAP32[$1 + ($$044938 * 1300 | 0) + 1188 >> 2] | 0) - $173 | 0;
    $183 = (Math_imul($176 >> 16, $52) | 0) + $166 + ((Math_imul($176 & 65535, $52) | 0) >> 16) | 0;
    HEAP32[$165 >> 2] = $173;
    $186 = HEAP16[$10 >> 1] | 0;
    $192 = (Math_imul($173 >> 16, $186) | 0) + $53 + ((Math_imul($173 & 65535, $186) | 0) >> 16) | 0;
    L17 : do if ($54) {
     $$044833 = 2;
     $$045432 = $183;
     $$047431 = $192;
     while (1) {
      $193 = $$044833 + -1 | 0;
      $194 = $1 + ($$044938 * 1300 | 0) + 1184 + ($193 << 2) | 0;
      $196 = $1 + ($$044938 * 1300 | 0) + 1184 + ($$044833 << 2) | 0;
      $197 = HEAP32[$196 >> 2] | 0;
      $198 = $197 - $$045432 | 0;
      $205 = (Math_imul($198 >> 16, $52) | 0) + (HEAP32[$194 >> 2] | 0) + ((Math_imul($198 & 65535, $52) | 0) >> 16) | 0;
      HEAP32[$194 >> 2] = $$045432;
      $209 = HEAP16[$10 + ($193 << 1) >> 1] | 0;
      $210 = Math_imul($$045432 >> 16, $209) | 0;
      $213 = (Math_imul($$045432 & 65535, $209) | 0) >> 16;
      $217 = (HEAP32[$1 + ($$044938 * 1300 | 0) + 1184 + (($$044833 | 1) << 2) >> 2] | 0) - $205 | 0;
      $224 = (Math_imul($217 >> 16, $52) | 0) + $197 + ((Math_imul($217 & 65535, $52) | 0) >> 16) | 0;
      HEAP32[$196 >> 2] = $205;
      $228 = HEAP16[$10 + ($$044833 << 1) >> 1] | 0;
      $236 = $210 + $$047431 + $213 + (Math_imul($205 >> 16, $228) | 0) + ((Math_imul($205 & 65535, $228) | 0) >> 16) | 0;
      $237 = $$044833 + 2 | 0;
      if (($237 | 0) >= ($20 | 0)) {
       $$0454$lcssa = $224;
       $$0474$lcssa = $236;
       break L17;
      }
      $$044833 = $237;
      $$045432 = $224;
      $$047431 = $236;
     }
    } else {
     $$0454$lcssa = $183;
     $$0474$lcssa = $192;
    } while (0);
    HEAP32[$1 + ($$044938 * 1300 | 0) + 1184 + ($55 << 2) >> 2] = $$0454$lcssa;
    $242 = HEAP16[$56 >> 1] | 0;
    $249 = (Math_imul($$0454$lcssa >> 16, $242) | 0) + $$0474$lcssa + ((Math_imul($$0454$lcssa & 65535, $242) | 0) >> 16) << 1;
    $251 = HEAP32[$1 + ($$044938 * 1300 | 0) + 1280 >> 2] | 0;
    $252 = $251 >> 16;
    $254 = $251 & 65535;
    $259 = ((Math_imul($254, $57) | 0) >> 16) + (Math_imul($252, $57) | 0) + $249 << 2;
    $260 = HEAP32[$24 >> 2] | 0;
    $262 = HEAP32[$1 + ($$044938 * 1300 | 0) + 1024 + ($260 << 2) >> 2] | 0;
    $274 = ((Math_imul($254, $59) | 0) >> 16) + (Math_imul($252, $59) | 0) + (Math_imul($262 >> 16, $58) | 0) + ((Math_imul($262 & 65535, $58) | 0) >> 16) << 2;
    $280 = HEAP32[$155 >> 2] | 0;
    $281 = $280 - (($162 + $$0473 - $259 - $274 >> 3) + 1 >> 1) | 0;
    $283 = (HEAP32[$156 >> 2] | 0) < 0;
    $spec$select = $283 ? 0 - $281 | 0 : $281;
    $286 = ($spec$select | 0) > -31744 ? $spec$select : -31744;
    $288 = ($286 | 0) < 30720 ? $286 : 30720;
    $289 = $288 - $17 | 0;
    do if ($60) {
     if (($289 | 0) > ($62 | 0)) {
      $$0461$in = $289 - $62 | 0;
      label = 22;
      break;
     }
     if (($289 | 0) < ($63 | 0)) {
      $$0461$in = $289 + $62 | 0;
      label = 22;
      break;
     } else {
      $$046126 = $289 >> 31;
      label = 24;
      break;
     }
    } else {
     $$0461$in = $289;
     label = 22;
    } while (0);
    if ((label | 0) == 22) {
     label = 0;
     if (($$0461$in | 0) > 1023) {
      $296 = $64 + ($$0461$in & -1024) | 0;
      $297 = $296 + 1024 | 0;
      $$0459 = $297;
      $$0460 = $296;
      $$0468 = Math_imul($297 << 16 >> 16, $65) | 0;
      $$0469 = Math_imul($296 << 16 >> 16, $65) | 0;
     } else {
      $$046126 = $$0461$in >> 10;
      label = 24;
     }
    }
    L34 : do if ((label | 0) == 24) {
     label = 0;
     switch ($$046126 | 0) {
     case 0:
      {
       $$0459 = $66;
       $$0460 = $17;
       $$0468 = $70;
       $$0469 = $68;
       break L34;
       break;
      }
     case -1:
      {
       $$0459 = $17;
       $$0460 = $71;
       $$0468 = $68;
       $$0469 = $73;
       break L34;
       break;
      }
     default:
      {
       $304 = ($$046126 << 10 | 80) + $17 | 0;
       $306 = $304 << 16;
       $$0459 = $304 + 1024 | 0;
       $$0460 = $304;
       $$0468 = Math_imul(-67108864 - $306 >> 16, $65) | 0;
       $$0469 = Math_imul(0 - $306 >> 16, $65) | 0;
       break L34;
      }
     }
    } while (0);
    $312 = $288 - $$0460 << 16 >> 16;
    $315 = (Math_imul($312, $312) | 0) + $$0469 >> 10;
    $317 = $288 - $$0459 << 16 >> 16;
    $320 = (Math_imul($317, $317) | 0) + $$0468 >> 10;
    $321 = ($315 | 0) < ($320 | 0);
    $323 = HEAP32[$1 + ($$044938 * 1300 | 0) + 1296 >> 2] | 0;
    $spec$select87 = $321 ? $$0460 : $$0459;
    $spec$select88 = $321 ? $$0459 : $$0460;
    HEAP32[$27 + ($$044938 * 56 | 0) + 4 >> 2] = ($321 ? $315 : $320) + $323;
    HEAP32[$27 + ($$044938 * 56 | 0) + 32 >> 2] = ($321 ? $320 : $315) + $323;
    HEAP32[$27 + ($$044938 * 56 | 0) >> 2] = $spec$select87;
    HEAP32[$27 + ($$044938 * 56 | 0) + 28 >> 2] = $spec$select88;
    $328 = $spec$select87 << 4;
    $330 = ($283 ? 0 - $328 | 0 : $328) + $$0475 | 0;
    $331 = $330 + $162 | 0;
    $332 = $280 << 4;
    $333 = $331 - $332 | 0;
    HEAP32[$27 + ($$044938 * 56 | 0) + 16 >> 2] = $333;
    $335 = $333 - $259 | 0;
    HEAP32[$27 + ($$044938 * 56 | 0) + 20 >> 2] = $335 - $274;
    HEAP32[$27 + ($$044938 * 56 | 0) + 12 >> 2] = $335;
    HEAP32[$27 + ($$044938 * 56 | 0) + 24 >> 2] = $330;
    HEAP32[$27 + ($$044938 * 56 | 0) + 8 >> 2] = $331;
    $341 = $spec$select88 << 4;
    $343 = ($283 ? 0 - $341 | 0 : $341) + $$0475 | 0;
    $344 = $343 + $162 | 0;
    $345 = $344 - $332 | 0;
    HEAP32[$27 + ($$044938 * 56 | 0) + 44 >> 2] = $345;
    $347 = $345 - $259 | 0;
    HEAP32[$27 + ($$044938 * 56 | 0) + 48 >> 2] = $347 - $274;
    HEAP32[$27 + ($$044938 * 56 | 0) + 40 >> 2] = $347;
    HEAP32[$27 + ($$044938 * 56 | 0) + 52 >> 2] = $343;
    HEAP32[$27 + ($$044938 * 56 | 0) + 36 >> 2] = $344;
    $$044938 = $$044938 + 1 | 0;
   } while (($$044938 | 0) < ($23 | 0));
   $356 = ($260 + -1 | 0) % 40 | 0;
   $spec$select20 = ($356 | 0) < 0 ? $356 + 40 | 0 : $356;
   HEAP32[$24 >> 2] = $spec$select20;
   $360 = ($spec$select20 + $25 | 0) % 40 | 0;
   if ($49) {
    $$045543 = 0;
    $$046442 = HEAP32[$48 >> 2] | 0;
    $$144 = 1;
    while (1) {
     $363 = HEAP32[$27 + ($$144 * 56 | 0) + 4 >> 2] | 0;
     $364 = ($363 | 0) < ($$046442 | 0);
     $spec$select22 = $364 ? $$144 : $$045543;
     $$144 = $$144 + 1 | 0;
     if (($$144 | 0) == ($23 | 0)) {
      $$0455$lcssa = $spec$select22;
      break;
     } else {
      $$045543 = $spec$select22;
      $$046442 = $364 ? $363 : $$046442;
     }
    }
   } else $$0455$lcssa = 0;
   $367 = HEAP32[$1 + ($$0455$lcssa * 1300 | 0) + 384 + ($360 << 2) >> 2] | 0;
   $$249 = 0;
   do {
    if ((HEAP32[$1 + ($$249 * 1300 | 0) + 384 + ($360 << 2) >> 2] | 0) != ($367 | 0)) {
     $371 = $27 + ($$249 * 56 | 0) + 4 | 0;
     HEAP32[$371 >> 2] = (HEAP32[$371 >> 2] | 0) + 134217727;
     $374 = $27 + ($$249 * 56 | 0) + 32 | 0;
     HEAP32[$374 >> 2] = (HEAP32[$374 >> 2] | 0) + 134217727;
    }
    $$249 = $$249 + 1 | 0;
   } while (($$249 | 0) != ($23 | 0));
   $378 = HEAP32[$48 >> 2] | 0;
   $379 = HEAP32[$74 >> 2] | 0;
   if ($49) {
    $$046256 = $378;
    $$047054 = 0;
    $$047653 = 0;
    $$246655 = $379;
    $$357 = 1;
    while (1) {
     $381 = HEAP32[$27 + ($$357 * 56 | 0) + 4 >> 2] | 0;
     $382 = ($381 | 0) > ($$046256 | 0);
     $spec$select23 = $382 ? $$357 : $$047653;
     $spec$select24 = $382 ? $381 : $$046256;
     $384 = HEAP32[$27 + ($$357 * 56 | 0) + 32 >> 2] | 0;
     $385 = ($384 | 0) < ($$246655 | 0);
     $$1471 = $385 ? $$357 : $$047054;
     $$3467 = $385 ? $384 : $$246655;
     $$357 = $$357 + 1 | 0;
     if (($$357 | 0) == ($23 | 0)) {
      $$0462$lcssa = $spec$select24;
      $$0470$lcssa = $$1471;
      $$0476$lcssa = $spec$select23;
      $$2466$lcssa = $$3467;
      break;
     } else {
      $$046256 = $spec$select24;
      $$047054 = $$1471;
      $$047653 = $spec$select23;
      $$246655 = $$3467;
     }
    }
   } else {
    $$0462$lcssa = $378;
    $$0470$lcssa = 0;
    $$0476$lcssa = 0;
    $$2466$lcssa = $379;
   }
   if (($$2466$lcssa | 0) < ($$0462$lcssa | 0)) {
    $388 = $27 + ($$0470$lcssa * 56 | 0) + 28 | 0;
    $389 = $27 + ($$0476$lcssa * 56 | 0) | 0;
    _memcpy($1 + ($$0476$lcssa * 1300 | 0) + ($$071 << 2) | 0, $1 + ($$0470$lcssa * 1300 | 0) + ($$071 << 2) | 0, 1300 - ($$071 << 2) | 0) | 0;
    HEAP32[$389 >> 2] = HEAP32[$388 >> 2];
    HEAP32[$389 + 4 >> 2] = HEAP32[$388 + 4 >> 2];
    HEAP32[$389 + 8 >> 2] = HEAP32[$388 + 8 >> 2];
    HEAP32[$389 + 12 >> 2] = HEAP32[$388 + 12 >> 2];
    HEAP32[$389 + 16 >> 2] = HEAP32[$388 + 16 >> 2];
    HEAP32[$389 + 20 >> 2] = HEAP32[$388 + 20 >> 2];
    HEAP32[$389 + 24 >> 2] = HEAP32[$388 + 24 >> 2];
   }
   if (!($75 & ($$071 | 0) < ($25 | 0))) {
    $401 = $$071 - $25 | 0;
    HEAP8[$4 + $401 >> 0] = (((HEAP32[$1 + ($$0455$lcssa * 1300 | 0) + 544 + ($360 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
    $404 = HEAP32[$1 + ($$0455$lcssa * 1300 | 0) + 704 + ($360 << 2) >> 2] | 0;
    $407 = HEAP32[$7 + ($360 << 2) >> 2] | 0;
    $408 = $407 << 16 >> 16;
    $418 = ((Math_imul($408, $404 & 65535) | 0) >> 16) + (Math_imul($408, $404 >> 16) | 0) + (Math_imul(($407 >> 15) + 1 >> 1, $404) | 0) | 0;
    HEAP16[$5 + ($401 << 1) >> 1] = ($418 | 0) > 8388479 ? 32767 : ($418 | 0) < -8388736 ? -32768 : (($418 >>> 7) + 1 | 0) >>> 1 & 65535;
    HEAP32[$0 + 1280 + ((HEAP32[$28 >> 2] | 0) - $25 << 2) >> 2] = HEAP32[$1 + ($$0455$lcssa * 1300 | 0) + 1024 + ($360 << 2) >> 2];
    HEAP32[$6 + ((HEAP32[$29 >> 2] | 0) - $25 << 2) >> 2] = HEAP32[$1 + ($$0455$lcssa * 1300 | 0) + 864 + ($360 << 2) >> 2];
   }
   HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
   $442 = $$071 + 16 | 0;
   $$465 = 0;
   do {
    HEAP32[$1 + ($$465 * 1300 | 0) + 1280 >> 2] = HEAP32[$27 + ($$465 * 56 | 0) + 12 >> 2];
    HEAP32[$1 + ($$465 * 1300 | 0) + 1284 >> 2] = HEAP32[$27 + ($$465 * 56 | 0) + 16 >> 2];
    $450 = HEAP32[$27 + ($$465 * 56 | 0) + 8 >> 2] | 0;
    HEAP32[$1 + ($$465 * 1300 | 0) + ($442 << 2) >> 2] = $450;
    HEAP32[$1 + ($$465 * 1300 | 0) + 704 + (HEAP32[$24 >> 2] << 2) >> 2] = $450;
    $455 = HEAP32[$27 + ($$465 * 56 | 0) >> 2] | 0;
    HEAP32[$1 + ($$465 * 1300 | 0) + 544 + (HEAP32[$24 >> 2] << 2) >> 2] = $455;
    HEAP32[$1 + ($$465 * 1300 | 0) + 864 + (HEAP32[$24 >> 2] << 2) >> 2] = HEAP32[$27 + ($$465 * 56 | 0) + 24 >> 2] << 1;
    HEAP32[$1 + ($$465 * 1300 | 0) + 1024 + (HEAP32[$24 >> 2] << 2) >> 2] = HEAP32[$27 + ($$465 * 56 | 0) + 20 >> 2];
    $467 = $1 + ($$465 * 1300 | 0) + 1288 | 0;
    $472 = (HEAP32[$467 >> 2] | 0) + (($455 >> 9) + 1 >> 1) | 0;
    HEAP32[$467 >> 2] = $472;
    HEAP32[$1 + ($$465 * 1300 | 0) + 384 + (HEAP32[$24 >> 2] << 2) >> 2] = $472;
    HEAP32[$1 + ($$465 * 1300 | 0) + 1296 >> 2] = HEAP32[$27 + ($$465 * 56 | 0) + 4 >> 2];
    $$465 = $$465 + 1 | 0;
   } while (($$465 | 0) != ($23 | 0));
   HEAP32[$7 + (HEAP32[$24 >> 2] << 2) >> 2] = $30;
   $$071 = $$071 + 1 | 0;
   if (($$071 | 0) >= ($18 | 0)) break L4; else {
    $$045070 = $$1451;
    $$045269 = $$1453;
   }
  }
  _celt_fatal(43762, 43698, 422);
 } while (0);
 $$530 = 0;
 do {
  dest = $1 + ($$530 * 1300 | 0) | 0;
  src = $1 + ($$530 * 1300 | 0) + ($18 << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$530 = $$530 + 1 | 0;
 } while (($$530 | 0) != ($23 | 0));
 STACKTOP = sp;
 return;
}

function _silk_Decode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$us = 0, $$0$us347 = 0, $$0294 = 0, $$0295369 = 0, $$0297382 = 0, $$0311 = 0, $$0312$in = 0, $$0312$in$ph = 0, $$1298379 = 0, $$1359 = 0, $$2299374 = 0, $$2354 = 0, $$3300362 = 0, $$3333 = 0, $$4301349 = 0, $$4301349$us = 0, $$4329 = 0, $$5331 = 0, $$6303341 = 0, $$6303341$us = 0, $$6303341$us346 = 0, $$6328 = 0, $$7336 = 0, $$alloca_mul8 = 0, $$in = 0, $$lcssa = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0, $$pre$phi409Z2D = 0, $$pre18 = 0, $$sink397 = 0, $$sink445 = 0, $$sink447 = 0, $$sink451 = 0, $10 = 0, $100 = 0, $106 = 0, $107 = 0, $11 = 0, $114 = 0, $117 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $125 = 0, $126 = 0, $130 = 0, $145 = 0, $146 = 0, $150 = 0, $16 = 0, $168 = 0, $17 = 0, $172 = 0, $196 = 0, $198 = 0, $199 = 0, $21 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $218 = 0, $221 = 0, $222 = 0, $223 = 0, $226 = 0, $23 = 0, $231 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $25 = 0, $259 = 0, $263 = 0, $265 = 0, $272 = 0, $279 = 0, $28 = 0, $283 = 0, $293 = 0, $297 = 0, $303 = 0, $304 = 0, $306 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $322 = 0, $323 = 0, $325 = 0, $326 = 0, $328 = 0, $329 = 0, $331 = 0, $340 = 0, $341 = 0, $353 = 0, $354 = 0, $355 = 0, $375 = 0, $38 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $42 = 0, $43 = 0, $44 = 0, $49 = 0, $54 = 0, $56 = 0, $58 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 $7 = sp + 660 | 0;
 $8 = sp + 656 | 0;
 $9 = sp + 648 | 0;
 $10 = sp + 640 | 0;
 $11 = sp;
 HEAP32[$7 >> 2] = 0;
 $12 = $10;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 $16 = $1 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($17 + -1 | 0) >>> 0 >= 2) _celt_fatal(42686, 42777, 107);
 if (!$3) $25 = $17; else {
  $$0297382 = 0;
  do {
   HEAP32[$0 + ($$0297382 * 4264 | 0) + 2388 >> 2] = 0;
   $$0297382 = $$0297382 + 1 | 0;
   $21 = HEAP32[$16 >> 2] | 0;
  } while (($$0297382 | 0) < ($21 | 0));
  $25 = $21;
 }
 $23 = $0 + 8544 | 0;
 if (($25 | 0) > (HEAP32[$23 >> 2] | 0)) {
  _silk_init_decoder($0 + 4264 | 0);
  $28 = HEAP32[$16 >> 2] | 0;
 } else $28 = $25;
 if (($28 | 0) == 1) if ((HEAP32[$23 >> 2] | 0) == 2) $403 = (HEAP32[$1 + 12 >> 2] | 0) == ((HEAP32[$0 + 2316 >> 2] | 0) * 1e3 | 0); else $403 = 0; else $403 = 0;
 $38 = $0 + 2388 | 0;
 L16 : do if ((HEAP32[$38 >> 2] | 0) == 0 & ($28 | 0) > 0) {
  $42 = $1 + 16 | 0;
  $43 = $1 + 12 | 0;
  $44 = $1 + 8 | 0;
  $$1298379 = 0;
  L18 : while (1) {
   switch (HEAP32[$42 >> 2] | 0) {
   case 10:
   case 0:
    {
     $$sink445 = 2;
     $$sink447 = 1;
     break;
    }
   case 20:
    {
     $$sink445 = 4;
     $$sink447 = 1;
     break;
    }
   case 40:
    {
     $$sink445 = 4;
     $$sink447 = 2;
     break;
    }
   case 60:
    {
     $$sink445 = 4;
     $$sink447 = 3;
     break;
    }
   default:
    {
     label = 17;
     break L18;
    }
   }
   HEAP32[$0 + ($$1298379 * 4264 | 0) + 2392 >> 2] = $$sink447;
   HEAP32[$0 + ($$1298379 * 4264 | 0) + 2324 >> 2] = $$sink445;
   $49 = HEAP32[$43 >> 2] >> 10;
   switch ($49 | 0) {
   case 7:
   case 11:
   case 15:
    break;
   default:
    {
     label = 19;
     break L18;
    }
   }
   _silk_decoder_set_fs($0 + ($$1298379 * 4264 | 0) | 0, $49 + 1 | 0, HEAP32[$44 >> 2] | 0);
   $$1298379 = $$1298379 + 1 | 0;
   $54 = HEAP32[$16 >> 2] | 0;
   if (($$1298379 | 0) >= ($54 | 0)) {
    $58 = $54;
    break L16;
   }
  }
  if ((label | 0) == 17) _celt_fatal(47580, 42777, 146); else if ((label | 0) == 19) _celt_fatal(47580, 42777, 152);
 } else $58 = $28; while (0);
 $56 = HEAP32[$1 >> 2] | 0;
 do if (($56 | 0) == 2) if (($58 | 0) == 2) {
  if ((HEAP32[$0 + 8540 >> 2] | 0) != 1) if ((HEAP32[$23 >> 2] | 0) != 1) {
   $70 = 2;
   break;
  }
  HEAP32[$0 + 8528 >> 2] = 0;
  HEAP32[$0 + 8536 >> 2] = 0;
  _memcpy($0 + 6696 | 0, $0 + 2432 | 0, 300) | 0;
  $70 = HEAP32[$1 >> 2] | 0;
 } else $70 = 2; else $70 = $56; while (0);
 HEAP32[$0 + 8540 >> 2] = $70;
 HEAP32[$23 >> 2] = HEAP32[$16 >> 2];
 $72 = $1 + 8 | 0;
 if (((HEAP32[$72 >> 2] | 0) + -8e3 | 0) >>> 0 > 4e4) {
  $$0294 = -200;
  STACKTOP = sp;
  return $$0294 | 0;
 }
 $75 = ($2 | 0) == 1;
 if ($75) label = 67; else if (!(HEAP32[$38 >> 2] | 0)) {
  $78 = HEAP32[$16 >> 2] | 0;
  if (($78 | 0) > 0) {
   $$2299374 = 0;
   do {
    $80 = $0 + ($$2299374 * 4264 | 0) + 2392 | 0;
    $82 = (HEAP32[$80 >> 2] | 0) > 0;
    $83 = _ec_dec_bit_logp($4, 1) | 0;
    if ($82) {
     $$0295369 = 0;
     $85 = $83;
     while (1) {
      HEAP32[$0 + ($$2299374 * 4264 | 0) + 2404 + ($$0295369 << 2) >> 2] = $85;
      $$0295369 = $$0295369 + 1 | 0;
      $88 = ($$0295369 | 0) < (HEAP32[$80 >> 2] | 0);
      $89 = _ec_dec_bit_logp($4, 1) | 0;
      if (!$88) {
       $$lcssa327 = $89;
       break;
      } else $85 = $89;
     }
    } else $$lcssa327 = $83;
    HEAP32[$0 + ($$2299374 * 4264 | 0) + 2416 >> 2] = $$lcssa327;
    $$2299374 = $$2299374 + 1 | 0;
    $92 = HEAP32[$16 >> 2] | 0;
   } while (($$2299374 | 0) < ($92 | 0));
   if (($92 | 0) > 0) {
    $$3300362 = 0;
    do {
     $95 = $0 + ($$3300362 * 4264 | 0) + 2420 | 0;
     HEAP32[$95 >> 2] = 0;
     HEAP32[$95 + 4 >> 2] = 0;
     HEAP32[$95 + 8 >> 2] = 0;
     do if (HEAP32[$0 + ($$3300362 * 4264 | 0) + 2416 >> 2] | 0) {
      $99 = $0 + ($$3300362 * 4264 | 0) + 2392 | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if (($100 | 0) == 1) {
       HEAP32[$95 >> 2] = 1;
       break;
      }
      $106 = (_ec_dec_icdf($4, HEAP32[39276 + ($100 + -2 << 2) >> 2] | 0, 8) | 0) + 1 | 0;
      $107 = HEAP32[$99 >> 2] | 0;
      if (($107 | 0) > 0) {
       $$1359 = 0;
       do {
        HEAP32[$0 + ($$3300362 * 4264 | 0) + 2420 + ($$1359 << 2) >> 2] = $106 >>> $$1359 & 1;
        $$1359 = $$1359 + 1 | 0;
       } while (($$1359 | 0) != ($107 | 0));
      }
     } while (0);
     $$3300362 = $$3300362 + 1 | 0;
     $114 = HEAP32[$16 >> 2] | 0;
    } while (($$3300362 | 0) < ($114 | 0));
    $$lcssa326 = $114;
   } else $$lcssa326 = $92;
  } else $$lcssa326 = $78;
  if (!$2) {
   $117 = $0 + 2392 | 0;
   if ((HEAP32[$117 >> 2] | 0) > 0) {
    $120 = $0 + 6684 | 0;
    $$2354 = 0;
    $121 = $$lcssa326;
    while (1) {
     L70 : do if (($121 | 0) > 0) {
      $123 = $120 + ($$2354 << 2) | 0;
      $125 = $$2354 + -1 | 0;
      if (!$$2354) {
       $$4301349$us = 0;
       $130 = $121;
       while (1) {
        $126 = $0 + ($$4301349$us * 4264 | 0) | 0;
        if (!(HEAP32[$0 + ($$4301349$us * 4264 | 0) + 2420 >> 2] | 0)) $145 = $130; else {
         do if (($$4301349$us | 0) == 0 & ($130 | 0) == 2) {
          _silk_stereo_decode_pred($4, $10);
          if (HEAP32[$123 >> 2] | 0) break;
          _silk_stereo_decode_mid_only($4, $7);
         } while (0);
         _silk_decode_indices($126, $4, 0, 1, 0);
         _silk_decode_pulses($4, $11, HEAP8[$0 + ($$4301349$us * 4264 | 0) + 2765 >> 0] | 0, HEAP8[$0 + ($$4301349$us * 4264 | 0) + 2766 >> 0] | 0, HEAP32[$0 + ($$4301349$us * 4264 | 0) + 2328 >> 2] | 0);
         $145 = HEAP32[$16 >> 2] | 0;
        }
        $$4301349$us = $$4301349$us + 1 | 0;
        if (($$4301349$us | 0) >= ($145 | 0)) {
         $404 = $145;
         break L70;
        } else $130 = $145;
       }
      }
      $$4301349 = 0;
      $150 = $121;
      while (1) {
       $146 = $0 + ($$4301349 * 4264 | 0) | 0;
       if (!(HEAP32[$0 + ($$4301349 * 4264 | 0) + 2420 + ($$2354 << 2) >> 2] | 0)) $168 = $150; else {
        do if (($$4301349 | 0) == 0 & ($150 | 0) == 2) {
         _silk_stereo_decode_pred($4, $10);
         if (HEAP32[$123 >> 2] | 0) break;
         _silk_stereo_decode_mid_only($4, $7);
        } while (0);
        if (!(HEAP32[$0 + ($$4301349 * 4264 | 0) + 2420 + ($125 << 2) >> 2] | 0)) _silk_decode_indices($146, $4, $$2354, 1, 0); else _silk_decode_indices($146, $4, $$2354, 1, 2);
        _silk_decode_pulses($4, $11, HEAP8[$0 + ($$4301349 * 4264 | 0) + 2765 >> 0] | 0, HEAP8[$0 + ($$4301349 * 4264 | 0) + 2766 >> 0] | 0, HEAP32[$0 + ($$4301349 * 4264 | 0) + 2328 >> 2] | 0);
        $168 = HEAP32[$16 >> 2] | 0;
       }
       $$4301349 = $$4301349 + 1 | 0;
       if (($$4301349 | 0) >= ($168 | 0)) {
        $404 = $168;
        break;
       } else $150 = $168;
      }
     } else $404 = $121; while (0);
     $$2354 = $$2354 + 1 | 0;
     if (($$2354 | 0) >= (HEAP32[$117 >> 2] | 0)) {
      label = 67;
      break;
     } else $121 = $404;
    }
   } else label = 67;
  } else $172 = $$lcssa326;
 } else label = 67;
 if ((label | 0) == 67) $172 = HEAP32[$16 >> 2] | 0;
 do if (($172 | 0) == 2) {
  switch ($2 | 0) {
  case 0:
   {
    _silk_stereo_decode_pred($4, $10);
    if (!(HEAP32[$0 + 6668 + (HEAP32[$38 >> 2] << 2) >> 2] | 0)) label = 73; else label = 74;
    break;
   }
  case 2:
   {
    if ((HEAP32[$0 + 2420 + (HEAP32[$38 >> 2] << 2) >> 2] | 0) == 1) {
     _silk_stereo_decode_pred($4, $10);
     if (!(HEAP32[$0 + 6684 + (HEAP32[$38 >> 2] << 2) >> 2] | 0)) label = 73; else label = 74;
    } else label = 75;
    break;
   }
  default:
   label = 75;
  }
  if ((label | 0) == 73) {
   _silk_stereo_decode_mid_only($4, $7);
   break;
  } else if ((label | 0) == 74) {
   HEAP32[$7 >> 2] = 0;
   break;
  } else if ((label | 0) == 75) {
   HEAP32[$10 >> 2] = HEAP16[$0 + 8528 >> 1];
   HEAP32[$10 + 4 >> 2] = HEAP16[$0 + 8530 >> 1];
   break;
  }
 } while (0);
 $196 = HEAP32[$16 >> 2] | 0;
 $198 = HEAP32[$7 >> 2] | 0;
 $199 = ($198 | 0) == 0;
 if (($196 | 0) == 2 & $199) if ((HEAP32[$0 + 8548 >> 2] | 0) == 1) {
  _memset($0 + 5548 | 0, 0, 1024) | 0;
  HEAP32[$0 + 6572 >> 2] = 100;
  HEAP8[$0 + 6576 >> 0] = 10;
  HEAP32[$0 + 8428 >> 2] = 0;
  HEAP32[$0 + 6640 >> 2] = 1;
  $211 = HEAP32[$16 >> 2] | 0;
 } else $211 = 2; else $211 = $196;
 $210 = Math_imul($211, HEAP32[$1 + 12 >> 2] | 0) | 0;
 $215 = ($210 | 0) < (Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$72 >> 2] | 0) | 0);
 if ($215) {
  $216 = _llvm_stacksave() | 0;
  HEAP32[$9 >> 2] = $5;
  $$in = $5;
  $$sink451 = $0 + 2328 | 0;
  $304 = $9;
  $402 = $216;
 } else {
  $218 = $0 + 2328 | 0;
  $221 = Math_imul((HEAP32[$218 >> 2] | 0) + 2 | 0, $211) | 0;
  $222 = _llvm_stacksave() | 0;
  $223 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($221 << 1) | 0) + 15 & -16) | 0;
  HEAP32[$9 >> 2] = $223;
  $$in = $223;
  $$sink451 = $218;
  $304 = $9;
  $402 = $222;
 }
 $226 = $9 + 4 | 0;
 HEAP32[$226 >> 2] = $$in + (HEAP32[$$sink451 >> 2] << 1) + 4;
 if (!$2) {
  $$0312$in$ph = $199;
  label = 86;
 } else if (!(HEAP32[$0 + 8548 >> 2] | 0)) {
  $$0312$in$ph = 1;
  label = 86;
 } else {
  $231 = HEAP32[$16 >> 2] | 0;
  if (($2 | 0) == 2 & ($231 | 0) == 2) {
   $$0312$in$ph = (HEAP32[$0 + 6684 + (HEAP32[$0 + 6652 >> 2] << 2) >> 2] | 0) == 1;
   label = 86;
  } else {
   $$0312$in = 0;
   $240 = $231;
  }
 }
 if ((label | 0) == 86) {
  $$0312$in = $$0312$in$ph;
  $240 = HEAP32[$16 >> 2] | 0;
 }
 do if (($240 | 0) > 0) {
  $242 = ($2 | 0) == 2;
  $243 = $0 + 8548 | 0;
  L129 : do if ($$0312$in) {
   $$6303341$us = 0;
   do {
    $244 = ($$6303341$us | 0) == 0;
    $246 = (HEAP32[$38 >> 2] | 0) - $$6303341$us | 0;
    do if (($246 | 0) < 1) $$0$us = 0; else {
     if ($242) {
      $$0$us = (HEAP32[$0 + ($$6303341$us * 4264 | 0) + 2420 + ($246 + -1 << 2) >> 2] | 0) == 0 ? 0 : 2;
      break;
     }
     if (!$244) if (HEAP32[$243 >> 2] | 0) {
      $$0$us = 1;
      break;
     }
     $$0$us = 2;
    } while (0);
    _silk_decode_frame($0 + ($$6303341$us * 4264 | 0) | 0, $4, (HEAP32[$9 + ($$6303341$us << 2) >> 2] | 0) + 4 | 0, $8, $2, $$0$us);
    $259 = $0 + ($$6303341$us * 4264 | 0) + 2388 | 0;
    HEAP32[$259 >> 2] = (HEAP32[$259 >> 2] | 0) + 1;
    $$6303341$us = $$6303341$us + 1 | 0;
    $263 = HEAP32[$16 >> 2] | 0;
   } while (($$6303341$us | 0) < ($263 | 0));
   $$lcssa325 = $263;
  } else {
   $265 = $$in + 4 | 0;
   if (!$242) {
    $$6303341 = 0;
    while (1) {
     if (!$$6303341) _silk_decode_frame($0, $4, $265, $8, $2, (HEAP32[$38 >> 2] | 0) > 0 ? 2 : 0); else _memset((HEAP32[$9 + ($$6303341 << 2) >> 2] | 0) + 4 | 0, 0, HEAP32[$8 >> 2] << 1 | 0) | 0;
     $293 = $0 + ($$6303341 * 4264 | 0) + 2388 | 0;
     HEAP32[$293 >> 2] = (HEAP32[$293 >> 2] | 0) + 1;
     $$6303341 = $$6303341 + 1 | 0;
     $297 = HEAP32[$16 >> 2] | 0;
     if (($$6303341 | 0) >= ($297 | 0)) {
      $$lcssa325 = $297;
      break L129;
     }
    }
   }
   $$6303341$us346 = 0;
   do {
    if (!$$6303341$us346) {
     $272 = HEAP32[$38 >> 2] | 0;
     if (($272 | 0) < 1) $$0$us347 = 0; else $$0$us347 = (HEAP32[$0 + 2420 + ($272 + -1 << 2) >> 2] | 0) == 0 ? 0 : 2;
     _silk_decode_frame($0, $4, $265, $8, 2, $$0$us347);
    } else _memset((HEAP32[$9 + ($$6303341$us346 << 2) >> 2] | 0) + 4 | 0, 0, HEAP32[$8 >> 2] << 1 | 0) | 0;
    $279 = $0 + ($$6303341$us346 * 4264 | 0) + 2388 | 0;
    HEAP32[$279 >> 2] = (HEAP32[$279 >> 2] | 0) + 1;
    $$6303341$us346 = $$6303341$us346 + 1 | 0;
    $283 = HEAP32[$16 >> 2] | 0;
   } while (($$6303341$us346 | 0) < ($283 | 0));
   $$lcssa325 = $283;
  } while (0);
  if (($$lcssa325 | 0) == 2 & (HEAP32[$1 >> 2] | 0) == 2) {
   $303 = HEAP32[$304 >> 2] | 0;
   $306 = $0 + 2316 | 0;
   $308 = HEAP32[$8 >> 2] | 0;
   _silk_stereo_MS_to_LR($0 + 8528 | 0, $303, HEAP32[$226 >> 2] | 0, $10, HEAP32[$306 >> 2] | 0, $308);
   $$pre$phi409Z2D = $306;
   $318 = $308;
   $405 = $303;
   break;
  } else {
   $$pre18 = HEAP32[$9 >> 2] | 0;
   $311 = $$pre18;
   $314 = $$pre18;
   label = 113;
   break;
  }
 } else {
  $311 = $$in;
  $314 = $$in;
  label = 113;
 } while (0);
 if ((label | 0) == 113) {
  $309 = $0 + 8532 | 0;
  $310 = HEAPU16[$309 >> 1] | HEAPU16[$309 + 2 >> 1] << 16;
  HEAP16[$311 >> 1] = $310;
  HEAP16[$311 + 2 >> 1] = $310 >>> 16;
  $312 = HEAP32[$8 >> 2] | 0;
  $313 = $314 + ($312 << 1) | 0;
  $315 = HEAPU16[$313 >> 1] | HEAPU16[$313 + 2 >> 1] << 16;
  HEAP16[$309 >> 1] = $315;
  HEAP16[$309 + 2 >> 1] = $315 >>> 16;
  $$pre$phi409Z2D = $0 + 2316 | 0;
  $318 = $312;
  $405 = $314;
 }
 $317 = Math_imul(HEAP32[$72 >> 2] | 0, $318) | 0;
 $322 = ($317 | 0) / ((HEAP32[$$pre$phi409Z2D >> 2] << 16 >> 16) * 1e3 | 0) | 0;
 HEAP32[$6 >> 2] = $322;
 $323 = HEAP32[$1 >> 2] | 0;
 if (($323 | 0) == 2) {
  $325 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($322 << 1) | 0) + 15 & -16) | 0;
  $$0311 = $325;
 } else $$0311 = $5;
 $326 = HEAP32[$16 >> 2] | 0;
 if ($215) {
  $328 = HEAP32[$0 + 2328 >> 2] | 0;
  $329 = $328 + 2 | 0;
  $$alloca_mul8 = (Math_imul($329, $326) | 0) << 1;
  $331 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $$alloca_mul8 | 0) + 15 & -16) | 0;
  _memcpy($331 | 0, $5 | 0, Math_imul($326 << 1, $329) | 0) | 0;
  HEAP32[$304 >> 2] = $331;
  HEAP32[$226 >> 2] = $331 + ($328 << 1) + 4;
  $406 = $331;
 } else $406 = $405;
 L174 : do if (((($323 | 0) < ($326 | 0) ? $323 : $326) | 0) > 0) {
  $$7336 = 0;
  $340 = $406;
  while (1) {
   _silk_resampler($0 + ($$7336 * 4264 | 0) + 2432 | 0, $$0311, $340 + 2 | 0, $318);
   $341 = HEAP32[$1 >> 2] | 0;
   do if (($341 | 0) == 2) {
    if ((HEAP32[$6 >> 2] | 0) <= 0) {
     $355 = 2;
     break;
    }
    $$3333 = 0;
    do {
     HEAP16[$5 + (($$3333 << 1) + $$7336 << 1) >> 1] = HEAP16[$$0311 + ($$3333 << 1) >> 1] | 0;
     $$3333 = $$3333 + 1 | 0;
    } while (($$3333 | 0) < (HEAP32[$6 >> 2] | 0));
    $355 = HEAP32[$1 >> 2] | 0;
   } else $355 = $341; while (0);
   $353 = $$7336 + 1 | 0;
   $354 = HEAP32[$16 >> 2] | 0;
   if (($353 | 0) >= ((($355 | 0) < ($354 | 0) ? $355 : $354) | 0)) {
    $$lcssa = $354;
    $$lcssa324 = $355;
    break L174;
   }
   $$7336 = $353;
   $340 = HEAP32[$9 + ($353 << 2) >> 2] | 0;
  }
 } else {
  $$lcssa = $326;
  $$lcssa324 = $323;
 } while (0);
 do if (($$lcssa324 | 0) == 2 & ($$lcssa | 0) == 1) if ($403) {
  _silk_resampler($0 + 6696 | 0, $$0311, (HEAP32[$304 >> 2] | 0) + 2 | 0, $318);
  if ((HEAP32[$6 >> 2] | 0) <= 0) break;
  $$4329 = 0;
  do {
   HEAP16[$5 + (($$4329 << 1 | 1) << 1) >> 1] = HEAP16[$$0311 + ($$4329 << 1) >> 1] | 0;
   $$4329 = $$4329 + 1 | 0;
  } while (($$4329 | 0) < (HEAP32[$6 >> 2] | 0));
 } else {
  if ((HEAP32[$6 >> 2] | 0) <= 0) break;
  $$5331 = 0;
  do {
   $375 = $$5331 << 1;
   HEAP16[$5 + (($375 | 1) << 1) >> 1] = HEAP16[$5 + ($375 << 1) >> 1] | 0;
   $$5331 = $$5331 + 1 | 0;
  } while (($$5331 | 0) < (HEAP32[$6 >> 2] | 0));
 } while (0);
 if ((HEAP32[$0 + 4164 >> 2] | 0) == 2) $$sink397 = Math_imul(HEAP32[39160 + ((HEAP32[$$pre$phi409Z2D >> 2] | 0) + -8 >> 2 << 2) >> 2] | 0, HEAP32[$0 + 2308 >> 2] | 0) | 0; else $$sink397 = 0;
 HEAP32[$1 + 20 >> 2] = $$sink397;
 do if ($75) {
  if ((HEAP32[$23 >> 2] | 0) <= 0) break;
  $$6328 = 0;
  do {
   HEAP8[$0 + ($$6328 * 4264 | 0) + 2312 >> 0] = 10;
   $$6328 = $$6328 + 1 | 0;
  } while (($$6328 | 0) < (HEAP32[$23 >> 2] | 0));
 } else HEAP32[$0 + 8548 >> 2] = $198; while (0);
 _llvm_stackrestore($402 | 0);
 $$0294 = 0;
 STACKTOP = sp;
 return $$0294 | 0;
}

function _celt_decode_lost($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$0307343$us = 0, $$0312$lcssa = 0, $$0312337$us = 0, $$0315$lcssa = 0.0, $$0315366 = 0.0, $$0316329$us = 0, $$0317 = 0.0, $$0318 = 0, $$0319$lcssa = 0.0, $$0319350 = 0.0, $$0320$lcssa = 0.0, $$0320349 = 0.0, $$0321359 = 0, $$0323358 = 0.0, $$0325$lcssa = 0.0, $$0325357 = 0.0, $$1$us = 0, $$10379 = 0, $$11$neg383 = 0, $$11382 = 0, $$1308332$us = 0, $$1313331$us = 0, $$1322 = 0, $$2309347 = 0, $$2314$lcssa$us = 0, $$2314330$us = 0, $$2338$us = 0, $$3 = 0, $$4 = 0, $$4311351 = 0, $$5360 = 0, $$7367 = 0, $$9375 = 0, $$pre$phi407Z2D = 0, $10 = 0, $104 = 0, $105 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $220 = 0.0, $223 = 0.0, $228 = 0.0, $233 = 0.0, $238 = 0.0, $243 = 0.0, $248 = 0.0, $253 = 0.0, $258 = 0.0, $263 = 0.0, $268 = 0.0, $273 = 0.0, $278 = 0.0, $28 = 0, $283 = 0.0, $288 = 0.0, $293 = 0.0, $298 = 0.0, $3 = 0, $30 = 0, $303 = 0.0, $308 = 0.0, $31 = 0, $313 = 0.0, $318 = 0.0, $323 = 0.0, $328 = 0.0, $333 = 0.0, $339 = 0, $34 = 0, $342 = 0.0, $344 = 0.0, $347 = 0.0, $349 = 0.0, $35 = 0, $355 = 0.0, $358 = 0, $36 = 0, $361 = 0, $370 = 0.0, $372 = 0.0, $38 = 0, $4 = 0, $423 = 0, $424 = 0, $427 = 0.0, $429 = 0.0, $437 = 0.0, $438 = 0.0, $444 = 0, $449 = 0, $45 = 0, $454 = 0, $456 = 0.0, $457 = 0, $460 = 0, $47 = 0, $472 = 0, $475 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0.0, $56 = 0, $57 = 0, $59 = 0.0, $6 = 0, $60 = 0, $62 = 0.0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $86 = 0, $96 = 0, $98 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4416 | 0;
 $3 = 0 - $1 | 0;
 $4 = sp + 4408 | 0;
 $5 = sp + 4400 | 0;
 $6 = sp + 208 | 0;
 $7 = sp + 96 | 0;
 $8 = sp;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$11 + 8 >> 2] | 0;
 $15 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = HEAP32[$11 + 32 >> 2] | 0;
 $18 = $15 + 2048 | 0;
 $$0 = 0;
 do {
  $20 = $0 + 92 + ((Math_imul($$0, $18) | 0) << 2) | 0;
  HEAP32[$4 + ($$0 << 2) >> 2] = $20;
  HEAP32[$5 + ($$0 << 2) >> 2] = $20 + 8192 + ($3 << 2);
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($10 | 0));
 $28 = $0 + 92 + ((Math_imul($18, $10) | 0) << 2) | 0;
 $30 = $28 + ($10 * 24 << 2) | 0;
 $31 = $13 << 1;
 $34 = $30 + ($31 << 2) + ($31 << 2) + ($31 << 2) | 0;
 $35 = $0 + 52 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 $38 = HEAP32[$0 + 20 >> 2] | 0;
 if (!(($36 | 0) > 4 | ($38 | 0) != 0)) if (!(HEAP32[$0 + 56 >> 2] | 0)) {
  $104 = ($36 | 0) == 0;
  if ($104) {
   $105 = _celt_plc_pitch_search($4, $10) | 0;
   HEAP32[$0 + 48 >> 2] = $105;
   $$0317 = 1.0;
   $$0318 = $105;
  } else {
   $$0317 = .800000011920929;
   $$0318 = HEAP32[$0 + 48 >> 2] | 0;
  }
  $109 = $$0318 << 1;
  $111 = ($109 | 0) < 1024 ? $109 : 1024;
  $113 = _llvm_stacksave() | 0;
  $114 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
  $115 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($111 << 2) | 0) + 15 & -16) | 0;
  $116 = $6 + 96 | 0;
  $118 = HEAP32[$11 + 60 >> 2] | 0;
  $120 = $6 + 4192 + (0 - $111 << 2) | 0;
  $121 = $111 << 2;
  $122 = $111 >> 1;
  $123 = ($$0318 | 0) > 0;
  $124 = 2048 - $1 | 0;
  $125 = $124 << 2;
  $126 = 1024 - $$0318 | 0;
  $127 = $15 + $1 | 0;
  $128 = ($127 | 0) > 0;
  $129 = 1024 - $122 | 0;
  $130 = 1024 - $111 | 0;
  $131 = $124 + -1 | 0;
  $132 = $0 + 60 | 0;
  $133 = $0 + 68 | 0;
  $134 = $0 + 76 | 0;
  $135 = ($15 | 0) / 2 | 0;
  $136 = ($15 | 0) > 1;
  $137 = ($15 | 0) > 0;
  $138 = $15 + -1 | 0;
  $139 = ($1 | 0) > 0;
  $140 = $127 << 2;
  $141 = $7 + 4 | 0;
  $142 = $7 + 8 | 0;
  $143 = $7 + 12 | 0;
  $144 = $7 + 16 | 0;
  $145 = $7 + 20 | 0;
  $146 = $7 + 24 | 0;
  $147 = $7 + 28 | 0;
  $148 = $7 + 32 | 0;
  $149 = $7 + 36 | 0;
  $150 = $7 + 40 | 0;
  $151 = $7 + 44 | 0;
  $152 = $7 + 48 | 0;
  $153 = $7 + 52 | 0;
  $154 = $7 + 56 | 0;
  $155 = $7 + 60 | 0;
  $156 = $7 + 64 | 0;
  $157 = $7 + 68 | 0;
  $158 = $7 + 72 | 0;
  $159 = $7 + 76 | 0;
  $160 = $7 + 80 | 0;
  $161 = $7 + 84 | 0;
  $162 = $7 + 88 | 0;
  $163 = $7 + 92 | 0;
  $164 = $7 + 96 | 0;
  $165 = $124 + -2 | 0;
  $166 = $8 + 4 | 0;
  $167 = $124 + -3 | 0;
  $168 = $8 + 8 | 0;
  $169 = $124 + -4 | 0;
  $170 = $8 + 12 | 0;
  $171 = $124 + -5 | 0;
  $172 = $8 + 16 | 0;
  $173 = $124 + -6 | 0;
  $174 = $8 + 20 | 0;
  $175 = $124 + -7 | 0;
  $176 = $8 + 24 | 0;
  $177 = $124 + -8 | 0;
  $178 = $8 + 28 | 0;
  $179 = $124 + -9 | 0;
  $180 = $8 + 32 | 0;
  $181 = $124 + -10 | 0;
  $182 = $8 + 36 | 0;
  $183 = $124 + -11 | 0;
  $184 = $8 + 40 | 0;
  $185 = $124 + -12 | 0;
  $186 = $8 + 44 | 0;
  $187 = $124 + -13 | 0;
  $188 = $8 + 48 | 0;
  $189 = $124 + -14 | 0;
  $190 = $8 + 52 | 0;
  $191 = $124 + -15 | 0;
  $192 = $8 + 56 | 0;
  $193 = $124 + -16 | 0;
  $194 = $8 + 60 | 0;
  $195 = $124 + -17 | 0;
  $196 = $8 + 64 | 0;
  $197 = $124 + -18 | 0;
  $198 = $8 + 68 | 0;
  $199 = $124 + -19 | 0;
  $200 = $8 + 72 | 0;
  $201 = $124 + -20 | 0;
  $202 = $8 + 76 | 0;
  $203 = $124 + -21 | 0;
  $204 = $8 + 80 | 0;
  $205 = $124 + -22 | 0;
  $206 = $8 + 84 | 0;
  $207 = $124 + -23 | 0;
  $208 = $8 + 88 | 0;
  $209 = $124 + -24 | 0;
  $210 = $8 + 92 | 0;
  $$4 = 0;
  do {
   $212 = HEAP32[$4 + ($$4 << 2) >> 2] | 0;
   $$2309347 = 0;
   do {
    HEAP32[$6 + ($$2309347 << 2) >> 2] = HEAP32[$212 + ($$2309347 + 1e3 << 2) >> 2];
    $$2309347 = $$2309347 + 1 | 0;
   } while (($$2309347 | 0) != 1048);
   if ($104) {
    __celt_autocorr($116, $7, $118, $15, 24, 1024);
    HEAPF32[$7 >> 2] = +HEAPF32[$7 >> 2] * 1.000100016593933;
    $220 = +HEAPF32[$141 >> 2];
    HEAPF32[$141 >> 2] = $220 - $220 * 6.400000711437315e-05;
    $223 = +HEAPF32[$142 >> 2];
    HEAPF32[$142 >> 2] = $223 - $223 * 6.400000711437315e-05 * 2.0 * 2.0;
    $228 = +HEAPF32[$143 >> 2];
    HEAPF32[$143 >> 2] = $228 - $228 * 6.400000711437315e-05 * 3.0 * 3.0;
    $233 = +HEAPF32[$144 >> 2];
    HEAPF32[$144 >> 2] = $233 - $233 * 6.400000711437315e-05 * 4.0 * 4.0;
    $238 = +HEAPF32[$145 >> 2];
    HEAPF32[$145 >> 2] = $238 - $238 * 6.400000711437315e-05 * 5.0 * 5.0;
    $243 = +HEAPF32[$146 >> 2];
    HEAPF32[$146 >> 2] = $243 - $243 * 6.400000711437315e-05 * 6.0 * 6.0;
    $248 = +HEAPF32[$147 >> 2];
    HEAPF32[$147 >> 2] = $248 - $248 * 6.400000711437315e-05 * 7.0 * 7.0;
    $253 = +HEAPF32[$148 >> 2];
    HEAPF32[$148 >> 2] = $253 - $253 * 6.400000711437315e-05 * 8.0 * 8.0;
    $258 = +HEAPF32[$149 >> 2];
    HEAPF32[$149 >> 2] = $258 - $258 * 6.400000711437315e-05 * 9.0 * 9.0;
    $263 = +HEAPF32[$150 >> 2];
    HEAPF32[$150 >> 2] = $263 - $263 * 6.400000711437315e-05 * 10.0 * 10.0;
    $268 = +HEAPF32[$151 >> 2];
    HEAPF32[$151 >> 2] = $268 - $268 * 6.400000711437315e-05 * 11.0 * 11.0;
    $273 = +HEAPF32[$152 >> 2];
    HEAPF32[$152 >> 2] = $273 - $273 * 6.400000711437315e-05 * 12.0 * 12.0;
    $278 = +HEAPF32[$153 >> 2];
    HEAPF32[$153 >> 2] = $278 - $278 * 6.400000711437315e-05 * 13.0 * 13.0;
    $283 = +HEAPF32[$154 >> 2];
    HEAPF32[$154 >> 2] = $283 - $283 * 6.400000711437315e-05 * 14.0 * 14.0;
    $288 = +HEAPF32[$155 >> 2];
    HEAPF32[$155 >> 2] = $288 - $288 * 6.400000711437315e-05 * 15.0 * 15.0;
    $293 = +HEAPF32[$156 >> 2];
    HEAPF32[$156 >> 2] = $293 - $293 * 6.400000711437315e-05 * 16.0 * 16.0;
    $298 = +HEAPF32[$157 >> 2];
    HEAPF32[$157 >> 2] = $298 - $298 * 6.400000711437315e-05 * 17.0 * 17.0;
    $303 = +HEAPF32[$158 >> 2];
    HEAPF32[$158 >> 2] = $303 - $303 * 6.400000711437315e-05 * 18.0 * 18.0;
    $308 = +HEAPF32[$159 >> 2];
    HEAPF32[$159 >> 2] = $308 - $308 * 6.400000711437315e-05 * 19.0 * 19.0;
    $313 = +HEAPF32[$160 >> 2];
    HEAPF32[$160 >> 2] = $313 - $313 * 6.400000711437315e-05 * 20.0 * 20.0;
    $318 = +HEAPF32[$161 >> 2];
    HEAPF32[$161 >> 2] = $318 - $318 * 6.400000711437315e-05 * 21.0 * 21.0;
    $323 = +HEAPF32[$162 >> 2];
    HEAPF32[$162 >> 2] = $323 - $323 * 6.400000711437315e-05 * 22.0 * 22.0;
    $328 = +HEAPF32[$163 >> 2];
    HEAPF32[$163 >> 2] = $328 - $328 * 6.400000711437315e-05 * 23.0 * 23.0;
    $333 = +HEAPF32[$164 >> 2];
    HEAPF32[$164 >> 2] = $333 - $333 * 6.400000711437315e-05 * 24.0 * 24.0;
    $339 = $28 + ($$4 * 24 << 2) | 0;
    __celt_lpc($339, $7, 24);
    $$pre$phi407Z2D = $339;
   } else $$pre$phi407Z2D = $28 + ($$4 * 24 << 2) | 0;
   _celt_fir_c($120, $$pre$phi407Z2D, $115, $111);
   _memcpy($120 | 0, $115 | 0, $121 | 0) | 0;
   if ($123) {
    $$0319350 = 1.0;
    $$0320349 = 1.0;
    $$4311351 = 0;
    while (1) {
     $342 = +HEAPF32[$116 + ($129 + $$4311351 << 2) >> 2];
     $344 = $$0320349 + $342 * $342;
     $347 = +HEAPF32[$116 + ($130 + $$4311351 << 2) >> 2];
     $349 = $$0319350 + $347 * $347;
     $$4311351 = $$4311351 + 1 | 0;
     if (($$4311351 | 0) >= ($122 | 0)) {
      $$0319$lcssa = $349;
      $$0320$lcssa = $344;
      break;
     } else {
      $$0319350 = $349;
      $$0320349 = $344;
     }
    }
   } else {
    $$0319$lcssa = 1.0;
    $$0320$lcssa = 1.0;
   }
   $355 = +Math_sqrt(+(($$0320$lcssa < $$0319$lcssa ? $$0320$lcssa : $$0319$lcssa) / $$0319$lcssa));
   _memmove($212 | 0, $212 + ($1 << 2) | 0, $125 | 0) | 0;
   if ($128) {
    $$0321359 = 0;
    $$0323358 = $$0317 * $355;
    $$0325357 = 0.0;
    $$5360 = 0;
    while (1) {
     $358 = ($$0321359 | 0) < ($$0318 | 0);
     $$0323358 = $358 ? $$0323358 : $355 * $$0323358;
     $$1322 = $$0321359 - ($358 ? 0 : $$0318) | 0;
     $361 = $$1322 + $126 | 0;
     HEAPF32[$212 + ($$5360 + $124 << 2) >> 2] = $$0323358 * +HEAPF32[$116 + ($361 << 2) >> 2];
     $370 = +HEAPF32[$212 + ($361 + 1024 - $1 << 2) >> 2];
     $372 = $$0325357 + $370 * $370;
     $$5360 = $$5360 + 1 | 0;
     if (($$5360 | 0) == ($127 | 0)) {
      $$0325$lcssa = $372;
      break;
     } else {
      $$0321359 = $$1322 + 1 | 0;
      $$0325357 = $372;
     }
    }
   } else $$0325$lcssa = 0.0;
   HEAP32[$8 >> 2] = HEAP32[$212 + ($131 << 2) >> 2];
   HEAP32[$166 >> 2] = HEAP32[$212 + ($165 << 2) >> 2];
   HEAP32[$168 >> 2] = HEAP32[$212 + ($167 << 2) >> 2];
   HEAP32[$170 >> 2] = HEAP32[$212 + ($169 << 2) >> 2];
   HEAP32[$172 >> 2] = HEAP32[$212 + ($171 << 2) >> 2];
   HEAP32[$174 >> 2] = HEAP32[$212 + ($173 << 2) >> 2];
   HEAP32[$176 >> 2] = HEAP32[$212 + ($175 << 2) >> 2];
   HEAP32[$178 >> 2] = HEAP32[$212 + ($177 << 2) >> 2];
   HEAP32[$180 >> 2] = HEAP32[$212 + ($179 << 2) >> 2];
   HEAP32[$182 >> 2] = HEAP32[$212 + ($181 << 2) >> 2];
   HEAP32[$184 >> 2] = HEAP32[$212 + ($183 << 2) >> 2];
   HEAP32[$186 >> 2] = HEAP32[$212 + ($185 << 2) >> 2];
   HEAP32[$188 >> 2] = HEAP32[$212 + ($187 << 2) >> 2];
   HEAP32[$190 >> 2] = HEAP32[$212 + ($189 << 2) >> 2];
   HEAP32[$192 >> 2] = HEAP32[$212 + ($191 << 2) >> 2];
   HEAP32[$194 >> 2] = HEAP32[$212 + ($193 << 2) >> 2];
   HEAP32[$196 >> 2] = HEAP32[$212 + ($195 << 2) >> 2];
   HEAP32[$198 >> 2] = HEAP32[$212 + ($197 << 2) >> 2];
   HEAP32[$200 >> 2] = HEAP32[$212 + ($199 << 2) >> 2];
   HEAP32[$202 >> 2] = HEAP32[$212 + ($201 << 2) >> 2];
   HEAP32[$204 >> 2] = HEAP32[$212 + ($203 << 2) >> 2];
   HEAP32[$206 >> 2] = HEAP32[$212 + ($205 << 2) >> 2];
   HEAP32[$208 >> 2] = HEAP32[$212 + ($207 << 2) >> 2];
   HEAP32[$210 >> 2] = HEAP32[$212 + ($209 << 2) >> 2];
   $423 = $212 + 8192 | 0;
   $424 = $423 + ($3 << 2) | 0;
   _celt_iir($424, $$pre$phi407Z2D, $424, $127, $8);
   if ($128) {
    $$0315366 = 0.0;
    $$7367 = 0;
    while (1) {
     $427 = +HEAPF32[$212 + ($$7367 + $124 << 2) >> 2];
     $429 = $$0315366 + $427 * $427;
     $$7367 = $$7367 + 1 | 0;
     if (($$7367 | 0) == ($127 | 0)) {
      $$0315$lcssa = $429;
      break;
     } else $$0315366 = $429;
    }
   } else $$0315$lcssa = 0.0;
   if ($$0325$lcssa > $$0315$lcssa * .20000000298023224) {
    if ($$0325$lcssa < $$0315$lcssa) {
     $437 = +Math_sqrt(+(($$0325$lcssa + 1.0) / ($$0315$lcssa + 1.0)));
     if ($137) {
      $438 = 1.0 - $437;
      $$9375 = 0;
      do {
       $444 = $212 + ($$9375 + $124 << 2) | 0;
       HEAPF32[$444 >> 2] = +HEAPF32[$444 >> 2] * (1.0 - $438 * +HEAPF32[$118 + ($$9375 << 2) >> 2]);
       $$9375 = $$9375 + 1 | 0;
      } while (($$9375 | 0) != ($15 | 0));
     }
     if ($139) {
      $$10379 = $15;
      do {
       $449 = $212 + ($$10379 + $124 << 2) | 0;
       HEAPF32[$449 >> 2] = $437 * +HEAPF32[$449 >> 2];
       $$10379 = $$10379 + 1 | 0;
      } while (($$10379 | 0) < ($127 | 0));
     }
    }
   } else if ($128) _memset($212 + ($124 << 2) | 0, 0, $140 | 0) | 0;
   $454 = HEAP32[$132 >> 2] | 0;
   $456 = -+HEAPF32[$133 >> 2];
   $457 = HEAP32[$134 >> 2] | 0;
   _comb_filter($114, $423, $454, $454, $15, $456, $456, $457, $457, 0, 0);
   if ($136) {
    $$11$neg383 = 0;
    $$11382 = 0;
    while (1) {
     $460 = $138 + $$11$neg383 | 0;
     HEAPF32[$212 + ($$11382 + 2048 << 2) >> 2] = +HEAPF32[$118 + ($$11382 << 2) >> 2] * +HEAPF32[$114 + ($460 << 2) >> 2] + +HEAPF32[$118 + ($460 << 2) >> 2] * +HEAPF32[$114 + ($$11382 << 2) >> 2];
     $472 = $$11382 + 1 | 0;
     if (($472 | 0) == ($135 | 0)) break; else {
      $$11$neg383 = ~$$11382;
      $$11382 = $472;
     }
    }
   }
   $$4 = $$4 + 1 | 0;
  } while (($$4 | 0) < ($10 | 0));
  _llvm_stackrestore($113 | 0);
  $475 = $36 + 1 | 0;
  HEAP32[$35 >> 2] = $475;
  STACKTOP = sp;
  return;
 }
 $45 = HEAP32[$0 + 24 >> 2] | 0;
 $47 = HEAP32[$11 + 12 >> 2] | 0;
 $$ = ($45 | 0) < ($47 | 0) ? $45 : $47;
 $spec$select = ($38 | 0) > ($$ | 0) ? $38 : $$;
 $50 = Math_imul($10, $1) | 0;
 $51 = _llvm_stacksave() | 0;
 $52 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($50 << 2) | 0) + 15 & -16) | 0;
 $54 = ($36 | 0) == 0 ? 1.5 : .5;
 if (($38 | 0) < ($45 | 0)) {
  $$1$us = 0;
  do {
   $56 = Math_imul($$1$us, $13) | 0;
   $$0307343$us = $38;
   do {
    $57 = $$0307343$us + $56 | 0;
    $59 = +HEAPF32[$34 + ($57 << 2) >> 2];
    $60 = $30 + ($57 << 2) | 0;
    $62 = +HEAPF32[$60 >> 2] - $54;
    HEAPF32[$60 >> 2] = $59 > $62 ? $59 : $62;
    $$0307343$us = $$0307343$us + 1 | 0;
   } while (($$0307343$us | 0) != ($45 | 0));
   $$1$us = $$1$us + 1 | 0;
  } while (($$1$us | 0) < ($10 | 0));
 }
 $67 = $0 + 40 | 0;
 $68 = HEAP32[$67 >> 2] | 0;
 if (($10 | 0) > 0 & ($38 | 0) < ($$ | 0)) {
  $$0312337$us = $68;
  $$2338$us = 0;
  while (1) {
   $71 = Math_imul($$2338$us, $1) | 0;
   $$1308332$us = $38;
   $$1313331$us = $$0312337$us;
   while (1) {
    $74 = HEAP16[$17 + ($$1308332$us << 1) >> 1] | 0;
    $76 = ($74 << $2) + $71 | 0;
    $$1308332$us = $$1308332$us + 1 | 0;
    $82 = (HEAP16[$17 + ($$1308332$us << 1) >> 1] | 0) - $74 << $2;
    if (($82 | 0) > 0) {
     $$0316329$us = 0;
     $$2314330$us = $$1313331$us;
     while (1) {
      $86 = _celt_lcg_rand($$2314330$us) | 0;
      HEAPF32[$52 + ($$0316329$us + $76 << 2) >> 2] = +($86 >> 20 | 0);
      $$0316329$us = $$0316329$us + 1 | 0;
      if (($$0316329$us | 0) == ($82 | 0)) {
       $$2314$lcssa$us = $86;
       break;
      } else $$2314330$us = $86;
     }
    } else $$2314$lcssa$us = $$1313331$us;
    _renormalise_vector($52 + ($76 << 2) | 0, $82, 1.0);
    if (($$1308332$us | 0) >= ($spec$select | 0)) break; else $$1313331$us = $$2314$lcssa$us;
   }
   $$2338$us = $$2338$us + 1 | 0;
   if (($$2338$us | 0) == ($10 | 0)) {
    $$0312$lcssa = $$2314$lcssa$us;
    break;
   } else $$0312337$us = $$2314$lcssa$us;
  }
 } else $$0312$lcssa = $68;
 HEAP32[$67 >> 2] = $$0312$lcssa;
 $96 = 2048 - $1 + ($15 >>> 1) << 2;
 $$3 = 0;
 do {
  $98 = HEAP32[$4 + ($$3 << 2) >> 2] | 0;
  _memmove($98 | 0, $98 + ($1 << 2) | 0, $96 | 0) | 0;
  $$3 = $$3 + 1 | 0;
 } while (($$3 | 0) < ($10 | 0));
 _celt_synthesis($11, $52, $5, $30, $38, $spec$select, $10, $10, 0, $2, HEAP32[$0 + 16 >> 2] | 0, 0);
 _llvm_stackrestore($51 | 0);
 $475 = $36 + 1 | 0;
 HEAP32[$35 >> 2] = $475;
 STACKTOP = sp;
 return;
}

function _printf_core($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$in = 0, $$lcssa308 = 0, $$pre$phi49Z2D = 0, $$pre$phiZ2D = 0, $$pre363 = 0, $10 = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $141 = 0, $146 = 0, $147 = 0, $152 = 0, $155 = 0, $160 = 0, $161 = 0, $166 = 0, $173 = 0, $174 = 0, $18 = 0, $185 = 0, $19 = 0, $197 = 0, $204 = 0, $206 = 0, $209 = 0, $21 = 0, $211 = 0, $219 = 0, $22 = 0, $221 = 0, $224 = 0, $225 = 0, $229 = 0, $23 = 0, $233 = 0, $235 = 0, $238 = 0, $240 = 0, $241 = 0, $242 = 0, $25 = 0, $252 = 0, $253 = 0, $257 = 0, $259 = 0, $261 = 0, $267 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $294 = 0, $296 = 0, $297 = 0, $301 = 0, $304 = 0, $306 = 0, $317 = 0, $319 = 0, $326 = 0, $329 = 0, $334 = 0, $335 = 0, $336 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $or$cond = 0, $or$cond278 = 0, $spec$select = 0, $spec$select284 = 0, $storemerge273327 = 0, $storemerge274 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 40 | 0;
 $6 = sp;
 $7 = sp + 48 | 0;
 $8 = sp + 60 | 0;
 HEAP32[$4 >> 2] = 49660;
 $9 = ($0 | 0) != 0;
 $10 = $6 + 40 | 0;
 $11 = $10;
 $12 = $6 + 39 | 0;
 $13 = $7 + 4 | 0;
 $$0243$ph = 0;
 $$0247$ph = 0;
 $$0269$ph = 0;
 $334 = 49660;
 L1 : while (1) {
  $$0243 = $$0243$ph;
  $$0247 = $$0247$ph;
  $19 = $334;
  while (1) {
   do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
    HEAP32[12580] = 75;
    $$1248 = -1;
    break;
   } else {
    $$1248 = $$0243 + $$0247 | 0;
    break;
   } else $$1248 = $$0247; while (0);
   $18 = HEAP8[$19 >> 0] | 0;
   if (!($18 << 24 >> 24)) {
    label = 93;
    break L1;
   }
   $21 = $18;
   $23 = $19;
   L12 : while (1) {
    switch ($21 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0249$lcssa = $23;
      $37 = $23;
      break L12;
      break;
     }
    default:
     {}
    }
    $22 = $23 + 1 | 0;
    HEAP32[$4 >> 2] = $22;
    $21 = HEAP8[$22 >> 0] | 0;
    $23 = $22;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0249321 = $23;
    $25 = $23;
    while (1) {
     if ((HEAP8[$25 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249321;
      $37 = $25;
      break L15;
     }
     $28 = $$0249321 + 1 | 0;
     $29 = $25 + 2 | 0;
     HEAP32[$4 >> 2] = $29;
     if ((HEAP8[$29 >> 0] | 0) == 37) {
      $$0249321 = $28;
      $25 = $29;
     } else {
      $$0249$lcssa = $28;
      $37 = $29;
      break;
     }
    }
   } while (0);
   $$0243 = $$0249$lcssa - $19 | 0;
   if ($9) _out($0, $19, $$0243);
   if (!$$0243) break; else {
    $$0247 = $$1248;
    $19 = $37;
   }
  }
  $36 = $37 + 1 | 0;
  $39 = HEAP8[$36 >> 0] | 0;
  if (!(_isdigit($39) | 0)) {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$pre$phi49Z2D = $36;
  } else {
   $44 = (HEAP8[$37 + 2 >> 0] | 0) == 36;
   $$0253 = $44 ? $39 + -48 | 0 : -1;
   $$1270 = $44 ? 1 : $$0269$ph;
   $$pre$phi49Z2D = $37 + ($44 ? 3 : 1) | 0;
  }
  HEAP32[$4 >> 2] = $$pre$phi49Z2D;
  $46 = HEAP8[$$pre$phi49Z2D >> 0] | 0;
  $48 = ($46 << 24 >> 24) + -32 | 0;
  if ($48 >>> 0 > 31 | (1 << $48 & 75913 | 0) == 0) {
   $$0262$lcssa = 0;
   $$lcssa308 = $46;
   $66 = $$pre$phi49Z2D;
  } else {
   $$0262328 = 0;
   $54 = $48;
   $storemerge273327 = $$pre$phi49Z2D;
   while (1) {
    $55 = 1 << $54 | $$0262328;
    $56 = $storemerge273327 + 1 | 0;
    HEAP32[$4 >> 2] = $56;
    $57 = HEAP8[$56 >> 0] | 0;
    $54 = ($57 << 24 >> 24) + -32 | 0;
    if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
     $$0262$lcssa = $55;
     $$lcssa308 = $57;
     $66 = $56;
     break;
    } else {
     $$0262328 = $55;
     $storemerge273327 = $56;
    }
   }
  }
  if ($$lcssa308 << 24 >> 24 == 42) {
   $65 = $66 + 1 | 0;
   $68 = HEAP8[$65 >> 0] | 0;
   if (!(_isdigit($68) | 0)) label = 26; else if ((HEAP8[$66 + 2 >> 0] | 0) == 36) {
    HEAP32[$3 + ($68 + -48 << 2) >> 2] = 10;
    $$0259 = HEAP32[$2 + ((HEAP8[$65 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $$2271 = 1;
    $storemerge274 = $66 + 3 | 0;
   } else label = 26;
   if ((label | 0) == 26) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($9) {
     $93 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $94 = HEAP32[$93 >> 2] | 0;
     HEAP32[$1 >> 2] = $93 + 4;
     $$0259 = $94;
     $$2271 = 0;
     $storemerge274 = $65;
    } else {
     $$0259 = 0;
     $$2271 = 0;
     $storemerge274 = $65;
    }
   }
   HEAP32[$4 >> 2] = $storemerge274;
   $95 = ($$0259 | 0) < 0;
   $$1260 = $95 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $95 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $101 = $storemerge274;
  } else {
   $98 = _getint($4) | 0;
   if (($98 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $98;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $101 = HEAP32[$4 >> 2] | 0;
  }
  do if ((HEAP8[$101 >> 0] | 0) == 46) {
   $103 = $101 + 1 | 0;
   if ((HEAP8[$103 >> 0] | 0) != 42) {
    HEAP32[$4 >> 2] = $103;
    $135 = _getint($4) | 0;
    $$0254 = $135;
    $$pre363 = HEAP32[$4 >> 2] | 0;
    break;
   }
   $106 = $101 + 2 | 0;
   $108 = HEAP8[$106 >> 0] | 0;
   if (_isdigit($108) | 0) if ((HEAP8[$101 + 3 >> 0] | 0) == 36) {
    HEAP32[$3 + ($108 + -48 << 2) >> 2] = 10;
    $122 = HEAP32[$2 + ((HEAP8[$106 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $126 = $101 + 4 | 0;
    HEAP32[$4 >> 2] = $126;
    $$0254 = $122;
    $$pre363 = $126;
    break;
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($9) {
    $133 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $134 = HEAP32[$133 >> 2] | 0;
    HEAP32[$1 >> 2] = $133 + 4;
    $335 = $134;
   } else $335 = 0;
   HEAP32[$4 >> 2] = $106;
   $$0254 = $335;
   $$pre363 = $106;
  } else {
   $$0254 = -1;
   $$pre363 = $101;
  } while (0);
  $$0252 = 0;
  $137 = $$pre363;
  while (1) {
   if (((HEAP8[$137 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $141 = $137 + 1 | 0;
   HEAP32[$4 >> 2] = $141;
   $146 = HEAP8[(HEAP8[$137 >> 0] | 0) + -65 + (36432 + ($$0252 * 58 | 0)) >> 0] | 0;
   $147 = $146 & 255;
   if (($147 + -1 | 0) >>> 0 < 8) {
    $$0252 = $147;
    $137 = $141;
   } else break;
  }
  if (!($146 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $152 = ($$0253 | 0) > -1;
  do if ($146 << 24 >> 24 == 19) if ($152) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($152) {
    HEAP32[$3 + ($$0253 << 2) >> 2] = $147;
    $155 = $2 + ($$0253 << 3) | 0;
    $160 = HEAP32[$155 + 4 >> 2] | 0;
    $161 = $5;
    HEAP32[$161 >> 2] = HEAP32[$155 >> 2];
    HEAP32[$161 + 4 >> 2] = $160;
    label = 52;
    break;
   }
   if (!$9) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($5, $147, $1);
   label = 53;
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if ($9) label = 53; else $$0243$ph$be = 0;
  }
  L74 : do if ((label | 0) == 53) {
   label = 0;
   $166 = HEAP8[$137 >> 0] | 0;
   $$0235 = ($$0252 | 0) != 0 & ($166 & 15 | 0) == 3 ? $166 & -33 : $166;
   $173 = $$1263 & -65537;
   $spec$select = ($$1263 & 8192 | 0) == 0 ? $$1263 : $173;
   L76 : do switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 2:
      {
       $185 = HEAP32[$5 >> 2] | 0;
       HEAP32[$185 >> 2] = $$1248;
       HEAP32[$185 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$5 >> 2] >> 1] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$5 >> 2] >> 0] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 7:
      {
       $197 = HEAP32[$5 >> 2] | 0;
       HEAP32[$197 >> 2] = $$1248;
       HEAP32[$197 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     default:
      {
       $$0243$ph$be = 0;
       break L74;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120;
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
     $$3265 = $spec$select | 8;
     label = 65;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $spec$select;
     label = 65;
     break;
    }
   case 111:
    {
     $219 = $5;
     $221 = HEAP32[$219 >> 2] | 0;
     $224 = HEAP32[$219 + 4 >> 2] | 0;
     $225 = _fmt_o($221, $224, $10) | 0;
     $229 = $11 - $225 | 0;
     $$0228 = $225;
     $$1233 = 0;
     $$1238 = 49703;
     $$2256 = ($spec$select & 8 | 0) == 0 | ($$0254 | 0) > ($229 | 0) ? $$0254 : $229 + 1 | 0;
     $$4266 = $spec$select;
     $257 = $221;
     $259 = $224;
     label = 71;
     break;
    }
   case 105:
   case 100:
    {
     $233 = $5;
     $235 = HEAP32[$233 >> 2] | 0;
     $238 = HEAP32[$233 + 4 >> 2] | 0;
     if (($238 | 0) < 0) {
      $240 = _i64Subtract(0, 0, $235 | 0, $238 | 0) | 0;
      $241 = tempRet0;
      $242 = $5;
      HEAP32[$242 >> 2] = $240;
      HEAP32[$242 + 4 >> 2] = $241;
      $$0232 = 1;
      $$0237 = 49703;
      $252 = $240;
      $253 = $241;
      label = 70;
      break L76;
     } else {
      $$0232 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0237 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 49703 : 49705) : 49704;
      $252 = $235;
      $253 = $238;
      label = 70;
      break L76;
     }
     break;
    }
   case 117:
    {
     $174 = $5;
     $$0232 = 0;
     $$0237 = 49703;
     $252 = HEAP32[$174 >> 2] | 0;
     $253 = HEAP32[$174 + 4 >> 2] | 0;
     label = 70;
     break;
    }
   case 99:
    {
     HEAP8[$12 >> 0] = HEAP32[$5 >> 2];
     $$2 = $12;
     $$2234 = 0;
     $$2239 = 49703;
     $$5 = 1;
     $$6268 = $173;
     $$pre$phiZ2D = $11;
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[12580] | 0) | 0;
     label = 75;
     break;
    }
   case 115:
    {
     $278 = HEAP32[$5 >> 2] | 0;
     $$1 = ($278 | 0) == 0 ? 49748 : $278;
     label = 75;
     break;
    }
   case 67:
    {
     HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$13 >> 2] = 0;
     HEAP32[$5 >> 2] = $7;
     $$4258370 = -1;
     $336 = $7;
     label = 80;
     break;
    }
   case 83:
    {
     if (!$$0254) {
      _pad_669($0, 32, $$1260, 0, $spec$select);
      $$0240313371 = 0;
      label = 90;
      break L76;
     } else {
      $$4258370 = $$0254;
      $336 = HEAP32[$5 >> 2] | 0;
      label = 80;
      break L76;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243$ph$be = _fmt_fp($0, +HEAPF64[$5 >> 3], $$1260, $$0254, $spec$select, $$0235) | 0;
     break L74;
     break;
    }
   default:
    {
     $$2 = $19;
     $$2234 = 0;
     $$2239 = 49703;
     $$5 = $$0254;
     $$6268 = $spec$select;
     $$pre$phiZ2D = $11;
    }
   } while (0);
   L102 : do if ((label | 0) == 65) {
    label = 0;
    $204 = $5;
    $206 = HEAP32[$204 >> 2] | 0;
    $209 = HEAP32[$204 + 4 >> 2] | 0;
    $211 = _fmt_x($206, $209, $10, $$1236 & 32) | 0;
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($206 | 0) == 0 & ($209 | 0) == 0;
    $$0228 = $211;
    $$1233 = $or$cond278 ? 0 : 2;
    $$1238 = $or$cond278 ? 49703 : 49703 + ($$1236 >>> 4) | 0;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $257 = $206;
    $259 = $209;
    label = 71;
   } else if ((label | 0) == 70) {
    label = 0;
    $$0228 = _fmt_u($252, $253, $10) | 0;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $spec$select;
    $257 = $252;
    $259 = $253;
    label = 71;
   } else if ((label | 0) == 75) {
    label = 0;
    $281 = _memchr($$1, $$0254) | 0;
    $282 = ($281 | 0) == 0;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 49703;
    $$5 = $282 ? $$0254 : $281 - $$1 | 0;
    $$6268 = $173;
    $$pre$phiZ2D = $282 ? $$1 + $$0254 | 0 : $281;
   } else if ((label | 0) == 80) {
    label = 0;
    $$0229334 = $336;
    $$0240333 = 0;
    while (1) {
     $294 = HEAP32[$$0229334 >> 2] | 0;
     if (!$294) {
      $$0240313 = $$0240333;
      break;
     }
     $296 = _wctomb($8, $294) | 0;
     $297 = ($296 | 0) < 0;
     if ($297 | $296 >>> 0 > ($$4258370 - $$0240333 | 0) >>> 0) {
      label = 84;
      break;
     }
     $301 = $296 + $$0240333 | 0;
     if ($$4258370 >>> 0 > $301 >>> 0) {
      $$0229334 = $$0229334 + 4 | 0;
      $$0240333 = $301;
     } else {
      $$0240313 = $301;
      break;
     }
    }
    if ((label | 0) == 84) {
     label = 0;
     if ($297) {
      $$0 = -1;
      break L1;
     } else $$0240313 = $$0240333;
    }
    _pad_669($0, 32, $$1260, $$0240313, $spec$select);
    if (!$$0240313) {
     $$0240313371 = 0;
     label = 90;
    } else {
     $$1230340 = $336;
     $$1241339 = 0;
     while (1) {
      $304 = HEAP32[$$1230340 >> 2] | 0;
      if (!$304) {
       $$0240313371 = $$0240313;
       label = 90;
       break L102;
      }
      $306 = _wctomb($8, $304) | 0;
      $$1241339 = $306 + $$1241339 | 0;
      if (($$1241339 | 0) > ($$0240313 | 0)) {
       $$0240313371 = $$0240313;
       label = 90;
       break L102;
      }
      _out($0, $8, $306);
      if ($$1241339 >>> 0 >= $$0240313 >>> 0) {
       $$0240313371 = $$0240313;
       label = 90;
       break;
      } else $$1230340 = $$1230340 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 71) {
    label = 0;
    $261 = ($257 | 0) != 0 | ($259 | 0) != 0;
    $or$cond = $261 | ($$2256 | 0) != 0;
    $267 = $11 - $$0228 + (($261 ^ 1) & 1) | 0;
    $$2 = $or$cond ? $$0228 : $10;
    $$2234 = $$1233;
    $$2239 = $$1238;
    $$5 = $or$cond ? (($$2256 | 0) > ($267 | 0) ? $$2256 : $267) : 0;
    $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
    $$pre$phiZ2D = $11;
   } else if ((label | 0) == 90) {
    label = 0;
    _pad_669($0, 32, $$1260, $$0240313371, $spec$select ^ 8192);
    $$0243$ph$be = ($$1260 | 0) > ($$0240313371 | 0) ? $$1260 : $$0240313371;
    break;
   }
   $317 = $$pre$phiZ2D - $$2 | 0;
   $spec$select284 = ($$5 | 0) < ($317 | 0) ? $317 : $$5;
   $319 = $spec$select284 + $$2234 | 0;
   $$2261 = ($$1260 | 0) < ($319 | 0) ? $319 : $$1260;
   _pad_669($0, 32, $$2261, $319, $$6268);
   _out($0, $$2239, $$2234);
   _pad_669($0, 48, $$2261, $319, $$6268 ^ 65536);
   _pad_669($0, 48, $spec$select284, $317, 0);
   _out($0, $$2, $317);
   _pad_669($0, 32, $$2261, $319, $$6268 ^ 8192);
   $$0243$ph$be = $$2261;
  } while (0);
  $$0243$ph = $$0243$ph$be;
  $$0247$ph = $$1248;
  $$0269$ph = $$3272;
  $334 = $141;
 }
 L124 : do if ((label | 0) == 93) if (!$0) if (!$$0269$ph) $$0 = 0; else {
  $$2242320 = 1;
  while (1) {
   $326 = HEAP32[$3 + ($$2242320 << 2) >> 2] | 0;
   if (!$326) break;
   _pop_arg($2 + ($$2242320 << 3) | 0, $326, $1);
   $329 = $$2242320 + 1 | 0;
   if ($329 >>> 0 < 10) $$2242320 = $329; else {
    $$0 = 1;
    break L124;
   }
  }
  $$in = $$2242320;
  while (1) {
   $$in = $$in + 1 | 0;
   if ($$in >>> 0 >= 10) {
    $$0 = 1;
    break L124;
   }
   if (HEAP32[$3 + ($$in << 2) >> 2] | 0) {
    $$0 = -1;
    break;
   }
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _opus_encoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$0344 = 0, $$0345 = 0, $105 = 0, $106 = 0, $11 = 0, $111 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $146 = 0, $147 = 0, $155 = 0, $156 = 0, $16 = 0, $165 = 0, $166 = 0, $174 = 0, $175 = 0, $184 = 0, $185 = 0, $193 = 0, $194 = 0, $2 = 0, $203 = 0, $204 = 0, $214 = 0, $215 = 0, $224 = 0, $225 = 0, $233 = 0, $234 = 0, $243 = 0, $244 = 0, $25 = 0, $252 = 0, $253 = 0, $26 = 0, $262 = 0, $263 = 0, $270 = 0, $271 = 0, $280 = 0, $281 = 0, $285 = 0, $297 = 0, $298 = 0, $3 = 0, $307 = 0, $308 = 0, $317 = 0, $318 = 0, $326 = 0, $327 = 0, $336 = 0, $337 = 0, $344 = 0, $345 = 0, $35 = 0, $354 = 0, $355 = 0, $36 = 0, $363 = 0, $364 = 0, $373 = 0, $374 = 0, $381 = 0, $382 = 0, $386 = 0, $388 = 0, $406 = 0, $407 = 0, $41 = 0, $414 = 0, $415 = 0, $423 = 0, $424 = 0, $432 = 0, $433 = 0, $49 = 0, $5 = 0, $50 = 0, $60 = 0, $61 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $89 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer112 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer129 = 0, $vararg_buffer135 = 0, $vararg_buffer141 = 0, $vararg_buffer49 = 0, $vararg_buffer97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $vararg_buffer141 = sp + 80 | 0;
 $vararg_buffer135 = sp + 72 | 0;
 $vararg_buffer129 = sp + 64 | 0;
 $vararg_buffer121 = sp + 56 | 0;
 $vararg_buffer118 = sp + 48 | 0;
 $vararg_buffer112 = sp + 40 | 0;
 $vararg_buffer97 = sp + 32 | 0;
 $vararg_buffer49 = sp + 24 | 0;
 $vararg_buffer = sp + 16 | 0;
 $2 = sp;
 $3 = sp + 84 | 0;
 HEAP32[$2 >> 2] = $varargs;
 $5 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 L1 : do switch ($1 | 0) {
 case 4e3:
  {
   $11 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $12 = HEAP32[$11 >> 2] | 0;
   HEAP32[$2 >> 2] = $11 + 4;
   switch ($12 | 0) {
   case 2048:
   case 2049:
   case 2051:
    break;
   default:
    {
     $$0344 = -1;
     label = 99;
     break L1;
    }
   }
   $16 = $0 + 108 | 0;
   if (!(HEAP32[$0 + 14248 >> 2] | 0)) if ((HEAP32[$16 >> 2] | 0) != ($12 | 0)) {
    $$0344 = -1;
    label = 99;
    break L1;
   }
   HEAP32[$16 >> 2] = $12;
   HEAP32[$0 + 192 >> 2] = $12;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 4001:
  {
   $25 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$2 >> 2] = $25 + 4;
   if (!$26) label = 100; else {
    HEAP32[$26 >> 2] = HEAP32[$0 + 108 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4002:
  {
   $35 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $36 = HEAP32[$35 >> 2] | 0;
   HEAP32[$2 >> 2] = $35 + 4;
   switch ($36 | 0) {
   case -1e3:
   case -1:
    {
     $$0345 = $36;
     break;
    }
   default:
    {
     if (($36 | 0) < 1) {
      label = 100;
      break L1;
     }
     if (($36 | 0) < 501) $$0345 = 500; else {
      $41 = (HEAP32[$0 + 112 >> 2] | 0) * 3e5 | 0;
      $$0345 = ($36 | 0) > ($41 | 0) ? $41 : $36;
     }
    }
   }
   HEAP32[$0 + 164 >> 2] = $$0345;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 4003:
  {
   $49 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $50 = HEAP32[$49 >> 2] | 0;
   HEAP32[$2 >> 2] = $49 + 4;
   if (!$50) label = 100; else {
    HEAP32[$50 >> 2] = _user_bitrate_to_bitrate($0, HEAP32[$0 + 14232 >> 2] | 0, 1276) | 0;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4022:
  {
   $60 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$2 >> 2] = $60 + 4;
   if (($61 | 0) < 1) {
    if (($61 | 0) != -1e3) {
     label = 100;
     break L1;
    }
   } else if (($61 | 0) > (HEAP32[$0 + 112 >> 2] | 0)) {
    label = 100;
    break L1;
   }
   HEAP32[$0 + 120 >> 2] = $61;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 4023:
  {
   $72 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $73 = HEAP32[$72 >> 2] | 0;
   HEAP32[$2 >> 2] = $72 + 4;
   if (!$73) label = 100; else {
    HEAP32[$73 >> 2] = HEAP32[$0 + 120 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4004:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   if (($83 + -1101 | 0) >>> 0 > 4) label = 100; else {
    HEAP32[$0 + 132 >> 2] = $83;
    if (($83 | 0) == 1101) {
     HEAP32[$0 + 20 >> 2] = 8e3;
     $$0344 = 0;
     label = 99;
     break L1;
    }
    $89 = $0 + 20 | 0;
    if (($83 | 0) == 1102) {
     HEAP32[$89 >> 2] = 12e3;
     $$0344 = 0;
     label = 99;
     break L1;
    } else {
     HEAP32[$89 >> 2] = 16e3;
     $$0344 = 0;
     label = 99;
     break L1;
    }
   }
   break;
  }
 case 4005:
  {
   $95 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $96 = HEAP32[$95 >> 2] | 0;
   HEAP32[$2 >> 2] = $95 + 4;
   if (!$96) label = 100; else {
    HEAP32[$96 >> 2] = HEAP32[$0 + 132 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4008:
  {
   $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $106 = HEAP32[$105 >> 2] | 0;
   HEAP32[$2 >> 2] = $105 + 4;
   switch ($106 | 0) {
   case 1101:
   case 1102:
   case 1103:
   case 1104:
   case 1105:
   case -1e3:
    break;
   default:
    {
     label = 100;
     break L1;
    }
   }
   HEAP32[$0 + 128 >> 2] = $106;
   if (($106 | 0) == 1101) {
    HEAP32[$0 + 20 >> 2] = 8e3;
    $$0344 = 0;
    label = 99;
    break L1;
   }
   $111 = $0 + 20 | 0;
   if (($106 | 0) == 1102) {
    HEAP32[$111 >> 2] = 12e3;
    $$0344 = 0;
    label = 99;
    break L1;
   } else {
    HEAP32[$111 >> 2] = 16e3;
    $$0344 = 0;
    label = 99;
    break L1;
   }
   break;
  }
 case 4009:
  {
   $117 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $118 = HEAP32[$117 >> 2] | 0;
   HEAP32[$2 >> 2] = $117 + 4;
   if (!$118) label = 100; else {
    HEAP32[$118 >> 2] = HEAP32[$0 + 14236 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4016:
  {
   $127 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $128 = HEAP32[$127 >> 2] | 0;
   HEAP32[$2 >> 2] = $127 + 4;
   if ($128 >>> 0 > 1) label = 100; else {
    HEAP32[$0 + 184 >> 2] = $128;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4017:
  {
   $136 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $137 = HEAP32[$136 >> 2] | 0;
   HEAP32[$2 >> 2] = $136 + 4;
   if (!$137) label = 100; else {
    HEAP32[$137 >> 2] = HEAP32[$0 + 184 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4010:
  {
   $146 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $147 = HEAP32[$146 >> 2] | 0;
   HEAP32[$2 >> 2] = $146 + 4;
   if ($147 >>> 0 > 10) label = 100; else {
    HEAP32[$0 + 44 >> 2] = $147;
    HEAP32[$vararg_buffer >> 2] = $147;
    _opus_custom_encoder_ctl($5, 4010, $vararg_buffer) | 0;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4011:
  {
   $155 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $156 = HEAP32[$155 >> 2] | 0;
   HEAP32[$2 >> 2] = $155 + 4;
   if (!$156) label = 100; else {
    HEAP32[$156 >> 2] = HEAP32[$0 + 44 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4012:
  {
   $165 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $166 = HEAP32[$165 >> 2] | 0;
   HEAP32[$2 >> 2] = $165 + 4;
   if ($166 >>> 0 > 1) label = 100; else {
    HEAP32[$0 + 48 >> 2] = $166;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4013:
  {
   $174 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $175 = HEAP32[$174 >> 2] | 0;
   HEAP32[$2 >> 2] = $174 + 4;
   if (!$175) label = 100; else {
    HEAP32[$175 >> 2] = HEAP32[$0 + 48 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4014:
  {
   $184 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $185 = HEAP32[$184 >> 2] | 0;
   HEAP32[$2 >> 2] = $184 + 4;
   if ($185 >>> 0 > 100) label = 100; else {
    HEAP32[$0 + 40 >> 2] = $185;
    HEAP32[$vararg_buffer49 >> 2] = $185;
    _opus_custom_encoder_ctl($5, 4014, $vararg_buffer49) | 0;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4015:
  {
   $193 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $194 = HEAP32[$193 >> 2] | 0;
   HEAP32[$2 >> 2] = $193 + 4;
   if (!$194) label = 100; else {
    HEAP32[$194 >> 2] = HEAP32[$0 + 40 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4006:
  {
   $203 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $204 = HEAP32[$203 >> 2] | 0;
   HEAP32[$2 >> 2] = $203 + 4;
   if ($204 >>> 0 > 1) label = 100; else {
    HEAP32[$0 + 148 >> 2] = $204;
    HEAP32[$0 + 60 >> 2] = 1 - $204;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4007:
  {
   $214 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $215 = HEAP32[$214 >> 2] | 0;
   HEAP32[$2 >> 2] = $214 + 4;
   if (!$215) label = 100; else {
    HEAP32[$215 >> 2] = HEAP32[$0 + 148 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 11018:
  {
   $224 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $225 = HEAP32[$224 >> 2] | 0;
   HEAP32[$2 >> 2] = $224 + 4;
   if (($225 + 1 | 0) >>> 0 > 101) label = 100; else {
    HEAP32[$0 + 140 >> 2] = $225;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 11019:
  {
   $233 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $234 = HEAP32[$233 >> 2] | 0;
   HEAP32[$2 >> 2] = $233 + 4;
   if (!$234) label = 100; else {
    HEAP32[$234 >> 2] = HEAP32[$0 + 140 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4020:
  {
   $243 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $244 = HEAP32[$243 >> 2] | 0;
   HEAP32[$2 >> 2] = $243 + 4;
   if ($244 >>> 0 > 1) label = 100; else {
    HEAP32[$0 + 152 >> 2] = $244;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4021:
  {
   $252 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $253 = HEAP32[$252 >> 2] | 0;
   HEAP32[$2 >> 2] = $252 + 4;
   if (!$253) label = 100; else {
    HEAP32[$253 >> 2] = HEAP32[$0 + 152 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4024:
  {
   $262 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $263 = HEAP32[$262 >> 2] | 0;
   HEAP32[$2 >> 2] = $262 + 4;
   if (($263 | 0) < 3001) switch ($263 | 0) {
   case -1e3:
    break;
   default:
    {
     label = 100;
     break L1;
    }
   } else switch ($263 | 0) {
   case 3001:
   case 3002:
    break;
   default:
    {
     label = 100;
     break L1;
    }
   }
   HEAP32[$0 + 124 >> 2] = $263;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 4025:
  {
   $270 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $271 = HEAP32[$270 >> 2] | 0;
   HEAP32[$2 >> 2] = $270 + 4;
   if (!$271) label = 100; else {
    HEAP32[$271 >> 2] = HEAP32[$0 + 124 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4027:
  {
   $280 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $281 = HEAP32[$280 >> 2] | 0;
   HEAP32[$2 >> 2] = $280 + 4;
   if (!$281) label = 100; else {
    $285 = (HEAP32[$0 + 144 >> 2] | 0) / 400 | 0;
    HEAP32[$281 >> 2] = $285;
    if ((HEAP32[$0 + 108 >> 2] | 0) == 2051) {
     $$0344 = 0;
     label = 99;
    } else {
     HEAP32[$281 >> 2] = (HEAP32[$0 + 116 >> 2] | 0) + $285;
     $$0344 = 0;
     label = 99;
    }
   }
   break;
  }
 case 4029:
  {
   $297 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $298 = HEAP32[$297 >> 2] | 0;
   HEAP32[$2 >> 2] = $297 + 4;
   if (!$298) label = 100; else {
    HEAP32[$298 >> 2] = HEAP32[$0 + 144 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4031:
  {
   $307 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $308 = HEAP32[$307 >> 2] | 0;
   HEAP32[$2 >> 2] = $307 + 4;
   if (!$308) label = 100; else {
    HEAP32[$308 >> 2] = HEAP32[$0 + 18132 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4036:
  {
   $317 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $318 = HEAP32[$317 >> 2] | 0;
   HEAP32[$2 >> 2] = $317 + 4;
   if (($318 + -8 | 0) >>> 0 > 16) label = 100; else {
    HEAP32[$0 + 168 >> 2] = $318;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4037:
  {
   $326 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $327 = HEAP32[$326 >> 2] | 0;
   HEAP32[$2 >> 2] = $326 + 4;
   if (!$327) label = 100; else {
    HEAP32[$327 >> 2] = HEAP32[$0 + 168 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4040:
  {
   $336 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $337 = HEAP32[$336 >> 2] | 0;
   HEAP32[$2 >> 2] = $336 + 4;
   if (($337 + -5e3 | 0) >>> 0 < 10) {
    HEAP32[$0 + 156 >> 2] = $337;
    HEAP32[$vararg_buffer97 >> 2] = $337;
    _opus_custom_encoder_ctl($5, 4040, $vararg_buffer97) | 0;
    $$0344 = 0;
    label = 99;
   } else label = 100;
   break;
  }
 case 4041:
  {
   $344 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $345 = HEAP32[$344 >> 2] | 0;
   HEAP32[$2 >> 2] = $344 + 4;
   if (!$345) label = 100; else {
    HEAP32[$345 >> 2] = HEAP32[$0 + 156 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4042:
  {
   $354 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $355 = HEAP32[$354 >> 2] | 0;
   HEAP32[$2 >> 2] = $354 + 4;
   if ($355 >>> 0 > 1) label = 100; else {
    HEAP32[$0 + 76 >> 2] = $355;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4043:
  {
   $363 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $364 = HEAP32[$363 >> 2] | 0;
   HEAP32[$2 >> 2] = $363 + 4;
   if (!$364) label = 100; else {
    HEAP32[$364 >> 2] = HEAP32[$0 + 76 >> 2];
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4046:
  {
   $373 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $374 = HEAP32[$373 >> 2] | 0;
   HEAP32[$2 >> 2] = $373 + 4;
   if ($374 >>> 0 > 1) label = 100; else {
    HEAP32[$vararg_buffer112 >> 2] = $374;
    _opus_custom_encoder_ctl($5, 4046, $vararg_buffer112) | 0;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4047:
  {
   $381 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $382 = HEAP32[$381 >> 2] | 0;
   HEAP32[$2 >> 2] = $381 + 4;
   if (!$382) label = 100; else {
    HEAP32[$vararg_buffer118 >> 2] = $382;
    _opus_custom_encoder_ctl($5, 4047, $vararg_buffer118) | 0;
    $$0344 = 0;
    label = 99;
   }
   break;
  }
 case 4028:
  {
   $386 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
   _tonality_analysis_reset($0 + 188 | 0);
   $388 = $0 + 14188 | 0;
   _memset($388 | 0, 0, 3948) | 0;
   _opus_custom_encoder_ctl($5, 4028, $vararg_buffer121) | 0;
   _silk_InitEncoder($386, HEAP32[$0 + 180 >> 2] | 0, $3);
   HEAP32[$388 >> 2] = HEAP32[$0 + 112 >> 2];
   HEAP16[$0 + 14192 >> 1] = 16384;
   HEAPF32[$0 + 14200 >> 2] = 1.0;
   HEAP32[$0 + 14248 >> 2] = 1;
   HEAP32[$0 + 14220 >> 2] = 1001;
   HEAP32[$0 + 14236 >> 2] = 1105;
   HEAP32[$0 + 14196 >> 2] = (_silk_lin2log(60) | 0) << 8;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 11002:
  {
   $406 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $407 = HEAP32[$406 >> 2] | 0;
   HEAP32[$2 >> 2] = $406 + 4;
   switch ($407 | 0) {
   case 1e3:
   case 1001:
   case 1002:
   case -1e3:
    break;
   default:
    {
     label = 100;
     break L1;
    }
   }
   HEAP32[$0 + 136 >> 2] = $407;
   $$0344 = 0;
   label = 99;
   break;
  }
 case 10024:
  {
   $414 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $415 = HEAP32[$414 >> 2] | 0;
   HEAP32[$2 >> 2] = $414 + 4;
   HEAP32[$0 + 176 >> 2] = $415;
   HEAP32[$vararg_buffer129 >> 2] = $415;
   $$0344 = _opus_custom_encoder_ctl($5, 10024, $vararg_buffer129) | 0;
   label = 99;
   break;
  }
 case 10026:
  {
   $423 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $424 = HEAP32[$423 >> 2] | 0;
   HEAP32[$2 >> 2] = $423 + 4;
   HEAP32[$0 + 14252 >> 2] = $424;
   HEAP32[$vararg_buffer135 >> 2] = $424;
   $$0344 = _opus_custom_encoder_ctl($5, 10026, $vararg_buffer135) | 0;
   label = 99;
   break;
  }
 case 10015:
  {
   $432 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $433 = HEAP32[$432 >> 2] | 0;
   HEAP32[$2 >> 2] = $432 + 4;
   if (!$433) label = 100; else {
    HEAP32[$vararg_buffer141 >> 2] = $433;
    $$0344 = _opus_custom_encoder_ctl($5, 10015, $vararg_buffer141) | 0;
    label = 99;
   }
   break;
  }
 default:
  {
   $$0344 = -5;
   label = 99;
  }
 } while (0);
 if ((label | 0) == 99) {
  $$0 = $$0344;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 100) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _quant_all_bands($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 var $$0458529 = 0, $$0460527 = 0, $$0461505 = 0, $$0462 = 0, $$0464525 = 0, $$0466524 = 0, $$0467 = 0, $$0468 = 0, $$0469 = 0, $$0470 = 0, $$0473522 = 0, $$0474 = 0, $$0475$lcssa = 0, $$0476 = 0, $$0477 = 0, $$0480 = 0, $$0530 = 0, $$1463526 = 0, $$1465 = 0, $$1478 = 0, $$1481 = 0, $$1508 = 0, $$2472 = 0, $$2479 = 0, $$3483 = 0, $$alloca_mul = 0, $$idx = 0, $$not = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx30 = 0, $$sroa$3$0$copyload = 0, $$sroa$4 = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$436$0$$sroa_idx37 = 0, $$sroa$436$0$copyload = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_idx = 0, $100 = 0, $101 = 0, $108 = 0, $110 = 0, $113 = 0, $116 = 0, $118 = 0, $121 = 0, $123 = 0, $138 = 0, $140 = 0, $142 = 0, $150 = 0, $152 = 0, $154 = 0, $161 = 0, $163 = 0, $165 = 0, $166 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $184 = 0, $189 = 0, $202 = 0, $203 = 0, $205 = 0, $212 = 0, $219 = 0, $229 = 0, $23 = 0, $230 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $242 = 0.0, $243 = 0.0, $246 = 0.0, $25 = 0, $252 = 0, $253 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0.0, $27 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $290 = 0, $291 = 0, $293 = 0, $30 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $56 = 0, $57 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $71 = 0, $72 = 0, $77 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond13 = 0, $spec$select = 0, $spec$select484 = 0, $spec$select491 = 0, $spec$select493 = 0, $spec$select495 = 0, $spec$select496512 = 0, $spec$select498 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $$0460527$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568 | 0;
 $23 = sp + 1496 | 0;
 $$sroa$4 = sp + 1304 | 0;
 $$sroa$5 = sp + 1280 | 0;
 $24 = sp + 1448 | 0;
 $25 = sp + 1388 | 0;
 $26 = sp + 1328 | 0;
 $27 = sp;
 $28 = sp + 1320 | 0;
 $29 = $1 + 32 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = ($5 | 0) != 0;
 $32 = $31 ? 2 : 1;
 $33 = ($0 | 0) != 0;
 $spec$select = $33 & $31 & ($11 | 0) == 0 & ($20 | 0) > 7;
 $36 = $spec$select | $33 ^ 1;
 $38 = 1 << $17;
 $40 = ($9 | 0) == 0 ? 1 : $38;
 $41 = $30 + ($2 << 1) | 0;
 $44 = HEAP16[$41 >> 1] << $17;
 $45 = $1 + 8 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 $50 = HEAP16[$30 + ($46 + -1 << 1) >> 1] | 0;
 $51 = $50 << $17;
 $$alloca_mul = (Math_imul($51 - $44 | 0, $32) | 0) << 2;
 $54 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 $56 = 0 - $44 | 0;
 $57 = $54 + ($51 << 2) + ($56 << 2) | 0;
 if ($spec$select) {
  $62 = (HEAP16[$30 + ($46 << 1) >> 1] | 0) - $50 << $17;
  $63 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($62 << 2) | 0) + 15 & -16) | 0;
  $$0461505 = $62;
  $$0462 = $63;
 } else {
  $$0461505 = 1;
  $$0462 = $4 + ($51 << 2) | 0;
 }
 $65 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0461505 << 2) | 0) + 15 & -16) | 0;
 $66 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0461505 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$23 + 36 >> 2] = $7;
 HEAP32[$23 + 28 >> 2] = $16;
 HEAP32[$23 >> 2] = $0;
 HEAP32[$23 + 16 >> 2] = $12;
 HEAP32[$23 + 8 >> 2] = $1;
 $71 = HEAP32[$19 >> 2] | 0;
 $72 = $23 + 40 | 0;
 HEAP32[$72 >> 2] = $71;
 HEAP32[$23 + 20 >> 2] = $10;
 HEAP32[$23 + 44 >> 2] = $21;
 HEAP32[$23 + 52 >> 2] = $22;
 HEAP32[$23 + 4 >> 2] = $36 & 1;
 $77 = $23 + 48 | 0;
 HEAP32[$77 >> 2] = 0;
 $78 = ($40 | 0) > 1;
 $80 = $23 + 56 | 0;
 HEAP32[$80 >> 2] = $78 & 1;
 if (($2 | 0) >= ($3 | 0)) {
  $306 = $71;
  HEAP32[$19 >> 2] = $306;
  STACKTOP = sp;
  return;
 }
 $82 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0461505 << 2) | 0) + 15 & -16) | 0;
 $83 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0461505 << 2) | 0) + 15 & -16) | 0;
 $84 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0461505 << 2) | 0) + 15 & -16) | 0;
 $85 = $23 + 12 | 0;
 $86 = $3 + -1 | 0;
 $87 = $23 + 32 | 0;
 $88 = $2 + 1 | 0;
 $89 = $23 + 24 | 0;
 $90 = $1 + 12 | 0;
 $spec$select491 = $31 ? $54 : 0;
 $92 = (1 << $40) + -1 | 0;
 $$not = $36 ^ 1;
 $or$cond13 = ($10 | 0) != 3 | $78;
 $94 = $32 + -1 | 0;
 $$sroa$3$0$$sroa_idx30 = $16 + 4 | 0;
 $$sroa$4$0$$sroa_idx = $16 + 8 | 0;
 $$sroa$436$0$$sroa_idx37 = $16 + 24 | 0;
 $$sroa$5$0$$sroa_idx = $16 + 28 | 0;
 $95 = $28 + 4 | 0;
 $$idx = $16 + 20 | 0;
 $$0458529 = $15;
 $$0460527 = $2;
 $$0464525 = 0;
 $$0466524 = 1;
 $$0530 = $11;
 $$1463526 = $$0462;
 while (1) {
  HEAP32[$85 >> 2] = $$0460527;
  $96 = ($$0460527 | 0) == ($86 | 0);
  $97 = $30 + ($$0460527 << 1) | 0;
  $100 = HEAP16[$97 >> 1] << $17;
  $101 = $4 + ($100 << 2) | 0;
  $$0470 = $31 ? $5 + ($100 << 2) | 0 : 0;
  $$0460527$looptemp = $$0460527;
  $$0460527 = $$0460527 + 1 | 0;
  $108 = (HEAP16[$30 + ($$0460527 << 1) >> 1] << $17) - $100 | 0;
  if (($108 | 0) <= 0) {
   label = 7;
   break;
  }
  $110 = _ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$sroa$5$0$$sroa_idx >> 2] | 0) | 0;
  $spec$select484 = $$0458529 - (($$0460527$looptemp | 0) == ($2 | 0) ? 0 : $110) | 0;
  $113 = $14 - $110 | 0;
  HEAP32[$87 >> 2] = $113 + -1;
  if (($$0460527$looptemp | 0) < ($18 | 0)) {
   $116 = $18 - $$0460527$looptemp | 0;
   $118 = _celt_sudiv($spec$select484, ($116 | 0) < 3 ? $116 : 3) | 0;
   $121 = (HEAP32[$8 + ($$0460527$looptemp << 2) >> 2] | 0) + $118 | 0;
   $123 = ($113 | 0) < ($121 | 0) ? $113 : $121;
   if (($123 | 0) > 16383) $$0467 = 16383; else $$0467 = ($123 | 0) > 0 ? $123 : 0;
  } else $$0467 = 0;
  if ($36) $$1465 = (($$0466524 | 0) != 0 | ($$0464525 | 0) == 0) & (($$0460527$looptemp | 0) == ($88 | 0) ? 1 : ((HEAP16[$97 >> 1] << $17) - $108 | 0) >= (HEAP16[$41 >> 1] << $17 | 0)) ? $$0460527$looptemp : $$0464525; else $$1465 = $$0464525;
  $138 = ($$0460527$looptemp | 0) == ($88 | 0);
  if ($138) _special_hybrid_folding(HEAP32[$29 >> 2] | 0, $54, $57, $2, $38, $$0530);
  $140 = HEAP32[$13 + ($$0460527$looptemp << 2) >> 2] | 0;
  HEAP32[$89 >> 2] = $140;
  $142 = ($$0460527$looptemp | 0) < (HEAP32[$90 >> 2] | 0);
  $$2472 = $142 ? $$0470 : $spec$select491;
  $$0469 = $142 ? $101 : $54;
  $$1463526 = ($spec$select | $96 ^ 1) & $142 ? $$1463526 : 0;
  if (($$1465 | 0) != 0 & ($or$cond13 | ($140 | 0) < 0)) {
   $150 = HEAP16[$30 + ($$1465 << 1) >> 1] << $17;
   $152 = $150 - $44 - $108 | 0;
   $spec$select493 = ($152 | 0) > 0 ? $152 : 0;
   $154 = $spec$select493 + $44 | 0;
   $$0476 = $$1465;
   do $$0476 = $$0476 + -1 | 0; while ((HEAP16[$30 + ($$0476 << 1) >> 1] << $17 | 0) > ($154 | 0));
   $161 = $$1465 + -1 | 0;
   L26 : do if (($$1465 | 0) < ($$0460527$looptemp | 0)) {
    $163 = $154 + $108 | 0;
    if (($150 | 0) < ($163 | 0)) {
     $166 = $$1465;
     while (1) {
      $165 = $166 + 1 | 0;
      if (($165 | 0) >= ($$0460527$looptemp | 0)) {
       $$0475$lcssa = $166;
       break L26;
      }
      if ((HEAP16[$30 + ($165 << 1) >> 1] << $17 | 0) < ($163 | 0)) $166 = $165; else {
       $$0475$lcssa = $166;
       break;
      }
     }
    } else $$0475$lcssa = $161;
   } else $$0475$lcssa = $161; while (0);
   $$0474 = $$0476;
   $$0477 = 0;
   $$0480 = 0;
   while (1) {
    $171 = Math_imul($$0474, $32) | 0;
    $175 = $$0480 | HEAPU8[$6 + $171 >> 0];
    $180 = $$0477 | HEAPU8[$6 + ($94 + $171) >> 0];
    if (($$0474 | 0) < ($$0475$lcssa | 0)) {
     $$0474 = $$0474 + 1 | 0;
     $$0477 = $180;
     $$0480 = $175;
    } else {
     $$0468 = $spec$select493;
     $$1478 = $180;
     $$1481 = $175;
     break;
    }
   }
  } else {
   $$0468 = -1;
   $$1478 = $92;
   $$1481 = $92;
  }
  $183 = ($$0530 | 0) == 0;
  $184 = ($$0460527$looptemp | 0) != ($12 | 0);
  if ($184 | $183 | $$not) if ($183 | $184 ^ 1) label = 34; else {
   $202 = $$0467 >>> 1;
   $203 = ($$0468 | 0) != -1;
   $spec$select495 = $203 ? $54 + ($$0468 << 2) | 0 : 0;
   if ($96) {
    $205 = _quant_band($23, $$0469, $108, $202, $40, $spec$select495, $17, 0, 1.0, $$1463526, $$1481) | 0;
    $219 = 0;
    $307 = $205;
    $spec$select496512 = $203 ? $57 + ($$0468 << 2) | 0 : 0;
   } else {
    $212 = _quant_band($23, $$0469, $108, $202, $40, $spec$select495, $17, $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0, 1.0, $$1463526, $$1481) | 0;
    $219 = $57 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0;
    $307 = $212;
    $spec$select496512 = $203 ? $57 + ($$0468 << 2) | 0 : 0;
   }
   $$1508 = $$0530;
   $$2479 = _quant_band($23, $$2472, $108, $202, $40, $spec$select496512, $17, $219, 1.0, $$1463526, $$1478) | 0;
   $$3483 = $307;
  } else if ((HEAP16[$97 >> 1] << $17 | 0) > ($44 | 0)) {
   $$0473522 = 0;
   do {
    $189 = $54 + ($$0473522 << 2) | 0;
    HEAPF32[$189 >> 2] = (+HEAPF32[$189 >> 2] + +HEAPF32[$57 + ($$0473522 << 2) >> 2]) * .5;
    $$0473522 = $$0473522 + 1 | 0;
   } while (($$0473522 | 0) < ((HEAP16[$97 >> 1] << $17) - $44 | 0));
   label = 34;
  } else label = 34;
  do if ((label | 0) == 34) {
   label = 0;
   if (!$$2472) {
    if ($96) $290 = 0; else $290 = $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0;
    $291 = _quant_band($23, $$0469, $108, $$0467, $40, ($$0468 | 0) == -1 ? 0 : $54 + ($$0468 << 2) | 0, $17, $290, 1.0, $$1463526, $$1478 | $$1481) | 0;
    $$1508 = 0;
    $$2479 = $291;
    $$3483 = $291;
    break;
   }
   if (!($spec$select & ($$0460527$looptemp | 0) < ($12 | 0))) {
    HEAP32[$77 >> 2] = 0;
    if ($96) $280 = 0; else $280 = $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0;
    $281 = _quant_band_stereo($23, $$0469, $$2472, $108, $$0467, $40, ($$0468 | 0) == -1 ? 0 : $54 + ($$0468 << 2) | 0, $17, $280, $$1463526, $$1478 | $$1481) | 0;
    $$1508 = 0;
    $$2479 = $281;
    $$3483 = $281;
    break;
   }
   _compute_channel_weights(+HEAPF32[$7 + ($$0460527$looptemp << 2) >> 2], +HEAPF32[$7 + ((HEAP32[$45 >> 2] | 0) + $$0460527$looptemp << 2) >> 2], $28);
   $229 = $$1478 | $$1481;
   $$sroa$0$0$copyload = HEAP32[$16 >> 2] | 0;
   $$sroa$3$0$copyload = HEAP32[$$sroa$3$0$$sroa_idx30 >> 2] | 0;
   HEAP32[$$sroa$4 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx >> 2];
   HEAP32[$$sroa$4 + 4 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 4 >> 2];
   HEAP32[$$sroa$4 + 8 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 8 >> 2];
   HEAP32[$$sroa$4 + 12 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 12 >> 2];
   $$sroa$436$0$copyload = HEAP32[$$sroa$436$0$$sroa_idx37 >> 2] | 0;
   HEAP32[$$sroa$5 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx >> 2];
   HEAP32[$$sroa$5 + 4 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx + 4 >> 2];
   HEAP32[$$sroa$5 + 8 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx + 8 >> 2];
   HEAP32[$$sroa$5 + 12 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx + 12 >> 2];
   HEAP32[$$sroa$5 + 16 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx + 16 >> 2];
   dest = $25;
   src = $23;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $230 = $108 << 2;
   _memcpy($65 | 0, $$0469 | 0, $230 | 0) | 0;
   _memcpy($66 | 0, $$2472 | 0, $230 | 0) | 0;
   HEAP32[$77 >> 2] = -1;
   $spec$select498 = ($$0468 | 0) == -1 ? 0 : $54 + ($$0468 << 2) | 0;
   if ($96) $238 = 0; else $238 = $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0;
   $239 = _quant_band_stereo($23, $$0469, $$2472, $108, $$0467, $40, $spec$select498, $17, $238, $$1463526, $229) | 0;
   $240 = +HEAPF32[$28 >> 2];
   $242 = $240 * +_celt_inner_prod_c($65, $$0469, $108);
   $243 = +HEAPF32[$95 >> 2];
   $246 = $242 + $243 * +_celt_inner_prod_c($66, $$2472, $108);
   dest = $24;
   src = $16;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $26;
   src = $23;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($84 | 0, $$0469 | 0, $230 | 0) | 0;
   _memcpy($83 | 0, $$2472 | 0, $230 | 0) | 0;
   if (!$96) _memcpy($82 | 0, $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0, $230 | 0) | 0;
   $252 = $$sroa$0$0$copyload + $$sroa$436$0$copyload | 0;
   $253 = $$sroa$3$0$copyload - $$sroa$436$0$copyload | 0;
   _memcpy($27 | 0, $252 | 0, $253 | 0) | 0;
   HEAP32[$16 >> 2] = $$sroa$0$0$copyload;
   HEAP32[$$sroa$3$0$$sroa_idx30 >> 2] = $$sroa$3$0$copyload;
   HEAP32[$$sroa$4$0$$sroa_idx >> 2] = HEAP32[$$sroa$4 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 4 >> 2] = HEAP32[$$sroa$4 + 4 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 8 >> 2] = HEAP32[$$sroa$4 + 8 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 12 >> 2] = HEAP32[$$sroa$4 + 12 >> 2];
   HEAP32[$$sroa$436$0$$sroa_idx37 >> 2] = $$sroa$436$0$copyload;
   HEAP32[$$sroa$5$0$$sroa_idx >> 2] = HEAP32[$$sroa$5 >> 2];
   HEAP32[$$sroa$5$0$$sroa_idx + 4 >> 2] = HEAP32[$$sroa$5 + 4 >> 2];
   HEAP32[$$sroa$5$0$$sroa_idx + 8 >> 2] = HEAP32[$$sroa$5 + 8 >> 2];
   HEAP32[$$sroa$5$0$$sroa_idx + 12 >> 2] = HEAP32[$$sroa$5 + 12 >> 2];
   HEAP32[$$sroa$5$0$$sroa_idx + 16 >> 2] = HEAP32[$$sroa$5 + 16 >> 2];
   dest = $23;
   src = $25;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($$0469 | 0, $65 | 0, $230 | 0) | 0;
   _memcpy($$2472 | 0, $66 | 0, $230 | 0) | 0;
   if ($138) _special_hybrid_folding(HEAP32[$29 >> 2] | 0, $54, $57, $2, $38, 0);
   HEAP32[$77 >> 2] = 1;
   if ($96) $259 = 0; else $259 = $54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0;
   $260 = _quant_band_stereo($23, $$0469, $$2472, $108, $$0467, $40, $spec$select498, $17, $259, $$1463526, $229) | 0;
   $262 = $240 * +_celt_inner_prod_c($65, $$0469, $108);
   if (!($246 >= $262 + $243 * +_celt_inner_prod_c($66, $$2472, $108))) {
    $$1508 = 0;
    $$2479 = $260;
    $$3483 = $260;
   } else {
    dest = $16;
    src = $24;
    stop = dest + 48 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $23;
    src = $26;
    stop = dest + 60 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _memcpy($$0469 | 0, $84 | 0, $230 | 0) | 0;
    _memcpy($$2472 | 0, $83 | 0, $230 | 0) | 0;
    if (!$96) _memcpy($54 + (HEAP16[$97 >> 1] << $17 << 2) + ($56 << 2) | 0, $82 | 0, $230 | 0) | 0;
    _memcpy($252 | 0, $27 | 0, $253 | 0) | 0;
    $$1508 = 0;
    $$2479 = $239;
    $$3483 = $239;
   }
  } while (0);
  $293 = Math_imul($$0460527$looptemp, $32) | 0;
  HEAP8[$6 + $293 >> 0] = $$3483;
  HEAP8[$6 + ($94 + $293) >> 0] = $$2479;
  $$0458529 = $spec$select484 + $110 + (HEAP32[$8 + ($$0460527$looptemp << 2) >> 2] | 0) | 0;
  HEAP32[$80 >> 2] = 0;
  if (($$0460527 | 0) >= ($3 | 0)) break; else {
   $$0464525 = $$1465;
   $$0466524 = ($$0467 | 0) > ($108 << 3 | 0) & 1;
   $$0530 = $$1508;
  }
 }
 if ((label | 0) == 7) _celt_fatal(39639, 39549, 1495);
 $306 = HEAP32[$72 >> 2] | 0;
 HEAP32[$19 >> 2] = $306;
 STACKTOP = sp;
 return;
}

function _silk_encode_pulses($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0122133$us$in = 0, $$0123185 = 0, $$0124162 = 0, $$0125152$us = 0, $$0125152$us$1 = 0, $$0125152$us$2 = 0, $$0125152$us$3 = 0, $$0125152$us$4 = 0, $$0125152$us$5 = 0, $$0125152$us$6 = 0, $$0125152$us$7 = 0, $$0125152$us$8 = 0, $$0167 = 0, $$1163 = 0, $$2120143 = 0, $$2153$us = 0, $$2153$us$1 = 0, $$2153$us$2 = 0, $$2153$us$3 = 0, $$2153$us$4 = 0, $$2153$us$5 = 0, $$2153$us$6 = 0, $$2153$us$7 = 0, $$2153$us$8 = 0, $$3121134$us = 0, $$3147 = 0, $$4139 = 0, $$5135 = 0, $$pn$us = 0, $$pn$us$1 = 0, $$pn$us$2 = 0, $$pn$us$3 = 0, $$pn$us$4 = 0, $$pn$us$5 = 0, $$pn$us$6 = 0, $$pn$us$7 = 0, $$pn$us$8 = 0, $101 = 0, $11 = 0, $12 = 0, $14 = 0, $141 = 0, $15 = 0, $157 = 0, $160 = 0, $162 = 0, $166 = 0, $17 = 0, $179 = 0, $182 = 0, $186 = 0, $19 = 0, $190 = 0, $197 = 0, $20 = 0, $204 = 0, $211 = 0, $218 = 0, $22 = 0, $225 = 0, $23 = 0, $232 = 0, $239 = 0, $246 = 0, $25 = 0, $253 = 0, $26 = 0, $260 = 0, $267 = 0, $274 = 0, $28 = 0, $281 = 0, $288 = 0, $29 = 0, $295 = 0, $302 = 0, $308 = 0, $31 = 0, $318 = 0, $32 = 0, $331 = 0, $34 = 0, $344 = 0, $35 = 0, $357 = 0, $37 = 0, $370 = 0, $38 = 0, $383 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $67 = 0, $7 = 0, $70 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $spec$select$us$1 = 0, $spec$select$us$2 = 0, $spec$select$us$3 = 0, $spec$select$us$4 = 0, $spec$select$us$5 = 0, $spec$select$us$6 = 0, $spec$select$us$7 = 0, $spec$select$us$8 = 0, $spec$select131$1$v = 0, $spec$select131$2$v = 0, $spec$select131$3$v = 0, $spec$select131$4$v = 0, $spec$select131$5$v = 0, $spec$select131$6$v = 0, $spec$select131$us$1 = 0, $spec$select131$us$2 = 0, $spec$select131$us$3 = 0, $spec$select131$us$4 = 0, $spec$select131$us$5 = 0, $spec$select131$us$6 = 0, dest = 0, sp = 0, stop = 0, $$0122133$us$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $6 = $4 >> 4;
 $7 = $4 & -16;
 do if (($7 | 0) < ($4 | 0)) if (($4 | 0) == 120) {
  dest = $3 + 120 | 0;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $11 = STACKTOP;
  STACKTOP = STACKTOP + 512 | 0;
  $$0123185 = 8;
  $50 = $11;
  $77 = 128;
  break;
 } else _celt_fatal(43454, 43496, 89); else {
  $12 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($7 << 2) | 0) + 15 & -16) | 0;
  if (($4 | 0) > 15) {
   $$0123185 = $6;
   $50 = $12;
   $77 = $7;
  } else {
   $14 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($6 << 2) | 0) + 15 & -16) | 0;
   $15 = $1 >> 1;
   $17 = HEAP8[25520 + ($15 * 9 | 0) >> 0] | 0;
   $19 = HEAP8[25520 + ($15 * 9 | 0) + 1 >> 0] | 0;
   $20 = ($17 & 255) > ($19 & 255);
   $spec$select131$1$v = $20 ? $19 : $17;
   $22 = HEAP8[25520 + ($15 * 9 | 0) + 2 >> 0] | 0;
   $23 = ($spec$select131$1$v & 255) > ($22 & 255);
   $spec$select131$2$v = $23 ? $22 : $spec$select131$1$v;
   $25 = HEAP8[25520 + ($15 * 9 | 0) + 3 >> 0] | 0;
   $26 = ($spec$select131$2$v & 255) > ($25 & 255);
   $spec$select131$3$v = $26 ? $25 : $spec$select131$2$v;
   $28 = HEAP8[25520 + ($15 * 9 | 0) + 4 >> 0] | 0;
   $29 = ($spec$select131$3$v & 255) > ($28 & 255);
   $spec$select131$4$v = $29 ? $28 : $spec$select131$3$v;
   $31 = HEAP8[25520 + ($15 * 9 | 0) + 5 >> 0] | 0;
   $32 = ($spec$select131$4$v & 255) > ($31 & 255);
   $spec$select131$5$v = $32 ? $31 : $spec$select131$4$v;
   $34 = HEAP8[25520 + ($15 * 9 | 0) + 6 >> 0] | 0;
   $35 = ($spec$select131$5$v & 255) > ($34 & 255);
   $spec$select131$6$v = $35 ? $34 : $spec$select131$5$v;
   $37 = HEAP8[25520 + ($15 * 9 | 0) + 7 >> 0] | 0;
   $38 = ($spec$select131$6$v & 255) > ($37 & 255);
   _ec_enc_icdf($0, (($38 ? $37 : $spec$select131$6$v) & 255) > (HEAPU8[25520 + ($15 * 9 | 0) + 8 >> 0] | 0) ? 8 : $38 ? 7 : $35 ? 6 : $32 ? 5 : $29 ? 4 : $26 ? 3 : $23 ? 2 : $20 & 1, 25488 + ($15 * 9 | 0) | 0, 8);
   $308 = $14;
   _silk_encode_signs($0, $3, $4, $1, $2, $308);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $$0167 = 0;
 do {
  $45 = HEAP8[$3 + $$0167 >> 0] | 0;
  HEAP32[$50 + ($$0167 << 2) >> 2] = ($45 | 0) > 0 ? $45 : 0 - $45 | 0;
  $51 = $$0167 | 1;
  $54 = HEAP8[$3 + $51 >> 0] | 0;
  HEAP32[$50 + ($51 << 2) >> 2] = ($54 | 0) > 0 ? $54 : 0 - $54 | 0;
  $59 = $$0167 | 2;
  $62 = HEAP8[$3 + $59 >> 0] | 0;
  HEAP32[$50 + ($59 << 2) >> 2] = ($62 | 0) > 0 ? $62 : 0 - $62 | 0;
  $67 = $$0167 | 3;
  $70 = HEAP8[$3 + $67 >> 0] | 0;
  HEAP32[$50 + ($67 << 2) >> 2] = ($70 | 0) > 0 ? $70 : 0 - $70 | 0;
  $$0167 = $$0167 + 4 | 0;
 } while (($$0167 | 0) < ($77 | 0));
 $78 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0123185 << 2) | 0) + 15 & -16) | 0;
 $79 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$0123185 << 2) | 0) + 15 & -16) | 0;
 $$0124162 = $50;
 $$1163 = 0;
 while (1) {
  $80 = $79 + ($$1163 << 2) | 0;
  HEAP32[$80 >> 2] = 0;
  $81 = $78 + ($$1163 << 2) | 0;
  $82 = $$0124162 + 4 | 0;
  $83 = $$0124162 + 8 | 0;
  $84 = $$0124162 + 12 | 0;
  $85 = $$0124162 + 16 | 0;
  $86 = $$0124162 + 20 | 0;
  $87 = $$0124162 + 24 | 0;
  $88 = $$0124162 + 28 | 0;
  $89 = $$0124162 + 32 | 0;
  $90 = $$0124162 + 36 | 0;
  $91 = $$0124162 + 40 | 0;
  $92 = $$0124162 + 44 | 0;
  $93 = $$0124162 + 48 | 0;
  $94 = $$0124162 + 52 | 0;
  $95 = $$0124162 + 56 | 0;
  $96 = $$0124162 + 60 | 0;
  while (1) {
   $97 = _combine_and_check($5, $$0124162, 8, 8) | 0;
   $99 = (_combine_and_check($5, $5, 10, 4) | 0) + $97 | 0;
   $101 = $99 + (_combine_and_check($5, $5, 12, 2) | 0) | 0;
   if (($101 | 0) == (0 - (_combine_and_check($81, $5, 16, 1) | 0) | 0)) break;
   HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
   HEAP32[$$0124162 >> 2] = HEAP32[$$0124162 >> 2] >> 1;
   HEAP32[$82 >> 2] = HEAP32[$82 >> 2] >> 1;
   HEAP32[$83 >> 2] = HEAP32[$83 >> 2] >> 1;
   HEAP32[$84 >> 2] = HEAP32[$84 >> 2] >> 1;
   HEAP32[$85 >> 2] = HEAP32[$85 >> 2] >> 1;
   HEAP32[$86 >> 2] = HEAP32[$86 >> 2] >> 1;
   HEAP32[$87 >> 2] = HEAP32[$87 >> 2] >> 1;
   HEAP32[$88 >> 2] = HEAP32[$88 >> 2] >> 1;
   HEAP32[$89 >> 2] = HEAP32[$89 >> 2] >> 1;
   HEAP32[$90 >> 2] = HEAP32[$90 >> 2] >> 1;
   HEAP32[$91 >> 2] = HEAP32[$91 >> 2] >> 1;
   HEAP32[$92 >> 2] = HEAP32[$92 >> 2] >> 1;
   HEAP32[$93 >> 2] = HEAP32[$93 >> 2] >> 1;
   HEAP32[$94 >> 2] = HEAP32[$94 >> 2] >> 1;
   HEAP32[$95 >> 2] = HEAP32[$95 >> 2] >> 1;
   HEAP32[$96 >> 2] = HEAP32[$96 >> 2] >> 1;
  }
  $$1163 = $$1163 + 1 | 0;
  if (($$1163 | 0) == ($$0123185 | 0)) break; else $$0124162 = $$0124162 + 64 | 0;
 }
 $141 = $1 >> 1;
 $$0125152$us = HEAPU8[25520 + ($141 * 9 | 0) >> 0] | 0;
 $$2153$us = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us << 2) >> 2] | 0) > 0) $$pn$us = 255; else $$pn$us = HEAPU8[25312 + (HEAP32[$78 + ($$2153$us << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us = $$pn$us + $$0125152$us | 0;
  $$2153$us = $$2153$us + 1 | 0;
 } while (($$2153$us | 0) != ($$0123185 | 0));
 $$0125152$us$1 = HEAPU8[25520 + ($141 * 9 | 0) + 1 >> 0] | 0;
 $$2153$us$1 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$1 << 2) >> 2] | 0) > 0) $$pn$us$1 = 255; else $$pn$us$1 = HEAPU8[25330 + (HEAP32[$78 + ($$2153$us$1 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$1 = $$pn$us$1 + $$0125152$us$1 | 0;
  $$2153$us$1 = $$2153$us$1 + 1 | 0;
 } while (($$2153$us$1 | 0) != ($$0123185 | 0));
 $318 = $$0125152$us$1 >>> 0 < $$0125152$us >>> 0;
 $spec$select$us$1 = $318 & 1;
 $$0125152$us$2 = HEAPU8[25520 + ($141 * 9 | 0) + 2 >> 0] | 0;
 $$2153$us$2 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$2 << 2) >> 2] | 0) > 0) $$pn$us$2 = 224; else $$pn$us$2 = HEAPU8[25348 + (HEAP32[$78 + ($$2153$us$2 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$2 = $$pn$us$2 + $$0125152$us$2 | 0;
  $$2153$us$2 = $$2153$us$2 + 1 | 0;
 } while (($$2153$us$2 | 0) != ($$0123185 | 0));
 $spec$select131$us$1 = $318 ? $$0125152$us$1 : $$0125152$us;
 $331 = ($$0125152$us$2 | 0) < ($spec$select131$us$1 | 0);
 $spec$select$us$2 = $331 ? 2 : $spec$select$us$1;
 $$0125152$us$3 = HEAPU8[25520 + ($141 * 9 | 0) + 3 >> 0] | 0;
 $$2153$us$3 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$3 << 2) >> 2] | 0) > 0) $$pn$us$3 = 255; else $$pn$us$3 = HEAPU8[25366 + (HEAP32[$78 + ($$2153$us$3 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$3 = $$pn$us$3 + $$0125152$us$3 | 0;
  $$2153$us$3 = $$2153$us$3 + 1 | 0;
 } while (($$2153$us$3 | 0) != ($$0123185 | 0));
 $spec$select131$us$2 = $331 ? $$0125152$us$2 : $spec$select131$us$1;
 $344 = ($$0125152$us$3 | 0) < ($spec$select131$us$2 | 0);
 $spec$select$us$3 = $344 ? 3 : $spec$select$us$2;
 $$0125152$us$4 = HEAPU8[25520 + ($141 * 9 | 0) + 4 >> 0] | 0;
 $$2153$us$4 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$4 << 2) >> 2] | 0) > 0) $$pn$us$4 = 255; else $$pn$us$4 = HEAPU8[25384 + (HEAP32[$78 + ($$2153$us$4 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$4 = $$pn$us$4 + $$0125152$us$4 | 0;
  $$2153$us$4 = $$2153$us$4 + 1 | 0;
 } while (($$2153$us$4 | 0) != ($$0123185 | 0));
 $spec$select131$us$3 = $344 ? $$0125152$us$3 : $spec$select131$us$2;
 $357 = ($$0125152$us$4 | 0) < ($spec$select131$us$3 | 0);
 $spec$select$us$4 = $357 ? 4 : $spec$select$us$3;
 $$0125152$us$5 = HEAPU8[25520 + ($141 * 9 | 0) + 5 >> 0] | 0;
 $$2153$us$5 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$5 << 2) >> 2] | 0) > 0) $$pn$us$5 = 150; else $$pn$us$5 = HEAPU8[25402 + (HEAP32[$78 + ($$2153$us$5 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$5 = $$pn$us$5 + $$0125152$us$5 | 0;
  $$2153$us$5 = $$2153$us$5 + 1 | 0;
 } while (($$2153$us$5 | 0) != ($$0123185 | 0));
 $spec$select131$us$4 = $357 ? $$0125152$us$4 : $spec$select131$us$3;
 $370 = ($$0125152$us$5 | 0) < ($spec$select131$us$4 | 0);
 $spec$select$us$5 = $370 ? 5 : $spec$select$us$4;
 $$0125152$us$6 = HEAPU8[25520 + ($141 * 9 | 0) + 6 >> 0] | 0;
 $$2153$us$6 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$6 << 2) >> 2] | 0) > 0) $$pn$us$6 = 255; else $$pn$us$6 = HEAPU8[25420 + (HEAP32[$78 + ($$2153$us$6 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$6 = $$pn$us$6 + $$0125152$us$6 | 0;
  $$2153$us$6 = $$2153$us$6 + 1 | 0;
 } while (($$2153$us$6 | 0) != ($$0123185 | 0));
 $spec$select131$us$5 = $370 ? $$0125152$us$5 : $spec$select131$us$4;
 $383 = ($$0125152$us$6 | 0) < ($spec$select131$us$5 | 0);
 $spec$select$us$6 = $383 ? 6 : $spec$select$us$5;
 $$0125152$us$7 = HEAPU8[25520 + ($141 * 9 | 0) + 7 >> 0] | 0;
 $$2153$us$7 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$7 << 2) >> 2] | 0) > 0) $$pn$us$7 = 224; else $$pn$us$7 = HEAPU8[25438 + (HEAP32[$78 + ($$2153$us$7 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$7 = $$pn$us$7 + $$0125152$us$7 | 0;
  $$2153$us$7 = $$2153$us$7 + 1 | 0;
 } while (($$2153$us$7 | 0) != ($$0123185 | 0));
 $spec$select131$us$6 = $383 ? $$0125152$us$6 : $spec$select131$us$5;
 $157 = ($$0125152$us$7 | 0) < ($spec$select131$us$6 | 0);
 $spec$select$us$7 = $157 ? 7 : $spec$select$us$6;
 $$0125152$us$8 = HEAPU8[25520 + ($141 * 9 | 0) + 8 >> 0] | 0;
 $$2153$us$8 = 0;
 do {
  if ((HEAP32[$79 + ($$2153$us$8 << 2) >> 2] | 0) > 0) $$pn$us$8 = 131; else $$pn$us$8 = HEAPU8[25456 + (HEAP32[$78 + ($$2153$us$8 << 2) >> 2] | 0) >> 0] | 0;
  $$0125152$us$8 = $$pn$us$8 + $$0125152$us$8 | 0;
  $$2153$us$8 = $$2153$us$8 + 1 | 0;
 } while (($$2153$us$8 | 0) != ($$0123185 | 0));
 $spec$select$us$8 = ($$0125152$us$8 | 0) < (($157 ? $$0125152$us$7 : $spec$select131$us$6) | 0) ? 8 : $spec$select$us$7;
 _ec_enc_icdf($0, $spec$select$us$8, 25488 + ($141 * 9 | 0) | 0, 8);
 $160 = 25120 + ($spec$select$us$8 * 18 | 0) | 0;
 $$3147 = 0;
 do {
  $162 = HEAP32[$79 + ($$3147 << 2) >> 2] | 0;
  if (!$162) _ec_enc_icdf($0, HEAP32[$78 + ($$3147 << 2) >> 2] | 0, $160, 8); else {
   _ec_enc_icdf($0, 17, $160, 8);
   $166 = $162 + -1 | 0;
   if (($162 | 0) > 1) {
    $$2120143 = 0;
    do {
     _ec_enc_icdf($0, 17, 25282, 8);
     $$2120143 = $$2120143 + 1 | 0;
    } while (($$2120143 | 0) != ($166 | 0));
   }
   _ec_enc_icdf($0, HEAP32[$78 + ($$3147 << 2) >> 2] | 0, 25282, 8);
  }
  $$3147 = $$3147 + 1 | 0;
 } while (($$3147 | 0) != ($$0123185 | 0));
 $$4139 = 0;
 do {
  if ((HEAP32[$78 + ($$4139 << 2) >> 2] | 0) > 0) _silk_shell_encoder($0, $50 + ($$4139 << 4 << 2) | 0);
  $$4139 = $$4139 + 1 | 0;
 } while (($$4139 | 0) != ($$0123185 | 0));
 $$5135 = 0;
 do {
  $179 = HEAP32[$79 + ($$5135 << 2) >> 2] | 0;
  do if (($179 | 0) > 0) {
   $182 = $3 + ($$5135 << 4) | 0;
   if (($179 | 0) == 1) {
    $197 = HEAP8[$182 >> 0] | 0;
    _ec_enc_icdf($0, (($197 | 0) > 0 ? $197 : 0 - $197 | 0) & 1, 43926, 8);
    $204 = HEAP8[$182 + 1 >> 0] | 0;
    _ec_enc_icdf($0, (($204 | 0) > 0 ? $204 : 0 - $204 | 0) & 1, 43926, 8);
    $211 = HEAP8[$182 + 2 >> 0] | 0;
    _ec_enc_icdf($0, (($211 | 0) > 0 ? $211 : 0 - $211 | 0) & 1, 43926, 8);
    $218 = HEAP8[$182 + 3 >> 0] | 0;
    _ec_enc_icdf($0, (($218 | 0) > 0 ? $218 : 0 - $218 | 0) & 1, 43926, 8);
    $225 = HEAP8[$182 + 4 >> 0] | 0;
    _ec_enc_icdf($0, (($225 | 0) > 0 ? $225 : 0 - $225 | 0) & 1, 43926, 8);
    $232 = HEAP8[$182 + 5 >> 0] | 0;
    _ec_enc_icdf($0, (($232 | 0) > 0 ? $232 : 0 - $232 | 0) & 1, 43926, 8);
    $239 = HEAP8[$182 + 6 >> 0] | 0;
    _ec_enc_icdf($0, (($239 | 0) > 0 ? $239 : 0 - $239 | 0) & 1, 43926, 8);
    $246 = HEAP8[$182 + 7 >> 0] | 0;
    _ec_enc_icdf($0, (($246 | 0) > 0 ? $246 : 0 - $246 | 0) & 1, 43926, 8);
    $253 = HEAP8[$182 + 8 >> 0] | 0;
    _ec_enc_icdf($0, (($253 | 0) > 0 ? $253 : 0 - $253 | 0) & 1, 43926, 8);
    $260 = HEAP8[$182 + 9 >> 0] | 0;
    _ec_enc_icdf($0, (($260 | 0) > 0 ? $260 : 0 - $260 | 0) & 1, 43926, 8);
    $267 = HEAP8[$182 + 10 >> 0] | 0;
    _ec_enc_icdf($0, (($267 | 0) > 0 ? $267 : 0 - $267 | 0) & 1, 43926, 8);
    $274 = HEAP8[$182 + 11 >> 0] | 0;
    _ec_enc_icdf($0, (($274 | 0) > 0 ? $274 : 0 - $274 | 0) & 1, 43926, 8);
    $281 = HEAP8[$182 + 12 >> 0] | 0;
    _ec_enc_icdf($0, (($281 | 0) > 0 ? $281 : 0 - $281 | 0) & 1, 43926, 8);
    $288 = HEAP8[$182 + 13 >> 0] | 0;
    _ec_enc_icdf($0, (($288 | 0) > 0 ? $288 : 0 - $288 | 0) & 1, 43926, 8);
    $295 = HEAP8[$182 + 14 >> 0] | 0;
    _ec_enc_icdf($0, (($295 | 0) > 0 ? $295 : 0 - $295 | 0) & 1, 43926, 8);
    $302 = HEAP8[$182 + 15 >> 0] | 0;
    _ec_enc_icdf($0, (($302 | 0) > 0 ? $302 : 0 - $302 | 0) & 1, 43926, 8);
    break;
   }
   $$3121134$us = 0;
   do {
    $186 = HEAP8[$182 + $$3121134$us >> 0] | 0;
    $190 = (($186 | 0) > 0 ? $186 : 0 - $186 | 0) << 24 >> 24;
    $$0122133$us$in = $179;
    do {
     $$0122133$us$in$looptemp = $$0122133$us$in;
     $$0122133$us$in = $$0122133$us$in + -1 | 0;
     _ec_enc_icdf($0, $190 >>> $$0122133$us$in & 1, 43926, 8);
    } while (($$0122133$us$in$looptemp | 0) > 2);
    _ec_enc_icdf($0, $190 & 1, 43926, 8);
    $$3121134$us = $$3121134$us + 1 | 0;
   } while (($$3121134$us | 0) != 16);
  } while (0);
  $$5135 = $$5135 + 1 | 0;
 } while (($$5135 | 0) != ($$0123185 | 0));
 $308 = $78;
 _silk_encode_signs($0, $3, $4, $1, $2, $308);
 STACKTOP = sp;
 return;
}

function _silk_resampler_private_down_FIR_INTERPOL($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0337344 = 0, $$0345 = 0, $$1338346 = 0, $$1347 = 0, $$2339350 = 0, $$2351 = 0, $$3 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $116 = 0, $118 = 0, $122 = 0, $123 = 0, $126 = 0, $128 = 0, $132 = 0, $133 = 0, $136 = 0, $138 = 0, $14 = 0, $142 = 0, $143 = 0, $146 = 0, $148 = 0, $152 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $166 = 0, $168 = 0, $17 = 0, $172 = 0, $173 = 0, $176 = 0, $178 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $20 = 0, $21 = 0, $231 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $256 = 0, $26 = 0, $260 = 0, $263 = 0, $264 = 0, $267 = 0, $272 = 0, $275 = 0, $276 = 0, $279 = 0, $284 = 0, $287 = 0, $288 = 0, $291 = 0, $296 = 0, $299 = 0, $30 = 0, $300 = 0, $303 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $315 = 0, $320 = 0, $323 = 0, $324 = 0, $327 = 0, $332 = 0, $335 = 0, $336 = 0, $339 = 0, $34 = 0, $344 = 0, $347 = 0, $348 = 0, $351 = 0, $356 = 0, $359 = 0, $36 = 0, $360 = 0, $363 = 0, $368 = 0, $371 = 0, $372 = 0, $375 = 0, $380 = 0, $383 = 0, $384 = 0, $387 = 0, $392 = 0, $395 = 0, $40 = 0, $41 = 0, $422 = 0, $431 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $453 = 0, $457 = 0, $46 = 0, $460 = 0, $461 = 0, $464 = 0, $469 = 0, $472 = 0, $473 = 0, $476 = 0, $481 = 0, $484 = 0, $485 = 0, $488 = 0, $493 = 0, $496 = 0, $497 = 0, $50 = 0, $500 = 0, $505 = 0, $508 = 0, $509 = 0, $51 = 0, $512 = 0, $517 = 0, $520 = 0, $521 = 0, $524 = 0, $529 = 0, $532 = 0, $533 = 0, $536 = 0, $54 = 0, $541 = 0, $544 = 0, $545 = 0, $548 = 0, $553 = 0, $556 = 0, $557 = 0, $56 = 0, $560 = 0, $565 = 0, $568 = 0, $569 = 0, $572 = 0, $577 = 0, $580 = 0, $581 = 0, $584 = 0, $589 = 0, $592 = 0, $593 = 0, $596 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $608 = 0, $61 = 0, $613 = 0, $616 = 0, $617 = 0, $620 = 0, $625 = 0, $628 = 0, $629 = 0, $632 = 0, $637 = 0, $64 = 0, $640 = 0, $641 = 0, $644 = 0, $649 = 0, $652 = 0, $653 = 0, $656 = 0, $66 = 0, $661 = 0, $664 = 0, $70 = 0, $703 = 0, $71 = 0, $712 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0;
 switch ($3 | 0) {
 case 18:
  {
   if (($5 | 0) <= 0) {
    $$3 = $0;
    return $$3 | 0;
   }
   $8 = $4 << 16 >> 16;
   $9 = $4 + -1 | 0;
   $$0337344 = 0;
   $$0345 = $0;
   while (1) {
    $11 = $1 + ($$0337344 >> 16 << 2) | 0;
    $14 = (Math_imul($$0337344 & 65535, $8) | 0) >> 16;
    $16 = $2 + ($14 * 9 << 1) | 0;
    $17 = HEAP32[$11 >> 2] | 0;
    $20 = HEAP16[$16 >> 1] | 0;
    $21 = Math_imul($17 >> 16, $20) | 0;
    $24 = (Math_imul($17 & 65535, $20) | 0) >> 16;
    $26 = HEAP32[$11 + 4 >> 2] | 0;
    $30 = HEAP16[$16 + 2 >> 1] | 0;
    $31 = Math_imul($26 >> 16, $30) | 0;
    $34 = (Math_imul($26 & 65535, $30) | 0) >> 16;
    $36 = HEAP32[$11 + 8 >> 2] | 0;
    $40 = HEAP16[$16 + 4 >> 1] | 0;
    $41 = Math_imul($36 >> 16, $40) | 0;
    $44 = (Math_imul($36 & 65535, $40) | 0) >> 16;
    $46 = HEAP32[$11 + 12 >> 2] | 0;
    $50 = HEAP16[$16 + 6 >> 1] | 0;
    $51 = Math_imul($46 >> 16, $50) | 0;
    $54 = (Math_imul($46 & 65535, $50) | 0) >> 16;
    $56 = HEAP32[$11 + 16 >> 2] | 0;
    $60 = HEAP16[$16 + 8 >> 1] | 0;
    $61 = Math_imul($56 >> 16, $60) | 0;
    $64 = (Math_imul($56 & 65535, $60) | 0) >> 16;
    $66 = HEAP32[$11 + 20 >> 2] | 0;
    $70 = HEAP16[$16 + 10 >> 1] | 0;
    $71 = Math_imul($66 >> 16, $70) | 0;
    $74 = (Math_imul($66 & 65535, $70) | 0) >> 16;
    $76 = HEAP32[$11 + 24 >> 2] | 0;
    $80 = HEAP16[$16 + 12 >> 1] | 0;
    $81 = Math_imul($76 >> 16, $80) | 0;
    $84 = (Math_imul($76 & 65535, $80) | 0) >> 16;
    $86 = HEAP32[$11 + 28 >> 2] | 0;
    $90 = HEAP16[$16 + 14 >> 1] | 0;
    $91 = Math_imul($86 >> 16, $90) | 0;
    $94 = (Math_imul($86 & 65535, $90) | 0) >> 16;
    $96 = HEAP32[$11 + 32 >> 2] | 0;
    $100 = HEAP16[$16 + 16 >> 1] | 0;
    $101 = Math_imul($96 >> 16, $100) | 0;
    $104 = (Math_imul($96 & 65535, $100) | 0) >> 16;
    $107 = $2 + (($9 - $14 | 0) * 9 << 1) | 0;
    $109 = HEAP32[$11 + 68 >> 2] | 0;
    $112 = HEAP16[$107 >> 1] | 0;
    $113 = Math_imul($109 >> 16, $112) | 0;
    $116 = (Math_imul($109 & 65535, $112) | 0) >> 16;
    $118 = HEAP32[$11 + 64 >> 2] | 0;
    $122 = HEAP16[$107 + 2 >> 1] | 0;
    $123 = Math_imul($118 >> 16, $122) | 0;
    $126 = (Math_imul($118 & 65535, $122) | 0) >> 16;
    $128 = HEAP32[$11 + 60 >> 2] | 0;
    $132 = HEAP16[$107 + 4 >> 1] | 0;
    $133 = Math_imul($128 >> 16, $132) | 0;
    $136 = (Math_imul($128 & 65535, $132) | 0) >> 16;
    $138 = HEAP32[$11 + 56 >> 2] | 0;
    $142 = HEAP16[$107 + 6 >> 1] | 0;
    $143 = Math_imul($138 >> 16, $142) | 0;
    $146 = (Math_imul($138 & 65535, $142) | 0) >> 16;
    $148 = HEAP32[$11 + 52 >> 2] | 0;
    $152 = HEAP16[$107 + 8 >> 1] | 0;
    $153 = Math_imul($148 >> 16, $152) | 0;
    $156 = (Math_imul($148 & 65535, $152) | 0) >> 16;
    $158 = HEAP32[$11 + 48 >> 2] | 0;
    $162 = HEAP16[$107 + 10 >> 1] | 0;
    $163 = Math_imul($158 >> 16, $162) | 0;
    $166 = (Math_imul($158 & 65535, $162) | 0) >> 16;
    $168 = HEAP32[$11 + 44 >> 2] | 0;
    $172 = HEAP16[$107 + 12 >> 1] | 0;
    $173 = Math_imul($168 >> 16, $172) | 0;
    $176 = (Math_imul($168 & 65535, $172) | 0) >> 16;
    $178 = HEAP32[$11 + 40 >> 2] | 0;
    $182 = HEAP16[$107 + 14 >> 1] | 0;
    $183 = Math_imul($178 >> 16, $182) | 0;
    $186 = (Math_imul($178 & 65535, $182) | 0) >> 16;
    $188 = HEAP32[$11 + 36 >> 2] | 0;
    $192 = HEAP16[$107 + 16 >> 1] | 0;
    $231 = $24 + $21 + $31 + $34 + $41 + $44 + $51 + $54 + $61 + $64 + $71 + $74 + $81 + $84 + $91 + $94 + $101 + $104 + $113 + $116 + $123 + $126 + $133 + $136 + $143 + $146 + $153 + $156 + $163 + $166 + $173 + $176 + $183 + $186 + (Math_imul($188 >> 16, $192) | 0) + ((Math_imul($188 & 65535, $192) | 0) >> 16) | 0;
    $240 = $$0345 + 2 | 0;
    HEAP16[$$0345 >> 1] = ($231 | 0) > 2097119 ? 32767 : ($231 | 0) < -2097184 ? -32768 : (($231 >>> 5) + 1 | 0) >>> 1 & 65535;
    $$0337344 = $$0337344 + $6 | 0;
    if (($$0337344 | 0) >= ($5 | 0)) {
     $$3 = $240;
     break;
    } else $$0345 = $240;
   }
   return $$3 | 0;
  }
 case 24:
  {
   if (($5 | 0) <= 0) {
    $$3 = $0;
    return $$3 | 0;
   }
   $244 = $2 + 2 | 0;
   $245 = $2 + 4 | 0;
   $246 = $2 + 6 | 0;
   $247 = $2 + 8 | 0;
   $248 = $2 + 10 | 0;
   $249 = $2 + 12 | 0;
   $250 = $2 + 14 | 0;
   $251 = $2 + 16 | 0;
   $252 = $2 + 18 | 0;
   $253 = $2 + 20 | 0;
   $254 = $2 + 22 | 0;
   $$1338346 = 0;
   $$1347 = $0;
   while (1) {
    $256 = $1 + ($$1338346 >> 16 << 2) | 0;
    $260 = (HEAP32[$256 + 92 >> 2] | 0) + (HEAP32[$256 >> 2] | 0) | 0;
    $263 = HEAP16[$2 >> 1] | 0;
    $264 = Math_imul($260 >> 16, $263) | 0;
    $267 = (Math_imul($260 & 65535, $263) | 0) >> 16;
    $272 = (HEAP32[$256 + 88 >> 2] | 0) + (HEAP32[$256 + 4 >> 2] | 0) | 0;
    $275 = HEAP16[$244 >> 1] | 0;
    $276 = Math_imul($272 >> 16, $275) | 0;
    $279 = (Math_imul($272 & 65535, $275) | 0) >> 16;
    $284 = (HEAP32[$256 + 84 >> 2] | 0) + (HEAP32[$256 + 8 >> 2] | 0) | 0;
    $287 = HEAP16[$245 >> 1] | 0;
    $288 = Math_imul($284 >> 16, $287) | 0;
    $291 = (Math_imul($284 & 65535, $287) | 0) >> 16;
    $296 = (HEAP32[$256 + 80 >> 2] | 0) + (HEAP32[$256 + 12 >> 2] | 0) | 0;
    $299 = HEAP16[$246 >> 1] | 0;
    $300 = Math_imul($296 >> 16, $299) | 0;
    $303 = (Math_imul($296 & 65535, $299) | 0) >> 16;
    $308 = (HEAP32[$256 + 76 >> 2] | 0) + (HEAP32[$256 + 16 >> 2] | 0) | 0;
    $311 = HEAP16[$247 >> 1] | 0;
    $312 = Math_imul($308 >> 16, $311) | 0;
    $315 = (Math_imul($308 & 65535, $311) | 0) >> 16;
    $320 = (HEAP32[$256 + 72 >> 2] | 0) + (HEAP32[$256 + 20 >> 2] | 0) | 0;
    $323 = HEAP16[$248 >> 1] | 0;
    $324 = Math_imul($320 >> 16, $323) | 0;
    $327 = (Math_imul($320 & 65535, $323) | 0) >> 16;
    $332 = (HEAP32[$256 + 68 >> 2] | 0) + (HEAP32[$256 + 24 >> 2] | 0) | 0;
    $335 = HEAP16[$249 >> 1] | 0;
    $336 = Math_imul($332 >> 16, $335) | 0;
    $339 = (Math_imul($332 & 65535, $335) | 0) >> 16;
    $344 = (HEAP32[$256 + 64 >> 2] | 0) + (HEAP32[$256 + 28 >> 2] | 0) | 0;
    $347 = HEAP16[$250 >> 1] | 0;
    $348 = Math_imul($344 >> 16, $347) | 0;
    $351 = (Math_imul($344 & 65535, $347) | 0) >> 16;
    $356 = (HEAP32[$256 + 60 >> 2] | 0) + (HEAP32[$256 + 32 >> 2] | 0) | 0;
    $359 = HEAP16[$251 >> 1] | 0;
    $360 = Math_imul($356 >> 16, $359) | 0;
    $363 = (Math_imul($356 & 65535, $359) | 0) >> 16;
    $368 = (HEAP32[$256 + 56 >> 2] | 0) + (HEAP32[$256 + 36 >> 2] | 0) | 0;
    $371 = HEAP16[$252 >> 1] | 0;
    $372 = Math_imul($368 >> 16, $371) | 0;
    $375 = (Math_imul($368 & 65535, $371) | 0) >> 16;
    $380 = (HEAP32[$256 + 52 >> 2] | 0) + (HEAP32[$256 + 40 >> 2] | 0) | 0;
    $383 = HEAP16[$253 >> 1] | 0;
    $384 = Math_imul($380 >> 16, $383) | 0;
    $387 = (Math_imul($380 & 65535, $383) | 0) >> 16;
    $392 = (HEAP32[$256 + 48 >> 2] | 0) + (HEAP32[$256 + 44 >> 2] | 0) | 0;
    $395 = HEAP16[$254 >> 1] | 0;
    $422 = $267 + $264 + $276 + $279 + $288 + $291 + $300 + $303 + $312 + $315 + $324 + $327 + $336 + $339 + $348 + $351 + $360 + $363 + $372 + $375 + $384 + $387 + (Math_imul($392 >> 16, $395) | 0) + ((Math_imul($392 & 65535, $395) | 0) >> 16) | 0;
    $431 = $$1347 + 2 | 0;
    HEAP16[$$1347 >> 1] = ($422 | 0) > 2097119 ? 32767 : ($422 | 0) < -2097184 ? -32768 : (($422 >>> 5) + 1 | 0) >>> 1 & 65535;
    $$1338346 = $$1338346 + $6 | 0;
    if (($$1338346 | 0) >= ($5 | 0)) {
     $$3 = $431;
     break;
    } else $$1347 = $431;
   }
   return $$3 | 0;
  }
 case 36:
  {
   if (($5 | 0) <= 0) {
    $$3 = $0;
    return $$3 | 0;
   }
   $435 = $2 + 2 | 0;
   $436 = $2 + 4 | 0;
   $437 = $2 + 6 | 0;
   $438 = $2 + 8 | 0;
   $439 = $2 + 10 | 0;
   $440 = $2 + 12 | 0;
   $441 = $2 + 14 | 0;
   $442 = $2 + 16 | 0;
   $443 = $2 + 18 | 0;
   $444 = $2 + 20 | 0;
   $445 = $2 + 22 | 0;
   $446 = $2 + 24 | 0;
   $447 = $2 + 26 | 0;
   $448 = $2 + 28 | 0;
   $449 = $2 + 30 | 0;
   $450 = $2 + 32 | 0;
   $451 = $2 + 34 | 0;
   $$2339350 = 0;
   $$2351 = $0;
   while (1) {
    $453 = $1 + ($$2339350 >> 16 << 2) | 0;
    $457 = (HEAP32[$453 + 140 >> 2] | 0) + (HEAP32[$453 >> 2] | 0) | 0;
    $460 = HEAP16[$2 >> 1] | 0;
    $461 = Math_imul($457 >> 16, $460) | 0;
    $464 = (Math_imul($457 & 65535, $460) | 0) >> 16;
    $469 = (HEAP32[$453 + 136 >> 2] | 0) + (HEAP32[$453 + 4 >> 2] | 0) | 0;
    $472 = HEAP16[$435 >> 1] | 0;
    $473 = Math_imul($469 >> 16, $472) | 0;
    $476 = (Math_imul($469 & 65535, $472) | 0) >> 16;
    $481 = (HEAP32[$453 + 132 >> 2] | 0) + (HEAP32[$453 + 8 >> 2] | 0) | 0;
    $484 = HEAP16[$436 >> 1] | 0;
    $485 = Math_imul($481 >> 16, $484) | 0;
    $488 = (Math_imul($481 & 65535, $484) | 0) >> 16;
    $493 = (HEAP32[$453 + 128 >> 2] | 0) + (HEAP32[$453 + 12 >> 2] | 0) | 0;
    $496 = HEAP16[$437 >> 1] | 0;
    $497 = Math_imul($493 >> 16, $496) | 0;
    $500 = (Math_imul($493 & 65535, $496) | 0) >> 16;
    $505 = (HEAP32[$453 + 124 >> 2] | 0) + (HEAP32[$453 + 16 >> 2] | 0) | 0;
    $508 = HEAP16[$438 >> 1] | 0;
    $509 = Math_imul($505 >> 16, $508) | 0;
    $512 = (Math_imul($505 & 65535, $508) | 0) >> 16;
    $517 = (HEAP32[$453 + 120 >> 2] | 0) + (HEAP32[$453 + 20 >> 2] | 0) | 0;
    $520 = HEAP16[$439 >> 1] | 0;
    $521 = Math_imul($517 >> 16, $520) | 0;
    $524 = (Math_imul($517 & 65535, $520) | 0) >> 16;
    $529 = (HEAP32[$453 + 116 >> 2] | 0) + (HEAP32[$453 + 24 >> 2] | 0) | 0;
    $532 = HEAP16[$440 >> 1] | 0;
    $533 = Math_imul($529 >> 16, $532) | 0;
    $536 = (Math_imul($529 & 65535, $532) | 0) >> 16;
    $541 = (HEAP32[$453 + 112 >> 2] | 0) + (HEAP32[$453 + 28 >> 2] | 0) | 0;
    $544 = HEAP16[$441 >> 1] | 0;
    $545 = Math_imul($541 >> 16, $544) | 0;
    $548 = (Math_imul($541 & 65535, $544) | 0) >> 16;
    $553 = (HEAP32[$453 + 108 >> 2] | 0) + (HEAP32[$453 + 32 >> 2] | 0) | 0;
    $556 = HEAP16[$442 >> 1] | 0;
    $557 = Math_imul($553 >> 16, $556) | 0;
    $560 = (Math_imul($553 & 65535, $556) | 0) >> 16;
    $565 = (HEAP32[$453 + 104 >> 2] | 0) + (HEAP32[$453 + 36 >> 2] | 0) | 0;
    $568 = HEAP16[$443 >> 1] | 0;
    $569 = Math_imul($565 >> 16, $568) | 0;
    $572 = (Math_imul($565 & 65535, $568) | 0) >> 16;
    $577 = (HEAP32[$453 + 100 >> 2] | 0) + (HEAP32[$453 + 40 >> 2] | 0) | 0;
    $580 = HEAP16[$444 >> 1] | 0;
    $581 = Math_imul($577 >> 16, $580) | 0;
    $584 = (Math_imul($577 & 65535, $580) | 0) >> 16;
    $589 = (HEAP32[$453 + 96 >> 2] | 0) + (HEAP32[$453 + 44 >> 2] | 0) | 0;
    $592 = HEAP16[$445 >> 1] | 0;
    $593 = Math_imul($589 >> 16, $592) | 0;
    $596 = (Math_imul($589 & 65535, $592) | 0) >> 16;
    $601 = (HEAP32[$453 + 92 >> 2] | 0) + (HEAP32[$453 + 48 >> 2] | 0) | 0;
    $604 = HEAP16[$446 >> 1] | 0;
    $605 = Math_imul($601 >> 16, $604) | 0;
    $608 = (Math_imul($601 & 65535, $604) | 0) >> 16;
    $613 = (HEAP32[$453 + 88 >> 2] | 0) + (HEAP32[$453 + 52 >> 2] | 0) | 0;
    $616 = HEAP16[$447 >> 1] | 0;
    $617 = Math_imul($613 >> 16, $616) | 0;
    $620 = (Math_imul($613 & 65535, $616) | 0) >> 16;
    $625 = (HEAP32[$453 + 84 >> 2] | 0) + (HEAP32[$453 + 56 >> 2] | 0) | 0;
    $628 = HEAP16[$448 >> 1] | 0;
    $629 = Math_imul($625 >> 16, $628) | 0;
    $632 = (Math_imul($625 & 65535, $628) | 0) >> 16;
    $637 = (HEAP32[$453 + 80 >> 2] | 0) + (HEAP32[$453 + 60 >> 2] | 0) | 0;
    $640 = HEAP16[$449 >> 1] | 0;
    $641 = Math_imul($637 >> 16, $640) | 0;
    $644 = (Math_imul($637 & 65535, $640) | 0) >> 16;
    $649 = (HEAP32[$453 + 76 >> 2] | 0) + (HEAP32[$453 + 64 >> 2] | 0) | 0;
    $652 = HEAP16[$450 >> 1] | 0;
    $653 = Math_imul($649 >> 16, $652) | 0;
    $656 = (Math_imul($649 & 65535, $652) | 0) >> 16;
    $661 = (HEAP32[$453 + 72 >> 2] | 0) + (HEAP32[$453 + 68 >> 2] | 0) | 0;
    $664 = HEAP16[$451 >> 1] | 0;
    $703 = $464 + $461 + $473 + $476 + $485 + $488 + $497 + $500 + $509 + $512 + $521 + $524 + $533 + $536 + $545 + $548 + $557 + $560 + $569 + $572 + $581 + $584 + $593 + $596 + $605 + $608 + $617 + $620 + $629 + $632 + $641 + $644 + $653 + $656 + (Math_imul($661 >> 16, $664) | 0) + ((Math_imul($661 & 65535, $664) | 0) >> 16) | 0;
    $712 = $$2351 + 2 | 0;
    HEAP16[$$2351 >> 1] = ($703 | 0) > 2097119 ? 32767 : ($703 | 0) < -2097184 ? -32768 : (($703 >>> 5) + 1 | 0) >>> 1 & 65535;
    $$2339350 = $$2339350 + $6 | 0;
    if (($$2339350 | 0) >= ($5 | 0)) {
     $$3 = $712;
     break;
    } else $$2351 = $712;
   }
   return $$3 | 0;
  }
 default:
  _celt_fatal(47580, 45533, 139);
 }
 return 0;
}

function _silk_PLC_conceal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0297345 = 0, $$0298$lcssa = 0, $$0298344 = 0, $$0299343 = 0, $$0305$lcssa = 0, $$0305341 = 0, $$0307$lcssa = 0, $$0307324 = 0, $$0308331 = 0, $$0309 = 0, $$1296325 = 0, $$1300$lcssa = 0, $$1300333 = 0, $$1302 = 0, $$1306$lcssa = 0, $$1306332 = 0, $$1311 = 0, $$1352 = 0, $$2303$lcssa = 0, $$2303342 = 0, $$2334 = 0, $$3304 = 0, $$3326 = 0, $$lcssa = 0, $$pre$phi391Z2D = 0, $$pre$phi393Z2D = 0, $$pre$phi395Z2D = 0, $$pre$phi397Z2D = 0, $$pre$phi399Z2D = 0, $$pre$phiZ2D = 0, $$pre367 = 0, $$pre7 = 0, $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $181 = 0, $183 = 0, $185 = 0, $188 = 0, $19 = 0, $190 = 0, $192 = 0, $195 = 0, $20 = 0, $201 = 0, $21 = 0, $243 = 0, $244 = 0, $255 = 0, $258 = 0, $261 = 0, $262 = 0, $264 = 0, $267 = 0, $27 = 0, $270 = 0, $273 = 0, $276 = 0, $279 = 0, $282 = 0, $285 = 0, $288 = 0, $29 = 0, $291 = 0, $294 = 0, $295 = 0, $298 = 0, $3 = 0, $300 = 0, $301 = 0, $302 = 0, $304 = 0, $305 = 0, $308 = 0, $311 = 0, $313 = 0, $316 = 0, $318 = 0, $319 = 0, $322 = 0, $325 = 0, $327 = 0, $330 = 0, $332 = 0, $333 = 0, $336 = 0, $339 = 0, $341 = 0, $344 = 0, $346 = 0, $347 = 0, $350 = 0, $353 = 0, $355 = 0, $358 = 0, $360 = 0, $361 = 0, $364 = 0, $367 = 0, $392 = 0, $396 = 0, $4 = 0, $400 = 0, $406 = 0, $408 = 0, $409 = 0, $411 = 0, $414 = 0, $415 = 0, $421 = 0, $429 = 0, $435 = 0, $441 = 0, $442 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $90 = 0, $spec$select321 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp;
 $8 = sp + 32 | 0;
 $9 = $0 + 2336 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $0 + 2328 | 0;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((HEAP32[$11 >> 2] | 0) + $10 << 2) | 0) + 15 & -16) | 0;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 HEAP32[$8 >> 2] = HEAP32[$0 + 4244 >> 2] >> 6;
 $19 = $0 + 4248 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $20 >> 6;
 HEAP32[$8 + 4 >> 2] = $21;
 $$pre7 = $0 + 4186 | 0;
 if (HEAP32[$0 + 2376 >> 2] | 0) {
  dest = $$pre7;
  stop = dest + 32 | 0;
  do {
   HEAP16[dest >> 1] = 0;
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 $27 = $0 + 2332 | 0;
 $29 = $0 + 2324 | 0;
 _silk_PLC_energy($5, $3, $6, $4, $0 + 4 | 0, $8, HEAP32[$27 >> 2] | 0, HEAP32[$29 >> 2] | 0);
 $$0309 = $0 + 4 + ((_silk_max_int_251((Math_imul(HEAP32[$0 + 4260 >> 2] | 0, (HEAP32[$0 + 4256 >> 2] | 0) + (((HEAP32[$5 >> 2] >> HEAP32[$4 >> 2] | 0) < (HEAP32[$6 >> 2] >> HEAP32[$3 >> 2] | 0)) << 31 >> 31) | 0) | 0) + -128 | 0) | 0) << 2) | 0;
 $46 = $0 + 4176 | 0;
 $47 = $0 + 4228 | 0;
 $48 = HEAP16[$47 >> 1] | 0;
 $49 = $0 + 4160 | 0;
 $51 = _silk_min_int_252(HEAP32[$49 >> 2] | 0) | 0;
 $54 = HEAP16[39480 + ($51 << 1) >> 1] | 0;
 $55 = $0 + 4164 | 0;
 $60 = HEAP16[((HEAP32[$55 >> 2] | 0) == 2 ? 39484 : 39488) + ($51 << 1) >> 1] | 0;
 $61 = $0 + 2340 | 0;
 _silk_bwexpander($$pre7, HEAP32[$61 >> 2] | 0, 64881);
 $63 = HEAP32[$61 >> 2] | 0;
 _memcpy($7 | 0, $$pre7 | 0, $63 << 1 | 0) | 0;
 do if (!(HEAP32[$49 >> 2] | 0)) if ((HEAP32[$55 >> 2] | 0) == 2) {
  $90 = (_silk_max_16((16384 - (HEAP16[$46 >> 1] | 0) & 65535) - (HEAPU16[$0 + 4178 >> 1] | 0) - (HEAPU16[$0 + 4180 >> 1] | 0) - (HEAPU16[$0 + 4182 >> 1] | 0) - (HEAPU16[$0 + 4184 >> 1] | 0) & 65535) | 0) << 16 >> 16;
  $$1302 = (Math_imul(HEAP16[$0 + 4240 >> 1] | 0, $90) | 0) >>> 14 & 65535;
  $$1311 = $60;
  $118 = $63;
  break;
 } else {
  $100 = (_silk_max_32(4194304, _silk_min_32_253(134217728, _silk_LPC_inverse_pred_gain_c($$pre7, $63) | 0) | 0) | 0) << 3;
  $107 = ((Math_imul($100 & 65528, $60) | 0) >> 16) + (Math_imul($100 >> 16, $60) | 0) >> 14;
  $$1302 = 16384;
  $$1311 = $107;
  $118 = HEAP32[$61 >> 2] | 0;
  break;
 } else {
  $$1302 = $48;
  $$1311 = $60;
  $118 = $63;
 } while (0);
 $108 = $0 + 4224 | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 $110 = $0 + 4172 | 0;
 $114 = (HEAP32[$110 >> 2] >> 7) + 1 >> 1;
 $115 = HEAP32[$9 >> 2] | 0;
 $117 = $115 - $114 - $118 | 0;
 $119 = $117 + -2 | 0;
 if (($117 | 0) <= 2) _celt_fatal(43809, 43835, 294);
 _silk_LPC_analysis_filter($15 + ($119 << 1) | 0, $0 + 1348 + ($119 << 1) | 0, $7, $115 - $119 | 0, $118);
 $125 = _silk_INVERSE32_varQ_256(HEAP32[$19 >> 2] | 0) | 0;
 $127 = ($125 | 0) < 1073741823 ? $125 : 1073741823;
 $128 = HEAP32[$61 >> 2] | 0;
 $129 = $128 + $119 | 0;
 $130 = HEAP32[$9 >> 2] | 0;
 if (($129 | 0) < ($130 | 0)) {
  $132 = $127 >> 16;
  $133 = $127 & 65535;
  $$1352 = $129;
  do {
   $136 = HEAP16[$15 + ($$1352 << 1) >> 1] | 0;
   HEAP32[$14 + ($$1352 << 2) >> 2] = ((Math_imul($133, $136) | 0) >> 16) + (Math_imul($132, $136) | 0);
   $$1352 = $$1352 + 1 | 0;
  } while (($$1352 | 0) != ($130 | 0));
 }
 $143 = HEAP32[$29 >> 2] | 0;
 if (($143 | 0) > 0) {
  $145 = $0 + 4178 | 0;
  $146 = $0 + 4180 | 0;
  $147 = $0 + 4182 | 0;
  $148 = $0 + 4184 | 0;
  $149 = $0 + 2765 | 0;
  $150 = $$1311 << 16 >> 16;
  $151 = $0 + 2316 | 0;
  $$pre367 = HEAP32[$27 >> 2] | 0;
  $152 = ($$pre367 | 0) > 0;
  $$0297345 = 0;
  $$0298344 = $114;
  $$0299343 = $115;
  $$0305341 = $109;
  $$2303342 = $$1302;
  while (1) {
   if ($152) {
    $156 = $$2303342 << 16 >> 16;
    $157 = HEAP16[$46 >> 1] | 0;
    $158 = HEAP16[$145 >> 1] | 0;
    $159 = HEAP16[$146 >> 1] | 0;
    $160 = HEAP16[$147 >> 1] | 0;
    $161 = HEAP16[$148 >> 1] | 0;
    $$0308331 = $14 + ($$0299343 + 2 - $$0298344 << 2) | 0;
    $$1300333 = $$0299343;
    $$1306332 = $$0305341;
    $$2334 = 0;
    while (1) {
     $162 = HEAP32[$$0308331 >> 2] | 0;
     $164 = Math_imul($162 >> 16, $157) | 0;
     $167 = (Math_imul($162 & 65535, $157) | 0) >> 16;
     $169 = HEAP32[$$0308331 + -4 >> 2] | 0;
     $171 = Math_imul($169 >> 16, $158) | 0;
     $174 = (Math_imul($169 & 65535, $158) | 0) >> 16;
     $176 = HEAP32[$$0308331 + -8 >> 2] | 0;
     $178 = Math_imul($176 >> 16, $159) | 0;
     $181 = (Math_imul($176 & 65535, $159) | 0) >> 16;
     $183 = HEAP32[$$0308331 + -12 >> 2] | 0;
     $185 = Math_imul($183 >> 16, $160) | 0;
     $188 = (Math_imul($183 & 65535, $160) | 0) >> 16;
     $190 = HEAP32[$$0308331 + -16 >> 2] | 0;
     $192 = Math_imul($190 >> 16, $161) | 0;
     $195 = (Math_imul($190 & 65535, $161) | 0) >> 16;
     $$1306332 = (Math_imul($$1306332, 196314165) | 0) + 907633515 | 0;
     $201 = HEAP32[$$0309 + ($$1306332 >>> 25 << 2) >> 2] | 0;
     HEAP32[$14 + ($$1300333 << 2) >> 2] = $164 + 2 + $167 + $171 + $174 + $178 + $181 + $185 + $188 + $192 + $195 + (Math_imul($201 >> 16, $156) | 0) + ((Math_imul($201 & 65535, $156) | 0) >> 16) << 2;
     $$2334 = $$2334 + 1 | 0;
     if (($$2334 | 0) == ($$pre367 | 0)) break; else {
      $$0308331 = $$0308331 + 4 | 0;
      $$1300333 = $$1300333 + 1 | 0;
     }
    }
    $$1300$lcssa = $$pre367 + $$0299343 | 0;
    $$1306$lcssa = $$1306332;
    $$pre$phi391Z2D = $158;
    $$pre$phi393Z2D = $159;
    $$pre$phi395Z2D = $160;
    $$pre$phi397Z2D = $161;
    $$pre$phi399Z2D = $156;
    $$pre$phiZ2D = $157;
   } else {
    $$1300$lcssa = $$0299343;
    $$1306$lcssa = $$0305341;
    $$pre$phi391Z2D = HEAP16[$145 >> 1] | 0;
    $$pre$phi393Z2D = HEAP16[$146 >> 1] | 0;
    $$pre$phi395Z2D = HEAP16[$147 >> 1] | 0;
    $$pre$phi397Z2D = HEAP16[$148 >> 1] | 0;
    $$pre$phi399Z2D = $$2303342 << 16 >> 16;
    $$pre$phiZ2D = HEAP16[$46 >> 1] | 0;
   }
   HEAP16[$46 >> 1] = (Math_imul($$pre$phiZ2D, $54) | 0) >>> 15;
   HEAP16[$145 >> 1] = (Math_imul($$pre$phi391Z2D, $54) | 0) >>> 15;
   HEAP16[$146 >> 1] = (Math_imul($$pre$phi393Z2D, $54) | 0) >>> 15;
   HEAP16[$147 >> 1] = (Math_imul($$pre$phi395Z2D, $54) | 0) >>> 15;
   HEAP16[$148 >> 1] = (Math_imul($$pre$phi397Z2D, $54) | 0) >>> 15;
   $243 = (Math_imul($150, $$pre$phi399Z2D) | 0) >>> 15 & 65535;
   $$3304 = (HEAP8[$149 >> 0] | 0) == 0 ? $$2303342 : $243;
   $244 = HEAP32[$110 >> 2] | 0;
   $255 = _silk_min_32_253((($244 >> 16) * 655 | 0) + $244 + ((($244 & 65535) * 655 | 0) >>> 16) | 0, (HEAP32[$151 >> 2] << 16 >> 16) * 4608 | 0) | 0;
   HEAP32[$110 >> 2] = $255;
   $258 = ($255 >> 7) + 1 >> 1;
   $$0297345 = $$0297345 + 1 | 0;
   if (($$0297345 | 0) == ($143 | 0)) {
    $$0298$lcssa = $258;
    $$0305$lcssa = $$1306$lcssa;
    $$2303$lcssa = $$3304;
    break;
   } else {
    $$0298344 = $258;
    $$0299343 = $$1300$lcssa;
    $$0305341 = $$1306$lcssa;
    $$2303342 = $$3304;
   }
  }
 } else {
  $$0298$lcssa = $114;
  $$0305$lcssa = $109;
  $$2303$lcssa = $$1302;
 }
 $261 = $14 + ($130 + -16 << 2) | 0;
 $262 = $0 + 1284 | 0;
 dest = $261;
 src = $262;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($128 | 0) <= 9) _celt_fatal(43846, 43835, 350);
 $264 = HEAP32[$11 >> 2] | 0;
 if (($264 | 0) <= 0) {
  $$lcssa = $264;
  $444 = $261 + ($$lcssa << 2) | 0;
  dest = $262;
  src = $444;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$108 >> 2] = $$0305$lcssa;
  HEAP16[$47 >> 1] = $$2303$lcssa;
  HEAP32[$1 >> 2] = $$0298$lcssa;
  $445 = $1 + 4 | 0;
  HEAP32[$445 >> 2] = $$0298$lcssa;
  $446 = $1 + 8 | 0;
  HEAP32[$446 >> 2] = $$0298$lcssa;
  $447 = $1 + 12 | 0;
  HEAP32[$447 >> 2] = $$0298$lcssa;
  STACKTOP = sp;
  return;
 }
 $267 = HEAP16[$7 >> 1] | 0;
 $270 = HEAP16[$7 + 2 >> 1] | 0;
 $273 = HEAP16[$7 + 4 >> 1] | 0;
 $276 = HEAP16[$7 + 6 >> 1] | 0;
 $279 = HEAP16[$7 + 8 >> 1] | 0;
 $282 = HEAP16[$7 + 10 >> 1] | 0;
 $285 = HEAP16[$7 + 12 >> 1] | 0;
 $288 = HEAP16[$7 + 14 >> 1] | 0;
 $291 = HEAP16[$7 + 16 >> 1] | 0;
 $294 = HEAP16[$7 + 18 >> 1] | 0;
 $295 = $21 << 16 >> 16;
 $298 = ($20 >> 21) + 1 >> 1;
 $$3326 = 0;
 $300 = $128;
 $304 = HEAP32[$261 + 60 >> 2] | 0;
 $318 = HEAP32[$261 + 52 >> 2] | 0;
 $332 = HEAP32[$261 + 44 >> 2] | 0;
 $346 = HEAP32[$261 + 36 >> 2] | 0;
 $360 = HEAP32[$261 + 28 >> 2] | 0;
 while (1) {
  $301 = $$3326 + 16 | 0;
  $302 = $$3326 + 15 | 0;
  $305 = Math_imul($304 >> 16, $267) | 0;
  $308 = (Math_imul($304 & 65535, $267) | 0) >> 16;
  $311 = HEAP32[$261 + ($$3326 + 14 << 2) >> 2] | 0;
  $313 = Math_imul($311 >> 16, $270) | 0;
  $316 = (Math_imul($311 & 65535, $270) | 0) >> 16;
  $319 = Math_imul($318 >> 16, $273) | 0;
  $322 = (Math_imul($318 & 65535, $273) | 0) >> 16;
  $325 = HEAP32[$261 + ($$3326 + 12 << 2) >> 2] | 0;
  $327 = Math_imul($325 >> 16, $276) | 0;
  $330 = (Math_imul($325 & 65535, $276) | 0) >> 16;
  $333 = Math_imul($332 >> 16, $279) | 0;
  $336 = (Math_imul($332 & 65535, $279) | 0) >> 16;
  $339 = HEAP32[$261 + ($$3326 + 10 << 2) >> 2] | 0;
  $341 = Math_imul($339 >> 16, $282) | 0;
  $344 = (Math_imul($339 & 65535, $282) | 0) >> 16;
  $347 = Math_imul($346 >> 16, $285) | 0;
  $350 = (Math_imul($346 & 65535, $285) | 0) >> 16;
  $353 = HEAP32[$261 + ($$3326 + 8 << 2) >> 2] | 0;
  $355 = Math_imul($353 >> 16, $288) | 0;
  $358 = (Math_imul($353 & 65535, $288) | 0) >> 16;
  $361 = Math_imul($360 >> 16, $291) | 0;
  $364 = (Math_imul($360 & 65535, $291) | 0) >> 16;
  $367 = HEAP32[$261 + ($$3326 + 6 << 2) >> 2] | 0;
  $392 = $305 + ($300 >> 1) + $308 + $313 + $316 + $319 + $322 + $327 + $330 + $333 + $336 + $341 + $344 + $347 + $350 + $355 + $358 + $361 + $364 + (Math_imul($367 >> 16, $294) | 0) + ((Math_imul($367 & 65535, $294) | 0) >> 16) | 0;
  if (($300 | 0) > 10) {
   $$0307324 = $392;
   $$1296325 = 10;
   while (1) {
    $396 = HEAP32[$261 + ($302 - $$1296325 << 2) >> 2] | 0;
    $400 = HEAP16[$7 + ($$1296325 << 1) >> 1] | 0;
    $406 = (Math_imul($396 >> 16, $400) | 0) + $$0307324 + ((Math_imul($396 & 65535, $400) | 0) >> 16) | 0;
    $$1296325 = $$1296325 + 1 | 0;
    if (($$1296325 | 0) == ($300 | 0)) {
     $$0307$lcssa = $406;
     break;
    } else $$0307324 = $406;
   }
  } else $$0307$lcssa = $392;
  $408 = $261 + ($301 << 2) | 0;
  $409 = HEAP32[$408 >> 2] | 0;
  $411 = ($$0307$lcssa | 0) > -134217728 ? $$0307$lcssa : -134217728;
  $414 = (($411 | 0) < 134217727 ? $411 : 134217727) << 4;
  $415 = $409 + $414 | 0;
  if (($415 | 0) > -1) $421 = ($409 & $414 | 0) < 0 ? -2147483648 : $415; else $421 = ($409 | $414 | 0) > -1 ? 2147483647 : $415;
  HEAP32[$408 >> 2] = $421;
  $429 = (Math_imul($421 >> 16, $295) | 0) + (Math_imul($421, $298) | 0) + ((Math_imul($421 & 65535, $295) | 0) >> 16) | 0;
  $435 = ($429 | 0) > 8388479 ? 32767 : ($429 | 0) < -8388736 ? -32768 : ($429 >> 7) + 1 >> 1;
  $spec$select321 = ($435 | 0) > -32768 ? $435 : -32768;
  HEAP16[$2 + ($$3326 << 1) >> 1] = ($spec$select321 | 0) < 32767 ? $spec$select321 : 32767;
  $441 = $$3326 + 1 | 0;
  $442 = HEAP32[$11 >> 2] | 0;
  if (($441 | 0) >= ($442 | 0)) {
   $$lcssa = $442;
   break;
  }
  $$3326 = $441;
  $300 = HEAP32[$61 >> 2] | 0;
  $304 = $421;
  $318 = $311;
  $332 = $325;
  $346 = $339;
  $360 = $353;
 }
 $444 = $261 + ($$lcssa << 2) | 0;
 dest = $262;
 src = $444;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$108 >> 2] = $$0305$lcssa;
 HEAP16[$47 >> 1] = $$2303$lcssa;
 HEAP32[$1 >> 2] = $$0298$lcssa;
 $445 = $1 + 4 | 0;
 HEAP32[$445 >> 2] = $$0298$lcssa;
 $446 = $1 + 8 | 0;
 HEAP32[$446 >> 2] = $$0298$lcssa;
 $447 = $1 + 12 | 0;
 HEAP32[$447 >> 2] = $$0298$lcssa;
 STACKTOP = sp;
 return;
}

function _dynalloc_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 var $$0375 = 0, $$0375$us = 0, $$0376 = 0, $$0376$us = 0, $$0377$us = 0, $$0379410 = 0, $$0379410$us = 0, $$0381$us = 0.0, $$0383 = 0, $$0480 = 0, $$10450 = 0, $$11428 = 0, $$12431 = 0, $$13424 = 0, $$1378 = 0, $$1380 = 0, $$1382$lcssa$lcssa510514515516518 = 0.0, $$1382473$us = 0.0, $$1384$lcssa = 0, $$1384434 = 0, $$14420 = 0, $$1474$us = 0, $$15417 = 0, $$16415 = 0, $$17413 = 0, $$18411 = 0, $$18411$us = 0, $$19409 = 0, $$2385 = 0, $$2469 = 0, $$3466 = 0, $$390 = 0.0, $$395 = 0.0, $$4462 = 0, $$5458 = 0, $$6454 = 0, $$7435 = 0, $$8442$in = 0, $$9446 = 0, $$sink534 = 0.0, $100 = 0.0, $104 = 0.0, $109 = 0, $112 = 0, $118 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $130 = 0, $132 = 0.0, $138 = 0.0, $139 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $150 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $161 = 0.0, $165 = 0, $167 = 0.0, $168 = 0.0, $170 = 0, $171 = 0.0, $175 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $181 = 0, $182 = 0.0, $185 = 0, $186 = 0.0, $188 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $199 = 0.0, $201 = 0.0, $202 = 0.0, $204 = 0.0, $207 = 0.0, $21 = 0, $213 = 0.0, $22 = 0, $221 = 0, $223 = 0.0, $227 = 0, $228 = 0.0, $23 = 0, $230 = 0.0, $234 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $263 = 0, $265 = 0, $27 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $279 = 0.0, $289 = 0, $295 = 0, $298 = 0, $302 = 0, $306 = 0, $307 = 0, $308 = 0.0, $310 = 0.0, $311 = 0, $320 = 0, $322 = 0, $327 = 0, $334 = 0, $336 = 0, $339 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $37 = 0, $44 = 0, $50 = 0.0, $58 = 0, $59 = 0, $60 = 0, $68 = 0, $69 = 0, $70 = 0.0, $76 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $88 = 0, $89 = 0, $90 = 0.0, $94 = 0.0, $98 = 0.0, label = 0, sp = 0, $$8442$in$looptemp = 0, $$18411$us$looptemp = 0;
 sp = STACKTOP;
 $21 = Math_imul($5, $2) | 0;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 _memset($6 | 0, 0, $2 << 2 | 0) | 0;
 $25 = ($4 | 0) > 0;
 if ($25) {
  $27 = +(9 - $7 | 0);
  $$0480 = 0;
  do {
   $37 = $$0480 + 5 | 0;
   HEAPF32[$23 + ($$0480 << 2) >> 2] = +(Math_imul($37, $37) | 0) * .006200000178068876 + (+(HEAP16[$8 + ($$0480 << 1) >> 1] | 0) * .0625 + .5 + $27 - +HEAPF32[20304 + ($$0480 << 2) >> 2]);
   $$0480 = $$0480 + 1 | 0;
  } while (($$0480 | 0) != ($4 | 0));
  $$0377$us = 0;
  $$0381$us = -31.899999618530273;
  while (1) {
   $44 = Math_imul($$0377$us, $2) | 0;
   $$1382473$us = $$0381$us;
   $$1474$us = 0;
   do {
    $50 = +HEAPF32[$0 + ($$1474$us + $44 << 2) >> 2] - +HEAPF32[$23 + ($$1474$us << 2) >> 2];
    $$1382473$us = $$1382473$us > $50 ? $$1382473$us : $50;
    $$1474$us = $$1474$us + 1 | 0;
   } while (($$1474$us | 0) != ($4 | 0));
   $$0377$us = $$0377$us + 1 | 0;
   if (($$0377$us | 0) >= ($5 | 0)) break; else $$0381$us = $$1382473$us;
  }
  $58 = _llvm_stacksave() | 0;
  $59 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
  $60 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
  $$2469 = 0;
  do {
   HEAPF32[$59 + ($$2469 << 2) >> 2] = +HEAPF32[$0 + ($$2469 << 2) >> 2] - +HEAPF32[$23 + ($$2469 << 2) >> 2];
   $$2469 = $$2469 + 1 | 0;
  } while (($$2469 | 0) != ($4 | 0));
  $68 = ($5 | 0) == 2;
  if ($68) {
   $$3466 = 0;
   do {
    $69 = $59 + ($$3466 << 2) | 0;
    $70 = +HEAPF32[$69 >> 2];
    $76 = +HEAPF32[$0 + ($$3466 + $2 << 2) >> 2] - +HEAPF32[$23 + ($$3466 << 2) >> 2];
    HEAPF32[$69 >> 2] = $70 > $76 ? $70 : $76;
    $$3466 = $$3466 + 1 | 0;
   } while (($$3466 | 0) != ($4 | 0));
  }
  _memcpy($60 | 0, $59 | 0, $4 << 2 | 0) | 0;
  if (($4 | 0) > 1) {
   $$4462 = 1;
   $85 = +HEAPF32[$59 >> 2];
   do {
    $82 = $59 + ($$4462 << 2) | 0;
    $83 = +HEAPF32[$82 >> 2];
    $84 = $85 + -2.0;
    $85 = $83 > $84 ? $83 : $84;
    HEAPF32[$82 >> 2] = $85;
    $$4462 = $$4462 + 1 | 0;
   } while (($$4462 | 0) != ($4 | 0));
   $88 = $4 + -2 | 0;
   $$5458 = $88;
   while (1) {
    $89 = $59 + ($$5458 << 2) | 0;
    $90 = +HEAPF32[$89 >> 2];
    $94 = +HEAPF32[$59 + ($$5458 + 1 << 2) >> 2] + -3.0;
    HEAPF32[$89 >> 2] = $90 > $94 ? $90 : $94;
    if (($$5458 | 0) > 0) $$5458 = $$5458 + -1 | 0; else {
     $349 = $88;
     $350 = 1;
     break;
    }
   }
  } else {
   $349 = $4 + -2 | 0;
   $350 = 0;
  }
  $98 = $$1382473$us + -12.0;
  $100 = $98 < 0.0 ? 0.0 : $98;
  $$6454 = 0;
  do {
   $104 = +HEAPF32[$59 + ($$6454 << 2) >> 2];
   $109 = ~~+Math_floor(+(+HEAPF32[$60 + ($$6454 << 2) >> 2] - ($100 > $104 ? $100 : $104) + .5));
   $112 = ($109 | 0) > 0 ? 0 : 0 - $109 | 0;
   HEAP32[$20 + ($$6454 << 2) >> 2] = 32 >>> (($112 | 0) < 5 ? $112 : 5);
   $$6454 = $$6454 + 1 | 0;
  } while (($$6454 | 0) != ($4 | 0));
  $$1382$lcssa$lcssa510514515516518 = $$1382473$us;
  $118 = $58;
  $165 = $349;
  $347 = $350;
  $348 = $68;
 } else {
  $$1382$lcssa$lcssa510514515516518 = -31.899999618530273;
  $118 = _llvm_stacksave() | 0;
  $165 = $4 + -2 | 0;
  $347 = 0;
  $348 = ($5 | 0) == 2;
 }
 _llvm_stackrestore($118 | 0);
 if (($13 | 0) < 1 | ($14 | 0) < 51 | ($16 | 0) != 0) {
  if (($3 | 0) >= ($4 | 0)) {
   $$1380 = 0;
   HEAP32[$15 >> 2] = $$1380;
   STACKTOP = sp;
   return +$$1382$lcssa$lcssa510514515516518;
  }
  $$19409 = $3;
  do {
   HEAP32[$19 + ($$19409 << 2) >> 2] = 13;
   $$19409 = $$19409 + 1 | 0;
  } while (($$19409 | 0) != ($4 | 0));
  $$1380 = 0;
  HEAP32[$15 >> 2] = $$1380;
  STACKTOP = sp;
  return +$$1382$lcssa$lcssa510514515516518;
 }
 $122 = ($4 | 0) > 4;
 $123 = $4 + -3 | 0;
 $124 = $4 + -1 | 0;
 $$0383 = 0;
 $$1378 = 0;
 while (1) {
  $125 = Math_imul($$1378, $2) | 0;
  $126 = $22 + ($125 << 2) | 0;
  $127 = $1 + ($125 << 2) | 0;
  $128 = HEAP32[$127 >> 2] | 0;
  HEAP32[$126 >> 2] = $128;
  $129 = (HEAP32[tempDoublePtr >> 2] = $128, +HEAPF32[tempDoublePtr >> 2]);
  if ($347) {
   $$1384434 = $$0383;
   $$7435 = 1;
   $139 = $129;
   while (1) {
    $130 = $$7435 + $125 | 0;
    $132 = +HEAPF32[$1 + ($130 << 2) >> 2];
    $$2385 = $132 > +HEAPF32[$1 + ($130 + -1 << 2) >> 2] + .5 ? $$7435 : $$1384434;
    $138 = $139 + 1.5;
    $139 = $138 < $132 ? $138 : $132;
    HEAPF32[$126 + ($$7435 << 2) >> 2] = $139;
    $$7435 = $$7435 + 1 | 0;
    if (($$7435 | 0) == ($4 | 0)) {
     $$1384$lcssa = $$2385;
     break;
    } else $$1384434 = $$2385;
   }
  } else $$1384$lcssa = $$0383;
  if (($$1384$lcssa | 0) > 0) {
   $$8442$in = $$1384$lcssa;
   $147 = +HEAPF32[$126 + ($$1384$lcssa << 2) >> 2];
   do {
    $$8442$in$looptemp = $$8442$in;
    $$8442$in = $$8442$in + -1 | 0;
    $144 = $126 + ($$8442$in << 2) | 0;
    $145 = +HEAPF32[$144 >> 2];
    $146 = $147 + 2.0;
    $150 = +HEAPF32[$1 + ($$8442$in + $125 << 2) >> 2];
    $$390 = $146 < $150 ? $146 : $150;
    $147 = $145 < $$390 ? $145 : $$390;
    HEAPF32[$144 >> 2] = $147;
   } while (($$8442$in$looptemp | 0) > 1);
  }
  if ($122) {
   $155 = $125 + -2 | 0;
   $$9446 = 2;
   do {
    $156 = $126 + ($$9446 << 2) | 0;
    $157 = +HEAPF32[$156 >> 2];
    $161 = +_median_of_5($1 + ($155 + $$9446 << 2) | 0) + -1.0;
    HEAPF32[$156 >> 2] = $157 > $161 ? $157 : $161;
    $$9446 = $$9446 + 1 | 0;
   } while (($$9446 | 0) != ($165 | 0));
  }
  $167 = +_median_of_3($129, +HEAPF32[$127 + 4 >> 2], +HEAPF32[$127 + 8 >> 2]) + -1.0;
  $168 = +HEAPF32[$126 >> 2];
  HEAPF32[$126 >> 2] = $168 > $167 ? $168 : $167;
  $170 = $126 + 4 | 0;
  $171 = +HEAPF32[$170 >> 2];
  HEAPF32[$170 >> 2] = $171 > $167 ? $171 : $167;
  $175 = $1 + ($123 + $125 << 2) | 0;
  $177 = +_median_of_3(+HEAPF32[$175 >> 2], +HEAPF32[$175 + 4 >> 2], +HEAPF32[$175 + 8 >> 2]) + -1.0;
  $178 = $126 + ($165 << 2) | 0;
  $179 = +HEAPF32[$178 >> 2];
  HEAPF32[$178 >> 2] = $179 > $177 ? $179 : $177;
  $181 = $126 + ($124 << 2) | 0;
  $182 = +HEAPF32[$181 >> 2];
  HEAPF32[$181 >> 2] = $182 > $177 ? $182 : $177;
  if ($25) {
   $$10450 = 0;
   do {
    $185 = $126 + ($$10450 << 2) | 0;
    $186 = +HEAPF32[$185 >> 2];
    $188 = +HEAPF32[$23 + ($$10450 << 2) >> 2];
    HEAPF32[$185 >> 2] = $186 > $188 ? $186 : $188;
    $$10450 = $$10450 + 1 | 0;
   } while (($$10450 | 0) != ($4 | 0));
  }
  $$1378 = $$1378 + 1 | 0;
  if (($$1378 | 0) >= ($5 | 0)) break; else $$0383 = $$1384$lcssa;
 }
 $193 = ($3 | 0) < ($4 | 0);
 if ($348) {
  if ($193) {
   $$11428 = $3;
   do {
    $194 = $$11428 + $2 | 0;
    $195 = $22 + ($194 << 2) | 0;
    $196 = +HEAPF32[$195 >> 2];
    $197 = $22 + ($$11428 << 2) | 0;
    $199 = +HEAPF32[$197 >> 2] + -4.0;
    $$395 = $196 > $199 ? $196 : $199;
    HEAPF32[$195 >> 2] = $$395;
    $201 = +HEAPF32[$197 >> 2];
    $202 = $$395 + -4.0;
    $204 = $201 > $202 ? $201 : $202;
    HEAPF32[$197 >> 2] = $204;
    $207 = +HEAPF32[$0 + ($$11428 << 2) >> 2] - $204;
    $213 = +HEAPF32[$0 + ($194 << 2) >> 2] - +HEAPF32[$195 >> 2];
    HEAPF32[$197 >> 2] = (($207 < 0.0 ? 0.0 : $207) + ($213 < 0.0 ? 0.0 : $213)) * .5;
    $$11428 = $$11428 + 1 | 0;
   } while (($$11428 | 0) != ($4 | 0));
   label = 44;
  }
 } else if ($193) {
  $$12431 = $3;
  do {
   $221 = $22 + ($$12431 << 2) | 0;
   $223 = +HEAPF32[$0 + ($$12431 << 2) >> 2] - +HEAPF32[$221 >> 2];
   HEAPF32[$221 >> 2] = $223 < 0.0 ? 0.0 : $223;
   $$12431 = $$12431 + 1 | 0;
  } while (($$12431 | 0) != ($4 | 0));
  label = 44;
 }
 if ((label | 0) == 44) if ($193) {
  $$13424 = $3;
  do {
   $227 = $22 + ($$13424 << 2) | 0;
   $228 = +HEAPF32[$227 >> 2];
   $230 = +HEAPF32[$17 + ($$13424 << 2) >> 2];
   HEAPF32[$227 >> 2] = $228 > $230 ? $228 : $230;
   $$13424 = $$13424 + 1 | 0;
  } while (($$13424 | 0) != ($4 | 0));
  $$14420 = $3;
  do {
   $234 = +HEAPF32[$22 + ($$14420 << 2) >> 2];
   HEAP32[$19 + ($$14420 << 2) >> 2] = ~~+Math_floor(+(+Math_exp(+(($234 < 4.0 ? $234 : 4.0) * .6931471805599453)) * 13.0 + .5));
   $$14420 = $$14420 + 1 | 0;
  } while (($$14420 | 0) != ($4 | 0));
 }
 $247 = ($10 | 0) != 0;
 $248 = ($11 | 0) == 0;
 $249 = ($9 | 0) != 0;
 if ($193 & (($249 | $247 & $248) ^ 1)) {
  $$15417 = $3;
  do {
   $250 = $22 + ($$15417 << 2) | 0;
   HEAPF32[$250 >> 2] = +HEAPF32[$250 >> 2] * .5;
   $$15417 = $$15417 + 1 | 0;
  } while (($$15417 | 0) != ($4 | 0));
 }
 if ($193) {
  $$16415 = $3;
  do {
   $255 = $22 + ($$16415 << 2) | 0;
   if (($$16415 | 0) < 8) {
    $$sink534 = 2.0;
    label = 56;
   } else if (($$16415 | 0) > 11) {
    $$sink534 = .5;
    label = 56;
   }
   if ((label | 0) == 56) {
    label = 0;
    HEAPF32[$255 >> 2] = +HEAPF32[$255 >> 2] * $$sink534;
   }
   $$16415 = $$16415 + 1 | 0;
  } while (($$16415 | 0) != ($4 | 0));
 }
 if (HEAP32[$18 >> 2] | 0) {
  $263 = ($4 | 0) < 19 ? $4 : 19;
  if (($263 | 0) > ($3 | 0)) {
   $$17413 = $3;
   do {
    $265 = $22 + ($$17413 << 2) | 0;
    HEAPF32[$265 >> 2] = +HEAPF32[$265 >> 2] + +(HEAPU8[$18 + 44 + $$17413 >> 0] | 0) * .015625;
    $$17413 = $$17413 + 1 | 0;
   } while (($$17413 | 0) < ($263 | 0));
  }
 }
 if (!$193) {
  $$1380 = 0;
  HEAP32[$15 >> 2] = $$1380;
  STACKTOP = sp;
  return +$$1382$lcssa$lcssa510514515516518;
 }
 $275 = ($14 << 1 | 0) / 3 | 0;
 if ($247 & ($249 | $248)) {
  $$0379410$us = 0;
  $$18411$us = $3;
  while (1) {
   $276 = $22 + ($$18411$us << 2) | 0;
   $277 = +HEAPF32[$276 >> 2];
   $279 = $277 < 4.0 ? $277 : 4.0;
   HEAPF32[$276 >> 2] = $279;
   $$18411$us$looptemp = $$18411$us;
   $$18411$us = $$18411$us + 1 | 0;
   $289 = (Math_imul((HEAP16[$12 + ($$18411$us << 1) >> 1] | 0) - (HEAP16[$12 + ($$18411$us$looptemp << 1) >> 1] | 0) | 0, $5) | 0) << $13;
   do if (($289 | 0) < 6) {
    $302 = ~~$279;
    $$0375$us = Math_imul($302 << 3, $289) | 0;
    $$0376$us = $302;
   } else if (($289 | 0) > 48) {
    $298 = ~~($279 * 8.0);
    $$0375$us = (Math_imul($298 << 3, $289) | 0) / 8 | 0;
    $$0376$us = $298;
    break;
   } else {
    $295 = ~~($279 * +($289 | 0) / 6.0);
    $$0375$us = $295 * 48 | 0;
    $$0376$us = $295;
    break;
   } while (0);
   HEAP32[$6 + ($$18411$us$looptemp << 2) >> 2] = $$0376$us;
   $306 = $$0375$us + $$0379410$us | 0;
   if (($$18411$us | 0) == ($4 | 0)) {
    $$1380 = $306;
    break;
   } else $$0379410$us = $306;
  }
  HEAP32[$15 >> 2] = $$1380;
  STACKTOP = sp;
  return +$$1382$lcssa$lcssa510514515516518;
 }
 $$0379410 = 0;
 $$18411 = $3;
 while (1) {
  $307 = $22 + ($$18411 << 2) | 0;
  $308 = +HEAPF32[$307 >> 2];
  $310 = $308 < 4.0 ? $308 : 4.0;
  HEAPF32[$307 >> 2] = $310;
  $311 = $$18411 + 1 | 0;
  $320 = (Math_imul((HEAP16[$12 + ($311 << 1) >> 1] | 0) - (HEAP16[$12 + ($$18411 << 1) >> 1] | 0) | 0, $5) | 0) << $13;
  do if (($320 | 0) < 6) {
   $322 = ~~$310;
   $$0375 = Math_imul($322 << 3, $320) | 0;
   $$0376 = $322;
  } else if (($320 | 0) > 48) {
   $327 = ~~($310 * 8.0);
   $$0375 = (Math_imul($327 << 3, $320) | 0) / 8 | 0;
   $$0376 = $327;
   break;
  } else {
   $334 = ~~($310 * +($320 | 0) / 6.0);
   $$0375 = $334 * 48 | 0;
   $$0376 = $334;
   break;
  } while (0);
  $336 = $$0375 + $$0379410 | 0;
  if (($336 >> 6 | 0) > ($275 | 0)) break;
  HEAP32[$6 + ($$18411 << 2) >> 2] = $$0376;
  if (($311 | 0) < ($4 | 0)) {
   $$0379410 = $336;
   $$18411 = $311;
  } else {
   $$1380 = $336;
   label = 83;
   break;
  }
 }
 if ((label | 0) == 83) {
  HEAP32[$15 >> 2] = $$1380;
  STACKTOP = sp;
  return +$$1382$lcssa$lcssa510514515516518;
 }
 $339 = $275 << 6;
 HEAP32[$6 + ($$18411 << 2) >> 2] = $339 - $$0379410;
 $$1380 = $339;
 HEAP32[$15 >> 2] = $$1380;
 STACKTOP = sp;
 return +$$1382$lcssa$lcssa510514515516518;
}

function _silk_NSQ_del_dec_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$0271$lcssa = 0, $$0271340 = 0, $$0272321 = 0, $$0273320 = 0, $$0277$lcssa = 0, $$0277339 = 0, $$0278353 = 0, $$0282336 = 0, $$0285348 = 0, $$0287331 = 0, $$0291335 = 0, $$0294$lcssa = 0, $$0294319 = 0, $$0341 = 0, $$1274327 = 0, $$1279349 = 0, $$1283 = 0, $$1286 = 0, $$1292 = 0, $$2275332 = 0, $$2280337 = 0, $$2289311 = 0, $$2293 = 0, $$2296$lcssa = 0, $$2296313 = 0, $$2315 = 0, $$3276312 = 0, $$3281314 = 0, $100 = 0, $101 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $115 = 0, $116 = 0, $119 = 0, $123 = 0, $127 = 0, $128 = 0, $132 = 0, $139 = 0, $148 = 0, $15 = 0, $151 = 0, $153 = 0, $154 = 0, $16 = 0, $164 = 0, $17 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $195 = 0, $20 = 0, $21 = 0, $210 = 0, $212 = 0, $213 = 0, $217 = 0, $222 = 0, $223 = 0, $232 = 0, $237 = 0, $240 = 0, $242 = 0, $251 = 0, $254 = 0, $26 = 0, $262 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $49 = 0, $50 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $69 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, $spec$select302 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $15 = sp + 160 | 0;
 $16 = sp;
 $17 = $1 + 4328 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $19 = $0 + 4628 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($20 * 1300 | 0) | 0) + 15 & -16) | 0;
 _memset($21 | 0, 0, $20 * 1300 | 0) | 0;
 if (($20 | 0) > 0) {
  $26 = HEAPU8[$2 + 34 >> 0] | 0;
  $28 = HEAP32[$1 + 4320 >> 2] | 0;
  $30 = HEAP32[$1 + 4324 >> 2] | 0;
  $35 = HEAP32[$1 + 1280 + ((HEAP32[$0 + 4592 >> 2] | 0) + -1 << 2) >> 2] | 0;
  $36 = $1 + 3840 | 0;
  $37 = $1 + 4224 | 0;
  $$0278353 = 0;
  do {
   $40 = $$0278353 + $26 & 3;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1288 >> 2] = $40;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1292 >> 2] = $40;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1296 >> 2] = 0;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1280 >> 2] = $28;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1284 >> 2] = $30;
   HEAP32[$21 + ($$0278353 * 1300 | 0) + 1024 >> 2] = $35;
   dest = $21 + ($$0278353 * 1300 | 0) | 0;
   src = $36;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $21 + ($$0278353 * 1300 | 0) + 1184 | 0;
   src = $37;
   stop = dest + 96 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $$0278353 = $$0278353 + 1 | 0;
  } while (($$0278353 | 0) != ($20 | 0));
 }
 $49 = $2 + 29 | 0;
 $50 = HEAP8[$49 >> 0] | 0;
 $58 = HEAP16[39492 + ($50 << 24 >> 24 >> 1 << 2) + (HEAP8[$2 + 30 >> 0] << 1) >> 1] | 0;
 HEAP32[$15 >> 2] = 0;
 $59 = $0 + 4588 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = _silk_min_int_238(40, $60) | 0;
 if ($50 << 24 >> 24 == 2) {
  $64 = HEAP32[$0 + 4580 >> 2] | 0;
  if (($64 | 0) > 0) {
   $$0285348 = $61;
   $$1279349 = 0;
   while (1) {
    $69 = _silk_min_int_238($$0285348, (HEAP32[$12 + ($$1279349 << 2) >> 2] | 0) + -3 | 0) | 0;
    $$1279349 = $$1279349 + 1 | 0;
    if (($$1279349 | 0) == ($64 | 0)) {
     $$1286 = $69;
     break;
    } else $$0285348 = $69;
   }
  } else $$1286 = $61;
 } else if (($18 | 0) > 0) $$1286 = _silk_min_int_238($61, $18 + -3 | 0) | 0; else $$1286 = $61;
 $$ = (HEAP8[$2 + 31 >> 0] | 0) != 4 & 1;
 $77 = $0 + 4592 | 0;
 $78 = HEAP32[$77 >> 2] | 0;
 $79 = $0 + 4584 | 0;
 $81 = (HEAP32[$79 >> 2] | 0) + $78 | 0;
 $82 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($81 << 2) | 0) + 15 & -16) | 0;
 $83 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($81 << 1) | 0) + 15 & -16) | 0;
 $84 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($60 << 2) | 0) + 15 & -16) | 0;
 $85 = $1 + ($78 << 1) | 0;
 $86 = $1 + 4336 | 0;
 HEAP32[$86 >> 2] = $78;
 $88 = $1 + 4332 | 0;
 HEAP32[$88 >> 2] = HEAP32[$77 >> 2];
 $89 = $0 + 4580 | 0;
 L14 : do if ((HEAP32[$89 >> 2] | 0) > 0) {
  $92 = $$ ^ 1;
  $93 = $1 + 4348 | 0;
  $95 = $$ << 1 ^ 3;
  $96 = $0 + 4636 | 0;
  $97 = $0 + 4640 | 0;
  $98 = $0 + 4672 | 0;
  $99 = $21 + 1296 | 0;
  $100 = ($$1286 | 0) > 0;
  $101 = $11 + 4 | 0;
  $$0271340 = $4;
  $$0277339 = $85;
  $$0282336 = $18;
  $$0291335 = 0;
  $$0341 = $3;
  $$2280337 = 0;
  while (1) {
   $105 = $5 + (($$2280337 >>> 1 | $92) << 4 << 1) | 0;
   $107 = $6 + ($$2280337 * 5 << 1) | 0;
   $109 = $7 + ($$2280337 * 24 << 1) | 0;
   $111 = HEAP32[$8 + ($$2280337 << 2) >> 2] | 0;
   $115 = $111 >>> 1 << 16 | $111 >> 2;
   HEAP32[$93 >> 2] = 0;
   $116 = HEAP8[$49 >> 0] | 0;
   if ($116 << 24 >> 24 == 2) {
    $119 = HEAP32[$12 + ($$2280337 << 2) >> 2] | 0;
    if (!($$2280337 & $95)) {
     if (($$2280337 | 0) == 2) {
      $123 = HEAP32[$19 >> 2] | 0;
      if (($123 | 0) > 1) {
       $$0272321 = HEAP32[$99 >> 2] | 0;
       $$0273320 = 1;
       $$0294319 = 0;
       while (1) {
        $127 = HEAP32[$21 + ($$0273320 * 1300 | 0) + 1296 >> 2] | 0;
        $128 = ($127 | 0) < ($$0272321 | 0);
        $spec$select = $128 ? $$0273320 : $$0294319;
        $$0273320 = $$0273320 + 1 | 0;
        if (($$0273320 | 0) == ($123 | 0)) {
         $$0294$lcssa = $spec$select;
         break;
        } else {
         $$0272321 = $128 ? $127 : $$0272321;
         $$0294319 = $spec$select;
        }
       }
      } else $$0294$lcssa = 0;
      if (($123 | 0) > 0) {
       $$1274327 = 0;
       do {
        $132 = $21 + ($$1274327 * 1300 | 0) + 1296 | 0;
        if (($$1274327 | 0) != ($$0294$lcssa | 0)) HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 134217727;
        $$1274327 = $$1274327 + 1 | 0;
       } while (($$1274327 | 0) != ($123 | 0));
      }
      if ($100) {
       $$0287331 = (HEAP32[$15 >> 2] | 0) + $$1286 | 0;
       $$2275332 = 0;
       do {
        $139 = ($$0287331 + -1 | 0) % 40 | 0;
        $$0287331 = ($139 | 0) < 0 ? $139 + 40 | 0 : $139;
        $148 = $$2275332 - $$1286 | 0;
        HEAP8[$$0271340 + $148 >> 0] = (((HEAP32[$21 + ($$0294$lcssa * 1300 | 0) + 544 + ($$0287331 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
        $151 = HEAP32[$21 + ($$0294$lcssa * 1300 | 0) + 704 + ($$0287331 << 2) >> 2] | 0;
        $153 = HEAP32[$101 >> 2] | 0;
        $154 = $153 << 16 >> 16;
        $164 = ((Math_imul($154, $151 & 65535) | 0) >> 16) + (Math_imul($154, $151 >> 16) | 0) + (Math_imul(($153 >> 15) + 1 >> 1, $151) | 0) | 0;
        HEAP16[$$0277339 + ($148 << 1) >> 1] = ($164 | 0) > 536862719 ? 32767 : ($164 | 0) < -536879104 ? -32768 : (($164 >>> 13) + 1 | 0) >>> 1 & 65535;
        HEAP32[$1 + 1280 + ($148 + (HEAP32[$86 >> 2] | 0) << 2) >> 2] = HEAP32[$21 + ($$0294$lcssa * 1300 | 0) + 1024 + ($$0287331 << 2) >> 2];
        $$2275332 = $$2275332 + 1 | 0;
       } while (($$2275332 | 0) != ($$1286 | 0));
       $$1292 = 0;
      } else $$1292 = 0;
     } else $$1292 = $$0291335;
     $180 = HEAP32[$77 >> 2] | 0;
     $182 = HEAP32[$97 >> 2] | 0;
     $183 = $180 - $119 - $182 | 0;
     $184 = $183 + -2 | 0;
     if (($183 | 0) <= 2) break;
     _silk_LPC_analysis_filter($83 + ($184 << 1) | 0, $1 + ((Math_imul(HEAP32[$59 >> 2] | 0, $$2280337) | 0) + $184 << 1) | 0, $105, $180 - $184 | 0, $182);
     HEAP32[$88 >> 2] = HEAP32[$77 >> 2];
     HEAP32[$93 >> 2] = 1;
     $$1283 = $119;
     $$2293 = $$1292;
     $195 = HEAP8[$49 >> 0] | 0;
    } else {
     $$1283 = $119;
     $$2293 = $$0291335;
     $195 = 2;
    }
   } else {
    $$1283 = $$0282336;
    $$2293 = $$0291335;
    $195 = $116;
   }
   _silk_nsq_del_dec_scale_states($0, $1, $21, $$0341, $84, $83, $82, $$2280337, HEAP32[$19 >> 2] | 0, $14, $11, $12, $195 << 24 >> 24, $$1286);
   _silk_noise_shape_quantizer_del_dec($1, $21, HEAP8[$49 >> 0] | 0, $84, $$0271340, $$0277339, $82, $16, $105, $107, $109, $$1283, $115, HEAP32[$9 + ($$2280337 << 2) >> 2] | 0, HEAP32[$10 + ($$2280337 << 2) >> 2] | 0, HEAP32[$11 + ($$2280337 << 2) >> 2] | 0, $13, $58, HEAP32[$59 >> 2] | 0, $$2293, HEAP32[$96 >> 2] | 0, HEAP32[$97 >> 2] | 0, HEAP32[$98 >> 2] | 0, HEAP32[$19 >> 2] | 0, $15, $$1286);
   $210 = HEAP32[$59 >> 2] | 0;
   $212 = $$0271340 + $210 | 0;
   $213 = $$0277339 + ($210 << 1) | 0;
   $$2280337 = $$2280337 + 1 | 0;
   if (($$2280337 | 0) >= (HEAP32[$89 >> 2] | 0)) {
    $$0271$lcssa = $212;
    $$0277$lcssa = $213;
    break L14;
   } else {
    $$0271340 = $212;
    $$0277339 = $213;
    $$0282336 = $$1283;
    $$0291335 = $$2293 + 1 | 0;
    $$0341 = $$0341 + ($210 << 1) | 0;
   }
  }
  _celt_fatal(43666, 43698, 253);
 } else {
  $$0271$lcssa = $4;
  $$0277$lcssa = $85;
 } while (0);
 $217 = HEAP32[$19 >> 2] | 0;
 if (($217 | 0) > 1) {
  $$2296313 = 0;
  $$2315 = HEAP32[$21 + 1296 >> 2] | 0;
  $$3281314 = 1;
  while (1) {
   $222 = HEAP32[$21 + ($$3281314 * 1300 | 0) + 1296 >> 2] | 0;
   $223 = ($222 | 0) < ($$2315 | 0);
   $spec$select302 = $223 ? $$3281314 : $$2296313;
   $$3281314 = $$3281314 + 1 | 0;
   if (($$3281314 | 0) == ($217 | 0)) {
    $$2296$lcssa = $spec$select302;
    break;
   } else {
    $$2296313 = $spec$select302;
    $$2315 = $223 ? $222 : $$2315;
   }
  }
 } else $$2296$lcssa = 0;
 HEAP8[$2 + 34 >> 0] = HEAP32[$21 + ($$2296$lcssa * 1300 | 0) + 1292 >> 2];
 $232 = HEAP32[$11 + ((HEAP32[$89 >> 2] | 0) + -1 << 2) >> 2] | 0;
 if (($$1286 | 0) <= 0) {
  $278 = $1 + 3840 | 0;
  $279 = HEAP32[$59 >> 2] | 0;
  $280 = $21 + ($$2296$lcssa * 1300 | 0) + ($279 << 2) | 0;
  dest = $278;
  src = $280;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $281 = $1 + 4224 | 0;
  $282 = $21 + ($$2296$lcssa * 1300 | 0) + 1184 | 0;
  dest = $281;
  src = $282;
  stop = dest + 96 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $283 = $21 + ($$2296$lcssa * 1300 | 0) + 1280 | 0;
  $284 = HEAP32[$283 >> 2] | 0;
  $285 = $1 + 4320 | 0;
  HEAP32[$285 >> 2] = $284;
  $286 = $21 + ($$2296$lcssa * 1300 | 0) + 1284 | 0;
  $287 = HEAP32[$286 >> 2] | 0;
  $288 = $1 + 4324 | 0;
  HEAP32[$288 >> 2] = $287;
  $289 = HEAP32[$89 >> 2] | 0;
  $290 = $289 + -1 | 0;
  $291 = $12 + ($290 << 2) | 0;
  $292 = HEAP32[$291 >> 2] | 0;
  HEAP32[$17 >> 2] = $292;
  $293 = HEAP32[$79 >> 2] | 0;
  $294 = $1 + ($293 << 1) | 0;
  $295 = HEAP32[$77 >> 2] | 0;
  $296 = $295 << 1;
  _memmove($1 | 0, $294 | 0, $296 | 0) | 0;
  $297 = $1 + 1280 | 0;
  $298 = HEAP32[$79 >> 2] | 0;
  $299 = $1 + 1280 + ($298 << 2) | 0;
  $300 = HEAP32[$77 >> 2] | 0;
  $301 = $300 << 2;
  _memmove($297 | 0, $299 | 0, $301 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $237 = $232 >>> 6 << 16 >> 16;
 $240 = ($232 >> 21) + 1 >> 1;
 $$2289311 = (HEAP32[$15 >> 2] | 0) + $$1286 | 0;
 $$3276312 = 0;
 do {
  $242 = ($$2289311 + -1 | 0) % 40 | 0;
  $$2289311 = ($242 | 0) < 0 ? $242 + 40 | 0 : $242;
  $251 = $$3276312 - $$1286 | 0;
  HEAP8[$$0271$lcssa + $251 >> 0] = (((HEAP32[$21 + ($$2296$lcssa * 1300 | 0) + 544 + ($$2289311 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
  $254 = HEAP32[$21 + ($$2296$lcssa * 1300 | 0) + 704 + ($$2289311 << 2) >> 2] | 0;
  $262 = (Math_imul($254 >> 16, $237) | 0) + (Math_imul($254, $240) | 0) + ((Math_imul($254 & 65535, $237) | 0) >> 16) | 0;
  HEAP16[$$0277$lcssa + ($251 << 1) >> 1] = ($262 | 0) > 8388479 ? 32767 : ($262 | 0) < -8388736 ? -32768 : (($262 >>> 7) + 1 | 0) >>> 1 & 65535;
  HEAP32[$1 + 1280 + ($251 + (HEAP32[$86 >> 2] | 0) << 2) >> 2] = HEAP32[$21 + ($$2296$lcssa * 1300 | 0) + 1024 + ($$2289311 << 2) >> 2];
  $$3276312 = $$3276312 + 1 | 0;
 } while (($$3276312 | 0) != ($$1286 | 0));
 $278 = $1 + 3840 | 0;
 $279 = HEAP32[$59 >> 2] | 0;
 $280 = $21 + ($$2296$lcssa * 1300 | 0) + ($279 << 2) | 0;
 dest = $278;
 src = $280;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $281 = $1 + 4224 | 0;
 $282 = $21 + ($$2296$lcssa * 1300 | 0) + 1184 | 0;
 dest = $281;
 src = $282;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $283 = $21 + ($$2296$lcssa * 1300 | 0) + 1280 | 0;
 $284 = HEAP32[$283 >> 2] | 0;
 $285 = $1 + 4320 | 0;
 HEAP32[$285 >> 2] = $284;
 $286 = $21 + ($$2296$lcssa * 1300 | 0) + 1284 | 0;
 $287 = HEAP32[$286 >> 2] | 0;
 $288 = $1 + 4324 | 0;
 HEAP32[$288 >> 2] = $287;
 $289 = HEAP32[$89 >> 2] | 0;
 $290 = $289 + -1 | 0;
 $291 = $12 + ($290 << 2) | 0;
 $292 = HEAP32[$291 >> 2] | 0;
 HEAP32[$17 >> 2] = $292;
 $293 = HEAP32[$79 >> 2] | 0;
 $294 = $1 + ($293 << 1) | 0;
 $295 = HEAP32[$77 >> 2] | 0;
 $296 = $295 << 1;
 _memmove($1 | 0, $294 | 0, $296 | 0) | 0;
 $297 = $1 + 1280 | 0;
 $298 = HEAP32[$79 >> 2] | 0;
 $299 = $1 + 1280 + ($298 << 2) | 0;
 $300 = HEAP32[$77 >> 2] | 0;
 $301 = $300 << 2;
 _memmove($297 | 0, $299 | 0, $301 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _silk_NLSF_del_dec_quant($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0177216 = 0, $$0179 = 0, $$0180 = 0, $$0181 = 0, $$0182 = 0, $$0183235 = 0, $$0241 = 0, $$1172 = 0, $$1172$1 = 0, $$1172$2 = 0, $$1178227 = 0, $$1184 = 0, $$1190$3 = 0, $$1237$in = 0, $$2231 = 0, $$sink = 0, $$sink249 = 0, $$sink250 = 0, $$sink251 = 0, $$sink252 = 0, $$sink253 = 0, $$sink254 = 0, $$sink255 = 0, $$sink256 = 0, $$sink257 = 0, $$sink258 = 0, $$sink259 = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $122 = 0, $13 = 0, $133 = 0, $134 = 0, $136 = 0, $14 = 0, $144 = 0, $15 = 0, $16 = 0, $162 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $198 = 0, $20 = 0, $207 = 0, $208 = 0, $211 = 0, $218 = 0, $225 = 0, $232 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $261 = 0, $262 = 0, $264 = 0, $266 = 0, $267 = 0, $269 = 0, $35 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $72 = 0, $75 = 0, $79 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $93 = 0, $97 = 0, $spec$select$3 = 0, $spec$select207$1 = 0, $spec$select207$2 = 0, $spec$select208$7 = 0, $spec$select209$1 = 0, $spec$select209$2 = 0, $spec$select209$3 = 0, $spec$select209$4 = 0, $spec$select209$5 = 0, $spec$select209$6 = 0, $spec$select209$7 = 0, label = 0, sp = 0, $$1237$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $10 = sp + 304 | 0;
 $11 = sp + 240 | 0;
 $12 = sp + 224 | 0;
 $13 = sp + 192 | 0;
 $14 = sp + 176 | 0;
 $15 = sp + 160 | 0;
 $16 = sp + 80 | 0;
 $17 = sp;
 $18 = $6 << 16 >> 16;
 $$0241 = -10;
 do {
  $19 = $$0241 << 26 >> 16;
  $20 = $19 + 1024 | 0;
  do if (($$0241 | 0) > 0) {
   $$0179 = ($20 << 16 >> 16) + -102 | 0;
   $$0180 = $19 + -102 | 0;
  } else if (!$$0241) {
   $$0179 = ($20 << 16 >> 16) + -102 | 0;
   $$0180 = 0;
   break;
  } else {
   $$0179 = ($$0241 | 0) == -1 ? $20 : $20 & 64512 | 102;
   $$0180 = $19 | 102;
   break;
  } while (0);
  $35 = $$0241 + 10 | 0;
  HEAP32[$16 + ($35 << 2) >> 2] = (Math_imul($$0180 << 16 >> 16, $18) | 0) >> 16;
  HEAP32[$17 + ($35 << 2) >> 2] = (Math_imul($$0179 << 16 >> 16, $18) | 0) >> 16;
  $$0241 = $$0241 + 1 | 0;
 } while (($$0241 | 0) != 10);
 HEAP32[$13 >> 2] = 0;
 HEAP16[$12 >> 1] = 0;
 $42 = $9 << 16 >> 16;
 $43 = $9 << 16 >> 16 > 0;
 if ($43) {
  $44 = $7 << 16 >> 16;
  $45 = $8 << 16 >> 16;
  $46 = $13 + 16 | 0;
  $47 = $12 + 8 | 0;
  $48 = $13 + 4 | 0;
  $49 = $13 + 20 | 0;
  $50 = $12 + 2 | 0;
  $51 = $12 + 10 | 0;
  $52 = $15 + 4 | 0;
  $53 = $14 + 4 | 0;
  $54 = $10 + 4 | 0;
  $55 = $13 + 8 | 0;
  $56 = $13 + 24 | 0;
  $57 = $12 + 4 | 0;
  $58 = $12 + 12 | 0;
  $59 = $15 + 8 | 0;
  $60 = $14 + 8 | 0;
  $61 = $10 + 8 | 0;
  $62 = $13 + 12 | 0;
  $63 = $13 + 28 | 0;
  $64 = $12 + 6 | 0;
  $65 = $12 + 14 | 0;
  $66 = $15 + 12 | 0;
  $67 = $14 + 12 | 0;
  $68 = $10 + 12 | 0;
  $$0183235 = 1;
  $$1237$in = $42;
  while (1) {
   $$1237$in$looptemp = $$1237$in;
   $$1237$in = $$1237$in + -1 | 0;
   $72 = $5 + (HEAP16[$4 + ($$1237$in << 1) >> 1] | 0) | 0;
   $75 = HEAP16[$1 + ($$1237$in << 1) >> 1] | 0;
   L15 : do if (($$0183235 | 0) > 0) {
    $79 = HEAPU8[$3 + $$1237$in >> 0] | 0;
    $82 = HEAP16[$2 + ($$1237$in << 1) >> 1] | 0;
    $83 = $72 + 7 | 0;
    $84 = $72 + 1 | 0;
    $$0177216 = 0;
    do {
     $85 = $12 + ($$0177216 << 1) | 0;
     $89 = (Math_imul(HEAP16[$85 >> 1] | 0, $79) | 0) >> 8;
     $92 = Math_imul($75 - $89 << 16 >> 16, $44) | 0;
     $93 = $92 >> 16;
     $97 = ($92 | 0) > 655359 ? 9 : ($93 | 0) > -10 ? $93 : -10;
     HEAP8[$11 + ($$0177216 << 4) + $$1237$in >> 0] = $97;
     $100 = $97 + 10 | 0;
     $105 = $89 + (HEAP32[$16 + ($100 << 2) >> 2] | 0) | 0;
     $107 = (HEAP32[$17 + ($100 << 2) >> 2] | 0) + $89 | 0;
     HEAP16[$85 >> 1] = $105;
     $109 = $$0177216 + $$0183235 | 0;
     HEAP16[$12 + ($109 << 1) >> 1] = $107;
     do if (($97 | 0) > 2) if (($97 | 0) == 3) {
      $$0181 = 280;
      $$0182 = HEAPU8[$83 >> 0] | 0;
      break;
     } else {
      $115 = $97 * 43 | 0;
      $$0181 = $115 + 151 | 0;
      $$0182 = $115 + 108 | 0;
      break;
     } else {
      if (($97 | 0) >= -3) {
       $$0181 = HEAPU8[$72 + ($97 + 5) >> 0] | 0;
       $$0182 = HEAPU8[$72 + ($97 + 4) >> 0] | 0;
       break;
      }
      if (($97 | 0) == -4) {
       $$0181 = HEAPU8[$84 >> 0] | 0;
       $$0182 = 280;
       break;
      } else {
       $122 = Math_imul($97, -43) | 0;
       $$0181 = $122 + 65 | 0;
       $$0182 = $122 + 108 | 0;
       break;
      }
     } while (0);
     $133 = $13 + ($$0177216 << 2) | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $136 = $75 - $105 << 16 >> 16;
     HEAP32[$133 >> 2] = (Math_imul($$0182 << 16 >> 16, $45) | 0) + $134 + (Math_imul(Math_imul($136, $136) | 0, $82) | 0);
     $144 = $75 - $107 << 16 >> 16;
     HEAP32[$13 + ($109 << 2) >> 2] = (Math_imul($$0181 << 16 >> 16, $45) | 0) + $134 + (Math_imul(Math_imul($144, $144) | 0, $82) | 0);
     $$0177216 = $$0177216 + 1 | 0;
    } while (($$0177216 | 0) != ($$0183235 | 0));
    if (($$0183235 | 0) < 3) {
     $$1178227 = 0;
     while (1) {
      HEAP8[$11 + ($$1178227 + $$0183235 << 4) + $$1237$in >> 0] = (HEAPU8[$11 + ($$1178227 << 4) + $$1237$in >> 0] | 0) + 1;
      $$1178227 = $$1178227 + 1 | 0;
      if (($$1178227 | 0) == ($$0183235 | 0)) {
       label = 25;
       break L15;
      }
     }
    }
    $170 = HEAP32[$13 >> 2] | 0;
    $171 = HEAP32[$46 >> 2] | 0;
    if (($170 | 0) > ($171 | 0)) {
     HEAP32[$13 >> 2] = $171;
     HEAP32[$46 >> 2] = $170;
     $173 = HEAP16[$12 >> 1] | 0;
     HEAP16[$12 >> 1] = HEAP16[$47 >> 1] | 0;
     HEAP16[$47 >> 1] = $173;
     $$sink = 4;
     $$sink249 = $171;
     $$sink250 = $170;
    } else {
     $$sink = 0;
     $$sink249 = $170;
     $$sink250 = $171;
    }
    HEAP32[$15 >> 2] = $$sink250;
    HEAP32[$14 >> 2] = $$sink249;
    HEAP32[$10 >> 2] = $$sink;
    $175 = HEAP32[$48 >> 2] | 0;
    $176 = HEAP32[$49 >> 2] | 0;
    if (($175 | 0) > ($176 | 0)) {
     HEAP32[$48 >> 2] = $176;
     HEAP32[$49 >> 2] = $175;
     $259 = HEAP16[$50 >> 1] | 0;
     HEAP16[$50 >> 1] = HEAP16[$51 >> 1] | 0;
     HEAP16[$51 >> 1] = $259;
     $$sink251 = 5;
     $$sink252 = $176;
     $$sink253 = $175;
    } else {
     $$sink251 = 1;
     $$sink252 = $175;
     $$sink253 = $176;
    }
    HEAP32[$52 >> 2] = $$sink253;
    HEAP32[$53 >> 2] = $$sink252;
    HEAP32[$54 >> 2] = $$sink251;
    $261 = HEAP32[$55 >> 2] | 0;
    $262 = HEAP32[$56 >> 2] | 0;
    if (($261 | 0) > ($262 | 0)) {
     HEAP32[$55 >> 2] = $262;
     HEAP32[$56 >> 2] = $261;
     $264 = HEAP16[$57 >> 1] | 0;
     HEAP16[$57 >> 1] = HEAP16[$58 >> 1] | 0;
     HEAP16[$58 >> 1] = $264;
     $$sink254 = 6;
     $$sink255 = $262;
     $$sink256 = $261;
    } else {
     $$sink254 = 2;
     $$sink255 = $261;
     $$sink256 = $262;
    }
    HEAP32[$59 >> 2] = $$sink256;
    HEAP32[$60 >> 2] = $$sink255;
    HEAP32[$61 >> 2] = $$sink254;
    $266 = HEAP32[$62 >> 2] | 0;
    $267 = HEAP32[$63 >> 2] | 0;
    if (($266 | 0) > ($267 | 0)) {
     HEAP32[$62 >> 2] = $267;
     HEAP32[$63 >> 2] = $266;
     $269 = HEAP16[$64 >> 1] | 0;
     HEAP16[$64 >> 1] = HEAP16[$65 >> 1] | 0;
     HEAP16[$65 >> 1] = $269;
     $$sink257 = 7;
     $$sink258 = $267;
     $$sink259 = $266;
    } else {
     $$sink257 = 3;
     $$sink258 = $266;
     $$sink259 = $267;
    }
    HEAP32[$66 >> 2] = $$sink259;
    HEAP32[$67 >> 2] = $$sink258;
    HEAP32[$68 >> 2] = $$sink257;
    $178 = $$sink249;
    $180 = $$sink250;
    $182 = $$sink253;
    $184 = $$sink252;
    $186 = $$sink256;
    $188 = $$sink255;
    $190 = $$sink259;
    $192 = $$sink258;
    while (1) {
     $$1172 = ($178 | 0) > 0 ? $178 : 0;
     $181 = ($180 | 0) > ($182 | 0);
     $spec$select207$1 = $181 ? $182 : $180;
     $183 = ($$1172 | 0) < ($184 | 0);
     $$1172$1 = $183 ? $184 : $$1172;
     $185 = ($spec$select207$1 | 0) > ($186 | 0);
     $spec$select207$2 = $185 ? $186 : $spec$select207$1;
     $187 = ($$1172$1 | 0) < ($188 | 0);
     $$1172$2 = $187 ? $188 : $$1172$1;
     $189 = ($spec$select207$2 | 0) > ($190 | 0);
     $spec$select$3 = $189 ? 3 : $185 ? 2 : $181 & 1;
     $191 = ($$1172$2 | 0) < ($192 | 0);
     $$1190$3 = $191 ? 3 : $187 ? 2 : $183 & 1;
     if ((($189 ? $190 : $spec$select207$2) | 0) >= (($191 ? $192 : $$1172$2) | 0)) break;
     HEAP32[$10 + ($$1190$3 << 2) >> 2] = HEAP32[$10 + ($spec$select$3 << 2) >> 2] ^ 4;
     $198 = $spec$select$3 | 4;
     HEAP32[$13 + ($$1190$3 << 2) >> 2] = HEAP32[$13 + ($198 << 2) >> 2];
     HEAP16[$12 + ($$1190$3 << 1) >> 1] = HEAP16[$12 + ($198 << 1) >> 1] | 0;
     HEAP32[$14 + ($$1190$3 << 2) >> 2] = 0;
     HEAP32[$15 + ($spec$select$3 << 2) >> 2] = 2147483647;
     $207 = $11 + ($$1190$3 << 4) | 0;
     $208 = $11 + ($spec$select$3 << 4) | 0;
     HEAP32[$207 >> 2] = HEAP32[$208 >> 2];
     HEAP32[$207 + 4 >> 2] = HEAP32[$208 + 4 >> 2];
     HEAP32[$207 + 8 >> 2] = HEAP32[$208 + 8 >> 2];
     HEAP32[$207 + 12 >> 2] = HEAP32[$208 + 12 >> 2];
     $178 = HEAP32[$14 >> 2] | 0;
     $180 = HEAP32[$15 >> 2] | 0;
     $182 = HEAP32[$52 >> 2] | 0;
     $184 = HEAP32[$53 >> 2] | 0;
     $186 = HEAP32[$59 >> 2] | 0;
     $188 = HEAP32[$60 >> 2] | 0;
     $190 = HEAP32[$66 >> 2] | 0;
     $192 = HEAP32[$67 >> 2] | 0;
    }
    $211 = $11 + $$1237$in | 0;
    HEAP8[$211 >> 0] = ((HEAP32[$10 >> 2] | 0) >>> 2) + (HEAPU8[$211 >> 0] | 0);
    $218 = $11 + 16 + $$1237$in | 0;
    HEAP8[$218 >> 0] = ((HEAP32[$54 >> 2] | 0) >>> 2) + (HEAPU8[$218 >> 0] | 0);
    $225 = $11 + 32 + $$1237$in | 0;
    HEAP8[$225 >> 0] = ((HEAP32[$61 >> 2] | 0) >>> 2) + (HEAPU8[$225 >> 0] | 0);
    $232 = $11 + 48 + $$1237$in | 0;
    HEAP8[$232 >> 0] = ((HEAP32[$68 >> 2] | 0) >>> 2) + (HEAPU8[$232 >> 0] | 0);
    $$1184 = $$0183235;
   } else label = 25; while (0);
   if ((label | 0) == 25) {
    label = 0;
    $162 = $$0183235 << 1;
    if (($162 | 0) < 4) {
     $$2231 = $162;
     while (1) {
      HEAP8[$11 + ($$2231 << 4) + $$1237$in >> 0] = HEAP8[$11 + ($$2231 - $162 << 4) + $$1237$in >> 0] | 0;
      if (($$2231 | 0) < 3) $$2231 = $$2231 + 1 | 0; else {
       $$1184 = $162;
       break;
      }
     }
    } else $$1184 = $162;
   }
   if (($$1237$in$looptemp | 0) <= 1) break; else $$0183235 = $$1184;
  }
  $238 = HEAP32[$13 >> 2] | 0;
  $240 = HEAP32[$48 >> 2] | 0;
  $242 = HEAP32[$55 >> 2] | 0;
  $244 = HEAP32[$62 >> 2] | 0;
  $246 = HEAP32[$46 >> 2] | 0;
  $248 = HEAP32[$49 >> 2] | 0;
  $250 = HEAP32[$56 >> 2] | 0;
  $252 = HEAP32[$63 >> 2] | 0;
 } else {
  $238 = 0;
  $240 = 0;
  $242 = 0;
  $244 = 0;
  $246 = 0;
  $248 = 0;
  $250 = 0;
  $252 = 0;
 }
 $239 = ($238 | 0) > ($240 | 0);
 $spec$select209$1 = $239 ? $240 : $238;
 $241 = ($spec$select209$1 | 0) > ($242 | 0);
 $spec$select209$2 = $241 ? $242 : $spec$select209$1;
 $243 = ($spec$select209$2 | 0) > ($244 | 0);
 $spec$select209$3 = $243 ? $244 : $spec$select209$2;
 $245 = ($spec$select209$3 | 0) > ($246 | 0);
 $spec$select209$4 = $245 ? $246 : $spec$select209$3;
 $247 = ($spec$select209$4 | 0) > ($248 | 0);
 $spec$select209$5 = $247 ? $248 : $spec$select209$4;
 $249 = ($spec$select209$5 | 0) > ($250 | 0);
 $spec$select209$6 = $249 ? $250 : $spec$select209$5;
 $251 = ($spec$select209$6 | 0) > ($252 | 0);
 $spec$select208$7 = $251 ? 7 : $249 ? 6 : $247 ? 5 : $245 ? 4 : $243 ? 3 : $241 ? 2 : $239 & 1;
 $spec$select209$7 = $251 ? $252 : $spec$select209$6;
 if (!$43) {
  $254 = $spec$select208$7 >>> 2;
  $255 = HEAP8[$0 >> 0] | 0;
  $256 = $255 & 255;
  $257 = $254 + $256 | 0;
  $258 = $257 & 255;
  HEAP8[$0 >> 0] = $258;
  STACKTOP = sp;
  return $spec$select209$7 | 0;
 }
 _memcpy($0 | 0, $11 + (($spec$select208$7 & 3) << 4) | 0, $42 | 0) | 0;
 $254 = $spec$select208$7 >>> 2;
 $255 = HEAP8[$0 >> 0] | 0;
 $256 = $255 & 255;
 $257 = $254 + $256 | 0;
 $258 = $257 & 255;
 HEAP8[$0 >> 0] = $258;
 STACKTOP = sp;
 return $spec$select209$7 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[12444] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[12445] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   HEAP32[12442] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 49800 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[12440] = HEAP32[12440] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 50064 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[12441] = HEAP32[12441] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    }
   } else if ((HEAP32[12444] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[12444] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
   } else if ((HEAP32[12444] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $113 = $2;
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[12446] | 0) == ($10 | 0)) {
   $124 = (HEAP32[12443] | 0) + $$1380 | 0;
   HEAP32[12443] = $124;
   HEAP32[12446] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[12445] | 0)) return;
   HEAP32[12445] = 0;
   HEAP32[12442] = 0;
   return;
  }
  if ((HEAP32[12445] | 0) == ($10 | 0)) {
   $132 = (HEAP32[12442] | 0) + $$1380 | 0;
   HEAP32[12442] = $132;
   HEAP32[12445] = $113;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$113 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 49800 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[12444] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[12440] = HEAP32[12440] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[12444] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[12444] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[12444] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 50064 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[12441] = HEAP32[12441] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[12444] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[12444] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[12444] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$113 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[12445] | 0)) {
   HEAP32[12442] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$113 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 49800 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[12440] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[12440] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[12444] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 50064 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[12441] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[12441] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[12444] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[12444] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[12448] | 0) + -1 | 0;
 HEAP32[12448] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 50216;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[12448] = -1;
 return;
}

function _update_filter($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0221258 = 0, $$0222264 = 0, $$0225236 = 0, $$0226 = 0, $$0227277 = 0, $$0228268 = 0, $$0229272 = 0, $$1238 = 0, $$2$lcssa = 0, $$2245320 = 0, $$2245320$phi = 0, $$3251 = 0, $$4242 = 0, $$in = 0, $$in281 = 0, $$lcssa = 0, $$lcssa233 = 0, $$lcssa235 = 0, $$phi$trans$insert299 = 0, $$pre$phi304Z2D = 0, $$pre$phiZ2D = 0, $$pre292 = 0, $$pre300 = 0, $1 = 0, $101 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $114 = 0, $115 = 0, $119 = 0, $122 = 0, $128 = 0.0, $14 = 0, $140 = 0, $145 = 0, $146 = 0, $149 = 0, $15 = 0, $152 = 0, $156 = 0, $161 = 0, $164 = 0, $166 = 0, $17 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $191 = 0, $193 = 0, $2 = 0, $20 = 0, $201 = 0, $204 = 0, $213 = 0, $216 = 0, $218 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $232 = 0, $241 = 0, $242 = 0, $244 = 0, $251 = 0, $255 = 0, $261 = 0, $272 = 0, $275 = 0, $278 = 0, $280 = 0, $294 = 0, $297 = 0, $298 = 0, $3 = 0, $300 = 0, $301 = 0, $303 = 0, $307 = 0, $308 = 0, $309 = 0, $313 = 0, $316 = 0, $318 = 0, $325 = 0, $327 = 0, $33 = 0, $331 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0.0, $85 = 0, $9 = 0, $90 = 0, $96 = 0.0, $spec$select = 0, label = 0, $$0228268$looptemp = 0;
 $1 = $0 + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = ($6 >>> 0) / ($8 >>> 0) | 0;
 HEAP32[$0 + 36 >> 2] = $9;
 HEAP32[$0 + 40 >> 2] = $6 - (Math_imul($9, $8) | 0);
 $14 = $0 + 16 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $17 = HEAP32[34800 + ($15 * 20 | 0) + 4 >> 2] | 0;
 $18 = $0 + 48 | 0;
 HEAP32[$18 >> 2] = $17;
 $20 = HEAP32[34800 + ($15 * 20 | 0) >> 2] | 0;
 HEAP32[$1 >> 2] = $20;
 if ($6 >>> 0 > $8 >>> 0) {
  HEAPF32[$0 + 44 >> 2] = +HEAPF32[34800 + ($15 * 20 | 0) + 8 >> 2] * +($8 >>> 0) / +($6 >>> 0);
  if (!(_multiply_frac($1, $20, $6, $8) | 0)) {
   $33 = (HEAP32[$1 >> 2] | 0) + 7 & -8;
   HEAP32[$1 >> 2] = $33;
   $34 = HEAP32[$7 >> 2] | 0;
   $36 = HEAP32[$5 >> 2] | 0;
   if ($34 << 1 >>> 0 < $36 >>> 0) HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) >>> 1;
   $41 = $34 << 2 >>> 0 < $36 >>> 0;
   $44 = (HEAP32[$18 >> 2] | 0) >>> ($41 & 1);
   $46 = $34 << 3 >>> 0 < $36 >>> 0;
   $50 = $34 << 4 >>> 0 < $36 >>> 0;
   $spec$select = $44 >>> ($46 & 1) >>> ($50 & 1);
   $52 = $46 | $50;
   if ($41 | $52) HEAP32[$18 >> 2] = $52 ? $spec$select : $44;
   if (!$spec$select) {
    HEAP32[$18 >> 2] = 1;
    $59 = $33;
    $60 = $34;
    $62 = 1;
    label = 10;
   } else {
    $59 = $33;
    $60 = $34;
    $62 = $spec$select;
    label = 10;
   }
  }
 } else {
  HEAP32[$0 + 44 >> 2] = HEAP32[34800 + ($15 * 20 | 0) + 12 >> 2];
  $59 = $20;
  $60 = $8;
  $62 = $17;
  label = 10;
 }
 do if ((label | 0) == 10) {
  $58 = Math_imul($60, $59) | 0;
  $63 = (Math_imul($62, $59) | 0) + 8 | 0;
  if ($58 >>> 0 > $63 >>> 0) label = 12; else if ((536870911 / ($60 >>> 0) | 0) >>> 0 < $59 >>> 0) label = 12; else {
   $$0226 = $58;
   $335 = 1;
  }
  if ((label | 0) == 12) if ((536870903 / ($62 >>> 0) | 0) >>> 0 < $59 >>> 0) break; else {
   $$0226 = $63;
   $335 = 0;
  }
  $69 = $0 + 80 | 0;
  if ((HEAP32[$69 >> 2] | 0) >>> 0 < $$0226 >>> 0) {
   $72 = $0 + 76 | 0;
   $75 = _speex_realloc(HEAP32[$72 >> 2] | 0, $$0226 << 2) | 0;
   if (!$75) break;
   HEAP32[$72 >> 2] = $75;
   HEAP32[$69 >> 2] = $$0226;
  }
  do if ($335) {
   $77 = HEAP32[$7 >> 2] | 0;
   if ($77 | 0) {
    $79 = $0 + 44 | 0;
    $80 = $0 + 76 | 0;
    $$0229272 = 0;
    $336 = $77;
    $81 = HEAP32[$1 >> 2] | 0;
    while (1) {
     if (!$81) {
      $105 = $336;
      $337 = 0;
     } else {
      $83 = +($$0229272 >>> 0);
      $$0228268 = 0;
      $85 = $81;
      $90 = $336;
      while (1) {
       $$0228268$looptemp = $$0228268;
       $$0228268 = $$0228268 + 1 | 0;
       $96 = +_sinc(+HEAPF32[$79 >> 2], +($$0228268 + (($85 | 0) / -2 | 0) | 0) - $83 / +($90 >>> 0), $85, HEAP32[34800 + ((HEAP32[$14 >> 2] | 0) * 20 | 0) + 16 >> 2] | 0);
       HEAPF32[(HEAP32[$80 >> 2] | 0) + ((Math_imul($85, $$0229272) | 0) + $$0228268$looptemp << 2) >> 2] = $96;
       $101 = HEAP32[$1 >> 2] | 0;
       $$pre292 = HEAP32[$7 >> 2] | 0;
       if ($$0228268 >>> 0 >= $101 >>> 0) {
        $105 = $$pre292;
        $337 = $101;
        break;
       } else {
        $85 = $101;
        $90 = $$pre292;
       }
      }
     }
     $$0229272 = $$0229272 + 1 | 0;
     if ($$0229272 >>> 0 >= $105 >>> 0) break; else {
      $336 = $105;
      $81 = $337;
     }
    }
   }
   $108 = $0 + 84 | 0;
   if ((HEAP32[$14 >> 2] | 0) > 8) {
    HEAP32[$108 >> 2] = 1;
    break;
   } else {
    HEAP32[$108 >> 2] = 2;
    break;
   }
  } else {
   $109 = HEAP32[$18 >> 2] | 0;
   $110 = HEAP32[$1 >> 2] | 0;
   if (((Math_imul($110, $109) | 0) + 4 | 0) > -4) {
    $114 = $0 + 44 | 0;
    $115 = $0 + 76 | 0;
    $$0227277 = -4;
    $119 = $109;
    $122 = $110;
    do {
     $128 = +_sinc(+HEAPF32[$114 >> 2], +($$0227277 | 0) / +($119 >>> 0) - +($122 >>> 1 >>> 0), $122, HEAP32[34800 + ((HEAP32[$14 >> 2] | 0) * 20 | 0) + 16 >> 2] | 0);
     HEAPF32[(HEAP32[$115 >> 2] | 0) + ($$0227277 + 4 << 2) >> 2] = $128;
     $$0227277 = $$0227277 + 1 | 0;
     $119 = HEAP32[$18 >> 2] | 0;
     $122 = HEAP32[$1 >> 2] | 0;
    } while (($$0227277 | 0) < ((Math_imul($122, $119) | 0) + 4 | 0));
   }
   $140 = $0 + 84 | 0;
   if ((HEAP32[$14 >> 2] | 0) > 8) {
    HEAP32[$140 >> 2] = 3;
    break;
   } else {
    HEAP32[$140 >> 2] = 4;
    break;
   }
  } while (0);
  $145 = (HEAP32[$1 >> 2] | 0) + -1 + (HEAP32[$0 + 32 >> 2] | 0) | 0;
  $146 = HEAP32[$3 >> 2] | 0;
  if ($145 >>> 0 > $146 >>> 0) {
   $149 = HEAP32[$0 + 20 >> 2] | 0;
   if ((536870911 / ($149 >>> 0) | 0) >>> 0 < $145 >>> 0) break;
   $152 = $0 + 72 | 0;
   $156 = _speex_realloc(HEAP32[$152 >> 2] | 0, Math_imul($145 << 2, $149) | 0) | 0;
   if (!$156) break;
   HEAP32[$152 >> 2] = $156;
   HEAP32[$3 >> 2] = $145;
   $164 = $145;
  } else $164 = $146;
  if (!(HEAP32[$0 + 56 >> 2] | 0)) {
   $161 = $0 + 20 | 0;
   if (!(Math_imul($164, HEAP32[$161 >> 2] | 0) | 0)) {
    $$0 = 0;
    return $$0 | 0;
   }
   $166 = $0 + 72 | 0;
   $$0225236 = 0;
   do {
    HEAPF32[(HEAP32[$166 >> 2] | 0) + ($$0225236 << 2) >> 2] = 0.0;
    $$0225236 = $$0225236 + 1 | 0;
   } while ($$0225236 >>> 0 < (Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[$161 >> 2] | 0) | 0) >>> 0);
   $$0 = 0;
   return $$0 | 0;
  }
  $174 = HEAP32[$1 >> 2] | 0;
  if ($174 >>> 0 <= $2 >>> 0) {
   if ($174 >>> 0 >= $2 >>> 0) {
    $$0 = 0;
    return $$0 | 0;
   }
   $294 = $0 + 20 | 0;
   if (!(HEAP32[$294 >> 2] | 0)) {
    $$0 = 0;
    return $$0 | 0;
   }
   $297 = $0 + 68 | 0;
   $298 = $0 + 72 | 0;
   $$0222264 = 0;
   $303 = $174;
   while (1) {
    $300 = (HEAP32[$297 >> 2] | 0) + ($$0222264 << 2) | 0;
    $301 = HEAP32[$300 >> 2] | 0;
    HEAP32[$300 >> 2] = ($2 - $303 | 0) >>> 1;
    $307 = (HEAP32[$297 >> 2] | 0) + ($$0222264 << 2) | 0;
    $308 = HEAP32[$307 >> 2] | 0;
    $309 = $308 + $301 | 0;
    if (($309 + -1 | 0) == (0 - (HEAP32[$1 >> 2] | 0) | 0)) {
     $$lcssa235 = $307;
     $$pre$phi304Z2D = $309;
    } else {
     $$0221258 = 0;
     $318 = $308;
     do {
      $313 = HEAP32[$298 >> 2] | 0;
      $316 = (Math_imul(HEAP32[$3 >> 2] | 0, $$0222264) | 0) + $$0221258 | 0;
      HEAP32[$313 + ($316 << 2) >> 2] = HEAP32[$313 + ($316 + $318 << 2) >> 2];
      $$0221258 = $$0221258 + 1 | 0;
      $325 = (HEAP32[$297 >> 2] | 0) + ($$0222264 << 2) | 0;
      $318 = HEAP32[$325 >> 2] | 0;
      $327 = $318 + $301 | 0;
     } while ($$0221258 >>> 0 < ($327 + -1 + (HEAP32[$1 >> 2] | 0) | 0) >>> 0);
     $$lcssa235 = $325;
     $$pre$phi304Z2D = $327;
    }
    HEAP32[$$lcssa235 >> 2] = $$pre$phi304Z2D;
    $331 = $$0222264 + 1 | 0;
    if ($331 >>> 0 >= (HEAP32[$294 >> 2] | 0) >>> 0) {
     $$0 = 0;
     break;
    }
    $$0222264 = $331;
    $303 = HEAP32[$1 >> 2] | 0;
   }
   return $$0 | 0;
  }
  $177 = HEAP32[$0 + 20 >> 2] | 0;
  if (!$177) {
   $$0 = 0;
   return $$0 | 0;
  }
  $179 = $0 + 68 | 0;
  $180 = $2 + -1 | 0;
  $181 = $0 + 72 | 0;
  $182 = $0 + 60 | 0;
  $$in = $177;
  do {
   $$in = $$in + -1 | 0;
   $185 = (HEAP32[$179 >> 2] | 0) + ($$in << 2) | 0;
   $186 = HEAP32[$185 >> 2] | 0;
   $188 = ($186 << 1) + $2 | 0;
   $189 = $180 + $186 | 0;
   if (!$189) {
    $$pre$phiZ2D = $185;
    $204 = $186;
   } else {
    $191 = Math_imul($$in, $4) | 0;
    $$in281 = $189;
    $201 = $186;
    while (1) {
     $$in281 = $$in281 + -1 | 0;
     $193 = HEAP32[$181 >> 2] | 0;
     HEAP32[$193 + ((Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0) + $$in281 + $201 << 2) >> 2] = HEAP32[$193 + ($$in281 + $191 << 2) >> 2];
     $$phi$trans$insert299 = (HEAP32[$179 >> 2] | 0) + ($$in << 2) | 0;
     $$pre300 = HEAP32[$$phi$trans$insert299 >> 2] | 0;
     if (!$$in281) {
      $$pre$phiZ2D = $$phi$trans$insert299;
      $204 = $$pre300;
      break;
     } else $201 = $$pre300;
    }
   }
   if (!$204) $$lcssa = $$pre$phiZ2D; else {
    $$1238 = 0;
    do {
     HEAPF32[(HEAP32[$181 >> 2] | 0) + ((Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0) + $$1238 << 2) >> 2] = 0.0;
     $$1238 = $$1238 + 1 | 0;
     $213 = (HEAP32[$179 >> 2] | 0) + ($$in << 2) | 0;
    } while ($$1238 >>> 0 < (HEAP32[$213 >> 2] | 0) >>> 0);
    $$lcssa = $213;
   }
   HEAP32[$$lcssa >> 2] = 0;
   $216 = HEAP32[$1 >> 2] | 0;
   if ($188 >>> 0 < $216 >>> 0) {
    $218 = $188 + -1 | 0;
    if (!$218) {
     $$2$lcssa = 0;
     $244 = $216;
    } else {
     $220 = $188 + -2 | 0;
     $221 = HEAP32[$181 >> 2] | 0;
     $223 = Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0;
     HEAP32[$221 + ($223 + -2 + $216 << 2) >> 2] = HEAP32[$221 + ($220 + $223 << 2) >> 2];
     if (($218 | 0) != 1) {
      $$2245320 = 0;
      $242 = 1;
      while (1) {
       $230 = HEAP32[$181 >> 2] | 0;
       $232 = Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0;
       HEAP32[$230 + (-3 - $$2245320 + $232 + (HEAP32[$1 >> 2] | 0) << 2) >> 2] = HEAP32[$230 + ($220 + ~$$2245320 + $232 << 2) >> 2];
       $241 = $242 + 1 | 0;
       if (($241 | 0) == ($218 | 0)) break; else {
        $$2245320$phi = $242;
        $242 = $241;
        $$2245320 = $$2245320$phi;
       }
      }
     }
     $$2$lcssa = $218;
     $244 = HEAP32[$1 >> 2] | 0;
    }
    if ($$2$lcssa >>> 0 < ($244 + -1 | 0) >>> 0) {
     $$3251 = $$2$lcssa;
     $251 = $244;
     while (1) {
      HEAPF32[(HEAP32[$181 >> 2] | 0) + (-2 - $$3251 + $251 + (Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0) << 2) >> 2] = 0.0;
      $$3251 = $$3251 + 1 | 0;
      $255 = HEAP32[$1 >> 2] | 0;
      if ($$3251 >>> 0 >= ($255 + -1 | 0) >>> 0) {
       $$lcssa233 = $255;
       break;
      } else $251 = $255;
     }
    } else $$lcssa233 = $244;
    $261 = (HEAP32[$182 >> 2] | 0) + ($$in << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (($$lcssa233 - $188 | 0) >>> 1);
   } else {
    HEAP32[(HEAP32[$179 >> 2] | 0) + ($$in << 2) >> 2] = ($188 - $216 | 0) >>> 1;
    $272 = HEAP32[(HEAP32[$179 >> 2] | 0) + ($$in << 2) >> 2] | 0;
    if (((HEAP32[$1 >> 2] | 0) + -1 | 0) != (0 - $272 | 0)) {
     $$4242 = 0;
     $280 = $272;
     do {
      $275 = HEAP32[$181 >> 2] | 0;
      $278 = (Math_imul(HEAP32[$3 >> 2] | 0, $$in) | 0) + $$4242 | 0;
      HEAP32[$275 + ($278 << 2) >> 2] = HEAP32[$275 + ($278 + $280 << 2) >> 2];
      $$4242 = $$4242 + 1 | 0;
      $280 = HEAP32[(HEAP32[$179 >> 2] | 0) + ($$in << 2) >> 2] | 0;
     } while ($$4242 >>> 0 < ((HEAP32[$1 >> 2] | 0) + -1 + $280 | 0) >>> 0);
    }
   }
  } while (($$in | 0) != 0);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 HEAP32[$0 + 84 >> 2] = 5;
 HEAP32[$1 >> 2] = $2;
 $$0 = 1;
 return $$0 | 0;
}

function _silk_stereo_LR_to_MS($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0246281 = 0, $$0247 = 0, $$0249280 = 0, $$0250279 = 0, $$0294 = 0, $$1248$ph = 0, $$1248272$ph = 0, $$1248272276 = 0, $$1248272277 = 0, $$1248273 = 0, $$1290 = 0, $$2286 = 0, $$3282 = 0, $$4278 = 0, $$pre$phi307Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $11 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $15 = 0, $150 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $172 = 0, $176 = 0, $177 = 0, $18 = 0, $193 = 0, $194 = 0, $207 = 0, $209 = 0, $21 = 0, $221 = 0, $224 = 0, $236 = 0, $237 = 0, $239 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $245 = 0, $248 = 0, $25 = 0, $252 = 0, $253 = 0, $259 = 0, $26 = 0, $260 = 0, $267 = 0, $285 = 0, $287 = 0, $292 = 0, $298 = 0, $305 = 0, $314 = 0, $328 = 0, $329 = 0, $331 = 0, $333 = 0, $34 = 0, $344 = 0, $346 = 0, $350 = 0, $369 = 0, $380 = 0, $381 = 0, $382 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $72 = 0, $79 = 0, $80 = 0, $82 = 0, $82$phi = 0, $85 = 0, $90 = 0, $95 = 0, $spec$select = 0, $spec$store$select = 0, label = 0, sp = 0, $$1290$looptemp = 0, $59$looptemp = 0, $$3282$looptemp = 0, $$4278$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = $1 + -4 | 0;
 $15 = $10 + 2 | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 1) | 0) + 15 & -16) | 0;
 if (($10 | 0) > -2) {
  $$0294 = 0;
  do {
   $18 = $$0294 + -2 | 0;
   $21 = HEAP16[$1 + ($18 << 1) >> 1] | 0;
   $24 = HEAP16[$2 + ($18 << 1) >> 1] | 0;
   $25 = $24 + $21 | 0;
   $26 = $21 - $24 | 0;
   HEAP16[$14 + ($$0294 << 1) >> 1] = ($25 >>> 1) + ($25 & 1);
   $34 = ($26 >> 1) + ($26 & 1) | 0;
   $spec$select = ($34 | 0) > -32768 ? $34 : -32768;
   HEAP16[$16 + ($$0294 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
   $$0294 = $$0294 + 1 | 0;
  } while (($$0294 | 0) < ($15 | 0));
 }
 $42 = $0 + 4 | 0;
 $43 = HEAPU16[$42 >> 1] | HEAPU16[$42 + 2 >> 1] << 16;
 HEAP16[$14 >> 1] = $43;
 HEAP16[$14 + 2 >> 1] = $43 >>> 16;
 $44 = $0 + 8 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 HEAP32[$16 >> 2] = $45;
 $46 = $14 + ($10 << 1) | 0;
 $47 = HEAPU16[$46 >> 1] | HEAPU16[$46 + 2 >> 1] << 16;
 HEAP16[$42 >> 1] = $47;
 HEAP16[$42 + 2 >> 1] = $47 >>> 16;
 $48 = $16 + ($10 << 1) | 0;
 $49 = HEAPU16[$48 >> 1] | HEAPU16[$48 + 2 >> 1] << 16;
 HEAP16[$44 >> 1] = $49;
 HEAP16[$44 + 2 >> 1] = $49 >>> 16;
 $50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $51 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $53 = $45 & 65535;
 $55 = $45 >>> 16 & 65535;
 if (($10 | 0) > 0) {
  $$1290 = 0;
  $59 = HEAP16[$14 >> 1] | 0;
  do {
   $$1290$looptemp = $$1290;
   $$1290 = $$1290 + 1 | 0;
   $59$looptemp = $59;
   $59 = HEAP16[$14 + ($$1290 << 1) >> 1] | 0;
   $72 = ((HEAP16[$1 + ($$1290$looptemp << 1) >> 1] | 0) + ($59$looptemp << 16 >> 16) + ($59 << 16 >> 16 << 1) >> 1) + 1 >> 1;
   HEAP16[$50 + ($$1290$looptemp << 1) >> 1] = $72;
   HEAP16[$51 + ($$1290$looptemp << 1) >> 1] = ($59 & 65535) - $72;
  } while (($$1290 | 0) != ($10 | 0));
  $79 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
  $80 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
  $$2286 = 0;
  $82 = $53;
  $90 = $55;
  while (1) {
   $85 = HEAP16[$16 + ($$2286 + 2 << 1) >> 1] | 0;
   $95 = (($85 << 16 >> 16) + ($82 << 16 >> 16) + ($90 << 16 >> 16 << 1) >> 1) + 1 >> 1;
   HEAP16[$79 + ($$2286 << 1) >> 1] = $95;
   HEAP16[$80 + ($$2286 << 1) >> 1] = ($90 & 65535) - $95;
   $$2286 = $$2286 + 1 | 0;
   if (($$2286 | 0) == ($10 | 0)) {
    $114 = $79;
    $117 = $80;
    break;
   } else {
    $82$phi = $90;
    $90 = $85;
    $82 = $82$phi;
   }
  }
 } else {
  $56 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
  $57 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
  $114 = $56;
  $117 = $57;
 }
 $103 = ($9 * 10 | 0) == ($10 | 0);
 $104 = $7 << 16 >> 16;
 $105 = Math_imul($104, $104) | 0;
 $107 = $103 ? 328 : 655;
 $112 = ((Math_imul($107, $105 & 65535) | 0) >>> 16) + (Math_imul($107, $105 >>> 16) | 0) | 0;
 $115 = _silk_stereo_find_predictor($12, $50, $114, $0 + 12 | 0, $10, $112) | 0;
 HEAP32[$11 >> 2] = $115;
 $118 = _silk_stereo_find_predictor($13, $51, $117, $0 + 20 | 0, $10, $112) | 0;
 $119 = $11 + 4 | 0;
 HEAP32[$119 >> 2] = $118;
 $124 = ((HEAP32[$12 >> 2] << 16 >> 16) * 3 | 0) + (HEAP32[$13 >> 2] | 0) | 0;
 $126 = ($124 | 0) < 65536 ? $124 : 65536;
 $128 = $6 - ($103 ? 1200 : 600) | 0;
 $spec$store$select = ($128 | 0) > 1 ? $128 : 1;
 $132 = (($9 << 16 >> 16) * 600 | 0) + 2e3 | 0;
 $133 = $126 * 3 | 0;
 $135 = _silk_DIV32_varQ_377($spec$store$select, $133 + 851968 | 0, 19) | 0;
 HEAP32[$5 >> 2] = $135;
 if (($135 | 0) < ($132 | 0)) {
  HEAP32[$5 >> 2] = $132;
  $137 = $spec$store$select - $132 | 0;
  $140 = $133 + 65536 | 0;
  $142 = $132 << 16 >> 16;
  $148 = _silk_DIV32_varQ_377(($137 << 1) - $132 | 0, ((Math_imul($140 & 65535, $142) | 0) >> 16) + (Math_imul($140 >> 16, $142) | 0) | 0, 16) | 0;
  $150 = ($148 | 0) > 0 ? $148 : 0;
  $$0247 = ($150 | 0) < 16384 ? $150 : 16384;
  $$sink = $137;
 } else {
  $$0247 = 16384;
  $$sink = $spec$store$select - $135 | 0;
 }
 $154 = $5 + 4 | 0;
 HEAP32[$154 >> 2] = $$sink;
 $155 = $0 + 28 | 0;
 $157 = HEAP16[$155 >> 1] | 0;
 $158 = $$0247 - $157 | 0;
 $160 = $112 << 16 >> 16;
 HEAP16[$155 >> 1] = (Math_imul($158 >> 16, $160) | 0) + $157 + ((Math_imul($158 & 65535, $160) | 0) >>> 16);
 HEAP8[$4 >> 0] = 0;
 L19 : do if (!$8) {
  $172 = $spec$store$select << 3;
  do if (!(HEAP16[$0 + 30 >> 1] | 0)) {
   if (($172 | 0) < ($132 * 13 | 0)) $$pre$phiZ2D = HEAP16[$155 >> 1] | 0; else {
    $176 = HEAP16[$155 >> 1] | 0;
    $177 = $176 << 16 >> 16;
    if ((((Math_imul($126 & 65535, $177) | 0) >> 16) + (Math_imul($126 >> 16, $177) | 0) | 0) < 819) $$pre$phiZ2D = $177; else {
     $207 = $176;
     break;
    }
   }
   HEAP32[$11 >> 2] = (Math_imul($115 << 16 >> 16, $$pre$phiZ2D) | 0) >> 14;
   HEAP32[$119 >> 2] = (Math_imul($118 << 16 >> 16, $$pre$phiZ2D) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   HEAP32[$11 >> 2] = 0;
   HEAP32[$119 >> 2] = 0;
   HEAP32[$5 >> 2] = $spec$store$select;
   HEAP32[$154 >> 2] = 0;
   HEAP8[$4 >> 0] = 1;
   $$1248273 = 0;
   label = 28;
   break L19;
  } else {
   if (($172 | 0) < ($132 * 11 | 0)) $$pre$phi307Z2D = HEAP16[$155 >> 1] | 0; else {
    $193 = HEAP16[$155 >> 1] | 0;
    $194 = $193 << 16 >> 16;
    if ((((Math_imul($126 & 65535, $194) | 0) >> 16) + (Math_imul($126 >> 16, $194) | 0) | 0) < 328) $$pre$phi307Z2D = $194; else {
     $207 = $193;
     break;
    }
   }
   HEAP32[$11 >> 2] = (Math_imul($115 << 16 >> 16, $$pre$phi307Z2D) | 0) >> 14;
   HEAP32[$119 >> 2] = (Math_imul($118 << 16 >> 16, $$pre$phi307Z2D) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   HEAP32[$11 >> 2] = 0;
   HEAP32[$119 >> 2] = 0;
   $$1248$ph = 0;
   label = 27;
   break L19;
  } while (0);
  if ($207 << 16 >> 16 > 15565) {
   _silk_stereo_quant_pred($11, $3);
   $$1248$ph = 16384;
   label = 27;
   break;
  } else {
   $209 = $207 << 16 >> 16;
   HEAP32[$11 >> 2] = (Math_imul($115 << 16 >> 16, $209) | 0) >> 14;
   HEAP32[$119 >> 2] = (Math_imul($118 << 16 >> 16, $209) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   $$1248$ph = HEAP16[$155 >> 1] | 0;
   label = 27;
   break;
  }
 } else {
  HEAP32[$11 >> 2] = 0;
  HEAP32[$119 >> 2] = 0;
  _silk_stereo_quant_pred($11, $3);
  $$1248$ph = 0;
  label = 27;
 } while (0);
 if ((label | 0) == 27) if ((HEAP8[$4 >> 0] | 0) == 1) {
  $$1248273 = $$1248$ph;
  label = 28;
 } else {
  HEAP16[$0 + 32 >> 1] = 0;
  $$1248272$ph = $$1248$ph;
  label = 32;
 }
 do if ((label | 0) == 28) {
  $221 = $0 + 32 | 0;
  $224 = $10 - ($9 << 3) + (HEAPU16[$221 >> 1] | 0) | 0;
  HEAP16[$221 >> 1] = $224;
  if (($224 << 16 >> 16 | 0) < ($9 * 5 | 0)) {
   HEAP8[$4 >> 0] = 0;
   $$1248272277 = $$1248273;
   label = 33;
   break;
  } else {
   HEAP16[$221 >> 1] = 1e4;
   $$1248272$ph = $$1248273;
   label = 32;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if (!(HEAP8[$4 >> 0] | 0)) {
  $$1248272277 = $$1248272$ph;
  label = 33;
 } else $$1248272276 = $$1248272$ph;
 if ((label | 0) == 33) if ((HEAP32[$154 >> 2] | 0) < 1) {
  HEAP32[$154 >> 2] = 1;
  HEAP32[$5 >> 2] = _silk_max_int_378($spec$store$select + -1 | 0) | 0;
  $$1248272276 = $$1248272277;
 } else $$1248272276 = $$1248272277;
 $236 = HEAP16[$0 >> 1] | 0;
 $237 = $0 + 2 | 0;
 $239 = HEAP16[$237 >> 1] | 0;
 $240 = $0 + 30 | 0;
 $242 = HEAP16[$240 >> 1] | 0;
 $243 = $9 << 3;
 $245 = HEAP32[$11 >> 2] | 0;
 $248 = (65536 / ($243 | 0) | 0) << 16 >> 16;
 $252 = ((Math_imul($245 - $236 << 16 >> 16, $248) | 0) >> 15) + 1 >> 1;
 $253 = HEAP32[$119 >> 2] | 0;
 $259 = ((Math_imul($253 - $239 << 16 >> 16, $248) | 0) >> 15) + 1 >> 1;
 $260 = $$1248272276 - $242 | 0;
 $267 = ((Math_imul($260 & 65535, $248) | 0) >> 16) + (Math_imul($260 >> 16, $248) | 0) << 10;
 if (($9 | 0) > 0) {
  $$0246281 = $242 << 10;
  $$0249280 = 0 - $236 | 0;
  $$0250279 = 0 - $239 | 0;
  $$3282 = 0;
  do {
   $$0249280 = $$0249280 - $252 | 0;
   $$0250279 = $$0250279 - $259 | 0;
   $$0246281 = $$0246281 + $267 | 0;
   $$3282$looptemp = $$3282;
   $$3282 = $$3282 + 1 | 0;
   $285 = HEAP16[$14 + ($$3282 << 1) >> 1] | 0;
   $287 = (HEAP16[$1 + ($$3282$looptemp << 1) >> 1] | 0) + (HEAP16[$14 + ($$3282$looptemp << 1) >> 1] | 0) + ($285 << 1) | 0;
   $292 = HEAP16[$16 + ($$3282 << 1) >> 1] | 0;
   $298 = $$0249280 << 16 >> 16;
   $305 = $$0250279 << 16 >> 16;
   $314 = (Math_imul($$0246281 >> 16, $292) | 0) + (Math_imul($285 >> 5, $305) | 0) + ((Math_imul($$0246281 & 64512, $292) | 0) >> 16) + ((Math_imul($285 << 11 & 63488, $305) | 0) >> 16) + (Math_imul($287 >> 7, $298) | 0) + ((Math_imul($287 << 9 & 65024, $298) | 0) >> 16) | 0;
   HEAP16[$2 + ($$3282$looptemp + -1 << 1) >> 1] = ($314 | 0) > 8388479 ? 32767 : ($314 | 0) < -8388736 ? -32768 : (($314 >>> 7) + 1 | 0) >>> 1 & 65535;
  } while (($$3282 | 0) < ($243 | 0));
 }
 if (($243 | 0) >= ($10 | 0)) {
  $380 = $245 & 65535;
  HEAP16[$0 >> 1] = $380;
  $381 = $253 & 65535;
  HEAP16[$237 >> 1] = $381;
  $382 = $$1248272276 & 65535;
  HEAP16[$240 >> 1] = $382;
  STACKTOP = sp;
  return;
 }
 $328 = $$1248272276 >> 6;
 $329 = $$1248272276 << 10 & 64512;
 $331 = 0 - ($245 << 16) >> 16;
 $333 = 0 - ($253 << 16) >> 16;
 $$4278 = $243;
 do {
  $$4278$looptemp = $$4278;
  $$4278 = $$4278 + 1 | 0;
  $344 = HEAP16[$14 + ($$4278 << 1) >> 1] | 0;
  $346 = (HEAP16[$1 + ($$4278$looptemp << 1) >> 1] | 0) + (HEAP16[$14 + ($$4278$looptemp << 1) >> 1] | 0) + ($344 << 1) | 0;
  $350 = HEAP16[$16 + ($$4278 << 1) >> 1] | 0;
  $369 = (Math_imul($328, $350) | 0) + (Math_imul($344 >> 5, $333) | 0) + ((Math_imul($329, $350) | 0) >> 16) + ((Math_imul($344 << 11 & 63488, $333) | 0) >> 16) + (Math_imul($346 >> 7, $331) | 0) + ((Math_imul($346 << 9 & 65024, $331) | 0) >> 16) | 0;
  HEAP16[$2 + ($$4278$looptemp + -1 << 1) >> 1] = ($369 | 0) > 8388479 ? 32767 : ($369 | 0) < -8388736 ? -32768 : (($369 >>> 7) + 1 | 0) >>> 1 & 65535;
 } while (($$4278 | 0) != ($10 | 0));
 $380 = $245 & 65535;
 HEAP16[$0 >> 1] = $380;
 $381 = $253 & 65535;
 HEAP16[$237 >> 1] = $381;
 $382 = $$1248272276 & 65535;
 HEAP16[$240 >> 1] = $382;
 STACKTOP = sp;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[12444] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[12445] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[12442] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 49800 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[12440] = HEAP32[12440] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 50064 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[12441] = HEAP32[12441] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[12444] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[12444] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[12444] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[12444] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[12446] | 0) == ($2 | 0)) {
   $117 = (HEAP32[12443] | 0) + $$1416 | 0;
   HEAP32[12443] = $117;
   HEAP32[12446] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[12445] | 0)) return;
   HEAP32[12445] = 0;
   HEAP32[12442] = 0;
   return;
  }
  if ((HEAP32[12445] | 0) == ($2 | 0)) {
   $125 = (HEAP32[12442] | 0) + $$1416 | 0;
   HEAP32[12442] = $125;
   HEAP32[12445] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 49800 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[12440] = HEAP32[12440] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 50064 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[12441] = HEAP32[12441] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[12444] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[12444] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[12444] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[12445] | 0)) {
   HEAP32[12442] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 49800 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[12440] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[12440] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[12444] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 50064 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[12441] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[12441] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[12444] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[12444] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function _silk_VAD_GetSA_Q8_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0162188 = 0, $$0166189 = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1160$lcssa = 0, $$1167182$us = 0, $$1167182$us$1 = 0, $$1167182$us$2 = 0, $$1167182$us$3 = 0, $$2183$us = 0, $$2183$us$1 = 0, $$2183$us$2 = 0, $$2183$us$3 = 0, $$4 = 0, $$4$1 = 0, $$4$2 = 0, $$4$3 = 0, $$pre$phi209Z2D = 0, $$pre$phi212Z2D = 0, $$pre$phi215Z2D = 0, $$pre$phiZ2D = 0, $$sink224 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $12 = 0, $120 = 0, $121 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $140 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $157 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $174 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $191 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $205 = 0, $207 = 0, $212 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $235 = 0, $237 = 0, $242 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $259 = 0, $26 = 0, $263 = 0, $266 = 0, $268 = 0, $27 = 0, $273 = 0, $289 = 0, $3 = 0, $30 = 0, $31 = 0, $311 = 0, $312 = 0, $313 = 0, $323 = 0, $328 = 0, $329 = 0, $330 = 0, $336 = 0, $34 = 0, $341 = 0, $342 = 0, $343 = 0, $349 = 0, $4 = 0, $41 = 0, $44 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $69 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $84 = 0, $87 = 0, $88 = 0, $93 = 0, $reass$mul = 0, $spec$select174 = 0, $spec$select175 = 0, sp = 0, $$0166189$looptemp = 0, $41$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 36 | 0;
 $5 = $0 + 4584 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 | 0) >= 321) _celt_fatal(44001, 44060, 104);
 $8 = $6 >> 3;
 if (($6 | 0) != ($6 & -8 | 0)) _celt_fatal(44071, 44060, 106);
 $11 = $6 >> 1;
 $12 = $6 >> 2;
 HEAP32[$3 >> 2] = 0;
 $13 = $8 + $12 | 0;
 HEAP32[$3 + 4 >> 2] = $13;
 $15 = $13 + $8 | 0;
 HEAP32[$3 + 8 >> 2] = $15;
 $17 = $15 + $12 | 0;
 HEAP32[$3 + 12 >> 2] = $17;
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($17 + $11 << 1) | 0) + 15 & -16) | 0;
 _silk_ana_filt_bank_1($1, $4, $20, $20 + ($17 << 1) | 0, $6);
 _silk_ana_filt_bank_1($20, $0 + 44 | 0, $20, $20 + ($15 << 1) | 0, $11);
 _silk_ana_filt_bank_1($20, $0 + 52 | 0, $20, $20 + ($13 << 1) | 0, $12);
 $26 = $8 + -1 | 0;
 $27 = $20 + ($26 << 1) | 0;
 $30 = HEAP16[$27 >> 1] >> 1;
 $31 = $30 & 65535;
 HEAP16[$27 >> 1] = $31;
 if (($6 | 0) > 15) {
  $$0166189 = $26;
  $41 = $30;
  do {
   $$0166189$looptemp = $$0166189;
   $$0166189 = $$0166189 + -1 | 0;
   $34 = $20 + ($$0166189 << 1) | 0;
   $41$looptemp = $41;
   $41 = HEAP16[$34 >> 1] >> 1;
   HEAP16[$34 >> 1] = $41;
   HEAP16[$20 + ($$0166189$looptemp << 1) >> 1] = $41$looptemp - $41;
  } while (($$0166189$looptemp | 0) > 1);
 }
 $44 = $0 + 92 | 0;
 HEAP16[$20 >> 1] = (HEAPU16[$20 >> 1] | 0) - (HEAPU16[$44 >> 1] | 0);
 HEAP16[$44 >> 1] = $31;
 $$0162188 = 0;
 do {
  $51 = HEAP32[$5 >> 2] | 0;
  $54 = $51 >> (_silk_min_int_349(4 - $$0162188 | 0, 3) | 0);
  $55 = $54 >> 2;
  $56 = $0 + 60 + ($$0162188 << 2) | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  $58 = $2 + ($$0162188 << 2) | 0;
  HEAP32[$58 >> 2] = $57;
  if (($54 | 0) > 3) {
   $61 = HEAP32[$3 + ($$0162188 << 2) >> 2] | 0;
   $$1167182$us = 0;
   $$2183$us = 0;
   do {
    $69 = HEAP16[$20 + ($$1167182$us + $61 << 1) >> 1] >> 3;
    $$2183$us = (Math_imul($69, $69) | 0) + $$2183$us | 0;
    $$1167182$us = $$1167182$us + 1 | 0;
   } while (($$1167182$us | 0) < ($55 | 0));
   $62 = $57 + $$2183$us | 0;
   $64 = $62 >>> 0 < 2147483647;
   $$1167182$us$1 = 0;
   $$2183$us$1 = 0;
   do {
    $323 = HEAP16[$20 + ($$1167182$us$1 + $55 + $61 << 1) >> 1] >> 3;
    $$2183$us$1 = (Math_imul($323, $323) | 0) + $$2183$us$1 | 0;
    $$1167182$us$1 = $$1167182$us$1 + 1 | 0;
   } while (($$1167182$us$1 | 0) < ($55 | 0));
   $328 = ($64 ? $62 : 2147483647) + $$2183$us$1 | 0;
   $329 = $328 >>> 0 < 2147483647;
   $330 = $55 << 1;
   $$1167182$us$2 = 0;
   $$2183$us$2 = 0;
   do {
    $336 = HEAP16[$20 + ($$1167182$us$2 + $330 + $61 << 1) >> 1] >> 3;
    $$2183$us$2 = (Math_imul($336, $336) | 0) + $$2183$us$2 | 0;
    $$1167182$us$2 = $$1167182$us$2 + 1 | 0;
   } while (($$1167182$us$2 | 0) < ($55 | 0));
   $341 = ($329 ? $328 : 2147483647) + $$2183$us$2 | 0;
   $342 = $341 >>> 0 < 2147483647;
   $343 = $55 * 3 | 0;
   $$1167182$us$3 = 0;
   $$2183$us$3 = 0;
   do {
    $349 = HEAP16[$20 + ($$1167182$us$3 + $343 + $61 << 1) >> 1] >> 3;
    $$2183$us$3 = (Math_imul($349, $349) | 0) + $$2183$us$3 | 0;
    $$1167182$us$3 = $$1167182$us$3 + 1 | 0;
   } while (($$1167182$us$3 | 0) < ($55 | 0));
   $$1160$lcssa = $$2183$us$3;
   $$sink224 = ($342 ? $341 : 2147483647) + ($$2183$us$3 >>> 1) | 0;
  } else {
   $$1160$lcssa = 0;
   $$sink224 = $57;
  }
  HEAP32[$58 >> 2] = $$sink224 >>> 0 < 2147483647 ? $$sink224 : 2147483647;
  HEAP32[$56 >> 2] = $$1160$lcssa;
  $$0162188 = $$0162188 + 1 | 0;
 } while (($$0162188 | 0) != 4);
 _silk_VAD_GetNoiseLevels($2, $4);
 $75 = HEAP32[$2 >> 2] | 0;
 $76 = $0 + 96 | 0;
 $77 = HEAP32[$76 >> 2] | 0;
 $78 = $75 - $77 | 0;
 if (($78 | 0) > 0) {
  $80 = $75 >>> 0 < 8388608;
  $84 = (($80 ? $75 << 8 : $75) | 0) / (($80 ? $77 : $77 >> 8) + 1 | 0) | 0;
  $87 = ((_silk_lin2log($84) | 0) << 16) + -67108864 >> 16;
  $88 = Math_imul($87, $87) | 0;
  if (($78 | 0) < 1048576) {
   $93 = Math_imul((_silk_SQRT_APPROX_350($78) | 0) << 6 >> 16, $87) | 0;
   $$pre$phiZ2D = (Math_imul((_silk_SQRT_APPROX_350($78) | 0) << 6 & 65472, $87) | 0) + ($93 << 16) >> 16;
  } else $$pre$phiZ2D = $87;
  $$1 = $$pre$phiZ2D * 3e4 >> 16;
  $$4 = $88;
  $133 = $84;
 } else {
  $$1 = 0;
  $$4 = 0;
  $133 = 256;
 }
 $103 = HEAP32[$2 + 4 >> 2] | 0;
 $104 = $0 + 100 | 0;
 $105 = HEAP32[$104 >> 2] | 0;
 $106 = $103 - $105 | 0;
 if (($106 | 0) > 0) {
  $198 = $103 >>> 0 < 8388608;
  $202 = (($198 ? $103 << 8 : $103) | 0) / (($198 ? $105 : $105 >> 8) + 1 | 0) | 0;
  $205 = ((_silk_lin2log($202) | 0) << 16) + -67108864 >> 16;
  $207 = (Math_imul($205, $205) | 0) + $$4 | 0;
  if (($106 | 0) < 1048576) {
   $212 = Math_imul((_silk_SQRT_APPROX_350($106) | 0) << 6 >> 16, $205) | 0;
   $$pre$phi209Z2D = (Math_imul((_silk_SQRT_APPROX_350($106) | 0) << 6 & 65472, $205) | 0) + ($212 << 16) >> 16;
  } else $$pre$phi209Z2D = $205;
  $$1$1 = $$1 + ($$pre$phi209Z2D * 6e3 >> 16) | 0;
  $$4$1 = $207;
  $150 = $202;
 } else {
  $$1$1 = $$1;
  $$4$1 = $$4;
  $150 = 256;
 }
 $223 = HEAP32[$2 + 8 >> 2] | 0;
 $224 = $0 + 104 | 0;
 $225 = HEAP32[$224 >> 2] | 0;
 $226 = $223 - $225 | 0;
 if (($226 | 0) > 0) {
  $228 = $223 >>> 0 < 8388608;
  $232 = (($228 ? $223 << 8 : $223) | 0) / (($228 ? $225 : $225 >> 8) + 1 | 0) | 0;
  $235 = ((_silk_lin2log($232) | 0) << 16) + -67108864 >> 16;
  $237 = (Math_imul($235, $235) | 0) + $$4$1 | 0;
  if (($226 | 0) < 1048576) {
   $242 = Math_imul((_silk_SQRT_APPROX_350($226) | 0) << 6 >> 16, $235) | 0;
   $$pre$phi212Z2D = (Math_imul((_silk_SQRT_APPROX_350($226) | 0) << 6 & 65472, $235) | 0) + ($242 << 16) >> 16;
  } else $$pre$phi212Z2D = $235;
  $$1$2 = $$1$1 - $$pre$phi212Z2D + ($$pre$phi212Z2D * 53536 >> 16) | 0;
  $$4$2 = $237;
  $167 = $232;
 } else {
  $$1$2 = $$1$1;
  $$4$2 = $$4$1;
  $167 = 256;
 }
 $254 = HEAP32[$2 + 12 >> 2] | 0;
 $255 = $0 + 108 | 0;
 $256 = HEAP32[$255 >> 2] | 0;
 $257 = $254 - $256 | 0;
 if (($257 | 0) > 0) {
  $259 = $254 >>> 0 < 8388608;
  $263 = (($259 ? $254 << 8 : $254) | 0) / (($259 ? $256 : $256 >> 8) + 1 | 0) | 0;
  $266 = ((_silk_lin2log($263) | 0) << 16) + -67108864 >> 16;
  $268 = (Math_imul($266, $266) | 0) + $$4$2 | 0;
  if (($257 | 0) < 1048576) {
   $273 = Math_imul((_silk_SQRT_APPROX_350($257) | 0) << 6 >> 16, $266) | 0;
   $$pre$phi215Z2D = (Math_imul((_silk_SQRT_APPROX_350($257) | 0) << 6 & 65472, $266) | 0) + ($273 << 16) >> 16;
  } else $$pre$phi215Z2D = $266;
  $$1$3 = $$1$2 - $$pre$phi215Z2D + ($$pre$phi215Z2D * 53536 >> 16) | 0;
  $$4$3 = $268;
  $184 = $263;
 } else {
  $$1$3 = $$1$2;
  $$4$3 = $$4$2;
  $184 = 256;
 }
 $289 = (((_silk_SQRT_APPROX_350(($$4$3 | 0) / 4 | 0) | 0) * 196608 >> 16) * 45e3 >> 16) + -128 | 0;
 HEAP32[$0 + 4712 >> 2] = ((_silk_sigm_Q15($$1$3) | 0) << 1) + -32768;
 $311 = ($254 - (HEAP32[$255 >> 2] | 0) >> 4 << 2) + ((($223 - (HEAP32[$224 >> 2] | 0) >> 4) * 3 | 0) + (($103 - (HEAP32[$104 >> 2] | 0) >> 4 << 1) + ($75 - (HEAP32[$76 >> 2] | 0) >> 4))) | 0;
 $109 = _silk_sigm_Q15($289) | 0;
 $312 = HEAP32[$5 >> 2] | 0;
 $121 = $0 + 4576 | 0;
 $313 = HEAP32[$121 >> 2] | 0;
 $spec$select174 = $311 >> (($312 | 0) == ($313 * 20 | 0) & 1);
 if (($spec$select174 | 0) < 1) {
  $$0 = $109 >> 1;
  $127 = $313;
  $128 = $312;
 } else if (($spec$select174 | 0) < 16384) {
  $113 = (_silk_SQRT_APPROX_350($spec$select174 << 16) | 0) + 32768 | 0;
  $115 = $109 << 16 >> 16;
  $120 = ((Math_imul($113 & 65535, $115) | 0) >> 16) + (Math_imul($113 >> 16, $115) | 0) | 0;
  $$0 = $120;
  $127 = HEAP32[$121 >> 2] | 0;
  $128 = HEAP32[$5 >> 2] | 0;
 } else {
  $$0 = $109;
  $127 = $313;
  $128 = $312;
 }
 HEAP32[$0 + 4532 >> 2] = _silk_min_int_349($$0 >> 7, 255) | 0;
 $reass$mul = Math_imul($$0, $$0 << 16 >> 16) | 0;
 $spec$select175 = $reass$mul >> (($128 | 0) == ($127 * 10 | 0) ? 21 : 20);
 $130 = $0 + 76 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 $132 = $133 - $131 | 0;
 $140 = (Math_imul($132 >> 16, $spec$select175) | 0) + $131 + ((Math_imul($132 & 65535, $spec$select175) | 0) >> 16) | 0;
 HEAP32[$130 >> 2] = $140;
 HEAP32[$0 + 4696 >> 2] = _silk_sigm_Q15(((_silk_lin2log($140) | 0) * 3 | 0) + -5120 >> 4) | 0;
 $147 = $0 + 80 | 0;
 $148 = HEAP32[$147 >> 2] | 0;
 $149 = $150 - $148 | 0;
 $157 = (Math_imul($149 >> 16, $spec$select175) | 0) + $148 + ((Math_imul($149 & 65535, $spec$select175) | 0) >> 16) | 0;
 HEAP32[$147 >> 2] = $157;
 HEAP32[$0 + 4700 >> 2] = _silk_sigm_Q15(((_silk_lin2log($157) | 0) * 3 | 0) + -5120 >> 4) | 0;
 $164 = $0 + 84 | 0;
 $165 = HEAP32[$164 >> 2] | 0;
 $166 = $167 - $165 | 0;
 $174 = (Math_imul($166 >> 16, $spec$select175) | 0) + $165 + ((Math_imul($166 & 65535, $spec$select175) | 0) >> 16) | 0;
 HEAP32[$164 >> 2] = $174;
 HEAP32[$0 + 4704 >> 2] = _silk_sigm_Q15(((_silk_lin2log($174) | 0) * 3 | 0) + -5120 >> 4) | 0;
 $181 = $0 + 88 | 0;
 $182 = HEAP32[$181 >> 2] | 0;
 $183 = $184 - $182 | 0;
 $191 = (Math_imul($183 >> 16, $spec$select175) | 0) + $182 + ((Math_imul($183 & 65535, $spec$select175) | 0) >> 16) | 0;
 HEAP32[$181 >> 2] = $191;
 HEAP32[$0 + 4708 >> 2] = _silk_sigm_Q15(((_silk_lin2log($191) | 0) * 3 | 0) + -5120 >> 4) | 0;
 STACKTOP = sp;
 return;
}

function _tf_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0193249 = 0, $$0194234$us = 0, $$0194234$us$1 = 0, $$0197 = 0, $$0200 = 0.0, $$0203233$us = 0, $$0203233$us$1 = 0, $$0206242 = 0, $$0206242$us = 0, $$1195227 = 0, $$1198$lcssa = 0, $$1198244 = 0, $$1198244$us = 0, $$1201243 = 0.0, $$1201243$us = 0.0, $$1204226 = 0, $$1235$us = 0, $$1235$us$1 = 0, $$2199 = 0, $$2199$us = 0, $$2228 = 0, $$3225 = 0, $$pre268 = 0, $101 = 0, $102 = 0, $106 = 0, $108 = 0, $11 = 0.0, $112 = 0, $114 = 0, $115 = 0, $119 = 0, $124 = 0, $129 = 0, $130 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0.0, $143 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $169 = 0, $17 = 0, $171 = 0, $177 = 0, $180 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $219 = 0, $221 = 0, $222 = 0, $226 = 0, $232 = 0, $236 = 0, $241 = 0, $243 = 0, $247 = 0, $249 = 0, $250 = 0, $254 = 0, $26 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $58 = 0, $59 = 0.0, $61 = 0.0, $66 = 0, $72 = 0.0, $73 = 0, $77 = 0.0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $88 = 0, $93 = 0, $94 = 0, $96 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = .5 - $8;
 $14 = ($11 < -.25 ? -.25 : $11) * .03999999910593033;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 $16 = $0 + 32 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $21 = $1 + -1 | 0;
 $26 = (HEAP16[$17 + ($1 << 1) >> 1] | 0) - (HEAP16[$17 + ($21 << 1) >> 1] | 0) << $7;
 $27 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($26 << 2) | 0) + 15 & -16) | 0;
 $28 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($26 << 2) | 0) + 15 & -16) | 0;
 $29 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 $30 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 if (($1 | 0) > 0) {
  $36 = Math_imul($9, $6) | 0;
  $37 = ($2 | 0) != 0;
  $38 = $37 ? $7 : 0;
  $39 = ($2 | 0) == 0;
  $40 = 1 << $7;
  $41 = $7 + 1 | 0;
  $42 = $7 + -1 | 0;
  $43 = Math_imul($7, -2) | 0;
  $$0193249 = 0;
  $46 = $17;
  while (1) {
   $44 = $$0193249 + 1 | 0;
   $51 = HEAP16[$46 + ($$0193249 << 1) >> 1] | 0;
   $52 = (HEAP16[$46 + ($44 << 1) >> 1] | 0) - $51 | 0;
   $53 = $52 << $7;
   $54 = ($52 | 0) == 1;
   $58 = $53 << 2;
   _memcpy($27 | 0, $5 + (($51 << $7) + $36 << 2) | 0, $58 | 0) | 0;
   $59 = +_l1_metric($27, $53, $38, $14);
   if ($39 | $54) {
    $$0197 = 0;
    $$0200 = $59;
   } else {
    _memcpy($28 | 0, $27 | 0, $58 | 0) | 0;
    _haar1($28, $53 >> $7, $40);
    $61 = +_l1_metric($28, $53, $41, $14);
    if ($61 < $59) {
     $$0197 = -1;
     $$0200 = $61;
    } else {
     $$0197 = 0;
     $$0200 = $59;
    }
   }
   $66 = ((($37 | $54) ^ 1) & 1) + $7 | 0;
   if (($66 | 0) > 0) if ($37) {
    $$0206242$us = 0;
    $$1198244$us = $$0197;
    $$1201243$us = $$0200;
    while (1) {
     _haar1($27, $53 >> $$0206242$us, 1 << $$0206242$us);
     $72 = +_l1_metric($27, $53, $42 - $$0206242$us | 0, $14);
     $$0206242$us = $$0206242$us + 1 | 0;
     $73 = $72 < $$1201243$us;
     $$2199$us = $73 ? $$0206242$us : $$1198244$us;
     if (($$0206242$us | 0) == ($66 | 0)) {
      $$1198$lcssa = $$2199$us;
      break;
     } else {
      $$1198244$us = $$2199$us;
      $$1201243$us = $73 ? $72 : $$1201243$us;
     }
    }
   } else {
    $$0206242 = 0;
    $$1198244 = $$0197;
    $$1201243 = $$0200;
    while (1) {
     _haar1($27, $53 >> $$0206242, 1 << $$0206242);
     $$0206242 = $$0206242 + 1 | 0;
     $77 = +_l1_metric($27, $53, $$0206242, $14);
     $78 = $77 < $$1201243;
     $$2199 = $78 ? $$0206242 : $$1198244;
     if (($$0206242 | 0) == ($66 | 0)) {
      $$1198$lcssa = $$2199;
      break;
     } else {
      $$1198244 = $$2199;
      $$1201243 = $78 ? $77 : $$1201243;
     }
    }
   } else $$1198$lcssa = $$0197;
   $79 = Math_imul($$1198$lcssa, -2) | 0;
   $81 = $37 ? $$1198$lcssa << 1 : $79;
   $82 = $15 + ($$0193249 << 2) | 0;
   HEAP32[$82 >> 2] = $81;
   if ($54) if (($81 | 0) == 0 | ($81 | 0) == ($43 | 0)) HEAP32[$82 >> 2] = $81 + -1;
   if (($44 | 0) == ($1 | 0)) break;
   $$0193249 = $44;
   $46 = HEAP32[$16 >> 2] | 0;
  }
  $$pre268 = HEAP32[$15 >> 2] | 0;
  $86 = HEAP32[$10 >> 2] | 0;
  $87 = $2 << 2;
  $88 = $39 ? $4 : 0;
  if (($1 | 0) > 1) {
   $93 = HEAP8[192 + ($7 << 3) + $87 >> 0] << 1;
   $94 = $$pre268 - $93 | 0;
   $96 = Math_imul(($94 | 0) > -1 ? $94 : 0 - $94 | 0, $86) | 0;
   $101 = HEAP8[($87 | 1) + (192 + ($7 << 3)) >> 0] << 1;
   $102 = $$pre268 - $101 | 0;
   $$0194234$us = $96;
   $$0203233$us = (Math_imul(($102 | 0) > -1 ? $102 : 0 - $102 | 0, $86) | 0) + $88 | 0;
   $$1235$us = 1;
   do {
    $106 = $$0203233$us + $4 | 0;
    $108 = $$0194234$us + $4 | 0;
    $112 = HEAP32[$10 + ($$1235$us << 2) >> 2] | 0;
    $114 = HEAP32[$15 + ($$1235$us << 2) >> 2] | 0;
    $115 = $114 - $93 | 0;
    $$0194234$us = (Math_imul(($115 | 0) > -1 ? $115 : 0 - $115 | 0, $112) | 0) + (($$0194234$us | 0) < ($106 | 0) ? $$0194234$us : $106) | 0;
    $119 = $114 - $101 | 0;
    $$0203233$us = (Math_imul(($119 | 0) > -1 ? $119 : 0 - $119 | 0, $112) | 0) + (($108 | 0) < ($$0203233$us | 0) ? $108 : $$0203233$us) | 0;
    $$1235$us = $$1235$us + 1 | 0;
   } while (($$1235$us | 0) != ($1 | 0));
   $124 = ($$0194234$us | 0) < ($$0203233$us | 0);
   $129 = HEAP8[($87 | 2) + (192 + ($7 << 3)) >> 0] << 1;
   $130 = $$pre268 - $129 | 0;
   $132 = Math_imul(($130 | 0) > -1 ? $130 : 0 - $130 | 0, $86) | 0;
   $137 = HEAP8[($87 | 3) + (192 + ($7 << 3)) >> 0] << 1;
   $138 = $$pre268 - $137 | 0;
   $$0194234$us$1 = $132;
   $$0203233$us$1 = (Math_imul(($138 | 0) > -1 ? $138 : 0 - $138 | 0, $86) | 0) + $88 | 0;
   $$1235$us$1 = 1;
   do {
    $241 = $$0203233$us$1 + $4 | 0;
    $243 = $$0194234$us$1 + $4 | 0;
    $247 = HEAP32[$10 + ($$1235$us$1 << 2) >> 2] | 0;
    $249 = HEAP32[$15 + ($$1235$us$1 << 2) >> 2] | 0;
    $250 = $249 - $129 | 0;
    $$0194234$us$1 = (Math_imul(($250 | 0) > -1 ? $250 : 0 - $250 | 0, $247) | 0) + (($$0194234$us$1 | 0) < ($241 | 0) ? $$0194234$us$1 : $241) | 0;
    $254 = $249 - $137 | 0;
    $$0203233$us$1 = (Math_imul(($254 | 0) > -1 ? $254 : 0 - $254 | 0, $247) | 0) + (($243 | 0) < ($$0203233$us$1 | 0) ? $243 : $$0203233$us$1) | 0;
    $$1235$us$1 = $$1235$us$1 + 1 | 0;
   } while (($$1235$us$1 | 0) != ($1 | 0));
   $183 = ($$0194234$us$1 | 0) < ($$0203233$us$1 | 0) ? $$0194234$us$1 : $$0203233$us$1;
   $185 = $124 ? $$0194234$us : $$0203233$us;
   $189 = $87;
   $195 = $$pre268;
   $198 = $86;
   $262 = 1;
  } else {
   $143 = $87;
   $148 = $$pre268;
   $151 = $86;
   $161 = $88;
   label = 22;
  }
 } else {
  $143 = $2 << 2;
  $148 = 0;
  $151 = HEAP32[$10 >> 2] | 0;
  $161 = ($2 | 0) == 0 ? $4 : 0;
  label = 22;
 }
 if ((label | 0) == 22) {
  $147 = $148 - (HEAP8[192 + ($7 << 3) + $143 >> 0] << 1) | 0;
  $150 = Math_imul(($147 | 0) > -1 ? $147 : 0 - $147 | 0, $151) | 0;
  $157 = $148 - (HEAP8[($143 | 1) + (192 + ($7 << 3)) >> 0] << 1) | 0;
  $160 = (Math_imul(($157 | 0) > -1 ? $157 : 0 - $157 | 0, $151) | 0) + $161 | 0;
  $169 = $148 - (HEAP8[($143 | 2) + (192 + ($7 << 3)) >> 0] << 1) | 0;
  $171 = Math_imul(($169 | 0) > -1 ? $169 : 0 - $169 | 0, $151) | 0;
  $177 = $148 - (HEAP8[($143 | 3) + (192 + ($7 << 3)) >> 0] << 1) | 0;
  $180 = (Math_imul(($177 | 0) > -1 ? $177 : 0 - $177 | 0, $151) | 0) + $161 | 0;
  $183 = ($171 | 0) < ($180 | 0) ? $171 : $180;
  $185 = ($150 | 0) < ($160 | 0) ? $150 : $160;
  $189 = $143;
  $195 = $148;
  $198 = $151;
  $262 = 0;
 }
 $186 = ($2 | 0) != 0;
 $spec$select = $186 & ($183 | 0) < ($185 | 0) & 1;
 $188 = $spec$select << 1 | $189;
 $193 = HEAP8[192 + ($7 << 3) + $188 >> 0] << 1;
 $194 = $195 - $193 | 0;
 $197 = Math_imul(($194 | 0) > -1 ? $194 : 0 - $194 | 0, $198) | 0;
 $203 = HEAP8[($188 | 1) + (192 + ($7 << 3)) >> 0] << 1;
 $204 = $195 - $203 | 0;
 $206 = Math_imul(($204 | 0) > -1 ? $204 : 0 - $204 | 0, $198) | 0;
 $208 = $206 + ($186 ? 0 : $4) | 0;
 if (!$262) {
  HEAP32[$3 + ($21 << 2) >> 2] = ($197 | 0) >= ($208 | 0) & 1;
  STACKTOP = sp;
  return $spec$select | 0;
 }
 $$1195227 = $197;
 $$1204226 = $208;
 $$2228 = 1;
 do {
  $212 = $$1204226 + $4 | 0;
  $213 = ($$1195227 | 0) < ($212 | 0);
  HEAP32[$29 + ($$2228 << 2) >> 2] = ($213 ^ 1) & 1;
  $215 = $$1195227 + $4 | 0;
  $216 = ($215 | 0) < ($$1204226 | 0);
  HEAP32[$30 + ($$2228 << 2) >> 2] = ($216 ^ 1) & 1;
  $219 = HEAP32[$10 + ($$2228 << 2) >> 2] | 0;
  $221 = HEAP32[$15 + ($$2228 << 2) >> 2] | 0;
  $222 = $221 - $193 | 0;
  $$1195227 = (Math_imul(($222 | 0) > -1 ? $222 : 0 - $222 | 0, $219) | 0) + ($213 ? $$1195227 : $212) | 0;
  $226 = $221 - $203 | 0;
  $$1204226 = (Math_imul(($226 | 0) > -1 ? $226 : 0 - $226 | 0, $219) | 0) + ($216 ? $215 : $$1204226) | 0;
  $$2228 = $$2228 + 1 | 0;
 } while (($$2228 | 0) != ($1 | 0));
 $232 = ($$1195227 | 0) >= ($$1204226 | 0) & 1;
 HEAP32[$3 + ($21 << 2) >> 2] = $232;
 $$3225 = $1 + -2 | 0;
 $236 = $232;
 while (1) {
  $236 = HEAP32[(($236 | 0) == 1 ? $30 : $29) + ($$3225 + 1 << 2) >> 2] | 0;
  HEAP32[$3 + ($$3225 << 2) >> 2] = $236;
  if (($$3225 | 0) <= 0) break; else $$3225 = $$3225 + -1 | 0;
 }
 STACKTOP = sp;
 return $spec$select | 0;
}

function _silk_CNG($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0228$lcssa = 0, $$0228250 = 0, $$0230 = 0, $$0232249 = 0, $$0257 = 0, $$1251 = 0, $$2246 = 0, $$3245 = 0, $$pre261 = 0, $$sink274 = 0, $$sink275 = 0, $110 = 0, $12 = 0, $124 = 0, $128 = 0, $130 = 0, $131 = 0, $134 = 0, $137 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $152 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $167 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $183 = 0, $185 = 0, $188 = 0, $189 = 0, $19 = 0, $192 = 0, $195 = 0, $197 = 0, $200 = 0, $202 = 0, $203 = 0, $206 = 0, $209 = 0, $211 = 0, $214 = 0, $216 = 0, $217 = 0, $220 = 0, $223 = 0, $225 = 0, $228 = 0, $230 = 0, $231 = 0, $234 = 0, $237 = 0, $239 = 0, $24 = 0, $242 = 0, $244 = 0, $245 = 0, $248 = 0, $251 = 0, $26 = 0, $27 = 0, $276 = 0, $280 = 0, $282 = 0, $285 = 0, $288 = 0, $290 = 0, $293 = 0, $296 = 0, $298 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $312 = 0, $314 = 0, $317 = 0, $319 = 0, $337 = 0, $338 = 0, $340 = 0, $343 = 0, $344 = 0, $350 = 0, $351 = 0, $361 = 0, $368 = 0, $37 = 0, $373 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $71 = 0, $72 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $89 = 0, $92 = 0, $93 = 0, $98 = 0, $spec$select237 = 0, $spec$select243 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp;
 $5 = $0 + 2772 | 0;
 $6 = $0 + 2316 | 0;
 $8 = $0 + 4156 | 0;
 if ((HEAP32[$6 >> 2] | 0) != (HEAP32[$8 >> 2] | 0)) {
  _silk_CNG_Reset($0);
  HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
 }
 $12 = $0 + 4160 | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  if (!(HEAP32[$0 + 4164 >> 2] | 0)) {
   $19 = HEAP32[$0 + 2340 >> 2] | 0;
   if (($19 | 0) > 0) {
    $$0257 = 0;
    do {
     $24 = $0 + 4052 + ($$0257 << 1) | 0;
     $26 = HEAP16[$24 >> 1] | 0;
     $27 = (HEAP16[$0 + 2344 + ($$0257 << 1) >> 1] | 0) - $26 | 0;
     HEAP16[$24 >> 1] = (($27 >> 16) * 16348 | 0) + $26 + ((($27 & 65535) * 16348 | 0) >>> 16);
     $$0257 = $$0257 + 1 | 0;
    } while (($$0257 | 0) != ($19 | 0));
   }
   $37 = $0 + 2324 | 0;
   $38 = HEAP32[$37 >> 2] | 0;
   if (($38 | 0) > 0) {
    $$0228250 = 0;
    $$0232249 = 0;
    $$1251 = 0;
    while (1) {
     $41 = HEAP32[$1 + 16 + ($$1251 << 2) >> 2] | 0;
     $42 = ($41 | 0) > ($$0232249 | 0);
     $spec$select237 = $42 ? $$1251 : $$0228250;
     $$1251 = $$1251 + 1 | 0;
     if (($$1251 | 0) == ($38 | 0)) {
      $$0228$lcssa = $spec$select237;
      break;
     } else {
      $$0228250 = $spec$select237;
      $$0232249 = $42 ? $41 : $$0232249;
     }
    }
   } else $$0228$lcssa = 0;
   $44 = $0 + 2332 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   _memmove($0 + 2772 + ($45 << 2) | 0, $5 | 0, Math_imul(($38 << 2) + -4 | 0, $45) | 0) | 0;
   $50 = HEAP32[$44 >> 2] | 0;
   _memcpy($5 | 0, $0 + 4 + ((Math_imul($50, $$0228$lcssa) | 0) << 2) | 0, $50 << 2 | 0) | 0;
   $54 = HEAP32[$37 >> 2] | 0;
   if (($54 | 0) > 0) {
    $56 = $0 + 4148 | 0;
    $$2246 = 0;
    $60 = HEAP32[$56 >> 2] | 0;
    do {
     $59 = (HEAP32[$1 + 16 + ($$2246 << 2) >> 2] | 0) - $60 | 0;
     $60 = (($59 >> 16) * 4634 | 0) + $60 + ((($59 & 65535) * 4634 | 0) >>> 16) | 0;
     HEAP32[$56 >> 2] = $60;
     $$2246 = $$2246 + 1 | 0;
    } while (($$2246 | 0) != ($54 | 0));
   }
  }
  if (!(HEAP32[$12 >> 2] | 0)) {
   _memset($0 + 4084 | 0, 0, HEAP32[$0 + 2340 >> 2] << 2 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $71 = _llvm_stacksave() | 0;
 $72 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 + 16 << 2) | 0) + 15 & -16) | 0;
 $75 = HEAP16[$0 + 4228 >> 1] | 0;
 $78 = HEAP32[$0 + 4248 >> 2] | 0;
 $79 = $78 << 16 >> 16;
 $89 = ((Math_imul($79, $75 & 65535) | 0) >> 16) + (Math_imul($79, $75 >> 16) | 0) + (Math_imul(($78 >> 15) + 1 >> 1, $75) | 0) | 0;
 $$pre261 = HEAP32[$0 + 4148 >> 2] | 0;
 $92 = $89 >> 16;
 if (($89 | 0) > 2097151 | ($$pre261 | 0) > 8388608) {
  $93 = $$pre261 >> 16;
  $$sink274 = 16;
  $$sink275 = (Math_imul($93, $93) | 0) - (Math_imul($92 << 5, $92) | 0) | 0;
 } else {
  $98 = $89 << 16 >> 16;
  $110 = $$pre261 << 16 >> 16;
  $$sink274 = 8;
  $$sink275 = (Math_imul($110, $$pre261 >> 16) | 0) - (((Math_imul($98, $89 & 65535) | 0) >> 16) + (Math_imul($98, $92) | 0) + (Math_imul(($89 >> 15) + 1 >> 1, $89) | 0) << 5) + ((Math_imul($110, $$pre261 & 65535) | 0) >> 16) + (Math_imul(($$pre261 >> 15) + 1 >> 1, $$pre261) | 0) | 0;
 }
 $124 = (_silk_SQRT_APPROX($$sink275) | 0) << $$sink274;
 _silk_CNG_exc($72 + 64 | 0, $5, $3, $0 + 4152 | 0);
 $128 = $0 + 2340 | 0;
 _silk_NLSF2A($4, $0 + 4052 | 0, HEAP32[$128 >> 2] | 0);
 $130 = $0 + 4084 | 0;
 dest = $72;
 src = $130;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $131 = HEAP32[$128 >> 2] | 0;
 switch ($131 | 0) {
 case 16:
 case 10:
  break;
 default:
  _celt_fatal(42113, 42083, 149);
 }
 L32 : do if (($3 | 0) > 0) {
  $134 = HEAP16[$4 >> 1] | 0;
  $137 = HEAP16[$4 + 2 >> 1] | 0;
  $140 = HEAP16[$4 + 4 >> 1] | 0;
  $143 = HEAP16[$4 + 6 >> 1] | 0;
  $146 = HEAP16[$4 + 8 >> 1] | 0;
  $149 = HEAP16[$4 + 10 >> 1] | 0;
  $152 = HEAP16[$4 + 12 >> 1] | 0;
  $155 = HEAP16[$4 + 14 >> 1] | 0;
  $158 = HEAP16[$4 + 16 >> 1] | 0;
  $161 = HEAP16[$4 + 18 >> 1] | 0;
  $164 = HEAP16[$4 + 20 >> 1] | 0;
  $167 = HEAP16[$4 + 22 >> 1] | 0;
  $170 = HEAP16[$4 + 24 >> 1] | 0;
  $173 = HEAP16[$4 + 26 >> 1] | 0;
  $176 = HEAP16[$4 + 28 >> 1] | 0;
  $179 = HEAP16[$4 + 30 >> 1] | 0;
  $180 = $124 << 10 >> 16;
  $183 = ($124 >> 21) + 1 >> 1;
  $$3245 = 0;
  $185 = $131;
  $188 = HEAP32[$72 + 60 >> 2] | 0;
  $202 = HEAP32[$72 + 52 >> 2] | 0;
  $216 = HEAP32[$72 + 44 >> 2] | 0;
  $230 = HEAP32[$72 + 36 >> 2] | 0;
  $244 = HEAP32[$72 + 28 >> 2] | 0;
  while (1) {
   $189 = Math_imul($188 >> 16, $134) | 0;
   $192 = (Math_imul($188 & 65535, $134) | 0) >> 16;
   $195 = HEAP32[$72 + ($$3245 + 14 << 2) >> 2] | 0;
   $197 = Math_imul($195 >> 16, $137) | 0;
   $200 = (Math_imul($195 & 65535, $137) | 0) >> 16;
   $203 = Math_imul($202 >> 16, $140) | 0;
   $206 = (Math_imul($202 & 65535, $140) | 0) >> 16;
   $209 = HEAP32[$72 + ($$3245 + 12 << 2) >> 2] | 0;
   $211 = Math_imul($209 >> 16, $143) | 0;
   $214 = (Math_imul($209 & 65535, $143) | 0) >> 16;
   $217 = Math_imul($216 >> 16, $146) | 0;
   $220 = (Math_imul($216 & 65535, $146) | 0) >> 16;
   $223 = HEAP32[$72 + ($$3245 + 10 << 2) >> 2] | 0;
   $225 = Math_imul($223 >> 16, $149) | 0;
   $228 = (Math_imul($223 & 65535, $149) | 0) >> 16;
   $231 = Math_imul($230 >> 16, $152) | 0;
   $234 = (Math_imul($230 & 65535, $152) | 0) >> 16;
   $237 = HEAP32[$72 + ($$3245 + 8 << 2) >> 2] | 0;
   $239 = Math_imul($237 >> 16, $155) | 0;
   $242 = (Math_imul($237 & 65535, $155) | 0) >> 16;
   $245 = Math_imul($244 >> 16, $158) | 0;
   $248 = (Math_imul($244 & 65535, $158) | 0) >> 16;
   $251 = HEAP32[$72 + ($$3245 + 6 << 2) >> 2] | 0;
   $276 = $189 + ($185 >> 1) + $192 + $197 + $200 + $203 + $206 + $211 + $214 + $217 + $220 + $225 + $228 + $231 + $234 + $239 + $242 + $245 + $248 + (Math_imul($251 >> 16, $161) | 0) + ((Math_imul($251 & 65535, $161) | 0) >> 16) | 0;
   if (($185 | 0) == 16) {
    $280 = HEAP32[$72 + ($$3245 + 5 << 2) >> 2] | 0;
    $282 = Math_imul($280 >> 16, $164) | 0;
    $285 = (Math_imul($280 & 65535, $164) | 0) >> 16;
    $288 = HEAP32[$72 + ($$3245 + 4 << 2) >> 2] | 0;
    $290 = Math_imul($288 >> 16, $167) | 0;
    $293 = (Math_imul($288 & 65535, $167) | 0) >> 16;
    $296 = HEAP32[$72 + ($$3245 + 3 << 2) >> 2] | 0;
    $298 = Math_imul($296 >> 16, $170) | 0;
    $301 = (Math_imul($296 & 65535, $170) | 0) >> 16;
    $304 = HEAP32[$72 + ($$3245 + 2 << 2) >> 2] | 0;
    $306 = Math_imul($304 >> 16, $173) | 0;
    $309 = (Math_imul($304 & 65535, $173) | 0) >> 16;
    $312 = HEAP32[$72 + ($$3245 + 1 << 2) >> 2] | 0;
    $314 = Math_imul($312 >> 16, $176) | 0;
    $317 = (Math_imul($312 & 65535, $176) | 0) >> 16;
    $319 = HEAP32[$72 + ($$3245 << 2) >> 2] | 0;
    $$0230 = $282 + $276 + $285 + $290 + $293 + $298 + $301 + $306 + $309 + $314 + $317 + (Math_imul($319 >> 16, $179) | 0) + ((Math_imul($319 & 65535, $179) | 0) >> 16) | 0;
   } else $$0230 = $276;
   $337 = $72 + ($$3245 + 16 << 2) | 0;
   $338 = HEAP32[$337 >> 2] | 0;
   $340 = ($$0230 | 0) > -134217728 ? $$0230 : -134217728;
   $343 = (($340 | 0) < 134217727 ? $340 : 134217727) << 4;
   $344 = $343 + $338 | 0;
   if (($344 | 0) > -1) $350 = ($343 & $338 | 0) < 0 ? -2147483648 : $344; else $350 = ($343 | $338 | 0) > -1 ? 2147483647 : $344;
   HEAP32[$337 >> 2] = $350;
   $351 = $2 + ($$3245 << 1) | 0;
   $361 = (Math_imul($350 >> 16, $180) | 0) + (Math_imul($350, $183) | 0) + ((Math_imul($350 & 65535, $180) | 0) >> 16) | 0;
   $368 = (($361 | 0) > 8388479 ? 32767 : ($361 | 0) < -8388736 ? -32768 : ($361 >> 7) + 1 >> 1) + (HEAP16[$351 >> 1] | 0) | 0;
   $spec$select243 = ($368 | 0) > -32768 ? $368 : -32768;
   HEAP16[$351 >> 1] = ($spec$select243 | 0) < 32767 ? $spec$select243 : 32767;
   $373 = $$3245 + 1 | 0;
   if (($373 | 0) == ($3 | 0)) break L32;
   $$3245 = $373;
   $185 = HEAP32[$128 >> 2] | 0;
   $188 = $350;
   $202 = $195;
   $216 = $209;
   $230 = $223;
   $244 = $237;
  }
 } while (0);
 dest = $130;
 src = $72 + ($3 << 2) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _llvm_stackrestore($71 | 0);
 STACKTOP = sp;
 return;
}

function _silk_burg_modified_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0194239$us = 0.0, $$0198$lcssa = 0.0, $$0198262 = 0.0, $$0199$lcssa = 0.0, $$0199261 = 0.0, $$0202$lcssa = 0.0, $$0202260 = 0.0, $$0203276 = 0.0, $$0206$lcssa = 0.0, $$0206226 = 0.0, $$0210285 = 0, $$0213281 = 0, $$0215238$us = 0, $$0240$us = 0.0, $$1195$lcssa = 0.0, $$1195252 = 0.0, $$1197 = 0.0, $$1200$lcssa = 0.0, $$1200222 = 0.0, $$1204 = 0.0, $$1208 = 0, $$1211247 = 0, $$1211247$us = 0, $$1214274 = 0, $$1216246 = 0, $$1216246$us = 0, $$1253 = 0.0, $$2$lcssa = 0.0, $$2201 = 0.0, $$2212225 = 0, $$2217251 = 0, $$2223 = 0.0, $$3259 = 0, $$4269 = 0, $$7231 = 0, $$8221 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $114 = 0.0, $116 = 0.0, $117 = 0, $119 = 0.0, $121 = 0, $125 = 0.0, $129 = 0.0, $13 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0, $143 = 0.0, $148 = 0.0, $152 = 0.0, $155 = 0.0, $158 = 0.0, $162 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $186 = 0, $188 = 0, $189 = 0.0, $20 = 0.0, $205 = 0.0, $210 = 0.0, $215 = 0.0, $217 = 0.0, $22 = 0, $223 = 0.0, $27 = 0.0, $29 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0.0, $43 = 0.0, $51 = 0, $6 = 0, $60 = 0, $67 = 0.0, $7 = 0, $70 = 0, $75 = 0.0, $78 = 0, $8 = 0, $82 = 0.0, $89 = 0, $9 = 0, $91 = 0.0, $94 = 0.0, $indvars$iv = 0, $indvars$iv317 = 0, label = 0, sp = 0, $$1214274$looptemp = 0, $$8221$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $6 = sp + 800 | 0;
 $7 = sp + 608 | 0;
 $8 = sp + 400 | 0;
 $9 = sp + 192 | 0;
 $10 = sp;
 $11 = Math_imul($4, $3) | 0;
 if (($11 | 0) >= 385) _celt_fatal(46547, 46607, 55);
 $13 = +_silk_energy_FLP($1, $11);
 _memset($6 | 0, 0, 192) | 0;
 $14 = ($4 | 0) > 0;
 if (!(($5 | 0) < 1 | $14 ^ 1)) {
  $$0210285 = 0;
  do {
   $17 = $1 + ((Math_imul($$0210285, $3) | 0) << 2) | 0;
   $$0213281 = 1;
   while (1) {
    $20 = +_silk_inner_product_FLP($17, $17 + ($$0213281 << 2) | 0, $3 - $$0213281 | 0);
    $22 = $6 + ($$0213281 + -1 << 3) | 0;
    HEAPF64[$22 >> 3] = $20 + +HEAPF64[$22 >> 3];
    if (($$0213281 | 0) == ($5 | 0)) break; else $$0213281 = $$0213281 + 1 | 0;
   }
   $$0210285 = $$0210285 + 1 | 0;
  } while (($$0210285 | 0) != ($4 | 0));
 }
 _memcpy($7 | 0, $6 | 0, 192) | 0;
 $27 = $13 * 9.999999747378752e-06;
 $29 = $13 + $27 + 9.999999717180685e-10;
 HEAPF64[$8 >> 3] = $29;
 HEAPF64[$9 >> 3] = $29;
 L12 : do if (($5 | 0) > 0) {
  $31 = $2;
  $$0203276 = 1.0;
  $$1214274 = 0;
  $indvars$iv = 1;
  $indvars$iv317 = 2;
  while (1) {
   $32 = $indvars$iv >>> 1;
   L16 : do if ($14) {
    $33 = $3 - $$1214274 | 0;
    $34 = $33 + -1 | 0;
    $36 = $$1214274 + -1 | 0;
    if (!$$1214274) {
     $$1211247 = 0;
     while (1) {
      $89 = $1 + ((Math_imul($$1211247, $3) | 0) << 2) | 0;
      $91 = +HEAPF32[$89 >> 2];
      $94 = +HEAPF32[$89 + ($34 << 2) >> 2];
      $$1216246 = 0;
      do {
       $100 = $8 + ($$1216246 << 3) | 0;
       HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] - $91 * +HEAPF32[$89 + (0 - $$1216246 << 2) >> 2];
       $108 = $9 + ($$1216246 << 3) | 0;
       HEAPF64[$108 >> 3] = +HEAPF64[$108 >> 3] - $94 * +HEAPF32[$89 + ($34 + $$1216246 << 2) >> 2];
       $$1216246 = $$1216246 + 1 | 0;
      } while (($$1216246 | 0) != ($indvars$iv | 0));
      $$1211247 = $$1211247 + 1 | 0;
      if (($$1211247 | 0) == ($4 | 0)) break L16;
     }
    }
    $$1211247$us = 0;
    do {
     $38 = $1 + ((Math_imul($$1211247$us, $3) | 0) << 2) | 0;
     $40 = +HEAPF32[$38 + ($$1214274 << 2) >> 2];
     $43 = +HEAPF32[$38 + ($34 << 2) >> 2];
     $$0194239$us = $40;
     $$0215238$us = 0;
     $$0240$us = $43;
     do {
      $67 = +HEAPF32[$38 + ($36 - $$0215238$us << 2) >> 2];
      $70 = $6 + ($$0215238$us << 3) | 0;
      HEAPF64[$70 >> 3] = +HEAPF64[$70 >> 3] - $40 * $67;
      $75 = +HEAPF32[$38 + ($$0215238$us + $33 << 2) >> 2];
      $78 = $7 + ($$0215238$us << 3) | 0;
      HEAPF64[$78 >> 3] = +HEAPF64[$78 >> 3] - $43 * $75;
      $82 = +HEAPF64[$10 + ($$0215238$us << 3) >> 3];
      $$0194239$us = $$0194239$us + $82 * $67;
      $$0240$us = $$0240$us + $82 * $75;
      $$0215238$us = $$0215238$us + 1 | 0;
     } while (($$0215238$us | 0) != ($$1214274 | 0));
     $$1216246$us = 0;
     do {
      $51 = $8 + ($$1216246$us << 3) | 0;
      HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] - $$0194239$us * +HEAPF32[$38 + ($$1214274 - $$1216246$us << 2) >> 2];
      $60 = $9 + ($$1216246$us << 3) | 0;
      HEAPF64[$60 >> 3] = +HEAPF64[$60 >> 3] - $$0240$us * +HEAPF32[$38 + ($34 + $$1216246$us << 2) >> 2];
      $$1216246$us = $$1216246$us + 1 | 0;
     } while (($$1216246$us | 0) != ($indvars$iv | 0));
     $$1211247$us = $$1211247$us + 1 | 0;
    } while (($$1211247$us | 0) != ($4 | 0));
   } while (0);
   $114 = +HEAPF64[$6 + ($$1214274 << 3) >> 3];
   $116 = +HEAPF64[$7 + ($$1214274 << 3) >> 3];
   $117 = ($$1214274 | 0) == 0;
   if ($117) {
    $$1195$lcssa = $114;
    $134 = $116;
   } else {
    $$1195252 = $114;
    $$1253 = $116;
    $$2217251 = 0;
    while (1) {
     $119 = +HEAPF64[$10 + ($$2217251 << 3) >> 3];
     $121 = $$1214274 - $$2217251 + -1 | 0;
     $125 = $$1195252 + $119 * +HEAPF64[$7 + ($121 << 3) >> 3];
     $129 = $$1253 + $119 * +HEAPF64[$6 + ($121 << 3) >> 3];
     $$2217251 = $$2217251 + 1 | 0;
     if (($$2217251 | 0) == ($$1214274 | 0)) {
      $$1195$lcssa = $125;
      $134 = $129;
      break;
     } else {
      $$1195252 = $125;
      $$1253 = $129;
     }
    }
   }
   $$1214274$looptemp = $$1214274;
   $$1214274 = $$1214274 + 1 | 0;
   HEAPF64[$8 + ($$1214274 << 3) >> 3] = $$1195$lcssa;
   $133 = $9 + ($$1214274 << 3) | 0;
   HEAPF64[$133 >> 3] = $134;
   $135 = +HEAPF64[$9 >> 3];
   $136 = +HEAPF64[$8 >> 3];
   if ($117) {
    $$0198$lcssa = $135;
    $$0199$lcssa = $136;
    $$0202$lcssa = $134;
   } else {
    $$0198262 = $135;
    $$0199261 = $136;
    $$0202260 = $134;
    $$3259 = 0;
    while (1) {
     $138 = +HEAPF64[$10 + ($$3259 << 3) >> 3];
     $143 = $$0202260 + $138 * +HEAPF64[$9 + ($$1214274$looptemp - $$3259 << 3) >> 3];
     $$3259 = $$3259 + 1 | 0;
     $148 = $$0198262 + $138 * +HEAPF64[$9 + ($$3259 << 3) >> 3];
     $152 = $$0199261 + $138 * +HEAPF64[$8 + ($$3259 << 3) >> 3];
     if (($$3259 | 0) == ($$1214274$looptemp | 0)) {
      $$0198$lcssa = $148;
      $$0199$lcssa = $152;
      $$0202$lcssa = $143;
      break;
     } else {
      $$0198262 = $148;
      $$0199261 = $152;
      $$0202260 = $143;
     }
    }
   }
   $155 = $$0202$lcssa * -2.0 / ($$0199$lcssa + $$0198$lcssa);
   $158 = $$0203276 * (1.0 - $155 * $155);
   if (!($158 <= $31)) {
    $$1197 = $155;
    $$1204 = $158;
    $$1208 = 0;
   } else {
    $162 = +Math_sqrt(+(1.0 - $31 / $$0203276));
    $$1197 = $$0202$lcssa > 0.0 ? -$162 : $162;
    $$1204 = $31;
    $$1208 = 1;
   }
   if ($$1214274 & 2147483646 | 0) {
    $166 = $$1214274$looptemp + -1 | 0;
    $$4269 = 0;
    do {
     $167 = $10 + ($$4269 << 3) | 0;
     $168 = +HEAPF64[$167 >> 3];
     $170 = $10 + ($166 - $$4269 << 3) | 0;
     $171 = +HEAPF64[$170 >> 3];
     HEAPF64[$167 >> 3] = $168 + $$1197 * $171;
     HEAPF64[$170 >> 3] = $171 + $$1197 * $168;
     $$4269 = $$4269 + 1 | 0;
    } while (($$4269 | 0) != ($32 | 0));
   }
   HEAPF64[$10 + ($$1214274$looptemp << 3) >> 3] = $$1197;
   if ($$1208 | 0) break;
   HEAPF64[$8 >> 3] = $136 + $$1197 * $134;
   HEAPF64[$133 >> 3] = $134 + $$1197 * $136;
   $186 = 1;
   do {
    $$phi$trans$insert = $8 + ($186 << 3) | 0;
    $$pre = +HEAPF64[$$phi$trans$insert >> 3];
    $188 = $9 + ($$1214274 - $186 << 3) | 0;
    $189 = +HEAPF64[$188 >> 3];
    HEAPF64[$$phi$trans$insert >> 3] = $$pre + $$1197 * $189;
    HEAPF64[$188 >> 3] = $189 + $$1197 * $$pre;
    $186 = $186 + 1 | 0;
   } while (($186 | 0) != ($indvars$iv317 | 0));
   if (($$1214274 | 0) >= ($5 | 0)) {
    label = 45;
    break;
   } else {
    $$0203276 = $$1204;
    $indvars$iv = $indvars$iv + 1 | 0;
    $indvars$iv317 = $indvars$iv317 + 1 | 0;
   }
  }
  if ((label | 0) == 45) {
   $$1200222 = +HEAPF64[$8 >> 3];
   $$2223 = 1.0;
   $$8221 = 0;
   while (1) {
    $210 = +HEAPF64[$10 + ($$8221 << 3) >> 3];
    $$8221$looptemp = $$8221;
    $$8221 = $$8221 + 1 | 0;
    $215 = $$1200222 + $210 * +HEAPF64[$8 + ($$8221 << 3) >> 3];
    $217 = $$2223 + $210 * $210;
    HEAPF32[$0 + ($$8221$looptemp << 2) >> 2] = -$210;
    if (($$8221 | 0) == ($5 | 0)) {
     $$1200$lcssa = $215;
     $$2$lcssa = $217;
     break L12;
    } else {
     $$1200222 = $215;
     $$2223 = $217;
    }
   }
  }
  if (($$1214274 | 0) < ($5 | 0)) _memset($10 + ($$1214274 << 3) | 0, 0, $5 - $$1214274 << 3 | 0) | 0;
  $$7231 = 0;
  do {
   HEAPF32[$0 + ($$7231 << 2) >> 2] = -+HEAPF64[$10 + ($$7231 << 3) >> 3];
   $$7231 = $$7231 + 1 | 0;
  } while (($$7231 | 0) != ($5 | 0));
  if ($14) {
   $$0206226 = $13;
   $$2212225 = 0;
   while (1) {
    $205 = $$0206226 - +_silk_energy_FLP($1 + ((Math_imul($$2212225, $3) | 0) << 2) | 0, $5);
    $$2212225 = $$2212225 + 1 | 0;
    if (($$2212225 | 0) == ($4 | 0)) {
     $$0206$lcssa = $205;
     break;
    } else $$0206226 = $205;
   }
  } else $$0206$lcssa = $13;
  $$2201 = $$1204 * $$0206$lcssa;
  $223 = $$2201;
  STACKTOP = sp;
  return +$223;
 } else {
  $$1200$lcssa = $29;
  $$2$lcssa = 1.0;
 } while (0);
 $$2201 = $$1200$lcssa - $27 * $$2$lcssa;
 $223 = $$2201;
 STACKTOP = sp;
 return +$223;
}

function _silk_nsq_del_dec_scale_states($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$0152167 = 0, $$0153 = 0, $$0178 = 0, $$1175 = 0, $$2171 = 0, $$3168 = 0, $$5165 = 0, $$6166 = 0, $106 = 0, $107 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $193 = 0, $194 = 0, $195 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $229 = 0, $230 = 0, $231 = 0, $241 = 0, $242 = 0, $243 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $265 = 0, $266 = 0, $267 = 0, $277 = 0, $278 = 0, $279 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $301 = 0, $302 = 0, $303 = 0, $313 = 0, $314 = 0, $315 = 0, $32 = 0, $325 = 0, $326 = 0, $327 = 0, $337 = 0, $338 = 0, $339 = 0, $349 = 0, $350 = 0, $351 = 0, $362 = 0, $363 = 0, $364 = 0, $374 = 0, $375 = 0, $376 = 0, $45 = 0, $50 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0;
 $15 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 $16 = $10 + ($7 << 2) | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $19 = _silk_INVERSE32_varQ_244(($17 | 0) > 1 ? $17 : 1) | 0;
 $21 = ($19 >> 4) + 1 | 0;
 $22 = $0 + 4588 | 0;
 if ((HEAP32[$22 >> 2] | 0) > 0) {
  $26 = $21 >>> 1 << 16 >> 16;
  $29 = ($21 >> 16) + 1 >> 1;
  $$0178 = 0;
  do {
   $32 = HEAP16[$3 + ($$0178 << 1) >> 1] | 0;
   HEAP32[$4 + ($$0178 << 2) >> 2] = (Math_imul($32 >> 16, $26) | 0) + (Math_imul($29, $32) | 0) + ((Math_imul($32 & 65535, $26) | 0) >> 16);
   $$0178 = $$0178 + 1 | 0;
  } while (($$0178 | 0) < (HEAP32[$22 >> 2] | 0));
 }
 $45 = $1 + 4348 | 0;
 if (HEAP32[$45 >> 2] | 0) {
  if (!$7) {
   $50 = $9 << 16 >> 16;
   $$0153 = ((Math_imul($19 & 65535, $50) | 0) >> 16) + (Math_imul($19 >> 16, $50) | 0) << 2;
  } else $$0153 = $19;
  $57 = $1 + 4332 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  $60 = -2 - $15 + $58 | 0;
  if (($60 | 0) < ($58 | 0)) {
   $62 = $$0153 >> 16;
   $63 = $$0153 & 65535;
   $$1175 = $60;
   do {
    $66 = HEAP16[$5 + ($$1175 << 1) >> 1] | 0;
    HEAP32[$6 + ($$1175 << 2) >> 2] = ((Math_imul($63, $66) | 0) >> 16) + (Math_imul($62, $66) | 0);
    $$1175 = $$1175 + 1 | 0;
   } while (($$1175 | 0) < (HEAP32[$57 >> 2] | 0));
  }
 }
 $75 = HEAP32[$16 >> 2] | 0;
 $76 = $1 + 4344 | 0;
 $77 = HEAP32[$76 >> 2] | 0;
 if (($75 | 0) == ($77 | 0)) return;
 $79 = _silk_DIV32_varQ_245($77, $75) | 0;
 $80 = $1 + 4336 | 0;
 $82 = HEAP32[$0 + 4592 >> 2] | 0;
 if (($82 | 0) > 0) {
  $86 = $79 >> 16;
  $87 = $79 & 65535;
  $$2171 = (HEAP32[$80 >> 2] | 0) - $82 | 0;
  do {
   $88 = $1 + 1280 + ($$2171 << 2) | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   $90 = $89 << 16 >> 16;
   HEAP32[$88 >> 2] = ((Math_imul($90, $87) | 0) >> 16) + (Math_imul($90, $86) | 0) + (Math_imul(($89 >> 15) + 1 >> 1, $79) | 0);
   $$2171 = $$2171 + 1 | 0;
  } while (($$2171 | 0) < (HEAP32[$80 >> 2] | 0));
 }
 if (($12 | 0) == 2) if (!(HEAP32[$45 >> 2] | 0)) {
  $106 = $1 + 4332 | 0;
  $107 = HEAP32[$106 >> 2] | 0;
  $109 = -2 - $15 + $107 | 0;
  if (($109 | 0) < ($107 - $13 | 0)) {
   $112 = $79 >> 16;
   $113 = $79 & 65535;
   $$3168 = $109;
   do {
    $114 = $6 + ($$3168 << 2) | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = $115 << 16 >> 16;
    HEAP32[$114 >> 2] = ((Math_imul($116, $113) | 0) >> 16) + (Math_imul($116, $112) | 0) + (Math_imul(($115 >> 15) + 1 >> 1, $79) | 0);
    $$3168 = $$3168 + 1 | 0;
   } while (($$3168 | 0) < ((HEAP32[$106 >> 2] | 0) - $13 | 0));
  }
 }
 if (($8 | 0) > 0) {
  $131 = $79 >> 16;
  $132 = $79 & 65535;
  $$0152167 = 0;
  do {
   $133 = $2 + ($$0152167 * 1300 | 0) + 1280 | 0;
   $134 = HEAP32[$133 >> 2] | 0;
   $135 = $134 << 16 >> 16;
   HEAP32[$133 >> 2] = ((Math_imul($135, $132) | 0) >> 16) + (Math_imul($135, $131) | 0) + (Math_imul(($134 >> 15) + 1 >> 1, $79) | 0);
   $145 = $2 + ($$0152167 * 1300 | 0) + 1284 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   $147 = $146 << 16 >> 16;
   HEAP32[$145 >> 2] = ((Math_imul($147, $132) | 0) >> 16) + (Math_imul($147, $131) | 0) + (Math_imul(($146 >> 15) + 1 >> 1, $79) | 0);
   $157 = $2 + ($$0152167 * 1300 | 0) | 0;
   $158 = HEAP32[$157 >> 2] | 0;
   $159 = $158 << 16 >> 16;
   HEAP32[$157 >> 2] = ((Math_imul($159, $132) | 0) >> 16) + (Math_imul($159, $131) | 0) + (Math_imul(($158 >> 15) + 1 >> 1, $79) | 0);
   $169 = $2 + ($$0152167 * 1300 | 0) + 4 | 0;
   $170 = HEAP32[$169 >> 2] | 0;
   $171 = $170 << 16 >> 16;
   HEAP32[$169 >> 2] = ((Math_imul($171, $132) | 0) >> 16) + (Math_imul($171, $131) | 0) + (Math_imul(($170 >> 15) + 1 >> 1, $79) | 0);
   $181 = $2 + ($$0152167 * 1300 | 0) + 8 | 0;
   $182 = HEAP32[$181 >> 2] | 0;
   $183 = $182 << 16 >> 16;
   HEAP32[$181 >> 2] = ((Math_imul($183, $132) | 0) >> 16) + (Math_imul($183, $131) | 0) + (Math_imul(($182 >> 15) + 1 >> 1, $79) | 0);
   $193 = $2 + ($$0152167 * 1300 | 0) + 12 | 0;
   $194 = HEAP32[$193 >> 2] | 0;
   $195 = $194 << 16 >> 16;
   HEAP32[$193 >> 2] = ((Math_imul($195, $132) | 0) >> 16) + (Math_imul($195, $131) | 0) + (Math_imul(($194 >> 15) + 1 >> 1, $79) | 0);
   $205 = $2 + ($$0152167 * 1300 | 0) + 16 | 0;
   $206 = HEAP32[$205 >> 2] | 0;
   $207 = $206 << 16 >> 16;
   HEAP32[$205 >> 2] = ((Math_imul($207, $132) | 0) >> 16) + (Math_imul($207, $131) | 0) + (Math_imul(($206 >> 15) + 1 >> 1, $79) | 0);
   $217 = $2 + ($$0152167 * 1300 | 0) + 20 | 0;
   $218 = HEAP32[$217 >> 2] | 0;
   $219 = $218 << 16 >> 16;
   HEAP32[$217 >> 2] = ((Math_imul($219, $132) | 0) >> 16) + (Math_imul($219, $131) | 0) + (Math_imul(($218 >> 15) + 1 >> 1, $79) | 0);
   $229 = $2 + ($$0152167 * 1300 | 0) + 24 | 0;
   $230 = HEAP32[$229 >> 2] | 0;
   $231 = $230 << 16 >> 16;
   HEAP32[$229 >> 2] = ((Math_imul($231, $132) | 0) >> 16) + (Math_imul($231, $131) | 0) + (Math_imul(($230 >> 15) + 1 >> 1, $79) | 0);
   $241 = $2 + ($$0152167 * 1300 | 0) + 28 | 0;
   $242 = HEAP32[$241 >> 2] | 0;
   $243 = $242 << 16 >> 16;
   HEAP32[$241 >> 2] = ((Math_imul($243, $132) | 0) >> 16) + (Math_imul($243, $131) | 0) + (Math_imul(($242 >> 15) + 1 >> 1, $79) | 0);
   $253 = $2 + ($$0152167 * 1300 | 0) + 32 | 0;
   $254 = HEAP32[$253 >> 2] | 0;
   $255 = $254 << 16 >> 16;
   HEAP32[$253 >> 2] = ((Math_imul($255, $132) | 0) >> 16) + (Math_imul($255, $131) | 0) + (Math_imul(($254 >> 15) + 1 >> 1, $79) | 0);
   $265 = $2 + ($$0152167 * 1300 | 0) + 36 | 0;
   $266 = HEAP32[$265 >> 2] | 0;
   $267 = $266 << 16 >> 16;
   HEAP32[$265 >> 2] = ((Math_imul($267, $132) | 0) >> 16) + (Math_imul($267, $131) | 0) + (Math_imul(($266 >> 15) + 1 >> 1, $79) | 0);
   $277 = $2 + ($$0152167 * 1300 | 0) + 40 | 0;
   $278 = HEAP32[$277 >> 2] | 0;
   $279 = $278 << 16 >> 16;
   HEAP32[$277 >> 2] = ((Math_imul($279, $132) | 0) >> 16) + (Math_imul($279, $131) | 0) + (Math_imul(($278 >> 15) + 1 >> 1, $79) | 0);
   $289 = $2 + ($$0152167 * 1300 | 0) + 44 | 0;
   $290 = HEAP32[$289 >> 2] | 0;
   $291 = $290 << 16 >> 16;
   HEAP32[$289 >> 2] = ((Math_imul($291, $132) | 0) >> 16) + (Math_imul($291, $131) | 0) + (Math_imul(($290 >> 15) + 1 >> 1, $79) | 0);
   $301 = $2 + ($$0152167 * 1300 | 0) + 48 | 0;
   $302 = HEAP32[$301 >> 2] | 0;
   $303 = $302 << 16 >> 16;
   HEAP32[$301 >> 2] = ((Math_imul($303, $132) | 0) >> 16) + (Math_imul($303, $131) | 0) + (Math_imul(($302 >> 15) + 1 >> 1, $79) | 0);
   $313 = $2 + ($$0152167 * 1300 | 0) + 52 | 0;
   $314 = HEAP32[$313 >> 2] | 0;
   $315 = $314 << 16 >> 16;
   HEAP32[$313 >> 2] = ((Math_imul($315, $132) | 0) >> 16) + (Math_imul($315, $131) | 0) + (Math_imul(($314 >> 15) + 1 >> 1, $79) | 0);
   $325 = $2 + ($$0152167 * 1300 | 0) + 56 | 0;
   $326 = HEAP32[$325 >> 2] | 0;
   $327 = $326 << 16 >> 16;
   HEAP32[$325 >> 2] = ((Math_imul($327, $132) | 0) >> 16) + (Math_imul($327, $131) | 0) + (Math_imul(($326 >> 15) + 1 >> 1, $79) | 0);
   $337 = $2 + ($$0152167 * 1300 | 0) + 60 | 0;
   $338 = HEAP32[$337 >> 2] | 0;
   $339 = $338 << 16 >> 16;
   HEAP32[$337 >> 2] = ((Math_imul($339, $132) | 0) >> 16) + (Math_imul($339, $131) | 0) + (Math_imul(($338 >> 15) + 1 >> 1, $79) | 0);
   $$5165 = 0;
   do {
    $349 = $2 + ($$0152167 * 1300 | 0) + 1184 + ($$5165 << 2) | 0;
    $350 = HEAP32[$349 >> 2] | 0;
    $351 = $350 << 16 >> 16;
    HEAP32[$349 >> 2] = ((Math_imul($351, $132) | 0) >> 16) + (Math_imul($351, $131) | 0) + (Math_imul(($350 >> 15) + 1 >> 1, $79) | 0);
    $$5165 = $$5165 + 1 | 0;
   } while (($$5165 | 0) != 24);
   $$6166 = 0;
   do {
    $362 = $2 + ($$0152167 * 1300 | 0) + 864 + ($$6166 << 2) | 0;
    $363 = HEAP32[$362 >> 2] | 0;
    $364 = $363 << 16 >> 16;
    HEAP32[$362 >> 2] = ((Math_imul($364, $132) | 0) >> 16) + (Math_imul($364, $131) | 0) + (Math_imul(($363 >> 15) + 1 >> 1, $79) | 0);
    $374 = $2 + ($$0152167 * 1300 | 0) + 1024 + ($$6166 << 2) | 0;
    $375 = HEAP32[$374 >> 2] | 0;
    $376 = $375 << 16 >> 16;
    HEAP32[$374 >> 2] = ((Math_imul($376, $132) | 0) >> 16) + (Math_imul($376, $131) | 0) + (Math_imul(($375 >> 15) + 1 >> 1, $79) | 0);
    $$6166 = $$6166 + 1 | 0;
   } while (($$6166 | 0) != 40);
   $$0152167 = $$0152167 + 1 | 0;
  } while (($$0152167 | 0) != ($8 | 0));
 }
 HEAP32[$76 >> 2] = HEAP32[$16 >> 2];
 return;
}

function _compute_theta($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0249 = 0, $$0250 = 0, $$0251 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0, $$0260 = 0, $$0287 = 0, $$1 = 0, $$1257 = 0, $$1272 = 0, $$2 = 0, $$3 = 0, $$3259$ph = 0, $$3259280 = 0, $$3259281 = 0, $$4 = 0, $$4282 = 0, $$idx3 = 0, $$idx4 = 0, $$pre$phi289Z2D = 0, $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $13 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $148 = 0, $15 = 0, $155 = 0, $156 = 0, $167 = 0, $17 = 0, $172 = 0, $173 = 0, $175 = 0, $189 = 0, $19 = 0, $193 = 0, $207 = 0, $21 = 0, $211 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $28 = 0, $30 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $48 = 0, $49 = 0, $50 = 0, $57 = 0, $60 = 0, $71 = 0, $72 = 0, $80 = 0, $83 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0;
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$0 + 8 >> 2] | 0;
 $15 = HEAP32[$0 + 12 >> 2] | 0;
 $17 = HEAP32[$0 + 16 >> 2] | 0;
 $19 = HEAP32[$0 + 28 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $28 = ($8 << 3) + (HEAP16[(HEAP32[$13 + 56 >> 2] | 0) + ($15 << 1) >> 1] | 0) | 0;
 $30 = ($9 | 0) != 0;
 $36 = _compute_qn($4, HEAP32[$5 >> 2] | 0, ($28 >> 1) - (($4 | 0) == 2 & $30 ? 16 : 4) | 0, $28, $9) | 0;
 $$0249 = ($15 | 0) < ($17 | 0) | $30 ^ 1 ? $36 : 1;
 $38 = ($11 | 0) != 0;
 if ($38) $$0251 = _stereo_itheta($2, $3, $9, $4) | 0; else $$0251 = 0;
 $$idx3 = $19 + 20 | 0;
 $$idx4 = $19 + 28 | 0;
 $40 = _ec_tell_frac(HEAP32[$$idx3 >> 2] | 0, HEAP32[$$idx4 >> 2] | 0) | 0;
 L4 : do if (($$0249 | 0) == 1) if ($30) {
  if ($38) {
   if (($$0251 | 0) > 8192) {
    $172 = (HEAP32[$0 + 52 >> 2] | 0) == 0;
    $173 = $172 & 1;
    if ($172) if (($4 | 0) > 0) {
     $$0287 = 0;
     do {
      $175 = $3 + ($$0287 << 2) | 0;
      HEAPF32[$175 >> 2] = -+HEAPF32[$175 >> 2];
      $$0287 = $$0287 + 1 | 0;
     } while (($$0287 | 0) != ($4 | 0));
     $225 = $173;
    } else $225 = 1; else $225 = 0;
   } else $225 = 0;
   _intensity_stereo(HEAP32[$13 + 8 >> 2] | 0, $2, $3, $21, $15, $4);
   $$0256 = $225;
  } else $$0256 = 0;
  do if ((HEAP32[$5 >> 2] | 0) > 16) if ((HEAP32[$0 + 32 >> 2] | 0) > 16) if ($38) {
   _ec_enc_bit_logp($19, $$0256, 2);
   $$1257 = $$0256;
   break;
  } else {
   $$1257 = _ec_dec_bit_logp($19, 2) | 0;
   break;
  } else $$1257 = 0; else $$1257 = 0; while (0);
  $$3259$ph = (HEAP32[$0 + 52 >> 2] | 0) == 0 ? $$1257 : 0;
  label = 54;
 } else {
  $$4 = $$0251;
  label = 55;
 } else {
  do if ($38) {
   if (!$30) {
    $48 = Math_imul($$0251, $$0249) | 0;
    $49 = $48 + 8192 | 0;
    $50 = $49 >> 14;
    if (!(($50 | 0) < ($$0249 | 0) & (($48 | 0) > 8191 & (HEAP32[$0 + 56 >> 2] | 0) != 0))) {
     $$1272 = $50;
     label = 21;
     break;
    }
    $57 = _celt_udiv($49 & -16384, $$0249) | 0;
    $60 = (_bitexact_cos($57 & 65535) | 0) << 16 >> 16;
    $71 = (Math_imul((_bitexact_log2tan((_bitexact_cos(16384 - $57 & 65535) | 0) << 16 >> 16, $60) | 0) << 16 >> 16, ($4 << 23) + -8388608 >> 16) | 0) + 16384 >> 15;
    $72 = HEAP32[$5 >> 2] | 0;
    $$1272 = ($71 | 0) > ($72 | 0) ? $36 : ($71 | 0) < (0 - $72 | 0) ? 0 : $50;
    label = 21;
    break;
   }
   $43 = HEAP32[$0 + 48 >> 2] | 0;
   if (!$43) {
    $$1 = (Math_imul($$0251, $$0249) | 0) + 8192 >> 14;
    label = 11;
    break;
   } else {
    $80 = (((($$0251 | 0) > 8192 ? 32767 : -32767) | 0) / ($$0249 | 0) | 0) + (Math_imul($$0251, $$0249) | 0) | 0;
    $83 = ($80 | 0) < 0 ? 0 : $80 >> 14;
    $$1 = (($$0249 | 0) > ($83 | 0) ? $83 : $$0249 + -1 | 0) + ($43 >>> 31 ^ 1) | 0;
    label = 11;
    break;
   }
  } else {
   $$1 = $$0251;
   label = 11;
  } while (0);
  do if ((label | 0) == 11) if (($4 | 0) > 2 & $30) {
   $87 = ($$0249 | 0) / 2 | 0;
   $88 = $87 + 1 | 0;
   $89 = $88 * 3 | 0;
   $90 = $89 + $87 | 0;
   if ($38) {
    $91 = ($$1 | 0) <= ($87 | 0);
    if ($91) {
     $92 = $$1 * 3 | 0;
     $$pre$phiZ2D = $92;
     $100 = $92;
    } else {
     $$pre$phiZ2D = $$1 * 3 | 0;
     $100 = $89 + ~$87 + $$1 | 0;
    }
    _ec_encode($19, $100, $91 ? $$pre$phiZ2D + 3 | 0 : $89 - $87 + $$1 | 0, $90);
    $$3 = $$1;
    break;
   } else {
    $101 = _ec_decode($19, $90) | 0;
    $105 = (Math_imul($88, -2) | 0) + $101 | 0;
    $$0260 = ($101 | 0) < ($89 | 0) ? ($101 | 0) / 3 | 0 : $105;
    $106 = ($$0260 | 0) <= ($87 | 0);
    if ($106) {
     $107 = $$0260 * 3 | 0;
     $$pre$phi289Z2D = $107;
     $115 = $107;
    } else {
     $$pre$phi289Z2D = $$0260 * 3 | 0;
     $115 = $89 + ~$87 + $$0260 | 0;
    }
    _ec_dec_update($19, $115, $106 ? $$pre$phi289Z2D + 3 | 0 : $89 - $87 + $$0260 | 0, $90);
    $$3 = $$0260;
    break;
   }
  } else {
   $$1272 = $$1;
   label = 21;
  } while (0);
  do if ((label | 0) == 21) {
   if (($7 | 0) > 1 | $30) {
    $117 = $$0249 + 1 | 0;
    if ($38) {
     _ec_enc_uint($19, $$1272, $117);
     $$3 = $$1272;
     break;
    } else {
     $$3 = _ec_dec_uint($19, $117) | 0;
     break;
    }
   }
   $119 = $$0249 >> 1;
   $120 = $119 + 1 | 0;
   $121 = Math_imul($120, $120) | 0;
   if ($38) {
    $122 = ($$1272 | 0) <= ($119 | 0);
    $123 = $$1272 + 1 | 0;
    $125 = $$0249 + 1 - $$1272 | 0;
    if ($122) $135 = (Math_imul($123, $$1272) | 0) >> 1; else $135 = $121 - ((Math_imul($125, $$0249 + 2 - $$1272 | 0) | 0) >> 1) | 0;
    _ec_encode($19, $135, $135 + ($122 ? $123 : $125) | 0, $121);
    $$3 = $$1272;
    break;
   } else {
    $136 = _ec_decode($19, $121) | 0;
    if (($136 | 0) < ((Math_imul($120, $119) | 0) >> 1 | 0)) {
     $144 = ((_isqrt32($136 << 3 | 1) | 0) + -1 | 0) >>> 1;
     $145 = $144 + 1 | 0;
     $$0250 = (Math_imul($145, $144) | 0) >>> 1;
     $$0253 = $145;
     $$2 = $144;
    } else {
     $148 = $$0249 + 1 | 0;
     $155 = (($148 << 1) - (_isqrt32(($121 - $136 << 3) + -7 | 0) | 0) | 0) >>> 1;
     $156 = $148 - $155 | 0;
     $$0250 = $121 - ((Math_imul($156, $$0249 + 2 - $155 | 0) | 0) >> 1) | 0;
     $$0253 = $156;
     $$2 = $155;
    }
    _ec_dec_update($19, $$0250, $$0250 + $$0253 | 0, $121);
    $$4 = _celt_udiv($$2 << 14, $$0249) | 0;
    label = 55;
    break L4;
   }
  } while (0);
  if (($$3 | 0) <= -1) _celt_fatal(39690, 39549, 838);
  $167 = _celt_udiv($$3 << 14, $$0249) | 0;
  if ($30 & $38) if (!$167) {
   _intensity_stereo(HEAP32[$13 + 8 >> 2] | 0, $2, $3, $21, $15, $4);
   $$3259$ph = 0;
   label = 54;
   break;
  } else {
   _stereo_split($2, $3, $4);
   $$4 = $167;
   label = 55;
   break;
  } else {
   $$4 = $167;
   label = 55;
  }
 } while (0);
 L75 : do if ((label | 0) == 54) {
  $189 = (_ec_tell_frac(HEAP32[$$idx3 >> 2] | 0, HEAP32[$$idx4 >> 2] | 0) | 0) - $40 | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - $189;
  $$3259281 = $$3259$ph;
  $226 = $189;
 } else if ((label | 0) == 55) {
  $193 = (_ec_tell_frac(HEAP32[$$idx3 >> 2] | 0, HEAP32[$$idx4 >> 2] | 0) | 0) - $40 | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - $193;
  L77 : do if (($$4 | 0) < 16384) switch ($$4 | 0) {
  case 0:
   {
    $$3259281 = 0;
    $226 = $193;
    break L75;
    break;
   }
  default:
   {}
  } else {
   switch ($$4 | 0) {
   case 16384:
    break;
   default:
    break L77;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & (1 << $6) + -1 << $6;
   $$0252 = 16384;
   $$0254 = 0;
   $$0255 = 32767;
   $$3259280 = 0;
   $$4282 = 16384;
   $224 = $193;
   HEAP32[$1 >> 2] = $$3259280;
   $219 = $1 + 4 | 0;
   HEAP32[$219 >> 2] = $$0254;
   $220 = $1 + 8 | 0;
   HEAP32[$220 >> 2] = $$0255;
   $221 = $1 + 12 | 0;
   HEAP32[$221 >> 2] = $$0252;
   $222 = $1 + 16 | 0;
   HEAP32[$222 >> 2] = $$4282;
   $223 = $1 + 20 | 0;
   HEAP32[$223 >> 2] = $224;
   return;
  } while (0);
  $207 = (_bitexact_cos($$4 & 65535) | 0) << 16 >> 16;
  $211 = (_bitexact_cos(16384 - $$4 & 65535) | 0) << 16 >> 16;
  $$0252 = (Math_imul((_bitexact_log2tan($211, $207) | 0) << 16 >> 16, ($4 << 23) + -8388608 >> 16) | 0) + 16384 >> 15;
  $$0254 = $207;
  $$0255 = $211;
  $$3259280 = 0;
  $$4282 = $$4;
  $224 = $193;
  HEAP32[$1 >> 2] = $$3259280;
  $219 = $1 + 4 | 0;
  HEAP32[$219 >> 2] = $$0254;
  $220 = $1 + 8 | 0;
  HEAP32[$220 >> 2] = $$0255;
  $221 = $1 + 12 | 0;
  HEAP32[$221 >> 2] = $$0252;
  $222 = $1 + 16 | 0;
  HEAP32[$222 >> 2] = $$4282;
  $223 = $1 + 20 | 0;
  HEAP32[$223 >> 2] = $224;
  return;
 } while (0);
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & (1 << $6) + -1;
 $$0252 = -16384;
 $$0254 = 32767;
 $$0255 = 0;
 $$3259280 = $$3259281;
 $$4282 = 0;
 $224 = $226;
 HEAP32[$1 >> 2] = $$3259280;
 $219 = $1 + 4 | 0;
 HEAP32[$219 >> 2] = $$0254;
 $220 = $1 + 8 | 0;
 HEAP32[$220 >> 2] = $$0255;
 $221 = $1 + 12 | 0;
 HEAP32[$221 >> 2] = $$0252;
 $222 = $1 + 16 | 0;
 HEAP32[$222 >> 2] = $$4282;
 $223 = $1 + 20 | 0;
 HEAP32[$223 >> 2] = $224;
 return;
}

function _clt_compute_allocation($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$0 = 0, $$0177 = 0, $$0177$us = 0, $$0178 = 0, $$0178$us = 0, $$0179 = 0, $$0179$us = 0, $$0181$us = 0, $$0182 = 0, $$0182$us = 0, $$0184207$us = 0, $$0186206$us = 0, $$0188212 = 0, $$0190 = 0, $$0191 = 0, $$0192$lcssa = 0, $$0192203 = 0, $$0192203$us = 0, $$1 = 0, $$1$us = 0, $$1180 = 0, $$1180$lcssa = 0, $$1180$us = 0, $$1187$us = 0, $$194$pn$us = 0, $$2204 = 0, $$2204$us = 0, $$in = 0, $$pre$phi238241Z2D = 0, $$pre222 = 0, $$pre224$pre = 0, $$pre231 = 0, $$pre237 = 0, $101 = 0, $105 = 0, $113 = 0, $116 = 0, $121 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $139 = 0, $141 = 0, $147 = 0, $148 = 0, $154 = 0, $155 = 0, $159 = 0, $164 = 0, $167 = 0, $171 = 0, $181 = 0, $183 = 0, $189 = 0, $190 = 0, $192 = 0, $196 = 0, $20 = 0, $201 = 0, $204 = 0, $208 = 0, $213 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $59 = 0, $60 = 0, $64 = 0, $71 = 0, $77 = 0, $78 = 0, $81 = 0, $82 = 0, $85 = 0, $90 = 0, $96 = 0, $97 = 0, $spec$select198 = 0, $spec$select198$us = 0, sp = 0, $$0188212$looptemp = 0, $59$looptemp = 0, $85$looptemp = 0, $$2204$us$looptemp = 0, $139$looptemp = 0, $$2204$looptemp = 0, $181$looptemp = 0;
 sp = STACKTOP;
 $20 = ($8 | 0) > 0 ? $8 : 0;
 $22 = HEAP32[$0 + 8 >> 2] | 0;
 $24 = ($20 | 0) > 7 ? 8 : 0;
 $25 = $20 - $24 | 0;
 if (($13 | 0) == 2) {
  $30 = HEAPU8[20784 + ($2 - $1) >> 0] | 0;
  $31 = ($25 | 0) < ($30 | 0);
  $32 = $25 - $30 | 0;
  $34 = ($32 | 0) > 7 ? 8 : 0;
  $$0 = $31 ? $25 : $32 - $34 | 0;
  $$0190 = $31 ? 0 : $34;
  $$0191 = $31 ? 0 : $30;
 } else {
  $$0 = $25;
  $$0190 = 0;
  $$0191 = 0;
 }
 $36 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $37 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $38 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $39 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $40 = ($2 | 0) > ($1 | 0);
 if ($40) {
  $46 = $13 << 3;
  $47 = $0 + 32 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  $51 = $2 + -1 | 0;
  $52 = Math_imul($5 + -5 - $14 | 0, $13) | 0;
  $53 = $14 + 3 | 0;
  $$0188212 = $1;
  $59 = HEAP16[$48 + ($1 << 1) >> 1] | 0;
  do {
   $$0188212$looptemp = $$0188212;
   $$0188212 = $$0188212 + 1 | 0;
   $59$looptemp = $59;
   $59 = HEAP16[$48 + ($$0188212 << 1) >> 1] | 0;
   $60 = ($59 << 16 >> 16) - ($59$looptemp << 16 >> 16) | 0;
   $64 = $60 * 3 << $14 << 3 >> 4;
   HEAP32[$38 + ($$0188212$looptemp << 2) >> 2] = ($46 | 0) > ($64 | 0) ? $46 : $64;
   $71 = (Math_imul(Math_imul($52, $51 - $$0188212$looptemp | 0) | 0, $60) | 0) << $53 >> 6;
   HEAP32[$39 + ($$0188212$looptemp << 2) >> 2] = $71 - (($60 << $14 | 0) == 1 ? $46 : 0);
  } while (($$0188212 | 0) != ($2 | 0));
  $77 = HEAP32[$0 + 48 >> 2] | 0;
  $78 = $0 + 52 | 0;
  $$pre222 = HEAP32[$78 >> 2] | 0;
  $$pre224$pre = HEAP16[$48 + ($2 << 1) >> 1] | 0;
  $$0179$us = 1;
  $$0182$us = $77 + -1 | 0;
  while (1) {
   $81 = $$0179$us + $$0182$us >> 1;
   $82 = Math_imul($81, $22) | 0;
   $$0184207$us = 0;
   $$0186206$us = 0;
   $$in = $2;
   $85 = $$pre224$pre;
   while (1) {
    $$in = $$in + -1 | 0;
    $85$looptemp = $85;
    $85 = HEAP16[$48 + ($$in << 1) >> 1] | 0;
    $90 = Math_imul(($85$looptemp << 16 >> 16) - ($85 << 16 >> 16) | 0, $13) | 0;
    $96 = (Math_imul($90, HEAPU8[$$pre222 + ($$in + $82) >> 0] | 0) | 0) << $14;
    $97 = $96 >> 2;
    if (($96 | 0) > 3) {
     $101 = (HEAP32[$39 + ($$in << 2) >> 2] | 0) + $97 | 0;
     $$0181$us = ($101 | 0) > 0 ? $101 : 0;
    } else $$0181$us = $97;
    $105 = (HEAP32[$3 + ($$in << 2) >> 2] | 0) + $$0181$us | 0;
    if ($$0186206$us | 0 ? 1 : ($105 | 0) >= (HEAP32[$38 + ($$in << 2) >> 2] | 0)) {
     $113 = HEAP32[$4 + ($$in << 2) >> 2] | 0;
     $$1187$us = 1;
     $$194$pn$us = ($105 | 0) < ($113 | 0) ? $105 : $113;
    } else {
     $$1187$us = 0;
     $$194$pn$us = ($105 | 0) < ($46 | 0) ? 0 : $46;
    }
    $$0184207$us = $$194$pn$us + $$0184207$us | 0;
    if (($$in | 0) <= ($1 | 0)) break; else $$0186206$us = $$1187$us;
   }
   $116 = ($$0184207$us | 0) > ($$0 | 0);
   $$0182$us = $116 ? $81 + -1 | 0 : $$0182$us;
   $$1180$us = $116 ? $$0179$us : $81 + 1 | 0;
   if (($$1180$us | 0) > ($$0182$us | 0)) {
    $$1180$lcssa = $$1180$us;
    $$pre$phi238241Z2D = $47;
    $128 = $78;
    $131 = $77;
    break;
   } else $$0179$us = $$1180$us;
  }
 } else {
  $$pre237 = $0 + 32 | 0;
  $42 = HEAP32[$0 + 48 >> 2] | 0;
  $44 = $0 + 52 | 0;
  $45 = ($$0 | 0) < 0;
  $$0179 = 1;
  $$0182 = $42 + -1 | 0;
  while (1) {
   $121 = $$0179 + $$0182 >> 1;
   $$0182 = $45 ? $121 + -1 | 0 : $$0182;
   $$1180 = $45 ? $$0179 : $121 + 1 | 0;
   if (($$1180 | 0) > ($$0182 | 0)) {
    $$1180$lcssa = $$1180;
    $$pre$phi238241Z2D = $$pre237;
    $128 = $44;
    $131 = $42;
    break;
   } else $$0179 = $$1180;
  }
 }
 if (!$40) {
  $$0192$lcssa = $1;
  $213 = _interp_bits2pulses($0, $1, $2, $$0192$lcssa, $36, $37, $38, $4, $$0, $9, $24, $6, $$0191, $7, $$0190, $10, $11, $12, $13, $14, $15, $16, $17, $18) | 0;
  STACKTOP = sp;
  return $213 | 0;
 }
 $126 = HEAP32[$$pre$phi238241Z2D >> 2] | 0;
 $127 = HEAP32[$128 >> 2] | 0;
 $129 = Math_imul($$1180$lcssa + -1 | 0, $22) | 0;
 $132 = Math_imul($$1180$lcssa, $22) | 0;
 $133 = ($$1180$lcssa | 0) > 1;
 $$pre231 = HEAP16[$126 + ($1 << 1) >> 1] | 0;
 if (($$1180$lcssa | 0) < ($131 | 0)) {
  $$0192203$us = $1;
  $$2204$us = $1;
  $139 = $$pre231;
  while (1) {
   $$2204$us$looptemp = $$2204$us;
   $$2204$us = $$2204$us + 1 | 0;
   $139$looptemp = $139;
   $139 = HEAP16[$126 + ($$2204$us << 1) >> 1] | 0;
   $141 = Math_imul(($139 << 16 >> 16) - ($139$looptemp << 16 >> 16) | 0, $13) | 0;
   $147 = (Math_imul($141, HEAPU8[$127 + ($$2204$us$looptemp + $129) >> 0] | 0) | 0) << $14;
   $148 = $147 >> 2;
   $154 = (Math_imul($141, HEAPU8[$127 + ($$2204$us$looptemp + $132) >> 0] | 0) | 0) << $14;
   $155 = $154 >> 2;
   if (($147 | 0) > 3) {
    $159 = (HEAP32[$39 + ($$2204$us$looptemp << 2) >> 2] | 0) + $148 | 0;
    $$0178$us = ($159 | 0) > 0 ? $159 : 0;
   } else $$0178$us = $148;
   if (($154 | 0) > 3) {
    $164 = (HEAP32[$39 + ($$2204$us$looptemp << 2) >> 2] | 0) + $155 | 0;
    $$0177$us = ($164 | 0) > 0 ? $164 : 0;
   } else $$0177$us = $155;
   $167 = HEAP32[$3 + ($$2204$us$looptemp << 2) >> 2] | 0;
   $$1$us = $$0178$us + ($133 ? $167 : 0) | 0;
   $spec$select198$us = ($167 | 0) > 0 ? $$2204$us$looptemp : $$0192203$us;
   $171 = $$0177$us - $$1$us + $167 | 0;
   HEAP32[$36 + ($$2204$us$looptemp << 2) >> 2] = $$1$us;
   HEAP32[$37 + ($$2204$us$looptemp << 2) >> 2] = ($171 | 0) > 0 ? $171 : 0;
   if (($$2204$us | 0) == ($2 | 0)) {
    $$0192$lcssa = $spec$select198$us;
    break;
   } else $$0192203$us = $spec$select198$us;
  }
  $213 = _interp_bits2pulses($0, $1, $2, $$0192$lcssa, $36, $37, $38, $4, $$0, $9, $24, $6, $$0191, $7, $$0190, $10, $11, $12, $13, $14, $15, $16, $17, $18) | 0;
  STACKTOP = sp;
  return $213 | 0;
 } else {
  $$0192203 = $1;
  $$2204 = $1;
  $181 = $$pre231;
  while (1) {
   $$2204$looptemp = $$2204;
   $$2204 = $$2204 + 1 | 0;
   $181$looptemp = $181;
   $181 = HEAP16[$126 + ($$2204 << 1) >> 1] | 0;
   $183 = Math_imul(($181 << 16 >> 16) - ($181$looptemp << 16 >> 16) | 0, $13) | 0;
   $189 = (Math_imul($183, HEAPU8[$127 + ($$2204$looptemp + $129) >> 0] | 0) | 0) << $14;
   $190 = $189 >> 2;
   $192 = HEAP32[$4 + ($$2204$looptemp << 2) >> 2] | 0;
   if (($189 | 0) > 3) {
    $196 = (HEAP32[$39 + ($$2204$looptemp << 2) >> 2] | 0) + $190 | 0;
    $$0178 = ($196 | 0) > 0 ? $196 : 0;
   } else $$0178 = $190;
   if (($192 | 0) > 0) {
    $201 = (HEAP32[$39 + ($$2204$looptemp << 2) >> 2] | 0) + $192 | 0;
    $$0177 = ($201 | 0) > 0 ? $201 : 0;
   } else $$0177 = $192;
   $204 = HEAP32[$3 + ($$2204$looptemp << 2) >> 2] | 0;
   $$1 = $$0178 + ($133 ? $204 : 0) | 0;
   $spec$select198 = ($204 | 0) > 0 ? $$2204$looptemp : $$0192203;
   $208 = $$0177 - $$1 + $204 | 0;
   HEAP32[$36 + ($$2204$looptemp << 2) >> 2] = $$1;
   HEAP32[$37 + ($$2204$looptemp << 2) >> 2] = ($208 | 0) > 0 ? $208 : 0;
   if (($$2204 | 0) == ($2 | 0)) {
    $$0192$lcssa = $spec$select198;
    break;
   } else $$0192203 = $spec$select198;
  }
  $213 = _interp_bits2pulses($0, $1, $2, $$0192$lcssa, $36, $37, $38, $4, $$0, $9, $24, $6, $$0191, $7, $$0190, $10, $11, $12, $13, $14, $15, $16, $17, $18) | 0;
  STACKTOP = sp;
  return $213 | 0;
 }
 return 0;
}

function _silk_noise_shape_quantizer($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$021025 = 0, $$021124 = 0, $$021323 = 0, $$0214 = 0, $$0215$in$in = 0, $$0217$in = 0, $$021720 = 0, $$0219 = 0, $$0220 = 0, $$0221 = 0, $$0222 = 0, $$026 = 0, $$1 = 0, $$1212 = 0, $100 = 0, $103 = 0, $104 = 0, $107 = 0, $109 = 0, $112 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $151 = 0, $154 = 0, $158 = 0, $160 = 0, $163 = 0, $165 = 0, $181 = 0, $183 = 0, $188 = 0, $19 = 0, $190 = 0, $191 = 0, $198 = 0, $199 = 0, $20 = 0, $206 = 0, $208 = 0, $21 = 0, $214 = 0, $218 = 0, $221 = 0, $226 = 0, $227 = 0, $232 = 0, $234 = 0, $242 = 0, $255 = 0, $257 = 0, $275 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $89 = 0, $91 = 0, $94 = 0, $95 = 0, $98 = 0, $or$cond = 0, $sext11 = 0, $spec$select = 0, $spec$select18 = 0, dest = 0, label = 0, src = 0, stop = 0;
 $19 = $0 + 4336 | 0;
 $20 = $0 + 4332 | 0;
 $21 = $0 + 3840 | 0;
 if (($16 | 0) <= 0) {
  $275 = $0 + 3840 + ($16 << 2) | 0;
  dest = $21;
  src = $275;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
 $33 = $0 + 4340 | 0;
 $34 = ($1 | 0) == 2;
 $35 = $7 + 2 | 0;
 $36 = $7 + 4 | 0;
 $37 = $7 + 6 | 0;
 $38 = $7 + 8 | 0;
 $40 = ($17 & 1 | 0) == 0;
 $41 = $0 + 4324 | 0;
 $42 = $0 + 4224 | 0;
 $43 = $0 + 4320 | 0;
 $44 = $11 << 16 >> 16;
 $45 = $12 << 16 >> 16;
 $46 = $12 >> 16;
 $47 = ($9 | 0) > 0;
 $or$cond = ($1 | 0) != 2 | $47;
 $49 = $10 << 16 >> 16;
 $50 = $10 >> 16;
 $51 = ($14 | 0) > 2048;
 $52 = $14 >>> 1;
 $53 = $52 + -512 | 0;
 $54 = $13 >>> 6 << 16 >> 16;
 $57 = ($13 >> 21) + 1 >> 1;
 $58 = 512 - $52 | 0;
 $59 = $15 + -80 | 0;
 $60 = $14 << 16 >> 16;
 $61 = $15 + 944 | 0;
 $sext11 = $15 << 16;
 $63 = Math_imul($sext11 >> 16, $60) | 0;
 $65 = Math_imul($61 << 16 >> 16, $60) | 0;
 $66 = $15 + -944 | 0;
 $68 = Math_imul(61865984 - $sext11 >> 16, $60) | 0;
 $$021025 = $5 + (2 - $9 + (HEAP32[$20 >> 2] | 0) << 2) | 0;
 $$021124 = $0 + 1280 + (1 - $9 + (HEAP32[$19 >> 2] | 0) << 2) | 0;
 $$021323 = $0 + 3900 | 0;
 $$026 = 0;
 $70 = HEAP32[$33 >> 2] | 0;
 while (1) {
  HEAP32[$33 >> 2] = (Math_imul($70, 196314165) | 0) + 907633515;
  $72 = _silk_noise_shape_quantizer_short_prediction_c($$021323, $6, $18) | 0;
  if ($34) {
   $73 = HEAP32[$$021025 >> 2] | 0;
   $76 = HEAP16[$7 >> 1] | 0;
   $77 = Math_imul($73 >> 16, $76) | 0;
   $80 = (Math_imul($73 & 65535, $76) | 0) >> 16;
   $82 = HEAP32[$$021025 + -4 >> 2] | 0;
   $85 = HEAP16[$35 >> 1] | 0;
   $86 = Math_imul($82 >> 16, $85) | 0;
   $89 = (Math_imul($82 & 65535, $85) | 0) >> 16;
   $91 = HEAP32[$$021025 + -8 >> 2] | 0;
   $94 = HEAP16[$36 >> 1] | 0;
   $95 = Math_imul($91 >> 16, $94) | 0;
   $98 = (Math_imul($91 & 65535, $94) | 0) >> 16;
   $100 = HEAP32[$$021025 + -12 >> 2] | 0;
   $103 = HEAP16[$37 >> 1] | 0;
   $104 = Math_imul($100 >> 16, $103) | 0;
   $107 = (Math_imul($100 & 65535, $103) | 0) >> 16;
   $109 = HEAP32[$$021025 + -16 >> 2] | 0;
   $112 = HEAP16[$38 >> 1] | 0;
   $$0214 = $77 + 2 + $80 + $86 + $89 + $95 + $98 + $104 + $107 + (Math_imul($109 >> 16, $112) | 0) + ((Math_imul($109 & 65535, $112) | 0) >> 16) | 0;
   $$1 = $$021025 + 4 | 0;
  } else {
   $$0214 = 0;
   $$1 = $$021025;
  }
  if (!$40) {
   label = 6;
   break;
  }
  $128 = _silk_NSQ_noise_shape_feedback_loop_c(HEAP32[$41 >> 2] | 0, $42, $8, $17) | 0;
  $129 = HEAP32[$43 >> 2] | 0;
  $130 = $129 >> 16;
  $132 = $129 & 65535;
  $136 = (Math_imul($130, $44) | 0) + $128 + ((Math_imul($132, $44) | 0) >> 16) | 0;
  $140 = HEAP32[$0 + 1280 + ((HEAP32[$19 >> 2] | 0) + -1 << 2) >> 2] | 0;
  $151 = ((Math_imul($132, $46) | 0) >> 16) + (Math_imul($130, $46) | 0) + (Math_imul($140 >> 16, $45) | 0) + ((Math_imul($140 & 65535, $45) | 0) >> 16) | 0;
  if (!$or$cond) {
   label = 8;
   break;
  }
  $154 = ($72 << 2) - $136 - $151 | 0;
  if ($47) {
   $158 = (HEAP32[$$021124 + -8 >> 2] | 0) + (HEAP32[$$021124 >> 2] | 0) | 0;
   $160 = Math_imul($158 >> 16, $49) | 0;
   $163 = (Math_imul($158 & 65535, $49) | 0) >> 16;
   $165 = HEAP32[$$021124 + -4 >> 2] | 0;
   $$0215$in$in = ($154 << 1) + $$0214 - ((Math_imul($165 >> 16, $50) | 0) + $160 + $163 + ((Math_imul($165 & 65535, $50) | 0) >> 16) << 1) >> 2;
   $$1212 = $$021124 + 4 | 0;
  } else {
   $$0215$in$in = $154 >> 1;
   $$1212 = $$021124;
  }
  $181 = $2 + ($$026 << 2) | 0;
  $183 = (HEAP32[$181 >> 2] | 0) - ($$0215$in$in + 1 >> 1) | 0;
  $spec$select = (HEAP32[$33 >> 2] | 0) < 0 ? 0 - $183 | 0 : $183;
  $188 = ($spec$select | 0) > -31744 ? $spec$select : -31744;
  $190 = ($188 | 0) < 30720 ? $188 : 30720;
  $191 = $190 - $15 | 0;
  do if ($51) {
   if (($191 | 0) > ($53 | 0)) {
    $$0217$in = $191 - $53 | 0;
    label = 18;
    break;
   }
   if (($191 | 0) < ($58 | 0)) {
    $$0217$in = $191 + $53 | 0;
    label = 18;
    break;
   } else {
    $$021720 = $191 >> 31;
    label = 20;
    break;
   }
  } else {
   $$0217$in = $191;
   label = 18;
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if (($$0217$in | 0) > 1023) {
    $198 = $59 + ($$0217$in & -1024) | 0;
    $199 = $198 + 1024 | 0;
    $$0219 = Math_imul($199 << 16 >> 16, $60) | 0;
    $$0220 = Math_imul($198 << 16 >> 16, $60) | 0;
    $$0221 = $199;
    $$0222 = $198;
   } else {
    $$021720 = $$0217$in >> 10;
    label = 20;
   }
  }
  L26 : do if ((label | 0) == 20) {
   label = 0;
   switch ($$021720 | 0) {
   case 0:
    {
     $$0219 = $65;
     $$0220 = $63;
     $$0221 = $61;
     $$0222 = $15;
     break L26;
     break;
    }
   case -1:
    {
     $$0219 = $63;
     $$0220 = $68;
     $$0221 = $15;
     $$0222 = $66;
     break L26;
     break;
    }
   default:
    {
     $206 = ($$021720 << 10 | 80) + $15 | 0;
     $208 = $206 << 16;
     $$0219 = Math_imul(-67108864 - $208 >> 16, $60) | 0;
     $$0220 = Math_imul(0 - $208 >> 16, $60) | 0;
     $$0221 = $206 + 1024 | 0;
     $$0222 = $206;
     break L26;
    }
   }
  } while (0);
  $214 = $190 - $$0222 << 16 >> 16;
  $218 = $190 - $$0221 << 16 >> 16;
  $221 = ((Math_imul($218, $218) | 0) + $$0219 | 0) < ((Math_imul($214, $214) | 0) + $$0220 | 0);
  $spec$select18 = $221 ? $$0221 : $$0222;
  $226 = $3 + $$026 | 0;
  HEAP8[$226 >> 0] = (($spec$select18 >>> 9) + 1 | 0) >>> 1;
  $227 = $spec$select18 << 4;
  $232 = ((HEAP32[$33 >> 2] | 0) < 0 ? 0 - $227 | 0 : $227) + ($$0214 << 1) | 0;
  $234 = $232 + ($72 << 4) | 0;
  $242 = (Math_imul($234 >> 16, $54) | 0) + (Math_imul($234, $57) | 0) + ((Math_imul($234 & 65534, $54) | 0) >> 16) | 0;
  HEAP16[$4 + ($$026 << 1) >> 1] = ($242 | 0) > 8388479 ? 32767 : ($242 | 0) < -8388736 ? -32768 : (($242 >>> 7) + 1 | 0) >>> 1 & 65535;
  $$021323 = $$021323 + 4 | 0;
  HEAP32[$$021323 >> 2] = $234;
  $255 = $234 - (HEAP32[$181 >> 2] << 4) | 0;
  HEAP32[$41 >> 2] = $255;
  $257 = $255 - ($136 << 2) | 0;
  HEAP32[$43 >> 2] = $257;
  HEAP32[$0 + 1280 + (HEAP32[$19 >> 2] << 2) >> 2] = $257 - ($151 << 2);
  HEAP32[$5 + (HEAP32[$20 >> 2] << 2) >> 2] = $232 << 1;
  HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
  $70 = (HEAP32[$33 >> 2] | 0) + (HEAP8[$226 >> 0] | 0) | 0;
  HEAP32[$33 >> 2] = $70;
  $$026 = $$026 + 1 | 0;
  if (($$026 | 0) >= ($16 | 0)) {
   label = 24;
   break;
  } else {
   $$021025 = $$1;
   $$021124 = $$1212;
  }
 }
 if ((label | 0) == 6) _celt_fatal(43762, 43600, 250); else if ((label | 0) == 8) _celt_fatal(43611, 43600, 258); else if ((label | 0) == 24) {
  $275 = $0 + 3840 + ($16 << 2) | 0;
  dest = $21;
  src = $275;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _tonality_get_info($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$0206 = 0.0, $$$0206219 = 0.0, $$0$lcssa = 0.0, $$0195$ = 0.0, $$0195$lcssa = 0.0, $$0195227 = 0.0, $$0196 = 0, $$0197$lcssa = 0, $$0198 = 0, $$0204$lcssa = 0.0, $$0204237 = 0.0, $$0206$lcssa = 0.0, $$0206236 = 0.0, $$0208$lcssa = 0.0, $$0208235 = 0.0, $$0209$lcssa = 0.0, $$0209234 = 0.0, $$0210$ = 0.0, $$0210$$1 = 0.0, $$0210$lcssa = 0.0, $$0214$lcssa = 0.0, $$0215$lcssa = 0.0, $$0228 = 0.0, $$1199238 = 0, $$1201 = 0, $$1205 = 0.0, $$1207 = 0.0, $$1212252 = 0, $$2 = 0, $$2213225 = 0, $$4253 = 0, $$5226 = 0, $$pre$phiZ2D = 0, $$promoted = 0, $10 = 0, $102 = 0, $109 = 0.0, $112 = 0.0, $115 = 0.0, $116 = 0.0, $119 = 0.0, $124 = 0.0, $136 = 0, $138 = 0, $140 = 0, $143 = 0, $149 = 0, $15 = 0, $150 = 0, $154 = 0.0, $156 = 0.0, $158 = 0, $160 = 0, $161 = 0, $166 = 0.0, $170 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $29 = 0.0, $3 = 0, $31 = 0.0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0.0, $52 = 0.0, $58 = 0.0, $6 = 0, $60 = 0.0, $63 = 0.0, $65 = 0, $67 = 0, $7 = 0, $71 = 0.0, $73 = 0.0, $75 = 0.0, $78 = 0.0, $80 = 0.0, $82 = 0.0, $83 = 0.0, $87 = 0.0, $88 = 0, $91 = 0.0, $95 = 0.0, $97 = 0.0, $99 = 0.0, $spec$select = 0, $spec$select216 = 0, $spec$select218 = 0, $spec$select220 = 0, $spec$store$select1 = 0, $spec$store$select1$1 = 0, $spec$store$select1$2 = 0, $spec$store$select3233 = 0, $spec$store$select3239 = 0, dest = 0, src = 0, stop = 0;
 $3 = $0 + 7448 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 7444 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 - $4 | 0;
 $spec$select = ($7 | 0) < 0 ? $7 + 100 | 0 : $7;
 $10 = $0 + 8 | 0;
 if (((HEAP32[$10 >> 2] | 0) / 50 | 0 | 0) < ($2 | 0)) {
  $15 = $4 + 1 | 0;
  $$0196 = ($6 | 0) == ($4 | 0) ? $4 : ($15 | 0) == 100 ? 0 : $15;
 } else $$0196 = $4;
 $spec$select216 = $$0196 + ((($$0196 | 0) == ($6 | 0)) << 31 >> 31) | 0;
 $$2 = ($spec$select216 | 0) < 0 ? 99 : $spec$select216;
 dest = $1;
 src = $0 + 7600 + ($$2 << 6) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $21 = $1 + 4 | 0;
 $22 = +HEAPF32[$21 >> 2];
 $23 = $1 + 32 | 0;
 $24 = $$2 + 1 | 0;
 $spec$store$select1 = ($24 | 0) == 100 ? 0 : $24;
 if (($spec$store$select1 | 0) == (HEAP32[$5 >> 2] | 0)) {
  $$0197$lcssa = 6;
  $$0210$lcssa = $22;
  $$0214$lcssa = 1.0;
  $$0215$lcssa = $22;
 } else {
  $29 = +HEAPF32[$0 + 7600 + ($spec$store$select1 << 6) + 4 >> 2];
  $$0210$ = $22 > $29 ? $22 : $29;
  $31 = $22 + $29;
  $32 = HEAP32[$23 >> 2] | 0;
  $34 = HEAP32[$0 + 7600 + ($spec$store$select1 << 6) + 32 >> 2] | 0;
  $36 = ($32 | 0) > ($34 | 0) ? $32 : $34;
  HEAP32[$23 >> 2] = $36;
  $37 = $spec$store$select1 + 1 | 0;
  $spec$store$select1$1 = ($37 | 0) == 100 ? 0 : $37;
  if (($spec$store$select1$1 | 0) == (HEAP32[$5 >> 2] | 0)) {
   $$0197$lcssa = 5;
   $$0210$lcssa = $$0210$;
   $$0214$lcssa = 2.0;
   $$0215$lcssa = $31;
  } else {
   $154 = +HEAPF32[$0 + 7600 + ($spec$store$select1$1 << 6) + 4 >> 2];
   $$0210$$1 = $$0210$ > $154 ? $$0210$ : $154;
   $156 = $31 + $154;
   $158 = HEAP32[$0 + 7600 + ($spec$store$select1$1 << 6) + 32 >> 2] | 0;
   $160 = ($36 | 0) > ($158 | 0) ? $36 : $158;
   HEAP32[$23 >> 2] = $160;
   $161 = $spec$store$select1$1 + 1 | 0;
   $spec$store$select1$2 = ($161 | 0) == 100 ? 0 : $161;
   if (($spec$store$select1$2 | 0) == (HEAP32[$5 >> 2] | 0)) {
    $$0197$lcssa = 4;
    $$0210$lcssa = $$0210$$1;
    $$0214$lcssa = 3.0;
    $$0215$lcssa = $156;
   } else {
    $166 = +HEAPF32[$0 + 7600 + ($spec$store$select1$2 << 6) + 4 >> 2];
    $170 = HEAP32[$0 + 7600 + ($spec$store$select1$2 << 6) + 32 >> 2] | 0;
    HEAP32[$23 >> 2] = ($160 | 0) > ($170 | 0) ? $160 : $170;
    $$0197$lcssa = 3;
    $$0210$lcssa = $$0210$$1 > $166 ? $$0210$$1 : $166;
    $$0214$lcssa = 4.0;
    $$0215$lcssa = $156 + $166;
   }
  }
 }
 $$1212252 = 0;
 $$4253 = $$2;
 do {
  $$4253 = ($$4253 | 0) < 1 ? 99 : $$4253 + -1 | 0;
  if (($$4253 | 0) == (HEAP32[$5 >> 2] | 0)) break;
  $45 = HEAP32[$23 >> 2] | 0;
  $47 = HEAP32[$0 + 7600 + ($$4253 << 6) + 32 >> 2] | 0;
  HEAP32[$23 >> 2] = ($45 | 0) > ($47 | 0) ? $45 : $47;
  $$1212252 = $$1212252 + 1 | 0;
 } while ($$1212252 >>> 0 < $$0197$lcssa >>> 0);
 $51 = $$0215$lcssa / $$0214$lcssa;
 $52 = $$0210$lcssa + -.20000000298023224;
 HEAPF32[$21 >> 2] = $51 > $52 ? $51 : $52;
 if (($spec$select | 0) > 15) {
  $spec$select218 = (($$2 | 0) > 94 ? -95 : 5) + $$2 | 0;
  $$0198 = (($$2 | 0) > 98 ? -99 : 1) + $$2 | 0;
  $$1201 = $spec$select218;
  $$pre$phiZ2D = $spec$select218 + 1 | 0;
 } else {
  $$0198 = $$2;
  $$1201 = $$2;
  $$pre$phiZ2D = $24;
 }
 $58 = +HEAPF32[$0 + 7600 + ($$0198 << 6) + 36 >> 2];
 $60 = $58 < .10000000149011612 ? .10000000149011612 : $58;
 $63 = +HEAPF32[$0 + 7600 + ($$1201 << 6) + 20 >> 2] * $60;
 $spec$store$select3233 = ($$pre$phiZ2D | 0) == 100 ? 0 : $$pre$phiZ2D;
 $65 = HEAP32[$5 >> 2] | 0;
 L16 : do if (($spec$store$select3233 | 0) == ($65 | 0)) {
  $$0204$lcssa = 0.0;
  $$0206$lcssa = 1.0;
  $$0208$lcssa = $60;
  $$0209$lcssa = $63;
 } else {
  $$0204237 = 0.0;
  $$0206236 = 1.0;
  $$0208235 = $60;
  $$0209234 = $63;
  $$1199238 = $$0198;
  $spec$store$select3239 = $spec$store$select3233;
  while (1) {
   $67 = $$1199238 + 1 | 0;
   $$1199238 = ($67 | 0) == 100 ? 0 : $67;
   if (($$1199238 | 0) == ($65 | 0)) {
    $$0204$lcssa = $$0204237;
    $$0206$lcssa = $$0206236;
    $$0208$lcssa = $$0208235;
    $$0209$lcssa = $$0209234;
    break L16;
   }
   $71 = +HEAPF32[$0 + 7600 + ($$1199238 << 6) + 36 >> 2];
   $73 = ($58 - $71) * 10.0;
   $75 = ($$0209234 - $73) / $$0208235;
   $$$0206 = $75 < $$0206236 ? $75 : $$0206236;
   $78 = ($$0209234 + $73) / $$0208235;
   $80 = $78 > $$0204237 ? $78 : $$0204237;
   $82 = $71 < .10000000149011612 ? .10000000149011612 : $71;
   $83 = $$0208235 + $82;
   $87 = $$0209234 + +HEAPF32[$0 + 7600 + ($spec$store$select3239 << 6) + 20 >> 2] * $82;
   $88 = $spec$store$select3239 + 1 | 0;
   $spec$store$select3239 = ($88 | 0) == 100 ? 0 : $88;
   if (($spec$store$select3239 | 0) == ($65 | 0)) {
    $$0204$lcssa = $80;
    $$0206$lcssa = $$$0206;
    $$0208$lcssa = $83;
    $$0209$lcssa = $87;
    break;
   } else {
    $$0204237 = $80;
    $$0206236 = $$$0206;
    $$0208235 = $83;
    $$0209234 = $87;
   }
  }
 } while (0);
 $91 = $$0209$lcssa / $$0208$lcssa;
 HEAPF32[$1 + 20 >> 2] = $91;
 $$$0206219 = $91 < $$0206$lcssa ? $91 : $$0206$lcssa;
 $95 = $91 > $$0204$lcssa ? $91 : $$0204$lcssa;
 $97 = $$$0206219 > 0.0 ? $$$0206219 : 0.0;
 $99 = $95 < 1.0 ? $95 : 1.0;
 if (($spec$select | 0) < 10) {
  $102 = HEAP32[$0 + 7436 >> 2] | 0;
  if (($102 | 0) > 1) {
   $spec$select220 = ($102 | 0) < 16 ? $102 + -1 | 0 : 15;
   $$0195227 = $97;
   $$0228 = $99;
   $$2213225 = 0;
   $$5226 = $$2;
   while (1) {
    $$5226 = ($$5226 | 0) < 1 ? 99 : $$5226 + -1 | 0;
    $109 = +HEAPF32[$0 + 7600 + ($$5226 << 6) + 20 >> 2];
    $$0195$ = $$0195227 < $109 ? $$0195227 : $109;
    $112 = $$0228 > $109 ? $$0228 : $109;
    $$2213225 = $$2213225 + 1 | 0;
    if (($$2213225 | 0) >= ($spec$select220 | 0)) {
     $$0$lcssa = $112;
     $$0195$lcssa = $$0195$;
     break;
    } else {
     $$0195227 = $$0195$;
     $$0228 = $112;
    }
   }
  } else {
   $$0$lcssa = $99;
   $$0195$lcssa = $97;
  }
  $115 = $58 * .10000000149011612;
  $116 = $$0195$lcssa - $115;
  $119 = $115 + $$0$lcssa;
  $124 = 1.0 - +($spec$select | 0) * .10000000149011612;
  $$1205 = $99 + $124 * (($119 > 1.0 ? 1.0 : $119) - $99);
  $$1207 = $97 + $124 * (($116 < 0.0 ? 0.0 : $116) - $97);
 } else {
  $$1205 = $99;
  $$1207 = $97;
 }
 HEAPF32[$1 + 24 >> 2] = $$1207;
 HEAPF32[$1 + 28 >> 2] = $$1205;
 $136 = $0 + 7452 | 0;
 $138 = (HEAP32[$136 >> 2] | 0) + (($2 | 0) / ((HEAP32[$10 >> 2] | 0) / 400 | 0 | 0) | 0) | 0;
 HEAP32[$136 >> 2] = $138;
 $$promoted = HEAP32[$3 >> 2] | 0;
 if (($138 | 0) > 7) {
  $140 = ~$138;
  $143 = $138 + (($140 | 0) > -16 ? $140 : -16) + 8 | 0;
  $149 = $$promoted + ($143 >>> 3) + 1 | 0;
  HEAP32[$136 >> 2] = $138 + -8 - ($143 & -8);
  HEAP32[$3 >> 2] = $149;
  $150 = $149;
 } else $150 = $$promoted;
 if (($150 | 0) <= 99) return;
 HEAP32[$3 >> 2] = $150 + -100;
 return;
}

function _silk_noise_shape_analysis_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0162 = 0.0, $$0164 = 0.0, $$0165193 = 0, $$0166186 = 0, $$0167 = 0.0, $$0168192 = 0.0, $$0169$lcssa = 0.0, $$0169191 = 0.0, $$0194 = 0, $$1163 = 0.0, $$1163171 = 0.0, $$1163172 = 0.0, $$1187 = 0, $$2182 = 0, $$3175 = 0, $$5174 = 0, $$phi$trans$insert = 0, $$pre$phi204Z2D = 0.0, $$pre$phiZ2D = 0, $$pre199 = 0, $$pre201 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $119 = 0.0, $124 = 0.0, $126 = 0, $128 = 0.0, $129 = 0, $138 = 0, $14 = 0.0, $140 = 0, $144 = 0.0, $146 = 0, $15 = 0, $151 = 0, $160 = 0, $162 = 0.0, $164 = 0.0, $167 = 0, $169 = 0, $177 = 0.0, $185 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $199 = 0.0, $200 = 0, $201 = 0, $203 = 0, $206 = 0, $209 = 0, $212 = 0, $213 = 0, $22 = 0.0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $235 = 0.0, $237 = 0.0, $240 = 0.0, $245 = 0, $26 = 0.0, $27 = 0, $35 = 0.0, $4 = 0, $43 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0.0, $75 = 0.0, $82 = 0, $85 = 0.0, $88 = 0.0, $89 = 0, $95 = 0.0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0.0, sp = 0, $$0168192$looptemp = 0.0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 112 | 0;
 $6 = sp;
 $10 = $3 + (0 - (HEAP32[$0 + 4600 >> 2] | 0) << 2) | 0;
 $11 = $0 + 4716 | 0;
 $14 = +(HEAP32[$11 >> 2] | 0) * .0078125;
 $15 = $0 + 4696 | 0;
 $22 = +((HEAP32[$0 + 4700 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) * .5 * .000030517578125;
 $23 = $1 + 696 | 0;
 HEAPF32[$23 >> 2] = $22;
 $26 = +_silk_sigmoid(($14 + -20.0) * .25);
 $27 = $1 + 700 | 0;
 HEAPF32[$27 >> 2] = $26;
 if (!(HEAP32[$0 + 4676 >> 2] | 0)) {
  $35 = 1.0 - +(HEAP32[$0 + 4532 >> 2] | 0) * .00390625;
  $$0162 = $14 - $35 * ($26 * 2.0 * ($22 * .5 + .5) * $35);
 } else $$0162 = $14;
 $43 = $0 + 4765 | 0;
 do if ((HEAP8[$43 >> 0] | 0) == 2) {
  $$1163171 = $$0162 + +HEAPF32[$0 + 10060 >> 2] * 2.0;
  HEAP8[$0 + 4766 >> 0] = 0;
  $$phi$trans$insert = $0 + 4580 | 0;
  $$1163172 = $$1163171;
  $$pre$phiZ2D = $$phi$trans$insert;
  $$pre199 = HEAP32[$$phi$trans$insert >> 2] | 0;
 } else {
  $$1163 = $$0162 + (1.0 - $22) * (+(HEAP32[$11 >> 2] | 0) * -.4000000059604645 * .0078125 + 6.0);
  $59 = HEAP32[$0 + 4576 >> 2] << 1;
  $60 = $0 + 4580 | 0;
  $61 = HEAP32[$60 >> 2] | 0;
  $63 = ($61 << 16 >> 16) * 5 | 0;
  $64 = ($63 | 0) / 2 | 0;
  if (($63 | 0) > 1) {
   $66 = +($59 | 0);
   $$0165193 = $2;
   $$0168192 = 0.0;
   $$0169191 = 0.0;
   $$0194 = 0;
   while (1) {
    $$0168192$looptemp = $$0168192;
    $$0168192 = +_silk_log2($66 + +_silk_energy_FLP($$0165193, $59));
    $75 = $$0169191 + +Math_abs(+($$0168192 - $$0168192$looptemp));
    $spec$select = ($$0194 | 0) == 0 ? $$0169191 : $75;
    $$0194 = $$0194 + 1 | 0;
    if (($$0194 | 0) == ($64 | 0)) {
     $$0169$lcssa = $spec$select;
     break;
    } else {
     $$0165193 = $$0165193 + ($59 << 2) | 0;
     $$0169191 = $spec$select;
    }
   }
  } else $$0169$lcssa = 0.0;
  $82 = $0 + 4766 | 0;
  if ($$0169$lcssa > +($64 + -1 | 0) * .6000000238418579) {
   HEAP8[$82 >> 0] = 0;
   $$1163172 = $$1163;
   $$pre$phiZ2D = $60;
   $$pre199 = $61;
   break;
  } else {
   HEAP8[$82 >> 0] = 1;
   $$1163172 = $$1163;
   $$pre$phiZ2D = $60;
   $$pre199 = $61;
   break;
  }
 } while (0);
 $85 = +HEAPF32[$1 + 704 >> 2] * 1.0000000474974513e-03;
 $88 = .9399999976158142 / ($85 * $85 + 1.0);
 $89 = $0 + 4672 | 0;
 $95 = +(HEAP32[$89 >> 2] | 0) * .0000152587890625 + +HEAPF32[$27 >> 2] * .009999999776482582;
 if (($$pre199 | 0) > 0) {
  $97 = $0 + 4576 | 0;
  $98 = $0 + 4604 | 0;
  $99 = $0 + 4588 | 0;
  $100 = $0 + 4636 | 0;
  $$0166186 = $10;
  $$1187 = 0;
  do {
   $101 = HEAP32[$97 >> 2] | 0;
   $102 = $101 * 3 | 0;
   $105 = ((HEAP32[$98 >> 2] | 0) - $102 | 0) / 2 | 0;
   _silk_apply_sine_window_FLP($4, $$0166186, 1, $105);
   _memcpy($4 + ($105 << 2) | 0, $$0166186 + ($105 << 2) | 0, $101 * 12 | 0) | 0;
   $109 = $105 + $102 | 0;
   _silk_apply_sine_window_FLP($4 + ($109 << 2) | 0, $$0166186 + ($109 << 2) | 0, 2, $105);
   $$0166186 = $$0166186 + (HEAP32[$99 >> 2] << 2) | 0;
   $116 = HEAP32[$98 >> 2] | 0;
   $117 = HEAP32[$100 >> 2] | 0;
   if ((HEAP32[$89 >> 2] | 0) > 0) _silk_warped_autocorrelation_FLP($5, $4, $95, $116, $117); else _silk_autocorrelation_FLP($5, $4, $116, $117 + 1 | 0);
   $119 = +HEAPF32[$5 >> 2];
   HEAPF32[$5 >> 2] = $119 + ($119 * 2.9999999242136255e-05 + 1.0);
   $124 = +_silk_schur_FLP($6, $5, HEAP32[$100 >> 2] | 0);
   $126 = $1 + 244 + ($$1187 * 24 << 2) | 0;
   _silk_k2a_FLP($126, $6, HEAP32[$100 >> 2] | 0);
   $128 = +Math_sqrt(+$124);
   $129 = $1 + ($$1187 << 2) | 0;
   HEAPF32[$129 >> 2] = $128;
   if ((HEAP32[$89 >> 2] | 0) > 0) HEAPF32[$129 >> 2] = $128 * +_warped_gain($126, $95, HEAP32[$100 >> 2] | 0);
   _silk_bwexpander_FLP($126, HEAP32[$100 >> 2] | 0, $88);
   $138 = HEAP32[$100 >> 2] | 0;
   if ((HEAP32[$89 >> 2] | 0) > 0) _warped_true2monic_coefs($126, $95, $138); else _limit_coefs($126, $138);
   $$1187 = $$1187 + 1 | 0;
   $140 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  } while (($$1187 | 0) < ($140 | 0));
  $144 = +_llvm_exp2_f64(+($$1163172 * -.1599999964237213));
  if (($140 | 0) > 0) {
   $$2182 = 0;
   do {
    $146 = $1 + ($$2182 << 2) | 0;
    HEAPF32[$146 >> 2] = +HEAPF32[$146 >> 2] * $144 + 1.2483305931091309;
    $$2182 = $$2182 + 1 | 0;
    $151 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   } while (($$2182 | 0) < ($151 | 0));
   $167 = $151;
  } else $167 = $140;
 } else $167 = $$pre199;
 $160 = $0 + 4532 | 0;
 $162 = +(HEAP32[$160 >> 2] | 0);
 $164 = $162 * .00390625 * (((+(HEAP32[$15 >> 2] | 0) * .000030517578125 + -1.0) * .5 + 1.0) * 4.0);
 L36 : do if ((HEAP8[$43 >> 0] | 0) == 2) {
  if (($167 | 0) > 0) {
   $169 = $0 + 4576 | 0;
   $$3175 = 0;
   do {
    $177 = .20000000298023224 / +(HEAP32[$169 >> 2] | 0) + 3.0 / +(HEAP32[$1 + 228 + ($$3175 << 2) >> 2] | 0);
    HEAPF32[$1 + 628 + ($$3175 << 2) >> 2] = $177 + -1.0;
    HEAPF32[$1 + 644 + ($$3175 << 2) >> 2] = 1.0 - $177 - $164 * $177;
    $$3175 = $$3175 + 1 | 0;
    $185 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   } while (($$3175 | 0) < ($185 | 0));
   $$pre$phi204Z2D = +(HEAP32[$160 >> 2] | 0);
   $245 = $185;
  } else {
   $$pre$phi204Z2D = $162;
   $245 = $167;
  }
  $$0167 = -.25 - $$pre$phi204Z2D * .26249998807907104 * .00390625;
  $228 = $245;
 } else {
  $193 = 1.2999999523162842 / +(HEAP32[$0 + 4576 >> 2] | 0);
  $194 = $193 + -1.0;
  $195 = $1 + 628 | 0;
  HEAPF32[$195 >> 2] = $194;
  $199 = 1.0 - $193 - $164 * $193 * .6000000238418579;
  $200 = $1 + 644 | 0;
  HEAPF32[$200 >> 2] = $199;
  $201 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $203 = (HEAPF32[tempDoublePtr >> 2] = $194, HEAP32[tempDoublePtr >> 2] | 0);
  if (($201 | 0) > 1) {
   HEAPF32[$1 + 632 >> 2] = $194;
   HEAPF32[$1 + 648 >> 2] = $199;
   $206 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   if (($206 | 0) > 2) {
    $$pre201 = $203;
    $209 = 2;
    while (1) {
     HEAP32[$1 + 628 + ($209 << 2) >> 2] = $$pre201;
     HEAP32[$1 + 644 + ($209 << 2) >> 2] = HEAP32[$200 >> 2];
     $212 = $209 + 1 | 0;
     $213 = HEAP32[$$pre$phiZ2D >> 2] | 0;
     if (($212 | 0) >= ($213 | 0)) {
      $$0167 = -.25;
      $228 = $213;
      break L36;
     }
     $$pre201 = HEAP32[$195 >> 2] | 0;
     $209 = $212;
    }
   } else {
    $$0167 = -.25;
    $228 = $206;
   }
  } else {
   $$0167 = -.25;
   $228 = $201;
  }
 } while (0);
 if ((HEAP8[$43 >> 0] | 0) == 2) $$0164 = +Math_sqrt(+(+HEAPF32[$0 + 10060 >> 2])) * ((1.0 - (1.0 - +HEAPF32[$27 >> 2]) * +HEAPF32[$23 >> 2]) * .20000000298023224 + .30000001192092896); else $$0164 = 0.0;
 if (($228 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $230 = $0 + 7172 | 0;
 $231 = $0 + 7176 | 0;
 $$5174 = 0;
 do {
  $232 = +HEAPF32[$230 >> 2];
  $235 = $232 + ($$0164 - $232) * .4000000059604645;
  HEAPF32[$230 >> 2] = $235;
  HEAPF32[$1 + 676 + ($$5174 << 2) >> 2] = $235;
  $237 = +HEAPF32[$231 >> 2];
  $240 = $237 + ($$0167 - $237) * .4000000059604645;
  HEAPF32[$231 >> 2] = $240;
  HEAPF32[$1 + 660 + ($$5174 << 2) >> 2] = $240;
  $$5174 = $$5174 + 1 | 0;
 } while (($$5174 | 0) < (HEAP32[$$pre$phiZ2D >> 2] | 0));
 STACKTOP = sp;
 return;
}

function _silk_nsq_scale_states($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0122 = 0, $$0139 = 0, $$1136 = 0, $$2134 = 0, $$3133 = 0, $$5131 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $199 = 0, $200 = 0, $201 = 0, $211 = 0, $212 = 0, $213 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $235 = 0, $236 = 0, $237 = 0, $247 = 0, $248 = 0, $249 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $271 = 0, $272 = 0, $273 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $295 = 0, $296 = 0, $297 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $320 = 0, $321 = 0, $331 = 0, $332 = 0, $333 = 0, $343 = 0, $344 = 0, $345 = 0, $42 = 0, $47 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $63 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 $12 = HEAP32[$9 + ($6 << 2) >> 2] | 0;
 $13 = $8 + ($6 << 2) | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $16 = _silk_INVERSE32_varQ_235(($14 | 0) > 1 ? $14 : 1) | 0;
 $18 = ($16 >> 4) + 1 | 0;
 $19 = $0 + 4588 | 0;
 if ((HEAP32[$19 >> 2] | 0) > 0) {
  $23 = $18 >>> 1 << 16 >> 16;
  $26 = ($18 >> 16) + 1 >> 1;
  $$0139 = 0;
  do {
   $29 = HEAP16[$2 + ($$0139 << 1) >> 1] | 0;
   HEAP32[$3 + ($$0139 << 2) >> 2] = (Math_imul($29 >> 16, $23) | 0) + (Math_imul($26, $29) | 0) + ((Math_imul($29 & 65535, $23) | 0) >> 16);
   $$0139 = $$0139 + 1 | 0;
  } while (($$0139 | 0) < (HEAP32[$19 >> 2] | 0));
 }
 $42 = $1 + 4348 | 0;
 if (HEAP32[$42 >> 2] | 0) {
  if (!$6) {
   $47 = $7 << 16 >> 16;
   $$0122 = ((Math_imul($16 & 65535, $47) | 0) >> 16) + (Math_imul($16 >> 16, $47) | 0) << 2;
  } else $$0122 = $16;
  $54 = $1 + 4332 | 0;
  $55 = HEAP32[$54 >> 2] | 0;
  $57 = -2 - $12 + $55 | 0;
  if (($57 | 0) < ($55 | 0)) {
   $59 = $$0122 >> 16;
   $60 = $$0122 & 65535;
   $$1136 = $57;
   do {
    $63 = HEAP16[$4 + ($$1136 << 1) >> 1] | 0;
    HEAP32[$5 + ($$1136 << 2) >> 2] = ((Math_imul($60, $63) | 0) >> 16) + (Math_imul($59, $63) | 0);
    $$1136 = $$1136 + 1 | 0;
   } while (($$1136 | 0) < (HEAP32[$54 >> 2] | 0));
  }
 }
 $72 = HEAP32[$13 >> 2] | 0;
 $73 = $1 + 4344 | 0;
 $74 = HEAP32[$73 >> 2] | 0;
 if (($72 | 0) == ($74 | 0)) return;
 $76 = _silk_DIV32_varQ_236($74, $72) | 0;
 $77 = $1 + 4336 | 0;
 $79 = HEAP32[$0 + 4592 >> 2] | 0;
 if (($79 | 0) > 0) {
  $83 = $76 >> 16;
  $84 = $76 & 65535;
  $$2134 = (HEAP32[$77 >> 2] | 0) - $79 | 0;
  do {
   $85 = $1 + 1280 + ($$2134 << 2) | 0;
   $86 = HEAP32[$85 >> 2] | 0;
   $87 = $86 << 16 >> 16;
   HEAP32[$85 >> 2] = ((Math_imul($87, $84) | 0) >> 16) + (Math_imul($87, $83) | 0) + (Math_imul(($86 >> 15) + 1 >> 1, $76) | 0);
   $$2134 = $$2134 + 1 | 0;
  } while (($$2134 | 0) < (HEAP32[$77 >> 2] | 0));
 }
 if (($10 | 0) == 2) if (!(HEAP32[$42 >> 2] | 0)) {
  $103 = $1 + 4332 | 0;
  $104 = HEAP32[$103 >> 2] | 0;
  $106 = -2 - $12 + $104 | 0;
  if (($106 | 0) < ($104 | 0)) {
   $108 = $76 >> 16;
   $109 = $76 & 65535;
   $$3133 = $106;
   do {
    $110 = $5 + ($$3133 << 2) | 0;
    $111 = HEAP32[$110 >> 2] | 0;
    $112 = $111 << 16 >> 16;
    HEAP32[$110 >> 2] = ((Math_imul($112, $109) | 0) >> 16) + (Math_imul($112, $108) | 0) + (Math_imul(($111 >> 15) + 1 >> 1, $76) | 0);
    $$3133 = $$3133 + 1 | 0;
   } while (($$3133 | 0) < (HEAP32[$103 >> 2] | 0));
  }
 }
 $125 = $76 >> 16;
 $126 = $1 + 4320 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $127 << 16 >> 16;
 $130 = $76 & 65535;
 HEAP32[$126 >> 2] = ((Math_imul($128, $130) | 0) >> 16) + (Math_imul($128, $125) | 0) + (Math_imul(($127 >> 15) + 1 >> 1, $76) | 0);
 $139 = $1 + 4324 | 0;
 $140 = HEAP32[$139 >> 2] | 0;
 $141 = $140 << 16 >> 16;
 HEAP32[$139 >> 2] = ((Math_imul($141, $130) | 0) >> 16) + (Math_imul($141, $125) | 0) + (Math_imul(($140 >> 15) + 1 >> 1, $76) | 0);
 $151 = $1 + 3840 | 0;
 $152 = HEAP32[$151 >> 2] | 0;
 $153 = $152 << 16 >> 16;
 HEAP32[$151 >> 2] = ((Math_imul($153, $130) | 0) >> 16) + (Math_imul($153, $125) | 0) + (Math_imul(($152 >> 15) + 1 >> 1, $76) | 0);
 $163 = $1 + 3844 | 0;
 $164 = HEAP32[$163 >> 2] | 0;
 $165 = $164 << 16 >> 16;
 HEAP32[$163 >> 2] = ((Math_imul($165, $130) | 0) >> 16) + (Math_imul($165, $125) | 0) + (Math_imul(($164 >> 15) + 1 >> 1, $76) | 0);
 $175 = $1 + 3848 | 0;
 $176 = HEAP32[$175 >> 2] | 0;
 $177 = $176 << 16 >> 16;
 HEAP32[$175 >> 2] = ((Math_imul($177, $130) | 0) >> 16) + (Math_imul($177, $125) | 0) + (Math_imul(($176 >> 15) + 1 >> 1, $76) | 0);
 $187 = $1 + 3852 | 0;
 $188 = HEAP32[$187 >> 2] | 0;
 $189 = $188 << 16 >> 16;
 HEAP32[$187 >> 2] = ((Math_imul($189, $130) | 0) >> 16) + (Math_imul($189, $125) | 0) + (Math_imul(($188 >> 15) + 1 >> 1, $76) | 0);
 $199 = $1 + 3856 | 0;
 $200 = HEAP32[$199 >> 2] | 0;
 $201 = $200 << 16 >> 16;
 HEAP32[$199 >> 2] = ((Math_imul($201, $130) | 0) >> 16) + (Math_imul($201, $125) | 0) + (Math_imul(($200 >> 15) + 1 >> 1, $76) | 0);
 $211 = $1 + 3860 | 0;
 $212 = HEAP32[$211 >> 2] | 0;
 $213 = $212 << 16 >> 16;
 HEAP32[$211 >> 2] = ((Math_imul($213, $130) | 0) >> 16) + (Math_imul($213, $125) | 0) + (Math_imul(($212 >> 15) + 1 >> 1, $76) | 0);
 $223 = $1 + 3864 | 0;
 $224 = HEAP32[$223 >> 2] | 0;
 $225 = $224 << 16 >> 16;
 HEAP32[$223 >> 2] = ((Math_imul($225, $130) | 0) >> 16) + (Math_imul($225, $125) | 0) + (Math_imul(($224 >> 15) + 1 >> 1, $76) | 0);
 $235 = $1 + 3868 | 0;
 $236 = HEAP32[$235 >> 2] | 0;
 $237 = $236 << 16 >> 16;
 HEAP32[$235 >> 2] = ((Math_imul($237, $130) | 0) >> 16) + (Math_imul($237, $125) | 0) + (Math_imul(($236 >> 15) + 1 >> 1, $76) | 0);
 $247 = $1 + 3872 | 0;
 $248 = HEAP32[$247 >> 2] | 0;
 $249 = $248 << 16 >> 16;
 HEAP32[$247 >> 2] = ((Math_imul($249, $130) | 0) >> 16) + (Math_imul($249, $125) | 0) + (Math_imul(($248 >> 15) + 1 >> 1, $76) | 0);
 $259 = $1 + 3876 | 0;
 $260 = HEAP32[$259 >> 2] | 0;
 $261 = $260 << 16 >> 16;
 HEAP32[$259 >> 2] = ((Math_imul($261, $130) | 0) >> 16) + (Math_imul($261, $125) | 0) + (Math_imul(($260 >> 15) + 1 >> 1, $76) | 0);
 $271 = $1 + 3880 | 0;
 $272 = HEAP32[$271 >> 2] | 0;
 $273 = $272 << 16 >> 16;
 HEAP32[$271 >> 2] = ((Math_imul($273, $130) | 0) >> 16) + (Math_imul($273, $125) | 0) + (Math_imul(($272 >> 15) + 1 >> 1, $76) | 0);
 $283 = $1 + 3884 | 0;
 $284 = HEAP32[$283 >> 2] | 0;
 $285 = $284 << 16 >> 16;
 HEAP32[$283 >> 2] = ((Math_imul($285, $130) | 0) >> 16) + (Math_imul($285, $125) | 0) + (Math_imul(($284 >> 15) + 1 >> 1, $76) | 0);
 $295 = $1 + 3888 | 0;
 $296 = HEAP32[$295 >> 2] | 0;
 $297 = $296 << 16 >> 16;
 HEAP32[$295 >> 2] = ((Math_imul($297, $130) | 0) >> 16) + (Math_imul($297, $125) | 0) + (Math_imul(($296 >> 15) + 1 >> 1, $76) | 0);
 $307 = $1 + 3892 | 0;
 $308 = HEAP32[$307 >> 2] | 0;
 $309 = $308 << 16 >> 16;
 HEAP32[$307 >> 2] = ((Math_imul($309, $130) | 0) >> 16) + (Math_imul($309, $125) | 0) + (Math_imul(($308 >> 15) + 1 >> 1, $76) | 0);
 $319 = $1 + 3896 | 0;
 $320 = HEAP32[$319 >> 2] | 0;
 $321 = $320 << 16 >> 16;
 HEAP32[$319 >> 2] = ((Math_imul($321, $130) | 0) >> 16) + (Math_imul($321, $125) | 0) + (Math_imul(($320 >> 15) + 1 >> 1, $76) | 0);
 $331 = $1 + 3900 | 0;
 $332 = HEAP32[$331 >> 2] | 0;
 $333 = $332 << 16 >> 16;
 HEAP32[$331 >> 2] = ((Math_imul($333, $130) | 0) >> 16) + (Math_imul($333, $125) | 0) + (Math_imul(($332 >> 15) + 1 >> 1, $76) | 0);
 $$5131 = 0;
 do {
  $343 = $1 + 4224 + ($$5131 << 2) | 0;
  $344 = HEAP32[$343 >> 2] | 0;
  $345 = $344 << 16 >> 16;
  HEAP32[$343 >> 2] = ((Math_imul($345, $130) | 0) >> 16) + (Math_imul($345, $125) | 0) + (Math_imul(($344 >> 15) + 1 >> 1, $76) | 0);
  $$5131 = $$5131 + 1 | 0;
 } while (($$5131 | 0) != 24);
 HEAP32[$73 >> 2] = HEAP32[$13 >> 2];
 return;
}

function _silk_decode_pulses($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$05258$us = 0, $$05258$us$1 = 0, $$05258$us$10 = 0, $$05258$us$11 = 0, $$05258$us$12 = 0, $$05258$us$13 = 0, $$05258$us$14 = 0, $$05258$us$15 = 0, $$05258$us$2 = 0, $$05258$us$3 = 0, $$05258$us$4 = 0, $$05258$us$5 = 0, $$05258$us$6 = 0, $$05258$us$7 = 0, $$05258$us$8 = 0, $$05258$us$9 = 0, $$05480 = 0, $$05557$us = 0, $$05557$us$1 = 0, $$05557$us$10 = 0, $$05557$us$11 = 0, $$05557$us$12 = 0, $$05557$us$13 = 0, $$05557$us$14 = 0, $$05557$us$15 = 0, $$05557$us$2 = 0, $$05557$us$3 = 0, $$05557$us$4 = 0, $$05557$us$5 = 0, $$05557$us$6 = 0, $$05557$us$7 = 0, $$05557$us$8 = 0, $$05557$us$9 = 0, $$071 = 0, $$164 = 0, $$260 = 0, $103 = 0, $111 = 0, $119 = 0, $127 = 0, $135 = 0, $143 = 0, $15 = 0, $151 = 0, $159 = 0, $16 = 0, $168 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $46 = 0, $5 = 0, $55 = 0, $6 = 0, $63 = 0, $71 = 0, $79 = 0, $87 = 0, $9 = 0, $95 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $5 = sp + 80 | 0;
 $6 = sp;
 $9 = _ec_dec_icdf($0, 25488 + (($2 >> 1) * 9 | 0) | 0, 8) | 0;
 if (($4 & -16 | 0) < ($4 | 0)) if (($4 | 0) == 120) $$05480 = 8; else _celt_fatal(43454, 42471, 59); else if (($4 | 0) > 15) $$05480 = $4 >> 4; else {
  _silk_decode_signs($0, $1, $4, $2, $3, $5);
  STACKTOP = sp;
  return;
 }
 $15 = 25120 + ($9 * 18 | 0) | 0;
 $$071 = 0;
 do {
  $16 = $6 + ($$071 << 2) | 0;
  HEAP32[$16 >> 2] = 0;
  $17 = _ec_dec_icdf($0, $15, 8) | 0;
  $18 = $5 + ($$071 << 2) | 0;
  HEAP32[$18 >> 2] = $17;
  if (($17 | 0) == 17) {
   $21 = 0;
   do {
    $21 = $21 + 1 | 0;
    HEAP32[$16 >> 2] = $21;
    $25 = _ec_dec_icdf($0, 25282 + (($21 | 0) == 10 & 1) | 0, 8) | 0;
    HEAP32[$18 >> 2] = $25;
   } while (($25 | 0) == 17);
  }
  $$071 = $$071 + 1 | 0;
 } while (($$071 | 0) != ($$05480 | 0));
 $$164 = 0;
 do {
  $29 = HEAP32[$5 + ($$164 << 2) >> 2] | 0;
  $32 = $1 + ($$164 << 16 >> 12 << 1) | 0;
  if (($29 | 0) > 0) _silk_shell_decoder($32, $0, $29); else {
   dest = $32;
   stop = dest + 32 | 0;
   do {
    HEAP16[dest >> 1] = 0;
    dest = dest + 2 | 0;
   } while ((dest | 0) < (stop | 0));
  }
  $$164 = $$164 + 1 | 0;
 } while (($$164 | 0) != ($$05480 | 0));
 $$260 = 0;
 do {
  $35 = HEAP32[$6 + ($$260 << 2) >> 2] | 0;
  if (($35 | 0) > 0) {
   $38 = $1 + ($$260 << 16 >> 12 << 1) | 0;
   $$05258$us = 0;
   $$05557$us = HEAP16[$38 >> 1] | 0;
   do {
    $$05557$us = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us << 1) | 0;
    $$05258$us = $$05258$us + 1 | 0;
   } while (($$05258$us | 0) != ($35 | 0));
   HEAP16[$38 >> 1] = $$05557$us;
   $46 = $38 + 2 | 0;
   $$05258$us$1 = 0;
   $$05557$us$1 = HEAP16[$46 >> 1] | 0;
   do {
    $$05557$us$1 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$1 << 1) | 0;
    $$05258$us$1 = $$05258$us$1 + 1 | 0;
   } while (($$05258$us$1 | 0) != ($35 | 0));
   HEAP16[$46 >> 1] = $$05557$us$1;
   $55 = $38 + 4 | 0;
   $$05258$us$2 = 0;
   $$05557$us$2 = HEAP16[$55 >> 1] | 0;
   do {
    $$05557$us$2 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$2 << 1) | 0;
    $$05258$us$2 = $$05258$us$2 + 1 | 0;
   } while (($$05258$us$2 | 0) != ($35 | 0));
   HEAP16[$55 >> 1] = $$05557$us$2;
   $63 = $38 + 6 | 0;
   $$05258$us$3 = 0;
   $$05557$us$3 = HEAP16[$63 >> 1] | 0;
   do {
    $$05557$us$3 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$3 << 1) | 0;
    $$05258$us$3 = $$05258$us$3 + 1 | 0;
   } while (($$05258$us$3 | 0) != ($35 | 0));
   HEAP16[$63 >> 1] = $$05557$us$3;
   $71 = $38 + 8 | 0;
   $$05258$us$4 = 0;
   $$05557$us$4 = HEAP16[$71 >> 1] | 0;
   do {
    $$05557$us$4 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$4 << 1) | 0;
    $$05258$us$4 = $$05258$us$4 + 1 | 0;
   } while (($$05258$us$4 | 0) != ($35 | 0));
   HEAP16[$71 >> 1] = $$05557$us$4;
   $79 = $38 + 10 | 0;
   $$05258$us$5 = 0;
   $$05557$us$5 = HEAP16[$79 >> 1] | 0;
   do {
    $$05557$us$5 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$5 << 1) | 0;
    $$05258$us$5 = $$05258$us$5 + 1 | 0;
   } while (($$05258$us$5 | 0) != ($35 | 0));
   HEAP16[$79 >> 1] = $$05557$us$5;
   $87 = $38 + 12 | 0;
   $$05258$us$6 = 0;
   $$05557$us$6 = HEAP16[$87 >> 1] | 0;
   do {
    $$05557$us$6 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$6 << 1) | 0;
    $$05258$us$6 = $$05258$us$6 + 1 | 0;
   } while (($$05258$us$6 | 0) != ($35 | 0));
   HEAP16[$87 >> 1] = $$05557$us$6;
   $95 = $38 + 14 | 0;
   $$05258$us$7 = 0;
   $$05557$us$7 = HEAP16[$95 >> 1] | 0;
   do {
    $$05557$us$7 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$7 << 1) | 0;
    $$05258$us$7 = $$05258$us$7 + 1 | 0;
   } while (($$05258$us$7 | 0) != ($35 | 0));
   HEAP16[$95 >> 1] = $$05557$us$7;
   $103 = $38 + 16 | 0;
   $$05258$us$8 = 0;
   $$05557$us$8 = HEAP16[$103 >> 1] | 0;
   do {
    $$05557$us$8 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$8 << 1) | 0;
    $$05258$us$8 = $$05258$us$8 + 1 | 0;
   } while (($$05258$us$8 | 0) != ($35 | 0));
   HEAP16[$103 >> 1] = $$05557$us$8;
   $111 = $38 + 18 | 0;
   $$05258$us$9 = 0;
   $$05557$us$9 = HEAP16[$111 >> 1] | 0;
   do {
    $$05557$us$9 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$9 << 1) | 0;
    $$05258$us$9 = $$05258$us$9 + 1 | 0;
   } while (($$05258$us$9 | 0) != ($35 | 0));
   HEAP16[$111 >> 1] = $$05557$us$9;
   $119 = $38 + 20 | 0;
   $$05258$us$10 = 0;
   $$05557$us$10 = HEAP16[$119 >> 1] | 0;
   do {
    $$05557$us$10 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$10 << 1) | 0;
    $$05258$us$10 = $$05258$us$10 + 1 | 0;
   } while (($$05258$us$10 | 0) != ($35 | 0));
   HEAP16[$119 >> 1] = $$05557$us$10;
   $127 = $38 + 22 | 0;
   $$05258$us$11 = 0;
   $$05557$us$11 = HEAP16[$127 >> 1] | 0;
   do {
    $$05557$us$11 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$11 << 1) | 0;
    $$05258$us$11 = $$05258$us$11 + 1 | 0;
   } while (($$05258$us$11 | 0) != ($35 | 0));
   HEAP16[$127 >> 1] = $$05557$us$11;
   $135 = $38 + 24 | 0;
   $$05258$us$12 = 0;
   $$05557$us$12 = HEAP16[$135 >> 1] | 0;
   do {
    $$05557$us$12 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$12 << 1) | 0;
    $$05258$us$12 = $$05258$us$12 + 1 | 0;
   } while (($$05258$us$12 | 0) != ($35 | 0));
   HEAP16[$135 >> 1] = $$05557$us$12;
   $143 = $38 + 26 | 0;
   $$05258$us$13 = 0;
   $$05557$us$13 = HEAP16[$143 >> 1] | 0;
   do {
    $$05557$us$13 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$13 << 1) | 0;
    $$05258$us$13 = $$05258$us$13 + 1 | 0;
   } while (($$05258$us$13 | 0) != ($35 | 0));
   HEAP16[$143 >> 1] = $$05557$us$13;
   $151 = $38 + 28 | 0;
   $$05258$us$14 = 0;
   $$05557$us$14 = HEAP16[$151 >> 1] | 0;
   do {
    $$05557$us$14 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$14 << 1) | 0;
    $$05258$us$14 = $$05258$us$14 + 1 | 0;
   } while (($$05258$us$14 | 0) != ($35 | 0));
   HEAP16[$151 >> 1] = $$05557$us$14;
   $159 = $38 + 30 | 0;
   $$05258$us$15 = 0;
   $$05557$us$15 = HEAP16[$159 >> 1] | 0;
   do {
    $$05557$us$15 = (_ec_dec_icdf($0, 43926, 8) | 0) + ($$05557$us$15 << 1) | 0;
    $$05258$us$15 = $$05258$us$15 + 1 | 0;
   } while (($$05258$us$15 | 0) != ($35 | 0));
   HEAP16[$159 >> 1] = $$05557$us$15;
   $168 = $5 + ($$260 << 2) | 0;
   HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | $35 << 5;
  }
  $$260 = $$260 + 1 | 0;
 } while (($$260 | 0) != ($$05480 | 0));
 _silk_decode_signs($0, $1, $4, $2, $3, $5);
 STACKTOP = sp;
 return;
}

function _opus_custom_encoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$0137140 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $123 = 0, $124 = 0, $132 = 0, $133 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $17 = 0, $176 = 0, $177 = 0, $18 = 0, $184 = 0, $185 = 0, $193 = 0, $194 = 0, $197 = 0, $2 = 0, $202 = 0, $203 = 0, $212 = 0, $213 = 0, $221 = 0, $222 = 0, $231 = 0, $232 = 0, $239 = 0, $240 = 0, $30 = 0, $31 = 0, $43 = 0, $44 = 0, $57 = 0, $58 = 0, $66 = 0, $67 = 0, $74 = 0, $75 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $96 = 0, $97 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 do switch ($1 | 0) {
 case 4010:
  {
   $8 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $9 = HEAP32[$8 >> 2] | 0;
   HEAP32[$2 >> 2] = $8 + 4;
   if ($9 >>> 0 > 10) label = 43; else {
    HEAP32[$0 + 24 >> 2] = $9;
    label = 42;
   }
   break;
  }
 case 10010:
  {
   $17 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $18 = HEAP32[$17 >> 2] | 0;
   HEAP32[$2 >> 2] = $17 + 4;
   if (($18 | 0) < 0) label = 43; else if (($18 | 0) < (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$0 + 32 >> 2] = $18;
    label = 42;
   } else label = 43;
   break;
  }
 case 10012:
  {
   $30 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $31 = HEAP32[$30 >> 2] | 0;
   HEAP32[$2 >> 2] = $30 + 4;
   if (($31 | 0) < 1) label = 43; else if (($31 | 0) > (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) label = 43; else {
    HEAP32[$0 + 36 >> 2] = $31;
    label = 42;
   }
   break;
  }
 case 10002:
  {
   $43 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$2 >> 2] = $43 + 4;
   if ($44 >>> 0 > 2) label = 43; else {
    HEAP32[$0 + 20 >> 2] = ($44 | 0) != 2 & 1;
    HEAP32[$0 + 12 >> 2] = ($44 | 0) == 0 & 1;
    label = 42;
   }
   break;
  }
 case 4014:
  {
   $57 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $58 = HEAP32[$57 >> 2] | 0;
   HEAP32[$2 >> 2] = $57 + 4;
   if ($58 >>> 0 > 100) label = 43; else {
    HEAP32[$0 + 56 >> 2] = $58;
    label = 42;
   }
   break;
  }
 case 4020:
  {
   $66 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$2 >> 2] = $66 + 4;
   HEAP32[$0 + 52 >> 2] = $67;
   label = 42;
   break;
  }
 case 4006:
  {
   $74 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $75 = HEAP32[$74 >> 2] | 0;
   HEAP32[$2 >> 2] = $74 + 4;
   HEAP32[$0 + 44 >> 2] = $75;
   label = 42;
   break;
  }
 case 4002:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   if (($83 | 0) < 501 & ($83 | 0) != -1) label = 43; else {
    $88 = (HEAP32[$0 + 4 >> 2] | 0) * 26e4 | 0;
    HEAP32[$0 + 40 >> 2] = ($83 | 0) < ($88 | 0) ? $83 : $88;
    label = 42;
   }
   break;
  }
 case 10008:
  {
   $96 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $97 = HEAP32[$96 >> 2] | 0;
   HEAP32[$2 >> 2] = $96 + 4;
   if (($97 + -1 | 0) >>> 0 > 1) label = 43; else {
    HEAP32[$0 + 8 >> 2] = $97;
    label = 42;
   }
   break;
  }
 case 4036:
  {
   $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $106 = HEAP32[$105 >> 2] | 0;
   HEAP32[$2 >> 2] = $105 + 4;
   if (($106 + -8 | 0) >>> 0 > 16) label = 43; else {
    HEAP32[$0 + 60 >> 2] = $106;
    label = 42;
   }
   break;
  }
 case 4037:
  {
   $114 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $115 = HEAP32[$114 >> 2] | 0;
   HEAP32[$2 >> 2] = $114 + 4;
   HEAP32[$115 >> 2] = HEAP32[$0 + 60 >> 2];
   label = 42;
   break;
  }
 case 4046:
  {
   $123 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $124 = HEAP32[$123 >> 2] | 0;
   HEAP32[$2 >> 2] = $123 + 4;
   if ($124 >>> 0 > 1) label = 43; else {
    HEAP32[$0 + 68 >> 2] = $124;
    label = 42;
   }
   break;
  }
 case 4047:
  {
   $132 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $133 = HEAP32[$132 >> 2] | 0;
   HEAP32[$2 >> 2] = $132 + 4;
   if (!$133) label = 43; else {
    HEAP32[$133 >> 2] = HEAP32[$0 + 68 >> 2];
    label = 42;
   }
   break;
  }
 case 4028:
  {
   $137 = $0 + 4 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   $139 = HEAP32[$0 >> 2] | 0;
   $141 = HEAP32[$139 + 4 >> 2] | 0;
   $144 = $0 + 244 + ((Math_imul($141 + 1024 | 0, $138) | 0) << 2) | 0;
   $145 = $139 + 8 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   $147 = Math_imul($146, $138) | 0;
   $148 = $144 + ($147 << 2) | 0;
   $149 = $148 + ($147 << 2) | 0;
   _memset($0 + 76 | 0, 0, (_opus_custom_encoder_get_size($141, $146, $138) | 0) + -76 | 0) | 0;
   if ((Math_imul(HEAP32[$145 >> 2] | 0, $138) | 0) > 0) {
    $$0137140 = 0;
    do {
     HEAPF32[$149 + ($$0137140 << 2) >> 2] = -28.0;
     HEAPF32[$148 + ($$0137140 << 2) >> 2] = -28.0;
     $$0137140 = $$0137140 + 1 | 0;
    } while (($$0137140 | 0) < (Math_imul(HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$137 >> 2] | 0) | 0));
   }
   HEAP32[$0 + 216 >> 2] = 0;
   HEAPF32[$0 + 84 >> 2] = 1.0;
   HEAP32[$0 + 80 >> 2] = 2;
   HEAP32[$0 + 88 >> 2] = 256;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP32[$0 + 100 >> 2] = 0;
   label = 42;
   break;
  }
 case 10016:
  {
   $176 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $177 = HEAP32[$176 >> 2] | 0;
   HEAP32[$2 >> 2] = $176 + 4;
   HEAP32[$0 + 48 >> 2] = $177;
   label = 42;
   break;
  }
 case 10022:
  {
   $184 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $185 = HEAP32[$184 >> 2] | 0;
   HEAP32[$2 >> 2] = $184 + 4;
   if (!$185) label = 42; else {
    dest = $0 + 120 | 0;
    src = $185;
    stop = dest + 64 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    label = 42;
   }
   break;
  }
 case 10028:
  {
   $193 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $194 = HEAP32[$193 >> 2] | 0;
   HEAP32[$2 >> 2] = $193 + 4;
   if (!$194) label = 42; else {
    $197 = $194;
    $202 = HEAP32[$197 + 4 >> 2] | 0;
    $203 = $0 + 184 | 0;
    HEAP32[$203 >> 2] = HEAP32[$197 >> 2];
    HEAP32[$203 + 4 >> 2] = $202;
    label = 42;
   }
   break;
  }
 case 10015:
  {
   $212 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $213 = HEAP32[$212 >> 2] | 0;
   HEAP32[$2 >> 2] = $212 + 4;
   if (!$213) label = 43; else {
    HEAP32[$213 >> 2] = HEAP32[$0 >> 2];
    label = 42;
   }
   break;
  }
 case 4031:
  {
   $221 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $222 = HEAP32[$221 >> 2] | 0;
   HEAP32[$2 >> 2] = $221 + 4;
   if (!$222) label = 43; else {
    HEAP32[$222 >> 2] = HEAP32[$0 + 76 >> 2];
    label = 42;
   }
   break;
  }
 case 10024:
  {
   $231 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $232 = HEAP32[$231 >> 2] | 0;
   HEAP32[$2 >> 2] = $231 + 4;
   HEAP32[$0 + 64 >> 2] = $232;
   label = 42;
   break;
  }
 case 10026:
  {
   $239 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $240 = HEAP32[$239 >> 2] | 0;
   HEAP32[$2 >> 2] = $239 + 4;
   HEAP32[$0 + 236 >> 2] = $240;
   label = 42;
   break;
  }
 default:
  {
   $$0 = -5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 42) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 43) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _speex_realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1271$be$i$i = 0, $$1271$i$i = 0, $$1271$ph$i$i = 0, $$1274$be$i$i = 0, $$1274$i$i = 0, $$1274$ph$i$i = 0, $$3$i$i = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $11 = 0, $111 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $147 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $162 = 0, $173 = 0, $176 = 0, $183 = 0, $186 = 0, $188 = 0, $19 = 0, $193 = 0, $20 = 0, $32 = 0, $34 = 0, $45 = 0, $47 = 0, $48 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $68 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $storemerge$i$i = 0, $storemerge3$i$i = 0;
 if (!$0) {
  $$1$i = _malloc($1) | 0;
  return $$1$i | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[12580] = 12;
  $$1$i = 0;
  return $$1$i | 0;
 }
 $8 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
 $9 = $0 + -8 | 0;
 $10 = $0 + -4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 & -8;
 $13 = $9 + $12 | 0;
 $14 = HEAP32[12444] | 0;
 $16 = $11 & 3;
 if (!(($16 | 0) != 1 & $14 >>> 0 <= $9 >>> 0 & ($12 | 0) > 0)) _abort();
 $19 = $13 + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (!($20 & 1)) _abort();
 do if (!$16) {
  if (!($8 >>> 0 < 256 | $12 >>> 0 < ($8 | 4) >>> 0)) if (($12 - $8 | 0) >>> 0 <= HEAP32[12560] << 1 >>> 0) {
   $$1$i = $0;
   return $$1$i | 0;
  }
 } else {
  if ($12 >>> 0 >= $8 >>> 0) {
   $32 = $12 - $8 | 0;
   if ($32 >>> 0 <= 15) {
    $$1$i = $0;
    return $$1$i | 0;
   }
   $34 = $9 + $8 | 0;
   HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
   HEAP32[$34 + 4 >> 2] = $32 | 3;
   HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1;
   _dispose_chunk($34, $32);
   $$1$i = $0;
   return $$1$i | 0;
  }
  if ((HEAP32[12446] | 0) == ($13 | 0)) {
   $45 = (HEAP32[12443] | 0) + $12 | 0;
   $47 = $45 - $8 | 0;
   $48 = $9 + $8 | 0;
   if ($45 >>> 0 <= $8 >>> 0) break;
   HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
   HEAP32[$48 + 4 >> 2] = $47 | 1;
   HEAP32[12446] = $48;
   HEAP32[12443] = $47;
   $$1$i = $0;
   return $$1$i | 0;
  }
  if ((HEAP32[12445] | 0) == ($13 | 0)) {
   $57 = (HEAP32[12442] | 0) + $12 | 0;
   if ($57 >>> 0 < $8 >>> 0) break;
   $59 = $57 - $8 | 0;
   if ($59 >>> 0 > 15) {
    $61 = $9 + $8 | 0;
    $62 = $9 + $57 | 0;
    HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
    HEAP32[$61 + 4 >> 2] = $59 | 1;
    HEAP32[$62 >> 2] = $59;
    $68 = $62 + 4 | 0;
    HEAP32[$68 >> 2] = HEAP32[$68 >> 2] & -2;
    $storemerge$i$i = $61;
    $storemerge3$i$i = $59;
   } else {
    HEAP32[$10 >> 2] = $11 & 1 | $57 | 2;
    $75 = $9 + $57 + 4 | 0;
    HEAP32[$75 >> 2] = HEAP32[$75 >> 2] | 1;
    $storemerge$i$i = 0;
    $storemerge3$i$i = 0;
   }
   HEAP32[12442] = $storemerge3$i$i;
   HEAP32[12445] = $storemerge$i$i;
   $$1$i = $0;
   return $$1$i | 0;
  }
  if (!($20 & 2)) {
   $81 = ($20 & -8) + $12 | 0;
   if ($81 >>> 0 >= $8 >>> 0) {
    $83 = $81 - $8 | 0;
    $84 = $20 >>> 3;
    L43 : do if ($20 >>> 0 < 256) {
     $87 = HEAP32[$13 + 8 >> 2] | 0;
     $89 = HEAP32[$13 + 12 >> 2] | 0;
     $91 = 49800 + ($84 << 1 << 2) | 0;
     if (($87 | 0) != ($91 | 0)) {
      if ($14 >>> 0 > $87 >>> 0) _abort();
      if ((HEAP32[$87 + 12 >> 2] | 0) != ($13 | 0)) _abort();
     }
     if (($89 | 0) == ($87 | 0)) {
      HEAP32[12440] = HEAP32[12440] & ~(1 << $84);
      break;
     }
     if (($89 | 0) == ($91 | 0)) $$pre$phi$i$iZ2D = $89 + 8 | 0; else {
      if ($14 >>> 0 > $89 >>> 0) _abort();
      $104 = $89 + 8 | 0;
      if ((HEAP32[$104 >> 2] | 0) == ($13 | 0)) $$pre$phi$i$iZ2D = $104; else _abort();
     }
     HEAP32[$87 + 12 >> 2] = $89;
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $87;
    } else {
     $109 = HEAP32[$13 + 24 >> 2] | 0;
     $111 = HEAP32[$13 + 12 >> 2] | 0;
     do if (($111 | 0) == ($13 | 0)) {
      $122 = $13 + 16 | 0;
      $123 = $122 + 4 | 0;
      $124 = HEAP32[$123 >> 2] | 0;
      if (!$124) {
       $126 = HEAP32[$122 >> 2] | 0;
       if (!$126) {
        $$3$i$i = 0;
        break;
       } else {
        $$1271$ph$i$i = $126;
        $$1274$ph$i$i = $122;
       }
      } else {
       $$1271$ph$i$i = $124;
       $$1274$ph$i$i = $123;
      }
      $$1271$i$i = $$1271$ph$i$i;
      $$1274$i$i = $$1274$ph$i$i;
      while (1) {
       $128 = $$1271$i$i + 20 | 0;
       $129 = HEAP32[$128 >> 2] | 0;
       if (!$129) {
        $131 = $$1271$i$i + 16 | 0;
        $132 = HEAP32[$131 >> 2] | 0;
        if (!$132) break; else {
         $$1271$be$i$i = $132;
         $$1274$be$i$i = $131;
        }
       } else {
        $$1271$be$i$i = $129;
        $$1274$be$i$i = $128;
       }
       $$1271$i$i = $$1271$be$i$i;
       $$1274$i$i = $$1274$be$i$i;
      }
      if ($14 >>> 0 > $$1274$i$i >>> 0) _abort(); else {
       HEAP32[$$1274$i$i >> 2] = 0;
       $$3$i$i = $$1271$i$i;
       break;
      }
     } else {
      $114 = HEAP32[$13 + 8 >> 2] | 0;
      if ($14 >>> 0 > $114 >>> 0) _abort();
      $116 = $114 + 12 | 0;
      if ((HEAP32[$116 >> 2] | 0) != ($13 | 0)) _abort();
      $119 = $111 + 8 | 0;
      if ((HEAP32[$119 >> 2] | 0) == ($13 | 0)) {
       HEAP32[$116 >> 2] = $111;
       HEAP32[$119 >> 2] = $114;
       $$3$i$i = $111;
       break;
      } else _abort();
     } while (0);
     if ($109 | 0) {
      $137 = HEAP32[$13 + 28 >> 2] | 0;
      $138 = 50064 + ($137 << 2) | 0;
      do if ((HEAP32[$138 >> 2] | 0) == ($13 | 0)) {
       HEAP32[$138 >> 2] = $$3$i$i;
       if (!$$3$i$i) {
        HEAP32[12441] = HEAP32[12441] & ~(1 << $137);
        break L43;
       }
      } else if ((HEAP32[12444] | 0) >>> 0 > $109 >>> 0) _abort(); else {
       $147 = $109 + 16 | 0;
       HEAP32[((HEAP32[$147 >> 2] | 0) == ($13 | 0) ? $147 : $109 + 20 | 0) >> 2] = $$3$i$i;
       if (!$$3$i$i) break L43; else break;
      } while (0);
      $152 = HEAP32[12444] | 0;
      if ($152 >>> 0 > $$3$i$i >>> 0) _abort();
      HEAP32[$$3$i$i + 24 >> 2] = $109;
      $155 = $13 + 16 | 0;
      $156 = HEAP32[$155 >> 2] | 0;
      do if ($156 | 0) if ($152 >>> 0 > $156 >>> 0) _abort(); else {
       HEAP32[$$3$i$i + 16 >> 2] = $156;
       HEAP32[$156 + 24 >> 2] = $$3$i$i;
       break;
      } while (0);
      $162 = HEAP32[$155 + 4 >> 2] | 0;
      if ($162 | 0) if ((HEAP32[12444] | 0) >>> 0 > $162 >>> 0) _abort(); else {
       HEAP32[$$3$i$i + 20 >> 2] = $162;
       HEAP32[$162 + 24 >> 2] = $$3$i$i;
       break;
      }
     }
    } while (0);
    if ($83 >>> 0 < 16) {
     HEAP32[$10 >> 2] = $11 & 1 | $81 | 2;
     $173 = $9 + $81 + 4 | 0;
     HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
     $$1$i = $0;
     return $$1$i | 0;
    } else {
     $176 = $9 + $8 | 0;
     HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
     HEAP32[$176 + 4 >> 2] = $83 | 3;
     $183 = $9 + $81 + 4 | 0;
     HEAP32[$183 >> 2] = HEAP32[$183 >> 2] | 1;
     _dispose_chunk($176, $83);
     $$1$i = $0;
     return $$1$i | 0;
    }
   }
  }
 } while (0);
 $186 = _malloc($1) | 0;
 if (!$186) {
  $$1$i = 0;
  return $$1$i | 0;
 }
 $188 = HEAP32[$10 >> 2] | 0;
 $193 = ($188 & -8) - (($188 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($186 | 0, $0 | 0, ($193 >>> 0 < $1 >>> 0 ? $193 : $1) | 0) | 0;
 _free($0);
 $$1$i = $186;
 return $$1$i | 0;
}

function _LPC_inverse_pred_gain_QA_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0135$in162 = 0, $$0135$in162$phi = 0, $$0135159 = 0, $$0135163 = 0, $$0136158 = 0, $$lcssa = 0, $10 = 0, $107 = 0, $109 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $126 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $140 = 0, $143 = 0, $15 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $172 = 0, $174 = 0, $177 = 0, $179 = 0, $181 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $19 = 0, $190 = 0, $192 = 0, $21 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select143 = 0, $spec$select149 = 0, label = 0;
 $$0135159 = $1 + -1 | 0;
 $4 = HEAP32[$0 + ($$0135159 << 2) >> 2] | 0;
 $5 = ($4 + 16773022 | 0) >>> 0 > 33546044;
 L1 : do if (($1 | 0) > 1) {
  $$0135$in162 = $1;
  $$0135163 = $$0135159;
  $15 = 1073741824;
  $16 = 0;
  $192 = $5;
  $7 = $4;
  L3 : while (1) {
   if ($192) {
    $$0 = 0;
    label = 24;
    break;
   }
   $8 = 0 - ($7 << 7) | 0;
   $10 = (($8 | 0) < 0) << 31 >> 31;
   ___muldi3($8 | 0, $10 | 0, $8 | 0, $10 | 0) | 0;
   $12 = 1073741824 - tempRet0 | 0;
   $17 = ___muldi3($15 | 0, $16 | 0, $12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0) | 0;
   $19 = _bitshift64Lshr($17 | 0, tempRet0 | 0, 30) | 0;
   $21 = $19 & -4;
   if (($21 | 0) < 107374) {
    $$0 = 0;
    label = 24;
    break;
   }
   $27 = 32 - (_silk_CLZ32_434(($12 | 0) > 0 ? $12 : 0 - $12 | 0) | 0) | 0;
   $28 = $$0135$in162 >>> 1;
   $30 = _silk_INVERSE32_varQ_435($12, $27 + 30 | 0) | 0;
   $31 = $$0135163 + -1 | 0;
   $32 = ($27 | 0) == 1;
   $34 = (($30 | 0) < 0) << 31 >> 31;
   $35 = $27 + -1 | 0;
   $$0136158 = 0;
   do {
    $36 = $0 + ($$0136158 << 2) | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $39 = $0 + ($31 - $$0136158 << 2) | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $43 = ___muldi3($40 | 0, (($40 | 0) < 0) << 31 >> 31 | 0, $8 | 0, $10 | 0) | 0;
    $45 = _bitshift64Lshr($43 | 0, tempRet0 | 0, 30) | 0;
    $47 = _i64Add($45 | 0, tempRet0 | 0, 1, 0) | 0;
    $49 = _bitshift64Lshr($47 | 0, tempRet0 | 0, 1) | 0;
    $51 = $37 - $49 | 0;
    $52 = ($51 | 0) > -1;
    if ($32) {
     if ($52) {
      $55 = (($49 ^ -2147483648) & $37 | 0) < 0;
      $67 = $55 ? -2147483648 : $51;
      $68 = $55 ? -1 : (($51 | 0) < 0) << 31 >> 31;
      $73 = $55 ? -2147483648 : $51;
     } else {
      $62 = (($37 ^ -2147483648) & $49 | 0) < 0;
      $67 = $62 ? 2147483647 : $51;
      $68 = $62 ? 0 : (($51 | 0) < 0) << 31 >> 31;
      $73 = $62 ? 2147483647 : $51;
     }
     $69 = ___muldi3($67 | 0, $68 | 0, $30 | 0, $34 | 0) | 0;
     $71 = _bitshift64Ashr($69 | 0, tempRet0 | 0, 1) | 0;
     $72 = tempRet0;
     $76 = ___muldi3($30 | 0, $34 | 0, $73 | 0, (($73 | 0) < 0) << 31 >> 31 | 0) | 0;
     $79 = _i64Add($76 & 1 | 0, 0, $71 | 0, $72 | 0) | 0;
     $96 = $79;
     $97 = tempRet0;
    } else {
     $spec$select143 = ((($52 ? $49 : $37) ^ -2147483648) & ($52 ? $37 : $49) | 0) < 0 ? $51 >> 31 ^ -2147483648 : $51;
     $88 = ___muldi3($spec$select143 | 0, (($spec$select143 | 0) < 0) << 31 >> 31 | 0, $30 | 0, $34 | 0) | 0;
     $90 = _bitshift64Ashr($88 | 0, tempRet0 | 0, $35 | 0) | 0;
     $92 = _i64Add($90 | 0, tempRet0 | 0, 1, 0) | 0;
     $94 = _bitshift64Ashr($92 | 0, tempRet0 | 0, 1) | 0;
     $96 = $94;
     $97 = tempRet0;
    }
    $98 = _i64Add($96 | 0, $97 | 0, -2147483648, 0) | 0;
    $99 = tempRet0;
    if ($99 >>> 0 > 0 | ($99 | 0) == 0 & $98 >>> 0 > 4294967295) {
     $$0 = 0;
     label = 24;
     break L3;
    }
    HEAP32[$36 >> 2] = $96;
    $107 = ___muldi3($37 | 0, (($37 | 0) < 0) << 31 >> 31 | 0, $8 | 0, $10 | 0) | 0;
    $109 = _bitshift64Lshr($107 | 0, tempRet0 | 0, 30) | 0;
    $111 = _i64Add($109 | 0, tempRet0 | 0, 1, 0) | 0;
    $113 = _bitshift64Lshr($111 | 0, tempRet0 | 0, 1) | 0;
    $115 = $40 - $113 | 0;
    $116 = ($115 | 0) > -1;
    if ($32) {
     if ($116) {
      $119 = (($113 ^ -2147483648) & $40 | 0) < 0;
      $131 = $119 ? -2147483648 : $115;
      $132 = $119 ? -1 : (($115 | 0) < 0) << 31 >> 31;
      $137 = $119 ? -2147483648 : $115;
     } else {
      $126 = (($40 ^ -2147483648) & $113 | 0) < 0;
      $131 = $126 ? 2147483647 : $115;
      $132 = $126 ? 0 : (($115 | 0) < 0) << 31 >> 31;
      $137 = $126 ? 2147483647 : $115;
     }
     $133 = ___muldi3($131 | 0, $132 | 0, $30 | 0, $34 | 0) | 0;
     $135 = _bitshift64Ashr($133 | 0, tempRet0 | 0, 1) | 0;
     $136 = tempRet0;
     $140 = ___muldi3($30 | 0, $34 | 0, $137 | 0, (($137 | 0) < 0) << 31 >> 31 | 0) | 0;
     $143 = _i64Add($140 & 1 | 0, 0, $135 | 0, $136 | 0) | 0;
     $160 = $143;
     $161 = tempRet0;
    } else {
     $spec$select149 = ((($116 ? $113 : $40) ^ -2147483648) & ($116 ? $40 : $113) | 0) < 0 ? $115 >> 31 ^ -2147483648 : $115;
     $152 = ___muldi3($spec$select149 | 0, (($spec$select149 | 0) < 0) << 31 >> 31 | 0, $30 | 0, $34 | 0) | 0;
     $154 = _bitshift64Ashr($152 | 0, tempRet0 | 0, $35 | 0) | 0;
     $156 = _i64Add($154 | 0, tempRet0 | 0, 1, 0) | 0;
     $158 = _bitshift64Ashr($156 | 0, tempRet0 | 0, 1) | 0;
     $160 = $158;
     $161 = tempRet0;
    }
    $162 = _i64Add($160 | 0, $161 | 0, -2147483648, 0) | 0;
    $163 = tempRet0;
    if ($163 >>> 0 > 0 | ($163 | 0) == 0 & $162 >>> 0 > 4294967295) {
     $$0 = 0;
     label = 24;
     break L3;
    }
    HEAP32[$39 >> 2] = $160;
    $$0136158 = $$0136158 + 1 | 0;
   } while ($$0136158 >>> 0 < $28 >>> 0);
   $7 = HEAP32[$0 + ($31 << 2) >> 2] | 0;
   $172 = (($21 | 0) < 0) << 31 >> 31;
   $174 = ($7 + 16773022 | 0) >>> 0 > 33546044;
   if (($$0135163 | 0) <= 1) {
    $$lcssa = $174;
    $184 = $21;
    $185 = $172;
    break L1;
   } else {
    $$0135$in162$phi = $$0135163;
    $$0135163 = $31;
    $15 = $21;
    $16 = $172;
    $192 = $174;
    $$0135$in162 = $$0135$in162$phi;
   }
  }
  if ((label | 0) == 24) return $$0 | 0;
 } else {
  $$lcssa = $5;
  $184 = 1073741824;
  $185 = 0;
 } while (0);
 if ($$lcssa) {
  $$0 = 0;
  return $$0 | 0;
 }
 $177 = 0 - (HEAP32[$0 >> 2] << 7) | 0;
 $179 = (($177 | 0) < 0) << 31 >> 31;
 ___muldi3($177 | 0, $179 | 0, $177 | 0, $179 | 0) | 0;
 $181 = 1073741824 - tempRet0 | 0;
 $186 = ___muldi3($184 | 0, $185 | 0, $181 | 0, (($181 | 0) < 0) << 31 >> 31 | 0) | 0;
 $188 = _bitshift64Lshr($186 | 0, tempRet0 | 0, 30) | 0;
 $190 = $188 & -4;
 $$0 = ($190 | 0) < 107374 ? 0 : $190;
 return $$0 | 0;
}

function _quant_band($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0138153 = 0, $$0139169 = 0, $$0139169$us = 0, $$0139169$us$us = 0, $$0140$lcssa = 0, $$0140168 = 0, $$0140168$us = 0, $$0140168$us$us = 0, $$0141178 = 0, $$0141178$us = 0, $$0143$lcssa = 0, $$0143158 = 0, $$0146 = 0, $$0148$lcssa = 0, $$0148167 = 0, $$0148167$us = 0, $$0148167$us$us = 0, $$0149$lcssa = 0, $$0149177 = 0, $$0149177$us = 0, $$0151$lcssa = 0, $$0151165 = 0, $$0151165$us = 0, $$0151165$us$us = 0, $$1$lcssa = 0, $$1142159 = 0, $$1144$lcssa = 0, $$1144154 = 0, $$1150$lcssa = 0, $$1150166 = 0, $$1150166$us = 0, $$1150166$us$us = 0, $$1152157 = 0, $$1160 = 0, $$2155 = 0, $102 = 0, $109 = 0, $11 = 0, $112 = 0, $116 = 0, $121 = 0, $125 = 0.0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $28 = 0, $40 = 0, $43 = 0, $44 = 0, $54 = 0, $57 = 0, $58 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $95 = 0, $spec$select = 0;
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$0 + 24 >> 2] | 0;
 $15 = ($4 | 0) == 1 & 1;
 $16 = _celt_udiv($2, $4) | 0;
 if (($2 | 0) == 1) {
  _quant_band_n1($0, $1, 0, $7);
  $$0 = 1;
  return $$0 | 0;
 }
 $18 = ($13 | 0) > 0;
 $spec$select = $18 ? $13 : 0;
 do if (($5 | 0) != 0 & ($9 | 0) != 0) {
  if (($13 | 0) < 1) if (!(($4 | 0) > 1 | ($13 | 0) != 0 & ($16 & 1 | 0) == 0)) {
   $$0146 = $5;
   break;
  }
  _memcpy($9 | 0, $5 | 0, $2 << 2 | 0) | 0;
  $$0146 = $9;
 } else $$0146 = $5; while (0);
 if ($18) {
  $28 = ($$0146 | 0) == 0;
  if (!$11) {
   $$0141178$us = 0;
   $$0149177$us = $10;
   while (1) {
    if (!$28) _haar1($$0146, $2 >> $$0141178$us, 1 << $$0141178$us);
    $40 = (HEAPU8[16 + ($$0149177$us >> 4) >> 0] | 0) << 2 | (HEAPU8[16 + ($$0149177$us & 15) >> 0] | 0);
    $$0141178$us = $$0141178$us + 1 | 0;
    if ($$0141178$us >>> 0 >= $spec$select >>> 0) {
     $$0149$lcssa = $40;
     break;
    } else $$0149177$us = $40;
   }
  } else {
   $$0141178 = 0;
   $$0149177 = $10;
   while (1) {
    $43 = 1 << $$0141178;
    $44 = $2 >> $$0141178;
    _haar1($1, $44, $43);
    if (!$28) _haar1($$0146, $44, $43);
    $54 = (HEAPU8[16 + ($$0149177 >> 4) >> 0] | 0) << 2 | (HEAPU8[16 + ($$0149177 & 15) >> 0] | 0);
    $$0141178 = $$0141178 + 1 | 0;
    if ($$0141178 >>> 0 >= $spec$select >>> 0) {
     $$0149$lcssa = $54;
     break;
    } else $$0149177 = $54;
   }
  }
 } else $$0149$lcssa = $10;
 $57 = $4 >> $spec$select;
 $58 = $16 << $spec$select;
 L27 : do if (($58 & 1 | 0) == 0 & ($13 | 0) < 0) {
  $64 = ($$0146 | 0) == 0;
  if ($11 | 0) {
   $$0139169 = $13;
   $$0140168 = $57;
   $$0148167 = 0;
   $$0151165 = $58;
   $$1150166 = $$0149$lcssa;
   while (1) {
    _haar1($1, $$0151165, $$0140168);
    if (!$64) _haar1($$0146, $$0151165, $$0140168);
    $86 = $$1150166 << $$0140168 | $$1150166;
    $87 = $$0140168 << 1;
    $88 = $$0151165 >> 1;
    $89 = $$0148167 + 1 | 0;
    if (($$0151165 & 2 | 0) == 0 & ($$0139169 | 0) < -1) {
     $$0139169 = $$0139169 + 1 | 0;
     $$0140168 = $87;
     $$0148167 = $89;
     $$0151165 = $88;
     $$1150166 = $86;
    } else {
     $$0140$lcssa = $87;
     $$0148$lcssa = $89;
     $$0151$lcssa = $88;
     $$1150$lcssa = $86;
     break L27;
    }
   }
  }
  if ($64) {
   $$0139169$us$us = $13;
   $$0140168$us$us = $57;
   $$0148167$us$us = 0;
   $$0151165$us$us = $58;
   $$1150166$us$us = $$0149$lcssa;
   while (1) {
    $66 = $$1150166$us$us << $$0140168$us$us | $$1150166$us$us;
    $67 = $$0140168$us$us << 1;
    $68 = $$0151165$us$us >> 1;
    $69 = $$0148167$us$us + 1 | 0;
    if (($$0151165$us$us & 2 | 0) == 0 & ($$0139169$us$us | 0) < -1) {
     $$0139169$us$us = $$0139169$us$us + 1 | 0;
     $$0140168$us$us = $67;
     $$0148167$us$us = $69;
     $$0151165$us$us = $68;
     $$1150166$us$us = $66;
    } else {
     $$0140$lcssa = $67;
     $$0148$lcssa = $69;
     $$0151$lcssa = $68;
     $$1150$lcssa = $66;
     break;
    }
   }
  } else {
   $$0139169$us = $13;
   $$0140168$us = $57;
   $$0148167$us = 0;
   $$0151165$us = $58;
   $$1150166$us = $$0149$lcssa;
   while (1) {
    _haar1($$0146, $$0151165$us, $$0140168$us);
    $76 = $$1150166$us << $$0140168$us | $$1150166$us;
    $77 = $$0140168$us << 1;
    $78 = $$0151165$us >> 1;
    $79 = $$0148167$us + 1 | 0;
    if (($$0151165$us & 2 | 0) == 0 & ($$0139169$us | 0) < -1) {
     $$0139169$us = $$0139169$us + 1 | 0;
     $$0140168$us = $77;
     $$0148167$us = $79;
     $$0151165$us = $78;
     $$1150166$us = $76;
    } else {
     $$0140$lcssa = $77;
     $$0148$lcssa = $79;
     $$0151$lcssa = $78;
     $$1150$lcssa = $76;
     break;
    }
   }
  }
 } else {
  $$0140$lcssa = $57;
  $$0148$lcssa = 0;
  $$0151$lcssa = $58;
  $$1150$lcssa = $$0149$lcssa;
 } while (0);
 $95 = ($$0140$lcssa | 0) > 1;
 if ($95) {
  if ($11 | 0) _deinterleave_hadamard($1, $$0151$lcssa >> $spec$select, $$0140$lcssa << $spec$select, $15);
  if ($$0146 | 0) _deinterleave_hadamard($$0146, $$0151$lcssa >> $spec$select, $$0140$lcssa << $spec$select, $15);
 }
 $102 = _quant_partition($0, $1, $2, $3, $$0140$lcssa, $$0146, $6, $8, $$1150$lcssa) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0 = $102;
  return $$0 | 0;
 }
 if ($95) _interleave_hadamard($1, $$0151$lcssa >> $spec$select, $$0140$lcssa << $spec$select, $15);
 if (!$$0148$lcssa) {
  $$0143$lcssa = $102;
  $$1$lcssa = $$0140$lcssa;
 } else {
  $$0143158 = $102;
  $$1142159 = 0;
  $$1152157 = $$0151$lcssa;
  $$1160 = $$0140$lcssa;
  while (1) {
   $109 = $$1160 >> 1;
   $$1152157 = $$1152157 << 1;
   $112 = $$0143158 >>> $109 | $$0143158;
   _haar1($1, $$1152157, $109);
   $$1142159 = $$1142159 + 1 | 0;
   if (($$1142159 | 0) == ($$0148$lcssa | 0)) {
    $$0143$lcssa = $112;
    $$1$lcssa = $109;
    break;
   } else {
    $$0143158 = $112;
    $$1160 = $109;
   }
  }
 }
 if ($18) {
  $$1144154 = $$0143$lcssa;
  $$2155 = 0;
  while (1) {
   $116 = HEAPU8[32 + $$1144154 >> 0] | 0;
   _haar1($1, $2 >> $$2155, 1 << $$2155);
   $$2155 = $$2155 + 1 | 0;
   if ($$2155 >>> 0 >= $spec$select >>> 0) {
    $$1144$lcssa = $116;
    break;
   } else $$1144154 = $116;
  }
 } else $$1144$lcssa = $$0143$lcssa;
 $121 = $$1$lcssa << $spec$select;
 if ($7 | 0) {
  $125 = +Math_sqrt(+(+($2 | 0)));
  if (($2 | 0) > 0) {
   $$0138153 = 0;
   do {
    HEAPF32[$7 + ($$0138153 << 2) >> 2] = +HEAPF32[$1 + ($$0138153 << 2) >> 2] * $125;
    $$0138153 = $$0138153 + 1 | 0;
   } while (($$0138153 | 0) != ($2 | 0));
  }
 }
 $$0 = $$1144$lcssa & (1 << $121) + -1;
 return $$0 | 0;
}
function _quant_coarse_energy($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 var $$0123 = 0, $$idx = 0, $$idx126 = 0, $$sroa$0$0$copyload = 0, $$sroa$0142 = 0, $$sroa$2$0$$sroa_idx145 = 0, $$sroa$2$0$copyload = 0, $$sroa$3 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3135$0$copyload = 0, $$sroa$3148 = 0, $$sroa$4 = 0, $20 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $41 = 0, $42 = 0, $46 = 0.0, $49 = 0, $50 = 0, $51 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $75 = 0, $80 = 0, $85 = 0.0, $spec$select = 0, $spec$select124 = 0, $spec$select125 = 0.0, $storemerge = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$sroa$0142 = sp + 72 | 0;
 $$sroa$3148 = sp + 48 | 0;
 $$sroa$3 = sp + 24 | 0;
 $$sroa$4 = sp;
 if (!$12) if (!$14) {
  $20 = $2 - $1 | 0;
  if (+HEAPF32[$13 >> 2] > +(Math_imul($20 << 1, $9) | 0)) $42 = (Math_imul($20, $9) | 0) < ($11 | 0) & 1; else $42 = 0;
 } else $42 = 0; else $42 = 1;
 $35 = ~~(+HEAPF32[$13 >> 2] * +($6 >>> 0) * +($15 | 0) / +($9 << 9 | 0));
 $36 = $0 + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = +_loss_distortion($4, $5, $1, $3, $37, $9);
 $$idx = $8 + 20 | 0;
 $$idx126 = $8 + 28 | 0;
 $39 = _ec_tell_141(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx126 >> 2] | 0) | 0;
 $41 = ($39 + 3 | 0) >>> 0 > $6 >>> 0;
 $spec$select = $41 ? 0 : $42;
 $spec$select124 = $41 ? 0 : $14;
 $46 = +($11 | 0) * .125;
 $spec$select125 = ($16 | 0) == 0 ? (($2 - $1 | 0) > 10 ? ($46 > 16.0 ? 16.0 : $46) : 16.0) : 3.0;
 HEAP32[$$sroa$0142 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$sroa$0142 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$$sroa$0142 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 HEAP32[$$sroa$0142 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
 HEAP32[$$sroa$0142 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
 HEAP32[$$sroa$0142 + 20 >> 2] = HEAP32[$8 + 20 >> 2];
 $$sroa$2$0$$sroa_idx145 = $8 + 24 | 0;
 $$sroa$2$0$copyload = HEAP32[$$sroa$2$0$$sroa_idx145 >> 2] | 0;
 HEAP32[$$sroa$3148 >> 2] = HEAP32[$$idx126 >> 2];
 HEAP32[$$sroa$3148 + 4 >> 2] = HEAP32[$$idx126 + 4 >> 2];
 HEAP32[$$sroa$3148 + 8 >> 2] = HEAP32[$$idx126 + 8 >> 2];
 HEAP32[$$sroa$3148 + 12 >> 2] = HEAP32[$$idx126 + 12 >> 2];
 HEAP32[$$sroa$3148 + 16 >> 2] = HEAP32[$$idx126 + 16 >> 2];
 $49 = Math_imul($37, $9) | 0;
 $50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($49 << 2) | 0) + 15 & -16) | 0;
 $51 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($49 << 2) | 0) + 15 & -16) | 0;
 _memcpy($50 | 0, $5 | 0, $49 << 2 | 0) | 0;
 if (!($spec$select124 | $spec$select)) $$0123 = 0; else $$0123 = _quant_coarse_energy_impl($0, $1, $2, $4, $50, $6, $39, 20416 + ($10 * 84 | 0) + 42 | 0, $51, $8, $9, $10, 1, $spec$select125, $16) | 0;
 if ($spec$select | 0) {
  $75 = $9 << 2;
  _memcpy($5 | 0, $50 | 0, Math_imul($75, HEAP32[$36 >> 2] | 0) | 0) | 0;
  _memcpy($7 | 0, $51 | 0, Math_imul($75, HEAP32[$36 >> 2] | 0) | 0) | 0;
  $storemerge = $38;
  HEAPF32[$13 >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
 $59 = _ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx126 >> 2] | 0) | 0;
 $$sroa$0$0$copyload = HEAP32[$8 >> 2] | 0;
 $$sroa$3$0$$sroa_idx = $8 + 4 | 0;
 HEAP32[$$sroa$3 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx >> 2];
 HEAP32[$$sroa$3 + 4 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 4 >> 2];
 HEAP32[$$sroa$3 + 8 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 8 >> 2];
 HEAP32[$$sroa$3 + 12 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 12 >> 2];
 HEAP32[$$sroa$3 + 16 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 16 >> 2];
 $$sroa$3135$0$copyload = HEAP32[$$sroa$2$0$$sroa_idx145 >> 2] | 0;
 HEAP32[$$sroa$4 >> 2] = HEAP32[$$idx126 >> 2];
 HEAP32[$$sroa$4 + 4 >> 2] = HEAP32[$$idx126 + 4 >> 2];
 HEAP32[$$sroa$4 + 8 >> 2] = HEAP32[$$idx126 + 8 >> 2];
 HEAP32[$$sroa$4 + 12 >> 2] = HEAP32[$$idx126 + 12 >> 2];
 HEAP32[$$sroa$4 + 16 >> 2] = HEAP32[$$idx126 + 16 >> 2];
 $60 = _ec_range_bytes($$sroa$2$0$copyload) | 0;
 $62 = $$sroa$0$0$copyload + $60 | 0;
 $63 = (_ec_range_bytes($$sroa$3135$0$copyload) | 0) - $60 | 0;
 $65 = _llvm_stacksave() | 0;
 $66 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($63 | 0) == 0 ? 1 : $63) | 0) + 15 & -16) | 0;
 _memcpy($66 | 0, $62 | 0, $63 | 0) | 0;
 HEAP32[$8 >> 2] = HEAP32[$$sroa$0142 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$$sroa$0142 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$$sroa$0142 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$$sroa$0142 + 12 >> 2];
 HEAP32[$8 + 16 >> 2] = HEAP32[$$sroa$0142 + 16 >> 2];
 HEAP32[$8 + 20 >> 2] = HEAP32[$$sroa$0142 + 20 >> 2];
 HEAP32[$$sroa$2$0$$sroa_idx145 >> 2] = $$sroa$2$0$copyload;
 HEAP32[$$idx126 >> 2] = HEAP32[$$sroa$3148 >> 2];
 HEAP32[$$idx126 + 4 >> 2] = HEAP32[$$sroa$3148 + 4 >> 2];
 HEAP32[$$idx126 + 8 >> 2] = HEAP32[$$sroa$3148 + 8 >> 2];
 HEAP32[$$idx126 + 12 >> 2] = HEAP32[$$sroa$3148 + 12 >> 2];
 HEAP32[$$idx126 + 16 >> 2] = HEAP32[$$sroa$3148 + 16 >> 2];
 $68 = _quant_coarse_energy_impl($0, $1, $2, $4, $5, $6, $39, 20416 + ($10 * 84 | 0) | 0, $7, $8, $9, $10, 0, $spec$select125, $16) | 0;
 do if ($spec$select124 | 0) {
  if (($$0123 | 0) >= ($68 | 0)) {
   if (($$0123 | 0) != ($68 | 0)) break;
   if (((_ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx126 >> 2] | 0) | 0) + $35 | 0) <= ($59 | 0)) break;
  }
  HEAP32[$8 >> 2] = $$sroa$0$0$copyload;
  HEAP32[$$sroa$3$0$$sroa_idx >> 2] = HEAP32[$$sroa$3 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 4 >> 2] = HEAP32[$$sroa$3 + 4 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 8 >> 2] = HEAP32[$$sroa$3 + 8 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 12 >> 2] = HEAP32[$$sroa$3 + 12 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 16 >> 2] = HEAP32[$$sroa$3 + 16 >> 2];
  HEAP32[$$sroa$2$0$$sroa_idx145 >> 2] = $$sroa$3135$0$copyload;
  HEAP32[$$idx126 >> 2] = HEAP32[$$sroa$4 >> 2];
  HEAP32[$$idx126 + 4 >> 2] = HEAP32[$$sroa$4 + 4 >> 2];
  HEAP32[$$idx126 + 8 >> 2] = HEAP32[$$sroa$4 + 8 >> 2];
  HEAP32[$$idx126 + 12 >> 2] = HEAP32[$$sroa$4 + 12 >> 2];
  HEAP32[$$idx126 + 16 >> 2] = HEAP32[$$sroa$4 + 16 >> 2];
  _memcpy($62 | 0, $66 | 0, $63 | 0) | 0;
  $80 = $9 << 2;
  _memcpy($5 | 0, $50 | 0, Math_imul($80, HEAP32[$36 >> 2] | 0) | 0) | 0;
  _memcpy($7 | 0, $51 | 0, Math_imul($80, HEAP32[$36 >> 2] | 0) | 0) | 0;
  _llvm_stackrestore($65 | 0);
  $storemerge = $38;
  HEAPF32[$13 >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } while (0);
 _llvm_stackrestore($65 | 0);
 $85 = +HEAPF32[20752 + ($10 << 2) >> 2];
 $storemerge = $38 + $85 * $85 * +HEAPF32[$13 >> 2];
 HEAPF32[$13 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _run_prefilter($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$0182 = 0, $$0183 = 0, $$1 = 0, $$1$us = 0, $$1178 = 0.0, $$3 = 0.0, $$3180 = 0.0, $$4 = 0.0, $$4181 = 0.0, $$6 = 0.0, $$alloca_mul = 0, $$pre$phi206Z2D = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $111 = 0, $115 = 0, $117 = 0, $119 = 0.0, $12 = 0, $120 = 0, $122 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $140 = 0, $143 = 0, $145 = 0, $150 = 0, $151 = 0, $153 = 0.0, $154 = 0, $16 = 0, $166 = 0, $17 = 0, $170 = 0, $172 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $36 = 0, $37 = 0, $45 = 0.0, $46 = 0, $48 = 0.0, $50 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $72 = 0, $73 = 0.0, $83 = 0, $89 = 0, $91 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $spec$select = 0.0, $spec$select185 = 0.0, $spec$select186 = 0.0, $spec$select187 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = HEAP32[$14 + 4 >> 2] | 0;
 $17 = $4 + 1024 | 0;
 $$alloca_mul = (Math_imul($17, $3) | 0) << 2;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 HEAP32[$12 >> 2] = $19;
 HEAP32[$12 + 4 >> 2] = $19 + ($17 << 2);
 $22 = $16 + $4 | 0;
 $23 = $4 << 2;
 $$0 = 0;
 do {
  $25 = HEAP32[$12 + ($$0 << 2) >> 2] | 0;
  _memcpy($25 | 0, $2 + ($$0 << 10 << 2) | 0, 4096) | 0;
  _memcpy($25 + 4096 | 0, $1 + ((Math_imul($$0, $22) | 0) << 2) + ($16 << 2) | 0, $23 | 0) | 0;
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($3 | 0));
 if (!$9) {
  HEAP32[$13 >> 2] = 15;
  $$3 = 0.0;
  $64 = 15;
 } else {
  $36 = _llvm_stacksave() | 0;
  $37 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($17 >> 1 << 2) | 0) + 15 & -16) | 0;
  _pitch_downsample($12, $37, $17, $3);
  _pitch_search($37 + 2048 | 0, $37, $4, 979, $13);
  HEAP32[$13 >> 2] = 1024 - (HEAP32[$13 >> 2] | 0);
  $45 = +_remove_doubling($37, $4, $13, HEAP32[$0 + 104 >> 2] | 0, +HEAPF32[$0 + 108 >> 2]);
  $46 = HEAP32[$13 >> 2] | 0;
  if (($46 | 0) > 1022) {
   HEAP32[$13 >> 2] = 1022;
   $172 = 1022;
  } else $172 = $46;
  $48 = $45 * .699999988079071;
  $50 = HEAP32[$0 + 56 >> 2] | 0;
  $spec$select = ($50 | 0) > 2 ? $48 * .5 : $48;
  _llvm_stackrestore($36 | 0);
  $$3 = ($50 | 0) > 8 ? 0.0 : ($50 | 0) > 4 ? $spec$select * .5 : $spec$select;
  $64 = $172;
 }
 if (!(HEAP32[$11 >> 2] | 0)) $$4 = $$3; else $$4 = $$3 * +HEAPF32[$11 + 40 >> 2];
 $61 = $0 + 104 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $64 - $62 | 0;
 $spec$select185 = ((($63 | 0) > -1 ? $63 : 0 - $63 | 0) * 10 | 0) > ($64 | 0) ? .4000000059604645 : .20000000298023224;
 $$1178 = ($10 | 0) < 25 ? $spec$select185 + .10000000149011612 : $spec$select185;
 $spec$select186 = ($10 | 0) < 35 ? $$1178 + .10000000149011612 : $$1178;
 $72 = $0 + 108 | 0;
 $73 = +HEAPF32[$72 >> 2];
 $$3180 = $73 > .4000000059604645 ? $spec$select186 + -.10000000149011612 : $spec$select186;
 $$4181 = $73 > .550000011920929 ? $$3180 + -.10000000149011612 : $$3180;
 if ($$4 < ($$4181 > .20000000298023224 ? $$4181 : .20000000298023224)) {
  $$0182 = 0;
  $$0183 = 0;
  $$6 = 0.0;
 } else {
  $83 = +Math_abs(+($$4 - $73)) < .10000000149011612;
  $89 = ~~+Math_floor(+(($83 ? $73 : $$4) * 32.0 / 3.0 + .5)) + -1 | 0;
  $91 = ($89 | 0) < 7 ? $89 : 7;
  $spec$select187 = ($91 | 0) > 0 ? $91 : 0;
  $$0182 = 1;
  $$0183 = $spec$select187;
  $$6 = +($spec$select187 + 1 | 0) * .09375;
 }
 $96 = $14 + 44 | 0;
 $97 = $16 << 2;
 $98 = -$$6;
 $99 = $0 + 112 | 0;
 $100 = $14 + 60 | 0;
 $102 = 4096 - $23 | 0;
 $103 = 0 - $4 | 0;
 if (($4 | 0) > 1024) {
  $$1$us = 0;
  $106 = $62;
  while (1) {
   $105 = (HEAP32[$96 >> 2] | 0) - $16 | 0;
   HEAP32[$61 >> 2] = ($106 | 0) > 15 ? $106 : 15;
   $109 = $1 + ((Math_imul($$1$us, $22) | 0) << 2) | 0;
   $111 = $0 + 244 + ((Math_imul($$1$us, $16) | 0) << 2) | 0;
   _memcpy($109 | 0, $111 | 0, $97 | 0) | 0;
   if (!$105) $122 = HEAP32[$12 + ($$1$us << 2) >> 2] | 0; else {
    $115 = HEAP32[$12 + ($$1$us << 2) >> 2] | 0;
    $117 = HEAP32[$61 >> 2] | 0;
    $119 = -+HEAPF32[$72 >> 2];
    $120 = HEAP32[$99 >> 2] | 0;
    _comb_filter($109 + ($16 << 2) | 0, $115 + 4096 | 0, $117, $117, $105, $119, $119, $120, $120, 0, 0);
    $122 = $115;
   }
   _comb_filter($109 + ($16 << 2) + ($105 << 2) | 0, $122 + 4096 + ($105 << 2) | 0, HEAP32[$61 >> 2] | 0, $64, $4 - $105 | 0, -+HEAPF32[$72 >> 2], $98, HEAP32[$99 >> 2] | 0, $5, HEAP32[$100 >> 2] | 0, $16);
   _memcpy($111 | 0, $109 + ($4 << 2) | 0, $97 | 0) | 0;
   _memcpy($2 + ($$1$us << 10 << 2) | 0, $122 + ($4 << 2) | 0, 4096) | 0;
   $136 = $$1$us + 1 | 0;
   if (($136 | 0) >= ($3 | 0)) break;
   $$1$us = $136;
   $106 = HEAP32[$61 >> 2] | 0;
  }
  HEAPF32[$7 >> 2] = $$6;
  HEAP32[$6 >> 2] = $64;
  HEAP32[$8 >> 2] = $$0183;
  STACKTOP = sp;
  return $$0182 | 0;
 } else {
  $$1 = 0;
  $140 = $62;
  while (1) {
   $139 = (HEAP32[$96 >> 2] | 0) - $16 | 0;
   HEAP32[$61 >> 2] = ($140 | 0) > 15 ? $140 : 15;
   $143 = $1 + ((Math_imul($$1, $22) | 0) << 2) | 0;
   $145 = $0 + 244 + ((Math_imul($$1, $16) | 0) << 2) | 0;
   _memcpy($143 | 0, $145 | 0, $97 | 0) | 0;
   if (!$139) $$pre$phi206Z2D = (HEAP32[$12 + ($$1 << 2) >> 2] | 0) + 4096 | 0; else {
    $150 = (HEAP32[$12 + ($$1 << 2) >> 2] | 0) + 4096 | 0;
    $151 = HEAP32[$61 >> 2] | 0;
    $153 = -+HEAPF32[$72 >> 2];
    $154 = HEAP32[$99 >> 2] | 0;
    _comb_filter($143 + ($16 << 2) | 0, $150, $151, $151, $139, $153, $153, $154, $154, 0, 0);
    $$pre$phi206Z2D = $150;
   }
   _comb_filter($143 + ($16 << 2) + ($139 << 2) | 0, $$pre$phi206Z2D + ($139 << 2) | 0, HEAP32[$61 >> 2] | 0, $64, $4 - $139 | 0, -+HEAPF32[$72 >> 2], $98, HEAP32[$99 >> 2] | 0, $5, HEAP32[$100 >> 2] | 0, $16);
   _memcpy($145 | 0, $143 + ($4 << 2) | 0, $97 | 0) | 0;
   $166 = $2 + ($$1 << 10 << 2) | 0;
   _memmove($166 | 0, $166 + ($4 << 2) | 0, $102 | 0) | 0;
   _memcpy($166 + 4096 + ($103 << 2) | 0, $$pre$phi206Z2D | 0, $23 | 0) | 0;
   $170 = $$1 + 1 | 0;
   if (($170 | 0) >= ($3 | 0)) break;
   $$1 = $170;
   $140 = HEAP32[$61 >> 2] | 0;
  }
  HEAPF32[$7 >> 2] = $$6;
  HEAP32[$6 >> 2] = $64;
  HEAP32[$8 >> 2] = $$0183;
  STACKTOP = sp;
  return $$0182 | 0;
 }
 return 0;
}

function _clt_mdct_forward_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0133$lcssa = 0, $$0134$lcssa = 0, $$0134195 = 0, $$0135155 = 0, $$0136154 = 0, $$0137153 = 0, $$0138$lcssa = 0, $$0138185 = 0, $$0141$lcssa = 0, $$0141184 = 0, $$0144$lcssa = 0, $$0144183 = 0, $$0147182 = 0, $$0149181 = 0, $$0151157 = 0, $$0196 = 0, $$1$lcssa = 0, $$1139$lcssa = 0, $$1139173 = 0, $$1142$lcssa = 0, $$1142172 = 0, $$1145$lcssa = 0, $$1145171 = 0, $$1148163 = 0, $$1150162 = 0, $$1186 = 0, $$2$lcssa = 0, $$2140166 = 0, $$2143165 = 0, $$2146164 = 0, $$2174 = 0, $$3167 = 0, $$4158 = 0, $$5156 = 0, $$lcssa152 = 0, $$pre = 0, $10 = 0.0, $100 = 0.0, $103 = 0.0, $105 = 0.0, $107 = 0.0, $11 = 0, $118 = 0, $124 = 0, $125 = 0, $127 = 0.0, $13 = 0, $130 = 0.0, $132 = 0.0, $134 = 0.0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0.0, $38 = 0.0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $73 = 0, $8 = 0, $scevgep = 0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$0 + 8 + ($5 << 2) >> 2] | 0;
 $10 = +HEAPF32[$8 + 4 >> 2];
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$0 + 24 >> 2] | 0;
 $15 = $11 >> 1;
 if (($5 | 0) > 0) {
  $$0134195 = $13;
  $$0196 = 0;
  $17 = $15;
  while (1) {
   $16 = $$0134195 + ($17 << 2) | 0;
   $$0196 = $$0196 + 1 | 0;
   $19 = $17 >> 1;
   if (($$0196 | 0) == ($5 | 0)) {
    $$0133$lcssa = $17;
    $$0134$lcssa = $16;
    $$lcssa152 = $19;
    break;
   } else {
    $$0134195 = $16;
    $17 = $19;
   }
  }
 } else {
  $$0133$lcssa = $11;
  $$0134$lcssa = $13;
  $$lcssa152 = $15;
 }
 $20 = $$0133$lcssa >> 2;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$lcssa152 << 2) | 0) + 15 & -16) | 0;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($20 << 3) | 0) + 15 & -16) | 0;
 $23 = $4 >> 1;
 $24 = $1 + ($23 << 2) | 0;
 $27 = $1 + ($$lcssa152 << 2) + -4 + ($23 << 2) | 0;
 $28 = $3 + ($23 << 2) | 0;
 $30 = $4 + 3 >> 2;
 if (($4 | 0) > 0) {
  $33 = 0 - $$lcssa152 | 0;
  $$0138185 = $24;
  $$0141184 = $27;
  $$0144183 = $21;
  $$0147182 = $28;
  $$0149181 = $28 + -4 | 0;
  $$1186 = 0;
  while (1) {
   $34 = +HEAPF32[$$0149181 >> 2];
   $38 = +HEAPF32[$$0147182 >> 2];
   HEAPF32[$$0144183 >> 2] = $34 * +HEAPF32[$$0138185 + ($$lcssa152 << 2) >> 2] + $38 * +HEAPF32[$$0141184 >> 2];
   $49 = $$0144183 + 8 | 0;
   HEAPF32[$$0144183 + 4 >> 2] = $38 * +HEAPF32[$$0138185 >> 2] - $34 * +HEAPF32[$$0141184 + ($33 << 2) >> 2];
   $50 = $$0138185 + 8 | 0;
   $51 = $$0141184 + -8 | 0;
   $54 = $$1186 + 1 | 0;
   if (($54 | 0) < ($30 | 0)) {
    $$0138185 = $50;
    $$0141184 = $51;
    $$0144183 = $49;
    $$0147182 = $$0147182 + 8 | 0;
    $$0149181 = $$0149181 + -8 | 0;
    $$1186 = $54;
   } else {
    $$0138$lcssa = $50;
    $$0141$lcssa = $51;
    $$0144$lcssa = $49;
    $$1$lcssa = $54;
    break;
   }
  }
 } else {
  $$0138$lcssa = $24;
  $$0141$lcssa = $27;
  $$0144$lcssa = $21;
  $$1$lcssa = 0;
 }
 $57 = $3 + ($4 << 2) + -4 | 0;
 $58 = $20 - $30 | 0;
 if (($$1$lcssa | 0) < ($58 | 0)) {
  $60 = $20 << 1;
  $62 = $$1$lcssa + $30 << 1;
  $63 = $60 - $62 | 0;
  $scevgep = $$0144$lcssa + ($63 << 2) | 0;
  $$1139173 = $$0138$lcssa;
  $$1142172 = $$0141$lcssa;
  $$1145171 = $$0144$lcssa;
  $$2174 = $$1$lcssa;
  while (1) {
   HEAP32[$$1145171 >> 2] = HEAP32[$$1142172 >> 2];
   HEAP32[$$1145171 + 4 >> 2] = HEAP32[$$1139173 >> 2];
   $$2174 = $$2174 + 1 | 0;
   if (($$2174 | 0) == ($58 | 0)) break; else {
    $$1139173 = $$1139173 + 8 | 0;
    $$1142172 = $$1142172 + -8 | 0;
    $$1145171 = $$1145171 + 8 | 0;
   }
  }
  $$1139$lcssa = $$0138$lcssa + ($63 << 2) | 0;
  $$1142$lcssa = $$0141$lcssa + ($62 - $60 << 2) | 0;
  $$1145$lcssa = $scevgep;
  $$2$lcssa = $58;
 } else {
  $$1139$lcssa = $$0138$lcssa;
  $$1142$lcssa = $$0141$lcssa;
  $$1145$lcssa = $$0144$lcssa;
  $$2$lcssa = $$1$lcssa;
 }
 if (($$2$lcssa | 0) < ($20 | 0)) {
  $73 = 0 - $$lcssa152 | 0;
  $$1148163 = $3;
  $$1150162 = $57;
  $$2140166 = $$1139$lcssa;
  $$2143165 = $$1142$lcssa;
  $$2146164 = $$1145$lcssa;
  $$3167 = $$2$lcssa;
  while (1) {
   HEAPF32[$$2146164 >> 2] = +HEAPF32[$$1150162 >> 2] * +HEAPF32[$$2143165 >> 2] - +HEAPF32[$$1148163 >> 2] * +HEAPF32[$$2140166 + ($73 << 2) >> 2];
   HEAPF32[$$2146164 + 4 >> 2] = +HEAPF32[$$1150162 >> 2] * +HEAPF32[$$2140166 >> 2] + +HEAPF32[$$1148163 >> 2] * +HEAPF32[$$2143165 + ($$lcssa152 << 2) >> 2];
   $$3167 = $$3167 + 1 | 0;
   if (($$3167 | 0) == ($20 | 0)) break; else {
    $$1148163 = $$1148163 + 8 | 0;
    $$1150162 = $$1150162 + -8 | 0;
    $$2140166 = $$2140166 + 8 | 0;
    $$2143165 = $$2143165 + -8 | 0;
    $$2146164 = $$2146164 + 8 | 0;
   }
  }
 }
 if (($$0133$lcssa | 0) <= 3) {
  _opus_fft_impl($8, $22);
  STACKTOP = sp;
  return;
 }
 $$pre = HEAP32[$8 + 44 >> 2] | 0;
 $$0151157 = $21;
 $$4158 = 0;
 while (1) {
  $100 = +HEAPF32[$$0134$lcssa + ($$4158 << 2) >> 2];
  $103 = +HEAPF32[$$0134$lcssa + ($$4158 + $20 << 2) >> 2];
  $105 = +HEAPF32[$$0151157 >> 2];
  $107 = +HEAPF32[$$0151157 + 4 >> 2];
  $118 = HEAP16[$$pre + ($$4158 << 1) >> 1] | 0;
  HEAPF32[$22 + ($118 << 3) >> 2] = $10 * ($100 * $105 - $103 * $107);
  HEAPF32[$22 + ($118 << 3) + 4 >> 2] = $10 * ($103 * $105 + $100 * $107);
  $$4158 = $$4158 + 1 | 0;
  if (($$4158 | 0) >= ($20 | 0)) break; else $$0151157 = $$0151157 + 8 | 0;
 }
 _opus_fft_impl($8, $22);
 $124 = $6 << 1;
 $125 = 0 - $124 | 0;
 $$0135155 = $2 + ((Math_imul($$lcssa152 + -1 | 0, $6) | 0) << 2) | 0;
 $$0136154 = $2;
 $$0137153 = $22;
 $$5156 = 0;
 while (1) {
  $127 = +HEAPF32[$$0137153 + 4 >> 2];
  $130 = +HEAPF32[$$0134$lcssa + ($$5156 + $20 << 2) >> 2];
  $132 = +HEAPF32[$$0137153 >> 2];
  $134 = +HEAPF32[$$0134$lcssa + ($$5156 << 2) >> 2];
  HEAPF32[$$0136154 >> 2] = $127 * $130 - $132 * $134;
  HEAPF32[$$0135155 >> 2] = $130 * $132 + $127 * $134;
  $$5156 = $$5156 + 1 | 0;
  if (($$5156 | 0) >= ($20 | 0)) break; else {
   $$0135155 = $$0135155 + ($125 << 2) | 0;
   $$0136154 = $$0136154 + ($124 << 2) | 0;
   $$0137153 = $$0137153 + 8 | 0;
  }
 }
 STACKTOP = sp;
 return;
}
function _silk_VAD_GetNoiseLevels($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$052 = 0, $$052$1 = 0, $$052$2 = 0, $$052$3 = 0, $10 = 0, $102 = 0, $104 = 0, $109 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $146 = 0, $148 = 0, $153 = 0, $16 = 0, $163 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $2 = 0, $21 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $58 = 0, $60 = 0, $65 = 0, $75 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $sext54$3 = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select$3 = 0;
 $2 = $1 + 108 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) < 1e3) {
  HEAP32[$2 >> 2] = $3 + 1;
  $$0 = 32767 / (($3 >> 4) + 1 | 0) | 0;
 } else $$0 = 0;
 $9 = $1 + 60 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $14 = (HEAP32[$1 + 92 >> 2] | 0) + (HEAP32[$0 >> 2] | 0) | 0;
 $spec$select = $14 >>> 0 < 2147483647 ? $14 : 2147483647;
 $16 = 2147483647 / ($spec$select >>> 0) | 0;
 if (($spec$select | 0) > ($10 << 3 | 0)) $$052 = 128; else if (($spec$select | 0) < ($10 | 0)) $$052 = 1024; else {
  $21 = $10 << 16 >> 16;
  $31 = (Math_imul($16 >>> 16, $21) | 0) + (Math_imul($16, ($10 >> 15) + 1 >> 1) | 0) + ((Math_imul($16 & 65535, $21) | 0) >> 16) | 0;
  $$052 = $31 >> 16 << 11 | $31 >>> 5 & 2047;
 }
 $37 = _silk_max_int_354($$052, $$0) | 0;
 $38 = $1 + 76 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = $16 - $39 | 0;
 $42 = $37 << 16 >> 16;
 $48 = (Math_imul($40 >> 16, $42) | 0) + $39 + ((Math_imul($40 & 65535, $42) | 0) >> 16) | 0;
 HEAP32[$38 >> 2] = $48;
 $49 = 2147483647 / ($48 | 0) | 0;
 HEAP32[$9 >> 2] = ($49 | 0) < 16777215 ? $49 : 16777215;
 $52 = $1 + 64 | 0;
 $53 = HEAP32[$52 >> 2] | 0;
 $58 = (HEAP32[$1 + 96 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0;
 $spec$select$1 = $58 >>> 0 < 2147483647 ? $58 : 2147483647;
 $60 = 2147483647 / ($spec$select$1 >>> 0) | 0;
 if (($spec$select$1 | 0) > ($53 << 3 | 0)) $$052$1 = 128; else if (($spec$select$1 | 0) < ($53 | 0)) $$052$1 = 1024; else {
  $65 = $53 << 16 >> 16;
  $75 = (Math_imul($60 >>> 16, $65) | 0) + (Math_imul($60, ($53 >> 15) + 1 >> 1) | 0) + ((Math_imul($60 & 65535, $65) | 0) >> 16) | 0;
  $$052$1 = $75 >> 16 << 11 | $75 >>> 5 & 2047;
 }
 $81 = _silk_max_int_354($$052$1, $$0) | 0;
 $82 = $1 + 80 | 0;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = $60 - $83 | 0;
 $86 = $81 << 16 >> 16;
 $92 = (Math_imul($84 >> 16, $86) | 0) + $83 + ((Math_imul($84 & 65535, $86) | 0) >> 16) | 0;
 HEAP32[$82 >> 2] = $92;
 $93 = 2147483647 / ($92 | 0) | 0;
 HEAP32[$52 >> 2] = ($93 | 0) < 16777215 ? $93 : 16777215;
 $96 = $1 + 68 | 0;
 $97 = HEAP32[$96 >> 2] | 0;
 $102 = (HEAP32[$1 + 100 >> 2] | 0) + (HEAP32[$0 + 8 >> 2] | 0) | 0;
 $spec$select$2 = $102 >>> 0 < 2147483647 ? $102 : 2147483647;
 $104 = 2147483647 / ($spec$select$2 >>> 0) | 0;
 if (($spec$select$2 | 0) > ($97 << 3 | 0)) $$052$2 = 128; else if (($spec$select$2 | 0) < ($97 | 0)) $$052$2 = 1024; else {
  $109 = $97 << 16 >> 16;
  $119 = (Math_imul($104 >>> 16, $109) | 0) + (Math_imul($104, ($97 >> 15) + 1 >> 1) | 0) + ((Math_imul($104 & 65535, $109) | 0) >> 16) | 0;
  $$052$2 = $119 >> 16 << 11 | $119 >>> 5 & 2047;
 }
 $125 = _silk_max_int_354($$052$2, $$0) | 0;
 $126 = $1 + 84 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $104 - $127 | 0;
 $130 = $125 << 16 >> 16;
 $136 = (Math_imul($128 >> 16, $130) | 0) + $127 + ((Math_imul($128 & 65535, $130) | 0) >> 16) | 0;
 HEAP32[$126 >> 2] = $136;
 $137 = 2147483647 / ($136 | 0) | 0;
 HEAP32[$96 >> 2] = ($137 | 0) < 16777215 ? $137 : 16777215;
 $140 = $1 + 72 | 0;
 $141 = HEAP32[$140 >> 2] | 0;
 $146 = (HEAP32[$1 + 104 >> 2] | 0) + (HEAP32[$0 + 12 >> 2] | 0) | 0;
 $spec$select$3 = $146 >>> 0 < 2147483647 ? $146 : 2147483647;
 $148 = 2147483647 / ($spec$select$3 >>> 0) | 0;
 if (($spec$select$3 | 0) > ($141 << 3 | 0)) {
  $$052$3 = 128;
  $169 = _silk_max_int_354($$052$3, $$0) | 0;
  $170 = $1 + 88 | 0;
  $171 = HEAP32[$170 >> 2] | 0;
  $172 = $148 - $171 | 0;
  $173 = $172 >> 16;
  $sext54$3 = $169 << 16;
  $174 = $sext54$3 >> 16;
  $175 = Math_imul($173, $174) | 0;
  $176 = $172 & 65535;
  $177 = Math_imul($176, $174) | 0;
  $178 = $177 >> 16;
  $179 = $175 + $171 | 0;
  $180 = $179 + $178 | 0;
  HEAP32[$170 >> 2] = $180;
  $181 = 2147483647 / ($180 | 0) | 0;
  $182 = ($181 | 0) < 16777215;
  $183 = $182 ? $181 : 16777215;
  HEAP32[$140 >> 2] = $183;
  return;
 }
 if (($spec$select$3 | 0) < ($141 | 0)) {
  $$052$3 = 1024;
  $169 = _silk_max_int_354($$052$3, $$0) | 0;
  $170 = $1 + 88 | 0;
  $171 = HEAP32[$170 >> 2] | 0;
  $172 = $148 - $171 | 0;
  $173 = $172 >> 16;
  $sext54$3 = $169 << 16;
  $174 = $sext54$3 >> 16;
  $175 = Math_imul($173, $174) | 0;
  $176 = $172 & 65535;
  $177 = Math_imul($176, $174) | 0;
  $178 = $177 >> 16;
  $179 = $175 + $171 | 0;
  $180 = $179 + $178 | 0;
  HEAP32[$170 >> 2] = $180;
  $181 = 2147483647 / ($180 | 0) | 0;
  $182 = ($181 | 0) < 16777215;
  $183 = $182 ? $181 : 16777215;
  HEAP32[$140 >> 2] = $183;
  return;
 }
 $153 = $141 << 16 >> 16;
 $163 = (Math_imul($148 >>> 16, $153) | 0) + (Math_imul($148, ($141 >> 15) + 1 >> 1) | 0) + ((Math_imul($148 & 65535, $153) | 0) >> 16) | 0;
 $$052$3 = $163 >> 16 << 11 | $163 >>> 5 & 2047;
 $169 = _silk_max_int_354($$052$3, $$0) | 0;
 $170 = $1 + 88 | 0;
 $171 = HEAP32[$170 >> 2] | 0;
 $172 = $148 - $171 | 0;
 $173 = $172 >> 16;
 $sext54$3 = $169 << 16;
 $174 = $sext54$3 >> 16;
 $175 = Math_imul($173, $174) | 0;
 $176 = $172 & 65535;
 $177 = Math_imul($176, $174) | 0;
 $178 = $177 >> 16;
 $179 = $175 + $171 | 0;
 $180 = $179 + $178 | 0;
 HEAP32[$170 >> 2] = $180;
 $181 = 2147483647 / ($180 | 0) | 0;
 $182 = ($181 | 0) < 16777215;
 $183 = $182 ? $181 : 16777215;
 HEAP32[$140 >> 2] = $183;
 return;
}

function _quant_partition($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = +$7;
 $8 = $8 | 0;
 var $$0178$lcssa = 0, $$0178199 = 0, $$0179198 = 0, $$0180 = 0, $$0183 = 0, $$0194 = 0, $$1184 = 0, $$1195 = 0, $10 = 0, $107 = 0, $11 = 0, $111 = 0, $114 = 0, $12 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $133 = 0, $14 = 0, $140 = 0, $150 = 0, $151 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $33 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0.0, $65 = 0.0, $76 = 0, $78 = 0, $80 = 0, $83 = 0, $84 = 0, $86 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $phi$call = 0, $phi$call3 = 0, $spec$select187 = 0, $spec$select189 = 0, $spec$select192 = 0, $storemerge197 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $8;
 $12 = HEAP32[$0 >> 2] | 0;
 $14 = HEAP32[$0 + 8 >> 2] | 0;
 $16 = HEAP32[$0 + 12 >> 2] | 0;
 $18 = HEAP32[$0 + 20 >> 2] | 0;
 $20 = HEAP32[$0 + 28 >> 2] | 0;
 $22 = HEAP32[$14 + 100 >> 2] | 0;
 $24 = HEAP32[$14 + 96 >> 2] | 0;
 $27 = HEAP32[$14 + 8 >> 2] | 0;
 $33 = $22 + (HEAP16[$24 + ((Math_imul($27, $6 + 1 | 0) | 0) + $16 << 1) >> 1] | 0) | 0;
 do if (($6 | 0) == -1) {
  $124 = _bits2pulses($27, $24, $22, $16, -1, $3) | 0;
  $phi$call = $124;
  $phi$call3 = _pulses2bits($14, $16, -1, $124) | 0;
 } else {
  if (!(($2 | 0) > 2 ? ((HEAPU8[$33 + (HEAPU8[$33 >> 0] | 0) >> 0] | 0) + 12 | 0) < ($3 | 0) : 0)) {
   $122 = _bits2pulses($27, $24, $22, $16, $6, $3) | 0;
   $phi$call = $122;
   $phi$call3 = _pulses2bits($14, $16, $6, $122) | 0;
   break;
  }
  $43 = $2 >>> 1;
  $44 = $1 + ($43 << 2) | 0;
  $45 = $6 + -1 | 0;
  if (($4 | 0) == 1) HEAP32[$10 >> 2] = $8 & 1 | $8 << 1;
  $51 = $4 + 1 >> 1;
  _compute_theta($0, $11, $1, $44, $43, $9, $51, $4, $45, 0, $10);
  $57 = HEAP32[$11 + 12 >> 2] | 0;
  $59 = HEAP32[$11 + 16 >> 2] | 0;
  $61 = HEAP32[$11 + 20 >> 2] | 0;
  $63 = +(HEAP32[$11 + 4 >> 2] | 0) * .000030517578125;
  $65 = +(HEAP32[$11 + 8 >> 2] | 0) * .000030517578125;
  do if (($4 | 0) < 2 | ($59 & 16383 | 0) == 0) $$0180 = $57; else if (($59 | 0) > 8192) {
   $$0180 = $57 - ($57 >> 5 - $6) | 0;
   break;
  } else {
   $76 = $57 + ($43 << 3 >> 6 - $6) | 0;
   $$0180 = ($76 | 0) < 0 ? $76 : 0;
   break;
  } while (0);
  $78 = HEAP32[$9 >> 2] | 0;
  $80 = ($78 - $$0180 | 0) / 2 | 0;
  $spec$select187 = ($78 | 0) < ($80 | 0) ? $78 : $80;
  $spec$select192 = ($spec$select187 | 0) > 0 ? $spec$select187 : 0;
  $83 = $78 - $spec$select192 | 0;
  $84 = $0 + 32 | 0;
  $86 = (HEAP32[$84 >> 2] | 0) - $61 | 0;
  HEAP32[$84 >> 2] = $86;
  $spec$select189 = ($5 | 0) == 0 ? 0 : $5 + ($43 << 2) | 0;
  if (($spec$select192 | 0) < ($83 | 0)) {
   $107 = HEAP32[$10 >> 2] | 0;
   $111 = (_quant_partition($0, $44, $43, $83, $51, $spec$select189, $45, $65 * $7, $107 >> $51) | 0) << ($4 >> 1);
   $114 = (HEAP32[$84 >> 2] | 0) - $86 + $83 | 0;
   $$1184 = _quant_partition($0, $1, $43, (($59 | 0) != 16384 & ($114 | 0) > 24 ? $114 + -24 | 0 : 0) + $spec$select192 | 0, $51, $5, $45, $63 * $7, $107) | 0 | $111;
   STACKTOP = sp;
   return $$1184 | 0;
  } else {
   $91 = HEAP32[$10 >> 2] | 0;
   $92 = _quant_partition($0, $1, $43, $spec$select192, $51, $5, $45, $63 * $7, $91) | 0;
   $95 = (HEAP32[$84 >> 2] | 0) - $86 + $spec$select192 | 0;
   $$1184 = (_quant_partition($0, $44, $43, (($59 | 0) != 0 & ($95 | 0) > 24 ? $95 + -24 | 0 : 0) + $83 | 0, $51, $spec$select189, $45, $65 * $7, $91 >> $51) | 0) << ($4 >> 1) | $92;
   STACKTOP = sp;
   return $$1184 | 0;
  }
 } while (0);
 $126 = $0 + 32 | 0;
 $128 = (HEAP32[$126 >> 2] | 0) - $phi$call3 | 0;
 HEAP32[$126 >> 2] = $128;
 if (($128 | 0) < 0 & ($phi$call | 0) > 0) {
  $$0178199 = $phi$call;
  $$0179198 = $phi$call3;
  $storemerge197 = $128;
  while (1) {
   $132 = $$0179198 + $storemerge197 | 0;
   HEAP32[$126 >> 2] = $132;
   $133 = $$0178199 + -1 | 0;
   $$0179198 = _pulses2bits($14, $16, $6, $133) | 0;
   $storemerge197 = $132 - $$0179198 | 0;
   HEAP32[$126 >> 2] = $storemerge197;
   if (!(($storemerge197 | 0) < 0 & ($$0178199 | 0) > 1)) {
    $$0178$lcssa = $133;
    break;
   } else $$0178199 = $133;
  }
 } else $$0178$lcssa = $phi$call;
 if ($$0178$lcssa | 0) {
  $140 = _get_pulses($$0178$lcssa) | 0;
  if (!$12) {
   $$1184 = _alg_unquant($1, $2, $140, $18, $4, $20, $7) | 0;
   STACKTOP = sp;
   return $$1184 | 0;
  } else {
   $$1184 = _alg_quant($1, $2, $140, $18, $4, $20, $7, HEAP32[$0 + 4 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$1184 | 0;
  }
 }
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$1184 = 0;
  STACKTOP = sp;
  return $$1184 | 0;
 }
 $150 = (1 << $4) + -1 | 0;
 $151 = $150 & $8;
 HEAP32[$10 >> 2] = $151;
 if (!$151) {
  _memset($1 | 0, 0, $2 << 2 | 0) | 0;
  $$1184 = 0;
  STACKTOP = sp;
  return $$1184 | 0;
 }
 $155 = ($2 | 0) > 0;
 if (!$5) if ($155) {
  $156 = $0 + 40 | 0;
  $$0194 = 0;
  do {
   $158 = _celt_lcg_rand(HEAP32[$156 >> 2] | 0) | 0;
   HEAP32[$156 >> 2] = $158;
   HEAPF32[$1 + ($$0194 << 2) >> 2] = +($158 >> 20 | 0);
   $$0194 = $$0194 + 1 | 0;
  } while (($$0194 | 0) != ($2 | 0));
  $$0183 = $150;
 } else $$0183 = $150; else if ($155) {
  $163 = $0 + 40 | 0;
  $$1195 = 0;
  do {
   $165 = _celt_lcg_rand(HEAP32[$163 >> 2] | 0) | 0;
   HEAP32[$163 >> 2] = $165;
   HEAPF32[$1 + ($$1195 << 2) >> 2] = +HEAPF32[$5 + ($$1195 << 2) >> 2] + (($165 & 32768 | 0) == 0 ? -.00390625 : .00390625);
   $$1195 = $$1195 + 1 | 0;
  } while (($$1195 | 0) != ($2 | 0));
  $$0183 = $151;
 } else $$0183 = $151;
 _renormalise_vector($1, $2, $7);
 $$1184 = $$0183;
 STACKTOP = sp;
 return $$1184 | 0;
}

function _silk_A2NLSF($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0100 = 0, $$0100$ph = 0, $$0116 = 0, $$0116$ph = 0, $$095$ph$ph = 0, $$097 = 0, $$097$ph = 0, $$1$ph = 0, $$1$ph146 = 0, $$1$ph146$ph = 0, $$1$ph146$ph$be = 0, $$1105 = 0, $$1105$1 = 0, $$1105$2 = 0, $$1107 = 0, $$1107$ph = 0, $$1107$ph145 = 0, $$1107$ph145$ph = 0, $$1107$ph145$ph$be = 0, $$1111$ph = 0, $$1111$ph144 = 0, $$1111$ph144$ph = 0, $$1111$ph144$ph$be = 0, $$1115 = 0, $$1115$1 = 0, $$1121 = 0, $$1121$1 = 0, $$1121$2 = 0, $$2118 = 0, $$2118$1 = 0, $$2122 = 0, $$3109 = 0, $$3109$1 = 0, $$3109$2 = 0, $$pre = 0, $13 = 0, $14 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $5 = 0, $52 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $77 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $86 = 0, $92 = 0, $96 = 0, $or$cond3 = 0, $or$cond3$1 = 0, $or$cond3$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp + 64 | 0;
 $4 = sp;
 $5 = sp + 120 | 0;
 HEAP32[$5 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 $7 = $2 >> 1;
 _silk_A2NLSF_init($1, $3, $4, $7);
 $8 = _silk_A2NLSF_eval_poly($3, 8192, $7) | 0;
 if (($8 | 0) < 0) {
  HEAP16[$0 >> 1] = 0;
  $$1$ph = $4;
  $$1107$ph = _silk_A2NLSF_eval_poly($4, 8192, $7) | 0;
  $$1111$ph = 1;
 } else {
  $$1$ph = $3;
  $$1107$ph = $8;
  $$1111$ph = 0;
 }
 $$095$ph$ph = 0;
 $$1$ph146$ph = $$1$ph;
 $$1107$ph145$ph = $$1107$ph;
 $$1111$ph144$ph = $$1111$ph;
 L4 : while (1) {
  $$0100$ph = 0;
  $$0116$ph = 8192;
  $$097$ph = 1;
  $$1$ph146 = $$1$ph146$ph;
  $$1107$ph145 = $$1107$ph145$ph;
  $$1111$ph144 = $$1111$ph144$ph;
  L6 : while (1) {
   $$0100 = $$0100$ph;
   $$0116 = $$0116$ph;
   $$097 = $$097$ph;
   $$1107 = $$1107$ph145;
   while (1) {
    $13 = HEAP16[26736 + ($$097 << 1) >> 1] | 0;
    $14 = _silk_A2NLSF_eval_poly($$1$ph146, $13, $7) | 0;
    if (!(($$1107 | 0) > 0 | ($14 | 0) < ($$0100 | 0))) break;
    if (!(($$1107 | 0) < 0 | ($14 | 0) > (0 - $$0100 | 0))) break;
    if (($$097 | 0) > 127) break L6; else {
     $$0100 = 0;
     $$0116 = $13;
     $$097 = $$097 + 1 | 0;
     $$1107 = $14;
    }
   }
   $21 = $$0116 + $13 | 0;
   $24 = ($21 >> 1) + ($21 & 1) | 0;
   $25 = _silk_A2NLSF_eval_poly($$1$ph146, $24, $7) | 0;
   if (($$1107 | 0) < 1 & ($25 | 0) > -1) {
    $$1105 = $25;
    $$1115 = $24;
    $$1121 = -256;
    $$2118 = $$0116;
    $$3109 = $$1107;
   } else {
    $or$cond3 = ($$1107 | 0) > -1 & ($25 | 0) < 1;
    $$1105 = $or$cond3 ? $25 : $14;
    $$1115 = $or$cond3 ? $24 : $13;
    $$1121 = $or$cond3 ? -256 : -128;
    $$2118 = $or$cond3 ? $$0116 : $24;
    $$3109 = $or$cond3 ? $$1107 : $25;
   }
   $30 = $$1115 + $$2118 | 0;
   $33 = ($30 >> 1) + ($30 & 1) | 0;
   $34 = _silk_A2NLSF_eval_poly($$1$ph146, $33, $7) | 0;
   if (($$3109 | 0) < 1 & ($34 | 0) > -1) {
    $$1105$1 = $34;
    $$1115$1 = $33;
    $$1121$1 = $$1121;
    $$2118$1 = $$2118;
    $$3109$1 = $$3109;
   } else {
    $or$cond3$1 = ($$3109 | 0) > -1 & ($34 | 0) < 1;
    $$1105$1 = $or$cond3$1 ? $34 : $$1105;
    $$1115$1 = $or$cond3$1 ? $33 : $$1115;
    $$1121$1 = ($or$cond3$1 ? 0 : 64) | $$1121;
    $$2118$1 = $or$cond3$1 ? $$2118 : $33;
    $$3109$1 = $or$cond3$1 ? $$3109 : $34;
   }
   $92 = $$1115$1 + $$2118$1 | 0;
   $96 = _silk_A2NLSF_eval_poly($$1$ph146, ($92 >> 1) + ($92 & 1) | 0, $7) | 0;
   if (($$3109$1 | 0) < 1 & ($96 | 0) > -1) {
    $$1105$2 = $96;
    $$1121$2 = $$1121$1;
    $$3109$2 = $$3109$1;
   } else {
    $or$cond3$2 = ($$3109$1 | 0) > -1 & ($96 | 0) < 1;
    $$1105$2 = $or$cond3$2 ? $96 : $$1105$1;
    $$1121$2 = ($or$cond3$2 ? 0 : 32) + $$1121$1 | 0;
    $$3109$2 = $or$cond3$2 ? $$3109$1 : $96;
   }
   $$ = ($14 | 0) == 0 & 1;
   $37 = $$3109$2 - $$1105$2 | 0;
   if (((($$3109$2 | 0) > 0 ? $$3109$2 : 0 - $$3109$2 | 0) | 0) < 65536) if (!$37) $$2122 = $$1121$2; else $$2122 = ((($37 >> 1) + ($$3109$2 << 5) | 0) / ($37 | 0) | 0) + $$1121$2 | 0; else $$2122 = (($$3109$2 | 0) / ($37 >> 5 | 0) | 0) + $$1121$2 | 0;
   HEAP16[$0 + ($$1111$ph144 << 1) >> 1] = _silk_min_32_406($$2122 + ($$097 << 8) | 0) | 0;
   $52 = $$1111$ph144 + 1 | 0;
   if (($52 | 0) >= ($2 | 0)) {
    label = 26;
    break L4;
   }
   $$0100$ph = $$;
   $$0116$ph = HEAP16[26736 + ($$097 + -1 << 1) >> 1] | 0;
   $$097$ph = $$097;
   $$1$ph146 = HEAP32[$5 + (($52 & 1) << 2) >> 2] | 0;
   $$1107$ph145 = 4096 - ($52 << 12 & 8192) | 0;
   $$1111$ph144 = $52;
  }
  if ($$095$ph$ph >>> 0 > 15) break;
  _silk_bwexpander_32($1, $2, 65536 - (2 << $$095$ph$ph) | 0);
  _silk_A2NLSF_init($1, $3, $4, $7);
  $86 = _silk_A2NLSF_eval_poly($3, 8192, $7) | 0;
  if (($86 | 0) < 0) {
   HEAP16[$0 >> 1] = 0;
   $$1$ph146$ph$be = $4;
   $$1107$ph145$ph$be = _silk_A2NLSF_eval_poly($4, 8192, $7) | 0;
   $$1111$ph144$ph$be = 1;
  } else {
   $$1$ph146$ph$be = $3;
   $$1107$ph145$ph$be = $86;
   $$1111$ph144$ph$be = 0;
  }
  $$095$ph$ph = $$095$ph$ph + 1 | 0;
  $$1$ph146$ph = $$1$ph146$ph$be;
  $$1107$ph145$ph = $$1107$ph145$ph$be;
  $$1111$ph144$ph = $$1111$ph144$ph$be;
 }
 if ((label | 0) == 26) {
  STACKTOP = sp;
  return;
 }
 $69 = 32768 / ($2 + 1 | 0) | 0;
 $70 = $69 & 65535;
 HEAP16[$0 >> 1] = $70;
 if (($2 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $72 = $69 << 1;
 HEAP16[$0 + 2 >> 1] = $72;
 if (($2 | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 $$pre = $70;
 $77 = $72 & 131070;
 $82 = 2;
 while (1) {
  $79 = ($77 & 65535) + ($$pre & 65535) | 0;
  HEAP16[$0 + ($82 << 1) >> 1] = $79;
  $83 = $82 + 1 | 0;
  if (($83 | 0) == ($2 | 0)) break;
  $$pre = HEAP16[$0 >> 1] | 0;
  $77 = $79;
  $82 = $83;
 }
 STACKTOP = sp;
 return;
}

function _silk_quant_LTP_gains($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$062$lcssa99 = 0, $$06478$us = 0, $$06478$us$1 = 0, $$06478$us$2 = 0, $$06777$us = 0, $$06777$us$1 = 0, $$06777$us$2 = 0, $$068$lcssa98 = 0, $$07075$us = 0, $$07075$us$1 = 0, $$07075$us$2 = 0, $$07174$us = 0, $$07174$us$1 = 0, $$07174$us$2 = 0, $$079$us = 0, $$079$us$1 = 0, $$079$us$2 = 0, $$163$us$1 = 0, $$163$us$2 = 0, $$166$us$1 = 0, $$16976$us$2 = 0, $$173 = 0, $$2 = 0, $$2$v = 0, $10 = 0, $105 = 0, $109 = 0, $11 = 0, $12 = 0, $126 = 0, $129 = 0, $133 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $21 = 0, $25 = 0, $38 = 0, $39 = 0, $40 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 if (($8 | 0) <= 0) {
  _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
  HEAP8[$2 >> 0] = 1;
  _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
  $144 = HEAP32[$3 >> 2] | 0;
  HEAP8[$2 >> 0] = 2;
  _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
  $$062$lcssa99 = $144;
  $$068$lcssa98 = 0;
  $95 = ($8 | 0) == 2;
  $$2$v = $95 ? 1 : 2;
  $$2 = $$068$lcssa98 >>> $$2$v;
  HEAP32[$3 >> 2] = $$062$lcssa99;
  $96 = _silk_lin2log($$2) | 0;
  $97 = $96 << 16;
  $sext = $97 + -125829120 | 0;
  $98 = $sext >> 16;
  $99 = Math_imul($98, -3) | 0;
  HEAP32[$4 >> 2] = $99;
  STACKTOP = sp;
  return;
 }
 $$06478$us = HEAP32[$3 >> 2] | 0;
 $$06777$us = 0;
 $$07075$us = $6;
 $$07174$us = $5;
 $$079$us = 0;
 while (1) {
  _silk_VQ_WMat_EC_c($9 + $$079$us | 0, $10, $11, $12, $$07174$us, $$07075$us, 20992, 43906, 43898, $7, (_silk_log2lin(6229 - $$06478$us | 0) | 0) + -51 | 0, 8);
  $21 = (HEAP32[$11 >> 2] | 0) + $$06777$us | 0;
  $$06777$us = $21 >>> 0 < 2147483647 ? $21 : 2147483647;
  $25 = (HEAP32[$12 >> 2] | 0) + 51 | 0;
  if (((_silk_lin2log($25) | 0) + $$06478$us | 0) < 896) $145 = 0; else $145 = $$06478$us + -896 + (_silk_lin2log($25) | 0) | 0;
  $$079$us = $$079$us + 1 | 0;
  if (($$079$us | 0) == ($8 | 0)) break; else {
   $$06478$us = $145;
   $$07075$us = $$07075$us + 20 | 0;
   $$07174$us = $$07174$us + 100 | 0;
  }
 }
 HEAP8[$2 >> 0] = 0;
 _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
 $$06478$us$1 = HEAP32[$3 >> 2] | 0;
 $$06777$us$1 = 0;
 $$07075$us$1 = $6;
 $$07174$us$1 = $5;
 $$079$us$1 = 0;
 while (1) {
  _silk_VQ_WMat_EC_c($9 + $$079$us$1 | 0, $10, $11, $12, $$07174$us$1, $$07075$us$1, 21040, 21280, 20944, $7, (_silk_log2lin(6229 - $$06478$us$1 | 0) | 0) + -51 | 0, 16);
  $105 = (HEAP32[$11 >> 2] | 0) + $$06777$us$1 | 0;
  $$06777$us$1 = $105 >>> 0 < 2147483647 ? $105 : 2147483647;
  $109 = (HEAP32[$12 >> 2] | 0) + 51 | 0;
  if (((_silk_lin2log($109) | 0) + $$06478$us$1 | 0) < 896) $146 = 0; else $146 = $$06478$us$1 + -896 + (_silk_lin2log($109) | 0) | 0;
  $$079$us$1 = $$079$us$1 + 1 | 0;
  if (($$079$us$1 | 0) == ($8 | 0)) break; else {
   $$06478$us$1 = $146;
   $$07075$us$1 = $$07075$us$1 + 20 | 0;
   $$07174$us$1 = $$07174$us$1 + 100 | 0;
  }
 }
 if (($$06777$us$1 | 0) > ($$06777$us | 0)) {
  $$163$us$1 = $145;
  $$166$us$1 = $21;
 } else {
  HEAP8[$2 >> 0] = 1;
  _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
  $$163$us$1 = $146;
  $$166$us$1 = $$06777$us$1;
 }
 $$06478$us$2 = HEAP32[$3 >> 2] | 0;
 $$06777$us$2 = 0;
 $$07075$us$2 = $6;
 $$07174$us$2 = $5;
 $$079$us$2 = 0;
 $$16976$us$2 = 0;
 while (1) {
  _silk_VQ_WMat_EC_c($9 + $$079$us$2 | 0, $10, $11, $12, $$07174$us$2, $$07075$us$2, 21120, 21296, 20960, $7, (_silk_log2lin(6229 - $$06478$us$2 | 0) | 0) + -51 | 0, 32);
  $126 = (HEAP32[$10 >> 2] | 0) + $$16976$us$2 | 0;
  $$16976$us$2 = $126 >>> 0 < 2147483647 ? $126 : 2147483647;
  $129 = (HEAP32[$11 >> 2] | 0) + $$06777$us$2 | 0;
  $$06777$us$2 = $129 >>> 0 < 2147483647 ? $129 : 2147483647;
  $133 = (HEAP32[$12 >> 2] | 0) + 51 | 0;
  if (((_silk_lin2log($133) | 0) + $$06478$us$2 | 0) < 896) $147 = 0; else $147 = $$06478$us$2 + -896 + (_silk_lin2log($133) | 0) | 0;
  $$079$us$2 = $$079$us$2 + 1 | 0;
  if (($$079$us$2 | 0) == ($8 | 0)) break; else {
   $$06478$us$2 = $147;
   $$07075$us$2 = $$07075$us$2 + 20 | 0;
   $$07174$us$2 = $$07174$us$2 + 100 | 0;
  }
 }
 if (($$06777$us$2 | 0) > ($$166$us$1 | 0)) $$163$us$2 = $$163$us$1; else {
  HEAP8[$2 >> 0] = 2;
  _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
  $$163$us$2 = $147;
 }
 $38 = HEAP32[39184 + (HEAP8[$2 >> 0] << 2) >> 2] | 0;
 $$173 = 0;
 do {
  $39 = $1 + $$173 | 0;
  $40 = $$173 * 5 | 0;
  HEAP16[$0 + ($40 << 1) >> 1] = HEAP8[$38 + ((HEAP8[$39 >> 0] | 0) * 5 | 0) >> 0] << 7;
  HEAP16[$0 + ($40 + 1 << 1) >> 1] = HEAP8[$38 + (((HEAP8[$39 >> 0] | 0) * 5 | 0) + 1) >> 0] << 7;
  HEAP16[$0 + ($40 + 2 << 1) >> 1] = HEAP8[$38 + (((HEAP8[$39 >> 0] | 0) * 5 | 0) + 2) >> 0] << 7;
  HEAP16[$0 + ($40 + 3 << 1) >> 1] = HEAP8[$38 + (((HEAP8[$39 >> 0] | 0) * 5 | 0) + 3) >> 0] << 7;
  HEAP16[$0 + ($40 + 4 << 1) >> 1] = HEAP8[$38 + (((HEAP8[$39 >> 0] | 0) * 5 | 0) + 4) >> 0] << 7;
  $$173 = $$173 + 1 | 0;
 } while (($$173 | 0) != ($8 | 0));
 $$062$lcssa99 = $$163$us$2;
 $$068$lcssa98 = $$16976$us$2;
 $95 = ($8 | 0) == 2;
 $$2$v = $95 ? 1 : 2;
 $$2 = $$068$lcssa98 >>> $$2$v;
 HEAP32[$3 >> 2] = $$062$lcssa99;
 $96 = _silk_lin2log($$2) | 0;
 $97 = $96 << 16;
 $sext = $97 + -125829120 | 0;
 $98 = $sext >> 16;
 $99 = Math_imul($98, -3) | 0;
 HEAP32[$4 >> 2] = $99;
 STACKTOP = sp;
 return;
}

function _celt_iir($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0101$us = 0.0, $$098100$us = 0, $$1119 = 0, $$3$lcssa = 0, $$3110 = 0, $$4105$us = 0, $102 = 0, $106 = 0.0, $107 = 0.0, $114 = 0.0, $115 = 0.0, $125 = 0.0, $126 = 0.0, $139 = 0.0, $144 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 $7 = $3 + 24 | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($7 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 + 92 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 88 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 84 >> 2];
 HEAP32[$6 + 12 >> 2] = HEAP32[$1 + 80 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$6 + 28 >> 2] = HEAP32[$1 + 64 >> 2];
 HEAP32[$6 + 32 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$6 + 36 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$6 + 40 >> 2] = HEAP32[$1 + 52 >> 2];
 HEAP32[$6 + 44 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$6 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$6 + 52 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$6 + 56 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$6 + 60 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$6 + 64 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[$6 + 68 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$1 >> 2];
 $$1119 = 0;
 do {
  HEAPF32[$8 + ($$1119 << 2) >> 2] = -+HEAPF32[$4 + (23 - $$1119 << 2) >> 2];
  $$1119 = $$1119 + 1 | 0;
 } while (($$1119 | 0) != 24);
 if (($7 | 0) > 24) _memset($8 + 96 | 0, 0, $3 << 2 | 0) | 0;
 $87 = $3 + -3 | 0;
 if (($3 | 0) > 3) {
  $89 = $5 + 4 | 0;
  $90 = $5 + 8 | 0;
  $91 = $5 + 12 | 0;
  $92 = $1 + 4 | 0;
  $93 = $1 + 8 | 0;
  $$3110 = 0;
  while (1) {
   HEAP32[$5 >> 2] = HEAP32[$0 + ($$3110 << 2) >> 2];
   $96 = $$3110 | 1;
   HEAP32[$89 >> 2] = HEAP32[$0 + ($96 << 2) >> 2];
   $99 = $$3110 | 2;
   HEAP32[$90 >> 2] = HEAP32[$0 + ($99 << 2) >> 2];
   $102 = $$3110 | 3;
   HEAP32[$91 >> 2] = HEAP32[$0 + ($102 << 2) >> 2];
   _xcorr_kernel_c_127($6, $8 + ($$3110 << 2) | 0, $5);
   $106 = +HEAPF32[$5 >> 2];
   $107 = -$106;
   HEAPF32[$8 + ($$3110 + 24 << 2) >> 2] = $107;
   HEAPF32[$2 + ($$3110 << 2) >> 2] = $106;
   $114 = +HEAPF32[$89 >> 2] + +HEAPF32[$1 >> 2] * $107;
   HEAPF32[$89 >> 2] = $114;
   $115 = -$114;
   HEAPF32[$8 + ($$3110 + 25 << 2) >> 2] = $115;
   HEAPF32[$2 + ($96 << 2) >> 2] = $114;
   $125 = +HEAPF32[$90 >> 2] + +HEAPF32[$1 >> 2] * $115 + +HEAPF32[$92 >> 2] * $107;
   HEAPF32[$90 >> 2] = $125;
   $126 = -$125;
   HEAPF32[$8 + ($$3110 + 26 << 2) >> 2] = $126;
   HEAPF32[$2 + ($99 << 2) >> 2] = $125;
   $139 = +HEAPF32[$91 >> 2] + +HEAPF32[$1 >> 2] * $126 + +HEAPF32[$92 >> 2] * $115 + +HEAPF32[$93 >> 2] * $107;
   HEAPF32[$91 >> 2] = $139;
   HEAPF32[$8 + ($$3110 + 27 << 2) >> 2] = -$139;
   HEAPF32[$2 + ($102 << 2) >> 2] = $139;
   $144 = $$3110 + 4 | 0;
   if (($144 | 0) < ($87 | 0)) $$3110 = $144; else {
    $$3$lcssa = $144;
    break;
   }
  }
 } else $$3$lcssa = 0;
 if (($$3$lcssa | 0) < ($3 | 0)) {
  $$4105$us = $$3$lcssa;
  do {
   $$0101$us = +HEAPF32[$0 + ($$4105$us << 2) >> 2];
   $$098100$us = 0;
   do {
    $$0101$us = $$0101$us - +HEAPF32[$6 + ($$098100$us << 2) >> 2] * +HEAPF32[$8 + ($$098100$us + $$4105$us << 2) >> 2];
    $$098100$us = $$098100$us + 1 | 0;
   } while (($$098100$us | 0) != 24);
   HEAPF32[$8 + ($$4105$us + 24 << 2) >> 2] = $$0101$us;
   HEAPF32[$2 + ($$4105$us << 2) >> 2] = $$0101$us;
   $$4105$us = $$4105$us + 1 | 0;
  } while (($$4105$us | 0) != ($3 | 0));
 }
 HEAP32[$4 >> 2] = HEAP32[$2 + ($3 + -1 << 2) >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$2 + ($3 + -2 << 2) >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$2 + ($3 + -3 << 2) >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 + ($3 + -4 << 2) >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$2 + ($3 + -5 << 2) >> 2];
 HEAP32[$4 + 20 >> 2] = HEAP32[$2 + ($3 + -6 << 2) >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$2 + ($3 + -7 << 2) >> 2];
 HEAP32[$4 + 28 >> 2] = HEAP32[$2 + ($3 + -8 << 2) >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$2 + ($3 + -9 << 2) >> 2];
 HEAP32[$4 + 36 >> 2] = HEAP32[$2 + ($3 + -10 << 2) >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$2 + ($3 + -11 << 2) >> 2];
 HEAP32[$4 + 44 >> 2] = HEAP32[$2 + ($3 + -12 << 2) >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$2 + ($3 + -13 << 2) >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$2 + ($3 + -14 << 2) >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$2 + ($3 + -15 << 2) >> 2];
 HEAP32[$4 + 60 >> 2] = HEAP32[$2 + ($3 + -16 << 2) >> 2];
 HEAP32[$4 + 64 >> 2] = HEAP32[$2 + ($3 + -17 << 2) >> 2];
 HEAP32[$4 + 68 >> 2] = HEAP32[$2 + ($3 + -18 << 2) >> 2];
 HEAP32[$4 + 72 >> 2] = HEAP32[$2 + ($3 + -19 << 2) >> 2];
 HEAP32[$4 + 76 >> 2] = HEAP32[$2 + ($3 + -20 << 2) >> 2];
 HEAP32[$4 + 80 >> 2] = HEAP32[$2 + ($3 + -21 << 2) >> 2];
 HEAP32[$4 + 84 >> 2] = HEAP32[$2 + ($3 + -22 << 2) >> 2];
 HEAP32[$4 + 88 >> 2] = HEAP32[$2 + ($3 + -23 << 2) >> 2];
 HEAP32[$4 + 92 >> 2] = HEAP32[$2 + ($3 + -24 << 2) >> 2];
 STACKTOP = sp;
 return;
}

function _opus_repacketizer_out_range_impl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0131174 = 0, $$0132149 = 0, $$0133147 = 0, $$1134 = 0, $$1139146 = 0, $$2135$lcssa = 0, $$3136 = 0, $$3157 = 0, $$4137156 = 0, $$4142 = 0, $$4154 = 0, $$5143 = 0, $$54 = 0, $$61443 = 0, $$7153 = 0, $$lcssa193 = 0, $$pre = 0, $108 = 0, $113 = 0, $118 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $36 = 0, $41 = 0, $49 = 0, $55 = 0, $56 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $74 = 0, $80 = 0, $82 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $96 = 0, $98 = 0, label = 0;
 if (($1 | 0) <= 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 if ((HEAP32[$0 + 4 >> 2] | 0) < ($1 | 0)) {
  $$0 = -1;
  return $$0 | 0;
 }
 $9 = $0 + 200 | 0;
 L7 : do switch ($1 | 0) {
 case 1:
  {
   $13 = HEAP16[$9 >> 1] | 0;
   if (($13 | 0) < ($3 | 0)) {
    HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4;
    $$0133147 = $2 + 1 | 0;
    $$1139146 = $13 + 1 | 0;
    label = 12;
    break L7;
   } else {
    $$0 = -2;
    return $$0 | 0;
   }
   break;
  }
 case 2:
  {
   $20 = HEAP16[$0 + 202 >> 1] | 0;
   $21 = HEAP16[$9 >> 1] | 0;
   $22 = $21 << 16 >> 16;
   if ($20 << 16 >> 16 == $21 << 16 >> 16) {
    $25 = $22 << 1 | 1;
    if (($25 | 0) > ($3 | 0)) {
     $$0 = -2;
     return $$0 | 0;
    } else {
     HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4 | 1;
     $$0133147 = $2 + 1 | 0;
     $$1139146 = $25;
     label = 12;
     break L7;
    }
   } else {
    $36 = ($20 << 16 >> 16) + 2 + $22 + ($21 << 16 >> 16 > 251 & 1) | 0;
    if (($36 | 0) > ($3 | 0)) {
     $$0 = -2;
     return $$0 | 0;
    } else {
     $41 = $2 + 1 | 0;
     HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4 | 2;
     $$0133147 = $41 + (_encode_size(HEAP16[$9 >> 1] | 0, $41) | 0) | 0;
     $$1139146 = $36;
     label = 12;
     break L7;
    }
   }
   break;
  }
 default:
  {
   $129 = ($1 | 0) > 1;
   $55 = HEAP16[$9 >> 1] | 0;
   label = 14;
  }
 } while (0);
 if ((label | 0) == 12) if (($4 | 0) != 0 & ($$1139146 | 0) < ($3 | 0)) {
  $49 = HEAP16[$9 >> 1] | 0;
  if (($1 | 0) > 1) {
   $129 = 1;
   $55 = $49;
   label = 14;
  } else {
   $130 = 0;
   $82 = $49;
   label = 22;
  }
 } else {
  $$54 = $$0133147;
  $$61443 = $$1139146;
 }
 L26 : do if ((label | 0) == 14) {
  $$0131174 = 1;
  while (1) {
   if ((HEAP16[$0 + 200 + ($$0131174 << 1) >> 1] | 0) != $55 << 16 >> 16) break;
   $$0131174 = $$0131174 + 1 | 0;
   if (($$0131174 | 0) >= ($1 | 0)) {
    $130 = $129;
    $82 = $55;
    label = 22;
    break L26;
   }
  }
  $56 = $1 + -1 | 0;
  $61 = ($55 << 16 >> 16) + 2 + ($55 << 16 >> 16 > 251 ? 2 : 1) | 0;
  if (($1 | 0) > 2) {
   $63 = 1;
   $68 = $61;
   while (1) {
    $$pre = HEAP16[$0 + 200 + ($63 << 1) >> 1] | 0;
    $69 = $68 + ($$pre << 16 >> 16) + ($$pre << 16 >> 16 > 251 ? 2 : 1) | 0;
    $63 = $63 + 1 | 0;
    if (($63 | 0) == ($56 | 0)) {
     $$lcssa193 = $69;
     break;
    } else $68 = $69;
   }
  } else $$lcssa193 = $61;
  $74 = $$lcssa193 + (HEAP16[$0 + 200 + ($56 << 1) >> 1] | 0) | 0;
  if (($74 | 0) > ($3 | 0)) {
   $$0 = -2;
   return $$0 | 0;
  } else {
   HEAP8[$2 >> 0] = HEAP8[$0 >> 0] | 3;
   $80 = ($1 | 128) & 255;
   HEAP8[$2 + 1 >> 0] = $80;
   $$0132149 = 1;
   $$4142 = $74;
   $131 = $129;
   $96 = $80;
   label = 24;
   break;
  }
 } while (0);
 do if ((label | 0) == 22) {
  $84 = (Math_imul($82 << 16 >> 16, $1) | 0) + 2 | 0;
  if (($84 | 0) > ($3 | 0)) {
   $$0 = -2;
   return $$0 | 0;
  } else {
   HEAP8[$2 >> 0] = HEAP8[$0 >> 0] | 3;
   $89 = $1 & 255;
   HEAP8[$2 + 1 >> 0] = $89;
   $$0132149 = 0;
   $$4142 = $84;
   $131 = $130;
   $96 = $89;
   label = 24;
   break;
  }
 } while (0);
 if ((label | 0) == 24) {
  $$1134 = $2 + 2 | 0;
  $91 = $3 - $$4142 | 0;
  if (($4 | 0) == 0 | ($91 | 0) == 0) {
   $$3136 = $$1134;
   $$5143 = $$4142;
  } else {
   HEAP8[$2 + 1 >> 0] = $96 | 64;
   $98 = ($91 + -1 | 0) / 255 | 0;
   if (($91 | 0) > 255) {
    _memset($$1134 | 0, -1, (($98 | 0) > 1 ? $98 : 1) | 0) | 0;
    $$2135$lcssa = $2 + ((($98 | 0) > 1 ? $98 : 1) + 2) | 0;
   } else $$2135$lcssa = $$1134;
   HEAP8[$$2135$lcssa >> 0] = $91 + 255 + (Math_imul($98, -255) | 0);
   $$3136 = $$2135$lcssa + 1 | 0;
   $$5143 = $3;
  }
  if ($$0132149) {
   $108 = $1 + -1 | 0;
   if ($131) {
    $$3157 = 0;
    $$4137156 = $$3136;
    while (1) {
     $113 = $$4137156 + (_encode_size(HEAP16[$0 + 200 + ($$3157 << 1) >> 1] | 0, $$4137156) | 0) | 0;
     $$3157 = $$3157 + 1 | 0;
     if (($$3157 | 0) >= ($108 | 0)) {
      $$54 = $113;
      $$61443 = $$5143;
      break;
     } else $$4137156 = $113;
    }
   } else {
    $$54 = $$3136;
    $$61443 = $$5143;
   }
  } else {
   $$54 = $$3136;
   $$61443 = $$5143;
  }
 }
 $$4154 = 0;
 $$7153 = $$54;
 do {
  $118 = $0 + 200 + ($$4154 << 1) | 0;
  _memmove($$7153 | 0, HEAP32[$0 + 8 + ($$4154 << 2) >> 2] | 0, HEAP16[$118 >> 1] | 0) | 0;
  $$7153 = $$7153 + (HEAP16[$118 >> 1] | 0) | 0;
  $$4154 = $$4154 + 1 | 0;
 } while (($$4154 | 0) != ($1 | 0));
 if (!(($4 | 0) != 0 & $$7153 >>> 0 < ($2 + $3 | 0) >>> 0)) {
  $$0 = $$61443;
  return $$0 | 0;
 }
 _memset($$7153 | 0, 0, $2 + ($3 - $$7153) | 0) | 0;
 $$0 = $$61443;
 return $$0 | 0;
}

function _silk_resampler_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$sink = 0, $30 = 0, $39 = 0, $41 = 0, $42 = 0, $48 = 0, $76 = 0, $79 = 0, $80 = 0, $storemerge = 0;
 _memset($0 | 0, 0, 300) | 0;
 if (!$3) {
  L3 : do if (($1 | 0) < 12e3) {
   switch ($1 | 0) {
   case 8e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 101);
  } else if (($1 | 0) < 16e3) {
   switch ($1 | 0) {
   case 12e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 101);
  } else {
   switch ($1 | 0) {
   case 16e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 101);
  } while (0);
  L13 : do if (($2 | 0) < 16e3) if (($2 | 0) < 12e3) {
   switch ($2 | 0) {
   case 8e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 101);
  } else {
   switch ($2 | 0) {
   case 12e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 101);
  } else {
   if (($2 | 0) < 24e3) {
    switch ($2 | 0) {
    case 16e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 101);
   }
   if (($2 | 0) < 48e3) {
    switch ($2 | 0) {
    case 24e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 101);
   } else {
    switch ($2 | 0) {
    case 48e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 101);
   }
  } while (0);
  $$sink = (($2 >>> 12) - (($2 | 0) > 16e3 & 1) >> (($2 | 0) > 24e3 & 1)) + -1 + (45430 + ((($1 >>> 12) + -1 | 0) * 5 | 0)) | 0;
 } else {
  L32 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
   switch ($1 | 0) {
   case 8e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 94);
  } else {
   switch ($1 | 0) {
   case 12e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 94);
  } else {
   if (($1 | 0) < 24e3) {
    switch ($1 | 0) {
    case 16e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 94);
   }
   if (($1 | 0) < 48e3) {
    switch ($1 | 0) {
    case 24e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 94);
   } else {
    switch ($1 | 0) {
    case 48e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(47580, 45398, 94);
   }
  } while (0);
  L50 : do if (($2 | 0) < 12e3) {
   switch ($2 | 0) {
   case 8e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 94);
  } else if (($2 | 0) < 16e3) {
   switch ($2 | 0) {
   case 12e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 94);
  } else {
   switch ($2 | 0) {
   case 16e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(47580, 45398, 94);
  } while (0);
  $$sink = ($2 >>> 12) + -1 + (45415 + (((($1 >>> 12) - (($1 | 0) > 16e3 & 1) >> (($1 | 0) > 24e3 & 1)) + -1 | 0) * 3 | 0)) | 0;
 }
 HEAP32[$0 + 292 >> 2] = HEAP8[$$sink >> 0];
 $30 = ($1 >>> 0) / 1e3 | 0;
 HEAP32[$0 + 284 >> 2] = $30;
 HEAP32[$0 + 288 >> 2] = ($2 >>> 0) / 1e3 | 0;
 HEAP32[$0 + 268 >> 2] = $30 * 10;
 do if (($2 | 0) > ($1 | 0)) {
  $39 = $0 + 264 | 0;
  if (($1 << 1 | 0) == ($2 | 0)) {
   HEAP32[$39 >> 2] = 1;
   $$0 = 0;
   break;
  } else {
   HEAP32[$39 >> 2] = 2;
   $$0 = 1;
   break;
  }
 } else {
  $41 = $0 + 264 | 0;
  if (($2 | 0) >= ($1 | 0)) {
   HEAP32[$41 >> 2] = 0;
   $$0 = 0;
   break;
  }
  HEAP32[$41 >> 2] = 3;
  $42 = $2 << 2;
  if (($42 | 0) == ($1 * 3 | 0)) {
   HEAP32[$0 + 280 >> 2] = 3;
   HEAP32[$0 + 276 >> 2] = 18;
   HEAP32[$0 + 296 >> 2] = 27280;
   $$0 = 0;
   break;
  }
  $48 = $2 * 3 | 0;
  if (($48 | 0) == ($1 << 1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 2;
   HEAP32[$0 + 276 >> 2] = 18;
   HEAP32[$0 + 296 >> 2] = 27344;
   $$0 = 0;
   break;
  }
  if (($2 << 1 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 24;
   HEAP32[$0 + 296 >> 2] = 27392;
   $$0 = 0;
   break;
  }
  if (($48 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27424;
   $$0 = 0;
   break;
  }
  if (($42 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27472;
   $$0 = 0;
   break;
  }
  if (($2 * 6 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27520;
   $$0 = 0;
   break;
  } else _celt_fatal(47580, 45398, 154);
 } while (0);
 $76 = $2 << 16 >> 16;
 $79 = (($2 >>> 15) + 1 | 0) >>> 1;
 $80 = $1 << $$0;
 $storemerge = (($1 << ($$0 | 14) | 0) / ($2 | 0) | 0) << 2;
 while (1) if (((Math_imul($storemerge >> 16, $76) | 0) + (Math_imul($storemerge, $79) | 0) + ((Math_imul($storemerge & 65535, $76) | 0) >> 16) | 0) < ($80 | 0)) $storemerge = $storemerge + 1 | 0; else break;
 HEAP32[$0 + 272 >> 2] = $storemerge;
 return;
}

function _alloc_trim_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = +$9;
 $10 = $10 | 0;
 $11 = +$11;
 $12 = $12 | 0;
 var $$0103$us = 0.0, $$0105$ = 0.0, $$0105$lcssa = 0.0, $$01059 = 0.0, $$0107$us = 0, $$0108 = 0.0, $$110 = 0, $$1104$lcssa$lcssa = 0.0, $$11046$us = 0.0, $$1109 = 0.0, $$2110 = 0.0, $$27$us = 0, $$pre = 0, $101 = 0.0, $102 = 0, $107 = 0, $114 = 0.0, $116 = 0.0, $118 = 0, $119 = 0, $120 = 0, $131 = 0.0, $133 = 0.0, $135 = 0.0, $141 = 0.0, $142 = 0.0, $148 = 0.0, $150 = 0.0, $155 = 0.0, $157 = 0.0, $160 = 0, $162 = 0, $164 = 0, $180 = 0.0, $181 = 0, $187 = 0.0, $193 = 0.0, $194 = 0, $198 = 0.0, $199 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $22 = 0, $24 = 0, $25 = 0, $31 = 0, $35 = 0.0, $36 = 0, $42 = 0, $46 = 0.0, $47 = 0, $53 = 0, $57 = 0.0, $58 = 0, $64 = 0, $68 = 0.0, $69 = 0, $75 = 0, $79 = 0.0, $80 = 0, $86 = 0, $90 = 0.0, $91 = 0, $97 = 0, $phitmp = 0, $phitmp1 = 0, $spec$select = 0;
 if (($12 | 0) < 64e3) $$0108 = 4.0; else $$0108 = ($12 | 0) < 8e4 ? +($12 + -64e3 >> 10 | 0) * .0625 + 4.0 : 5.0;
 if (($5 | 0) == 2) {
  $22 = HEAP32[$0 + 32 >> 2] | 0;
  $24 = HEAP16[$22 >> 1] | 0;
  $25 = $24 << $4;
  $31 = HEAP16[$22 + 2 >> 1] | 0;
  $35 = +_celt_inner_prod_c_23($1 + ($25 << 2) | 0, $1 + ($25 + $6 << 2) | 0, $31 - $24 << $4) + 0.0;
  $36 = $31 << $4;
  $42 = HEAP16[$22 + 4 >> 1] | 0;
  $46 = $35 + +_celt_inner_prod_c_23($1 + ($36 << 2) | 0, $1 + ($36 + $6 << 2) | 0, $42 - $31 << $4);
  $47 = $42 << $4;
  $53 = HEAP16[$22 + 6 >> 1] | 0;
  $57 = $46 + +_celt_inner_prod_c_23($1 + ($47 << 2) | 0, $1 + ($47 + $6 << 2) | 0, $53 - $42 << $4);
  $58 = $53 << $4;
  $64 = HEAP16[$22 + 8 >> 1] | 0;
  $68 = $57 + +_celt_inner_prod_c_23($1 + ($58 << 2) | 0, $1 + ($58 + $6 << 2) | 0, $64 - $53 << $4);
  $69 = $64 << $4;
  $75 = HEAP16[$22 + 10 >> 1] | 0;
  $79 = $68 + +_celt_inner_prod_c_23($1 + ($69 << 2) | 0, $1 + ($69 + $6 << 2) | 0, $75 - $64 << $4);
  $80 = $75 << $4;
  $86 = HEAP16[$22 + 12 >> 1] | 0;
  $90 = $79 + +_celt_inner_prod_c_23($1 + ($80 << 2) | 0, $1 + ($80 + $6 << 2) | 0, $86 - $75 << $4);
  $91 = $86 << $4;
  $97 = HEAP16[$22 + 14 >> 1] | 0;
  $101 = $90 + +_celt_inner_prod_c_23($1 + ($91 << 2) | 0, $1 + ($91 + $6 << 2) | 0, $97 - $86 << $4);
  $102 = $97 << $4;
  $107 = HEAP16[$22 + 16 >> 1] | 0;
  $114 = +Math_abs(+(($101 + +_celt_inner_prod_c_23($1 + ($102 << 2) | 0, $1 + ($102 + $6 << 2) | 0, ($107 << 16 >> 16) - $97 << $4)) * .125));
  $116 = $114 > 1.0 ? 1.0 : $114;
  if (($10 | 0) > 8) {
   $$01059 = $116;
   $$110 = 8;
   $119 = $107;
   while (1) {
    $118 = $119 << 16 >> 16;
    $120 = $118 << $4;
    $$110 = $$110 + 1 | 0;
    $119 = HEAP16[$22 + ($$110 << 1) >> 1] | 0;
    $131 = +Math_abs(+(+_celt_inner_prod_c_23($1 + ($120 << 2) | 0, $1 + ($120 + $6 << 2) | 0, ($119 << 16 >> 16) - $118 << $4)));
    $$0105$ = $$01059 < $131 ? $$01059 : $131;
    if (($$110 | 0) == ($10 | 0)) {
     $$0105$lcssa = $$0105$;
     break;
    } else $$01059 = $$0105$;
   }
  } else $$0105$lcssa = $116;
  $133 = +Math_abs(+$$0105$lcssa);
  $135 = $133 > 1.0 ? 1.0 : $133;
  $141 = +Math_log(+(1.0010000467300415 - $116 * $116)) * 1.4426950408889634;
  $142 = $141 * .5;
  $148 = +Math_log(+(1.0010000467300415 - $135 * $135)) * 1.4426950408889634;
  $150 = $141 * .75;
  $155 = +HEAPF32[$8 >> 2] + .25;
  $157 = -(($142 > $148 ? $142 : $148) * .5);
  HEAPF32[$8 >> 2] = $155 < $157 ? $155 : $157;
  $$1109 = $$0108 + ($150 < -4.0 ? -4.0 : $150);
 } else $$1109 = $$0108;
 $160 = $3 + -1 | 0;
 $162 = 2 - $3 | 0;
 if (($3 | 0) > 1) {
  $$pre = HEAP32[$0 + 8 >> 2] | 0;
  $$0103$us = 0.0;
  $$0107$us = 0;
  while (1) {
   $164 = Math_imul($$pre, $$0107$us) | 0;
   $$11046$us = $$0103$us;
   $$27$us = 0;
   do {
    $$11046$us = $$11046$us + +HEAPF32[$2 + ($164 + $$27$us << 2) >> 2] * +($162 + ($$27$us << 1) | 0);
    $$27$us = $$27$us + 1 | 0;
   } while (($$27$us | 0) != ($160 | 0));
   $$0107$us = $$0107$us + 1 | 0;
   if (($$0107$us | 0) >= ($5 | 0)) {
    $$1104$lcssa$lcssa = $$11046$us;
    break;
   } else $$0103$us = $$11046$us;
  }
 } else $$1104$lcssa$lcssa = 0.0;
 $180 = ($$1104$lcssa$lcssa / +(Math_imul($160, $5) | 0) + 1.0) / 6.0;
 $181 = $180 > 2.0;
 $phitmp = $180 < -2.0;
 $187 = $$1109 - ($phitmp | $181 ? ($phitmp & ($181 ^ 1) ? -2.0 : 2.0) : $180) - $11 - $9 * 2.0;
 if (!(HEAP32[$7 >> 2] | 0)) {
  $$2110 = $187;
  $198 = $$2110 + .5;
  $199 = +Math_floor(+$198);
  $200 = ~~$199;
  $201 = ($200 | 0) < 10;
  $202 = $201 ? $200 : 10;
  $203 = ($202 | 0) > 0;
  $spec$select = $203 ? $202 : 0;
  return $spec$select | 0;
 }
 $193 = (+HEAPF32[$7 + 8 >> 2] + .05000000074505806) * 2.0;
 $194 = $193 > 2.0;
 $phitmp1 = $193 < -2.0;
 $$2110 = $187 - ($phitmp1 | $194 ? ($phitmp1 & ($194 ^ 1) ? -2.0 : 2.0) : $193);
 $198 = $$2110 + .5;
 $199 = +Math_floor(+$198);
 $200 = ~~$199;
 $201 = ($200 | 0) < 10;
 $202 = $201 ? $200 : 10;
 $203 = ($202 | 0) > 0;
 $spec$select = $203 ? $202 : 0;
 return $spec$select | 0;
}

function _silk_encode_indices($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0106112 = 0, $$0107 = 0, $$0117 = 0, $$1113 = 0, $$pre$phi121Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $113 = 0, $116 = 0, $119 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $128 = 0, $132 = 0, $141 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $20 = 0, $22 = 0, $24 = 0, $32 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $58 = 0, $6 = 0, $60 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, label = 0, sp = 0, $$1113$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = ($3 | 0) != 0;
 $$0107 = $7 ? $0 + 6100 + ($2 * 36 | 0) | 0 : $0 + 4736 | 0;
 $10 = $$0107 + 29 | 0;
 $17 = (HEAP8[$10 >> 0] << 1) + (HEAP8[$$0107 + 30 >> 0] | 0) | 0;
 if ($17 >>> 0 >= 6) _celt_fatal(43256, 43308, 59);
 $20 = ($17 | 0) > 1;
 if (!(($3 | 0) == 0 | $20)) _celt_fatal(43330, 43308, 60);
 if ($7 | $20) _ec_enc_icdf($1, $17 + -2 | 0, 43931, 8); else _ec_enc_icdf($1, $17, 43935, 8);
 $22 = ($4 | 0) == 2;
 $24 = HEAP8[$$0107 >> 0] | 0;
 if ($22) _ec_enc_icdf($1, $24, 20848, 8); else {
  _ec_enc_icdf($1, $24 >> 3, 20816 + (HEAP8[$10 >> 0] << 3) | 0, 8);
  _ec_enc_icdf($1, HEAP8[$$0107 >> 0] & 7, 43960, 8);
 }
 $32 = $0 + 4580 | 0;
 if ((HEAP32[$32 >> 2] | 0) > 1) {
  $$0117 = 1;
  do {
   _ec_enc_icdf($1, HEAP8[$$0107 + $$0117 >> 0] | 0, 20848, 8);
   $$0117 = $$0117 + 1 | 0;
  } while (($$0117 | 0) < (HEAP32[$32 >> 2] | 0));
 }
 $41 = $$0107 + 8 | 0;
 $44 = $0 + 4692 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 _ec_enc_icdf($1, HEAP8[$41 >> 0] | 0, (HEAP32[$45 + 16 >> 2] | 0) + (Math_imul(HEAP8[$10 >> 0] >> 1, HEAP16[$45 >> 1] | 0) | 0) | 0, 8);
 _silk_NLSF_unpack($5, $6, HEAP32[$44 >> 2] | 0, HEAP8[$41 >> 0] | 0);
 $58 = HEAP32[$44 >> 2] | 0;
 $60 = HEAP16[$58 + 2 >> 1] | 0;
 if ((HEAP32[$0 + 4640 >> 2] | 0) != ($60 << 16 >> 16 | 0)) _celt_fatal(43384, 43308, 93);
 if ($60 << 16 >> 16 > 0) {
  $$1113 = 0;
  $72 = $58;
  do {
   $$1113$looptemp = $$1113;
   $$1113 = $$1113 + 1 | 0;
   $67 = $$0107 + 8 + $$1113 | 0;
   $68 = HEAP8[$67 >> 0] | 0;
   $69 = $68 << 24 >> 24;
   do if ($68 << 24 >> 24 > 3) {
    _ec_enc_icdf($1, 8, (HEAP32[$72 + 28 >> 2] | 0) + (HEAP16[$5 + ($$1113$looptemp << 1) >> 1] | 0) | 0, 8);
    _ec_enc_icdf($1, (HEAP8[$67 >> 0] | 0) + -4 | 0, 43968, 8);
   } else if ($68 << 24 >> 24 < -3) {
    _ec_enc_icdf($1, 0, (HEAP32[$72 + 28 >> 2] | 0) + (HEAP16[$5 + ($$1113$looptemp << 1) >> 1] | 0) | 0, 8);
    _ec_enc_icdf($1, -4 - (HEAP8[$67 >> 0] | 0) | 0, 43968, 8);
    break;
   } else {
    _ec_enc_icdf($1, $69 + 4 | 0, (HEAP32[$72 + 28 >> 2] | 0) + (HEAP16[$5 + ($$1113$looptemp << 1) >> 1] | 0) | 0, 8);
    break;
   } while (0);
   $72 = HEAP32[$44 >> 2] | 0;
  } while (($$1113 | 0) < (HEAP16[$72 + 2 >> 1] | 0));
 }
 if ((HEAP32[$32 >> 2] | 0) == 4) _ec_enc_icdf($1, HEAP8[$$0107 + 31 >> 0] | 0, 43937, 8);
 if ((HEAP8[$10 >> 0] | 0) != 2) {
  $160 = HEAP8[$10 >> 0] | 0;
  $161 = $160 << 24 >> 24;
  $162 = $0 + 5768 | 0;
  HEAP32[$162 >> 2] = $161;
  $163 = $$0107 + 34 | 0;
  $164 = HEAP8[$163 >> 0] | 0;
  $165 = $164 << 24 >> 24;
  _ec_enc_icdf($1, $165, 43945, 8);
  STACKTOP = sp;
  return;
 }
 if ($22) if ((HEAP32[$0 + 5768 >> 2] | 0) == 2) {
  $113 = $$0107 + 26 | 0;
  $116 = $0 + 5772 | 0;
  $119 = (HEAP16[$113 >> 1] | 0) - (HEAP16[$116 >> 1] | 0) | 0;
  $120 = ($119 + 8 | 0) >>> 0 > 19;
  _ec_enc_icdf($1, $120 ? 0 : $119 + 9 | 0, 25040, 8);
  if ($120) label = 30; else {
   $$pre$phi121Z2D = $116;
   $$pre$phiZ2D = $113;
  }
 } else label = 30; else label = 30;
 if ((label | 0) == 30) {
  $122 = $$0107 + 26 | 0;
  $124 = HEAP16[$122 >> 1] | 0;
  $127 = HEAP32[$0 + 4576 >> 2] >> 1;
  $128 = ($124 | 0) / ($127 | 0) | 0;
  $132 = $124 - (Math_imul($128 << 16 >> 16, $127 << 16 >> 16) | 0) | 0;
  _ec_enc_icdf($1, $128, 25008, 8);
  _ec_enc_icdf($1, $132, HEAP32[$0 + 4684 >> 2] | 0, 8);
  $$pre$phi121Z2D = $0 + 5772 | 0;
  $$pre$phiZ2D = $122;
 }
 HEAP16[$$pre$phi121Z2D >> 1] = HEAP16[$$pre$phiZ2D >> 1] | 0;
 _ec_enc_icdf($1, HEAP8[$$0107 + 28 >> 0] | 0, HEAP32[$0 + 4688 >> 2] | 0, 8);
 $141 = $$0107 + 32 | 0;
 _ec_enc_icdf($1, HEAP8[$141 >> 0] | 0, 43887, 8);
 if ((HEAP32[$32 >> 2] | 0) > 0) {
  $$0106112 = 0;
  do {
   _ec_enc_icdf($1, HEAP8[$$0107 + 4 + $$0106112 >> 0] | 0, HEAP32[39172 + (HEAP8[$141 >> 0] << 2) >> 2] | 0, 8);
   $$0106112 = $$0106112 + 1 | 0;
  } while (($$0106112 | 0) < (HEAP32[$32 >> 2] | 0));
 }
 if ($4 | 0) {
  $160 = HEAP8[$10 >> 0] | 0;
  $161 = $160 << 24 >> 24;
  $162 = $0 + 5768 | 0;
  HEAP32[$162 >> 2] = $161;
  $163 = $$0107 + 34 | 0;
  $164 = HEAP8[$163 >> 0] | 0;
  $165 = $164 << 24 >> 24;
  _ec_enc_icdf($1, $165, 43945, 8);
  STACKTOP = sp;
  return;
 }
 _ec_enc_icdf($1, HEAP8[$$0107 + 33 >> 0] | 0, 43928, 8);
 $160 = HEAP8[$10 >> 0] | 0;
 $161 = $160 << 24 >> 24;
 $162 = $0 + 5768 | 0;
 HEAP32[$162 >> 2] = $161;
 $163 = $$0107 + 34 | 0;
 $164 = HEAP8[$163 >> 0] | 0;
 $165 = $164 << 24 >> 24;
 _ec_enc_icdf($1, $165, 43945, 8);
 STACKTOP = sp;
 return;
}

function _xcorr_kernel_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$0138$lcssa = 0, $$0138152 = 0, $$0141$lcssa = 0, $$0141151 = 0, $$0142$lcssa = 0.0, $$0142150 = 0.0, $$0144$lcssa = 0.0, $$0146$lcssa = 0.0, $$0146149 = 0.0, $$0147$lcssa = 0.0, $$0147148 = 0.0, $$0153 = 0, $$1 = 0, $$1139 = 0, $$1143 = 0.0, $$1145 = 0.0, $$2 = 0, $$2140 = 0, $10 = 0.0, $101 = 0.0, $105 = 0, $109 = 0, $11 = 0, $113 = 0, $118 = 0.0, $119 = 0.0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0.0, $31 = 0.0, $32 = 0.0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $41 = 0.0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $53 = 0.0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $6 = 0.0, $61 = 0.0, $75 = 0, $78 = 0.0, $8 = 0.0, $80 = 0.0, $84 = 0, $88 = 0, $9 = 0, $92 = 0, $99 = 0.0;
 if (($3 | 0) <= 2) _celt_fatal(41569, 41594, 69);
 $6 = +HEAPF32[$1 >> 2];
 $8 = +HEAPF32[$1 + 4 >> 2];
 $9 = $1 + 12 | 0;
 $10 = +HEAPF32[$1 + 8 >> 2];
 $11 = $3 + -3 | 0;
 if (($3 | 0) == 3) {
  $$0$lcssa = $0;
  $$0138$lcssa = $9;
  $$0141$lcssa = 0;
  $$0142$lcssa = $6;
  $$0144$lcssa = 0.0;
  $$0146$lcssa = $10;
  $$0147$lcssa = $8;
 } else {
  $13 = $2 + 4 | 0;
  $14 = $2 + 8 | 0;
  $15 = $2 + 12 | 0;
  $18 = (($11 | 0) > 4 ? $11 : 4) + -1 & -4;
  $19 = $18 + 4 | 0;
  $$0138152 = $9;
  $$0141151 = 0;
  $$0142150 = $6;
  $$0146149 = $10;
  $$0147148 = $8;
  $$0153 = $0;
  $26 = +HEAPF32[$2 >> 2];
  $29 = +HEAPF32[$13 >> 2];
  $32 = +HEAPF32[$14 >> 2];
  $35 = +HEAPF32[$15 >> 2];
  while (1) {
   $21 = +HEAPF32[$$0153 >> 2];
   $23 = +HEAPF32[$$0138152 >> 2];
   $25 = $$0142150 * $21 + $26;
   HEAPF32[$2 >> 2] = $25;
   $28 = $$0147148 * $21 + $29;
   HEAPF32[$13 >> 2] = $28;
   $31 = $$0146149 * $21 + $32;
   HEAPF32[$14 >> 2] = $31;
   $34 = $21 * $23 + $35;
   HEAPF32[$15 >> 2] = $34;
   $37 = +HEAPF32[$$0153 + 4 >> 2];
   $$0142150 = +HEAPF32[$$0138152 + 4 >> 2];
   $41 = $25 + $$0147148 * $37;
   HEAPF32[$2 >> 2] = $41;
   $43 = $28 + $$0146149 * $37;
   HEAPF32[$13 >> 2] = $43;
   $45 = $31 + $23 * $37;
   HEAPF32[$14 >> 2] = $45;
   $47 = $34 + $37 * $$0142150;
   HEAPF32[$15 >> 2] = $47;
   $49 = +HEAPF32[$$0153 + 8 >> 2];
   $$0147148 = +HEAPF32[$$0138152 + 8 >> 2];
   $53 = $41 + $$0146149 * $49;
   HEAPF32[$2 >> 2] = $53;
   $55 = $43 + $23 * $49;
   HEAPF32[$13 >> 2] = $55;
   $57 = $45 + $$0142150 * $49;
   HEAPF32[$14 >> 2] = $57;
   $59 = $47 + $49 * $$0147148;
   HEAPF32[$15 >> 2] = $59;
   $61 = +HEAPF32[$$0153 + 12 >> 2];
   $$0146149 = +HEAPF32[$$0138152 + 12 >> 2];
   $26 = $53 + $23 * $61;
   HEAPF32[$2 >> 2] = $26;
   $29 = $55 + $$0142150 * $61;
   HEAPF32[$13 >> 2] = $29;
   $32 = $57 + $$0147148 * $61;
   HEAPF32[$14 >> 2] = $32;
   $35 = $59 + $61 * $$0146149;
   HEAPF32[$15 >> 2] = $35;
   $$0141151 = $$0141151 + 4 | 0;
   if (($$0141151 | 0) >= ($11 | 0)) break; else {
    $$0138152 = $$0138152 + 16 | 0;
    $$0153 = $$0153 + 16 | 0;
   }
  }
  $$0$lcssa = $0 + ($19 << 2) | 0;
  $$0138$lcssa = $1 + ($18 + 7 << 2) | 0;
  $$0141$lcssa = $19;
  $$0142$lcssa = $$0142150;
  $$0144$lcssa = $23;
  $$0146$lcssa = $$0146149;
  $$0147$lcssa = $$0147148;
 }
 $75 = $$0141$lcssa | 1;
 if (($$0141$lcssa | 0) < ($3 | 0)) {
  $78 = +HEAPF32[$$0$lcssa >> 2];
  $80 = +HEAPF32[$$0138$lcssa >> 2];
  HEAPF32[$2 >> 2] = $$0142$lcssa * $78 + +HEAPF32[$2 >> 2];
  $84 = $2 + 4 | 0;
  HEAPF32[$84 >> 2] = $$0147$lcssa * $78 + +HEAPF32[$84 >> 2];
  $88 = $2 + 8 | 0;
  HEAPF32[$88 >> 2] = $$0146$lcssa * $78 + +HEAPF32[$88 >> 2];
  $92 = $2 + 12 | 0;
  HEAPF32[$92 >> 2] = $78 * $80 + +HEAPF32[$92 >> 2];
  $$1 = $$0$lcssa + 4 | 0;
  $$1139 = $$0138$lcssa + 4 | 0;
  $$1145 = $80;
 } else {
  $$1 = $$0$lcssa;
  $$1139 = $$0138$lcssa;
  $$1145 = $$0144$lcssa;
 }
 if (($75 | 0) < ($3 | 0)) {
  $99 = +HEAPF32[$$1 >> 2];
  $101 = +HEAPF32[$$1139 >> 2];
  HEAPF32[$2 >> 2] = $$0147$lcssa * $99 + +HEAPF32[$2 >> 2];
  $105 = $2 + 4 | 0;
  HEAPF32[$105 >> 2] = $$0146$lcssa * $99 + +HEAPF32[$105 >> 2];
  $109 = $2 + 8 | 0;
  HEAPF32[$109 >> 2] = $$1145 * $99 + +HEAPF32[$109 >> 2];
  $113 = $2 + 12 | 0;
  HEAPF32[$113 >> 2] = $99 * $101 + +HEAPF32[$113 >> 2];
  $$1143 = $101;
  $$2 = $$1 + 4 | 0;
  $$2140 = $$1139 + 4 | 0;
 } else {
  $$1143 = $$0142$lcssa;
  $$2 = $$1;
  $$2140 = $$1139;
 }
 if (($75 + 1 | 0) >= ($3 | 0)) return;
 $118 = +HEAPF32[$$2 >> 2];
 $119 = +HEAPF32[$$2140 >> 2];
 HEAPF32[$2 >> 2] = $$0146$lcssa * $118 + +HEAPF32[$2 >> 2];
 $123 = $2 + 4 | 0;
 HEAPF32[$123 >> 2] = $$1145 * $118 + +HEAPF32[$123 >> 2];
 $127 = $2 + 8 | 0;
 HEAPF32[$127 >> 2] = $$1143 * $118 + +HEAPF32[$127 >> 2];
 $131 = $2 + 12 | 0;
 HEAPF32[$131 >> 2] = $118 * $119 + +HEAPF32[$131 >> 2];
 return;
}

function _silk_NLSF_stabilize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0$lcssa = 0, $$0152$lcssa = 0, $$0153$lcssa = 0, $$0153184 = 0, $$0154183 = 0, $$0157201 = 0, $$0160$lcssa = 0, $$0160182 = 0, $$1155180 = 0, $$2156179 = 0, $$226 = 0, $10 = 0, $106 = 0, $109 = 0, $11 = 0, $113 = 0, $16 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $93 = 0, $spec$select = 0, $spec$select165 = 0, $spec$select166 = 0, $spec$select169 = 0, label = 0, $16$looptemp = 0;
 $3 = ($2 | 0) > 1;
 $4 = $2 + -1 | 0;
 $5 = $0 + ($4 << 1) | 0;
 $6 = $1 + ($2 << 1) | 0;
 $$0157201 = 0;
 do {
  $7 = HEAP16[$0 >> 1] | 0;
  $9 = HEAP16[$1 >> 1] | 0;
  $10 = $9 << 16 >> 16;
  $11 = ($7 << 16 >> 16) - $10 | 0;
  if ($3) {
   $$0153184 = $11;
   $$0154183 = 1;
   $$0160182 = 0;
   $16 = $7;
   while (1) {
    $16$looptemp = $16;
    $16 = HEAP16[$0 + ($$0154183 << 1) >> 1] | 0;
    $20 = ($16 << 16 >> 16) - ($16$looptemp << 16 >> 16) - (HEAP16[$1 + ($$0154183 << 1) >> 1] | 0) | 0;
    $21 = ($20 | 0) < ($$0153184 | 0);
    $spec$select = $21 ? $$0154183 : $$0160182;
    $spec$select165 = $21 ? $20 : $$0153184;
    $$0154183 = $$0154183 + 1 | 0;
    if (($$0154183 | 0) == ($2 | 0)) {
     $$0153$lcssa = $spec$select165;
     $$0160$lcssa = $spec$select;
     break;
    } else {
     $$0153184 = $spec$select165;
     $$0160182 = $spec$select;
    }
   }
  } else {
   $$0153$lcssa = $11;
   $$0160$lcssa = 0;
  }
  $25 = HEAP16[$6 >> 1] | 0;
  $26 = $25 << 16 >> 16;
  $27 = 32768 - (HEAP16[$5 >> 1] | 0) - $26 | 0;
  $28 = ($27 | 0) < ($$0153$lcssa | 0);
  $spec$select166 = $28 ? $2 : $$0160$lcssa;
  if ((($28 ? $27 : $$0153$lcssa) | 0) > -1) {
   label = 27;
   break;
  }
  do if (!$spec$select166) HEAP16[$0 >> 1] = $9; else {
   if (($spec$select166 | 0) == ($2 | 0)) {
    HEAP16[$5 >> 1] = 32768 - ($25 & 65535);
    break;
   }
   if (($spec$select166 | 0) > 0) if (($spec$select166 | 0) == 1) $$0152$lcssa = $10; else {
    $36 = 1;
    $39 = $10;
    while (1) {
     $38 = $39 + (HEAP16[$1 + ($36 << 1) >> 1] | 0) | 0;
     $36 = $36 + 1 | 0;
     if (($36 | 0) == ($spec$select166 | 0)) {
      $$0152$lcssa = $38;
      break;
     } else $39 = $38;
    }
   } else $$0152$lcssa = 0;
   $41 = $1 + ($spec$select166 << 1) | 0;
   $44 = HEAP16[$41 >> 1] >> 1;
   $45 = $44 + $$0152$lcssa | 0;
   if (($spec$select166 | 0) < ($2 | 0)) {
    $47 = 32768 - $26 | 0;
    if (($4 | 0) > ($spec$select166 | 0)) {
     $49 = $4;
     $52 = $47;
     while (1) {
      $51 = $52 - (HEAP16[$1 + ($49 << 1) >> 1] | 0) | 0;
      $49 = $49 + -1 | 0;
      if (($49 | 0) <= ($spec$select166 | 0)) {
       $$0$lcssa = $51;
       break;
      } else $52 = $51;
     }
    } else $$0$lcssa = $47;
   } else $$0$lcssa = 32768;
   $55 = $$0$lcssa - $44 | 0;
   $56 = ($45 | 0) > ($55 | 0);
   $58 = $0 + ($spec$select166 + -1 << 1) | 0;
   $61 = $0 + ($spec$select166 << 1) | 0;
   $64 = (HEAP16[$61 >> 1] | 0) + (HEAP16[$58 >> 1] | 0) | 0;
   $67 = ($64 >> 1) + ($64 & 1) | 0;
   $$ = $56 ? $45 : $55;
   $$226 = $56 ? $55 : $45;
   $70 = (($67 | 0) > ($$ | 0) ? $$ : ($67 | 0) < ($$226 | 0) ? $$226 : $67) - $44 | 0;
   HEAP16[$58 >> 1] = $70;
   HEAP16[$61 >> 1] = $70 + (HEAPU16[$41 >> 1] | 0);
  } while (0);
  $$0157201 = $$0157201 + 1 | 0;
 } while ($$0157201 >>> 0 < 20);
 if ((label | 0) == 27) return;
 if (($$0157201 | 0) != 20) return;
 _silk_insertion_sort_increasing_all_values_int16($0, $2);
 $83 = _silk_max_int_444(HEAP16[$0 >> 1] | 0, HEAP16[$1 >> 1] | 0) | 0;
 HEAP16[$0 >> 1] = $83;
 if ($3) {
  $$1155180 = 1;
  $88 = $83;
  do {
   $85 = $0 + ($$1155180 << 1) | 0;
   $93 = ($88 << 16 >> 16) + (HEAP16[$1 + ($$1155180 << 1) >> 1] | 0) | 0;
   $spec$select169 = ($93 | 0) > -32768 ? $93 : -32768;
   $88 = _silk_max_int_444(HEAP16[$85 >> 1] | 0, (($spec$select169 | 0) < 32767 ? $spec$select169 : 32767) << 16 >> 16) | 0;
   HEAP16[$85 >> 1] = $88;
   $$1155180 = $$1155180 + 1 | 0;
  } while (($$1155180 | 0) != ($2 | 0));
 }
 $106 = _silk_min_int_445(HEAP16[$5 >> 1] | 0, 32768 - (HEAP16[$6 >> 1] | 0) | 0) | 0;
 HEAP16[$5 >> 1] = $106;
 if (!$3) return;
 $$2156179 = $2 + -2 | 0;
 $113 = $106;
 while (1) {
  $109 = $0 + ($$2156179 << 1) | 0;
  $113 = _silk_min_int_445(HEAP16[$109 >> 1] | 0, ($113 << 16 >> 16) - (HEAP16[$1 + ($$2156179 + 1 << 1) >> 1] | 0) | 0) | 0;
  HEAP16[$109 >> 1] = $113;
  if (($$2156179 | 0) <= 0) break; else $$2156179 = $$2156179 + -1 | 0;
 }
 return;
}

function _silk_NSQ_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$0101110 = 0, $$0102109 = 0, $$0103108 = 0, $$0104107 = 0, $$0111 = 0, $$1 = 0, $$lcssa = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $19 = 0, $20 = 0, $21 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $71 = 0, $72 = 0, $75 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1 + 4340 >> 2] = HEAP8[$2 + 34 >> 0];
 $19 = $1 + 4328 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $2 + 29 | 0;
 $30 = HEAP16[39492 + (HEAP8[$21 >> 0] >> 1 << 2) + (HEAP8[$2 + 30 >> 0] << 1) >> 1] | 0;
 $$ = (HEAP8[$2 + 31 >> 0] | 0) != 4 & 1;
 $34 = $0 + 4592 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $0 + 4584 | 0;
 $38 = (HEAP32[$36 >> 2] | 0) + $35 | 0;
 $39 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($38 << 2) | 0) + 15 & -16) | 0;
 $40 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($38 << 1) | 0) + 15 & -16) | 0;
 $41 = $0 + 4588 | 0;
 $43 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (HEAP32[$41 >> 2] << 2) | 0) + 15 & -16) | 0;
 HEAP32[$1 + 4336 >> 2] = $35;
 $46 = $1 + 4332 | 0;
 HEAP32[$46 >> 2] = HEAP32[$34 >> 2];
 $47 = $0 + 4580 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 if (($48 | 0) <= 0) {
  $$lcssa = $48;
  $111 = $$lcssa + -1 | 0;
  $112 = $12 + ($111 << 2) | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  HEAP32[$19 >> 2] = $113;
  $114 = HEAP32[$36 >> 2] | 0;
  $115 = $1 + ($114 << 1) | 0;
  $116 = HEAP32[$34 >> 2] | 0;
  $117 = $116 << 1;
  _memmove($1 | 0, $115 | 0, $117 | 0) | 0;
  $118 = $1 + 1280 | 0;
  $119 = HEAP32[$36 >> 2] | 0;
  $120 = $1 + 1280 + ($119 << 2) | 0;
  $121 = HEAP32[$34 >> 2] | 0;
  $122 = $121 << 2;
  _memmove($118 | 0, $120 | 0, $122 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $52 = $$ ^ 1;
 $53 = $1 + 4348 | 0;
 $55 = $$ << 1 ^ 3;
 $56 = $0 + 4636 | 0;
 $57 = $0 + 4640 | 0;
 $$0101110 = $4;
 $$0102109 = $1 + (HEAP32[$34 >> 2] << 1) | 0;
 $$0103108 = 0;
 $$0104107 = $20;
 $$0111 = $3;
 while (1) {
  $61 = $5 + (($$0103108 >>> 1 | $52) << 4 << 1) | 0;
  $63 = $6 + ($$0103108 * 5 << 1) | 0;
  $65 = $7 + ($$0103108 * 24 << 1) | 0;
  $67 = HEAP32[$8 + ($$0103108 << 2) >> 2] | 0;
  $71 = $67 >>> 1 << 16 | $67 >> 2;
  HEAP32[$53 >> 2] = 0;
  $72 = HEAP8[$21 >> 0] | 0;
  if ($72 << 24 >> 24 == 2) {
   $75 = HEAP32[$12 + ($$0103108 << 2) >> 2] | 0;
   if (!($$0103108 & $55)) {
    $78 = HEAP32[$34 >> 2] | 0;
    $80 = HEAP32[$57 >> 2] | 0;
    $81 = $78 - $75 - $80 | 0;
    $82 = $81 + -2 | 0;
    if (($81 | 0) <= 2) {
     label = 6;
     break;
    }
    _silk_LPC_analysis_filter($40 + ($82 << 1) | 0, $1 + ((Math_imul(HEAP32[$41 >> 2] | 0, $$0103108) | 0) + $82 << 1) | 0, $61, $78 - $82 | 0, $80);
    HEAP32[$53 >> 2] = 1;
    HEAP32[$46 >> 2] = HEAP32[$34 >> 2];
    $$1 = $75;
    $92 = HEAP8[$21 >> 0] | 0;
   } else {
    $$1 = $75;
    $92 = 2;
   }
  } else {
   $$1 = $$0104107;
   $92 = $72;
  }
  _silk_nsq_scale_states($0, $1, $$0111, $43, $40, $39, $$0103108, $14, $11, $12, $92 << 24 >> 24);
  _silk_noise_shape_quantizer($1, HEAP8[$21 >> 0] | 0, $43, $$0101110, $$0102109, $39, $61, $63, $65, $$1, $71, HEAP32[$9 + ($$0103108 << 2) >> 2] | 0, HEAP32[$10 + ($$0103108 << 2) >> 2] | 0, HEAP32[$11 + ($$0103108 << 2) >> 2] | 0, $13, $30, HEAP32[$41 >> 2] | 0, HEAP32[$56 >> 2] | 0, HEAP32[$57 >> 2] | 0);
  $104 = HEAP32[$41 >> 2] | 0;
  $$0103108 = $$0103108 + 1 | 0;
  $109 = HEAP32[$47 >> 2] | 0;
  if (($$0103108 | 0) >= ($109 | 0)) {
   $$lcssa = $109;
   label = 9;
   break;
  } else {
   $$0101110 = $$0101110 + $104 | 0;
   $$0102109 = $$0102109 + ($104 << 1) | 0;
   $$0104107 = $$1;
   $$0111 = $$0111 + ($104 << 1) | 0;
  }
 }
 if ((label | 0) == 6) _celt_fatal(43666, 43600, 146); else if ((label | 0) == 9) {
  $111 = $$lcssa + -1 | 0;
  $112 = $12 + ($111 << 2) | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  HEAP32[$19 >> 2] = $113;
  $114 = HEAP32[$36 >> 2] | 0;
  $115 = $1 + ($114 << 1) | 0;
  $116 = HEAP32[$34 >> 2] | 0;
  $117 = $116 << 1;
  _memmove($1 | 0, $115 | 0, $117 | 0) | 0;
  $118 = $1 + 1280 | 0;
  $119 = HEAP32[$36 >> 2] | 0;
  $120 = $1 + 1280 + ($119 << 2) | 0;
  $121 = HEAP32[$34 >> 2] | 0;
  $122 = $121 << 2;
  _memmove($118 | 0, $120 | 0, $122 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _kf_bfly5($0, $1, $$0$5$val, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $$0$5$val = $$0$5$val | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01565 = 0, $$01574 = 0, $$01583 = 0, $$01592 = 0, $$01607 = 0, $$01611 = 0, $$06 = 0, $$sroa$0$0$copyload = 0.0, $$sroa$033$0$copyload = 0.0, $$sroa$08$0$copyload = 0.0, $$sroa$3$0$$sroa_idx35 = 0, $$sroa$3$0$copyload = 0.0, $$sroa$5$0$copyload = 0.0, $$sroa$512$0$copyload = 0.0, $10 = 0, $102 = 0.0, $11 = 0, $110 = 0.0, $114 = 0.0, $117 = 0.0, $12 = 0, $120 = 0.0, $14 = 0, $19 = 0.0, $20 = 0, $22 = 0.0, $24 = 0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $32 = 0.0, $33 = 0.0, $35 = 0, $37 = 0.0, $39 = 0, $40 = 0.0, $42 = 0.0, $44 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $51 = 0.0, $53 = 0, $54 = 0.0, $56 = 0.0, $58 = 0.0, $61 = 0.0, $62 = 0.0, $64 = 0, $66 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $71 = 0.0, $73 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $9 = 0, $92 = 0.0, $96 = 0.0, $99 = 0.0;
 $5 = Math_imul($2, $1) | 0;
 $$sroa$08$0$copyload = +HEAPF32[$$0$5$val + ($5 << 3) >> 2];
 $$sroa$512$0$copyload = +HEAPF32[$$0$5$val + ($5 << 3) + 4 >> 2];
 $7 = Math_imul($1 << 1, $2) | 0;
 $$sroa$0$0$copyload = +HEAPF32[$$0$5$val + ($7 << 3) >> 2];
 $$sroa$5$0$copyload = +HEAPF32[$$0$5$val + ($7 << 3) + 4 >> 2];
 if (($3 | 0) <= 0) return;
 $9 = $2 << 1;
 $10 = $2 * 3 | 0;
 $11 = $2 << 2;
 $12 = ($2 | 0) > 0;
 $$01607 = 0;
 do {
  $14 = $0 + ((Math_imul($$01607, $4) | 0) << 3) | 0;
  if ($12) {
   $$01565 = $14 + ($2 << 3) | 0;
   $$01574 = $14 + ($9 << 3) | 0;
   $$01583 = $14 + ($10 << 3) | 0;
   $$01592 = $14 + ($11 << 3) | 0;
   $$01611 = 0;
   $$06 = $14;
   while (1) {
    $$sroa$033$0$copyload = +HEAPF32[$$06 >> 2];
    $$sroa$3$0$$sroa_idx35 = $$06 + 4 | 0;
    $$sroa$3$0$copyload = +HEAPF32[$$sroa$3$0$$sroa_idx35 >> 2];
    $19 = +HEAPF32[$$01565 >> 2];
    $20 = Math_imul($$01611, $1) | 0;
    $22 = +HEAPF32[$$0$5$val + ($20 << 3) >> 2];
    $24 = $$01565 + 4 | 0;
    $25 = +HEAPF32[$24 >> 2];
    $27 = +HEAPF32[$$0$5$val + ($20 << 3) + 4 >> 2];
    $29 = $19 * $22 - $25 * $27;
    $32 = $22 * $25 + $19 * $27;
    $33 = +HEAPF32[$$01574 >> 2];
    $35 = Math_imul($$01611 << 1, $1) | 0;
    $37 = +HEAPF32[$$0$5$val + ($35 << 3) >> 2];
    $39 = $$01574 + 4 | 0;
    $40 = +HEAPF32[$39 >> 2];
    $42 = +HEAPF32[$$0$5$val + ($35 << 3) + 4 >> 2];
    $44 = $33 * $37 - $40 * $42;
    $47 = $37 * $40 + $33 * $42;
    $48 = +HEAPF32[$$01583 >> 2];
    $49 = $20 * 3 | 0;
    $51 = +HEAPF32[$$0$5$val + ($49 << 3) >> 2];
    $53 = $$01583 + 4 | 0;
    $54 = +HEAPF32[$53 >> 2];
    $56 = +HEAPF32[$$0$5$val + ($49 << 3) + 4 >> 2];
    $58 = $48 * $51 - $54 * $56;
    $61 = $51 * $54 + $48 * $56;
    $62 = +HEAPF32[$$01592 >> 2];
    $64 = Math_imul($$01611 << 2, $1) | 0;
    $66 = +HEAPF32[$$0$5$val + ($64 << 3) >> 2];
    $68 = $$01592 + 4 | 0;
    $69 = +HEAPF32[$68 >> 2];
    $71 = +HEAPF32[$$0$5$val + ($64 << 3) + 4 >> 2];
    $73 = $62 * $66 - $69 * $71;
    $76 = $66 * $69 + $62 * $71;
    $77 = $29 + $73;
    $78 = $32 + $76;
    $79 = $29 - $73;
    $80 = $32 - $76;
    $81 = $44 + $58;
    $82 = $47 + $61;
    $83 = $44 - $58;
    $84 = $47 - $61;
    HEAPF32[$$06 >> 2] = $$sroa$033$0$copyload + ($81 + $77);
    HEAPF32[$$sroa$3$0$$sroa_idx35 >> 2] = $$sroa$3$0$copyload + ($82 + $78);
    $92 = $$sroa$033$0$copyload + ($$sroa$0$0$copyload * $81 + $$sroa$08$0$copyload * $77);
    $96 = $$sroa$3$0$copyload + ($$sroa$0$0$copyload * $82 + $$sroa$08$0$copyload * $78);
    $99 = $$sroa$5$0$copyload * $84 + $$sroa$512$0$copyload * $80;
    $102 = $$sroa$5$0$copyload * $83 + $$sroa$512$0$copyload * $79;
    HEAPF32[$$01565 >> 2] = $92 - $99;
    HEAPF32[$24 >> 2] = $102 + $96;
    HEAPF32[$$01592 >> 2] = $99 + $92;
    HEAPF32[$68 >> 2] = $96 - $102;
    $110 = $$sroa$033$0$copyload + ($$sroa$08$0$copyload * $81 + $$sroa$0$0$copyload * $77);
    $114 = $$sroa$3$0$copyload + ($$sroa$08$0$copyload * $82 + $$sroa$0$0$copyload * $78);
    $117 = $$sroa$512$0$copyload * $84 - $$sroa$5$0$copyload * $80;
    $120 = $$sroa$5$0$copyload * $79 - $$sroa$512$0$copyload * $83;
    HEAPF32[$$01574 >> 2] = $117 + $110;
    HEAPF32[$39 >> 2] = $120 + $114;
    HEAPF32[$$01583 >> 2] = $110 - $117;
    HEAPF32[$53 >> 2] = $114 - $120;
    $$01611 = $$01611 + 1 | 0;
    if (($$01611 | 0) == ($2 | 0)) break; else {
     $$01565 = $$01565 + 8 | 0;
     $$01574 = $$01574 + 8 | 0;
     $$01583 = $$01583 + 8 | 0;
     $$01592 = $$01592 + 8 | 0;
     $$06 = $$06 + 8 | 0;
    }
   }
  }
  $$01607 = $$01607 + 1 | 0;
 } while (($$01607 | 0) != ($3 | 0));
 return;
}

function _silk_decode_indices($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$086 = 0, $$08899 = 0, $$1 = 0, $$18995 = 0, $$pre$phi105Z2D = 0, $$sink = 0, $$sink107 = 0, $101 = 0, $105 = 0, $108 = 0, $114 = 0, $117 = 0, $121 = 0, $122 = 0, $128 = 0, $130 = 0, $14 = 0, $147 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $21 = 0, $29 = 0, $34 = 0, $43 = 0, $44 = 0, $5 = 0, $54 = 0, $59 = 0, $6 = 0, $61 = 0, $68 = 0, $74 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 if (!$3) if (!(HEAP32[$0 + 2404 + ($2 << 2) >> 2] | 0)) $$086 = _ec_dec_icdf($1, 43935, 8) | 0; else label = 3; else label = 3;
 if ((label | 0) == 3) $$086 = (_ec_dec_icdf($1, 43931, 8) | 0) + 2 | 0;
 $14 = $$086 >>> 1;
 $16 = $0 + 2736 | 0;
 $17 = $0 + 2765 | 0;
 HEAP8[$17 >> 0] = $14;
 HEAP8[$0 + 2766 >> 0] = $$086 & 1;
 $21 = ($4 | 0) == 2;
 if ($21) HEAP8[$16 >> 0] = _ec_dec_icdf($1, 20848, 8) | 0; else {
  HEAP8[$16 >> 0] = (_ec_dec_icdf($1, 20816 + ($14 << 24 >> 24 << 3) | 0, 8) | 0) << 3;
  $29 = _ec_dec_icdf($1, 43960, 8) | 0;
  HEAP8[$16 >> 0] = $29 + (HEAPU8[$16 >> 0] | 0);
 }
 $34 = $0 + 2324 | 0;
 if ((HEAP32[$34 >> 2] | 0) > 1) {
  $$08899 = 1;
  do {
   HEAP8[$0 + 2736 + $$08899 >> 0] = _ec_dec_icdf($1, 20848, 8) | 0;
   $$08899 = $$08899 + 1 | 0;
  } while (($$08899 | 0) < (HEAP32[$34 >> 2] | 0));
 }
 $43 = $0 + 2732 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 $54 = _ec_dec_icdf($1, (HEAP32[$44 + 16 >> 2] | 0) + (Math_imul(HEAP8[$17 >> 0] >> 1, HEAP16[$44 >> 1] | 0) | 0) | 0, 8) | 0;
 HEAP8[$0 + 2744 >> 0] = $54;
 _silk_NLSF_unpack($5, $6, HEAP32[$43 >> 2] | 0, $54 << 24 >> 24);
 $59 = HEAP32[$43 >> 2] | 0;
 $61 = HEAP16[$59 + 2 >> 1] | 0;
 if ((HEAP32[$0 + 2340 >> 2] | 0) != ($61 << 16 >> 16 | 0)) _celt_fatal(42387, 42449, 82);
 L19 : do if ($61 << 16 >> 16 > 0) {
  $$18995 = 0;
  $68 = $59;
  while (1) {
   $74 = _ec_dec_icdf($1, (HEAP32[$68 + 28 >> 2] | 0) + (HEAP16[$5 + ($$18995 << 1) >> 1] | 0) | 0, 8) | 0;
   switch ($74 | 0) {
   case 0:
    {
     $$1 = 0 - (_ec_dec_icdf($1, 43968, 8) | 0) | 0;
     break;
    }
   case 8:
    {
     $$1 = (_ec_dec_icdf($1, 43968, 8) | 0) + 8 | 0;
     break;
    }
   default:
    $$1 = $74;
   }
   $$18995 = $$18995 + 1 | 0;
   HEAP8[$0 + 2744 + $$18995 >> 0] = $$1 + 252;
   $68 = HEAP32[$43 >> 2] | 0;
   if (($$18995 | 0) >= (HEAP16[$68 + 2 >> 1] | 0)) break L19;
  }
 } while (0);
 if ((HEAP32[$34 >> 2] | 0) == 4) $$sink = (_ec_dec_icdf($1, 43937, 8) | 0) & 255; else $$sink = 4;
 HEAP8[$0 + 2767 >> 0] = $$sink;
 $93 = HEAP8[$17 >> 0] | 0;
 if ($93 << 24 >> 24 != 2) {
  $156 = $93;
  $155 = $156 << 24 >> 24;
  $157 = $0 + 2396 | 0;
  HEAP32[$157 >> 2] = $155;
  $158 = _ec_dec_icdf($1, 43945, 8) | 0;
  $159 = $158 & 255;
  $160 = $0 + 2770 | 0;
  HEAP8[$160 >> 0] = $159;
  STACKTOP = sp;
  return;
 }
 if ($21) if ((HEAP32[$0 + 2396 >> 2] | 0) == 2) {
  $98 = _ec_dec_icdf($1, 25040, 8) | 0;
  if (($98 << 16 | 0) > 0) {
   $101 = $0 + 2400 | 0;
   $105 = $98 + 65527 + (HEAPU16[$101 >> 1] | 0) & 65535;
   HEAP16[$0 + 2762 >> 1] = $105;
   $$pre$phi105Z2D = $101;
   $122 = $105;
  } else label = 26;
 } else label = 26; else label = 26;
 if ((label | 0) == 26) {
  $108 = (_ec_dec_icdf($1, 25008, 8) | 0) << 16 >> 16;
  $114 = $0 + 2762 | 0;
  HEAP16[$114 >> 1] = Math_imul($108, HEAP32[$0 + 2316 >> 2] >> 1) | 0;
  $117 = _ec_dec_icdf($1, HEAP32[$0 + 2380 >> 2] | 0, 8) | 0;
  $121 = $117 + (HEAPU16[$114 >> 1] | 0) & 65535;
  HEAP16[$114 >> 1] = $121;
  $$pre$phi105Z2D = $0 + 2400 | 0;
  $122 = $121;
 }
 HEAP16[$$pre$phi105Z2D >> 1] = $122;
 HEAP8[$0 + 2764 >> 0] = _ec_dec_icdf($1, HEAP32[$0 + 2384 >> 2] | 0, 8) | 0;
 $128 = _ec_dec_icdf($1, 43887, 8) | 0;
 $130 = $0 + 2768 | 0;
 HEAP8[$130 >> 0] = $128;
 if ((HEAP32[$34 >> 2] | 0) > 0) {
  HEAP8[$0 + 2740 >> 0] = _ec_dec_icdf($1, HEAP32[39172 + ($128 << 24 >> 24 << 2) >> 2] | 0, 8) | 0;
  if ((HEAP32[$34 >> 2] | 0) > 1) {
   $147 = 1;
   do {
    HEAP8[$0 + 2740 + $147 >> 0] = _ec_dec_icdf($1, HEAP32[39172 + (HEAP8[$130 >> 0] << 2) >> 2] | 0, 8) | 0;
    $147 = $147 + 1 | 0;
   } while (($147 | 0) < (HEAP32[$34 >> 2] | 0));
  }
 }
 if (!$4) $$sink107 = (_ec_dec_icdf($1, 43928, 8) | 0) & 255; else $$sink107 = 0;
 HEAP8[$0 + 2769 >> 0] = $$sink107;
 $156 = HEAP8[$17 >> 0] | 0;
 $155 = $156 << 24 >> 24;
 $157 = $0 + 2396 | 0;
 HEAP32[$157 >> 2] = $155;
 $158 = _ec_dec_icdf($1, 43945, 8) | 0;
 $159 = $158 & 255;
 $160 = $0 + 2770 | 0;
 HEAP8[$160 >> 0] = $159;
 STACKTOP = sp;
 return;
}

function _silk_stereo_quant_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$04255 = 0, $$04255$1 = 0, $$04354 = 0, $$04354$1 = 0, $$156 = 0, $$156$1 = 0, $$3 = 0, $$3$1 = 0, $100 = 0, $103 = 0, $106 = 0, $108 = 0, $111 = 0, $114 = 0, $116 = 0, $122 = 0, $123 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $52 = 0, $54 = 0, $57 = 0, $60 = 0, $62 = 0, $68 = 0, $69 = 0, $74 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $9 = 0, $90 = 0, $92 = 0, $95 = 0, $98 = 0, label = 0, $$04255$looptemp = 0, $$04255$1$looptemp = 0;
 $2 = $1 + 1 | 0;
 $$04255 = 0;
 $$04354 = 2147483647;
 $$156 = 0;
 $4 = -13732;
 while (1) {
  $3 = $4 << 16 >> 16;
  $$04255$looptemp = $$04255;
  $$04255 = $$04255 + 1 | 0;
  $4 = HEAP16[24832 + ($$04255 << 1) >> 1] | 0;
  $9 = ($4 << 16 >> 16) - $3 | 0;
  $15 = ((($9 & 65535) * 6554 | 0) >>> 16) + (($9 >> 16) * 6554 | 0) | 0;
  $16 = $$04255$looptemp & 255;
  $17 = $15 + $3 | 0;
  $19 = (HEAP32[$0 >> 2] | 0) - $17 | 0;
  $22 = ($19 | 0) > 0 ? $19 : 0 - $19 | 0;
  if (($22 | 0) >= ($$04354 | 0)) {
   label = 3;
   break;
  }
  HEAP8[$1 >> 0] = $16;
  HEAP8[$2 >> 0] = 0;
  $25 = ($15 * 3 | 0) + $3 | 0;
  $27 = (HEAP32[$0 >> 2] | 0) - $25 | 0;
  $30 = ($27 | 0) > 0 ? $27 : 0 - $27 | 0;
  if (($30 | 0) >= ($22 | 0)) {
   $$3 = $17;
   $33 = $16;
   break;
  }
  HEAP8[$1 >> 0] = $16;
  HEAP8[$2 >> 0] = 1;
  $44 = ($15 * 5 | 0) + $3 | 0;
  $46 = (HEAP32[$0 >> 2] | 0) - $44 | 0;
  $49 = ($46 | 0) > 0 ? $46 : 0 - $46 | 0;
  if (($49 | 0) >= ($30 | 0)) {
   $$3 = $25;
   $33 = $16;
   break;
  }
  HEAP8[$1 >> 0] = $16;
  HEAP8[$2 >> 0] = 2;
  $52 = ($15 * 7 | 0) + $3 | 0;
  $54 = (HEAP32[$0 >> 2] | 0) - $52 | 0;
  $57 = ($54 | 0) > 0 ? $54 : 0 - $54 | 0;
  if (($57 | 0) >= ($49 | 0)) {
   $$3 = $44;
   $33 = $16;
   break;
  }
  HEAP8[$1 >> 0] = $16;
  HEAP8[$2 >> 0] = 3;
  $60 = ($15 * 9 | 0) + $3 | 0;
  $62 = (HEAP32[$0 >> 2] | 0) - $60 | 0;
  $$04354 = ($62 | 0) > 0 ? $62 : 0 - $62 | 0;
  if (($$04354 | 0) >= ($57 | 0)) {
   $$3 = $52;
   $33 = $16;
   break;
  }
  HEAP8[$1 >> 0] = $16;
  HEAP8[$2 >> 0] = 4;
  if ($$04255 >>> 0 >= 15) {
   $$3 = $60;
   $33 = $16;
   break;
  } else $$156 = $60;
 }
 if ((label | 0) == 3) {
  $$3 = $$156;
  $33 = HEAP8[$1 >> 0] | 0;
 }
 $32 = ($33 << 24 >> 24) / 3 | 0;
 HEAP8[$1 + 2 >> 0] = $32;
 HEAP8[$1 >> 0] = (Math_imul($32 << 24 >> 24, -3) | 0) + ($33 & 255);
 HEAP32[$0 >> 2] = $$3;
 $40 = $0 + 4 | 0;
 $41 = $1 + 3 | 0;
 $42 = $1 + 4 | 0;
 $$04255$1 = 0;
 $$04354$1 = 2147483647;
 $$156$1 = $$3;
 $69 = -13732;
 while (1) {
  $68 = $69 << 16 >> 16;
  $$04255$1$looptemp = $$04255$1;
  $$04255$1 = $$04255$1 + 1 | 0;
  $69 = HEAP16[24832 + ($$04255$1 << 1) >> 1] | 0;
  $74 = ($69 << 16 >> 16) - $68 | 0;
  $80 = ((($74 & 65535) * 6554 | 0) >>> 16) + (($74 >> 16) * 6554 | 0) | 0;
  $81 = $$04255$1$looptemp & 255;
  $82 = $80 + $68 | 0;
  $84 = (HEAP32[$40 >> 2] | 0) - $82 | 0;
  $87 = ($84 | 0) > 0 ? $84 : 0 - $84 | 0;
  if (($87 | 0) >= ($$04354$1 | 0)) {
   label = 11;
   break;
  }
  HEAP8[$41 >> 0] = $81;
  HEAP8[$42 >> 0] = 0;
  $90 = ($80 * 3 | 0) + $68 | 0;
  $92 = (HEAP32[$40 >> 2] | 0) - $90 | 0;
  $95 = ($92 | 0) > 0 ? $92 : 0 - $92 | 0;
  if (($95 | 0) >= ($87 | 0)) {
   $$3$1 = $82;
   $123 = $81;
   break;
  }
  HEAP8[$41 >> 0] = $81;
  HEAP8[$42 >> 0] = 1;
  $98 = ($80 * 5 | 0) + $68 | 0;
  $100 = (HEAP32[$40 >> 2] | 0) - $98 | 0;
  $103 = ($100 | 0) > 0 ? $100 : 0 - $100 | 0;
  if (($103 | 0) >= ($95 | 0)) {
   $$3$1 = $90;
   $123 = $81;
   break;
  }
  HEAP8[$41 >> 0] = $81;
  HEAP8[$42 >> 0] = 2;
  $106 = ($80 * 7 | 0) + $68 | 0;
  $108 = (HEAP32[$40 >> 2] | 0) - $106 | 0;
  $111 = ($108 | 0) > 0 ? $108 : 0 - $108 | 0;
  if (($111 | 0) >= ($103 | 0)) {
   $$3$1 = $98;
   $123 = $81;
   break;
  }
  HEAP8[$41 >> 0] = $81;
  HEAP8[$42 >> 0] = 3;
  $114 = ($80 * 9 | 0) + $68 | 0;
  $116 = (HEAP32[$40 >> 2] | 0) - $114 | 0;
  $$04354$1 = ($116 | 0) > 0 ? $116 : 0 - $116 | 0;
  if (($$04354$1 | 0) >= ($111 | 0)) {
   $$3$1 = $106;
   $123 = $81;
   break;
  }
  HEAP8[$41 >> 0] = $81;
  HEAP8[$42 >> 0] = 4;
  if ($$04255$1 >>> 0 >= 15) {
   $$3$1 = $114;
   $123 = $81;
   break;
  } else $$156$1 = $114;
 }
 if ((label | 0) == 11) {
  $$3$1 = $$156$1;
  $123 = HEAP8[$41 >> 0] | 0;
 }
 $122 = ($123 << 24 >> 24) / 3 | 0;
 HEAP8[$1 + 5 >> 0] = $122;
 HEAP8[$41 >> 0] = (Math_imul($122 << 24 >> 24, -3) | 0) + ($123 & 255);
 HEAP32[$40 >> 2] = $$3$1;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) - $$3$1;
 return;
}

function _transient_analysis($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0101$lcssa = 0, $$0101124 = 0, $$0102$lcssa139 = 0.0, $$0102110 = 0.0, $$0103130 = 0, $$0109 = 0, $$093108 = 0.0, $$096107 = 0.0, $$097 = 0, $$098$lcssa = 0.0, $$098117 = 0.0, $$099$lcssa141 = 0, $$099131 = 0, $$1100 = 0, $$1112 = 0, $$194111 = 0.0, $$2119$in = 0, $$295118 = 0.0, $$3125 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0.0, $23 = 0.0, $31 = 0, $33 = 0.0, $37 = 0.0, $39 = 0.0, $46 = 0, $52 = 0.0, $61 = 0.0, $62 = 0.0, $65 = 0.0, $7 = 0, $70 = 0.0, $74 = 0, $8 = 0, $80 = 0, $84 = 0, $9 = 0, $96 = 0.0, $98 = 0.0, $spec$select = 0.0, dest = 0, label = 0, sp = 0, stop = 0, $$2119$in$looptemp = 0;
 sp = STACKTOP;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$6 >> 2] = 0;
 $8 = ($5 | 0) != 0;
 $spec$select = $8 ? .03125 : .0625;
 $9 = ($1 | 0) / 2 | 0;
 do if (($2 | 0) > 0) {
  $11 = ($1 | 0) > 0;
  $12 = ($1 | 0) > 1;
  $13 = +($9 | 0);
  $14 = +($9 | 0);
  $15 = $9 + -5 | 0;
  $16 = ($1 | 0) > 35;
  $18 = ($9 * 6 | 0) + -102 | 0;
  $$0103130 = 0;
  $$099131 = 0;
  while (1) {
   if ($11) {
    $19 = Math_imul($$0103130, $1) | 0;
    $$0109 = 0;
    $$093108 = 0.0;
    $$096107 = 0.0;
    while (1) {
     $22 = +HEAPF32[$0 + ($$0109 + $19 << 2) >> 2];
     $23 = $$093108 + $22;
     HEAPF32[$7 + ($$0109 << 2) >> 2] = $23;
     $$0109 = $$0109 + 1 | 0;
     if (($$0109 | 0) == ($1 | 0)) break; else {
      $$093108 = $$096107 + $23 - $22 * 2.0;
      $$096107 = $22 - $23 * .5;
     }
    }
   }
   dest = $7;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if ($12) {
    $$0102110 = 0.0;
    $$1112 = 0;
    $$194111 = 0.0;
    do {
     $31 = $$1112 << 1;
     $33 = +HEAPF32[$7 + ($31 << 2) >> 2];
     $37 = +HEAPF32[$7 + (($31 | 1) << 2) >> 2];
     $39 = $33 * $33 + $37 * $37;
     $$0102110 = $$0102110 + $39;
     $$194111 = $$194111 + $spec$select * ($39 - $$194111);
     HEAPF32[$7 + ($$1112 << 2) >> 2] = $$194111;
     $$1112 = $$1112 + 1 | 0;
    } while (($$1112 | 0) != ($9 | 0));
    $$098117 = 0.0;
    $$2119$in = $9;
    $$295118 = 0.0;
    while (1) {
     $$2119$in$looptemp = $$2119$in;
     $$2119$in = $$2119$in + -1 | 0;
     $46 = $7 + ($$2119$in << 2) | 0;
     $$295118 = $$295118 + (+HEAPF32[$46 >> 2] - $$295118) * .125;
     HEAPF32[$46 >> 2] = $$295118;
     $52 = $$098117 > $$295118 ? $$098117 : $$295118;
     if (($$2119$in$looptemp | 0) <= 1) {
      $$0102$lcssa139 = $$0102110;
      $$098$lcssa = $52;
      break;
     } else $$098117 = $52;
    }
   } else {
    $$0102$lcssa139 = 0.0;
    $$098$lcssa = 0.0;
   }
   $61 = $14 / (+Math_sqrt(+($$0102$lcssa139 * $$098$lcssa * .5 * $13)) + 1.0000000036274937e-15);
   $62 = +HEAPF32[$7 >> 2];
   if ($62 != $62 | 0.0 != 0.0) {
    label = 12;
    break;
   }
   if ($61 != $61 | 0.0 != 0.0) {
    label = 14;
    break;
   }
   if ($16) {
    $65 = $61 * 64.0;
    $$0101124 = 0;
    $$3125 = 12;
    while (1) {
     $70 = +Math_floor(+($65 * (+HEAPF32[$7 + ($$3125 << 2) >> 2] + 1.0000000036274937e-15)));
     $74 = ($70 >= 127.0 ? 127.0 : $70) < 0.0;
     $80 = $$0101124 + (HEAPU8[464 + ~~($70 > 127.0 | $74 ? ($74 ? 0.0 : 127.0) : $70) >> 0] | 0) | 0;
     $$3125 = $$3125 + 4 | 0;
     if (($$3125 | 0) >= ($15 | 0)) {
      $$0101$lcssa = $80;
      break;
     } else $$0101124 = $80;
    }
   } else $$0101$lcssa = 0;
   $84 = ($$0101$lcssa << 8 | 0) / ($18 | 0) | 0;
   if (($84 | 0) > ($$099131 | 0)) {
    HEAP32[$4 >> 2] = $$0103130;
    $$1100 = $84;
   } else $$1100 = $$099131;
   $$0103130 = $$0103130 + 1 | 0;
   if (($$0103130 | 0) >= ($2 | 0)) {
    label = 21;
    break;
   } else $$099131 = $$1100;
  }
  if ((label | 0) == 12) _celt_fatal(39931, 39794, 369); else if ((label | 0) == 14) _celt_fatal(39969, 39794, 370); else if ((label | 0) == 21) {
   if (!($8 & ($$1100 + -201 | 0) >>> 0 < 399)) {
    $$097 = ($$1100 | 0) > 200 & 1;
    $$099$lcssa141 = $$1100;
    break;
   }
   HEAP32[$6 >> 2] = 1;
   $$097 = 0;
   $$099$lcssa141 = $$1100;
   break;
  }
 } else {
  $$097 = 0;
  $$099$lcssa141 = 0;
 } while (0);
 $96 = +Math_sqrt(+(+($$099$lcssa141 * 27 | 0))) + -42.0;
 $98 = $96 < 0.0 ? 0.0 : $96;
 $103 = ($98 > 163.0 ? 163.0 : $98) * .006899999920278788 + -.139;
 HEAPF32[$3 >> 2] = +Math_sqrt(+($103 < 0.0 ? 0.0 : $103));
 STACKTOP = sp;
 return $$097 | 0;
}

function _opus_packet_parse_impl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0139 = 0, $$0140 = 0, $$0147198 = 0, $$0149197 = 0, $$0153173 = 0, $$1141161 = 0, $$1148174 = 0, $$1150194 = 0, $$1162 = 0, $$2142199 = 0, $$2200 = 0, $$3152189 = 0, $$3176 = 0, $$5190 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $25 = 0, $27 = 0, $28 = 0, $32 = 0, $37 = 0, $40 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $65 = 0, $9 = 0, $trunc = 0, label = 0, $$0139$looptemp = 0;
 if (($1 | 0) < 0 | ($4 | 0) == 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 if (!$1) {
  $$0 = -4;
  return $$0 | 0;
 }
 $trunc = HEAP8[$0 >> 0] | 0;
 $9 = _opus_packet_get_samples_per_frame($trunc, 48e3) | 0;
 $10 = $0 + 1 | 0;
 $11 = $1 + -1 | 0;
 L7 : do switch ($trunc & 3) {
 case 0:
  {
   $$0153173 = 1;
   $$1148174 = $11;
   $$3176 = $10;
   break;
  }
 case 1:
  {
   if (!($11 & 1)) {
    $14 = $11 >>> 1;
    HEAP16[$4 >> 1] = $14;
    $$0153173 = 2;
    $$1148174 = $14;
    $$3176 = $10;
    break L7;
   } else {
    $$0 = -4;
    return $$0 | 0;
   }
   break;
  }
 case 2:
  {
   $16 = _parse_size($10, $11, $4) | 0;
   $17 = $11 - $16 | 0;
   $18 = HEAP16[$4 >> 1] | 0;
   $19 = $18 << 16 >> 16;
   if ($18 << 16 >> 16 < 0 | ($17 | 0) < ($19 | 0)) {
    $$0 = -4;
    return $$0 | 0;
   } else {
    $$0153173 = 2;
    $$1148174 = $17 - $19 | 0;
    $$3176 = $10 + $16 | 0;
    break L7;
   }
   break;
  }
 default:
  {
   if (($1 | 0) < 2) {
    $$0 = -4;
    return $$0 | 0;
   }
   $25 = $0 + 2 | 0;
   $27 = HEAPU8[$10 >> 0] | 0;
   $28 = $27 & 63;
   if (($28 | 0) == 0 | (Math_imul($28, $9) | 0) > 5760) {
    $$0 = -4;
    return $$0 | 0;
   }
   $32 = $1 + -2 | 0;
   if (!($27 & 64)) {
    $$1141161 = $32;
    $$1162 = $25;
   } else {
    $$0139 = $25;
    $$0140 = $32;
    do {
     if (($$0140 | 0) < 1) {
      $$0 = -4;
      label = 33;
      break;
     }
     $$0139$looptemp = $$0139;
     $$0139 = $$0139 + 1 | 0;
     $37 = HEAP8[$$0139$looptemp >> 0] | 0;
     $40 = $37 << 24 >> 24 == -1;
     $$0140 = $$0140 + -1 - ($40 ? 254 : $37 & 255) | 0;
    } while ($40);
    if ((label | 0) == 33) return $$0 | 0;
    if (($$0140 | 0) < 0) {
     $$0 = -4;
     return $$0 | 0;
    } else {
     $$1141161 = $$0140;
     $$1162 = $$0139;
    }
   }
   if (!($27 & 128)) {
    $60 = ($$1141161 | 0) / ($28 | 0) | 0;
    if ((Math_imul($60, $28) | 0) != ($$1141161 | 0)) {
     $$0 = -4;
     return $$0 | 0;
    }
    $63 = $28 + -1 | 0;
    if ($28 >>> 0 <= 1) {
     $$0153173 = $28;
     $$1148174 = $60;
     $$3176 = $$1162;
     break L7;
    }
    $65 = $60 & 65535;
    $$1150194 = 0;
    while (1) {
     HEAP16[$4 + ($$1150194 << 1) >> 1] = $65;
     $$1150194 = $$1150194 + 1 | 0;
     if (($$1150194 | 0) == ($63 | 0)) {
      $$0153173 = $28;
      $$1148174 = $60;
      $$3176 = $$1162;
      break L7;
     }
    }
   }
   $46 = $28 + -1 | 0;
   if ($28 >>> 0 > 1) {
    $$0147198 = $$1141161;
    $$0149197 = 0;
    $$2142199 = $$1141161;
    $$2200 = $$1162;
    do {
     $48 = $4 + ($$0149197 << 1) | 0;
     $49 = _parse_size($$2200, $$2142199, $48) | 0;
     $$2142199 = $$2142199 - $49 | 0;
     $51 = HEAP16[$48 >> 1] | 0;
     $52 = $51 << 16 >> 16;
     if ($51 << 16 >> 16 < 0 | ($$2142199 | 0) < ($52 | 0)) {
      $$0 = -4;
      label = 33;
      break;
     }
     $$2200 = $$2200 + $49 | 0;
     $$0147198 = $$0147198 - $49 - $52 | 0;
     $$0149197 = $$0149197 + 1 | 0;
    } while (($$0149197 | 0) < ($46 | 0));
    if ((label | 0) == 33) return $$0 | 0;
    if (($$0147198 | 0) < 0) {
     $$0 = -4;
     return $$0 | 0;
    } else {
     $$0153173 = $28;
     $$1148174 = $$0147198;
     $$3176 = $$2200;
    }
   } else {
    $$0153173 = $28;
    $$1148174 = $$1141161;
    $$3176 = $$1162;
   }
  }
 } while (0);
 if (($$1148174 | 0) > 1275) {
  $$0 = -4;
  return $$0 | 0;
 }
 HEAP16[$4 + ($$0153173 + -1 << 1) >> 1] = $$1148174;
 if ($5 | 0) HEAP32[$5 >> 2] = $$3176 - $0;
 if (!(($$0153173 | 0) == 0 | ($3 | 0) == 0)) {
  $$3152189 = 0;
  $$5190 = $$3176;
  do {
   HEAP32[$3 + ($$3152189 << 2) >> 2] = $$5190;
   $$5190 = $$5190 + (HEAP16[$4 + ($$3152189 << 1) >> 1] | 0) | 0;
   $$3152189 = $$3152189 + 1 | 0;
  } while (($$3152189 | 0) != ($$0153173 | 0));
 }
 if (!$2) {
  $$0 = $$0153173;
  return $$0 | 0;
 }
 HEAP8[$2 >> 0] = $trunc;
 $$0 = $$0153173;
 return $$0 | 0;
}

function _opus_custom_decoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$07779 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $121 = 0, $122 = 0, $131 = 0, $132 = 0, $140 = 0, $141 = 0, $2 = 0, $21 = 0, $22 = 0, $34 = 0, $35 = 0, $43 = 0, $44 = 0, $46 = 0, $53 = 0, $54 = 0, $65 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 do switch ($1 | 0) {
 case 10010:
  {
   $8 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $9 = HEAP32[$8 >> 2] | 0;
   HEAP32[$2 >> 2] = $8 + 4;
   if (($9 | 0) < 0) label = 30; else if (($9 | 0) < (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$0 + 20 >> 2] = $9;
    label = 29;
   } else label = 30;
   break;
  }
 case 10012:
  {
   $21 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $22 = HEAP32[$21 >> 2] | 0;
   HEAP32[$2 >> 2] = $21 + 4;
   if (($22 | 0) < 1) label = 30; else if (($22 | 0) > (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) label = 30; else {
    HEAP32[$0 + 24 >> 2] = $22;
    label = 29;
   }
   break;
  }
 case 10008:
  {
   $34 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $35 = HEAP32[$34 >> 2] | 0;
   HEAP32[$2 >> 2] = $34 + 4;
   if (($35 + -1 | 0) >>> 0 > 1) label = 30; else {
    HEAP32[$0 + 12 >> 2] = $35;
    label = 29;
   }
   break;
  }
 case 10007:
  {
   $43 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$2 >> 2] = $43 + 4;
   if (!$44) label = 30; else {
    $46 = $0 + 44 | 0;
    HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
    HEAP32[$46 >> 2] = 0;
    label = 29;
   }
   break;
  }
 case 4027:
  {
   $53 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$2 >> 2] = $53 + 4;
   if (!$54) label = 30; else {
    HEAP32[$54 >> 2] = (HEAP32[$0 + 4 >> 2] | 0) / (HEAP32[$0 + 16 >> 2] | 0) | 0;
    label = 29;
   }
   break;
  }
 case 4028:
  {
   $65 = HEAP32[$0 + 8 >> 2] | 0;
   $69 = $0 + 92 + ((Math_imul((HEAP32[$0 + 4 >> 2] | 0) + 2048 | 0, $65) | 0) << 2) + ($65 * 24 << 2) | 0;
   $70 = HEAP32[$0 >> 2] | 0;
   $72 = HEAP32[$70 + 8 >> 2] | 0;
   $73 = $72 << 1;
   $74 = $69 + ($73 << 2) | 0;
   $75 = $74 + ($73 << 2) | 0;
   _memset($0 + 40 | 0, 0, (_opus_custom_decoder_get_size(HEAP32[$70 + 4 >> 2] | 0, $72, $65) | 0) + -40 | 0) | 0;
   if (($72 | 0) > 0) {
    $$07779 = 0;
    do {
     HEAPF32[$75 + ($$07779 << 2) >> 2] = -28.0;
     HEAPF32[$74 + ($$07779 << 2) >> 2] = -28.0;
     $$07779 = $$07779 + 1 | 0;
    } while (($$07779 | 0) < (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] << 1 | 0));
   }
   HEAP32[$0 + 56 >> 2] = 1;
   label = 29;
   break;
  }
 case 4033:
  {
   $94 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$2 >> 2] = $94 + 4;
   if (!$95) label = 30; else {
    HEAP32[$95 >> 2] = HEAP32[$0 + 60 >> 2];
    label = 29;
   }
   break;
  }
 case 10015:
  {
   $104 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $105 = HEAP32[$104 >> 2] | 0;
   HEAP32[$2 >> 2] = $104 + 4;
   if (!$105) label = 30; else {
    HEAP32[$105 >> 2] = HEAP32[$0 >> 2];
    label = 29;
   }
   break;
  }
 case 10016:
  {
   $113 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $114 = HEAP32[$113 >> 2] | 0;
   HEAP32[$2 >> 2] = $113 + 4;
   HEAP32[$0 + 28 >> 2] = $114;
   label = 29;
   break;
  }
 case 4031:
  {
   $121 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $122 = HEAP32[$121 >> 2] | 0;
   HEAP32[$2 >> 2] = $121 + 4;
   if (!$122) label = 30; else {
    HEAP32[$122 >> 2] = HEAP32[$0 + 40 >> 2];
    label = 29;
   }
   break;
  }
 case 4046:
  {
   $131 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $132 = HEAP32[$131 >> 2] | 0;
   HEAP32[$2 >> 2] = $131 + 4;
   if ($132 >>> 0 > 1) label = 30; else {
    HEAP32[$0 + 32 >> 2] = $132;
    label = 29;
   }
   break;
  }
 case 4047:
  {
   $140 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $141 = HEAP32[$140 >> 2] | 0;
   HEAP32[$2 >> 2] = $140 + 4;
   if (!$141) label = 30; else {
    HEAP32[$141 >> 2] = HEAP32[$0 + 32 >> 2];
    label = 29;
   }
   break;
  }
 default:
  {
   $$0 = -5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 29) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 30) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _resampler_basic_interpolate_double($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0, $$07175$us = 0, $$072$lcssa = 0, $$07284 = 0, $$07284$us = 0, $$073$lcssa = 0, $$07383 = 0, $$07383$us = 0, $$085 = 0, $$085$us = 0, $$1 = 0, $$1$us = 0, $$174 = 0, $$174$us = 0, $$sroa$0$176$us = 0.0, $$sroa$10$179$us = 0.0, $$sroa$4$177$us = 0.0, $$sroa$7$178$us = 0.0, $104 = 0, $105 = 0, $12 = 0, $126 = 0, $13 = 0, $130 = 0, $131 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0.0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $91 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $8 = HEAP32[$0 + 24 >> 2] | 0;
 $9 = $0 + 60 | 0;
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $13 = $0 + 64 | 0;
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $18 = HEAP32[$0 + 92 >> 2] | 0;
 $20 = HEAP32[$0 + 36 >> 2] | 0;
 $22 = HEAP32[$0 + 40 >> 2] | 0;
 $23 = $0 + 12 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 L1 : do if (($12 | 0) < (HEAP32[$3 >> 2] | 0)) {
  $27 = $0 + 48 | 0;
  $29 = $0 + 76 | 0;
  $30 = $6 + 4 | 0;
  $31 = $6 + 8 | 0;
  $32 = $6 + 12 | 0;
  if (($8 | 0) <= 0) {
   $$07284 = $12;
   $$07383 = $16;
   $$085 = 0;
   while (1) {
    if (($$085 | 0) >= (HEAP32[$5 >> 2] | 0)) {
     $$0$lcssa = $$085;
     $$072$lcssa = $$07284;
     $$073$lcssa = $$07383;
     break L1;
    }
    $104 = Math_imul(HEAP32[$27 >> 2] | 0, $$07383) | 0;
    $105 = HEAP32[$23 >> 2] | 0;
    _cubic_coef(+((($104 >>> 0) % ($105 >>> 0) | 0) >>> 0) / +($105 >>> 0), $6);
    $126 = $$085 + 1 | 0;
    HEAPF32[$4 + ((Math_imul($$085, $18) | 0) << 2) >> 2] = +HEAPF32[$6 >> 2] * 0.0 + +HEAPF32[$30 >> 2] * 0.0 + +HEAPF32[$31 >> 2] * 0.0 + +HEAPF32[$32 >> 2] * 0.0;
    $130 = $$07383 + $22 | 0;
    $131 = $130 >>> 0 < $24 >>> 0;
    $$174 = $130 - ($131 ? 0 : $24) | 0;
    $$1 = $$07284 + $20 + (($131 ^ 1) & 1) | 0;
    if (($$1 | 0) < (HEAP32[$3 >> 2] | 0)) {
     $$07284 = $$1;
     $$07383 = $$174;
     $$085 = $126;
    } else {
     $$0$lcssa = $126;
     $$072$lcssa = $$1;
     $$073$lcssa = $$174;
     break L1;
    }
   }
  }
  $$07284$us = $12;
  $$07383$us = $16;
  $$085$us = 0;
  while (1) {
   if (($$085$us | 0) >= (HEAP32[$5 >> 2] | 0)) {
    $$0$lcssa = $$085$us;
    $$072$lcssa = $$07284$us;
    $$073$lcssa = $$07383$us;
    break L1;
   }
   $35 = $2 + ($$07284$us << 2) | 0;
   $36 = HEAP32[$27 >> 2] | 0;
   $37 = Math_imul($36, $$07383$us) | 0;
   $38 = HEAP32[$23 >> 2] | 0;
   $39 = ($37 >>> 0) / ($38 >>> 0) | 0;
   $41 = $37 - (Math_imul($39, $38) | 0) | 0;
   $42 = HEAP32[$29 >> 2] | 0;
   $43 = 4 - $39 | 0;
   $$07175$us = 0;
   $$sroa$0$176$us = 0.0;
   $$sroa$10$179$us = 0.0;
   $$sroa$4$177$us = 0.0;
   $$sroa$7$178$us = 0.0;
   do {
    $45 = +HEAPF32[$35 + ($$07175$us << 2) >> 2];
    $$07175$us = $$07175$us + 1 | 0;
    $48 = $43 + (Math_imul($$07175$us, $36) | 0) | 0;
    $$sroa$0$176$us = $$sroa$0$176$us + $45 * +HEAPF32[$42 + ($48 + -2 << 2) >> 2];
    $$sroa$4$177$us = $$sroa$4$177$us + $45 * +HEAPF32[$42 + ($48 + -1 << 2) >> 2];
    $$sroa$7$178$us = $$sroa$7$178$us + $45 * +HEAPF32[$42 + ($48 << 2) >> 2];
    $$sroa$10$179$us = $$sroa$10$179$us + $45 * +HEAPF32[$42 + ($48 + 1 << 2) >> 2];
   } while (($$07175$us | 0) != ($8 | 0));
   _cubic_coef(+($41 >>> 0) / +($38 >>> 0), $6);
   $91 = $$085$us + 1 | 0;
   HEAPF32[$4 + ((Math_imul($$085$us, $18) | 0) << 2) >> 2] = $$sroa$0$176$us * +HEAPF32[$6 >> 2] + $$sroa$4$177$us * +HEAPF32[$30 >> 2] + $$sroa$7$178$us * +HEAPF32[$31 >> 2] + $$sroa$10$179$us * +HEAPF32[$32 >> 2];
   $95 = $$07383$us + $22 | 0;
   $96 = $95 >>> 0 < $24 >>> 0;
   $$174$us = $95 - ($96 ? 0 : $24) | 0;
   $$1$us = $$07284$us + $20 + (($96 ^ 1) & 1) | 0;
   if (($$1$us | 0) < (HEAP32[$3 >> 2] | 0)) {
    $$07284$us = $$1$us;
    $$07383$us = $$174$us;
    $$085$us = $91;
   } else {
    $$0$lcssa = $91;
    $$072$lcssa = $$1$us;
    $$073$lcssa = $$174$us;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
  $$072$lcssa = $12;
  $$073$lcssa = $16;
 } while (0);
 HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] = $$072$lcssa;
 HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] = $$073$lcssa;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function _resampler_basic_interpolate_single($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0, $$07276$us = 0, $$073$lcssa = 0, $$07385 = 0, $$07385$us = 0, $$074$lcssa = 0, $$07484 = 0, $$07484$us = 0, $$086 = 0, $$086$us = 0, $$1 = 0, $$1$us = 0, $$175 = 0, $$175$us = 0, $$sroa$0$080$us = 0.0, $$sroa$10$177$us = 0.0, $$sroa$4$079$us = 0.0, $$sroa$7$078$us = 0.0, $112 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0.0, $48 = 0, $6 = 0, $8 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $8 = HEAP32[$0 + 24 >> 2] | 0;
 $9 = $0 + 60 | 0;
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $13 = $0 + 64 | 0;
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $18 = HEAP32[$0 + 92 >> 2] | 0;
 $20 = HEAP32[$0 + 36 >> 2] | 0;
 $22 = HEAP32[$0 + 40 >> 2] | 0;
 $23 = $0 + 12 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 L1 : do if (($12 | 0) < (HEAP32[$3 >> 2] | 0)) {
  $27 = $0 + 48 | 0;
  $29 = $0 + 76 | 0;
  $30 = $6 + 4 | 0;
  $31 = $6 + 8 | 0;
  $32 = $6 + 12 | 0;
  if (($8 | 0) <= 0) {
   $$07385 = $12;
   $$07484 = $16;
   $$086 = 0;
   while (1) {
    if (($$086 | 0) >= (HEAP32[$5 >> 2] | 0)) {
     $$0$lcssa = $$086;
     $$073$lcssa = $$07385;
     $$074$lcssa = $$07484;
     break L1;
    }
    $95 = Math_imul(HEAP32[$27 >> 2] | 0, $$07484) | 0;
    $96 = HEAP32[$23 >> 2] | 0;
    _cubic_coef(+((($95 >>> 0) % ($96 >>> 0) | 0) >>> 0) / +($96 >>> 0), $6);
    $112 = $$086 + 1 | 0;
    HEAPF32[$4 + ((Math_imul($$086, $18) | 0) << 2) >> 2] = +HEAPF32[$6 >> 2] * 0.0 + +HEAPF32[$30 >> 2] * 0.0 + +HEAPF32[$31 >> 2] * 0.0 + +HEAPF32[$32 >> 2] * 0.0;
    $116 = $$07484 + $22 | 0;
    $117 = $116 >>> 0 < $24 >>> 0;
    $$175 = $116 - ($117 ? 0 : $24) | 0;
    $$1 = $$07385 + $20 + (($117 ^ 1) & 1) | 0;
    if (($$1 | 0) < (HEAP32[$3 >> 2] | 0)) {
     $$07385 = $$1;
     $$07484 = $$175;
     $$086 = $112;
    } else {
     $$0$lcssa = $112;
     $$073$lcssa = $$1;
     $$074$lcssa = $$175;
     break L1;
    }
   }
  }
  $$07385$us = $12;
  $$07484$us = $16;
  $$086$us = 0;
  while (1) {
   if (($$086$us | 0) >= (HEAP32[$5 >> 2] | 0)) {
    $$0$lcssa = $$086$us;
    $$073$lcssa = $$07385$us;
    $$074$lcssa = $$07484$us;
    break L1;
   }
   $35 = $2 + ($$07385$us << 2) | 0;
   $36 = HEAP32[$27 >> 2] | 0;
   $37 = Math_imul($36, $$07484$us) | 0;
   $38 = HEAP32[$23 >> 2] | 0;
   $39 = ($37 >>> 0) / ($38 >>> 0) | 0;
   $41 = $37 - (Math_imul($39, $38) | 0) | 0;
   $42 = HEAP32[$29 >> 2] | 0;
   $43 = 4 - $39 | 0;
   $$07276$us = 0;
   $$sroa$0$080$us = 0.0;
   $$sroa$10$177$us = 0.0;
   $$sroa$4$079$us = 0.0;
   $$sroa$7$078$us = 0.0;
   do {
    $45 = +HEAPF32[$35 + ($$07276$us << 2) >> 2];
    $$07276$us = $$07276$us + 1 | 0;
    $48 = $43 + (Math_imul($$07276$us, $36) | 0) | 0;
    $$sroa$0$080$us = $$sroa$0$080$us + $45 * +HEAPF32[$42 + ($48 + -2 << 2) >> 2];
    $$sroa$4$079$us = $$sroa$4$079$us + $45 * +HEAPF32[$42 + ($48 + -1 << 2) >> 2];
    $$sroa$7$078$us = $$sroa$7$078$us + $45 * +HEAPF32[$42 + ($48 << 2) >> 2];
    $$sroa$10$177$us = $$sroa$10$177$us + $45 * +HEAPF32[$42 + ($48 + 1 << 2) >> 2];
   } while (($$07276$us | 0) != ($8 | 0));
   _cubic_coef(+($41 >>> 0) / +($38 >>> 0), $6);
   $82 = $$086$us + 1 | 0;
   HEAPF32[$4 + ((Math_imul($$086$us, $18) | 0) << 2) >> 2] = $$sroa$0$080$us * +HEAPF32[$6 >> 2] + $$sroa$4$079$us * +HEAPF32[$30 >> 2] + $$sroa$7$078$us * +HEAPF32[$31 >> 2] + $$sroa$10$177$us * +HEAPF32[$32 >> 2];
   $86 = $$07484$us + $22 | 0;
   $87 = $86 >>> 0 < $24 >>> 0;
   $$175$us = $86 - ($87 ? 0 : $24) | 0;
   $$1$us = $$07385$us + $20 + (($87 ^ 1) & 1) | 0;
   if (($$1$us | 0) < (HEAP32[$3 >> 2] | 0)) {
    $$07385$us = $$1$us;
    $$07484$us = $$175$us;
    $$086$us = $82;
   } else {
    $$0$lcssa = $82;
    $$073$lcssa = $$1$us;
    $$074$lcssa = $$175$us;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
  $$073$lcssa = $12;
  $$074$lcssa = $16;
 } while (0);
 HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] = $$073$lcssa;
 HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] = $$074$lcssa;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}

function _remove_doubling($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0.0, $$0123 = 0.0, $$0124 = 0, $$0126$lcssa = 0.0, $$0126149 = 0.0, $$0127$lcssa = 0.0, $$0127148 = 0.0, $$0129151 = 0.0, $$0130 = 0.0, $$0132$lcssa = 0.0, $$0132147 = 0.0, $$0134146 = 0, $$0136$lcssa = 0, $$0136145 = 0, $$0138150 = 0, $$1 = 0.0, $$1128 = 0.0, $$1133 = 0.0, $$1137 = 0, $$neg = 0, $10 = 0, $109 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0.0, $20 = 0.0, $25 = 0.0, $32 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $42 = 0, $43 = 0, $46 = 0, $5 = 0, $6 = 0, $60 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $75 = 0, $76 = 0.0, $78 = 0.0, $8 = 0, $87 = 0.0, $91 = 0.0, $94 = 0.0, $97 = 0.0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $5 = sp + 2060 | 0;
 $6 = sp + 2056 | 0;
 $7 = sp + 2052 | 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $10 = ($1 | 0) / 2 | 0;
 $11 = $0 + 2048 | 0;
 $spec$select = ($8 | 0) < 1024 ? ($8 | 0) / 2 | 0 : 511;
 HEAP32[$2 >> 2] = $spec$select;
 $13 = sp;
 _dual_inner_prod_c_119($11, $11, $11 + (0 - $spec$select << 2) | 0, $10, $6, $5);
 $16 = HEAP32[$6 >> 2] | 0;
 HEAP32[$13 >> 2] = $16;
 $17 = (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $$0129151 = $17;
 $$0138150 = 1;
 do {
  $20 = +HEAPF32[$11 + (0 - $$0138150 << 2) >> 2];
  $25 = +HEAPF32[$11 + ($10 - $$0138150 << 2) >> 2];
  $$0129151 = $$0129151 + $20 * $20 - $25 * $25;
  HEAPF32[$13 + ($$0138150 << 2) >> 2] = $$0129151 < 0.0 ? 0.0 : $$0129151;
  $$0138150 = $$0138150 + 1 | 0;
 } while (($$0138150 | 0) != 513);
 $32 = ($3 | 0) / 2 | 0;
 $34 = +HEAPF32[$13 + ($spec$select << 2) >> 2];
 $35 = +HEAPF32[$5 >> 2];
 $36 = +_compute_pitch_gain($35, $17, $34);
 $37 = $spec$select << 1;
 $38 = $36 * .699999988079071;
 $39 = $4 * .5;
 $40 = $36 * .8500000238418579;
 $$0126149 = $34;
 $$0127148 = $35;
 $$0132147 = $36;
 $$0134146 = 2;
 $$0136145 = $spec$select;
 while (1) {
  $42 = $$0134146 << 1;
  $43 = _celt_udiv_120($$0134146 + $37 | 0, $42) | 0;
  if (($43 | 0) < 7) {
   $$0126$lcssa = $$0126149;
   $$0127$lcssa = $$0127148;
   $$0132$lcssa = $$0132147;
   $$0136$lcssa = $$0136145;
   break;
  }
  if (($$0134146 | 0) == 2) {
   $46 = $43 + $spec$select | 0;
   $$0124 = ($46 | 0) > 512 ? $spec$select : $46;
  } else $$0124 = _celt_udiv_120((Math_imul($37, HEAP32[20240 + ($$0134146 << 2) >> 2] | 0) | 0) + $$0134146 | 0, $42) | 0;
  _dual_inner_prod_c_119($11, $11 + (0 - $43 << 2) | 0, $11 + (0 - $$0124 << 2) | 0, $10, $5, $7);
  $60 = (+HEAPF32[$5 >> 2] + +HEAPF32[$7 >> 2]) * .5;
  HEAPF32[$5 >> 2] = $60;
  $66 = (+HEAPF32[$13 + ($43 << 2) >> 2] + +HEAPF32[$13 + ($$0124 << 2) >> 2]) * .5;
  $67 = +_compute_pitch_gain($60, $17, $66);
  $68 = $43 - $32 | 0;
  $69 = ($68 | 0) > -1 ? $68 : 0 - $68 | 0;
  if (($69 | 0) < 2) $$0123 = $4; else {
   $75 = (Math_imul($$0134146 * 5 | 0, $$0134146) | 0) < ($spec$select | 0) & ($69 | 0) == 2;
   $$0123 = $75 ? $39 : 0.0;
  }
  $76 = $38 - $$0123;
  if (($43 | 0) < 21) {
   $78 = $40 - $$0123;
   $$0 = $78 < .4000000059604645 ? .4000000059604645 : $78;
  } else $$0 = $76 < .30000001192092896 ? .30000001192092896 : $76;
  if ($67 > $$0) {
   $$1 = $66;
   $$1128 = $60;
   $$1133 = $67;
   $$1137 = $43;
  } else {
   $$1 = $$0126149;
   $$1128 = $$0127148;
   $$1133 = $$0132147;
   $$1137 = $$0136145;
  }
  $$0134146 = $$0134146 + 1 | 0;
  if ($$0134146 >>> 0 >= 16) {
   $$0126$lcssa = $$1;
   $$0127$lcssa = $$1128;
   $$0132$lcssa = $$1133;
   $$0136$lcssa = $$1137;
   break;
  } else {
   $$0126149 = $$1;
   $$0127148 = $$1128;
   $$0132147 = $$1133;
   $$0136145 = $$1137;
  }
 }
 $87 = $$0127$lcssa < 0.0 ? 0.0 : $$0127$lcssa;
 $$neg = 1 - $$0136$lcssa | 0;
 $91 = +_celt_inner_prod_c_111($11, $11 + ($$neg << 2) | 0, $10);
 $94 = +_celt_inner_prod_c_111($11, $11 + ($$neg + -1 << 2) | 0, $10);
 $97 = +_celt_inner_prod_c_111($11, $11 + ($$neg + -2 << 2) | 0, $10);
 $$0130 = !($$0126$lcssa <= $87) ? $87 / ($$0126$lcssa + 1.0) : 1.0;
 $109 = ($97 - $91 > ($94 - $91) * .699999988079071 ? 1 : ($91 - $97 > ($94 - $97) * .699999988079071) << 31 >> 31) + ($$0136$lcssa << 1) | 0;
 HEAP32[$2 >> 2] = ($109 | 0) > 15 ? $109 : 15;
 STACKTOP = sp;
 return +($$0130 > $$0132$lcssa ? $$0132$lcssa : $$0130);
}

function _celt_synthesis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$0$us = 0, $$0141156 = 0, $$0143151 = 0, $$0145 = 0, $$0146 = 0, $$0147 = 0, $$1144150 = 0, $$2153 = 0, $$3160$us = 0, $$idx = 0, $$idx1$val = 0, $$idx3$val = 0, $$idx6 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $38 = 0, $44 = 0, $51 = 0, $55 = 0, $64 = 0, $65 = 0, $69 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $83 = 0, $86 = 0, $89 = 0, $91 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 $13 = HEAP32[$0 + 4 >> 2] | 0;
 $15 = HEAP32[$0 + 8 >> 2] | 0;
 $16 = $0 + 44 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $17 << $9;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 $20 = 1 << $9;
 $21 = ($8 | 0) == 0;
 $$0147 = (HEAP32[$0 + 36 >> 2] | 0) - ($21 ? $9 : 0) | 0;
 $$0146 = $21 ? $18 : $17;
 $$0145 = $21 ? 1 : $20;
 if (($6 | 0) == 1 & ($7 | 0) == 2) {
  _denormalise_bands(HEAP32[$0 + 32 >> 2] | 0, $17, $1, $19, $3, $4, $5, $20, $10, $11);
  $27 = $2 + 4 | 0;
  $30 = (HEAP32[$27 >> 2] | 0) + ((($13 | 0) / 2 | 0) << 2) | 0;
  _memcpy($30 | 0, $19 | 0, $18 << 2 | 0) | 0;
  if (($$0145 | 0) <= 0) {
   STACKTOP = sp;
   return;
  }
  $33 = $0 + 64 | 0;
  $34 = $0 + 60 | 0;
  $$0143151 = 0;
  do {
   $38 = (HEAP32[$2 >> 2] | 0) + ((Math_imul($$0143151, $$0146) | 0) << 2) | 0;
   _clt_mdct_backward_c($33, $30 + ($$0143151 << 2) | 0, $38, HEAP32[$34 >> 2] | 0, $13, $$0147, $$0145);
   $$0143151 = $$0143151 + 1 | 0;
  } while (($$0143151 | 0) != ($$0145 | 0));
  $$1144150 = 0;
  do {
   $44 = (HEAP32[$27 >> 2] | 0) + ((Math_imul($$1144150, $$0146) | 0) << 2) | 0;
   _clt_mdct_backward_c($33, $19 + ($$1144150 << 2) | 0, $44, HEAP32[$34 >> 2] | 0, $13, $$0147, $$0145);
   $$1144150 = $$1144150 + 1 | 0;
  } while (($$1144150 | 0) != ($$0145 | 0));
  STACKTOP = sp;
  return;
 }
 if (($6 | 0) == 2 & ($7 | 0) == 1) {
  $51 = (HEAP32[$2 >> 2] | 0) + ((($13 | 0) / 2 | 0) << 2) | 0;
  $$idx6 = $0 + 32 | 0;
  _denormalise_bands(HEAP32[$$idx6 >> 2] | 0, $17, $1, $19, $3, $4, $5, $20, $10, $11);
  _denormalise_bands(HEAP32[$$idx6 >> 2] | 0, HEAP32[$16 >> 2] | 0, $1 + ($18 << 2) | 0, $51, $3 + ($15 << 2) | 0, $4, $5, $20, $10, $11);
  if (($18 | 0) > 0) {
   $$0141156 = 0;
   do {
    $55 = $19 + ($$0141156 << 2) | 0;
    HEAPF32[$55 >> 2] = +HEAPF32[$55 >> 2] * .5 + +HEAPF32[$51 + ($$0141156 << 2) >> 2] * .5;
    $$0141156 = $$0141156 + 1 | 0;
   } while (($$0141156 | 0) != ($18 | 0));
  }
  if (($$0145 | 0) <= 0) {
   STACKTOP = sp;
   return;
  }
  $64 = $0 + 64 | 0;
  $65 = $0 + 60 | 0;
  $$2153 = 0;
  do {
   $69 = (HEAP32[$2 >> 2] | 0) + ((Math_imul($$2153, $$0146) | 0) << 2) | 0;
   _clt_mdct_backward_c($64, $19 + ($$2153 << 2) | 0, $69, HEAP32[$65 >> 2] | 0, $13, $$0147, $$0145);
   $$2153 = $$2153 + 1 | 0;
  } while (($$2153 | 0) != ($$0145 | 0));
  STACKTOP = sp;
  return;
 }
 $73 = $0 + 64 | 0;
 $74 = $0 + 60 | 0;
 $$idx = $0 + 32 | 0;
 if (($$0145 | 0) <= 0) {
  $$0 = 0;
  $$idx3$val = $17;
  while (1) {
   $89 = $1 + ((Math_imul($$0, $18) | 0) << 2) | 0;
   $91 = $3 + ((Math_imul($$0, $15) | 0) << 2) | 0;
   _denormalise_bands(HEAP32[$$idx >> 2] | 0, $$idx3$val, $89, $19, $91, $4, $5, $20, $10, $11);
   $92 = $$0 + 1 | 0;
   if (($92 | 0) >= ($7 | 0)) break;
   $$0 = $92;
   $$idx3$val = HEAP32[$16 >> 2] | 0;
  }
  STACKTOP = sp;
  return;
 }
 $$0$us = 0;
 $$idx1$val = $17;
 while (1) {
  $76 = $1 + ((Math_imul($$0$us, $18) | 0) << 2) | 0;
  $78 = $3 + ((Math_imul($$0$us, $15) | 0) << 2) | 0;
  _denormalise_bands(HEAP32[$$idx >> 2] | 0, $$idx1$val, $76, $19, $78, $4, $5, $20, $10, $11);
  $79 = $2 + ($$0$us << 2) | 0;
  $$3160$us = 0;
  do {
   $83 = (HEAP32[$79 >> 2] | 0) + ((Math_imul($$3160$us, $$0146) | 0) << 2) | 0;
   _clt_mdct_backward_c($73, $19 + ($$3160$us << 2) | 0, $83, HEAP32[$74 >> 2] | 0, $13, $$0147, $$0145);
   $$3160$us = $$3160$us + 1 | 0;
  } while (($$3160$us | 0) != ($$0145 | 0));
  $86 = $$0$us + 1 | 0;
  if (($86 | 0) >= ($7 | 0)) break;
  $$0$us = $86;
  $$idx1$val = HEAP32[$16 >> 2] | 0;
 }
 STACKTOP = sp;
 return;
}

function _kf_bfly4($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0130137 = 0, $$0132142$us = 0, $$0133141$us = 0, $$0134140$us = 0, $$0135139$us = 0, $$0138 = 0, $$1131145$us = 0, $$1143$us = 0, $10 = 0.0, $100 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $33 = 0.0, $34 = 0.0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $55 = 0, $56 = 0.0, $58 = 0.0, $60 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $68 = 0, $69 = 0.0, $71 = 0.0, $73 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $81 = 0, $82 = 0.0, $84 = 0.0, $86 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 if (($3 | 0) == 1) {
  if (($4 | 0) <= 0) return;
  $$0130137 = 0;
  $$0138 = $0;
  while (1) {
   $8 = +HEAPF32[$$0138 >> 2];
   $9 = $$0138 + 16 | 0;
   $10 = +HEAPF32[$9 >> 2];
   $11 = $8 - $10;
   $12 = $$0138 + 4 | 0;
   $13 = +HEAPF32[$12 >> 2];
   $14 = $$0138 + 20 | 0;
   $15 = +HEAPF32[$14 >> 2];
   $16 = $13 - $15;
   $17 = $8 + $10;
   $18 = $13 + $15;
   $19 = $$0138 + 8 | 0;
   $20 = +HEAPF32[$19 >> 2];
   $21 = $$0138 + 24 | 0;
   $22 = +HEAPF32[$21 >> 2];
   $23 = $20 + $22;
   $24 = $$0138 + 12 | 0;
   $25 = +HEAPF32[$24 >> 2];
   $26 = $$0138 + 28 | 0;
   $27 = +HEAPF32[$26 >> 2];
   $28 = $25 + $27;
   HEAPF32[$9 >> 2] = $17 - $23;
   HEAPF32[$14 >> 2] = $18 - $28;
   HEAPF32[$$0138 >> 2] = $17 + $23;
   HEAPF32[$12 >> 2] = $18 + $28;
   $33 = $20 - $22;
   $34 = $25 - $27;
   HEAPF32[$19 >> 2] = $11 + $34;
   HEAPF32[$24 >> 2] = $16 - $33;
   HEAPF32[$21 >> 2] = $11 - $34;
   HEAPF32[$26 >> 2] = $16 + $33;
   $$0130137 = $$0130137 + 1 | 0;
   if (($$0130137 | 0) == ($4 | 0)) break; else $$0138 = $$0138 + 32 | 0;
  }
  return;
 }
 $41 = $3 << 1;
 $42 = $3 * 3 | 0;
 if (($4 | 0) <= 0) return;
 $44 = $2 + 48 | 0;
 $46 = $1 << 1;
 $47 = $1 * 3 | 0;
 if (($3 | 0) <= 0) return;
 $$1131145$us = 0;
 do {
  $49 = $0 + ((Math_imul($$1131145$us, $5) | 0) << 3) | 0;
  $50 = HEAP32[$44 >> 2] | 0;
  $$0132142$us = 0;
  $$0133141$us = $50;
  $$0134140$us = $50;
  $$0135139$us = $50;
  $$1143$us = $49;
  while (1) {
   $51 = $$1143$us + ($3 << 3) | 0;
   $52 = +HEAPF32[$51 >> 2];
   $53 = +HEAPF32[$$0135139$us >> 2];
   $55 = $$1143$us + ($3 << 3) + 4 | 0;
   $56 = +HEAPF32[$55 >> 2];
   $58 = +HEAPF32[$$0135139$us + 4 >> 2];
   $60 = $52 * $53 - $56 * $58;
   $63 = $53 * $56 + $52 * $58;
   $64 = $$1143$us + ($41 << 3) | 0;
   $65 = +HEAPF32[$64 >> 2];
   $66 = +HEAPF32[$$0134140$us >> 2];
   $68 = $$1143$us + ($41 << 3) + 4 | 0;
   $69 = +HEAPF32[$68 >> 2];
   $71 = +HEAPF32[$$0134140$us + 4 >> 2];
   $73 = $65 * $66 - $69 * $71;
   $76 = $66 * $69 + $65 * $71;
   $77 = $$1143$us + ($42 << 3) | 0;
   $78 = +HEAPF32[$77 >> 2];
   $79 = +HEAPF32[$$0133141$us >> 2];
   $81 = $$1143$us + ($42 << 3) + 4 | 0;
   $82 = +HEAPF32[$81 >> 2];
   $84 = +HEAPF32[$$0133141$us + 4 >> 2];
   $86 = $78 * $79 - $82 * $84;
   $89 = $79 * $82 + $78 * $84;
   $90 = +HEAPF32[$$1143$us >> 2];
   $91 = $90 - $73;
   $92 = $$1143$us + 4 | 0;
   $93 = +HEAPF32[$92 >> 2];
   $94 = $93 - $76;
   $95 = $73 + $90;
   HEAPF32[$$1143$us >> 2] = $95;
   $96 = $76 + $93;
   HEAPF32[$92 >> 2] = $96;
   $97 = $60 + $86;
   $98 = $63 + $89;
   $99 = $60 - $86;
   $100 = $63 - $89;
   HEAPF32[$64 >> 2] = $95 - $97;
   HEAPF32[$68 >> 2] = $96 - $98;
   HEAPF32[$$1143$us >> 2] = $97 + +HEAPF32[$$1143$us >> 2];
   HEAPF32[$92 >> 2] = $98 + +HEAPF32[$92 >> 2];
   HEAPF32[$51 >> 2] = $91 + $100;
   HEAPF32[$55 >> 2] = $94 - $99;
   HEAPF32[$77 >> 2] = $91 - $100;
   HEAPF32[$81 >> 2] = $94 + $99;
   $$0132142$us = $$0132142$us + 1 | 0;
   if (($$0132142$us | 0) == ($3 | 0)) break; else {
    $$0133141$us = $$0133141$us + ($47 << 3) | 0;
    $$0134140$us = $$0134140$us + ($46 << 3) | 0;
    $$0135139$us = $$0135139$us + ($1 << 3) | 0;
    $$1143$us = $$1143$us + 8 | 0;
   }
  }
  $$1131145$us = $$1131145$us + 1 | 0;
 } while (($$1131145$us | 0) != ($4 | 0));
 return;
}

function _opus_decode_native($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0131144 = 0, $$0132143 = 0, $$0133 = 0, $$0134$lcssa = 0, $$0134142 = 0, $$val = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $23 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $6 = 0, $62 = 0, $7 = 0, $71 = 0, $72 = 0, $79 = 0, $8 = 0, $85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 100 | 0;
 $8 = sp;
 _validate_opus_decoder($0);
 if ($5 >>> 0 > 1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $10 = ($5 | 0) != 0;
 $11 = ($2 | 0) == 0;
 $12 = ($1 | 0) == 0;
 if ($12 | ($11 | $10)) if (($4 | 0) % ((HEAP32[$0 + 12 >> 2] | 0) / 400 | 0 | 0) | 0 | 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($12 | $11) {
  $18 = $0 + 8 | 0;
  $$0133 = 0;
  do {
   $23 = _opus_decode_frame($0, 0, 0, $3 + ((Math_imul(HEAP32[$18 >> 2] | 0, $$0133) | 0) << 2) | 0, $4 - $$0133 | 0, 0) | 0;
   if (($23 | 0) < 0) {
    $$0 = $23;
    label = 32;
    break;
   }
   $$0133 = $23 + $$0133 | 0;
  } while (($$0133 | 0) < ($4 | 0));
  if ((label | 0) == 32) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($$0133 | 0) != ($4 | 0)) _celt_fatal(47426, 47468, 652);
  HEAP32[$0 + 72 >> 2] = $4;
  $$0 = $4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($2 | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$val = HEAP8[$1 >> 0] | 0;
 $30 = _opus_packet_get_mode($$val) | 0;
 $31 = _opus_packet_get_bandwidth($$val) | 0;
 $34 = _opus_packet_get_samples_per_frame($$val, HEAP32[$0 + 12 >> 2] | 0) | 0;
 $35 = _opus_packet_get_nb_channels($$val) | 0;
 $36 = _opus_packet_parse_impl($1, $2, $7, 0, $8, $6) | 0;
 if (($36 | 0) < 0) {
  $$0 = $36;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $39 = $1 + (HEAP32[$6 >> 2] | 0) | 0;
 if (!$10) {
  if ((Math_imul($36, $34) | 0) > ($4 | 0)) {
   $$0 = -2;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$0 + 56 >> 2] = $30;
  HEAP32[$0 + 52 >> 2] = $31;
  HEAP32[$0 + 64 >> 2] = $34;
  HEAP32[$0 + 48 >> 2] = $35;
  L32 : do if (($36 | 0) > 0) {
   $71 = $0 + 8 | 0;
   $$0131144 = $39;
   $$0132143 = 0;
   $$0134142 = 0;
   while (1) {
    $72 = $8 + ($$0132143 << 1) | 0;
    $79 = _opus_decode_frame($0, $$0131144, HEAP16[$72 >> 1] | 0, $3 + ((Math_imul(HEAP32[$71 >> 2] | 0, $$0134142) | 0) << 2) | 0, $4 - $$0134142 | 0, 0) | 0;
    if (($79 | 0) < 0) {
     $$0 = $79;
     label = 32;
     break;
    }
    if (($79 | 0) != ($34 | 0)) {
     label = 29;
     break;
    }
    $85 = $34 + $$0134142 | 0;
    $$0132143 = $$0132143 + 1 | 0;
    if (($$0132143 | 0) >= ($36 | 0)) {
     $$0134$lcssa = $85;
     break L32;
    } else {
     $$0131144 = $$0131144 + (HEAP16[$72 >> 1] | 0) | 0;
     $$0134142 = $85;
    }
   }
   if ((label | 0) == 29) _celt_fatal(47539, 47468, 724); else if ((label | 0) == 32) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0134$lcssa = 0; while (0);
  HEAP32[$0 + 72 >> 2] = $$0134$lcssa;
  HEAPF32[$0 + 80 >> 2] = 0.0;
  HEAPF32[$0 + 76 >> 2] = 0.0;
  $$0 = $$0134$lcssa;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(($30 | 0) == 1002 | ($34 | 0) > ($4 | 0))) {
  $42 = $0 + 56 | 0;
  if ((HEAP32[$42 >> 2] | 0) != 1002) {
   $46 = $0 + 72 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   $48 = $4 - $34 | 0;
   do if ($48 | 0) {
    $50 = _opus_decode_native($0, 0, 0, $3, $48, 0) | 0;
    if (($50 | 0) < 0) {
     HEAP32[$46 >> 2] = $47;
     $$0 = $50;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     if (($50 | 0) == ($48 | 0)) break;
     _celt_fatal(47487, 47468, 689);
    }
   } while (0);
   HEAP32[$42 >> 2] = $30;
   HEAP32[$0 + 52 >> 2] = $31;
   HEAP32[$0 + 64 >> 2] = $34;
   HEAP32[$0 + 48 >> 2] = $35;
   $62 = _opus_decode_frame($0, $39, HEAP16[$8 >> 1] | 0, $3 + ((Math_imul(HEAP32[$0 + 8 >> 2] | 0, $48) | 0) << 2) | 0, $34, 1) | 0;
   if (($62 | 0) < 0) {
    $$0 = $62;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$46 >> 2] = $4;
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = _opus_decode_native($0, 0, 0, $3, $4, 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _quant_band_stereo($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0164 = 0, $$0165 = 0, $$0166 = 0, $$0172 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $114 = 0, $117 = 0, $12 = 0, $129 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $42 = 0, $54 = 0, $57 = 0, $58 = 0, $73 = 0, $77 = 0.0, $78 = 0, $81 = 0.0, $85 = 0.0, $93 = 0, $96 = 0, $97 = 0, $99 = 0, $spec$select = 0, $spec$select170 = 0, $spec$store$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $10;
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = HEAP32[$0 + 28 >> 2] | 0;
 if (($3 | 0) == 1) {
  _quant_band_n1($0, $1, $2, $8);
  $$0164 = 1;
  STACKTOP = sp;
  return $$0164 | 0;
 }
 _compute_theta($0, $13, $1, $2, $3, $11, $5, $5, $7, 1, $12);
 $18 = HEAP32[$13 >> 2] | 0;
 $24 = HEAP32[$13 + 16 >> 2] | 0;
 $26 = HEAP32[$13 + 20 >> 2] | 0;
 $28 = +(HEAP32[$13 + 4 >> 2] | 0) * .000030517578125;
 $30 = +(HEAP32[$13 + 8 >> 2] | 0) * .000030517578125;
 $31 = ($3 | 0) == 2;
 $32 = HEAP32[$11 >> 2] | 0;
 do if ($31) {
  $34 = ($24 | 16384 | 0) != 16384;
  $spec$store$select = $34 ? 8 : 0;
  $35 = $32 - $spec$store$select | 0;
  $36 = ($24 | 0) > 8192;
  $37 = $0 + 32 | 0;
  HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) - ($spec$store$select + $26);
  $41 = $36 ? $2 : $1;
  $42 = $36 ? $1 : $2;
  do if ($34) if (!$14) {
   $$0165 = _ec_dec_bits($16, 1) | 0;
   break;
  } else {
   $54 = +HEAPF32[$41 >> 2] * +HEAPF32[$42 + 4 >> 2] - +HEAPF32[$41 + 4 >> 2] * +HEAPF32[$42 >> 2] < 0.0 & 1;
   _ec_enc_bits($16, $54, 1);
   $$0165 = $54;
   break;
  } else $$0165 = 0; while (0);
  $57 = 1 - ($$0165 << 1) | 0;
  $58 = _quant_band($0, $41, 2, $35, $5, $6, $7, $8, 1.0, $9, $10) | 0;
  HEAPF32[$42 >> 2] = +HEAPF32[$41 + 4 >> 2] * +(0 - $57 | 0);
  HEAPF32[$42 + 4 >> 2] = +HEAPF32[$41 >> 2] * +($57 | 0);
  if (!(HEAP32[$0 + 4 >> 2] | 0)) $$0166 = $58; else {
   HEAPF32[$1 >> 2] = $28 * +HEAPF32[$1 >> 2];
   $73 = $1 + 4 | 0;
   HEAPF32[$73 >> 2] = $28 * +HEAPF32[$73 >> 2];
   $77 = $30 * +HEAPF32[$2 >> 2];
   HEAPF32[$2 >> 2] = $77;
   $78 = $2 + 4 | 0;
   HEAPF32[$78 >> 2] = $30 * +HEAPF32[$78 >> 2];
   $81 = +HEAPF32[$1 >> 2];
   HEAPF32[$1 >> 2] = $81 - $77;
   HEAPF32[$2 >> 2] = $81 + +HEAPF32[$2 >> 2];
   $85 = +HEAPF32[$73 >> 2];
   HEAPF32[$73 >> 2] = $85 - +HEAPF32[$78 >> 2];
   HEAPF32[$78 >> 2] = $85 + +HEAPF32[$78 >> 2];
   $$0166 = $58;
  }
 } else {
  $93 = ($32 - (HEAP32[$13 + 12 >> 2] | 0) | 0) / 2 | 0;
  $spec$select = ($32 | 0) < ($93 | 0) ? $32 : $93;
  $spec$select170 = ($spec$select | 0) > 0 ? $spec$select : 0;
  $96 = $32 - $spec$select170 | 0;
  $97 = $0 + 32 | 0;
  $99 = (HEAP32[$97 >> 2] | 0) - $26 | 0;
  HEAP32[$97 >> 2] = $99;
  $101 = HEAP32[$12 >> 2] | 0;
  if (($spec$select170 | 0) < ($96 | 0)) {
   $114 = _quant_band($0, $2, $3, $96, $5, 0, $7, 0, $30, 0, $101 >> $5) | 0;
   $117 = (HEAP32[$97 >> 2] | 0) - $99 + $96 | 0;
   $$0166 = _quant_band($0, $1, $3, (($24 | 0) != 16384 & ($117 | 0) > 24 ? $117 + -24 | 0 : 0) + $spec$select170 | 0, $5, $6, $7, $8, 1.0, $9, $101) | 0 | $114;
   break;
  } else {
   $102 = _quant_band($0, $1, $3, $spec$select170, $5, $6, $7, $8, 1.0, $9, $101) | 0;
   $105 = (HEAP32[$97 >> 2] | 0) - $99 + $spec$select170 | 0;
   $$0166 = _quant_band($0, $2, $3, (($24 | 0) != 0 & ($105 | 0) > 24 ? $105 + -24 | 0 : 0) + $96 | 0, $5, 0, $7, 0, $30, 0, $101 >> $5) | 0 | $102;
   break;
  }
 } while (0);
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0164 = $$0166;
  STACKTOP = sp;
  return $$0164 | 0;
 }
 if (!$31) _stereo_merge($1, $2, $28, $3);
 if (!(($18 | 0) != 0 & ($3 | 0) > 0)) {
  $$0164 = $$0166;
  STACKTOP = sp;
  return $$0164 | 0;
 }
 $$0172 = 0;
 do {
  $129 = $2 + ($$0172 << 2) | 0;
  HEAPF32[$129 >> 2] = -+HEAPF32[$129 >> 2];
  $$0172 = $$0172 + 1 | 0;
 } while (($$0172 | 0) != ($3 | 0));
 $$0164 = $$0166;
 STACKTOP = sp;
 return $$0164 | 0;
}

function _silk_decode_signs($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$02124 = 0, $$025 = 0, $101 = 0, $106 = 0, $111 = 0, $116 = 0, $12 = 0, $121 = 0, $126 = 0, $131 = 0, $136 = 0, $14 = 0, $141 = 0, $146 = 0, $151 = 0, $156 = 0, $161 = 0, $166 = 0, $17 = 0, $171 = 0, $176 = 0, $181 = 0, $19 = 0, $28 = 0, $33 = 0, $41 = 0, $46 = 0, $51 = 0, $56 = 0, $6 = 0, $61 = 0, $66 = 0, $71 = 0, $76 = 0, $81 = 0, $86 = 0, $91 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP8[$6 + 1 >> 0] = 0;
 $12 = 26224 + ((($3 << 1) + $4 << 16 >> 16) * 7 | 0) | 0;
 $14 = $2 + 8 >> 4;
 if (($2 | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 $$02124 = 0;
 $$025 = $1;
 while (1) {
  $17 = HEAP32[$5 + ($$02124 << 2) >> 2] | 0;
  if (($17 | 0) > 0) {
   $19 = $17 & 31;
   HEAP8[$6 >> 0] = HEAP8[$12 + ($19 >>> 0 < 6 ? $19 : 6) >> 0] | 0;
   if ((HEAP16[$$025 >> 1] | 0) > 0) {
    $28 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$$025 >> 1] = Math_imul($28, HEAP16[$$025 >> 1] | 0) | 0;
   }
   $33 = $$025 + 2 | 0;
   if ((HEAP16[$33 >> 1] | 0) > 0) {
    $41 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$33 >> 1] = Math_imul($41, HEAP16[$33 >> 1] | 0) | 0;
   }
   $46 = $$025 + 4 | 0;
   if ((HEAP16[$46 >> 1] | 0) > 0) {
    $51 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$46 >> 1] = Math_imul($51, HEAP16[$46 >> 1] | 0) | 0;
   }
   $56 = $$025 + 6 | 0;
   if ((HEAP16[$56 >> 1] | 0) > 0) {
    $61 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$56 >> 1] = Math_imul($61, HEAP16[$56 >> 1] | 0) | 0;
   }
   $66 = $$025 + 8 | 0;
   if ((HEAP16[$66 >> 1] | 0) > 0) {
    $71 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$66 >> 1] = Math_imul($71, HEAP16[$66 >> 1] | 0) | 0;
   }
   $76 = $$025 + 10 | 0;
   if ((HEAP16[$76 >> 1] | 0) > 0) {
    $81 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$76 >> 1] = Math_imul($81, HEAP16[$76 >> 1] | 0) | 0;
   }
   $86 = $$025 + 12 | 0;
   if ((HEAP16[$86 >> 1] | 0) > 0) {
    $91 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$86 >> 1] = Math_imul($91, HEAP16[$86 >> 1] | 0) | 0;
   }
   $96 = $$025 + 14 | 0;
   if ((HEAP16[$96 >> 1] | 0) > 0) {
    $101 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$96 >> 1] = Math_imul($101, HEAP16[$96 >> 1] | 0) | 0;
   }
   $106 = $$025 + 16 | 0;
   if ((HEAP16[$106 >> 1] | 0) > 0) {
    $111 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$106 >> 1] = Math_imul($111, HEAP16[$106 >> 1] | 0) | 0;
   }
   $116 = $$025 + 18 | 0;
   if ((HEAP16[$116 >> 1] | 0) > 0) {
    $121 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$116 >> 1] = Math_imul($121, HEAP16[$116 >> 1] | 0) | 0;
   }
   $126 = $$025 + 20 | 0;
   if ((HEAP16[$126 >> 1] | 0) > 0) {
    $131 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$126 >> 1] = Math_imul($131, HEAP16[$126 >> 1] | 0) | 0;
   }
   $136 = $$025 + 22 | 0;
   if ((HEAP16[$136 >> 1] | 0) > 0) {
    $141 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$136 >> 1] = Math_imul($141, HEAP16[$136 >> 1] | 0) | 0;
   }
   $146 = $$025 + 24 | 0;
   if ((HEAP16[$146 >> 1] | 0) > 0) {
    $151 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$146 >> 1] = Math_imul($151, HEAP16[$146 >> 1] | 0) | 0;
   }
   $156 = $$025 + 26 | 0;
   if ((HEAP16[$156 >> 1] | 0) > 0) {
    $161 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$156 >> 1] = Math_imul($161, HEAP16[$156 >> 1] | 0) | 0;
   }
   $166 = $$025 + 28 | 0;
   if ((HEAP16[$166 >> 1] | 0) > 0) {
    $171 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$166 >> 1] = Math_imul($171, HEAP16[$166 >> 1] | 0) | 0;
   }
   $176 = $$025 + 30 | 0;
   if ((HEAP16[$176 >> 1] | 0) > 0) {
    $181 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
    HEAP16[$176 >> 1] = Math_imul($181, HEAP16[$176 >> 1] | 0) | 0;
   }
  }
  $$02124 = $$02124 + 1 | 0;
  if (($$02124 | 0) >= ($14 | 0)) break; else $$025 = $$025 + 32 | 0;
 }
 STACKTOP = sp;
 return;
}

function _anti_collapse($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 var $$0$lcssa = 0, $$0100103 = 0, $$0100103$us = 0, $$0107 = 0, $$0107$us = 0, $$093112 = 0, $$095 = 0.0, $$096 = 0.0, $$097 = 0, $$098111 = 0, $$099101$us = 0, $$1 = 0, $$1$us = 0, $$194 = 0, $$2$lcssa = 0, $$2$lcssa118 = 0, $$2106$us = 0, $$3102$us = 0, $$4$us = 0, $106 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $40 = 0.0, $41 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0.0, $54 = 0.0, $55 = 0, $57 = 0.0, $60 = 0.0, $67 = 0.0, $75 = 0.0, $79 = 0.0, $81 = 0, $87 = 0, $89 = 0, $90 = 0.0, $98 = 0, $spec$select = 0.0, $$098111$looptemp = 0;
 if (($6 | 0) >= ($7 | 0)) return;
 $14 = $0 + 32 | 0;
 $15 = $0 + 8 | 0;
 $16 = ($4 | 0) == 1;
 $17 = ($3 | 0) == 3;
 $18 = 1 << $3;
 $19 = ($3 | 0) == 31;
 $$093112 = $12;
 $$098111 = $6;
 while (1) {
  $20 = HEAP32[$14 >> 2] | 0;
  $$098111$looptemp = $$098111;
  $$098111 = $$098111 + 1 | 0;
  $28 = (HEAP16[$20 + ($$098111 << 1) >> 1] | 0) - (HEAP16[$20 + ($$098111$looptemp << 1) >> 1] | 0) | 0;
  $40 = +Math_exp(+(+((_celt_udiv((HEAP32[$11 + ($$098111$looptemp << 2) >> 2] | 0) + 1 | 0, $28) | 0) >>> $3 | 0) * -.125 * .6931471805599453)) * .5;
  $41 = $28 << $3;
  $45 = 1.0 / +Math_sqrt(+(+($41 | 0)));
  $46 = Math_imul($$098111$looptemp, $4) | 0;
  $47 = ($28 | 0) > 0;
  $$097 = 0;
  $$194 = $$093112;
  while (1) {
   $48 = HEAP32[$15 >> 2] | 0;
   $50 = (Math_imul($48, $$097) | 0) + $$098111$looptemp | 0;
   $52 = +HEAPF32[$9 + ($50 << 2) >> 2];
   $54 = +HEAPF32[$10 + ($50 << 2) >> 2];
   if ($16) {
    $55 = $48 + $$098111$looptemp | 0;
    $57 = +HEAPF32[$9 + ($55 << 2) >> 2];
    $60 = +HEAPF32[$10 + ($55 << 2) >> 2];
    $$095 = $54 > $60 ? $54 : $60;
    $$096 = $52 > $57 ? $52 : $57;
   } else {
    $$095 = $54;
    $$096 = $52;
   }
   $67 = +HEAPF32[$8 + ($50 << 2) >> 2] - ($$096 < $$095 ? $$096 : $$095);
   $75 = +Math_exp(+(-($67 < 0.0 ? 0.0 : $67) * .6931471805599453)) * 2.0;
   $spec$select = $17 ? $75 * 1.4142135381698608 : $75;
   $79 = $45 * ($40 < $spec$select ? $40 : $spec$select);
   $81 = $1 + ((Math_imul($$097, $5) | 0) << 2) | 0;
   $87 = $81 + (HEAP16[(HEAP32[$14 >> 2] | 0) + ($$098111$looptemp << 1) >> 1] << $3 << 2) | 0;
   if ($19) $$2$lcssa118 = $$194; else {
    $89 = $2 + ($$097 + $46) | 0;
    $90 = -$79;
    if ($47) {
     $$0100103$us = 0;
     $$0107$us = 0;
     $$2106$us = $$194;
     while (1) {
      if (!(1 << $$0100103$us & HEAPU8[$89 >> 0])) {
       $$099101$us = 0;
       $$3102$us = $$2106$us;
       while (1) {
        $98 = _celt_lcg_rand($$3102$us) | 0;
        HEAPF32[$87 + (($$099101$us << $3) + $$0100103$us << 2) >> 2] = ($98 & 32768 | 0) == 0 ? $90 : $79;
        $$099101$us = $$099101$us + 1 | 0;
        if (($$099101$us | 0) == ($28 | 0)) {
         $$1$us = 1;
         $$4$us = $98;
         break;
        } else $$3102$us = $98;
       }
      } else {
       $$1$us = $$0107$us;
       $$4$us = $$2106$us;
      }
      $$0100103$us = $$0100103$us + 1 | 0;
      if (($$0100103$us | 0) >= ($18 | 0)) {
       $$0$lcssa = $$1$us;
       $$2$lcssa = $$4$us;
       break;
      } else {
       $$0107$us = $$1$us;
       $$2106$us = $$4$us;
      }
     }
    } else {
     $106 = HEAPU8[$89 >> 0] | 0;
     $$0100103 = 0;
     $$0107 = 0;
     while (1) {
      $$1 = (1 << $$0100103 & $106 | 0) == 0 ? 1 : $$0107;
      $$0100103 = $$0100103 + 1 | 0;
      if (($$0100103 | 0) >= ($18 | 0)) {
       $$0$lcssa = $$1;
       $$2$lcssa = $$194;
       break;
      } else $$0107 = $$1;
     }
    }
    if (!$$0$lcssa) $$2$lcssa118 = $$2$lcssa; else {
     _renormalise_vector($87, $41, 1.0);
     $$2$lcssa118 = $$2$lcssa;
    }
   }
   $$097 = $$097 + 1 | 0;
   if (($$097 | 0) >= ($4 | 0)) break; else $$194 = $$2$lcssa118;
  }
  if (($$098111 | 0) == ($7 | 0)) break; else $$093112 = $$2$lcssa118;
 }
 return;
}

function _quant_coarse_energy_impl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = +$13;
 $14 = $14 | 0;
 var $$0104 = 0, $$096 = 0, $$097$lcssa = 0, $$097103 = 0, $$098 = 0.0, $$099 = 0.0, $$1 = 0, $$idx = 0, $$idx101 = 0, $100 = 0, $106 = 0, $121 = 0, $122 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0.0, $48 = 0.0, $51 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $58 = 0, $61 = 0.0, $66 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $77 = 0, $79 = 0, $88 = 0, $90 = 0, $97 = 0, $99 = 0.0, $or$cond3 = 0, $spec$select = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $15 = sp;
 $16 = sp + 8 | 0;
 $17 = $15;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$17 + 4 >> 2] = 0;
 if (($6 + 3 | 0) <= ($5 | 0)) _ec_enc_bit_logp($9, $12, 3);
 if (!$12) {
  $$098 = +HEAPF32[20752 + ($11 << 2) >> 2];
  $$099 = +HEAPF32[20768 + ($11 << 2) >> 2];
 } else {
  $$098 = 0.0;
  $$099 = .149993896484375;
 }
 if (($1 | 0) >= ($2 | 0)) {
  $$097$lcssa = 0;
  $121 = ($14 | 0) == 0;
  $122 = $121 ? $$097$lcssa : 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $29 = $0 + 8 | 0;
 $$idx = $9 + 20 | 0;
 $$idx101 = $9 + 28 | 0;
 $30 = $10 * 3 | 0;
 $31 = ($14 | 0) != 0;
 $$0104 = $1;
 $$097103 = 0;
 while (1) {
  $33 = Math_imul($30, $2 - $$0104 | 0) | 0;
  $34 = ($$0104 | 0) != ($1 | 0);
  $or$cond3 = $31 & ($$0104 | 0) > 1;
  $38 = (($$0104 | 0) < 20 ? $$0104 : 20) << 1;
  $39 = $7 + $38 | 0;
  $41 = $7 + ($38 | 1) | 0;
  $$096 = 0;
  $$1 = $$097103;
  do {
   $44 = (Math_imul(HEAP32[$29 >> 2] | 0, $$096) | 0) + $$0104 | 0;
   $46 = +HEAPF32[$3 + ($44 << 2) >> 2];
   $48 = +HEAPF32[$4 + ($44 << 2) >> 2];
   $51 = $$098 * ($48 < -9.0 ? -9.0 : $48);
   $53 = $15 + ($$096 << 2) | 0;
   $54 = +HEAPF32[$53 >> 2];
   $55 = $46 - $51 - $54;
   $58 = ~~+Math_floor(+($55 + .5));
   $61 = ($48 < -28.0 ? -28.0 : $48) - $13;
   $66 = $58 + ~~($61 - $46) | 0;
   $storemerge = $46 < $61 & ($58 | 0) < 0 ? (($66 | 0) < 0 ? $66 : 0) : $58;
   HEAP32[$16 >> 2] = $storemerge;
   $69 = $5 - (_ec_tell_141(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx101 >> 2] | 0) | 0) | 0;
   $70 = $69 - $33 | 0;
   if ($34 & ($70 | 0) < 24) {
    $73 = ($storemerge | 0) < 1 ? $storemerge : 1;
    HEAP32[$16 >> 2] = $73;
    if (($70 | 0) < 16) {
     $76 = ($73 | 0) > -1 ? $73 : -1;
     HEAP32[$16 >> 2] = $76;
     $77 = $76;
    } else $77 = $73;
   } else $77 = $storemerge;
   if ($or$cond3) {
    $79 = ($77 | 0) < 0 ? $77 : 0;
    HEAP32[$16 >> 2] = $79;
    $88 = $79;
   } else $88 = $77;
   do if (($69 | 0) > 14) {
    _ec_laplace_encode($9, $16, (HEAPU8[$39 >> 0] | 0) << 7, (HEAPU8[$41 >> 0] | 0) << 6);
    $100 = HEAP32[$16 >> 2] | 0;
   } else {
    if (($69 | 0) > 1) {
     $90 = ($88 | 0) < 1 ? $88 : 1;
     $spec$select = ($90 | 0) > -1 ? $90 : -1;
     HEAP32[$16 >> 2] = $spec$select;
     _ec_enc_icdf($9, $spec$select << 1 ^ $spec$select >> 31, 41660, 2);
     $100 = $spec$select;
     break;
    }
    if (($69 | 0) == 1) {
     $97 = ($88 | 0) < 0 ? $88 : 0;
     HEAP32[$16 >> 2] = $97;
     _ec_enc_bit_logp($9, 0 - $97 | 0, 1);
     $100 = $97;
     break;
    } else {
     HEAP32[$16 >> 2] = -1;
     $100 = -1;
     break;
    }
   } while (0);
   $99 = +($100 | 0);
   HEAPF32[$8 + ((Math_imul(HEAP32[$29 >> 2] | 0, $$096) | 0) + $$0104 << 2) >> 2] = $55 - $99;
   $106 = $storemerge - $100 | 0;
   $$1 = (($106 | 0) > -1 ? $106 : 0 - $106 | 0) + $$1 | 0;
   HEAPF32[$4 + ((Math_imul(HEAP32[$29 >> 2] | 0, $$096) | 0) + $$0104 << 2) >> 2] = $54 + $51 + $99;
   HEAPF32[$53 >> 2] = $54 + $99 - $$099 * $99;
   $$096 = $$096 + 1 | 0;
  } while (($$096 | 0) < ($10 | 0));
  $$0104 = $$0104 + 1 | 0;
  if (($$0104 | 0) == ($2 | 0)) {
   $$097$lcssa = $$1;
   break;
  } else $$097103 = $$1;
 }
 $121 = ($14 | 0) == 0;
 $122 = $121 ? $$097$lcssa : 0;
 STACKTOP = sp;
 return $122 | 0;
}

function _silk_setup_complexity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $18 = 0, $21 = 0, $22 = 0, $30 = 0, $33 = 0, $34 = 0, $42 = 0, $45 = 0, $46 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $78 = 0, $81 = 0, $82 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0;
 if ($1 >>> 0 >= 11) _celt_fatal(44565, 44619, 315);
 do if (!$1) {
  HEAP32[$0 + 4644 >> 2] = 0;
  HEAP32[$0 + 4652 >> 2] = 52429;
  $6 = $0 + 4648 | 0;
  HEAP32[$6 >> 2] = 6;
  HEAP32[$0 + 4636 >> 2] = 12;
  $9 = HEAP32[$0 + 4576 >> 2] | 0;
  $10 = $9 * 3 | 0;
  HEAP32[$0 + 4600 >> 2] = $10;
  HEAP32[$0 + 4628 >> 2] = 1;
  HEAP32[$0 + 4632 >> 2] = 0;
  HEAP32[$0 + 4660 >> 2] = 2;
  $$pre$phiZ2D = $6;
  $$sink = 0;
  $91 = 6;
  $94 = $9;
  $96 = $10;
 } else {
  if (($1 | 0) < 2) {
   HEAP32[$0 + 4644 >> 2] = 1;
   HEAP32[$0 + 4652 >> 2] = 49807;
   $18 = $0 + 4648 | 0;
   HEAP32[$18 >> 2] = 8;
   HEAP32[$0 + 4636 >> 2] = 14;
   $21 = HEAP32[$0 + 4576 >> 2] | 0;
   $22 = $21 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $22;
   HEAP32[$0 + 4628 >> 2] = 1;
   HEAP32[$0 + 4632 >> 2] = 0;
   HEAP32[$0 + 4660 >> 2] = 3;
   $$pre$phiZ2D = $18;
   $$sink = 0;
   $91 = 8;
   $94 = $21;
   $96 = $22;
   break;
  }
  if (($1 | 0) == 2) {
   HEAP32[$0 + 4644 >> 2] = 0;
   HEAP32[$0 + 4652 >> 2] = 52429;
   $30 = $0 + 4648 | 0;
   HEAP32[$30 >> 2] = 6;
   HEAP32[$0 + 4636 >> 2] = 12;
   $33 = HEAP32[$0 + 4576 >> 2] | 0;
   $34 = $33 * 3 | 0;
   HEAP32[$0 + 4600 >> 2] = $34;
   HEAP32[$0 + 4628 >> 2] = 2;
   HEAP32[$0 + 4632 >> 2] = 0;
   HEAP32[$0 + 4660 >> 2] = 2;
   $$pre$phiZ2D = $30;
   $$sink = 0;
   $91 = 6;
   $94 = $33;
   $96 = $34;
   break;
  }
  if (($1 | 0) < 4) {
   HEAP32[$0 + 4644 >> 2] = 1;
   HEAP32[$0 + 4652 >> 2] = 49807;
   $42 = $0 + 4648 | 0;
   HEAP32[$42 >> 2] = 8;
   HEAP32[$0 + 4636 >> 2] = 14;
   $45 = HEAP32[$0 + 4576 >> 2] | 0;
   $46 = $45 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $46;
   HEAP32[$0 + 4628 >> 2] = 2;
   HEAP32[$0 + 4632 >> 2] = 0;
   HEAP32[$0 + 4660 >> 2] = 4;
   $$pre$phiZ2D = $42;
   $$sink = 0;
   $91 = 8;
   $94 = $45;
   $96 = $46;
   break;
  }
  if (($1 | 0) < 6) {
   HEAP32[$0 + 4644 >> 2] = 1;
   HEAP32[$0 + 4652 >> 2] = 48497;
   $54 = $0 + 4648 | 0;
   HEAP32[$54 >> 2] = 10;
   HEAP32[$0 + 4636 >> 2] = 16;
   $57 = HEAP32[$0 + 4576 >> 2] | 0;
   $58 = $57 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $58;
   HEAP32[$0 + 4628 >> 2] = 2;
   HEAP32[$0 + 4632 >> 2] = 1;
   HEAP32[$0 + 4660 >> 2] = 6;
   $$pre$phiZ2D = $54;
   $$sink = $57 * 983 | 0;
   $91 = 10;
   $94 = $57;
   $96 = $58;
   break;
  }
  $65 = $0 + 4644 | 0;
  if (($1 | 0) < 8) {
   HEAP32[$65 >> 2] = 1;
   HEAP32[$0 + 4652 >> 2] = 47186;
   $67 = $0 + 4648 | 0;
   HEAP32[$67 >> 2] = 12;
   HEAP32[$0 + 4636 >> 2] = 20;
   $70 = HEAP32[$0 + 4576 >> 2] | 0;
   $71 = $70 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $71;
   HEAP32[$0 + 4628 >> 2] = 3;
   HEAP32[$0 + 4632 >> 2] = 1;
   HEAP32[$0 + 4660 >> 2] = 8;
   $$pre$phiZ2D = $67;
   $$sink = $70 * 983 | 0;
   $91 = 12;
   $94 = $70;
   $96 = $71;
   break;
  } else {
   HEAP32[$65 >> 2] = 2;
   HEAP32[$0 + 4652 >> 2] = 45875;
   $78 = $0 + 4648 | 0;
   HEAP32[$78 >> 2] = 16;
   HEAP32[$0 + 4636 >> 2] = 24;
   $81 = HEAP32[$0 + 4576 >> 2] | 0;
   $82 = $81 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $82;
   HEAP32[$0 + 4628 >> 2] = 4;
   HEAP32[$0 + 4632 >> 2] = 1;
   HEAP32[$0 + 4660 >> 2] = 16;
   $$pre$phiZ2D = $78;
   $$sink = $81 * 983 | 0;
   $91 = 16;
   $94 = $81;
   $96 = $82;
   break;
  }
 } while (0);
 HEAP32[$0 + 4672 >> 2] = $$sink;
 $92 = _silk_min_int_396($91, HEAP32[$0 + 4640 >> 2] | 0) | 0;
 HEAP32[$$pre$phiZ2D >> 2] = $92;
 $97 = ($96 << 1) + ($94 * 5 | 0) | 0;
 HEAP32[$0 + 4604 >> 2] = $97;
 HEAP32[$0 + 4624 >> 2] = $1;
 if (($92 | 0) >= 17) _celt_fatal(44640, 44619, 393);
 if (($$sink | 0) >= 32768) _celt_fatal(44718, 44619, 396);
 if (($96 | 0) >= 81) _celt_fatal(44765, 44619, 397);
 if (($97 | 0) < 241) return; else _celt_fatal(44816, 44619, 398);
}

function _spreading_decision($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$088108$us = 0, $$089$us = 0, $$09099$us = 0, $$091$us = 0, $$093$us = 0, $$096$us = 0, $$1107$us = 0, $$194106$us = 0, $$197105$us = 0, $$2$us = 0, $$295$us = 0, $$298$us = 0, $$3$us = 0, $$4 = 0, $$5 = 0, $$pre$pre = 0, $$sroa$0$0102$us = 0, $$sroa$5$0101$us = 0, $$sroa$9$2100$us = 0, $104 = 0, $12 = 0, $16 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $39 = 0, $60 = 0, $65 = 0.0, $67 = 0.0, $68 = 0.0, $87 = 0, $96 = 0, $99 = 0, $$088108$us$looptemp = 0;
 $12 = HEAP32[$0 + 32 >> 2] | 0;
 if (($7 | 0) <= 0) _celt_fatal(39562, 39549, 489);
 $16 = Math_imul(HEAP32[$0 + 44 >> 2] | 0, $9) | 0;
 if ((Math_imul((HEAP16[$12 + ($7 << 1) >> 1] | 0) - (HEAP16[$12 + ($7 + -1 << 1) >> 1] | 0) | 0, $9) | 0) < 9) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = $0 + 8 | 0;
 $$pre$pre = HEAP16[$12 >> 1] | 0;
 $$089$us = 0;
 $$091$us = 0;
 $$093$us = 0;
 $$096$us = 0;
 while (1) {
  $28 = Math_imul($16, $$089$us) | 0;
  $$088108$us = 0;
  $$1107$us = $$091$us;
  $$194106$us = $$093$us;
  $$197105$us = $$096$us;
  $30 = $$pre$pre;
  while (1) {
   $29 = $30 << 16 >> 16;
   $33 = $1 + ((Math_imul($29, $9) | 0) << 2) + ($28 << 2) | 0;
   $$088108$us$looptemp = $$088108$us;
   $$088108$us = $$088108$us + 1 | 0;
   $30 = HEAP16[$12 + ($$088108$us << 1) >> 1] | 0;
   $39 = Math_imul(($30 << 16 >> 16) - $29 | 0, $9) | 0;
   if (($39 | 0) < 9) {
    $$295$us = $$194106$us;
    $$298$us = $$197105$us;
    $$3$us = $$1107$us;
   } else {
    $68 = +($39 | 0);
    $$09099$us = 0;
    $$sroa$0$0102$us = 0;
    $$sroa$5$0101$us = 0;
    $$sroa$9$2100$us = 0;
    do {
     $65 = +HEAPF32[$33 + ($$09099$us << 2) >> 2];
     $67 = $65 * $65 * $68;
     $$sroa$0$0102$us = $$sroa$0$0102$us + ($67 < .25 & 1) | 0;
     $$sroa$5$0101$us = $$sroa$5$0101$us + ($67 < .0625 & 1) | 0;
     $$sroa$9$2100$us = $$sroa$9$2100$us + ($67 < .015625 & 1) | 0;
     $$09099$us = $$09099$us + 1 | 0;
    } while (($$09099$us | 0) != ($39 | 0));
    if (($$088108$us$looptemp | 0) > ((HEAP32[$27 >> 2] | 0) + -4 | 0)) $$2$us = (_celt_udiv($$sroa$0$0102$us + $$sroa$5$0101$us << 5, $39) | 0) + $$1107$us | 0; else $$2$us = $$1107$us;
    $60 = HEAP32[$10 + ($$088108$us$looptemp << 2) >> 2] | 0;
    $$295$us = (Math_imul($60, (($$sroa$5$0101$us << 1 | 0) >= ($39 | 0) & 1) + (($$sroa$9$2100$us << 1 | 0) >= ($39 | 0) & 1) + (($$sroa$0$0102$us << 1 | 0) >= ($39 | 0) & 1) | 0) | 0) + $$194106$us | 0;
    $$298$us = $60 + $$197105$us | 0;
    $$3$us = $$2$us;
   }
   if (($$088108$us | 0) == ($7 | 0)) break; else {
    $$1107$us = $$3$us;
    $$194106$us = $$295$us;
    $$197105$us = $$298$us;
   }
  }
  $$089$us = $$089$us + 1 | 0;
  if (($$089$us | 0) >= ($8 | 0)) break; else {
   $$091$us = $$3$us;
   $$093$us = $$295$us;
   $$096$us = $$298$us;
  }
 }
 if ($6 | 0) {
  if (!$$3$us) $$4 = 0; else $$4 = _celt_udiv($$3$us, Math_imul($7 + 4 - (HEAP32[$27 >> 2] | 0) | 0, $8) | 0) | 0;
  $87 = (HEAP32[$4 >> 2] | 0) + $$4 >> 1;
  HEAP32[$4 >> 2] = $87;
  switch (HEAP32[$5 >> 2] | 0) {
  case 2:
   {
    $$5 = $87 + 4 | 0;
    break;
   }
  case 0:
   {
    $$5 = $87 + -4 | 0;
    break;
   }
  default:
   $$5 = $87;
  }
  HEAP32[$5 >> 2] = ($$5 | 0) > 22 ? 2 : ($$5 | 0) > 18 & 1;
 }
 if (($$298$us | 0) <= 0) _celt_fatal(39586, 39549, 545);
 if (($$295$us | 0) <= -1) _celt_fatal(39614, 39549, 546);
 $96 = _celt_udiv($$295$us << 8, $$298$us) | 0;
 $99 = (HEAP32[$2 >> 2] | 0) + $96 >> 1;
 HEAP32[$2 >> 2] = $99;
 $104 = ($99 * 3 | 0) + (384 - ($3 << 7) | 64) | 0;
 if (($104 | 0) < 318) {
  $$0 = 3;
  return $$0 | 0;
 } else return (($104 | 0) < 1022 ? 2 : ($104 | 0) < 1534 & 1) | 0;
 return 0;
}

function _silk_NLSF_encode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$07580 = 0, $$079 = 0, $$sink = 0, $$sink87 = 0, $10 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $15 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $28 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $58 = 0, $7 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 32 | 0;
 $11 = sp;
 if ($6 >>> 0 >= 3) _celt_fatal(44156, 44209, 63);
 $15 = $2 + 2 | 0;
 _silk_NLSF_stabilize($1, HEAP32[$2 + 36 >> 2] | 0, HEAP16[$15 >> 1] | 0);
 $18 = HEAP16[$2 >> 1] | 0;
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($18 & 65535) << 2) | 0) + 15 & -16) | 0;
 $21 = $2 + 8 | 0;
 $23 = $2 + 12 | 0;
 _silk_NLSF_VQ($20, $1, HEAP32[$21 >> 2] | 0, HEAP32[$23 >> 2] | 0, $18 << 16 >> 16, HEAP16[$15 >> 1] | 0);
 $28 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 _silk_insertion_sort_increasing($20, $28, HEAP16[$2 >> 1] | 0, $5);
 $31 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 4) | 0) + 15 & -16) | 0;
 if (($5 | 0) <= 0) {
  _silk_insertion_sort_increasing($31, $7, $5, 1);
  $105 = HEAP32[$7 >> 2] | 0;
  $106 = $28 + ($105 << 2) | 0;
  $107 = HEAP32[$106 >> 2] | 0;
  $108 = $107 & 255;
  HEAP8[$0 >> 0] = $108;
  $109 = $0 + 1 | 0;
  $110 = $105 << 4;
  $111 = $33 + $110 | 0;
  $112 = HEAP16[$15 >> 1] | 0;
  $113 = $112 << 16 >> 16;
  _memcpy($109 | 0, $111 | 0, $113 | 0) | 0;
  _silk_NLSF_decode($1, $0, $2);
  STACKTOP = sp;
  return;
 }
 $35 = $2 + 32 | 0;
 $36 = $2 + 4 | 0;
 $37 = $2 + 6 | 0;
 $38 = $2 + 16 | 0;
 $39 = $6 >>> 1;
 $41 = $4 << 14 >> 16;
 $$07580 = 0;
 do {
  $43 = HEAP32[$28 + ($$07580 << 2) >> 2] | 0;
  $45 = HEAP16[$15 >> 1] | 0;
  $46 = $45 << 16 >> 16;
  $47 = Math_imul($43, $46) | 0;
  $48 = (HEAP32[$21 >> 2] | 0) + $47 | 0;
  $50 = (HEAP32[$23 >> 2] | 0) + ($47 << 1) | 0;
  if ($45 << 16 >> 16 > 0) {
   $$079 = 0;
   do {
    $58 = HEAP16[$50 + ($$079 << 1) >> 1] | 0;
    HEAP16[$8 + ($$079 << 1) >> 1] = (Math_imul((HEAPU16[$1 + ($$079 << 1) >> 1] | 0) - (HEAPU8[$48 + $$079 >> 0] << 7) << 16 >> 16, $58) | 0) >>> 14;
    HEAP16[$9 + ($$079 << 1) >> 1] = _silk_DIV32_varQ_361(HEAP16[$3 + ($$079 << 1) >> 1] | 0, Math_imul($58, $58) | 0) | 0;
    $$079 = $$079 + 1 | 0;
   } while (($$079 | 0) != ($46 | 0));
  }
  _silk_NLSF_unpack($11, $10, $2, $43);
  $83 = _silk_NLSF_del_dec_quant($33 + ($$07580 << 4) | 0, $8, $9, $10, $11, HEAP32[$35 >> 2] | 0, HEAP16[$36 >> 1] | 0, HEAP16[$37 >> 1] | 0, $4, HEAP16[$15 >> 1] | 0) | 0;
  $84 = $31 + ($$07580 << 2) | 0;
  HEAP32[$84 >> 2] = $83;
  $89 = (HEAP32[$38 >> 2] | 0) + (Math_imul($39, HEAP16[$2 >> 1] | 0) | 0) | 0;
  if (!$43) {
   $$sink = 256;
   $$sink87 = $89;
  } else {
   $$sink = HEAPU8[$89 + ($43 + -1) >> 0] | 0;
   $$sink87 = $89 + $43 | 0;
  }
  HEAP32[$84 >> 2] = (Math_imul(67108864 - ((_silk_lin2log($$sink - (HEAPU8[$$sink87 >> 0] | 0) | 0) | 0) << 16) >> 16, $41) | 0) + $83;
  $$07580 = $$07580 + 1 | 0;
 } while (($$07580 | 0) != ($5 | 0));
 _silk_insertion_sort_increasing($31, $7, $5, 1);
 $105 = HEAP32[$7 >> 2] | 0;
 $106 = $28 + ($105 << 2) | 0;
 $107 = HEAP32[$106 >> 2] | 0;
 $108 = $107 & 255;
 HEAP8[$0 >> 0] = $108;
 $109 = $0 + 1 | 0;
 $110 = $105 << 4;
 $111 = $33 + $110 | 0;
 $112 = HEAP16[$15 >> 1] | 0;
 $113 = $112 << 16 >> 16;
 _memcpy($109 | 0, $111 | 0, $113 | 0) | 0;
 _silk_NLSF_decode($1, $0, $2);
 STACKTOP = sp;
 return;
}

function _clt_mdct_backward_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0123$lcssa = 0, $$0125139 = 0, $$0126138 = 0, $$0128$lcssa = 0, $$0128159 = 0, $$0129154 = 0, $$0130153 = 0, $$0131152 = 0, $$0132145 = 0, $$0160 = 0, $$1155 = 0, $$2$neg147 = 0, $$2146 = 0, $$3140 = 0, $$lcssa = 0, $$pn = 0, $$pn166 = 0, $$pn167 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0.0, $34 = 0.0, $36 = 0.0, $39 = 0.0, $45 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $61 = 0.0, $64 = 0.0, $7 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $76 = 0.0, $79 = 0.0, $87 = 0, $89 = 0, $9 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $97 = 0.0;
 $7 = HEAP32[$0 >> 2] | 0;
 $9 = HEAP32[$0 + 24 >> 2] | 0;
 $11 = $7 >> 1;
 if (($5 | 0) > 0) {
  $$0128159 = $9;
  $$0160 = 0;
  $13 = $11;
  while (1) {
   $12 = $$0128159 + ($13 << 2) | 0;
   $$0160 = $$0160 + 1 | 0;
   $15 = $13 >> 1;
   if (($$0160 | 0) == ($5 | 0)) {
    $$0123$lcssa = $13;
    $$0128$lcssa = $12;
    $$lcssa = $15;
    break;
   } else {
    $$0128159 = $12;
    $13 = $15;
   }
  }
 } else {
  $$0123$lcssa = $7;
  $$0128$lcssa = $9;
  $$lcssa = $11;
 }
 $16 = $$0123$lcssa >> 2;
 $18 = $2 + ($4 >> 1 << 2) | 0;
 $20 = HEAP32[$0 + 8 + ($5 << 2) >> 2] | 0;
 if (($$0123$lcssa | 0) > 3) {
  $24 = $$lcssa + -1 | 0;
  $27 = $6 << 1;
  $28 = 0 - $27 | 0;
  $$0129154 = $1;
  $$0130153 = $1 + ((Math_imul($24, $6) | 0) << 2) | 0;
  $$0131152 = HEAP32[$20 + 44 >> 2] | 0;
  $$1155 = 0;
  while (1) {
   $32 = +HEAPF32[$$0130153 >> 2];
   $34 = +HEAPF32[$$0128$lcssa + ($$1155 << 2) >> 2];
   $36 = +HEAPF32[$$0129154 >> 2];
   $39 = +HEAPF32[$$0128$lcssa + ($$1155 + $16 << 2) >> 2];
   $45 = HEAP16[$$0131152 >> 1] << 1;
   HEAPF32[$18 + (($45 | 1) << 2) >> 2] = $32 * $34 + $36 * $39;
   HEAPF32[$18 + ($45 << 2) >> 2] = $34 * $36 - $32 * $39;
   $$1155 = $$1155 + 1 | 0;
   if (($$1155 | 0) >= ($16 | 0)) break; else {
    $$0129154 = $$0129154 + ($27 << 2) | 0;
    $$0130153 = $$0130153 + ($28 << 2) | 0;
    $$0131152 = $$0131152 + 2 | 0;
   }
  }
  _opus_fft_impl($20, $18);
  $54 = $16 + 1 >> 1;
  $56 = $16 + -1 | 0;
  $$0132145 = $18;
  $$2$neg147 = 0;
  $$2146 = 0;
  $$pn167 = $18 + ($$lcssa << 2) | 0;
  while (1) {
   $57 = $$0132145 + 4 | 0;
   $58 = +HEAPF32[$57 >> 2];
   $59 = +HEAPF32[$$0132145 >> 2];
   $61 = +HEAPF32[$$0128$lcssa + ($$2146 << 2) >> 2];
   $64 = +HEAPF32[$$0128$lcssa + ($$2146 + $16 << 2) >> 2];
   $71 = $$pn167 + -4 | 0;
   $$pn167 = $$pn167 + -8 | 0;
   $72 = +HEAPF32[$71 >> 2];
   $73 = +HEAPF32[$$pn167 >> 2];
   HEAPF32[$$0132145 >> 2] = $58 * $61 + $59 * $64;
   HEAPF32[$71 >> 2] = $58 * $64 - $59 * $61;
   $76 = +HEAPF32[$$0128$lcssa + ($56 + $$2$neg147 << 2) >> 2];
   $79 = +HEAPF32[$$0128$lcssa + ($24 + $$2$neg147 << 2) >> 2];
   HEAPF32[$$pn167 >> 2] = $72 * $76 + $73 * $79;
   HEAPF32[$57 >> 2] = $72 * $79 - $73 * $76;
   $87 = $$2146 + 1 | 0;
   if (($87 | 0) >= ($54 | 0)) break; else {
    $$0132145 = $$0132145 + 8 | 0;
    $$2$neg147 = ~$$2146;
    $$2146 = $87;
   }
  }
 } else _opus_fft_impl($20, $18);
 $89 = ($4 | 0) / 2 | 0;
 if (($4 | 0) <= 1) return;
 $$0125139 = $3;
 $$0126138 = $2;
 $$3140 = 0;
 $$pn = $2 + ($4 << 2) | 0;
 $$pn166 = $3 + ($4 << 2) | 0;
 while (1) {
  $$pn166 = $$pn166 + -4 | 0;
  $$pn = $$pn + -4 | 0;
  $93 = +HEAPF32[$$pn >> 2];
  $94 = +HEAPF32[$$0126138 >> 2];
  $95 = +HEAPF32[$$pn166 >> 2];
  $97 = +HEAPF32[$$0125139 >> 2];
  HEAPF32[$$0126138 >> 2] = $94 * $95 - $93 * $97;
  HEAPF32[$$pn >> 2] = $93 * $95 + $94 * $97;
  $$3140 = $$3140 + 1 | 0;
  if (($$3140 | 0) == ($89 | 0)) break; else {
   $$0125139 = $$0125139 + 4 | 0;
   $$0126138 = $$0126138 + 4 | 0;
  }
 }
 return;
}

function _cwrsi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0102$lcssa = 0.0, $$0102123 = 0.0, $$0103 = 0, $$0105$lcssa = 0, $$0105122 = 0, $$0107$lcssa = 0, $$0107121 = 0, $$0109$lcssa = 0, $$0109120 = 0, $$0124 = 0, $$1 = 0.0, $$1104 = 0, $$1106 = 0, $$1108 = 0, $$1110 = 0, $$2111 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $24 = 0, $31 = 0, $34 = 0.0, $40 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $65 = 0.0, $71 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $84 = 0, $88 = 0.0, $9 = 0, $93 = 0, $96 = 0.0, $spec$select = 0;
 if (($1 | 0) <= 0) _celt_fatal(40954, 40977, 469);
 if (($0 | 0) <= 1) _celt_fatal(41013, 40977, 470);
 if (($0 | 0) == 2) {
  $$0102$lcssa = 0.0;
  $$0105$lcssa = $3;
  $$0107$lcssa = $2;
  $$0109$lcssa = $1;
 } else {
  $$0102123 = 0.0;
  $$0105122 = $3;
  $$0107121 = $2;
  $$0109120 = $1;
  $$0124 = $0;
  while (1) {
   do if (($$0109120 | 0) < ($$0124 | 0)) {
    $40 = HEAP32[(HEAP32[592 + ($$0109120 << 2) >> 2] | 0) + ($$0124 << 2) >> 2] | 0;
    $45 = HEAP32[(HEAP32[592 + ($$0109120 + 1 << 2) >> 2] | 0) + ($$0124 << 2) >> 2] | 0;
    if ($$0107121 >>> 0 >= $40 >>> 0 & $$0107121 >>> 0 < $45 >>> 0) {
     HEAP32[$$0105122 >> 2] = 0;
     $$1 = $$0102123;
     $$1108 = $$0107121 - $40 | 0;
     $$5 = $$0109120;
     break;
    }
    $50 = ($$0107121 >>> 0 >= $45 >>> 0) << 31 >> 31;
    $52 = $$0107121 - ($45 & $50) | 0;
    $$4 = $$0109120;
    while (1) {
     $53 = $$4 + -1 | 0;
     $57 = HEAP32[(HEAP32[592 + ($53 << 2) >> 2] | 0) + ($$0124 << 2) >> 2] | 0;
     if ($52 >>> 0 < $57 >>> 0) $$4 = $53; else break;
    }
    $62 = $$0109120 + $50 + (1 - $$4) ^ $50;
    HEAP32[$$0105122 >> 2] = $62 << 16 >> 16;
    $65 = +(($62 & 65535) << 16 >> 16);
    $$1 = $$0102123 + $65 * $65;
    $$1108 = $52 - $57 | 0;
    $$5 = $53;
   } else {
    $9 = HEAP32[592 + ($$0124 << 2) >> 2] | 0;
    $12 = HEAP32[$9 + ($$0109120 + 1 << 2) >> 2] | 0;
    $14 = ($$0107121 >>> 0 >= $12 >>> 0) << 31 >> 31;
    $16 = $$0107121 - ($12 & $14) | 0;
    if ((HEAP32[$9 + ($$0124 << 2) >> 2] | 0) >>> 0 > $16 >>> 0) {
     $$1110 = $$0124;
     while (1) {
      $20 = $$1110 + -1 | 0;
      $24 = HEAP32[(HEAP32[592 + ($20 << 2) >> 2] | 0) + ($$0124 << 2) >> 2] | 0;
      if ($24 >>> 0 > $16 >>> 0) $$1110 = $20; else {
       $$1104 = $24;
       $$3 = $20;
       break;
      }
     }
    } else {
     $$2111 = $$0109120;
     while (1) {
      $$0103 = HEAP32[$9 + ($$2111 << 2) >> 2] | 0;
      if ($$0103 >>> 0 > $16 >>> 0) $$2111 = $$2111 + -1 | 0; else {
       $$1104 = $$0103;
       $$3 = $$2111;
       break;
      }
     }
    }
    $31 = $$0109120 + $14 - $$3 ^ $14;
    HEAP32[$$0105122 >> 2] = $31 << 16 >> 16;
    $34 = +(($31 & 65535) << 16 >> 16);
    $$1 = $$0102123 + $34 * $34;
    $$1108 = $16 - $$1104 | 0;
    $$5 = $$3;
   } while (0);
   $$1106 = $$0105122 + 4 | 0;
   if (($$0124 | 0) > 3) {
    $$0102123 = $$1;
    $$0105122 = $$1106;
    $$0107121 = $$1108;
    $$0109120 = $$5;
    $$0124 = $$0124 + -1 | 0;
   } else {
    $$0102$lcssa = $$1;
    $$0105$lcssa = $$1106;
    $$0107$lcssa = $$1108;
    $$0109$lcssa = $$5;
    break;
   }
  }
 }
 $71 = $$0109$lcssa << 1 | 1;
 $73 = ($$0107$lcssa >>> 0 >= $71 >>> 0) << 31 >> 31;
 $75 = $$0107$lcssa - ($71 & $73) | 0;
 $76 = $75 + 1 | 0;
 $77 = $76 >>> 1;
 $spec$select = $75 - (($77 | 0) == 0 ? 0 : ($76 & -2) + -1 | 0) | 0;
 $84 = $$0109$lcssa + $73 - $77 ^ $73;
 HEAP32[$$0105$lcssa >> 2] = $84 << 16 >> 16;
 $88 = +(($84 & 65535) << 16 >> 16);
 $93 = $77 - $spec$select ^ 0 - $spec$select;
 HEAP32[$$0105$lcssa + 4 >> 2] = $93 << 16 >> 16;
 $96 = +(($93 & 65535) << 16 >> 16);
 return +($$0102$lcssa + $88 * $88 + $96 * $96);
}

function _silk_stereo_MS_to_LR($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0104119 = 0, $$0105118 = 0, $$0120 = 0, $$1114 = 0, $$2113 = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $11 = 0, $12 = 0, $123 = 0, $13 = 0, $138 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $152 = 0, $16 = 0, $18 = 0, $19 = 0, $24 = 0, $28 = 0, $29 = 0, $36 = 0, $51 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $67 = 0, $7 = 0, $75 = 0, $8 = 0, $88 = 0, $89 = 0, $9 = 0, $$0105118$looptemp = 0, $$1114$looptemp = 0;
 $6 = $0 + 4 | 0;
 $7 = HEAPU16[$6 >> 1] | HEAPU16[$6 + 2 >> 1] << 16;
 HEAP16[$1 >> 1] = $7;
 HEAP16[$1 + 2 >> 1] = $7 >>> 16;
 $8 = $0 + 8 | 0;
 $9 = HEAPU16[$8 >> 1] | HEAPU16[$8 + 2 >> 1] << 16;
 HEAP16[$2 >> 1] = $9;
 HEAP16[$2 + 2 >> 1] = $9 >>> 16;
 $10 = $1 + ($5 << 1) | 0;
 $11 = HEAPU16[$10 >> 1] | HEAPU16[$10 + 2 >> 1] << 16;
 HEAP16[$6 >> 1] = $11;
 HEAP16[$6 + 2 >> 1] = $11 >>> 16;
 $12 = $2 + ($5 << 1) | 0;
 $13 = HEAPU16[$12 >> 1] | HEAPU16[$12 + 2 >> 1] << 16;
 HEAP16[$8 >> 1] = $13;
 HEAP16[$8 + 2 >> 1] = $13 >>> 16;
 $15 = HEAP16[$0 >> 1] | 0;
 $16 = $0 + 2 | 0;
 $18 = HEAP16[$16 >> 1] | 0;
 $19 = $4 << 3;
 $24 = (65536 / ($19 | 0) | 0) << 16 >> 16;
 $28 = ((Math_imul((HEAP32[$3 >> 2] | 0) - $15 << 16 >> 16, $24) | 0) >> 15) + 1 >> 1;
 $29 = $3 + 4 | 0;
 $36 = ((Math_imul((HEAP32[$29 >> 2] | 0) - $18 << 16 >> 16, $24) | 0) >> 15) + 1 >> 1;
 if (($4 | 0) > 0) {
  $$0104119 = $15;
  $$0105118 = 0;
  $$0120 = $18;
  do {
   $$0104119 = $$0104119 + $28 | 0;
   $$0120 = $$0120 + $36 | 0;
   $$0105118$looptemp = $$0105118;
   $$0105118 = $$0105118 + 1 | 0;
   $51 = HEAP16[$1 + ($$0105118 << 1) >> 1] | 0;
   $53 = (HEAP16[$1 + ($$0105118$looptemp + 2 << 1) >> 1] | 0) + (HEAP16[$1 + ($$0105118$looptemp << 1) >> 1] | 0) + ($51 << 1) | 0;
   $55 = $2 + ($$0105118 << 1) | 0;
   $60 = $$0104119 << 16 >> 16;
   $67 = $$0120 << 16 >> 16;
   $75 = (HEAP16[$55 >> 1] << 8) + (Math_imul($51 >> 5, $67) | 0) + ((Math_imul($51 << 11 & 63488, $67) | 0) >> 16) + (Math_imul($53 >> 7, $60) | 0) + ((Math_imul($53 << 9 & 65024, $60) | 0) >> 16) | 0;
   HEAP16[$55 >> 1] = ($75 | 0) > 8388479 ? 32767 : ($75 | 0) < -8388736 ? -32768 : (($75 >>> 7) + 1 | 0) >>> 1 & 65535;
  } while (($$0105118 | 0) < ($19 | 0));
 }
 if (($19 | 0) < ($5 | 0)) {
  $88 = HEAP32[$3 >> 2] << 16 >> 16;
  $89 = HEAP32[$29 >> 2] << 16 >> 16;
  $$1114 = $19;
  do {
   $$1114$looptemp = $$1114;
   $$1114 = $$1114 + 1 | 0;
   $101 = HEAP16[$1 + ($$1114 << 1) >> 1] | 0;
   $103 = (HEAP16[$1 + ($$1114$looptemp + 2 << 1) >> 1] | 0) + (HEAP16[$1 + ($$1114$looptemp << 1) >> 1] | 0) + ($101 << 1) | 0;
   $105 = $2 + ($$1114 << 1) | 0;
   $123 = (HEAP16[$105 >> 1] << 8) + (Math_imul($101 >> 5, $89) | 0) + ((Math_imul($101 << 11 & 63488, $89) | 0) >> 16) + (Math_imul($103 >> 7, $88) | 0) + ((Math_imul($103 << 9 & 65024, $88) | 0) >> 16) | 0;
   HEAP16[$105 >> 1] = ($123 | 0) > 8388479 ? 32767 : ($123 | 0) < -8388736 ? -32768 : (($123 >>> 7) + 1 | 0) >>> 1 & 65535;
  } while (($$1114 | 0) != ($5 | 0));
 }
 HEAP16[$0 >> 1] = HEAP32[$3 >> 2];
 HEAP16[$16 >> 1] = HEAP32[$29 >> 2];
 if (($5 | 0) <= 0) return;
 $$2113 = 0;
 do {
  $$2113 = $$2113 + 1 | 0;
  $138 = $1 + ($$2113 << 1) | 0;
  $140 = HEAP16[$138 >> 1] | 0;
  $141 = $2 + ($$2113 << 1) | 0;
  $143 = HEAP16[$141 >> 1] | 0;
  $144 = $143 + $140 | 0;
  $145 = $140 - $143 | 0;
  $147 = ($144 | 0) > -32768 ? $144 : -32768;
  HEAP16[$138 >> 1] = ($147 | 0) < 32767 ? $147 : 32767;
  $152 = ($145 | 0) > -32768 ? $145 : -32768;
  HEAP16[$141 >> 1] = ($152 | 0) < 32767 ? $152 : 32767;
 } while (($$2113 | 0) != ($5 | 0));
 return;
}

function _silk_VQ_WMat_EC_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0106110 = 0, $$0111 = 0, $100 = 0, $104 = 0, $107 = 0, $109 = 0, $112 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $124 = 0, $127 = 0, $14 = 0, $142 = 0, $146 = 0, $150 = 0, $155 = 0, $16 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $60 = 0, $62 = 0, $66 = 0, $69 = 0, $72 = 0, $74 = 0, $76 = 0, $79 = 0, $82 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $97 = 0;
 $12 = HEAP32[$5 >> 2] | 0;
 $14 = HEAP32[$5 + 4 >> 2] | 0;
 $16 = HEAP32[$5 + 8 >> 2] | 0;
 $19 = HEAP32[$5 + 12 >> 2] << 7;
 $22 = HEAP32[$5 + 16 >> 2] << 8;
 HEAP32[$2 >> 2] = 2147483647;
 HEAP32[$1 >> 2] = 2147483647;
 HEAP8[$0 >> 0] = 0;
 $23 = $16 << 7;
 $24 = $14 << 7;
 $25 = $12 << 7;
 $26 = $4 + 4 | 0;
 $27 = $4 + 8 | 0;
 $28 = $4 + 12 | 0;
 $29 = $4 + 16 | 0;
 $30 = $4 + 28 | 0;
 $31 = $4 + 32 | 0;
 $32 = $4 + 36 | 0;
 $33 = $4 + 24 | 0;
 $34 = $4 + 52 | 0;
 $35 = $4 + 56 | 0;
 $36 = $4 + 48 | 0;
 $37 = $4 + 76 | 0;
 $38 = $4 + 72 | 0;
 $39 = $4 + 96 | 0;
 $40 = $9 << 16 >> 16;
 $$0106110 = $6;
 $$0111 = 0;
 while (1) {
  $43 = HEAPU8[$7 + $$0111 >> 0] | 0;
  $44 = $43 - $10 | 0;
  $48 = HEAP8[$$0106110 + 1 >> 0] | 0;
  $50 = (Math_imul(HEAP32[$26 >> 2] | 0, $48) | 0) - $25 | 0;
  $54 = HEAP8[$$0106110 + 2 >> 0] | 0;
  $56 = $50 + (Math_imul(HEAP32[$27 >> 2] | 0, $54) | 0) | 0;
  $60 = HEAP8[$$0106110 + 3 >> 0] | 0;
  $62 = $56 + (Math_imul(HEAP32[$28 >> 2] | 0, $60) | 0) | 0;
  $66 = HEAP8[$$0106110 + 4 >> 0] | 0;
  $69 = $62 + (Math_imul(HEAP32[$29 >> 2] | 0, $66) | 0) << 1;
  $72 = HEAP8[$$0106110 >> 0] | 0;
  $74 = $69 + (Math_imul(HEAP32[$4 >> 2] | 0, $72) | 0) | 0;
  $76 = Math_imul($74 >> 16, $72) | 0;
  $79 = (Math_imul($74 & 65535, $72) | 0) >> 16;
  $82 = (Math_imul(HEAP32[$30 >> 2] | 0, $54) | 0) - $24 | 0;
  $85 = $82 + (Math_imul(HEAP32[$31 >> 2] | 0, $60) | 0) | 0;
  $89 = $85 + (Math_imul(HEAP32[$32 >> 2] | 0, $66) | 0) << 1;
  $92 = $89 + (Math_imul(HEAP32[$33 >> 2] | 0, $48) | 0) | 0;
  $94 = Math_imul($92 >> 16, $48) | 0;
  $97 = (Math_imul($92 & 65535, $48) | 0) >> 16;
  $100 = (Math_imul(HEAP32[$34 >> 2] | 0, $60) | 0) - $23 | 0;
  $104 = $100 + (Math_imul(HEAP32[$35 >> 2] | 0, $66) | 0) << 1;
  $107 = $104 + (Math_imul(HEAP32[$36 >> 2] | 0, $54) | 0) | 0;
  $109 = Math_imul($107 >> 16, $54) | 0;
  $112 = (Math_imul($107 & 65535, $54) | 0) >> 16;
  $116 = (Math_imul(HEAP32[$37 >> 2] | 0, $66) | 0) - $19 << 1;
  $119 = $116 + (Math_imul(HEAP32[$38 >> 2] | 0, $60) | 0) | 0;
  $121 = Math_imul($119 >> 16, $60) | 0;
  $124 = (Math_imul($119 & 65535, $60) | 0) >> 16;
  $127 = (Math_imul(HEAP32[$39 >> 2] | 0, $66) | 0) - $22 | 0;
  $142 = $76 + 32801 + $79 + $94 + $97 + $109 + $112 + (Math_imul($127 >> 16, $66) | 0) + $121 + ((Math_imul($127 & 65535, $66) | 0) >> 16) + $124 | 0;
  if (($142 | 0) > -1) {
   $146 = $142 + ((($44 | 0) > 0 ? $44 : 0) << 11) | 0;
   $150 = Math_imul(((_silk_lin2log($146) | 0) << 16) + -125829120 >> 16, $40) | 0;
   $155 = $150 + (HEAPU8[$8 + $$0111 >> 0] << 2) | 0;
   if (($155 | 0) <= (HEAP32[$2 >> 2] | 0)) {
    HEAP32[$2 >> 2] = $155;
    HEAP32[$1 >> 2] = $146;
    HEAP8[$0 >> 0] = $$0111;
    HEAP32[$3 >> 2] = $43;
   }
  }
  $$0111 = $$0111 + 1 | 0;
  if (($$0111 | 0) == ($11 | 0)) break; else $$0106110 = $$0106110 + 5 | 0;
 }
 return;
}

function _op_pvq_search_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$0108 = 0.0, $$0110 = 0, $$0112133 = 0, $$0113 = 0, $$0115 = 0, $$0118 = 0.0, $$0122 = 0.0, $$0125 = 0.0, $$1114 = 0, $$1116 = 0, $$1119 = 0.0, $$1123 = 0.0, $$1126 = 0.0, $$2124131 = 0.0, $$3 = 0, $$3121$lcssa = 0.0, $$3121132 = 0.0, $$4 = 0, $$5 = 0, $32 = 0.0, $33 = 0, $37 = 0, $39 = 0.0, $4 = 0, $42 = 0.0, $45 = 0.0, $47 = 0, $5 = 0, $52 = 0.0, $57 = 0.0, $61 = 0.0, $63 = 0.0, $69 = 0.0, $72 = 0.0, $73 = 0.0, $76 = 0, $8 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $86 = 0, $9 = 0.0, $90 = 0, $93 = 0, sp = 0;
 sp = STACKTOP;
 $4 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 _memset($4 | 0, 0, (($3 | 0) > 1 ? $3 : 1) << 2 | 0) | 0;
 $$0113 = 0;
 do {
  $8 = $0 + ($$0113 << 2) | 0;
  $9 = +HEAPF32[$8 >> 2];
  HEAP32[$5 + ($$0113 << 2) >> 2] = $9 < 0.0 & 1;
  HEAPF32[$8 >> 2] = +Math_abs(+$9);
  HEAP32[$1 + ($$0113 << 2) >> 2] = 0;
  $$0113 = $$0113 + 1 | 0;
 } while (($$0113 | 0) < ($3 | 0));
 if (($3 >> 1 | 0) < ($2 | 0)) {
  $$0125 = 0.0;
  $$1114 = 0;
  do {
   $$0125 = $$0125 + +HEAPF32[$0 + ($$1114 << 2) >> 2];
   $$1114 = $$1114 + 1 | 0;
  } while (($$1114 | 0) < ($3 | 0));
  if ($$0125 > 1.0000000036274937e-15 & $$0125 < 64.0) $$1126 = $$0125; else {
   HEAPF32[$0 >> 2] = 1.0;
   _memset($0 + 4 | 0, 0, ((($3 | 0) > 2 ? $3 : 2) << 2) + -4 | 0) | 0;
   $$1126 = 1.0;
  }
  $32 = (+($2 | 0) + .800000011920929) * (1.0 / $$1126);
  $$0115 = $2;
  $$0118 = 0.0;
  $$0122 = 0.0;
  $$3 = 0;
  while (1) {
   $33 = $0 + ($$3 << 2) | 0;
   $37 = ~~+Math_floor(+($32 * +HEAPF32[$33 >> 2]));
   HEAP32[$1 + ($$3 << 2) >> 2] = $37;
   $39 = +($37 | 0);
   $42 = $$0118 + $39 * $39;
   $45 = $$0122 + +HEAPF32[$33 >> 2] * $39;
   HEAPF32[$4 + ($$3 << 2) >> 2] = $39 * 2.0;
   $47 = $$0115 - $37 | 0;
   $$3 = $$3 + 1 | 0;
   if (($$3 | 0) >= ($3 | 0)) {
    $$1116 = $47;
    $$1119 = $42;
    $$1123 = $45;
    break;
   } else {
    $$0115 = $47;
    $$0118 = $42;
    $$0122 = $45;
   }
  }
 } else {
  $$1116 = $2;
  $$1119 = 0.0;
  $$1123 = 0.0;
 }
 if (($$1116 | 0) > ($3 + 3 | 0)) {
  $52 = +($$1116 | 0);
  $57 = $$1119 + $52 * $52 + +HEAPF32[$4 >> 2] * $52;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $$1116;
  $$3121$lcssa = $57;
 } else if (($$1116 | 0) > 0) {
  $$0112133 = 0;
  $$2124131 = $$1123;
  $$3121132 = $$1119;
  while (1) {
   $61 = $$3121132 + 1.0;
   $63 = $$2124131 + +HEAPF32[$0 >> 2];
   $$0 = $61 + +HEAPF32[$4 >> 2];
   $$0108 = $63 * $63;
   $$0110 = 0;
   $$4 = 1;
   while (1) {
    $69 = $$2124131 + +HEAPF32[$0 + ($$4 << 2) >> 2];
    $72 = $61 + +HEAPF32[$4 + ($$4 << 2) >> 2];
    $73 = $69 * $69;
    $76 = $$0 * $73 > $$0108 * $72;
    $$0110 = $76 ? $$4 : $$0110;
    $$4 = $$4 + 1 | 0;
    if (($$4 | 0) >= ($3 | 0)) break; else {
     $$0 = $76 ? $72 : $$0;
     $$0108 = $76 ? $73 : $$0108;
    }
   }
   $$2124131 = $$2124131 + +HEAPF32[$0 + ($$0110 << 2) >> 2];
   $82 = $4 + ($$0110 << 2) | 0;
   $83 = +HEAPF32[$82 >> 2];
   $84 = $61 + $83;
   HEAPF32[$82 >> 2] = $83 + 2.0;
   $86 = $1 + ($$0110 << 2) | 0;
   HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
   $$0112133 = $$0112133 + 1 | 0;
   if (($$0112133 | 0) == ($$1116 | 0)) {
    $$3121$lcssa = $84;
    break;
   } else $$3121132 = $84;
  }
 } else $$3121$lcssa = $$1119;
 $$5 = 0;
 do {
  $90 = $1 + ($$5 << 2) | 0;
  $93 = HEAP32[$5 + ($$5 << 2) >> 2] | 0;
  HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] ^ 0 - $93) + $93;
  $$5 = $$5 + 1 | 0;
 } while (($$5 | 0) < ($3 | 0));
 STACKTOP = sp;
 return +$$3121$lcssa;
}

function _opus_encoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $29 = 0, $4 = 0, $44 = 0, $51 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $4 = sp + 12 | 0;
 L1 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
  switch ($1 | 0) {
  case 8e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  switch ($1 | 0) {
  case 12e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  if (($1 | 0) < 24e3) {
   switch ($1 | 0) {
   case 16e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($1 | 0) < 48e3) {
   switch ($1 | 0) {
   case 24e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   switch ($1 | 0) {
   case 48e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($2 + -1 | 0) >>> 0 > 1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 switch ($3 | 0) {
 case 2048:
 case 2049:
 case 2051:
  break;
 default:
  {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 _memset($0 | 0, 0, _opus_encoder_get_size($2) | 0) | 0;
 _silk_Get_Encoder_Size($4);
 $9 = _align_662(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = $9;
 $10 = _align_662(18136) | 0;
 HEAP32[$0 + 4 >> 2] = $10;
 $12 = $10 + $9 | 0;
 HEAP32[$0 >> 2] = $12;
 $14 = $0 + $12 | 0;
 HEAP32[$0 + 112 >> 2] = $2;
 HEAP32[$0 + 14188 >> 2] = $2;
 $17 = $0 + 144 | 0;
 HEAP32[$17 >> 2] = $1;
 $18 = $0 + 180 | 0;
 HEAP32[$18 >> 2] = 0;
 $19 = $0 + 8 | 0;
 _silk_InitEncoder($0 + $10 | 0, 0, $19);
 HEAP32[$19 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$0 + 20 >> 2] = 16e3;
 HEAP32[$0 + 24 >> 2] = 8e3;
 HEAP32[$0 + 28 >> 2] = 16e3;
 HEAP32[$0 + 32 >> 2] = 20;
 HEAP32[$0 + 36 >> 2] = 25e3;
 HEAP32[$0 + 40 >> 2] = 0;
 $29 = $0 + 44 | 0;
 HEAP32[$29 >> 2] = 9;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 if (_celt_encoder_init($14, $1, $2, HEAP32[$18 >> 2] | 0) | 0) {
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 0;
 _opus_custom_encoder_ctl($14, 10016, $vararg_buffer) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$29 >> 2];
 _opus_custom_encoder_ctl($14, 4010, $vararg_buffer1) | 0;
 HEAP32[$0 + 148 >> 2] = 1;
 HEAP32[$0 + 152 >> 2] = 1;
 HEAP32[$0 + 164 >> 2] = -1e3;
 HEAP32[$0 + 160 >> 2] = (Math_imul($2, $1) | 0) + 3e3;
 $44 = $0 + 108 | 0;
 HEAP32[$44 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = -1e3;
 HEAP32[$0 + 128 >> 2] = -1e3;
 HEAP32[$0 + 132 >> 2] = 1105;
 HEAP32[$0 + 120 >> 2] = -1e3;
 HEAP32[$0 + 136 >> 2] = -1e3;
 HEAP32[$0 + 140 >> 2] = -1;
 $51 = HEAP32[$17 >> 2] | 0;
 HEAP32[$0 + 172 >> 2] = ($51 | 0) / 100 | 0;
 HEAP32[$0 + 168 >> 2] = 24;
 HEAP32[$0 + 156 >> 2] = 5e3;
 HEAP32[$0 + 116 >> 2] = ($51 | 0) / 250 | 0;
 HEAP16[$0 + 14192 >> 1] = 16384;
 HEAPF32[$0 + 14200 >> 2] = 1.0;
 HEAP32[$0 + 14196 >> 2] = (_silk_lin2log(60) | 0) << 8;
 HEAP32[$0 + 14248 >> 2] = 1;
 HEAP32[$0 + 14220 >> 2] = 1001;
 HEAP32[$0 + 14236 >> 2] = 1105;
 _tonality_analysis_init($0 + 188 | 0, HEAP32[$17 >> 2] | 0);
 HEAP32[$0 + 192 >> 2] = HEAP32[$44 >> 2];
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _resampler_basic_direct_double($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$061$lcssa = 0, $$06175 = 0, $$06175$us = 0, $$062$lcssa = 0, $$06274 = 0, $$06274$us = 0, $$063$lcssa = 0, $$06373 = 0, $$06373$us = 0, $$065$us = 0, $$1 = 0, $$1$us = 0, $$164 = 0, $$164$us = 0, $$sroa$0$166$us = 0.0, $$sroa$10$169$us = 0.0, $$sroa$4$167$us = 0.0, $$sroa$7$168$us = 0.0, $11 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $32 = 0, $33 = 0, $41 = 0, $49 = 0, $57 = 0, $7 = 0, $71 = 0, $75 = 0, $76 = 0, $8 = 0, $83 = 0, $87 = 0, $88 = 0;
 $7 = HEAP32[$0 + 24 >> 2] | 0;
 $8 = $0 + 60 | 0;
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $12 = $0 + 64 | 0;
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $17 = HEAP32[$0 + 76 >> 2] | 0;
 $19 = HEAP32[$0 + 92 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $23 = HEAP32[$0 + 40 >> 2] | 0;
 $25 = HEAP32[$0 + 12 >> 2] | 0;
 L1 : do if (($11 | 0) < (HEAP32[$3 >> 2] | 0)) {
  if (($7 | 0) <= 0) {
   $$06175 = 0;
   $$06274 = $11;
   $$06373 = $15;
   while (1) {
    if (($$06175 | 0) >= (HEAP32[$5 >> 2] | 0)) {
     $$061$lcssa = $$06175;
     $$062$lcssa = $$06274;
     $$063$lcssa = $$06373;
     break L1;
    }
    $83 = $$06175 + 1 | 0;
    HEAPF32[$4 + ((Math_imul($$06175, $19) | 0) << 2) >> 2] = 0.0;
    $87 = $$06373 + $23 | 0;
    $88 = $87 >>> 0 < $25 >>> 0;
    $$164 = $87 - ($88 ? 0 : $25) | 0;
    $$1 = $$06274 + $21 + (($88 ^ 1) & 1) | 0;
    if (($$1 | 0) < (HEAP32[$3 >> 2] | 0)) {
     $$06175 = $83;
     $$06274 = $$1;
     $$06373 = $$164;
    } else {
     $$061$lcssa = $83;
     $$062$lcssa = $$1;
     $$063$lcssa = $$164;
     break L1;
    }
   }
  }
  $$06175$us = 0;
  $$06274$us = $11;
  $$06373$us = $15;
  while (1) {
   if (($$06175$us | 0) >= (HEAP32[$5 >> 2] | 0)) {
    $$061$lcssa = $$06175$us;
    $$062$lcssa = $$06274$us;
    $$063$lcssa = $$06373$us;
    break L1;
   }
   $32 = $17 + ((Math_imul($$06373$us, $7) | 0) << 2) | 0;
   $33 = $2 + ($$06274$us << 2) | 0;
   $$065$us = 0;
   $$sroa$0$166$us = 0.0;
   $$sroa$10$169$us = 0.0;
   $$sroa$4$167$us = 0.0;
   $$sroa$7$168$us = 0.0;
   do {
    $$sroa$0$166$us = $$sroa$0$166$us + +HEAPF32[$32 + ($$065$us << 2) >> 2] * +HEAPF32[$33 + ($$065$us << 2) >> 2];
    $41 = $$065$us | 1;
    $$sroa$4$167$us = $$sroa$4$167$us + +HEAPF32[$32 + ($41 << 2) >> 2] * +HEAPF32[$33 + ($41 << 2) >> 2];
    $49 = $$065$us | 2;
    $$sroa$7$168$us = $$sroa$7$168$us + +HEAPF32[$32 + ($49 << 2) >> 2] * +HEAPF32[$33 + ($49 << 2) >> 2];
    $57 = $$065$us | 3;
    $$sroa$10$169$us = $$sroa$10$169$us + +HEAPF32[$32 + ($57 << 2) >> 2] * +HEAPF32[$33 + ($57 << 2) >> 2];
    $$065$us = $$065$us + 4 | 0;
   } while (($$065$us | 0) < ($7 | 0));
   $71 = $$06175$us + 1 | 0;
   HEAPF32[$4 + ((Math_imul($$06175$us, $19) | 0) << 2) >> 2] = $$sroa$0$166$us + $$sroa$4$167$us + $$sroa$7$168$us + $$sroa$10$169$us;
   $75 = $$06373$us + $23 | 0;
   $76 = $75 >>> 0 < $25 >>> 0;
   $$164$us = $75 - ($76 ? 0 : $25) | 0;
   $$1$us = $$06274$us + $21 + (($76 ^ 1) & 1) | 0;
   if (($$1$us | 0) < (HEAP32[$3 >> 2] | 0)) {
    $$06175$us = $71;
    $$06274$us = $$1$us;
    $$06373$us = $$164$us;
   } else {
    $$061$lcssa = $71;
    $$062$lcssa = $$1$us;
    $$063$lcssa = $$164$us;
    break;
   }
  }
 } else {
  $$061$lcssa = 0;
  $$062$lcssa = $11;
  $$063$lcssa = $15;
 } while (0);
 HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] = $$062$lcssa;
 HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] = $$063$lcssa;
 return $$061$lcssa | 0;
}

function _compute_stereo_width($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa143 = 0.0, $$0125$lcssa142 = 0.0, $$0125134 = 0.0, $$0127$lcssa141 = 0.0, $$0127133 = 0.0, $$0129132 = 0, $$0135 = 0.0, $$1 = 0.0, $$1126 = 0.0, $$1128 = 0.0, $$131 = 0.0, $10 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $108 = 0.0, $110 = 0.0, $111 = 0, $114 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $14 = 0.0, $17 = 0.0, $23 = 0.0, $26 = 0.0, $35 = 0.0, $38 = 0.0, $4 = 0, $47 = 0.0, $50 = 0.0, $66 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $79 = 0.0, $81 = 0.0, $83 = 0.0, $85 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $95 = 0.0, label = 0;
 $4 = ($2 | 0) / ($1 | 0) | 0;
 $9 = 1.0 - 25.0 / +((($4 | 0) > 50 ? $4 : 50) | 0);
 $10 = $1 + -3 | 0;
 if (($1 | 0) > 3) {
  $$0125134 = 0.0;
  $$0127133 = 0.0;
  $$0129132 = 0;
  $$0135 = 0.0;
  do {
   $12 = $$0129132 << 1;
   $14 = +HEAPF32[$0 + ($12 << 2) >> 2];
   $17 = +HEAPF32[$0 + (($12 | 1) << 2) >> 2];
   $23 = +HEAPF32[$0 + (($12 | 2) << 2) >> 2];
   $26 = +HEAPF32[$0 + (($12 | 3) << 2) >> 2];
   $35 = +HEAPF32[$0 + (($12 | 4) << 2) >> 2];
   $38 = +HEAPF32[$0 + (($12 | 5) << 2) >> 2];
   $47 = +HEAPF32[$0 + (($12 | 6) << 2) >> 2];
   $50 = +HEAPF32[$0 + (($12 | 7) << 2) >> 2];
   $$0135 = $$0135 + ($14 * $14 + $23 * $23 + $35 * $35 + $47 * $47);
   $$0125134 = $$0125134 + ($14 * $17 + $23 * $26 + $35 * $38 + $47 * $50);
   $$0127133 = $$0127133 + ($17 * $17 + $26 * $26 + $38 * $38 + $50 * $50);
   $$0129132 = $$0129132 + 4 | 0;
  } while (($$0129132 | 0) < ($10 | 0));
  if ($$0135 < 1.0e9) {
   $$0$lcssa143 = $$0135;
   $$0125$lcssa142 = $$0125134;
   $$0127$lcssa141 = $$0127133;
   label = 5;
  } else label = 6;
 } else {
  $$0$lcssa143 = 0.0;
  $$0125$lcssa142 = 0.0;
  $$0127$lcssa141 = 0.0;
  label = 5;
 }
 if ((label | 0) == 5) if ($$0127$lcssa141 != $$0127$lcssa141 | 0.0 != 0.0 | (!($$0127$lcssa141 < 1.0e9) | ($$0$lcssa143 != $$0$lcssa143 | 0.0 != 0.0))) label = 6; else {
  $$1 = $$0$lcssa143;
  $$1126 = $$0125$lcssa142;
  $$1128 = $$0127$lcssa141;
 }
 if ((label | 0) == 6) {
  $$1 = 0.0;
  $$1126 = 0.0;
  $$1128 = 0.0;
 }
 $66 = +HEAPF32[$3 >> 2];
 $69 = $66 + $9 * ($$1 - $66);
 $70 = $3 + 4 | 0;
 $71 = +HEAPF32[$70 >> 2];
 $74 = $71 + $9 * ($$1126 - $71);
 $75 = $3 + 8 | 0;
 $76 = +HEAPF32[$75 >> 2];
 $79 = $76 + $9 * ($$1128 - $76);
 $81 = $69 < 0.0 ? 0.0 : $69;
 HEAPF32[$3 >> 2] = $81;
 $83 = $74 < 0.0 ? 0.0 : $74;
 HEAPF32[$70 >> 2] = $83;
 $85 = $79 < 0.0 ? 0.0 : $79;
 HEAPF32[$75 >> 2] = $85;
 if (($81 > $85 ? $81 : $85) > 7.999999797903001e-04) {
  $88 = +Math_sqrt(+$81);
  $89 = +Math_sqrt(+$85);
  $90 = +Math_sqrt(+$88);
  $91 = +Math_sqrt(+$89);
  $92 = $88 * $89;
  $$131 = $83 < $92 ? $83 : $92;
  HEAPF32[$70 >> 2] = $$131;
  $95 = $$131 / ($92 + 1.0000000036274937e-15);
  $104 = +Math_abs(+($90 - $91)) / ($90 + 1.0000000036274937e-15 + $91) * +Math_sqrt(+(1.0 - $95 * $95));
  $105 = $3 + 12 | 0;
  $106 = +HEAPF32[$105 >> 2];
  $108 = +($4 | 0);
  $110 = $106 + ($104 - $106) / $108;
  HEAPF32[$105 >> 2] = $110;
  $111 = $3 + 16 | 0;
  $114 = +HEAPF32[$111 >> 2] - .019999999552965164 / $108;
  $116 = $114 > $110 ? $114 : $110;
  HEAPF32[$111 >> 2] = $116;
  $118 = $116;
  $117 = $118 * 20.0;
  $119 = $117 > 1.0;
  $120 = $119 ? 1.0 : $117;
  return +$120;
 } else {
  $118 = +HEAPF32[$3 + 16 >> 2];
  $117 = $118 * 20.0;
  $119 = $117 > 1.0;
  $120 = $119 ? 1.0 : $117;
  return +$120;
 }
 return +(0.0);
}

function _silk_setup_fs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$sink100 = 0, $12 = 0, $20 = 0, $24 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $43 = 0, $55 = 0, $56 = 0, $59 = 0, $63 = 0, $65 = 0, $76 = 0, $78 = 0, $80 = 0, $cond = 0, $sext91 = 0, $silk_NLSF_CB_WB$sink = 0;
 $3 = $0 + 4612 | 0;
 if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) $$1 = 0; else {
  switch ($2 | 0) {
  case 10:
  case 20:
  case 40:
  case 60:
   {
    $$0 = 0;
    break;
   }
  default:
   $$0 = -103;
  }
  do if (($2 | 0) < 11) {
   HEAP32[$0 + 5744 >> 2] = 1;
   HEAP32[$0 + 4580 >> 2] = ($2 | 0) == 10 ? 2 : 1;
   $12 = $1 << 16 >> 16;
   HEAP32[$0 + 4584 >> 2] = Math_imul($2 << 16 >> 16, $12) | 0;
   HEAP32[$0 + 4548 >> 2] = $12 * 14;
   $20 = $0 + 4688 | 0;
   if ((HEAP32[$0 + 4576 >> 2] | 0) == 8) {
    HEAP32[$20 >> 2] = 43998;
    break;
   } else {
    HEAP32[$20 >> 2] = 43986;
    break;
   }
  } else {
   HEAP32[$0 + 5744 >> 2] = ($2 >>> 0) / 20 | 0;
   HEAP32[$0 + 4580 >> 2] = 4;
   $24 = $1 << 16 >> 16;
   HEAP32[$0 + 4584 >> 2] = $24 * 20;
   HEAP32[$0 + 4548 >> 2] = $24 * 24;
   $32 = $0 + 4688 | 0;
   if ((HEAP32[$0 + 4576 >> 2] | 0) == 8) {
    HEAP32[$32 >> 2] = 43975;
    break;
   } else {
    HEAP32[$32 >> 2] = 25072;
    break;
   }
  } while (0);
  HEAP32[$3 >> 2] = $2;
  HEAP32[$0 + 4608 >> 2] = 0;
  $$1 = $$0;
 }
 $34 = ($1 | 0) == 8;
 switch ($1 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(44878, 44619, 241);
 }
 $36 = HEAP32[$0 + 4580 >> 2] | 0;
 switch ($36 | 0) {
 case 4:
 case 2:
  break;
 default:
  _celt_fatal(44940, 44619, 242);
 }
 $37 = $0 + 4576 | 0;
 do if ((HEAP32[$37 >> 2] | 0) == ($1 | 0)) {
  $78 = HEAP32[$0 + 4588 >> 2] | 0;
  $80 = HEAP32[$0 + 4584 >> 2] | 0;
 } else {
  $40 = $0 + 7168 | 0;
  HEAP32[$40 >> 2] = 0;
  HEAP32[$40 + 4 >> 2] = 0;
  HEAP32[$40 + 8 >> 2] = 0;
  $43 = $0 + 16 | 0;
  HEAP32[$43 >> 2] = 0;
  HEAP32[$43 + 4 >> 2] = 0;
  HEAP32[$0 + 5740 >> 2] = 0;
  HEAP32[$0 + 5748 >> 2] = 0;
  HEAP32[$0 + 4608 >> 2] = 0;
  _memset($0 + 148 | 0, 0, 4384) | 0;
  HEAP32[$0 + 4544 >> 2] = 100;
  HEAP32[$0 + 4664 >> 2] = 1;
  HEAP8[$40 >> 0] = 10;
  HEAP32[$0 + 4476 >> 2] = 100;
  HEAP32[$0 + 4492 >> 2] = 65536;
  HEAP8[$0 + 4541 >> 0] = 0;
  HEAP32[$37 >> 2] = $1;
  $55 = ($36 | 0) == 4;
  $56 = $0 + 4688 | 0;
  if ($34) {
   HEAP32[$56 >> 2] = $55 ? 43975 : 43998;
   $$sink100 = 10;
   $silk_NLSF_CB_WB$sink = 39196;
  } else {
   HEAP32[$56 >> 2] = $55 ? 25072 : 43986;
   $cond = ($1 | 0) == 12;
   $$sink100 = $cond ? 10 : 16;
   $silk_NLSF_CB_WB$sink = $cond ? 39196 : 39236;
  }
  HEAP32[$0 + 4640 >> 2] = $$sink100;
  HEAP32[$0 + 4692 >> 2] = $silk_NLSF_CB_WB$sink;
  $59 = $1 * 5 | 0;
  HEAP32[$0 + 4588 >> 2] = $59;
  $63 = Math_imul($36 << 16 >> 16, $1 * 327680 >> 16) | 0;
  HEAP32[$0 + 4584 >> 2] = $63;
  $sext91 = $1 << 16;
  $65 = $sext91 >> 16;
  HEAP32[$0 + 4592 >> 2] = $65 * 20;
  HEAP32[$0 + 4596 >> 2] = $sext91 >> 15;
  HEAP32[$0 + 4552 >> 2] = $65 * 18;
  HEAP32[$0 + 4548 >> 2] = Math_imul($65, $55 ? 24 : 14) | 0;
  if (($1 | 0) == 16) {
   HEAP32[$0 + 4684 >> 2] = 43960;
   $78 = 80;
   $80 = $63;
   break;
  }
  $76 = $0 + 4684 | 0;
  if (($1 | 0) == 12) {
   HEAP32[$76 >> 2] = 43954;
   $78 = 60;
   $80 = $63;
   break;
  } else {
   HEAP32[$76 >> 2] = 43945;
   $78 = $59;
   $80 = $63;
   break;
  }
 } while (0);
 if ((Math_imul($78, $36) | 0) == ($80 | 0)) return $$1 | 0; else _celt_fatal(45013, 44619, 302);
 return 0;
}

function _silk_find_LPC_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $$1 = 0.0, $$1$1 = 0.0, $$1$2 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0.0, $17 = 0, $25 = 0, $29 = 0.0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0, $42 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $54 = 0.0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $76 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1696 | 0;
 $4 = sp + 1632 | 0;
 $5 = sp + 1600 | 0;
 $6 = sp + 1536 | 0;
 $7 = sp;
 $10 = $0 + 4640 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 + (HEAP32[$0 + 4588 >> 2] | 0) | 0;
 $13 = $0 + 4767 | 0;
 HEAP8[$13 >> 0] = 4;
 $14 = $0 + 4580 | 0;
 $16 = +_silk_burg_modified_FLP($4, $2, $3, $12, HEAP32[$14 >> 2] | 0, $11);
 $17 = $0 + 4632 | 0;
 do if (!(HEAP32[$17 >> 2] | 0)) label = 8; else if (!(HEAP32[$0 + 4664 >> 2] | 0)) if ((HEAP32[$14 >> 2] | 0) == 4) {
  $25 = $12 << 1;
  $29 = $16 - +_silk_burg_modified_FLP($6, $2 + ($25 << 2) | 0, $3, $12, 2, HEAP32[$10 >> 2] | 0);
  _silk_A2NLSF_FLP($1, $6, HEAP32[$10 >> 2] | 0);
  $31 = $0 + 4500 | 0;
  _silk_interpolate($5, $31, $1, 3, HEAP32[$10 >> 2] | 0);
  _silk_NLSF2A_FLP($6, $5, HEAP32[$10 >> 2] | 0);
  _silk_LPC_analysis_filter_FLP($7, $6, $2, $25, HEAP32[$10 >> 2] | 0);
  $35 = HEAP32[$10 >> 2] | 0;
  $36 = $7 + ($35 << 2) | 0;
  $37 = $12 - $35 | 0;
  $38 = +_silk_energy_FLP($36, $37);
  $42 = $38 + +_silk_energy_FLP($36 + ($12 << 2) | 0, $37);
  if ($29 > $42) {
   HEAP8[$13 >> 0] = 3;
   $$1 = $42;
  } else if ($42 > 3402823466385288598117041.0e14) {
   label = 8;
   break;
  } else $$1 = $29;
  _silk_interpolate($5, $31, $1, 2, $35);
  _silk_NLSF2A_FLP($6, $5, HEAP32[$10 >> 2] | 0);
  _silk_LPC_analysis_filter_FLP($7, $6, $2, $25, HEAP32[$10 >> 2] | 0);
  $47 = HEAP32[$10 >> 2] | 0;
  $48 = $7 + ($47 << 2) | 0;
  $49 = $12 - $47 | 0;
  $50 = +_silk_energy_FLP($48, $49);
  $54 = $50 + +_silk_energy_FLP($48 + ($12 << 2) | 0, $49);
  if ($$1 > $54) {
   HEAP8[$13 >> 0] = 2;
   $$1$1 = $54;
  } else if ($42 < $54) {
   label = 8;
   break;
  } else $$1$1 = $$1;
  _silk_interpolate($5, $31, $1, 1, $47);
  _silk_NLSF2A_FLP($6, $5, HEAP32[$10 >> 2] | 0);
  _silk_LPC_analysis_filter_FLP($7, $6, $2, $25, HEAP32[$10 >> 2] | 0);
  $69 = HEAP32[$10 >> 2] | 0;
  $70 = $7 + ($69 << 2) | 0;
  $71 = $12 - $69 | 0;
  $72 = +_silk_energy_FLP($70, $71);
  $76 = $72 + +_silk_energy_FLP($70 + ($12 << 2) | 0, $71);
  if ($$1$1 > $76) {
   HEAP8[$13 >> 0] = 1;
   $$1$2 = $76;
  } else if ($54 < $76) {
   label = 8;
   break;
  } else $$1$2 = $$1$1;
  _silk_interpolate($5, $31, $1, 0, $69);
  _silk_NLSF2A_FLP($6, $5, HEAP32[$10 >> 2] | 0);
  _silk_LPC_analysis_filter_FLP($7, $6, $2, $25, HEAP32[$10 >> 2] | 0);
  $81 = HEAP32[$10 >> 2] | 0;
  $82 = $7 + ($81 << 2) | 0;
  $83 = $12 - $81 | 0;
  $84 = +_silk_energy_FLP($82, $83);
  if ($$1$2 > $84 + +_silk_energy_FLP($82 + ($12 << 2) | 0, $83)) HEAP8[$13 >> 0] = 0; else label = 8;
 } else label = 8; else label = 8; while (0);
 if ((label | 0) == 8) if ((HEAP8[$13 >> 0] | 0) == 4) {
  _silk_A2NLSF_FLP($1, $4, HEAP32[$10 >> 2] | 0);
  if ((HEAP8[$13 >> 0] | 0) == 4) {
   STACKTOP = sp;
   return;
  }
 }
 if (!(HEAP32[$17 >> 2] | 0)) _celt_fatal(45963, 46128, 103);
 if (HEAP32[$0 + 4664 >> 2] | 0) _celt_fatal(45963, 46128, 103);
 if ((HEAP32[$14 >> 2] | 0) == 4) {
  STACKTOP = sp;
  return;
 } else _celt_fatal(45963, 46128, 103);
}

function _encode_multiframe_packet($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$07679 = 0, $$07679$us = 0, $$077 = 0, $$alloca_mul = 0, $11 = 0, $25 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $52 = 0, $54 = 0, $65 = 0, $66 = 0, $79 = 0, $8 = 0, $80 = 0, $87 = 0, $spec$select = 0, $spec$select78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $8 = sp;
 $spec$select = ($2 | 0) == 2 ? 3 : $2 << 1;
 $11 = $0 + 148 | 0;
 if (!(HEAP32[$11 >> 2] | 0)) if ((HEAP32[$0 + 164 >> 2] | 0) == -1) $$077 = $5; else {
  $25 = ((HEAP32[$0 + 160 >> 2] | 0) * 3 | 0) / (((HEAP32[$0 + 144 >> 2] | 0) * 24 | 0) / (Math_imul($3, $2) | 0) | 0 | 0) | 0;
  $$077 = ($25 | 0) < ($5 | 0) ? $25 : $5;
 } else $$077 = $5;
 $29 = ($$077 - $spec$select | 0) / ($2 | 0) | 0;
 $spec$select78 = ($29 | 0) > 1275 ? 1276 : $29 + 1 | 0;
 $$alloca_mul = Math_imul($spec$select78, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 _opus_repacketizer_init($8) | 0;
 $34 = $0 + 136 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $0 + 128 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $0 + 120 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$0 + 14220 >> 2];
 HEAP32[$36 >> 2] = HEAP32[$0 + 14236 >> 2];
 $45 = HEAP32[$0 + 14188 >> 2] | 0;
 HEAP32[$38 >> 2] = $45;
 $46 = $0 + 68 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 if (!$47) HEAP32[$0 + 14228 >> 2] = $45; else HEAP32[$38 >> 2] = 1;
 L9 : do if (($2 | 0) > 0) {
  $51 = $2 + -1 | 0;
  $52 = $0 + 18128 | 0;
  $54 = $0 + 112 | 0;
  if (!$6) {
   $$07679 = 0;
   while (1) {
    HEAP32[$46 >> 2] = 0;
    HEAP32[$52 >> 2] = ($$07679 | 0) < ($51 | 0) & 1;
    $79 = $33 + (Math_imul($$07679, $spec$select78) | 0) | 0;
    $80 = _opus_encode_native($0, $1 + ((Math_imul(Math_imul($$07679, $3) | 0, HEAP32[$54 >> 2] | 0) | 0) << 2) | 0, $3, $79, $spec$select78, $7, 0, 0, 0, 0, 0) | 0;
    if (($80 | 0) < 0) {
     $$0 = -3;
     label = 21;
     break;
    }
    $$07679 = $$07679 + 1 | 0;
    if ((_opus_repacketizer_cat($8, $79, $80) | 0) < 0) {
     $$0 = -3;
     label = 21;
     break;
    }
    if (($$07679 | 0) >= ($2 | 0)) break L9;
   }
   if ((label | 0) == 21) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
  $$07679$us = 0;
  while (1) {
   HEAP32[$46 >> 2] = 0;
   HEAP32[$52 >> 2] = ($$07679$us | 0) < ($51 | 0) & 1;
   if (($$07679$us | 0) == ($51 | 0)) HEAP32[$34 >> 2] = 1002;
   $65 = $33 + (Math_imul($$07679$us, $spec$select78) | 0) | 0;
   $66 = _opus_encode_native($0, $1 + ((Math_imul(Math_imul($$07679$us, $3) | 0, HEAP32[$54 >> 2] | 0) | 0) << 2) | 0, $3, $65, $spec$select78, $7, 0, 0, 0, 0, 0) | 0;
   if (($66 | 0) < 0) {
    $$0 = -3;
    label = 21;
    break;
   }
   $$07679$us = $$07679$us + 1 | 0;
   if ((_opus_repacketizer_cat($8, $65, $66) | 0) < 0) {
    $$0 = -3;
    label = 21;
    break;
   }
   if (($$07679$us | 0) >= ($2 | 0)) break L9;
  }
  if ((label | 0) == 21) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $87 = _opus_repacketizer_out_range_impl($8, $2, $4, $$077, (HEAP32[$11 >> 2] | 0) == 0 & 1) | 0;
 if (($87 | 0) < 0) {
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$34 >> 2] = $35;
 HEAP32[$36 >> 2] = $37;
 HEAP32[$38 >> 2] = $39;
 HEAP32[$46 >> 2] = $47;
 $$0 = $87;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_noise_shape_quantizer_short_prediction_c_242($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0, $121 = 0, $124 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $138 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $149 = 0, $152 = 0, $154 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $178 = 0, $18 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $87 = 0, $88 = 0, $91 = 0, $93 = 0, $97 = 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP16[$1 >> 1] | 0;
 $8 = Math_imul($4 >> 16, $7) | 0;
 $11 = (Math_imul($4 & 65535, $7) | 0) >> 16;
 $13 = HEAP32[$0 + -4 >> 2] | 0;
 $17 = HEAP16[$1 + 2 >> 1] | 0;
 $18 = Math_imul($13 >> 16, $17) | 0;
 $21 = (Math_imul($13 & 65535, $17) | 0) >> 16;
 $23 = HEAP32[$0 + -8 >> 2] | 0;
 $27 = HEAP16[$1 + 4 >> 1] | 0;
 $28 = Math_imul($23 >> 16, $27) | 0;
 $31 = (Math_imul($23 & 65535, $27) | 0) >> 16;
 $33 = HEAP32[$0 + -12 >> 2] | 0;
 $37 = HEAP16[$1 + 6 >> 1] | 0;
 $38 = Math_imul($33 >> 16, $37) | 0;
 $41 = (Math_imul($33 & 65535, $37) | 0) >> 16;
 $43 = HEAP32[$0 + -16 >> 2] | 0;
 $47 = HEAP16[$1 + 8 >> 1] | 0;
 $48 = Math_imul($43 >> 16, $47) | 0;
 $51 = (Math_imul($43 & 65535, $47) | 0) >> 16;
 $53 = HEAP32[$0 + -20 >> 2] | 0;
 $57 = HEAP16[$1 + 10 >> 1] | 0;
 $58 = Math_imul($53 >> 16, $57) | 0;
 $61 = (Math_imul($53 & 65535, $57) | 0) >> 16;
 $63 = HEAP32[$0 + -24 >> 2] | 0;
 $67 = HEAP16[$1 + 12 >> 1] | 0;
 $68 = Math_imul($63 >> 16, $67) | 0;
 $71 = (Math_imul($63 & 65535, $67) | 0) >> 16;
 $73 = HEAP32[$0 + -28 >> 2] | 0;
 $77 = HEAP16[$1 + 14 >> 1] | 0;
 $78 = Math_imul($73 >> 16, $77) | 0;
 $81 = (Math_imul($73 & 65535, $77) | 0) >> 16;
 $83 = HEAP32[$0 + -32 >> 2] | 0;
 $87 = HEAP16[$1 + 16 >> 1] | 0;
 $88 = Math_imul($83 >> 16, $87) | 0;
 $91 = (Math_imul($83 & 65535, $87) | 0) >> 16;
 $93 = HEAP32[$0 + -36 >> 2] | 0;
 $97 = HEAP16[$1 + 18 >> 1] | 0;
 $121 = $8 + ($2 >> 1) + $11 + $18 + $21 + $28 + $31 + $38 + $41 + $48 + $51 + $58 + $61 + $68 + $71 + $78 + $81 + $88 + $91 + (Math_imul($93 >> 16, $97) | 0) + ((Math_imul($93 & 65535, $97) | 0) >> 16) | 0;
 if (($2 | 0) != 16) {
  $$0 = $121;
  return $$0 | 0;
 }
 $124 = HEAP32[$0 + -40 >> 2] | 0;
 $128 = HEAP16[$1 + 20 >> 1] | 0;
 $129 = Math_imul($124 >> 16, $128) | 0;
 $132 = (Math_imul($124 & 65535, $128) | 0) >> 16;
 $134 = HEAP32[$0 + -44 >> 2] | 0;
 $138 = HEAP16[$1 + 22 >> 1] | 0;
 $139 = Math_imul($134 >> 16, $138) | 0;
 $142 = (Math_imul($134 & 65535, $138) | 0) >> 16;
 $144 = HEAP32[$0 + -48 >> 2] | 0;
 $148 = HEAP16[$1 + 24 >> 1] | 0;
 $149 = Math_imul($144 >> 16, $148) | 0;
 $152 = (Math_imul($144 & 65535, $148) | 0) >> 16;
 $154 = HEAP32[$0 + -52 >> 2] | 0;
 $158 = HEAP16[$1 + 26 >> 1] | 0;
 $159 = Math_imul($154 >> 16, $158) | 0;
 $162 = (Math_imul($154 & 65535, $158) | 0) >> 16;
 $164 = HEAP32[$0 + -56 >> 2] | 0;
 $168 = HEAP16[$1 + 28 >> 1] | 0;
 $169 = Math_imul($164 >> 16, $168) | 0;
 $172 = (Math_imul($164 & 65535, $168) | 0) >> 16;
 $174 = HEAP32[$0 + -60 >> 2] | 0;
 $178 = HEAP16[$1 + 30 >> 1] | 0;
 $$0 = $129 + $121 + $132 + $139 + $142 + $149 + $152 + $159 + $162 + $169 + $172 + (Math_imul($174 >> 16, $178) | 0) + ((Math_imul($174 & 65535, $178) | 0) >> 16) | 0;
 return $$0 | 0;
}

function _silk_noise_shape_quantizer_short_prediction_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0, $121 = 0, $124 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $138 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $149 = 0, $152 = 0, $154 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $178 = 0, $18 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $87 = 0, $88 = 0, $91 = 0, $93 = 0, $97 = 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP16[$1 >> 1] | 0;
 $8 = Math_imul($4 >> 16, $7) | 0;
 $11 = (Math_imul($4 & 65535, $7) | 0) >> 16;
 $13 = HEAP32[$0 + -4 >> 2] | 0;
 $17 = HEAP16[$1 + 2 >> 1] | 0;
 $18 = Math_imul($13 >> 16, $17) | 0;
 $21 = (Math_imul($13 & 65535, $17) | 0) >> 16;
 $23 = HEAP32[$0 + -8 >> 2] | 0;
 $27 = HEAP16[$1 + 4 >> 1] | 0;
 $28 = Math_imul($23 >> 16, $27) | 0;
 $31 = (Math_imul($23 & 65535, $27) | 0) >> 16;
 $33 = HEAP32[$0 + -12 >> 2] | 0;
 $37 = HEAP16[$1 + 6 >> 1] | 0;
 $38 = Math_imul($33 >> 16, $37) | 0;
 $41 = (Math_imul($33 & 65535, $37) | 0) >> 16;
 $43 = HEAP32[$0 + -16 >> 2] | 0;
 $47 = HEAP16[$1 + 8 >> 1] | 0;
 $48 = Math_imul($43 >> 16, $47) | 0;
 $51 = (Math_imul($43 & 65535, $47) | 0) >> 16;
 $53 = HEAP32[$0 + -20 >> 2] | 0;
 $57 = HEAP16[$1 + 10 >> 1] | 0;
 $58 = Math_imul($53 >> 16, $57) | 0;
 $61 = (Math_imul($53 & 65535, $57) | 0) >> 16;
 $63 = HEAP32[$0 + -24 >> 2] | 0;
 $67 = HEAP16[$1 + 12 >> 1] | 0;
 $68 = Math_imul($63 >> 16, $67) | 0;
 $71 = (Math_imul($63 & 65535, $67) | 0) >> 16;
 $73 = HEAP32[$0 + -28 >> 2] | 0;
 $77 = HEAP16[$1 + 14 >> 1] | 0;
 $78 = Math_imul($73 >> 16, $77) | 0;
 $81 = (Math_imul($73 & 65535, $77) | 0) >> 16;
 $83 = HEAP32[$0 + -32 >> 2] | 0;
 $87 = HEAP16[$1 + 16 >> 1] | 0;
 $88 = Math_imul($83 >> 16, $87) | 0;
 $91 = (Math_imul($83 & 65535, $87) | 0) >> 16;
 $93 = HEAP32[$0 + -36 >> 2] | 0;
 $97 = HEAP16[$1 + 18 >> 1] | 0;
 $121 = $8 + ($2 >> 1) + $11 + $18 + $21 + $28 + $31 + $38 + $41 + $48 + $51 + $58 + $61 + $68 + $71 + $78 + $81 + $88 + $91 + (Math_imul($93 >> 16, $97) | 0) + ((Math_imul($93 & 65535, $97) | 0) >> 16) | 0;
 if (($2 | 0) != 16) {
  $$0 = $121;
  return $$0 | 0;
 }
 $124 = HEAP32[$0 + -40 >> 2] | 0;
 $128 = HEAP16[$1 + 20 >> 1] | 0;
 $129 = Math_imul($124 >> 16, $128) | 0;
 $132 = (Math_imul($124 & 65535, $128) | 0) >> 16;
 $134 = HEAP32[$0 + -44 >> 2] | 0;
 $138 = HEAP16[$1 + 22 >> 1] | 0;
 $139 = Math_imul($134 >> 16, $138) | 0;
 $142 = (Math_imul($134 & 65535, $138) | 0) >> 16;
 $144 = HEAP32[$0 + -48 >> 2] | 0;
 $148 = HEAP16[$1 + 24 >> 1] | 0;
 $149 = Math_imul($144 >> 16, $148) | 0;
 $152 = (Math_imul($144 & 65535, $148) | 0) >> 16;
 $154 = HEAP32[$0 + -52 >> 2] | 0;
 $158 = HEAP16[$1 + 26 >> 1] | 0;
 $159 = Math_imul($154 >> 16, $158) | 0;
 $162 = (Math_imul($154 & 65535, $158) | 0) >> 16;
 $164 = HEAP32[$0 + -56 >> 2] | 0;
 $168 = HEAP16[$1 + 28 >> 1] | 0;
 $169 = Math_imul($164 >> 16, $168) | 0;
 $172 = (Math_imul($164 & 65535, $168) | 0) >> 16;
 $174 = HEAP32[$0 + -60 >> 2] | 0;
 $178 = HEAP16[$1 + 30 >> 1] | 0;
 $$0 = $129 + $121 + $132 + $139 + $142 + $149 + $152 + $159 + $162 + $169 + $172 + (Math_imul($174 >> 16, $178) | 0) + ((Math_imul($174 & 65535, $178) | 0) >> 16) | 0;
 return $$0 | 0;
}

function _silk_PLC_update($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$07181 = 0, $$082 = 0, $$1 = 0, $$pre$phi88Z2D = 0, $10 = 0, $100 = 0, $102 = 0, $107 = 0, $108 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $41 = 0, $47 = 0, $55 = 0, $57 = 0, $59 = 0, $8 = 0, $88 = 0;
 $2 = $0 + 4172 | 0;
 $4 = HEAP8[$0 + 2765 >> 0] | 0;
 HEAP32[$0 + 4164 >> 2] = $4 << 24 >> 24;
 do if ($4 << 24 >> 24 == 2) {
  $8 = $0 + 2332 | 0;
  $10 = HEAP32[$0 + 2324 >> 2] | 0;
  $11 = $10 + -1 | 0;
  $12 = $1 + ($11 << 2) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if (($10 | 0) == 0 | ($13 | 0) < 1) $$0$lcssa = 0; else {
   $16 = $0 + 4176 | 0;
   $$07181 = 0;
   $$082 = 0;
   $115 = $13;
   while (1) {
    $17 = $11 - $$07181 | 0;
    $18 = $17 * 5 | 0;
    $41 = (HEAP16[$1 + 96 + ($18 << 1) >> 1] | 0) + (HEAP16[$1 + 96 + ($18 + 1 << 1) >> 1] | 0) + (HEAP16[$1 + 96 + ($18 + 2 << 1) >> 1] | 0) + (HEAP16[$1 + 96 + ($18 + 3 << 1) >> 1] | 0) + (HEAP16[$1 + 96 + ($18 + 4 << 1) >> 1] | 0) | 0;
    if (($41 | 0) > ($$082 | 0)) {
     $47 = $1 + 96 + ((65535 - $$07181 + $10 << 16 >> 16) * 5 << 1) | 0;
     HEAP16[$16 >> 1] = HEAP16[$47 >> 1] | 0;
     HEAP16[$16 + 2 >> 1] = HEAP16[$47 + 2 >> 1] | 0;
     HEAP16[$16 + 4 >> 1] = HEAP16[$47 + 4 >> 1] | 0;
     HEAP16[$16 + 6 >> 1] = HEAP16[$47 + 6 >> 1] | 0;
     HEAP16[$16 + 8 >> 1] = HEAP16[$47 + 8 >> 1] | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 + ($17 << 2) >> 2] << 8;
     $$1 = $41;
     $55 = HEAP32[$12 >> 2] | 0;
    } else {
     $$1 = $$082;
     $55 = $115;
    }
    $$07181 = $$07181 + 1 | 0;
    if (($$07181 | 0) == ($10 | 0) ? 1 : (Math_imul(HEAP32[$8 >> 2] | 0, $$07181) | 0) >= ($55 | 0)) {
     $$0$lcssa = $$1;
     break;
    } else {
     $$082 = $$1;
     $115 = $55;
    }
   }
  }
  $57 = $0 + 4176 | 0;
  HEAP32[$57 >> 2] = 0;
  HEAP32[$57 + 4 >> 2] = 0;
  HEAP16[$57 + 8 >> 1] = 0;
  $59 = $0 + 4180 | 0;
  HEAP16[$59 >> 1] = $$0$lcssa;
  if (($$0$lcssa | 0) < 11469) {
   HEAP16[$0 + 4176 >> 1] = 0;
   HEAP16[$0 + 4178 >> 1] = 0;
   HEAP16[$59 >> 1] = (Math_imul((11744256 / ((($$0$lcssa | 0) > 1 ? $$0$lcssa : 1) >>> 0) | 0) << 16 >> 16, $$0$lcssa << 16 >> 16) | 0) >>> 10;
   HEAP16[$0 + 4182 >> 1] = 0;
   HEAP16[$0 + 4184 >> 1] = 0;
   $$pre$phi88Z2D = $8;
   $100 = $10;
   break;
  }
  if (($$0$lcssa | 0) > 15565) {
   HEAP16[$0 + 4176 >> 1] = 0;
   HEAP16[$0 + 4178 >> 1] = 0;
   HEAP16[$59 >> 1] = (Math_imul((255016960 / ($$0$lcssa >>> 0) | 0) << 16 >> 16, $$0$lcssa << 16 >> 16) | 0) >>> 14;
   HEAP16[$0 + 4182 >> 1] = 0;
   HEAP16[$0 + 4184 >> 1] = 0;
   $$pre$phi88Z2D = $8;
   $100 = $10;
  } else {
   $$pre$phi88Z2D = $8;
   $100 = $10;
  }
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$0 + 2316 >> 2] << 16 >> 16) * 4608;
  $88 = $0 + 4176 | 0;
  HEAP32[$88 >> 2] = 0;
  HEAP32[$88 + 4 >> 2] = 0;
  HEAP16[$88 + 8 >> 1] = 0;
  $$pre$phi88Z2D = $0 + 2332 | 0;
  $100 = HEAP32[$0 + 2324 >> 2] | 0;
 } while (0);
 _memcpy($0 + 4186 | 0, $1 + 64 | 0, HEAP32[$0 + 2340 >> 2] << 1 | 0) | 0;
 HEAP16[$0 + 4240 >> 1] = HEAP32[$1 + 136 >> 2];
 $102 = $1 + 16 + ($100 + -2 << 2) | 0;
 $107 = HEAP32[$102 + 4 >> 2] | 0;
 $108 = $0 + 4244 | 0;
 HEAP32[$108 >> 2] = HEAP32[$102 >> 2];
 HEAP32[$108 + 4 >> 2] = $107;
 HEAP32[$0 + 4260 >> 2] = HEAP32[$$pre$phi88Z2D >> 2];
 HEAP32[$0 + 4256 >> 2] = $100;
 return;
}

function _silk_NSQ_wrapper_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$072 = 0, $$07395$us = 0, $$099$us = 0, $$191 = 0, $$287 = 0, $$381$us = 0, $$381$us$1 = 0, $$477 = 0, $$576 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $34 = 0, $56 = 0, $57 = 0, $6 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $6 = sp + 368 | 0;
 $7 = sp + 352 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 240 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 16 | 0;
 $13 = sp;
 $15 = HEAP32[$0 + 4580 >> 2] | 0;
 $16 = ($15 | 0) > 0;
 if ($16) {
  $18 = HEAP32[$0 + 4636 >> 2] | 0;
  if (($18 | 0) > 0) {
   $$099$us = 0;
   do {
    $20 = $$099$us * 24 | 0;
    $$07395$us = 0;
    do {
     $21 = $$07395$us + $20 | 0;
     HEAP16[$10 + ($21 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 244 + ($21 << 2) >> 2] * 8192.0) | 0;
     $$07395$us = $$07395$us + 1 | 0;
    } while (($$07395$us | 0) != ($18 | 0));
    $$099$us = $$099$us + 1 | 0;
   } while (($$099$us | 0) != ($15 | 0));
  }
  $$191 = 0;
  do {
   $34 = (_silk_float2int(+HEAPF32[$1 + 644 + ($$191 << 2) >> 2] * 16384.0) | 0) << 16;
   HEAP32[$11 + ($$191 << 2) >> 2] = (_silk_float2int(+HEAPF32[$1 + 628 + ($$191 << 2) >> 2] * 16384.0) | 0) & 65535 | $34;
   HEAP32[$12 + ($$191 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + 660 + ($$191 << 2) >> 2] * 16384.0) | 0;
   HEAP32[$13 + ($$191 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + 676 + ($$191 << 2) >> 2] * 16384.0) | 0;
   $$191 = $$191 + 1 | 0;
  } while (($$191 | 0) != ($15 | 0));
 }
 $56 = _silk_float2int(+HEAPF32[$1 + 692 >> 2] * 1024.0) | 0;
 $57 = $15 * 5 | 0;
 if ($16) {
  $$287 = 0;
  do {
   HEAP16[$9 + ($$287 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 144 + ($$287 << 2) >> 2] * 16384.0) | 0;
   $$287 = $$287 + 1 | 0;
  } while (($$287 | 0) < ($57 | 0));
 }
 $67 = HEAP32[$0 + 4640 >> 2] | 0;
 if (($67 | 0) > 0) {
  $$381$us = 0;
  do {
   HEAP16[$8 + ($$381$us << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 16 + ($$381$us << 2) >> 2] * 4096.0) | 0;
   $$381$us = $$381$us + 1 | 0;
  } while (($$381$us | 0) != ($67 | 0));
  $$381$us$1 = 0;
  do {
   HEAP16[$8 + 32 + ($$381$us$1 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 80 + ($$381$us$1 << 2) >> 2] * 4096.0) | 0;
   $$381$us$1 = $$381$us$1 + 1 | 0;
  } while (($$381$us$1 | 0) != ($67 | 0));
 }
 if ($16) {
  $$477 = 0;
  do {
   HEAP32[$7 + ($$477 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + ($$477 << 2) >> 2] * 65536.0) | 0;
   $$477 = $$477 + 1 | 0;
  } while (($$477 | 0) != ($15 | 0));
 }
 if ((HEAP8[$2 + 29 >> 0] | 0) == 2) $$072 = HEAP16[39500 + (HEAP8[$2 + 33 >> 0] << 1) >> 1] | 0; else $$072 = 0;
 $92 = HEAP32[$0 + 4584 >> 2] | 0;
 if (($92 | 0) > 0) {
  $$576 = 0;
  do {
   HEAP16[$6 + ($$576 << 1) >> 1] = _silk_float2int(+HEAPF32[$5 + ($$576 << 2) >> 2]) | 0;
   $$576 = $$576 + 1 | 0;
  } while (($$576 | 0) != ($92 | 0));
 }
 if ((HEAP32[$0 + 4628 >> 2] | 0) <= 1) if ((HEAP32[$0 + 4672 >> 2] | 0) <= 0) {
  _silk_NSQ_c($0, $3, $2, $6, $4, $8, $9, $10, $13, $12, $11, $7, $1 + 228 | 0, $56, $$072);
  STACKTOP = sp;
  return;
 }
 _silk_NSQ_del_dec_c($0, $3, $2, $6, $4, $8, $9, $10, $13, $12, $11, $7, $1 + 228 | 0, $56, $$072);
 STACKTOP = sp;
 return;
}

function _warped_true2monic_coefs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$023$us = 0.0, $$06928 = 0, $$0702$us = 0.0, $$07222$us = 0, $$07321$us = 0, $$1741$us = 0, $$23$us = 0, $$35$us = 0, $$49$us = 0, $$513$us = 0, $$phi$trans$insert37 = 0, $$phi$trans$insert40 = 0, $$phi$trans$insert43 = 0, $13 = 0.0, $14 = 0.0, $17 = 0.0, $20 = 0, $3 = 0, $35 = 0, $4 = 0, $40 = 0.0, $42 = 0, $46 = 0, $49 = 0.0, $57 = 0.0, $6 = 0.0, $61 = 0.0, $62 = 0, $65 = 0.0, $8 = 0, $exitcond3646 = 0, label = 0, $$06928$looptemp = 0, $57$looptemp = 0.0, $$513$us$looptemp = 0;
 $3 = $2 + -1 | 0;
 $4 = ($2 | 0) > 1;
 if ($4) {
  $$06928 = $3;
  $6 = +HEAPF32[$0 + ($3 << 2) >> 2];
  do {
   $$06928$looptemp = $$06928;
   $$06928 = $$06928 + -1 | 0;
   $8 = $0 + ($$06928 << 2) | 0;
   $6 = +HEAPF32[$8 >> 2] - $6 * $1;
   HEAPF32[$8 >> 2] = $6;
  } while (($$06928$looptemp | 0) > 1);
 }
 $13 = 1.0 - $1 * $1;
 $14 = +HEAPF32[$0 >> 2];
 $17 = $13 / ($14 * $1 + 1.0);
 if (($2 | 0) <= 0) return;
 HEAPF32[$0 >> 2] = $17 * $14;
 $exitcond3646 = ($2 | 0) == 1;
 if (!$exitcond3646) {
  $20 = 1;
  do {
   $$phi$trans$insert37 = $0 + ($20 << 2) | 0;
   HEAPF32[$$phi$trans$insert37 >> 2] = $17 * +HEAPF32[$$phi$trans$insert37 >> 2];
   $20 = $20 + 1 | 0;
  } while (($20 | 0) != ($2 | 0));
 }
 $$phi$trans$insert40 = $0 + ($3 << 2) | 0;
 $$023$us = $17;
 $$07222$us = 0;
 $$07321$us = 0;
 while (1) {
  $$0702$us = -1.0;
  $$1741$us = $$07321$us;
  $$23$us = 0;
  do {
   $61 = +Math_abs(+(+HEAPF32[$0 + ($$23$us << 2) >> 2]));
   $62 = $61 > $$0702$us;
   $$1741$us = $62 ? $$23$us : $$1741$us;
   $$0702$us = $62 ? $61 : $$0702$us;
   $$23$us = $$23$us + 1 | 0;
  } while (($$23$us | 0) != ($2 | 0));
  if ($$0702$us <= 3.999000072479248) {
   label = 24;
   break;
  }
  if ($4) {
   $$35$us = 1;
   $57 = +HEAPF32[$0 >> 2];
   do {
    $57$looptemp = $57;
    $57 = +HEAPF32[$0 + ($$35$us << 2) >> 2];
    HEAPF32[$0 + ($$35$us + -1 << 2) >> 2] = $57$looptemp + $57 * $1;
    $$35$us = $$35$us + 1 | 0;
   } while (($$35$us | 0) != ($2 | 0));
  }
  $49 = 1.0 / $$023$us;
  $$49$us = 0;
  do {
   $46 = $0 + ($$49$us << 2) | 0;
   HEAPF32[$46 >> 2] = $49 * +HEAPF32[$46 >> 2];
   $$49$us = $$49$us + 1 | 0;
  } while (($$49$us | 0) != ($2 | 0));
  _silk_bwexpander_FLP($0, $2, .9900000095367432 - (+($$07222$us | 0) * .10000000149011612 + .800000011920929) * ($$0702$us + -3.999000072479248) / ($$0702$us * +($$1741$us + 1 | 0)));
  if ($4) {
   $$513$us = $3;
   $40 = +HEAPF32[$$phi$trans$insert40 >> 2];
   do {
    $$513$us$looptemp = $$513$us;
    $$513$us = $$513$us + -1 | 0;
    $42 = $0 + ($$513$us << 2) | 0;
    $40 = +HEAPF32[$42 >> 2] - $40 * $1;
    HEAPF32[$42 >> 2] = $40;
   } while (($$513$us$looptemp | 0) > 1);
  }
  $65 = +HEAPF32[$0 >> 2];
  $$023$us = $13 / ($65 * $1 + 1.0);
  HEAPF32[$0 >> 2] = $$023$us * $65;
  if (!$exitcond3646) {
   $35 = 1;
   do {
    $$phi$trans$insert43 = $0 + ($35 << 2) | 0;
    HEAPF32[$$phi$trans$insert43 >> 2] = $$023$us * +HEAPF32[$$phi$trans$insert43 >> 2];
    $35 = $35 + 1 | 0;
   } while (($35 | 0) != ($2 | 0));
  }
  $$07222$us = $$07222$us + 1 | 0;
  if ($$07222$us >>> 0 >= 10) {
   label = 24;
   break;
  } else $$07321$us = $$1741$us;
 }
 if ((label | 0) == 24) return;
}

function _silk_LP_interpolate_filter_taps($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $101 = 0, $111 = 0, $114 = 0, $123 = 0, $126 = 0, $13 = 0, $135 = 0, $137 = 0, $142 = 0, $143 = 0, $147 = 0, $22 = 0, $25 = 0, $35 = 0, $38 = 0, $48 = 0, $51 = 0, $60 = 0, $63 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $85 = 0, $88 = 0, $98 = 0;
 if (($2 | 0) >= 4) {
  HEAP32[$0 >> 2] = HEAP32[6236];
  HEAP32[$0 + 4 >> 2] = HEAP32[6237];
  HEAP32[$0 + 8 >> 2] = HEAP32[6238];
  $147 = $1;
  HEAP32[$147 >> 2] = 35497197;
  HEAP32[$147 + 4 >> 2] = 57401098;
  return;
 }
 if (($3 | 0) <= 0) {
  $135 = 24896 + ($2 * 12 | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$135 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$135 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$135 + 8 >> 2];
  $137 = 24960 + ($2 << 3) | 0;
  $142 = HEAP32[$137 + 4 >> 2] | 0;
  $143 = $1;
  HEAP32[$143 >> 2] = HEAP32[$137 >> 2];
  HEAP32[$143 + 4 >> 2] = $142;
  return;
 }
 $7 = $2 + 1 | 0;
 $8 = $3 << 16 >> 16;
 if (($3 | 0) < 32768) {
  $10 = HEAP32[24896 + ($2 * 12 | 0) >> 2] | 0;
  $13 = (HEAP32[24896 + ($7 * 12 | 0) >> 2] | 0) - $10 | 0;
  HEAP32[$0 >> 2] = (Math_imul($13 >> 16, $8) | 0) + $10 + ((Math_imul($13 & 65535, $8) | 0) >> 16);
  $22 = HEAP32[24896 + ($2 * 12 | 0) + 4 >> 2] | 0;
  $25 = (HEAP32[24896 + ($7 * 12 | 0) + 4 >> 2] | 0) - $22 | 0;
  HEAP32[$0 + 4 >> 2] = (Math_imul($25 >> 16, $8) | 0) + $22 + ((Math_imul($25 & 65535, $8) | 0) >> 16);
  $35 = HEAP32[24896 + ($2 * 12 | 0) + 8 >> 2] | 0;
  $38 = (HEAP32[24896 + ($7 * 12 | 0) + 8 >> 2] | 0) - $35 | 0;
  HEAP32[$0 + 8 >> 2] = (Math_imul($38 >> 16, $8) | 0) + $35 + ((Math_imul($38 & 65535, $8) | 0) >> 16);
  $48 = HEAP32[24960 + ($2 << 3) >> 2] | 0;
  $51 = (HEAP32[24960 + ($7 << 3) >> 2] | 0) - $48 | 0;
  HEAP32[$1 >> 2] = (Math_imul($51 >> 16, $8) | 0) + $48 + ((Math_imul($51 & 65535, $8) | 0) >> 16);
  $60 = HEAP32[24960 + ($2 << 3) + 4 >> 2] | 0;
  $63 = (HEAP32[24960 + ($7 << 3) + 4 >> 2] | 0) - $60 | 0;
  HEAP32[$1 + 4 >> 2] = (Math_imul($63 >> 16, $8) | 0) + $60 + ((Math_imul($63 & 65535, $8) | 0) >> 16);
  return;
 } else {
  $73 = HEAP32[24896 + ($7 * 12 | 0) >> 2] | 0;
  $76 = $73 - (HEAP32[24896 + ($2 * 12 | 0) >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = (Math_imul($76 >> 16, $8) | 0) + $73 + ((Math_imul($76 & 65535, $8) | 0) >> 16);
  $85 = HEAP32[24896 + ($7 * 12 | 0) + 4 >> 2] | 0;
  $88 = $85 - (HEAP32[24896 + ($2 * 12 | 0) + 4 >> 2] | 0) | 0;
  HEAP32[$0 + 4 >> 2] = (Math_imul($88 >> 16, $8) | 0) + $85 + ((Math_imul($88 & 65535, $8) | 0) >> 16);
  $98 = HEAP32[24896 + ($7 * 12 | 0) + 8 >> 2] | 0;
  $101 = $98 - (HEAP32[24896 + ($2 * 12 | 0) + 8 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = (Math_imul($101 >> 16, $8) | 0) + $98 + ((Math_imul($101 & 65535, $8) | 0) >> 16);
  $111 = HEAP32[24960 + ($7 << 3) >> 2] | 0;
  $114 = $111 - (HEAP32[24960 + ($2 << 3) >> 2] | 0) | 0;
  HEAP32[$1 >> 2] = (Math_imul($114 >> 16, $8) | 0) + $111 + ((Math_imul($114 & 65535, $8) | 0) >> 16);
  $123 = HEAP32[24960 + ($7 << 3) + 4 >> 2] | 0;
  $126 = $123 - (HEAP32[24960 + ($2 << 3) + 4 >> 2] | 0) | 0;
  HEAP32[$1 + 4 >> 2] = (Math_imul($126 >> 16, $8) | 0) + $123 + ((Math_imul($126 & 65535, $8) | 0) >> 16);
  return;
 }
}

function _silk_find_pred_coefs_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0.0, $$06674 = 0, $$06773 = 0, $$06875 = 0, $$172 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $23 = 0, $26 = 0, $30 = 0, $32 = 0, $39 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $7 = 0, $74 = 0.0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $5 = sp + 1664 | 0;
 $6 = sp + 1584 | 0;
 $7 = sp + 1568 | 0;
 $8 = sp + 1536 | 0;
 $9 = sp;
 $10 = $0 + 4580 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = ($11 | 0) > 0;
 if ($12) {
  $$06875 = 0;
  do {
   HEAPF32[$7 + ($$06875 << 2) >> 2] = 1.0 / +HEAPF32[$1 + ($$06875 << 2) >> 2];
   $$06875 = $$06875 + 1 | 0;
  } while (($$06875 | 0) != ($11 | 0));
 }
 do if ((HEAP8[$0 + 4765 >> 0] | 0) == 2) {
  $23 = $0 + 4640 | 0;
  $26 = $1 + 228 | 0;
  if (((HEAP32[$0 + 4592 >> 2] | 0) - (HEAP32[$23 >> 2] | 0) | 0) < ((HEAP32[$26 >> 2] | 0) + 2 | 0)) _celt_fatal(46249, 46366, 62); else {
   $30 = $0 + 4588 | 0;
   _silk_find_LTP_FLP($5, $6, $2, $26, HEAP32[$30 >> 2] | 0, $11);
   $32 = $1 + 144 | 0;
   _silk_quant_LTP_gains_FLP($32, $0 + 4740 | 0, $0 + 4768 | 0, $0 + 4656 | 0, $1 + 708 | 0, $5, $6, HEAP32[$30 >> 2] | 0, HEAP32[$10 >> 2] | 0);
   _silk_LTP_scale_ctrl_FLP($0, $1, $4);
   $39 = HEAP32[$23 >> 2] | 0;
   _silk_LTP_analysis_filter_FLP($9, $3 + (0 - $39 << 2) | 0, $32, $26, $7, HEAP32[$30 >> 2] | 0, HEAP32[$10 >> 2] | 0, $39);
   break;
  }
 } else {
  $44 = $0 + 4640 | 0;
  if ($12) {
   $45 = HEAP32[$44 >> 2] | 0;
   $48 = $0 + 4588 | 0;
   $$06674 = $9;
   $$06773 = $3 + (0 - $45 << 2) | 0;
   $$172 = 0;
   $52 = HEAP32[$48 >> 2] | 0;
   $53 = $45;
   while (1) {
    _silk_scale_copy_vector_FLP($$06674, $$06773, +HEAPF32[$7 + ($$172 << 2) >> 2], $53 + $52 | 0);
    $54 = HEAP32[$48 >> 2] | 0;
    $55 = HEAP32[$44 >> 2] | 0;
    $$172 = $$172 + 1 | 0;
    $60 = HEAP32[$10 >> 2] | 0;
    if (($$172 | 0) >= ($60 | 0)) {
     $$lcssa = $60;
     break;
    } else {
     $$06674 = $$06674 + ($55 + $54 << 2) | 0;
     $$06773 = $$06773 + ($54 << 2) | 0;
     $52 = $54;
     $53 = $55;
    }
   }
  } else $$lcssa = $11;
  _memset($1 + 144 | 0, 0, $$lcssa * 20 | 0) | 0;
  HEAPF32[$1 + 708 >> 2] = 0.0;
  HEAP32[$0 + 4656 >> 2] = 0;
 } while (0);
 if (!(HEAP32[$0 + 4664 >> 2] | 0)) {
  $74 = +_llvm_exp2_f64(+(+HEAPF32[$1 + 708 >> 2] / 3.0)) / 1.0e4;
  $$0 = $74 / (+HEAPF32[$1 + 700 >> 2] * .75 + .25);
 } else $$0 = .009999999776482582;
 _silk_find_LPC_FLP($0, $8, $9, $$0);
 $80 = $1 + 16 | 0;
 $81 = $0 + 4500 | 0;
 _silk_process_NLSFs_FLP($0, $80, $8, $81);
 _silk_residual_energy_FLP($1 + 712 | 0, $9, $80, $1, HEAP32[$0 + 4588 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$0 + 4640 >> 2] | 0);
 HEAP32[$81 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$81 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$81 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 HEAP32[$81 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
 HEAP32[$81 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
 HEAP32[$81 + 20 >> 2] = HEAP32[$8 + 20 >> 2];
 HEAP32[$81 + 24 >> 2] = HEAP32[$8 + 24 >> 2];
 HEAP32[$81 + 28 >> 2] = HEAP32[$8 + 28 >> 2];
 STACKTOP = sp;
 return;
}

function _check_control_input($0) {
 $0 = $0 | 0;
 var $27 = 0, $3 = 0, $30 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
 if (!$0) _celt_fatal(44501, 44538, 41);
 $3 = HEAP32[$0 + 8 >> 2] | 0;
 L4 : do if (($3 | 0) < 24e3) {
  if (($3 | 0) < 12e3) switch ($3 | 0) {
  case 8e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  }
  if (($3 | 0) < 16e3) switch ($3 | 0) {
  case 12e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  } else switch ($3 | 0) {
  case 16e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  }
 } else if (($3 | 0) < 44100) if (($3 | 0) < 32e3) switch ($3 | 0) {
 case 24e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else switch ($3 | 0) {
 case 32e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else if (($3 | 0) < 48e3) switch ($3 | 0) {
 case 44100:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else switch ($3 | 0) {
 case 48e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } while (0);
 L22 : do if ((label | 0) == 4) {
  $5 = HEAP32[$0 + 20 >> 2] | 0;
  L24 : do if (($5 | 0) < 12e3) switch ($5 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($5 | 0) < 16e3) switch ($5 | 0) {
  case 12e3:
   {
    break L24;
    break;
   }
  default:
   break L22;
  } else switch ($5 | 0) {
  case 16e3:
   {
    break L24;
    break;
   }
  default:
   break L22;
  } while (0);
  $7 = HEAP32[$0 + 12 >> 2] | 0;
  L31 : do if (($7 | 0) < 12e3) switch ($7 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($7 | 0) < 16e3) switch ($7 | 0) {
  case 12e3:
   {
    break L31;
    break;
   }
  default:
   break L22;
  } else switch ($7 | 0) {
  case 16e3:
   {
    break L31;
    break;
   }
  default:
   break L22;
  } while (0);
  $9 = HEAP32[$0 + 16 >> 2] | 0;
  L38 : do if (($9 | 0) < 12e3) switch ($9 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($9 | 0) < 16e3) switch ($9 | 0) {
  case 12e3:
   {
    break L38;
    break;
   }
  default:
   break L22;
  } else switch ($9 | 0) {
  case 16e3:
   {
    break L38;
    break;
   }
  default:
   break L22;
  } while (0);
  if (($9 | 0) <= ($5 | 0)) if (!(($7 | 0) < ($5 | 0) | ($9 | 0) > ($7 | 0))) {
   switch (HEAP32[$0 + 24 >> 2] | 0) {
   case 60:
   case 40:
   case 20:
   case 10:
    break;
   default:
    _celt_fatal(47580, 44538, 69);
   }
   if ((HEAP32[$0 + 32 >> 2] | 0) >>> 0 > 100) _celt_fatal(47580, 44538, 73);
   if ((HEAP32[$0 + 48 >> 2] | 0) >>> 0 > 1) _celt_fatal(47580, 44538, 77);
   if ((HEAP32[$0 + 52 >> 2] | 0) >>> 0 > 1) _celt_fatal(47580, 44538, 81);
   if ((HEAP32[$0 + 40 >> 2] | 0) >>> 0 > 1) _celt_fatal(47580, 44538, 85);
   $27 = HEAP32[$0 >> 2] | 0;
   if (($27 + -1 | 0) >>> 0 > 1) _celt_fatal(47580, 44538, 89);
   $30 = HEAP32[$0 + 4 >> 2] | 0;
   if (($30 + -1 | 0) >>> 0 > 1) _celt_fatal(47580, 44538, 93);
   if (($30 | 0) > ($27 | 0)) _celt_fatal(47580, 44538, 97);
   if ((HEAP32[$0 + 36 >> 2] | 0) >>> 0 > 10) _celt_fatal(47580, 44538, 101); else return;
  }
 } while (0);
 _celt_fatal(47580, 44538, 62);
}

function _compute_gru($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0100127$us = 0.0, $$0102156$us = 0.0, $$0104167$us = 0, $$0106155$us = 0, $$0112$us = 0.0, $$1101133$us = 0.0, $$1103162$us = 0.0, $$1105138$us = 0, $$1107161$us = 0, $$1117$us = 0.0, $$2108126$us = 0, $$2122$us = 0, $$3109132$us = 0, $$4111$us = 0, $$5116$us = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $60 = 0, $65 = 0.0, $68 = 0.0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 128 | 0;
 $4 = sp;
 $$0104167$us = 0;
 do {
  $$0102156$us = +(HEAP8[30640 + $$0104167$us >> 0] | 0);
  $$0106155$us = 0;
  do {
   $$0102156$us = $$0102156$us + +HEAPF32[$1 + ($$0106155$us << 2) >> 2] * +(HEAP8[30720 + (($$0106155$us * 72 | 0) + $$0104167$us) >> 0] | 0);
   $$0106155$us = $$0106155$us + 1 | 0;
  } while (($$0106155$us | 0) != 32);
  $$1103162$us = $$0102156$us;
  $$1107161$us = 0;
  do {
   $$1103162$us = $$1103162$us + +HEAPF32[$0 + ($$1107161$us << 2) >> 2] * +(HEAP8[33024 + (($$1107161$us * 72 | 0) + $$0104167$us) >> 0] | 0);
   $$1107161$us = $$1107161$us + 1 | 0;
  } while (($$1107161$us | 0) != 24);
  HEAPF32[$2 + ($$0104167$us << 2) >> 2] = +_sigmoid_approx($$1103162$us * .0078125);
  $$0104167$us = $$0104167$us + 1 | 0;
 } while (($$0104167$us | 0) != 24);
 $$1105138$us = 0;
 do {
  $32 = $$1105138$us + 24 | 0;
  $$0100127$us = +(HEAP8[30640 + $32 >> 0] | 0);
  $$2108126$us = 0;
  do {
   $$0100127$us = $$0100127$us + +HEAPF32[$1 + ($$2108126$us << 2) >> 2] * +(HEAP8[30720 + ($32 + ($$2108126$us * 72 | 0)) >> 0] | 0);
   $$2108126$us = $$2108126$us + 1 | 0;
  } while (($$2108126$us | 0) != 32);
  $$1101133$us = $$0100127$us;
  $$3109132$us = 0;
  do {
   $$1101133$us = $$1101133$us + +HEAPF32[$0 + ($$3109132$us << 2) >> 2] * +(HEAP8[33024 + ($32 + ($$3109132$us * 72 | 0)) >> 0] | 0);
   $$3109132$us = $$3109132$us + 1 | 0;
  } while (($$3109132$us | 0) != 24);
  HEAPF32[$3 + ($$1105138$us << 2) >> 2] = +_sigmoid_approx($$1101133$us * .0078125);
  $$1105138$us = $$1105138$us + 1 | 0;
 } while (($$1105138$us | 0) != 24);
 $$2122$us = 0;
 do {
  $60 = $$2122$us + 48 | 0;
  $$0112$us = +(HEAP8[30640 + $60 >> 0] | 0);
  $$4111$us = 0;
  do {
   $$0112$us = $$0112$us + +HEAPF32[$1 + ($$4111$us << 2) >> 2] * +(HEAP8[30720 + ($60 + ($$4111$us * 72 | 0)) >> 0] | 0);
   $$4111$us = $$4111$us + 1 | 0;
  } while (($$4111$us | 0) != 32);
  $$1117$us = $$0112$us;
  $$5116$us = 0;
  do {
   $$1117$us = $$1117$us + +HEAPF32[$0 + ($$5116$us << 2) >> 2] * +(HEAP8[33024 + ($60 + ($$5116$us * 72 | 0)) >> 0] | 0) * +HEAPF32[$3 + ($$5116$us << 2) >> 2];
   $$5116$us = $$5116$us + 1 | 0;
  } while (($$5116$us | 0) != 24);
  $65 = +HEAPF32[$2 + ($$2122$us << 2) >> 2];
  $68 = $65 * +HEAPF32[$0 + ($$2122$us << 2) >> 2];
  HEAPF32[$4 + ($$2122$us << 2) >> 2] = $68 + (1.0 - $65) * +_tansig_approx($$1117$us * .0078125);
  $$2122$us = $$2122$us + 1 | 0;
 } while (($$2122$us | 0) != 24);
 dest = $0;
 src = $4;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _pitch_downsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$054 = 0, $$153 = 0, $100 = 0, $101 = 0.0, $106 = 0.0, $107 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $112 = 0.0, $115 = 0.0, $22 = 0, $4 = 0, $41 = 0.0, $44 = 0, $46 = 0.0, $5 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $72 = 0, $8 = 0, $82 = 0.0, $85 = 0, $86 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $95 = 0, $96 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 $6 = sp;
 $7 = $2 >> 1;
 $8 = ($2 | 0) > 3;
 $9 = HEAP32[$0 >> 2] | 0;
 $11 = +HEAPF32[$9 + 4 >> 2];
 if ($8) {
  HEAPF32[$1 + 4 >> 2] = (+HEAPF32[$9 + 8 >> 2] + ($11 + +HEAPF32[$9 + 12 >> 2]) * .5) * .5;
  if (($2 | 0) > 5) {
   $$054 = 2;
   do {
    $22 = $$054 << 1;
    HEAPF32[$1 + ($$054 << 2) >> 2] = (+HEAPF32[$9 + ($22 << 2) >> 2] + (+HEAPF32[$9 + ($22 + -1 << 2) >> 2] + +HEAPF32[$9 + (($22 | 1) << 2) >> 2]) * .5) * .5;
    $$054 = $$054 + 1 | 0;
   } while (($$054 | 0) < ($7 | 0));
  }
 }
 $41 = ($11 * .5 + +HEAPF32[$9 >> 2]) * .5;
 HEAPF32[$1 >> 2] = $41;
 if (($3 | 0) == 2) {
  $44 = HEAP32[$0 + 4 >> 2] | 0;
  $46 = +HEAPF32[$44 + 4 >> 2];
  if ($8) {
   $55 = $1 + 4 | 0;
   HEAPF32[$55 >> 2] = +HEAPF32[$55 >> 2] + (+HEAPF32[$44 + 8 >> 2] + ($46 + +HEAPF32[$44 + 12 >> 2]) * .5) * .5;
   if (($2 | 0) > 5) {
    $$153 = 2;
    do {
     $59 = $$153 << 1;
     $72 = $1 + ($$153 << 2) | 0;
     HEAPF32[$72 >> 2] = +HEAPF32[$72 >> 2] + (+HEAPF32[$44 + ($59 << 2) >> 2] + (+HEAPF32[$44 + ($59 + -1 << 2) >> 2] + +HEAPF32[$44 + (($59 | 1) << 2) >> 2]) * .5) * .5;
     $$153 = $$153 + 1 | 0;
    } while (($$153 | 0) < ($7 | 0));
    $82 = +HEAPF32[$1 >> 2];
   } else $82 = $41;
  } else $82 = $41;
  HEAPF32[$1 >> 2] = $82 + ($46 * .5 + +HEAPF32[$44 >> 2]) * .5;
 }
 __celt_autocorr($1, $4, 0, 0, 4, $7);
 HEAPF32[$4 >> 2] = +HEAPF32[$4 >> 2] * 1.000100016593933;
 $85 = $4 + 4 | 0;
 $86 = +HEAPF32[$85 >> 2];
 HEAPF32[$85 >> 2] = $86 - $86 * .00800000037997961 * .00800000037997961;
 $90 = $4 + 8 | 0;
 $91 = +HEAPF32[$90 >> 2];
 HEAPF32[$90 >> 2] = $91 - $91 * .01600000075995922 * .01600000075995922;
 $95 = $4 + 12 | 0;
 $96 = +HEAPF32[$95 >> 2];
 HEAPF32[$95 >> 2] = $96 - $96 * .024000000208616257 * .024000000208616257;
 $100 = $4 + 16 | 0;
 $101 = +HEAPF32[$100 >> 2];
 HEAPF32[$100 >> 2] = $101 - $101 * .03200000151991844 * .03200000151991844;
 __celt_lpc($5, $4, 4);
 $106 = +HEAPF32[$5 >> 2] * .8999999761581421;
 HEAPF32[$5 >> 2] = $106;
 $107 = $5 + 4 | 0;
 $109 = +HEAPF32[$107 >> 2] * .809999942779541;
 HEAPF32[$107 >> 2] = $109;
 $110 = $5 + 8 | 0;
 $112 = +HEAPF32[$110 >> 2] * .7289999127388;
 HEAPF32[$110 >> 2] = $112;
 $115 = +HEAPF32[$5 + 12 >> 2] * .6560999155044556;
 HEAPF32[$6 >> 2] = $106 + .800000011920929;
 HEAPF32[$6 + 4 >> 2] = $106 * .800000011920929 + $109;
 HEAPF32[$6 + 8 >> 2] = $109 * .800000011920929 + $112;
 HEAPF32[$6 + 12 >> 2] = $112 * .800000011920929 + $115;
 HEAPF32[$6 + 16 >> 2] = $115 * .800000011920929;
 _celt_fir5($1, $6, $7);
 STACKTOP = sp;
 return;
}

function _silk_process_gains_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$066 = 0, $$161 = 0, $$257 = 0, $$356 = 0, $$lcssa73 = 0, $$phi$trans$insert = 0, $$pre$phiZ2D = 0, $13 = 0.0, $14 = 0, $15 = 0, $17 = 0, $21 = 0, $3 = 0, $34 = 0.0, $35 = 0, $37 = 0, $38 = 0.0, $4 = 0, $44 = 0.0, $48 = 0, $59 = 0, $76 = 0, $86 = 0, $90 = 0, $exp2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 4765 | 0;
 if ((HEAP8[$4 >> 0] | 0) == 2) {
  $13 = 1.0 - +_silk_sigmoid_571((+HEAPF32[$1 + 708 >> 2] + -12.0) * .25) * .5;
  $14 = $0 + 4580 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  if (($15 | 0) > 0) {
   $$066 = 0;
   do {
    $17 = $1 + ($$066 << 2) | 0;
    HEAPF32[$17 >> 2] = $13 * +HEAPF32[$17 >> 2];
    $$066 = $$066 + 1 | 0;
    $21 = HEAP32[$14 >> 2] | 0;
   } while (($$066 | 0) < ($21 | 0));
   $$pre$phiZ2D = $14;
   $35 = $21;
  } else {
   $$pre$phiZ2D = $14;
   $35 = $15;
  }
 } else {
  $$phi$trans$insert = $0 + 4580 | 0;
  $$pre$phiZ2D = $$phi$trans$insert;
  $35 = HEAP32[$$phi$trans$insert >> 2] | 0;
 }
 $exp2 = +_llvm_exp2_f64(+((21.0 - +(HEAP32[$0 + 4716 >> 2] | 0) * .0078125) * .33000001311302185));
 $34 = $exp2 / +(HEAP32[$0 + 4588 >> 2] | 0);
 if (($35 | 0) > 0) {
  $$161 = 0;
  do {
   $37 = $1 + ($$161 << 2) | 0;
   $38 = +HEAPF32[$37 >> 2];
   $44 = +Math_sqrt(+($38 * $38 + +HEAPF32[$1 + 712 + ($$161 << 2) >> 2] * $34));
   HEAPF32[$37 >> 2] = $44 < 32767.0 ? $44 : 32767.0;
   $$161 = $$161 + 1 | 0;
   $48 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  } while (($$161 | 0) < ($48 | 0));
  if (($48 | 0) > 0) {
   $$257 = 0;
   do {
    HEAP32[$3 + ($$257 << 2) >> 2] = ~~(+HEAPF32[$1 + ($$257 << 2) >> 2] * 65536.0);
    $$257 = $$257 + 1 | 0;
   } while (($$257 | 0) != ($48 | 0));
   $$lcssa73 = $48;
  } else $$lcssa73 = $48;
 } else $$lcssa73 = $35;
 _memcpy($1 + 728 | 0, $3 | 0, $$lcssa73 << 2 | 0) | 0;
 $59 = $0 + 7168 | 0;
 HEAP8[$1 + 744 >> 0] = HEAP8[$59 >> 0] | 0;
 _silk_gains_quant($0 + 4736 | 0, $3, $59, ($2 | 0) == 2 & 1, HEAP32[$$pre$phiZ2D >> 2] | 0);
 if ((HEAP32[$$pre$phiZ2D >> 2] | 0) > 0) {
  $$356 = 0;
  do {
   HEAPF32[$1 + ($$356 << 2) >> 2] = +(HEAP32[$3 + ($$356 << 2) >> 2] | 0) * .0000152587890625;
   $$356 = $$356 + 1 | 0;
  } while (($$356 | 0) < (HEAP32[$$pre$phiZ2D >> 2] | 0));
 }
 $76 = HEAP8[$4 >> 0] | 0;
 do if ($76 << 24 >> 24 == 2) {
  $86 = $0 + 4766 | 0;
  if (+HEAPF32[$1 + 708 >> 2] + +(HEAP32[$0 + 4712 >> 2] | 0) * .000030517578125 > 1.0) {
   HEAP8[$86 >> 0] = 0;
   $90 = 0;
   break;
  } else {
   HEAP8[$86 >> 0] = 1;
   $90 = 1;
   break;
  }
 } else $90 = HEAP8[$0 + 4766 >> 0] | 0; while (0);
 HEAPF32[$1 + 692 >> 2] = +(HEAP16[39492 + ($76 << 24 >> 24 >> 1 << 2) + ($90 << 24 >> 24 << 1) >> 1] | 0) * .0009765625 * .800000011920929 + (1.2000000476837158 - +(HEAP32[$0 + 4628 >> 2] | 0) * .05000000074505806 + +(HEAP32[$0 + 4532 >> 2] | 0) * -.20000000298023224 * .00390625 - +HEAPF32[$1 + 696 >> 2] * .10000000149011612 - +HEAPF32[$1 + 700 >> 2] * .20000000298023224);
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$05054 = 0, $$05054$us = 0, $$05152$us = 0, $$053$us = 0, $10 = 0, $100 = 0, $107 = 0, $11 = 0, $114 = 0, $12 = 0, $121 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $151 = 0, $17 = 0, $22 = 0, $29 = 0, $36 = 0, $43 = 0, $50 = 0, $66 = 0, $83 = 0, $86 = 0, $95 = 0;
 if (($4 | 0) <= 5) _celt_fatal(45131, 45156, 67);
 if ($4 & 1 | 0) _celt_fatal(45183, 45156, 68);
 if (($4 | 0) > ($3 | 0)) _celt_fatal(45214, 45156, 69);
 if (($4 | 0) >= ($3 | 0)) {
  $151 = $4 << 1;
  _memset($0 | 0, 0, $151 | 0) | 0;
  return;
 }
 $10 = $2 + 2 | 0;
 $11 = $2 + 4 | 0;
 $12 = $2 + 6 | 0;
 $13 = $2 + 8 | 0;
 $14 = $2 + 10 | 0;
 if (($4 | 0) <= 6) {
  $$05054 = 6;
  do {
   $95 = $1 + ($$05054 + -1 << 1) | 0;
   $100 = Math_imul(HEAP16[$2 >> 1] | 0, HEAP16[$95 >> 1] | 0) | 0;
   $107 = (Math_imul(HEAP16[$10 >> 1] | 0, HEAP16[$95 + -2 >> 1] | 0) | 0) + $100 | 0;
   $114 = $107 + (Math_imul(HEAP16[$11 >> 1] | 0, HEAP16[$95 + -4 >> 1] | 0) | 0) | 0;
   $121 = $114 + (Math_imul(HEAP16[$12 >> 1] | 0, HEAP16[$95 + -6 >> 1] | 0) | 0) | 0;
   $128 = $121 + (Math_imul(HEAP16[$13 >> 1] | 0, HEAP16[$95 + -8 >> 1] | 0) | 0) | 0;
   $135 = $128 + (Math_imul(HEAP16[$14 >> 1] | 0, HEAP16[$95 + -10 >> 1] | 0) | 0) | 0;
   $140 = (HEAP16[$1 + ($$05054 << 1) >> 1] << 12) - $135 | 0;
   $143 = ($140 >> 11) + 1 >> 1;
   HEAP16[$0 + ($$05054 << 1) >> 1] = ($140 | 0) > 134215679 ? 32767 : (($143 | 0) > -32768 ? $143 : -32768) & 65535;
   $$05054 = $$05054 + 1 | 0;
  } while (($$05054 | 0) != ($3 | 0));
  $151 = $4 << 1;
  _memset($0 | 0, 0, $151 | 0) | 0;
  return;
 }
 $$05054$us = $4;
 do {
  $17 = $1 + ($$05054$us + -1 << 1) | 0;
  $22 = Math_imul(HEAP16[$2 >> 1] | 0, HEAP16[$17 >> 1] | 0) | 0;
  $29 = (Math_imul(HEAP16[$10 >> 1] | 0, HEAP16[$17 + -2 >> 1] | 0) | 0) + $22 | 0;
  $36 = $29 + (Math_imul(HEAP16[$11 >> 1] | 0, HEAP16[$17 + -4 >> 1] | 0) | 0) | 0;
  $43 = $36 + (Math_imul(HEAP16[$12 >> 1] | 0, HEAP16[$17 + -6 >> 1] | 0) | 0) | 0;
  $50 = $43 + (Math_imul(HEAP16[$13 >> 1] | 0, HEAP16[$17 + -8 >> 1] | 0) | 0) | 0;
  $$05152$us = $50 + (Math_imul(HEAP16[$14 >> 1] | 0, HEAP16[$17 + -10 >> 1] | 0) | 0) | 0;
  $$053$us = 6;
  do {
   $66 = (Math_imul(HEAP16[$2 + ($$053$us << 1) >> 1] | 0, HEAP16[$17 + (0 - $$053$us << 1) >> 1] | 0) | 0) + $$05152$us | 0;
   $$05152$us = $66 + (Math_imul(HEAP16[$2 + (($$053$us | 1) << 1) >> 1] | 0, HEAP16[$17 + (~$$053$us << 1) >> 1] | 0) | 0) | 0;
   $$053$us = $$053$us + 2 | 0;
  } while (($$053$us | 0) < ($4 | 0));
  $83 = (HEAP16[$1 + ($$05054$us << 1) >> 1] << 12) - $$05152$us | 0;
  $86 = ($83 >> 11) + 1 >> 1;
  HEAP16[$0 + ($$05054$us << 1) >> 1] = ($83 | 0) > 134215679 ? 32767 : (($86 | 0) > -32768 ? $86 : -32768) & 65535;
  $$05054$us = $$05054$us + 1 | 0;
 } while (($$05054$us | 0) != ($3 | 0));
 $151 = $4 << 1;
 _memset($0 | 0, 0, $151 | 0) | 0;
 return;
}

function _compute_vbr($$0$2$val, $$0$5$val, $0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $$0$2$val = $$0$2$val | 0;
 $$0$5$val = $$0$5$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 $12 = +$12;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = +$15;
 $16 = +$16;
 var $$0 = 0, $$0115 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$pre$phi3Z2D = 0.0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $117 = 0, $119 = 0, $127 = 0, $128 = 0, $129 = 0, $18 = 0, $22 = 0, $23 = 0, $32 = 0, $34 = 0.0, $44 = 0, $49 = 0, $57 = 0.0, $61 = 0.0, $67 = 0, $72 = 0, $73 = 0, $76 = 0.0, $80 = 0.0, $89 = 0, $92 = 0, $93 = 0, $or$cond3 = 0, $spec$select1 = 0;
 $18 = ($4 | 0) == 0 ? $$0$2$val : $4;
 $22 = HEAP16[$$0$5$val + ($18 << 1) >> 1] << $2;
 $23 = ($5 | 0) == 2;
 if ($23) $$0115 = (HEAP16[$$0$5$val + ((($18 | 0) > ($6 | 0) ? $6 : $18) << 1) >> 1] << $2) + $22 | 0; else $$0115 = $22;
 $32 = (HEAP32[$0 >> 2] | 0) == 0;
 if ($32) $$0 = $1; else {
  $34 = +HEAPF32[$0 + 16 >> 2];
  if ($34 < .4) $$0 = $1 - ~~((.4000000059604645 - $34) * +($$0115 << 3 | 0)) | 0; else $$0 = $1;
 }
 if ($23) {
  $44 = ($18 | 0) > ($6 | 0) ? $6 : $18;
  $49 = (HEAP16[$$0$5$val + ($44 << 1) >> 1] << $2) - $44 | 0;
  $57 = +($49 | 0) * .800000011920929 / +($$0115 | 0) * +($$0 | 0);
  $61 = (($8 < 1.0 ? $8 : 1.0) + -.10000000149011612) * +($49 << 3 | 0);
  $$1 = $$0 - ~~($57 < $61 ? $57 : $61) | 0;
 } else $$1 = $$0;
 $67 = $$1 + ($9 - (19 << $2)) | 0;
 $72 = $67 + ~~(($10 + -.04399999976158142) * +($67 | 0)) | 0;
 $73 = ($13 | 0) != 0;
 if ($73 | $32) {
  $$2 = $72;
  $$pre$phi3Z2D = +($$0115 << 3 | 0);
 } else {
  $76 = +HEAPF32[$0 + 4 >> 2] + -.15000000596046448;
  $80 = +($$0115 << 3 | 0);
  $$2 = $72 + (($11 | 0) == 0 ? 0 : ~~($80 * .800000011920929)) + ~~($80 * 1.2000000476837158 * ($76 < 0.0 ? -.11999999731779099 : $76 + -.11999999731779099)) | 0;
  $$pre$phi3Z2D = $80;
 }
 $89 = ($14 | 0) == 0;
 $or$cond3 = $73 | $89;
 $92 = $$2 + ~~($$pre$phi3Z2D * $15) | 0;
 if ($or$cond3) $$3 = $$2; else {
  $93 = ($$2 | 0) / 4 | 0;
  $$3 = ($93 | 0) > ($92 | 0) ? $93 : $92;
 }
 $104 = ~~(+(Math_imul($5 << 3, HEAP16[$$0$5$val + ($$0$2$val + -2 << 1) >> 1] << $2) | 0) * $12);
 $105 = $$3 >> 2;
 $107 = ($105 | 0) < ($104 | 0) ? $104 : $105;
 $109 = ($$3 | 0) < ($107 | 0) ? $$3 : $107;
 $spec$select1 = ($7 | 0) != 0 & $or$cond3 ? ~~(+($109 - $1 | 0) * .6700000166893005) + $1 | 0 : $109;
 if (!($10 < .20000000298023224 & $89)) {
  $$5 = $spec$select1;
  $127 = $1 << 1;
  $128 = ($127 | 0) < ($$5 | 0);
  $129 = $128 ? $127 : $$5;
  return $129 | 0;
 }
 $117 = 96e3 - $3 | 0;
 $119 = ($117 | 0) < 32e3 ? $117 : 32e3;
 $$5 = $spec$select1 + ~~((($119 | 0) < 0 ? 0.0 : +($119 | 0) * 3.099999958067201e-06) * $16 * +($spec$select1 | 0)) | 0;
 $127 = $1 << 1;
 $128 = ($127 | 0) < ($$5 | 0);
 $129 = $128 ? $127 : $$5;
 return $129 | 0;
}

function _speex_resampler_process_float($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$05059 = 0, $$05262 = 0, $$05469 = 0, $$063 = 0, $$15158 = 0, $$153 = 0, $$15561 = 0, $$2 = 0, $10 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$6 >> 2] = $4;
 $9 = HEAP32[$3 >> 2] | 0;
 $10 = HEAP32[$5 >> 2] | 0;
 $14 = HEAP32[$0 + 28 >> 2] | 0;
 $16 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul($14, $1) | 0) << 2) | 0;
 $19 = (HEAP32[$0 + 24 >> 2] | 0) + -1 | 0;
 $20 = $14 - $19 | 0;
 $22 = HEAP32[$0 + 88 >> 2] | 0;
 $23 = $0 + 68 | 0;
 if (!(HEAP32[(HEAP32[$23 >> 2] | 0) + ($1 << 2) >> 2] | 0)) $$05469 = $10; else {
  $29 = $10 - (_speex_resampler_magic($0, $1, $6, $10) | 0) | 0;
  if (!(HEAP32[(HEAP32[$23 >> 2] | 0) + ($1 << 2) >> 2] | 0)) $$05469 = $29; else {
   $$153 = $9;
   $$2 = $29;
   $64 = HEAP32[$3 >> 2] | 0;
   $65 = $64 - $$153 | 0;
   HEAP32[$3 >> 2] = $65;
   $66 = HEAP32[$5 >> 2] | 0;
   $67 = $66 - $$2 | 0;
   HEAP32[$5 >> 2] = $67;
   STACKTOP = sp;
   return;
  }
 }
 if (!(($$05469 | 0) != 0 & ($9 | 0) != 0)) {
  $$153 = $9;
  $$2 = $$05469;
  $64 = HEAP32[$3 >> 2] | 0;
  $65 = $64 - $$153 | 0;
  HEAP32[$3 >> 2] = $65;
  $66 = HEAP32[$5 >> 2] | 0;
  $67 = $66 - $$2 | 0;
  HEAP32[$5 >> 2] = $67;
  STACKTOP = sp;
  return;
 }
 $33 = $0 + 92 | 0;
 $$05262 = $9;
 $$063 = $2;
 $$15561 = $$05469;
 while (1) {
  $35 = $$05262 >>> 0 > $20 >>> 0 ? $20 : $$05262;
  HEAP32[$7 >> 2] = $35;
  HEAP32[$8 >> 2] = $$15561;
  $36 = ($$063 | 0) != 0;
  $37 = ($35 | 0) != 0;
  if ($36) {
   if ($37) {
    $$05059 = 0;
    do {
     HEAP32[$16 + ($$05059 + $19 << 2) >> 2] = HEAP32[$$063 + ((Math_imul($$05059, $22) | 0) << 2) >> 2];
     $$05059 = $$05059 + 1 | 0;
    } while ($$05059 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0);
   }
  } else if ($37) {
   $$15158 = 0;
   do {
    HEAPF32[$16 + ($$15158 + $19 << 2) >> 2] = 0.0;
    $$15158 = $$15158 + 1 | 0;
   } while ($$15158 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0);
  }
  $51 = HEAP32[$6 >> 2] | 0;
  _speex_resampler_process_native($0, $1, $7, $51, $8);
  $52 = HEAP32[$7 >> 2] | 0;
  $53 = $$05262 - $52 | 0;
  $54 = HEAP32[$8 >> 2] | 0;
  $55 = $$15561 - $54 | 0;
  HEAP32[$6 >> 2] = $51 + ((Math_imul(HEAP32[$33 >> 2] | 0, $54) | 0) << 2);
  $60 = $$063 + ((Math_imul($52, $22) | 0) << 2) | 0;
  if (($55 | 0) != 0 & ($53 | 0) != 0) {
   $$05262 = $53;
   $$063 = $36 ? $60 : 0;
   $$15561 = $55;
  } else {
   $$153 = $53;
   $$2 = $55;
   break;
  }
 }
 $64 = HEAP32[$3 >> 2] | 0;
 $65 = $64 - $$153 | 0;
 HEAP32[$3 >> 2] = $65;
 $66 = HEAP32[$5 >> 2] | 0;
 $67 = $66 - $$2 | 0;
 HEAP32[$5 >> 2] = $67;
 STACKTOP = sp;
 return;
}

function _resampler_basic_direct_single($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$047$lcssa = 0, $$04756 = 0, $$04756$us = 0, $$048$lcssa = 0, $$04855 = 0, $$04855$us = 0, $$04952$us = 0.0, $$050$lcssa = 0, $$05054 = 0, $$05054$us = 0, $$053$us = 0, $$1 = 0, $$1$us = 0, $$151 = 0, $$151$us = 0, $11 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $32 = 0, $33 = 0, $41 = 0, $45 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 24 >> 2] | 0;
 $8 = $0 + 60 | 0;
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $12 = $0 + 64 | 0;
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $17 = HEAP32[$0 + 76 >> 2] | 0;
 $19 = HEAP32[$0 + 92 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $23 = HEAP32[$0 + 40 >> 2] | 0;
 $25 = HEAP32[$0 + 12 >> 2] | 0;
 L1 : do if (($11 | 0) < (HEAP32[$3 >> 2] | 0)) {
  if (($7 | 0) <= 0) {
   $$04756 = 0;
   $$04855 = $11;
   $$05054 = $15;
   while (1) {
    if (($$04756 | 0) >= (HEAP32[$5 >> 2] | 0)) {
     $$047$lcssa = $$04756;
     $$048$lcssa = $$04855;
     $$050$lcssa = $$05054;
     break L1;
    }
    $53 = $$04756 + 1 | 0;
    HEAPF32[$4 + ((Math_imul($$04756, $19) | 0) << 2) >> 2] = 0.0;
    $57 = $$05054 + $23 | 0;
    $58 = $57 >>> 0 < $25 >>> 0;
    $$151 = $57 - ($58 ? 0 : $25) | 0;
    $$1 = $$04855 + $21 + (($58 ^ 1) & 1) | 0;
    if (($$1 | 0) < (HEAP32[$3 >> 2] | 0)) {
     $$04756 = $53;
     $$04855 = $$1;
     $$05054 = $$151;
    } else {
     $$047$lcssa = $53;
     $$048$lcssa = $$1;
     $$050$lcssa = $$151;
     break L1;
    }
   }
  }
  $$04756$us = 0;
  $$04855$us = $11;
  $$05054$us = $15;
  while (1) {
   if (($$04756$us | 0) >= (HEAP32[$5 >> 2] | 0)) {
    $$047$lcssa = $$04756$us;
    $$048$lcssa = $$04855$us;
    $$050$lcssa = $$05054$us;
    break L1;
   }
   $32 = $17 + ((Math_imul($$05054$us, $7) | 0) << 2) | 0;
   $33 = $2 + ($$04855$us << 2) | 0;
   $$04952$us = 0.0;
   $$053$us = 0;
   do {
    $$04952$us = $$04952$us + +HEAPF32[$32 + ($$053$us << 2) >> 2] * +HEAPF32[$33 + ($$053$us << 2) >> 2];
    $$053$us = $$053$us + 1 | 0;
   } while (($$053$us | 0) != ($7 | 0));
   $41 = $$04756$us + 1 | 0;
   HEAPF32[$4 + ((Math_imul($$04756$us, $19) | 0) << 2) >> 2] = $$04952$us;
   $45 = $$05054$us + $23 | 0;
   $46 = $45 >>> 0 < $25 >>> 0;
   $$151$us = $45 - ($46 ? 0 : $25) | 0;
   $$1$us = $$04855$us + $21 + (($46 ^ 1) & 1) | 0;
   if (($$1$us | 0) < (HEAP32[$3 >> 2] | 0)) {
    $$04756$us = $41;
    $$04855$us = $$1$us;
    $$05054$us = $$151$us;
   } else {
    $$047$lcssa = $41;
    $$048$lcssa = $$1$us;
    $$050$lcssa = $$151$us;
    break;
   }
  }
 } else {
  $$047$lcssa = 0;
  $$048$lcssa = $11;
  $$050$lcssa = $15;
 } while (0);
 HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] = $$048$lcssa;
 HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] = $$050$lcssa;
 return $$047$lcssa | 0;
}

function _patch_transient_decision($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$080$us = 0, $$081$us = 0.0, $$096 = 0, $$098 = 0, $$1101 = 0, $$1103 = 0, $$182$lcssa$lcssa = 0.0, $$18289$us = 0.0, $$292 = 0, $$390$us = 0, $$83 = 0.0, $$84 = 0.0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $20 = 0.0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $30 = 0.0, $35 = 0, $37 = 0, $38 = 0.0, $42 = 0.0, $47 = 0, $48 = 0, $50 = 0, $53 = 0.0, $57 = 0.0, $6 = 0, $60 = 0.0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $6 = sp;
 $9 = +HEAPF32[$1 + ($3 << 2) >> 2];
 if (($5 | 0) == 1) {
  HEAPF32[$6 + ($3 << 2) >> 2] = $9;
  $$096 = $3 + 1 | 0;
  if (($$096 | 0) < ($4 | 0)) {
   $$098 = $$096;
   $13 = $9;
   do {
    $12 = $13 + -1.0;
    $15 = +HEAPF32[$1 + ($$098 << 2) >> 2];
    $13 = $12 > $15 ? $12 : $15;
    HEAPF32[$6 + ($$098 << 2) >> 2] = $13;
    $$098 = $$098 + 1 | 0;
   } while (($$098 | 0) != ($4 | 0));
  }
 } else {
  $20 = +HEAPF32[$1 + ($3 + $2 << 2) >> 2];
  $$83 = $9 > $20 ? $9 : $20;
  HEAPF32[$6 + ($3 << 2) >> 2] = $$83;
  $$1101 = $3 + 1 | 0;
  if (($$1101 | 0) < ($4 | 0)) {
   $$1103 = $$1101;
   $25 = $$83;
   do {
    $24 = $25 + -1.0;
    $27 = +HEAPF32[$1 + ($$1103 << 2) >> 2];
    $30 = +HEAPF32[$1 + ($$1103 + $2 << 2) >> 2];
    $$84 = $27 > $30 ? $27 : $30;
    $25 = $24 > $$84 ? $24 : $$84;
    HEAPF32[$6 + ($$1103 << 2) >> 2] = $25;
    $$1103 = $$1103 + 1 | 0;
   } while (($$1103 | 0) != ($4 | 0));
  }
 }
 $35 = $4 + -2 | 0;
 if (($35 | 0) >= ($3 | 0)) {
  $$292 = $35;
  while (1) {
   $37 = $6 + ($$292 << 2) | 0;
   $38 = +HEAPF32[$37 >> 2];
   $42 = +HEAPF32[$6 + ($$292 + 1 << 2) >> 2] + -1.0;
   HEAPF32[$37 >> 2] = $38 > $42 ? $38 : $42;
   if (($$292 | 0) > ($3 | 0)) $$292 = $$292 + -1 | 0; else break;
  }
 }
 $47 = ($3 | 0) > 2 ? $3 : 2;
 $48 = $4 + -1 | 0;
 if (($48 | 0) <= ($47 | 0)) {
  $$182$lcssa$lcssa = 0.0;
  $68 = $48 - $47 | 0;
  $69 = Math_imul($68, $5) | 0;
  $70 = +($69 | 0);
  $71 = $$182$lcssa$lcssa / $70;
  $72 = $71 > 1.0;
  $73 = $72 & 1;
  STACKTOP = sp;
  return $73 | 0;
 }
 $$080$us = 0;
 $$081$us = 0.0;
 while (1) {
  $50 = Math_imul($$080$us, $2) | 0;
  $$18289$us = $$081$us;
  $$390$us = $47;
  do {
   $53 = +HEAPF32[$0 + ($$390$us + $50 << 2) >> 2];
   $57 = +HEAPF32[$6 + ($$390$us << 2) >> 2];
   $60 = ($53 < 0.0 ? 0.0 : $53) - ($57 < 0.0 ? 0.0 : $57);
   $$18289$us = $$18289$us + ($60 < 0.0 ? 0.0 : $60);
   $$390$us = $$390$us + 1 | 0;
  } while (($$390$us | 0) < ($48 | 0));
  $$080$us = $$080$us + 1 | 0;
  if (($$080$us | 0) >= ($5 | 0)) {
   $$182$lcssa$lcssa = $$18289$us;
   break;
  } else $$081$us = $$18289$us;
 }
 $68 = $48 - $47 | 0;
 $69 = Math_imul($68, $5) | 0;
 $70 = +($69 | 0);
 $71 = $$182$lcssa$lcssa / $70;
 $72 = $71 > 1.0;
 $73 = $72 & 1;
 STACKTOP = sp;
 return $73 | 0;
}

function _celt_fir_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05152$us = 0, $$053$us = 0.0, $$1$lcssa = 0, $$158 = 0, $$254$us = 0, $102 = 0, $107 = 0, $4 = 0, $6 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if (($0 | 0) == ($2 | 0)) _celt_fatal(41528, 41553, 102);
 $6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 + 92 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 88 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 84 >> 2];
 HEAP32[$6 + 12 >> 2] = HEAP32[$1 + 80 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$6 + 28 >> 2] = HEAP32[$1 + 64 >> 2];
 HEAP32[$6 + 32 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$6 + 36 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$6 + 40 >> 2] = HEAP32[$1 + 52 >> 2];
 HEAP32[$6 + 44 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$6 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$6 + 52 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$6 + 56 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$6 + 60 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$6 + 64 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[$6 + 68 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$1 >> 2];
 $77 = $3 + -3 | 0;
 if (($3 | 0) > 3) {
  $79 = $4 + 4 | 0;
  $80 = $4 + 8 | 0;
  $81 = $4 + 12 | 0;
  $$158 = 0;
  while (1) {
   $82 = $0 + ($$158 << 2) | 0;
   HEAP32[$4 >> 2] = HEAP32[$82 >> 2];
   $84 = $$158 | 1;
   HEAP32[$79 >> 2] = HEAP32[$0 + ($84 << 2) >> 2];
   $87 = $$158 | 2;
   HEAP32[$80 >> 2] = HEAP32[$0 + ($87 << 2) >> 2];
   $90 = $$158 | 3;
   HEAP32[$81 >> 2] = HEAP32[$0 + ($90 << 2) >> 2];
   _xcorr_kernel_c_127($6, $82 + -96 | 0, $4);
   HEAP32[$2 + ($$158 << 2) >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + ($84 << 2) >> 2] = HEAP32[$79 >> 2];
   HEAP32[$2 + ($87 << 2) >> 2] = HEAP32[$80 >> 2];
   HEAP32[$2 + ($90 << 2) >> 2] = HEAP32[$81 >> 2];
   $102 = $$158 + 4 | 0;
   if (($102 | 0) < ($77 | 0)) $$158 = $102; else {
    $$1$lcssa = $102;
    break;
   }
  }
 } else $$1$lcssa = 0;
 if (($$1$lcssa | 0) >= ($3 | 0)) {
  STACKTOP = sp;
  return;
 }
 $$254$us = $$1$lcssa;
 do {
  $107 = $$254$us + -24 | 0;
  $$05152$us = 0;
  $$053$us = +HEAPF32[$0 + ($$254$us << 2) >> 2];
  do {
   $$053$us = $$053$us + +HEAPF32[$6 + ($$05152$us << 2) >> 2] * +HEAPF32[$0 + ($107 + $$05152$us << 2) >> 2];
   $$05152$us = $$05152$us + 1 | 0;
  } while (($$05152$us | 0) != 24);
  HEAPF32[$2 + ($$254$us << 2) >> 2] = $$053$us;
  $$254$us = $$254$us + 1 | 0;
 } while (($$254$us | 0) != ($3 | 0));
 STACKTOP = sp;
 return;
}

function _silk_resampler_down2_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$04753 = 0, $$048 = 0, $$049 = 0, $$050 = 0, $$054 = 0, $$1$lcssa = 0, $$152 = 0, $10 = 0, $100 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $31 = 0, $4 = 0, $43 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $72 = 0, $8 = 0, $84 = 0, $93 = 0, $96 = 0, $99 = 0, sp = 0, $$054$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1936 | 0;
 $4 = sp;
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 $6 = $4 + 16 | 0;
 $$048 = $1;
 $$049 = $3;
 $$050 = $2;
 while (1) {
  $8 = ($$049 | 0) < 480 ? $$049 : 480;
  _silk_resampler_private_AR2($5, $6, $$050, 39506, $8);
  if (($8 | 0) > 2) {
   $$04753 = $8;
   $$054 = $4;
   $$152 = $$048;
   while (1) {
    $10 = HEAP32[$$054 >> 2] | 0;
    $16 = $$054 + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $23 = $$054 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $$054$looptemp = $$054;
    $$054 = $$054 + 12 | 0;
    $31 = HEAP32[$$054 >> 2] | 0;
    $43 = ((($10 & 65535) * 4697 | 0) >>> 16) + (($10 >> 16) * 4697 | 0) + (($17 >> 16) * 10739 | 0) + ((($17 & 65535) * 10739 | 0) >>> 16) + (($24 >> 16) * 8276 | 0) + ((($24 & 65535) * 8276 | 0) >>> 16) + (($31 >> 16) * 1567 | 0) + ((($31 & 65535) * 1567 | 0) >>> 16) | 0;
    HEAP16[$$152 >> 1] = ($43 | 0) > 2097119 ? 32767 : ($43 | 0) < -2097184 ? -32768 : (($43 >>> 5) + 1 | 0) >>> 1 & 65535;
    $53 = HEAP32[$16 >> 2] | 0;
    $59 = HEAP32[$23 >> 2] | 0;
    $65 = HEAP32[$$054 >> 2] | 0;
    $72 = HEAP32[$$054$looptemp + 16 >> 2] | 0;
    $84 = ((($53 & 65535) * 1567 | 0) >>> 16) + (($53 >> 16) * 1567 | 0) + (($59 >> 16) * 8276 | 0) + ((($59 & 65535) * 8276 | 0) >>> 16) + (($65 >> 16) * 10739 | 0) + ((($65 & 65535) * 10739 | 0) >>> 16) + (($72 >> 16) * 4697 | 0) + ((($72 & 65535) * 4697 | 0) >>> 16) | 0;
    $93 = $$152 + 4 | 0;
    HEAP16[$$152 + 2 >> 1] = ($84 | 0) > 2097119 ? 32767 : ($84 | 0) < -2097184 ? -32768 : (($84 >>> 5) + 1 | 0) >>> 1 & 65535;
    if (($$04753 | 0) <= 5) {
     $$1$lcssa = $93;
     break;
    } else {
     $$04753 = $$04753 + -3 | 0;
     $$152 = $93;
    }
   }
  } else $$1$lcssa = $$048;
  $96 = $$049 - $8 | 0;
  if (($96 | 0) <= 0) break;
  $99 = $4 + ($8 << 2) | 0;
  HEAP32[$4 >> 2] = HEAP32[$99 >> 2];
  HEAP32[$4 + 4 >> 2] = HEAP32[$99 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$99 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$99 + 12 >> 2];
  $$048 = $$1$lcssa;
  $$049 = $96;
  $$050 = $$050 + ($8 << 1) | 0;
 }
 $100 = $4 + ($8 << 2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$100 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$100 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$100 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$100 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _silk_encode_signs($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$02124 = 0, $$025 = 0, $105 = 0, $111 = 0, $117 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $24 = 0, $30 = 0, $39 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $69 = 0, $75 = 0, $81 = 0, $87 = 0, $93 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP8[$6 + 1 >> 0] = 0;
 $12 = 26224 + ((($3 << 1) + $4 << 16 >> 16) * 7 | 0) | 0;
 $14 = $2 + 8 >> 4;
 if (($2 | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 $$02124 = 0;
 $$025 = $1;
 while (1) {
  $17 = HEAP32[$5 + ($$02124 << 2) >> 2] | 0;
  if (($17 | 0) > 0) {
   $19 = $17 & 31;
   HEAP8[$6 >> 0] = HEAP8[$12 + ($19 >>> 0 < 6 ? $19 : 6) >> 0] | 0;
   $24 = HEAP8[$$025 >> 0] | 0;
   if ($24 << 24 >> 24) _ec_enc_icdf($0, ($24 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $30 = HEAP8[$$025 + 1 >> 0] | 0;
   if ($30 << 24 >> 24) _ec_enc_icdf($0, ($30 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $39 = HEAP8[$$025 + 2 >> 0] | 0;
   if ($39 << 24 >> 24) _ec_enc_icdf($0, ($39 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $45 = HEAP8[$$025 + 3 >> 0] | 0;
   if ($45 << 24 >> 24) _ec_enc_icdf($0, ($45 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $51 = HEAP8[$$025 + 4 >> 0] | 0;
   if ($51 << 24 >> 24) _ec_enc_icdf($0, ($51 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $57 = HEAP8[$$025 + 5 >> 0] | 0;
   if ($57 << 24 >> 24) _ec_enc_icdf($0, ($57 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $63 = HEAP8[$$025 + 6 >> 0] | 0;
   if ($63 << 24 >> 24) _ec_enc_icdf($0, ($63 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $69 = HEAP8[$$025 + 7 >> 0] | 0;
   if ($69 << 24 >> 24) _ec_enc_icdf($0, ($69 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $75 = HEAP8[$$025 + 8 >> 0] | 0;
   if ($75 << 24 >> 24) _ec_enc_icdf($0, ($75 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $81 = HEAP8[$$025 + 9 >> 0] | 0;
   if ($81 << 24 >> 24) _ec_enc_icdf($0, ($81 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $87 = HEAP8[$$025 + 10 >> 0] | 0;
   if ($87 << 24 >> 24) _ec_enc_icdf($0, ($87 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $93 = HEAP8[$$025 + 11 >> 0] | 0;
   if ($93 << 24 >> 24) _ec_enc_icdf($0, ($93 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $99 = HEAP8[$$025 + 12 >> 0] | 0;
   if ($99 << 24 >> 24) _ec_enc_icdf($0, ($99 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $105 = HEAP8[$$025 + 13 >> 0] | 0;
   if ($105 << 24 >> 24) _ec_enc_icdf($0, ($105 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $111 = HEAP8[$$025 + 14 >> 0] | 0;
   if ($111 << 24 >> 24) _ec_enc_icdf($0, ($111 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
   $117 = HEAP8[$$025 + 15 >> 0] | 0;
   if ($117 << 24 >> 24) _ec_enc_icdf($0, ($117 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
  }
  $$02124 = $$02124 + 1 | 0;
  if (($$02124 | 0) >= ($14 | 0)) break; else $$025 = $$025 + 16 | 0;
 }
 STACKTOP = sp;
 return;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _silk_decode_parameters($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$06365 = 0, $$066 = 0, $$pre = 0, $$sink = 0, $10 = 0, $124 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $4 = 0, $43 = 0, $63 = 0, $69 = 0, $70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 32 | 0;
 $4 = sp;
 $10 = $0 + 2324 | 0;
 _silk_gains_dequant($1 + 16 | 0, $0 + 2736 | 0, $0 + 2312 | 0, ($2 | 0) == 2 & 1, HEAP32[$10 >> 2] | 0);
 _silk_NLSF_decode($3, $0 + 2744 | 0, HEAP32[$0 + 2732 >> 2] | 0);
 $15 = $1 + 32 | 0;
 $16 = $1 + 64 | 0;
 $17 = $0 + 2340 | 0;
 _silk_NLSF2A($16, $3, HEAP32[$17 >> 2] | 0);
 $22 = $0 + 2767 | 0;
 if ((HEAP32[$0 + 2376 >> 2] | 0) == 1) {
  HEAP8[$22 >> 0] = 4;
  label = 8;
 } else {
  $$pre = HEAP8[$22 >> 0] | 0;
  if ($$pre << 24 >> 24 < 4) {
   $24 = HEAP32[$17 >> 2] | 0;
   if (($24 | 0) > 0) {
    $26 = $$pre << 24 >> 24;
    $$066 = 0;
    do {
     $29 = HEAP16[$0 + 2344 + ($$066 << 1) >> 1] | 0;
     HEAP16[$4 + ($$066 << 1) >> 1] = ((Math_imul((HEAP16[$3 + ($$066 << 1) >> 1] | 0) - $29 | 0, $26) | 0) >>> 2) + $29;
     $$066 = $$066 + 1 | 0;
    } while (($$066 | 0) != ($24 | 0));
   }
   _silk_NLSF2A($15, $4, $24);
  } else label = 8;
 }
 if ((label | 0) == 8) _memcpy($15 | 0, $16 | 0, HEAP32[$17 >> 2] << 1 | 0) | 0;
 $43 = HEAP32[$17 >> 2] | 0;
 _memcpy($0 + 2344 | 0, $3 | 0, $43 << 1 | 0) | 0;
 if (HEAP32[$0 + 4160 >> 2] | 0) {
  _silk_bwexpander($15, $43, 63570);
  _silk_bwexpander($16, HEAP32[$17 >> 2] | 0, 63570);
 }
 if ((HEAP8[$0 + 2765 >> 0] | 0) != 2) {
  _memset($1 | 0, 0, HEAP32[$10 >> 2] << 2 | 0) | 0;
  _memset($1 + 96 | 0, 0, (HEAP32[$10 >> 2] | 0) * 10 | 0) | 0;
  HEAP8[$0 + 2768 >> 0] = 0;
  $$sink = 0;
  $124 = $1 + 136 | 0;
  HEAP32[$124 >> 2] = $$sink;
  STACKTOP = sp;
  return;
 }
 _silk_decode_pitch(HEAP16[$0 + 2762 >> 1] | 0, HEAP8[$0 + 2764 >> 0] | 0, $1, HEAP32[$0 + 2316 >> 2] | 0, HEAP32[$10 >> 2] | 0);
 $63 = HEAP32[39184 + (HEAP8[$0 + 2768 >> 0] << 2) >> 2] | 0;
 if ((HEAP32[$10 >> 2] | 0) > 0) {
  $$06365 = 0;
  do {
   $69 = (HEAP8[$0 + 2740 + $$06365 >> 0] | 0) * 5 | 0;
   $70 = $$06365 * 5 | 0;
   HEAP16[$1 + 96 + ($70 << 1) >> 1] = HEAP8[$63 + $69 >> 0] << 7;
   HEAP16[$1 + 96 + ($70 + 1 << 1) >> 1] = HEAP8[$63 + ($69 + 1) >> 0] << 7;
   HEAP16[$1 + 96 + ($70 + 2 << 1) >> 1] = HEAP8[$63 + ($69 + 2) >> 0] << 7;
   HEAP16[$1 + 96 + ($70 + 3 << 1) >> 1] = HEAP8[$63 + ($69 + 3) >> 0] << 7;
   HEAP16[$1 + 96 + ($70 + 4 << 1) >> 1] = HEAP8[$63 + ($69 + 4) >> 0] << 7;
   $$06365 = $$06365 + 1 | 0;
  } while (($$06365 | 0) < (HEAP32[$10 >> 2] | 0));
 }
 $$sink = HEAP16[39500 + (HEAP8[$0 + 2769 >> 0] << 1) >> 1] | 0;
 $124 = $1 + 136 | 0;
 HEAP32[$124 >> 2] = $$sink;
 STACKTOP = sp;
 return;
}

function _quant_energy_finalise($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$03438 = 0, $$03438$1 = 0, $$035 = 0, $$035$1 = 0, $$1$lcssa = 0, $$140 = 0, $$140$1 = 0, $$2 = 0, $$2$1 = 0, $$3 = 0, $$3$1 = 0, $11 = 0, $13 = 0, $24 = 0, $33 = 0.0, $37 = 0, $43 = 0, $46 = 0, $53 = 0, $64 = 0, $73 = 0.0, $77 = 0, $83 = 0, $86 = 0;
 $11 = $0 + 8 | 0;
 if (($1 | 0) >= ($2 | 0)) return;
 if (($7 | 0) < ($9 | 0)) $$1$lcssa = $7; else {
  $$03438 = $1;
  $$140 = $7;
  while (1) {
   $13 = $5 + ($$03438 << 2) | 0;
   if ((HEAP32[$13 >> 2] | 0) > 7) $$3 = $$140; else if (!(HEAP32[$6 + ($$03438 << 2) >> 2] | 0)) {
    $$035 = 0;
    $$2 = $$140;
    while (1) {
     $24 = !(+HEAPF32[$4 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035) | 0) + $$03438 << 2) >> 2] < 0.0);
     _ec_enc_bits($8, $24 & 1, 1);
     $33 = (+($24 & 1) + -.5) * +(1 << 13 - (HEAP32[$13 >> 2] | 0) | 0) * .00006103515625;
     $37 = $3 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035) | 0) + $$03438 << 2) | 0;
     HEAPF32[$37 >> 2] = +HEAPF32[$37 >> 2] + $33;
     $43 = $4 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035) | 0) + $$03438 << 2) | 0;
     HEAPF32[$43 >> 2] = +HEAPF32[$43 >> 2] - $33;
     $46 = $$2 + -1 | 0;
     $$035 = $$035 + 1 | 0;
     if (($$035 | 0) >= ($9 | 0)) {
      $$3 = $46;
      break;
     } else $$2 = $46;
    }
   } else $$3 = $$140;
   $$03438 = $$03438 + 1 | 0;
   if (($$03438 | 0) >= ($2 | 0) | ($$3 | 0) < ($9 | 0)) {
    $$1$lcssa = $$3;
    break;
   } else $$140 = $$3;
  }
 }
 if (($$1$lcssa | 0) < ($9 | 0)) return;
 $$03438$1 = $1;
 $$140$1 = $$1$lcssa;
 while (1) {
  $53 = $5 + ($$03438$1 << 2) | 0;
  if ((HEAP32[$53 >> 2] | 0) > 7) $$3$1 = $$140$1; else if ((HEAP32[$6 + ($$03438$1 << 2) >> 2] | 0) == 1) {
   $$035$1 = 0;
   $$2$1 = $$140$1;
   while (1) {
    $64 = !(+HEAPF32[$4 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035$1) | 0) + $$03438$1 << 2) >> 2] < 0.0);
    _ec_enc_bits($8, $64 & 1, 1);
    $73 = (+($64 & 1) + -.5) * +(1 << 13 - (HEAP32[$53 >> 2] | 0) | 0) * .00006103515625;
    $77 = $3 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035$1) | 0) + $$03438$1 << 2) | 0;
    HEAPF32[$77 >> 2] = +HEAPF32[$77 >> 2] + $73;
    $83 = $4 + ((Math_imul(HEAP32[$11 >> 2] | 0, $$035$1) | 0) + $$03438$1 << 2) | 0;
    HEAPF32[$83 >> 2] = +HEAPF32[$83 >> 2] - $73;
    $86 = $$2$1 + -1 | 0;
    $$035$1 = $$035$1 + 1 | 0;
    if (($$035$1 | 0) >= ($9 | 0)) {
     $$3$1 = $86;
     break;
    } else $$2$1 = $86;
   }
  } else $$3$1 = $$140$1;
  $$03438$1 = $$03438$1 + 1 | 0;
  if (($$03438$1 | 0) >= ($2 | 0) | ($$3$1 | 0) < ($9 | 0)) break; else $$140$1 = $$3$1;
 }
 return;
}

function _silk_insertion_sort_increasing($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$06478 = 0, $$073 = 0, $$073$in = 0, $$1$lcssa$us = 0, $$16574 = 0, $$166$us = 0, $$269 = 0, $$269$us = 0, $$pre$phi87Z2D = 0, $$pre$phiZ2D = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $41 = 0, $43 = 0, $45 = 0, $9 = 0, label = 0;
 if (($3 | 0) <= 0) _celt_fatal(47331, 45567, 51);
 if (($2 | 0) <= 0) _celt_fatal(47377, 45567, 52);
 if (($2 | 0) < ($3 | 0)) _celt_fatal(47401, 45567, 53);
 $$06478 = 0;
 do {
  HEAP32[$1 + ($$06478 << 2) >> 2] = $$06478;
  $$06478 = $$06478 + 1 | 0;
 } while (($$06478 | 0) != ($3 | 0));
 $9 = ($3 | 0) > 1;
 if ($9) {
  $$16574 = 1;
  do {
   $11 = HEAP32[$0 + ($$16574 << 2) >> 2] | 0;
   $$073$in = $$16574;
   while (1) {
    $$073 = $$073$in + -1 | 0;
    $12 = $0 + ($$073 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $15 = $0 + ($$073$in << 2) | 0;
    if (($11 | 0) >= ($13 | 0)) {
     label = 13;
     break;
    }
    HEAP32[$15 >> 2] = $13;
    $16 = $1 + ($$073 << 2) | 0;
    HEAP32[$1 + ($$073$in << 2) >> 2] = HEAP32[$16 >> 2];
    if (($$073$in | 0) > 1) $$073$in = $$073; else {
     $$pre$phi87Z2D = $16;
     $$pre$phiZ2D = $12;
     break;
    }
   }
   if ((label | 0) == 13) {
    label = 0;
    $$pre$phi87Z2D = $1 + ($$073$in << 2) | 0;
    $$pre$phiZ2D = $15;
   }
   HEAP32[$$pre$phiZ2D >> 2] = $11;
   HEAP32[$$pre$phi87Z2D >> 2] = $$16574;
   $$16574 = $$16574 + 1 | 0;
  } while (($$16574 | 0) != ($3 | 0));
 }
 if (($3 | 0) >= ($2 | 0)) return;
 $22 = $3 + -1 | 0;
 $23 = $0 + ($22 << 2) | 0;
 $24 = $3 + -2 | 0;
 if (!$9) {
  $43 = $1 + ($22 << 2) | 0;
  $$269 = $3;
  do {
   $45 = HEAP32[$0 + ($$269 << 2) >> 2] | 0;
   if (($45 | 0) < (HEAP32[$23 >> 2] | 0)) {
    HEAP32[$23 >> 2] = $45;
    HEAP32[$43 >> 2] = $$269;
   }
   $$269 = $$269 + 1 | 0;
  } while (($$269 | 0) != ($2 | 0));
  return;
 }
 $$269$us = $3;
 do {
  $26 = HEAP32[$0 + ($$269$us << 2) >> 2] | 0;
  if (($26 | 0) < (HEAP32[$23 >> 2] | 0)) {
   $$166$us = $24;
   while (1) {
    $30 = HEAP32[$0 + ($$166$us << 2) >> 2] | 0;
    if (($26 | 0) >= ($30 | 0)) {
     $$1$lcssa$us = $$166$us;
     break;
    }
    $36 = $$166$us + 1 | 0;
    HEAP32[$0 + ($36 << 2) >> 2] = $30;
    HEAP32[$1 + ($36 << 2) >> 2] = HEAP32[$1 + ($$166$us << 2) >> 2];
    $41 = $$166$us + -1 | 0;
    if (($$166$us | 0) > 0) $$166$us = $41; else {
     $$1$lcssa$us = $41;
     break;
    }
   }
   $32 = $$1$lcssa$us + 1 | 0;
   HEAP32[$0 + ($32 << 2) >> 2] = $26;
   HEAP32[$1 + ($32 << 2) >> 2] = $$269$us;
  }
  $$269$us = $$269$us + 1 | 0;
 } while (($$269$us | 0) != ($2 | 0));
 return;
}

function _pitch_search($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$05263 = 0, $$053 = 0, $$057 = 0, $$159 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $47 = 0.0, $5 = 0, $51 = 0, $57 = 0.0, $59 = 0.0, $6 = 0, $62 = 0.0, $71 = 0, $72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 $6 = $5;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 if (($2 | 0) <= 0) _celt_fatal(41504, 41491, 302);
 $11 = $3 + $2 | 0;
 $12 = $2 >>> 2;
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 $14 = $11 >> 2;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($14 << 2) | 0) + 15 & -16) | 0;
 $16 = $3 >>> 1;
 $17 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($16 << 2) | 0) + 15 & -16) | 0;
 if ($12 | 0) {
  $$05263 = 0;
  do {
   HEAP32[$13 + ($$05263 << 2) >> 2] = HEAP32[$0 + ($$05263 << 1 << 2) >> 2];
   $$05263 = $$05263 + 1 | 0;
  } while (($$05263 | 0) != ($12 | 0));
 }
 if (($11 | 0) > 3) {
  $$159 = 0;
  do {
   HEAP32[$15 + ($$159 << 2) >> 2] = HEAP32[$1 + ($$159 << 1 << 2) >> 2];
   $$159 = $$159 + 1 | 0;
  } while (($$159 | 0) < ($14 | 0));
 }
 $31 = $3 >> 2;
 _celt_pitch_xcorr_c($13, $15, $17, $12, $31);
 _find_best_pitch($17, $15, $12, $31, $5);
 if (!$16) _find_best_pitch($17, $1, $2 >> 1, 0, $5); else {
  $34 = HEAP32[$5 >> 2] << 1;
  $37 = HEAP32[$5 + 4 >> 2] << 1;
  $38 = $2 >> 1;
  $$057 = 0;
  do {
   $39 = $17 + ($$057 << 2) | 0;
   HEAPF32[$39 >> 2] = 0.0;
   $40 = $$057 - $34 | 0;
   if (((($40 | 0) > -1 ? $40 : 0 - $40 | 0) | 0) > 2) {
    $43 = $$057 - $37 | 0;
    if (((($43 | 0) > -1 ? $43 : 0 - $43 | 0) | 0) <= 2) label = 13;
   } else label = 13;
   if ((label | 0) == 13) {
    label = 0;
    $47 = +_celt_inner_prod_c_111($0, $1 + ($$057 << 2) | 0, $38);
    HEAPF32[$39 >> 2] = $47 < -1.0 ? -1.0 : $47;
   }
   $$057 = $$057 + 1 | 0;
  } while (($$057 | 0) != ($16 | 0));
  _find_best_pitch($17, $1, $38, $16, $5);
 }
 $51 = HEAP32[$5 >> 2] | 0;
 if (!(($51 | 0) > 0 & ($51 | 0) < ($16 + -1 | 0))) {
  $$053 = 0;
  $71 = $51 << 1;
  $72 = $71 - $$053 | 0;
  HEAP32[$4 >> 2] = $72;
  STACKTOP = sp;
  return;
 }
 $57 = +HEAPF32[$17 + ($51 + -1 << 2) >> 2];
 $59 = +HEAPF32[$17 + ($51 << 2) >> 2];
 $62 = +HEAPF32[$17 + ($51 + 1 << 2) >> 2];
 if ($62 - $57 > ($59 - $57) * .699999988079071) {
  $$053 = 1;
  $71 = $51 << 1;
  $72 = $71 - $$053 | 0;
  HEAP32[$4 >> 2] = $72;
  STACKTOP = sp;
  return;
 }
 $$053 = ($57 - $62 > ($59 - $62) * .699999988079071) << 31 >> 31;
 $71 = $51 << 1;
 $72 = $71 - $$053 | 0;
 HEAP32[$4 >> 2] = $72;
 STACKTOP = sp;
 return;
}

function _deemphasis($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$us = 0, $$061$lcssa$us = 0.0, $$06171$us = 0.0, $$06370$us = 0, $$162$lcssa = 0.0, $$16269 = 0.0, $$16468 = 0, $$26575$us = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $20 = 0, $21 = 0, $32 = 0.0, $33 = 0.0, $38 = 0, $39 = 0.0, $41 = 0, $42 = 0, $46 = 0.0, $47 = 0.0, sp = 0;
 sp = STACKTOP;
 if (!(($3 | 0) != 2 | ($4 | 0) != 1)) {
  _deemphasis_stereo_simple(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $1, $2, +HEAPF32[$5 >> 2], $6);
  STACKTOP = sp;
  return;
 }
 $10 = _llvm_stacksave() | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
 $12 = +HEAPF32[$5 >> 2];
 $13 = ($2 | 0) / ($4 | 0) | 0;
 $15 = ($2 | 0) > 0;
 $16 = ($13 | 0) > 0;
 if (($4 | 0) > 1) {
  $$0$us = 0;
  do {
   $17 = $6 + ($$0$us << 2) | 0;
   $18 = +HEAPF32[$17 >> 2];
   $20 = HEAP32[$0 + ($$0$us << 2) >> 2] | 0;
   $21 = $1 + ($$0$us << 2) | 0;
   if ($15) {
    $$06171$us = $18;
    $$06370$us = 0;
    while (1) {
     $32 = $$06171$us + (+HEAPF32[$20 + ($$06370$us << 2) >> 2] + 1.0000000031710769e-30);
     $33 = $12 * $32;
     HEAPF32[$11 + ($$06370$us << 2) >> 2] = $32;
     $$06370$us = $$06370$us + 1 | 0;
     if (($$06370$us | 0) == ($2 | 0)) {
      $$061$lcssa$us = $33;
      break;
     } else $$06171$us = $33;
    }
   } else $$061$lcssa$us = $18;
   HEAPF32[$17 >> 2] = $$061$lcssa$us;
   if ($16) {
    $$26575$us = 0;
    do {
     HEAPF32[$21 + ((Math_imul($$26575$us, $3) | 0) << 2) >> 2] = +HEAPF32[$11 + ((Math_imul($$26575$us, $4) | 0) << 2) >> 2] * .000030517578125;
     $$26575$us = $$26575$us + 1 | 0;
    } while (($$26575$us | 0) != ($13 | 0));
   }
   $$0$us = $$0$us + 1 | 0;
  } while (($$0$us | 0) < ($3 | 0));
 } else {
  $$0 = 0;
  do {
   $38 = $6 + ($$0 << 2) | 0;
   $39 = +HEAPF32[$38 >> 2];
   $41 = HEAP32[$0 + ($$0 << 2) >> 2] | 0;
   $42 = $1 + ($$0 << 2) | 0;
   if ($15) {
    $$16269 = $39;
    $$16468 = 0;
    while (1) {
     $46 = $$16269 + (+HEAPF32[$41 + ($$16468 << 2) >> 2] + 1.0000000031710769e-30);
     $47 = $12 * $46;
     HEAPF32[$42 + ((Math_imul($$16468, $3) | 0) << 2) >> 2] = $46 * .000030517578125;
     $$16468 = $$16468 + 1 | 0;
     if (($$16468 | 0) == ($2 | 0)) {
      $$162$lcssa = $47;
      break;
     } else $$16269 = $47;
    }
   } else $$162$lcssa = $39;
   HEAPF32[$38 >> 2] = $$162$lcssa;
   $$0 = $$0 + 1 | 0;
  } while (($$0 | 0) < ($3 | 0));
 }
 _llvm_stackrestore($10 | 0);
 STACKTOP = sp;
 return;
}

function _silk_control_audio_bandwidth($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$058 = 0, $$59 = 0, $$pre = 0, $$pre2 = 0, $11 = 0, $13 = 0, $17 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $37 = 0, $39 = 0, $42 = 0, $51 = 0, $54 = 0, $55 = 0, $68 = 0, $73 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $sext = 0;
 $3 = HEAP32[$0 + 4576 >> 2] | 0;
 if (!$3) $$0 = HEAP32[$0 + 32 >> 2] | 0; else $$0 = $3;
 $sext = $$0 << 16;
 $8 = ($sext >> 16) * 1e3 | 0;
 if (!$sext) {
  $11 = HEAP32[$0 + 4572 >> 2] | 0;
  $13 = HEAP32[$0 + 4556 >> 2] | 0;
  $$058 = ((($11 | 0) < ($13 | 0) ? $11 : $13) | 0) / 1e3 | 0;
  return $$058 | 0;
 }
 $17 = HEAP32[$0 + 4556 >> 2] | 0;
 $$pre = HEAP32[$0 + 4564 >> 2] | 0;
 $$pre2 = HEAP32[$0 + 4568 >> 2] | 0;
 if (($8 | 0) > ($17 | 0) | ($8 | 0) > ($$pre | 0) | ($8 | 0) < ($$pre2 | 0)) {
  $$59 = ($17 | 0) < ($$pre | 0) ? $17 : $$pre;
  $$058 = ((($$59 | 0) > ($$pre2 | 0) ? $$59 : $$pre2) | 0) / 1e3 | 0;
  return $$058 | 0;
 }
 $25 = $0 + 16 | 0;
 $26 = $0 + 24 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 if (($27 | 0) > 255) HEAP32[$0 + 28 >> 2] = 0;
 if (!(HEAP32[$0 + 4536 >> 2] | 0)) if (!(HEAP32[$1 + 64 >> 2] | 0)) {
  $$058 = $$0;
  return $$058 | 0;
 }
 $37 = HEAP32[$0 + 4572 >> 2] | 0;
 if (($8 | 0) > ($37 | 0)) {
  $39 = $0 + 28 | 0;
  if (!(HEAP32[$39 >> 2] | 0)) {
   HEAP32[$26 >> 2] = 256;
   $42 = $25;
   HEAP32[$42 >> 2] = 0;
   HEAP32[$42 + 4 >> 2] = 0;
   $51 = 256;
  } else $51 = $27;
  if (HEAP32[$1 + 64 >> 2] | 0) {
   HEAP32[$39 >> 2] = 0;
   $$058 = ($$0 | 0) == 16 ? 12 : 8;
   return $$058 | 0;
  }
  if (($51 | 0) < 1) {
   HEAP32[$1 + 88 >> 2] = 1;
   $54 = $1 + 56 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   HEAP32[$54 >> 2] = $55 - (($55 * 5 | 0) / ((HEAP32[$1 + 24 >> 2] | 0) + 5 | 0) | 0);
   $$058 = $$0;
   return $$058 | 0;
  } else {
   HEAP32[$39 >> 2] = -2;
   $$058 = $$0;
   return $$058 | 0;
  }
 }
 if (($8 | 0) >= ($37 | 0)) {
  $85 = $0 + 28 | 0;
  if ((HEAP32[$85 >> 2] | 0) >= 0) {
   $$058 = $$0;
   return $$058 | 0;
  }
  HEAP32[$85 >> 2] = 1;
  $$058 = $$0;
  return $$058 | 0;
 }
 if (HEAP32[$1 + 64 >> 2] | 0) {
  HEAP32[$26 >> 2] = 0;
  $68 = $25;
  HEAP32[$68 >> 2] = 0;
  HEAP32[$68 + 4 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 1;
  $$058 = ($$0 | 0) == 8 ? 12 : 16;
  return $$058 | 0;
 }
 $73 = $0 + 28 | 0;
 if (!(HEAP32[$73 >> 2] | 0)) {
  HEAP32[$1 + 88 >> 2] = 1;
  $77 = $1 + 56 | 0;
  $78 = HEAP32[$77 >> 2] | 0;
  HEAP32[$77 >> 2] = $78 - (($78 * 5 | 0) / ((HEAP32[$1 + 24 >> 2] | 0) + 5 | 0) | 0);
  $$058 = $$0;
  return $$058 | 0;
 } else {
  HEAP32[$73 >> 2] = 1;
  $$058 = $$0;
  return $$058 | 0;
 }
 return 0;
}

function _denormalise_bands($$0$5$val, $$0$8$val, $0, $1, $2, $3, $4, $5, $6, $7) {
 $$0$5$val = $$0$5$val | 0;
 $$0$8$val = $$0$8$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$05166 = 0, $$052 = 0, $$053 = 0, $$05563 = 0, $$057$lcssa = 0, $$05765 = 0, $$156 = 0, $$15862 = 0, $$164 = 0, $$2 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $42 = 0.0, $48 = 0.0, $59 = 0, $8 = 0, $spec$select = 0, $spec$select59 = 0, $spec$select60 = 0, $$156$looptemp = 0, $$2$looptemp = 0;
 $8 = Math_imul($$0$8$val, $5) | 0;
 $12 = Math_imul(HEAP16[$$0$5$val + ($4 << 1) >> 1] | 0, $5) | 0;
 if (($6 | 0) == 1) $$053 = $12; else {
  $14 = ($8 | 0) / ($6 | 0) | 0;
  $$053 = ($12 | 0) < ($14 | 0) ? $12 : $14;
 }
 $16 = ($7 | 0) == 0;
 $spec$select = $16 ? $$053 : 0;
 $spec$select59 = $16 ? $4 : 0;
 $spec$select60 = $16 ? $3 : 0;
 $17 = $$0$5$val + ($spec$select60 << 1) | 0;
 $18 = HEAP16[$17 >> 1] | 0;
 $20 = Math_imul($18 << 16 >> 16, $5) | 0;
 $21 = $0 + ($20 << 2) | 0;
 if (($20 | 0) > 0) {
  $$05166 = 0;
  $$05765 = $1;
  while (1) {
   $23 = $$05765 + 4 | 0;
   HEAPF32[$$05765 >> 2] = 0.0;
   $$05166 = $$05166 + 1 | 0;
   $25 = HEAP16[$17 >> 1] | 0;
   if (($$05166 | 0) >= (Math_imul($25 << 16 >> 16, $5) | 0)) {
    $$057$lcssa = $23;
    $59 = $25;
    break;
   } else $$05765 = $23;
  }
 } else {
  $$057$lcssa = $1;
  $59 = $18;
 }
 L9 : do if (($spec$select60 | 0) < ($spec$select59 | 0)) {
  $$05563 = $21;
  $$15862 = $$057$lcssa;
  $$164 = $spec$select60;
  $31 = $59;
  while (1) {
   $32 = Math_imul($31 << 16 >> 16, $5) | 0;
   $33 = $$164 + 1 | 0;
   $34 = $$0$5$val + ($33 << 1) | 0;
   $37 = Math_imul(HEAP16[$34 >> 1] | 0, $5) | 0;
   $42 = +HEAPF32[$2 + ($$164 << 2) >> 2] + +HEAPF32[20304 + ($$164 << 2) >> 2];
   $48 = +Math_exp(+(($42 > 32.0 ? 32.0 : $42) * .6931471805599453));
   $$052 = $32;
   $$156 = $$05563;
   $$2 = $$15862;
   do {
    $$156$looptemp = $$156;
    $$156 = $$156 + 4 | 0;
    $$2$looptemp = $$2;
    $$2 = $$2 + 4 | 0;
    HEAPF32[$$2$looptemp >> 2] = +HEAPF32[$$156$looptemp >> 2] * $48;
    $$052 = $$052 + 1 | 0;
   } while (($$052 | 0) < ($37 | 0));
   if (($33 | 0) == ($spec$select59 | 0)) break L9;
   $$05563 = $$156;
   $$15862 = $$2;
   $$164 = $33;
   $31 = HEAP16[$34 >> 1] | 0;
  }
 } while (0);
 if (($spec$select60 | 0) > ($spec$select59 | 0)) _celt_fatal(39518, 39549, 263); else {
  _memset($1 + ($spec$select << 2) | 0, 0, $8 - $spec$select << 2 | 0) | 0;
  return;
 }
}

function _comb_filter($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0117127 = 0.0, $$0117127$phi = 0.0, $$0118126 = 0.0, $$0118126$phi = 0.0, $$0119125 = 0.0, $$0120 = 0, $$0121$lcssa = 0, $$0121124 = 0, $$0128 = 0.0, $12 = 0, $16 = 0, $18 = 0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $36 = 0.0, $53 = 0, $56 = 0.0, $58 = 0.0, $59 = 0.0, $62 = 0.0, $64 = 0;
 $12 = $6 == 0.0;
 if ($5 == 0.0 & $12) {
  if (($1 | 0) == ($0 | 0)) return;
  _memmove($0 | 0, $1 | 0, $4 << 2 | 0) | 0;
  return;
 }
 $16 = ($2 | 0) > 15 ? $2 : 15;
 $18 = ($3 | 0) > 15 ? $3 : 15;
 $21 = +HEAPF32[224 + ($7 * 12 | 0) >> 2] * $5;
 $24 = +HEAPF32[224 + ($7 * 12 | 0) + 4 >> 2] * $5;
 $27 = +HEAPF32[224 + ($7 * 12 | 0) + 8 >> 2] * $5;
 $30 = +HEAPF32[224 + ($8 * 12 | 0) >> 2] * $6;
 $33 = +HEAPF32[224 + ($8 * 12 | 0) + 4 >> 2] * $6;
 $36 = +HEAPF32[224 + ($8 * 12 | 0) + 8 >> 2] * $6;
 $$0120 = ($16 | 0) == ($18 | 0) & $5 == $6 & ($7 | 0) == ($8 | 0) ? 0 : $10;
 if (($$0120 | 0) > 0) {
  $53 = 2 - $18 | 0;
  $$0117127 = +HEAPF32[$1 + (~$18 << 2) >> 2];
  $$0118126 = +HEAPF32[$1 + (0 - $18 << 2) >> 2];
  $$0119125 = +HEAPF32[$1 + (1 - $18 << 2) >> 2];
  $$0121124 = 0;
  $$0128 = +HEAPF32[$1 + (-2 - $18 << 2) >> 2];
  while (1) {
   $56 = +HEAPF32[$1 + ($53 + $$0121124 << 2) >> 2];
   $58 = +HEAPF32[$9 + ($$0121124 << 2) >> 2];
   $59 = $58 * $58;
   $62 = 1.0 - $59;
   $64 = $$0121124 - $16 | 0;
   HEAPF32[$0 + ($$0121124 << 2) >> 2] = ($$0128 + $56) * ($36 * $59) + (($$0119125 + $$0117127) * ($33 * $59) + ($$0118126 * ($30 * $59) + (+HEAPF32[$1 + ($$0121124 << 2) >> 2] + +HEAPF32[$1 + ($64 << 2) >> 2] * ($21 * $62) + $24 * $62 * (+HEAPF32[$1 + ($64 + 1 << 2) >> 2] + +HEAPF32[$1 + ($64 + -1 << 2) >> 2]) + $27 * $62 * (+HEAPF32[$1 + ($64 + 2 << 2) >> 2] + +HEAPF32[$1 + ($64 + -2 << 2) >> 2]))));
   $$0121124 = $$0121124 + 1 | 0;
   if (($$0121124 | 0) == ($$0120 | 0)) {
    $$0121$lcssa = $$0120;
    break;
   } else {
    $$0118126$phi = $$0119125;
    $$0117127$phi = $$0118126;
    $$0119125 = $56;
    $$0128 = $$0117127;
    $$0118126 = $$0118126$phi;
    $$0117127 = $$0117127$phi;
   }
  }
 } else $$0121$lcssa = 0;
 if (!$12) {
  _comb_filter_const_c($0 + ($$0121$lcssa << 2) | 0, $1 + ($$0121$lcssa << 2) | 0, $18, $4 - $$0121$lcssa | 0, $30, $33, $36);
  return;
 }
 if (($1 | 0) == ($0 | 0)) return;
 _memmove($0 + ($$0120 << 2) | 0, $1 + ($$0120 << 2) | 0, $4 - $$0120 << 2 | 0) | 0;
 return;
}

function _silk_find_pitch_lags_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $34 = 0, $37 = 0.0, $4 = 0, $40 = 0.0, $42 = 0.0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1744 | 0;
 $4 = sp + 1664 | 0;
 $5 = sp + 1600 | 0;
 $6 = sp + 1536 | 0;
 $7 = sp;
 $8 = $0 + 4596 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $12 = (HEAP32[$0 + 4584 >> 2] | 0) + $9 | 0;
 $14 = HEAP32[$0 + 4592 >> 2] | 0;
 $15 = $12 + $14 | 0;
 $16 = $0 + 4548 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($15 | 0) < ($17 | 0)) _celt_fatal(46154, 46216, 59);
 $23 = $3 + ($12 << 2) + (0 - $17 << 2) | 0;
 _silk_apply_sine_window_FLP($7, $23, 1, $9);
 $24 = HEAP32[$8 >> 2] | 0;
 $25 = $7 + ($24 << 2) | 0;
 $26 = $23 + ($24 << 2) | 0;
 $29 = (HEAP32[$16 >> 2] | 0) - ($24 << 1) | 0;
 _memcpy($25 | 0, $26 | 0, $29 << 2 | 0) | 0;
 _silk_apply_sine_window_FLP($25 + ($29 << 2) | 0, $26 + ($29 << 2) | 0, 2, $24);
 $34 = $0 + 4648 | 0;
 _silk_autocorrelation_FLP($4, $7, HEAP32[$16 >> 2] | 0, (HEAP32[$34 >> 2] | 0) + 1 | 0);
 $37 = +HEAPF32[$4 >> 2];
 $40 = $37 + ($37 * 1.0000000474974513e-03 + 1.0);
 HEAPF32[$4 >> 2] = $40;
 $42 = +_silk_schur_FLP($6, $4, HEAP32[$34 >> 2] | 0);
 HEAPF32[$1 + 704 >> 2] = $40 / ($42 > 1.0 ? $42 : 1.0);
 _silk_k2a_FLP($5, $6, HEAP32[$34 >> 2] | 0);
 _silk_bwexpander_FLP($5, HEAP32[$34 >> 2] | 0, .9900000095367432);
 _silk_LPC_analysis_filter_FLP($2, $5, $3 + (0 - $14 << 2) | 0, $15, HEAP32[$34 >> 2] | 0);
 $50 = $0 + 4765 | 0;
 if (HEAP8[$50 >> 0] | 0) if (!(HEAP32[$0 + 4664 >> 2] | 0)) if (!(_silk_pitch_analysis_core_FLP($2, $1 + 228 | 0, $0 + 4762 | 0, $0 + 4764 | 0, $0 + 10060 | 0, HEAP32[$0 + 4544 >> 2] | 0, +(HEAP32[$0 + 4652 >> 2] | 0) * .0000152587890625, .6000000238418579 - +(HEAP32[$34 >> 2] | 0) * .004000000189989805 - +(HEAP32[$0 + 4532 >> 2] | 0) * .10000000149011612 * .00390625 - +(HEAP8[$0 + 4541 >> 0] >> 1 | 0) * .15000000596046448 - +(HEAP32[$0 + 4712 >> 2] | 0) * .10000000149011612 * .000030517578125, HEAP32[$0 + 4576 >> 2] | 0, HEAP32[$0 + 4644 >> 2] | 0, HEAP32[$0 + 4580 >> 2] | 0) | 0)) {
  HEAP8[$50 >> 0] = 2;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$50 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $97 = $1 + 228 | 0;
 HEAP32[$97 >> 2] = 0;
 HEAP32[$97 + 4 >> 2] = 0;
 HEAP32[$97 + 8 >> 2] = 0;
 HEAP32[$97 + 12 >> 2] = 0;
 HEAP16[$0 + 4762 >> 1] = 0;
 HEAP8[$0 + 4764 >> 0] = 0;
 HEAPF32[$0 + 10060 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _ec_enc_done($0) {
 $0 = $0 | 0;
 var $$052$lcssa = 0, $$05259 = 0, $$053$lcssa = 0, $$05358 = 0, $$1$lcssa = 0, $$15161 = 0, $$154 = 0, $$162 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $51 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $71 = 0, $72 = 0, $84 = 0, $9 = 0, $spec$select55 = 0, label = 0;
 $2 = HEAP32[$0 + 28 >> 2] | 0;
 $3 = Math_clz32($2 | 0) | 0;
 $4 = 2147483647 >>> $3;
 $6 = HEAP32[$0 + 32 >> 2] | 0;
 $9 = $4 + $6 & -2147483648 >> $3;
 $12 = ($9 | $4) >>> 0 < ($6 + $2 | 0) >>> 0;
 $13 = $4 >>> 1;
 $14 = ($12 ^ 1) & 1;
 $spec$select55 = $3 + $14 | 0;
 if (!$spec$select55) $$1$lcssa = 0; else {
  $19 = ~$spec$select55;
  $23 = $3 + ($19 >>> 0 > 4294967287 ? $19 : -9) + $14 + 8 | 0;
  $$15161 = $12 ? $9 : $13 + $6 & ~$13;
  $$162 = $spec$select55;
  while (1) {
   _ec_enc_carry_out($0, $$15161 >>> 23);
   if (($$162 | 0) > 8) {
    $$15161 = $$15161 << 8 & 2147483392;
    $$162 = $$162 + -8 | 0;
   } else break;
  }
  $$1$lcssa = ($23 & -8) - ($spec$select55 + -8) | 0;
 }
 if ((HEAP32[$0 + 40 >> 2] | 0) > -1) label = 7; else if (HEAP32[$0 + 36 >> 2] | 0) label = 7;
 if ((label | 0) == 7) _ec_enc_carry_out($0, 0);
 $39 = HEAP32[$0 + 12 >> 2] | 0;
 $41 = HEAP32[$0 + 16 >> 2] | 0;
 $43 = $0 + 44 | 0;
 if (($41 | 0) > 7) {
  $44 = ~$41;
  $47 = $41 + (($44 | 0) > -16 ? $44 : -16) + 8 | 0;
  $$05259 = $41;
  $$05358 = $39;
  while (1) {
   $49 = _ec_write_byte_at_end($0, $$05358 & 255) | 0;
   $51 = HEAP32[$43 >> 2] | $49;
   HEAP32[$43 >> 2] = $51;
   $$05358 = $$05358 >>> 8;
   if (($$05259 | 0) <= 15) break; else $$05259 = $$05259 + -8 | 0;
  }
  $$052$lcssa = $41 + -8 - ($47 & -8) | 0;
  $$053$lcssa = $$05358;
  $58 = $51;
 } else {
  $$052$lcssa = $41;
  $$053$lcssa = $39;
  $58 = HEAP32[$43 >> 2] | 0;
 }
 if ($58 | 0) return;
 $61 = $0 + 24 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $64 = $0 + 4 | 0;
 $67 = $0 + 8 | 0;
 _memset((HEAP32[$0 >> 2] | 0) + $62 | 0, 0, (HEAP32[$64 >> 2] | 0) - $62 - (HEAP32[$67 >> 2] | 0) | 0) | 0;
 if (($$052$lcssa | 0) <= 0) return;
 $71 = HEAP32[$67 >> 2] | 0;
 $72 = HEAP32[$64 >> 2] | 0;
 if ($72 >>> 0 <= $71 >>> 0) {
  HEAP32[$43 >> 2] = -1;
  return;
 }
 if (($$052$lcssa | 0) > ($$1$lcssa | 0) ? ((HEAP32[$61 >> 2] | 0) + $71 | 0) >>> 0 >= $72 >>> 0 : 0) {
  HEAP32[$43 >> 2] = -1;
  $$154 = $$053$lcssa & (1 << $$1$lcssa) + -1;
 } else $$154 = $$053$lcssa;
 $84 = (HEAP32[$0 >> 2] | 0) + ($72 + ~$71) | 0;
 HEAP8[$84 >> 0] = $$154 | (HEAPU8[$84 >> 0] | 0);
 return;
}

function _silk_insertion_sort_decreasing_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$06478 = 0, $$073 = 0, $$073$in = 0, $$1$lcssa$us = 0, $$16574 = 0, $$166$us = 0, $$269 = 0, $$269$us = 0, $$pre$phi87Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $27 = 0.0, $31 = 0.0, $33 = 0, $37 = 0, $42 = 0, $45 = 0.0, $8 = 0, $9 = 0, label = 0;
 if (($2 | 0) <= 0) _celt_fatal(47331, 47355, 50);
 if (($2 | 0) > 65) _celt_fatal(47401, 47355, 52);
 $$06478 = 0;
 do {
  HEAP32[$1 + ($$06478 << 2) >> 2] = $$06478;
  $$06478 = $$06478 + 1 | 0;
 } while (($$06478 | 0) != ($2 | 0));
 if (($2 | 0) <= 1) {
  $8 = $2 + -1 | 0;
  $9 = $0 + ($8 << 2) | 0;
  $10 = $1 + ($8 << 2) | 0;
  $$269 = $2;
  do {
   $45 = +HEAPF32[$0 + ($$269 << 2) >> 2];
   if ($45 > +HEAPF32[$9 >> 2]) {
    HEAPF32[$9 >> 2] = $45;
    HEAP32[$10 >> 2] = $$269;
   }
   $$269 = $$269 + 1 | 0;
  } while (($$269 | 0) != 65);
  return;
 }
 $$16574 = 1;
 do {
  $12 = +HEAPF32[$0 + ($$16574 << 2) >> 2];
  $$073$in = $$16574;
  while (1) {
   $$073 = $$073$in + -1 | 0;
   $13 = $0 + ($$073 << 2) | 0;
   $14 = +HEAPF32[$13 >> 2];
   $16 = $0 + ($$073$in << 2) | 0;
   if (!($12 > $14)) {
    label = 12;
    break;
   }
   HEAPF32[$16 >> 2] = $14;
   $17 = $1 + ($$073 << 2) | 0;
   HEAP32[$1 + ($$073$in << 2) >> 2] = HEAP32[$17 >> 2];
   if (($$073$in | 0) > 1) $$073$in = $$073; else {
    $$pre$phi87Z2D = $17;
    $$pre$phiZ2D = $13;
    break;
   }
  }
  if ((label | 0) == 12) {
   label = 0;
   $$pre$phi87Z2D = $1 + ($$073$in << 2) | 0;
   $$pre$phiZ2D = $16;
  }
  HEAPF32[$$pre$phiZ2D >> 2] = $12;
  HEAP32[$$pre$phi87Z2D >> 2] = $$16574;
  $$16574 = $$16574 + 1 | 0;
 } while (($$16574 | 0) != ($2 | 0));
 if (($2 | 0) >= 65) return;
 $24 = $0 + ($2 + -1 << 2) | 0;
 $25 = $2 + -2 | 0;
 $$269$us = $2;
 do {
  $27 = +HEAPF32[$0 + ($$269$us << 2) >> 2];
  if ($27 > +HEAPF32[$24 >> 2]) {
   $$166$us = $25;
   while (1) {
    $31 = +HEAPF32[$0 + ($$166$us << 2) >> 2];
    if (!($27 > $31)) {
     $$1$lcssa$us = $$166$us;
     break;
    }
    $37 = $$166$us + 1 | 0;
    HEAPF32[$0 + ($37 << 2) >> 2] = $31;
    HEAP32[$1 + ($37 << 2) >> 2] = HEAP32[$1 + ($$166$us << 2) >> 2];
    $42 = $$166$us + -1 | 0;
    if (($$166$us | 0) > 0) $$166$us = $42; else {
     $$1$lcssa$us = $42;
     break;
    }
   }
   $33 = $$1$lcssa$us + 1 | 0;
   HEAPF32[$0 + ($33 << 2) >> 2] = $27;
   HEAP32[$1 + ($33 << 2) >> 2] = $$269$us;
  }
  $$269$us = $$269$us + 1 | 0;
 } while (($$269$us | 0) != 65);
 return;
}

function _tf_encode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$050$lcssa = 0, $$05063 = 0, $$052 = 0, $$05362 = 0, $$05561 = 0, $$065 = 0, $$1 = 0, $$1$peel = 0, $$151 = 0, $$15460 = 0, $$156 = 0, $$156$peel = 0, $$idx58 = 0, $$idx59 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $47 = 0, $48 = 0, $9 = 0, $spec$select = 0;
 $9 = HEAP32[$6 + 4 >> 2] << 3;
 $$idx58 = $6 + 20 | 0;
 $$idx59 = $6 + 28 | 0;
 $10 = _ec_tell(HEAP32[$$idx58 >> 2] | 0, HEAP32[$$idx59 >> 2] | 0) | 0;
 $11 = ($2 | 0) != 0;
 $12 = $11 ? 2 : 4;
 $spec$select = ($4 | 0) > 0 & (($12 | 1) + $10 | 0) >>> 0 <= $9 >>> 0;
 $18 = $9 - ($spec$select & 1) | 0;
 $19 = ($0 | 0) < ($1 | 0);
 if ($19) {
  $20 = $11 ? 4 : 5;
  $23 = $3 + ($0 << 2) | 0;
  if (($10 + $12 | 0) >>> 0 > $18 >>> 0) {
   HEAP32[$23 >> 2] = 0;
   $$1$peel = $10;
   $$156$peel = 0;
  } else {
   _ec_enc_bit_logp($6, HEAP32[$23 >> 2] | 0, $12);
   $25 = _ec_tell(HEAP32[$$idx58 >> 2] | 0, HEAP32[$$idx59 >> 2] | 0) | 0;
   $$1$peel = $25;
   $$156$peel = HEAP32[$23 >> 2] | 0;
  }
  $27 = $0 + 1 | 0;
  if (($27 | 0) == ($1 | 0)) $$050$lcssa = $$156$peel; else {
   $$05063 = $$156$peel;
   $$05362 = $27;
   $$05561 = $$156$peel;
   $$065 = $$1$peel;
   while (1) {
    $30 = $3 + ($$05362 << 2) | 0;
    if (($$065 + $20 | 0) >>> 0 > $18 >>> 0) {
     HEAP32[$30 >> 2] = $$05561;
     $$1 = $$065;
     $$151 = $$05063;
     $$156 = $$05561;
    } else {
     _ec_enc_bit_logp($6, HEAP32[$30 >> 2] ^ $$05561, $20);
     $33 = _ec_tell(HEAP32[$$idx58 >> 2] | 0, HEAP32[$$idx59 >> 2] | 0) | 0;
     $34 = HEAP32[$30 >> 2] | 0;
     $$1 = $33;
     $$151 = $34 | $$05063;
     $$156 = $34;
    }
    $$05362 = $$05362 + 1 | 0;
    if (($$05362 | 0) == ($1 | 0)) {
     $$050$lcssa = $$151;
     break;
    } else {
     $$05063 = $$151;
     $$05561 = $$156;
     $$065 = $$1;
    }
   }
  }
 } else $$050$lcssa = 0;
 if ($spec$select) {
  $37 = $2 << 2;
  if ((HEAP8[$$050$lcssa + $37 + (192 + ($4 << 3)) >> 0] | 0) == (HEAP8[$$050$lcssa + ($37 | 2) + (192 + ($4 << 3)) >> 0] | 0)) $$052 = 0; else {
   _ec_enc_bit_logp($6, $5, 1);
   $$052 = $5 << 1;
  }
 } else $$052 = 0;
 if (!$19) return;
 $47 = $$052 + ($2 << 2) | 0;
 $$15460 = $0;
 do {
  $48 = $3 + ($$15460 << 2) | 0;
  HEAP32[$48 >> 2] = HEAP8[$47 + (HEAP32[$48 >> 2] | 0) + (192 + ($4 << 3)) >> 0];
  $$15460 = $$15460 + 1 | 0;
 } while (($$15460 | 0) != ($1 | 0));
 return;
}

function _kf_bfly2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$06061 = 0, $$062 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0, $$sroa$12$0$$sroa_idx8 = 0, $$sroa$12$0$copyload = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $17 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $23 = 0, $24 = 0.0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $35 = 0, $36 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $51 = 0, $52 = 0.0, $7 = 0, $8 = 0.0;
 if (($1 | 0) != 4) _celt_fatal(41205, 41228, 76);
 if (($2 | 0) <= 0) return;
 $$06061 = 0;
 $$062 = $0;
 while (1) {
  $$sroa$0$0$$sroa_idx = $$062 + 32 | 0;
  $$sroa$0$0$copyload = +HEAPF32[$$sroa$0$0$$sroa_idx >> 2];
  $$sroa$12$0$$sroa_idx8 = $$062 + 36 | 0;
  $$sroa$12$0$copyload = +HEAPF32[$$sroa$12$0$$sroa_idx8 >> 2];
  $5 = +HEAPF32[$$062 >> 2];
  HEAPF32[$$sroa$0$0$$sroa_idx >> 2] = $5 - $$sroa$0$0$copyload;
  $7 = $$062 + 4 | 0;
  $8 = +HEAPF32[$7 >> 2];
  HEAPF32[$$sroa$12$0$$sroa_idx8 >> 2] = $8 - $$sroa$12$0$copyload;
  HEAPF32[$$062 >> 2] = $$sroa$0$0$copyload + $5;
  HEAPF32[$7 >> 2] = $$sroa$12$0$copyload + $8;
  $12 = $$062 + 40 | 0;
  $13 = +HEAPF32[$12 >> 2];
  $14 = $$062 + 44 | 0;
  $15 = +HEAPF32[$14 >> 2];
  $17 = ($13 + $15) * .7071067690849304;
  $19 = ($15 - $13) * .7071067690849304;
  $20 = $$062 + 8 | 0;
  $21 = +HEAPF32[$20 >> 2];
  HEAPF32[$12 >> 2] = $21 - $17;
  $23 = $$062 + 12 | 0;
  $24 = +HEAPF32[$23 >> 2];
  HEAPF32[$14 >> 2] = $24 - $19;
  HEAPF32[$20 >> 2] = $21 + $17;
  HEAPF32[$23 >> 2] = $19 + $24;
  $28 = $$062 + 52 | 0;
  $29 = +HEAPF32[$28 >> 2];
  $30 = $$062 + 48 | 0;
  $31 = +HEAPF32[$30 >> 2];
  $32 = $$062 + 16 | 0;
  $33 = +HEAPF32[$32 >> 2];
  HEAPF32[$30 >> 2] = $33 - $29;
  $35 = $$062 + 20 | 0;
  $36 = +HEAPF32[$35 >> 2];
  HEAPF32[$28 >> 2] = $31 + $36;
  HEAPF32[$32 >> 2] = $29 + $33;
  HEAPF32[$35 >> 2] = $36 - $31;
  $40 = $$062 + 60 | 0;
  $41 = +HEAPF32[$40 >> 2];
  $42 = $$062 + 56 | 0;
  $43 = +HEAPF32[$42 >> 2];
  $45 = ($41 - $43) * .7071067690849304;
  $47 = ($41 + $43) * -.7071067690849304;
  $48 = $$062 + 24 | 0;
  $49 = +HEAPF32[$48 >> 2];
  HEAPF32[$42 >> 2] = $49 - $45;
  $51 = $$062 + 28 | 0;
  $52 = +HEAPF32[$51 >> 2];
  HEAPF32[$40 >> 2] = $52 - $47;
  HEAPF32[$48 >> 2] = $49 + $45;
  HEAPF32[$51 >> 2] = $47 + $52;
  $$06061 = $$06061 + 1 | 0;
  if (($$06061 | 0) == ($2 | 0)) break; else $$062 = $$062 + 64 | 0;
 }
 return;
}

function _silk_P_Ana_calc_energy_st3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$06196 = 0, $$06280$us = 0, $$06395 = 0, $$06472$us = 0.0, $$06578$us = 0, $$06694 = 0, $$06771$us = 0, $$097 = 0, $$174$us = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0.0, $26 = 0, $31 = 0.0, $37 = 0.0, $43 = 0, $45 = 0, $6 = 0, $scevgep = 0, $scevgep87 = 0, $scevgep88 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $6 = sp;
 if (($5 | 0) <= -1) _celt_fatal(46737, 46700, 575);
 if (($5 | 0) >= 3) _celt_fatal(46789, 46700, 576);
 switch ($4 | 0) {
 case 4:
  {
   $$06196 = 27248 + ($5 << 3) | 0;
   $$06395 = 34;
   $$06694 = HEAP8[45395 + $5 >> 0] | 0;
   $$097 = 27104;
   break;
  }
 case 2:
  {
   $$06196 = 45391;
   $$06395 = 12;
   $$06694 = 12;
   $$097 = 27024;
   break;
  }
 default:
  _celt_fatal(47197, 46700, 584);
 }
 $$06280$us = $1 + ($3 << 2 << 2) | 0;
 $$06578$us = 0;
 while (1) {
  $14 = $$06578$us << 1;
  $16 = HEAP8[$$06196 + $14 >> 0] | 0;
  $17 = $16 << 24 >> 24;
  $20 = $$06280$us + (0 - ($17 + $2) << 2) | 0;
  $22 = +_silk_energy_FLP($20, $3) + .001;
  HEAPF32[$6 >> 2] = $22;
  $26 = HEAP8[$$06196 + ($14 | 1) >> 0] | 0;
  if ($26 << 24 >> 24 > $16 << 24 >> 24) {
   $43 = ($26 << 24 >> 24) + 1 - $17 | 0;
   $$06472$us = $22;
   $$06771$us = 1;
   do {
    $31 = +HEAPF32[$20 + ($3 - $$06771$us << 2) >> 2];
    $37 = +HEAPF32[$20 + (0 - $$06771$us << 2) >> 2];
    $$06472$us = $$06472$us - $31 * $31 + $37 * $37;
    HEAPF32[$6 + ($$06771$us << 2) >> 2] = $$06472$us;
    $$06771$us = $$06771$us + 1 | 0;
   } while (($$06771$us | 0) != ($43 | 0));
  }
  $45 = Math_imul($$06578$us, $$06395) | 0;
  $scevgep87 = $6 + (0 - $17 << 2) | 0;
  $$174$us = 0;
  do {
   $scevgep = $0 + ($$06578$us * 680 | 0) + ($$174$us * 20 | 0) | 0;
   $scevgep88 = $scevgep87 + (HEAP8[$$097 + ($$174$us + $45) >> 0] << 2) | 0;
   HEAP32[$scevgep >> 2] = HEAP32[$scevgep88 >> 2];
   HEAP32[$scevgep + 4 >> 2] = HEAP32[$scevgep88 + 4 >> 2];
   HEAP32[$scevgep + 8 >> 2] = HEAP32[$scevgep88 + 8 >> 2];
   HEAP32[$scevgep + 12 >> 2] = HEAP32[$scevgep88 + 12 >> 2];
   HEAP32[$scevgep + 16 >> 2] = HEAP32[$scevgep88 + 16 >> 2];
   $$174$us = $$174$us + 1 | 0;
  } while (($$174$us | 0) != ($$06694 | 0));
  $$06578$us = $$06578$us + 1 | 0;
  if (($$06578$us | 0) == ($4 | 0)) break; else $$06280$us = $$06280$us + ($3 << 2) | 0;
 }
 STACKTOP = sp;
 return;
}

function _compute_mdcts($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$069$us = 0, $$07080$us = 0, $$07177 = 0, $$07388 = 0, $$07487 = 0, $$089 = 0, $$1 = 0, $$1$us = 0, $$17276$us = 0, $$pn = 0, $12 = 0, $13 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $38 = 0, $40 = 0, $50 = 0, $53 = 0, $54 = 0.0, $55 = 0, $57 = 0, $9 = 0, label = 0;
 $9 = HEAP32[$0 + 4 >> 2] | 0;
 $12 = HEAP32[$0 + 44 >> 2] | 0;
 if (!$1) {
  $13 = $12 << $6;
  $$07388 = (HEAP32[$0 + 36 >> 2] | 0) - $6 | 0;
  $$07487 = 1;
  $$089 = $13;
  $$pn = $13;
  label = 4;
 } else {
  $20 = Math_imul($12, $1) | 0;
  if (($1 | 0) > 0) {
   $$07388 = HEAP32[$0 + 36 >> 2] | 0;
   $$07487 = $1;
   $$089 = $12;
   $$pn = $20;
   label = 4;
  } else $38 = $20;
 }
 if ((label | 0) == 4) {
  $21 = $0 + 64 | 0;
  $22 = $$pn + $9 | 0;
  $23 = $0 + 60 | 0;
  $$069$us = 0;
  do {
   $25 = $2 + ((Math_imul($$069$us, $22) | 0) << 2) | 0;
   $26 = Math_imul($$pn, $$069$us) | 0;
   $$07080$us = 0;
   do {
    $28 = $25 + ((Math_imul($$07080$us, $$089) | 0) << 2) | 0;
    _clt_mdct_forward_c($21, $28, $3 + ($$07080$us + $26 << 2) | 0, HEAP32[$23 >> 2] | 0, $9, $$07388, $$07487);
    $$07080$us = $$07080$us + 1 | 0;
   } while (($$07080$us | 0) < ($$07487 | 0));
   $$069$us = $$069$us + 1 | 0;
  } while (($$069$us | 0) < ($5 | 0));
  $38 = $$pn;
 }
 if (($4 | 0) == 1 & ($5 | 0) == 2 & ($38 | 0) > 0) {
  $$07177 = 0;
  do {
   $40 = $3 + ($$07177 << 2) | 0;
   HEAPF32[$40 >> 2] = +HEAPF32[$40 >> 2] * .5 + +HEAPF32[$3 + ($$07177 + $38 << 2) >> 2] * .5;
   $$07177 = $$07177 + 1 | 0;
  } while (($$07177 | 0) != ($38 | 0));
 }
 if (($7 | 0) == 1) return;
 $50 = ($38 | 0) / ($7 | 0) | 0;
 $53 = $38 - $50 << 2;
 $54 = +($7 | 0);
 if (($50 | 0) <= 0) {
  $$1 = 0;
  do {
   _memset($3 + ((Math_imul($38, $$1) | 0) + $50 << 2) | 0, 0, $53 | 0) | 0;
   $$1 = $$1 + 1 | 0;
  } while (($$1 | 0) < ($4 | 0));
  return;
 }
 $$1$us = 0;
 do {
  $55 = Math_imul($38, $$1$us) | 0;
  $$17276$us = 0;
  do {
   $57 = $3 + ($$17276$us + $55 << 2) | 0;
   HEAPF32[$57 >> 2] = +HEAPF32[$57 >> 2] * $54;
   $$17276$us = $$17276$us + 1 | 0;
  } while (($$17276$us | 0) != ($50 | 0));
  _memset($3 + ($55 + $50 << 2) | 0, 0, $53 | 0) | 0;
  $$1$us = $$1$us + 1 | 0;
 } while (($$1$us | 0) < ($4 | 0));
 return;
}

function _silk_P_Ana_calc_corr_st3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$05080 = 0, $$05179 = 0, $$05267$us = 0, $$05361$us = 0, $$05478 = 0, $$05559$us = 0, $$05665$us = 0, $$05758$us = 0, $$081 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $38 = 0, $6 = 0, $7 = 0, $scevgep = 0, $scevgep73 = 0, $scevgep74 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $6 = sp + 96 | 0;
 $7 = sp;
 if (($5 | 0) <= -1) _celt_fatal(46737, 46700, 509);
 if (($5 | 0) >= 3) _celt_fatal(46789, 46700, 510);
 switch ($4 | 0) {
 case 4:
  {
   $$05080 = 27248 + ($5 << 3) | 0;
   $$05179 = 34;
   $$05478 = HEAP8[45395 + $5 >> 0] | 0;
   $$081 = 27104;
   break;
  }
 case 2:
  {
   $$05080 = 45391;
   $$05179 = 12;
   $$05478 = 12;
   $$081 = 27024;
   break;
  }
 default:
  _celt_fatal(47197, 46700, 518);
 }
 $15 = 0 - $2 | 0;
 $$05267$us = $1 + ($3 << 2 << 2) | 0;
 $$05665$us = 0;
 while (1) {
  $16 = $$05665$us << 1;
  $18 = HEAP8[$$05080 + $16 >> 0] | 0;
  $19 = $18 << 24 >> 24;
  $22 = HEAP8[$$05080 + ($16 | 1) >> 0] | 0;
  $23 = $22 << 24 >> 24;
  _celt_pitch_xcorr_c($$05267$us, $$05267$us + ($15 << 2) + (0 - $23 << 2) | 0, $7, $3, 1 - $19 + $23 | 0);
  if ($18 << 24 >> 24 <= $22 << 24 >> 24) {
   $$05559$us = $19;
   $$05758$us = 0;
   while (1) {
    HEAP32[$6 + ($$05758$us << 2) >> 2] = HEAP32[$7 + ($23 - $$05559$us << 2) >> 2];
    if (($$05559$us | 0) < ($23 | 0)) {
     $$05559$us = $$05559$us + 1 | 0;
     $$05758$us = $$05758$us + 1 | 0;
    } else break;
   }
  }
  $38 = Math_imul($$05665$us, $$05179) | 0;
  $scevgep73 = $6 + (0 - $19 << 2) | 0;
  $$05361$us = 0;
  do {
   $scevgep = $0 + ($$05665$us * 680 | 0) + ($$05361$us * 20 | 0) | 0;
   $scevgep74 = $scevgep73 + (HEAP8[$$081 + ($$05361$us + $38) >> 0] << 2) | 0;
   HEAP32[$scevgep >> 2] = HEAP32[$scevgep74 >> 2];
   HEAP32[$scevgep + 4 >> 2] = HEAP32[$scevgep74 + 4 >> 2];
   HEAP32[$scevgep + 8 >> 2] = HEAP32[$scevgep74 + 8 >> 2];
   HEAP32[$scevgep + 12 >> 2] = HEAP32[$scevgep74 + 12 >> 2];
   HEAP32[$scevgep + 16 >> 2] = HEAP32[$scevgep74 + 16 >> 2];
   $$05361$us = $$05361$us + 1 | 0;
  } while (($$05361$us | 0) != ($$05478 | 0));
  $$05665$us = $$05665$us + 1 | 0;
  if (($$05665$us | 0) == ($4 | 0)) break; else $$05267$us = $$05267$us + ($3 << 2) | 0;
 }
 STACKTOP = sp;
 return;
}

function _tf_decode($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$045$lcssa = 0, $$04558 = 0, $$04757 = 0, $$049 = 0, $$05056 = 0, $$060 = 0, $$1 = 0, $$1$peel = 0, $$146 = 0, $$14855 = 0, $$151 = 0, $$151$peel = 0, $$idx53 = 0, $$idx54 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $34 = 0, $45 = 0, $46 = 0, $8 = 0, $9 = 0, $spec$select = 0;
 $8 = HEAP32[$5 + 4 >> 2] << 3;
 $$idx53 = $5 + 20 | 0;
 $$idx54 = $5 + 28 | 0;
 $9 = _ec_tell_40(HEAP32[$$idx53 >> 2] | 0, HEAP32[$$idx54 >> 2] | 0) | 0;
 $10 = ($2 | 0) != 0;
 $11 = $10 ? 2 : 4;
 $spec$select = ($4 | 0) > 0 & (($11 | 1) + $9 | 0) >>> 0 <= $8 >>> 0;
 $17 = $8 - ($spec$select & 1) | 0;
 $18 = ($0 | 0) < ($1 | 0);
 if ($18) {
  $19 = $10 ? 4 : 5;
  if (($9 + $11 | 0) >>> 0 > $17 >>> 0) {
   $$1$peel = $9;
   $$151$peel = 0;
  } else {
   $22 = _ec_dec_bit_logp($5, $11) | 0;
   $$1$peel = _ec_tell_40(HEAP32[$$idx53 >> 2] | 0, HEAP32[$$idx54 >> 2] | 0) | 0;
   $$151$peel = $22;
  }
  HEAP32[$3 + ($0 << 2) >> 2] = $$151$peel;
  $25 = $0 + 1 | 0;
  if (($25 | 0) == ($1 | 0)) $$045$lcssa = $$151$peel; else {
   $$04558 = $$151$peel;
   $$04757 = $25;
   $$05056 = $$151$peel;
   $$060 = $$1$peel;
   while (1) {
    if (($$060 + $19 | 0) >>> 0 > $17 >>> 0) {
     $$1 = $$060;
     $$146 = $$04558;
     $$151 = $$05056;
    } else {
     $29 = (_ec_dec_bit_logp($5, $19) | 0) ^ $$05056;
     $$1 = _ec_tell_40(HEAP32[$$idx53 >> 2] | 0, HEAP32[$$idx54 >> 2] | 0) | 0;
     $$146 = $29 | $$04558;
     $$151 = $29;
    }
    HEAP32[$3 + ($$04757 << 2) >> 2] = $$151;
    $$04757 = $$04757 + 1 | 0;
    if (($$04757 | 0) == ($1 | 0)) {
     $$045$lcssa = $$146;
     break;
    } else {
     $$04558 = $$146;
     $$05056 = $$151;
     $$060 = $$1;
    }
   }
  }
 } else $$045$lcssa = 0;
 if ($spec$select) {
  $34 = $2 << 2;
  if ((HEAP8[$$045$lcssa + $34 + (192 + ($4 << 3)) >> 0] | 0) == (HEAP8[$$045$lcssa + ($34 | 2) + (192 + ($4 << 3)) >> 0] | 0)) $$049 = 0; else $$049 = (_ec_dec_bit_logp($5, 1) | 0) << 1;
 } else $$049 = 0;
 if (!$18) return;
 $45 = $$049 + ($2 << 2) | 0;
 $$14855 = $0;
 do {
  $46 = $3 + ($$14855 << 2) | 0;
  HEAP32[$46 >> 2] = HEAP8[$45 + (HEAP32[$46 >> 2] | 0) + (192 + ($4 << 3)) >> 0];
  $$14855 = $$14855 + 1 | 0;
 } while (($$14855 | 0) != ($1 | 0));
 return;
}

function _silk_stereo_find_predictor($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $49 = 0, $6 = 0, $66 = 0, $7 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $spec$select56 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 _silk_sum_sqr_shift($8, $6, $1, $4);
 _silk_sum_sqr_shift($9, $7, $2, $4);
 $10 = HEAP32[$6 >> 2] | 0;
 $11 = HEAP32[$7 >> 2] | 0;
 $12 = _silk_max_int_525($10, $11) | 0;
 $14 = ($12 & 1) + $12 | 0;
 $17 = HEAP32[$9 >> 2] >> $14 - $11;
 $21 = _silk_max_int_525(HEAP32[$8 >> 2] >> $14 - $10, 1) | 0;
 $22 = _silk_inner_prod_aligned_scale($1, $2, $14, $4) | 0;
 $23 = _silk_DIV32_varQ_526($22, $21, 13) | 0;
 $25 = ($23 | 0) > -16384 ? $23 : -16384;
 $27 = ($25 | 0) < 16384 ? $25 : 16384;
 $29 = $27 << 16 >> 16;
 $34 = ((Math_imul($29, $27 & 65535) | 0) >> 16) + (Math_imul($29, $27 >> 16) | 0) | 0;
 $38 = _silk_max_int_525($5, ($34 | 0) > 0 ? $34 : 0 - $34 | 0) | 0;
 $39 = $14 >> 1;
 $40 = HEAP32[$3 >> 2] | 0;
 $42 = (_silk_SQRT_APPROX_527($21) | 0) << $39;
 $46 = $38 << 16 >> 16;
 $47 = Math_imul($42 - (HEAP32[$3 >> 2] | 0) >> 16, $46) | 0;
 $49 = (_silk_SQRT_APPROX_527($21) | 0) << $39;
 HEAP32[$3 >> 2] = $47 + $40 + ((Math_imul($49 - (HEAP32[$3 >> 2] | 0) & 65535, $46) | 0) >> 16);
 $66 = $34 << 16 >> 16;
 $73 = (((Math_imul($66, $21 & 65535) | 0) >> 16) + (Math_imul($66, $21 >> 16) | 0) << 6) + ($17 - (((Math_imul($29, $22 & 65535) | 0) >> 16) + (Math_imul($29, $22 >> 16) | 0) << 4)) | 0;
 $74 = $3 + 4 | 0;
 $75 = HEAP32[$74 >> 2] | 0;
 $77 = (_silk_SQRT_APPROX_527($73) | 0) << $39;
 $81 = Math_imul($77 - (HEAP32[$74 >> 2] | 0) >> 16, $46) | 0;
 $83 = (_silk_SQRT_APPROX_527($73) | 0) << $39;
 $90 = $81 + $75 + ((Math_imul($83 - (HEAP32[$74 >> 2] | 0) & 65535, $46) | 0) >> 16) | 0;
 HEAP32[$74 >> 2] = $90;
 $91 = HEAP32[$3 >> 2] | 0;
 $93 = _silk_DIV32_varQ_526($90, ($91 | 0) > 1 ? $91 : 1, 14) | 0;
 $spec$select56 = ($93 | 0) > 0 ? $93 : 0;
 HEAP32[$0 >> 2] = ($spec$select56 | 0) < 32767 ? $spec$select56 : 32767;
 STACKTOP = sp;
 return $27 | 0;
}

function _decide_fec($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$028 = 0, $$028$shrunk = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $22 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $40 = 0, $47 = 0, $49 = 0, $54 = 0, $61 = 0, $62 = 0, $69 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($3 | 0) == 1002) {
  $$028$shrunk = 0;
  $$028 = $$028$shrunk & 1;
  return $$028 | 0;
 }
 $9 = HEAP32[$4 >> 2] | 0;
 $12 = 125 - (($1 | 0) < 25 ? $1 : 25) | 0;
 $13 = ($1 | 0) < 6;
 L4 : do switch ($2 | 0) {
 case 1:
  {
   $15 = $9;
   while (1) {
    $14 = $15 << 1;
    $22 = Math_imul((HEAP32[27904 + ($14 + -2202 << 2) >> 2] | 0) - (HEAP32[27904 + ($14 + -2201 << 2) >> 2] | 0) | 0, $12) | 0;
    $29 = (((($22 & 65535) * 655 | 0) >>> 16) + (($22 >> 16) * 655 | 0) | 0) < ($5 | 0);
    if ($29 | $13) {
     $$028$shrunk = $29;
     break;
    }
    if (($15 | 0) <= 1101) break L4;
    $31 = $15 + -1 | 0;
    HEAP32[$4 >> 2] = $31;
    $15 = $31;
   }
   $$028 = $$028$shrunk & 1;
   return $$028 | 0;
  }
 case 0:
  {
   $33 = $9;
   while (1) {
    $32 = $33 << 1;
    $40 = Math_imul((HEAP32[27904 + ($32 + -2202 << 2) >> 2] | 0) + (HEAP32[27904 + ($32 + -2201 << 2) >> 2] | 0) | 0, $12) | 0;
    $47 = (((($40 & 65535) * 655 | 0) >>> 16) + (($40 >> 16) * 655 | 0) | 0) < ($5 | 0);
    if ($47 | $13) {
     $$028$shrunk = $47;
     break;
    }
    if (($33 | 0) <= 1101) break L4;
    $49 = $33 + -1 | 0;
    HEAP32[$4 >> 2] = $49;
    $33 = $49;
   }
   $$028 = $$028$shrunk & 1;
   return $$028 | 0;
  }
 default:
  {
   $54 = Math_imul(HEAP32[27904 + (($9 << 1) + -2202 << 2) >> 2] | 0, $12) | 0;
   $61 = (((($54 & 65535) * 655 | 0) >>> 16) + (($54 >> 16) * 655 | 0) | 0) < ($5 | 0);
   if ($61 | $13) {
    $$028$shrunk = $61;
    $$028 = $$028$shrunk & 1;
    return $$028 | 0;
   }
   $62 = $9;
   while (1) {
    if (($62 | 0) <= 1101) break L4;
    $62 = $62 + -1 | 0;
    HEAP32[$4 >> 2] = $62;
    $69 = Math_imul(HEAP32[27904 + (($62 << 1) + -2202 << 2) >> 2] | 0, $12) | 0;
    if ((((($69 & 65535) * 655 | 0) >>> 16) + (($69 >> 16) * 655 | 0) | 0) < ($5 | 0)) {
     $$028$shrunk = 1;
     break;
    }
   }
   $$028 = $$028$shrunk & 1;
   return $$028 | 0;
  }
 } while (0);
 HEAP32[$4 >> 2] = $9;
 $$028$shrunk = 0;
 $$028 = $$028$shrunk & 1;
 return $$028 | 0;
}

function _find_best_pitch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$05059 = 0, $$051$lcssa = 0.0, $$05158 = 0.0, $$057 = 0, $$152 = 0.0, $$sroa$0$056 = 0.0, $$sroa$0$1 = 0.0, $$sroa$08$054 = 0.0, $$sroa$08$1 = 0.0, $$sroa$4$055 = 0.0, $$sroa$4$1 = 0.0, $$sroa$410$053 = 0.0, $$sroa$410$1 = 0.0, $10 = 0.0, $14 = 0.0, $16 = 0.0, $17 = 0.0, $24 = 0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $37 = 0, $5 = 0, $8 = 0.0;
 HEAP32[$4 >> 2] = 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 1;
 if (($2 | 0) > 0) {
  $$05059 = 0;
  $$05158 = 1.0;
  while (1) {
   $8 = +HEAPF32[$1 + ($$05059 << 2) >> 2];
   $10 = $$05158 + $8 * $8;
   $$05059 = $$05059 + 1 | 0;
   if (($$05059 | 0) == ($2 | 0)) {
    $$051$lcssa = $10;
    break;
   } else $$05158 = $10;
  }
 } else $$051$lcssa = 1.0;
 if (($3 | 0) <= 0) return;
 $$057 = 0;
 $$152 = $$051$lcssa;
 $$sroa$0$056 = 0.0;
 $$sroa$08$054 = -1.0;
 $$sroa$4$055 = 0.0;
 $$sroa$410$053 = -1.0;
 $24 = 0;
 while (1) {
  $14 = +HEAPF32[$0 + ($$057 << 2) >> 2];
  do if ($14 > 0.0) {
   $16 = $14 * 9.999999960041972e-13;
   $17 = $16 * $16;
   if ($$sroa$4$055 * $17 > $$152 * $$sroa$410$053) if ($$sroa$0$056 * $17 > $$152 * $$sroa$08$054) {
    HEAP32[$5 >> 2] = $24;
    HEAP32[$4 >> 2] = $$057;
    $$sroa$0$1 = $$152;
    $$sroa$08$1 = $17;
    $$sroa$4$1 = $$sroa$0$056;
    $$sroa$410$1 = $$sroa$08$054;
    $37 = $$057;
    break;
   } else {
    HEAP32[$5 >> 2] = $$057;
    $$sroa$0$1 = $$sroa$0$056;
    $$sroa$08$1 = $$sroa$08$054;
    $$sroa$4$1 = $$152;
    $$sroa$410$1 = $17;
    $37 = $24;
    break;
   } else {
    $$sroa$0$1 = $$sroa$0$056;
    $$sroa$08$1 = $$sroa$08$054;
    $$sroa$4$1 = $$sroa$4$055;
    $$sroa$410$1 = $$sroa$410$053;
    $37 = $24;
   }
  } else {
   $$sroa$0$1 = $$sroa$0$056;
   $$sroa$08$1 = $$sroa$08$054;
   $$sroa$4$1 = $$sroa$4$055;
   $$sroa$410$1 = $$sroa$410$053;
   $37 = $24;
  } while (0);
  $27 = +HEAPF32[$1 + ($$057 + $2 << 2) >> 2];
  $30 = +HEAPF32[$1 + ($$057 << 2) >> 2];
  $33 = $$152 + ($27 * $27 - $30 * $30);
  $$057 = $$057 + 1 | 0;
  if (($$057 | 0) == ($3 | 0)) break; else {
   $$152 = $33 < 1.0 ? 1.0 : $33;
   $$sroa$0$056 = $$sroa$0$1;
   $$sroa$08$054 = $$sroa$08$1;
   $$sroa$4$055 = $$sroa$4$1;
   $$sroa$410$053 = $$sroa$410$1;
   $24 = $37;
  }
 }
 return;
}

function _silk_gains_quant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$092 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $25 = 0, $29 = 0, $31 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $spec$select8791 = 0, $storemerge$in = 0;
 if (($4 | 0) <= 0) return;
 $$092 = 0;
 do {
  $6 = $1 + ($$092 << 2) | 0;
  _silk_lin2log(HEAP32[$6 >> 2] | 0) | 0;
  $13 = ((((_silk_lin2log(HEAP32[$6 >> 2] | 0) | 0) << 16) + -136970240 >> 16) * 2251 | 0) >>> 16;
  $14 = $13 & 255;
  $15 = $0 + $$092 | 0;
  HEAP8[$15 >> 0] = $14;
  if (($13 << 24 >> 24 | 0) < (HEAP8[$2 >> 0] | 0)) {
   $20 = $14 + 1 << 24 >> 24;
   HEAP8[$15 >> 0] = $20;
   $21 = $20;
  } else $21 = $14;
  $25 = $21 << 24 >> 24 > 63 ? 63 : ($21 << 24 >> 24 > 0 ? $21 : 0) & 255;
  HEAP8[$15 >> 0] = $25;
  $29 = HEAP8[$2 >> 0] | 0;
  if (!($$092 | $3)) {
   $31 = ($29 << 24 >> 24) + -4 | 0;
   if ($29 << 24 >> 24 > 67) $38 = ($25 | 0) > ($31 | 0) ? $31 : $25 >>> 0 > 63 ? $25 : 63; else $38 = $25 >>> 0 > 63 ? 63 : ($25 | 0) < ($31 | 0) ? $31 : $25;
   $37 = $38 & 255;
   HEAP8[$15 >> 0] = $37;
   HEAP8[$2 >> 0] = $37;
   $74 = $37;
  } else {
   $40 = $25 - ($29 & 255) | 0;
   $41 = $40 & 255;
   HEAP8[$15 >> 0] = $41;
   $43 = HEAP8[$2 >> 0] | 0;
   $44 = $43 + 8 | 0;
   $45 = $40 << 24 >> 24;
   if (($45 | 0) > ($44 | 0)) {
    $51 = (($45 + 1 + (504 - $43) | 0) >>> 1) + $44 & 255;
    HEAP8[$15 >> 0] = $51;
    $52 = $51;
   } else $52 = $41;
   $spec$select8791 = $52 << 24 >> 24 > -4 ? $52 : -4;
   $55 = $spec$select8791 << 24 >> 24 < 36 ? $spec$select8791 : 36;
   $56 = $55 << 24 >> 24;
   HEAP8[$15 >> 0] = $55;
   if (($44 | 0) < ($56 | 0)) {
    $62 = ($56 << 1) - $44 + (HEAPU8[$2 >> 0] | 0) | 0;
    HEAP8[$2 >> 0] = $62;
    $storemerge$in = _silk_min_int($62 << 24 >> 24) | 0;
   } else $storemerge$in = (HEAPU8[$2 >> 0] | 0) + $56 | 0;
   HEAP8[$2 >> 0] = $storemerge$in;
   HEAP8[$15 >> 0] = (HEAPU8[$15 >> 0] | 0) + 4;
   $74 = HEAP8[$2 >> 0] | 0;
  }
  $73 = $74 << 24 >> 24;
  HEAP32[$6 >> 2] = _silk_log2lin(_silk_min_32(($73 * 29 | 0) + 2090 + ($73 * 7281 >> 16) | 0) | 0) | 0;
  $$092 = $$092 + 1 | 0;
 } while (($$092 | 0) != ($4 | 0));
 return;
}

function _validate_opus_decoder($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 >= 2) _celt_fatal(48518, 47468, 84);
 $4 = HEAP32[$0 + 12 >> 2] | 0;
 L4 : do if (($4 | 0) < 16e3) if (($4 | 0) < 12e3) {
  switch ($4 | 0) {
  case 8e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48575, 47468, 85);
 } else {
  switch ($4 | 0) {
  case 12e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48575, 47468, 85);
 } else {
  if (($4 | 0) < 24e3) {
   switch ($4 | 0) {
   case 16e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48575, 47468, 85);
  }
  if (($4 | 0) < 48e3) {
   switch ($4 | 0) {
   case 24e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48575, 47468, 85);
  } else {
   switch ($4 | 0) {
   case 48e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48575, 47468, 85);
  }
 } while (0);
 if ((HEAP32[$0 + 24 >> 2] | 0) != ($4 | 0)) _celt_fatal(48684, 47468, 86);
 $9 = HEAP32[$0 + 28 >> 2] | 0;
 L25 : do if (($9 | 0) < 12e3) if (($9 | 0) < 8e3) {
  switch ($9 | 0) {
  case 0:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48742, 47468, 87);
 } else {
  switch ($9 | 0) {
  case 8e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48742, 47468, 87);
 } else if (($9 | 0) < 16e3) {
  switch ($9 | 0) {
  case 12e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48742, 47468, 87);
 } else {
  switch ($9 | 0) {
  case 16e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(48742, 47468, 87);
 } while (0);
 if ((HEAP32[$0 + 16 >> 2] | 0) != ($2 | 0)) _celt_fatal(48936, 47468, 88);
 if ((HEAP32[$0 + 20 >> 2] | 0) >>> 0 >= 3) _celt_fatal(48998, 47468, 89);
 switch (HEAP32[$0 + 32 >> 2] | 0) {
 case 60:
 case 40:
 case 20:
 case 10:
 case 0:
  break;
 default:
  _celt_fatal(49136, 47468, 90);
 }
 $18 = HEAP32[$0 + 44 >> 2] | 0;
 if (($18 | 0) <= -1) _celt_fatal(49345, 47468, 92);
 if ($18 | 0) _celt_fatal(49377, 47468, 93);
 if (((HEAP32[$0 + 48 >> 2] | 0) + -1 | 0) >>> 0 < 2) return; else _celt_fatal(49421, 47468, 95);
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $26 = $17;
  while (1) {
   if (($26 | 0) < 0) break;
   $$04855 = $$04855 - $26 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $26 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $26 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($26 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _downmix_and_resample($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0.0, $$050 = 0, $$051 = 0.0, $$05256 = 0, $$053 = 0.0, $$054 = 0, $$155 = 0, $10 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 if (!$4) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $10 = ($8 | 0) == 48e3;
 if ($10) {
  $$050 = $4 << 1;
  $$054 = $5 << 1;
 } else if (($8 | 0) == 16e3) {
  $$050 = ($4 << 1 | 0) / 3 | 0;
  $$054 = ($5 << 1 | 0) / 3 | 0;
 } else {
  $$050 = $4;
  $$054 = $5;
 }
 $18 = _llvm_stacksave() | 0;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$050 << 2) | 0) + 15 & -16) | 0;
 FUNCTION_TABLE_viiiiiii[$0 & 1]($1, $19, $$050, $$054, 0, $6, $7);
 if (($6 | 0) == -2) $$053 = .000030517578125 / +($7 | 0); else $$053 = ($6 | 0) > -1 ? .0000152587890625 : .000030517578125;
 $24 = ($$050 | 0) > 0;
 if ($24) {
  $$05256 = 0;
  do {
   $25 = $19 + ($$05256 << 2) | 0;
   HEAPF32[$25 >> 2] = $$053 * +HEAPF32[$25 >> 2];
   $$05256 = $$05256 + 1 | 0;
  } while (($$05256 | 0) != ($$050 | 0));
 }
 L18 : do if ($10) $$051 = +_silk_resampler_down2_hp($3, $2, $19, $$050); else {
  if (($8 | 0) >= 24e3) {
   switch ($8 | 0) {
   case 24e3:
    break;
   default:
    {
     $$051 = 0.0;
     break L18;
    }
   }
   _memcpy($2 | 0, $19 | 0, $$050 << 2 | 0) | 0;
   $$051 = 0.0;
   break;
  }
  switch ($8 | 0) {
  case 16e3:
   break;
  default:
   {
    $$051 = 0.0;
    break L18;
   }
  }
  $31 = $$050 * 3 | 0;
  $32 = _llvm_stacksave() | 0;
  $33 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($31 << 2) | 0) + 15 & -16) | 0;
  if ($24) {
   $$155 = 0;
   do {
    $35 = HEAP32[$19 + ($$155 << 2) >> 2] | 0;
    $36 = $$155 * 3 | 0;
    HEAP32[$33 + ($36 << 2) >> 2] = $35;
    HEAP32[$33 + ($36 + 1 << 2) >> 2] = $35;
    HEAP32[$33 + ($36 + 2 << 2) >> 2] = $35;
    $$155 = $$155 + 1 | 0;
   } while (($$155 | 0) != ($$050 | 0));
  }
  +_silk_resampler_down2_hp($3, $2, $33, $31);
  _llvm_stackrestore($32 | 0);
  $$051 = 0.0;
 } while (0);
 _llvm_stackrestore($18 | 0);
 $$0 = $$051;
 STACKTOP = sp;
 return +$$0;
}

function _silk_NLSF2A_find_poly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$028 = 0, $$in = 0, $$pre34 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $9 = 0, $$in$looptemp = 0, $51$looptemp = 0;
 HEAP32[$0 >> 2] = 65536;
 $4 = 0 - (HEAP32[$1 >> 2] | 0) | 0;
 $5 = $0 + 4 | 0;
 HEAP32[$5 >> 2] = $4;
 if (($2 | 0) <= 1) return;
 $$028 = 1;
 $11 = 65536;
 $15 = $4;
 while (1) {
  $9 = HEAP32[$1 + ($$028 << 1 << 2) >> 2] | 0;
  $13 = (($9 | 0) < 0) << 31 >> 31;
  $14 = $0 + ($$028 << 2) | 0;
  $18 = ___muldi3($15 | 0, (($15 | 0) < 0) << 31 >> 31 | 0, $9 | 0, $13 | 0) | 0;
  $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0;
  $22 = _i64Add($20 | 0, tempRet0 | 0, 1, 0) | 0;
  $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 1) | 0;
  $27 = $$028 + 1 | 0;
  $28 = $0 + ($27 << 2) | 0;
  HEAP32[$28 >> 2] = ($11 << 1) - $24;
  if ($$028 >>> 0 > 1) {
   $32 = HEAP32[$0 + ($$028 + -2 << 2) >> 2] | 0;
   $35 = ___muldi3($11 | 0, (($11 | 0) < 0) << 31 >> 31 | 0, $9 | 0, $13 | 0) | 0;
   $37 = _bitshift64Lshr($35 | 0, tempRet0 | 0, 15) | 0;
   $39 = _i64Add($37 | 0, tempRet0 | 0, 1, 0) | 0;
   $41 = _bitshift64Lshr($39 | 0, tempRet0 | 0, 1) | 0;
   HEAP32[$14 >> 2] = $15 + $32 - $41;
   if (($$028 | 0) != 2) {
    $$in = $$028;
    $51 = $32;
    do {
     $$in$looptemp = $$in;
     $$in = $$in + -1 | 0;
     $47 = $0 + ($$in << 2) | 0;
     $$pre34 = HEAP32[$47 >> 2] | 0;
     $51$looptemp = $51;
     $51 = HEAP32[$0 + ($$in$looptemp + -3 << 2) >> 2] | 0;
     $54 = ___muldi3($51$looptemp | 0, (($51$looptemp | 0) < 0) << 31 >> 31 | 0, $9 | 0, $13 | 0) | 0;
     $56 = _bitshift64Lshr($54 | 0, tempRet0 | 0, 15) | 0;
     $58 = _i64Add($56 | 0, tempRet0 | 0, 1, 0) | 0;
     $60 = _bitshift64Lshr($58 | 0, tempRet0 | 0, 1) | 0;
     HEAP32[$47 >> 2] = $$pre34 + $51 - $60;
    } while (($$in$looptemp | 0) > 3);
   }
  }
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - $9;
  if (($27 | 0) == ($2 | 0)) break;
  $$028 = $27;
  $11 = HEAP32[$14 >> 2] | 0;
  $15 = HEAP32[$28 >> 2] | 0;
 }
 return;
}

function _quant_band_n1($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$022 = 0, $$022$us = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $22 = 0.0, $27 = 0, $33 = 0.0, $39 = 0, $45 = 0.0, $51 = 0, $57 = 0.0, $6 = 0, $7 = 0, $8 = 0, label = 0;
 $6 = HEAP32[$0 + 28 >> 2] | 0;
 $7 = ($2 | 0) == 0;
 $8 = $0 + 32 | 0;
 $10 = $7 ? 1 : 2;
 $11 = $0 + 4 | 0;
 $13 = (HEAP32[$8 >> 2] | 0) > 7;
 if (!(HEAP32[$0 >> 2] | 0)) {
  if ($13) {
   $16 = _ec_dec_bits($6, 1) | 0;
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -8;
   if (HEAP32[$11 >> 2] | 0) {
    $22 = ($16 | 0) == 0 ? 1.0 : -1.0;
    label = 5;
   }
  } else if (HEAP32[$11 >> 2] | 0) {
   $22 = 1.0;
   label = 5;
  }
  if ((label | 0) == 5) HEAPF32[$1 >> 2] = $22;
  if (!$7) {
   $$022$us = 1;
   do {
    if ((HEAP32[$8 >> 2] | 0) > 7) {
     $27 = _ec_dec_bits($6, 1) | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -8;
     if (HEAP32[$11 >> 2] | 0) {
      $33 = ($27 | 0) == 0 ? 1.0 : -1.0;
      label = 11;
     }
    } else if (HEAP32[$11 >> 2] | 0) {
     $33 = 1.0;
     label = 11;
    }
    if ((label | 0) == 11) {
     label = 0;
     HEAPF32[$2 >> 2] = $33;
    }
    $$022$us = $$022$us + 1 | 0;
   } while ($$022$us >>> 0 < $10 >>> 0);
  }
 } else {
  if ($13) {
   $39 = +HEAPF32[$1 >> 2] < 0.0;
   _ec_enc_bits($6, $39 & 1, 1);
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -8;
   if (HEAP32[$11 >> 2] | 0) {
    $45 = $39 ? -1.0 : 1.0;
    label = 16;
   }
  } else if (HEAP32[$11 >> 2] | 0) {
   $45 = 1.0;
   label = 16;
  }
  if ((label | 0) == 16) HEAPF32[$1 >> 2] = $45;
  if (!$7) {
   $$022 = 1;
   do {
    if ((HEAP32[$8 >> 2] | 0) > 7) {
     $51 = +HEAPF32[$2 >> 2] < 0.0;
     _ec_enc_bits($6, $51 & 1, 1);
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -8;
     if (HEAP32[$11 >> 2] | 0) {
      $57 = $51 ? -1.0 : 1.0;
      label = 22;
     }
    } else if (HEAP32[$11 >> 2] | 0) {
     $57 = 1.0;
     label = 22;
    }
    if ((label | 0) == 22) {
     label = 0;
     HEAPF32[$2 >> 2] = $57;
    }
    $$022 = $$022 + 1 | 0;
   } while ($$022 >>> 0 < $10 >>> 0);
  }
 }
 if (!$3) return;
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _kf_bfly3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$07983 = 0, $$080 = 0, $$081 = 0, $$082 = 0, $$sroa$1$0$copyload = 0.0, $11 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $18 = 0, $19 = 0.0, $21 = 0.0, $23 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $31 = 0, $32 = 0.0, $34 = 0.0, $36 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $49 = 0, $53 = 0.0, $54 = 0.0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0;
 $6 = $3 << 1;
 $7 = $2 + 48 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $$sroa$1$0$copyload = +HEAPF32[$8 + ((Math_imul($3, $1) | 0) << 3) + 4 >> 2];
 if (($4 | 0) <= 0) return;
 $11 = $1 << 1;
 $$07983 = 0;
 $71 = $8;
 while (1) {
  $$0 = $0 + ((Math_imul($$07983, $5) | 0) << 3) | 0;
  $$080 = $3;
  $$081 = $71;
  $$082 = $71;
  while (1) {
   $14 = $$0 + ($3 << 3) | 0;
   $15 = +HEAPF32[$14 >> 2];
   $16 = +HEAPF32[$$081 >> 2];
   $18 = $$0 + ($3 << 3) + 4 | 0;
   $19 = +HEAPF32[$18 >> 2];
   $21 = +HEAPF32[$$081 + 4 >> 2];
   $23 = $15 * $16 - $19 * $21;
   $26 = $16 * $19 + $15 * $21;
   $27 = $$0 + ($6 << 3) | 0;
   $28 = +HEAPF32[$27 >> 2];
   $29 = +HEAPF32[$$082 >> 2];
   $31 = $$0 + ($6 << 3) + 4 | 0;
   $32 = +HEAPF32[$31 >> 2];
   $34 = +HEAPF32[$$082 + 4 >> 2];
   $36 = $28 * $29 - $32 * $34;
   $39 = $29 * $32 + $28 * $34;
   $40 = $23 + $36;
   $41 = $26 + $39;
   HEAPF32[$14 >> 2] = +HEAPF32[$$0 >> 2] - $40 * .5;
   $49 = $$0 + 4 | 0;
   HEAPF32[$18 >> 2] = +HEAPF32[$49 >> 2] - $41 * .5;
   $53 = $$sroa$1$0$copyload * ($23 - $36);
   $54 = $$sroa$1$0$copyload * ($26 - $39);
   HEAPF32[$$0 >> 2] = $40 + +HEAPF32[$$0 >> 2];
   HEAPF32[$49 >> 2] = $41 + +HEAPF32[$49 >> 2];
   HEAPF32[$27 >> 2] = $54 + +HEAPF32[$14 >> 2];
   HEAPF32[$31 >> 2] = +HEAPF32[$18 >> 2] - $53;
   HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] - $54;
   HEAPF32[$18 >> 2] = $53 + +HEAPF32[$18 >> 2];
   $$080 = $$080 + -1 | 0;
   if (!$$080) break; else {
    $$0 = $$0 + 8 | 0;
    $$081 = $$081 + ($1 << 3) | 0;
    $$082 = $$082 + ($11 << 3) | 0;
   }
  }
  $70 = $$07983 + 1 | 0;
  if (($70 | 0) == ($4 | 0)) break;
  $$07983 = $70;
  $71 = HEAP32[$7 >> 2] | 0;
 }
 return;
}

function _unquant_energy_finalise($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$02428 = 0, $$02428$1 = 0, $$025 = 0, $$025$1 = 0, $$1$lcssa = 0, $$130 = 0, $$130$1 = 0, $$2 = 0, $$2$1 = 0, $$3 = 0, $$3$1 = 0, $10 = 0, $12 = 0, $20 = 0.0, $30 = 0, $33 = 0, $40 = 0, $48 = 0.0, $58 = 0, $61 = 0;
 $10 = $0 + 8 | 0;
 if (($1 | 0) >= ($2 | 0)) return;
 if (($6 | 0) < ($8 | 0)) $$1$lcssa = $6; else {
  $$02428 = $1;
  $$130 = $6;
  while (1) {
   $12 = $4 + ($$02428 << 2) | 0;
   if ((HEAP32[$12 >> 2] | 0) > 7) $$3 = $$130; else if (!(HEAP32[$5 + ($$02428 << 2) >> 2] | 0)) {
    $$025 = 0;
    $$2 = $$130;
    while (1) {
     $20 = +(_ec_dec_bits($7, 1) | 0) + -.5;
     $30 = $3 + ((Math_imul(HEAP32[$10 >> 2] | 0, $$025) | 0) + $$02428 << 2) | 0;
     HEAPF32[$30 >> 2] = +HEAPF32[$30 >> 2] + $20 * +(1 << 13 - (HEAP32[$12 >> 2] | 0) | 0) * .00006103515625;
     $33 = $$2 + -1 | 0;
     $$025 = $$025 + 1 | 0;
     if (($$025 | 0) >= ($8 | 0)) {
      $$3 = $33;
      break;
     } else $$2 = $33;
    }
   } else $$3 = $$130;
   $$02428 = $$02428 + 1 | 0;
   if (($$02428 | 0) >= ($2 | 0) | ($$3 | 0) < ($8 | 0)) {
    $$1$lcssa = $$3;
    break;
   } else $$130 = $$3;
  }
 }
 if (($$1$lcssa | 0) < ($8 | 0)) return;
 $$02428$1 = $1;
 $$130$1 = $$1$lcssa;
 while (1) {
  $40 = $4 + ($$02428$1 << 2) | 0;
  if ((HEAP32[$40 >> 2] | 0) > 7) $$3$1 = $$130$1; else if ((HEAP32[$5 + ($$02428$1 << 2) >> 2] | 0) == 1) {
   $$025$1 = 0;
   $$2$1 = $$130$1;
   while (1) {
    $48 = +(_ec_dec_bits($7, 1) | 0) + -.5;
    $58 = $3 + ((Math_imul(HEAP32[$10 >> 2] | 0, $$025$1) | 0) + $$02428$1 << 2) | 0;
    HEAPF32[$58 >> 2] = +HEAPF32[$58 >> 2] + $48 * +(1 << 13 - (HEAP32[$40 >> 2] | 0) | 0) * .00006103515625;
    $61 = $$2$1 + -1 | 0;
    $$025$1 = $$025$1 + 1 | 0;
    if (($$025$1 | 0) >= ($8 | 0)) {
     $$3$1 = $61;
     break;
    } else $$2$1 = $61;
   }
  } else $$3$1 = $$130$1;
  $$02428$1 = $$02428$1 + 1 | 0;
  if (($$02428$1 | 0) >= ($2 | 0) | ($$3$1 | 0) < ($8 | 0)) break; else $$130$1 = $$3$1;
 }
 return;
}

function _bits2pulses($$0$2$val, $$0$14$1$val, $$0$14$2$val, $0, $1, $2) {
 $$0$2$val = $$0$2$val | 0;
 $$0$14$1$val = $$0$14$1$val | 0;
 $$0$14$2$val = $$0$14$2$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$026 = 0, $$$026$1 = 0, $$$026$2 = 0, $$$026$3 = 0, $$$026$4 = 0, $$$026$5 = 0, $$025$ = 0, $$025$$026 = 0, $$025$$1 = 0, $$025$$2 = 0, $$025$$3 = 0, $$025$$4 = 0, $$025$$5 = 0, $11 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $25 = 0, $28 = 0, $32 = 0, $35 = 0, $39 = 0, $42 = 0, $46 = 0, $49 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $9 = 0;
 $9 = $$0$14$2$val + (HEAP16[$$0$14$1$val + ((Math_imul($1 + 1 | 0, $$0$2$val) | 0) + $0 << 1) >> 1] | 0) | 0;
 $11 = HEAPU8[$9 >> 0] | 0;
 $12 = $2 + -1 | 0;
 $14 = ($11 + 1 | 0) >>> 1;
 $18 = ($12 | 0) > (HEAPU8[$9 + $14 >> 0] | 0);
 $$$026 = $18 ? $14 : 0;
 $$025$ = $18 ? $11 : $14;
 $21 = ($$$026 + 1 + $$025$ | 0) >>> 1;
 $25 = ($12 | 0) > (HEAPU8[$9 + $21 >> 0] | 0);
 $$$026$1 = $25 ? $21 : $$$026;
 $$025$$1 = $25 ? $$025$ : $21;
 $28 = $$$026$1 + 1 + $$025$$1 >> 1;
 $32 = ($12 | 0) > (HEAPU8[$9 + $28 >> 0] | 0);
 $$$026$2 = $32 ? $28 : $$$026$1;
 $$025$$2 = $32 ? $$025$$1 : $28;
 $35 = $$$026$2 + 1 + $$025$$2 >> 1;
 $39 = ($12 | 0) > (HEAPU8[$9 + $35 >> 0] | 0);
 $$$026$3 = $39 ? $35 : $$$026$2;
 $$025$$3 = $39 ? $$025$$2 : $35;
 $42 = $$$026$3 + 1 + $$025$$3 >> 1;
 $46 = ($12 | 0) > (HEAPU8[$9 + $42 >> 0] | 0);
 $$$026$4 = $46 ? $42 : $$$026$3;
 $$025$$4 = $46 ? $$025$$3 : $42;
 $49 = $$$026$4 + 1 + $$025$$4 >> 1;
 $53 = ($12 | 0) > (HEAPU8[$9 + $49 >> 0] | 0);
 $$$026$5 = $53 ? $49 : $$$026$4;
 $$025$$5 = $53 ? $$025$$4 : $49;
 if (!$$$026$5) {
  $59 = -1;
  $58 = $12 - $59 | 0;
  $60 = $9 + $$025$$5 | 0;
  $61 = HEAP8[$60 >> 0] | 0;
  $62 = $61 & 255;
  $63 = $62 - $12 | 0;
  $64 = ($58 | 0) > ($63 | 0);
  $$025$$026 = $64 ? $$025$$5 : $$$026$5;
  return $$025$$026 | 0;
 }
 $59 = HEAPU8[$9 + $$$026$5 >> 0] | 0;
 $58 = $12 - $59 | 0;
 $60 = $9 + $$025$$5 | 0;
 $61 = HEAP8[$60 >> 0] | 0;
 $62 = $61 & 255;
 $63 = $62 - $12 | 0;
 $64 = ($58 | 0) > ($63 | 0);
 $$025$$026 = $64 ? $$025$$5 : $$$026$5;
 return $$025$$026 | 0;
}

function _silk_LTP_analysis_filter_FLP($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$04050$us = 0, $$04149$us = 0, $$04248$us = 0, $$04346$us = 0, $$147$us = 0, $$sroa$0$0$copyload = 0.0, $$sroa$3$0$copyload = 0.0, $$sroa$4$0$copyload = 0.0, $$sroa$5$0$copyload = 0.0, $$sroa$6$0$copyload = 0.0, $16 = 0.0, $19 = 0, $20 = 0, $25 = 0.0, $29 = 0.0, $32 = 0.0, $36 = 0.0, $9 = 0, $scevgep = 0, $$04346$us$looptemp = 0;
 if (($6 | 0) <= 0) return;
 $9 = $7 + $5 | 0;
 if (($9 | 0) <= 0) return;
 $$04050$us = 0;
 $$04149$us = $1;
 $$04248$us = $0;
 while (1) {
  $scevgep = $2 + ($$04050$us * 5 << 2) | 0;
  $16 = +HEAPF32[$4 + ($$04050$us << 2) >> 2];
  $$sroa$0$0$copyload = +HEAPF32[$scevgep >> 2];
  $$sroa$3$0$copyload = +HEAPF32[$scevgep + 4 >> 2];
  $$sroa$4$0$copyload = +HEAPF32[$scevgep + 8 >> 2];
  $$sroa$5$0$copyload = +HEAPF32[$scevgep + 12 >> 2];
  $$sroa$6$0$copyload = +HEAPF32[$scevgep + 16 >> 2];
  $$04346$us = $$04149$us + (0 - (HEAP32[$3 + ($$04050$us << 2) >> 2] | 0) << 2) | 0;
  $$147$us = 0;
  do {
   $19 = HEAP32[$$04149$us + ($$147$us << 2) >> 2] | 0;
   $20 = $$04248$us + ($$147$us << 2) | 0;
   HEAP32[$20 >> 2] = $19;
   $25 = (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]) - $$sroa$0$0$copyload * +HEAPF32[$$04346$us + 8 >> 2];
   HEAPF32[$20 >> 2] = $25;
   $$04346$us$looptemp = $$04346$us;
   $$04346$us = $$04346$us + 4 | 0;
   $29 = $25 - $$sroa$3$0$copyload * +HEAPF32[$$04346$us >> 2];
   HEAPF32[$20 >> 2] = $29;
   $32 = $29 - $$sroa$4$0$copyload * +HEAPF32[$$04346$us$looptemp >> 2];
   HEAPF32[$20 >> 2] = $32;
   $36 = $32 - $$sroa$5$0$copyload * +HEAPF32[$$04346$us$looptemp + -4 >> 2];
   HEAPF32[$20 >> 2] = $36;
   HEAPF32[$20 >> 2] = $16 * ($36 - $$sroa$6$0$copyload * +HEAPF32[$$04346$us$looptemp + -8 >> 2]);
   $$147$us = $$147$us + 1 | 0;
  } while (($$147$us | 0) != ($9 | 0));
  $$04050$us = $$04050$us + 1 | 0;
  if (($$04050$us | 0) == ($6 | 0)) break; else {
   $$04149$us = $$04149$us + ($5 << 2) | 0;
   $$04248$us = $$04248$us + ($9 << 2) | 0;
  }
 }
 return;
}

function _xcorr_kernel_c_127($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0138152 = 0, $$0141151 = 0, $$0142150 = 0.0, $$0146149 = 0.0, $$0147148 = 0.0, $$0153 = 0, $10 = 0, $11 = 0, $13 = 0.0, $15 = 0.0, $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $23 = 0.0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $29 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $41 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $51 = 0.0, $53 = 0.0, $9 = 0;
 $9 = $2 + 4 | 0;
 $10 = $2 + 8 | 0;
 $11 = $2 + 12 | 0;
 $$0138152 = $1 + 12 | 0;
 $$0141151 = 0;
 $$0142150 = +HEAPF32[$1 >> 2];
 $$0146149 = +HEAPF32[$1 + 8 >> 2];
 $$0147148 = +HEAPF32[$1 + 4 >> 2];
 $$0153 = $0;
 $18 = +HEAPF32[$2 >> 2];
 $21 = +HEAPF32[$9 >> 2];
 $24 = +HEAPF32[$10 >> 2];
 $27 = +HEAPF32[$11 >> 2];
 while (1) {
  $13 = +HEAPF32[$$0153 >> 2];
  $15 = +HEAPF32[$$0138152 >> 2];
  $17 = $$0142150 * $13 + $18;
  HEAPF32[$2 >> 2] = $17;
  $20 = $$0147148 * $13 + $21;
  HEAPF32[$9 >> 2] = $20;
  $23 = $$0146149 * $13 + $24;
  HEAPF32[$10 >> 2] = $23;
  $26 = $13 * $15 + $27;
  HEAPF32[$11 >> 2] = $26;
  $29 = +HEAPF32[$$0153 + 4 >> 2];
  $$0142150 = +HEAPF32[$$0138152 + 4 >> 2];
  $33 = $17 + $$0147148 * $29;
  HEAPF32[$2 >> 2] = $33;
  $35 = $20 + $$0146149 * $29;
  HEAPF32[$9 >> 2] = $35;
  $37 = $23 + $15 * $29;
  HEAPF32[$10 >> 2] = $37;
  $39 = $26 + $29 * $$0142150;
  HEAPF32[$11 >> 2] = $39;
  $41 = +HEAPF32[$$0153 + 8 >> 2];
  $$0147148 = +HEAPF32[$$0138152 + 8 >> 2];
  $45 = $33 + $$0146149 * $41;
  HEAPF32[$2 >> 2] = $45;
  $47 = $35 + $15 * $41;
  HEAPF32[$9 >> 2] = $47;
  $49 = $37 + $$0142150 * $41;
  HEAPF32[$10 >> 2] = $49;
  $51 = $39 + $41 * $$0147148;
  HEAPF32[$11 >> 2] = $51;
  $53 = +HEAPF32[$$0153 + 12 >> 2];
  $$0146149 = +HEAPF32[$$0138152 + 12 >> 2];
  $18 = $45 + $15 * $53;
  HEAPF32[$2 >> 2] = $18;
  $21 = $47 + $$0142150 * $53;
  HEAPF32[$9 >> 2] = $21;
  $24 = $49 + $$0147148 * $53;
  HEAPF32[$10 >> 2] = $24;
  $27 = $51 + $53 * $$0146149;
  HEAPF32[$11 >> 2] = $27;
  $$0141151 = $$0141151 + 4 | 0;
  if ($$0141151 >>> 0 >= 21) break; else {
   $$0138152 = $$0138152 + 16 | 0;
   $$0153 = $$0153 + 16 | 0;
  }
 }
 return;
}

function _silk_warped_autocorrelation_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$03438$us = 0.0, $$03537$us = 0, $$042 = 0, $$042$us = 0, $$136 = 0, $11 = 0, $12 = 0, $13 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $27 = 0, $37 = 0, $48 = 0.0, $5 = 0, $52 = 0.0, $6 = 0, $60 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $5 = sp + 208 | 0;
 $6 = sp;
 _memset($5 | 0, 0, 200) | 0;
 _memset($6 | 0, 0, 200) | 0;
 if ($4 & 1 | 0) _celt_fatal(46470, 46507, 49);
 do if (($3 | 0) > 0) {
  $11 = $5 + ($4 << 3) | 0;
  $12 = $6 + ($4 << 3) | 0;
  $13 = $2;
  if (($4 | 0) <= 0) {
   $$042 = 0;
   $52 = +HEAPF64[$12 >> 3];
   do {
    $48 = +HEAPF32[$1 + ($$042 << 2) >> 2];
    HEAPF64[$11 >> 3] = $48;
    $52 = $52 + +HEAPF64[$5 >> 3] * $48;
    $$042 = $$042 + 1 | 0;
   } while (($$042 | 0) != ($3 | 0));
   HEAPF64[$12 >> 3] = $52;
   break;
  }
  $$042$us = 0;
  $60 = 0.0;
  do {
   $$03438$us = +HEAPF32[$1 + ($$042$us << 2) >> 2];
   $$03537$us = 0;
   $24 = $60;
   do {
    $18 = $$03537$us | 1;
    $19 = $5 + ($18 << 3) | 0;
    $20 = +HEAPF64[$19 >> 3];
    $23 = $24 + ($20 - $$03438$us) * $13;
    HEAPF64[$5 + ($$03537$us << 3) >> 3] = $$03438$us;
    $25 = +HEAPF64[$5 >> 3];
    $27 = $6 + ($$03537$us << 3) | 0;
    HEAPF64[$27 >> 3] = +HEAPF64[$27 >> 3] + $$03438$us * $25;
    $$03537$us = $$03537$us + 2 | 0;
    $24 = +HEAPF64[$5 + ($$03537$us << 3) >> 3];
    $$03438$us = $20 + ($24 - $23) * $13;
    HEAPF64[$19 >> 3] = $23;
    $37 = $6 + ($18 << 3) | 0;
    HEAPF64[$37 >> 3] = $25 * $23 + +HEAPF64[$37 >> 3];
   } while (($$03537$us | 0) < ($4 | 0));
   HEAPF64[$11 >> 3] = $$03438$us;
   $60 = +HEAPF64[$5 >> 3];
   HEAPF64[$12 >> 3] = +HEAPF64[$12 >> 3] + $$03438$us * $60;
   $$042$us = $$042$us + 1 | 0;
  } while (($$042$us | 0) != ($3 | 0));
 } while (0);
 if (($4 | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 $$136 = 0;
 while (1) {
  HEAPF32[$0 + ($$136 << 2) >> 2] = +HEAPF64[$6 + ($$136 << 3) >> 3];
  if (($$136 | 0) == ($4 | 0)) break; else $$136 = $$136 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _silk_resampler_private_IIR_FIR($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$02326 = 0, $$024$ = 0, $$024$$lcssa = 0, $$024$25 = 0, $$024$27 = 0, $$pre = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $24 = 0, $29 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 + 268 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($5 << 1) + 8 << 1) | 0) + 15 & -16) | 0;
 $9 = $0 + 24 | 0;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
 $11 = HEAP32[$0 + 272 >> 2] | 0;
 $12 = $8 + 16 | 0;
 $$024$25 = ($5 | 0) > ($3 | 0) ? $3 : $5;
 _silk_resampler_private_up2_HQ($0, $12, $2, $$024$25);
 $15 = _silk_resampler_private_IIR_FIR_INTERPOL($1, $8, $$024$25 << 17, $11) | 0;
 $16 = $3 - $$024$25 | 0;
 if (($16 | 0) > 0) {
  $$02326 = $2;
  $$024$27 = $$024$25;
  $21 = $16;
  $24 = $15;
  while (1) {
   $$02326 = $$02326 + ($$024$27 << 1) | 0;
   $20 = $8 + ($$024$27 << 1 << 1) | 0;
   HEAP32[$8 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
   HEAP32[$8 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
   $$pre = HEAP32[$4 >> 2] | 0;
   $$024$ = ($21 | 0) < ($$pre | 0) ? $21 : $$pre;
   _silk_resampler_private_up2_HQ($0, $12, $$02326, $$024$);
   $24 = _silk_resampler_private_IIR_FIR_INTERPOL($24, $8, $$024$ << 17, $11) | 0;
   $21 = $21 - $$024$ | 0;
   if (($21 | 0) <= 0) {
    $$024$$lcssa = $$024$;
    break;
   } else $$024$27 = $$024$;
  }
 } else $$024$$lcssa = $$024$25;
 $29 = $8 + ($$024$$lcssa << 1 << 1) | 0;
 HEAP16[$9 >> 1] = HEAP16[$29 >> 1] | 0;
 HEAP16[$9 + 2 >> 1] = HEAP16[$29 + 2 >> 1] | 0;
 HEAP16[$9 + 4 >> 1] = HEAP16[$29 + 4 >> 1] | 0;
 HEAP16[$9 + 6 >> 1] = HEAP16[$29 + 6 >> 1] | 0;
 HEAP16[$9 + 8 >> 1] = HEAP16[$29 + 8 >> 1] | 0;
 HEAP16[$9 + 10 >> 1] = HEAP16[$29 + 10 >> 1] | 0;
 HEAP16[$9 + 12 >> 1] = HEAP16[$29 + 12 >> 1] | 0;
 HEAP16[$9 + 14 >> 1] = HEAP16[$29 + 14 >> 1] | 0;
 STACKTOP = sp;
 return;
}

function _silk_NLSF2A($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$05153$us = 0, $$061 = 0, $$157 = 0, $$252$us = 0, $11 = 0, $12 = 0, $16 = 0, $27 = 0, $3 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0, $$157$looptemp = 0, $41$looptemp = 0, $45$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $3 = sp + 224 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 switch ($2 | 0) {
 case 10:
 case 16:
  break;
 default:
  _celt_fatal(45241, 45274, 89);
 }
 $8 = ($2 | 0) == 16 ? 27008 : 45288;
 $$061 = 0;
 do {
  $11 = HEAP16[$1 + ($$061 << 1) >> 1] | 0;
  $12 = $11 >> 8;
  $16 = HEAP16[26736 + ($12 << 1) >> 1] | 0;
  $27 = ((Math_imul((HEAP16[26736 + ($12 + 1 << 1) >> 1] | 0) - $16 | 0, $11 & 255) | 0) + ($16 << 8) >> 3) + 1 >> 1;
  HEAP32[$3 + (HEAPU8[$8 + $$061 >> 0] << 2) >> 2] = $27;
  $$061 = $$061 + 1 | 0;
 } while (($$061 | 0) != ($2 | 0));
 $33 = $2 >> 1;
 _silk_NLSF2A_find_poly($4, $3, $33);
 _silk_NLSF2A_find_poly($5, $3 + 4 | 0, $33);
 if (($2 | 0) > 1) {
  $36 = $2 + -1 | 0;
  $$157 = 0;
  $41 = HEAP32[$4 >> 2] | 0;
  $45 = HEAP32[$5 >> 2] | 0;
  do {
   $$157$looptemp = $$157;
   $$157 = $$157 + 1 | 0;
   $41$looptemp = $41;
   $41 = HEAP32[$4 + ($$157 << 2) >> 2] | 0;
   $40 = $41$looptemp + $41 | 0;
   $45$looptemp = $45;
   $45 = HEAP32[$5 + ($$157 << 2) >> 2] | 0;
   $44 = $45 - $45$looptemp | 0;
   HEAP32[$6 + ($$157$looptemp << 2) >> 2] = 0 - ($44 + $40);
   HEAP32[$6 + ($36 - $$157$looptemp << 2) >> 2] = $44 - $40;
  } while (($$157 | 0) < ($33 | 0));
 }
 _silk_LPC_fit($0, $6, $2);
 if (_silk_LPC_inverse_pred_gain_c($0, $2) | 0) {
  STACKTOP = sp;
  return;
 }
 $$05153$us = 0;
 do {
  _silk_bwexpander_32($6, $2, 65536 - (2 << $$05153$us) | 0);
  $$252$us = 0;
  do {
   HEAP16[$0 + ($$252$us << 1) >> 1] = (((HEAP32[$6 + ($$252$us << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
   $$252$us = $$252$us + 1 | 0;
  } while (($$252$us | 0) != ($2 | 0));
  $$05153$us = $$05153$us + 1 | 0;
 } while ($$05153$us >>> 0 < 16 & (_silk_LPC_inverse_pred_gain_c($0, $2) | 0) == 0);
 STACKTOP = sp;
 return;
}

function _silk_decoder_set_fs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $$sink63 = 0, $13 = 0, $14 = 0, $17 = 0, $23 = 0, $27 = 0, $3 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = ($1 | 0) == 8;
 $5 = ($1 | 4 | 0) == 12;
 switch ($1 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(44878, 42492, 43);
 }
 $6 = $0 + 2324 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 switch ($7 | 0) {
 case 2:
 case 4:
  break;
 default:
  _celt_fatal(42514, 42492, 44);
 }
 $8 = $1 << 16 >> 16;
 HEAP32[$0 + 2332 >> 2] = $8 * 5;
 $13 = Math_imul($7 << 16 >> 16, $8 * 327680 >> 16) | 0;
 $14 = $0 + 2316 | 0;
 $17 = $0 + 2320 | 0;
 if ((HEAP32[$14 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$17 >> 2] | 0) == ($2 | 0)) label = 8; else label = 7; else label = 7;
 if ((label | 0) == 7) {
  _silk_resampler_init($0 + 2432 | 0, $8 * 1e3 | 0, $2, 0);
  HEAP32[$17 >> 2] = $2;
  if ((HEAP32[$14 >> 2] | 0) == ($1 | 0)) label = 8; else {
   $27 = (HEAP32[$6 >> 2] | 0) == 4;
   HEAP32[$0 + 2384 >> 2] = $3 ? ($27 ? 43975 : 43998) : $27 ? 25072 : 43986;
   HEAP32[$0 + 2336 >> 2] = $8 * 20;
   HEAP32[$0 + 2340 >> 2] = $5 ? 10 : 16;
   HEAP32[$0 + 2732 >> 2] = $5 ? 39196 : 39236;
   switch ($1 | 0) {
   case 16:
    {
     $$sink63 = 43960;
     break;
    }
   case 12:
    {
     $$sink63 = 43954;
     break;
    }
   default:
    if ($3) $$sink63 = 43945; else _celt_fatal(47580, 42492, 89);
   }
   HEAP32[$0 + 2380 >> 2] = $$sink63;
   HEAP32[$0 + 2376 >> 2] = 1;
   HEAP32[$0 + 2308 >> 2] = 100;
   HEAP8[$0 + 2312 >> 0] = 10;
   HEAP32[$0 + 4164 >> 2] = 0;
   _memset($0 + 1284 | 0, 0, 1024) | 0;
   $$pre$phiZ2D = $0 + 2328 | 0;
   label = 15;
  }
 }
 if ((label | 0) == 8) {
  $23 = $0 + 2328 | 0;
  if (($13 | 0) != (HEAP32[$23 >> 2] | 0)) {
   $40 = (HEAP32[$6 >> 2] | 0) == 4;
   HEAP32[$0 + 2384 >> 2] = $3 ? ($40 ? 43975 : 43998) : $40 ? 25072 : 43986;
   $$pre$phiZ2D = $23;
   label = 15;
  }
 }
 if ((label | 0) == 15) {
  HEAP32[$14 >> 2] = $1;
  HEAP32[$$pre$phiZ2D >> 2] = $13;
 }
 if (($13 + -1 | 0) >>> 0 < 320) return; else _celt_fatal(42601, 42492, 104);
}

function _silk_decode_frame($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $18 = 0, $19 = 0, $21 = 0, $29 = 0, $39 = 0, $40 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $6 = sp;
 $7 = $0 + 2328 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 + 136 >> 2] = 0;
 if (($8 + -1 | 0) >>> 0 >= 320) _celt_fatal(42180, 42229, 58);
 switch ($4 | 0) {
 case 0:
  {
   $$pre$phiZ2D = $0 + 2388 | 0;
   label = 6;
   break;
  }
 case 2:
  {
   $11 = $0 + 2388 | 0;
   if ((HEAP32[$0 + 2420 + (HEAP32[$11 >> 2] << 2) >> 2] | 0) == 1) {
    $$pre$phiZ2D = $11;
    label = 6;
   } else label = 9;
   break;
  }
 default:
  label = 9;
 }
 do if ((label | 0) == 6) {
  $18 = _llvm_stacksave() | 0;
  $19 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * (($8 + 15 & -16) << 1) | 0) + 15 & -16) | 0;
  _silk_decode_indices($0, $1, HEAP32[$$pre$phiZ2D >> 2] | 0, $4, $5);
  $21 = $0 + 2765 | 0;
  _silk_decode_pulses($1, $19, HEAP8[$21 >> 0] | 0, HEAP8[$0 + 2766 >> 0] | 0, HEAP32[$7 >> 2] | 0);
  _silk_decode_parameters($0, $6, $5);
  _silk_decode_core($0, $6, $2, $19);
  _silk_PLC($0, $6, $2, 0);
  HEAP32[$0 + 4160 >> 2] = 0;
  $29 = HEAP8[$21 >> 0] | 0;
  HEAP32[$0 + 4164 >> 2] = $29 << 24 >> 24;
  if (($29 & 255) < 3) {
   HEAP32[$0 + 2376 >> 2] = 0;
   _llvm_stackrestore($18 | 0);
   break;
  } else _celt_fatal(42249, 42229, 94);
 } else if ((label | 0) == 9) {
  HEAP8[$0 + 2765 >> 0] = HEAP32[$0 + 4164 >> 2];
  _silk_PLC($0, $6, $2, 1);
 } while (0);
 $39 = HEAP32[$0 + 2336 >> 2] | 0;
 $40 = HEAP32[$7 >> 2] | 0;
 if (($39 | 0) < ($40 | 0)) _celt_fatal(42324, 42229, 107); else {
  $42 = $39 - $40 | 0;
  _memmove($0 + 1348 | 0, $0 + 1348 + ($40 << 1) | 0, $42 << 1 | 0) | 0;
  _memcpy($0 + 1348 + ($42 << 1) | 0, $2 | 0, HEAP32[$7 >> 2] << 1 | 0) | 0;
  _silk_CNG($0, $6, $2, $8);
  _silk_PLC_glue_frames($0, $2, $8);
  HEAP32[$0 + 2308 >> 2] = HEAP32[$6 + ((HEAP32[$0 + 2324 >> 2] | 0) + -1 << 2) >> 2];
  HEAP32[$3 >> 2] = $8;
  STACKTOP = sp;
  return;
 }
}

function _silk_A2NLSF_eval_poly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07175$in = 0, $$074 = 0, $$1 = 0, $10 = 0, $102 = 0, $113 = 0, $17 = 0, $21 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $65 = 0, $76 = 0, $87 = 0, $99 = 0, $$07175$in$looptemp = 0;
 $4 = HEAP32[$0 + ($2 << 2) >> 2] | 0;
 $5 = $1 << 4;
 if (($2 | 0) == 8) {
  $10 = $1 << 20 >> 16;
  $17 = ($5 >> 15) + 1 >> 1;
  $21 = (Math_imul($4 >> 16, $10) | 0) + (Math_imul($4, $17) | 0) + ((Math_imul($4 & 65535, $10) | 0) >> 16) + (HEAP32[$0 + 28 >> 2] | 0) | 0;
  $32 = (Math_imul($21, $17) | 0) + (HEAP32[$0 + 24 >> 2] | 0) + (Math_imul($21 >> 16, $10) | 0) + ((Math_imul($21 & 65535, $10) | 0) >> 16) | 0;
  $43 = (Math_imul($32, $17) | 0) + (HEAP32[$0 + 20 >> 2] | 0) + (Math_imul($32 >> 16, $10) | 0) + ((Math_imul($32 & 65535, $10) | 0) >> 16) | 0;
  $54 = (Math_imul($43, $17) | 0) + (HEAP32[$0 + 16 >> 2] | 0) + (Math_imul($43 >> 16, $10) | 0) + ((Math_imul($43 & 65535, $10) | 0) >> 16) | 0;
  $65 = (Math_imul($54, $17) | 0) + (HEAP32[$0 + 12 >> 2] | 0) + (Math_imul($54 >> 16, $10) | 0) + ((Math_imul($54 & 65535, $10) | 0) >> 16) | 0;
  $76 = (Math_imul($65, $17) | 0) + (HEAP32[$0 + 8 >> 2] | 0) + (Math_imul($65 >> 16, $10) | 0) + ((Math_imul($65 & 65535, $10) | 0) >> 16) | 0;
  $87 = (Math_imul($76, $17) | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (Math_imul($76 >> 16, $10) | 0) + ((Math_imul($76 & 65535, $10) | 0) >> 16) | 0;
  $$1 = (Math_imul($87, $17) | 0) + (HEAP32[$0 >> 2] | 0) + (Math_imul($87 >> 16, $10) | 0) + ((Math_imul($87 & 65535, $10) | 0) >> 16) | 0;
  return $$1 | 0;
 }
 if (($2 | 0) <= 0) {
  $$1 = $4;
  return $$1 | 0;
 }
 $99 = $1 << 20 >> 16;
 $102 = ($5 >> 15) + 1 >> 1;
 $$07175$in = $2;
 $$074 = $4;
 while (1) {
  $$07175$in$looptemp = $$07175$in;
  $$07175$in = $$07175$in + -1 | 0;
  $113 = (Math_imul($$074 >> 16, $99) | 0) + (Math_imul($$074, $102) | 0) + ((Math_imul($$074 & 65535, $99) | 0) >> 16) + (HEAP32[$0 + ($$07175$in << 2) >> 2] | 0) | 0;
  if (($$07175$in$looptemp | 0) <= 1) {
   $$1 = $113;
   break;
  } else $$074 = $113;
 }
 return $$1 | 0;
}

function _unquant_coarse_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$059 = 0, $$060 = 0.0, $$061 = 0, $$062 = 0.0, $$064 = 0, $$idx = 0, $$idx63 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $40 = 0, $48 = 0.0, $52 = 0, $53 = 0.0, $59 = 0, $62 = 0, $63 = 0.0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 $9 = $8;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 if (!$4) {
  $$060 = +HEAPF32[20752 + ($7 << 2) >> 2];
  $$062 = +HEAPF32[20768 + ($7 << 2) >> 2];
 } else {
  $$060 = 0.0;
  $$062 = .149993896484375;
 }
 $20 = HEAP32[$5 + 4 >> 2] << 3;
 if (($1 | 0) >= ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $$idx = $5 + 20 | 0;
 $$idx63 = $5 + 28 | 0;
 $22 = $0 + 8 | 0;
 $$064 = $1;
 do {
  $25 = (($$064 | 0) < 20 ? $$064 : 20) << 1;
  $26 = 20416 + ($7 * 84 | 0) + ($4 * 42 | 0) + $25 | 0;
  $28 = ($25 | 1) + (20416 + ($7 * 84 | 0) + ($4 * 42 | 0)) | 0;
  $$059 = 0;
  do {
   $30 = $20 - (_ec_tell_141(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx63 >> 2] | 0) | 0) | 0;
   do if (($30 | 0) > 14) $$061 = _ec_laplace_decode($5, (HEAPU8[$26 >> 0] | 0) << 7, (HEAPU8[$28 >> 0] | 0) << 6) | 0; else {
    if (($30 | 0) > 1) {
     $40 = _ec_dec_icdf($5, 41660, 2) | 0;
     $$061 = $40 >> 1 ^ 0 - ($40 & 1);
     break;
    }
    if (($30 | 0) == 1) $$061 = 0 - (_ec_dec_bit_logp($5, 1) | 0) | 0; else $$061 = -1;
   } while (0);
   $48 = +($$061 | 0);
   $52 = $3 + ((Math_imul(HEAP32[$22 >> 2] | 0, $$059) | 0) + $$064 << 2) | 0;
   $53 = +HEAPF32[$52 >> 2];
   HEAPF32[$52 >> 2] = $53 < -9.0 ? -9.0 : $53;
   $59 = $3 + ((Math_imul(HEAP32[$22 >> 2] | 0, $$059) | 0) + $$064 << 2) | 0;
   $62 = $8 + ($$059 << 2) | 0;
   $63 = +HEAPF32[$62 >> 2];
   HEAPF32[$59 >> 2] = $$060 * +HEAPF32[$59 >> 2] + $63 + $48;
   HEAPF32[$62 >> 2] = $63 + $48 - $$062 * $48;
   $$059 = $$059 + 1 | 0;
  } while (($$059 | 0) < ($6 | 0));
  $$064 = $$064 + 1 | 0;
 } while (($$064 | 0) != ($2 | 0));
 STACKTOP = sp;
 return;
}

function _memchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$03555 = 0, $$036$lcssa = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $13 = 0, $16 = 0, $22 = 0, $23 = 0, $32 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0;
 $5 = ($1 | 0) != 0;
 L1 : do if ($5 & ($0 & 3 | 0) != 0) {
  $$03555 = $0;
  $$03654 = $1;
  while (1) {
   if (!(HEAP8[$$03555 >> 0] | 0)) {
    $32 = $$03555;
    break L1;
   }
   $8 = $$03555 + 1 | 0;
   $9 = $$03654 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$03555 = $8;
    $$03654 = $9;
   } else {
    $$035$lcssa = $8;
    $$036$lcssa = $9;
    $$lcssa = $13;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $1;
  $$lcssa = $5;
  label = 5;
 } while (0);
 L6 : do if ((label | 0) == 5) {
  do if ($$lcssa) {
   if (!(HEAP8[$$035$lcssa >> 0] | 0)) if (!$$036$lcssa) break; else {
    $32 = $$035$lcssa;
    break L6;
   }
   L13 : do if ($$036$lcssa >>> 0 > 3) {
    $$046 = $$035$lcssa;
    $$13745 = $$036$lcssa;
    while (1) {
     $16 = HEAP32[$$046 >> 2] | 0;
     if (($16 & -2139062144 ^ -2139062144) & $16 + -16843009 | 0) {
      $$137$lcssa66 = $$13745;
      $$in = $$046;
      break L13;
     }
     $22 = $$046 + 4 | 0;
     $23 = $$13745 + -4 | 0;
     if ($23 >>> 0 > 3) {
      $$046 = $22;
      $$13745 = $23;
     } else {
      $$0$lcssa = $22;
      $$137$lcssa = $23;
      label = 11;
      break;
     }
    }
   } else {
    $$0$lcssa = $$035$lcssa;
    $$137$lcssa = $$036$lcssa;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$137$lcssa) break; else {
    $$137$lcssa66 = $$137$lcssa;
    $$in = $$0$lcssa;
   }
   $$140 = $$in;
   $$23839 = $$137$lcssa66;
   while (1) {
    if (!(HEAP8[$$140 >> 0] | 0)) {
     $32 = $$140;
     break L6;
    }
    $$23839 = $$23839 + -1 | 0;
    if (!$$23839) break; else $$140 = $$140 + 1 | 0;
   }
  } while (0);
  $32 = 0;
 } while (0);
 return $32 | 0;
}

function _celt_preemphasis($0, $1, $2, $3, $4, $$val, $$1$val, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $$val = +$$val;
 $$1$val = +$$1$val;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$06777 = 0.0, $$078 = 0, $$16871 = 0.0, $$175 = 0, $$273 = 0, $$372 = 0, $10 = 0, $15 = 0.0, $18 = 0.0, $20 = 0, $32 = 0, $33 = 0.0, $34 = 0, $36 = 0, $40 = 0, $41 = 0.0, $43 = 0.0, $7 = 0.0, $storemerge = 0.0;
 $7 = +HEAPF32[$5 >> 2];
 $10 = ($6 | 0) != 0;
 if (!($10 | (($4 | 0) != 1 | $$1$val != 0.0))) {
  if (($2 | 0) <= 0) {
   $storemerge = $7;
   HEAPF32[$5 >> 2] = $storemerge;
   return;
  }
  $$06777 = $7;
  $$078 = 0;
  while (1) {
   $15 = +HEAPF32[$0 + ((Math_imul($$078, $3) | 0) << 2) >> 2] * 32768.0;
   HEAPF32[$1 + ($$078 << 2) >> 2] = $15 - $$06777;
   $18 = $15 * $$val;
   $$078 = $$078 + 1 | 0;
   if (($$078 | 0) == ($2 | 0)) {
    $storemerge = $18;
    break;
   } else $$06777 = $18;
  }
  HEAPF32[$5 >> 2] = $storemerge;
  return;
 }
 $20 = ($2 | 0) / ($4 | 0) | 0;
 if (($4 | 0) != 1) _memset($1 | 0, 0, $2 << 2 | 0) | 0;
 if (($20 | 0) > 0) {
  $$175 = 0;
  do {
   HEAPF32[$1 + ((Math_imul($$175, $4) | 0) << 2) >> 2] = +HEAPF32[$0 + ((Math_imul($$175, $3) | 0) << 2) >> 2] * 32768.0;
   $$175 = $$175 + 1 | 0;
  } while (($$175 | 0) != ($20 | 0));
  if ($10) {
   $$273 = 0;
   do {
    $32 = $1 + ((Math_imul($$273, $4) | 0) << 2) | 0;
    $33 = +HEAPF32[$32 >> 2];
    $34 = $33 > 65536.0;
    $36 = ($34 ? 65536.0 : $33) < -65536.0;
    HEAPF32[$32 >> 2] = $34 | $36 ? ($36 ? -65536.0 : 65536.0) : $33;
    $$273 = $$273 + 1 | 0;
   } while (($$273 | 0) != ($20 | 0));
  }
 }
 if (($2 | 0) <= 0) {
  $storemerge = $7;
  HEAPF32[$5 >> 2] = $storemerge;
  return;
 }
 $$16871 = $7;
 $$372 = 0;
 while (1) {
  $40 = $1 + ($$372 << 2) | 0;
  $41 = +HEAPF32[$40 >> 2];
  HEAPF32[$40 >> 2] = $41 - $$16871;
  $43 = $41 * $$val;
  $$372 = $$372 + 1 | 0;
  if (($$372 | 0) == ($2 | 0)) {
   $storemerge = $43;
   break;
  } else $$16871 = $43;
 }
 HEAPF32[$5 >> 2] = $storemerge;
 return;
}

function _silk_process_NLSFs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$048 = 0, $$050 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 32 | 0;
 $6 = sp;
 $7 = $0 + 4632 | 0;
 if ((HEAP32[$7 >> 2] | 0) != 1) if ((HEAP8[$0 + 4767 >> 0] | 0) != 4) _celt_fatal(44284, 44387, 51);
 $15 = HEAP32[$0 + 4532 >> 2] << 16 >> 16;
 $20 = (Math_imul($15, -5) | 0) + 3146 + ($15 * 59246 >> 16) | 0;
 $$048 = ((HEAP32[$0 + 4580 >> 2] | 0) == 2 ? $20 >> 1 : 0) + $20 | 0;
 if (($$048 | 0) <= 0) _celt_fatal(44408, 44387, 63);
 $27 = $0 + 4640 | 0;
 _silk_NLSF_VQ_weights_laroia($5, $2, HEAP32[$27 >> 2] | 0);
 if ((HEAP32[$7 >> 2] | 0) == 1) {
  $31 = $0 + 4767 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  if ($32 << 24 >> 24 < 4) {
   _silk_interpolate($4, $3, $2, $32 << 24 >> 24, HEAP32[$27 >> 2] | 0);
   _silk_NLSF_VQ_weights_laroia($6, $4, HEAP32[$27 >> 2] | 0);
   $38 = HEAP8[$31 >> 0] | 0;
   $39 = HEAP32[$27 >> 2] | 0;
   if (($39 | 0) > 0) {
    $43 = (Math_imul($38 << 27, $38) | 0) >> 16;
    $$050 = 0;
    do {
     $44 = $5 + ($$050 << 1) | 0;
     HEAP16[$44 >> 1] = ((Math_imul($43, HEAP16[$6 + ($$050 << 1) >> 1] | 0) | 0) >>> 16) + (HEAP16[$44 >> 1] >> 1);
     $$050 = $$050 + 1 | 0;
    } while (($$050 | 0) != ($39 | 0));
    $74 = 1;
   } else $74 = 1;
  } else $74 = 0;
 } else $74 = 0;
 _silk_NLSF_encode($0 + 4744 | 0, $2, HEAP32[$0 + 4692 >> 2] | 0, $5, $$048, HEAP32[$0 + 4660 >> 2] | 0, HEAP8[$0 + 4765 >> 0] | 0);
 $64 = $1 + 32 | 0;
 _silk_NLSF2A($64, $2, HEAP32[$27 >> 2] | 0);
 if ($74) {
  _silk_interpolate($4, $3, $2, HEAP8[$0 + 4767 >> 0] | 0, HEAP32[$27 >> 2] | 0);
  _silk_NLSF2A($1, $4, HEAP32[$27 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 $71 = HEAP32[$27 >> 2] | 0;
 if (($71 | 0) >= 17) _celt_fatal(44442, 44387, 104);
 _memcpy($1 | 0, $64 | 0, $71 << 1 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _ec_laplace_decode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04570 = 0, $$047$lcssa = 0, $$04769 = 0, $$065 = 0, $$068 = 0, $$071 = 0, $$146 = 0, $$148 = 0, $$1555763 = 0, $$249535961 = 0, $$2545862 = 0, $12 = 0, $13 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $3 = 0, $7 = 0, $8 = 0, $spec$select = 0, $spec$select51 = 0, label = 0;
 $3 = _ec_decode_bin($0) | 0;
 if ($3 >>> 0 < $1 >>> 0) {
  $$1555763 = $1;
  $$249535961 = 0;
  $$2545862 = 0;
 } else {
  $$068 = (_ec_laplace_get_freq1($1, $2) | 0) + 1 | 0;
  L3 : do if ($$068 >>> 0 > 1) {
   $$04570 = 1;
   $$04769 = $1;
   $$071 = $$068;
   while (1) {
    $7 = $$071 << 1;
    $8 = $7 + $$04769 | 0;
    if ($3 >>> 0 < $8 >>> 0) {
     $$065 = $$071;
     $$146 = $$04570;
     $$148 = $$04769;
     break L3;
    }
    $12 = (Math_imul($7 + -2 | 0, $2) | 0) >>> 15;
    $13 = $$04570 + 1 | 0;
    if (!$12) {
     $$0$lcssa = 1;
     $$045$lcssa = $13;
     $$047$lcssa = $8;
     label = 6;
     break;
    } else {
     $$04570 = $13;
     $$04769 = $8;
     $$071 = $12 + 1 | 0;
    }
   }
  } else {
   $$0$lcssa = $$068;
   $$045$lcssa = 1;
   $$047$lcssa = $1;
   label = 6;
  } while (0);
  if ((label | 0) == 6) {
   $15 = $3 - $$047$lcssa | 0;
   $$065 = $$0$lcssa;
   $$146 = ($15 >>> 1) + $$045$lcssa | 0;
   $$148 = ($15 & -2) + $$047$lcssa | 0;
  }
  $20 = $$148 + $$065 | 0;
  $21 = $3 >>> 0 < $20 >>> 0;
  $spec$select51 = $21 ? $$148 : $20;
  if ($spec$select51 >>> 0 >= 32768) _celt_fatal(41370, 41332, 128);
  if (!$$065) _celt_fatal(41347, 41332, 129);
  if ($spec$select51 >>> 0 > $3 >>> 0) _celt_fatal(41397, 41332, 130); else {
   $$1555763 = $$065;
   $$249535961 = $spec$select51;
   $$2545862 = $21 ? 0 - $$146 | 0 : $$146;
  }
 }
 $26 = $$249535961 + $$1555763 | 0;
 $spec$select = $26 >>> 0 < 32768 ? $26 : 32768;
 if ($3 >>> 0 < $spec$select >>> 0) {
  _ec_dec_update($0, $$249535961, $spec$select, 32768);
  return $$2545862 | 0;
 } else _celt_fatal(41422, 41332, 131);
 return 0;
}

function _silk_resampler_private_up2_HQ($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$071 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $35 = 0, $42 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $72 = 0, $75 = 0, $8 = 0, $82 = 0, $9 = 0;
 if (($3 | 0) <= 0) return;
 $5 = $0 + 4 | 0;
 $6 = $0 + 8 | 0;
 $7 = $0 + 12 | 0;
 $8 = $0 + 16 | 0;
 $9 = $0 + 20 | 0;
 $$071 = 0;
 do {
  $13 = HEAP16[$2 + ($$071 << 1) >> 1] << 10;
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = $13 - $14 | 0;
  $21 = ((($15 & 65535) * 1746 | 0) >>> 16) + (($15 >> 16) * 1746 | 0) | 0;
  $22 = $21 + $14 | 0;
  HEAP32[$0 >> 2] = $21 + $13;
  $24 = HEAP32[$5 >> 2] | 0;
  $25 = $22 - $24 | 0;
  $31 = ((($25 & 65535) * 14986 | 0) >>> 16) + (($25 >> 16) * 14986 | 0) | 0;
  $32 = $31 + $24 | 0;
  HEAP32[$5 >> 2] = $31 + $22;
  $35 = $32 - (HEAP32[$6 >> 2] | 0) | 0;
  $42 = ((Math_imul($35 & 65535, -26453) | 0) >> 16) + (Math_imul($35 >> 16, -26453) | 0) + $32 | 0;
  HEAP32[$6 >> 2] = $42 + $35;
  $52 = $$071 << 1;
  HEAP16[$1 + ($52 << 1) >> 1] = ($42 | 0) > 33553919 ? 32767 : ($42 | 0) < -33554944 ? -32768 : (($42 >>> 9) + 1 | 0) >>> 1 & 65535;
  $54 = HEAP32[$7 >> 2] | 0;
  $55 = $13 - $54 | 0;
  $61 = ((($55 & 65535) * 6854 | 0) >>> 16) + (($55 >> 16) * 6854 | 0) | 0;
  $62 = $61 + $54 | 0;
  HEAP32[$7 >> 2] = $61 + $13;
  $64 = HEAP32[$8 >> 2] | 0;
  $65 = $62 - $64 | 0;
  $71 = ((($65 & 65535) * 25769 | 0) >>> 16) + (($65 >> 16) * 25769 | 0) | 0;
  $72 = $71 + $64 | 0;
  HEAP32[$8 >> 2] = $71 + $62;
  $75 = $72 - (HEAP32[$9 >> 2] | 0) | 0;
  $82 = ((Math_imul($75 & 65535, -9994) | 0) >> 16) + (Math_imul($75 >> 16, -9994) | 0) + $72 | 0;
  HEAP32[$9 >> 2] = $82 + $75;
  HEAP16[$1 + (($52 | 1) << 1) >> 1] = ($82 | 0) > 33553919 ? 32767 : ($82 | 0) < -33554944 ? -32768 : (($82 >>> 9) + 1 | 0) >>> 1 & 65535;
  $$071 = $$071 + 1 | 0;
 } while (($$071 | 0) != ($3 | 0));
 return;
}

function _resampler_basic_zero($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$031$lcssa = 0, $$031$lcssa$ph = 0, $$03135 = 0, $$032$lcssa = 0, $$032$lcssa$ph = 0, $$03234 = 0, $$036 = 0, $$1 = 0, $$133 = 0, $$pre$phiZ2D = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $26 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $6 = 0, $8 = 0, $9 = 0;
 $6 = $0 + 60 | 0;
 $8 = (HEAP32[$6 >> 2] | 0) + ($1 << 2) | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $0 + 64 | 0;
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $15 = HEAP32[$0 + 92 >> 2] | 0;
 $17 = HEAP32[$0 + 36 >> 2] | 0;
 $19 = HEAP32[$0 + 40 >> 2] | 0;
 $21 = HEAP32[$0 + 12 >> 2] | 0;
 if (($9 | 0) >= (HEAP32[$3 >> 2] | 0)) {
  $$0$lcssa = 0;
  $$031$lcssa = $9;
  $$032$lcssa = $13;
  $$pre$phiZ2D = $8;
  HEAP32[$$pre$phiZ2D >> 2] = $$031$lcssa;
  $36 = HEAP32[$10 >> 2] | 0;
  $37 = $36 + ($1 << 2) | 0;
  HEAP32[$37 >> 2] = $$032$lcssa;
  return $$0$lcssa | 0;
 }
 $$03135 = $9;
 $$03234 = $13;
 $$036 = 0;
 while (1) {
  if (($$036 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   $$0$lcssa$ph = $$036;
   $$031$lcssa$ph = $$03135;
   $$032$lcssa$ph = $$03234;
   break;
  }
  $26 = $$036 + 1 | 0;
  HEAPF32[$4 + ((Math_imul($$036, $15) | 0) << 2) >> 2] = 0.0;
  $30 = $$03234 + $19 | 0;
  $31 = $30 >>> 0 < $21 >>> 0;
  $$133 = $30 - ($31 ? 0 : $21) | 0;
  $$1 = $$03135 + $17 + (($31 ^ 1) & 1) | 0;
  if (($$1 | 0) < (HEAP32[$3 >> 2] | 0)) {
   $$03135 = $$1;
   $$03234 = $$133;
   $$036 = $26;
  } else {
   $$0$lcssa$ph = $26;
   $$031$lcssa$ph = $$1;
   $$032$lcssa$ph = $$133;
   break;
  }
 }
 $$0$lcssa = $$0$lcssa$ph;
 $$031$lcssa = $$031$lcssa$ph;
 $$032$lcssa = $$032$lcssa$ph;
 $$pre$phiZ2D = (HEAP32[$6 >> 2] | 0) + ($1 << 2) | 0;
 HEAP32[$$pre$phiZ2D >> 2] = $$031$lcssa;
 $36 = HEAP32[$10 >> 2] | 0;
 $37 = $36 + ($1 << 2) | 0;
 HEAP32[$37 >> 2] = $$032$lcssa;
 return $$0$lcssa | 0;
}

function _silk_HP_variable_cutoff($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $22 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $48 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $79 = 0, $86 = 0, $spec$select = 0;
 if ((HEAP8[$0 + 4541 >> 0] | 0) != 2) return;
 $6 = Math_imul(HEAP32[$0 + 4576 >> 2] | 0, 65536e3) | 0;
 $10 = _silk_lin2log(($6 | 0) / (HEAP32[$0 + 4544 >> 2] | 0) | 0) | 0;
 $13 = HEAP32[$0 + 4696 >> 2] | 0;
 $15 = 0 - ($13 << 2) | 0;
 $17 = $13 << 16 >> 16;
 $22 = ((Math_imul($15 & 65532, $17) | 0) >> 16) + (Math_imul($15 >> 16, $17) | 0) | 0;
 $27 = Math_imul($22 >> 16, $10 - (_silk_lin2log(3932160) | 0) << 16 >> 16) | 0;
 $33 = (Math_imul($22 & 65535, $10 - (_silk_lin2log(3932160) | 0) << 16 >> 16) | 0) >> 16;
 $34 = $0 + 8 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $39 = $10 + -2048 - ($35 >> 8) + $27 + $33 | 0;
 $spec$select = ($39 | 0) < 0 ? $39 * 3 | 0 : $39;
 $48 = Math_imul(($spec$select | 0) > 51 ? 51 : (($spec$select | 0) > -51 ? $spec$select : -51) << 16 >> 16, HEAP32[$0 + 4532 >> 2] << 16 >> 16) | 0;
 HEAP32[$34 >> 2] = (($48 >> 16) * 6554 | 0) + $35 + ((($48 & 65535) * 6554 | 0) >>> 16);
 $57 = (_silk_lin2log(60) | 0) << 8;
 $60 = ($57 | 0) > ((_silk_lin2log(100) | 0) << 8 | 0);
 $61 = HEAP32[$34 >> 2] | 0;
 do if ($60) {
  if (($61 | 0) > ((_silk_lin2log(60) | 0) << 8 | 0)) {
   $86 = (_silk_lin2log(60) | 0) << 8;
   break;
  }
  $67 = HEAP32[$34 >> 2] | 0;
  if (($67 | 0) < ((_silk_lin2log(100) | 0) << 8 | 0)) {
   $86 = (_silk_lin2log(100) | 0) << 8;
   break;
  } else {
   $86 = HEAP32[$34 >> 2] | 0;
   break;
  }
 } else {
  if (($61 | 0) > ((_silk_lin2log(100) | 0) << 8 | 0)) {
   $86 = (_silk_lin2log(100) | 0) << 8;
   break;
  }
  $79 = HEAP32[$34 >> 2] | 0;
  if (($79 | 0) < ((_silk_lin2log(60) | 0) << 8 | 0)) {
   $86 = (_silk_lin2log(60) | 0) << 8;
   break;
  } else {
   $86 = HEAP32[$34 >> 2] | 0;
   break;
  }
 } while (0);
 HEAP32[$34 >> 2] = $86;
 return;
}

function _opus_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $3 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 4 | 0;
 L1 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
  switch ($1 | 0) {
  case 8e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  switch ($1 | 0) {
  case 12e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  if (($1 | 0) < 24e3) {
   switch ($1 | 0) {
   case 16e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($1 | 0) < 48e3) {
   switch ($1 | 0) {
   case 24e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   switch ($1 | 0) {
   case 48e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($2 + -1 | 0) >>> 0 > 1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _memset($0 | 0, 0, _opus_decoder_get_size($2) | 0) | 0;
 _silk_Get_Decoder_Size($3);
 $8 = _align(HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = $8;
 $9 = _align(88) | 0;
 HEAP32[$0 + 4 >> 2] = $9;
 $11 = $9 + $8 | 0;
 HEAP32[$0 >> 2] = $11;
 $13 = $0 + $11 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = $2;
 _silk_InitDecoder($0 + $9 | 0);
 if (_celt_decoder_init($13, $1, $2) | 0) {
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 0;
 _opus_custom_decoder_ctl($13, 10016, $vararg_buffer) | 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = ($1 >>> 0) / 400 | 0;
 HEAP32[$0 + 44 >> 2] = 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_NLSF_VQ_weights_laroia($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$03637 = 0, $$038 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $30 = 0, $43 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $7 = 0, $9 = 0;
 if (($2 | 0) <= 0) _celt_fatal(45298, 45322, 51);
 if ($2 & 1 | 0) _celt_fatal(45352, 45322, 52);
 $7 = HEAP16[$1 >> 1] | 0;
 $9 = 131072 / (_silk_max_int_451($7) | 0) | 0;
 $15 = 131072 / (_silk_max_int_451((HEAP16[$1 + 2 >> 1] | 0) - $7 | 0) | 0) | 0;
 HEAP16[$0 >> 1] = _silk_min_int_452($15 + $9 | 0) | 0;
 $19 = $2 + -1 | 0;
 if (($2 | 0) <= 2) {
  $$0$lcssa = $15;
  $49 = $1 + ($19 << 1) | 0;
  $50 = HEAP16[$49 >> 1] | 0;
  $51 = $50 << 16 >> 16;
  $52 = 32768 - $51 | 0;
  $53 = _silk_max_int_451($52) | 0;
  $54 = 131072 / ($53 | 0) | 0;
  $55 = $54 + $$0$lcssa | 0;
  $56 = _silk_min_int_452($55) | 0;
  $57 = $56 & 65535;
  $58 = $0 + ($19 << 1) | 0;
  HEAP16[$58 >> 1] = $57;
  return;
 }
 $$03637 = 1;
 $$038 = $15;
 while (1) {
  $21 = $$03637 + 1 | 0;
  $22 = $1 + ($21 << 1) | 0;
  $30 = 131072 / (_silk_max_int_451((HEAP16[$22 >> 1] | 0) - (HEAP16[$1 + ($$03637 << 1) >> 1] | 0) | 0) | 0) | 0;
  HEAP16[$0 + ($$03637 << 1) >> 1] = _silk_min_int_452($30 + $$038 | 0) | 0;
  $$03637 = $$03637 + 2 | 0;
  $43 = 131072 / (_silk_max_int_451((HEAP16[$1 + ($$03637 << 1) >> 1] | 0) - (HEAP16[$22 >> 1] | 0) | 0) | 0) | 0;
  HEAP16[$0 + ($21 << 1) >> 1] = _silk_min_int_452($43 + $30 | 0) | 0;
  if (($$03637 | 0) >= ($19 | 0)) {
   $$0$lcssa = $43;
   break;
  } else $$038 = $43;
 }
 $49 = $1 + ($19 << 1) | 0;
 $50 = HEAP16[$49 >> 1] | 0;
 $51 = $50 << 16 >> 16;
 $52 = 32768 - $51 | 0;
 $53 = _silk_max_int_451($52) | 0;
 $54 = 131072 / ($53 | 0) | 0;
 $55 = $54 + $$0$lcssa | 0;
 $56 = _silk_min_int_452($55) | 0;
 $57 = $56 & 65535;
 $58 = $0 + ($19 << 1) | 0;
 HEAP16[$58 >> 1] = $57;
 return;
}

function _silk_LBRR_encode_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$040 = 0, $$pre$phiZ2D = 0, $19 = 0, $20 = 0, $22 = 0, $30 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4384 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = sp + 32 | 0;
 $7 = $0 + 5748 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $0 + 6100 + ($8 * 36 | 0) | 0;
 if (!(HEAP32[$0 + 6092 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$0 + 4532 >> 2] | 0) <= 77) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 + 4724 + ($8 << 2) >> 2] = 1;
 _memcpy($6 | 0, $0 + 148 | 0, 4352) | 0;
 dest = $9;
 src = $0 + 4736 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP16[dest >> 1] = HEAP16[src >> 1] | 0;
  dest = dest + 2 | 0;
  src = src + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 $19 = $0 + 4580 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 _memcpy($5 | 0, $1 | 0, $20 << 2 | 0) | 0;
 $22 = HEAP32[$7 >> 2] | 0;
 if (!$22) label = 6; else if (!(HEAP32[$0 + 4724 + ($22 + -1 << 2) >> 2] | 0)) label = 6; else {
  $$pre$phiZ2D = $0 + 4540 | 0;
  $41 = $20;
 }
 if ((label | 0) == 6) {
  $30 = $0 + 4540 | 0;
  HEAP8[$30 >> 0] = HEAP8[$0 + 7168 >> 0] | 0;
  HEAP8[$9 >> 0] = _silk_min_int_547((HEAP32[$0 + 6096 >> 2] | 0) + (HEAPU8[$9 >> 0] | 0) << 24 >> 24) | 0;
  $$pre$phiZ2D = $30;
  $41 = HEAP32[$19 >> 2] | 0;
 }
 _silk_gains_dequant($4, $9, $$pre$phiZ2D, ($3 | 0) == 2 & 1, $41);
 if ((HEAP32[$19 >> 2] | 0) > 0) {
  $$040 = 0;
  do {
   HEAPF32[$1 + ($$040 << 2) >> 2] = +(HEAP32[$4 + ($$040 << 2) >> 2] | 0) * .0000152587890625;
   $$040 = $$040 + 1 | 0;
  } while (($$040 | 0) < (HEAP32[$19 >> 2] | 0));
 }
 _silk_NSQ_wrapper_FLP($0, $1, $9, $6, $0 + 6208 + ((HEAP32[$7 >> 2] | 0) * 320 | 0) | 0, $2);
 _memcpy($1 | 0, $5 | 0, HEAP32[$19 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _silk_corrMatrix_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07275 = 0, $$077 = 0, $$17173 = 0.0, $$174 = 0, $11 = 0.0, $15 = 0.0, $19 = 0.0, $23 = 0.0, $27 = 0.0, $3 = 0, $31 = 0.0, $35 = 0.0, $39 = 0.0, $4 = 0.0, $42 = 0.0, $45 = 0.0, $53 = 0.0, $54 = 0.0, $60 = 0, $66 = 0, $7 = 0.0, $75 = 0.0, $76 = 0, $indvars$iv = 0;
 $3 = $0 + 16 | 0;
 $4 = +_silk_energy_FLP($3, $1);
 HEAPF32[$2 >> 2] = $4;
 $7 = +HEAPF32[$0 + 12 >> 2];
 $11 = +HEAPF32[$3 + ($1 + -1 << 2) >> 2];
 $15 = $4 + ($7 * $7 - $11 * $11);
 HEAPF32[$2 + 24 >> 2] = $15;
 $19 = +HEAPF32[$0 + 8 >> 2];
 $23 = +HEAPF32[$3 + ($1 + -2 << 2) >> 2];
 $27 = $15 + ($19 * $19 - $23 * $23);
 HEAPF32[$2 + 48 >> 2] = $27;
 $31 = +HEAPF32[$0 + 4 >> 2];
 $35 = +HEAPF32[$3 + ($1 + -3 << 2) >> 2];
 $39 = $27 + ($31 * $31 - $35 * $35);
 HEAPF32[$2 + 72 >> 2] = $39;
 $42 = +HEAPF32[$0 >> 2];
 $45 = +HEAPF32[$0 + ($1 << 2) >> 2];
 HEAPF32[$2 + 96 >> 2] = $39 + ($42 * $42 - $45 * $45);
 $$07275 = 1;
 $$077 = $0 + 12 | 0;
 $indvars$iv = 4;
 while (1) {
  $53 = +_silk_inner_product_FLP($3, $$077, $1);
  $54 = $53;
  HEAPF32[$2 + ($$07275 * 5 << 2) >> 2] = $54;
  HEAPF32[$2 + ($$07275 << 2) >> 2] = $54;
  if (($$07275 | 1 | 0) != 5) {
   $$17173 = $53;
   $$174 = 1;
   do {
    $60 = 0 - $$174 | 0;
    $66 = $1 - $$174 | 0;
    $$17173 = $$17173 + (+HEAPF32[$3 + ($60 << 2) >> 2] * +HEAPF32[$$077 + ($60 << 2) >> 2] - +HEAPF32[$3 + ($66 << 2) >> 2] * +HEAPF32[$$077 + ($66 << 2) >> 2]);
    $75 = $$17173;
    $76 = $$174 + $$07275 | 0;
    HEAPF32[$2 + (($76 * 5 | 0) + $$174 << 2) >> 2] = $75;
    HEAPF32[$2 + (($$174 * 5 | 0) + $76 << 2) >> 2] = $75;
    $$174 = $$174 + 1 | 0;
   } while (($$174 | 0) != ($indvars$iv | 0));
  }
  $$07275 = $$07275 + 1 | 0;
  if (($$07275 | 0) == 5) break; else {
   $$077 = $$077 + -4 | 0;
   $indvars$iv = $indvars$iv + -1 | 0;
  }
 }
 return;
}

function _silk_setup_resamplers($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $13 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $2 = sp;
 $3 = $0 + 4576 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) == ($1 | 0)) {
  $8 = $0 + 4556 | 0;
  if ((HEAP32[$0 + 4560 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
   $$pre$phiZ2D = $8;
   $40 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $41 = $0 + 4560 | 0;
   HEAP32[$41 >> 2] = $40;
   STACKTOP = sp;
   return;
  }
 }
 if (!$4) {
  $13 = $0 + 4556 | 0;
  _silk_resampler_init($0 + 5776 | 0, HEAP32[$13 >> 2] | 0, $1 * 1e3 | 0, 1);
  $$pre$phiZ2D = $13;
  $40 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $41 = $0 + 4560 | 0;
  HEAP32[$41 >> 2] = $40;
  STACKTOP = sp;
  return;
 } else {
  $19 = ((HEAP32[$0 + 4580 >> 2] | 0) * 10 | 0) + 5 | 0;
  $20 = Math_imul($19, $4) | 0;
  $21 = Math_imul($19, $1) | 0;
  $24 = _llvm_stacksave() | 0;
  $25 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ((($20 | 0) > ($21 | 0) ? $20 : $21) << 1) | 0) + 15 & -16) | 0;
  $26 = $0 + 7180 | 0;
  _silk_float2short_array($25, $26, $20);
  $30 = $0 + 4556 | 0;
  _silk_resampler_init($2, (HEAP32[$3 >> 2] << 16 >> 16) * 1e3 | 0, HEAP32[$30 >> 2] | 0, 0);
  $34 = Math_imul((HEAP32[$30 >> 2] | 0) / 1e3 | 0, $19) | 0;
  $35 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($34 << 1) | 0) + 15 & -16) | 0;
  _silk_resampler($2, $35, $25, $20);
  $36 = $0 + 5776 | 0;
  _silk_resampler_init($36, HEAP32[$30 >> 2] | 0, ($1 << 16 >> 16) * 1e3 | 0, 1);
  _silk_resampler($36, $25, $35, $34);
  _silk_short2float_array($26, $25, $21);
  _llvm_stackrestore($24 | 0);
  $$pre$phiZ2D = $30;
  $40 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $41 = $0 + 4560 | 0;
  HEAP32[$41 >> 2] = $40;
  STACKTOP = sp;
  return;
 }
}

function _silk_PLC_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$082$us = 0, $$082$us$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre88 = 0, $12 = 0, $13 = 0, $16 = 0, $19 = 0, $27 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $46 = 0, $54 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 << 1 << 1) | 0) + 15 & -16) | 0;
 if (($6 | 0) <= 0) {
  $$pre$phiZ2D = $9 + ($6 << 1) | 0;
  _silk_sum_sqr_shift($0, $1, $9, $6);
  _silk_sum_sqr_shift($2, $3, $$pre$phiZ2D, $6);
  STACKTOP = sp;
  return;
 }
 $12 = Math_imul($7 + -2 | 0, $6) | 0;
 $$pre = HEAP32[$5 >> 2] | 0;
 $13 = $$pre << 16 >> 16;
 $16 = ($$pre >> 15) + 1 >> 1;
 $$082$us = 0;
 do {
  $19 = HEAP32[$4 + ($$082$us + $12 << 2) >> 2] | 0;
  $27 = ((Math_imul($13, $19 & 65535) | 0) >> 16) + (Math_imul($13, $19 >> 16) | 0) + (Math_imul($16, $19) | 0) | 0;
  HEAP16[$9 + ($$082$us << 1) >> 1] = ($27 | 0) > 8388607 ? 32767 : ($27 | 0) < -8388608 ? -32768 : $27 >>> 8 & 65535;
  $$082$us = $$082$us + 1 | 0;
 } while (($$082$us | 0) != ($6 | 0));
 $36 = $9 + ($6 << 1) | 0;
 $38 = Math_imul($7 + -1 | 0, $6) | 0;
 $$pre88 = HEAP32[$5 + 4 >> 2] | 0;
 $40 = $$pre88 << 16 >> 16;
 $43 = ($$pre88 >> 15) + 1 >> 1;
 $$082$us$1 = 0;
 do {
  $46 = HEAP32[$4 + ($$082$us$1 + $38 << 2) >> 2] | 0;
  $54 = ((Math_imul($40, $46 & 65535) | 0) >> 16) + (Math_imul($40, $46 >> 16) | 0) + (Math_imul($43, $46) | 0) | 0;
  HEAP16[$36 + ($$082$us$1 << 1) >> 1] = ($54 | 0) > 8388607 ? 32767 : ($54 | 0) < -8388608 ? -32768 : $54 >>> 8 & 65535;
  $$082$us$1 = $$082$us$1 + 1 | 0;
 } while (($$082$us$1 | 0) != ($6 | 0));
 $$pre$phiZ2D = $36;
 _silk_sum_sqr_shift($0, $1, $9, $6);
 _silk_sum_sqr_shift($2, $3, $$pre$phiZ2D, $6);
 STACKTOP = sp;
 return;
}

function _speex_resampler_init_frac($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$058 = 0, $13 = 0, $16 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0;
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0 | $5 >>> 0 > 10) {
  if (!$6) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$6 >> 2] = 3;
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = _speex_alloc_820(96) | 0;
 if (!$13) {
  if (!$6) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$6 >> 2] = 1;
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = $13 + 52 | 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$13 + 56 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$13 + 12 >> 2] = 0;
 HEAP32[$13 + 16 >> 2] = -1;
 HEAP32[$13 + 80 >> 2] = 0;
 HEAP32[$13 + 28 >> 2] = 0;
 HEAP32[$13 + 24 >> 2] = 0;
 HEAP32[$13 + 72 >> 2] = 0;
 HEAP32[$13 + 84 >> 2] = 0;
 HEAPF32[$13 + 44 >> 2] = 1.0;
 HEAP32[$13 + 20 >> 2] = $0;
 HEAP32[$13 + 88 >> 2] = 1;
 HEAP32[$13 + 92 >> 2] = 1;
 HEAP32[$13 + 32 >> 2] = 160;
 $29 = $0 << 2;
 $30 = _speex_alloc_820($29) | 0;
 HEAP32[$13 + 60 >> 2] = $30;
 if ($30 | 0) {
  $33 = _speex_alloc_820($29) | 0;
  HEAP32[$13 + 68 >> 2] = $33;
  if ($33 | 0) {
   $36 = _speex_alloc_820($29) | 0;
   HEAP32[$13 + 64 >> 2] = $36;
   if ($36 | 0) {
    _speex_resampler_set_quality($13, $5);
    _speex_resampler_set_rate_frac($13, $1, $2, $3, $4);
    $39 = _update_filter($13) | 0;
    if (!$39) {
     HEAP32[$16 >> 2] = 1;
     $$058 = $13;
    } else {
     _speex_resampler_destroy($13);
     $$058 = 0;
    }
    if (!$6) {
     $$0 = $$058;
     return $$0 | 0;
    }
    HEAP32[$6 >> 2] = $39;
    $$0 = $$058;
    return $$0 | 0;
   }
  }
 }
 if ($6 | 0) HEAP32[$6 >> 2] = 1;
 _speex_resampler_destroy($13);
 $$0 = 0;
 return $$0 | 0;
}

function _silk_sum_sqr_shift($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$055$lcssa = 0, $$05560 = 0, $$061 = 0, $$1 = 0, $$156$lcssa = 0, $$15657 = 0, $$2$lcssa = 0, $$258 = 0, $$3 = 0, $10 = 0, $11 = 0, $15 = 0, $26 = 0, $33 = 0, $36 = 0, $37 = 0, $41 = 0, $5 = 0, $52 = 0, $6 = 0, $7 = 0;
 $5 = 31 - (_silk_CLZ32_509($3) | 0) | 0;
 $6 = $3 + -1 | 0;
 $7 = ($3 | 0) > 1;
 if ($7) {
  $$05560 = 0;
  $$061 = $3;
  do {
   $10 = HEAP16[$2 + ($$05560 << 1) >> 1] | 0;
   $11 = Math_imul($10, $10) | 0;
   $15 = HEAP16[$2 + (($$05560 | 1) << 1) >> 1] | 0;
   $$061 = (((Math_imul($15, $15) | 0) + $11 | 0) >>> $5) + $$061 | 0;
   $$05560 = $$05560 + 2 | 0;
  } while (($$05560 | 0) < ($6 | 0));
  $$0$lcssa = $$061;
  $$055$lcssa = $3 & -2;
 } else {
  $$0$lcssa = $3;
  $$055$lcssa = 0;
 }
 if (($$055$lcssa | 0) < ($3 | 0)) {
  $26 = HEAP16[$2 + ($$055$lcssa << 1) >> 1] | 0;
  $$1 = ((Math_imul($26, $26) | 0) >>> $5) + $$0$lcssa | 0;
 } else $$1 = $$0$lcssa;
 $33 = _silk_max_32_510($5 + 3 - (_silk_CLZ32_509($$1) | 0) | 0) | 0;
 if ($7) {
  $$15657 = 0;
  $$258 = 0;
  do {
   $36 = HEAP16[$2 + ($$15657 << 1) >> 1] | 0;
   $37 = Math_imul($36, $36) | 0;
   $41 = HEAP16[$2 + (($$15657 | 1) << 1) >> 1] | 0;
   $$258 = (((Math_imul($41, $41) | 0) + $37 | 0) >>> $33) + $$258 | 0;
   $$15657 = $$15657 + 2 | 0;
  } while (($$15657 | 0) < ($6 | 0));
  $$156$lcssa = $3 & -2;
  $$2$lcssa = $$258;
 } else {
  $$156$lcssa = 0;
  $$2$lcssa = 0;
 }
 if (($$156$lcssa | 0) >= ($3 | 0)) {
  $$3 = $$2$lcssa;
  HEAP32[$1 >> 2] = $33;
  HEAP32[$0 >> 2] = $$3;
  return;
 }
 $52 = HEAP16[$2 + ($$156$lcssa << 1) >> 1] | 0;
 $$3 = ((Math_imul($52, $52) | 0) >>> $33) + $$2$lcssa | 0;
 HEAP32[$1 >> 2] = $33;
 HEAP32[$0 >> 2] = $$3;
 return;
}

function _ec_laplace_encode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$lcssa = 0, $$047$lcssa = 0, $$04754 = 0, $$048$lcssa = 0, $$04853 = 0, $$055 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$250 = 0, $$lcssa = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $23 = 0, $24 = 0, $29 = 0, $35 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $9 = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if (!$4) {
  $$2 = $2;
  $$250 = 0;
  $42 = $$2 + $$250 | 0;
  _ec_encode_bin($0, $$250, $42);
  return;
 }
 $6 = $4 >> 31;
 $8 = $6 + $4 ^ $6;
 $9 = _ec_laplace_get_freq1($2, $3) | 0;
 $10 = ($9 | 0) == 0;
 if (($8 | 0) > 1 & ($10 ^ 1)) {
  $$04754 = 1;
  $$04853 = $2;
  $$055 = $9;
  while (1) {
   $12 = $$055 << 1;
   $14 = $$04853 + 2 + $12 | 0;
   $16 = (Math_imul($12, $3) | 0) >>> 15;
   $17 = $$04754 + 1 | 0;
   $18 = ($16 | 0) == 0;
   if (($8 | 0) > ($17 | 0) & ($18 ^ 1)) {
    $$04754 = $17;
    $$04853 = $14;
    $$055 = $16;
   } else {
    $$0$lcssa = $16;
    $$047$lcssa = $17;
    $$048$lcssa = $14;
    $$lcssa = $18;
    break;
   }
  }
 } else {
  $$0$lcssa = $9;
  $$047$lcssa = 1;
  $$048$lcssa = $2;
  $$lcssa = $10;
 }
 if ($$lcssa) {
  $23 = $8 - $$047$lcssa | 0;
  $24 = (($4 >>> 31 | 32768) - $$048$lcssa >> 1) + -1 | 0;
  $$ = ($23 | 0) < ($24 | 0) ? $23 : $24;
  $29 = $$048$lcssa + $6 + ($$ << 1 | 1) | 0;
  HEAP32[$1 >> 2] = $$047$lcssa + $6 + $$ ^ $6;
  $$1 = ($29 | 0) != 32768 & 1;
  $$149 = $29;
 } else {
  $35 = $$0$lcssa + 1 | 0;
  $$1 = $35;
  $$149 = ($35 & ~$6) + $$048$lcssa | 0;
 }
 if (($$1 + $$149 | 0) >>> 0 >= 32769) _celt_fatal(41301, 41332, 88);
 if (!$$1) _celt_fatal(41347, 41332, 89); else {
  $$2 = $$1;
  $$250 = $$149;
  $42 = $$2 + $$250 | 0;
  _ec_encode_bin($0, $$250, $42);
  return;
 }
}

function _silk_LPC_fit($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$07689$us = 0, $$07788$us = 0, $$07992$us = 0, $$093$us = 0, $$18087$us = 0, $$184 = 0, $$285 = 0, $17 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $6 = 0, $9 = 0;
 if (($2 | 0) <= 0) return;
 $$07992$us = 0;
 $$093$us = 0;
 while (1) {
  $$07689$us = 0;
  $$07788$us = 0;
  $$18087$us = $$07992$us;
  do {
   $20 = HEAP32[$1 + ($$07689$us << 2) >> 2] | 0;
   $23 = ($20 | 0) > 0 ? $20 : 0 - $20 | 0;
   $24 = ($23 | 0) > ($$07788$us | 0);
   $$18087$us = $24 ? $$07689$us : $$18087$us;
   $$07788$us = $24 ? $23 : $$07788$us;
   $$07689$us = $$07689$us + 1 | 0;
  } while (($$07689$us | 0) != ($2 | 0));
  $6 = ($$07788$us >> 4) + 1 >> 1;
  if (($$07788$us | 0) <= 1048559) {
   $$0$lcssa = $$093$us;
   break;
  }
  $9 = ($6 | 0) < 163838 ? $6 : 163838;
  _silk_bwexpander_32($1, $2, 65470 - ((($9 << 14) + -536854528 | 0) / ((Math_imul($9, $$18087$us + 1 | 0) | 0) >> 2 | 0) | 0) | 0);
  $17 = $$093$us + 1 | 0;
  if ($17 >>> 0 < 10) {
   $$07992$us = $$18087$us;
   $$093$us = $17;
  } else {
   $$0$lcssa = $17;
   break;
  }
 }
 if (($$0$lcssa | 0) != 10) {
  $$285 = 0;
  do {
   HEAP16[$0 + ($$285 << 1) >> 1] = (((HEAP32[$1 + ($$285 << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
   $$285 = $$285 + 1 | 0;
  } while (($$285 | 0) != ($2 | 0));
  return;
 }
 $$184 = 0;
 do {
  $27 = $1 + ($$184 << 2) | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = $28 >> 4;
  if (($28 | 0) > 1048559) $35 = 32767; else if (($28 | 0) < -1048592) $35 = -32768; else $35 = $29 + 1 >> 1;
  HEAP16[$0 + ($$184 << 1) >> 1] = $35;
  HEAP32[$27 >> 2] = $35 << 16 >> 11;
  $$184 = $$184 + 1 | 0;
 } while (($$184 | 0) != ($2 | 0));
 return;
}

function _silk_schur_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$133 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $13 = 0, $15 = 0, $16 = 0.0, $18 = 0.0, $21 = 0.0, $29 = 0, $3 = 0, $31 = 0, $32 = 0.0, $38 = 0.0, $39 = 0.0, $7 = 0.0, $indvars$iv = 0, sp = 0, $$133$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $3 = sp;
 if ($2 >>> 0 >= 25) _celt_fatal(47248, 47308, 44);
 $$0 = 0;
 while (1) {
  $7 = +HEAPF32[$1 + ($$0 << 2) >> 2];
  HEAPF64[$3 + ($$0 << 4) + 8 >> 3] = $7;
  HEAPF64[$3 + ($$0 << 4) >> 3] = $7;
  if (($$0 | 0) < ($2 | 0)) $$0 = $$0 + 1 | 0; else break;
 }
 $13 = $3 + 8 | 0;
 if (($2 | 0) <= 0) {
  $38 = +HEAPF64[$13 >> 3];
  $39 = $38;
  STACKTOP = sp;
  return +$39;
 }
 $$133 = 0;
 $indvars$iv = $2;
 while (1) {
  $$133$looptemp = $$133;
  $$133 = $$133 + 1 | 0;
  $15 = $3 + ($$133 << 4) | 0;
  $16 = +HEAPF64[$15 >> 3];
  $18 = +HEAPF64[$13 >> 3];
  $21 = -$16 / ($18 > 9.999999717180685e-10 ? $18 : 9.999999717180685e-10);
  HEAPF32[$0 + ($$133$looptemp << 2) >> 2] = $21;
  if (($$133$looptemp | 0) < ($2 | 0)) {
   HEAPF64[$15 >> 3] = $16 + $21 * $18;
   HEAPF64[$13 >> 3] = $18 + $21 * $16;
   if (($indvars$iv | 0) != 1) {
    $29 = 1;
    do {
     $$phi$trans$insert = $3 + ($29 << 4) + 8 | 0;
     $$pre = +HEAPF64[$$phi$trans$insert >> 3];
     $31 = $3 + ($$133 + $29 << 4) | 0;
     $32 = +HEAPF64[$31 >> 3];
     HEAPF64[$31 >> 3] = $32 + $21 * $$pre;
     HEAPF64[$$phi$trans$insert >> 3] = $$pre + $21 * $32;
     $29 = $29 + 1 | 0;
    } while (($29 | 0) != ($indvars$iv | 0));
   }
  }
  if (($$133 | 0) == ($2 | 0)) break; else $indvars$iv = $indvars$iv + -1 | 0;
 }
 $38 = +HEAPF64[$13 >> 3];
 $39 = $38;
 STACKTOP = sp;
 return +$39;
}

function _dc_reject($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$03 = 0, $$050$lcssa = 0.0, $$0502 = 0.0, $$051$lcssa = 0.0, $$0515 = 0.0, $$052$lcssa = 0.0, $$0521 = 0.0, $$16 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $14 = 0, $16 = 0.0, $17 = 0, $19 = 0.0, $25 = 0.0, $29 = 0.0, $35 = 0.0, $40 = 0.0, $7 = 0.0, $8 = 0.0;
 $7 = 18.900001525878906 / +($5 | 0);
 $8 = 1.0 - $7;
 $10 = +HEAPF32[$2 >> 2];
 if (($4 | 0) == 2) {
  $11 = $2 + 8 | 0;
  $12 = +HEAPF32[$11 >> 2];
  if (($3 | 0) > 0) {
   $$03 = 0;
   $$0502 = $10;
   $$0521 = $12;
   while (1) {
    $14 = $$03 << 1;
    $16 = +HEAPF32[$0 + ($14 << 2) >> 2];
    $17 = $14 | 1;
    $19 = +HEAPF32[$0 + ($17 << 2) >> 2];
    $25 = $8 * $$0502 + ($7 * $16 + 1.0000000031710769e-30);
    $29 = $8 * $$0521 + ($7 * $19 + 1.0000000031710769e-30);
    HEAPF32[$1 + ($14 << 2) >> 2] = $16 - $$0502;
    HEAPF32[$1 + ($17 << 2) >> 2] = $19 - $$0521;
    $$03 = $$03 + 1 | 0;
    if (($$03 | 0) == ($3 | 0)) {
     $$050$lcssa = $25;
     $$052$lcssa = $29;
     break;
    } else {
     $$0502 = $25;
     $$0521 = $29;
    }
   }
  } else {
   $$050$lcssa = $10;
   $$052$lcssa = $12;
  }
  HEAPF32[$2 >> 2] = $$050$lcssa;
  HEAPF32[$11 >> 2] = $$052$lcssa;
  return;
 } else {
  if (($3 | 0) > 0) {
   $$0515 = $10;
   $$16 = 0;
   while (1) {
    $35 = +HEAPF32[$0 + ($$16 << 2) >> 2];
    $40 = $8 * $$0515 + ($7 * $35 + 1.0000000031710769e-30);
    HEAPF32[$1 + ($$16 << 2) >> 2] = $35 - $$0515;
    $$16 = $$16 + 1 | 0;
    if (($$16 | 0) == ($3 | 0)) {
     $$051$lcssa = $40;
     break;
    } else $$0515 = $40;
   }
  } else $$051$lcssa = $10;
  HEAPF32[$2 >> 2] = $$051$lcssa;
  return;
 }
}

function _opus_fft_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04549 = 0, $$046 = 0, $$04748 = 0, $$idx = 0, $$pre$phiZ2D = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $24 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $5 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$2 >> 2] = 1;
 $$046 = 0;
 $13 = 1;
 while (1) {
  $5 = $$046 << 1;
  $11 = HEAP16[$0 + 12 + (($5 | 1) << 1) >> 1] | 0;
  $13 = Math_imul($13, HEAP16[$0 + 12 + ($5 << 1) >> 1] | 0) | 0;
  $14 = $$046 + 1 | 0;
  HEAP32[$2 + ($14 << 2) >> 2] = $13;
  if ($11 << 16 >> 16 == 1) break; else $$046 = $14;
 }
 $spec$select = ($4 | 0) > 0 ? $4 : 0;
 $$idx = $0 + 48 | 0;
 $$04549 = $$046;
 $$04748 = HEAP16[$0 + 12 + (($14 << 1) + -1 << 1) >> 1] | 0;
 while (1) {
  if (!$$04549) {
   $$0 = 1;
   $$pre$phiZ2D = 0;
  } else {
   $24 = $$04549 << 1;
   $$0 = HEAP16[$0 + 12 + ($24 + -1 << 1) >> 1] | 0;
   $$pre$phiZ2D = $24;
  }
  switch (HEAP16[$0 + 12 + ($$pre$phiZ2D << 1) >> 1] | 0) {
  case 2:
   {
    _kf_bfly2($1, $$04748, HEAP32[$2 + ($$04549 << 2) >> 2] | 0);
    break;
   }
  case 4:
   {
    $35 = HEAP32[$2 + ($$04549 << 2) >> 2] | 0;
    _kf_bfly4($1, $35 << $spec$select, $0, $$04748, $35, $$0);
    break;
   }
  case 3:
   {
    $38 = HEAP32[$2 + ($$04549 << 2) >> 2] | 0;
    _kf_bfly3($1, $38 << $spec$select, $0, $$04748, $38, $$0);
    break;
   }
  case 5:
   {
    $41 = HEAP32[$2 + ($$04549 << 2) >> 2] | 0;
    _kf_bfly5($1, $41 << $spec$select, HEAP32[$$idx >> 2] | 0, $$04748, $41, $$0);
    break;
   }
  default:
   {}
  }
  if (($$04549 | 0) > 0) {
   $$04549 = $$04549 + -1 | 0;
   $$04748 = $$0;
  } else break;
 }
 STACKTOP = sp;
 return;
}

function _exp_rotation($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$05557 = 0, $$05557$us = 0, $$05557$us59 = 0, $$1 = 0, $$pre65 = 0, $16 = 0.0, $18 = 0.0, $22 = 0.0, $27 = 0.0, $30 = 0, $37 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $48 = 0;
 if (($4 << 1 | 0) >= ($1 | 0) | ($5 | 0) == 0) return;
 $16 = +($1 | 0) / +((Math_imul(HEAP32[39148 + ($5 + -1 << 2) >> 2] | 0, $4) | 0) + $1 | 0);
 $18 = $16 * $16 * .5;
 $22 = +Math_cos(+($18 * 1.5707963705062866));
 $27 = +Math_cos(+((1.0 - $18) * 1.5707963705062866));
 if (($3 << 3 | 0) > ($1 | 0)) $$1 = 0; else {
  $30 = $3 >> 2;
  $$0 = 1;
  while (1) if (((Math_imul((Math_imul($$0, $$0) | 0) + $$0 | 0, $3) | 0) + $30 | 0) < ($1 | 0)) $$0 = $$0 + 1 | 0; else {
   $$1 = $$0;
   break;
  }
 }
 $37 = _celt_udiv_162($1, $3) | 0;
 if (($3 | 0) <= 0) return;
 $40 = ($$1 | 0) == 0;
 $41 = -$27;
 $42 = -$22;
 if (($2 | 0) < 0) {
  $$05557$us = 0;
  do {
   $$pre65 = $0 + ((Math_imul($$05557$us, $37) | 0) << 2) | 0;
   if (!$40) _exp_rotation1($$pre65, $37, $$1, $27, $22);
   _exp_rotation1($$pre65, $37, 1, $22, $27);
   $$05557$us = $$05557$us + 1 | 0;
  } while (($$05557$us | 0) != ($3 | 0));
  return;
 }
 if ($40) {
  $$05557$us59 = 0;
  do {
   _exp_rotation1($0 + ((Math_imul($$05557$us59, $37) | 0) << 2) | 0, $37, 1, $22, $41);
   $$05557$us59 = $$05557$us59 + 1 | 0;
  } while (($$05557$us59 | 0) != ($3 | 0));
  return;
 } else {
  $$05557 = 0;
  do {
   $48 = $0 + ((Math_imul($$05557, $37) | 0) << 2) | 0;
   _exp_rotation1($48, $37, 1, $22, $41);
   _exp_rotation1($48, $37, $$1, $27, $42);
   $$05557 = $$05557 + 1 | 0;
  } while (($$05557 | 0) != ($3 | 0));
  return;
 }
}

function _validate_celt_decoder($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $20 = 0, $24 = 0, $29 = 0, $34 = 0, $39 = 0, $43 = 0;
 if ((HEAP32[$0 >> 2] | 0) != 38816) _celt_fatal(40005, 40077, 118);
 if ((HEAP32[$0 + 4 >> 2] | 0) != 120) _celt_fatal(40097, 40077, 119);
 if (((HEAP32[$0 + 8 >> 2] | 0) + -1 | 0) >>> 0 >= 2) _celt_fatal(48518, 40077, 121);
 if (((HEAP32[$0 + 12 >> 2] | 0) + -1 | 0) >>> 0 >= 2) _celt_fatal(49421, 40077, 122);
 if ((HEAP32[$0 + 16 >> 2] | 0) <= 0) _celt_fatal(40134, 40077, 123);
 $14 = HEAP32[$0 + 20 >> 2] | 0;
 switch ($14 | 0) {
 case 17:
 case 0:
  break;
 default:
  _celt_fatal(40171, 40077, 124);
 }
 $16 = HEAP32[$0 + 24 >> 2] | 0;
 if (($14 | 0) >= ($16 | 0)) _celt_fatal(40223, 40077, 125);
 if (($16 | 0) >= 22) _celt_fatal(40261, 40077, 126);
 $20 = HEAP32[$0 + 36 >> 2] | 0;
 if (($20 | 0) <= -1) _celt_fatal(49345, 40077, 128);
 if ($20 | 0) _celt_fatal(49377, 40077, 129);
 $24 = HEAP32[$0 + 48 >> 2] | 0;
 if (($24 | 0) >= 721) _celt_fatal(40293, 40077, 131);
 if (!(($24 | 0) > 99 | ($24 | 0) == 0)) _celt_fatal(40353, 40077, 132);
 $29 = HEAP32[$0 + 60 >> 2] | 0;
 if (($29 | 0) >= 1024) _celt_fatal(40442, 40077, 133);
 if (!(($29 | 0) > 14 | ($29 | 0) == 0)) _celt_fatal(40495, 40077, 134);
 $34 = HEAP32[$0 + 64 >> 2] | 0;
 if (($34 | 0) >= 1024) _celt_fatal(40589, 40077, 135);
 if (!(($34 | 0) > 14 | ($34 | 0) == 0)) _celt_fatal(40646, 40077, 136);
 $39 = HEAP32[$0 + 76 >> 2] | 0;
 if (($39 | 0) >= 3) _celt_fatal(40748, 40077, 137);
 if (($39 | 0) <= -1) _celt_fatal(40793, 40077, 138);
 $43 = HEAP32[$0 + 80 >> 2] | 0;
 if (($43 | 0) >= 3) _celt_fatal(40838, 40077, 139);
 if (($43 | 0) > -1) return; else _celt_fatal(40887, 40077, 140);
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    }
    $$090 = $63 ? $$090 : $26;
    $$094 = $63 ? $25 : $$094 - $25 | 0;
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function _silk_PLC_glue_frames($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04243 = 0, $$044 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $48 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (HEAP32[$0 + 4160 >> 2] | 0) {
  _silk_sum_sqr_shift($0 + 4232 | 0, $0 + 4236 | 0, $1, $2);
  HEAP32[$0 + 4220 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 $11 = $0 + 4220 | 0;
 if (HEAP32[$11 >> 2] | 0) {
  _silk_sum_sqr_shift($4, $3, $1, $2);
  $14 = HEAP32[$3 >> 2] | 0;
  $16 = HEAP32[$0 + 4236 >> 2] | 0;
  if (($14 | 0) > ($16 | 0)) {
   $18 = $0 + 4232 | 0;
   HEAP32[$18 >> 2] = HEAP32[$18 >> 2] >> $14 - $16;
  } else if (($14 | 0) < ($16 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] >> $16 - $14;
  $26 = HEAP32[$4 >> 2] | 0;
  $27 = $0 + 4232 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  if (($26 | 0) > ($28 | 0)) {
   $30 = _silk_CLZ32_258($28) | 0;
   $32 = $28 << $30 + -1;
   HEAP32[$27 >> 2] = $32;
   $35 = $26 >> (_silk_max_32(25 - $30 | 0, 0) | 0);
   HEAP32[$4 >> 2] = $35;
   $40 = (_silk_SQRT_APPROX_261(($32 | 0) / ((($35 | 0) > 1 ? $35 : 1) | 0) | 0) | 0) << 4;
   $43 = ((65536 - $40 | 0) / ($2 | 0) | 0) << 2;
   if (($2 | 0) > 0) {
    $$04243 = 0;
    $$044 = $40;
    do {
     $46 = $1 + ($$04243 << 1) | 0;
     $48 = HEAP16[$46 >> 1] | 0;
     HEAP16[$46 >> 1] = ((Math_imul($$044 & 65532, $48) | 0) >>> 16) + (Math_imul($$044 >> 16, $48) | 0);
     $$044 = $$044 + $43 | 0;
     $$04243 = $$04243 + 1 | 0;
    } while (($$044 | 0) < 65537 & ($$04243 | 0) < ($2 | 0));
   }
  }
 }
 HEAP32[$11 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _silk_biquad_alt_stride1($0, $1, $$val, $$1$val, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$053 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $21 = 0, $29 = 0, $31 = 0, $33 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0;
 $5 = 0 - $$val | 0;
 $6 = $5 & 16383;
 $7 = 0 - $$1$val | 0;
 $8 = $7 & 16383;
 if (($4 | 0) <= 0) return;
 $10 = $2 + 4 | 0;
 $12 = $5 << 2 >> 16;
 $13 = $1 + 4 | 0;
 $15 = $7 << 2 >> 16;
 $16 = $1 + 8 | 0;
 $$053 = 0;
 do {
  $19 = HEAP16[$0 + ($$053 << 1) >> 1] | 0;
  $21 = HEAP32[$1 >> 2] | 0;
  $29 = (Math_imul($21 >> 16, $19) | 0) + (HEAP32[$2 >> 2] | 0) + ((Math_imul($21 & 65535, $19) | 0) >> 16) << 2;
  $31 = $29 >> 16;
  $33 = $29 & 65532;
  $45 = (Math_imul($31, $12) | 0) + (HEAP32[$10 >> 2] | 0) + ((Math_imul($33, $12) | 0) >> 16) + ((((Math_imul($33, $6) | 0) >>> 16) + (Math_imul($31, $6) | 0) >> 13) + 1 >> 1) | 0;
  HEAP32[$2 >> 2] = $45;
  $46 = HEAP32[$13 >> 2] | 0;
  HEAP32[$2 >> 2] = ((Math_imul($46 & 65535, $19) | 0) >> 16) + (Math_imul($46 >> 16, $19) | 0) + $45;
  $65 = ((Math_imul($33, $15) | 0) >> 16) + (Math_imul($31, $15) | 0) + ((((Math_imul($33, $8) | 0) >>> 16) + (Math_imul($31, $8) | 0) >> 13) + 1 >> 1) | 0;
  HEAP32[$10 >> 2] = $65;
  $66 = HEAP32[$16 >> 2] | 0;
  HEAP32[$10 >> 2] = ((Math_imul($66 & 65535, $19) | 0) >> 16) + (Math_imul($66 >> 16, $19) | 0) + $65;
  HEAP16[$3 + ($$053 << 1) >> 1] = ($29 | 0) > 536854528 ? 32767 : ($29 | 0) < -536887295 ? -32768 : ($29 + 16383 | 0) >>> 14 & 65535;
  $$053 = $$053 + 1 | 0;
 } while (($$053 | 0) != ($4 | 0));
 return;
}

function _deinterleave_hadamard($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$03644$us = 0, $$048$us = 0, $$13739$us = 0, $$140$us = 0, $13 = 0, $23 = 0, $32 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 if (($2 | 0) <= 0) _celt_fatal(39663, 39549, 591);
 if (!$3) {
  if (($1 | 0) <= 0) {
   $32 = $4 << 2;
   _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $$140$us = 0;
  do {
   $23 = Math_imul($$140$us, $1) | 0;
   $$13739$us = 0;
   do {
    HEAP32[$5 + ($$13739$us + $23 << 2) >> 2] = HEAP32[$0 + ((Math_imul($$13739$us, $2) | 0) + $$140$us << 2) >> 2];
    $$13739$us = $$13739$us + 1 | 0;
   } while (($$13739$us | 0) != ($1 | 0));
   $$140$us = $$140$us + 1 | 0;
  } while (($$140$us | 0) != ($2 | 0));
  $32 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $9 = 48 + ($2 << 2) + -8 | 0;
  if (($1 | 0) <= 0) {
   $32 = $4 << 2;
   _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $$048$us = 0;
  do {
   $13 = Math_imul(HEAP32[$9 + ($$048$us << 2) >> 2] | 0, $1) | 0;
   $$03644$us = 0;
   do {
    HEAP32[$5 + ($13 + $$03644$us << 2) >> 2] = HEAP32[$0 + ((Math_imul($$03644$us, $2) | 0) + $$048$us << 2) >> 2];
    $$03644$us = $$03644$us + 1 | 0;
   } while (($$03644$us | 0) != ($1 | 0));
   $$048$us = $$048$us + 1 | 0;
  } while (($$048$us | 0) != ($2 | 0));
  $32 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _compute_dense($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03443 = 0, $$03443$us = 0, $$03540$us = 0, $$041$us = 0.0, $$138 = 0, $$237 = 0, $14 = 0, $19 = 0.0, $38 = 0, $4 = 0, $42 = 0, $6 = 0, $7 = 0, $9 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0;
 $7 = ($6 | 0) > 0;
 L1 : do if ($7) {
  $9 = $0 + 4 | 0;
  if (($4 | 0) <= 0) {
   $$03443 = 0;
   while (1) {
    HEAPF32[$1 + ($$03443 << 2) >> 2] = +(HEAP8[(HEAP32[$0 >> 2] | 0) + $$03443 >> 0] | 0) * .0078125;
    $$03443 = $$03443 + 1 | 0;
    if (($$03443 | 0) == ($6 | 0)) break L1;
   }
  }
  $$03443$us = 0;
  do {
   $14 = HEAP32[$9 >> 2] | 0;
   $$03540$us = 0;
   $$041$us = +(HEAP8[(HEAP32[$0 >> 2] | 0) + $$03443$us >> 0] | 0);
   do {
    $19 = +(HEAP8[$14 + ((Math_imul($$03540$us, $6) | 0) + $$03443$us) >> 0] | 0);
    $$041$us = $$041$us + +HEAPF32[$2 + ($$03540$us << 2) >> 2] * $19;
    $$03540$us = $$03540$us + 1 | 0;
   } while (($$03540$us | 0) != ($4 | 0));
   HEAPF32[$1 + ($$03443$us << 2) >> 2] = $$041$us * .0078125;
   $$03443$us = $$03443$us + 1 | 0;
  } while (($$03443$us | 0) != ($6 | 0));
 } while (0);
 if (!(HEAP32[$0 + 16 >> 2] | 0)) {
  if (!$7) return;
  $$237 = 0;
  do {
   $42 = $1 + ($$237 << 2) | 0;
   HEAPF32[$42 >> 2] = +_tansig_approx(+HEAPF32[$42 >> 2]);
   $$237 = $$237 + 1 | 0;
  } while (($$237 | 0) != ($6 | 0));
  return;
 } else {
  if (!$7) return;
  $$138 = 0;
  do {
   $38 = $1 + ($$138 << 2) | 0;
   HEAPF32[$38 >> 2] = +_sigmoid_approx(+HEAPF32[$38 >> 2]);
   $$138 = $$138 + 1 | 0;
  } while (($$138 | 0) != ($6 | 0));
  return;
 }
}

function _interleave_hadamard($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$03543$us = 0, $$047$us = 0, $$13638$us = 0, $$139$us = 0, $13 = 0, $24 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 if (!$3) {
  if (!(($2 | 0) > 0 & ($1 | 0) > 0)) {
   $33 = $4 << 2;
   _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $$139$us = 0;
  do {
   $24 = Math_imul($$139$us, $1) | 0;
   $$13638$us = 0;
   do {
    HEAP32[$5 + ((Math_imul($$13638$us, $2) | 0) + $$139$us << 2) >> 2] = HEAP32[$0 + ($$13638$us + $24 << 2) >> 2];
    $$13638$us = $$13638$us + 1 | 0;
   } while (($$13638$us | 0) != ($1 | 0));
   $$139$us = $$139$us + 1 | 0;
  } while (($$139$us | 0) != ($2 | 0));
  $33 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $8 = 48 + ($2 << 2) + -8 | 0;
  if (!(($2 | 0) > 0 & ($1 | 0) > 0)) {
   $33 = $4 << 2;
   _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
   STACKTOP = sp;
   return;
  }
  $$047$us = 0;
  do {
   $13 = Math_imul(HEAP32[$8 + ($$047$us << 2) >> 2] | 0, $1) | 0;
   $$03543$us = 0;
   do {
    HEAP32[$5 + ((Math_imul($$03543$us, $2) | 0) + $$047$us << 2) >> 2] = HEAP32[$0 + ($13 + $$03543$us << 2) >> 2];
    $$03543$us = $$03543$us + 1 | 0;
   } while (($$03543$us | 0) != ($1 | 0));
   $$047$us = $$047$us + 1 | 0;
  } while (($$047$us | 0) != ($2 | 0));
  $33 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function __celt_lpc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04953 = 0, $$050$lcssa = 0.0, $$05052 = 0.0, $$05158 = 0.0, $$059 = 0, $$154 = 0, $15 = 0.0, $21 = 0.0, $22 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $7 = 0, $indvars$iv = 0, $$059$looptemp = 0;
 $3 = +HEAPF32[$1 >> 2];
 _memset($0 | 0, 0, $2 << 2 | 0) | 0;
 if (!(+HEAPF32[$1 >> 2] != 0.0)) return;
 $$05158 = $3;
 $$059 = 0;
 $indvars$iv = 1;
 while (1) {
  $7 = $indvars$iv >>> 1;
  if (!$$059) $$050$lcssa = 0.0; else {
   $$04953 = 0;
   $$05052 = 0.0;
   while (1) {
    $15 = $$05052 + +HEAPF32[$0 + ($$04953 << 2) >> 2] * +HEAPF32[$1 + ($$059 - $$04953 << 2) >> 2];
    $$04953 = $$04953 + 1 | 0;
    if (($$04953 | 0) == ($$059 | 0)) {
     $$050$lcssa = $15;
     break;
    } else $$05052 = $15;
   }
  }
  $$059$looptemp = $$059;
  $$059 = $$059 + 1 | 0;
  $21 = ($$050$lcssa + +HEAPF32[$1 + ($$059 << 2) >> 2]) / $$05158;
  $22 = -$21;
  HEAPF32[$0 + ($$059$looptemp << 2) >> 2] = $22;
  if ($$059 & 2147483646 | 0) {
   $25 = $$059$looptemp + -1 | 0;
   $$154 = 0;
   do {
    $26 = $0 + ($$154 << 2) | 0;
    $27 = +HEAPF32[$26 >> 2];
    $29 = $0 + ($25 - $$154 << 2) | 0;
    $30 = +HEAPF32[$29 >> 2];
    HEAPF32[$26 >> 2] = $27 + $30 * $22;
    HEAPF32[$29 >> 2] = $30 + $27 * $22;
    $$154 = $$154 + 1 | 0;
   } while (($$154 | 0) != ($7 | 0));
  }
  $$05158 = $$05158 - $$05158 * ($21 * $21);
  if (!(($$059 | 0) < ($2 | 0) ? !($$05158 < +HEAPF32[$1 >> 2] * 1.0000000474974513e-03) : 0)) break; else $indvars$iv = $indvars$iv + 1 | 0;
 }
 return;
}

function _silk_resampler_private_IIR_FIR_INTERPOL($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$03536 = 0, $$037 = 0, $15 = 0, $23 = 0, $31 = 0, $39 = 0, $43 = 0, $48 = 0, $56 = 0, $64 = 0, $7 = 0, $72 = 0, $81 = 0, $9 = 0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = $0;
  return $$0$lcssa | 0;
 }
 $$03536 = 0;
 $$037 = $0;
 while (1) {
  $7 = (($$03536 & 65535) * 12 | 0) >>> 16;
  $9 = $1 + ($$03536 >> 16 << 1) | 0;
  $15 = Math_imul(HEAP16[27568 + ($7 << 3) >> 1] | 0, HEAP16[$9 >> 1] | 0) | 0;
  $23 = (Math_imul(HEAP16[27568 + ($7 << 3) + 2 >> 1] | 0, HEAP16[$9 + 2 >> 1] | 0) | 0) + $15 | 0;
  $31 = $23 + (Math_imul(HEAP16[27568 + ($7 << 3) + 4 >> 1] | 0, HEAP16[$9 + 4 >> 1] | 0) | 0) | 0;
  $39 = $31 + (Math_imul(HEAP16[27568 + ($7 << 3) + 6 >> 1] | 0, HEAP16[$9 + 6 >> 1] | 0) | 0) | 0;
  $43 = 11 - $7 | 0;
  $48 = $39 + (Math_imul(HEAP16[27568 + ($43 << 3) + 6 >> 1] | 0, HEAP16[$9 + 8 >> 1] | 0) | 0) | 0;
  $56 = $48 + (Math_imul(HEAP16[27568 + ($43 << 3) + 4 >> 1] | 0, HEAP16[$9 + 10 >> 1] | 0) | 0) | 0;
  $64 = $56 + (Math_imul(HEAP16[27568 + ($43 << 3) + 2 >> 1] | 0, HEAP16[$9 + 12 >> 1] | 0) | 0) | 0;
  $72 = $64 + (Math_imul(HEAP16[27568 + ($43 << 3) >> 1] | 0, HEAP16[$9 + 14 >> 1] | 0) | 0) | 0;
  $81 = $$037 + 2 | 0;
  HEAP16[$$037 >> 1] = ($72 | 0) > 1073725439 ? 32767 : ($72 | 0) < -1073758208 ? -32768 : (($72 >>> 14) + 1 | 0) >>> 1 & 65535;
  $$03536 = $$03536 + $3 | 0;
  if (($$03536 | 0) >= ($2 | 0)) {
   $$0$lcssa = $81;
   break;
  } else $$037 = $81;
 }
 return $$0$lcssa | 0;
}

function _silk_NSQ_noise_shape_feedback_loop_c($$val, $0, $1, $2) {
 $$val = $$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03 = 0, $$048$lcssa = 0, $$0482 = 0, $$049$lcssa = 0, $$0491 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $39 = 0, $42 = 0, $47 = 0, $7 = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $$val;
 $7 = HEAP16[$1 >> 1] | 0;
 $13 = (Math_imul($$val >> 16, $7) | 0) + ($2 >> 1) + ((Math_imul($$val & 65535, $7) | 0) >> 16) | 0;
 if (($2 | 0) > 2) {
  $$03 = 2;
  $$0482 = $3;
  $$0491 = $13;
  while (1) {
   $15 = $$03 + -1 | 0;
   $16 = $0 + ($15 << 2) | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $$0482;
   $21 = HEAP16[$1 + ($15 << 1) >> 1] | 0;
   $22 = Math_imul($$0482 >> 16, $21) | 0;
   $25 = (Math_imul($$0482 & 65535, $21) | 0) >> 16;
   $26 = $0 + ($$03 << 2) | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$26 >> 2] = $17;
   $31 = HEAP16[$1 + ($$03 << 1) >> 1] | 0;
   $39 = $22 + $$0491 + $25 + (Math_imul($17 >> 16, $31) | 0) + ((Math_imul($17 & 65535, $31) | 0) >> 16) | 0;
   $$03 = $$03 + 2 | 0;
   if (($$03 | 0) >= ($2 | 0)) {
    $$048$lcssa = $27;
    $$049$lcssa = $39;
    break;
   } else {
    $$0482 = $27;
    $$0491 = $39;
   }
  }
 } else {
  $$048$lcssa = $3;
  $$049$lcssa = $13;
 }
 $42 = $2 + -1 | 0;
 HEAP32[$0 + ($42 << 2) >> 2] = $$048$lcssa;
 $47 = HEAP16[$1 + ($42 << 1) >> 1] | 0;
 return (Math_imul($$048$lcssa >> 16, $47) | 0) + $$049$lcssa + ((Math_imul($$048$lcssa & 65535, $47) | 0) >> 16) << 1 | 0;
}

function _silk_LPC_analysis_filter16_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) <= 16) return;
 $5 = $1 + 4 | 0;
 $6 = $1 + 8 | 0;
 $7 = $1 + 12 | 0;
 $8 = $1 + 16 | 0;
 $9 = $1 + 20 | 0;
 $10 = $1 + 24 | 0;
 $11 = $1 + 28 | 0;
 $12 = $1 + 32 | 0;
 $13 = $1 + 36 | 0;
 $14 = $1 + 40 | 0;
 $15 = $1 + 44 | 0;
 $16 = $1 + 48 | 0;
 $17 = $1 + 52 | 0;
 $18 = $1 + 56 | 0;
 $19 = $1 + 60 | 0;
 $$040 = 16;
 do {
  $21 = $2 + ($$040 + -1 << 2) | 0;
  HEAPF32[$0 + ($$040 << 2) >> 2] = +HEAPF32[$2 + ($$040 << 2) >> 2] - (+HEAPF32[$21 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$21 + -4 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$21 + -8 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$21 + -12 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$21 + -16 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$21 + -20 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$21 + -24 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$21 + -28 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$21 + -32 >> 2] * +HEAPF32[$12 >> 2] + +HEAPF32[$21 + -36 >> 2] * +HEAPF32[$13 >> 2] + +HEAPF32[$21 + -40 >> 2] * +HEAPF32[$14 >> 2] + +HEAPF32[$21 + -44 >> 2] * +HEAPF32[$15 >> 2] + +HEAPF32[$21 + -48 >> 2] * +HEAPF32[$16 >> 2] + +HEAPF32[$21 + -52 >> 2] * +HEAPF32[$17 >> 2] + +HEAPF32[$21 + -56 >> 2] * +HEAPF32[$18 >> 2] + +HEAPF32[$21 + -60 >> 2] * +HEAPF32[$19 >> 2]);
  $$040 = $$040 + 1 | 0;
 } while (($$040 | 0) != ($3 | 0));
 return;
}

function _stereo_fade($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$lcssa = 0, $$065$lver$orig = 0, $$164$lver$orig = 0, $10 = 0.0, $11 = 0.0, $15 = 0.0, $16 = 0.0, $21 = 0, $24 = 0, $29 = 0.0, $30 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0.0, $47 = 0, $50 = 0, $8 = 0, $9 = 0;
 $8 = 48e3 / ($7 | 0) | 0;
 $9 = ($4 | 0) / ($8 | 0) | 0;
 $10 = 1.0 - $2;
 $11 = 1.0 - $3;
 if (($9 | 0) > 0) {
  $$065$lver$orig = 0;
  do {
   $15 = +HEAPF32[$6 + ((Math_imul($$065$lver$orig, $8) | 0) << 2) >> 2];
   $16 = $15 * $15;
   $21 = $$065$lver$orig << 1;
   $24 = $21 | 1;
   $29 = ($11 * $16 + $10 * (1.0 - $16)) * ((+HEAPF32[$0 + ($21 << 2) >> 2] - +HEAPF32[$0 + ($24 << 2) >> 2]) * .5);
   $30 = $1 + ($21 << 2) | 0;
   HEAPF32[$30 >> 2] = +HEAPF32[$30 >> 2] - $29;
   $33 = $1 + ($24 << 2) | 0;
   HEAPF32[$33 >> 2] = +HEAPF32[$33 >> 2] + $29;
   $$065$lver$orig = $$065$lver$orig + 1 | 0;
  } while (($$065$lver$orig | 0) != ($9 | 0));
  $$0$lcssa = $9;
 } else $$0$lcssa = 0;
 if (($$0$lcssa | 0) >= ($5 | 0)) return;
 $$164$lver$orig = $$0$lcssa;
 do {
  $38 = $$164$lver$orig << 1;
  $41 = $38 | 1;
  $46 = $11 * ((+HEAPF32[$0 + ($38 << 2) >> 2] - +HEAPF32[$0 + ($41 << 2) >> 2]) * .5);
  $47 = $1 + ($38 << 2) | 0;
  HEAPF32[$47 >> 2] = +HEAPF32[$47 >> 2] - $46;
  $50 = $1 + ($41 << 2) | 0;
  HEAPF32[$50 >> 2] = +HEAPF32[$50 >> 2] + $46;
  $$164$lver$orig = $$164$lver$orig + 1 | 0;
 } while (($$164$lver$orig | 0) != ($5 | 0));
 return;
}

function __celt_autocorr($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0.0, $$051 = 0, $$05356 = 0, $$055 = 0.0, $$160 = 0, $$254 = 0, $15 = 0.0, $19 = 0, $25 = 0, $26 = 0, $34 = 0.0, $36 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $6 = $5 - $4 | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 if (($5 | 0) <= 0) _celt_fatal(41609, 41553, 228);
 if (($3 | 0) <= -1) _celt_fatal(41631, 41553, 229);
 if (!$3) $$051 = $0; else {
  _memcpy($7 | 0, $0 | 0, $5 << 2 | 0) | 0;
  $$160 = 0;
  do {
   $15 = +HEAPF32[$2 + ($$160 << 2) >> 2];
   HEAPF32[$7 + ($$160 << 2) >> 2] = +HEAPF32[$0 + ($$160 << 2) >> 2] * $15;
   $19 = $5 - $$160 + -1 | 0;
   HEAPF32[$7 + ($19 << 2) >> 2] = $15 * +HEAPF32[$0 + ($19 << 2) >> 2];
   $$160 = $$160 + 1 | 0;
  } while (($$160 | 0) != ($3 | 0));
  $$051 = $7;
 }
 $25 = $4 + 1 | 0;
 _celt_pitch_xcorr_c($$051, $$051, $1, $6, $25);
 $$05356 = 0;
 do {
  $26 = $$05356 + $6 | 0;
  if (($26 | 0) < ($5 | 0)) {
   $$055 = 0.0;
   $$254 = $26;
   while (1) {
    $34 = $$055 + +HEAPF32[$$051 + ($$254 << 2) >> 2] * +HEAPF32[$$051 + ($$254 - $$05356 << 2) >> 2];
    $$254 = $$254 + 1 | 0;
    if (($$254 | 0) == ($5 | 0)) {
     $$0$lcssa = $34;
     break;
    } else $$055 = $34;
   }
  } else $$0$lcssa = 0.0;
  $36 = $1 + ($$05356 << 2) | 0;
  HEAPF32[$36 >> 2] = $$0$lcssa + +HEAPF32[$36 >> 2];
  $$05356 = $$05356 + 1 | 0;
 } while (($$05356 | 0) != ($25 | 0));
 STACKTOP = sp;
 return;
}

function _speex_resampler_magic($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$024 = 0, $15 = 0, $17 = 0, $21 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$4 >> 2] = $3;
 $6 = $0 + 68 | 0;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2];
 $15 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul(HEAP32[$0 + 28 >> 2] | 0, $1) | 0) << 2) | 0;
 $17 = HEAP32[$0 + 24 >> 2] | 0;
 _speex_resampler_process_native($0, $1, $5, HEAP32[$2 >> 2] | 0, $4);
 $21 = (HEAP32[$6 >> 2] | 0) + ($1 << 2) | 0;
 HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) - (HEAP32[$5 >> 2] | 0);
 if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] | 0)) {
  $40 = HEAP32[$4 >> 2] | 0;
  $41 = $0 + 92 | 0;
  $42 = HEAP32[$41 >> 2] | 0;
  $43 = Math_imul($42, $40) | 0;
  $44 = HEAP32[$2 >> 2] | 0;
  $45 = $44 + ($43 << 2) | 0;
  HEAP32[$2 >> 2] = $45;
  STACKTOP = sp;
  return $40 | 0;
 }
 $28 = $17 + -1 | 0;
 $$024 = 0;
 do {
  $29 = $28 + $$024 | 0;
  HEAP32[$15 + ($29 << 2) >> 2] = HEAP32[$15 + ((HEAP32[$5 >> 2] | 0) + $29 << 2) >> 2];
  $$024 = $$024 + 1 | 0;
 } while ($$024 >>> 0 < (HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] | 0) >>> 0);
 $40 = HEAP32[$4 >> 2] | 0;
 $41 = $0 + 92 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 $43 = Math_imul($42, $40) | 0;
 $44 = HEAP32[$2 >> 2] | 0;
 $45 = $44 + ($43 << 2) | 0;
 HEAP32[$2 >> 2] = $45;
 STACKTOP = sp;
 return $40 | 0;
}

function _silk_shell_decoder($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $20 = 0, $21 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = $3 + 2 | 0;
 _decode_split($3, $6, $1, $2, 26032);
 $7 = $4 + 2 | 0;
 _decode_split($4, $7, $1, HEAP16[$3 >> 1] | 0, 25872);
 $10 = $5 + 2 | 0;
 _decode_split($5, $10, $1, HEAP16[$4 >> 1] | 0, 25712);
 _decode_split($0, $0 + 2 | 0, $1, HEAP16[$5 >> 1] | 0, 25552);
 _decode_split($0 + 4 | 0, $0 + 6 | 0, $1, HEAP16[$10 >> 1] | 0, 25552);
 $20 = $5 + 4 | 0;
 $21 = $5 + 6 | 0;
 _decode_split($20, $21, $1, HEAP16[$7 >> 1] | 0, 25712);
 _decode_split($0 + 8 | 0, $0 + 10 | 0, $1, HEAP16[$20 >> 1] | 0, 25552);
 _decode_split($0 + 12 | 0, $0 + 14 | 0, $1, HEAP16[$21 >> 1] | 0, 25552);
 $32 = $4 + 4 | 0;
 $33 = $4 + 6 | 0;
 _decode_split($32, $33, $1, HEAP16[$6 >> 1] | 0, 25872);
 $36 = $5 + 8 | 0;
 $37 = $5 + 10 | 0;
 _decode_split($36, $37, $1, HEAP16[$32 >> 1] | 0, 25712);
 _decode_split($0 + 16 | 0, $0 + 18 | 0, $1, HEAP16[$36 >> 1] | 0, 25552);
 _decode_split($0 + 20 | 0, $0 + 22 | 0, $1, HEAP16[$37 >> 1] | 0, 25552);
 $48 = $5 + 12 | 0;
 $49 = $5 + 14 | 0;
 _decode_split($48, $49, $1, HEAP16[$33 >> 1] | 0, 25712);
 _decode_split($0 + 24 | 0, $0 + 26 | 0, $1, HEAP16[$48 >> 1] | 0, 25552);
 _decode_split($0 + 28 | 0, $0 + 30 | 0, $1, HEAP16[$49 >> 1] | 0, 25552);
 STACKTOP = sp;
 return;
}

function _gain_fade($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$059$us = 0, $$062 = 0, $$165 = 0, $$261$us = 0, $10 = 0, $12 = 0, $15 = 0.0, $16 = 0.0, $28 = 0.0, $29 = 0.0, $33 = 0.0, $34 = 0, $39 = 0, $47 = 0, $9 = 0;
 $9 = 48e3 / ($8 | 0) | 0;
 $10 = ($4 | 0) / ($9 | 0) | 0;
 $12 = ($10 | 0) > 0;
 if (($6 | 0) == 1) {
  if ($12) {
   $$062 = 0;
   do {
    $15 = +HEAPF32[$7 + ((Math_imul($$062, $9) | 0) << 2) >> 2];
    $16 = $15 * $15;
    HEAPF32[$1 + ($$062 << 2) >> 2] = +HEAPF32[$0 + ($$062 << 2) >> 2] * ($16 * $3 + (1.0 - $16) * $2);
    $$062 = $$062 + 1 | 0;
   } while (($$062 | 0) != ($10 | 0));
  }
 } else if ($12) {
  $$165 = 0;
  do {
   $28 = +HEAPF32[$7 + ((Math_imul($$165, $9) | 0) << 2) >> 2];
   $29 = $28 * $28;
   $33 = $29 * $3 + (1.0 - $29) * $2;
   $34 = $$165 << 1;
   HEAPF32[$1 + ($34 << 2) >> 2] = +HEAPF32[$0 + ($34 << 2) >> 2] * $33;
   $39 = $34 | 1;
   HEAPF32[$1 + ($39 << 2) >> 2] = +HEAPF32[$0 + ($39 << 2) >> 2] * $33;
   $$165 = $$165 + 1 | 0;
  } while (($$165 | 0) != ($10 | 0));
 }
 if (($10 | 0) >= ($5 | 0)) return;
 $$059$us = 0;
 do {
  $$261$us = $10;
  do {
   $47 = (Math_imul($$261$us, $6) | 0) + $$059$us | 0;
   HEAPF32[$1 + ($47 << 2) >> 2] = +HEAPF32[$0 + ($47 << 2) >> 2] * $3;
   $$261$us = $$261$us + 1 | 0;
  } while (($$261$us | 0) != ($5 | 0));
  $$059$us = $$059$us + 1 | 0;
 } while (($$059$us | 0) < ($6 | 0));
 return;
}

function _silk_resampler($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $46 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + 284 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) > ($3 | 0)) _celt_fatal(45445, 45398, 184);
 $7 = $0 + 292 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($5 | 0) < ($8 | 0)) _celt_fatal(45485, 45398, 186);
 $10 = $5 - $8 | 0;
 $11 = $0 + 168 | 0;
 _memcpy($0 + 168 + ($8 << 1) | 0, $2 | 0, $10 << 1 | 0) | 0;
 switch (HEAP32[$0 + 264 >> 2] | 0) {
 case 1:
  {
   _silk_resampler_private_up2_HQ_wrapper($0, $1, $11, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_up2_HQ_wrapper($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   break;
  }
 case 2:
  {
   _silk_resampler_private_IIR_FIR($0, $1, $11, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_IIR_FIR($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   break;
  }
 case 3:
  {
   _silk_resampler_private_down_FIR($0, $1, $11, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_down_FIR($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   break;
  }
 default:
  {
   _memcpy($1 | 0, $11 | 0, HEAP32[$4 >> 2] << 1 | 0) | 0;
   _memcpy($1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) << 1 | 0) | 0;
  }
 }
 $46 = HEAP32[$7 >> 2] | 0;
 _memcpy($11 | 0, $2 + ($3 - $46 << 1) | 0, $46 << 1 | 0) | 0;
 return;
}

function _silk_shell_encoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $26 = 0, $3 = 0, $30 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $4 = sp + 56 | 0;
 $5 = sp + 48 | 0;
 _combine_pulses($2, $1, 8);
 _combine_pulses($3, $2, 4);
 _combine_pulses($4, $3, 2);
 _combine_pulses($5, $4, 1);
 $6 = HEAP32[$4 >> 2] | 0;
 _encode_split($0, $6, HEAP32[$5 >> 2] | 0, 26032);
 $8 = HEAP32[$3 >> 2] | 0;
 _encode_split($0, $8, $6, 25872);
 $9 = HEAP32[$2 >> 2] | 0;
 _encode_split($0, $9, $8, 25712);
 _encode_split($0, HEAP32[$1 >> 2] | 0, $9, 25552);
 _encode_split($0, HEAP32[$1 + 8 >> 2] | 0, HEAP32[$2 + 4 >> 2] | 0, 25552);
 $16 = HEAP32[$2 + 8 >> 2] | 0;
 _encode_split($0, $16, HEAP32[$3 + 4 >> 2] | 0, 25712);
 _encode_split($0, HEAP32[$1 + 16 >> 2] | 0, $16, 25552);
 _encode_split($0, HEAP32[$1 + 24 >> 2] | 0, HEAP32[$2 + 12 >> 2] | 0, 25552);
 $26 = HEAP32[$3 + 8 >> 2] | 0;
 _encode_split($0, $26, HEAP32[$4 + 4 >> 2] | 0, 25872);
 $30 = HEAP32[$2 + 16 >> 2] | 0;
 _encode_split($0, $30, $26, 25712);
 _encode_split($0, HEAP32[$1 + 32 >> 2] | 0, $30, 25552);
 _encode_split($0, HEAP32[$1 + 40 >> 2] | 0, HEAP32[$2 + 20 >> 2] | 0, 25552);
 $38 = HEAP32[$2 + 24 >> 2] | 0;
 _encode_split($0, $38, HEAP32[$3 + 12 >> 2] | 0, 25712);
 _encode_split($0, HEAP32[$1 + 48 >> 2] | 0, $38, 25552);
 _encode_split($0, HEAP32[$1 + 56 >> 2] | 0, HEAP32[$2 + 28 >> 2] | 0, 25552);
 STACKTOP = sp;
 return;
}

function _silk_NLSF_VQ($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04153$us = 0, $$04250$us = 0, $$04349$us = 0, $$04452$us = 0, $$04551$us$in = 0, $$054$us = 0, $10 = 0, $23 = 0, $25 = 0, $44 = 0, $$04551$us$in$looptemp = 0;
 if ($5 & 1 | 0) _celt_fatal(44228, 44269, 49);
 if (($4 | 0) <= 0) return;
 if (($5 | 0) <= 1) {
  _memset($0 | 0, 0, $4 << 2 | 0) | 0;
  return;
 }
 $$04153$us = $3;
 $$04452$us = 0;
 $$054$us = $2;
 while (1) {
  $$04250$us = 0;
  $$04349$us = 0;
  $$04551$us$in = $5;
  do {
   $$04551$us$in$looptemp = $$04551$us$in;
   $$04551$us$in = $$04551$us$in + -2 | 0;
   $10 = $$04551$us$in$looptemp + -1 | 0;
   $23 = Math_imul((HEAPU16[$1 + ($10 << 1) >> 1] | 0) - (HEAPU8[$$054$us + $10 >> 0] << 7) << 16 >> 16, HEAP16[$$04153$us + ($10 << 1) >> 1] | 0) | 0;
   $25 = $23 - ($$04250$us >> 1) | 0;
   $$04250$us = Math_imul((HEAPU16[$1 + ($$04551$us$in << 1) >> 1] | 0) - (HEAPU8[$$054$us + $$04551$us$in >> 0] << 7) << 16 >> 16, HEAP16[$$04153$us + ($$04551$us$in << 1) >> 1] | 0) | 0;
   $44 = $$04250$us - ($23 >> 1) | 0;
   $$04349$us = (($25 | 0) > 0 ? $25 : 0 - $25 | 0) + $$04349$us + (($44 | 0) > 0 ? $44 : 0 - $44 | 0) | 0;
  } while (($$04551$us$in$looptemp | 0) > 3);
  HEAP32[$0 + ($$04452$us << 2) >> 2] = $$04349$us;
  $$04452$us = $$04452$us + 1 | 0;
  if (($$04452$us | 0) == ($4 | 0)) break; else {
   $$04153$us = $$04153$us + ($5 << 1) | 0;
   $$054$us = $$054$us + $5 | 0;
  }
 }
 return;
}

function _speex_resampler_set_rate_frac($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$04649 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $36 = 0, $43 = 0, $9 = 0;
 if (($1 | 0) == 0 | ($2 | 0) == 0) return;
 $9 = $0 + 4 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($3 | 0)) if ((HEAP32[$9 >> 2] | 0) == ($4 | 0)) if ((HEAP32[$0 + 8 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$0 + 12 >> 2] | 0) == ($2 | 0)) return;
 $18 = $0 + 12 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 $21 = _compute_gcd($1, $2) | 0;
 HEAP32[$0 + 8 >> 2] = ($1 >>> 0) / ($21 >>> 0) | 0;
 $23 = ($2 >>> 0) / ($21 >>> 0) | 0;
 HEAP32[$18 >> 2] = $23;
 L10 : do if ($19 | 0) {
  $25 = $0 + 20 | 0;
  if (HEAP32[$25 >> 2] | 0) {
   $28 = $0 + 64 | 0;
   $29 = HEAP32[$28 >> 2] | 0;
   if (_multiply_frac($29, HEAP32[$29 >> 2] | 0, $23, $19) | 0) return;
   $$04649 = 0;
   do {
    $34 = (HEAP32[$28 >> 2] | 0) + ($$04649 << 2) | 0;
    $36 = HEAP32[$18 >> 2] | 0;
    if ((HEAP32[$34 >> 2] | 0) >>> 0 >= $36 >>> 0) HEAP32[$34 >> 2] = $36 + -1;
    $$04649 = $$04649 + 1 | 0;
    if ($$04649 >>> 0 >= (HEAP32[$25 >> 2] | 0) >>> 0) break L10;
    $43 = (HEAP32[$28 >> 2] | 0) + ($$04649 << 2) | 0;
   } while (!(_multiply_frac($43, HEAP32[$43 >> 2] | 0, HEAP32[$18 >> 2] | 0, $19) | 0));
   return;
  }
 } while (0);
 if (!(HEAP32[$0 + 52 >> 2] | 0)) return;
 _update_filter($0) | 0;
 return;
}
function _opus_encoder_create($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$039 = 0, $11 = 0, $8 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) switch ($0 | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($0 | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($0 | 0) < 24e3) switch ($0 | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($0 | 0) < 48e3) switch ($0 | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($0 | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 L13 : do if ((label | 0) == 2) if (($1 + -1 | 0) >>> 0 <= 1) {
  switch ($2 | 0) {
  case 2048:
  case 2049:
  case 2051:
   break;
  default:
   break L13;
  }
  $8 = _opus_alloc_664(_opus_encoder_get_size($1) | 0) | 0;
  if (!$8) {
   if (!$3) {
    $$039 = 0;
    return $$039 | 0;
   }
   HEAP32[$3 >> 2] = -7;
   $$039 = 0;
   return $$039 | 0;
  }
  $11 = _opus_encoder_init($8, $0, $1, $2) | 0;
  if ($3 | 0) HEAP32[$3 >> 2] = $11;
  if (!$11) {
   $$039 = $8;
   return $$039 | 0;
  }
  _opus_free_665($8);
  $$039 = 0;
  return $$039 | 0;
 } while (0);
 if (!$3) {
  $$039 = 0;
  return $$039 | 0;
 }
 HEAP32[$3 >> 2] = -1;
 $$039 = 0;
 return $$039 | 0;
}

function _silk_control_encoder($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$053 = 0, $12 = 0, $33 = 0, $43 = 0, $45 = 0, $49 = 0, $spec$select = 0;
 HEAP32[$0 + 6076 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$0 + 4676 >> 2] = HEAP32[$1 + 52 >> 2];
 $12 = HEAP32[$1 + 8 >> 2] | 0;
 HEAP32[$0 + 4556 >> 2] = $12;
 HEAP32[$0 + 4564 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4568 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$0 + 4572 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$0 + 6088 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$0 + 5752 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 5756 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4536 >> 2] = $2;
 HEAP32[$0 + 5760 >> 2] = $3;
 $33 = $0 + 4668 | 0;
 if (HEAP32[$33 >> 2] | 0) if (!(HEAP32[$0 + 4680 >> 2] | 0)) {
  if (($12 | 0) == (HEAP32[$0 + 4560 >> 2] | 0)) {
   $$053 = 0;
   return $$053 | 0;
  }
  $43 = HEAP32[$0 + 4576 >> 2] | 0;
  if (($43 | 0) <= 0) {
   $$053 = 0;
   return $$053 | 0;
  }
  _silk_setup_resamplers($0, $43);
  $$053 = 0;
  return $$053 | 0;
 }
 $45 = _silk_control_audio_bandwidth($0, $1) | 0;
 $spec$select = ($4 | 0) == 0 ? $45 : $4;
 _silk_setup_resamplers($0, $spec$select);
 $49 = _silk_setup_fs($0, $spec$select, HEAP32[$1 + 24 >> 2] | 0) | 0;
 _silk_setup_complexity($0, HEAP32[$1 + 36 >> 2] | 0);
 HEAP32[$0 + 4616 >> 2] = HEAP32[$1 + 32 >> 2];
 _silk_setup_LBRR($0, HEAP32[$1 + 44 >> 2] | 0);
 HEAP32[$33 >> 2] = 1;
 $$053 = $49;
 return $$053 | 0;
}

function _silk_quant_LTP_gains_FLP($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$029 = 0, $$125 = 0, $$224 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $9 = sp + 520 | 0;
 $10 = sp + 480 | 0;
 $11 = sp + 80 | 0;
 $12 = sp;
 $13 = $8 * 5 | 0;
 $14 = $8 * 25 | 0;
 if (($14 | 0) > 0) {
  $$029 = 0;
  do {
   HEAP32[$11 + ($$029 << 2) >> 2] = _silk_float2int(+HEAPF32[$5 + ($$029 << 2) >> 2] * 131072.0) | 0;
   $$029 = $$029 + 1 | 0;
  } while (($$029 | 0) != ($14 | 0));
 }
 if (($8 | 0) <= 0) {
  _silk_quant_LTP_gains($10, $1, $2, $3, $9, $11, $12, $7, $8);
  $37 = HEAP32[$9 >> 2] | 0;
  $38 = +($37 | 0);
  $39 = $38 * .0078125;
  HEAPF32[$4 >> 2] = $39;
  STACKTOP = sp;
  return;
 }
 $$125 = 0;
 do {
  HEAP32[$12 + ($$125 << 2) >> 2] = _silk_float2int(+HEAPF32[$6 + ($$125 << 2) >> 2] * 131072.0) | 0;
  $$125 = $$125 + 1 | 0;
 } while (($$125 | 0) < ($13 | 0));
 _silk_quant_LTP_gains($10, $1, $2, $3, $9, $11, $12, $7, $8);
 $$224 = 0;
 do {
  HEAPF32[$0 + ($$224 << 2) >> 2] = +(HEAP16[$10 + ($$224 << 1) >> 1] | 0) * .00006103515625;
  $$224 = $$224 + 1 | 0;
 } while (($$224 | 0) < ($13 | 0));
 $37 = HEAP32[$9 >> 2] | 0;
 $38 = +($37 | 0);
 $39 = $38 * .0078125;
 HEAPF32[$4 >> 2] = $39;
 STACKTOP = sp;
 return;
}

function _quant_fine_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$036 = 0, $$037 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0.0, $15 = 0, $24 = 0, $27 = 0, $36 = 0.0, $40 = 0, $46 = 0, $49 = 0, $9 = 0, $spec$select = 0;
 if (($1 | 0) >= ($2 | 0)) return;
 $9 = $0 + 8 | 0;
 $$037 = $1;
 do {
  $10 = $5 + ($$037 << 2) | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  L6 : do if (($11 | 0) >= 1) {
   $13 = 65536 << $11 >> 16;
   $14 = +($13 | 0);
   $15 = $13 + -1 | 0;
   $$036 = 0;
   $27 = $11;
   while (1) {
    $24 = ~~+Math_floor(+((+HEAPF32[$4 + ((Math_imul(HEAP32[$9 >> 2] | 0, $$036) | 0) + $$037 << 2) >> 2] + .5) * $14));
    $spec$select = ($13 | 0) > ($24 | 0) ? $24 : $15;
    $$1 = ($spec$select | 0) > 0 ? $spec$select : 0;
    _ec_enc_bits($6, $$1, $27);
    $36 = (+($$1 | 0) + .5) * +(1 << 14 - (HEAP32[$10 >> 2] | 0) | 0) * .00006103515625 + -.5;
    $40 = $3 + ((Math_imul(HEAP32[$9 >> 2] | 0, $$036) | 0) + $$037 << 2) | 0;
    HEAPF32[$40 >> 2] = +HEAPF32[$40 >> 2] + $36;
    $46 = $4 + ((Math_imul(HEAP32[$9 >> 2] | 0, $$036) | 0) + $$037 << 2) | 0;
    HEAPF32[$46 >> 2] = +HEAPF32[$46 >> 2] - $36;
    $49 = $$036 + 1 | 0;
    if (($49 | 0) >= ($7 | 0)) break L6;
    $$036 = $49;
    $27 = HEAP32[$10 >> 2] | 0;
   }
  } while (0);
  $$037 = $$037 + 1 | 0;
 } while (($$037 | 0) != ($2 | 0));
 return;
}

function _silk_resampler_private_down_FIR($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$033 = 0, $$034 = 0, $$034$ = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 + 268 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $0 + 276 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($7 + $5 << 2) | 0) + 15 & -16) | 0;
 $10 = $0 + 24 | 0;
 _memcpy($9 | 0, $10 | 0, $7 << 2 | 0) | 0;
 $12 = $0 + 296 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $13 + 4 | 0;
 $16 = HEAP32[$0 + 272 >> 2] | 0;
 $17 = $0 + 280 | 0;
 $$0 = $1;
 $$033 = $2;
 $$034 = $3;
 $19 = $5;
 $21 = $7;
 $22 = $13;
 while (1) {
  $$034$ = ($$034 | 0) < ($19 | 0) ? $$034 : $19;
  _silk_resampler_private_AR2($0, $9 + ($21 << 2) | 0, $$033, $22, $$034$);
  $26 = _silk_resampler_private_down_FIR_INTERPOL($$0, $9, $14, HEAP32[$6 >> 2] | 0, HEAP32[$17 >> 2] | 0, $$034$ << 16, $16) | 0;
  $27 = $$034 - $$034$ | 0;
  if (($27 | 0) <= 1) break;
  $31 = HEAP32[$6 >> 2] | 0;
  _memcpy($9 | 0, $9 + ($$034$ << 2) | 0, $31 << 2 | 0) | 0;
  $$0 = $26;
  $$033 = $$033 + ($$034$ << 1) | 0;
  $$034 = $27;
  $19 = HEAP32[$4 >> 2] | 0;
  $21 = $31;
  $22 = HEAP32[$12 >> 2] | 0;
 }
 _memcpy($10 | 0, $9 + ($$034$ << 2) | 0, HEAP32[$6 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _stereo_analysis($$0$5$val, $0, $1, $2) {
 $$0$5$val = $$0$5$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03545 = 0.0, $$03644 = 0.0, $$03839 = 0, $$046 = 0, $$1$lcssa = 0.0, $$137$lcssa = 0.0, $$13740 = 0.0, $$141 = 0.0, $10 = 0, $13 = 0.0, $16 = 0.0, $22 = 0.0, $26 = 0.0, $34 = 0, $4 = 0, $5 = 0;
 $$03545 = 1.0000000036274937e-15;
 $$03644 = 1.0000000036274937e-15;
 $$046 = 0;
 $4 = HEAP16[$$0$5$val >> 1] | 0;
 while (1) {
  $5 = $4 << 16 >> 16 << $1;
  $$046 = $$046 + 1 | 0;
  $4 = HEAP16[$$0$5$val + ($$046 << 1) >> 1] | 0;
  $10 = $4 << 16 >> 16 << $1;
  if (($5 | 0) < ($10 | 0)) {
   $$03839 = $5;
   $$13740 = $$03644;
   $$141 = $$03545;
   while (1) {
    $13 = +HEAPF32[$0 + ($$03839 << 2) >> 2];
    $16 = +HEAPF32[$0 + ($$03839 + $2 << 2) >> 2];
    $22 = $$141 + (+Math_abs(+$13) + +Math_abs(+$16));
    $26 = $$13740 + (+Math_abs(+($13 + $16)) + +Math_abs(+($13 - $16)));
    $$03839 = $$03839 + 1 | 0;
    if (($$03839 | 0) == ($10 | 0)) {
     $$1$lcssa = $22;
     $$137$lcssa = $26;
     break;
    } else {
     $$13740 = $26;
     $$141 = $22;
    }
   }
  } else {
   $$1$lcssa = $$03545;
   $$137$lcssa = $$03644;
  }
  if (($$046 | 0) == 13) break; else {
   $$03545 = $$1$lcssa;
   $$03644 = $$137$lcssa;
  }
 }
 $34 = HEAP16[$$0$5$val + 26 >> 1] << $1 + 1;
 return $$137$lcssa * .7071070075035095 * +($34 + (($1 | 0) < 2 ? 5 : 13) | 0) > $$1$lcssa * +($34 | 0) | 0;
}

function _compute_silk_rate_for_hybrid($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$039 = 0, $$043$lcssa = 0, $17 = 0, $21 = 0, $23 = 0, $35 = 0, $6 = 0, $9 = 0, $spec$select = 0, label = 0;
 $6 = ($0 | 0) / ($5 | 0) | 0;
 $9 = $2 + 1 + ($4 << 1) | 0;
 if (($6 | 0) < 12e3) {
  $$043$lcssa = 1;
  label = 4;
 } else if (($6 | 0) < 16e3) {
  $$043$lcssa = 2;
  label = 4;
 } else if (($6 | 0) < 2e4) {
  $$043$lcssa = 3;
  label = 4;
 } else if (($6 | 0) < 24e3) {
  $$043$lcssa = 4;
  label = 4;
 } else if (($6 | 0) < 32e3) {
  $$043$lcssa = 5;
  label = 4;
 } else if (($6 | 0) < 64e3) {
  $$043$lcssa = 6;
  label = 4;
 } else $$039 = (($6 + -64e3 | 0) / 2 | 0) + (HEAP32[27880 + ($9 << 2) >> 2] | 0) | 0;
 if ((label | 0) == 4) {
  $17 = $$043$lcssa + -1 | 0;
  $21 = HEAP32[27760 + ($17 * 20 | 0) >> 2] | 0;
  $23 = HEAP32[27760 + ($$043$lcssa * 20 | 0) >> 2] | 0;
  $$039 = ((Math_imul($23 - $6 | 0, HEAP32[27760 + ($17 * 20 | 0) + ($9 << 2) >> 2] | 0) | 0) + (Math_imul($6 - $21 | 0, HEAP32[27760 + ($$043$lcssa * 20 | 0) + ($9 << 2) >> 2] | 0) | 0) | 0) / ($23 - $21 | 0) | 0;
 }
 $spec$select = ($3 | 0) == 0 ? $$039 + 100 | 0 : $$039;
 $35 = Math_imul(($1 | 0) == 1104 ? $spec$select + 300 | 0 : $spec$select, $5) | 0;
 return (($5 | 0) == 2 & ($6 | 0) > 11999 ? $35 + -1e3 | 0 : $35) | 0;
}

function _silk_NLSF_decode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$026 = 0, $$lcssa = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $38 = 0, $40 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 64 | 0;
 $5 = sp;
 _silk_NLSF_unpack(sp + 32 | 0, $3, $2, HEAP8[$1 >> 0] | 0);
 $12 = $2 + 2 | 0;
 _silk_NLSF_residual_dequant($5, $1 + 1 | 0, $3, HEAP16[$2 + 4 >> 1] | 0, HEAP16[$12 >> 1] | 0);
 $18 = HEAP16[$12 >> 1] | 0;
 $19 = $18 << 16 >> 16;
 $20 = Math_imul($19, HEAP8[$1 >> 0] | 0) | 0;
 $21 = (HEAP32[$2 + 8 >> 2] | 0) + $20 | 0;
 $24 = (HEAP32[$2 + 12 >> 2] | 0) + ($20 << 1) | 0;
 if ($18 << 16 >> 16 <= 0) {
  $$lcssa = $19;
  $49 = $2 + 36 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  _silk_NLSF_stabilize($0, $50, $$lcssa);
  STACKTOP = sp;
  return;
 }
 $$026 = 0;
 do {
  $38 = (HEAPU8[$21 + $$026 >> 0] << 7) + ((HEAP16[$5 + ($$026 << 1) >> 1] << 14 | 0) / (HEAP16[$24 + ($$026 << 1) >> 1] | 0) | 0) | 0;
  $40 = ($38 | 0) > 0 ? $38 : 0;
  HEAP16[$0 + ($$026 << 1) >> 1] = ($40 | 0) < 32767 ? $40 : 32767;
  $$026 = $$026 + 1 | 0;
  $47 = HEAP16[$12 >> 1] | 0;
 } while (($$026 | 0) < ($47 | 0));
 $$lcssa = $47;
 $49 = $2 + 36 | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 _silk_NLSF_stabilize($0, $50, $$lcssa);
 STACKTOP = sp;
 return;
}

function _silk_decode_pitch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$039 = 0, $$04043 = 0, $$04043$us = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $21 = 0, $31 = 0, $6 = 0, $sext = 0;
 $6 = ($4 | 0) == 4;
 if (($3 | 0) == 8) if ($6) {
  $$0 = 27056;
  $$039 = 11;
 } else if (($4 | 0) == 2) {
  $$0 = 45385;
  $$039 = 3;
 } else _celt_fatal(47197, 45111, 54); else if ($6) {
  $$0 = 27104;
  $$039 = 34;
 } else if (($4 | 0) == 2) {
  $$0 = 27024;
  $$039 = 12;
 } else _celt_fatal(47197, 45111, 63);
 $sext = $3 << 16;
 $10 = $sext >> 15;
 $11 = ($sext >> 16) * 18 | 0;
 $13 = $10 + ($0 << 16 >> 16) | 0;
 $14 = $1 << 24 >> 24;
 if (($10 | 0) > ($11 | 0)) {
  $$04043$us = 0;
  do {
   $21 = $13 + (HEAP8[$$0 + ((Math_imul($$04043$us, $$039) | 0) + $14) >> 0] | 0) | 0;
   HEAP32[$2 + ($$04043$us << 2) >> 2] = ($21 | 0) > ($10 | 0) ? $10 : ($21 | 0) < ($11 | 0) ? $11 : $21;
   $$04043$us = $$04043$us + 1 | 0;
  } while (($$04043$us | 0) != ($4 | 0));
  return;
 } else {
  $$04043 = 0;
  do {
   $31 = $13 + (HEAP8[$$0 + ((Math_imul($$04043, $$039) | 0) + $14) >> 0] | 0) | 0;
   HEAP32[$2 + ($$04043 << 2) >> 2] = ($31 | 0) > ($11 | 0) ? $11 : ($31 | 0) < ($10 | 0) ? $10 : $31;
   $$04043 = $$04043 + 1 | 0;
  } while (($$04043 | 0) != ($4 | 0));
  return;
 }
}

function _opus_decoder_create($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$031 = 0, $10 = 0, $7 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) switch ($0 | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($0 | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($0 | 0) < 24e3) switch ($0 | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($0 | 0) < 48e3) switch ($0 | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($0 | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 if ((label | 0) == 2) if (($1 + -1 | 0) >>> 0 <= 1) {
  $7 = _opus_alloc(_opus_decoder_get_size($1) | 0) | 0;
  if (!$7) {
   if (!$2) {
    $$031 = 0;
    return $$031 | 0;
   }
   HEAP32[$2 >> 2] = -7;
   $$031 = 0;
   return $$031 | 0;
  }
  $10 = _opus_decoder_init($7, $0, $1) | 0;
  if ($2 | 0) HEAP32[$2 >> 2] = $10;
  if (!$10) {
   $$031 = $7;
   return $$031 | 0;
  }
  _opus_free($7);
  $$031 = 0;
  return $$031 | 0;
 }
 if (!$2) {
  $$031 = 0;
  return $$031 | 0;
 }
 HEAP32[$2 >> 2] = -1;
 $$031 = 0;
 return $$031 | 0;
}

function _hysteresis_decision($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$2 = 0, $12 = 0;
 do if ($0 < 1.0) $$0$lcssa = 0; else if ($0 < 2.0) $$0$lcssa = 1; else if ($0 < 3.0) $$0$lcssa = 2; else if ($0 < 4.0) $$0$lcssa = 3; else if ($0 < 5.0) $$0$lcssa = 4; else if ($0 < 6.0) $$0$lcssa = 5; else if ($0 < 7.0) $$0$lcssa = 6; else if ($0 < 8.0) $$0$lcssa = 7; else if ($0 < 16.0) $$0$lcssa = 8; else if ($0 < 24.0) $$0$lcssa = 9; else if ($0 < 36.0) $$0$lcssa = 10; else if ($0 < 44.0) $$0$lcssa = 11; else if ($0 < 50.0) $$0$lcssa = 12; else if ($0 < 56.0) $$0$lcssa = 13; else if ($0 < 62.0) $$0$lcssa = 14; else if ($0 < 67.0) $$0$lcssa = 15; else if ($0 < 72.0) $$0$lcssa = 16; else if ($0 < 79.0) $$0$lcssa = 17; else if ($0 < 88.0) $$0$lcssa = 18; else {
  if ($0 < 106.0) {
   $$0$lcssa = 19;
   break;
  }
  if ($0 < 134.0) {
   $$0$lcssa = 20;
   break;
  }
  $$0$lcssa = 21;
 } while (0);
 if (($$0$lcssa | 0) > ($1 | 0)) if (+HEAPF32[272 + ($1 << 2) >> 2] + +HEAPF32[368 + ($1 << 2) >> 2] > $0) {
  $$2 = $1;
  return $$2 | 0;
 }
 if (($$0$lcssa | 0) >= ($1 | 0)) {
  $$2 = $$0$lcssa;
  return $$2 | 0;
 }
 $12 = $1 + -1 | 0;
 if (!(+HEAPF32[272 + ($12 << 2) >> 2] - +HEAPF32[368 + ($12 << 2) >> 2] < $0)) {
  $$2 = $$0$lcssa;
  return $$2 | 0;
 }
 $$2 = $1;
 return $$2 | 0;
}

function _amp2Log2($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$021$us = 0, $$021$us27 = 0, $$022$us = 0, $$123$us = 0, $$123$us28 = 0, $18 = 0, $24 = 0.0, $7 = 0, $8 = 0;
 $7 = ($1 | 0) < ($2 | 0);
 $8 = $0 + 8 | 0;
 if (($1 | 0) <= 0) {
  if (!$7) return;
  $$021$us27 = 0;
  do {
   $$123$us28 = $1;
   do {
    HEAPF32[$4 + ((Math_imul(HEAP32[$8 >> 2] | 0, $$021$us27) | 0) + $$123$us28 << 2) >> 2] = -14.0;
    $$123$us28 = $$123$us28 + 1 | 0;
   } while (($$123$us28 | 0) != ($2 | 0));
   $$021$us27 = $$021$us27 + 1 | 0;
  } while (($$021$us27 | 0) < ($5 | 0));
  return;
 }
 $$021$us = 0;
 do {
  $$022$us = 0;
  do {
   $18 = (Math_imul(HEAP32[$8 >> 2] | 0, $$021$us) | 0) + $$022$us | 0;
   $24 = +Math_log(+(+HEAPF32[$3 + ($18 << 2) >> 2])) * 1.4426950408889634;
   HEAPF32[$4 + ($18 << 2) >> 2] = $24 - +HEAPF32[20304 + ($$022$us << 2) >> 2];
   $$022$us = $$022$us + 1 | 0;
  } while (($$022$us | 0) != ($1 | 0));
  if ($7) {
   $$123$us = $1;
   do {
    HEAPF32[$4 + ((Math_imul(HEAP32[$8 >> 2] | 0, $$021$us) | 0) + $$123$us << 2) >> 2] = -14.0;
    $$123$us = $$123$us + 1 | 0;
   } while (($$123$us | 0) != ($2 | 0));
  }
  $$021$us = $$021$us + 1 | 0;
 } while (($$021$us | 0) < ($5 | 0));
 return;
}

function _normalise_bands($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$02830$us = 0, $$029$us = 0, $$031$us = 0, $$pre = 0, $$pre36$pre = 0, $11 = 0, $14 = 0, $15 = 0, $20 = 0.0, $22 = 0, $23 = 0, $28 = 0, $30 = 0, $8 = 0;
 $8 = HEAP32[$0 + 32 >> 2] | 0;
 $11 = Math_imul(HEAP32[$0 + 44 >> 2] | 0, $6) | 0;
 if (($4 | 0) <= 0) return;
 $$pre = HEAP32[$0 + 8 >> 2] | 0;
 $$pre36$pre = HEAP16[$8 >> 1] | 0;
 $$029$us = 0;
 do {
  $14 = Math_imul($$pre, $$029$us) | 0;
  $15 = Math_imul($11, $$029$us) | 0;
  $$031$us = 0;
  $22 = $$pre36$pre;
  do {
   $20 = 1.0 / (+HEAPF32[$3 + ($14 + $$031$us << 2) >> 2] + 1.0000000272452012e-27);
   $23 = Math_imul($22 << 16 >> 16, $6) | 0;
   $$031$us = $$031$us + 1 | 0;
   $22 = HEAP16[$8 + ($$031$us << 1) >> 1] | 0;
   $28 = Math_imul($22 << 16 >> 16, $6) | 0;
   if (($23 | 0) < ($28 | 0)) {
    $$02830$us = $23;
    do {
     $30 = $$02830$us + $15 | 0;
     HEAPF32[$2 + ($30 << 2) >> 2] = $20 * +HEAPF32[$1 + ($30 << 2) >> 2];
     $$02830$us = $$02830$us + 1 | 0;
    } while (($$02830$us | 0) != ($28 | 0));
   }
  } while (($$031$us | 0) != ($4 | 0));
  $$029$us = $$029$us + 1 | 0;
 } while (($$029$us | 0) < ($5 | 0));
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = tempRet0;
   $12 = ___muldi3($8 | 0, $9 | 0, -10, -1) | 0;
   $14 = _i64Add($12 | 0, tempRet0 | 0, $8$looptemp | 0, $9$looptemp | 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = (Math_imul($$012, -10) | 0) + $$012$looptemp | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _celt_pitch_xcorr_c($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$127 = 0, $10 = 0, $11 = 0, $24 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 if (($4 | 0) <= 0) _celt_fatal(41461, 41491, 251);
 $7 = $4 + -3 | 0;
 if (($4 | 0) > 3) {
  $9 = $5 + 4 | 0;
  $10 = $5 + 8 | 0;
  $11 = $5 + 12 | 0;
  $$028 = 0;
  while (1) {
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   _xcorr_kernel_c($0, $1 + ($$028 << 2) | 0, $5, $3);
   HEAP32[$2 + ($$028 << 2) >> 2] = HEAP32[$5 >> 2];
   HEAP32[$2 + (($$028 | 1) << 2) >> 2] = HEAP32[$9 >> 2];
   HEAP32[$2 + (($$028 | 2) << 2) >> 2] = HEAP32[$10 >> 2];
   HEAP32[$2 + (($$028 | 3) << 2) >> 2] = HEAP32[$11 >> 2];
   $24 = $$028 + 4 | 0;
   if (($24 | 0) < ($7 | 0)) $$028 = $24; else {
    $$0$lcssa = $24;
    break;
   }
  }
 } else $$0$lcssa = 0;
 if (($$0$lcssa | 0) >= ($4 | 0)) {
  STACKTOP = sp;
  return;
 }
 $$127 = $$0$lcssa;
 do {
  HEAPF32[$2 + ($$127 << 2) >> 2] = +_celt_inner_prod_c_111($0, $1 + ($$127 << 2) | 0, $3);
  $$127 = $$127 + 1 | 0;
 } while (($$127 | 0) != ($4 | 0));
 STACKTOP = sp;
 return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $21 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0;
   label = 5;
  }
 } else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 3]($2, $0, $1) | 0;
   break;
  }
  L10 : do if (($1 | 0) == 0 | (HEAP8[$2 + 75 >> 0] | 0) < 0) {
   $$141 = $0;
   $$143 = $1;
   $31 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $21 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $21 >> 0] | 0) == 10) break;
    if (!$21) {
     $$141 = $0;
     $$143 = $1;
     $31 = $14;
     break L10;
    } else $$03846 = $21;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 3]($2, $0, $$03846) | 0) >>> 0 < $$03846 >>> 0) break L5;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $31 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
 } while (0);
 return;
}

function _downmix_float($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$03544 = 0, $$040$us = 0, $$137 = 0, $$238$us = 0, $22 = 0.0, $23 = 0, $34 = 0.0, $35 = 0, $7 = 0;
 $7 = ($2 | 0) > 0;
 if ($7) {
  $$03544 = 0;
  do {
   HEAPF32[$1 + ($$03544 << 2) >> 2] = +HEAPF32[$0 + ((Math_imul($$03544 + $3 | 0, $6) | 0) + $4 << 2) >> 2] * 32768.0;
   $$03544 = $$03544 + 1 | 0;
  } while (($$03544 | 0) != ($2 | 0));
 }
 if (($5 | 0) > -1) {
  if (!$7) return;
  $$137 = 0;
  do {
   $22 = +HEAPF32[$0 + ((Math_imul($$137 + $3 | 0, $6) | 0) + $5 << 2) >> 2] * 32768.0;
   $23 = $1 + ($$137 << 2) | 0;
   HEAPF32[$23 >> 2] = +HEAPF32[$23 >> 2] + $22;
   $$137 = $$137 + 1 | 0;
  } while (($$137 | 0) != ($2 | 0));
  return;
 }
 if (($6 | 0) < 2 | ($5 | 0) != -2 | $7 ^ 1) return;
 $$040$us = 1;
 do {
  $$238$us = 0;
  do {
   $34 = +HEAPF32[$0 + ((Math_imul($$238$us + $3 | 0, $6) | 0) + $$040$us << 2) >> 2] * 32768.0;
   $35 = $1 + ($$238$us << 2) | 0;
   HEAPF32[$35 >> 2] = +HEAPF32[$35 >> 2] + $34;
   $$238$us = $$238$us + 1 | 0;
  } while (($$238$us | 0) != ($2 | 0));
  $$040$us = $$040$us + 1 | 0;
 } while (($$040$us | 0) != ($6 | 0));
 return;
}

function _silk_LPC_analysis_filter12_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$032 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) <= 12) return;
 $5 = $1 + 4 | 0;
 $6 = $1 + 8 | 0;
 $7 = $1 + 12 | 0;
 $8 = $1 + 16 | 0;
 $9 = $1 + 20 | 0;
 $10 = $1 + 24 | 0;
 $11 = $1 + 28 | 0;
 $12 = $1 + 32 | 0;
 $13 = $1 + 36 | 0;
 $14 = $1 + 40 | 0;
 $15 = $1 + 44 | 0;
 $$032 = 12;
 do {
  $17 = $2 + ($$032 + -1 << 2) | 0;
  HEAPF32[$0 + ($$032 << 2) >> 2] = +HEAPF32[$2 + ($$032 << 2) >> 2] - (+HEAPF32[$17 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$17 + -4 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$17 + -8 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$17 + -12 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$17 + -16 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$17 + -20 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$17 + -24 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$17 + -28 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$17 + -32 >> 2] * +HEAPF32[$12 >> 2] + +HEAPF32[$17 + -36 >> 2] * +HEAPF32[$13 >> 2] + +HEAPF32[$17 + -40 >> 2] * +HEAPF32[$14 >> 2] + +HEAPF32[$17 + -44 >> 2] * +HEAPF32[$15 >> 2]);
  $$032 = $$032 + 1 | 0;
 } while (($$032 | 0) != ($3 | 0));
 return;
}

function _silk_inner_product_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$028$lcssa = 0, $$02832 = 0, $$033 = 0.0, $$1$lcssa = 0.0, $$12930 = 0, $$131 = 0.0, $12 = 0, $21 = 0, $3 = 0, $30 = 0, $51 = 0.0;
 $3 = $2 + -3 | 0;
 if (($2 | 0) > 3) {
  $$02832 = 0;
  $$033 = 0.0;
  do {
   $12 = $$02832 | 1;
   $21 = $$02832 | 2;
   $30 = $$02832 | 3;
   $$033 = $$033 + (+HEAPF32[$0 + ($$02832 << 2) >> 2] * +HEAPF32[$1 + ($$02832 << 2) >> 2] + +HEAPF32[$0 + ($12 << 2) >> 2] * +HEAPF32[$1 + ($12 << 2) >> 2] + +HEAPF32[$0 + ($21 << 2) >> 2] * +HEAPF32[$1 + ($21 << 2) >> 2] + +HEAPF32[$0 + ($30 << 2) >> 2] * +HEAPF32[$1 + ($30 << 2) >> 2]);
   $$02832 = $$02832 + 4 | 0;
  } while (($$02832 | 0) < ($3 | 0));
  $$0$lcssa = $$033;
  $$028$lcssa = $2 & -4;
 } else {
  $$0$lcssa = 0.0;
  $$028$lcssa = 0;
 }
 if (($$028$lcssa | 0) >= ($2 | 0)) {
  $$1$lcssa = $$0$lcssa;
  return +$$1$lcssa;
 }
 $$12930 = $$028$lcssa;
 $$131 = $$0$lcssa;
 while (1) {
  $51 = $$131 + +HEAPF32[$0 + ($$12930 << 2) >> 2] * +HEAPF32[$1 + ($$12930 << 2) >> 2];
  $$12930 = $$12930 + 1 | 0;
  if (($$12930 | 0) == ($2 | 0)) {
   $$1$lcssa = $51;
   break;
  } else $$131 = $51;
 }
 return +$$1$lcssa;
}

function _silk_DIV32_varQ_526($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$52 = 0, $12 = 0, $14 = 0, $18 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0;
 $6 = _silk_CLZ32_529(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $8 = $0 << $6 + -1;
 $12 = _silk_CLZ32_529(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $14 = $1 << $12 + -1;
 $18 = (536870911 / ($14 >> 16 | 0) | 0) << 16 >> 16;
 $23 = ((Math_imul($18, $8 & 65535) | 0) >> 16) + (Math_imul($18, $8 >> 16) | 0) | 0;
 $28 = ___muldi3($23 | 0, (($23 | 0) < 0) << 31 >> 31 | 0, $14 | 0, (($14 | 0) < 0) << 31 >> 31 | 0) | 0;
 $30 = _bitshift64Lshr($28 | 0, tempRet0 | 0, 29) | 0;
 $33 = $8 - ($30 & -8) | 0;
 $40 = (Math_imul($33 >> 16, $18) | 0) + $23 + ((Math_imul($33 & 65535, $18) | 0) >> 16) | 0;
 $43 = 28 - $2 + $6 + (1 - $12) | 0;
 if (($43 | 0) < 0) {
  $45 = 0 - $43 | 0;
  $46 = -2147483648 >> $45;
  $47 = 2147483647 >>> $45;
  $48 = ($46 | 0) > ($47 | 0);
  $$ = $48 ? $46 : $47;
  $$52 = $48 ? $47 : $46;
  return (($40 | 0) > ($$ | 0) ? $$ : ($40 | 0) < ($$52 | 0) ? $$52 : $40) << $45 | 0;
 } else return (($43 | 0) < 32 ? $40 >> $43 : 0) | 0;
 return 0;
}

function _silk_DIV32_varQ_377($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$52 = 0, $12 = 0, $14 = 0, $18 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0;
 $6 = _silk_CLZ32_379(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $8 = $0 << $6 + -1;
 $12 = _silk_CLZ32_379(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $14 = $1 << $12 + -1;
 $18 = (536870911 / ($14 >> 16 | 0) | 0) << 16 >> 16;
 $23 = ((Math_imul($18, $8 & 65535) | 0) >> 16) + (Math_imul($18, $8 >> 16) | 0) | 0;
 $28 = ___muldi3($23 | 0, (($23 | 0) < 0) << 31 >> 31 | 0, $14 | 0, (($14 | 0) < 0) << 31 >> 31 | 0) | 0;
 $30 = _bitshift64Lshr($28 | 0, tempRet0 | 0, 29) | 0;
 $33 = $8 - ($30 & -8) | 0;
 $40 = (Math_imul($33 >> 16, $18) | 0) + $23 + ((Math_imul($33 & 65535, $18) | 0) >> 16) | 0;
 $43 = 28 - $2 + $6 + (1 - $12) | 0;
 if (($43 | 0) < 0) {
  $45 = 0 - $43 | 0;
  $46 = -2147483648 >> $45;
  $47 = 2147483647 >>> $45;
  $48 = ($46 | 0) > ($47 | 0);
  $$ = $48 ? $46 : $47;
  $$52 = $48 ? $47 : $46;
  return (($40 | 0) > ($$ | 0) ? $$ : ($40 | 0) < ($$52 | 0) ? $$52 : $40) << $45 | 0;
 } else return (($43 | 0) < 32 ? $40 >> $43 : 0) | 0;
 return 0;
}

function _silk_ana_filt_bank_1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$043 = 0, $12 = 0, $14 = 0, $21 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $38 = 0, $48 = 0, $5 = 0, $7 = 0, $8 = 0;
 $5 = $4 >> 1;
 if (($4 | 0) <= 1) return;
 $7 = $1 + 4 | 0;
 $$043 = 0;
 do {
  $8 = $$043 << 1;
  $12 = HEAP16[$0 + ($8 << 1) >> 1] << 10;
  $14 = $12 - (HEAP32[$1 >> 2] | 0) | 0;
  $21 = ((Math_imul($14 & 65535, -24290) | 0) >> 16) + (Math_imul($14 >> 16, -24290) | 0) + $12 | 0;
  HEAP32[$1 >> 2] = $21 + $14;
  $27 = HEAP16[$0 + (($8 | 1) << 1) >> 1] << 10;
  $28 = HEAP32[$7 >> 2] | 0;
  $29 = $27 - $28 | 0;
  $35 = ((($29 & 65535) * 10788 | 0) >>> 16) + (($29 >> 16) * 10788 | 0) | 0;
  $36 = $35 + $28 | 0;
  HEAP32[$7 >> 2] = $35 + $27;
  $38 = $36 + $21 | 0;
  HEAP16[$2 + ($$043 << 1) >> 1] = ($38 | 0) > 67107839 ? 32767 : ($38 | 0) < -67109888 ? -32768 : (($38 >>> 10) + 1 | 0) >>> 1 & 65535;
  $48 = $36 - $21 | 0;
  HEAP16[$3 + ($$043 << 1) >> 1] = ($48 | 0) > 67107839 ? 32767 : ($48 | 0) < -67109888 ? -32768 : (($48 >>> 10) + 1 | 0) >>> 1 & 65535;
  $$043 = $$043 + 1 | 0;
 } while (($$043 | 0) < ($5 | 0));
 return;
}

function _silk_DIV32_varQ_361($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$9 = 0, $11 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $7 = 0;
 $5 = _silk_CLZ32_362(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $11 = _silk_CLZ32_362(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $13 = $1 << $11 + -1;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = ((Math_imul($17, $7 & 65535) | 0) >> 16) + (Math_imul($17, $7 >> 16) | 0) | 0;
 $27 = ___muldi3($22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0, $13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = (Math_imul($32 >> 16, $17) | 0) + $22 + ((Math_imul($32 & 65535, $17) | 0) >> 16) | 0;
 $41 = $5 + 28 + (1 - $11) | 0;
 if (($41 | 0) < 21) {
  $43 = 21 - $41 | 0;
  $44 = -2147483648 >> $43;
  $45 = 2147483647 >>> $43;
  $46 = ($44 | 0) > ($45 | 0);
  $$ = $46 ? $44 : $45;
  $$9 = $46 ? $45 : $44;
  return (($39 | 0) > ($$ | 0) ? $$ : ($39 | 0) < ($$9 | 0) ? $$9 : $39) << $43 | 0;
 } else return (($41 | 0) < 53 ? $39 >> $41 + -21 : 0) | 0;
 return 0;
}

function _silk_DIV32_varQ_245($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$9 = 0, $11 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $7 = 0;
 $5 = _silk_CLZ32_246(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $11 = _silk_CLZ32_246(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $13 = $1 << $11 + -1;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = ((Math_imul($17, $7 & 65535) | 0) >> 16) + (Math_imul($17, $7 >> 16) | 0) | 0;
 $27 = ___muldi3($22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0, $13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = (Math_imul($32 >> 16, $17) | 0) + $22 + ((Math_imul($32 & 65535, $17) | 0) >> 16) | 0;
 $41 = $5 + 28 + (1 - $11) | 0;
 if (($41 | 0) < 16) {
  $43 = 16 - $41 | 0;
  $44 = -2147483648 >> $43;
  $45 = 2147483647 >>> $43;
  $46 = ($44 | 0) > ($45 | 0);
  $$ = $46 ? $44 : $45;
  $$9 = $46 ? $45 : $44;
  return (($39 | 0) > ($$ | 0) ? $$ : ($39 | 0) < ($$9 | 0) ? $$9 : $39) << $43 | 0;
 } else return (($41 | 0) < 48 ? $39 >> $41 + -16 : 0) | 0;
 return 0;
}

function _silk_DIV32_varQ_236($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$9 = 0, $11 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $7 = 0;
 $5 = _silk_CLZ32_237(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $11 = _silk_CLZ32_237(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $13 = $1 << $11 + -1;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = ((Math_imul($17, $7 & 65535) | 0) >> 16) + (Math_imul($17, $7 >> 16) | 0) | 0;
 $27 = ___muldi3($22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0, $13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = (Math_imul($32 >> 16, $17) | 0) + $22 + ((Math_imul($32 & 65535, $17) | 0) >> 16) | 0;
 $41 = $5 + 28 + (1 - $11) | 0;
 if (($41 | 0) < 16) {
  $43 = 16 - $41 | 0;
  $44 = -2147483648 >> $43;
  $45 = 2147483647 >>> $43;
  $46 = ($44 | 0) > ($45 | 0);
  $$ = $46 ? $44 : $45;
  $$9 = $46 ? $45 : $44;
  return (($39 | 0) > ($$ | 0) ? $$ : ($39 | 0) < ($$9 | 0) ? $$9 : $39) << $43 | 0;
 } else return (($41 | 0) < 48 ? $39 >> $41 + -16 : 0) | 0;
 return 0;
}

function _silk_DIV32_varQ($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$9 = 0, $11 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $7 = 0;
 $5 = _silk_CLZ32_183(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $11 = _silk_CLZ32_183(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0;
 $13 = $1 << $11 + -1;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = ((Math_imul($17, $7 & 65535) | 0) >> 16) + (Math_imul($17, $7 >> 16) | 0) | 0;
 $27 = ___muldi3($22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0, $13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = (Math_imul($32 >> 16, $17) | 0) + $22 + ((Math_imul($32 & 65535, $17) | 0) >> 16) | 0;
 $41 = $5 + 28 + (1 - $11) | 0;
 if (($41 | 0) < 16) {
  $43 = 16 - $41 | 0;
  $44 = -2147483648 >> $43;
  $45 = 2147483647 >>> $43;
  $46 = ($44 | 0) > ($45 | 0);
  $$ = $46 ? $44 : $45;
  $$9 = $46 ? $45 : $44;
  return (($39 | 0) > ($$ | 0) ? $$ : ($39 | 0) < ($$9 | 0) ? $$9 : $39) << $43 | 0;
 } else return (($41 | 0) < 48 ? $39 >> $41 + -16 : 0) | 0;
 return 0;
}

function _deemphasis_stereo_simple($$val, $$1$val, $0, $1, $2, $3) {
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0$lcssa = 0.0, $$026$lcssa = 0.0, $$0262 = 0.0, $$0271 = 0, $$03 = 0.0, $11 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0, $4 = 0.0, $5 = 0, $6 = 0.0;
 $4 = +HEAPF32[$3 >> 2];
 $5 = $3 + 4 | 0;
 $6 = +HEAPF32[$5 >> 2];
 if (($1 | 0) <= 0) {
  $$0$lcssa = $4;
  $$026$lcssa = $6;
  HEAPF32[$3 >> 2] = $$0$lcssa;
  HEAPF32[$5 >> 2] = $$026$lcssa;
  return;
 }
 $$0262 = $6;
 $$0271 = 0;
 $$03 = $4;
 while (1) {
  $11 = $$03 + (+HEAPF32[$$val + ($$0271 << 2) >> 2] + 1.0000000031710769e-30);
  $15 = $$0262 + (+HEAPF32[$$1$val + ($$0271 << 2) >> 2] + 1.0000000031710769e-30);
  $16 = $11 * $2;
  $17 = $15 * $2;
  $19 = $$0271 << 1;
  HEAPF32[$0 + ($19 << 2) >> 2] = $11 * .000030517578125;
  HEAPF32[$0 + (($19 | 1) << 2) >> 2] = $15 * .000030517578125;
  $$0271 = $$0271 + 1 | 0;
  if (($$0271 | 0) == ($1 | 0)) {
   $$0$lcssa = $16;
   $$026$lcssa = $17;
   break;
  } else {
   $$0262 = $17;
   $$03 = $16;
  }
 }
 HEAPF32[$3 >> 2] = $$0$lcssa;
 HEAPF32[$5 >> 2] = $$026$lcssa;
 return;
}

function _silk_resampler_down2_hp($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0.0, $$04344 = 0, $$045 = 0.0, $10 = 0.0, $11 = 0.0, $13 = 0.0, $14 = 0.0, $18 = 0.0, $19 = 0.0, $21 = 0.0, $26 = 0.0, $28 = 0.0, $30 = 0.0, $33 = 0.0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = ($3 | 0) / 2 | 0;
 if (($3 | 0) <= 1) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $6 = $0 + 4 | 0;
 $7 = $0 + 8 | 0;
 $$04344 = 0;
 $$045 = 0.0;
 while (1) {
  $8 = $$04344 << 1;
  $10 = +HEAPF32[$2 + ($8 << 2) >> 2];
  $11 = +HEAPF32[$0 >> 2];
  $13 = ($10 - $11) * .6074370741844177;
  $14 = $11 + $13;
  HEAPF32[$0 >> 2] = $10 + $13;
  $18 = +HEAPF32[$2 + (($8 | 1) << 2) >> 2];
  $19 = +HEAPF32[$6 >> 2];
  $21 = ($18 - $19) * .15062999725341797;
  HEAPF32[$6 >> 2] = $18 + $21;
  $26 = +HEAPF32[$7 >> 2];
  $28 = (-$18 - $26) * .15062999725341797;
  $30 = $14 + $26 + $28;
  HEAPF32[$7 >> 2] = $28 - $18;
  $33 = $$045 + $30 * $30;
  HEAPF32[$1 + ($$04344 << 2) >> 2] = ($14 + $19 + $21) * .5;
  $$04344 = $$04344 + 1 | 0;
  if (($$04344 | 0) == ($4 | 0)) {
   $$0$lcssa = $33;
   break;
  } else $$045 = $33;
 }
 return +$$0$lcssa;
}

function _silk_bwexpander_32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02629 = 0, $$030 = 0, $$lcssa = 0, $11 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $2 + -65536 | 0;
 $4 = $1 + -1 | 0;
 $6 = $2 >> 16;
 if (($1 | 0) > 1) {
  $$02629 = 0;
  $$030 = $2;
  $11 = $6;
  while (1) {
   $7 = $0 + ($$02629 << 2) | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = $8 << 16 >> 16;
   HEAP32[$7 >> 2] = ((Math_imul($9, $$030 & 65535) | 0) >> 16) + (Math_imul($9, $11) | 0) + (Math_imul(($8 >> 15) + 1 >> 1, $$030) | 0);
   $25 = (((Math_imul($$030, $3) | 0) >> 15) + 1 >> 1) + $$030 | 0;
   $$02629 = $$02629 + 1 | 0;
   $27 = $25 >> 16;
   if (($$02629 | 0) == ($4 | 0)) {
    $$0$lcssa = $25;
    $$lcssa = $27;
    break;
   } else {
    $$030 = $25;
    $11 = $27;
   }
  }
 } else {
  $$0$lcssa = $2;
  $$lcssa = $6;
 }
 $28 = $0 + ($4 << 2) | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $29 << 16 >> 16;
 HEAP32[$28 >> 2] = ((Math_imul($30, $$0$lcssa & 65535) | 0) >> 16) + (Math_imul($30, $$lcssa) | 0) + (Math_imul(($29 >> 15) + 1 >> 1, $$0$lcssa) | 0);
 return;
}

function _silk_A2NLSF_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$037 = 0, $$136 = 0, $12 = 0, $25 = 0, $30 = 0, $7 = 0, $9 = 0, $$136$looptemp = 0;
 HEAP32[$1 + ($3 << 2) >> 2] = 65536;
 HEAP32[$2 + ($3 << 2) >> 2] = 65536;
 if (($3 | 0) <= 0) {
  _silk_A2NLSF_trans_poly($1, $3);
  _silk_A2NLSF_trans_poly($2, $3);
  return;
 }
 $7 = $3 + -1 | 0;
 $$037 = 0;
 do {
  $9 = $0 + ($7 - $$037 << 2) | 0;
  $12 = $0 + ($$037 + $3 << 2) | 0;
  HEAP32[$1 + ($$037 << 2) >> 2] = 0 - ((HEAP32[$12 >> 2] | 0) + (HEAP32[$9 >> 2] | 0));
  HEAP32[$2 + ($$037 << 2) >> 2] = (HEAP32[$12 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
  $$037 = $$037 + 1 | 0;
 } while (($$037 | 0) != ($3 | 0));
 $$136 = $3;
 do {
  $$136$looptemp = $$136;
  $$136 = $$136 + -1 | 0;
  $25 = $1 + ($$136 << 2) | 0;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$1 + ($$136$looptemp << 2) >> 2] | 0);
  $30 = $2 + ($$136 << 2) | 0;
  HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$2 + ($$136$looptemp << 2) >> 2] | 0);
 } while (($$136$looptemp | 0) > 1);
 _silk_A2NLSF_trans_poly($1, $3);
 _silk_A2NLSF_trans_poly($2, $3);
 return;
}

function _hp_cutoff($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $29 = 0, $30 = 0, $32 = 0, $40 = 0, $41 = 0, $50 = 0;
 $10 = (($1 << 16 >> 16) * 2471 | 0) / (($6 | 0) / 1e3 | 0 | 0) | 0;
 $12 = (Math_imul($10, -471) | 0) + 268435456 | 0;
 $14 = ($10 * 942 | 0) + -536870912 | 0;
 $15 = $12 >> 6;
 $16 = $12 >> 22;
 $18 = $10 << 16 >> 16;
 $29 = (Math_imul($18, $10 >> 16) | 0) + -8388608 + ((Math_imul($18, $10 & 65535) | 0) >> 16) + (Math_imul(($10 >> 15) + 1 >> 1, $10) | 0) | 0;
 $30 = $29 << 16 >> 16;
 $32 = $15 & 65535;
 $40 = ((Math_imul($30, $32) | 0) >> 16) + (Math_imul($30, $16) | 0) + (Math_imul(($29 >> 15) + 1 >> 1, $15) | 0) | 0;
 $41 = $15 << 16 >> 16;
 $50 = (Math_imul(($12 >> 21) + 1 >> 1, $15) | 0) + (Math_imul($41, $16) | 0) + ((Math_imul($41, $32) | 0) >> 16) | 0;
 _silk_biquad_float($0, $12, $14, $12, $40, $50, $3, $2, $4, $5);
 if (($5 | 0) != 2) return;
 _silk_biquad_float($0 + 4 | 0, $12, $14, $12, $40, $50, $3 + 8 | 0, $2 + 4 | 0, $4, 2);
 return;
}

function _stereo_merge($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$01 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $18 = 0.0, $20 = 0.0, $22 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $4 = 0, $5 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAPF32[$4 >> 2] = 0.0;
 HEAPF32[$5 >> 2] = 0.0;
 _dual_inner_prod_c($1, $0, $1, $3, $4, $5);
 $7 = +HEAPF32[$4 >> 2] * $2;
 HEAPF32[$4 >> 2] = $7;
 $10 = $2 * $2 + +HEAPF32[$5 >> 2];
 $11 = $7 * 2.0;
 $12 = $10 - $11;
 $13 = $11 + $10;
 if ($13 < 6.000000284984708e-04 | $12 < 6.000000284984708e-04) {
  _memcpy($1 | 0, $0 | 0, $3 << 2 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $18 = 1.0 / +Math_sqrt(+$12);
 $20 = 1.0 / +Math_sqrt(+$13);
 if (($3 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $$01 = 0;
 do {
  $22 = $0 + ($$01 << 2) | 0;
  $24 = +HEAPF32[$22 >> 2] * $2;
  $25 = $1 + ($$01 << 2) | 0;
  $26 = +HEAPF32[$25 >> 2];
  HEAPF32[$22 >> 2] = $18 * ($24 - $26);
  HEAPF32[$25 >> 2] = $20 * ($24 + $26);
  $$01 = $$01 + 1 | 0;
 } while (($$01 | 0) != ($3 | 0));
 STACKTOP = sp;
 return;
}

function _speex_resampler_process_interleaved_float($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$031 = 0, $$031$us = 0, $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $7 = $0 + 88 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $0 + 92 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $0 + 20 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$9 >> 2] = $12;
 HEAP32[$7 >> 2] = $12;
 if ($12 | 0) if (!$1) {
  $$031$us = 0;
  do {
   HEAP32[$4 >> 2] = $5;
   HEAP32[$2 >> 2] = $6;
   _speex_resampler_process_float($0, $$031$us, 0, $2, $3 + ($$031$us << 2) | 0, $4);
   $$031$us = $$031$us + 1 | 0;
  } while ($$031$us >>> 0 < (HEAP32[$11 >> 2] | 0) >>> 0);
 } else {
  $$031 = 0;
  do {
   HEAP32[$4 >> 2] = $5;
   HEAP32[$2 >> 2] = $6;
   _speex_resampler_process_float($0, $$031, $1 + ($$031 << 2) | 0, $2, $3 + ($$031 << 2) | 0, $4);
   $$031 = $$031 + 1 | 0;
  } while ($$031 >>> 0 < (HEAP32[$11 >> 2] | 0) >>> 0);
 }
 HEAP32[$7 >> 2] = $8;
 HEAP32[$9 >> 2] = $10;
 return (HEAP32[$0 + 84 >> 2] | 0) == 5 | 0;
}

function _silk_apply_sine_window_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$04243 = 0, $$14144 = 0.0, $$145 = 0.0, $10 = 0.0, $12 = 0.0, $13 = 0, $22 = 0, $28 = 0.0, $29 = 0, $36 = 0;
 if (($2 + -1 | 0) >>> 0 >= 2) _celt_fatal(45721, 45770, 48);
 if ($3 & 3 | 0) _celt_fatal(45805, 45770, 51);
 $10 = 3.1415927410125732 / +($3 + 1 | 0);
 $12 = 2.0 - $10 * $10;
 $13 = ($2 | 0) < 2;
 if (($3 | 0) <= 0) return;
 $$04243 = 0;
 $$14144 = $13 ? 0.0 : 1.0;
 $$145 = $13 ? $10 : $12 * .5;
 while (1) {
  HEAPF32[$0 + ($$04243 << 2) >> 2] = ($$14144 + $$145) * (+HEAPF32[$1 + ($$04243 << 2) >> 2] * .5);
  $22 = $$04243 | 1;
  HEAPF32[$0 + ($22 << 2) >> 2] = $$145 * +HEAPF32[$1 + ($22 << 2) >> 2];
  $28 = $12 * $$145 - $$14144;
  $29 = $$04243 | 2;
  HEAPF32[$0 + ($29 << 2) >> 2] = ($$145 + $28) * (+HEAPF32[$1 + ($29 << 2) >> 2] * .5);
  $36 = $$04243 | 3;
  HEAPF32[$0 + ($36 << 2) >> 2] = $28 * +HEAPF32[$1 + ($36 << 2) >> 2];
  $$04243 = $$04243 + 4 | 0;
  if (($$04243 | 0) >= ($3 | 0)) break; else {
   $$14144 = $28;
   $$145 = $12 * $28 - $$145;
  }
 }
 return;
}

function _silk_energy_FLP($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0.0, $$028$lcssa = 0, $$02832 = 0, $$033 = 0.0, $$1$lcssa = 0.0, $$12930 = 0, $$131 = 0.0, $11 = 0.0, $17 = 0.0, $2 = 0, $23 = 0.0, $33 = 0.0, $35 = 0.0, $6 = 0.0;
 $2 = $1 + -3 | 0;
 if (($1 | 0) > 3) {
  $$02832 = 0;
  $$033 = 0.0;
  do {
   $6 = +HEAPF32[$0 + ($$02832 << 2) >> 2];
   $11 = +HEAPF32[$0 + (($$02832 | 1) << 2) >> 2];
   $17 = +HEAPF32[$0 + (($$02832 | 2) << 2) >> 2];
   $23 = +HEAPF32[$0 + (($$02832 | 3) << 2) >> 2];
   $$033 = $$033 + ($6 * $6 + $11 * $11 + $17 * $17 + $23 * $23);
   $$02832 = $$02832 + 4 | 0;
  } while (($$02832 | 0) < ($2 | 0));
  $$0$lcssa = $$033;
  $$028$lcssa = $1 & -4;
 } else {
  $$0$lcssa = 0.0;
  $$028$lcssa = 0;
 }
 if (($$028$lcssa | 0) >= ($1 | 0)) {
  $$1$lcssa = $$0$lcssa;
  return +$$1$lcssa;
 }
 $$12930 = $$028$lcssa;
 $$131 = $$0$lcssa;
 while (1) {
  $33 = +HEAPF32[$0 + ($$12930 << 2) >> 2];
  $35 = $$131 + $33 * $33;
  $$12930 = $$12930 + 1 | 0;
  if (($$12930 | 0) == ($1 | 0)) {
   $$1$lcssa = $35;
   break;
  } else $$131 = $35;
 }
 return +$$1$lcssa;
}

function _opus_repacketizer_cat_impl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $15 = 0, $24 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($2 | 0) < 1) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
  HEAP32[$0 + 296 >> 2] = _opus_packet_get_samples_per_frame(HEAP8[$1 >> 0] | 0, 8e3) | 0;
 } else if (((HEAP8[$1 >> 0] ^ HEAP8[$0 >> 0]) & 255) > 3) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = _opus_packet_get_nb_frames($1, $2) | 0;
 if (($15 | 0) < 1) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((Math_imul(HEAP32[$0 + 296 >> 2] | 0, $15 + $6 | 0) | 0) > 960) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $24 = _opus_packet_parse_impl($1, $2, $3, $0 + 8 + ($6 << 2) | 0, $0 + 200 + ($6 << 1) | 0, 0) | 0;
 if (($24 | 0) < 1) {
  $$0 = $24;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $15;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_LPC_analysis_filter10_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) <= 10) return;
 $5 = $1 + 4 | 0;
 $6 = $1 + 8 | 0;
 $7 = $1 + 12 | 0;
 $8 = $1 + 16 | 0;
 $9 = $1 + 20 | 0;
 $10 = $1 + 24 | 0;
 $11 = $1 + 28 | 0;
 $12 = $1 + 32 | 0;
 $13 = $1 + 36 | 0;
 $$028 = 10;
 do {
  $15 = $2 + ($$028 + -1 << 2) | 0;
  HEAPF32[$0 + ($$028 << 2) >> 2] = +HEAPF32[$2 + ($$028 << 2) >> 2] - (+HEAPF32[$15 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$15 + -4 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$15 + -8 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$15 + -12 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$15 + -16 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$15 + -20 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$15 + -24 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$15 + -28 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$15 + -32 >> 2] * +HEAPF32[$12 >> 2] + +HEAPF32[$15 + -36 >> 2] * +HEAPF32[$13 >> 2]);
  $$028 = $$028 + 1 | 0;
 } while (($$028 | 0) != ($3 | 0));
 return;
}

function _vfprintf($0) {
 $0 = $0 | 0;
 var $1 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 80 | 0;
 $4 = sp;
 dest = $2;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 if ((_printf_core(0, $1, $3, $2) | 0) < 0) {} else {
  $8 = HEAP32[9839] | 0;
  $9 = $8 & 32;
  if ((HEAP8[39430] | 0) < 1) HEAP32[9839] = $8 & -33;
  if (!(HEAP32[9851] | 0)) {
   $15 = HEAP32[9850] | 0;
   HEAP32[9850] = $4;
   HEAP32[9846] = $4;
   HEAP32[9844] = $4;
   HEAP32[9851] = 80;
   HEAP32[9843] = $4 + 80;
   _printf_core(39356, $1, $3, $2) | 0;
   if ($15 | 0) {
    FUNCTION_TABLE_iiii[HEAP32[39392 >> 2] & 3](39356, 0, 0) | 0;
    HEAP32[9850] = $15;
    HEAP32[9851] = 0;
    HEAP32[9843] = 0;
    HEAP32[9846] = 0;
    HEAP32[9844] = 0;
   }
  } else _printf_core(39356, $1, $3, $2) | 0;
  HEAP32[9839] = HEAP32[9839] | $9;
 }
 STACKTOP = sp;
 return;
}

function _celt_fir5($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03342 = 0.0, $$03342$phi = 0.0, $$03441 = 0.0, $$03441$phi = 0.0, $$03540 = 0.0, $$03540$phi = 0.0, $$03639 = 0.0, $$03639$phi = 0.0, $$03738 = 0.0, $$043 = 0, $11 = 0.0, $13 = 0, $14 = 0.0, $3 = 0.0, $5 = 0.0, $7 = 0.0, $9 = 0.0;
 $3 = +HEAPF32[$1 >> 2];
 $5 = +HEAPF32[$1 + 4 >> 2];
 $7 = +HEAPF32[$1 + 8 >> 2];
 $9 = +HEAPF32[$1 + 12 >> 2];
 $11 = +HEAPF32[$1 + 16 >> 2];
 if (($2 | 0) <= 0) return;
 $$03342 = 0.0;
 $$03441 = 0.0;
 $$03540 = 0.0;
 $$03639 = 0.0;
 $$03738 = 0.0;
 $$043 = 0;
 while (1) {
  $13 = $0 + ($$043 << 2) | 0;
  $14 = +HEAPF32[$13 >> 2];
  HEAPF32[$13 >> 2] = $11 * $$03342 + ($9 * $$03441 + ($7 * $$03540 + ($5 * $$03639 + ($3 * $$03738 + $14))));
  $$043 = $$043 + 1 | 0;
  if (($$043 | 0) == ($2 | 0)) break; else {
   $$03639$phi = $$03738;
   $$03540$phi = $$03639;
   $$03441$phi = $$03540;
   $$03342$phi = $$03441;
   $$03738 = $14;
   $$03639 = $$03639$phi;
   $$03540 = $$03540$phi;
   $$03441 = $$03441$phi;
   $$03342 = $$03342$phi;
  }
 }
 return;
}

function _exp_rotation1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$04044 = 0, $$045 = 0, $$14142 = 0, $$143 = 0, $10 = 0.0, $20 = 0, $21 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $5 = 0.0, $6 = 0, $8 = 0.0, $9 = 0;
 $5 = -$4;
 $6 = $1 - $2 | 0;
 if (($6 | 0) > 0) {
  $$04044 = $0;
  $$045 = 0;
  while (1) {
   $8 = +HEAPF32[$$04044 >> 2];
   $9 = $$04044 + ($2 << 2) | 0;
   $10 = +HEAPF32[$9 >> 2];
   HEAPF32[$9 >> 2] = $8 * $4 + $10 * $3;
   HEAPF32[$$04044 >> 2] = $8 * $3 + $10 * $5;
   $$045 = $$045 + 1 | 0;
   if (($$045 | 0) == ($6 | 0)) break; else $$04044 = $$04044 + 4 | 0;
  }
 }
 $20 = $1 - ($2 << 1) | 0;
 $21 = $20 + -1 | 0;
 if (($20 | 0) <= 0) return;
 $$14142 = $0 + ($21 << 2) | 0;
 $$143 = $21;
 while (1) {
  $24 = +HEAPF32[$$14142 >> 2];
  $25 = $$14142 + ($2 << 2) | 0;
  $26 = +HEAPF32[$25 >> 2];
  HEAPF32[$25 >> 2] = $24 * $4 + $26 * $3;
  HEAPF32[$$14142 >> 2] = $24 * $3 + $26 * $5;
  if (($$143 | 0) > 0) {
   $$14142 = $$14142 + -4 | 0;
   $$143 = $$143 + -1 | 0;
  } else break;
 }
 return;
}

function _stereo_itheta($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$03236 = 0.0, $$03335 = 0.0, $$037 = 0, $$1 = 0.0, $$134 = 0.0, $10 = 0.0, $11 = 0.0, $13 = 0.0, $15 = 0.0, $18 = 0.0, $7 = 0.0, $9 = 0.0;
 if (!$2) {
  $18 = +_celt_inner_prod_c_174($0, $0, $3) + 1.0000000036274937e-15;
  $$1 = $18;
  $$134 = +_celt_inner_prod_c_174($1, $1, $3) + 1.0000000036274937e-15;
 } else if (($3 | 0) > 0) {
  $$03236 = 1.0000000036274937e-15;
  $$03335 = 1.0000000036274937e-15;
  $$037 = 0;
  while (1) {
   $7 = +HEAPF32[$0 + ($$037 << 2) >> 2];
   $9 = +HEAPF32[$1 + ($$037 << 2) >> 2];
   $10 = $7 + $9;
   $11 = $7 - $9;
   $13 = $$03236 + $10 * $10;
   $15 = $$03335 + $11 * $11;
   $$037 = $$037 + 1 | 0;
   if (($$037 | 0) == ($3 | 0)) {
    $$1 = $13;
    $$134 = $15;
    break;
   } else {
    $$03236 = $13;
    $$03335 = $15;
   }
  }
 } else {
  $$1 = 1.0000000036274937e-15;
  $$134 = 1.0000000036274937e-15;
 }
 return ~~+Math_floor(+(+_fast_atan2f(+Math_sqrt(+$$134), +Math_sqrt(+$$1)) * 10430.3818359375 + .5)) | 0;
}

function _silk_QueryEncoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $40 = 0, $53 = 0, $54 = 0;
 HEAP32[$1 >> 2] = HEAP32[$0 + 20192 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 20196 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 4556 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 4564 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 4568 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 4572 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 4612 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 4608 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 4616 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 4624 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 6088 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 6076 >> 2];
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 4676 >> 2];
 $40 = $0 + 4576 | 0;
 HEAP32[$1 + 72 >> 2] = (HEAP32[$40 >> 2] << 16 >> 16) * 1e3;
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 4536 >> 2];
 if ((HEAP32[$40 >> 2] | 0) != 16) {
  $54 = 0;
  $53 = $1 + 80 | 0;
  HEAP32[$53 >> 2] = $54;
  return;
 }
 $54 = (HEAP32[$0 + 28 >> 2] | 0) == 0 & 1;
 $53 = $1 + 80 | 0;
 HEAP32[$53 >> 2] = $54;
 return;
}

function _silk_stereo_decode_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $14 = 0, $19 = 0, $2 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $40 = 0, $5 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = _ec_dec_icdf($0, 24864, 8) | 0;
 $3 = ($2 | 0) / 5 | 0;
 $5 = (Math_imul($3, -5) | 0) + $2 | 0;
 $6 = _ec_dec_icdf($0, 43942, 8) | 0;
 $7 = _ec_dec_icdf($0, 43949, 8) | 0;
 $8 = _ec_dec_icdf($0, 43942, 8) | 0;
 $9 = _ec_dec_icdf($0, 43949, 8) | 0;
 $11 = $6 + ($3 * 3 | 0) | 0;
 $14 = HEAP16[24832 + ($11 << 1) >> 1] | 0;
 $19 = (HEAP16[24832 + ($11 + 1 << 1) >> 1] | 0) - $14 | 0;
 $30 = (Math_imul(((($19 & 65535) * 6554 | 0) >>> 16) + (($19 >> 16) * 6554 | 0) | 0, $7 << 17 >> 16 | 1) | 0) + $14 | 0;
 $32 = $8 + ($5 * 3 | 0) | 0;
 $35 = HEAP16[24832 + ($32 << 1) >> 1] | 0;
 $40 = (HEAP16[24832 + ($32 + 1 << 1) >> 1] | 0) - $35 | 0;
 $51 = (Math_imul(((($40 & 65535) * 6554 | 0) >>> 16) + (($40 >> 16) * 6554 | 0) | 0, $9 << 17 >> 16 | 1) | 0) + $35 | 0;
 HEAP32[$1 + 4 >> 2] = $51;
 HEAP32[$1 >> 2] = $30 - $51;
 return;
}

function _silk_biquad_float($0, $$val, $$1$val, $$2$val, $$val1, $$1$val2, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $$2$val = $$2$val | 0;
 $$val1 = $$val1 | 0;
 $$1$val2 = $$1$val2 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$03 = 0, $10 = 0.0, $12 = 0.0, $14 = 0.0, $16 = 0, $17 = 0, $19 = 0.0, $22 = 0.0, $6 = 0.0, $8 = 0.0;
 $6 = +($$val1 | 0) * 3.725290298461914e-09;
 $8 = +($$1$val2 | 0) * 3.725290298461914e-09;
 $10 = +($$val | 0) * 3.725290298461914e-09;
 $12 = +($$1$val | 0) * 3.725290298461914e-09;
 $14 = +($$2$val | 0) * 3.725290298461914e-09;
 if (($3 | 0) <= 0) return;
 $16 = $1 + 4 | 0;
 $$03 = 0;
 do {
  $17 = Math_imul($$03, $4) | 0;
  $19 = +HEAPF32[$0 + ($17 << 2) >> 2];
  $22 = +HEAPF32[$1 >> 2] + $10 * $19;
  HEAPF32[$1 >> 2] = $12 * $19 + (+HEAPF32[$16 >> 2] - $6 * $22);
  HEAPF32[$16 >> 2] = $14 * $19 - $8 * $22 + 1.0000000031710769e-30;
  HEAPF32[$2 + ($17 << 2) >> 2] = $22;
  $$03 = $$03 + 1 | 0;
 } while (($$03 | 0) != ($3 | 0));
 return;
}

function _ec_enc_bits($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $$122 = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $24 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $3 = $0 + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$2) _celt_fatal(41088, 41074, 198);
 $8 = $6 + $2 | 0;
 if ($8 >>> 0 > 32) {
  $10 = $0 + 44 | 0;
  $11 = ~$6;
  $14 = $6 + (($11 | 0) > -16 ? $11 : -16) + 8 | 0;
  $$0 = $6;
  $$021 = $4;
  while (1) {
   $16 = _ec_write_byte_at_end($0, $$021 & 255) | 0;
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | $16;
   $$021 = $$021 >>> 8;
   if (($$0 | 0) <= 15) break; else $$0 = $$0 + -8 | 0;
  }
  $24 = $6 + -8 - ($14 & -8) | 0;
  $$1 = $24;
  $$122 = $$021;
  $$pre$phiZ2D = $24 + $2 | 0;
 } else {
  $$1 = $6;
  $$122 = $4;
  $$pre$phiZ2D = $8;
 }
 HEAP32[$3 >> 2] = $1 << $$1 | $$122;
 HEAP32[$5 >> 2] = $$pre$phiZ2D;
 $27 = $0 + 20 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + $2;
 return;
}

function _comb_filter_const_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$03340 = 0.0, $$03340$phi = 0.0, $$03439 = 0.0, $$03439$phi = 0.0, $$03538 = 0.0, $$03538$phi = 0.0, $$03637 = 0.0, $$041 = 0, $20 = 0, $23 = 0.0;
 if (($3 | 0) <= 0) return;
 $20 = 2 - $2 | 0;
 $$03340 = +HEAPF32[$1 + (-2 - $2 << 2) >> 2];
 $$03439 = +HEAPF32[$1 + (~$2 << 2) >> 2];
 $$03538 = +HEAPF32[$1 + (0 - $2 << 2) >> 2];
 $$03637 = +HEAPF32[$1 + (1 - $2 << 2) >> 2];
 $$041 = 0;
 while (1) {
  $23 = +HEAPF32[$1 + ($20 + $$041 << 2) >> 2];
  HEAPF32[$0 + ($$041 << 2) >> 2] = ($$03340 + $23) * $6 + (($$03637 + $$03439) * $5 + ($$03538 * $4 + +HEAPF32[$1 + ($$041 << 2) >> 2]));
  $$041 = $$041 + 1 | 0;
  if (($$041 | 0) == ($3 | 0)) break; else {
   $$03538$phi = $$03637;
   $$03439$phi = $$03538;
   $$03340$phi = $$03439;
   $$03637 = $23;
   $$03538 = $$03538$phi;
   $$03439 = $$03439$phi;
   $$03340 = $$03340$phi;
  }
 }
 return;
}

function _silk_residual_energy_FLP($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0.0, $18 = 0.0, $21 = 0, $30 = 0.0, $38 = 0.0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768 | 0;
 $7 = sp;
 $8 = $7 + ($6 << 2) | 0;
 $9 = $6 + $4 | 0;
 $10 = $9 << 1;
 _silk_LPC_analysis_filter_FLP($7, $2, $1, $10, $6);
 $11 = +HEAPF32[$3 >> 2];
 HEAPF32[$0 >> 2] = +_silk_energy_FLP($8, $4) * ($11 * $11);
 $18 = +HEAPF32[$3 + 4 >> 2];
 $21 = $8 + ($9 << 2) | 0;
 HEAPF32[$0 + 4 >> 2] = +_silk_energy_FLP($21, $4) * ($18 * $18);
 if (($5 | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 _silk_LPC_analysis_filter_FLP($7, $2 + 64 | 0, $1 + ($10 << 2) | 0, $10, $6);
 $30 = +HEAPF32[$3 + 8 >> 2];
 HEAPF32[$0 + 8 >> 2] = +_silk_energy_FLP($8, $4) * ($30 * $30);
 $38 = +HEAPF32[$3 + 12 >> 2];
 HEAPF32[$0 + 12 >> 2] = +_silk_energy_FLP($21, $4) * ($38 * $38);
 STACKTOP = sp;
 return;
}

function _wcrtomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(HEAP32[12574] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[12580] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[12580] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _resampling_factor($0) {
 $0 = $0 | 0;
 var $$0 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) {
  switch ($0 | 0) {
  case 8e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 6;
  label = 7;
  break;
 } else {
  switch ($0 | 0) {
  case 12e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 4;
  label = 7;
  break;
 } else {
  if (($0 | 0) < 24e3) {
   switch ($0 | 0) {
   case 16e3:
    break;
   default:
    {
     label = 6;
     break L1;
    }
   }
   $$0 = 3;
   label = 7;
   break;
  }
  if (($0 | 0) >= 48e3) switch ($0 | 0) {
  case 48e3:
   {
    $$0 = 1;
    label = 7;
    break L1;
    break;
   }
  default:
   {
    label = 6;
    break L1;
   }
  }
  switch ($0 | 0) {
  case 24e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 2;
  label = 7;
 } while (0);
 if ((label | 0) == 6) _celt_fatal(47580, 39746, 84); else if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function _loss_distortion($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$us = 0, $$018$us = 0.0, $$01920$us = 0, $$1$lcssa$lcssa = 0.0, $$121$us = 0.0, $13 = 0.0, $19 = 0, $20 = 0.0, $7 = 0, $8 = 0;
 if (($2 | 0) >= ($3 | 0)) {
  $$1$lcssa$lcssa = 0.0;
  $19 = $$1$lcssa$lcssa > 200.0;
  $20 = $19 ? 200.0 : $$1$lcssa$lcssa;
  return +$20;
 }
 $$0$us = 0;
 $$018$us = 0.0;
 while (1) {
  $7 = Math_imul($$0$us, $4) | 0;
  $$01920$us = $2;
  $$121$us = $$018$us;
  do {
   $8 = $$01920$us + $7 | 0;
   $13 = +HEAPF32[$0 + ($8 << 2) >> 2] - +HEAPF32[$1 + ($8 << 2) >> 2];
   $$121$us = $$121$us + $13 * $13;
   $$01920$us = $$01920$us + 1 | 0;
  } while (($$01920$us | 0) != ($3 | 0));
  $$0$us = $$0$us + 1 | 0;
  if (($$0$us | 0) >= ($5 | 0)) {
   $$1$lcssa$lcssa = $$121$us;
   break;
  } else $$018$us = $$121$us;
 }
 $19 = $$1$lcssa$lcssa > 200.0;
 $20 = $19 ? 200.0 : $$1$lcssa$lcssa;
 return +$20;
}

function _speex_resampler_process_native($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01 = 0, $12 = 0, $16 = 0, $17 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $6 = 0;
 $6 = HEAP32[$0 + 24 >> 2] | 0;
 $12 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul(HEAP32[$0 + 28 >> 2] | 0, $1) | 0) << 2) | 0;
 HEAP32[$0 + 56 >> 2] = 1;
 $16 = FUNCTION_TABLE_iiiiiii[HEAP32[$0 + 84 >> 2] & 7]($0, $1, $12, $2, $3, $4) | 0;
 $17 = $0 + 60 | 0;
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 if (($20 | 0) < (HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = $20;
 HEAP32[$4 >> 2] = $16;
 $25 = (HEAP32[$17 >> 2] | 0) + ($1 << 2) | 0;
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0);
 $28 = HEAP32[$2 >> 2] | 0;
 $29 = $6 + -1 | 0;
 if (($6 | 0) <= 1) return;
 $$01 = 0;
 do {
  HEAP32[$12 + ($$01 << 2) >> 2] = HEAP32[$12 + ($$01 + $28 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 } while (($$01 | 0) != ($29 | 0));
 return;
}

function _silk_resampler_down2($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$033 = 0, $11 = 0, $13 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $7 = 0;
 $4 = $3 >> 1;
 if (($3 | 0) <= 1) return;
 $6 = $0 + 4 | 0;
 $$033 = 0;
 do {
  $7 = $$033 << 1;
  $11 = HEAP16[$2 + ($7 << 1) >> 1] << 10;
  $13 = $11 - (HEAP32[$0 >> 2] | 0) | 0;
  $20 = ((Math_imul($13 & 65535, -25727) | 0) >> 16) + (Math_imul($13 >> 16, -25727) | 0) + $11 | 0;
  HEAP32[$0 >> 2] = $20 + $13;
  $26 = HEAP16[$2 + (($7 | 1) << 1) >> 1] << 10;
  $27 = HEAP32[$6 >> 2] | 0;
  $28 = $26 - $27 | 0;
  $34 = ((($28 & 65535) * 9872 | 0) >>> 16) + (($28 >> 16) * 9872 | 0) | 0;
  $36 = $20 + $27 + $34 | 0;
  HEAP32[$6 >> 2] = $34 + $26;
  HEAP16[$1 + ($$033 << 1) >> 1] = ($36 | 0) > 67107839 ? 32767 : ($36 | 0) < -67109888 ? -32768 : (($36 >>> 10) + 1 | 0) >>> 1 & 65535;
  $$033 = $$033 + 1 | 0;
 } while (($$033 | 0) < ($4 | 0));
 return;
}

function _icwrs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$039 = 0, $$040 = 0, $$1 = 0, $16 = 0, $18 = 0, $22 = 0, $3 = 0, $5 = 0, $8 = 0, $$039$looptemp = 0;
 if (($0 | 0) <= 1) _celt_fatal(40989, 40977, 444);
 $3 = $0 + -1 | 0;
 $5 = HEAP32[$1 + ($3 << 2) >> 2] | 0;
 $$0 = ($5 | 0) > -1 ? $5 : 0 - $5 | 0;
 $$039 = $3;
 $$040 = $5 >>> 31;
 while (1) {
  $$039$looptemp = $$039;
  $$039 = $$039 + -1 | 0;
  $8 = $0 - $$039 | 0;
  $16 = (HEAP32[(HEAP32[592 + ((($8 | 0) < ($$0 | 0) ? $8 : $$0) << 2) >> 2] | 0) + ((($8 | 0) > ($$0 | 0) ? $8 : $$0) << 2) >> 2] | 0) + $$040 | 0;
  $18 = HEAP32[$1 + ($$039 << 2) >> 2] | 0;
  $$0 = (($18 | 0) > -1 ? $18 : 0 - $18 | 0) + $$0 | 0;
  $22 = $$0 + 1 | 0;
  if (($18 | 0) < 0) $$1 = (HEAP32[(HEAP32[592 + ((($8 | 0) > ($$0 | 0) ? $22 : $8) << 2) >> 2] | 0) + ((($8 | 0) > ($22 | 0) ? $8 : $22) << 2) >> 2] | 0) + $16 | 0; else $$1 = $16;
  if (($$039$looptemp | 0) <= 1) break; else $$040 = $$1;
 }
 return $$1 | 0;
}

function _compute_band_energies($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$030$us = 0, $$031$us = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $19 = 0, $28 = 0.0, $7 = 0, $$031$us$looptemp = 0;
 $7 = HEAP32[$0 + 32 >> 2] | 0;
 $10 = HEAP32[$0 + 44 >> 2] << $5;
 $12 = $0 + 8 | 0;
 if (($3 | 0) <= 0) return;
 $$030$us = 0;
 do {
  $13 = Math_imul($$030$us, $10) | 0;
  $$031$us = 0;
  do {
   $16 = HEAP16[$7 + ($$031$us << 1) >> 1] | 0;
   $19 = $1 + (($16 << $5) + $13 << 2) | 0;
   $$031$us$looptemp = $$031$us;
   $$031$us = $$031$us + 1 | 0;
   $28 = +Math_sqrt(+(+_celt_inner_prod_c($19, $19, (HEAP16[$7 + ($$031$us << 1) >> 1] | 0) - $16 << $5) + 1.0000000272452012e-27));
   HEAPF32[$2 + ((Math_imul(HEAP32[$12 >> 2] | 0, $$030$us) | 0) + $$031$us$looptemp << 2) >> 2] = $28;
  } while (($$031$us | 0) != ($3 | 0));
  $$030$us = $$030$us + 1 | 0;
 } while (($$030$us | 0) < ($4 | 0));
 return;
}

function _silk_find_LTP_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$03035 = 0, $$03134 = 0, $$03233 = 0, $$036 = 0, $11 = 0, $13 = 0.0, $19 = 0.0, $21 = 0.0, $7 = 0;
 if (($5 | 0) <= 0) return;
 $7 = $4 + 5 | 0;
 $$03035 = 0;
 $$03134 = $1;
 $$03233 = $0;
 $$036 = $2;
 while (1) {
  $11 = $$036 + (-2 - (HEAP32[$3 + ($$03035 << 2) >> 2] | 0) << 2) | 0;
  _silk_corrMatrix_FLP($11, $4, $$03233);
  _silk_corrVector_FLP($11, $$036, $4, $$03134);
  $13 = +_silk_energy_FLP($$036, $7);
  $19 = (+HEAPF32[$$03233 >> 2] + +HEAPF32[$$03233 + 96 >> 2]) * .014999999664723873 + 1.0;
  $21 = 1.0 / ($19 < $13 ? $13 : $19);
  _silk_scale_vector_FLP($$03233, $21, 25);
  _silk_scale_vector_FLP($$03134, $21, 5);
  $$03035 = $$03035 + 1 | 0;
  if (($$03035 | 0) == ($5 | 0)) break; else {
   $$03134 = $$03134 + 20 | 0;
   $$03233 = $$03233 + 100 | 0;
   $$036 = $$036 + ($4 << 2) | 0;
  }
 }
 return;
}

function _silk_NLSF_unpack($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$02425 = 0, $$026 = 0, $13 = 0, $15 = 0, $16 = 0, $35 = 0, $4 = 0, $5 = 0;
 $4 = $2 + 2 | 0;
 $5 = HEAP16[$4 >> 1] | 0;
 if ($5 << 16 >> 16 <= 0) return;
 $13 = $2 + 20 | 0;
 $$02425 = 0;
 $$026 = (HEAP32[$2 + 24 >> 2] | 0) + ((Math_imul($5 << 16 >> 16, $3) | 0) / 2 | 0) | 0;
 while (1) {
  $15 = HEAP8[$$026 >> 0] | 0;
  $16 = $15 & 255;
  HEAP16[$0 + ($$02425 << 1) >> 1] = ($16 >>> 1 & 7) * 9;
  HEAP8[$1 + $$02425 >> 0] = HEAP8[(HEAP32[$13 >> 2] | 0) + (((HEAP16[$4 >> 1] | 0) + -1 & 0 - ($16 & 1)) + $$02425) >> 0] | 0;
  $35 = $$02425 | 1;
  HEAP16[$0 + ($35 << 1) >> 1] = (($15 & 255) >>> 5) * 9 & 255;
  HEAP8[$1 + $35 >> 0] = HEAP8[(HEAP32[$13 >> 2] | 0) + ($35 + ((HEAP16[$4 >> 1] | 0) + -1 & 0 - ($16 >>> 4 & 1))) >> 0] | 0;
  $$02425 = $$02425 + 2 | 0;
  if (($$02425 | 0) >= (HEAP16[$4 >> 1] | 0)) break; else $$026 = $$026 + 1 | 0;
 }
 return;
}

function _silk_INVERSE32_varQ_435($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$46 = 0, $10 = 0, $11 = 0, $18 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = _silk_CLZ32_434(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $8 = $7 >> 16;
 $9 = 536870911 / ($8 | 0) | 0;
 $10 = $9 << 16;
 $11 = $10 >> 16;
 $18 = 0 - (((Math_imul($7 & 65535, $11) | 0) >> 16) + (Math_imul($8, $11) | 0) << 3) | 0;
 $30 = (Math_imul(($9 >> 15) + 1 >> 1, $18) | 0) + $10 + (Math_imul($18 >> 16, $11) | 0) + ((Math_imul($18 & 65528, $11) | 0) >> 16) | 0;
 $32 = 62 - $5 - $1 | 0;
 if (($32 | 0) < 1) {
  $34 = 0 - $32 | 0;
  $35 = -2147483648 >> $34;
  $36 = 2147483647 >>> $34;
  $37 = ($35 | 0) > ($36 | 0);
  $$ = $37 ? $35 : $36;
  $$46 = $37 ? $36 : $35;
  return (($30 | 0) > ($$ | 0) ? $$ : ($30 | 0) < ($$46 | 0) ? $$46 : $30) << $34 | 0;
 } else return (($32 | 0) < 32 ? $30 >> $32 : 0) | 0;
 return 0;
}

function _frame_size_select($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$034 = 0, $$048 = 0, $$off = 0, $19 = 0, $3 = 0;
 $3 = ($2 | 0) / 400 | 0;
 if (($3 | 0) > ($0 | 0)) {
  $$034 = -1;
  return $$034 | 0;
 }
 if (($1 | 0) == 5e3) $$048 = $0; else {
  $$off = $1 + -5001 | 0;
  if ($$off >>> 0 >= 9) {
   $$034 = -1;
   return $$034 | 0;
  }
  if (($1 | 0) < 5006) $$0 = $3 << $$off; else $$0 = (Math_imul($1 + -5003 | 0, $2) | 0) / 50 | 0;
  if (($$0 | 0) > ($0 | 0)) {
   $$034 = -1;
   return $$034 | 0;
  } else $$048 = $$0;
 }
 if (!(($$048 * 100 | 0) == ($2 | 0) | (($$048 * 400 | 0) == ($2 | 0) | ($$048 * 200 | 0) == ($2 | 0)))) {
  $19 = $$048 * 50 | 0;
  if (!(($19 | 0) == ($2 * 6 | 0) | (($19 | 0) == ($2 * 5 | 0) | (($19 | 0) == ($2 << 2 | 0) | (($19 | 0) == ($2 * 3 | 0) | (($19 | 0) == ($2 | 0) | ($$048 * 25 | 0) == ($2 | 0))))))) {
   $$034 = -1;
   return $$034 | 0;
  }
 }
 $$034 = $$048;
 return $$034 | 0;
}

function _run_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$ = 0, $$03536 = 0, $$037 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0;
 $11 = $3 & -2;
 if (!$2) {
  HEAP32[$10 >> 2] = 0;
  _tonality_get_info($0, $10, $4);
  return;
 }
 $14 = ($7 * 95 | 0) / 50 | 0;
 $$ = ($14 | 0) < ($11 | 0) ? $14 : $11;
 $16 = $0 + 7440 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $$ - $17 | 0;
 if (($18 | 0) > 0) {
  $20 = ($7 | 0) / 50 | 0;
  $$03536 = $17;
  $$037 = $18;
  while (1) {
   _tonality_analysis($0, $1, $2, ($$037 | 0) > ($20 | 0) ? $20 : $$037, $$03536, $5, $6, $8, $9);
   $$037 = $$037 - $20 | 0;
   if (($$037 | 0) <= 0) break; else $$03536 = $$03536 + $20 | 0;
  }
 }
 HEAP32[$16 >> 2] = $$ - $4;
 HEAP32[$10 >> 2] = 0;
 _tonality_get_info($0, $10, $4);
 return;
}

function _limit_coefs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0202$us = 0.0, $$0216$us = 0, $$0225$us = 0, $$03$us = 0, $$1231$us = 0, $17 = 0.0, $18 = 0, label = 0;
 if (($1 | 0) <= 0) return;
 $$0216$us = 0;
 $$0225$us = 0;
 while (1) {
  $$0202$us = -1.0;
  $$03$us = 0;
  $$1231$us = $$0225$us;
  do {
   $17 = +Math_abs(+(+HEAPF32[$0 + ($$03$us << 2) >> 2]));
   $18 = $17 > $$0202$us;
   $$1231$us = $18 ? $$03$us : $$1231$us;
   $$0202$us = $18 ? $17 : $$0202$us;
   $$03$us = $$03$us + 1 | 0;
  } while (($$03$us | 0) != ($1 | 0));
  if ($$0202$us <= 3.999000072479248) {
   label = 7;
   break;
  }
  _silk_bwexpander_FLP($0, $1, .9900000095367432 - (+($$0216$us | 0) * .10000000149011612 + .800000011920929) * ($$0202$us + -3.999000072479248) / ($$0202$us * +($$1231$us + 1 | 0)));
  $$0216$us = $$0216$us + 1 | 0;
  if ($$0216$us >>> 0 >= 10) {
   label = 7;
   break;
  } else $$0225$us = $$1231$us;
 }
 if ((label | 0) == 7) return;
}

function _silk_INVERSE32_varQ_256($0) {
 $0 = $0 | 0;
 var $$ = 0, $$9 = 0, $10 = 0, $17 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = _silk_CLZ32_258(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $7 = $6 >> 16;
 $8 = 536870911 / ($7 | 0) | 0;
 $9 = $8 << 16;
 $10 = $9 >> 16;
 $17 = 0 - (((Math_imul($6 & 65535, $10) | 0) >> 16) + (Math_imul($7, $10) | 0) << 3) | 0;
 $29 = (Math_imul(($8 >> 15) + 1 >> 1, $17) | 0) + $9 + (Math_imul($17 >> 16, $10) | 0) + ((Math_imul($17 & 65528, $10) | 0) >> 16) | 0;
 $30 = 62 - $4 | 0;
 if (($30 | 0) < 47) {
  $32 = 46 - $30 | 0;
  $33 = -2147483648 >> $32;
  $34 = 2147483647 >>> $32;
  $35 = ($33 | 0) > ($34 | 0);
  $$ = $35 ? $33 : $34;
  $$9 = $35 ? $34 : $33;
  return (($29 | 0) > ($$ | 0) ? $$ : ($29 | 0) < ($$9 | 0) ? $$9 : $29) << $32 | 0;
 } else return (($30 | 0) < 78 ? $29 >> $30 + -46 : 0) | 0;
 return 0;
}

function _silk_INVERSE32_varQ_244($0) {
 $0 = $0 | 0;
 var $$ = 0, $$9 = 0, $10 = 0, $17 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = _silk_CLZ32_246(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $7 = $6 >> 16;
 $8 = 536870911 / ($7 | 0) | 0;
 $9 = $8 << 16;
 $10 = $9 >> 16;
 $17 = 0 - (((Math_imul($6 & 65535, $10) | 0) >> 16) + (Math_imul($7, $10) | 0) << 3) | 0;
 $29 = (Math_imul(($8 >> 15) + 1 >> 1, $17) | 0) + $9 + (Math_imul($17 >> 16, $10) | 0) + ((Math_imul($17 & 65528, $10) | 0) >> 16) | 0;
 $30 = 62 - $4 | 0;
 if (($30 | 0) < 48) {
  $32 = 47 - $30 | 0;
  $33 = -2147483648 >> $32;
  $34 = 2147483647 >>> $32;
  $35 = ($33 | 0) > ($34 | 0);
  $$ = $35 ? $33 : $34;
  $$9 = $35 ? $34 : $33;
  return (($29 | 0) > ($$ | 0) ? $$ : ($29 | 0) < ($$9 | 0) ? $$9 : $29) << $32 | 0;
 } else return (($30 | 0) < 79 ? $29 >> $30 + -47 : 0) | 0;
 return 0;
}

function _silk_INVERSE32_varQ_235($0) {
 $0 = $0 | 0;
 var $$ = 0, $$9 = 0, $10 = 0, $17 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = _silk_CLZ32_237(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $7 = $6 >> 16;
 $8 = 536870911 / ($7 | 0) | 0;
 $9 = $8 << 16;
 $10 = $9 >> 16;
 $17 = 0 - (((Math_imul($6 & 65535, $10) | 0) >> 16) + (Math_imul($7, $10) | 0) << 3) | 0;
 $29 = (Math_imul(($8 >> 15) + 1 >> 1, $17) | 0) + $9 + (Math_imul($17 >> 16, $10) | 0) + ((Math_imul($17 & 65528, $10) | 0) >> 16) | 0;
 $30 = 62 - $4 | 0;
 if (($30 | 0) < 48) {
  $32 = 47 - $30 | 0;
  $33 = -2147483648 >> $32;
  $34 = 2147483647 >>> $32;
  $35 = ($33 | 0) > ($34 | 0);
  $$ = $35 ? $33 : $34;
  $$9 = $35 ? $34 : $33;
  return (($29 | 0) > ($$ | 0) ? $$ : ($29 | 0) < ($$9 | 0) ? $$9 : $29) << $32 | 0;
 } else return (($30 | 0) < 79 ? $29 >> $30 + -47 : 0) | 0;
 return 0;
}

function _silk_INVERSE32_varQ($0) {
 $0 = $0 | 0;
 var $$ = 0, $$9 = 0, $10 = 0, $17 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = _silk_CLZ32_183(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $7 = $6 >> 16;
 $8 = 536870911 / ($7 | 0) | 0;
 $9 = $8 << 16;
 $10 = $9 >> 16;
 $17 = 0 - (((Math_imul($6 & 65535, $10) | 0) >> 16) + (Math_imul($7, $10) | 0) << 3) | 0;
 $29 = (Math_imul(($8 >> 15) + 1 >> 1, $17) | 0) + $9 + (Math_imul($17 >> 16, $10) | 0) + ((Math_imul($17 & 65528, $10) | 0) >> 16) | 0;
 $30 = 62 - $4 | 0;
 if (($30 | 0) < 48) {
  $32 = 47 - $30 | 0;
  $33 = -2147483648 >> $32;
  $34 = 2147483647 >>> $32;
  $35 = ($33 | 0) > ($34 | 0);
  $$ = $35 ? $33 : $34;
  $$9 = $35 ? $34 : $33;
  return (($29 | 0) > ($$ | 0) ? $$ : ($29 | 0) < ($$9 | 0) ? $$9 : $29) << $32 | 0;
 } else return (($30 | 0) < 79 ? $29 >> $30 + -47 : 0) | 0;
 return 0;
}

function _silk_LPC_analysis_filter8_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$024 = 0, $10 = 0, $11 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) <= 8) return;
 $5 = $1 + 4 | 0;
 $6 = $1 + 8 | 0;
 $7 = $1 + 12 | 0;
 $8 = $1 + 16 | 0;
 $9 = $1 + 20 | 0;
 $10 = $1 + 24 | 0;
 $11 = $1 + 28 | 0;
 $$024 = 8;
 do {
  $13 = $2 + ($$024 + -1 << 2) | 0;
  HEAPF32[$0 + ($$024 << 2) >> 2] = +HEAPF32[$2 + ($$024 << 2) >> 2] - (+HEAPF32[$13 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$13 + -4 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$13 + -8 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$13 + -12 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$13 + -16 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$13 + -20 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$13 + -24 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$13 + -28 >> 2] * +HEAPF32[$11 >> 2]);
  $$024 = $$024 + 1 | 0;
 } while (($$024 | 0) != ($3 | 0));
 return;
}

function _silk_k2a_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02627 = 0, $$028 = 0, $10 = 0, $11 = 0.0, $13 = 0, $14 = 0.0, $4 = 0, $6 = 0.0, $9 = 0, $indvars$iv = 0, $$028$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$028 = 0;
 $indvars$iv = 1;
 while (1) {
  $4 = $indvars$iv >>> 1;
  $6 = +HEAPF32[$1 + ($$028 << 2) >> 2];
  $$028$looptemp = $$028;
  $$028 = $$028 + 1 | 0;
  if ($$028 & 2147483646 | 0) {
   $9 = $$028$looptemp + -1 | 0;
   $$02627 = 0;
   do {
    $10 = $0 + ($$02627 << 2) | 0;
    $11 = +HEAPF32[$10 >> 2];
    $13 = $0 + ($9 - $$02627 << 2) | 0;
    $14 = +HEAPF32[$13 >> 2];
    HEAPF32[$10 >> 2] = $11 + $6 * $14;
    HEAPF32[$13 >> 2] = $14 + $6 * $11;
    $$02627 = $$02627 + 1 | 0;
   } while (($$02627 | 0) != ($4 | 0));
  }
  HEAPF32[$0 + ($$028$looptemp << 2) >> 2] = -$6;
  if (($$028 | 0) == ($2 | 0)) break; else $indvars$iv = $indvars$iv + 1 | 0;
 }
 return;
}

function _silk_gains_dequant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$025 = 0, $$sink26 = 0, $10 = 0, $15 = 0, $17 = 0, $23 = 0, $27 = 0;
 if (($4 | 0) <= 0) return;
 $$025 = 0;
 do {
  $10 = HEAP8[$1 + $$025 >> 0] | 0;
  do if (!($$025 | $3)) $$sink26 = _silk_max_int($10, (HEAP8[$2 >> 0] | 0) + -16 | 0) | 0; else {
   $15 = $10 + -4 | 0;
   $17 = HEAP8[$2 >> 0] | 0;
   if (($15 | 0) > ($17 + 8 | 0)) {
    $$sink26 = ($15 << 1) + 248 | 0;
    break;
   } else {
    $$sink26 = $15 + $17 | 0;
    break;
   }
  } while (0);
  $23 = $$sink26 & 255;
  $27 = $23 << 24 >> 24 > 63 ? 63 : $23 << 24 >> 24 > 0 ? $$sink26 & 255 : 0;
  HEAP8[$2 >> 0] = $27;
  HEAP32[$0 + ($$025 << 2) >> 2] = _silk_log2lin(_silk_min_32(($27 * 29 | 0) + 2090 + (($27 * 7281 | 0) >>> 16) | 0) | 0) | 0;
  $$025 = $$025 + 1 | 0;
 } while (($$025 | 0) != ($4 | 0));
 return;
}

function _silk_scale_copy_vector_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$032 = 0, $$131 = 0, $10 = 0, $15 = 0, $20 = 0, $4 = 0;
 $4 = $3 & 65532;
 if (!$4) $$0$lcssa = 0; else {
  $$032 = 0;
  do {
   HEAPF32[$0 + ($$032 << 2) >> 2] = +HEAPF32[$1 + ($$032 << 2) >> 2] * $2;
   $10 = $$032 | 1;
   HEAPF32[$0 + ($10 << 2) >> 2] = +HEAPF32[$1 + ($10 << 2) >> 2] * $2;
   $15 = $$032 | 2;
   HEAPF32[$0 + ($15 << 2) >> 2] = +HEAPF32[$1 + ($15 << 2) >> 2] * $2;
   $20 = $$032 | 3;
   HEAPF32[$0 + ($20 << 2) >> 2] = +HEAPF32[$1 + ($20 << 2) >> 2] * $2;
   $$032 = $$032 + 4 | 0;
  } while ($$032 >>> 0 < $4 >>> 0);
  $$0$lcssa = $4;
 }
 if (($$0$lcssa | 0) >= ($3 | 0)) return;
 $$131 = $$0$lcssa;
 do {
  HEAPF32[$0 + ($$131 << 2) >> 2] = +HEAPF32[$1 + ($$131 << 2) >> 2] * $2;
  $$131 = $$131 + 1 | 0;
 } while (($$131 | 0) != ($3 | 0));
 return;
}

function _unquant_fine_energy($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$018 = 0, $$019 = 0, $10 = 0, $12 = 0, $15 = 0.0, $26 = 0, $29 = 0, $8 = 0, $9 = 0;
 if (($1 | 0) >= ($2 | 0)) return;
 $8 = $0 + 8 | 0;
 $$019 = $1;
 do {
  $9 = $4 + ($$019 << 2) | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  L6 : do if (($10 | 0) >= 1) {
   $$018 = 0;
   $12 = $10;
   while (1) {
    $15 = +(_ec_dec_bits($5, $12) | 0) + .5;
    $26 = $3 + ((Math_imul(HEAP32[$8 >> 2] | 0, $$018) | 0) + $$019 << 2) | 0;
    HEAPF32[$26 >> 2] = +HEAPF32[$26 >> 2] + ($15 * +(1 << 14 - (HEAP32[$9 >> 2] | 0) | 0) * .00006103515625 + -.5);
    $29 = $$018 + 1 | 0;
    if (($29 | 0) >= ($6 | 0)) break L6;
    $$018 = $29;
    $12 = HEAP32[$9 >> 2] | 0;
   }
  } while (0);
  $$019 = $$019 + 1 | 0;
 } while (($$019 | 0) != ($2 | 0));
 return;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $6 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[36912 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 4;
   break;
  }
  $6 = $$016 + 1 | 0;
  if (($6 | 0) == 87) {
   $$115$ph = 87;
   label = 5;
   break;
  } else $$016 = $6;
 }
 if ((label | 0) == 4) if (!$$016) $$012$lcssa = 37008; else {
  $$115$ph = $$016;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$01214 = 37008;
  $$115 = $$115$ph;
  while (1) {
   $$113 = $$01214;
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0;
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0;
   if (!$$115) {
    $$012$lcssa = $$113;
    break;
   } else $$01214 = $$113;
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}

function _median_of_5($0) {
 $0 = $0 | 0;
 var $$ = 0.0, $$0 = 0.0, $$043 = 0.0, $$044 = 0.0, $$1 = 0.0, $$145 = 0.0, $$147 = 0.0, $$48 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $5 = 0.0, $6 = 0, $8 = 0.0;
 $2 = +HEAPF32[$0 + 8 >> 2];
 $3 = +HEAPF32[$0 >> 2];
 $5 = +HEAPF32[$0 + 4 >> 2];
 $6 = $3 > $5;
 $$ = $6 ? $3 : $5;
 $$48 = $6 ? $5 : $3;
 $8 = +HEAPF32[$0 + 12 >> 2];
 $10 = +HEAPF32[$0 + 16 >> 2];
 $11 = $8 > $10;
 $$044 = $11 ? $10 : $8;
 $$043 = $11 ? $8 : $10;
 $12 = $$48 > $$044;
 $$147 = $12 ? $$043 : $$;
 $$145 = $12 ? $$48 : $$044;
 $$1 = $12 ? $$ : $$043;
 if ($2 > $$147) if ($$147 < $$145) {
  $$0 = $2 < $$145 ? $2 : $$145;
  return +$$0;
 } else {
  $$0 = $$1 < $$147 ? $$1 : $$147;
  return +$$0;
 } else if ($2 < $$145) {
  $$0 = $$147 < $$145 ? $$147 : $$145;
  return +$$0;
 } else {
  $$0 = $2 < $$1 ? $2 : $$1;
  return +$$0;
 }
 return +(0.0);
}

function _compute_equiv_rate($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$1 = 0, $$2 = 0, $$3 = 0, $11 = 0, $18 = 0, $spec$select = 0;
 $11 = Math_imul(($1 * 40 | 0) + 20 | 0, $2 + -50 | 0) | 0;
 $spec$select = $0 - (($2 | 0) > 50 ? $11 : 0) | 0;
 if (!$3) $$1 = $spec$select - (($spec$select | 0) / 12 | 0) | 0; else $$1 = $spec$select;
 $18 = (Math_imul($$1, $5 + 90 | 0) | 0) / 100 | 0;
 if (($4 | 1 | 0) == 1001) {
  $$2 = ($5 | 0) < 2 ? ($18 << 2 | 0) / 5 | 0 : $18;
  $$3 = $$2 - ((Math_imul($$2, $6) | 0) / (($6 * 6 | 0) + 10 | 0) | 0) | 0;
  return $$3 | 0;
 }
 if (($4 | 0) != 1002) {
  $$3 = $18 - ((Math_imul($18, $6) | 0) / (($6 * 12 | 0) + 20 | 0) | 0) | 0;
  return $$3 | 0;
 }
 if (($5 | 0) >= 5) {
  $$3 = $18;
  return $$3 | 0;
 }
 $$3 = ($18 * 9 | 0) / 10 | 0;
 return $$3 | 0;
}

function _silk_scale_vector_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$022 = 0, $$121 = 0, $13 = 0, $17 = 0, $23 = 0, $3 = 0, $5 = 0, $9 = 0;
 $3 = $2 & 65532;
 if (!$3) $$0$lcssa = 0; else {
  $$022 = 0;
  do {
   $5 = $0 + ($$022 << 2) | 0;
   HEAPF32[$5 >> 2] = +HEAPF32[$5 >> 2] * $1;
   $9 = $0 + (($$022 | 1) << 2) | 0;
   HEAPF32[$9 >> 2] = +HEAPF32[$9 >> 2] * $1;
   $13 = $0 + (($$022 | 2) << 2) | 0;
   HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] * $1;
   $17 = $0 + (($$022 | 3) << 2) | 0;
   HEAPF32[$17 >> 2] = +HEAPF32[$17 >> 2] * $1;
   $$022 = $$022 + 4 | 0;
  } while ($$022 >>> 0 < $3 >>> 0);
  $$0$lcssa = $3;
 }
 if (($$0$lcssa | 0) >= ($2 | 0)) return;
 $$121 = $$0$lcssa;
 do {
  $23 = $0 + ($$121 << 2) | 0;
  HEAPF32[$23 >> 2] = +HEAPF32[$23 >> 2] * $1;
  $$121 = $$121 + 1 | 0;
 } while (($$121 | 0) != ($2 | 0));
 return;
}

function _opus_custom_encoder_init_arch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ($1 >>> 0 > 2) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$0) {
  $$0 = -7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _memset($0 | 0, 0, _opus_custom_encoder_get_size(120, 21, $1) | 0) | 0;
 HEAP32[$0 >> 2] = 38816;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = 1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 21;
 HEAP32[$0 + 48 >> 2] = 1;
 HEAP32[$0 + 72 >> 2] = $2;
 HEAP32[$0 + 52 >> 2] = 1;
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 40 >> 2] = -1;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 5;
 HEAP32[$0 + 60 >> 2] = 24;
 _opus_custom_encoder_ctl($0, 4028, sp) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_process_NLSFs_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01112 = 0, $$01112$1 = 0, $14 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp;
 _silk_process_NLSFs($0, $4, $2, $3);
 $5 = $0 + 4640 | 0;
 if ((HEAP32[$5 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $$01112 = 0;
 do {
  HEAPF32[$1 + ($$01112 << 2) >> 2] = +(HEAP16[$4 + ($$01112 << 1) >> 1] | 0) * .000244140625;
  $$01112 = $$01112 + 1 | 0;
  $14 = HEAP32[$5 >> 2] | 0;
 } while (($$01112 | 0) < ($14 | 0));
 if (($14 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $$01112$1 = 0;
 do {
  HEAPF32[$1 + 64 + ($$01112$1 << 2) >> 2] = +(HEAP16[$4 + 32 + ($$01112$1 << 1) >> 1] | 0) * .000244140625;
  $$01112$1 = $$01112$1 + 1 | 0;
 } while (($$01112$1 | 0) < (HEAP32[$5 >> 2] | 0));
 STACKTOP = sp;
 return;
}

function _dual_inner_prod_c_119($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0.0, $$015$lcssa = 0.0, $$01518 = 0.0, $$01617 = 0, $$019 = 0.0, $12 = 0.0, $16 = 0.0, $8 = 0.0;
 if (($3 | 0) <= 0) {
  $$0$lcssa = 0.0;
  $$015$lcssa = 0.0;
  HEAPF32[$4 >> 2] = $$015$lcssa;
  HEAPF32[$5 >> 2] = $$0$lcssa;
  return;
 }
 $$01518 = 0.0;
 $$01617 = 0;
 $$019 = 0.0;
 while (1) {
  $8 = +HEAPF32[$0 + ($$01617 << 2) >> 2];
  $12 = $$01518 + $8 * +HEAPF32[$1 + ($$01617 << 2) >> 2];
  $16 = $$019 + $8 * +HEAPF32[$2 + ($$01617 << 2) >> 2];
  $$01617 = $$01617 + 1 | 0;
  if (($$01617 | 0) == ($3 | 0)) {
   $$0$lcssa = $16;
   $$015$lcssa = $12;
   break;
  } else {
   $$01518 = $12;
   $$019 = $16;
  }
 }
 HEAPF32[$4 >> 2] = $$015$lcssa;
 HEAPF32[$5 >> 2] = $$0$lcssa;
 return;
}

function _silk_insertion_sort_increasing_all_values_int16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01822 = 0, $$021$in = 0, $$pre$phiZ2D = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $$021$in$looptemp = 0;
 if (($1 | 0) <= 0) _celt_fatal(47377, 45567, 144);
 if (($1 | 0) == 1) return;
 $$01822 = 1;
 do {
  $5 = HEAP16[$0 + ($$01822 << 1) >> 1] | 0;
  $$021$in = $$01822;
  while (1) {
   $$021$in$looptemp = $$021$in;
   $$021$in = $$021$in + -1 | 0;
   $6 = $0 + ($$021$in << 1) | 0;
   $7 = HEAP16[$6 >> 1] | 0;
   $9 = $0 + ($$021$in$looptemp << 1) | 0;
   if ($5 << 16 >> 16 >= $7 << 16 >> 16) {
    $$pre$phiZ2D = $9;
    break;
   }
   HEAP16[$9 >> 1] = $7;
   if (($$021$in$looptemp | 0) <= 1) {
    $$pre$phiZ2D = $6;
    break;
   }
  }
  HEAP16[$$pre$phiZ2D >> 1] = $5;
  $$01822 = $$01822 + 1 | 0;
 } while (($$01822 | 0) < ($1 | 0));
 return;
}

function _dual_inner_prod_c($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$lcssa = 0.0, $$015$lcssa = 0.0, $$01518 = 0.0, $$01617 = 0, $$019 = 0.0, $12 = 0.0, $16 = 0.0, $8 = 0.0;
 if (($3 | 0) <= 0) {
  $$0$lcssa = 0.0;
  $$015$lcssa = 0.0;
  HEAPF32[$4 >> 2] = $$015$lcssa;
  HEAPF32[$5 >> 2] = $$0$lcssa;
  return;
 }
 $$01518 = 0.0;
 $$01617 = 0;
 $$019 = 0.0;
 while (1) {
  $8 = +HEAPF32[$0 + ($$01617 << 2) >> 2];
  $12 = $$01518 + $8 * +HEAPF32[$1 + ($$01617 << 2) >> 2];
  $16 = $$019 + $8 * +HEAPF32[$2 + ($$01617 << 2) >> 2];
  $$01617 = $$01617 + 1 | 0;
  if (($$01617 | 0) == ($3 | 0)) {
   $$0$lcssa = $16;
   $$015$lcssa = $12;
   break;
  } else {
   $$01518 = $12;
   $$019 = $16;
  }
 }
 HEAPF32[$4 >> 2] = $$015$lcssa;
 HEAPF32[$5 >> 2] = $$0$lcssa;
 return;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _silk_NLSF_residual_dequant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01821 = 0, $$022$in = 0, $$1 = 0, $13 = 0, $15 = 0, $17 = 0, $7 = 0, $$022$in$looptemp = 0;
 if ($4 << 16 >> 16 <= 0) return;
 $7 = $3 << 16 >> 16;
 $$01821 = 0;
 $$022$in = $4 << 16 >> 16;
 do {
  $$022$in$looptemp = $$022$in;
  $$022$in = $$022$in + -1 | 0;
  $13 = (Math_imul($$01821 << 16 >> 16, HEAPU8[$2 + $$022$in >> 0] | 0) | 0) >> 8;
  $15 = HEAP8[$1 + $$022$in >> 0] | 0;
  $17 = $15 << 24 >> 24 << 10;
  if ($15 << 24 >> 24 > 0) $$1 = $17 + -102 | 0; else $$1 = $15 << 24 >> 24 == 0 ? $17 : $17 | 102;
  $$01821 = (Math_imul($$1 >> 16, $7) | 0) + $13 + ((Math_imul($$1 & 65535, $7) | 0) >> 16) | 0;
  HEAP16[$0 + ($$022$in << 1) >> 1] = $$01821;
 } while (($$022$in$looptemp | 0) > 1);
 return;
}

function _silk_encode_do_VAD_FLP($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $10 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0;
 _silk_VAD_GetSA_Q8_c($0, $0 + 5098 | 0);
 $4 = $0 + 4532 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$1) if (($5 | 0) > 12) {
  HEAP32[$4 >> 2] = 12;
  label = 5;
 } else label = 5; else if (($5 | 0) < 13) label = 5; else {
  HEAP32[$0 + 6084 >> 2] = 0;
  HEAP32[$0 + 6080 >> 2] = 0;
  HEAP8[$0 + 4765 >> 0] = 1;
  $$sink = 1;
 }
 do if ((label | 0) == 5) {
  HEAP8[$0 + 4765 >> 0] = 0;
  $9 = $0 + 6084 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$9 >> 2] = $10 + 1;
  if (($10 | 0) >= 10) {
   if (($10 | 0) <= 29) {
    $$sink = 0;
    break;
   }
   HEAP32[$9 >> 2] = 10;
  }
  HEAP32[$0 + 6080 >> 2] = 0;
  $$sink = 0;
 } while (0);
 HEAP8[(HEAP32[$0 + 5748 >> 2] | 0) + ($0 + 4720) >> 0] = $$sink;
 return;
}

function _silk_stereo_encode_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $14 = 0, $20 = 0, $23 = 0, $9 = 0;
 $9 = ((HEAP8[$1 + 2 >> 0] | 0) * 5 | 0) + (HEAP8[$1 + 5 >> 0] | 0) | 0;
 if (($9 | 0) >= 25) _celt_fatal(45579, 45604, 44);
 _ec_enc_icdf($0, $9, 24864, 8);
 $11 = HEAP8[$1 >> 0] | 0;
 if ($11 << 24 >> 24 >= 3) _celt_fatal(45630, 45604, 47);
 $14 = $1 + 1 | 0;
 if ((HEAP8[$14 >> 0] | 0) >= 5) _celt_fatal(45665, 45604, 48);
 _ec_enc_icdf($0, $11 << 24 >> 24, 43942, 8);
 _ec_enc_icdf($0, HEAP8[$14 >> 0] | 0, 43949, 8);
 $20 = HEAP8[$1 + 3 >> 0] | 0;
 if ($20 << 24 >> 24 >= 3) _celt_fatal(45630, 45604, 47);
 $23 = $1 + 4 | 0;
 if ((HEAP8[$23 >> 0] | 0) < 5) {
  _ec_enc_icdf($0, $20 << 24 >> 24, 43942, 8);
  _ec_enc_icdf($0, HEAP8[$23 >> 0] | 0, 43949, 8);
  return;
 } else _celt_fatal(45665, 45604, 48);
}

function _silk_resampler_private_AR2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$020 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $27 = 0, $6 = 0, $7 = 0;
 if (($4 | 0) <= 0) return;
 $6 = $0 + 4 | 0;
 $7 = $3 + 2 | 0;
 $$020 = 0;
 $13 = HEAP32[$0 >> 2] | 0;
 do {
  $12 = (HEAP16[$2 + ($$020 << 1) >> 1] << 8) + $13 | 0;
  HEAP32[$1 + ($$020 << 2) >> 2] = $12;
  $15 = $12 << 2;
  $17 = $15 >> 16;
  $19 = HEAP16[$3 >> 1] | 0;
  $21 = $15 & 65532;
  $13 = (Math_imul($17, $19) | 0) + (HEAP32[$6 >> 2] | 0) + ((Math_imul($21, $19) | 0) >> 16) | 0;
  HEAP32[$0 >> 2] = $13;
  $27 = HEAP16[$7 >> 1] | 0;
  HEAP32[$6 >> 2] = ((Math_imul($21, $27) | 0) >> 16) + (Math_imul($17, $27) | 0);
  $$020 = $$020 + 1 | 0;
 } while (($$020 | 0) != ($4 | 0));
 return;
}

function _silk_control_SNR($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016 = 0, $$017 = 0, $$sink = 0, $11 = 0, $13 = 0, $19 = 0, $7 = 0;
 HEAP32[$0 + 4608 >> 2] = $1;
 $7 = HEAP32[$0 + 4576 >> 2] | 0;
 if ((HEAP32[$0 + 4580 >> 2] | 0) == 2) $$017 = $1 + -2e3 + (($7 | 0) / -16 | 0) | 0; else $$017 = $1;
 switch ($7 | 0) {
 case 8:
  {
   $$0 = 26272;
   $$016 = 106;
   break;
  }
 case 12:
  {
   $$0 = 26384;
   $$016 = 154;
   break;
  }
 default:
  {
   $$0 = 26544;
   $$016 = 190;
  }
 }
 $11 = (($$017 + 200 | 0) / 400 | 0) + -10 | 0;
 $13 = ($11 | 0) < ($$016 | 0) ? $11 : $$016;
 if (($13 | 0) < 1) {
  $$sink = 0;
  $19 = $0 + 4716 | 0;
  HEAP32[$19 >> 2] = $$sink;
  return;
 }
 $$sink = (HEAPU8[$$0 + $13 >> 0] | 0) * 21 | 0;
 $19 = $0 + 4716 | 0;
 HEAP32[$19 >> 2] = $$sink;
 return;
}

function _init_caps($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $11 = 0, $12 = 0, $24 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $$016$looptemp = 0;
 $4 = $0 + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) <= 0) return;
 $7 = $0 + 32 | 0;
 $8 = $0 + 104 | 0;
 $11 = $3 + -1 + ($2 << 1) | 0;
 $$016 = 0;
 $24 = $5;
 do {
  $12 = HEAP32[$7 >> 2] | 0;
  $$016$looptemp = $$016;
  $$016 = $$016 + 1 | 0;
  HEAP32[$1 + ($$016$looptemp << 2) >> 2] = (Math_imul(Math_imul((HEAP16[$12 + ($$016 << 1) >> 1] | 0) - (HEAP16[$12 + ($$016$looptemp << 1) >> 1] | 0) << $2, $3) | 0, (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((Math_imul($24, $11) | 0) + $$016$looptemp) >> 0] | 0) + 64 | 0) | 0) >> 2;
  $24 = HEAP32[$4 >> 2] | 0;
 } while (($$016 | 0) < ($24 | 0));
 return;
}

function _alg_quant($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = $7 | 0;
 var $11 = 0, $12 = 0.0, $14 = 0, sp = 0;
 sp = STACKTOP;
 if (($2 | 0) <= 0) _celt_fatal(41823, 41882, 334);
 if (($1 | 0) <= 1) _celt_fatal(41892, 41882, 335);
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 + 3 << 2) | 0) + 15 & -16) | 0;
 _exp_rotation($0, $1, 1, $4, $2, $3);
 $12 = +_op_pvq_search_c($0, $11, $2, $1);
 _encode_pulses($11, $1, $2, $5);
 if (!$7) {
  $14 = _extract_collapse_mask($11, $1, $4) | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 _normalise_residual($11, $0, $1, $12, $6);
 _exp_rotation($0, $1, -1, $4, $2, $3);
 $14 = _extract_collapse_mask($11, $1, $4) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _silk_LPC_analysis_filter6_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$020 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) <= 6) return;
 $5 = $1 + 4 | 0;
 $6 = $1 + 8 | 0;
 $7 = $1 + 12 | 0;
 $8 = $1 + 16 | 0;
 $9 = $1 + 20 | 0;
 $$020 = 6;
 do {
  $11 = $2 + ($$020 + -1 << 2) | 0;
  HEAPF32[$0 + ($$020 << 2) >> 2] = +HEAPF32[$2 + ($$020 << 2) >> 2] - (+HEAPF32[$11 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$11 + -4 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$11 + -8 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$11 + -12 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$11 + -16 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$11 + -20 >> 2] * +HEAPF32[$9 >> 2]);
  $$020 = $$020 + 1 | 0;
 } while (($$020 | 0) != ($3 | 0));
 return;
}

function _smooth_fade($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$02628$us = 0, $$027$us = 0, $12 = 0.0, $13 = 0.0, $15 = 0, $7 = 0;
 $7 = 48e3 / ($6 | 0) | 0;
 if (!(($4 | 0) > 0 & ($3 | 0) > 0)) return;
 $$02628$us = 0;
 do {
  $$027$us = 0;
  do {
   $12 = +HEAPF32[$5 + ((Math_imul($$027$us, $7) | 0) << 2) >> 2];
   $13 = $12 * $12;
   $15 = (Math_imul($$027$us, $4) | 0) + $$02628$us | 0;
   HEAPF32[$2 + ($15 << 2) >> 2] = $13 * +HEAPF32[$1 + ($15 << 2) >> 2] + (1.0 - $13) * +HEAPF32[$0 + ($15 << 2) >> 2];
   $$027$us = $$027$us + 1 | 0;
  } while (($$027$us | 0) != ($3 | 0));
  $$02628$us = $$02628$us + 1 | 0;
 } while (($$02628$us | 0) != ($4 | 0));
 return;
}

function _haar1($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02627$us = 0, $$028$us = 0, $11 = 0.0, $16 = 0, $18 = 0.0, $3 = 0, $6 = 0, $9 = 0;
 $3 = $1 >> 1;
 if (($2 | 0) <= 0) return;
 $6 = $2 << 1;
 if (($1 | 0) <= 1) return;
 $$028$us = 0;
 do {
  $$02627$us = 0;
  do {
   $9 = $0 + ((Math_imul($6, $$02627$us) | 0) + $$028$us << 2) | 0;
   $11 = +HEAPF32[$9 >> 2] * .7071067690849304;
   $16 = $0 + ((Math_imul($$02627$us << 1 | 1, $2) | 0) + $$028$us << 2) | 0;
   $18 = +HEAPF32[$16 >> 2] * .7071067690849304;
   HEAPF32[$9 >> 2] = $11 + $18;
   HEAPF32[$16 >> 2] = $11 - $18;
   $$02627$us = $$02627$us + 1 | 0;
  } while (($$02627$us | 0) < ($3 | 0));
  $$028$us = $$028$us + 1 | 0;
 } while (($$028$us | 0) != ($2 | 0));
 return;
}

function _ec_enc_carry_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0;
 if (($1 | 0) == 255) {
  $24 = $0 + 36 | 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  return;
 }
 $3 = $1 >> 8;
 $4 = $0 + 40 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $0 + 44 | 0;
 if (($5 | 0) > -1) {
  $9 = _ec_write_byte($0, $5 + $3 | 0) | 0;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | $9;
 }
 $12 = $0 + 36 | 0;
 if (HEAP32[$12 >> 2] | 0) {
  $16 = $3 + 255 & 255;
  do {
   $17 = _ec_write_byte($0, $16) | 0;
   HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | $17;
   $21 = (HEAP32[$12 >> 2] | 0) + -1 | 0;
   HEAP32[$12 >> 2] = $21;
  } while (($21 | 0) != 0);
 }
 HEAP32[$4 >> 2] = $1 & 255;
 return;
}

function _silk_bwexpander($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01415 = 0, $$016 = 0, $18 = 0, $20 = 0, $3 = 0, $4 = 0, $6 = 0;
 $3 = $2 + -65536 | 0;
 $4 = $1 + -1 | 0;
 if (($1 | 0) > 1) {
  $$01415 = 0;
  $$016 = $2;
  while (1) {
   $6 = $0 + ($$01415 << 1) | 0;
   HEAP16[$6 >> 1] = (((Math_imul($$016, HEAP16[$6 >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
   $18 = (((Math_imul($$016, $3) | 0) >> 15) + 1 >> 1) + $$016 | 0;
   $$01415 = $$01415 + 1 | 0;
   if (($$01415 | 0) == ($4 | 0)) {
    $$0$lcssa = $18;
    break;
   } else $$016 = $18;
  }
 } else $$0$lcssa = $2;
 $20 = $0 + ($4 << 1) | 0;
 HEAP16[$20 >> 1] = (((Math_imul($$0$lcssa, HEAP16[$20 >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
 return;
}

function _silk_LP_variable_cutoff($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = $0 + 12 | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $8 = $0 + 8 | 0;
 $11 = 262144 - (HEAP32[$8 >> 2] << 10) | 0;
 _silk_LP_interpolate_filter_taps($3, $4, $11 >> 16, $11 & 64512);
 $16 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
 $spec$select = ($16 | 0) > 0 ? $16 : 0;
 HEAP32[$8 >> 2] = ($spec$select | 0) < 256 ? $spec$select : 256;
 _silk_biquad_alt_stride1($1, $3, HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] | 0, $0, $1, $2);
 STACKTOP = sp;
 return;
}

function _ec_enc_patch_initial_bits($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $30 = 0, $4 = 0, $7 = 0;
 if ($2 >>> 0 >= 9) _celt_fatal(41114, 41074, 217);
 $4 = 8 - $2 | 0;
 $7 = (1 << $2) + -1 << $4;
 if (HEAP32[$0 + 24 >> 2] | 0) {
  $11 = HEAP32[$0 >> 2] | 0;
  HEAP8[$11 >> 0] = ($7 ^ 255) & (HEAPU8[$11 >> 0] | 0) | $1 << $4;
  return;
 }
 $19 = $0 + 40 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) > -1) {
  HEAP32[$19 >> 2] = $20 & ~$7 | $1 << $4;
  return;
 }
 if ((HEAP32[$0 + 28 >> 2] | 0) >>> 0 > -2147483648 >>> $2 >>> 0) {
  HEAP32[$0 + 44 >> 2] = -1;
  return;
 } else {
  $30 = $0 + 32 | 0;
  HEAP32[$30 >> 2] = HEAP32[$30 >> 2] & ~($7 << 23) | $1 << $4 + 23;
  return;
 }
}

function _opus_fft_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$018 = 0, $$sroa$2$0$copyload = 0.0, $4 = 0.0, $8 = 0;
 $4 = +HEAPF32[$0 + 4 >> 2];
 if (($1 | 0) == ($2 | 0)) _celt_fatal(41244, 41228, 580);
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  _opus_fft_impl($0, $2);
  return;
 }
 $8 = $0 + 44 | 0;
 $$018 = 0;
 do {
  $$sroa$2$0$copyload = +HEAPF32[$1 + ($$018 << 3) + 4 >> 2];
  HEAPF32[$2 + (HEAP16[(HEAP32[$8 >> 2] | 0) + ($$018 << 1) >> 1] << 3) >> 2] = $4 * +HEAPF32[$1 + ($$018 << 3) >> 2];
  HEAPF32[$2 + (HEAP16[(HEAP32[$8 >> 2] | 0) + ($$018 << 1) >> 1] << 3) + 4 >> 2] = $4 * $$sroa$2$0$copyload;
  $$018 = $$018 + 1 | 0;
 } while (($$018 | 0) < (HEAP32[$0 >> 2] | 0));
 _opus_fft_impl($0, $2);
 return;
}

function _ec_dec_bits($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $$122 = 0, $10 = 0, $2 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ($5 >>> 0 < $1 >>> 0) {
  $10 = (($5 | 0) > 17 ? $5 : 17) + 7 - $5 & -8;
  $$0 = $3;
  $$021 = $5;
  while (1) {
   $$0 = (_ec_read_byte_from_end($0) | 0) << $$021 | $$0;
   if (($$021 | 0) >= 17) break; else $$021 = $$021 + 8 | 0;
  }
  $$1 = $$0;
  $$122 = $5 + $10 + 8 | 0;
 } else {
  $$1 = $3;
  $$122 = $5;
 }
 HEAP32[$2 >> 2] = $$1 >>> $1;
 HEAP32[$4 >> 2] = $$122 - $1;
 $23 = $0 + 20 | 0;
 HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $1;
 return $$1 & (1 << $1) + -1 | 0;
}

function _opus_custom_decoder_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ($1 >>> 0 > 2) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$0) {
  $$0 = -7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _memset($0 | 0, 0, _opus_custom_decoder_get_size(120, 21, $1) | 0) | 0;
 HEAP32[$0 >> 2] = 38816;
 HEAP32[$0 + 4 >> 2] = 120;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 21;
 HEAP32[$0 + 28 >> 2] = 1;
 HEAP32[$0 + 32 >> 2] = ($1 | 0) == 1 & 1;
 HEAP32[$0 + 36 >> 2] = 0;
 _opus_custom_decoder_ctl($0, 4028, sp) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_VAD_Init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0;
 stop = dest + 60 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 92 >> 2] = 50;
 HEAP32[$0 + 96 >> 2] = 25;
 HEAP32[$0 + 100 >> 2] = 16;
 HEAP32[$0 + 104 >> 2] = 12;
 HEAP32[$0 + 60 >> 2] = 5e3;
 HEAP32[$0 + 76 >> 2] = 429496;
 HEAP32[$0 + 64 >> 2] = 2500;
 HEAP32[$0 + 80 >> 2] = 858993;
 HEAP32[$0 + 68 >> 2] = 1600;
 HEAP32[$0 + 84 >> 2] = 1342177;
 HEAP32[$0 + 72 >> 2] = 1200;
 HEAP32[$0 + 88 >> 2] = 1789569;
 HEAP32[$0 + 108 >> 2] = 15;
 HEAP32[$0 + 40 >> 2] = 25600;
 HEAP32[$0 + 44 >> 2] = 25600;
 HEAP32[$0 + 48 >> 2] = 25600;
 HEAP32[$0 + 52 >> 2] = 25600;
 return;
}

function _ec_enc_icdf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $storemerge = 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 >>> $3;
 if (($1 | 0) > 0) {
  $9 = $2 + ($1 + -1) | 0;
  $12 = Math_imul($6, HEAPU8[$9 >> 0] | 0) | 0;
  $13 = $0 + 32 | 0;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $5 - $12;
  $storemerge = Math_imul((HEAPU8[$9 >> 0] | 0) - (HEAPU8[$2 + $1 >> 0] | 0) | 0, $6) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $storemerge = $5 - (Math_imul($6, HEAPU8[$2 + $1 >> 0] | 0) | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _compute_func($0, $$0$0$val, $$0$1$val) {
 $0 = +$0;
 $$0$0$val = $$0$0$val | 0;
 $$0$1$val = $$0$1$val | 0;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $18 = 0.0, $2 = 0.0, $21 = 0.0, $4 = 0, $6 = 0.0, $7 = 0.0, $9 = 0.0;
 $2 = +($$0$1$val | 0) * $0;
 $4 = ~~+Math_floor(+$2);
 $6 = $2 - +($4 | 0);
 $7 = $6;
 $9 = $6 * $6;
 $11 = $6 * $9;
 $12 = $11 * .1666666667;
 $13 = $12 - $7 * .1666666667;
 $15 = $9 * .5;
 $18 = $15 + $7 - $11 * .5;
 $21 = $15 - $7 * .3333333333 - $12;
 return +($21 * +HEAPF64[$$0$0$val + ($4 << 3) >> 3] + (1.0 - $13 - $18 - $21) * +HEAPF64[$$0$0$val + ($4 + 1 << 3) >> 3] + $18 * +HEAPF64[$$0$0$val + ($4 + 2 << 3) >> 3] + $13 * +HEAPF64[$$0$0$val + ($4 + 3 << 3) >> 3]);
}

function _silk_CNG_exc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014$lcssa = 0, $$01417 = 0, $$01516 = 0, $6 = 0, $9 = 0;
 $$0 = 255;
 while (1) if (($$0 | 0) > ($2 | 0)) $$0 = $$0 >> 1; else break;
 $6 = HEAP32[$3 >> 2] | 0;
 if (($2 | 0) <= 0) {
  $$014$lcssa = $6;
  HEAP32[$3 >> 2] = $$014$lcssa;
  return;
 }
 $$01417 = $6;
 $$01516 = 0;
 while (1) {
  $9 = (Math_imul($$01417, 196314165) | 0) + 907633515 | 0;
  HEAP32[$0 + ($$01516 << 2) >> 2] = HEAP32[$1 + (($9 >> 24 & $$0) << 2) >> 2];
  $$01516 = $$01516 + 1 | 0;
  if (($$01516 | 0) == ($2 | 0)) {
   $$014$lcssa = $9;
   break;
  } else $$01417 = $9;
 }
 HEAP32[$3 >> 2] = $$014$lcssa;
 return;
}

function _gen_toc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$021$in = 0, $$022$lcssa = 0, $$02223 = 0, $$024 = 0, $13 = 0;
 if (($1 | 0) < 400) {
  $$02223 = 0;
  $$024 = $1;
  do {
   $$024 = $$024 << 1;
   $$02223 = $$02223 + 1 | 0;
  } while (($$024 | 0) < 400);
  $$022$lcssa = $$02223 << 3;
 } else $$022$lcssa = 0;
 switch ($0 | 0) {
 case 1e3:
  {
   $$021$in = $$022$lcssa + -16 | ($2 << 5) + 96 & 224;
   break;
  }
 case 1002:
  {
   $13 = $2 + -1102 | 0;
   $$021$in = (($13 | 0) > 0 ? $13 : 0) << 5 & 96 | $$022$lcssa | 128;
   break;
  }
 default:
  $$021$in = $2 << 4 | $$022$lcssa + 240 | 96;
 }
 return ($$021$in | (($3 | 0) == 2 & 1) << 2) & 255 | 0;
}

function _compute_qn($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$02324 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $26 = 0, $spec$select = 0;
 $spec$select = (($0 | 0) == 2 & ($4 | 0) != 0 ? -2 : -1) + ($0 << 1) | 0;
 $10 = _celt_sudiv((Math_imul($spec$select, $2) | 0) + $1 | 0, $spec$select) | 0;
 $12 = $1 - $3 + -32 | 0;
 $14 = ($12 | 0) < ($10 | 0) ? $12 : $10;
 $16 = ($14 | 0) < 64 ? $14 : 64;
 if (($16 | 0) < 4) {
  $$02324 = 1;
  return $$02324 | 0;
 }
 $26 = (HEAP16[176 + (($16 & 7) << 1) >> 1] >> 14 - ($16 >>> 3)) + 1 & -2;
 if (($26 | 0) < 257) {
  $$02324 = $26;
  return $$02324 | 0;
 } else _celt_fatal(39718, 39549, 669);
 return 0;
}

function _silk_LPC_analysis_filter_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (($4 | 0) > ($3 | 0)) _celt_fatal(46399, 46433, 218);
 switch ($4 | 0) {
 case 6:
  {
   _silk_LPC_analysis_filter6_FLP($0, $1, $2, $3);
   break;
  }
 case 8:
  {
   _silk_LPC_analysis_filter8_FLP($0, $1, $2, $3);
   break;
  }
 case 10:
  {
   _silk_LPC_analysis_filter10_FLP($0, $1, $2, $3);
   break;
  }
 case 12:
  {
   _silk_LPC_analysis_filter12_FLP($0, $1, $2, $3);
   break;
  }
 case 16:
  {
   _silk_LPC_analysis_filter16_FLP($0, $1, $2, $3);
   break;
  }
 default:
  _celt_fatal(47580, 46433, 242);
 }
 _memset($0 | 0, 0, $4 << 2 | 0) | 0;
 return;
}

function _fast_atan2f_756($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0.0, $26 = 0.0, $3 = 0.0;
 $2 = $1 * $1;
 $3 = $0 * $0;
 if ($3 + $2 < 1.000000045813705e-18) {
  $$0 = 0.0;
  return +$$0;
 }
 if ($2 < $3) {
  $$0 = ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + -($0 * $1 * ($3 + $2 * .43157973885536194)) / (($3 + $2 * .6784840226173401) * ($3 + $2 * .0859554186463356));
  return +$$0;
 } else {
  $26 = $0 * $1;
  $$0 = ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + $26 * ($2 + $3 * .43157973885536194) / (($2 + $3 * .6784840226173401) * ($2 + $3 * .0859554186463356)) - ($26 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 }
 return +(0.0);
}

function _fast_atan2f($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0.0, $26 = 0.0, $3 = 0.0;
 $2 = $1 * $1;
 $3 = $0 * $0;
 if ($3 + $2 < 1.000000045813705e-18) {
  $$0 = 0.0;
  return +$$0;
 }
 if ($2 < $3) {
  $$0 = ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + -($0 * $1 * ($3 + $2 * .43157973885536194)) / (($3 + $2 * .6784840226173401) * ($3 + $2 * .0859554186463356));
  return +$$0;
 } else {
  $26 = $0 * $1;
  $$0 = ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) + $26 * ($2 + $3 * .43157973885536194) / (($2 + $3 * .6784840226173401) * ($2 + $3 * .0859554186463356)) - ($26 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 }
 return +(0.0);
}

function _celt_maxabs16_672($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0.0, $$017$ = 0.0, $$017$lcssa = 0.0, $$01720 = 0.0, $$01819 = 0, $$021 = 0.0, $4 = 0.0, $7 = 0.0, $9 = 0.0;
 if (($1 | 0) > 0) {
  $$01720 = 0.0;
  $$01819 = 0;
  $$021 = 0.0;
  while (1) {
   $4 = +HEAPF32[$0 + ($$01819 << 2) >> 2];
   $$017$ = $$01720 > $4 ? $$01720 : $4;
   $7 = $$021 < $4 ? $$021 : $4;
   $$01819 = $$01819 + 1 | 0;
   if (($$01819 | 0) == ($1 | 0)) {
    $$0$lcssa = $7;
    $$017$lcssa = $$017$;
    break;
   } else {
    $$01720 = $$017$;
    $$021 = $7;
   }
  }
 } else {
  $$0$lcssa = 0.0;
  $$017$lcssa = 0.0;
 }
 $9 = -$$0$lcssa;
 return +($$017$lcssa > $9 ? $$017$lcssa : $9);
}

function _celt_maxabs16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0.0, $$017$ = 0.0, $$017$lcssa = 0.0, $$01720 = 0.0, $$01819 = 0, $$021 = 0.0, $4 = 0.0, $7 = 0.0, $9 = 0.0;
 if (($1 | 0) > 0) {
  $$01720 = 0.0;
  $$01819 = 0;
  $$021 = 0.0;
  while (1) {
   $4 = +HEAPF32[$0 + ($$01819 << 2) >> 2];
   $$017$ = $$01720 > $4 ? $$01720 : $4;
   $7 = $$021 < $4 ? $$021 : $4;
   $$01819 = $$01819 + 1 | 0;
   if (($$01819 | 0) == ($1 | 0)) {
    $$0$lcssa = $7;
    $$017$lcssa = $$017$;
    break;
   } else {
    $$01720 = $$017$;
    $$021 = $7;
   }
  }
 } else {
  $$0$lcssa = 0.0;
  $$017$lcssa = 0.0;
 }
 $9 = -$$0$lcssa;
 return +($$017$lcssa > $9 ? $$017$lcssa : $9);
}

function _intensity_stereo($$0$2$val, $0, $1, $2, $3, $4) {
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0, $6 = 0.0, $9 = 0.0;
 $6 = +HEAPF32[$2 + ($3 << 2) >> 2];
 $9 = +HEAPF32[$2 + ($3 + $$0$2$val << 2) >> 2];
 $15 = +Math_sqrt(+($6 * $6 + 1.0000000036274937e-15 + $9 * $9)) + 1.0000000036274937e-15;
 $16 = $6 / $15;
 $17 = $9 / $15;
 if (($4 | 0) <= 0) return;
 $$01 = 0;
 do {
  $19 = $0 + ($$01 << 2) | 0;
  HEAPF32[$19 >> 2] = $16 * +HEAPF32[$19 >> 2] + $17 * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 } while (($$01 | 0) != ($4 | 0));
 return;
}

function _ec_dec_uint($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $17 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0;
 if ($1 >>> 0 <= 1) _celt_fatal(41050, 41036, 203);
 $3 = $1 + -1 | 0;
 $5 = 32 - (Math_clz32($3 | 0) | 0) | 0;
 if (($5 | 0) <= 8) {
  $17 = _ec_decode($0, $1) | 0;
  _ec_dec_update($0, $17, $17 + 1 | 0, $1);
  $$0 = $17;
  return $$0 | 0;
 }
 $7 = $5 + -8 | 0;
 $9 = ($3 >>> $7) + 1 | 0;
 $10 = _ec_decode($0, $9) | 0;
 _ec_dec_update($0, $10, $10 + 1 | 0, $9);
 $14 = _ec_dec_bits($0, $7) | 0 | $10 << $7;
 if ($14 >>> 0 <= $3 >>> 0) {
  $$0 = $14;
  return $$0 | 0;
 }
 HEAP32[$0 + 44 >> 2] = 1;
 $$0 = $3;
 return $$0 | 0;
}

function _opus_packet_pad($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $3 = sp;
 if (($1 | 0) < 1) $$0 = -1; else if (($1 | 0) == ($2 | 0)) $$0 = 0; else if (($1 | 0) > ($2 | 0)) $$0 = -1; else {
  _opus_repacketizer_init($3) | 0;
  $9 = $0 + $2 + (0 - $1) | 0;
  _memmove($9 | 0, $0 | 0, $1 | 0) | 0;
  $10 = _opus_repacketizer_cat($3, $9, $1) | 0;
  if (!$10) {
   $14 = _opus_repacketizer_out_range_impl($3, HEAP32[$3 + 4 >> 2] | 0, $0, $2, 1) | 0;
   $$0 = ($14 | 0) < 0 ? $14 : 0;
  } else $$0 = $10;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _extract_collapse_mask($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$016 = 0, $$017 = 0, $$018 = 0, $$019 = 0, $15 = 0, $4 = 0, $5 = 0;
 if (($2 | 0) < 2) {
  $$018 = 1;
  return $$018 | 0;
 }
 $4 = _celt_udiv_162($1, $2) | 0;
 $$017 = 0;
 $$019 = 0;
 while (1) {
  $5 = Math_imul($$017, $4) | 0;
  $$0 = 0;
  $$016 = 0;
  do {
   $$0 = HEAP32[$0 + ($$016 + $5 << 2) >> 2] | $$0;
   $$016 = $$016 + 1 | 0;
  } while (($$016 | 0) < ($4 | 0));
  $15 = (($$0 | 0) != 0 & 1) << $$017 | $$019;
  $$017 = $$017 + 1 | 0;
  if (($$017 | 0) == ($2 | 0)) {
   $$018 = $15;
   break;
  } else $$019 = $15;
 }
 return $$018 | 0;
}

function _ec_dec_normalize($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $13$looptemp = 0;
 $1 = $0 + 28 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 >= 8388609) return;
 $4 = $0 + 20 | 0;
 $5 = $0 + 40 | 0;
 $6 = $0 + 32 | 0;
 $10 = $2;
 $13 = HEAP32[$5 >> 2] | 0;
 do {
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 8;
  HEAP32[$1 >> 2] = $10 << 8;
  $13$looptemp = $13;
  $13 = _ec_read_byte($0) | 0;
  HEAP32[$5 >> 2] = $13;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] << 8 & 2147483392 | ($13$looptemp << 8 | $13) >>> 1 & 255) ^ 255;
  $10 = HEAP32[$1 >> 2] | 0;
 } while ($10 >>> 0 < 8388609);
 return;
}

function _silk_A2NLSF_trans_poly($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01315 = 0, $$014 = 0, $16 = 0, $7 = 0;
 if (($1 | 0) < 2) return;
 $$01315 = 2;
 while (1) {
  if (($$01315 | 0) < ($1 | 0)) {
   $$014 = $1;
   do {
    $7 = $0 + ($$014 + -2 << 2) | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$0 + ($$014 << 2) >> 2] | 0);
    $$014 = $$014 + -1 | 0;
   } while (($$014 | 0) > ($$01315 | 0));
  }
  $16 = $0 + ($$01315 + -2 << 2) | 0;
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) - (HEAP32[$0 + ($$01315 << 2) >> 2] << 1);
  if (($$01315 | 0) == ($1 | 0)) break; else $$01315 = $$01315 + 1 | 0;
 }
 return;
}

function _special_hybrid_folding($$0$5$val, $0, $1, $2, $3, $4) {
 $$0$5$val = $$0$5$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0, $22 = 0, $25 = 0, $8 = 0;
 $8 = HEAP16[$$0$5$val + ($2 + 1 << 1) >> 1] | 0;
 $13 = Math_imul($8 - (HEAP16[$$0$5$val + ($2 << 1) >> 1] | 0) | 0, $3) | 0;
 $19 = Math_imul((HEAP16[$$0$5$val + ($2 + 2 << 1) >> 1] | 0) - $8 | 0, $3) | 0;
 $22 = ($13 << 1) - $19 | 0;
 $25 = $19 - $13 << 2;
 _memcpy($0 + ($13 << 2) | 0, $0 + ($22 << 2) | 0, $25 | 0) | 0;
 if (!$4) return;
 _memcpy($1 + ($13 << 2) | 0, $1 + ($22 << 2) | 0, $25 | 0) | 0;
 return;
}

function _ec_encode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = _celt_udiv_72($5, $3) | 0;
 if (!$1) {
  $storemerge = $5 - (Math_imul($6, $3 - $2 | 0) | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $10 = $5 - (Math_imul($6, $3 - $1 | 0) | 0) | 0;
  $11 = $0 + 32 | 0;
  HEAP32[$11 >> 2] = $10 + (HEAP32[$11 >> 2] | 0);
  $storemerge = Math_imul($6, $2 - $1 | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _ec_dec_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$pre$phiZ2D = 0, $14 = 0, $17 = 0, $5 = 0, $7 = 0, $8 = 0;
 $5 = HEAP32[$0 + 36 >> 2] | 0;
 $7 = Math_imul($5, $3 - $2 | 0) | 0;
 $8 = $0 + 32 | 0;
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - $7;
 if (!$1) {
  $14 = $0 + 28 | 0;
  $$pre$phiZ2D = $14;
  $17 = (HEAP32[$14 >> 2] | 0) - $7 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $17;
  _ec_dec_normalize($0);
  return;
 } else {
  $$pre$phiZ2D = $0 + 28 | 0;
  $17 = Math_imul($5, $2 - $1 | 0) | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $17;
  _ec_dec_normalize($0);
  return;
 }
}

function _silk_LPC_inverse_pred_gain_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $$012 = 0, $$014 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp;
 if (($1 | 0) > 0) {
  $$01113 = 0;
  $$014 = 0;
  do {
   $6 = HEAP16[$0 + ($$01113 << 1) >> 1] | 0;
   $$014 = $$014 + $6 | 0;
   HEAP32[$2 + ($$01113 << 2) >> 2] = $6 << 12;
   $$01113 = $$01113 + 1 | 0;
  } while (($$01113 | 0) != ($1 | 0));
  if (($$014 | 0) > 4095) {
   $$012 = 0;
   STACKTOP = sp;
   return $$012 | 0;
  }
 }
 $$012 = _LPC_inverse_pred_gain_QA_c($2, $1) | 0;
 STACKTOP = sp;
 return $$012 | 0;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function _user_bitrate_to_bitrate($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $10 = 0, $8 = 0;
 if (!$1) $$011 = (HEAP32[$0 + 144 >> 2] | 0) / 400 | 0; else $$011 = $1;
 $8 = HEAP32[$0 + 164 >> 2] | 0;
 switch ($8 | 0) {
 case -1e3:
  {
   $10 = HEAP32[$0 + 144 >> 2] | 0;
   $$0 = (Math_imul(HEAP32[$0 + 112 >> 2] | 0, $10) | 0) + (($10 * 60 | 0) / ($$011 | 0) | 0) | 0;
   return $$0 | 0;
  }
 case -1:
  {
   $$0 = (Math_imul($2 << 3, HEAP32[$0 + 144 >> 2] | 0) | 0) / ($$011 | 0) | 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = $8;
   return $$0 | 0;
  }
 }
 return 0;
}

function _pad_669($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $$011 = $9;
   do {
    _out($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $9 & 255;
  } else $$0$lcssa = $9;
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _decide_dtx_mode($0, $1, $2, $3, $4, $5, $6) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$014 = 0, $14 = 0;
 if ($0 < .10000000149011612 & ($6 | 0) == 0) $$014 = +_compute_frame_energy($3, $4, $5) * 316.2300109863281 <= $2 & 1; else $$014 = $6;
 if (!$$014) {
  HEAP32[$1 >> 2] = 0;
  $$0 = 0;
  return $$0 | 0;
 }
 $14 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $14 + 1;
 if (($14 | 0) <= 9) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) < 30) {
  $$0 = 1;
  return $$0 | 0;
 }
 HEAP32[$1 >> 2] = 10;
 $$0 = 0;
 return $$0 | 0;
}

function _ec_encode_bin($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $storemerge = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 >>> 15;
 if (!$1) {
  $storemerge = $4 - (Math_imul($5, 32768 - $2 | 0) | 0) | 0;
  HEAP32[$3 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $9 = $4 - (Math_imul($5, 32768 - $1 | 0) | 0) | 0;
  $10 = $0 + 32 | 0;
  HEAP32[$10 >> 2] = $9 + (HEAP32[$10 >> 2] | 0);
  $storemerge = Math_imul($5, $2 - $1 | 0) | 0;
  HEAP32[$3 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function _alg_unquant($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 var $11 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (($2 | 0) <= 0) _celt_fatal(41956, 41882, 367);
 if (($1 | 0) > 1) {
  $9 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
  _normalise_residual($9, $0, $1, +_decode_pulses($9, $1, $2, $5), $6);
  _exp_rotation($0, $1, -1, $4, $2, $3);
  $11 = _extract_collapse_mask($9, $1, $4) | 0;
  STACKTOP = sp;
  return $11 | 0;
 } else _celt_fatal(42017, 41882, 368);
 return 0;
}

function _silk_sigm_Q15($0) {
 $0 = $0 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $4 = 0;
 if (($0 | 0) < 0) {
  $2 = 0 - $0 | 0;
  if (($0 | 0) < -191) {
   $$0 = 0;
   return $$0 | 0;
  }
  $4 = $2 >> 5;
  $$0 = (HEAP32[27664 + ($4 << 2) >> 2] | 0) - (Math_imul(HEAP32[27696 + ($4 << 2) >> 2] << 16 >> 16, $2 & 31) | 0) | 0;
  return $$0 | 0;
 } else {
  if (($0 | 0) > 191) {
   $$0 = 32767;
   return $$0 | 0;
  }
  $14 = $0 >>> 5;
  $$0 = (Math_imul(HEAP32[27696 + ($14 << 2) >> 2] << 16 >> 16, $0 & 31) | 0) + (HEAP32[27728 + ($14 << 2) >> 2] | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _silk_bwexpander_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$0$lcssa = 0.0, $$011 = 0.0, $$0910 = 0, $10 = 0, $3 = 0, $5 = 0, $8 = 0.0;
 $3 = $1 + -1 | 0;
 if (($1 | 0) > 1) {
  $$011 = $2;
  $$0910 = 0;
  while (1) {
   $5 = $0 + ($$0910 << 2) | 0;
   HEAPF32[$5 >> 2] = $$011 * +HEAPF32[$5 >> 2];
   $8 = $$011 * $2;
   $$0910 = $$0910 + 1 | 0;
   if (($$0910 | 0) == ($3 | 0)) {
    $$0$lcssa = $8;
    break;
   } else $$011 = $8;
  }
 } else $$0$lcssa = $2;
 $10 = $0 + ($3 << 2) | 0;
 HEAPF32[$10 >> 2] = $$0$lcssa * +HEAPF32[$10 >> 2];
 return;
}

function _warped_gain($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0910 = 0, $$lcssa = 0.0, $12 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $7 = 0.0;
 $7 = +HEAPF32[$0 + ($2 + -1 << 2) >> 2] * $1;
 if (($2 | 0) <= 1) {
  $$lcssa = $7;
  $16 = $$lcssa + 1.0;
  $17 = 1.0 / $16;
  return +$17;
 }
 $$0910 = $2 + -2 | 0;
 $12 = $7;
 while (1) {
  $15 = (+HEAPF32[$0 + ($$0910 << 2) >> 2] - $12) * $1;
  if (($$0910 | 0) > 0) {
   $$0910 = $$0910 + -1 | 0;
   $12 = $15;
  } else {
   $$lcssa = $15;
   break;
  }
 }
 $16 = $$lcssa + 1.0;
 $17 = 1.0 / $16;
 return +$17;
}

function _silk_SQRT_APPROX_527($0) {
 $0 = $0 | 0;
 var $$08 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$08 = 0;
  STACKTOP = sp;
  return $$08 | 0;
 }
 _silk_CLZ_FRAC_528($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$08 = (Math_imul($8 >> 16, $12) | 0) + $8 + ((Math_imul($8 & 65535, $12) | 0) >> 16) | 0;
 STACKTOP = sp;
 return $$08 | 0;
}

function _silk_SQRT_APPROX_350($0) {
 $0 = $0 | 0;
 var $$08 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$08 = 0;
  STACKTOP = sp;
  return $$08 | 0;
 }
 _silk_CLZ_FRAC_351($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$08 = (Math_imul($8 >> 16, $12) | 0) + $8 + ((Math_imul($8 & 65535, $12) | 0) >> 16) | 0;
 STACKTOP = sp;
 return $$08 | 0;
}

function _silk_SQRT_APPROX_261($0) {
 $0 = $0 | 0;
 var $$08 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$08 = 0;
  STACKTOP = sp;
  return $$08 | 0;
 }
 _silk_CLZ_FRAC_262($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$08 = (Math_imul($8 >> 16, $12) | 0) + $8 + ((Math_imul($8 & 65535, $12) | 0) >> 16) | 0;
 STACKTOP = sp;
 return $$08 | 0;
}

function _silk_SQRT_APPROX($0) {
 $0 = $0 | 0;
 var $$08 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$08 = 0;
  STACKTOP = sp;
  return $$08 | 0;
 }
 _silk_CLZ_FRAC($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$08 = (Math_imul($8 >> 16, $12) | 0) + $8 + ((Math_imul($8 & 65535, $12) | 0) >> 16) | 0;
 STACKTOP = sp;
 return $$08 | 0;
}

function _opus_packet_get_samples_per_frame($$val, $0) {
 $$val = $$val | 0;
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0;
 $1 = $$val & 255;
 if ($1 & 128 | 0) {
  $$0 = ($0 << ($1 >>> 3 & 3) | 0) / 400 | 0;
  return $$0 | 0;
 }
 if (($1 & 96 | 0) == 96) if (!($1 & 8)) {
  $$0 = ($0 | 0) / 100 | 0;
  return $$0 | 0;
 } else {
  $$0 = ($0 | 0) / 50 | 0;
  return $$0 | 0;
 } else {
  $15 = $1 >>> 3 & 3;
  if (($15 | 0) == 3) {
   $$0 = ($0 * 60 | 0) / 1e3 | 0;
   return $$0 | 0;
  } else {
   $$0 = ($0 << $15 | 0) / 100 | 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _silk_interpolate($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$014 = 0, $11 = 0, $8 = 0;
 if (($3 | 0) <= -1) _celt_fatal(43517, 43549, 45);
 if (($3 | 0) >= 5) _celt_fatal(43568, 43549, 46);
 if (($4 | 0) <= 0) return;
 $8 = $3 << 16 >> 16;
 $$014 = 0;
 do {
  $11 = HEAP16[$1 + ($$014 << 1) >> 1] | 0;
  HEAP16[$0 + ($$014 << 1) >> 1] = ((Math_imul((HEAPU16[$2 + ($$014 << 1) >> 1] | 0) - $11 << 16 >> 16, $8) | 0) >>> 2) + $11;
  $$014 = $$014 + 1 | 0;
 } while (($$014 | 0) != ($4 | 0));
 return;
}

function _combine_and_check($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01213 = 0, $10 = 0, $4 = 0, label = 0;
 $$01213 = 0;
 while (1) {
  $4 = $$01213 << 1;
  $10 = (HEAP32[$1 + (($4 | 1) << 2) >> 2] | 0) + (HEAP32[$1 + ($4 << 2) >> 2] | 0) | 0;
  if (($10 | 0) > ($2 | 0)) {
   $$0 = 1;
   label = 4;
   break;
  }
  HEAP32[$0 + ($$01213 << 2) >> 2] = $10;
  $$01213 = $$01213 + 1 | 0;
  if (($$01213 | 0) >= ($3 | 0)) {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function _tansig_approx($0) {
 $0 = +$0;
 var $$019 = 0.0, $$020 = 0.0, $12 = 0.0, $14 = 0.0, $4 = 0, $9 = 0;
 if (!($0 < 8.0)) {
  $$019 = 1.0;
  return +$$019;
 }
 if (!($0 > -8.0)) {
  $$019 = -1.0;
  return +$$019;
 }
 if ($0 != $0 | 0.0 != 0.0) {
  $$019 = 0.0;
  return +$$019;
 }
 $4 = $0 < 0.0;
 $$020 = $4 ? -$0 : $0;
 $9 = ~~+Math_floor(+($$020 * 25.0 + .5));
 $12 = $$020 - +($9 | 0) * .03999999910593033;
 $14 = +HEAPF32[28992 + ($9 << 2) >> 2];
 $$019 = ($4 ? -1.0 : 1.0) * ($14 + (1.0 - $12 * $14) * ($12 * (1.0 - $14 * $14)));
 return +$$019;
}

function _multiply_frac($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0;
 $4 = ($1 >>> 0) / ($3 >>> 0) | 0;
 $6 = $1 - (Math_imul($4, $3) | 0) | 0;
 $7 = 4294967295 / ($2 >>> 0) | 0;
 if ($6 >>> 0 > $7 >>> 0 | $4 >>> 0 > $7 >>> 0) {
  $$0 = 5;
  return $$0 | 0;
 }
 $10 = Math_imul($4, $2) | 0;
 $12 = ((Math_imul($6, $2) | 0) >>> 0) / ($3 >>> 0) | 0;
 if ($10 >>> 0 > ~$12 >>> 0) {
  $$0 = 5;
  return $$0 | 0;
 }
 HEAP32[$0 >> 2] = $12 + $10;
 $$0 = 0;
 return $$0 | 0;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[36896 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function _ec_dec_icdf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$017 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $4 >>> $2;
 $$0 = -1;
 $$017 = $4;
 while (1) {
  $$0 = $$0 + 1 | 0;
  $12 = Math_imul($7, HEAPU8[$1 + $$0 >> 0] | 0) | 0;
  if ($6 >>> 0 >= $12 >>> 0) break; else $$017 = $12;
 }
 HEAP32[$5 >> 2] = $6 - $12;
 HEAP32[$3 >> 2] = $$017 - $12;
 _ec_dec_normalize($0);
 return $$0 | 0;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 if (!(_isdigit($2 << 24 >> 24) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  $12 = $1;
  $8 = $2;
  while (1) {
   $10 = ($$04 * 10 | 0) + -48 + ($8 << 24 >> 24) | 0;
   $12 = $12 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   $8 = HEAP8[$12 >> 0] | 0;
   if (!(_isdigit($8 << 24 >> 24) | 0)) {
    $$0$lcssa = $10;
    break;
   } else $$04 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _silk_inner_prod_aligned_scale($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$010 = 0, $$089 = 0, $13 = 0;
 if (($3 | 0) <= 0) {
  $$0$lcssa = 0;
  return $$0$lcssa | 0;
 }
 $$010 = 0;
 $$089 = 0;
 while (1) {
  $13 = ((Math_imul(HEAP16[$1 + ($$089 << 1) >> 1] | 0, HEAP16[$0 + ($$089 << 1) >> 1] | 0) | 0) >> $2) + $$010 | 0;
  $$089 = $$089 + 1 | 0;
  if (($$089 | 0) == ($3 | 0)) {
   $$0$lcssa = $13;
   break;
  } else $$010 = $13;
 }
 return $$0$lcssa | 0;
}

function _encode_pulses($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $5 = 0;
 if (($2 | 0) > 0) {
  $5 = _icwrs($1, $0) | 0;
  $14 = $2 + 1 | 0;
  _ec_enc_uint($3, $5, (HEAP32[(HEAP32[592 + ((($14 | 0) > ($1 | 0) ? $1 : $14) << 2) >> 2] | 0) + ((($14 | 0) < ($1 | 0) ? $1 : $14) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + ((($1 | 0) < ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) + ((($1 | 0) > ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) | 0);
  return;
 } else _celt_fatal(40954, 40977, 459);
}

function _silk_float2short_array_610($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$011$in = 0, $6 = 0, $spec$select = 0, $$011$in$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$011$in = $2;
 do {
  $$011$in$looptemp = $$011$in;
  $$011$in = $$011$in + -1 | 0;
  $6 = _lrintf(+HEAPF32[$1 + ($$011$in << 2) >> 2]) | 0;
  $spec$select = ($6 | 0) > -32768 ? $6 : -32768;
  HEAP16[$0 + ($$011$in << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
 } while (($$011$in$looptemp | 0) > 1);
 return;
}

function _silk_float2short_array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$011$in = 0, $6 = 0, $spec$select = 0, $$011$in$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$011$in = $2;
 do {
  $$011$in$looptemp = $$011$in;
  $$011$in = $$011$in + -1 | 0;
  $6 = _lrintf(+HEAPF32[$1 + ($$011$in << 2) >> 2]) | 0;
  $spec$select = ($6 | 0) > -32768 ? $6 : -32768;
  HEAP16[$0 + ($$011$in << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
 } while (($$011$in$looptemp | 0) > 1);
 return;
}

function _sinc($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $13 = 0.0, $16 = 0.0, $20 = 0.0, $5 = 0.0, $6 = 0.0, $8 = 0.0;
 $5 = $1;
 $6 = +Math_abs(+$5);
 if ($6 < 1.0e-06) {
  $$0 = $0;
  return +$$0;
 }
 $8 = +($2 | 0);
 if ($6 > $8 * .5) {
  $$0 = 0.0;
  return +$$0;
 }
 $13 = $0 * $1 * 3.141592653589793;
 $16 = +Math_sin(+$13) * $0 / $13;
 $20 = +Math_abs(+($5 * 2.0 / $8));
 $$0 = $16 * +_compute_func($20, HEAP32[$3 >> 2] | 0, HEAP32[$3 + 4 >> 2] | 0);
 return +$$0;
}

function _silk_log2lin($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pn = 0, $3 = 0, $4 = 0, $5 = 0;
 if (($0 | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) > 3966) {
  $$0 = 2147483647;
  return $$0 | 0;
 }
 $3 = $0 >>> 7;
 $4 = 1 << $3;
 $5 = $0 & 127;
 if (($0 | 0) < 2048) $$pn = ((Math_imul(Math_imul($5, -174) | 0, 128 - $5 | 0) | 0) >> 16) + $5 << $3 >> 7; else $$pn = Math_imul(((Math_imul(Math_imul($5, -174) | 0, 128 - $5 | 0) | 0) >> 16) + $5 | 0, $4 >> 7) | 0;
 $$0 = $$pn + $4 | 0;
 return $$0 | 0;
}

function _ec_dec_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $9 = 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 9;
 HEAP32[$0 + 24 >> 2] = 0;
 $9 = $0 + 28 | 0;
 HEAP32[$9 >> 2] = 128;
 $10 = _ec_read_byte($0) | 0;
 HEAP32[$0 + 40 >> 2] = $10;
 HEAP32[$0 + 32 >> 2] = (HEAP32[$9 >> 2] | 0) + ~($10 >> 1);
 HEAP32[$0 + 44 >> 2] = 0;
 _ec_dec_normalize($0);
 return;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _silk_LTP_scale_ctrl_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0, $13 = 0.0;
 if (!$2) {
  $13 = +HEAPF32[$1 + 708 >> 2] * +((HEAP32[$0 + 5744 >> 2] | 0) + (HEAP32[$0 + 4616 >> 2] | 0) | 0) * .10000000149011612;
  if ($13 > 2.0) $$sink = 2; else if ($13 < 0.0) $$sink = 0; else $$sink = ~~$13;
 } else $$sink = 0;
 HEAP8[$0 + 4769 >> 0] = $$sink;
 HEAPF32[$1 + 224 >> 2] = +(HEAP16[39500 + ($$sink << 24 >> 24 << 1) >> 1] | 0) * .00006103515625;
 return;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function _compute_redundancy_bytes($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $19 = 0, $21 = 0, $5 = 0;
 $5 = ($3 * 40 | 0) + 20 | 0;
 $10 = (((Math_imul($5, 200 - $2 | 0) | 0) + $1 | 0) * 3 | 0) / 3200 | 0;
 $19 = ((((($0 << 3) - ($5 << 1) | 0) * 240 | 0) / ((48e3 / ($2 | 0) | 0) + 240 | 0) | 0) + $5 | 0) / 8 | 0;
 $21 = ($10 | 0) < ($19 | 0) ? $10 : $19;
 return (($21 | 0) > ($3 << 3 | 4 | 0) ? (($21 | 0) < 257 ? $21 : 257) : 0) | 0;
}

function _ec_enc_normalize($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $4 = 0, $5 = 0, $7 = 0;
 $1 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 >= 8388609) return;
 $4 = $0 + 32 | 0;
 $5 = $0 + 20 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 do {
  _ec_enc_carry_out($0, $7 >>> 23);
  $7 = HEAP32[$4 >> 2] << 8 & 2147483392;
  HEAP32[$4 >> 2] = $7;
  $12 = HEAP32[$1 >> 2] << 8;
  HEAP32[$1 >> 2] = $12;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
 } while ($12 >>> 0 < 8388609);
 return;
}

function _l1_metric($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $$0$lcssa = 0.0, $$01011 = 0, $$012 = 0.0, $8 = 0.0;
 if (($1 | 0) > 0) {
  $$01011 = 0;
  $$012 = 0.0;
  while (1) {
   $8 = $$012 + +Math_abs(+(+HEAPF32[$0 + ($$01011 << 2) >> 2]));
   $$01011 = $$01011 + 1 | 0;
   if (($$01011 | 0) == ($1 | 0)) {
    $$0$lcssa = $8;
    break;
   } else $$012 = $8;
  }
 } else $$0$lcssa = 0.0;
 return +($$0$lcssa + +($2 | 0) * $3 * $$0$lcssa);
}

function _parse_size($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink = 0, $4 = 0;
 do if (($1 | 0) < 1) {
  $$0 = -1;
  $$sink = -1;
 } else {
  $4 = HEAP8[$0 >> 0] | 0;
  if (($4 & 255) < 252) {
   $$0 = 1;
   $$sink = $4 & 255;
   break;
  }
  if (($1 | 0) < 2) {
   $$0 = -1;
   $$sink = -1;
  } else {
   $$0 = 2;
   $$sink = ((HEAPU8[$0 + 1 >> 0] | 0) << 2) + ($4 & 255) & 65535;
  }
 } while (0);
 HEAP16[$2 >> 1] = $$sink;
 return $$0 | 0;
}

function _silk_A2NLSF_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp;
 if (($2 | 0) <= 0) {
  _silk_A2NLSF($0, $3, $2);
  STACKTOP = sp;
  return;
 }
 $$07 = 0;
 do {
  HEAP32[$3 + ($$07 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + ($$07 << 2) >> 2] * 65536.0) | 0;
  $$07 = $$07 + 1 | 0;
 } while (($$07 | 0) != ($2 | 0));
 _silk_A2NLSF($0, $3, $2);
 STACKTOP = sp;
 return;
}

function _isqrt32($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015 = 0, $$016 = 0, $$018 = 0, $3 = 0, $7 = 0, $8 = 0;
 $3 = 31 - (Math_clz32($0 | 0) | 0) >> 1;
 $$0 = $0;
 $$015 = $3;
 $$016 = 0;
 $$018 = 1 << $3;
 while (1) {
  $7 = ($$016 << 1) + $$018 << $$015;
  $8 = $$0 >>> 0 < $7 >>> 0;
  $$016 = ($8 ? 0 : $$018) + $$016 | 0;
  if (($$015 | 0) <= 0) break; else {
   $$0 = $$0 - ($8 ? 0 : $7) | 0;
   $$015 = $$015 + -1 | 0;
   $$018 = $$018 >>> 1;
  }
 }
 return $$016 | 0;
}

function _bitexact_log2tan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $21 = 0, $3 = 0, $5 = 0;
 $3 = 32 - (Math_clz32($1 | 0) | 0) | 0;
 $5 = 32 - (Math_clz32($0 | 0) | 0) | 0;
 $12 = $0 << 15 - $5 << 16 >> 16;
 $21 = $1 << 15 - $3 << 16 >> 16;
 return ((Math_imul(((Math_imul($12, -2597) | 0) + 16384 >> 15) + 7932 | 0, $12) | 0) + 16384 >> 15) + ($5 - $3 << 11) - ((Math_imul(((Math_imul($21, -2597) | 0) + 16384 >> 15) + 7932 | 0, $21) | 0) + 16384 >> 15) | 0;
}

function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _silk_PLC($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $4 = 0, $6 = 0;
 $4 = $0 + 2316 | 0;
 $6 = $0 + 4252 | 0;
 if ((HEAP32[$4 >> 2] | 0) != (HEAP32[$6 >> 2] | 0)) {
  _silk_PLC_Reset($0);
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 }
 if (!$3) {
  _silk_PLC_update($0, $1);
  return;
 } else {
  _silk_PLC_conceal($0, $1, $2);
  $11 = $0 + 4160 | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  return;
 }
}

function _ec_enc_uint($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $4 = 0, $6 = 0, $8 = 0;
 if ($2 >>> 0 <= 1) _celt_fatal(41050, 41074, 180);
 $4 = $2 + -1 | 0;
 $6 = 32 - (Math_clz32($4 | 0) | 0) | 0;
 if (($6 | 0) > 8) {
  $8 = $6 + -8 | 0;
  $11 = $1 >>> $8;
  _ec_encode($0, $11, $11 + 1 | 0, ($4 >>> $8) + 1 | 0);
  _ec_enc_bits($0, (1 << $8) + -1 & $1, $8);
  return;
 } else {
  _ec_encode($0, $1, $1 + 1 | 0, $2);
  return;
 }
}

function _stereo_split($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$014 = 0, $4 = 0, $6 = 0.0, $7 = 0, $9 = 0.0;
 if (($2 | 0) <= 0) return;
 $$014 = 0;
 do {
  $4 = $0 + ($$014 << 2) | 0;
  $6 = +HEAPF32[$4 >> 2] * .7071067690849304;
  $7 = $1 + ($$014 << 2) | 0;
  $9 = +HEAPF32[$7 >> 2] * .7071067690849304;
  HEAPF32[$4 >> 2] = $6 + $9;
  HEAPF32[$7 >> 2] = $9 - $6;
  $$014 = $$014 + 1 | 0;
 } while (($$014 | 0) != ($2 | 0));
 return;
}

function _silk_setup_LBRR($0, $$0$11$val) {
 $0 = $0 | 0;
 $$0$11$val = $$0$11$val | 0;
 var $$sink = 0, $1 = 0, $2 = 0, $6 = 0;
 $1 = $0 + 6092 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $$0$11$val;
 if (!$$0$11$val) return;
 if (!$2) $$sink = 7; else {
  $6 = HEAP32[$0 + 4616 >> 2] | 0;
  $$sink = _silk_max_int_393((Math_imul($6 >> 16, -26214) | 0) + 7 - ((($6 & 65535) * 26214 | 0) >>> 16) | 0) | 0;
 }
 HEAP32[$0 + 6096 >> 2] = $$sink;
 return;
}

function _celt_inner_prod_c_666($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$078 = 0, $$09 = 0.0, $9 = 0.0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $$078 = 0;
 $$09 = 0.0;
 while (1) {
  $9 = $$09 + +HEAPF32[$0 + ($$078 << 2) >> 2] * +HEAPF32[$1 + ($$078 << 2) >> 2];
  $$078 = $$078 + 1 | 0;
  if (($$078 | 0) == ($2 | 0)) {
   $$0$lcssa = $9;
   break;
  } else $$09 = $9;
 }
 return +$$0$lcssa;
}

function _celt_inner_prod_c_174($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$078 = 0, $$09 = 0.0, $9 = 0.0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $$078 = 0;
 $$09 = 0.0;
 while (1) {
  $9 = $$09 + +HEAPF32[$0 + ($$078 << 2) >> 2] * +HEAPF32[$1 + ($$078 << 2) >> 2];
  $$078 = $$078 + 1 | 0;
  if (($$078 | 0) == ($2 | 0)) {
   $$0$lcssa = $9;
   break;
  } else $$09 = $9;
 }
 return +$$0$lcssa;
}

function _celt_inner_prod_c_111($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$078 = 0, $$09 = 0.0, $9 = 0.0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $$078 = 0;
 $$09 = 0.0;
 while (1) {
  $9 = $$09 + +HEAPF32[$0 + ($$078 << 2) >> 2] * +HEAPF32[$1 + ($$078 << 2) >> 2];
  $$078 = $$078 + 1 | 0;
  if (($$078 | 0) == ($2 | 0)) {
   $$0$lcssa = $9;
   break;
  } else $$09 = $9;
 }
 return +$$0$lcssa;
}

function _celt_inner_prod_c_23($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$078 = 0, $$09 = 0.0, $9 = 0.0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $$078 = 0;
 $$09 = 0.0;
 while (1) {
  $9 = $$09 + +HEAPF32[$0 + ($$078 << 2) >> 2] * +HEAPF32[$1 + ($$078 << 2) >> 2];
  $$078 = $$078 + 1 | 0;
  if (($$078 | 0) == ($2 | 0)) {
   $$0$lcssa = $9;
   break;
  } else $$09 = $9;
 }
 return +$$0$lcssa;
}

function _silk_corrVector_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAPF32[$3 >> 2] = +_silk_inner_product_FLP($0 + 16 | 0, $1, $2);
 HEAPF32[$3 + 4 >> 2] = +_silk_inner_product_FLP($0 + 12 | 0, $1, $2);
 HEAPF32[$3 + 8 >> 2] = +_silk_inner_product_FLP($0 + 8 | 0, $1, $2);
 HEAPF32[$3 + 12 >> 2] = +_silk_inner_product_FLP($0 + 4 | 0, $1, $2);
 HEAPF32[$3 + 16 >> 2] = +_silk_inner_product_FLP($0, $1, $2);
 return;
}

function _celt_inner_prod_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0.0, $$078 = 0, $$09 = 0.0, $9 = 0.0;
 if (($2 | 0) <= 0) {
  $$0$lcssa = 0.0;
  return +$$0$lcssa;
 }
 $$078 = 0;
 $$09 = 0.0;
 while (1) {
  $9 = $$09 + +HEAPF32[$0 + ($$078 << 2) >> 2] * +HEAPF32[$1 + ($$078 << 2) >> 2];
  $$078 = $$078 + 1 | 0;
  if (($$078 | 0) == ($2 | 0)) {
   $$0$lcssa = $9;
   break;
  } else $$09 = $9;
 }
 return +$$0$lcssa;
}

function _opus_encoder_get_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (($0 + -1 | 0) >>> 0 > 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_Get_Encoder_Size($1);
 $4 = _align_662(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $4;
 $5 = _celt_encoder_get_size($0) | 0;
 $$0 = $5 + $4 + (_align_662(18136) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _decode_pulses($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0;
 $12 = $2 + 1 | 0;
 return +(+_cwrsi($1, $2, _ec_dec_uint($3, (HEAP32[(HEAP32[592 + ((($12 | 0) > ($1 | 0) ? $1 : $12) << 2) >> 2] | 0) + ((($12 | 0) < ($1 | 0) ? $1 : $12) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + ((($1 | 0) < ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) + ((($1 | 0) > ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) | 0) | 0, $0));
}

function _renormalise_vector($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$01415 = 0, $$016 = 0, $7 = 0.0;
 $7 = 1.0 / +Math_sqrt(+(+_celt_inner_prod_c_174($0, $0, $1) + 1.0000000036274937e-15)) * $2;
 if (($1 | 0) <= 0) return;
 $$01415 = 0;
 $$016 = $0;
 while (1) {
  HEAPF32[$$016 >> 2] = $7 * +HEAPF32[$$016 >> 2];
  $$01415 = $$01415 + 1 | 0;
  if (($$01415 | 0) == ($1 | 0)) break; else $$016 = $$016 + 4 | 0;
 }
 return;
}

function _decode_split($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $storemerge = 0;
 if (($3 | 0) > 0) {
  $10 = _ec_dec_icdf($2, $4 + (HEAPU8[26192 + $3 >> 0] | 0) | 0, 8) | 0;
  HEAP16[$0 >> 1] = $10;
  $storemerge = $3 - $10 & 65535;
  HEAP16[$1 >> 1] = $storemerge;
  return;
 } else {
  HEAP16[$0 >> 1] = 0;
  $storemerge = 0;
  HEAP16[$1 >> 1] = $storemerge;
  return;
 }
}

function _silk_NLSF2A_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$08 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 _silk_NLSF2A($3, $1, $2);
 if (($2 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $$08 = 0;
 do {
  HEAPF32[$0 + ($$08 << 2) >> 2] = +(HEAP16[$3 + ($$08 << 1) >> 1] | 0) * .000244140625;
  $$08 = $$08 + 1 | 0;
 } while (($$08 | 0) != ($2 | 0));
 STACKTOP = sp;
 return;
}

function _opus_decoder_get_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (($0 + -1 | 0) >>> 0 > 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_Get_Decoder_Size($1);
 $4 = _align(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $4;
 $5 = _celt_decoder_get_size($0) | 0;
 $$0 = $5 + $4 + (_align(88) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_CNG_Reset($0) {
 $0 = $0 | 0;
 var $$01011 = 0, $$012 = 0, $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 2340 >> 2] | 0;
 $4 = 32767 / ($2 + 1 | 0) | 0;
 if (($2 | 0) > 0) {
  $$01011 = 0;
  $$012 = 0;
  do {
   $$012 = $$012 + $4 | 0;
   HEAP16[$0 + 4052 + ($$01011 << 1) >> 1] = $$012;
   $$01011 = $$01011 + 1 | 0;
  } while (($$01011 | 0) != ($2 | 0));
 }
 HEAP32[$0 + 4148 >> 2] = 0;
 HEAP32[$0 + 4152 >> 2] = 3176576;
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _ec_write_byte_at_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $8 = 0;
 $4 = $0 + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if (($5 + (HEAP32[$0 + 24 >> 2] | 0) | 0) >>> 0 >= $8 >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $11 = HEAP32[$0 >> 2] | 0;
 $12 = $5 + 1 | 0;
 HEAP32[$4 >> 2] = $12;
 HEAP8[$11 + ($8 - $12) >> 0] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function _silk_autocorrelation_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$013 = 0, $spec$select = 0;
 $spec$select = ($3 | 0) > ($2 | 0) ? $2 : $3;
 if (($spec$select | 0) <= 0) return;
 $$013 = 0;
 do {
  HEAPF32[$0 + ($$013 << 2) >> 2] = +_silk_inner_product_FLP($1, $1 + ($$013 << 2) | 0, $2 - $$013 | 0);
  $$013 = $$013 + 1 | 0;
 } while (($$013 | 0) < ($spec$select | 0));
 return;
}

function _ec_enc_shrink($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $5 = 0, $8 = 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 if (($5 + (HEAP32[$0 + 24 >> 2] | 0) | 0) >>> 0 > $1 >>> 0) _celt_fatal(41152, 41074, 238); else {
  $8 = HEAP32[$0 >> 2] | 0;
  $10 = 0 - $5 | 0;
  $12 = $0 + 4 | 0;
  _memmove($8 + $1 + $10 | 0, $8 + (HEAP32[$12 >> 2] | 0) + $10 | 0, $5 | 0) | 0;
  HEAP32[$12 >> 2] = $1;
  return;
 }
}

function _ec_enc_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 33;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = -2147483648;
 HEAP32[$0 + 40 >> 2] = -1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = 0;
 return;
}

function _cubic_coef($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $10 = 0.0, $14 = 0.0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $7 = 0.0;
 $2 = $0 * .16666999459266663;
 $4 = $2 * $0 * $0;
 $5 = $4 - $2;
 HEAPF32[$1 >> 2] = $5;
 $7 = $0 * .5 * $0;
 $10 = $7 + $0 - $7 * $0;
 HEAPF32[$1 + 4 >> 2] = $10;
 $14 = $7 - $0 * .3333300054073334 - $4;
 HEAPF32[$1 + 12 >> 2] = $14;
 HEAPF32[$1 + 8 >> 2] = 1.0 - $5 - $10 - $14;
 return;
}

function _ec_dec_bit_logp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = $0 + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 32 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3 >>> $1;
 $7 = $5 >>> 0 < $6 >>> 0;
 if ($7) $11 = $6; else {
  HEAP32[$4 >> 2] = $5 - $6;
  $11 = $3 - $6 | 0;
 }
 HEAP32[$2 >> 2] = $11;
 _ec_dec_normalize($0);
 return $7 & 1 | 0;
}

function _silk_gains_ID($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$067 = 0, $$08 = 0, $7 = 0;
 if (($1 | 0) <= 0) {
  $$0$lcssa = 0;
  return $$0$lcssa | 0;
 }
 $$067 = 0;
 $$08 = 0;
 while (1) {
  $7 = ($$08 << 8) + (HEAP8[$0 + $$067 >> 0] | 0) | 0;
  $$067 = $$067 + 1 | 0;
  if (($$067 | 0) == ($1 | 0)) {
   $$0$lcssa = $7;
   break;
  } else $$08 = $7;
 }
 return $$0$lcssa | 0;
}

function _compute_gcd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$056 = 0, $$07 = 0, $$07$phi = 0, $3 = 0;
 if (!$1) $$0$lcssa = $0; else {
  $$056 = $1;
  $$07 = $0;
  while (1) {
   $3 = ($$07 >>> 0) % ($$056 >>> 0) | 0;
   if (!$3) {
    $$0$lcssa = $$056;
    break;
   } else {
    $$07$phi = $$056;
    $$056 = $3;
    $$07 = $$07$phi;
   }
  }
 }
 return $$0$lcssa | 0;
}

function _opus_packet_get_nb_frames($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 L1 : do if (($1 | 0) < 1) $$0 = -1; else {
  switch (HEAP8[$0 >> 0] & 3) {
  case 0:
   {
    $$0 = 1;
    break L1;
    break;
   }
  case 3:
   break;
  default:
   {
    $$0 = 2;
    break L1;
   }
  }
  if (($1 | 0) < 2) $$0 = -4; else $$0 = HEAP8[$0 + 1 >> 0] & 63;
 } while (0);
 return $$0 | 0;
}

function _silk_lin2log($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 _silk_CLZ_FRAC_421($0, $1, $2);
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = Math_imul(128 - $3 | 0, $3) | 0;
 STACKTOP = sp;
 return $3 + 3968 - (HEAP32[$1 >> 2] << 7) + (($5 >> 16) * 179 | 0) + ((($5 & 65535) * 179 | 0) >>> 16) | 0;
}

function _ec_enc_bit_logp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 32 | 0;
 $6 = $4 >>> $2;
 $7 = $4 - $6 | 0;
 $8 = ($1 | 0) != 0;
 if ($8) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $7;
 HEAP32[$3 >> 2] = $8 ? $6 : $7;
 _ec_enc_normalize($0);
 return;
}

function _ec_write_byte($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (((HEAP32[$0 + 8 >> 2] | 0) + $3 | 0) >>> 0 >= (HEAP32[$0 + 4 >> 2] | 0) >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $11 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + 1;
 HEAP8[$11 + $3 >> 0] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function _ec_tell_frac($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 $2 = 32 - (Math_clz32($$0$7$val | 0) | 0) | 0;
 $4 = $$0$7$val >>> ($2 + -16 | 0);
 $5 = $4 >>> 12;
 return (Math_imul($2, -8) | 0) + ($$0$5$val << 3) + (($4 >>> 0 > (HEAP32[5744 + ($5 + -8 << 2) >> 2] | 0) >>> 0) << 31 >> 31) + (8 - $5) | 0;
}

function _opus_packet_get_bandwidth($$val) {
 $$val = $$val | 0;
 var $$0 = 0, $0 = 0, $4 = 0;
 $0 = $$val & 255;
 if ($0 & 128 | 0) {
  $4 = $0 >>> 5 & 3;
  $$0 = ($4 | 0) == 0 ? 1101 : $4 + 1102 | 0;
  return $$0 | 0;
 }
 if (($0 & 96 | 0) == 96) {
  $$0 = $0 >>> 4 & 1 | 1104;
  return $$0 | 0;
 } else {
  $$0 = ($0 >>> 5 & 3) + 1101 | 0;
  return $$0 | 0;
 }
 return 0;
}

function _silk_short2float_array_611($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07$in = 0, $$07$in$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$07$in = $2;
 do {
  $$07$in$looptemp = $$07$in;
  $$07$in = $$07$in + -1 | 0;
  HEAPF32[$0 + ($$07$in << 2) >> 2] = +(HEAP16[$1 + ($$07$in << 1) >> 1] | 0);
 } while (($$07$in$looptemp | 0) > 1);
 return;
}

function _silk_short2float_array_542($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07$in = 0, $$07$in$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$07$in = $2;
 do {
  $$07$in$looptemp = $$07$in;
  $$07$in = $$07$in + -1 | 0;
  HEAPF32[$0 + ($$07$in << 2) >> 2] = +(HEAP16[$1 + ($$07$in << 1) >> 1] | 0);
 } while (($$07$in$looptemp | 0) > 1);
 return;
}

function _ec_read_byte_from_end($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 if ($2 >>> 0 >= $4 >>> 0) {
  $12 = 0;
  return $12 | 0;
 }
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $2 + 1 | 0;
 HEAP32[$1 >> 2] = $7;
 $12 = HEAPU8[$6 + ($4 - $7) >> 0] | 0;
 return $12 | 0;
}

function _silk_short2float_array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07$in = 0, $$07$in$looptemp = 0;
 if (($2 | 0) <= 0) return;
 $$07$in = $2;
 do {
  $$07$in$looptemp = $$07$in;
  $$07$in = $$07$in + -1 | 0;
  HEAPF32[$0 + ($$07$in << 2) >> 2] = +(HEAP16[$1 + ($$07$in << 1) >> 1] | 0);
 } while (($$07$in$looptemp | 0) > 1);
 return;
}

function _pulses2bits($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $22 = 0;
 if (!$3) {
  $22 = 0;
  return $22 | 0;
 }
 $22 = (HEAPU8[(HEAP32[$0 + 100 >> 2] | 0) + (HEAP16[(HEAP32[$0 + 96 >> 2] | 0) + ((Math_imul(HEAP32[$0 + 8 >> 2] | 0, $2 + 1 | 0) | 0) + $1 << 1) >> 1] | 0) + $3 >> 0] | 0) + 1 | 0;
 return $22 | 0;
}

function _celt_fatal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $1;
 HEAP32[$vararg_buffer + 4 >> 2] = $2;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 _fprintf(0, 0, $vararg_buffer);
 _abort();
}

function _bitexact_cos($0) {
 $0 = $0 | 0;
 var $1 = 0, $5 = 0;
 $1 = $0 << 16 >> 16;
 $5 = (Math_imul($1 << 3, $1) | 0) + 32768 >> 16;
 return 32768 - $5 + (((Math_imul((((Math_imul(((Math_imul($5, -626) | 0) + 16384 >> 15) + 8277 | 0, $5) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16, $5) | 0) + 16384 | 0) >>> 15) & 65535 | 0;
}

function _normalise_residual($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $7 = 0.0;
 $7 = 1.0 / +Math_sqrt(+$3) * $4;
 $$0 = 0;
 do {
  HEAPF32[$1 + ($$0 << 2) >> 2] = $7 * +(HEAP32[$0 + ($$0 << 2) >> 2] | 0);
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($2 | 0));
 return;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_560(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _celt_plc_pitch_search($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 $2 = sp + 4096 | 0;
 $3 = sp;
 _pitch_downsample($0, $3, 2048, $1);
 _pitch_search($3 + 1440 | 0, $3, 1328, 620, $2);
 STACKTOP = sp;
 return 720 - (HEAP32[$2 >> 2] | 0) | 0;
}

function _celt_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0;
 $3 = _opus_custom_decoder_init($0, $2) | 0;
 if ($3 | 0) {
  $$0 = $3;
  return $$0 | 0;
 }
 $5 = _resampling_factor($1) | 0;
 HEAP32[$0 + 16 >> 2] = $5;
 $$0 = (($5 | 0) == 0) << 31 >> 31;
 return $$0 | 0;
}

function _silk_init_encoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 _memset($0 | 0, 0, 10064) | 0;
 HEAP32[$0 + 5092 >> 2] = $1;
 $5 = ((_silk_lin2log(3932160) | 0) << 8) + -524288 | 0;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $5;
 HEAP32[$0 + 4664 >> 2] = 1;
 _silk_VAD_Init($0 + 36 | 0);
 return;
}

function _opus_encode_float($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $9 = 0;
 $9 = _frame_size_select($2, HEAP32[$0 + 156 >> 2] | 0, HEAP32[$0 + 144 >> 2] | 0) | 0;
 return _opus_encode_native($0, $1, $9, $3, $4, 24, $1, $2, -2, HEAP32[$0 + 112 >> 2] | 0, 1) | 0;
}

function _combine_pulses($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$08 = 0, $3 = 0;
 $$08 = 0;
 do {
  $3 = $$08 << 1;
  HEAP32[$0 + ($$08 << 2) >> 2] = (HEAP32[$1 + (($3 | 1) << 2) >> 2] | 0) + (HEAP32[$1 + ($3 << 2) >> 2] | 0);
  $$08 = $$08 + 1 | 0;
 } while (($$08 | 0) != ($2 | 0));
 return;
}

function _ec_read_byte($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, $6 = 0;
 $1 = $0 + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 >= (HEAP32[$0 + 4 >> 2] | 0) >>> 0) {
  $11 = 0;
  return $11 | 0;
 }
 $6 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + 1;
 $11 = HEAPU8[$6 + $2 >> 0] | 0;
 return $11 | 0;
}

function _speex_resampler_destroy($0) {
 $0 = $0 | 0;
 _speex_free_821(HEAP32[$0 + 72 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 76 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 60 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 68 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 64 >> 2] | 0);
 _speex_free_821($0);
 return;
}

function _celt_encoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0;
 $4 = _opus_custom_encoder_init_arch($0, $2, $3) | 0;
 if ($4 | 0) {
  $$0 = $4;
  return $$0 | 0;
 }
 HEAP32[$0 + 28 >> 2] = _resampling_factor($1) | 0;
 $$0 = 0;
 return $$0 | 0;
}

function _encode_size($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 if (($0 | 0) < 252) {
  HEAP8[$1 >> 0] = $0;
  $$0 = 1;
  return $$0 | 0;
 } else {
  $4 = $0 | 252;
  HEAP8[$1 >> 0] = $4;
  HEAP8[$1 + 1 >> 0] = ($0 - ($4 & 255) | 0) >>> 2;
  $$0 = 2;
  return $$0 | 0;
 }
 return 0;
}

function _median_of_3($$val, $$1$val, $$2$val) {
 $$val = +$$val;
 $$1$val = +$$1$val;
 $$2$val = +$$2$val;
 var $$ = 0.0, $$16 = 0.0, $0 = 0;
 $0 = $$val > $$1$val;
 $$ = $0 ? $$1$val : $$val;
 $$16 = $0 ? $$val : $$1$val;
 return +($$16 < $$2$val ? $$16 : $$ < $$2$val ? $$2$val : $$);
}

function _speex_resampler_set_quality($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 if ($1 >>> 0 > 10) return;
 $3 = $0 + 16 | 0;
 if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) return;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$0 + 52 >> 2] | 0)) return;
 _update_filter($0) | 0;
 return;
}

function _silk_ROR32_530($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 >>> ($1 + 32 | 0) | $0 << 0 - $1;
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_423($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 >>> ($1 + 32 | 0) | $0 << 0 - $1;
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_353($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 >>> ($1 + 32 | 0) | $0 << 0 - $1;
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_263($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 >>> ($1 + 32 | 0) | $0 << 0 - $1;
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_InitEncoder($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _memset($0 | 0, 0, 20216) | 0;
 _silk_init_encoder($0, $1);
 _silk_init_encoder($0 + 10064 | 0, $1);
 HEAP32[$0 + 20192 >> 2] = 1;
 HEAP32[$0 + 20196 >> 2] = 1;
 _silk_QueryEncoder($0, $2);
 return;
}

function _ec_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $9 = 0;
 $4 = _celt_udiv_55(HEAP32[$0 + 28 >> 2] | 0, $1) | 0;
 HEAP32[$0 + 36 >> 2] = $4;
 $9 = (((HEAP32[$0 + 32 >> 2] | 0) >>> 0) / ($4 >>> 0) | 0) + 1 | 0;
 return $1 - ($9 >>> 0 > $1 >>> 0 ? $1 : $9) | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _silk_ROR32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 >>> ($1 + 32 | 0) | $0 << 0 - $1;
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _opus_decode_float($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0;
 if (($4 | 0) < 1) {
  $$0 = -1;
  return $$0 | 0;
 }
 $$0 = _opus_decode_native($0, $1, $2, $3, $4, $5) | 0;
 return $$0 | 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _ec_decode_bin($0) {
 $0 = $0 | 0;
 var $3 = 0, $8 = 0;
 $3 = (HEAP32[$0 + 28 >> 2] | 0) >>> 15;
 HEAP32[$0 + 36 >> 2] = $3;
 $8 = (((HEAP32[$0 + 32 >> 2] | 0) >>> 0) / ($3 >>> 0) | 0) + 1 | 0;
 return 32768 - ($8 >>> 0 < 32768 ? $8 : 32768) | 0;
}

function _silk_InitDecoder($0) {
 $0 = $0 | 0;
 var $2 = 0;
 _silk_init_decoder($0);
 _silk_init_decoder($0 + 4264 | 0);
 $2 = $0 + 8528 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$0 + 8548 >> 2] = 0;
 return;
}

function _fprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 _vfprintf($2);
 STACKTOP = sp;
 return;
}

function _silk_PLC_Reset($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4172 >> 2] = HEAP32[$0 + 2328 >> 2] << 7;
 HEAP32[$0 + 4244 >> 2] = 65536;
 HEAP32[$0 + 4248 >> 2] = 65536;
 HEAP32[$0 + 4260 >> 2] = 20;
 HEAP32[$0 + 4256 >> 2] = 2;
 return;
}

function _silk_CLZ_FRAC_528($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_529($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_530($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_421($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_422($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_423($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_351($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_352($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_353($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_262($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_258($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_263($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _opus_custom_encoder_get_size($$0$1$val, $$0$2$val, $0) {
 $$0$1$val = $$0$1$val | 0;
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 return (Math_imul(($$0$2$val << 4) + 4096 + ($$0$1$val << 2) | 0, $0) | 0) + 244 | 0;
}

function _opus_custom_decoder_get_size($$0$1$val, $$0$2$val, $0) {
 $$0$1$val = $$0$1$val | 0;
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 return ($$0$2$val << 5) + 92 + (Math_imul(($$0$1$val << 2) + 8288 | 0, $0) | 0) | 0;
}

function _silk_init_decoder($0) {
 $0 = $0 | 0;
 _memset($0 + 4 | 0, 0, 4260) | 0;
 HEAP32[$0 + 2376 >> 2] = 1;
 HEAP32[$0 >> 2] = 65536;
 HEAP32[$0 + 4168 >> 2] = 0;
 _silk_CNG_Reset($0);
 _silk_PLC_Reset($0);
 return;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return (($$0 | 0) == 0 ? $0 : $$0) | 0;
}

function _silk_CLZ_FRAC($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _speex_alloc_820($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _malloc($0) | 0;
 if (!$1) return $1 | 0;
 if (!(HEAP32[$1 + -4 >> 2] & 3)) return $1 | 0;
 _memset($1 | 0, 0, $0 | 0) | 0;
 return $1 | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _compute_channel_weights($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2 | 0;
 var $5 = 0.0;
 $5 = ($0 < $1 ? $0 : $1) / 3.0;
 HEAPF32[$2 >> 2] = $5 + $0;
 HEAPF32[$2 + 4 >> 2] = $5 + $1;
 return;
}

function _encode_split($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($2 | 0) <= 0) return;
 _ec_enc_icdf($0, $1, $3 + (HEAPU8[26192 + $2 >> 0] | 0) | 0, 8);
 return;
}

function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function _speex_resampler_init($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return _speex_resampler_init_frac($0, $1, $2, $1, $2, $3, $4) | 0;
}

function _compute_frame_energy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = Math_imul($2, $1) | 0;
 return +(+_celt_inner_prod_c_666($0, $0, $3) / +($3 | 0));
}

function _FLOAT2INT16_669($0) {
 $0 = +$0;
 var $1 = 0.0, $3 = 0.0;
 $1 = $0 * 32768.0;
 $3 = $1 > -32768.0 ? $1 : -32768.0;
 return (_lrintf($3 < 32767.0 ? $3 : 32767.0) | 0) & 65535 | 0;
}

function _is_digital_silence($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +_celt_maxabs16_672($0, Math_imul($2, $1) | 0) <= 1.0 / +(1 << $3 | 0) | 0;
}

function _silk_resampler_private_up2_HQ_wrapper($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _silk_resampler_private_up2_HQ($0, $1, $2, $3);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 3](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _opus_packet_get_mode($$val) {
 $$val = $$val | 0;
 var $0 = 0;
 $0 = $$val & 255;
 return (($0 & 128 | 0) == 0 ? (($0 & 96 | 0) == 96 ? 1001 : 1e3) : 1002) | 0;
}

function _ec_tell_671($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell_644($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell_543($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell_213($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell_141($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell_40($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function _ec_tell($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return $$0$5$val + -32 + (Math_clz32($$0$7$val | 0) | 0) | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[12580] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function _tonality_analysis_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 _tonality_analysis_reset($0);
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function b3(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(3);
}

function b2(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(2);
 return 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function _opus_repacketizer_cat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _opus_repacketizer_cat_impl($0, $1, $2) | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1) | 0;
 return $$0 | 0;
}

function _ec_laplace_get_freq1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (Math_imul(16384 - $1 | 0, 32736 - $0 | 0) | 0) >>> 15 | 0;
}

function _silk_stereo_decode_mid_only($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = _ec_dec_icdf($0, 43914, 8) | 0;
 return;
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0);
 return;
}

function _silk_stereo_encode_mid_only($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _ec_enc_icdf($0, $1 << 24 >> 24, 43914, 8);
 return;
}

function _silk_max_16($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 << 16 >> 16;
 return (($1 | 0) > 3277 ? $1 : 3277) & 65535 | 0;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _compute_pitch_gain($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 return +($0 / +Math_sqrt(+($1 * $2 + 1.0)));
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 1](a1 | 0) | 0;
}

function _opus_packet_get_nb_channels($$val) {
 $$val = $$val | 0;
 return (($$val & 255) >>> 2 & 1) + 1 & 255 | 0;
}

function _silk_min_int_621($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_445($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_396($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_349($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_238($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_620($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_525($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_444($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_354($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_32_253($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _celt_encoder_get_size($0) {
 $0 = $0 | 0;
 return _opus_custom_encoder_get_size(120, 21, $0) | 0;
}

function _celt_decoder_get_size($0) {
 $0 = $0 | 0;
 return _opus_custom_decoder_get_size(120, 21, $0) | 0;
}

function _get_pulses($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 8 ? $0 : ($0 & 7 | 8) << ($0 >> 3) + -1) | 0;
}

function _silk_max_int($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _celt_udiv_162($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_156($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_120($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _rintf(f) {
 f = +f;
 return f - +Math_floor(f) != .5 ? +_round(f) : +_round(f / 2.0) * 2.0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function _celt_udiv_72($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_55($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _tonality_analysis_reset($0) {
 $0 = $0 | 0;
 _memset($0 + 12 | 0, 0, 13988) | 0;
 return;
}

function _celt_udiv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_lcg_rand($0) {
 $0 = $0 | 0;
 return (Math_imul($0, 1664525) | 0) + 1013904223 | 0;
}

function _celt_sudiv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) / ($1 | 0) | 0 | 0;
}

function _opus_repacketizer_init($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0 | 0;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function _silk_log2_619($0) {
 $0 = +$0;
 return +(+_llvm_log10_f64(+$0) * 3.32192809488736);
}

function _ec_get_error_44($$0$11$val) {
 $$0$11$val = $$0$11$val | 0;
 return $$0$11$val | 0;
}

function _silk_min_int_452($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 32767 ? $0 : 32767) | 0;
}

function _silk_min_32_406($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 32767 ? $0 : 32767) | 0;
}

function _round(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function _ec_get_error($$0$11$val) {
 $$0$11$val = $$0$11$val | 0;
 return $$0$11$val | 0;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function _silk_log2($0) {
 $0 = +$0;
 return +(+_llvm_log10_f64(+$0) * 3.32192809488736);
}

function _sigmoid_approx($0) {
 $0 = +$0;
 return +(+_tansig_approx($0 * .5) * .5 + .5);
}

function _ec_range_bytes($$0$6$val) {
 $$0$6$val = $$0$6$val | 0;
 return $$0$6$val | 0;
}

function _silk_Get_Encoder_Size($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 20216;
 return;
}

function _silk_sigmoid_571($0) {
 $0 = +$0;
 return +(1.0 / (+Math_exp(+-$0) + 1.0));
}

function _silk_min_int_547($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 63 ? $0 : 63) | 0;
}

function _silk_Get_Decoder_Size($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 8552;
 return;
}

function _silk_min_32($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 3967 ? $0 : 3967) | 0;
}

function _silk_min_int_252($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 1 ? $0 : 1) | 0;
}

function _silk_max_int_451($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 1 ? $0 : 1) | 0;
}

function _silk_max_int_393($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 2 ? $0 : 2) | 0;
}

function _silk_max_int_378($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 1 ? $0 : 1) | 0;
}

function _silk_max_int_251($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 0 ? $0 : 0) | 0;
}

function _silk_max_32_510($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 0 ? $0 : 0) | 0;
}

function _silk_sigmoid($0) {
 $0 = +$0;
 return +(1.0 / (+Math_exp(+-$0) + 1.0));
}

function _silk_min_int($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 63 ? $0 : 63) | 0;
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, 50296) | 0;
}

function _silk_CLZ32_529($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_509($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_434($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_422($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_379($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_362($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_352($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_258($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_246($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_237($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_183($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _opus_decoder_destroy($0) {
 $0 = $0 | 0;
 _opus_free($0);
 return;
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function _silk_CLZ32($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _opus_alloc_664($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function _silk_float2int($0) {
 $0 = +$0;
 return _lrintf($0) | 0;
}

function _speex_free_821($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _opus_alloc($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function _opus_free_665($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _align_662($0) {
 $0 = $0 | 0;
 return $0 + 3 & -4 | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _lrintf($0) {
 $0 = +$0;
 return ~~+_rintf(+$0) | 0;
}

function _opus_free($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _align($0) {
 $0 = $0 | 0;
 return $0 + 3 & -4 | 0;
}

function _dummy_560($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdio_write,___stdio_seek,b1];
var FUNCTION_TABLE_iiiiiii = [b2,_resampler_basic_direct_double,_resampler_basic_direct_single,_resampler_basic_interpolate_double,_resampler_basic_interpolate_single,_resampler_basic_zero,b2,b2];
var FUNCTION_TABLE_viiiiiii = [b3,_downmix_float];

  return { ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _opus_decode_float: _opus_decode_float, _opus_decoder_create: _opus_decoder_create, _opus_decoder_destroy: _opus_decoder_destroy, _opus_encode_float: _opus_encode_float, _opus_encoder_create: _opus_encoder_create, _opus_encoder_ctl: _opus_encoder_ctl, _rintf: _rintf, _sbrk: _sbrk, _speex_resampler_destroy: _speex_resampler_destroy, _speex_resampler_init: _speex_resampler_init, _speex_resampler_process_interleaved_float: _speex_resampler_process_interleaved_float, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _opus_decode_float = Module["_opus_decode_float"] = asm["_opus_decode_float"];
var _opus_decoder_create = Module["_opus_decoder_create"] = asm["_opus_decoder_create"];
var _opus_decoder_destroy = Module["_opus_decoder_destroy"] = asm["_opus_decoder_destroy"];
var _opus_encode_float = Module["_opus_encode_float"] = asm["_opus_encode_float"];
var _opus_encoder_create = Module["_opus_encoder_create"] = asm["_opus_encoder_create"];
var _opus_encoder_ctl = Module["_opus_encoder_ctl"] = asm["_opus_encoder_ctl"];
var _rintf = Module["_rintf"] = asm["_rintf"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _speex_resampler_destroy = Module["_speex_resampler_destroy"] = asm["_speex_resampler_destroy"];
var _speex_resampler_init = Module["_speex_resampler_init"] = asm["_speex_resampler_init"];
var _speex_resampler_process_interleaved_float = Module["_speex_resampler_process_interleaved_float"] = asm["_speex_resampler_process_interleaved_float"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;











































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}








  return Module;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
    module.exports = Module;
  else if (typeof define === 'function' && define['amd'])
    define([], function() { return Module; });
  else if (typeof exports === 'object')
    exports["Module"] = Module;
  