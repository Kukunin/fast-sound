
var FastSound = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(FastSound) {
  FastSound = FastSound || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof FastSound !== 'undefined' ? FastSound : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)


// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;




function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 51056;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in FILESYSTEM=0
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function _abort() {
      Module['abort']();
    }

   

   

   



   

  var _llvm_cos_f64=Math_cos;

  var _llvm_ctlz_i32=true;

  
  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }function _llvm_exp2_f64() {
  return _llvm_exp2_f32.apply(null, arguments)
  }

  var _llvm_exp_f64=Math_exp;

  var _llvm_fabs_f32=Math_abs;

  var _llvm_floor_f32=Math_floor;

  var _llvm_floor_f64=Math_floor;

  
  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }function _llvm_log10_f64() {
  return _llvm_log10_f32.apply(null, arguments)
  }

  var _llvm_log_f64=Math_log;

  var _llvm_sin_f64=Math_sin;

  var _llvm_sqrt_f32=Math_sqrt;

  var _llvm_sqrt_f64=Math_sqrt;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    } 
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall6": ___syscall6, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_exp2_f32": _llvm_exp2_f32, "_llvm_exp2_f64": _llvm_exp2_f64, "_llvm_exp_f64": _llvm_exp_f64, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_floor_f32": _llvm_floor_f32, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_log_f64": _llvm_log_f64, "_llvm_sin_f64": _llvm_sin_f64, "_llvm_sqrt_f32": _llvm_sqrt_f32, "_llvm_sqrt_f64": _llvm_sqrt_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall6=env.___syscall6;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_cos_f64=env._llvm_cos_f64;
  var _llvm_exp2_f32=env._llvm_exp2_f32;
  var _llvm_exp2_f64=env._llvm_exp2_f64;
  var _llvm_exp_f64=env._llvm_exp_f64;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _llvm_floor_f32=env._llvm_floor_f32;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_log10_f32=env._llvm_log10_f32;
  var _llvm_log10_f64=env._llvm_log10_f64;
  var _llvm_log_f64=env._llvm_log_f64;
  var _llvm_sin_f64=env._llvm_sin_f64;
  var _llvm_sqrt_f32=env._llvm_sqrt_f32;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _opus_encode_native($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$01 = 0, $$0102 = 0, $$011 = 0, $$012 = 0.0, $$014 = 0, $$018 = 0, $$029 = 0, $$029205 = 0, $$029206 = 0, $$03 = 0, $$042 = 0, $$049 = 0, $$05 = 0, $$054 = 0, $$06 = 0.0, $$064 = 0, $$070 = 0, $$086 = 0, $$08625 = 0, $$087 = 0, $$088 = 0.0, $$095 = 0, $$1 = 0, $$1074 = 0, $$107681 = 0, $$110 = 0, $$1113 = 0, $$111330 = 0, $$11133150$ph = 0, $$11133192 = 0, $$111332 = 0, $$113 = 0.0, $$119 = 0, $$130 = 0, $$150 = 0, $$161 = 0, $$163 = 0, $$163$1 = 0, $$163$2 = 0, $$163$3 = 0, $$175$ph = 0, $$18 = 0.0, $$184217 = 0.0, $$184219 = 0.0, $$190$ph$ph = 0, $$19022195 = 0, $$192$ph$ph = 0, $$19220196 = 0, $$19418197 = 0, $$19418198 = 0, $$19418198201 = 0, $$197 = 0.0, $$2 = 0, $$2100 = 0, $$2108 = 0, $$2111 = 0, $$211133 = 0, $$21113448$ph = 0, $$21113491 = 0, $$211135 = 0, $$217 = 0, $$220 = 0, $$234 = 0, $$244$ph = 0, $$261 = 0, $$273 = 0, $$27339 = 0, $$2734044$ph = 0, $$2734089 = 0, $$27341 = 0, $$285 = 0.0, $$3 = 0, $$310536 = 0, $$31053745$ph = 0, $$324 = 0, $$328 = 0, $$335 = 0, $$345 = 0, $$352$ph = 0, $$380 = 0, $$453 = 0, $$458 = 0, $$469 = 0, $$582 = 0, $$58394 = 0, $$584 = 0, $$6 = 0, $$638 = 0, $$648 = 0, $$8 = 0, $$840$ph = 0, $$9 = 0, $$941 = 0, $$alloca_mul98 = 0, $$idx1$val = 0, $$idx10 = 0, $$idx11 = 0, $$phi$trans$insert = 0, $$phi$trans$insert107 = 0, $$pre$phi113202Z2D = 0, $$pre$phi113Z2D = 0, $$pre$phi114Z2D = 0, $$pre$phi120Z2D = 0, $$pre$phiZ2D = 0, $$pre$pr = 0, $$pre104 = 0, $$pre108 = 0, $$sink97 = 0, $100 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $15 = 0, $16 = 0, $169 = 0, $17 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $189 = 0, $19 = 0, $196 = 0, $197 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $219 = 0.0, $22 = 0, $227 = 0, $232 = 0, $236 = 0, $24 = 0, $242 = 0, $243 = 0, $267 = 0, $268 = 0, $272 = 0, $275 = 0, $276 = 0, $278 = 0, $279 = 0, $284 = 0, $285 = 0, $292 = 0, $295 = 0, $299 = 0, $300 = 0, $305 = 0, $306 = 0, $317 = 0, $319 = 0, $330 = 0, $331 = 0, $333 = 0, $335 = 0, $34 = 0, $342 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $353 = 0, $354 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $380 = 0, $395 = 0, $397 = 0, $399 = 0, $406 = 0, $408 = 0, $411 = 0, $413 = 0, $414 = 0, $416 = 0, $419 = 0, $425 = 0, $429 = 0, $43 = 0, $432 = 0, $438 = 0, $441 = 0, $446 = 0, $448 = 0, $45 = 0, $452 = 0, $454 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $464 = 0, $475 = 0, $476 = 0, $477 = 0, $484 = 0, $488 = 0, $489 = 0, $49 = 0, $491 = 0, $494 = 0, $496 = 0, $500 = 0, $502 = 0, $503 = 0, $504 = 0.0, $508 = 0, $51 = 0, $512 = 0, $513 = 0, $514 = 0, $523 = 0, $524 = 0, $525 = 0, $53 = 0, $533 = 0, $536 = 0, $552 = 0, $553 = 0, $555 = 0, $559 = 0, $560 = 0.0, $561 = 0, $565 = 0.0, $57 = 0, $575 = 0, $576 = 0, $578 = 0, $579 = 0, $584 = 0, $585 = 0, $587 = 0, $59 = 0, $590 = 0, $592 = 0, $599 = 0, $605 = 0, $606 = 0, $609 = 0, $61 = 0, $610 = 0, $614 = 0, $615 = 0, $620 = 0, $621 = 0, $623 = 0, $624 = 0, $625 = 0, $628 = 0, $641 = 0, $643 = 0, $644 = 0, $645 = 0, $652 = 0, $654 = 0, $663 = 0, $664 = 0, $67 = 0, $676 = 0, $679 = 0, $688 = 0, $69 = 0.0, $698 = 0, $704 = 0, $708 = 0, $71 = 0.0, $712 = 0, $715 = 0, $716 = 0, $717 = 0, $719 = 0, $720 = 0, $728 = 0, $729 = 0, $731 = 0, $732 = 0, $733 = 0, $735 = 0, $736 = 0, $74 = 0, $742 = 0, $745 = 0, $748 = 0, $749 = 0, $750 = 0, $753 = 0, $755 = 0, $760 = 0, $770 = 0, $771 = 0.0, $774 = 0, $781 = 0, $800 = 0, $801 = 0, $808 = 0, $816 = 0, $819 = 0, $820 = 0, $828 = 0, $829 = 0, $834 = 0, $835 = 0, $840 = 0, $841 = 0, $842 = 0, $857 = 0, $859 = 0, $864 = 0, $878 = 0, $888 = 0, $889 = 0, $890 = 0, $894 = 0, $909 = 0, $910 = 0, $95 = 0, $952 = 0, $963 = 0, $965 = 0, $971 = 0, $973 = 0, $979 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $spec$select = 0, $spec$select121 = 0, $spec$select125 = 0, $spec$select128 = 0, $spec$select133 = 0, $spec$select144 = 0, $spec$select156 = 0, $spec$select166 = 0, $spec$select179 = 0, $spec$select180 = 0, $spec$select188 = 0, $spec$select189 = 0, $spec$select190 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $vararg_buffer82 = sp + 264 | 0;
 $vararg_buffer79 = sp + 256 | 0;
 $vararg_buffer76 = sp + 248 | 0;
 $vararg_buffer73 = sp + 240 | 0;
 $vararg_buffer70 = sp + 232 | 0;
 $vararg_buffer68 = sp + 224 | 0;
 $vararg_buffer65 = sp + 216 | 0;
 $vararg_buffer62 = sp + 208 | 0;
 $vararg_buffer59 = sp + 200 | 0;
 $vararg_buffer57 = sp + 192 | 0;
 $vararg_buffer54 = sp + 184 | 0;
 $vararg_buffer52 = sp + 176 | 0;
 $vararg_buffer49 = sp + 168 | 0;
 $vararg_buffer46 = sp + 160 | 0;
 $vararg_buffer43 = sp + 152 | 0;
 $vararg_buffer40 = sp + 144 | 0;
 $vararg_buffer37 = sp + 136 | 0;
 $vararg_buffer34 = sp + 128 | 0;
 $vararg_buffer31 = sp + 120 | 0;
 $vararg_buffer28 = sp + 112 | 0;
 $vararg_buffer25 = sp + 104 | 0;
 $vararg_buffer22 = sp + 96 | 0;
 $vararg_buffer19 = sp + 88 | 0;
 $vararg_buffer16 = sp + 80 | 0;
 $vararg_buffer13 = sp + 72 | 0;
 $vararg_buffer10 = sp + 64 | 0;
 $vararg_buffer7 = sp + 56 | 0;
 $vararg_buffer4 = sp + 48 | 0;
 $vararg_buffer1 = sp + 40 | 0;
 $vararg_buffer = sp + 32 | 0;
 $12 = sp + 504 | 0;
 $13 = sp + 456 | 0;
 $14 = sp + 452 | 0;
 $15 = sp + 448 | 0;
 $16 = sp + 384 | 0;
 $17 = sp + 284 | 0;
 $18 = sp;
 $19 = sp + 280 | 0;
 $20 = sp + 272 | 0;
 $21 = sp + 510 | 0;
 $22 = sp + 508 | 0;
 HEAP32[$14 >> 2] = 0;
 $spec$select = ($4 | 0) < 1276 ? $4 : 1276;
 $24 = $0 + 18132 | 0;
 HEAP32[$24 >> 2] = 0;
 if (($2 | 0) < 1 | ($spec$select | 0) < 1) {
  $$2 = -1;
  STACKTOP = sp;
  return $$2 | 0;
 }
 if (($spec$select | 0) == 1) if ((HEAP32[$0 + 144 >> 2] | 0) == ($2 * 10 | 0)) {
  $$2 = -2;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $34 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
 $36 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 $37 = $0 + 108 | 0;
 if ((HEAP32[$37 >> 2] | 0) == 2051) $$070 = 0; else $$070 = HEAP32[$0 + 116 >> 2] | 0;
 $43 = HEAP32[$0 + 168 >> 2] | 0;
 $spec$select121 = ($43 | 0) > ($5 | 0) ? $5 : $43;
 HEAP32[$vararg_buffer >> 2] = $15;
 _opus_custom_encoder_ctl($36, 10015, $vararg_buffer) | 0;
 HEAP32[$16 >> 2] = 0;
 $45 = $0 + 44 | 0;
 do if ((HEAP32[$45 >> 2] | 0) > 6) {
  $51 = HEAP32[$0 + 144 >> 2] | 0;
  if (($51 | 0) > 15999) {
   $53 = $0 + 112 | 0;
   if (_is_digital_silence($1, $2, HEAP32[$53 >> 2] | 0, $spec$select121) | 0) {
    $57 = $0 + 18116 | 0;
    HEAP32[$57 >> 2] = 0;
    $$19022195 = -1;
    $$19220196 = -1;
    $$19418197 = 1;
    $378 = $57;
    break;
   }
   $59 = HEAP32[$0 + 7636 >> 2] | 0;
   $61 = HEAP32[$0 + 7640 >> 2] | 0;
   _run_analysis($0 + 188 | 0, HEAP32[$15 >> 2] | 0, $6, $7, $2, 0, $8, $9, $51, $spec$select121, $10, $16);
   if (+HEAPF32[$16 + 36 >> 2] > .10000000149011612) {
    $67 = $0 + 18124 | 0;
    $69 = +HEAPF32[$67 >> 2] * .9990000128746033;
    $71 = +_compute_frame_energy($1, $2, HEAP32[$53 >> 2] | 0);
    HEAPF32[$67 >> 2] = $69 > $71 ? $69 : $71;
    $$190$ph$ph = $59;
    $$192$ph$ph = $61;
   } else {
    $$190$ph$ph = $59;
    $$192$ph$ph = $61;
   }
  } else {
   $$190$ph$ph = -1;
   $$192$ph$ph = -1;
  }
  $$pre$pr = HEAP32[$16 >> 2] | 0;
  HEAP32[$0 + 140 >> 2] = -1;
  $74 = $0 + 18116 | 0;
  HEAP32[$74 >> 2] = 0;
  if (!$$pre$pr) {
   $$19022195 = $$190$ph$ph;
   $$19220196 = $$192$ph$ph;
   $$19418197 = 0;
   $378 = $74;
  } else {
   if ((HEAP32[$0 + 124 >> 2] | 0) == -1e3) {
    switch (HEAP32[$0 + 14224 >> 2] | 0) {
    case 0:
     {
      $$197 = +HEAPF32[$16 + 20 >> 2];
      break;
     }
    case 1002:
     {
      $$197 = +HEAPF32[$16 + 28 >> 2];
      break;
     }
    default:
     $$197 = +HEAPF32[$16 + 24 >> 2];
    }
    HEAP32[$0 + 140 >> 2] = ~~+Math_floor(+((1.0 - $$197) * 100.0 + .5));
   }
   $95 = HEAP32[$16 + 32 >> 2] | 0;
   if (($95 | 0) < 13) {
    HEAP32[$74 >> 2] = 1101;
    $$19022195 = $$190$ph$ph;
    $$19220196 = $$192$ph$ph;
    $$19418197 = 0;
    $378 = $74;
    break;
   }
   if (($95 | 0) < 15) {
    HEAP32[$74 >> 2] = 1102;
    $$19022195 = $$190$ph$ph;
    $$19220196 = $$192$ph$ph;
    $$19418197 = 0;
    $378 = $74;
    break;
   }
   if (($95 | 0) < 17) {
    HEAP32[$74 >> 2] = 1103;
    $$19022195 = $$190$ph$ph;
    $$19220196 = $$192$ph$ph;
    $$19418197 = 0;
    $378 = $74;
    break;
   }
   if (($95 | 0) < 19) {
    HEAP32[$74 >> 2] = 1104;
    $$19022195 = $$190$ph$ph;
    $$19220196 = $$192$ph$ph;
    $$19418197 = 0;
    $378 = $74;
    break;
   } else {
    HEAP32[$74 >> 2] = 1105;
    $$19022195 = $$190$ph$ph;
    $$19220196 = $$192$ph$ph;
    $$19418197 = 0;
    $378 = $74;
    break;
   }
  }
 } else {
  HEAP32[$0 + 140 >> 2] = -1;
  $49 = $0 + 18116 | 0;
  HEAP32[$49 >> 2] = 0;
  $$19022195 = -1;
  $$19220196 = -1;
  $$19418197 = 0;
  $378 = $49;
 } while (0);
 $100 = $0 + 112 | 0;
 if ((HEAP32[$100 >> 2] | 0) == 2) if ((HEAP32[$0 + 120 >> 2] | 0) == 1) $$088 = 0.0; else $$088 = +_compute_stereo_width($1, $2, HEAP32[$0 + 144 >> 2] | 0, $0 + 14256 | 0); else $$088 = 0.0;
 $110 = _user_bitrate_to_bitrate($0, $2, $spec$select) | 0;
 $111 = $0 + 160 | 0;
 HEAP32[$111 >> 2] = $110;
 $112 = $0 + 144 | 0;
 $113 = HEAP32[$112 >> 2] | 0;
 $114 = ($113 | 0) / ($2 | 0) | 0;
 $115 = $0 + 148 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 do if (!$116) {
  $119 = ($113 * 12 | 0) / ($2 | 0) | 0;
  $124 = ((($110 * 12 | 0) / 8 | 0) + (($119 | 0) / 2 | 0) | 0) / ($119 | 0) | 0;
  if (($124 | 0) < ($spec$select | 0)) {
   $131 = ((Math_imul($124, $119) | 0) << 3 | 0) / 12 | 0;
   HEAP32[$111 >> 2] = $131;
   if (($124 | 0) < 1) {
    $$08625 = 1;
    break;
   } else {
    $$086 = $124;
    $135 = $131;
    label = 36;
    break;
   }
  } else {
   $128 = ((Math_imul($spec$select, $119) | 0) << 3 | 0) / 12 | 0;
   HEAP32[$111 >> 2] = $128;
   $$086 = $spec$select;
   $135 = $128;
   label = 36;
   break;
  }
 } else {
  $$086 = $spec$select;
  $135 = $110;
  label = 36;
 } while (0);
 do if ((label | 0) == 36) if (($$086 | 0) < 3 | ($135 | 0) < ($114 * 24 | 0)) $$08625 = $$086; else {
  if (($114 | 0) < 50) {
   $138 = Math_imul($$086, $114) | 0;
   if (($138 | 0) < 300 | ($135 | 0) < 2400) {
    $$08625 = $$086;
    break;
   } else $$pre$phi120Z2D = $138;
  } else $$pre$phi120Z2D = Math_imul($114, $$086) | 0;
  $178 = $$pre$phi120Z2D << 3;
  $179 = HEAP32[$100 >> 2] | 0;
  $180 = HEAP32[$45 >> 2] | 0;
  $181 = $0 + 40 | 0;
  $182 = HEAP32[$181 >> 2] | 0;
  $183 = _compute_equiv_rate($135, $179, $114, $116, 0, $180, $182) | 0;
  L59 : do switch (HEAP32[$0 + 124 >> 2] | 0) {
  case 3001:
   {
    $$469 = 127;
    break;
   }
  case 3002:
   {
    $$469 = 0;
    break;
   }
  default:
   {
    $187 = HEAP32[$0 + 140 >> 2] | 0;
    if (($187 | 0) > -1) {
     $189 = $187 * 327 | 0;
     $$469 = (HEAP32[$37 >> 2] | 0) != 2049 | ($189 | 0) < 29440 ? $189 >> 8 : 115;
     break L59;
    } else {
     $$469 = (HEAP32[$37 >> 2] | 0) == 2048 ? 115 : 48;
     break L59;
    }
   }
  } while (0);
  $196 = $0 + 120 | 0;
  $197 = HEAP32[$196 >> 2] | 0;
  do if (($197 | 0) != -1e3 & ($179 | 0) == 2) {
   $200 = $0 + 14188 | 0;
   HEAP32[$200 >> 2] = $197;
   $$pre$phiZ2D = $200;
   $211 = $197;
  } else if (($179 | 0) == 2) {
   $204 = ((Math_imul($$469, $$469) | 0) * 2e3 | 0) >>> 14;
   $205 = $0 + 14188 | 0;
   $209 = ($183 | 0) > ($204 + ((HEAP32[$205 >> 2] | 0) == 2 ? 16e3 : 18e3) | 0) ? 2 : 1;
   HEAP32[$205 >> 2] = $209;
   $$pre$phiZ2D = $205;
   $211 = $209;
   break;
  } else {
   $210 = $0 + 14188 | 0;
   HEAP32[$210 >> 2] = $179;
   $$pre$phiZ2D = $210;
   $211 = $179;
   break;
  } while (0);
  $212 = _compute_equiv_rate($135, $211, $114, $116, 0, $180, $182) | 0;
  $213 = HEAP32[$37 >> 2] | 0;
  do if (($213 | 0) == 2051) {
   $215 = $0 + 14220 | 0;
   HEAP32[$215 >> 2] = 1002;
   $$19418198201 = $$19418197;
   $$pre$phi113202Z2D = $215;
   $979 = 1002;
  } else {
   $217 = HEAP32[$0 + 136 >> 2] | 0;
   if (($217 | 0) == -1e3) {
    $219 = 1.0 - $$088;
    $227 = ~~($219 * 1.0e4 + $$088 * 1.0e4);
    $232 = ((Math_imul(Math_imul($$469, $$469) | 0, ~~($219 * 64.0e3 + $$088 * 44.0e3) - $227 | 0) | 0) >> 14) + $227 | 0;
    $spec$select133 = ($213 | 0) == 2048 ? $232 + 8e3 | 0 : $232;
    $236 = HEAP32[$0 + 14224 >> 2] | 0;
    if (($236 | 0) == 1002) $$2100 = $spec$select133 + -4e3 | 0; else $$2100 = ($236 | 0) > 0 ? $spec$select133 + 4e3 | 0 : $spec$select133;
    $242 = ($212 | 0) < ($$2100 | 0) ? 1e3 : 1002;
    $243 = $0 + 14220 | 0;
    HEAP32[$243 >> 2] = $242;
    if (!(HEAP32[$0 + 48 >> 2] | 0)) $980 = $242; else if (($182 | 0) > (128 - $$469 >> 4 | 0)) {
     HEAP32[$243 >> 2] = 1e3;
     $980 = 1e3;
    } else $980 = $242;
    do if (!(HEAP32[$0 + 184 >> 2] | 0)) {
     HEAP32[$0 + 56 >> 2] = 0;
     $981 = $980;
    } else {
     if (HEAP32[$16 >> 2] | 0) {
      HEAP32[$0 + 56 >> 2] = 0;
      $981 = $980;
      break;
     }
     HEAP32[$0 + 56 >> 2] = $$19418197 ^ 1;
     if (($$19418197 | 0) == 0 & ($$469 | 0) > 100) {
      HEAP32[$243 >> 2] = 1e3;
      $981 = 1e3;
     } else $981 = $980;
    } while (0);
    if (($$086 | 0) < ((Math_imul(($114 | 0) > 50 ? 9e3 : 6e3, $2) | 0) / ($113 << 3 | 0) | 0 | 0)) {
     HEAP32[$243 >> 2] = 1002;
     $$19418198201 = $$19418197;
     $$pre$phi113202Z2D = $243;
     $979 = 1002;
     break;
    } else {
     $$19418198 = $$19418197;
     $$pre$phi113Z2D = $243;
     $268 = $981;
    }
   } else {
    $267 = $0 + 14220 | 0;
    HEAP32[$267 >> 2] = $217;
    $$19418198 = $$19418197;
    $$pre$phi113Z2D = $267;
    $268 = $217;
   }
   if (($268 | 0) == 1002) {
    $$19418198201 = $$19418198;
    $$pre$phi113202Z2D = $$pre$phi113Z2D;
    $979 = 1002;
   } else if ((($113 | 0) / 100 | 0 | 0) > ($2 | 0)) {
    HEAP32[$$pre$phi113Z2D >> 2] = 1002;
    $$19418198201 = $$19418198;
    $$pre$phi113202Z2D = $$pre$phi113Z2D;
    $979 = 1002;
   } else {
    $$19418198201 = $$19418198;
    $$pre$phi113202Z2D = $$pre$phi113Z2D;
    $979 = $268;
   }
  } while (0);
  $272 = $0 + 176 | 0;
  if (!(HEAP32[$272 >> 2] | 0)) $278 = $979; else {
   HEAP32[$$pre$phi113202Z2D >> 2] = 1002;
   $278 = 1002;
  }
  $275 = $0 + 14224 | 0;
  $276 = HEAP32[$275 >> 2] | 0;
  do if (($276 | 0) > 0) {
   $279 = ($278 | 0) == 1002;
   if (($276 | 0) == 1002 & ($279 ^ 1)) {
    $284 = ($278 | 0) != 1002;
    $285 = $284 & 1;
    if ($284) {
     $$049 = $285;
     $$234 = 1;
     $$261 = 0;
     $295 = $278;
     break;
    } else $982 = $285;
   } else {
    if (!$279) {
     $$049 = 0;
     $$234 = 0;
     $$261 = 0;
     $295 = $278;
     break;
    }
    if (($276 | 0) == 1002) {
     $$049 = 0;
     $$234 = 0;
     $$261 = 0;
     $295 = 1002;
     break;
    }
    $982 = ($278 | 0) != 1002 & 1;
   }
   if ((($113 | 0) / 100 | 0 | 0) > ($2 | 0)) {
    $$049 = $982;
    $$234 = 0;
    $$261 = 0;
    $295 = 1002;
   } else {
    HEAP32[$$pre$phi113202Z2D >> 2] = $276;
    $$049 = $982;
    $$234 = 1;
    $$261 = 1;
    $295 = $276;
   }
  } else {
   $$049 = 0;
   $$234 = 0;
   $$261 = 0;
   $295 = $278;
  } while (0);
  if (($211 | 0) == 1) if ((HEAP32[$0 + 14228 >> 2] | 0) == 2) {
   $292 = $0 + 68 | 0;
   if ((HEAP32[$292 >> 2] | 0) != 0 | ($295 | 0) == 1002 | ($276 | 0) == 1002) label = 102; else {
    HEAP32[$292 >> 2] = 1;
    HEAP32[$$pre$phiZ2D >> 2] = 2;
    $299 = 2;
   }
  } else label = 102; else label = 102;
  if ((label | 0) == 102) {
   HEAP32[$0 + 68 >> 2] = 0;
   $299 = $211;
  }
  $300 = _compute_equiv_rate($135, $299, $114, $116, $295, $180, $182) | 0;
  if (($295 | 0) == 1002) {
   $$029206 = 0;
   $347 = 1;
   $983 = 1002;
   label = 110;
  } else {
   if (($276 | 0) == 1002) {
    _silk_InitEncoder($34, HEAP32[$0 + 180 >> 2] | 0, $17) | 0;
    $$029 = 1;
    $305 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
   } else {
    $$029 = 0;
    $305 = $295;
   }
   $306 = ($305 | 0) == 1002;
   if ($306) {
    $$029206 = $$029;
    $347 = $306;
    $983 = $305;
    label = 110;
   } else if (!(HEAP32[$0 + 14248 >> 2] | 0)) if (!(HEAP32[$0 + 84 >> 2] | 0)) {
    $$phi$trans$insert = $0 + 14236 | 0;
    $$029205 = $$029;
    $$pre$phi114Z2D = $$phi$trans$insert;
    $354 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $359 = $306;
    $397 = $305;
   } else {
    $$029206 = $$029;
    $347 = $306;
    $983 = $305;
    label = 110;
   } else {
    $$029206 = $$029;
    $347 = $306;
    $983 = $305;
    label = 110;
   }
  }
  do if ((label | 0) == 110) {
   if ((HEAP32[$100 >> 2] | 0) == 2) if ((HEAP32[$196 >> 2] | 0) == 1) label = 112; else {
    $$087 = 27808;
    $$095 = 27776;
   } else label = 112;
   if ((label | 0) == 112) {
    $$087 = 27808;
    $$095 = 27776;
   }
   $317 = Math_imul($$469, $$469) | 0;
   $$018 = 0;
   while (1) {
    if (($$018 | 0) == 8) break;
    $319 = HEAP32[$$087 + ($$018 << 2) >> 2] | 0;
    HEAP32[$18 + ($$018 << 2) >> 2] = $319 + ((Math_imul($317, (HEAP32[$$095 + ($$018 << 2) >> 2] | 0) - $319 | 0) | 0) >> 14);
    $$018 = $$018 + 1 | 0;
   }
   $330 = (HEAP32[$0 + 14248 >> 2] | 0) == 0;
   $331 = $0 + 14240 | 0;
   $333 = HEAP32[$18 + 24 >> 2] | 0;
   $335 = HEAP32[$18 + 28 >> 2] | 0;
   do if ($330) if ((HEAP32[$331 >> 2] | 0) < 1105) {
    $$163 = $333 + $335 | 0;
    break;
   } else {
    $$163 = $333 - $335 | 0;
    break;
   } else $$163 = $333; while (0);
   do if (($300 | 0) < ($$163 | 0)) {
    $342 = HEAP32[$18 + 16 >> 2] | 0;
    $344 = HEAP32[$18 + 20 >> 2] | 0;
    do if ($330) if ((HEAP32[$331 >> 2] | 0) < 1104) {
     $$163$1 = $342 + $344 | 0;
     break;
    } else {
     $$163$1 = $342 - $344 | 0;
     break;
    } else $$163$1 = $342; while (0);
    if (($300 | 0) >= ($$163$1 | 0)) {
     $$175$ph = 1104;
     label = 122;
     break;
    }
    $963 = HEAP32[$18 + 8 >> 2] | 0;
    $965 = HEAP32[$18 + 12 >> 2] | 0;
    do if ($330) if ((HEAP32[$331 >> 2] | 0) < 1103) {
     $$163$2 = $963 + $965 | 0;
     break;
    } else {
     $$163$2 = $963 - $965 | 0;
     break;
    } else $$163$2 = $963; while (0);
    if (($300 | 0) >= ($$163$2 | 0)) {
     $$175$ph = 1103;
     label = 122;
     break;
    }
    $971 = HEAP32[$18 >> 2] | 0;
    $973 = HEAP32[$18 + 4 >> 2] | 0;
    do if ($330) if ((HEAP32[$331 >> 2] | 0) < 1102) {
     $$163$3 = $971 + $973 | 0;
     break;
    } else {
     $$163$3 = $971 - $973 | 0;
     break;
    } else $$163$3 = $971; while (0);
    if (($300 | 0) < ($$163$3 | 0)) {
     $$175$ph = 1101;
     label = 122;
    } else $345 = 1103;
   } else {
    $$175$ph = 1105;
    label = 122;
   } while (0);
   if ((label | 0) == 122) $345 = $$175$ph;
   HEAP32[$331 >> 2] = $345;
   $346 = $0 + 14236 | 0;
   HEAP32[$346 >> 2] = $345;
   if ($347 | $330 ^ 1) {
    $$029205 = $$029206;
    $$pre$phi114Z2D = $346;
    $354 = $345;
    $359 = $347;
    $397 = $983;
   } else {
    if (!((HEAP32[$0 + 88 >> 2] | 0) == 0 & $345 >>> 0 > 1103)) {
     $$029205 = $$029206;
     $$pre$phi114Z2D = $346;
     $354 = $345;
     $359 = $347;
     $397 = $983;
     break;
    }
    HEAP32[$346 >> 2] = 1103;
    $$029205 = $$029206;
    $$pre$phi114Z2D = $346;
    $354 = 1103;
    $359 = $347;
    $397 = $983;
   }
  } while (0);
  $353 = HEAP32[$0 + 132 >> 2] | 0;
  if (($354 | 0) > ($353 | 0)) {
   HEAP32[$$pre$phi114Z2D >> 2] = $353;
   $984 = $353;
  } else $984 = $354;
  $357 = HEAP32[$0 + 128 >> 2] | 0;
  $358 = ($357 | 0) == -1e3;
  if ($358) $361 = $984; else {
   HEAP32[$$pre$phi114Z2D >> 2] = $357;
   $361 = $357;
  }
  if (($$pre$phi120Z2D | 0) < 1875 & ($359 ^ 1)) {
   $spec$select144 = ($361 | 0) < 1103 ? $361 : 1103;
   HEAP32[$$pre$phi114Z2D >> 2] = $spec$select144;
   $365 = $spec$select144;
  } else $365 = $361;
  $363 = HEAP32[$112 >> 2] | 0;
  $364 = ($363 | 0) < 24001;
  $366 = ($365 | 0) > 1104;
  $367 = $364 & $366 ? 1104 : $365;
  $368 = ($363 | 0) < 16001;
  $369 = ($367 | 0) > 1103;
  $spec$select188 = $368 & $369 ? 1103 : $367;
  $371 = ($363 | 0) < 12001;
  $372 = ($spec$select188 | 0) > 1102;
  $spec$select189 = $371 & $372 ? 1102 : $spec$select188;
  $374 = ($363 | 0) < 8001;
  $375 = ($spec$select189 | 0) > 1101;
  $spec$select190 = $374 & $375 ? 1101 : $spec$select189;
  if ($364 & $366 | $368 & $369 | $371 & $372 | $374 & $375) HEAP32[$$pre$phi114Z2D >> 2] = $spec$select190;
  $377 = HEAP32[$378 >> 2] | 0;
  if (!(($377 | 0) == 0 | $358 ^ 1)) {
   $380 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   do if (($300 | 0) > ($380 * 18e3 | 0) | $359 ^ 1) {
    if (!(($300 | 0) > ($380 * 24e3 | 0) | $359 ^ 1)) {
     $$328 = 1102;
     break;
    }
    if (($300 | 0) <= ($380 * 3e4 | 0)) {
     $$328 = 1103;
     break;
    }
    $$328 = ($300 | 0) > ($380 * 44e3 | 0) ? 1105 : 1104;
   } else $$328 = 1101; while (0);
   $spec$select156 = ($377 | 0) > ($$328 | 0) ? $377 : $$328;
   HEAP32[$378 >> 2] = $spec$select156;
   HEAP32[$$pre$phi114Z2D >> 2] = ($spec$select190 | 0) < ($spec$select156 | 0) ? $spec$select190 : $spec$select156;
  }
  $395 = $0 + 52 | 0;
  HEAP32[$395 >> 2] = _decide_fec(HEAP32[$0 + 48 >> 2] | 0, HEAP32[$181 >> 2] | 0, HEAP32[$395 >> 2] | 0, $397, $$pre$phi114Z2D, $300) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $spec$select121;
  _opus_custom_encoder_ctl($36, 4036, $vararg_buffer1) | 0;
  $399 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
  do if (($399 | 0) == 1002) {
   if ((HEAP32[$$pre$phi114Z2D >> 2] | 0) != 1102) break;
   HEAP32[$$pre$phi114Z2D >> 2] = 1103;
  } while (0);
  if (!(HEAP32[$272 >> 2] | 0)) $406 = HEAP32[$$pre$phi114Z2D >> 2] | 0; else {
   HEAP32[$$pre$phi114Z2D >> 2] = 1101;
   $406 = 1101;
  }
  do if (($399 | 0) == 1e3) {
   if (($406 | 0) <= 1103) {
    label = 152;
    break;
   }
   HEAP32[$$pre$phi113202Z2D >> 2] = 1001;
   $416 = 1001;
   label = 153;
  } else {
   $408 = $399;
   if (($408 | 0) != 1001) {
    $416 = $408;
    label = 153;
    break;
   }
   if (($406 | 0) >= 1104) {
    $416 = 1001;
    label = 153;
    break;
   }
   HEAP32[$$pre$phi113202Z2D >> 2] = 1e3;
   label = 152;
  } while (0);
  if ((label | 0) == 152) {
   $411 = HEAP32[$112 >> 2] | 0;
   $419 = $411;
   $441 = 1e3;
   $985 = ($411 | 0) / 50 | 0;
   label = 154;
  } else if ((label | 0) == 153) {
   $413 = HEAP32[$112 >> 2] | 0;
   $414 = ($413 | 0) / 50 | 0;
   if (($414 | 0) >= ($2 | 0) | ($416 | 0) == 1e3) {
    $419 = $413;
    $441 = $416;
    $985 = $414;
    label = 154;
   } else $$217 = $414;
  }
  do if ((label | 0) == 154) {
   if ((($419 * 3 | 0) / 50 | 0 | 0) < ($2 | 0)) {
    $425 = $419;
    $432 = $985;
    if (($441 | 0) != 1e3) {
     $$217 = $432;
     break;
    }
    if ((($425 << 1 | 0) / 25 | 0 | 0) == ($2 | 0)) {
     $$217 = ($425 | 0) / 25 | 0;
     break;
    } else {
     $429 = $425 * 3 | 0;
     $$217 = (($429 | 0) / 25 | 0 | 0) == ($2 | 0) ? ($429 | 0) / 50 | 0 : $432;
     break;
    }
   }
   $438 = $0 + 14244 | 0;
   if (!(HEAP32[$438 >> 2] | 0)) {
    $$130 = $$029205;
    $$150 = $$049;
    $$335 = $$234;
   } else {
    HEAP32[$438 >> 2] = 0;
    $$130 = 2;
    $$150 = 1;
    $$335 = 1;
   }
   if (($441 | 0) == 1002 | ($$335 | 0) == 0) {
    $$042 = 0;
    $$638 = 0;
   } else {
    $446 = _compute_redundancy_bytes($$086, HEAP32[$111 >> 2] | 0, $114, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
    $$042 = $446;
    $$638 = ($446 | 0) == 0 ? 0 : $$335;
   }
   $448 = $$086 - $$042 | 0;
   $452 = (Math_imul(HEAP32[$111 >> 2] | 0, $2) | 0) / ($419 << 3 | 0) | 0;
   $$161 = ($448 | 0) < ($452 | 0) ? $448 : $452;
   $454 = $3 + 1 | 0;
   $455 = $$086 + -1 | 0;
   _ec_enc_init($13, $454, $455);
   $456 = $$070 + $2 | 0;
   $458 = Math_imul($456, HEAP32[$100 >> 2] | 0) | 0;
   $459 = _llvm_stacksave() | 0;
   $460 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($458 << 2) | 0) + 15 & -16) | 0;
   $461 = $0 + 172 | 0;
   $464 = HEAP32[$100 >> 2] | 0;
   _memcpy($460 | 0, $0 + 14276 + ((Math_imul((HEAP32[$461 >> 2] | 0) - $$070 | 0, $464) | 0) << 2) | 0, (Math_imul($$070, $464) | 0) << 2 | 0) | 0;
   if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1002) $$064 = (_silk_lin2log(60) | 0) << 8; else $$064 = HEAP32[$34 + 8 >> 2] | 0;
   $475 = $0 + 14196 | 0;
   $476 = HEAP32[$475 >> 2] | 0;
   $477 = $$064 - $476 | 0;
   $484 = $476 + ((($477 >> 16) * 983 | 0) + ((($477 & 65535) * 983 | 0) >>> 16)) | 0;
   HEAP32[$475 >> 2] = $484;
   if ((HEAP32[$37 >> 2] | 0) == 2048) {
    $488 = _silk_log2lin($484 >> 8) | 0;
    $489 = HEAP32[$100 >> 2] | 0;
    $491 = $460 + ((Math_imul($$070, $489) | 0) << 2) | 0;
    _hp_cutoff($1, $488, $491, $0 + 14204 | 0, $2, $489, HEAP32[$112 >> 2] | 0);
   } else {
    $494 = HEAP32[$100 >> 2] | 0;
    $496 = $460 + ((Math_imul($$070, $494) | 0) << 2) | 0;
    _dc_reject($1, $496, $0 + 14204 | 0, $2, $494, HEAP32[$112 >> 2] | 0);
   }
   do if ($11 | 0) {
    $500 = HEAP32[$100 >> 2] | 0;
    $502 = $460 + ((Math_imul($$070, $500) | 0) << 2) | 0;
    $503 = Math_imul($500, $2) | 0;
    $504 = +_celt_inner_prod_c_666($502, $502, $503);
    if (!(!($504 < 1.0e9) | ($504 != $504 | 0.0 != 0.0))) break;
    _memset($502 | 0, 0, $503 << 2 | 0) | 0;
    $508 = $0 + 14204 | 0;
    HEAP32[$508 >> 2] = 0;
    HEAP32[$508 + 4 >> 2] = 0;
    HEAP32[$508 + 8 >> 2] = 0;
    HEAP32[$508 + 12 >> 2] = 0;
   } while (0);
   L237 : do if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1002) {
    $$285 = 1.0;
    $$345 = $$042;
    $$453 = $$150;
    $$582 = $406;
    $$941 = $$638;
    label = 242;
   } else {
    $512 = Math_imul(HEAP32[$100 >> 2] | 0, $2) | 0;
    $513 = _llvm_stacksave() | 0;
    $514 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($512 << 1) | 0) + 15 & -16) | 0;
    $$014 = (HEAP32[$16 >> 2] | 0) == 0 ? -1 : +HEAPF32[$16 + 36 >> 2] >= .10000000149011612 & 1;
    $523 = Math_imul(($$161 << 3) + -8 | 0, $114) | 0;
    $524 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
    $525 = ($524 | 0) == 1001;
    do if ($525) {
     $533 = _compute_silk_rate_for_hybrid($523, $406, (HEAP32[$112 >> 2] | 0) == ($2 * 50 | 0) & 1, HEAP32[$115 >> 2] | 0, HEAP32[$395 >> 2] | 0, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
     HEAP32[$0 + 36 >> 2] = $533;
     $536 = HEAP32[$0 + 14252 >> 2] | 0;
     if ($536 | 0) {
      $$184219 = 1.0;
      $559 = $536;
      $578 = $533;
      label = 180;
      break;
     }
     $$184217 = 1.0 - +Math_exp(+(+($533 - $523 | 0) * .0009765625 * .6931471805599453));
     $623 = $533;
    } else {
     HEAP32[$0 + 36 >> 2] = $523;
     $$pre104 = HEAP32[$0 + 14252 >> 2] | 0;
     if (!$$pre104) {
      $$184217 = 1.0;
      $623 = $523;
     } else {
      $$184219 = 1.0;
      $559 = $$pre104;
      $578 = $523;
      label = 180;
     }
    } while (0);
    do if ((label | 0) == 180) {
     if (!(HEAP32[$115 >> 2] | 0)) {
      $$184217 = $$184219;
      $623 = $578;
      break;
     }
     if (HEAP32[$272 >> 2] | 0) {
      $$184217 = $$184219;
      $623 = $578;
      break;
     }
     $552 = HEAP32[$$pre$phi114Z2D >> 2] | 0;
     switch ($552 | 0) {
     case 1101:
      {
       $$110 = 13;
       $$18 = 8.0e3;
       break;
      }
     case 1102:
      {
       $$110 = 15;
       $$18 = 12.0e3;
       break;
      }
     default:
      {
       $$110 = 17;
       $$18 = 16.0e3;
      }
     }
     $553 = HEAP32[$100 >> 2] | 0;
     $$011 = 0;
     $$012 = 0.0;
     while (1) {
      if (($$011 | 0) >= ($553 | 0)) break;
      $555 = $$011 * 21 | 0;
      $$113 = $$012;
      $$119 = 0;
      while (1) {
       if ($$119 >>> 0 >= $$110 >>> 0) break;
       $560 = +HEAPF32[$559 + ($555 + $$119 << 2) >> 2];
       $561 = $560 < .5;
       do if ($560 > -2.0 | $561 ^ 1) {
        if ($561) if ($560 > 0.0) $565 = $560; else {
         $$06 = $560;
         break;
        } else $565 = .5;
        $$06 = $565 * .5;
       } else $$06 = -2.0; while (0);
       $$113 = $$113 + $$06;
       $$119 = $$119 + 1 | 0;
      }
      $$011 = $$011 + 1 | 0;
      $$012 = $$113;
     }
     $575 = ~~(($$012 / +($$110 | 0) * +($553 | 0) + .20000000298023224) * $$18);
     $576 = $0 + 36 | 0;
     $579 = (Math_imul($578, -2) | 0) / 3 | 0;
     $spec$select166 = ($579 | 0) < ($575 | 0) ? $575 : $579;
     if (($552 & -2 | 0) == 1104) {
      $584 = $578 + (($spec$select166 * 3 | 0) / 5 | 0) | 0;
      HEAP32[$576 >> 2] = $584;
      $$184217 = $$184219;
      $623 = $584;
      break;
     } else {
      $585 = $578 + $spec$select166 | 0;
      HEAP32[$576 >> 2] = $585;
      $$184217 = $$184219;
      $623 = $585;
      break;
     }
    } while (0);
    $587 = HEAP32[$112 >> 2] | 0;
    HEAP32[$0 + 32 >> 2] = ($2 * 1e3 | 0) / ($587 | 0) | 0;
    $590 = HEAP32[$100 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = $590;
    $592 = HEAP32[$$pre$phiZ2D >> 2] | 0;
    HEAP32[$0 + 12 >> 2] = $592;
    L269 : do switch ($406 | 0) {
    case 1101:
     {
      HEAP32[$0 + 28 >> 2] = 8e3;
      $606 = 8e3;
      break;
     }
    case 1102:
     {
      HEAP32[$0 + 28 >> 2] = 12e3;
      $606 = 12e3;
      break;
     }
    default:
     if ($525 | ($406 | 0) == 1103) {
      HEAP32[$0 + 28 >> 2] = 16e3;
      $606 = 16e3;
      break L269;
     } else _celt_fatal(50252, 50339, 1755);
    } while (0);
    HEAP32[$0 + 24 >> 2] = $525 ? 16e3 : 8e3;
    $599 = $0 + 20 | 0;
    HEAP32[$599 >> 2] = 16e3;
    do if (($524 | 0) == 1e3) {
     if (($114 | 0) > 50) $$05 = ($$pre$phi120Z2D << 4 | 0) / 3 | 0; else $$05 = $178;
     if (($$05 | 0) >= 8e3) break;
     HEAP32[$599 >> 2] = 12e3;
     $605 = $0 + 28 | 0;
     HEAP32[$605 >> 2] = $606 >>> 0 < 12e3 ? $606 : 12e3;
     if (($$05 | 0) >= 7e3) break;
     HEAP32[$599 >> 2] = 8e3;
     HEAP32[$605 >> 2] = 8e3;
    } while (0);
    $609 = HEAP32[$115 >> 2] | 0;
    $610 = ($609 | 0) == 0;
    HEAP32[$0 + 60 >> 2] = $610 & 1;
    $614 = ($$086 << 3) + -8 | 0;
    $615 = $0 + 64 | 0;
    HEAP32[$615 >> 2] = $614;
    do if (($$638 | 0) != 0 & ($$042 | 0) > 1) {
     $620 = $614 - ($$042 << 3 | 1) | 0;
     HEAP32[$615 >> 2] = $620;
     if (!$525) {
      $625 = $620;
      break;
     }
     $621 = $620 + -20 | 0;
     HEAP32[$615 >> 2] = $621;
     $625 = $621;
    } else $625 = $614; while (0);
    do if ($610) {
     if (!$525) break;
     $624 = (Math_imul($623, $2) | 0) / ($587 | 0) | 0;
     HEAP32[$615 >> 2] = ($625 | 0) < ($624 | 0) ? $625 : $624;
    } else {
     if (!$525) break;
     $628 = (Math_imul($625, $587) | 0) / ($2 | 0) | 0;
     HEAP32[$615 >> 2] = (Math_imul(_compute_silk_rate_for_hybrid($628, $406, ($587 | 0) == ($2 * 50 | 0) & 1, $609, HEAP32[$395 >> 2] | 0, $592) | 0, $2) | 0) / ($587 | 0) | 0;
    } while (0);
    if (!$$130) $664 = $590; else {
     HEAP32[$19 >> 2] = 0;
     $641 = ($587 | 0) / 400 | 0;
     $643 = Math_imul($590, (HEAP32[$461 >> 2] | 0) - (HEAP32[$0 + 116 >> 2] | 0) - $641 | 0) | 0;
     $644 = $0 + 14276 + ($643 << 2) | 0;
     $645 = HEAP32[$15 >> 2] | 0;
     _gain_fade($644, $644, 0.0, 1.0, HEAP32[$645 + 4 >> 2] | 0, $641, $590, HEAP32[$645 + 60 >> 2] | 0, $587);
     _memset($0 + 14276 | 0, 0, $643 << 2 | 0) | 0;
     $652 = HEAP32[$461 >> 2] | 0;
     $654 = Math_imul($652, HEAP32[$100 >> 2] | 0) | 0;
     $$220 = 0;
     while (1) {
      if (($$220 | 0) >= ($654 | 0)) break;
      HEAP16[$514 + ($$220 << 1) >> 1] = _FLOAT2INT16_669(+HEAPF32[$0 + 14276 + ($$220 << 2) >> 2]) | 0;
      $$220 = $$220 + 1 | 0;
     }
     _silk_Encode($34, $0 + 8 | 0, $514, $652, 0, $19, $$130, $$014) | 0;
     HEAP32[$0 + 72 >> 2] = 0;
     $664 = HEAP32[$100 >> 2] | 0;
    }
    $663 = Math_imul($664, $2) | 0;
    $$3 = 0;
    while (1) {
     if (($$3 | 0) >= ($663 | 0)) break;
     HEAP16[$514 + ($$3 << 1) >> 1] = _FLOAT2INT16_669(+HEAPF32[$460 + ((Math_imul($$070, $664) | 0) + $$3 << 2) >> 2]) | 0;
     $$3 = $$3 + 1 | 0;
    }
    do if (!(_silk_Encode($34, $0 + 8 | 0, $514, $2, $13, $12, 0, $$014) | 0)) {
     $676 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
     $679 = HEAP32[$0 + 80 >> 2] | 0;
     L308 : do if (($676 | 0) == 1e3) {
      L310 : do if (($679 | 0) < 12e3) switch ($679 | 0) {
      case 8e3:
       {
        $$380 = 1101;
        break L308;
        break;
       }
      default:
       {}
      } else if (($679 | 0) < 16e3) {
       switch ($679 | 0) {
       case 12e3:
        break;
       default:
        break L310;
       }
       $$380 = 1102;
       break L308;
      } else {
       switch ($679 | 0) {
       case 16e3:
        break;
       default:
        break L310;
       }
       $$380 = 1103;
       break L308;
      } while (0);
      $$380 = $406;
     } else {
      if (($679 | 0) == 16e3) {
       $$380 = $406;
       break;
      }
      _celt_fatal(50358, 50339, 1863);
     } while (0);
     if (!(HEAP32[$0 + 96 >> 2] | 0)) $688 = 0; else $688 = (HEAP32[$0 + 18128 >> 2] | 0) == 0;
     HEAP32[$0 + 72 >> 2] = $688 & 1;
     if (!(HEAP32[$12 >> 2] | 0)) {
      HEAP32[$24 >> 2] = 0;
      HEAP8[$3 >> 0] = _gen_toc($676, (HEAP32[$112 >> 2] | 0) / ($2 | 0) | 0, $$380, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      $$0 = 1;
      break;
     }
     if ($688) {
      $698 = _compute_redundancy_bytes($$086, HEAP32[$111 >> 2] | 0, $114, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      HEAP32[$438 >> 2] = 1;
      $$244$ph = $698;
      $$352$ph = 0;
      $$840$ph = ($698 | 0) != 0 & 1;
     } else {
      $$244$ph = $$042;
      $$352$ph = $$150;
      $$840$ph = $$638;
     }
     _llvm_stackrestore($513 | 0);
     $$285 = $$184217;
     $$345 = $$244$ph;
     $$453 = $$352$ph;
     $$582 = $$380;
     $$941 = $$840$ph;
     label = 242;
     break L237;
    } else $$0 = -3; while (0);
    _llvm_stackrestore($513 | 0);
    $$1 = $$0;
   } while (0);
   L332 : do if ((label | 0) == 242) {
    switch ($$582 | 0) {
    case 1101:
     {
      $$03 = 13;
      break;
     }
    case 1103:
    case 1102:
     {
      $$03 = 17;
      break;
     }
    case 1104:
     {
      $$03 = 19;
      break;
     }
    default:
     $$03 = 21;
    }
    HEAP32[$vararg_buffer4 >> 2] = $$03;
    _opus_custom_encoder_ctl($36, 10012, $vararg_buffer4) | 0;
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
    _opus_custom_encoder_ctl($36, 10008, $vararg_buffer7) | 0;
    HEAP32[$vararg_buffer10 >> 2] = -1;
    _opus_custom_encoder_ctl($36, 4002, $vararg_buffer10) | 0;
    do if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1e3) {
     $704 = HEAP32[$100 >> 2] | 0;
     $$alloca_mul98 = ((Math_imul($704, HEAP32[$112 >> 2] | 0) | 0) / 400 | 0) << 2;
     $708 = STACKTOP;
     STACKTOP = STACKTOP + ((1 * $$alloca_mul98 | 0) + 15 & -16) | 0;
     $753 = $704;
     $864 = $708;
    } else {
     HEAP32[$vararg_buffer13 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 4006, $vararg_buffer13) | 0;
     HEAP32[$vararg_buffer16 >> 2] = (HEAP32[$0 + 76 >> 2] | 0) == 0 ? 2 : 0;
     _opus_custom_encoder_ctl($36, 10002, $vararg_buffer16) | 0;
     $712 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
     $715 = (HEAP32[$115 >> 2] | 0) == 0;
     do if (($712 | 0) == 1001) if ($715) {
      $716 = HEAP32[$100 >> 2] | 0;
      $717 = HEAP32[$112 >> 2] | 0;
      $719 = (Math_imul($716, $717) | 0) / 400 | 0;
      $720 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($719 << 2) | 0) + 15 & -16) | 0;
      $736 = $712;
      $742 = $717;
      $745 = $716;
      $748 = $719;
      $749 = $720;
      break;
     } else {
      HEAP32[$vararg_buffer19 >> 2] = (HEAP32[$111 >> 2] | 0) - (HEAP32[$0 + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($36, 4002, $vararg_buffer19) | 0;
      HEAP32[$vararg_buffer22 >> 2] = 0;
      _opus_custom_encoder_ctl($36, 4020, $vararg_buffer22) | 0;
      label = 254;
      break;
     } else {
      if ($715) {
       $733 = $712;
       label = 255;
       break;
      }
      HEAP32[$vararg_buffer25 >> 2] = 1;
      _opus_custom_encoder_ctl($36, 4006, $vararg_buffer25) | 0;
      HEAP32[$vararg_buffer28 >> 2] = HEAP32[$0 + 152 >> 2];
      _opus_custom_encoder_ctl($36, 4020, $vararg_buffer28) | 0;
      HEAP32[$vararg_buffer31 >> 2] = HEAP32[$111 >> 2];
      _opus_custom_encoder_ctl($36, 4002, $vararg_buffer31) | 0;
      label = 254;
     } while (0);
     if ((label | 0) == 254) {
      $733 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
      label = 255;
     }
     if ((label | 0) == 255) {
      $728 = HEAP32[$100 >> 2] | 0;
      $729 = HEAP32[$112 >> 2] | 0;
      $731 = (Math_imul($728, $729) | 0) / 400 | 0;
      $732 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * ($731 << 2) | 0) + 15 & -16) | 0;
      if (($733 | 0) == 1e3) {
       $753 = $728;
       $864 = $732;
       break;
      } else {
       $736 = $733;
       $742 = $729;
       $745 = $728;
       $748 = $731;
       $749 = $732;
      }
     }
     $735 = HEAP32[$275 >> 2] | 0;
     if (!(($736 | 0) != ($735 | 0) & ($735 | 0) > 0)) {
      $753 = $745;
      $864 = $749;
      break;
     }
     _memcpy($749 | 0, $0 + 14276 + ((Math_imul((HEAP32[$461 >> 2] | 0) - $$070 - (($742 | 0) / 400 | 0) | 0, $745) | 0) << 2) | 0, $748 << 2 | 0) | 0;
     $753 = $745;
     $864 = $749;
    } while (0);
    $750 = HEAP32[$461 >> 2] | 0;
    $755 = $0 + 14276 | 0;
    if ((Math_imul($753, $750 - $456 | 0) | 0) > 0) {
     $760 = Math_imul($753, $750 - $2 - $$070 | 0) | 0;
     _memmove($755 | 0, $0 + 14276 + ((Math_imul($753, $2) | 0) << 2) | 0, $760 << 2 | 0) | 0;
     _memcpy($0 + 14276 + ($760 << 2) | 0, $460 | 0, (Math_imul($456, $753) | 0) << 2 | 0) | 0;
    } else _memcpy($755 | 0, $460 + ((Math_imul($456 - $750 | 0, $753) | 0) << 2) | 0, (Math_imul($750, $753) | 0) << 2 | 0) | 0;
    $770 = $0 + 14200 | 0;
    $771 = +HEAPF32[$770 >> 2];
    if ($771 < 1.0 | $$285 < 1.0) {
     $774 = HEAP32[$15 >> 2] | 0;
     _gain_fade($460, $460, $771, $$285, HEAP32[$774 + 4 >> 2] | 0, $2, HEAP32[$100 >> 2] | 0, HEAP32[$774 + 60 >> 2] | 0, HEAP32[$112 >> 2] | 0);
    }
    HEAPF32[$770 >> 2] = $$285;
    $781 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
    if (($781 | 0) == 1001) {
     if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == 1) label = 265;
    } else label = 265;
    do if ((label | 0) == 265) {
     if (($300 | 0) > 32e3) {
      HEAP32[$0 + 92 >> 2] = 16384;
      break;
     }
     if (($300 | 0) < 16e3) {
      HEAP32[$0 + 92 >> 2] = 0;
      break;
     } else {
      HEAP32[$0 + 92 >> 2] = 16384 - ((65536e3 - ($300 << 11) | 0) / ($300 + -14e3 | 0) | 0);
      break;
     }
    } while (0);
    do if (!(HEAP32[$0 + 14252 >> 2] | 0)) {
     if ((HEAP32[$100 >> 2] | 0) != 2) {
      $816 = $781;
      break;
     }
     $800 = $0 + 14192 | 0;
     $801 = HEAP16[$800 >> 1] | 0;
     $$phi$trans$insert107 = $0 + 92 | 0;
     $$pre108 = HEAP32[$$phi$trans$insert107 >> 2] | 0;
     if (!($801 << 16 >> 16 < 16384 | ($$pre108 | 0) < 16384)) {
      $816 = $781;
      break;
     }
     $808 = HEAP32[$15 >> 2] | 0;
     _stereo_fade($460, $460, +($801 << 16 >> 16) * .00006103515625, +($$pre108 | 0) * .00006103515625, HEAP32[$808 + 4 >> 2] | 0, $2, 2, HEAP32[$808 + 60 >> 2] | 0, HEAP32[$112 >> 2] | 0);
     HEAP16[$800 >> 1] = HEAP32[$$phi$trans$insert107 >> 2];
     $816 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
    } else $816 = $781; while (0);
    do if (($816 | 0) == 1002) label = 284; else {
     $$idx10 = $13 + 20 | 0;
     $$idx11 = $13 + 28 | 0;
     $819 = (_ec_tell_671(HEAP32[$$idx10 >> 2] | 0, HEAP32[$$idx11 >> 2] | 0) | 0) + 17 | 0;
     $820 = ($816 | 0) == 1001;
     if (($819 + ($820 ? 20 : 0) | 0) > (($$086 << 3) + -8 | 0)) {
      label = 284;
      break;
     }
     if ($820) _ec_enc_bit_logp($13, $$941, 12);
     if (!$$941) {
      label = 284;
      break;
     }
     _ec_enc_bit_logp($13, $$453, 1);
     $828 = (HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1001;
     $829 = _ec_tell_671(HEAP32[$$idx10 >> 2] | 0, HEAP32[$$idx11 >> 2] | 0) | 0;
     $$01 = $455 - ($829 + ($828 ? 18 : 7) >> 3) | 0;
     $spec$select179 = ($$01 | 0) < ($$345 | 0) ? $$01 : $$345;
     if (($spec$select179 | 0) < 2) {
      $986 = 2;
      label = 281;
     } else if (($spec$select179 | 0) > 257) $834 = 257; else {
      $986 = $spec$select179;
      label = 281;
     }
     if ((label | 0) == 281) $834 = $986;
     if (!$828) {
      $$1074 = $$941;
      $$648 = $834;
      break;
     }
     _ec_enc_uint($13, $834 + -2 | 0, 256);
     $$1074 = $$941;
     $$648 = $834;
    } while (0);
    if ((label | 0) == 284) {
     HEAP32[$438 >> 2] = 0;
     $$1074 = 0;
     $$648 = 0;
    }
    $835 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
    $spec$select180 = ($835 | 0) == 1002 ? 0 : 17;
    if (($835 | 0) == 1e3) {
     $840 = (_ec_tell_671(HEAP32[$13 + 20 >> 2] | 0, HEAP32[$13 + 28 >> 2] | 0) | 0) + 7 >> 3;
     _ec_enc_done($13);
     $$054 = $840;
     $$324 = $840;
    } else {
     $841 = $455 - $$648 | 0;
     _ec_enc_shrink($13, $841);
     $$054 = $841;
     $$324 = 0;
    }
    $842 = ($$1074 | 0) == 0;
    if ($842) {
     if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) != 1e3) label = 290;
    } else label = 290;
    do if ((label | 0) == 290) {
     HEAP32[$vararg_buffer34 >> 2] = $16;
     _opus_custom_encoder_ctl($36, 10022, $vararg_buffer34) | 0;
     if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1001) {
      HEAP32[$20 >> 2] = HEAP32[$0 + 100 >> 2];
      HEAP32[$20 + 4 >> 2] = HEAP32[$0 + 104 >> 2];
      HEAP32[$vararg_buffer37 >> 2] = $20;
      _opus_custom_encoder_ctl($36, 10028, $vararg_buffer37) | 0;
     }
     if ($842 | ($$453 | 0) == 0) break;
     HEAP32[$vararg_buffer40 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 10010, $vararg_buffer40) | 0;
     HEAP32[$vararg_buffer43 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 4006, $vararg_buffer43) | 0;
     HEAP32[$vararg_buffer46 >> 2] = -1;
     _opus_custom_encoder_ctl($36, 4002, $vararg_buffer46) | 0;
     if ((_celt_encode_with_ec($36, $460, (HEAP32[$112 >> 2] | 0) / 200 | 0, $454 + $$054 | 0, $$648, 0) | 0) < 0) {
      $$1 = -3;
      break L332;
     }
     HEAP32[$vararg_buffer49 >> 2] = $14;
     _opus_custom_encoder_ctl($36, 4031, $vararg_buffer49) | 0;
     _opus_custom_encoder_ctl($36, 4028, $vararg_buffer52) | 0;
    } while (0);
    HEAP32[$vararg_buffer54 >> 2] = $spec$select180;
    _opus_custom_encoder_ctl($36, 10010, $vararg_buffer54) | 0;
    $857 = HEAP32[$$pre$phi113202Z2D >> 2] | 0;
    do if (($857 | 0) == 1e3) label = 309; else {
     $859 = HEAP32[$275 >> 2] | 0;
     if (($857 | 0) != ($859 | 0) & ($859 | 0) > 0) {
      _opus_custom_encoder_ctl($36, 4028, $vararg_buffer57) | 0;
      _celt_encode_with_ec($36, $864, (HEAP32[$112 >> 2] | 0) / 400 | 0, $21, 2, 0) | 0;
      HEAP32[$vararg_buffer59 >> 2] = 0;
      _opus_custom_encoder_ctl($36, 10002, $vararg_buffer59) | 0;
     }
     if ((_ec_tell_671(HEAP32[$13 + 20 >> 2] | 0, HEAP32[$13 + 28 >> 2] | 0) | 0) > ($$054 << 3 | 0)) {
      label = 309;
      break;
     }
     do if (!($842 | ($$453 | 0) == 0)) {
      if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) != 1001) break;
      if (!(HEAP32[$115 >> 2] | 0)) break;
      HEAP32[$vararg_buffer62 >> 2] = (HEAP32[$111 >> 2] | 0) - (HEAP32[$0 + 36 >> 2] | 0);
      _opus_custom_encoder_ctl($36, 4002, $vararg_buffer62) | 0;
     } while (0);
     HEAP32[$vararg_buffer65 >> 2] = HEAP32[$115 >> 2];
     _opus_custom_encoder_ctl($36, 4006, $vararg_buffer65) | 0;
     $878 = _celt_encode_with_ec($36, $460, $2, 0, $$054, $13) | 0;
     if (($878 | 0) < 0) {
      $$1 = -3;
      break L332;
     }
     if ($842) {
      $$107681 = 0;
      $$584 = $878;
      break;
     }
     if (!$$453) {
      $$58394 = $878;
      label = 311;
      break;
     }
     if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) != 1001) {
      $$107681 = $$1074;
      $$584 = $878;
      break;
     }
     if (!(HEAP32[$115 >> 2] | 0)) {
      $$107681 = $$1074;
      $$584 = $878;
      break;
     }
     _memmove($454 + $878 | 0, $454 + $$054 | 0, $$648 | 0) | 0;
     $$107681 = $$1074;
     $$584 = $878;
    } while (0);
    do if ((label | 0) == 309) {
     if ($842) {
      $$107681 = 0;
      $$584 = $$324;
      break;
     }
     if (!$$453) {
      $$58394 = $$324;
      label = 311;
     } else {
      $$107681 = $$1074;
      $$584 = $$324;
     }
    } while (0);
    if ((label | 0) == 311) {
     $888 = HEAP32[$112 >> 2] | 0;
     $889 = ($888 | 0) / 200 | 0;
     $890 = ($888 | 0) / 400 | 0;
     _opus_custom_encoder_ctl($36, 4028, $vararg_buffer68) | 0;
     HEAP32[$vararg_buffer70 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 10010, $vararg_buffer70) | 0;
     HEAP32[$vararg_buffer73 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 10002, $vararg_buffer73) | 0;
     HEAP32[$vararg_buffer76 >> 2] = 0;
     _opus_custom_encoder_ctl($36, 4006, $vararg_buffer76) | 0;
     HEAP32[$vararg_buffer79 >> 2] = -1;
     _opus_custom_encoder_ctl($36, 4002, $vararg_buffer79) | 0;
     if ((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1001) {
      _ec_enc_shrink($13, $$58394);
      $$458 = $$58394;
     } else $$458 = $$054;
     $894 = $2 - $889 | 0;
     _celt_encode_with_ec($36, $460 + ((Math_imul(HEAP32[$100 >> 2] | 0, $894 - $890 | 0) | 0) << 2) | 0, $890, $22, 2, 0) | 0;
     if ((_celt_encode_with_ec($36, $460 + ((Math_imul(HEAP32[$100 >> 2] | 0, $894) | 0) << 2) | 0, $889, $454 + $$458 | 0, $$648, 0) | 0) < 0) {
      $$1 = -3;
      break;
     }
     HEAP32[$vararg_buffer82 >> 2] = $14;
     _opus_custom_encoder_ctl($36, 4031, $vararg_buffer82) | 0;
     $$107681 = $$1074;
     $$584 = $$58394;
    }
    HEAP8[$3 >> 0] = _gen_toc(HEAP32[$$pre$phi113202Z2D >> 2] | 0, (HEAP32[$112 >> 2] | 0) / ($2 | 0) | 0, $$582, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
    $909 = $13 + 28 | 0;
    $910 = HEAP32[$909 >> 2] | 0;
    HEAP32[$24 >> 2] = $910 ^ HEAP32[$14 >> 2];
    if (!$$261) $$sink97 = HEAP32[$$pre$phi113202Z2D >> 2] | 0; else $$sink97 = 1002;
    HEAP32[$275 >> 2] = $$sink97;
    HEAP32[$0 + 14228 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
    HEAP32[$0 + 14232 >> 2] = $2;
    HEAP32[$0 + 14248 >> 2] = 0;
    do if (!(HEAP32[$0 + 184 >> 2] | 0)) $$idx1$val = $910; else {
     if (!(HEAP32[$16 >> 2] | $$19418198201)) {
      $$idx1$val = $910;
      break;
     }
     if (!(_decide_dtx_mode(+HEAPF32[$16 + 36 >> 2], $0 + 18120 | 0, +HEAPF32[$0 + 18124 >> 2], $1, $2, HEAP32[$100 >> 2] | 0, $$19418198201) | 0)) {
      $$idx1$val = HEAP32[$909 >> 2] | 0;
      break;
     } else {
      HEAP32[$24 >> 2] = 0;
      HEAP8[$3 >> 0] = _gen_toc(HEAP32[$$pre$phi113202Z2D >> 2] | 0, (HEAP32[$112 >> 2] | 0) / ($2 | 0) | 0, $$582, HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
      $$1 = 1;
      break L332;
     }
    } while (0);
    L445 : do if ((_ec_tell_671(HEAP32[$13 + 20 >> 2] | 0, $$idx1$val) | 0) > (($$086 << 3) + -8 | 0)) {
     if (($$086 | 0) < 2) {
      $$1 = -2;
      break L332;
     }
     HEAP8[$454 >> 0] = 0;
     HEAP32[$24 >> 2] = 0;
     $$8 = 1;
    } else {
     if (!((HEAP32[$$pre$phi113202Z2D >> 2] | 0) == 1e3 & ($$107681 | 0) == 0)) {
      $$8 = $$584;
      break;
     }
     $$6 = $$584;
     while (1) {
      if (($$6 | 0) <= 2) {
       $$8 = $$6;
       break L445;
      }
      if (HEAP8[$3 + $$6 >> 0] | 0) {
       $$8 = $$6;
       break L445;
      }
      $$6 = $$6 + -1 | 0;
     }
    } while (0);
    $952 = $$8 + ($$648 + 1) | 0;
    if (!(HEAP32[$115 >> 2] | 0)) if (!(_opus_packet_pad($3, $952, $$086) | 0)) $$9 = $$086; else {
     $$1 = -3;
     break;
    } else $$9 = $952;
    $$1 = $$9;
   } while (0);
   _llvm_stackrestore($459 | 0);
   $$2 = $$1;
   STACKTOP = sp;
   return $$2 | 0;
  } while (0);
  if (($$19022195 | 0) != -1) {
   HEAP32[$0 + 7636 >> 2] = $$19022195;
   HEAP32[$0 + 7640 >> 2] = $$19220196;
  }
  $$2 = _encode_multiframe_packet($0, $1, ($2 | 0) / ($$217 | 0) | 0, $$217, $3, $4, $$261, $spec$select121, $11) | 0;
  STACKTOP = sp;
  return $$2 | 0;
 } while (0);
 $142 = HEAP32[$0 + 14220 >> 2] | 0;
 $144 = HEAP32[$0 + 14236 >> 2] | 0;
 $spec$select125 = ($144 | 0) == 0 ? 1101 : $144;
 $$0102 = ($142 | 0) == 0 ? 1e3 : $142;
 L466 : do if (($114 | 0) > 100) {
  $$11133192 = 0;
  $$21113491 = 0;
  $$2734089 = $114;
  label = 50;
 } else {
  do if (($114 | 0) == 25) if (($$0102 | 0) == 1e3) {
   $$111332 = 0;
   $$211135 = 0;
   $$27341 = 25;
  } else {
   $$1113 = 0;
   $$2111 = 1;
   $$273 = 50;
   label = 48;
  } else if (($114 | 0) < 17) {
   if (($4 | 0) != 1) if (($$0102 | 0) != 1e3 | ($114 | 0) == 10) {
    $$1113 = 50 / ($114 | 0) | 0;
    $$2111 = 3;
    $$273 = 50;
    label = 48;
    break;
   }
   $$111332 = 0;
   $$211135 = ($114 | 0) < 13 & 1;
   $$27341 = ($114 | 0) == 12 ? 25 : 16;
  } else {
   $$1113 = 0;
   $$2111 = 0;
   $$273 = $114;
   label = 48;
  } while (0);
  L476 : do if ((label | 0) == 48) {
   switch ($$0102 | 0) {
   case 1002:
    {
     $$11133192 = $$1113;
     $$21113491 = $$2111;
     $$2734089 = $$273;
     label = 50;
     break L466;
     break;
    }
   case 1e3:
    {
     $$111332 = $$1113;
     $$211135 = $$2111;
     $$27341 = $$273;
     break L476;
     break;
    }
   case 1001:
    break;
   default:
    {
     $$111330 = $$1113;
     $$2108 = $spec$select125;
     $$211133 = $$2111;
     $$27339 = $$273;
     $$310536 = $$0102;
     break L466;
    }
   }
   $$111330 = $$1113;
   $$2108 = ($spec$select125 | 0) > 1104 ? $spec$select125 : 1104;
   $$211133 = $$2111;
   $$27339 = $$273;
   $$310536 = 1001;
   break L466;
  } while (0);
  if (($spec$select125 | 0) > 1103) {
   $$111330 = $$111332;
   $$2108 = 1103;
   $$211133 = $$211135;
   $$27339 = $$27341;
   $$310536 = 1e3;
  } else {
   $$11133150$ph = $$111332;
   $$21113448$ph = $$211135;
   $$2734044$ph = $$27341;
   $$31053745$ph = 1e3;
   label = 51;
  }
 } while (0);
 if ((label | 0) == 50) if (($spec$select125 | 0) == 1102) {
  $$111330 = $$11133192;
  $$2108 = 1101;
  $$211133 = $$21113491;
  $$27339 = $$2734089;
  $$310536 = 1002;
 } else {
  $$11133150$ph = $$11133192;
  $$21113448$ph = $$21113491;
  $$2734044$ph = $$2734089;
  $$31053745$ph = 1002;
  label = 51;
 }
 if ((label | 0) == 51) {
  $$111330 = $$11133150$ph;
  $$2108 = $spec$select125;
  $$211133 = $$21113448$ph;
  $$27339 = $$2734044$ph;
  $$310536 = $$31053745$ph;
 }
 HEAP8[$3 >> 0] = $$211133 | (_gen_toc($$310536, $$27339, $$2108, HEAP32[$0 + 14188 >> 2] | 0) | 0) & 255;
 $169 = ($$211133 | 0) < 2 ? 1 : 2;
 $spec$select128 = ($$08625 | 0) > ($169 | 0) ? $$08625 : $169;
 if (($$211133 | 0) == 3) HEAP8[$3 + 1 >> 0] = $$111330;
 if (!(HEAP32[$115 >> 2] | 0)) {
  $177 = (_opus_packet_pad($3, $169, $spec$select128) | 0) == 0;
  STACKTOP = sp;
  return ($177 ? $spec$select128 : -3) | 0;
 } else {
  $$2 = $169;
  STACKTOP = sp;
  return $$2 | 0;
 }
 return 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1001 = 0, $1006 = 0, $101 = 0, $1012 = 0, $1015 = 0, $1016 = 0, $102 = 0, $1023 = 0, $1035 = 0, $1040 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $1058 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $340 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $563 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $595 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $609 = 0, $618 = 0, $619 = 0, $62 = 0, $625 = 0, $627 = 0, $631 = 0, $634 = 0, $636 = 0, $64 = 0, $640 = 0, $642 = 0, $647 = 0, $648 = 0, $649 = 0, $655 = 0, $656 = 0, $657 = 0, $661 = 0, $67 = 0, $671 = 0, $673 = 0, $678 = 0, $679 = 0, $680 = 0, $686 = 0, $688 = 0, $69 = 0, $692 = 0, $698 = 0, $7 = 0, $70 = 0, $702 = 0, $708 = 0, $71 = 0, $710 = 0, $716 = 0, $72 = 0, $720 = 0, $721 = 0, $726 = 0, $73 = 0, $732 = 0, $737 = 0, $740 = 0, $741 = 0, $744 = 0, $746 = 0, $748 = 0, $750 = 0, $762 = 0, $767 = 0, $769 = 0, $77 = 0, $772 = 0, $774 = 0, $777 = 0, $780 = 0, $781 = 0, $782 = 0, $784 = 0, $786 = 0, $787 = 0, $789 = 0, $790 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $805 = 0, $810 = 0, $813 = 0, $814 = 0, $820 = 0, $828 = 0, $83 = 0, $834 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $843 = 0, $844 = 0, $850 = 0, $855 = 0, $856 = 0, $859 = 0, $861 = 0, $864 = 0, $869 = 0, $87 = 0, $875 = 0, $877 = 0, $879 = 0, $880 = 0, $887 = 0, $899 = 0, $9 = 0, $904 = 0, $911 = 0, $912 = 0, $913 = 0, $92 = 0, $921 = 0, $925 = 0, $929 = 0, $93 = 0, $931 = 0, $937 = 0, $938 = 0, $940 = 0, $941 = 0, $943 = 0, $945 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $958 = 0, $96 = 0, $960 = 0, $966 = 0, $971 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $987 = 0, $992 = 0, $993 = 0, $996 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $960$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[12620] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 50520 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[12620] = $8 & ~(1 << $14); else {
    if ((HEAP32[12624] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[12622] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 50520 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[12620] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[12624] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[12625] | 0;
     $93 = $37 >>> 3;
     $95 = 50520 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[12620] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[12624] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[12622] = $84;
    HEAP32[12625] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[12621] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[50784 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[12624] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 50784 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[12621] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[12624] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[12624] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[12624] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[12625] | 0;
      $229 = $37 >>> 3;
      $231 = 50520 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[12620] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[12624] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[12622] = $$0191$i;
     HEAP32[12625] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[12621] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[50784 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[50784 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $340 = HEAP32[$$535618$i + 20 >> 2] | 0; else $340 = $336;
     if (!$340) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $340;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[12622] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[12624] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 50784 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[12621] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[12624] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[12624] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[12624] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 50520 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[12620] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[12620] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[12624] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 50784 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($469 & $467)) {
      HEAP32[12621] = $469 | $467;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[12624] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[12624] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[12622] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[12625] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[12625] = $515;
   HEAP32[12622] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[12622] = 0;
   HEAP32[12625] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[12623] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[12623] = $530;
  $531 = HEAP32[12626] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[12626] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[12738] | 0)) {
  HEAP32[12740] = 4096;
  HEAP32[12739] = 4096;
  HEAP32[12741] = -1;
  HEAP32[12742] = -1;
  HEAP32[12743] = 0;
  HEAP32[12731] = 0;
  HEAP32[12738] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[12740] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[12730] | 0;
 if ($550 | 0) {
  $552 = HEAP32[12728] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[12731] & 4)) {
  $559 = HEAP32[12626] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 50928;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) {
     $563 = $$0$i$i + 4 | 0;
     if (($561 + (HEAP32[$563 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    }
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $595 = _sbrk($593 | 0) | 0;
    if (($595 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$563 >> 2] | 0) | 0)) if (($595 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $595;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $595;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[12739] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[12728] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[12730] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $601 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $605 = HEAP32[12740] | 0;
   $609 = $544 - $$2253$ph$i + $605 & 0 - $605;
   if ($609 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($609 | 0) | 0) == (-1 | 0)) {
    _sbrk($601 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $609 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[12731] = HEAP32[12731] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $618 = _sbrk($548 | 0) | 0;
  $619 = _sbrk(0) | 0;
  $625 = $619 - $618 | 0;
  $627 = $625 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($618 | 0) == (-1 | 0) | $627 ^ 1 | $618 >>> 0 < $619 >>> 0 & (($618 | 0) != (-1 | 0) & ($619 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $627 ? $625 : $$4236$i;
   $$748$i = $618;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $631 = (HEAP32[12728] | 0) + $$723947$i | 0;
  HEAP32[12728] = $631;
  if ($631 >>> 0 > (HEAP32[12729] | 0) >>> 0) HEAP32[12729] = $631;
  $634 = HEAP32[12626] | 0;
  L294 : do if (!$634) {
   $636 = HEAP32[12624] | 0;
   if (($636 | 0) == 0 | $$748$i >>> 0 < $636 >>> 0) HEAP32[12624] = $$748$i;
   HEAP32[12732] = $$748$i;
   HEAP32[12733] = $$723947$i;
   HEAP32[12735] = 0;
   HEAP32[12629] = HEAP32[12738];
   HEAP32[12628] = -1;
   HEAP32[12633] = 50520;
   HEAP32[12632] = 50520;
   HEAP32[12635] = 50528;
   HEAP32[12634] = 50528;
   HEAP32[12637] = 50536;
   HEAP32[12636] = 50536;
   HEAP32[12639] = 50544;
   HEAP32[12638] = 50544;
   HEAP32[12641] = 50552;
   HEAP32[12640] = 50552;
   HEAP32[12643] = 50560;
   HEAP32[12642] = 50560;
   HEAP32[12645] = 50568;
   HEAP32[12644] = 50568;
   HEAP32[12647] = 50576;
   HEAP32[12646] = 50576;
   HEAP32[12649] = 50584;
   HEAP32[12648] = 50584;
   HEAP32[12651] = 50592;
   HEAP32[12650] = 50592;
   HEAP32[12653] = 50600;
   HEAP32[12652] = 50600;
   HEAP32[12655] = 50608;
   HEAP32[12654] = 50608;
   HEAP32[12657] = 50616;
   HEAP32[12656] = 50616;
   HEAP32[12659] = 50624;
   HEAP32[12658] = 50624;
   HEAP32[12661] = 50632;
   HEAP32[12660] = 50632;
   HEAP32[12663] = 50640;
   HEAP32[12662] = 50640;
   HEAP32[12665] = 50648;
   HEAP32[12664] = 50648;
   HEAP32[12667] = 50656;
   HEAP32[12666] = 50656;
   HEAP32[12669] = 50664;
   HEAP32[12668] = 50664;
   HEAP32[12671] = 50672;
   HEAP32[12670] = 50672;
   HEAP32[12673] = 50680;
   HEAP32[12672] = 50680;
   HEAP32[12675] = 50688;
   HEAP32[12674] = 50688;
   HEAP32[12677] = 50696;
   HEAP32[12676] = 50696;
   HEAP32[12679] = 50704;
   HEAP32[12678] = 50704;
   HEAP32[12681] = 50712;
   HEAP32[12680] = 50712;
   HEAP32[12683] = 50720;
   HEAP32[12682] = 50720;
   HEAP32[12685] = 50728;
   HEAP32[12684] = 50728;
   HEAP32[12687] = 50736;
   HEAP32[12686] = 50736;
   HEAP32[12689] = 50744;
   HEAP32[12688] = 50744;
   HEAP32[12691] = 50752;
   HEAP32[12690] = 50752;
   HEAP32[12693] = 50760;
   HEAP32[12692] = 50760;
   HEAP32[12695] = 50768;
   HEAP32[12694] = 50768;
   $640 = $$723947$i + -40 | 0;
   $642 = $$748$i + 8 | 0;
   $647 = ($642 & 7 | 0) == 0 ? 0 : 0 - $642 & 7;
   $648 = $$748$i + $647 | 0;
   $649 = $640 - $647 | 0;
   HEAP32[12626] = $648;
   HEAP32[12623] = $649;
   HEAP32[$648 + 4 >> 2] = $649 | 1;
   HEAP32[$$748$i + $640 + 4 >> 2] = 40;
   HEAP32[12627] = HEAP32[12742];
  } else {
   $$024372$i = 50928;
   while (1) {
    $655 = HEAP32[$$024372$i >> 2] | 0;
    $656 = $$024372$i + 4 | 0;
    $657 = HEAP32[$656 >> 2] | 0;
    if (($$748$i | 0) == ($655 + $657 | 0)) {
     label = 199;
     break;
    }
    $661 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$661) break; else $$024372$i = $661;
   }
   if ((label | 0) == 199) if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $634 >>> 0 & $655 >>> 0 <= $634 >>> 0) {
    HEAP32[$656 >> 2] = $657 + $$723947$i;
    $671 = (HEAP32[12623] | 0) + $$723947$i | 0;
    $673 = $634 + 8 | 0;
    $678 = ($673 & 7 | 0) == 0 ? 0 : 0 - $673 & 7;
    $679 = $634 + $678 | 0;
    $680 = $671 - $678 | 0;
    HEAP32[12626] = $679;
    HEAP32[12623] = $680;
    HEAP32[$679 + 4 >> 2] = $680 | 1;
    HEAP32[$634 + $671 + 4 >> 2] = 40;
    HEAP32[12627] = HEAP32[12742];
    break;
   }
   $686 = HEAP32[12624] | 0;
   if ($$748$i >>> 0 < $686 >>> 0) {
    HEAP32[12624] = $$748$i;
    $750 = $$748$i;
   } else $750 = $686;
   $688 = $$748$i + $$723947$i | 0;
   $$124471$i = 50928;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($688 | 0)) {
     label = 207;
     break;
    }
    $692 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$692) break; else $$124471$i = $692;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $698 = $$124471$i + 4 | 0;
    HEAP32[$698 >> 2] = (HEAP32[$698 >> 2] | 0) + $$723947$i;
    $702 = $$748$i + 8 | 0;
    $708 = $$748$i + (($702 & 7 | 0) == 0 ? 0 : 0 - $702 & 7) | 0;
    $710 = $688 + 8 | 0;
    $716 = $688 + (($710 & 7 | 0) == 0 ? 0 : 0 - $710 & 7) | 0;
    $720 = $708 + $$0197 | 0;
    $721 = $716 - $708 - $$0197 | 0;
    HEAP32[$708 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($634 | 0) == ($716 | 0)) {
     $726 = (HEAP32[12623] | 0) + $721 | 0;
     HEAP32[12623] = $726;
     HEAP32[12626] = $720;
     HEAP32[$720 + 4 >> 2] = $726 | 1;
    } else {
     if ((HEAP32[12625] | 0) == ($716 | 0)) {
      $732 = (HEAP32[12622] | 0) + $721 | 0;
      HEAP32[12622] = $732;
      HEAP32[12625] = $720;
      HEAP32[$720 + 4 >> 2] = $732 | 1;
      HEAP32[$720 + $732 >> 2] = $732;
      break;
     }
     $737 = HEAP32[$716 + 4 >> 2] | 0;
     if (($737 & 3 | 0) == 1) {
      $740 = $737 & -8;
      $741 = $737 >>> 3;
      L325 : do if ($737 >>> 0 < 256) {
       $744 = HEAP32[$716 + 8 >> 2] | 0;
       $746 = HEAP32[$716 + 12 >> 2] | 0;
       $748 = 50520 + ($741 << 1 << 2) | 0;
       do if (($744 | 0) != ($748 | 0)) {
        if ($750 >>> 0 > $744 >>> 0) _abort();
        if ((HEAP32[$744 + 12 >> 2] | 0) == ($716 | 0)) break;
        _abort();
       } while (0);
       if (($746 | 0) == ($744 | 0)) {
        HEAP32[12620] = HEAP32[12620] & ~(1 << $741);
        break;
       }
       do if (($746 | 0) == ($748 | 0)) $$pre$phi17$i$iZ2D = $746 + 8 | 0; else {
        if ($750 >>> 0 > $746 >>> 0) _abort();
        $762 = $746 + 8 | 0;
        if ((HEAP32[$762 >> 2] | 0) == ($716 | 0)) {
         $$pre$phi17$i$iZ2D = $762;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$744 + 12 >> 2] = $746;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $744;
      } else {
       $767 = HEAP32[$716 + 24 >> 2] | 0;
       $769 = HEAP32[$716 + 12 >> 2] | 0;
       do if (($769 | 0) == ($716 | 0)) {
        $780 = $716 + 16 | 0;
        $781 = $780 + 4 | 0;
        $782 = HEAP32[$781 >> 2] | 0;
        if (!$782) {
         $784 = HEAP32[$780 >> 2] | 0;
         if (!$784) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $784;
          $$1292$i$i$ph = $780;
         }
        } else {
         $$1290$i$i$ph = $782;
         $$1292$i$i$ph = $781;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $786 = $$1290$i$i + 20 | 0;
         $787 = HEAP32[$786 >> 2] | 0;
         if (!$787) {
          $789 = $$1290$i$i + 16 | 0;
          $790 = HEAP32[$789 >> 2] | 0;
          if (!$790) break; else {
           $$1290$i$i$be = $790;
           $$1292$i$i$be = $789;
          }
         } else {
          $$1290$i$i$be = $787;
          $$1292$i$i$be = $786;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($750 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $772 = HEAP32[$716 + 8 >> 2] | 0;
        if ($750 >>> 0 > $772 >>> 0) _abort();
        $774 = $772 + 12 | 0;
        if ((HEAP32[$774 >> 2] | 0) != ($716 | 0)) _abort();
        $777 = $769 + 8 | 0;
        if ((HEAP32[$777 >> 2] | 0) == ($716 | 0)) {
         HEAP32[$774 >> 2] = $769;
         HEAP32[$777 >> 2] = $772;
         $$3$i$i = $769;
         break;
        } else _abort();
       } while (0);
       if (!$767) break;
       $795 = HEAP32[$716 + 28 >> 2] | 0;
       $796 = 50784 + ($795 << 2) | 0;
       do if ((HEAP32[$796 >> 2] | 0) == ($716 | 0)) {
        HEAP32[$796 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[12621] = HEAP32[12621] & ~(1 << $795);
        break L325;
       } else if ((HEAP32[12624] | 0) >>> 0 > $767 >>> 0) _abort(); else {
        $805 = $767 + 16 | 0;
        HEAP32[((HEAP32[$805 >> 2] | 0) == ($716 | 0) ? $805 : $767 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $810 = HEAP32[12624] | 0;
       if ($810 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $767;
       $813 = $716 + 16 | 0;
       $814 = HEAP32[$813 >> 2] | 0;
       do if ($814 | 0) if ($810 >>> 0 > $814 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $814;
        HEAP32[$814 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $820 = HEAP32[$813 + 4 >> 2] | 0;
       if (!$820) break;
       if ((HEAP32[12624] | 0) >>> 0 > $820 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $716 + $740 | 0;
      $$0286$i$i = $740 + $721 | 0;
     } else {
      $$0$i16$i = $716;
      $$0286$i$i = $721;
     }
     $828 = $$0$i16$i + 4 | 0;
     HEAP32[$828 >> 2] = HEAP32[$828 >> 2] & -2;
     HEAP32[$720 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$720 + $$0286$i$i >> 2] = $$0286$i$i;
     $834 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $837 = 50520 + ($834 << 1 << 2) | 0;
      $838 = HEAP32[12620] | 0;
      $839 = 1 << $834;
      do if (!($838 & $839)) {
       HEAP32[12620] = $838 | $839;
       $$0294$i$i = $837;
       $$pre$phi$i18$iZ2D = $837 + 8 | 0;
      } else {
       $843 = $837 + 8 | 0;
       $844 = HEAP32[$843 >> 2] | 0;
       if ((HEAP32[12624] | 0) >>> 0 <= $844 >>> 0) {
        $$0294$i$i = $844;
        $$pre$phi$i18$iZ2D = $843;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $720;
      HEAP32[$$0294$i$i + 12 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $$0294$i$i;
      HEAP32[$720 + 12 >> 2] = $837;
      break;
     }
     $850 = $$0286$i$i >>> 8;
     do if (!$850) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $855 = ($850 + 1048320 | 0) >>> 16 & 8;
      $856 = $850 << $855;
      $859 = ($856 + 520192 | 0) >>> 16 & 4;
      $861 = $856 << $859;
      $864 = ($861 + 245760 | 0) >>> 16 & 2;
      $869 = 14 - ($859 | $855 | $864) + ($861 << $864 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($869 + 7 | 0) & 1 | $869 << 1;
     } while (0);
     $875 = 50784 + ($$0295$i$i << 2) | 0;
     HEAP32[$720 + 28 >> 2] = $$0295$i$i;
     $877 = $720 + 16 | 0;
     HEAP32[$877 + 4 >> 2] = 0;
     HEAP32[$877 >> 2] = 0;
     $879 = HEAP32[12621] | 0;
     $880 = 1 << $$0295$i$i;
     if (!($879 & $880)) {
      HEAP32[12621] = $879 | $880;
      HEAP32[$875 >> 2] = $720;
      HEAP32[$720 + 24 >> 2] = $875;
      HEAP32[$720 + 12 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $720;
      break;
     }
     $887 = HEAP32[$875 >> 2] | 0;
     L410 : do if ((HEAP32[$887 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $887; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $887;
      while (1) {
       $904 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $899 = HEAP32[$904 >> 2] | 0;
       if (!$899) break;
       if ((HEAP32[$899 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $899;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $899;
       }
      }
      if ((HEAP32[12624] | 0) >>> 0 > $904 >>> 0) _abort(); else {
       HEAP32[$904 >> 2] = $720;
       HEAP32[$720 + 24 >> 2] = $$028810$i$i;
       HEAP32[$720 + 12 >> 2] = $720;
       HEAP32[$720 + 8 >> 2] = $720;
       break L317;
      }
     } while (0);
     $911 = $$0288$lcssa$i$i + 8 | 0;
     $912 = HEAP32[$911 >> 2] | 0;
     $913 = HEAP32[12624] | 0;
     if ($913 >>> 0 <= $912 >>> 0 & $913 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$912 + 12 >> 2] = $720;
      HEAP32[$911 >> 2] = $720;
      HEAP32[$720 + 8 >> 2] = $912;
      HEAP32[$720 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$720 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $708 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 50928;
   while (1) {
    $921 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($921 >>> 0 <= $634 >>> 0) {
     $925 = $921 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($925 >>> 0 > $634 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $929 = $925 + -47 | 0;
   $931 = $929 + 8 | 0;
   $937 = $929 + (($931 & 7 | 0) == 0 ? 0 : 0 - $931 & 7) | 0;
   $938 = $634 + 16 | 0;
   $940 = $937 >>> 0 < $938 >>> 0 ? $634 : $937;
   $941 = $940 + 8 | 0;
   $943 = $$723947$i + -40 | 0;
   $945 = $$748$i + 8 | 0;
   $950 = ($945 & 7 | 0) == 0 ? 0 : 0 - $945 & 7;
   $951 = $$748$i + $950 | 0;
   $952 = $943 - $950 | 0;
   HEAP32[12626] = $951;
   HEAP32[12623] = $952;
   HEAP32[$951 + 4 >> 2] = $952 | 1;
   HEAP32[$$748$i + $943 + 4 >> 2] = 40;
   HEAP32[12627] = HEAP32[12742];
   $958 = $940 + 4 | 0;
   HEAP32[$958 >> 2] = 27;
   HEAP32[$941 >> 2] = HEAP32[12732];
   HEAP32[$941 + 4 >> 2] = HEAP32[12733];
   HEAP32[$941 + 8 >> 2] = HEAP32[12734];
   HEAP32[$941 + 12 >> 2] = HEAP32[12735];
   HEAP32[12732] = $$748$i;
   HEAP32[12733] = $$723947$i;
   HEAP32[12735] = 0;
   HEAP32[12734] = $941;
   $960 = $940 + 24 | 0;
   do {
    $960$looptemp = $960;
    $960 = $960 + 4 | 0;
    HEAP32[$960 >> 2] = 7;
   } while (($960$looptemp + 8 | 0) >>> 0 < $925 >>> 0);
   if (($940 | 0) != ($634 | 0)) {
    $966 = $940 - $634 | 0;
    HEAP32[$958 >> 2] = HEAP32[$958 >> 2] & -2;
    HEAP32[$634 + 4 >> 2] = $966 | 1;
    HEAP32[$940 >> 2] = $966;
    $971 = $966 >>> 3;
    if ($966 >>> 0 < 256) {
     $974 = 50520 + ($971 << 1 << 2) | 0;
     $975 = HEAP32[12620] | 0;
     $976 = 1 << $971;
     if (!($975 & $976)) {
      HEAP32[12620] = $975 | $976;
      $$0211$i$i = $974;
      $$pre$phi$i$iZ2D = $974 + 8 | 0;
     } else {
      $980 = $974 + 8 | 0;
      $981 = HEAP32[$980 >> 2] | 0;
      if ((HEAP32[12624] | 0) >>> 0 > $981 >>> 0) _abort(); else {
       $$0211$i$i = $981;
       $$pre$phi$i$iZ2D = $980;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $634;
     HEAP32[$$0211$i$i + 12 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $$0211$i$i;
     HEAP32[$634 + 12 >> 2] = $974;
     break;
    }
    $987 = $966 >>> 8;
    if (!$987) $$0212$i$i = 0; else if ($966 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $992 = ($987 + 1048320 | 0) >>> 16 & 8;
     $993 = $987 << $992;
     $996 = ($993 + 520192 | 0) >>> 16 & 4;
     $998 = $993 << $996;
     $1001 = ($998 + 245760 | 0) >>> 16 & 2;
     $1006 = 14 - ($996 | $992 | $1001) + ($998 << $1001 >>> 15) | 0;
     $$0212$i$i = $966 >>> ($1006 + 7 | 0) & 1 | $1006 << 1;
    }
    $1012 = 50784 + ($$0212$i$i << 2) | 0;
    HEAP32[$634 + 28 >> 2] = $$0212$i$i;
    HEAP32[$634 + 20 >> 2] = 0;
    HEAP32[$938 >> 2] = 0;
    $1015 = HEAP32[12621] | 0;
    $1016 = 1 << $$0212$i$i;
    if (!($1015 & $1016)) {
     HEAP32[12621] = $1015 | $1016;
     HEAP32[$1012 >> 2] = $634;
     HEAP32[$634 + 24 >> 2] = $1012;
     HEAP32[$634 + 12 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $634;
     break;
    }
    $1023 = HEAP32[$1012 >> 2] | 0;
    L451 : do if ((HEAP32[$1023 + 4 >> 2] & -8 | 0) == ($966 | 0)) $$0207$lcssa$i$i = $1023; else {
     $$02065$i$i = $966 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1023;
     while (1) {
      $1040 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1035 = HEAP32[$1040 >> 2] | 0;
      if (!$1035) break;
      if ((HEAP32[$1035 + 4 >> 2] & -8 | 0) == ($966 | 0)) {
       $$0207$lcssa$i$i = $1035;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1035;
      }
     }
     if ((HEAP32[12624] | 0) >>> 0 > $1040 >>> 0) _abort(); else {
      HEAP32[$1040 >> 2] = $634;
      HEAP32[$634 + 24 >> 2] = $$02074$i$i;
      HEAP32[$634 + 12 >> 2] = $634;
      HEAP32[$634 + 8 >> 2] = $634;
      break L294;
     }
    } while (0);
    $1047 = $$0207$lcssa$i$i + 8 | 0;
    $1048 = HEAP32[$1047 >> 2] | 0;
    $1049 = HEAP32[12624] | 0;
    if ($1049 >>> 0 <= $1048 >>> 0 & $1049 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1048 + 12 >> 2] = $634;
     HEAP32[$1047 >> 2] = $634;
     HEAP32[$634 + 8 >> 2] = $1048;
     HEAP32[$634 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$634 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1058 = HEAP32[12623] | 0;
  if ($1058 >>> 0 > $$0197 >>> 0) {
   $1060 = $1058 - $$0197 | 0;
   HEAP32[12623] = $1060;
   $1061 = HEAP32[12626] | 0;
   $1062 = $1061 + $$0197 | 0;
   HEAP32[12626] = $1062;
   HEAP32[$1062 + 4 >> 2] = $1060 | 1;
   HEAP32[$1061 + 4 >> 2] = $$0197 | 3;
   $$0 = $1061 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[12760] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _celt_encode_with_ec($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0101 = 0, $$0101$ph = 0, $$0101283 = 0, $$0102$ph = 0.0, $$0102292 = 0.0, $$0103 = 0.0, $$019 = 0, $$024 = 0, $$03 = 0, $$032 = 0.0, $$033 = 0, $$034 = 0, $$039 = 0, $$04 = 0, $$043 = 0, $$044 = 0.0, $$045 = 0, $$046 = 0.0, $$051 = 0, $$059 = 0.0, $$059$in = 0, $$060 = 0.0, $$062 = 0, $$064 = 0, $$066 = 0, $$069 = 0, $$071 = 0, $$074 = 0, $$076 = 0, $$08 = 0, $$08$idx$val = 0, $$08$idx106$val = 0, $$08$idx107$val = 0, $$08$idx108$val = 0, $$08$idx109$val = 0, $$08$idx110$val = 0, $$08$idx111$val = 0, $$08$idx111$val168 = 0, $$08$idx111$val169 = 0, $$08$idx111$val170 = 0, $$08$idx111$val171 = 0, $$08$idx112$val = 0, $$08$idx112$val173 = 0, $$08$idx112$val174 = 0, $$08$idx112$val175 = 0, $$08$idx112$val176 = 0, $$08$idx115 = 0, $$08$idx116 = 0, $$08$idx119 = 0, $$08$idx120 = 0, $$08$idx123 = 0, $$08$idx123$val = 0, $$082 = 0, $$083 = 0.0, $$087 = 0.0, $$09 = 0, $$091132 = 0, $$092 = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$098$ph = 0.0, $$098293 = 0.0, $$099 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$110 = 0, $$120 = 0, $$1217 = 0, $$125 = 0, $$13 = 0, $$136 = 0, $$136287 = 0, $$14 = 0, $$140 = 0, $$140$ph = 0, $$140285 = 0, $$147 = 0.0, $$15 = 0, $$1518 = 0, $$16 = 0, $$163 = 0, $$165 = 0, $$167 = 0, $$17 = 0, $$170 = 0, $$173 = 0, $$175 = 0, $$177 = 0, $$184 = 0.0, $$188 = 0.0, $$194 = 0, $$197 = 0, $$211 = 0, $$215 = 0.0, $$221 = 0, $$223 = 0.0, $$250 = 0, $$254 = 0, $$268 = 0, $$278 = 0, $$3 = 0, $$312 = 0, $$322 = 0, $$338144 = 0, $$338145 = 0, $$342141 = 0, $$342142 = 0, $$355 = 0, $$379 = 0, $$386 = 0.0, $$390 = 0.0, $$4 = 0, $$413 = 0, $$423 = 0, $$456 = 0, $$480 = 0, $$5 = 0, $$514 = 0, $$581 = 0, $$6 = 0, $$615 = 0, $$658 = 0, $$7 = 0, $$716 = 0, $$8 = 0, $$9 = 0, $$alloca_mul11 = 0, $$alloca_mul17 = 0, $$alloca_mul19 = 0, $$alloca_mul29 = 0, $$idx$val = 0, $$idx105$val = 0, $$idx127 = 0, $$pn = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre$phi187Z2D = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $135 = 0.0, $139 = 0.0, $14 = 0, $141 = 0.0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $164 = 0, $169 = 0, $17 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $19 = 0, $20 = 0, $201 = 0.0, $204 = 0.0, $209 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $221 = 0, $231 = 0, $233 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $250 = 0, $251 = 0, $254 = 0.0, $256 = 0, $26 = 0, $261 = 0, $262 = 0.0, $264 = 0, $266 = 0.0, $269 = 0, $270 = 0, $274 = 0, $275 = 0.0, $277 = 0.0, $28 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $288 = 0, $290 = 0, $294 = 0, $297 = 0, $30 = 0, $301 = 0.0, $302 = 0, $306 = 0.0, $31 = 0, $313 = 0, $320 = 0, $329 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $341 = 0.0, $344 = 0, $345 = 0, $349 = 0, $355 = 0, $358 = 0, $36 = 0, $363 = 0.0, $37 = 0, $370 = 0.0, $374 = 0, $376 = 0.0, $38 = 0, $382 = 0, $385 = 0, $386 = 0.0, $387 = 0, $389 = 0.0, $39 = 0, $392 = 0.0, $397 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0.0, $413 = 0, $414 = 0, $416 = 0, $421 = 0, $426 = 0.0, $428 = 0, $434 = 0, $441 = 0, $442 = 0, $443 = 0, $448 = 0, $45 = 0, $451 = 0.0, $452 = 0, $453 = 0, $458 = 0, $460 = 0, $47 = 0, $480 = 0, $481 = 0, $483 = 0, $484 = 0, $485 = 0.0, $49 = 0, $517 = 0, $519 = 0, $52 = 0, $524 = 0, $526 = 0, $529 = 0, $53 = 0, $530 = 0, $536 = 0, $537 = 0, $54 = 0, $540 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $553 = 0, $554 = 0, $555 = 0, $56 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $576 = 0, $578 = 0, $579 = 0, $58 = 0, $59 = 0, $596 = 0, $597 = 0, $6 = 0, $603 = 0, $606 = 0, $607 = 0, $613 = 0, $620 = 0.0, $624 = 0, $630 = 0, $634 = 0, $654 = 0, $656 = 0, $659 = 0, $66 = 0, $662 = 0, $663 = 0, $664 = 0, $67 = 0, $671 = 0, $675 = 0, $678 = 0, $679 = 0, $684 = 0, $686 = 0, $687 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $699 = 0, $7 = 0, $700 = 0, $704 = 0, $705 = 0, $706 = 0, $71 = 0, $720 = 0, $724 = 0, $725 = 0, $727 = 0, $728 = 0, $730 = 0, $731 = 0, $732 = 0, $734 = 0, $742 = 0, $755 = 0, $756 = 0, $758 = 0, $76 = 0, $760 = 0.0, $761 = 0, $762 = 0, $776 = 0, $78 = 0, $780 = 0, $781 = 0.0, $783 = 0.0, $786 = 0, $788 = 0, $794 = 0, $8 = 0, $803 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $83 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, $99 = 0, $spec$select = 0, $spec$select198 = 0, $spec$select200 = 0, $spec$select216 = 0, $spec$select244 = 0, $spec$select248 = 0, $spec$select249 = 0, $spec$select255 = 0, $storemerge = 0, $storemerge280 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 $17 = HEAP32[$0 + 4 >> 2] | 0;
 $19 = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$7 >> 2] = 15;
 HEAPF32[$8 >> 2] = 0.0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 $20 = HEAP32[$0 >> 2] | 0;
 $21 = $20 + 8 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $24 = HEAP32[$20 + 4 >> 2] | 0;
 $25 = $20 + 32 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $28 = HEAP32[$0 + 32 >> 2] | 0;
 $30 = HEAP32[$0 + 36 >> 2] | 0;
 $31 = ($28 | 0) != 0;
 HEAPF32[$12 >> 2] = 0.0;
 if (($4 | 0) < 2 | ($1 | 0) == 0) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $34 = $0 + 28 | 0;
 $36 = Math_imul(HEAP32[$34 >> 2] | 0, $2) | 0;
 $37 = $20 + 44 | 0;
 $38 = $20 + 36 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $$045 = 0;
 while (1) {
  if (($$045 | 0) > ($39 | 0)) {
   $$1 = -1;
   label = 239;
   break;
  }
  if ((HEAP32[$37 >> 2] << $$045 | 0) == ($36 | 0)) break;
  $$045 = $$045 + 1 | 0;
 }
 if ((label | 0) == 239) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 $45 = 1 << $$045;
 $47 = HEAP32[$37 >> 2] << $$045;
 $49 = $0 + 244 + ((Math_imul($17, $24) | 0) << 2) | 0;
 $52 = $0 + 244 + ((Math_imul($17, $24 + 1024 | 0) | 0) << 2) | 0;
 $53 = Math_imul($17, $22) | 0;
 $54 = $52 + ($53 << 2) | 0;
 $55 = $54 + ($53 << 2) | 0;
 $56 = $55 + ($53 << 2) | 0;
 $57 = ($5 | 0) == 0;
 if ($57) {
  $$051 = 0;
  $$076 = 1;
  $$082 = 1;
 } else {
  $$idx$val = HEAP32[$5 + 20 >> 2] | 0;
  $$idx105$val = HEAP32[$5 + 28 >> 2] | 0;
  $58 = _ec_tell_frac($$idx$val, $$idx105$val) | 0;
  $59 = _ec_tell($$idx$val, $$idx105$val) | 0;
  $$051 = $59 + 4 >> 3;
  $$076 = $59;
  $$082 = $58;
 }
 if (HEAP32[$0 + 48 >> 2] | 0) _celt_fatal(40465, 40501, 1547);
 $spec$select = ($4 | 0) < 1275 ? $4 : 1275;
 $66 = $spec$select - $$051 | 0;
 $67 = $0 + 44 | 0;
 $$pre = HEAP32[$0 + 40 >> 2] | 0;
 if (!(HEAP32[$67 >> 2] | 0)) {
  $78 = $$pre;
  if (($78 | 0) == -1) {
   $$04 = $spec$select;
   $809 = $78;
   label = 15;
  } else {
   $81 = Math_imul($78, $36) | 0;
   $83 = HEAP32[$20 >> 2] | 0;
   $87 = ($81 + (($$076 | 0) > 1 ? $$076 : 0) + ($83 << 2) | 0) / ($83 << 3 | 0) | 0;
   $88 = ($spec$select | 0) < ($87 | 0);
   $$04 = (($88 ? $spec$select : $87) | 0) < 2 ? 2 : $88 ? $spec$select : $87;
   $809 = $78;
   label = 15;
  }
 } else if (($$pre | 0) == -1) {
  $$04 = $spec$select;
  $809 = -1;
  label = 15;
 } else {
  $71 = HEAP32[$20 >> 2] | 0;
  $76 = ((Math_imul($$pre, $36) | 0) + ($71 >> 4) | 0) / ($71 >> 3 | 0) | 0;
  $$066 = $76 >> 6;
  $$071 = $76;
  $$15 = $spec$select;
  $100 = $$pre;
 }
 if ((label | 0) == 15) {
  $$066 = $$04 - $$051 | 0;
  $$071 = 0;
  $$15 = $$04;
  $100 = $809;
 }
 $92 = 3 - $$045 | 0;
 $98 = Math_imul(($19 * 40 | 0) + 20 | 0, (400 >>> $$045) + -50 | 0) | 0;
 $99 = ($$15 * 400 >> $92) - $98 | 0;
 if (($100 | 0) == -1) $$097 = $99; else {
  $102 = $100 - $98 | 0;
  $$097 = ($99 | 0) < ($102 | 0) ? $99 : $102;
 }
 if ($57) {
  _ec_enc_init($6, $3, $$15);
  $$08 = $6;
 } else $$08 = $5;
 $104 = ($$071 | 0) > 0;
 if ($104) if (!(HEAP32[$0 + 52 >> 2] | 0)) {
  $$254 = $66;
  $$4 = $$15;
 } else {
  $109 = ($$076 | 0) == 1 ? 2 : 0;
  $114 = ($$071 << 1) - (HEAP32[$0 + 208 >> 2] | 0) >> 6;
  $115 = ($109 | 0) > ($114 | 0);
  if ((($115 ? $109 : $114) | 0) < ($66 | 0)) {
   $$197 = $115 ? $109 : $114;
   if (($$197 | 0) < ($66 | 0)) {
    $118 = $$051 + $$197 | 0;
    _ec_enc_shrink($$08, $118);
    $$254 = $$197;
    $$4 = $118;
   } else {
    $$254 = $66;
    $$4 = $$15;
   }
  } else {
   $$254 = $66;
   $$4 = $$15;
  }
 } else {
  $$254 = $66;
  $$4 = $$15;
 }
 $119 = $$4 << 3;
 $121 = HEAP32[$20 + 12 >> 2] | 0;
 $spec$select198 = ($30 | 0) > ($121 | 0) ? $121 : $30;
 $123 = $47 + $24 | 0;
 $124 = Math_imul($17, $123) | 0;
 $125 = _llvm_stacksave() | 0;
 $126 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($124 << 2) | 0) + 15 & -16) | 0;
 $127 = $0 + 224 | 0;
 $128 = +HEAPF32[$127 >> 2];
 $130 = Math_imul($19, $47 - $24 | 0) | 0;
 $131 = HEAP32[$34 >> 2] | 0;
 $132 = ($130 | 0) / ($131 | 0) | 0;
 $133 = +_celt_maxabs16($1, $132);
 $135 = $128 > $133 ? $128 : $133;
 $139 = +_celt_maxabs16($1 + ($132 << 2) | 0, (Math_imul($19, $24) | 0) / ($131 | 0) | 0);
 HEAPF32[$127 >> 2] = $139;
 $141 = $135 > $139 ? $135 : $139;
 $142 = $0 + 60 | 0;
 $147 = $141 <= 1.0 / +(1 << HEAP32[$142 >> 2] | 0);
 $148 = $147 & 1;
 if (($$076 | 0) == 1) {
  _ec_enc_bit_logp($$08, $148, 15);
  if ($147) {
   if ($104) {
    $150 = $$051 + 2 | 0;
    $151 = ($$4 | 0) < ($150 | 0);
    $spec$select200 = $151 ? $$4 : $150;
    _ec_enc_shrink($$08, $spec$select200);
    $$167 = $spec$select200;
    $$355 = 2;
    $$5 = $spec$select200;
    $$pre$phi187Z2D = $151 ? $119 : $150 << 3;
   } else {
    $$167 = $$066;
    $$355 = $$254;
    $$5 = $$4;
    $$pre$phi187Z2D = $119;
   }
   $$08$idx123 = $$08 + 20 | 0;
   $$08$idx123$val = HEAP32[$$08$idx123 >> 2] | 0;
   HEAP32[$$08$idx123 >> 2] = $$08$idx123$val + ($$pre$phi187Z2D - (_ec_tell($$08$idx123$val, HEAP32[$$08 + 28 >> 2] | 0) | 0));
   $$091132 = $148;
   $$173 = $$pre$phi187Z2D;
   $$177 = $$pre$phi187Z2D;
   $$268 = $$167;
   $$456 = $$355;
   $$6 = $$5;
  } else {
   $$091132 = 0;
   $$173 = $119;
   $$177 = 1;
   $$268 = $$066;
   $$456 = $$254;
   $$6 = $$4;
  }
 } else {
  $$091132 = 0;
  $$173 = $119;
  $$177 = $$076;
  $$268 = $$066;
  $$456 = $$254;
  $$6 = $$4;
 }
 $155 = $0 + 16 | 0;
 $156 = $20 + 16 | 0;
 $$idx127 = $20 + 20 | 0;
 $157 = $141 > 65536.0;
 $$019 = 0;
 do {
  $164 = $126 + ((Math_imul($$019, $123) | 0) << 2) + ($24 << 2) | 0;
  _celt_preemphasis($1 + ($$019 << 2) | 0, $164, $47, $17, HEAP32[$34 >> 2] | 0, +HEAPF32[$156 >> 2], +HEAPF32[$$idx127 >> 2], $0 + 192 + ($$019 << 2) | 0, $157 & (HEAP32[$155 >> 2] | 0) != 0 & 1);
  $$019 = $$019 + 1 | 0;
 } while (($$019 | 0) < ($17 | 0));
 $169 = $0 + 64 | 0;
 if (((HEAP32[$169 >> 2] | 0) != 0 & ($$456 | 0) > 3 | ($$456 | 0) > ($19 * 12 | 0)) & ($31 ^ 1) & ($$091132 | 0) == 0) if (!(HEAP32[$0 + 20 >> 2] | 0)) $183 = (HEAP32[$0 + 24 >> 2] | 0) > 4; else $183 = 0; else $183 = 0;
 $184 = $0 + 100 | 0;
 $185 = HEAP32[$184 >> 2] | 0;
 $186 = $0 + 120 | 0;
 $187 = _run_prefilter($0, $126, $49, $17, $47, $185, $7, $8, $15, $183 & 1, $$456, $186) | 0;
 $188 = +HEAPF32[$8 >> 2];
 if ($188 > .4000000059604645) label = 37; else if (+HEAPF32[$0 + 108 >> 2] > .4000000059604645) label = 37; else $$092 = 0;
 do if ((label | 0) == 37) {
  if (HEAP32[$0 + 120 >> 2] | 0) if (!(+HEAPF32[$0 + 124 >> 2] > .3)) {
   $$092 = 0;
   break;
  }
  $201 = +(HEAP32[$7 >> 2] | 0);
  $204 = +(HEAP32[$0 + 104 >> 2] | 0);
  $$092 = ($204 * 1.26 < $201 | $204 * .79 > $201) & 1;
 } while (0);
 $209 = ($187 | 0) == 0;
 if ($209) {
  if (!($31 | ($$177 + 16 | 0) > ($$173 | 0))) _ec_enc_bit_logp($$08, 0, 1);
 } else {
  _ec_enc_bit_logp($$08, 1, 1);
  $212 = HEAP32[$7 >> 2] | 0;
  $213 = $212 + 1 | 0;
  $215 = 32 - (Math_clz32($213 | 0) | 0) | 0;
  $216 = $215 + -5 | 0;
  _ec_enc_uint($$08, $216, 6);
  _ec_enc_bits($$08, $213 - (16 << $216) | 0, $215 + -1 | 0);
  HEAP32[$7 >> 2] = $212;
  _ec_enc_bits($$08, HEAP32[$15 >> 2] | 0, 3);
  _ec_enc_icdf($$08, $185, 40521, 2);
 }
 $221 = $0 + 24 | 0;
 if ((HEAP32[$221 >> 2] | 0) > 0) if (!(HEAP32[$169 >> 2] | 0)) {
  if ($31 & ($$268 | 0) < 15) $231 = (HEAP32[$0 + 184 >> 2] | 0) != 2; else $231 = 0;
  $$039 = _transient_analysis($126, $123, $17, $12, $11, $231 & 1, $14) | 0;
 } else $$039 = 0; else $$039 = 0;
 $233 = ($$045 | 0) == 0;
 L71 : do if ($233) {
  $$0101$ph = 1;
  $$140$ph = 0;
  label = 52;
 } else if (((_ec_tell(HEAP32[$$08 + 20 >> 2] | 0, HEAP32[$$08 + 28 >> 2] | 0) | 0) + 3 | 0) > ($$173 | 0)) {
  $$0101$ph = 1;
  $$140$ph = 0;
  label = 52;
 } else if (!$$039) {
  $$0101$ph = 0;
  $$140$ph = $$039;
  label = 52;
 } else {
  $$0101 = 0;
  $$136 = $45;
  $$140 = $$039;
  $$alloca_mul19 = (Math_imul($17, $47) | 0) << 2;
  $245 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $$alloca_mul19 | 0) + 15 & -16) | 0;
  $246 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($53 << 2) | 0) + 15 & -16) | 0;
  $247 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($53 << 2) | 0) + 15 & -16) | 0;
  $250 = Math_imul($19, $22) | 0;
  $251 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($250 << 2) | 0) + 15 & -16) | 0;
  if ((HEAP32[$221 >> 2] | 0) > 7) {
   _compute_mdcts($20, 0, $126, $245, $19, $17, $$045, HEAP32[$34 >> 2] | 0);
   _compute_band_energies($20, $245, $246, $spec$select198, $19, $$045);
   _amp2Log2($20, $spec$select198, $30, $246, $251, $19);
   $254 = +($$045 | 0) * .5;
   $$09 = 0;
   while (1) {
    if (($$09 | 0) >= ($250 | 0)) {
     $$0101283 = $$0101;
     $$136287 = $$136;
     $$140285 = $$140;
     $261 = $245;
     $270 = $246;
     $283 = $247;
     $385 = 0;
     $413 = $251;
     $810 = 1;
     break L71;
    }
    $256 = $251 + ($$09 << 2) | 0;
    HEAPF32[$256 >> 2] = +HEAPF32[$256 >> 2] + $254;
    $$09 = $$09 + 1 | 0;
   }
  } else {
   $$0101283 = $$0101;
   $$136287 = $$136;
   $$140285 = $$140;
   $261 = $245;
   $270 = $246;
   $283 = $247;
   $385 = 0;
   $413 = $251;
   $810 = 0;
  }
 } while (0);
 if ((label | 0) == 52) {
  $$alloca_mul11 = (Math_imul($17, $47) | 0) << 2;
  $239 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $$alloca_mul11 | 0) + 15 & -16) | 0;
  $240 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($53 << 2) | 0) + 15 & -16) | 0;
  $241 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($53 << 2) | 0) + 15 & -16) | 0;
  $$alloca_mul17 = (Math_imul($19, $22) | 0) << 2;
  $243 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $$alloca_mul17 | 0) + 15 & -16) | 0;
  $$0101283 = $$0101$ph;
  $$136287 = 0;
  $$140285 = $$140$ph;
  $261 = $239;
  $270 = $240;
  $283 = $241;
  $385 = 1;
  $413 = $243;
  $810 = 0;
 }
 _compute_mdcts($20, $$136287, $126, $261, $19, $17, $$045, HEAP32[$34 >> 2] | 0);
 $262 = +HEAPF32[$261 >> 2];
 if ($262 != $262 | 0.0 != 0.0) _celt_fatal(40524, 40501, 1729);
 $264 = ($19 | 0) == 1;
 do if ($264) {
  $269 = ($17 | 0) == 2;
  if ($269 & $264) {
   HEAP32[$11 >> 2] = 0;
   $776 = $269;
  } else $776 = $269;
 } else {
  $266 = +HEAPF32[$261 + ($47 << 2) >> 2];
  if ($266 != $266 | 0.0 != 0.0) _celt_fatal(40524, 40501, 1729); else {
   $776 = ($17 | 0) == 2;
   break;
  }
 } while (0);
 _compute_band_energies($20, $261, $270, $spec$select198, $19, $$045);
 L93 : do if (!(HEAP32[$169 >> 2] | 0)) $282 = $270; else {
  $$110 = 2;
  while (1) {
   if (($$110 | 0) >= ($30 | 0)) {
    $282 = $270;
    break L93;
   }
   $274 = $270 + ($$110 << 2) | 0;
   $275 = +HEAPF32[$274 >> 2];
   $277 = +HEAPF32[$270 >> 2] * 9.999999747378752e-05;
   $$215 = $275 < $277 ? $275 : $277;
   HEAPF32[$274 >> 2] = $$215 > 1.0000000036274937e-15 ? $$215 : 1.0000000036274937e-15;
   $$110 = $$110 + 1 | 0;
  }
 } while (0);
 _amp2Log2($20, $spec$select198, $30, $282, $283, $19);
 $284 = Math_imul($19, $22) | 0;
 $285 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($284 << 2) | 0) + 15 & -16) | 0;
 _memset($285 | 0, 0, $30 << 2 | 0) | 0;
 do if ($31) {
  $$0102$ph = 0.0;
  $$098$ph = 0.0;
  label = 101;
 } else {
  $288 = HEAP32[$0 + 236 >> 2] | 0;
  if (!$288) {
   $$0102$ph = 0.0;
   $$098$ph = 0.0;
   label = 101;
  } else {
   $290 = HEAP32[$169 >> 2] | 0;
   if ($290 | 0) {
    $$0102292 = 0.0;
    $$0103 = 0.0;
    $$098293 = 0.0;
    $414 = $283;
    $421 = ($290 | 0) == 0;
    break;
   }
   $294 = HEAP32[$0 + 92 >> 2] | 0;
   $spec$select216 = ($294 | 0) > 2 ? $294 : 2;
   $$062 = 0;
   $$083 = 0.0;
   $$087 = 0.0;
   $$120 = 0;
   while (1) {
    if (($$120 | 0) >= ($19 | 0)) break;
    $297 = Math_imul($22, $$120) | 0;
    $$163 = $$062;
    $$184 = $$083;
    $$188 = $$087;
    $$211 = 0;
    while (1) {
     if ($$211 >>> 0 >= $spec$select216 >>> 0) break;
     $301 = +HEAPF32[$288 + ($297 + $$211 << 2) >> 2];
     $302 = $301 < .25;
     do if ($301 > -2.0 | $302 ^ 1) {
      if ($302) if ($301 > 0.0) $306 = $301; else {
       $$060 = $301;
       break;
      } else $306 = .25;
      $$060 = $306 * .5;
     } else $$060 = -2.0; while (0);
     $313 = $$211 + 1 | 0;
     $320 = (HEAP16[$26 + ($313 << 1) >> 1] | 0) - (HEAP16[$26 + ($$211 << 1) >> 1] | 0) | 0;
     $$163 = $$163 + $320 | 0;
     $$184 = $$184 + $$060 * +(($$211 << 1 | 1) - $spec$select216 | 0);
     $$188 = $$188 + $$060 * +($320 | 0);
     $$211 = $313;
    }
    $$062 = $$163;
    $$083 = $$184;
    $$087 = $$188;
    $$120 = $$120 + 1 | 0;
   }
   if (($$062 | 0) <= 0) _celt_fatal(40597, 40501, 1770);
   $329 = $$087 / +($$062 | 0) + .20000000298023224;
   $338 = $$083 * 6.0 / +(Math_imul(Math_imul(Math_imul($19, $spec$select216 + -1 | 0) | 0, $spec$select216 + 1 | 0) | 0, $spec$select216) | 0) * .5;
   $339 = $338 < .03099999949336052;
   $341 = $339 ? ($339 & !($338 > -.03099999949336052) ? -.03099999949336052 : $338) : .03099999949336052;
   $344 = (HEAP16[$26 + ($spec$select216 << 1) >> 1] | 0) / 2 | 0;
   $$095 = 0;
   while (1) {
    $345 = $$095 + 1 | 0;
    if ((HEAP16[$26 + ($345 << 1) >> 1] | 0) >= $344 << 16 >> 16) break;
    $$095 = $345;
   }
   $349 = ($19 | 0) == 2;
   $$093 = 0;
   $$312 = 0;
   while (1) {
    if ($$312 >>> 0 >= $spec$select216 >>> 0) break;
    $355 = $288 + ($$312 << 2) | 0;
    if ($349) {
     $358 = $288 + ($22 + $$312 << 2) | 0;
     $$059$in = +HEAPF32[$355 >> 2] > +HEAPF32[$358 >> 2] ? $355 : $358;
    } else $$059$in = $355;
    $$059 = +HEAPF32[$$059$in >> 2];
    $363 = ($$059 < 0.0 ? $$059 : 0.0) - ($329 + $341 * +($$312 - $$095 | 0));
    if ($363 > .25) {
     HEAPF32[$285 + ($$312 << 2) >> 2] = $363 + -.25;
     $$194 = $$093 + 1 | 0;
    } else $$194 = $$093;
    $$093 = $$194;
    $$312 = $$312 + 1 | 0;
   }
   L136 : do if (($$093 | 0) > 2) {
    $370 = $329 + .25;
    if ($370 > 0.0) {
     _memset($285 | 0, 0, $spec$select216 << 2 | 0) | 0;
     $$386 = 0.0;
     $$390 = 0.0;
     break;
    }
    $$413 = 0;
    while (1) {
     if ($$413 >>> 0 >= $spec$select216 >>> 0) {
      $$386 = $341;
      $$390 = $370;
      break L136;
     }
     $374 = $285 + ($$413 << 2) | 0;
     $376 = +HEAPF32[$374 >> 2] + -.25;
     HEAPF32[$374 >> 2] = $376 < 0.0 ? 0.0 : $376;
     $$413 = $$413 + 1 | 0;
    }
   } else {
    $$386 = $341;
    $$390 = $329;
   } while (0);
   $$0102$ph = $$390 + .20000000298023224;
   $$098$ph = $$386 * 64.0;
   label = 101;
  }
 } while (0);
 if ((label | 0) == 101) {
  $382 = (HEAP32[$169 >> 2] | 0) == 0;
  if ($382) {
   $386 = $385 ? 0.0 : +($$045 | 0) * .5;
   $387 = ($19 | 0) == 2;
   $$044 = 0.0;
   $$046 = -10.0;
   $$514 = $28;
   while (1) {
    if (($$514 | 0) >= ($30 | 0)) break;
    $389 = $$046 + -1.0;
    $392 = +HEAPF32[$283 + ($$514 << 2) >> 2] - $386;
    $$223 = $389 > $392 ? $389 : $392;
    do if ($387) {
     $397 = +HEAPF32[$283 + ($$514 + $22 << 2) >> 2] - $386;
     if ($$223 > $397) {
      $$147 = $$223;
      break;
     }
     $$147 = $397;
    } else $$147 = $$223; while (0);
    $$044 = $$044 + $$147;
    $$046 = $$147;
    $$514 = $$514 + 1 | 0;
   }
   $404 = $0 + 240 | 0;
   $405 = +HEAPF32[$404 >> 2];
   $406 = $$044 / +($30 - $28 | 0) - $405;
   $407 = $406 < -1.5;
   $408 = $406 > 3.0;
   $409 = $408 | $407 ? ($408 & ($407 ^ 1) ? 3.0 : -1.5) : $406;
   HEAPF32[$404 >> 2] = $405 + $409 * .019999999552965164;
   $$0102292 = $$0102$ph;
   $$0103 = $409;
   $$098293 = $$098$ph;
   $414 = $283;
   $421 = $382;
  } else {
   $$0102292 = $$0102$ph;
   $$0103 = 0.0;
   $$098293 = $$098$ph;
   $414 = $283;
   $421 = $382;
  }
 }
 if (!$810) _memcpy($413 | 0, $414 | 0, $284 << 2 | 0) | 0;
 do if ($233) {
  $$338145 = $$136287;
  $$342142 = $$140285;
 } else {
  $$08$idx119 = $$08 + 20 | 0;
  $$08$idx120 = $$08 + 28 | 0;
  $416 = (_ec_tell(HEAP32[$$08$idx119 >> 2] | 0, HEAP32[$$08$idx120 >> 2] | 0) | 0) + 3 | 0;
  do if (($416 | 0) <= ($$173 | 0) & ($$140285 | 0) == 0) {
   if ((HEAP32[$221 >> 2] | 0) < 5 | $421 ^ 1 | $31) {
    $$338144 = $$136287;
    $$342141 = 0;
    $$pre$phi184Z2D = $416;
    break;
   }
   if (!(_patch_transient_decision($414, $52, $22, 0, $30, $19) | 0)) {
    $$338144 = $$136287;
    $$342141 = 0;
    $$pre$phi184Z2D = $416;
    break;
   }
   _compute_mdcts($20, $45, $126, $261, $19, $17, $$045, HEAP32[$34 >> 2] | 0);
   _compute_band_energies($20, $261, $282, $spec$select198, $19, $$045);
   _amp2Log2($20, $spec$select198, $30, $282, $414, $19);
   $426 = +($$045 | 0) * .5;
   $$615 = 0;
   while (1) {
    if (($$615 | 0) >= ($284 | 0)) break;
    $428 = $413 + ($$615 << 2) | 0;
    HEAPF32[$428 >> 2] = +HEAPF32[$428 >> 2] + $426;
    $$615 = $$615 + 1 | 0;
   }
   HEAPF32[$12 >> 2] = .20000000298023224;
   $$338144 = $45;
   $$342141 = 1;
   $$pre$phi184Z2D = (_ec_tell(HEAP32[$$08$idx119 >> 2] | 0, HEAP32[$$08$idx120 >> 2] | 0) | 0) + 3 | 0;
  } else {
   $$338144 = $$136287;
   $$342141 = $$140285;
   $$pre$phi184Z2D = $416;
  } while (0);
  if (($$pre$phi184Z2D | 0) > ($$173 | 0)) {
   $$338145 = $$338144;
   $$342142 = $$342141;
   break;
  }
  _ec_enc_bit_logp($$08, $$342141, 3);
  $$338145 = $$338144;
  $$342142 = $$342141;
 } while (0);
 $$alloca_mul29 = (Math_imul($19, $47) | 0) << 2;
 $434 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul29 | 0) + 15 & -16) | 0;
 _normalise_bands($20, $261, $434, $282, $spec$select198, $19, $45);
 do if (($$268 | 0) < ($19 * 15 | 0) | $31) $811 = 0; else {
  if ((HEAP32[$221 >> 2] | 0) <= 1) {
   $811 = 0;
   break;
  }
  $811 = (HEAP32[$169 >> 2] | 0) == 0;
 } while (0);
 $441 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $442 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $443 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $448 = $0 + 52 | 0;
 $451 = +_dynalloc_analysis($414, $413, $22, $28, $30, $19, $441, HEAP32[$142 >> 2] | 0, HEAP32[$20 + 56 >> 2] | 0, $$342142, HEAP32[$67 >> 2] | 0, HEAP32[$448 >> 2] | 0, $26, $$045, $$268, $13, HEAP32[$169 >> 2] | 0, $285, $186, $442, $443);
 $452 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 L177 : do if ($811) {
  $453 = 20480 / ($$268 | 0) | 0;
  $458 = _tf_analysis($20, $spec$select198, $$342142, $452, ($453 | 0) < 78 ? 80 : $453 + 2 | 0, $434, $47, $$045, +HEAPF32[$12 >> 2], HEAP32[$11 >> 2] | 0, $442) | 0;
  $460 = $452 + ($spec$select198 + -1 << 2) | 0;
  $$716 = $spec$select198;
  while (1) {
   if (($$716 | 0) >= ($30 | 0)) {
    $$250 = $458;
    break L177;
   }
   HEAP32[$452 + ($$716 << 2) >> 2] = HEAP32[$460 >> 2];
   $$716 = $$716 + 1 | 0;
  }
 } else {
  do if ($31) {
   if (HEAP32[$14 >> 2] | 0) {
    $$8 = 0;
    while (1) {
     if (($$8 | 0) >= ($30 | 0)) {
      $$250 = 0;
      break L177;
     }
     HEAP32[$452 + ($$8 << 2) >> 2] = 1;
     $$8 = $$8 + 1 | 0;
    }
   }
   if (($$268 | 0) >= 15) break;
   if ((HEAP32[$0 + 184 >> 2] | 0) == 2) break;
   $$9 = 0;
   while (1) {
    if (($$9 | 0) >= ($30 | 0)) {
     $$250 = $$342142;
     break L177;
    }
    HEAP32[$452 + ($$9 << 2) >> 2] = 0;
    $$9 = $$9 + 1 | 0;
   }
  } while (0);
  $$10 = 0;
  while (1) {
   if (($$10 | 0) >= ($30 | 0)) {
    $$250 = 0;
    break L177;
   }
   HEAP32[$452 + ($$10 << 2) >> 2] = $$342142;
   $$10 = $$10 + 1 | 0;
  }
 } while (0);
 $480 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($284 << 2) | 0) + 15 & -16) | 0;
 $$221 = 0;
 do {
  $481 = Math_imul($$221, $22) | 0;
  $$11 = $28;
  while (1) {
   if (($$11 | 0) >= ($30 | 0)) break;
   $483 = $$11 + $481 | 0;
   $484 = $414 + ($483 << 2) | 0;
   $485 = +HEAPF32[$484 >> 2];
   if (+Math_abs(+($485 - +HEAPF32[$52 + ($483 << 2) >> 2])) < 2.0) HEAPF32[$484 >> 2] = $485 - +HEAPF32[$56 + ($483 << 2) >> 2] * .25;
   $$11 = $$11 + 1 | 0;
  }
  $$221 = $$221 + 1 | 0;
 } while (($$221 | 0) < ($19 | 0));
 _quant_coarse_energy($20, $28, $30, $spec$select198, $414, $52, $$173, $480, $$08, $19, $$045, $$456, HEAP32[$0 + 12 >> 2] | 0, $0 + 84 | 0, (HEAP32[$221 >> 2] | 0) > 3 & 1, HEAP32[$0 + 56 >> 2] | 0, HEAP32[$169 >> 2] | 0);
 _tf_encode($28, $30, $$342142, $452, $$045, $$250, $$08);
 $$08$idx115 = $$08 + 20 | 0;
 $$08$idx116 = $$08 + 28 | 0;
 if (((_ec_tell(HEAP32[$$08$idx115 >> 2] | 0, HEAP32[$$08$idx116 >> 2] | 0) | 0) + 4 | 0) <= ($$173 | 0)) {
  do if (!(HEAP32[$169 >> 2] | 0)) if ($31) {
   if (!(HEAP32[$221 >> 2] | 0)) {
    HEAP32[$0 + 80 >> 2] = 0;
    $530 = 0;
    break;
   }
   $517 = $0 + 80 | 0;
   if (!$$342142) {
    HEAP32[$517 >> 2] = 3;
    $530 = 3;
    break;
   } else {
    HEAP32[$517 >> 2] = 2;
    $530 = 2;
    break;
   }
  } else {
   $519 = HEAP32[$221 >> 2] | 0;
   if (!(($$338145 | 0) != 0 | ($519 | 0) < 3 | ($$456 | 0) < ($19 * 10 | 0))) {
    $526 = $0 + 80 | 0;
    $529 = _spreading_decision($20, $434, $0 + 88 | 0, HEAP32[$526 >> 2] | 0, $0 + 96 | 0, $184, ($209 ^ 1) & 1, $spec$select198, $19, $45, $443) | 0;
    HEAP32[$526 >> 2] = $529;
    $530 = $529;
    break;
   }
   $524 = $0 + 80 | 0;
   if (!$519) {
    HEAP32[$524 >> 2] = 0;
    $530 = 0;
    break;
   } else {
    HEAP32[$524 >> 2] = 2;
    $530 = 2;
    break;
   }
  } else {
   HEAP32[$184 >> 2] = 0;
   HEAP32[$0 + 80 >> 2] = 2;
   $530 = 2;
  } while (0);
  _ec_enc_icdf($$08, $530, 40623, 5);
 }
 if (HEAP32[$169 >> 2] | 0) HEAP32[$441 >> 2] = ($$268 | 0) > 26 ? 8 : ($$268 | 0) / 3 | 0;
 $536 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 _init_caps($20, $536, $$045, $19);
 $537 = $$173 << 3;
 $$08$idx$val = HEAP32[$$08$idx115 >> 2] | 0;
 $$08$idx106$val = HEAP32[$$08$idx116 >> 2] | 0;
 $$069 = 6;
 $$074 = 0;
 $$08$idx111$val171 = $$08$idx$val;
 $$08$idx112$val176 = $$08$idx106$val;
 $$1217 = $28;
 $$278 = _ec_tell_frac($$08$idx$val, $$08$idx106$val) | 0;
 while (1) {
  if (($$1217 | 0) >= ($30 | 0)) break;
  $540 = $$1217 + 1 | 0;
  $549 = (Math_imul($19, (HEAP16[$26 + ($540 << 1) >> 1] | 0) - (HEAP16[$26 + ($$1217 << 1) >> 1] | 0) | 0) | 0) << $$045;
  $550 = $549 << 3;
  $551 = ($549 | 0) < 48;
  $553 = ($550 | 0) < (($551 ? 48 : $549) | 0) ? $550 : $551 ? 48 : $549;
  $554 = $536 + ($$1217 << 2) | 0;
  $555 = $441 + ($$1217 << 2) | 0;
  $$033 = 0;
  $$034 = 0;
  $$043 = $$069;
  $$08$idx111$val170 = $$08$idx111$val171;
  $$08$idx112$val175 = $$08$idx112$val176;
  $$175 = $$074;
  $$379 = $$278;
  while (1) {
   if (($$379 + ($$043 << 3) | 0) >= ($537 - $$175 | 0)) {
    $$08$idx111$val169 = $$08$idx111$val170;
    $$08$idx112$val174 = $$08$idx112$val175;
    $$480 = $$379;
    break;
   }
   if (($$034 | 0) >= (HEAP32[$554 >> 2] | 0)) {
    $$08$idx111$val169 = $$08$idx111$val170;
    $$08$idx112$val174 = $$08$idx112$val175;
    $$480 = $$379;
    break;
   }
   $563 = ($$033 | 0) < (HEAP32[$555 >> 2] | 0);
   _ec_enc_bit_logp($$08, $563 & 1, $$043);
   $$08$idx107$val = HEAP32[$$08$idx115 >> 2] | 0;
   $$08$idx108$val = HEAP32[$$08$idx116 >> 2] | 0;
   $565 = _ec_tell_frac($$08$idx107$val, $$08$idx108$val) | 0;
   if (!$563) {
    $$08$idx111$val169 = $$08$idx107$val;
    $$08$idx112$val174 = $$08$idx108$val;
    $$480 = $565;
    break;
   }
   $$033 = $$033 + 1 | 0;
   $$034 = $$034 + $553 | 0;
   $$043 = 1;
   $$08$idx111$val170 = $$08$idx107$val;
   $$08$idx112$val175 = $$08$idx108$val;
   $$175 = $$175 + $553 | 0;
   $$379 = $565;
  }
  if (!$$033) $$170 = $$069; else $$170 = ($$069 | 0) < 3 ? 2 : $$069 + -1 | 0;
  HEAP32[$555 >> 2] = $$034;
  $$069 = $$170;
  $$074 = $$175;
  $$08$idx111$val171 = $$08$idx111$val169;
  $$08$idx112$val176 = $$08$idx112$val174;
  $$1217 = $540;
  $$278 = $$480;
 }
 $572 = ($19 | 0) == 2;
 if ($572) {
  if (!$233) HEAP32[$9 >> 2] = _stereo_analysis($20, $434, $$045, $47) | 0;
  $576 = $0 + 232 | 0;
  $578 = _hysteresis_decision(+(($$097 | 0) / 1e3 | 0 | 0), HEAP32[$576 >> 2] | 0) | 0;
  $579 = ($28 | 0) > ($578 | 0);
  HEAP32[$576 >> 2] = ($30 | 0) < (($579 ? $28 : $578) | 0) ? $30 : $579 ? $28 : $578;
 }
 if (($$278 + 48 | 0) > ($537 - $$074 | 0)) {
  $$08$idx111$val168 = $$08$idx111$val171;
  $$08$idx112$val173 = $$08$idx112$val176;
  $$165 = 5;
  $$581 = $$278;
 } else {
  do if (($28 | 0) > 0) label = 182; else {
   if (HEAP32[$169 >> 2] | 0) {
    label = 182;
    break;
   }
   $$064 = _alloc_trim_analysis($20, $434, $414, $30, $$045, $19, $47, $186, $0 + 228 | 0, +HEAPF32[$12 >> 2], HEAP32[$0 + 232 >> 2] | 0, $$098293, $$097) | 0;
  } while (0);
  if ((label | 0) == 182) {
   HEAPF32[$0 + 228 >> 2] = 0.0;
   $$064 = 5;
  }
  _ec_enc_icdf($$08, $$064, 40627, 7);
  $$08$idx109$val = HEAP32[$$08$idx115 >> 2] | 0;
  $$08$idx110$val = HEAP32[$$08$idx116 >> 2] | 0;
  $$08$idx111$val168 = $$08$idx109$val;
  $$08$idx112$val173 = $$08$idx110$val;
  $$165 = $$064;
  $$581 = _ec_tell_frac($$08$idx109$val, $$08$idx110$val) | 0;
 }
 if ($104) {
  $596 = (HEAP32[$38 >> 2] | 0) - $$045 | 0;
  $597 = 1275 >>> $92;
  $spec$select244 = ($$6 | 0) < ($597 | 0) ? $$6 : $597;
  if ($31) {
   $603 = ($19 * 72 | 0) + 32 | 0;
   $$024 = ($$071 | 0) < ($603 | 0) ? 0 : $$071 - $603 | 0;
  } else $$024 = $$071 - (($19 * 320 | 0) + 160) | 0;
  $606 = HEAP32[$448 >> 2] | 0;
  $607 = ($606 | 0) == 0;
  if ($607) $$125 = $$024; else $$125 = $$024 + (HEAP32[$0 + 216 >> 2] >> $596) | 0;
  if ($31) {
   $613 = HEAP32[$0 + 188 >> 2] | 0;
   $620 = +HEAPF32[$12 >> 2];
   $624 = $$125 + (($613 | 0) < 100 ? 96 >>> $92 : 0) - (($613 | 0) > 100 ? 144 >>> $92 : 0) + ~~(($620 + -.25) * 400.0) | 0;
   $630 = ($$581 + $$074 + 63 >> 6) + 2 | 0;
   $634 = $$082 + 296 + $$074 + 63 >> 6;
   $$03 = ($630 | 0) > ($634 | 0) ? $630 : $634;
   $$pn = !($620 > .699999988079071) | ($624 | 0) > 400 ? $624 : 400;
  } else {
   $$03 = ($$581 + $$074 + 63 >> 6) + 2 | 0;
   $$pn = _compute_vbr(HEAP32[$21 >> 2] | 0, HEAP32[$25 >> 2] | 0, $186, $$125, $$045, $$097, HEAP32[$0 + 92 >> 2] | 0, $19, HEAP32[$0 + 232 >> 2] | 0, $606, +HEAPF32[$0 + 228 >> 2], HEAP32[$13 >> 2] | 0, +HEAPF32[$12 >> 2], $$092, $451, HEAP32[$169 >> 2] | 0, (HEAP32[$0 + 236 >> 2] | 0) != 0 & 1, $$0102292, $$0103) | 0;
  }
  $654 = $$pn + $$581 | 0;
  $656 = $654 + 32 >> 6;
  $spec$select248 = ($$03 | 0) > ($656 | 0) ? $$03 : $656;
  $659 = ($spec$select244 | 0) < ($spec$select248 | 0) ? $spec$select244 : $spec$select248;
  $662 = ($$091132 | 0) == 0;
  $spec$select249 = $662 ? $659 : 2;
  $663 = $0 + 220 | 0;
  $664 = HEAP32[$663 >> 2] | 0;
  if (($664 | 0) < 970) {
   HEAP32[$663 >> 2] = $664 + 1;
   $$032 = 1.0 / +($664 + 21 | 0);
  } else $$032 = 1.0000000474974513e-03;
  do if ($607) $$658 = $spec$select249; else {
   $671 = $0 + 208 | 0;
   HEAP32[$671 >> 2] = (HEAP32[$671 >> 2] | 0) + (($662 ? $659 << 6 : 128) - $$071);
   $675 = $0 + 216 | 0;
   $678 = $0 + 212 | 0;
   $679 = HEAP32[$678 >> 2] | 0;
   $684 = $679 + ~~($$032 * +((($662 ? $654 - $$071 | 0 : 0) << $596) - (HEAP32[$675 >> 2] | 0) - $679 | 0)) | 0;
   HEAP32[$678 >> 2] = $684;
   HEAP32[$675 >> 2] = 0 - $684;
   $686 = $0 + 208 | 0;
   $687 = HEAP32[$686 >> 2] | 0;
   if (($687 | 0) >= 0) {
    $$658 = $spec$select249;
    break;
   }
   HEAP32[$686 >> 2] = 0;
   $$658 = $spec$select249 + ($662 ? ($687 | 0) / -64 | 0 : 0) | 0;
  } while (0);
  $spec$select255 = ($spec$select244 | 0) < ($$658 | 0) ? $spec$select244 : $$658;
  _ec_enc_shrink($$08, $spec$select255);
  $$08$idx111$val = HEAP32[$$08$idx115 >> 2] | 0;
  $$08$idx112$val = HEAP32[$$08$idx116 >> 2] | 0;
  $$7 = $spec$select255;
 } else {
  $$08$idx111$val = $$08$idx111$val168;
  $$08$idx112$val = $$08$idx112$val173;
  $$7 = $$6;
 }
 $693 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $694 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $695 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 $696 = $$7 << 6;
 $699 = $696 - (_ec_tell_frac($$08$idx111$val, $$08$idx112$val) | 0) + -1 | 0;
 $700 = ($$342142 | 0) == 0;
 if ($$045 >>> 0 > 1 & ($700 ^ 1)) {
  $704 = ($699 | 0) < (($$045 << 3) + 16 | 0);
  $706 = $704 ? 0 : 8;
  $812 = $704 ^ 1;
 } else {
  $706 = 0;
  $812 = 0;
 }
 $705 = $699 - $706 | 0;
 if (!(HEAP32[$0 + 120 >> 2] | 0)) $$099 = $30 + -1 | 0; else {
  do if (($$097 | 0) < ($19 * 32e3 | 0)) $$3 = 13; else {
   if (($$097 | 0) < ($19 * 48e3 | 0)) {
    $$3 = 16;
    break;
   }
   if (($$097 | 0) < ($19 * 6e4 | 0)) {
    $$3 = 18;
    break;
   }
   $$3 = ($$097 | 0) < ($19 * 8e4 | 0) ? 19 : 20;
  } while (0);
  $720 = HEAP32[$0 + 152 >> 2] | 0;
  $$099 = ($720 | 0) > ($$3 | 0) ? $720 : $$3;
 }
 $724 = $0 + 232 | 0;
 $725 = $0 + 92 | 0;
 $727 = _clt_compute_allocation($20, $28, $30, $441, $536, $$165, $724, $9, $705, $10, $694, $693, $695, $19, $$045, $$08, 1, HEAP32[$725 >> 2] | 0, (HEAP32[$169 >> 2] | 0) == 0 ? $$099 : 1) | 0;
 $728 = HEAP32[$725 >> 2] | 0;
 if (!$728) $storemerge = $727; else {
  $730 = $728 + 1 | 0;
  $731 = $728 + -1 | 0;
  $732 = ($731 | 0) > ($727 | 0);
  $storemerge = ($730 | 0) < (($732 ? $731 : $727) | 0) ? $730 : $732 ? $731 : $727;
 }
 HEAP32[$725 >> 2] = $storemerge;
 _quant_fine_energy($20, $28, $30, $52, $480, $693, $$08, $19);
 $734 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $284 | 0) + 15 & -16) | 0;
 $742 = $0 + 76 | 0;
 _quant_all_bands(1, $20, $28, $30, $434, $572 ? $434 + ($47 << 2) | 0 : 0, $734, $282, $694, $$338145, HEAP32[$0 + 80 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$724 >> 2] | 0, $452, $696 - $706 | 0, HEAP32[$10 >> 2] | 0, $$08, $$045, $727, $742, HEAP32[$221 >> 2] | 0, HEAP32[$0 + 72 >> 2] | 0, HEAP32[$0 + 68 >> 2] | 0);
 if ($812) _ec_enc_bits($$08, (HEAP32[$0 + 116 >> 2] | 0) < 2 & 1, 1);
 _quant_energy_finalise($20, $28, $30, $52, $480, $693, $695, ($$7 << 3) - (_ec_tell(HEAP32[$$08$idx115 >> 2] | 0, HEAP32[$$08$idx116 >> 2] | 0) | 0) | 0, $$08, $19);
 $755 = $53 << 2;
 _memset($56 | 0, 0, $755 | 0) | 0;
 $$322 = 0;
 do {
  $756 = Math_imul($$322, $22) | 0;
  $$13 = $28;
  while (1) {
   if (($$13 | 0) >= ($30 | 0)) break;
   $758 = $$13 + $756 | 0;
   $760 = +HEAPF32[$480 + ($758 << 2) >> 2];
   $761 = $760 > .5;
   $762 = $760 < -.5;
   HEAPF32[$56 + ($758 << 2) >> 2] = $762 | $761 ? ($762 & ($761 ^ 1) ? -.5 : .5) : $760;
   $$13 = $$13 + 1 | 0;
  }
  $$322 = $$322 + 1 | 0;
 } while (($$322 | 0) < ($19 | 0));
 L309 : do if ($$091132 | 0) {
  $$14 = 0;
  while (1) {
   if (($$14 | 0) >= ($284 | 0)) break L309;
   HEAPF32[$52 + ($$14 << 2) >> 2] = -28.0;
   $$14 = $$14 + 1 | 0;
  }
 } while (0);
 HEAP32[$0 + 104 >> 2] = HEAP32[$7 >> 2];
 HEAPF32[$0 + 108 >> 2] = $188;
 HEAP32[$0 + 112 >> 2] = $185;
 if ($776 & $264) _memcpy($52 + ($22 << 2) | 0, $52 | 0, $22 << 2 | 0) | 0;
 L318 : do if ($700) {
  _memcpy($55 | 0, $54 | 0, $755 | 0) | 0;
  _memcpy($54 | 0, $52 | 0, $755 | 0) | 0;
 } else {
  $$1518 = 0;
  while (1) {
   if (($$1518 | 0) >= ($53 | 0)) break L318;
   $780 = $54 + ($$1518 << 2) | 0;
   $781 = +HEAPF32[$780 >> 2];
   $783 = +HEAPF32[$52 + ($$1518 << 2) >> 2];
   HEAPF32[$780 >> 2] = $781 < $783 ? $781 : $783;
   $$1518 = $$1518 + 1 | 0;
  }
 } while (0);
 $$423 = 0;
 do {
  $786 = Math_imul($$423, $22) | 0;
  $$16 = 0;
  while (1) {
   if (($$16 | 0) >= ($28 | 0)) break;
   $788 = $786 + $$16 | 0;
   HEAPF32[$52 + ($788 << 2) >> 2] = 0.0;
   HEAPF32[$55 + ($788 << 2) >> 2] = -28.0;
   HEAPF32[$54 + ($788 << 2) >> 2] = -28.0;
   $$16 = $$16 + 1 | 0;
  }
  $$17 = $30;
  while (1) {
   if (($$17 | 0) >= ($22 | 0)) break;
   $794 = $786 + $$17 | 0;
   HEAPF32[$52 + ($794 << 2) >> 2] = 0.0;
   HEAPF32[$55 + ($794 << 2) >> 2] = -28.0;
   HEAPF32[$54 + ($794 << 2) >> 2] = -28.0;
   $$17 = $$17 + 1 | 0;
  }
  $$423 = $$423 + 1 | 0;
 } while (($$423 | 0) < ($17 | 0));
 $803 = $0 + 116 | 0;
 if (!($$342142 | $$0101283)) $storemerge280 = 0; else $storemerge280 = (HEAP32[$803 >> 2] | 0) + 1 | 0;
 HEAP32[$803 >> 2] = $storemerge280;
 HEAP32[$742 >> 2] = HEAP32[$$08$idx116 >> 2];
 _ec_enc_done($$08);
 $808 = (_ec_get_error(HEAP32[$$08 + 44 >> 2] | 0) | 0) == 0;
 _llvm_stackrestore($125 | 0);
 $$1 = $808 ? $$7 : -3;
 STACKTOP = sp;
 return $$1 | 0;
}

function _tonality_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$010 = 0, $$011 = 0, $$014 = 0, $$02 = 0.0, $$023 = 0.0, $$024 = 0.0, $$025 = 0.0, $$026 = 0.0, $$027 = 0.0, $$028 = 0.0, $$030 = 0.0, $$031 = 0.0, $$032 = 0.0, $$033 = 0.0, $$034 = 0.0, $$035 = 0.0, $$037 = 0.0, $$040 = 0.0, $$043 = 0.0, $$044 = 0.0, $$045 = 0, $$052 = 0.0, $$053 = 0.0, $$06 = 0.0, $$07 = 0, $$08 = 0.0, $$1 = 0, $$10 = 0, $$11 = 0, $$111 = 0.0, $$112 = 0, $$113 = 0.0, $$114 = 0.0, $$115 = 0, $$12 = 0, $$129 = 0.0, $$13 = 0, $$14 = 0, $$146 = 0, $$15 = 0, $$1513 = 0, $$16 = 0, $$17 = 0, $$19 = 0.0, $$2 = 0, $$216 = 0, $$239 = 0.0, $$247 = 0, $$3 = 0, $$317 = 0, $$348 = 0, $$4 = 0, $$418 = 0, $$5 = 0, $$550 = 0, $$6 = 0, $$620 = 0, $$7 = 0, $$721 = 0, $$8 = 0, $$822 = 0, $$9 = 0, $$op131 = 0.0, $$phi$trans$insert69 = 0, $$phi$trans$insert71 = 0, $$pre$phi74Z2D = 0, $$pre$phi75Z2D = 0, $10 = 0, $101 = 0.0, $104 = 0.0, $105 = 0, $107 = 0.0, $11 = 0, $110 = 0.0, $112 = 0.0, $117 = 0.0, $118 = 0, $12 = 0, $120 = 0.0, $121 = 0, $123 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $133 = 0.0, $137 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $15 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $175 = 0, $18 = 0, $181 = 0.0, $184 = 0.0, $189 = 0.0, $19 = 0, $191 = 0.0, $193 = 0, $195 = 0.0, $20 = 0, $201 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $215 = 0, $217 = 0, $22 = 0, $220 = 0.0, $222 = 0, $224 = 0.0, $228 = 0.0, $23 = 0, $232 = 0.0, $234 = 0.0, $237 = 0.0, $24 = 0, $25 = 0, $253 = 0.0, $255 = 0.0, $256 = 0.0, $258 = 0.0, $26 = 0, $261 = 0.0, $269 = 0, $27 = 0, $270 = 0, $272 = 0.0, $274 = 0.0, $280 = 0.0, $281 = 0.0, $283 = 0.0, $284 = 0.0, $286 = 0.0, $288 = 0.0, $29 = 0, $291 = 0.0, $293 = 0.0, $295 = 0.0, $297 = 0.0, $308 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $314 = 0.0, $315 = 0, $317 = 0.0, $320 = 0.0, $330 = 0.0, $337 = 0.0, $34 = 0.0, $340 = 0, $346 = 0.0, $349 = 0.0, $35 = 0, $351 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $358 = 0.0, $362 = 0, $370 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $395 = 0.0, $40 = 0, $403 = 0, $412 = 0.0, $423 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $430 = 0.0, $431 = 0, $433 = 0, $434 = 0, $436 = 0, $439 = 0.0, $441 = 0.0, $443 = 0, $445 = 0.0, $451 = 0.0, $457 = 0.0, $458 = 0, $461 = 0, $463 = 0.0, $465 = 0.0, $471 = 0.0, $48 = 0, $483 = 0.0, $488 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $495 = 0.0, $497 = 0.0, $50 = 0, $52 = 0, $520 = 0, $524 = 0, $529 = 0.0, $53 = 0, $530 = 0, $532 = 0.0, $534 = 0.0, $536 = 0, $538 = 0.0, $54 = 0, $542 = 0, $553 = 0, $56 = 0.0, $568 = 0.0, $57 = 0, $571 = 0.0, $575 = 0.0, $576 = 0, $578 = 0.0, $580 = 0.0, $582 = 0, $588 = 0, $59 = 0.0, $60 = 0, $61 = 0, $615 = 0.0, $616 = 0, $63 = 0, $64 = 0, $65 = 0, $657 = 0, $666 = 0, $670 = 0.0, $68 = 0.0, $683 = 0, $688 = 0, $690 = 0, $697 = 0.0, $720 = 0, $79 = 0, $94 = 0, $spec$select126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11344 | 0;
 $10 = sp + 11264 | 0;
 $11 = sp + 11184 | 0;
 $12 = sp + 11152 | 0;
 $13 = sp + 11040 | 0;
 $14 = sp + 11336 | 0;
 $15 = sp + 10960 | 0;
 $16 = sp + 1e4 | 0;
 $17 = sp + 9968 | 0;
 $18 = sp + 9888 | 0;
 $19 = sp + 9808 | 0;
 $20 = sp + 9728 | 0;
 $21 = sp + 9600 | 0;
 $22 = sp + 5760 | 0;
 $23 = sp + 1920 | 0;
 $24 = sp + 960 | 0;
 $25 = sp;
 $26 = $0 + 7436 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $29 = $27 + 1 | 0;
 $31 = ($27 | 0) > 9 ? .10000000149011612 : 1.0 / +($29 | 0);
 $34 = ($27 | 0) > 24 ? .03999999910593033 : 1.0 / +($29 | 0);
 $35 = ($27 | 0) > 99;
 $$op131 = 1.0 / +($27 + 1 | 0);
 $38 = ($27 | 0) < 2;
 $39 = $0 + 8 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 L1 : do if (($40 | 0) < 48e3) {
  switch ($40 | 0) {
  case 16e3:
   break;
  default:
   {
    $$1 = $3;
    $$15 = $4;
    break L1;
   }
  }
  $$1 = ($3 * 3 | 0) / 2 | 0;
  $$15 = ($4 * 3 | 0) / 2 | 0;
 } else {
  switch ($40 | 0) {
  case 48e3:
   break;
  default:
   {
    $$1 = $3;
    $$15 = $4;
    break L1;
   }
  }
  $$1 = ($3 | 0) / 2 | 0;
  $$15 = ($4 | 0) / 2 | 0;
 } while (0);
 $48 = HEAP32[$1 + 72 >> 2] | 0;
 $50 = $0 + 5772 | 0;
 if (!$27) {
  HEAP32[$50 >> 2] = 240;
  $52 = 240;
 } else $52 = HEAP32[$50 >> 2] | 0;
 $53 = $0 + 7588 | 0;
 $54 = 720 - $52 | 0;
 $56 = +_downmix_and_resample($9, $2, $0 + 2892 + ($52 << 2) | 0, $53, ($$1 | 0) < ($54 | 0) ? $$1 : $54, $$15, $5, $6, $7, $40);
 $57 = $0 + 7456 | 0;
 $59 = +HEAPF32[$57 >> 2] + $56;
 HEAPF32[$57 >> 2] = $59;
 $60 = HEAP32[$50 >> 2] | 0;
 $61 = $60 + $$1 | 0;
 if (($61 | 0) < 720) {
  HEAP32[$50 >> 2] = $61;
  STACKTOP = sp;
  return;
 }
 $63 = $0 + 7444 | 0;
 $64 = HEAP32[$63 >> 2] | 0;
 $65 = $0 + 7600 + ($64 << 6) | 0;
 HEAP32[$63 >> 2] = $64 + (($64 | 0) > 98 ? -99 : 1);
 $$011 = 0;
 while (1) {
  if (($$011 | 0) == 240) break;
  $68 = +HEAPF32[28032 + ($$011 << 2) >> 2];
  HEAPF32[$22 + ($$011 << 3) >> 2] = $68 * +HEAPF32[$0 + 2892 + ($$011 << 2) >> 2];
  HEAPF32[$22 + ($$011 << 3) + 4 >> 2] = $68 * +HEAPF32[$0 + 2892 + ($$011 + 240 << 2) >> 2];
  $79 = 480 - $$011 + -1 | 0;
  HEAPF32[$22 + ($79 << 3) >> 2] = $68 * +HEAPF32[$0 + 2892 + ($79 << 2) >> 2];
  HEAPF32[$22 + ($79 << 3) + 4 >> 2] = $68 * +HEAPF32[$0 + 2892 + (720 - $$011 + -1 << 2) >> 2];
  $$011 = $$011 + 1 | 0;
 }
 _memcpy($0 + 2892 | 0, $0 + 4812 | 0, 960) | 0;
 $94 = $$1 + ($60 + -720) | 0;
 HEAPF32[$57 >> 2] = +_downmix_and_resample($9, $2, $0 + 3852 | 0, $53, $94, $$15 + 720 - $60 | 0, $5, $6, $7, HEAP32[$39 >> 2] | 0);
 HEAP32[$50 >> 2] = $94 + 240;
 _opus_fft_c($48, $22, $23);
 $101 = +HEAPF32[$23 >> 2];
 if ($101 != $101 | 0.0 != 0.0) {
  HEAP32[$65 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $$112 = 1;
 while (1) {
  if (($$112 | 0) == 240) break;
  $104 = +HEAPF32[$23 + ($$112 << 3) >> 2];
  $105 = 480 - $$112 | 0;
  $107 = +HEAPF32[$23 + ($105 << 3) >> 2];
  $110 = +HEAPF32[$23 + ($$112 << 3) + 4 >> 2];
  $112 = +HEAPF32[$23 + ($105 << 3) + 4 >> 2];
  $117 = +_fast_atan2f_756($110 - $112, $104 + $107) * .15915493667125702;
  $118 = $0 + 12 + ($$112 << 2) | 0;
  $120 = $117 - +HEAPF32[$118 >> 2];
  $121 = $0 + 972 + ($$112 << 2) | 0;
  $123 = $120 - +HEAPF32[$121 >> 2];
  $125 = +_fast_atan2f_756($107 - $104, $110 + $112) * .15915493667125702;
  $126 = $125 - $117;
  $127 = $126 - $120;
  $130 = $123 - +(_lrintf($123) | 0);
  $131 = +Math_abs(+$130);
  $133 = $130 * $130;
  $137 = $127 - +(_lrintf($127) | 0);
  HEAPF32[$25 + ($$112 << 2) >> 2] = $131 + +Math_abs(+$137);
  $140 = $137 * $137;
  $141 = $140 * $140;
  $142 = $0 + 1932 + ($$112 << 2) | 0;
  HEAPF32[$24 + ($$112 << 2) >> 2] = 1.0 / ((+HEAPF32[$142 >> 2] + $133 * $133 + $141 * 2.0) * .25 * 62341.81640625 + 1.0) + -.014999999664723873;
  HEAPF32[$16 + ($$112 << 2) >> 2] = 1.0 / ($141 * 62341.81640625 + 1.0) + -.014999999664723873;
  HEAPF32[$118 >> 2] = $125;
  HEAPF32[$121 >> 2] = $126;
  HEAPF32[$142 >> 2] = $141;
  $$112 = $$112 + 1 | 0;
 }
 $$2 = 2;
 while (1) {
  if (($$2 | 0) == 239) break;
  $159 = $16 + ($$2 << 2) | 0;
  $162 = $16 + ($$2 + -1 << 2) | 0;
  $163 = +HEAPF32[$162 >> 2];
  $164 = $$2 + 1 | 0;
  $165 = $16 + ($164 << 2) | 0;
  $166 = +HEAPF32[$165 >> 2];
  $167 = $163 > $166;
  $170 = $24 + ($$2 << 2) | 0;
  $171 = +HEAPF32[$170 >> 2];
  $172 = +HEAPF32[(+HEAPF32[$159 >> 2] < ($167 ? $163 : $166) ? $159 : $167 ? $162 : $165) >> 2] + -.10000000149011612;
  HEAPF32[$170 >> 2] = ($171 > $172 ? $171 : $172) * .8999999761581421;
  $$2 = $164;
 }
 $175 = $0 + 7600 + ($64 << 6) + 16 | 0;
 HEAPF32[$175 >> 2] = 0.0;
 L31 : do if (!(HEAP32[$26 >> 2] | 0)) {
  $$014 = 0;
  while (1) {
   if (($$014 | 0) == 18) break L31;
   HEAPF32[$0 + 7008 + ($$014 << 2) >> 2] = 1.0e10;
   HEAPF32[$0 + 7080 + ($$014 << 2) >> 2] = -1.0e10;
   $$014 = $$014 + 1 | 0;
  }
 } while (0);
 $181 = $101 * 2.0;
 $184 = +HEAPF32[$23 + 4 >> 2] * 2.0;
 $$032 = $181 * $181 + $184 * $184;
 $$3 = 1;
 while (1) {
  if (($$3 | 0) == 4) break;
  $189 = +HEAPF32[$23 + ($$3 << 3) >> 2];
  $191 = +HEAPF32[$23 + ($$3 << 3) + 4 >> 2];
  $193 = 480 - $$3 | 0;
  $195 = +HEAPF32[$23 + ($193 << 3) >> 2];
  $201 = +HEAPF32[$23 + ($193 << 3) + 4 >> 2];
  $$032 = $$032 + ($189 * $189 + $195 * $195 + $191 * $191 + $201 * $201);
  $$3 = $$3 + 1 | 0;
 }
 $210 = +Math_log(+($$032 + 1.000000013351432e-10)) * .7213475108146667;
 HEAPF32[$18 >> 2] = $210;
 $211 = $0 + 7432 | 0;
 $$028 = 0.0;
 $$030 = 0.0;
 $$031 = 0.0;
 $$033 = 0.0;
 $$034 = 0.0;
 $$035 = 0.0;
 $$043 = 0.0;
 $$115 = 0;
 while (1) {
  if ($$115 >>> 0 >= 18) break;
  $215 = $$115 + 1 | 0;
  $217 = HEAP32[28992 + ($215 << 2) >> 2] | 0;
  $$025 = 0.0;
  $$026 = 0.0;
  $$027 = 0.0;
  $$4 = HEAP32[28992 + ($$115 << 2) >> 2] | 0;
  while (1) {
   if (($$4 | 0) >= ($217 | 0)) break;
   $220 = +HEAPF32[$23 + ($$4 << 3) >> 2];
   $222 = 480 - $$4 | 0;
   $224 = +HEAPF32[$23 + ($222 << 3) >> 2];
   $228 = +HEAPF32[$23 + ($$4 << 3) + 4 >> 2];
   $232 = +HEAPF32[$23 + ($222 << 3) + 4 >> 2];
   $234 = $220 * $220 + $224 * $224 + $228 * $228 + $232 * $232;
   $237 = +HEAPF32[$24 + ($$4 << 2) >> 2];
   $$025 = $$025 + $234 * 2.0 * (.5 - +HEAPF32[$25 + ($$4 << 2) >> 2]);
   $$026 = $$026 + $234 * ($237 < 0.0 ? 0.0 : $237);
   $$027 = $$027 + $234;
   $$4 = $$4 + 1 | 0;
  }
  if (!($$027 < 1.0e9) | ($$027 != $$027 | 0.0 != 0.0)) {
   label = 33;
   break;
  }
  HEAPF32[$0 + 5856 + ((HEAP32[$211 >> 2] | 0) * 72 | 0) + ($$115 << 2) >> 2] = $$027;
  $253 = $$027 + 1.0000000036274937e-15;
  $255 = $$031 + $$025 / $253;
  $256 = $$027 + 1.000000013351432e-10;
  $258 = $$043 + +Math_sqrt(+$256);
  $261 = +Math_log(+$256);
  HEAPF32[$11 + ($$115 << 2) >> 2] = $261;
  HEAPF32[$18 + ($215 << 2) >> 2] = $261 * .7213475108146667;
  HEAPF32[$0 + 6432 + ((HEAP32[$211 >> 2] | 0) * 72 | 0) + ($$115 << 2) >> 2] = $261;
  if (!(HEAP32[$26 >> 2] | 0)) {
   $269 = $0 + 7008 + ($$115 << 2) | 0;
   HEAPF32[$269 >> 2] = $261;
   $270 = $0 + 7080 + ($$115 << 2) | 0;
   HEAPF32[$270 >> 2] = $261;
   $$pre$phi74Z2D = $270;
   $$pre$phi75Z2D = $269;
   $272 = $261;
   $274 = $261;
  } else {
   $$phi$trans$insert69 = $0 + 7080 + ($$115 << 2) | 0;
   $$phi$trans$insert71 = $0 + 7008 + ($$115 << 2) | 0;
   $$pre$phi74Z2D = $$phi$trans$insert69;
   $$pre$phi75Z2D = $$phi$trans$insert71;
   $272 = +HEAPF32[$$phi$trans$insert69 >> 2];
   $274 = +HEAPF32[$$phi$trans$insert71 >> 2];
  }
  do if ($274 + 7.5 < $272) if ($272 - $261 > $261 - $274) {
   $280 = $272 + -.009999999776482582;
   HEAPF32[$$pre$phi74Z2D >> 2] = $280;
   $283 = $280;
   $286 = $274;
   break;
  } else {
   $281 = $274 + .009999999776482582;
   HEAPF32[$$pre$phi75Z2D >> 2] = $281;
   $283 = $272;
   $286 = $281;
   break;
  } else {
   $283 = $272;
   $286 = $274;
  } while (0);
  if ($283 < $261) {
   HEAPF32[$$pre$phi74Z2D >> 2] = $261;
   $284 = $261 + -15.0;
   $$111 = $284 > $286 ? $284 : $286;
   HEAPF32[$$pre$phi75Z2D >> 2] = $$111;
   $291 = $$111;
   $293 = $261;
  } else if ($286 > $261) {
   HEAPF32[$$pre$phi75Z2D >> 2] = $261;
   $288 = $261 + 15.0;
   $$113 = $288 < $283 ? $288 : $283;
   HEAPF32[$$pre$phi74Z2D >> 2] = $$113;
   $291 = $261;
   $293 = $$113;
  } else {
   $291 = $286;
   $293 = $283;
  }
  $295 = ($261 - $291) / ($293 - $291 + 1.0000000036274937e-15);
  $$023 = 0.0;
  $$024 = 0.0;
  $$5 = 0;
  while (1) {
   if (($$5 | 0) == 8) break;
   $297 = +HEAPF32[$0 + 5856 + ($$5 * 72 | 0) + ($$115 << 2) >> 2];
   $$023 = $$023 + $297;
   $$024 = $$024 + +Math_sqrt(+$297);
   $$5 = $$5 + 1 | 0;
  }
  $308 = $$024 / +Math_sqrt(+($$023 * 8.0 + 1.0e-15));
  $310 = $308 > .9900000095367432 ? .9900000095367432 : $308;
  $311 = $310 * $310;
  $312 = $311 * $311;
  $314 = $$026 / $253;
  $315 = $0 + 5776 + ($$115 << 2) | 0;
  $317 = $312 * +HEAPF32[$315 >> 2];
  $$114 = $314 > $317 ? $314 : $317;
  HEAPF32[$10 + ($$115 << 2) >> 2] = $$114;
  $320 = $$028 + $$114;
  if ($$115 >>> 0 > 8) $$129 = $320 - +HEAPF32[$10 + ($$115 + -9 << 2) >> 2]; else $$129 = $320;
  $330 = (+($$115 + -18 | 0) * .029999999329447746 + 1.0) * $$129;
  HEAPF32[$315 >> 2] = $$114;
  $$028 = $$129;
  $$030 = $$030 > $330 ? $$030 : $330;
  $$031 = $255;
  $$033 = $$033 + $$114 * +($$115 + -8 | 0);
  $$034 = $$034 + $312;
  $$035 = $$035 + $295;
  $$043 = $258;
  $$115 = $215;
 }
 if ((label | 0) == 33) {
  HEAP32[$65 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 HEAPF32[$19 >> 2] = $210;
 $337 = $210 + -2.5;
 HEAPF32[$20 >> 2] = $337;
 $$216 = 1;
 $355 = $337;
 while (1) {
  if (($$216 | 0) == 19) break;
  $340 = $$216 + -1 | 0;
  $346 = +((HEAP32[28992 + ($$216 << 2) >> 2] | 0) - (HEAP32[28992 + ($340 << 2) >> 2] | 0) | 0) * 2.0 * .25;
  $349 = +HEAPF32[$19 + ($340 << 2) >> 2] + $346;
  $351 = +HEAPF32[$18 + ($$216 << 2) >> 2];
  HEAPF32[$19 + ($$216 << 2) >> 2] = $349 < $351 ? $349 : $351;
  $354 = $355 - $346;
  $356 = $351 + -2.5;
  $358 = $354 > $356 ? $354 : $356;
  HEAPF32[$20 + ($$216 << 2) >> 2] = $358;
  $$216 = $$216 + 1 | 0;
  $355 = $358;
 }
 $$317 = 16;
 while (1) {
  if (($$317 | 0) <= -1) break;
  $362 = $$317 + 1 | 0;
  $370 = +((HEAP32[28992 + ($362 << 2) >> 2] | 0) - (HEAP32[28992 + ($$317 << 2) >> 2] | 0) | 0) * 2.0 * .25;
  $373 = +HEAPF32[$19 + ($362 << 2) >> 2] + $370;
  $374 = $19 + ($$317 << 2) | 0;
  $375 = +HEAPF32[$374 >> 2];
  HEAPF32[$374 >> 2] = $373 < $375 ? $373 : $375;
  $379 = +HEAPF32[$20 + ($362 << 2) >> 2] - $370;
  $380 = $20 + ($$317 << 2) | 0;
  $381 = +HEAPF32[$380 >> 2];
  HEAPF32[$380 >> 2] = $379 > $381 ? $379 : $381;
  $$317 = $$317 + -1 | 0;
 }
 $$418 = 0;
 while (1) {
  if (($$418 | 0) == 19) break;
  $388 = +HEAPF32[$18 + ($$418 << 2) >> 2];
  $389 = +HEAPF32[$20 + ($$418 << 2) >> 2] - $388;
  $395 = $388 - (+HEAPF32[$19 + ($$418 << 2) >> 2] + 2.5);
  $403 = ~~+Math_floor(+((($389 < 0.0 ? 0.0 : $389) + ($395 < 0.0 ? 0.0 : $395)) * 64.0 + .5));
  HEAP8[$0 + 7600 + ($64 << 6) + 44 + $$418 >> 0] = ($403 | 0) < 255 ? $403 : 255;
  $$418 = $$418 + 1 | 0;
 }
 $$053 = 0.0;
 $$6 = 0;
 while (1) {
  if (($$6 | 0) == 8) break;
  $$010 = 0;
  $$08 = 999999986991104.0;
  while (1) {
   if (($$010 | 0) == 8) break;
   $$06 = 0.0;
   $$07 = 0;
   while (1) {
    if (($$07 | 0) == 18) break;
    $412 = +HEAPF32[$0 + 6432 + ($$6 * 72 | 0) + ($$07 << 2) >> 2] - +HEAPF32[$0 + 6432 + ($$010 * 72 | 0) + ($$07 << 2) >> 2];
    $$06 = $$06 + $412 * $412;
    $$07 = $$07 + 1 | 0;
   }
   $$19 = ($$010 | 0) == ($$6 | 0) | $$08 < $$06 ? $$08 : $$06;
   $$010 = $$010 + 1 | 0;
   $$08 = $$19;
  }
  $$053 = $$053 + $$08;
  $$6 = $$6 + 1 | 0;
 }
 $423 = +Math_sqrt(+($$053 * .125 / 18.0));
 $427 = ($8 | 0) < 8 ? 5.699999746866524e-04 : 5.699999746866524e-04 / +(1 << $8 + -8 | 0);
 $428 = $427 * $427;
 $429 = $38 ? 0.0 : $35 ? .9900000095367432 : 1.0 - $$op131;
 $430 = $428 * 3.0;
 $431 = $0 + 5852 | 0;
 $$037 = 0.0;
 $$040 = 0.0;
 $$044 = 0.0;
 $$045 = 0;
 $$052 = 0.0;
 $$620 = 0;
 while (1) {
  if (($$620 | 0) == 18) break;
  $433 = HEAP32[28992 + ($$620 << 2) >> 2] | 0;
  $434 = $$620 + 1 | 0;
  $436 = HEAP32[28992 + ($434 << 2) >> 2] | 0;
  $$02 = 0.0;
  $$7 = $433;
  while (1) {
   if (($$7 | 0) >= ($436 | 0)) break;
   $439 = +HEAPF32[$23 + ($$7 << 3) >> 2];
   $441 = +HEAPF32[$23 + ($$7 << 3) + 4 >> 2];
   $443 = 480 - $$7 | 0;
   $445 = +HEAPF32[$23 + ($443 << 3) >> 2];
   $451 = +HEAPF32[$23 + ($443 << 3) + 4 >> 2];
   $$02 = $$02 + ($439 * $439 + $445 * $445 + $441 * $441 + $451 * $451);
   $$7 = $$7 + 1 | 0;
  }
  $457 = $$052 > $$02 ? $$052 : $$02;
  $458 = $$620 >>> 0 < 11;
  $461 = $0 + 7152 + ($$620 << 2) | 0;
  $463 = $429 * +HEAPF32[$461 >> 2];
  $465 = $463 > $$02 ? $463 : $$02;
  HEAPF32[$461 >> 2] = $465;
  if ($$02 * 1.0e9 > $457) {
   $471 = +($436 - $433 | 0);
   $$146 = ($$02 > $428 * $471 ? 1 : ($$02 > $465 ? $$02 : $465) > $430 * $471) ? $434 : $$045;
  } else $$146 = $$045;
  HEAP32[$15 + ($$620 << 2) >> 2] = $$02 < ((HEAP32[$431 >> 2] | 0) > ($$620 | 0) ? .009999999776482582 : .05000000074505806) * $$044 & 1;
  $483 = $$044 * .05000000074505806;
  $$037 = $458 ? $$037 : $$037 + $$02;
  $$040 = $458 ? $$040 + $$02 : $$040;
  $$044 = $483 > $$02 ? $483 : $$02;
  $$045 = $$146;
  $$052 = $457;
  $$620 = $434;
 }
 if ((HEAP32[$39 >> 2] | 0) == 48e3) {
  $488 = $59 * 2.7777778450399637e-04;
  $490 = (HEAP32[$431 >> 2] | 0) == 20;
  $491 = $490 ? 10.0 : 30.0;
  $492 = $$037 + $488;
  $493 = $0 + 7224 | 0;
  $495 = $429 * +HEAPF32[$493 >> 2];
  $497 = $495 > $488 ? $495 : $488;
  HEAPF32[$493 >> 2] = $497;
  if (($488 > $497 ? $488 : $497) > $491 * 3.0 * $428 * 160.0) label = 80; else if ($488 > $491 * $428 * 160.0) label = 80; else $$247 = $$045;
  if ((label | 0) == 80) $$247 = 20;
  HEAP32[$15 + 72 >> 2] = $488 < ($490 ? .009999999776482582 : .05000000074505806) * $$044 & 1;
  $$239 = $492;
  $$348 = $$247;
 } else {
  $$239 = $$037;
  $$348 = $$045;
 }
 HEAPF32[$0 + 7600 + ($64 << 6) + 40 >> 2] = $$239 > $$040 ? $$040 / $$239 : 1.0;
 if (($$348 | 0) == 20) $$550 = (HEAP32[$15 + 72 >> 2] | 0) == 0 ? 20 : 18; else if (($$348 + -1 | 0) >>> 0 < 18) {
  $520 = $$348 + -1 | 0;
  $$550 = (HEAP32[$15 + ($520 << 2) >> 2] | 0) == 0 ? $$348 : $520;
 } else $$550 = $$348;
 $524 = HEAP32[$26 >> 2] | 0;
 $spec$select126 = ($524 | 0) < 3 ? 20 : $$550;
 $529 = +_llvm_log10_f64(+$$043) * 20.0;
 $530 = $0 + 7424 | 0;
 $532 = +HEAPF32[$530 >> 2] + -.003000000026077032;
 $534 = $532 > $529 ? $532 : $529;
 HEAPF32[$530 >> 2] = $534;
 $536 = $0 + 7428 | 0;
 $538 = +HEAPF32[$536 >> 2] * (1.0 - $34);
 HEAPF32[$536 >> 2] = $529 < $534 + -30.0 ? $538 + $34 : $538;
 $$8 = 0;
 while (1) {
  if (($$8 | 0) == 8) break;
  $542 = $$8 << 4;
  $$01 = 0.0;
  $$721 = 0;
  while (1) {
   if (($$721 | 0) == 16) break;
   $$01 = $$01 + +HEAPF32[29072 + ($542 + $$721 << 2) >> 2] * +HEAPF32[$11 + ($$721 << 2) >> 2];
   $$721 = $$721 + 1 | 0;
  }
  HEAPF32[$12 + ($$8 << 2) >> 2] = $$01;
  $$8 = $$8 + 1 | 0;
 }
 $$9 = 0;
 while (1) {
  if (($$9 | 0) == 8) break;
  $553 = $$9 << 4;
  $$0 = 0.0;
  $$822 = 0;
  while (1) {
   if (($$822 | 0) == 16) break;
   $$0 = $$0 + +HEAPF32[29072 + ($553 + $$822 << 2) >> 2] * .5 * (+HEAPF32[$0 + 7080 + ($$822 << 2) >> 2] + +HEAPF32[$0 + 7008 + ($$822 << 2) >> 2]);
   $$822 = $$822 + 1 | 0;
  }
  HEAPF32[$17 + ($$9 << 2) >> 2] = $$0;
  $$9 = $$9 + 1 | 0;
 }
 $568 = $$034 / 18.0;
 $571 = $$031 / 18.0;
 HEAPF32[$175 >> 2] = $571 + (1.0 - $571) * (($524 | 0) < 10 ? .5 : $$035 / 18.0);
 $575 = $$030 / 9.0;
 $576 = $0 + 5848 | 0;
 $578 = +HEAPF32[$576 >> 2] * .800000011920929;
 $580 = $575 > $578 ? $575 : $578;
 HEAPF32[$576 >> 2] = $580;
 $582 = $0 + 7600 + ($64 << 6) + 8 | 0;
 HEAPF32[$582 >> 2] = $$033 * .015625;
 HEAP32[$211 >> 2] = ((HEAP32[$211 >> 2] | 0) + 1 | 0) % 8 | 0;
 HEAP32[$26 >> 2] = ($524 | 0) < 9999 ? $524 + 1 | 0 : 1e4;
 $588 = $0 + 7600 + ($64 << 6) + 4 | 0;
 HEAPF32[$588 >> 2] = $580;
 $$10 = 0;
 while (1) {
  if (($$10 | 0) == 4) break;
  HEAPF32[$13 + ($$10 << 2) >> 2] = (+HEAPF32[$12 + ($$10 << 2) >> 2] + +HEAPF32[$0 + 7228 + ($$10 + 24 << 2) >> 2]) * -.12298999726772308 + (+HEAPF32[$0 + 7228 + ($$10 << 2) >> 2] + +HEAPF32[$0 + 7228 + ($$10 + 16 << 2) >> 2]) * .49195000529289246 + +HEAPF32[$0 + 7228 + ($$10 + 8 << 2) >> 2] * .6969299912452698 - +HEAPF32[$0 + 7356 + ($$10 << 2) >> 2] * 1.4349000453948975;
  $$10 = $$10 + 1 | 0;
 }
 $615 = 1.0 - $31;
 $$11 = 0;
 while (1) {
  if (($$11 | 0) == 4) break;
  $616 = $0 + 7356 + ($$11 << 2) | 0;
  HEAPF32[$616 >> 2] = $615 * +HEAPF32[$616 >> 2] + $31 * +HEAPF32[$12 + ($$11 << 2) >> 2];
  $$11 = $$11 + 1 | 0;
 }
 $$12 = 0;
 while (1) {
  if (($$12 | 0) == 4) break;
  HEAPF32[$13 + ($$12 + 4 << 2) >> 2] = (+HEAPF32[$12 + ($$12 << 2) >> 2] - +HEAPF32[$0 + 7228 + ($$12 + 24 << 2) >> 2]) * .6324599981307983 + (+HEAPF32[$0 + 7228 + ($$12 << 2) >> 2] - +HEAPF32[$0 + 7228 + ($$12 + 16 << 2) >> 2]) * .31622999906539917;
  $$12 = $$12 + 1 | 0;
 }
 $$13 = 0;
 while (1) {
  if (($$13 | 0) == 3) break;
  $657 = $$13 + 8 | 0;
  HEAPF32[$13 + ($657 << 2) >> 2] = (+HEAPF32[$12 + ($$13 << 2) >> 2] + +HEAPF32[$0 + 7228 + ($$13 + 24 << 2) >> 2]) * .5345199704170227 - (+HEAPF32[$0 + 7228 + ($$13 << 2) >> 2] + +HEAPF32[$0 + 7228 + ($$13 + 16 << 2) >> 2]) * .26725998520851135 - +HEAPF32[$0 + 7228 + ($657 << 2) >> 2] * .5345199704170227;
  $$13 = $$13 + 1 | 0;
 }
 L155 : do if ((HEAP32[$26 >> 2] | 0) > 5) {
  $$14 = 0;
  while (1) {
   if (($$14 | 0) == 9) break L155;
   $666 = $0 + 7388 + ($$14 << 2) | 0;
   $670 = +HEAPF32[$13 + ($$14 << 2) >> 2];
   HEAPF32[$666 >> 2] = $615 * +HEAPF32[$666 >> 2] + $31 * $670 * $670;
   $$14 = $$14 + 1 | 0;
  }
 } while (0);
 $$1513 = 0;
 while (1) {
  if (($$1513 | 0) == 4) break;
  HEAPF32[$13 + ($$1513 << 2) >> 2] = +HEAPF32[$12 + ($$1513 << 2) >> 2] - +HEAPF32[$17 + ($$1513 << 2) >> 2];
  $$1513 = $$1513 + 1 | 0;
 }
 $$16 = 0;
 while (1) {
  if (($$16 | 0) == 8) break;
  $683 = $0 + 7228 + ($$16 + 16 << 2) | 0;
  HEAP32[$0 + 7228 + ($$16 + 24 << 2) >> 2] = HEAP32[$683 >> 2];
  $688 = $0 + 7228 + ($$16 + 8 << 2) | 0;
  HEAP32[$683 >> 2] = HEAP32[$688 >> 2];
  $690 = $0 + 7228 + ($$16 << 2) | 0;
  HEAP32[$688 >> 2] = HEAP32[$690 >> 2];
  HEAP32[$690 >> 2] = HEAP32[$12 + ($$16 << 2) >> 2];
  $$16 = $$16 + 1 | 0;
 }
 $$17 = 0;
 while (1) {
  if (($$17 | 0) == 9) break;
  $697 = +Math_sqrt(+(+HEAPF32[$0 + 7388 + ($$17 << 2) >> 2]));
  HEAPF32[$13 + ($$17 + 11 << 2) >> 2] = $697 - +HEAPF32[29584 + ($$17 << 2) >> 2];
  $$17 = $$17 + 1 | 0;
 }
 HEAPF32[$13 + 72 >> 2] = $423 + -.7799999713897705;
 HEAPF32[$13 + 80 >> 2] = +HEAPF32[$588 >> 2] + -.15472300350666046;
 HEAPF32[$13 + 84 >> 2] = +HEAPF32[$175 >> 2] + -.7246429920196533;
 HEAPF32[$13 + 88 >> 2] = $568 + -.7437170147895813;
 HEAPF32[$13 + 92 >> 2] = +HEAPF32[$582 >> 2] + .06921599805355072;
 HEAPF32[$13 + 96 >> 2] = +HEAPF32[$536 >> 2] + -.06792999804019928;
 _compute_dense(39948, $21, $13);
 $720 = $0 + 7460 | 0;
 _compute_gru($720, $21);
 _compute_dense(39968, $14, $720);
 HEAP32[$0 + 7600 + ($64 << 6) + 36 >> 2] = HEAP32[$14 + 4 >> 2];
 HEAP32[$0 + 7600 + ($64 << 6) + 20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$0 + 7600 + ($64 << 6) + 32 >> 2] = $spec$select126;
 HEAP32[$431 >> 2] = $spec$select126;
 HEAPF32[$0 + 7600 + ($64 << 6) + 12 >> 2] = $571;
 HEAP32[$65 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _silk_Encode($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $$017 = 0, $$021 = 0, $$022 = 0, $$024 = 0, $$025 = 0, $$026 = 0, $$037 = 0, $$038 = 0, $$04 = 0, $$05 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$10 = 0, $$1036 = 0, $$11 = 0, $$112 = 0, $$118 = 0, $$12 = 0, $$123 = 0, $$127 = 0, $$13 = 0, $$139 = 0, $$213 = 0, $$219 = 0, $$228 = 0, $$3 = 0, $$314 = 0, $$320 = 0, $$329 = 0, $$415 = 0, $$430 = 0, $$5 = 0, $$516 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$834 = 0, $$9 = 0, $$935 = 0, $$idx = 0, $$idx43 = 0, $$pre$phi69Z2D = 0, $$pre56 = 0, $$pre59 = 0, $$pre63 = 0, $$sroa$0 = 0, $$sroa$0$0$$sroa_raw_idx = 0, $$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D = 0, $$sroa$2$0 = 0, $105 = 0, $106 = 0, $111 = 0, $123 = 0, $124 = 0, $125 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $18 = 0, $180 = 0, $184 = 0, $199 = 0, $20 = 0, $200 = 0, $202 = 0, $218 = 0, $226 = 0, $23 = 0, $247 = 0, $26 = 0, $261 = 0, $268 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $290 = 0, $293 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $318 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $350 = 0, $354 = 0, $359 = 0, $360 = 0, $362 = 0, $376 = 0, $383 = 0, $384 = 0, $390 = 0, $397 = 0, $40 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $411 = 0, $412 = 0, $414 = 0, $423 = 0, $426 = 0, $441 = 0, $445 = 0, $45 = 0, $454 = 0, $457 = 0, $459 = 0, $46 = 0, $481 = 0, $486 = 0, $490 = 0, $50 = 0, $503 = 0, $510 = 0, $521 = 0, $528 = 0, $542 = 0, $61 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $9 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, $spec$select85 = 0, $spec$select87 = 0, $spec$select99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 16 | 0;
 $$sroa$0 = sp;
 $9 = sp + 24 | 0;
 if (HEAP32[$1 + 68 >> 2] | 0) {
  HEAP32[$0 + 4664 >> 2] = 1;
  HEAP32[$0 + 14728 >> 2] = 1;
 }
 HEAP32[$0 + 15812 >> 2] = 0;
 $16 = $0 + 5748 | 0;
 HEAP32[$16 >> 2] = 0;
 _check_control_input($1);
 HEAP32[$1 + 88 >> 2] = 0;
 $18 = $1 + 4 | 0;
 $20 = $0 + 20196 | 0;
 if ((HEAP32[$18 >> 2] | 0) > (HEAP32[$20 >> 2] | 0)) {
  $23 = $0 + 10064 | 0;
  $26 = _silk_init_encoder($23, HEAP32[$0 + 5092 >> 2] | 0) | 0;
  HEAP32[$0 + 20128 >> 2] = 0;
  HEAP32[$0 + 20136 >> 2] = 0;
  HEAP32[$0 + 20140 >> 2] = 0;
  HEAP32[$0 + 20144 >> 2] = 1;
  HEAP32[$0 + 20148 >> 2] = 0;
  HEAP32[$0 + 20152 >> 2] = 1;
  HEAP16[$0 + 20158 >> 1] = 0;
  HEAP16[$0 + 20156 >> 1] = 16384;
  if ((HEAP32[$0 + 20192 >> 2] | 0) == 2) {
   _memcpy($0 + 15840 | 0, $0 + 5776 | 0, 300) | 0;
   $40 = $0;
   $45 = HEAP32[$40 + 4 >> 2] | 0;
   $46 = $23;
   HEAP32[$46 >> 2] = HEAP32[$40 >> 2];
   HEAP32[$46 + 4 >> 2] = $45;
   $$026 = $26;
  } else $$026 = $26;
 } else $$026 = 0;
 $50 = $1 + 24 | 0;
 if ((HEAP32[$50 >> 2] | 0) == (HEAP32[$0 + 4612 >> 2] | 0)) $111 = (HEAP32[$20 >> 2] | 0) != (HEAP32[$18 >> 2] | 0); else $111 = 1;
 HEAP32[$0 + 20192 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$20 >> 2] = HEAP32[$18 >> 2];
 $61 = $3 * 100 | 0;
 $63 = HEAP32[$1 + 8 >> 2] | 0;
 $64 = ($61 | 0) / ($63 | 0) | 0;
 $spec$select = ($64 | 0) > 1 ? $64 >> 1 : 1;
 $67 = ($6 | 0) == 0;
 L11 : do if ($67) {
  if ((Math_imul($64, $63) | 0) != ($61 | 0) | ($3 | 0) < 0) _celt_fatal(48340, 43526, 235);
  if (($3 * 1e3 | 0) > (Math_imul(HEAP32[$50 >> 2] | 0, $63) | 0)) _celt_fatal(48340, 43526, 241); else {
   $$024 = 0;
   $$025 = 0;
   $$228 = $$026;
   $$pre$phi69Z2D = $0;
   break;
  }
 } else {
  if (($64 | 0) != 1) _celt_fatal(48340, 43526, 206);
  $69 = ($6 | 0) == 2;
  if ($69) {
   $$sroa$0$0$$sroa_raw_idx = $0 + 16 | 0;
   HEAP32[$$sroa$0 >> 2] = HEAP32[$$sroa$0$0$$sroa_raw_idx >> 2];
   HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$$sroa$0$0$$sroa_raw_idx + 4 >> 2];
   HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$$sroa$0$0$$sroa_raw_idx + 8 >> 2];
   HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$$sroa$0$0$$sroa_raw_idx + 12 >> 2];
   $$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D = $$sroa$0;
   $$sroa$2$0 = HEAP32[$0 + 4576 >> 2] | 0;
  } else {
   $$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D = $$sroa$0;
   $$sroa$2$0 = 0;
  }
  $$011 = 0;
  $$127 = $$026;
  while (1) {
   $72 = HEAP32[$18 >> 2] | 0;
   if (($$011 | 0) >= ($72 | 0)) break;
   $77 = _silk_init_encoder($0 + ($$011 * 10064 | 0) | 0, HEAP32[$0 + ($$011 * 10064 | 0) + 5092 >> 2] | 0) | 0;
   if ($69) {
    $78 = $0 + ($$011 * 10064 | 0) + 16 | 0;
    HEAP32[$78 >> 2] = HEAP32[$$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D >> 2];
    HEAP32[$78 + 4 >> 2] = HEAP32[$$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D + 4 >> 2];
    HEAP32[$78 + 8 >> 2] = HEAP32[$$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D + 8 >> 2];
    HEAP32[$78 + 12 >> 2] = HEAP32[$$sroa$0$0$sroa_cast46$pre$phiZZZZZ2D + 12 >> 2];
    HEAP32[$0 + ($$011 * 10064 | 0) + 32 >> 2] = $$sroa$2$0;
   }
   if ($77 | 0) {
    label = 19;
    break;
   }
   $$011 = $$011 + 1 | 0;
   $$127 = 0;
  }
  if ((label | 0) == 19) _celt_fatal(43541, 43526, 222);
  $81 = HEAP32[$50 >> 2] | 0;
  HEAP32[$50 >> 2] = 10;
  $82 = $1 + 36 | 0;
  $83 = HEAP32[$82 >> 2] | 0;
  HEAP32[$82 >> 2] = 0;
  $$112 = 0;
  $85 = $72;
  while (1) {
   if (($$112 | 0) >= ($85 | 0)) {
    $$024 = $81;
    $$025 = $83;
    $$228 = $$127;
    $$pre$phi69Z2D = $0;
    break L11;
   }
   HEAP32[$0 + ($$112 * 10064 | 0) + 4668 >> 2] = 0;
   HEAP32[$0 + ($$112 * 10064 | 0) + 4680 >> 2] = 1;
   $$112 = $$112 + 1 | 0;
   $85 = HEAP32[$18 >> 2] | 0;
  }
 } while (0);
 $96 = $0 + 4576 | 0;
 $97 = $0 + 20208 | 0;
 $98 = $0 + 5744 | 0;
 $$213 = 0;
 $$329 = $$228;
 while (1) {
  $99 = HEAP32[$18 >> 2] | 0;
  if (($$213 | 0) >= ($99 | 0)) break;
  if (($$213 | 0) == 1) $105 = HEAP32[$96 >> 2] | 0; else $105 = 0;
  $106 = _silk_control_encoder($$pre$phi69Z2D + ($$213 * 10064 | 0) | 0, $1, HEAP32[$97 >> 2] | 0, $$213, $105) | 0;
  if ($106 | 0) {
   $$0 = $106;
   label = 168;
   break;
  }
  L48 : do if ((HEAP32[$$pre$phi69Z2D + ($$213 * 10064 | 0) + 4664 >> 2] | 0) != 0 | $111) {
   $$017 = 0;
   while (1) {
    if (($$017 | 0) >= (HEAP32[$98 >> 2] | 0)) break L48;
    HEAP32[$$pre$phi69Z2D + ($$213 * 10064 | 0) + 4724 + ($$017 << 2) >> 2] = 0;
    $$017 = $$017 + 1 | 0;
   }
  } while (0);
  HEAP32[$$pre$phi69Z2D + ($$213 * 10064 | 0) + 6080 >> 2] = HEAP32[$$pre$phi69Z2D + ($$213 * 10064 | 0) + 6076 >> 2];
  $$213 = $$213 + 1 | 0;
  $$329 = 0;
 }
 if ((label | 0) == 168) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$pre56 = HEAP32[$96 >> 2] | 0;
 $$pre63 = $0 + 14640 | 0;
 if (($99 | 0) != 1) if (($$pre56 | 0) != (HEAP32[$$pre63 >> 2] | 0)) _celt_fatal(43564, 43526, 262);
 $123 = $64 * 10 | 0;
 $124 = Math_imul($123, $$pre56) | 0;
 $125 = $0 + 4556 | 0;
 $129 = (Math_imul($124, HEAP32[$125 >> 2] | 0) | 0) / ($$pre56 * 1e3 | 0) | 0;
 $130 = _llvm_stacksave() | 0;
 $131 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($129 << 1) | 0) + 15 & -16) | 0;
 $132 = $0 + 4584 | 0;
 $133 = $0 + 5740 | 0;
 $134 = $0 + 20200 | 0;
 $135 = $0 + 15804 | 0;
 $136 = $0 + 14648 | 0;
 $137 = $0 + 5776 | 0;
 $138 = $0 + 5096 | 0;
 $139 = $1 + 28 | 0;
 $140 = $0 + 15840 | 0;
 $141 = $0 + 20184 | 0;
 $142 = $0 + 20188 | 0;
 $143 = $0 + 15160 | 0;
 $144 = $0 + 20162 | 0;
 $145 = $0 + 14788 | 0;
 $146 = $0 + 20180 | 0;
 $$idx = $4 + 20 | 0;
 $$idx43 = $4 + 28 | 0;
 $147 = $0 + 20128 | 0;
 $148 = $0 + 5100 | 0;
 $149 = $0 + 15164 | 0;
 $150 = $0 + 4532 | 0;
 $151 = $1 + 60 | 0;
 $152 = $1 + 56 | 0;
 $153 = $1 + 52 | 0;
 $154 = $spec$select + -1 | 0;
 $155 = $8 + 4 | 0;
 $156 = $spec$select << 1;
 $157 = $0 + 20212 | 0;
 $158 = $0 + 20132 | 0;
 $159 = $0 + 14784 | 0;
 $160 = $0 + 17232 | 0;
 $161 = $0 + 10212 | 0;
 $162 = $0 + 10080 | 0;
 $163 = $0 + 14608 | 0;
 $164 = $0 + 14540 | 0;
 $165 = $0 + 14605 | 0;
 $166 = $0 + 14556 | 0;
 $167 = $0 + 14728 | 0;
 $168 = $0 + 10064 | 0;
 $169 = $0 + 6080 | 0;
 $170 = $0 + 20204 | 0;
 $171 = $0 + 16144 | 0;
 $$04 = $2;
 $$05 = $3;
 $$09 = 0;
 $$430 = $$329;
 L61 : while (1) {
  $173 = HEAP32[$133 >> 2] | 0;
  $174 = (HEAP32[$132 >> 2] | 0) - $173 | 0;
  $spec$select85 = ($174 | 0) < ($124 | 0) ? $174 : $124;
  $177 = Math_imul($spec$select85, HEAP32[$125 >> 2] | 0) | 0;
  $180 = ($177 | 0) / ((HEAP32[$96 >> 2] | 0) * 1e3 | 0) | 0;
  L63 : do switch (HEAP32[$1 >> 2] | 0) {
  case 2:
   {
    if ((HEAP32[$18 >> 2] | 0) == 2) {
     $184 = HEAP32[$16 >> 2] | 0;
     $$314 = 0;
     while (1) {
      if (($$314 | 0) >= ($180 | 0)) break;
      HEAP16[$131 + ($$314 << 1) >> 1] = HEAP16[$$04 + ($$314 << 1 << 1) >> 1] | 0;
      $$314 = $$314 + 1 | 0;
     }
     if ((HEAP32[$134 >> 2] | 0) == 1 & ($184 | 0) == 0) _memcpy($140 | 0, $137 | 0, 300) | 0;
     _silk_resampler($137, $138 + ($173 + 2 << 1) | 0, $131, $180);
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $spec$select85;
     $199 = HEAP32[$135 >> 2] | 0;
     $200 = (HEAP32[$136 >> 2] | 0) - $199 | 0;
     $202 = Math_imul($123, HEAP32[$$pre63 >> 2] | 0) | 0;
     $spec$select87 = ($200 | 0) < ($202 | 0) ? $200 : $202;
     $$415 = 0;
     while (1) {
      if (($$415 | 0) >= ($180 | 0)) break;
      HEAP16[$131 + ($$415 << 1) >> 1] = HEAP16[$$04 + (($$415 << 1 | 1) << 1) >> 1] | 0;
      $$415 = $$415 + 1 | 0;
     }
     _silk_resampler($140, $143 + ($199 + 2 << 1) | 0, $131, $180);
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $spec$select87;
     $274 = HEAP32[$133 >> 2] | 0;
     break L63;
    }
    if ((HEAP32[$18 >> 2] | 0) != 1) {
     label = 65;
     break L61;
    }
    $$516 = 0;
    while (1) {
     if (($$516 | 0) >= ($180 | 0)) break;
     $218 = $$516 << 1;
     $226 = (HEAP16[$$04 + ($218 << 1) >> 1] | 0) + (HEAP16[$$04 + (($218 | 1) << 1) >> 1] | 0) | 0;
     HEAP16[$131 + ($$516 << 1) >> 1] = ($226 >>> 1) + ($226 & 1);
     $$516 = $$516 + 1 | 0;
    }
    _silk_resampler($137, $138 + ($173 + 2 << 1) | 0, $131, $180);
    L84 : do if ((HEAP32[$134 >> 2] | 0) == 2) if (!(HEAP32[$16 >> 2] | 0)) {
     _silk_resampler($140, $143 + ((HEAP32[$135 >> 2] | 0) + 2 << 1) | 0, $131, $180);
     $$6 = 0;
     while (1) {
      if (($$6 | 0) >= (HEAP32[$132 >> 2] | 0)) break L84;
      $247 = $138 + ((HEAP32[$133 >> 2] | 0) + $$6 + 2 << 1) | 0;
      HEAP16[$247 >> 1] = ((HEAP16[$247 >> 1] | 0) + (HEAP16[$143 + ((HEAP32[$135 >> 2] | 0) + $$6 + 2 << 1) >> 1] | 0) | 0) >>> 1;
      $$6 = $$6 + 1 | 0;
     }
    } while (0);
    $261 = (HEAP32[$133 >> 2] | 0) + $spec$select85 | 0;
    HEAP32[$133 >> 2] = $261;
    $274 = $261;
    break;
   }
  case 1:
   {
    if ((HEAP32[$18 >> 2] | 0) != 1) {
     label = 65;
     break L61;
    }
    _memcpy($131 | 0, $$04 | 0, $180 << 1 | 0) | 0;
    _silk_resampler($137, $138 + ($173 + 2 << 1) | 0, $131, $180);
    $268 = (HEAP32[$133 >> 2] | 0) + $spec$select85 | 0;
    HEAP32[$133 >> 2] = $268;
    $274 = $268;
    break;
   }
  default:
   {
    label = 65;
    break L61;
   }
  } while (0);
  $271 = $$04 + ((Math_imul($180, HEAP32[$1 >> 2] | 0) | 0) << 1) | 0;
  $272 = $$05 - $180 | 0;
  HEAP32[$97 >> 2] = 0;
  $273 = HEAP32[$132 >> 2] | 0;
  if (($274 | 0) < ($273 | 0)) {
   $$1036 = $$430;
   $503 = 0;
   break;
  }
  if (($274 | 0) != ($273 | 0)) {
   label = 69;
   break;
  }
  $277 = HEAP32[$18 >> 2] | 0;
  if (($277 | 0) != 1) if ((HEAP32[$135 >> 2] | 0) != (HEAP32[$136 >> 2] | 0)) {
   label = 72;
   break;
  }
  if (!((HEAP32[$16 >> 2] | 0) != 0 | $67 ^ 1)) {
   HEAP16[$9 >> 1] = 0;
   HEAP8[$9 >> 0] = 0 - (256 >>> (Math_imul((HEAP32[$98 >> 2] | 0) + 1 | 0, $277) | 0));
   _ec_enc_icdf($4, 0, $9, 8);
   $$7 = 0;
   while (1) {
    $290 = HEAP32[$18 >> 2] | 0;
    if (($$7 | 0) >= ($290 | 0)) break;
    $293 = HEAP32[$$pre$phi69Z2D + ($$7 * 10064 | 0) + 5744 >> 2] | 0;
    $$010 = 0;
    $$118 = 0;
    while (1) {
     if (($$118 | 0) >= ($293 | 0)) break;
     $$010 = $$010 | HEAP32[$$pre$phi69Z2D + ($$7 * 10064 | 0) + 4724 + ($$118 << 2) >> 2] << $$118;
     $$118 = $$118 + 1 | 0;
    }
    HEAP8[$$pre$phi69Z2D + ($$7 * 10064 | 0) + 4723 >> 0] = ($$010 | 0) > 0 & 1;
    if (($$010 | 0) != 0 & ($293 | 0) > 1) _ec_enc_icdf($4, $$010 + -1 | 0, HEAP32[39940 + ($293 + -2 << 2) >> 2] | 0, 8);
    $$7 = $$7 + 1 | 0;
   }
   $$219 = 0;
   $542 = $290;
   while (1) {
    if (($$219 | 0) >= (HEAP32[$98 >> 2] | 0)) break;
    $312 = ($$219 | 0) == 0;
    $313 = $144 + ($$219 * 6 | 0) | 0;
    $314 = $145 + ($$219 << 2) | 0;
    $315 = $$219 + -1 | 0;
    $316 = $146 + $$219 | 0;
    $$8 = 0;
    $318 = $542;
    while (1) {
     if (($$8 | 0) >= ($318 | 0)) break;
     if (!(HEAP32[$$pre$phi69Z2D + ($$8 * 10064 | 0) + 4724 + ($$219 << 2) >> 2] | 0)) $$pre59 = $318; else {
      if (($318 | 0) == 2 & ($$8 | 0) == 0) {
       _silk_stereo_encode_pred($4, $313);
       if (!(HEAP32[$314 >> 2] | 0)) _silk_stereo_encode_mid_only($4, HEAP8[$316 >> 0] | 0);
      }
      if ($312) label = 92; else if (!(HEAP32[$$pre$phi69Z2D + ($$8 * 10064 | 0) + 4724 + ($315 << 2) >> 2] | 0)) label = 92; else $$08 = 2;
      if ((label | 0) == 92) {
       label = 0;
       $$08 = 0;
      }
      _silk_encode_indices($$pre$phi69Z2D + ($$8 * 10064 | 0) | 0, $4, $$219, 1, $$08);
      _silk_encode_pulses($4, HEAP8[$$pre$phi69Z2D + ($$8 * 10064 | 0) + 6100 + ($$219 * 36 | 0) + 29 >> 0] | 0, HEAP8[$$pre$phi69Z2D + ($$8 * 10064 | 0) + 6100 + ($$219 * 36 | 0) + 30 >> 0] | 0, $$pre$phi69Z2D + ($$8 * 10064 | 0) + 6208 + ($$219 * 320 | 0) | 0, HEAP32[$$pre$phi69Z2D + ($$8 * 10064 | 0) + 4584 >> 2] | 0);
      $$pre59 = HEAP32[$18 >> 2] | 0;
     }
     $$8 = $$8 + 1 | 0;
     $318 = $$pre59;
    }
    $$219 = $$219 + 1 | 0;
    $542 = $318;
   }
   $$9 = 0;
   $343 = $542;
   while (1) {
    if (($$9 | 0) >= ($343 | 0)) break;
    $344 = $$pre$phi69Z2D + ($$9 * 10064 | 0) + 4724 | 0;
    HEAP32[$344 >> 2] = 0;
    HEAP32[$344 + 4 >> 2] = 0;
    HEAP32[$344 + 8 >> 2] = 0;
    $$9 = $$9 + 1 | 0;
    $343 = HEAP32[$18 >> 2] | 0;
   }
   HEAP32[$141 >> 2] = _ec_tell_213(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx43 >> 2] | 0) | 0;
  }
  _silk_HP_variable_cutoff($0);
  $347 = HEAP32[$139 >> 2] | 0;
  $348 = HEAP32[$50 >> 2] | 0;
  $350 = (Math_imul($347, $348) | 0) / 1e3 | 0;
  if ($67) $$021 = $350 - (HEAP32[$141 >> 2] | 0) | 0; else $$021 = $350;
  $354 = ($$021 | 0) / (HEAP32[$98 >> 2] | 0) | 0;
  $$038 = Math_imul($354 << 16 >> 16, ($348 | 0) == 10 ? 100 : 50) | 0;
  $359 = $$038 - (HEAP32[$142 >> 2] << 1) | 0;
  if ($67) {
   $360 = HEAP32[$16 >> 2] | 0;
   if (($360 | 0) > 0) {
    $362 = _ec_tell_213(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx43 >> 2] | 0) | 0;
    $$139 = $359 - ($362 - (HEAP32[$141 >> 2] | 0) - (Math_imul($354, $360) | 0) << 1) | 0;
   } else $$139 = $359;
  } else $$139 = $359;
  if (($347 | 0) > 5e3) if (($$139 | 0) > ($347 | 0)) $383 = $347; else $383 = ($$139 | 0) > 5e3 ? $$139 : 5e3; else if (($$139 | 0) > 5e3) $383 = 5e3; else $383 = ($$139 | 0) < ($347 | 0) ? $347 : $$139;
  if ((HEAP32[$18 >> 2] | 0) == 2) {
   $376 = HEAP32[$16 >> 2] | 0;
   _silk_stereo_LR_to_MS($147, $148, $149, $144 + ($376 * 6 | 0) | 0, $146 + $376 | 0, $8, $383, HEAP32[$150 >> 2] | 0, HEAP32[$151 >> 2] | 0, HEAP32[$96 >> 2] | 0, HEAP32[$132 >> 2] | 0);
   $384 = HEAP32[$16 >> 2] | 0;
   if (!(HEAP8[$146 + $384 >> 0] | 0)) {
    if ((HEAP32[$157 >> 2] | 0) == 1) {
     HEAP32[$160 >> 2] = 0;
     HEAP32[$160 + 4 >> 2] = 0;
     HEAP32[$160 + 8 >> 2] = 0;
     $390 = $162;
     HEAP32[$390 >> 2] = 0;
     HEAP32[$390 + 4 >> 2] = 0;
     _memset($161 | 0, 0, 4384) | 0;
     HEAP32[$163 >> 2] = 100;
     HEAP32[$164 >> 2] = 100;
     HEAP8[$160 >> 0] = 10;
     HEAP8[$165 >> 0] = 0;
     HEAP32[$166 >> 2] = 65536;
     HEAP32[$167 >> 2] = 1;
    }
    _silk_encode_do_VAD_FLP($168, $7);
   } else HEAP8[$159 + $384 >> 0] = 0;
   if ($67) {
    _silk_stereo_encode_pred($4, $144 + ((HEAP32[$16 >> 2] | 0) * 6 | 0) | 0);
    $397 = HEAP32[$16 >> 2] | 0;
    if (!(HEAP8[$159 + $397 >> 0] | 0)) _silk_stereo_encode_mid_only($4, HEAP8[$146 + $397 >> 0] | 0);
   }
  } else {
   HEAP32[$138 >> 2] = HEAP32[$158 >> 2];
   $405 = $138 + (HEAP32[$132 >> 2] << 1) | 0;
   $406 = HEAPU16[$405 >> 1] | HEAPU16[$405 + 2 >> 1] << 16;
   HEAP16[$158 >> 1] = $406;
   HEAP16[$158 + 2 >> 1] = $406 >>> 16;
  }
  _silk_encode_do_VAD_FLP($0, $7);
  $407 = ($$09 | 0) == 0;
  $408 = ($$09 | 0) == ($154 | 0);
  $409 = ($$09 | 0) == 1;
  $411 = (HEAP32[$155 >> 2] | 0) < 1;
  $$10 = 0;
  $$834 = $$430;
  while (1) {
   $412 = HEAP32[$18 >> 2] | 0;
   if (($$10 | 0) >= ($412 | 0)) break;
   $414 = HEAP32[$152 >> 2] | 0;
   L166 : do switch ($spec$select | 0) {
   case 2:
    {
     if ($407) $$3 = ($414 * 3 | 0) / 5 | 0; else $$3 = $414;
     break;
    }
   case 3:
    {
     if ($407) {
      $$3 = ($414 << 1 | 0) / 5 | 0;
      break L166;
     }
     if ($409) $$3 = ($414 * 3 | 0) / 4 | 0; else $$3 = $414;
     break;
    }
   default:
    $$3 = $414;
   } while (0);
   $423 = $408 & (HEAP32[$153 >> 2] | 0) != 0 & 1;
   if (($412 | 0) == 1) {
    $$037 = $383;
    $$13 = $423;
    $$5 = $$3;
   } else {
    $426 = HEAP32[$8 + ($$10 << 2) >> 2] | 0;
    if (($$10 | 0) != 0 | $411) {
     $$037 = $426;
     $$13 = $423;
     $$5 = $$3;
    } else {
     $$037 = $426;
     $$13 = 0;
     $$5 = $$3 - (($414 | 0) / ($156 | 0) | 0) | 0;
    }
   }
   if (($$037 | 0) > 0) {
    _silk_control_SNR($$pre$phi69Z2D + ($$10 * 10064 | 0) | 0, $$037);
    do if ((HEAP32[$16 >> 2] | 0) > ($$10 | 0)) {
     if ($$10 | 0) if (HEAP32[$157 >> 2] | 0) {
      $$1 = 1;
      break;
     }
     $$1 = 2;
    } else $$1 = 0; while (0);
    $$935 = _silk_encode_frame_FLP($$pre$phi69Z2D + ($$10 * 10064 | 0) | 0, $5, $4, $$1, $$5, $$13) | 0;
   } else $$935 = $$834;
   HEAP32[$$pre$phi69Z2D + ($$10 * 10064 | 0) + 4668 >> 2] = 0;
   HEAP32[$$pre$phi69Z2D + ($$10 * 10064 | 0) + 5740 >> 2] = 0;
   $441 = $$pre$phi69Z2D + ($$10 * 10064 | 0) + 5748 | 0;
   HEAP32[$441 >> 2] = (HEAP32[$441 >> 2] | 0) + 1;
   $$10 = $$10 + 1 | 0;
   $$834 = $$935;
  }
  $445 = HEAP32[$16 >> 2] | 0;
  HEAP32[$157 >> 2] = HEAP8[$146 + ($445 + -1) >> 0];
  do if ((HEAP32[$5 >> 2] | 0) > 0) if (($445 | 0) == (HEAP32[$98 >> 2] | 0)) {
   $454 = HEAP32[$18 >> 2] | 0;
   $$022 = 0;
   $$11 = 0;
   while (1) {
    if (($$11 | 0) >= ($454 | 0)) break;
    $457 = HEAP32[$$pre$phi69Z2D + ($$11 * 10064 | 0) + 5744 >> 2] | 0;
    $$123 = $$022;
    $$320 = 0;
    while (1) {
     $459 = $$123 << 1;
     if (($$320 | 0) >= ($457 | 0)) break;
     $$123 = $459 | HEAP8[$$pre$phi69Z2D + ($$11 * 10064 | 0) + 4720 + $$320 >> 0];
     $$320 = $$320 + 1 | 0;
    }
    $$022 = $459 | HEAP8[$$pre$phi69Z2D + ($$11 * 10064 | 0) + 4723 >> 0];
    $$11 = $$11 + 1 | 0;
   }
   if ($67) _ec_enc_patch_initial_bits($4, $$022, Math_imul($445 + 1 | 0, $454) | 0);
   do if (HEAP32[$169 >> 2] | 0) {
    if ((HEAP32[$18 >> 2] | 0) != 1) if (!(HEAP32[$171 >> 2] | 0)) break;
    HEAP32[$5 >> 2] = 0;
   } while (0);
   $481 = (HEAP32[$142 >> 2] | 0) + (HEAP32[$5 >> 2] << 3) | 0;
   HEAP32[$142 >> 2] = $481;
   $486 = $481 - ((Math_imul(HEAP32[$139 >> 2] | 0, HEAP32[$50 >> 2] | 0) | 0) / 1e3 | 0) | 0;
   $spec$select99 = ($486 | 0) > 0 ? $486 : 0;
   HEAP32[$142 >> 2] = ($spec$select99 | 0) < 1e4 ? $spec$select99 : 1e4;
   $490 = HEAP32[$170 >> 2] | 0;
   if ((HEAP32[$150 >> 2] | 0) < ((($490 << 16 >> 16) * 3188 >> 16) + 13 | 0)) {
    HEAP32[$97 >> 2] = 1;
    HEAP32[$170 >> 2] = 0;
    break;
   } else {
    HEAP32[$97 >> 2] = 0;
    HEAP32[$170 >> 2] = $490 + (HEAP32[$50 >> 2] | 0);
    break;
   }
  } while (0);
  if (!$272) {
   label = 157;
   break;
  }
  $$04 = $271;
  $$05 = $272;
  $$09 = $$09 + 1 | 0;
  $$430 = $$834;
 }
 if ((label | 0) == 65) _celt_fatal(43691, 43526, 320); else if ((label | 0) == 69) _celt_fatal(43777, 43526, 336); else if ((label | 0) == 72) _celt_fatal(43876, 43526, 337); else if ((label | 0) == 157) {
  $$1036 = $$834;
  $503 = HEAP32[$97 >> 2] | 0;
 }
 HEAP32[$134 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$1 + 76 >> 2] = $503;
 if ((HEAP32[$96 >> 2] | 0) == 16) $510 = (HEAP32[$0 + 28 >> 2] | 0) == 0 & 1; else $510 = 0;
 HEAP32[$1 + 80 >> 2] = $510;
 HEAP32[$1 + 72 >> 2] = (HEAP32[$96 >> 2] << 16 >> 16) * 1e3;
 if (!(HEAP32[$151 >> 2] | 0)) $521 = HEAP16[$0 + 20156 >> 1] | 0; else $521 = 0;
 HEAP32[$1 + 84 >> 2] = $521;
 L228 : do if (!$67) {
  HEAP32[$50 >> 2] = $$024;
  HEAP32[$1 + 36 >> 2] = $$025;
  $$12 = 0;
  while (1) {
   if (($$12 | 0) >= (HEAP32[$18 >> 2] | 0)) break L228;
   HEAP32[$$pre$phi69Z2D + ($$12 * 10064 | 0) + 4668 >> 2] = 0;
   HEAP32[$$pre$phi69Z2D + ($$12 * 10064 | 0) + 4680 >> 2] = 0;
   $$12 = $$12 + 1 | 0;
  }
 } while (0);
 $528 = $0 + 4765 | 0;
 HEAP32[$1 + 92 >> 2] = HEAP8[$528 >> 0];
 HEAP32[$1 + 96 >> 2] = HEAP16[40156 + (HEAP8[$528 >> 0] >> 1 << 2) + (HEAP8[$0 + 4766 >> 0] << 1) >> 1];
 _llvm_stackrestore($130 | 0);
 $$0 = $$1036;
 STACKTOP = sp;
 return $$0 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0.0, $151 = 0, $153 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $188 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $25 = 0, $250 = 0, $252 = 0, $254 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $269 = 0, $271 = 0, $285 = 0, $290 = 0, $299 = 0, $30 = 0, $300 = 0, $304 = 0, $307 = 0, $309 = 0, $311 = 0, $315 = 0, $318 = 0, $319 = 0, $323 = 0, $333 = 0, $338 = 0, $34 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $350 = 0, $363 = 0, $367 = 0, $372 = 0, $38 = 0.0, $381 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $388 = 0, $39 = 0, $392 = 0, $394 = 0, $397 = 0, $400 = 0, $411 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_670($1) | 0;
 $13 = tempRet0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_670($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 50437;
  $25 = tempRet0;
  $411 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 50438 : 50443) : 50440;
  $25 = $13;
  $411 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_669($0, 32, $2, $34, $4 & -65537);
  _out($0, $$0523, $$0522);
  _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 50464 : 50468) : $30 ? 50456 : 50460, 3);
  _pad_669($0, 32, $2, $34, $4 ^ 8192);
  $$sink757 = $34;
 } else {
  $38 = +_frexpl($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[37536 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi717Z2D = $103;
    $$pre$phi718Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre720 | 0;
    $$pre$phi717Z2D = $108;
    $$pre$phi718Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_669($0, 32, $2, $113, $4);
   _out($0, $spec$select, $47);
   _pad_669($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre720 - $9 | 0;
   _out($0, $8, $115);
   $116 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_669($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out($0, $79, $116);
   _pad_669($0, 32, $2, $113, $4 ^ 8192);
   $$sink757 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $132 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $134 = $$pr;
   while (1) {
    $136 = ($134 | 0) < 29 ? $134 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $139 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $136 | 0) | 0;
      $141 = _i64Add($139 | 0, tempRet0 | 0, $$0497670 | 0, 0) | 0;
      $142 = tempRet0;
      $$0497670 = ___udivdi3($141 | 0, $142 | 0, 1e9, 0) | 0;
      $145 = ___muldi3($$0497670 | 0, tempRet0 | 0, -1e9, -1) | 0;
      $147 = _i64Add($141 | 0, $142 | 0, $145 | 0, tempRet0 | 0) | 0;
      HEAP32[$$0488671 >> 2] = $147;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $151 = $$1482683 + -4 | 0;
      HEAP32[$151 >> 2] = $$0497670;
      $$2483 = $151;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $153 = $$3501676 + -4 | 0;
      if (HEAP32[$153 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($153 >>> 0 > $$2483 >>> 0) $$3501676 = $153; else {
       $$3501$lcssa = $153;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $158 = (HEAP32[$7 >> 2] | 0) - $136 | 0;
    HEAP32[$7 >> 2] = $158;
    if (($158 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $134 = $158;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $158;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $163 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $164 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $166 = $$pr564;
   while (1) {
    $165 = 0 - $166 | 0;
    $168 = ($165 | 0) < 9 ? $165 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $174 = (1 << $168) + -1 | 0;
     $175 = 1e9 >>> $168;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $176 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($176 >>> $168) + $$0487657;
      $$0487657 = Math_imul($176 & $174, $175) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $188 = $164 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $188 >> 2 | 0) > ($163 | 0) ? $188 + ($163 << 2) | 0 : $$5503;
    $166 = (HEAP32[$7 >> 2] | 0) + $168 | 0;
    HEAP32[$7 >> 2] = $166;
    if (($166 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($132 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $132 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 + (Math_imul($223, -9) | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $233 = Math_imul($232, $$1533$lcssa) | 0;
   $234 = $231 - $233 | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    HEAP32[$225 >> 2] = $233;
    if ($$1469 + $$1467 != $$1469) {
     $250 = $233 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $250;
     if ($250 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $252 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($252 >>> 0 < $$5486639 >>> 0) {
        $254 = $$5486639 + -4 | 0;
        HEAP32[$254 >> 2] = 0;
        $$6 = $254;
       } else $$6 = $$5486639;
       $256 = (HEAP32[$252 >> 2] | 0) + 1 | 0;
       HEAP32[$252 >> 2] = $256;
       if ($256 >>> 0 > 999999999) {
        $$2490638 = $252;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $252;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $261 = ($132 - $$5486$lcssa >> 2) * 9 | 0;
     $262 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($262 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $261;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $261;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $265 = $$2518634 + 1 | 0;
       if ($262 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $265;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $265;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $267 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $267 >>> 0 ? $267 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $269 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $271 = $$9507625 + -4 | 0;
    if (HEAP32[$271 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($271 >>> 0 > $$9 >>> 0) $$9507625 = $271; else {
     $$9507$lcssa = $271;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $285 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$285) $$2531 = 9; else if (!(($285 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $290 = $$1530621 + 1 | 0;
       if (($285 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $290;
        break;
       } else $$1530621 = $290;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $299 = (($$9507$lcssa - $132 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $300 = $299 - $$2531 | 0;
     $spec$select549 = ($300 | 0) > 0 ? $300 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $304 = $299 + $$5521 - $$2531 | 0;
     $spec$select551 = ($304 | 0) > 0 ? $304 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $307 = ($$3477 | 0) != 0;
  $309 = $307 ? 1 : $4 >>> 3 & 1;
  $311 = ($$1480 | 32 | 0) == 102;
  if ($311) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $315 = ($$5521 | 0) < 0 ? $269 : $$5521;
   $318 = _fmt_u($315, (($315 | 0) < 0) << 31 >> 31, $11) | 0;
   $319 = $11;
   if (($319 - $318 | 0) < 2) {
    $$1514614 = $318;
    while (1) {
     $323 = $$1514614 + -1 | 0;
     HEAP8[$323 >> 0] = 48;
     if (($319 - $323 | 0) < 2) $$1514614 = $323; else {
      $$1514$lcssa = $323;
      break;
     }
    }
   } else $$1514$lcssa = $318;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $333 = $$1514$lcssa + -2 | 0;
   HEAP8[$333 >> 0] = $$1480;
   $$2515 = $333;
   $$pn = $319 - $333 | 0;
  }
  $338 = $$0522 + 1 + $$3477 + $309 + $$pn | 0;
  _pad_669($0, 32, $2, $338, $4);
  _out($0, $$0523, $$0522);
  _pad_669($0, 48, $2, $338, $4 ^ 65536);
  if ($311) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $341 = $8 + 9 | 0;
   $342 = $341;
   $343 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $345 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $341) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($345 | 0) == ($341 | 0)) {
     HEAP8[$343 >> 0] = 48;
     $$1465 = $343;
    } else $$1465 = $345; else if ($345 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $345 - $9 | 0) | 0;
     $$0464599 = $345;
     while (1) {
      $350 = $$0464599 + -1 | 0;
      if ($350 >>> 0 > $8 >>> 0) $$0464599 = $350; else {
       $$1465 = $350;
       break;
      }
     }
    } else $$1465 = $345;
    _out($0, $$1465, $342 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($307 ^ 1))) _out($0, 50472, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $363 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $341) | 0;
     if ($363 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $363 - $9 | 0) | 0;
      $$0463588 = $363;
      while (1) {
       $367 = $$0463588 + -1 | 0;
       if ($367 >>> 0 > $8 >>> 0) $$0463588 = $367; else {
        $$0463$lcssa = $367;
        break;
       }
      }
     } else $$0463$lcssa = $363;
     _out($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $372 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $372;
      break;
     } else $$4478594 = $372;
    }
   } else $$4478$lcssa = $$3477;
   _pad_669($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $381 = $8 + 9 | 0;
    $383 = ($4 & 8 | 0) == 0;
    $384 = $381;
    $385 = 0 - $9 | 0;
    $386 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $388 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $381) | 0;
     if (($388 | 0) == ($381 | 0)) {
      HEAP8[$386 >> 0] = 48;
      $$0 = $386;
     } else $$0 = $388;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $394 = $$0 + 1 | 0;
      _out($0, $$0, 1);
      if ($383 & ($$5609 | 0) < 1) {
       $$2 = $394;
       break;
      }
      _out($0, 50472, 1);
      $$2 = $394;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $385 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $392 = $$1604 + -1 | 0;
       if ($392 >>> 0 > $8 >>> 0) $$1604 = $392; else {
        $$2 = $392;
        break;
       }
      }
     } while (0);
     $397 = $384 - $$2 | 0;
     _out($0, $$2, ($$5609 | 0) > ($397 | 0) ? $397 : $$5609);
     $400 = $$5609 - $397 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($400 | 0) > -1)) {
      $$5$lcssa = $400;
      break;
     } else $$5609 = $400;
    }
   } else $$5$lcssa = $$3477;
   _pad_669($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_669($0, 32, $2, $338, $4 ^ 8192);
  $$sink757 = $338;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function _opus_decode_frame($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$012154 = 0, $$012155 = 0, $$013 = 0, $$019 = 0, $$023 = 0, $$024752$ph = 0, $$02475274 = 0, $$02857$ph = 0, $$0285771 = 0, $$02858 = 0, $$02859152 = 0, $$02859153 = 0, $$02954$ph = 0, $$0295472 = 0, $$03075 = 0, $$032111 = 0, $$032111117 = 0, $$0338991 = 0, $$05 = 0, $$064553$ph = 0, $$06455373 = 0, $$0646 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$11576 = 0, $$120 = 0, $$122100108 = 0, $$122100108120 = 0, $$131122 = 0, $$2102107 = 0, $$2102107121 = 0, $$211 = 0, $$23996110118 = 0, $$3 = 0, $$33698109119 = 0, $$4 = 0, $$42760$ph = 0, $$4276070 = 0, $$5 = 0, $$6 = 0, $$alloca_mul35 = 0, $$alloca_mul40 = 0, $$idx43 = 0, $$idx44 = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $119 = 0, $122 = 0, $125 = 0, $126 = 0, $129 = 0, $13 = 0, $138 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $15 = 0, $152 = 0, $155 = 0, $16 = 0, $165 = 0, $166 = 0, $17 = 0, $170 = 0, $18 = 0, $182 = 0, $19 = 0, $190 = 0, $20 = 0, $205 = 0, $207 = 0, $21 = 0, $211 = 0, $214 = 0, $224 = 0, $231 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $248 = 0, $254 = 0, $256 = 0, $260 = 0, $261 = 0, $262 = 0, $269 = 0, $274 = 0, $28 = 0, $281 = 0.0, $282 = 0, $286 = 0, $301 = 0, $302 = 0, $32 = 0, $34 = 0, $41 = 0, $43 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $65 = 0, $7 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $87 = 0, $9 = 0, $93 = 0, $spec$select = 0, $spec$select145 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $vararg_buffer26 = sp + 80 | 0;
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer21 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 84 | 0;
 HEAP32[$8 >> 2] = 0;
 $13 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
 $15 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 $16 = $0 + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = ($17 | 0) / 50 | 0;
 $19 = $18 >> 1;
 $20 = $18 >> 2;
 $21 = $18 >> 3;
 if (($21 | 0) > ($4 | 0)) {
  $$1 = -2;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $24 = (($17 | 0) / 25 | 0) * 3 | 0;
 $spec$select = ($24 | 0) > ($4 | 0) ? $4 : $24;
 do if (($2 | 0) < 2) {
  $28 = HEAP32[$0 + 64 >> 2] | 0;
  $$0646 = ($spec$select | 0) < ($28 | 0) ? $spec$select : $28;
  label = 5;
 } else if (!$1) {
  $$0646 = $spec$select;
  label = 5;
 } else {
  $56 = HEAP32[$0 + 64 >> 2] | 0;
  $58 = HEAP32[$0 + 56 >> 2] | 0;
  $60 = HEAP32[$0 + 52 >> 2] | 0;
  _ec_dec_init($6, $1, $2);
  $62 = HEAP32[$0 + 60 >> 2] | 0;
  if (($62 | 0) > 0) {
   $65 = ($62 | 0) == 1002;
   if (($58 | 0) != 1002) {
    if (!$65) {
     $$024752$ph = $1;
     $$02857$ph = $58;
     $$02954$ph = $60;
     $$064553$ph = $spec$select;
     $$42760$ph = $56;
     label = 22;
     break;
    }
    $72 = Math_imul($20, HEAP32[$0 + 8 >> 2] | 0) | 0;
    $$019 = 0;
    $$02475274 = $1;
    $$0285771 = $58;
    $$0295472 = $60;
    $$03075 = 1;
    $$06455373 = $spec$select;
    $$11576 = $72;
    $$4276070 = $56;
    $301 = _llvm_stacksave() | 0;
    break;
   }
   if ($65) {
    $$024752$ph = $1;
    $$02857$ph = 1002;
    $$02954$ph = $60;
    $$064553$ph = $spec$select;
    $$42760$ph = $56;
    label = 22;
   } else if (!(HEAP32[$0 + 68 >> 2] | 0)) {
    $76 = Math_imul($20, HEAP32[$0 + 8 >> 2] | 0) | 0;
    $77 = _llvm_stacksave() | 0;
    $78 = STACKTOP;
    STACKTOP = STACKTOP + ((1 * ($76 << 2) | 0) + 15 & -16) | 0;
    _opus_decode_frame($0, 0, 0, $78, ($20 | 0) < ($56 | 0) ? $20 : $56, 0) | 0;
    $$019 = $78;
    $$02475274 = $1;
    $$0285771 = 1002;
    $$0295472 = $60;
    $$03075 = 1;
    $$06455373 = $spec$select;
    $$11576 = 1;
    $$4276070 = $56;
    $301 = $77;
   } else {
    $$024752$ph = $1;
    $$02857$ph = 1002;
    $$02954$ph = $60;
    $$064553$ph = $spec$select;
    $$42760$ph = $56;
    label = 22;
   }
  } else {
   $$024752$ph = $1;
   $$02857$ph = $58;
   $$02954$ph = $60;
   $$064553$ph = $spec$select;
   $$42760$ph = $56;
   label = 22;
  }
 } while (0);
 do if ((label | 0) == 5) {
  $32 = HEAP32[$0 + 60 >> 2] | 0;
  if (!$32) {
   $34 = $0 + 8 | 0;
   $$09 = 0;
   while (1) {
    if (($$09 | 0) >= (Math_imul($$0646, HEAP32[$34 >> 2] | 0) | 0)) {
     $$1 = $$0646;
     break;
    }
    HEAPF32[$3 + ($$09 << 2) >> 2] = 0.0;
    $$09 = $$09 + 1 | 0;
   }
   STACKTOP = sp;
   return $$1 | 0;
  }
  if (($$0646 | 0) <= ($18 | 0)) {
   if (($$0646 | 0) >= ($18 | 0)) {
    $$024752$ph = 0;
    $$02857$ph = $32;
    $$02954$ph = 0;
    $$064553$ph = $$0646;
    $$42760$ph = $$0646;
    label = 22;
    break;
   }
   if (($$0646 | 0) > ($19 | 0)) {
    $$024752$ph = 0;
    $$02857$ph = $32;
    $$02954$ph = 0;
    $$064553$ph = $$0646;
    $$42760$ph = $19;
    label = 22;
    break;
   }
   if (($32 | 0) == 1e3) {
    $$024752$ph = 0;
    $$02857$ph = 1e3;
    $$02954$ph = 0;
    $$064553$ph = $$0646;
    $$42760$ph = $$0646;
    label = 22;
    break;
   }
   $$024752$ph = 0;
   $$02857$ph = $32;
   $$02954$ph = 0;
   $$064553$ph = $$0646;
   $$42760$ph = ($$0646 | 0) > ($20 | 0) & ($$0646 | 0) < ($19 | 0) ? $20 : $$0646;
   label = 22;
   break;
  }
  $41 = $0 + 8 | 0;
  $$023 = $$0646;
  $$05 = $3;
  while (1) {
   $43 = _opus_decode_frame($0, 0, 0, $$05, ($$023 | 0) < ($18 | 0) ? $$023 : $18, 0) | 0;
   if (($43 | 0) < 0) {
    $$1 = $43;
    label = 131;
    break;
   }
   $$023 = $$023 - $43 | 0;
   $$05 = $$05 + ((Math_imul($43, HEAP32[$41 >> 2] | 0) | 0) << 2) | 0;
   if (($$023 | 0) <= 0) {
    $$1 = $$0646;
    label = 131;
    break;
   }
  }
  if ((label | 0) == 131) {
   STACKTOP = sp;
   return $$1 | 0;
  }
 } while (0);
 if ((label | 0) == 22) {
  $$019 = 0;
  $$02475274 = $$024752$ph;
  $$0285771 = $$02857$ph;
  $$0295472 = $$02954$ph;
  $$03075 = 0;
  $$06455373 = $$064553$ph;
  $$11576 = 1;
  $$4276070 = $$42760$ph;
  $301 = _llvm_stacksave() | 0;
 }
 L39 : do if (($$4276070 | 0) > ($$06455373 | 0)) $$0 = -1; else {
  if (($$0285771 | 0) == 1002) {
   $82 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $$02858 = 1002;
   $214 = $82;
  } else {
   $84 = $0 + 8 | 0;
   $$alloca_mul35 = (Math_imul(($19 | 0) > ($$4276070 | 0) ? $19 : $$4276070, HEAP32[$84 >> 2] | 0) | 0) << 1;
   $87 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul35 | 0) + 15 & -16) | 0;
   if ((HEAP32[$0 + 60 >> 2] | 0) == 1002) _silk_InitDecoder($13) | 0;
   $93 = ($$4276070 * 1e3 | 0) / (HEAP32[$16 >> 2] | 0) | 0;
   HEAP32[$0 + 32 >> 2] = ($93 | 0) > 10 ? $93 : 10;
   if (!$$02475274) $108 = 1; else {
    HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 48 >> 2];
    L49 : do if (($$0285771 | 0) == 1e3) switch ($$0295472 | 0) {
    case 1101:
     {
      HEAP32[$0 + 28 >> 2] = 8e3;
      break L49;
      break;
     }
    case 1102:
     {
      HEAP32[$0 + 28 >> 2] = 12e3;
      break L49;
      break;
     }
    case 1103:
     {
      HEAP32[$0 + 28 >> 2] = 16e3;
      break L49;
      break;
     }
    default:
     {
      HEAP32[$0 + 28 >> 2] = 16e3;
      _celt_fatal(48340, 48228, 389);
     }
    } else HEAP32[$0 + 28 >> 2] = 16e3; while (0);
    $108 = $5 << 1;
   }
   $107 = $0 + 16 | 0;
   $109 = ($108 | 0) == 0;
   $$07 = $87;
   $$08 = 0;
   while (1) {
    L61 : do if (!(_silk_Decode($13, $107, $108, ($$08 | 0) == 0 & 1, $6, $$07, $7) | 0)) $122 = HEAP32[$84 >> 2] | 0; else {
     if ($109) {
      $$0 = -3;
      break L39;
     }
     HEAP32[$7 >> 2] = $$4276070;
     $$110 = 0;
     while (1) {
      $114 = HEAP32[$84 >> 2] | 0;
      if (($$110 | 0) >= (Math_imul($$4276070, $114) | 0)) {
       $122 = $114;
       break L61;
      }
      HEAP16[$$07 + ($$110 << 1) >> 1] = 0;
      $$110 = $$110 + 1 | 0;
     }
    } while (0);
    $119 = HEAP32[$7 >> 2] | 0;
    $$08 = $$08 + $119 | 0;
    $$07 = $$07 + ((Math_imul($119, $122) | 0) << 1) | 0;
    if (($$08 | 0) >= ($$4276070 | 0)) {
     $$02858 = $$0285771;
     $214 = $87;
     break;
    }
   }
  }
  $125 = ($5 | 0) == 0;
  $126 = ($$02858 | 0) == 1002;
  do if ($125) if ($126) label = 57; else if (!$$02475274) {
   $$032111 = 17;
   $$122100108 = 0;
   $$2102107 = $2;
   label = 59;
  } else {
   $$idx43 = $6 + 20 | 0;
   $$idx44 = $6 + 28 | 0;
   $129 = (_ec_tell_644(HEAP32[$$idx43 >> 2] | 0, HEAP32[$$idx44 >> 2] | 0) | 0) + 17 | 0;
   if (($129 + ((HEAP32[$0 + 56 >> 2] | 0) == 1001 ? 20 : 0) | 0) > ($2 << 3 | 0)) {
    $$032111 = 17;
    $$122100108 = 0;
    $$2102107 = $2;
    label = 59;
   } else {
    if (($$02858 | 0) == 1001) {
     $138 = _ec_dec_bit_logp($6, 12) | 0;
     if (!$138) {
      $$032111 = 17;
      $$122100108 = 0;
      $$2102107 = $2;
      label = 59;
      break;
     }
     $140 = _ec_dec_bit_logp($6, 1) | 0;
     $142 = (_ec_dec_uint($6, 256) | 0) + 2 | 0;
     $$0338991 = $138;
     $$pre$phiZ2D = _ec_tell_644(HEAP32[$$idx43 >> 2] | 0, HEAP32[$$idx44 >> 2] | 0) | 0;
     $149 = $142;
     $302 = $140;
    } else {
     $143 = _ec_dec_bit_logp($6, 1) | 0;
     $144 = _ec_tell_644(HEAP32[$$idx43 >> 2] | 0, HEAP32[$$idx44 >> 2] | 0) | 0;
     $$0338991 = 1;
     $$pre$phiZ2D = $144;
     $149 = $2 - ($144 + 7 >> 3) | 0;
     $302 = $143;
    }
    $148 = $2 - $149 | 0;
    if (($148 << 3 | 0) < ($$pre$phiZ2D | 0)) {
     $$032111 = 17;
     $$122100108 = $302;
     $$2102107 = 0;
     label = 59;
    } else {
     $152 = $6 + 4 | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) - $149;
     $$032111117 = 17;
     $$120 = $$019;
     $$122100108120 = $302;
     $$131122 = 0;
     $$2102107121 = $148;
     $$23996110118 = $149;
     $$33698109119 = $$0338991;
    }
   }
  } else if ($126) label = 57; else {
   $$032111 = 17;
   $$122100108 = 0;
   $$2102107 = $2;
   label = 59;
  } while (0);
  if ((label | 0) == 57) {
   $$032111 = 0;
   $$122100108 = 0;
   $$2102107 = $2;
   label = 59;
  }
  if ((label | 0) == 59) {
   $155 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($$11576 << 2) | 0) + 15 & -16) | 0;
   if (!$$03075) {
    $$032111117 = $$032111;
    $$120 = $$019;
    $$122100108120 = $$122100108;
    $$131122 = 0;
    $$2102107121 = $$2102107;
    $$23996110118 = 0;
    $$33698109119 = 0;
   } else if (($$02858 | 0) == 1002) {
    $$032111117 = $$032111;
    $$120 = $$019;
    $$122100108120 = $$122100108;
    $$131122 = $$03075;
    $$2102107121 = $$2102107;
    $$23996110118 = 0;
    $$33698109119 = 0;
   } else {
    _opus_decode_frame($0, 0, 0, $155, ($20 | 0) < ($$4276070 | 0) ? $20 : $$4276070, 0) | 0;
    $$032111117 = $$032111;
    $$120 = $155;
    $$122100108120 = $$122100108;
    $$131122 = $$03075;
    $$2102107121 = $$2102107;
    $$23996110118 = 0;
    $$33698109119 = 0;
   }
  }
  switch ($$0295472 | 0) {
  case 0:
   break;
  case 1101:
   {
    $$01 = 13;
    label = 67;
    break;
   }
  case 1103:
  case 1102:
   {
    $$01 = 17;
    label = 67;
    break;
   }
  case 1104:
   {
    $$01 = 19;
    label = 67;
    break;
   }
  case 1105:
   {
    $$01 = 21;
    label = 67;
    break;
   }
  default:
   _celt_fatal(48340, 48228, 488);
  }
  if ((label | 0) == 67) {
   HEAP32[$vararg_buffer >> 2] = $$01;
   if (_opus_custom_decoder_ctl($15, 10012, $vararg_buffer) | 0) _celt_fatal(48360, 48228, 491);
  }
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 48 >> 2];
  if (_opus_custom_decoder_ctl($15, 10008, $vararg_buffer1) | 0) _celt_fatal(48495, 48228, 493);
  $165 = ($$33698109119 | 0) == 0;
  if ($165) {
   $166 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   $231 = $166;
  } else {
   $$alloca_mul40 = (Math_imul($20, HEAP32[$0 + 8 >> 2] | 0) | 0) << 2;
   $170 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul40 | 0) + 15 & -16) | 0;
   if (!$$122100108120) $231 = $170; else {
    HEAP32[$vararg_buffer4 >> 2] = 0;
    if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer4) | 0) _celt_fatal(48654, 48228, 502);
    _celt_decode_with_ec($15, $$02475274 + $$2102107121 | 0, $$23996110118, $170, $20, 0, 0) | 0;
    HEAP32[$vararg_buffer7 >> 2] = $8;
    if (!(_opus_custom_decoder_ctl($15, 4031, $vararg_buffer7) | 0)) $231 = $170; else _celt_fatal(48777, 48228, 505);
   }
  }
  HEAP32[$vararg_buffer10 >> 2] = $$032111117;
  if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer10) | 0) _celt_fatal(48922, 48228, 509);
  do if (($$02858 | 0) == 1e3) {
   HEAP16[$9 >> 1] = -1;
   $190 = $0 + 8 | 0;
   $$211 = 0;
   while (1) {
    if (($$211 | 0) >= (Math_imul($$4276070, HEAP32[$190 >> 2] | 0) | 0)) break;
    HEAPF32[$3 + ($$211 << 2) >> 2] = 0.0;
    $$211 = $$211 + 1 | 0;
   }
   if ((HEAP32[$0 + 60 >> 2] | 0) == 1001) {
    if (!($165 | ($$122100108120 | 0) == 0)) if (HEAP32[$0 + 68 >> 2] | 0) {
     $$012154 = 0;
     $$02859152 = 1e3;
     label = 95;
     break;
    }
    HEAP32[$vararg_buffer15 >> 2] = 0;
    if (!(_opus_custom_decoder_ctl($15, 10010, $vararg_buffer15) | 0)) {
     _celt_decode_with_ec($15, $9, 2, $3, $21, 0, 0) | 0;
     $$012154 = 0;
     $$02859152 = 1e3;
     label = 95;
     break;
    } else _celt_fatal(48654, 48228, 531);
   } else {
    $$012154 = 0;
    $$02859152 = 1e3;
    label = 95;
   }
  } else {
   $spec$select145 = ($18 | 0) < ($$4276070 | 0) ? $18 : $$4276070;
   $182 = HEAP32[$0 + 60 >> 2] | 0;
   if (($$02858 | 0) != ($182 | 0) & ($182 | 0) > 0) if (!(HEAP32[$0 + 68 >> 2] | 0)) if (_opus_custom_decoder_ctl($15, 4028, $vararg_buffer13) | 0) _celt_fatal(49063, 48228, 516);
   $205 = _celt_decode_with_ec($15, $125 ? $$02475274 : 0, $$2102107121, $3, $spec$select145, $6, 0) | 0;
   if (($$02858 | 0) == 1002) {
    $$012155 = $205;
    $$02859153 = $$02858;
   } else {
    $$012154 = $205;
    $$02859152 = $$02858;
    label = 95;
   }
  } while (0);
  L132 : do if ((label | 0) == 95) {
   $207 = $0 + 8 | 0;
   $$3 = 0;
   while (1) {
    if (($$3 | 0) >= (Math_imul($$4276070, HEAP32[$207 >> 2] | 0) | 0)) {
     $$012155 = $$012154;
     $$02859153 = $$02859152;
     break L132;
    }
    $211 = $3 + ($$3 << 2) | 0;
    HEAPF32[$211 >> 2] = +HEAPF32[$211 >> 2] + +(HEAP16[$214 + ($$3 << 1) >> 1] | 0) * .000030517578125;
    $$3 = $$3 + 1 | 0;
   }
  } while (0);
  HEAP32[$vararg_buffer18 >> 2] = $10;
  if (_opus_custom_decoder_ctl($15, 10015, $vararg_buffer18) | 0) _celt_fatal(49134, 48228, 549);
  $224 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0;
  do if (!$165) if (!$$122100108120) {
   if (_opus_custom_decoder_ctl($15, 4028, $vararg_buffer21) | 0) _celt_fatal(49063, 48228, 556);
   HEAP32[$vararg_buffer23 >> 2] = 0;
   if (_opus_custom_decoder_ctl($15, 10010, $vararg_buffer23) | 0) _celt_fatal(48654, 48228, 557);
   _celt_decode_with_ec($15, $$02475274 + $$2102107121 | 0, $$23996110118, $231, $20, 0, 0) | 0;
   HEAP32[$vararg_buffer26 >> 2] = $8;
   if (!(_opus_custom_decoder_ctl($15, 4031, $vararg_buffer26) | 0)) {
    $235 = HEAP32[$0 + 8 >> 2] | 0;
    $238 = $3 + ((Math_imul($235, $$4276070 - $21 | 0) | 0) << 2) | 0;
    $240 = $231 + ((Math_imul($235, $21) | 0) << 2) | 0;
    _smooth_fade($238, $240, $238, $21, $235, $224, HEAP32[$16 >> 2] | 0);
    break;
   } else _celt_fatal(48777, 48228, 560);
  } else {
   $242 = $0 + 8 | 0;
   $$013 = 0;
   while (1) {
    $243 = HEAP32[$242 >> 2] | 0;
    if (($$013 | 0) >= ($243 | 0)) break;
    $$4 = 0;
    while (1) {
     if (($$4 | 0) >= ($21 | 0)) break;
     $248 = (Math_imul(HEAP32[$242 >> 2] | 0, $$4) | 0) + $$013 | 0;
     HEAP32[$3 + ($248 << 2) >> 2] = HEAP32[$231 + ($248 << 2) >> 2];
     $$4 = $$4 + 1 | 0;
    }
    $$013 = $$013 + 1 | 0;
   }
   $254 = Math_imul($243, $21) | 0;
   $256 = $3 + ($254 << 2) | 0;
   _smooth_fade($231 + ($254 << 2) | 0, $256, $256, $21, $243, $224, HEAP32[$16 >> 2] | 0);
   break;
  } while (0);
  do if ($$131122 | 0) {
   $260 = $0 + 8 | 0;
   if (($$4276070 | 0) < ($20 | 0)) {
    _smooth_fade($$120, $3, $3, $21, HEAP32[$260 >> 2] | 0, $224, HEAP32[$16 >> 2] | 0);
    break;
   }
   $$5 = 0;
   while (1) {
    $261 = HEAP32[$260 >> 2] | 0;
    $262 = Math_imul($261, $21) | 0;
    if (($$5 | 0) >= ($262 | 0)) break;
    HEAP32[$3 + ($$5 << 2) >> 2] = HEAP32[$$120 + ($$5 << 2) >> 2];
    $$5 = $$5 + 1 | 0;
   }
   $269 = $3 + ($262 << 2) | 0;
   _smooth_fade($$120 + ($262 << 2) | 0, $269, $269, $21, $261, $224, HEAP32[$16 >> 2] | 0);
  } while (0);
  $274 = HEAP32[$0 + 40 >> 2] | 0;
  L174 : do if ($274 | 0) {
   $281 = +Math_exp(+(+($274 | 0) * 6.488140788860619e-04 * .6931471805599453));
   $282 = $0 + 8 | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= (Math_imul($$4276070, HEAP32[$282 >> 2] | 0) | 0)) break L174;
    $286 = $3 + ($$6 << 2) | 0;
    HEAPF32[$286 >> 2] = +HEAPF32[$286 >> 2] * $281;
    $$6 = $$6 + 1 | 0;
   }
  } while (0);
  if (($$2102107121 | 0) < 2) $$sink = 0; else $$sink = HEAP32[$6 + 28 >> 2] ^ HEAP32[$8 >> 2];
  HEAP32[$0 + 84 >> 2] = $$sink;
  HEAP32[$0 + 60 >> 2] = $$02859153;
  HEAP32[$0 + 68 >> 2] = ($$122100108120 | 0) == 0 & ($165 ^ 1) & 1;
  $$0 = ($$012155 | 0) < 0 ? $$012155 : $$4276070;
 } while (0);
 _llvm_stackrestore($301 | 0);
 $$1 = $$0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _printf_core($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre$phiZ2D = 0, $$pre363 = 0, $$sink = 0, $10 = 0, $102 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $12 = 0, $123 = 0, $127 = 0, $13 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $142 = 0, $147 = 0, $148 = 0, $153 = 0, $156 = 0, $161 = 0, $162 = 0, $167 = 0, $174 = 0, $175 = 0, $18 = 0, $186 = 0, $19 = 0, $198 = 0, $205 = 0, $207 = 0, $21 = 0, $210 = 0, $212 = 0, $22 = 0, $220 = 0, $222 = 0, $225 = 0, $226 = 0, $23 = 0, $230 = 0, $234 = 0, $236 = 0, $239 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $253 = 0, $254 = 0, $258 = 0, $260 = 0, $262 = 0, $268 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $295 = 0, $297 = 0, $298 = 0, $302 = 0, $305 = 0, $307 = 0, $318 = 0, $320 = 0, $327 = 0, $330 = 0, $332 = 0, $334 = 0, $336 = 0, $337 = 0, $36 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, $or$cond = 0, $or$cond278 = 0, $spec$select = 0, $spec$select284 = 0, $storemerge273327 = 0, $storemerge274 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 40 | 0;
 $6 = sp;
 $7 = sp + 48 | 0;
 $8 = sp + 60 | 0;
 HEAP32[$4 >> 2] = 40410;
 $9 = ($0 | 0) != 0;
 $10 = $6 + 40 | 0;
 $11 = $10;
 $12 = $6 + 39 | 0;
 $13 = $7 + 4 | 0;
 $$0243$ph = 0;
 $$0247$ph = 0;
 $$0269$ph = 0;
 L1 : while (1) {
  $$0243 = $$0243$ph;
  $$0247 = $$0247$ph;
  while (1) {
   do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
    HEAP32[12760] = 75;
    $$1248 = -1;
    break;
   } else {
    $$1248 = $$0243 + $$0247 | 0;
    break;
   } else $$1248 = $$0247; while (0);
   $18 = HEAP32[$4 >> 2] | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   if (!($19 << 24 >> 24)) {
    label = 93;
    break L1;
   }
   $21 = $19;
   $23 = $18;
   L12 : while (1) {
    switch ($21 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0249$lcssa = $23;
      break L12;
      break;
     }
    default:
     {}
    }
    $22 = $23 + 1 | 0;
    HEAP32[$4 >> 2] = $22;
    $21 = HEAP8[$22 >> 0] | 0;
    $23 = $22;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0249321 = $23;
    $25 = $23;
    while (1) {
     if ((HEAP8[$25 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249321;
      break L15;
     }
     $28 = $$0249321 + 1 | 0;
     $25 = $25 + 2 | 0;
     HEAP32[$4 >> 2] = $25;
     if ((HEAP8[$25 >> 0] | 0) != 37) {
      $$0249$lcssa = $28;
      break;
     } else $$0249321 = $28;
    }
   } while (0);
   $$0243 = $$0249$lcssa - $18 | 0;
   if ($9) _out($0, $18, $$0243);
   if (!$$0243) break; else $$0247 = $$1248;
  }
  $36 = HEAP32[$4 >> 2] | 0;
  $39 = HEAP8[$36 + 1 >> 0] | 0;
  if (!(_isdigit($39) | 0)) {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  } else {
   $44 = (HEAP8[$36 + 2 >> 0] | 0) == 36;
   $$0253 = $44 ? $39 + -48 | 0 : -1;
   $$1270 = $44 ? 1 : $$0269$ph;
   $$sink = $44 ? 3 : 1;
  }
  $46 = $36 + $$sink | 0;
  HEAP32[$4 >> 2] = $46;
  $47 = HEAP8[$46 >> 0] | 0;
  $49 = ($47 << 24 >> 24) + -32 | 0;
  if ($49 >>> 0 > 31 | (1 << $49 & 75913 | 0) == 0) {
   $$0262$lcssa = 0;
   $$lcssa308 = $47;
   $67 = $46;
  } else {
   $$0262328 = 0;
   $55 = $49;
   $storemerge273327 = $46;
   while (1) {
    $56 = 1 << $55 | $$0262328;
    $57 = $storemerge273327 + 1 | 0;
    HEAP32[$4 >> 2] = $57;
    $58 = HEAP8[$57 >> 0] | 0;
    $55 = ($58 << 24 >> 24) + -32 | 0;
    if ($55 >>> 0 > 31 | (1 << $55 & 75913 | 0) == 0) {
     $$0262$lcssa = $56;
     $$lcssa308 = $58;
     $67 = $57;
     break;
    } else {
     $$0262328 = $56;
     $storemerge273327 = $57;
    }
   }
  }
  if ($$lcssa308 << 24 >> 24 == 42) {
   $66 = $67 + 1 | 0;
   $69 = HEAP8[$66 >> 0] | 0;
   if (!(_isdigit($69) | 0)) label = 26; else if ((HEAP8[$67 + 2 >> 0] | 0) == 36) {
    HEAP32[$3 + ($69 + -48 << 2) >> 2] = 10;
    $$0259 = HEAP32[$2 + ((HEAP8[$66 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $$2271 = 1;
    $storemerge274 = $67 + 3 | 0;
   } else label = 26;
   if ((label | 0) == 26) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($9) {
     $94 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $95 = HEAP32[$94 >> 2] | 0;
     HEAP32[$1 >> 2] = $94 + 4;
     $$0259 = $95;
     $$2271 = 0;
     $storemerge274 = $66;
    } else {
     $$0259 = 0;
     $$2271 = 0;
     $storemerge274 = $66;
    }
   }
   HEAP32[$4 >> 2] = $storemerge274;
   $96 = ($$0259 | 0) < 0;
   $$1260 = $96 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $96 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $102 = $storemerge274;
  } else {
   $99 = _getint($4) | 0;
   if (($99 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $99;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $102 = HEAP32[$4 >> 2] | 0;
  }
  do if ((HEAP8[$102 >> 0] | 0) == 46) {
   $104 = $102 + 1 | 0;
   if ((HEAP8[$104 >> 0] | 0) != 42) {
    HEAP32[$4 >> 2] = $104;
    $136 = _getint($4) | 0;
    $$0254 = $136;
    $$pre363 = HEAP32[$4 >> 2] | 0;
    break;
   }
   $107 = $102 + 2 | 0;
   $109 = HEAP8[$107 >> 0] | 0;
   if (_isdigit($109) | 0) if ((HEAP8[$102 + 3 >> 0] | 0) == 36) {
    HEAP32[$3 + ($109 + -48 << 2) >> 2] = 10;
    $123 = HEAP32[$2 + ((HEAP8[$107 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $127 = $102 + 4 | 0;
    HEAP32[$4 >> 2] = $127;
    $$0254 = $123;
    $$pre363 = $127;
    break;
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($9) {
    $134 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$1 >> 2] = $134 + 4;
    $336 = $135;
   } else $336 = 0;
   HEAP32[$4 >> 2] = $107;
   $$0254 = $336;
   $$pre363 = $107;
  } else {
   $$0254 = -1;
   $$pre363 = $102;
  } while (0);
  $$0252 = 0;
  $138 = $$pre363;
  while (1) {
   if (((HEAP8[$138 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $142 = $138 + 1 | 0;
   HEAP32[$4 >> 2] = $142;
   $147 = HEAP8[(HEAP8[$138 >> 0] | 0) + -65 + (37072 + ($$0252 * 58 | 0)) >> 0] | 0;
   $148 = $147 & 255;
   if (($148 + -1 | 0) >>> 0 < 8) {
    $$0252 = $148;
    $138 = $142;
   } else break;
  }
  if (!($147 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $153 = ($$0253 | 0) > -1;
  do if ($147 << 24 >> 24 == 19) if ($153) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($153) {
    HEAP32[$3 + ($$0253 << 2) >> 2] = $148;
    $156 = $2 + ($$0253 << 3) | 0;
    $161 = HEAP32[$156 + 4 >> 2] | 0;
    $162 = $5;
    HEAP32[$162 >> 2] = HEAP32[$156 >> 2];
    HEAP32[$162 + 4 >> 2] = $161;
    label = 52;
    break;
   }
   if (!$9) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($5, $148, $1);
   label = 53;
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if ($9) label = 53; else $$0243$ph$be = 0;
  }
  L74 : do if ((label | 0) == 53) {
   label = 0;
   $167 = HEAP8[$138 >> 0] | 0;
   $$0235 = ($$0252 | 0) != 0 & ($167 & 15 | 0) == 3 ? $167 & -33 : $167;
   $174 = $$1263 & -65537;
   $spec$select = ($$1263 & 8192 | 0) == 0 ? $$1263 : $174;
   L76 : do switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 2:
      {
       $186 = HEAP32[$5 >> 2] | 0;
       HEAP32[$186 >> 2] = $$1248;
       HEAP32[$186 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$5 >> 2] >> 1] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$5 >> 2] >> 0] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$5 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     case 7:
      {
       $198 = HEAP32[$5 >> 2] | 0;
       HEAP32[$198 >> 2] = $$1248;
       HEAP32[$198 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L74;
       break;
      }
     default:
      {
       $$0243$ph$be = 0;
       break L74;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120;
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
     $$3265 = $spec$select | 8;
     label = 65;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $spec$select;
     label = 65;
     break;
    }
   case 111:
    {
     $220 = $5;
     $222 = HEAP32[$220 >> 2] | 0;
     $225 = HEAP32[$220 + 4 >> 2] | 0;
     $226 = _fmt_o($222, $225, $10) | 0;
     $230 = $11 - $226 | 0;
     $$0228 = $226;
     $$1233 = 0;
     $$1238 = 50420;
     $$2256 = ($spec$select & 8 | 0) == 0 | ($$0254 | 0) > ($230 | 0) ? $$0254 : $230 + 1 | 0;
     $$4266 = $spec$select;
     $258 = $222;
     $260 = $225;
     label = 71;
     break;
    }
   case 105:
   case 100:
    {
     $234 = $5;
     $236 = HEAP32[$234 >> 2] | 0;
     $239 = HEAP32[$234 + 4 >> 2] | 0;
     if (($239 | 0) < 0) {
      $241 = _i64Subtract(0, 0, $236 | 0, $239 | 0) | 0;
      $242 = tempRet0;
      $243 = $5;
      HEAP32[$243 >> 2] = $241;
      HEAP32[$243 + 4 >> 2] = $242;
      $$0232 = 1;
      $$0237 = 50420;
      $253 = $241;
      $254 = $242;
      label = 70;
      break L76;
     } else {
      $$0232 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0237 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 50420 : 50422) : 50421;
      $253 = $236;
      $254 = $239;
      label = 70;
      break L76;
     }
     break;
    }
   case 117:
    {
     $175 = $5;
     $$0232 = 0;
     $$0237 = 50420;
     $253 = HEAP32[$175 >> 2] | 0;
     $254 = HEAP32[$175 + 4 >> 2] | 0;
     label = 70;
     break;
    }
   case 99:
    {
     HEAP8[$12 >> 0] = HEAP32[$5 >> 2];
     $$2 = $12;
     $$2234 = 0;
     $$2239 = 50420;
     $$5 = 1;
     $$6268 = $174;
     $$pre$phiZ2D = $11;
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[12760] | 0) | 0;
     label = 75;
     break;
    }
   case 115:
    {
     $279 = HEAP32[$5 >> 2] | 0;
     $$1 = ($279 | 0) == 0 ? 50430 : $279;
     label = 75;
     break;
    }
   case 67:
    {
     HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$13 >> 2] = 0;
     HEAP32[$5 >> 2] = $7;
     $$4258370 = -1;
     $337 = $7;
     label = 80;
     break;
    }
   case 83:
    {
     if (!$$0254) {
      _pad_669($0, 32, $$1260, 0, $spec$select);
      $$0240313371 = 0;
      label = 90;
      break L76;
     } else {
      $$4258370 = $$0254;
      $337 = HEAP32[$5 >> 2] | 0;
      label = 80;
      break L76;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243$ph$be = _fmt_fp($0, +HEAPF64[$5 >> 3], $$1260, $$0254, $spec$select, $$0235) | 0;
     break L74;
     break;
    }
   default:
    {
     $$2 = $18;
     $$2234 = 0;
     $$2239 = 50420;
     $$5 = $$0254;
     $$6268 = $spec$select;
     $$pre$phiZ2D = $11;
    }
   } while (0);
   L102 : do if ((label | 0) == 65) {
    label = 0;
    $205 = $5;
    $207 = HEAP32[$205 >> 2] | 0;
    $210 = HEAP32[$205 + 4 >> 2] | 0;
    $212 = _fmt_x($207, $210, $10, $$1236 & 32) | 0;
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($207 | 0) == 0 & ($210 | 0) == 0;
    $$0228 = $212;
    $$1233 = $or$cond278 ? 0 : 2;
    $$1238 = $or$cond278 ? 50420 : 50420 + ($$1236 >>> 4) | 0;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $258 = $207;
    $260 = $210;
    label = 71;
   } else if ((label | 0) == 70) {
    label = 0;
    $$0228 = _fmt_u($253, $254, $10) | 0;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $spec$select;
    $258 = $253;
    $260 = $254;
    label = 71;
   } else if ((label | 0) == 75) {
    label = 0;
    $282 = _memchr($$1, $$0254) | 0;
    $283 = ($282 | 0) == 0;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 50420;
    $$5 = $283 ? $$0254 : $282 - $$1 | 0;
    $$6268 = $174;
    $$pre$phiZ2D = $283 ? $$1 + $$0254 | 0 : $282;
   } else if ((label | 0) == 80) {
    label = 0;
    $$0229334 = $337;
    $$0240333 = 0;
    while (1) {
     $295 = HEAP32[$$0229334 >> 2] | 0;
     if (!$295) {
      $$0240313 = $$0240333;
      break;
     }
     $297 = _wctomb($8, $295) | 0;
     $298 = ($297 | 0) < 0;
     if ($298 | $297 >>> 0 > ($$4258370 - $$0240333 | 0) >>> 0) {
      label = 84;
      break;
     }
     $302 = $297 + $$0240333 | 0;
     if ($$4258370 >>> 0 > $302 >>> 0) {
      $$0229334 = $$0229334 + 4 | 0;
      $$0240333 = $302;
     } else {
      $$0240313 = $302;
      break;
     }
    }
    if ((label | 0) == 84) {
     label = 0;
     if ($298) {
      $$0 = -1;
      break L1;
     } else $$0240313 = $$0240333;
    }
    _pad_669($0, 32, $$1260, $$0240313, $spec$select);
    if (!$$0240313) {
     $$0240313371 = 0;
     label = 90;
    } else {
     $$1230340 = $337;
     $$1241339 = 0;
     while (1) {
      $305 = HEAP32[$$1230340 >> 2] | 0;
      if (!$305) {
       $$0240313371 = $$0240313;
       label = 90;
       break L102;
      }
      $307 = _wctomb($8, $305) | 0;
      $$1241339 = $307 + $$1241339 | 0;
      if (($$1241339 | 0) > ($$0240313 | 0)) {
       $$0240313371 = $$0240313;
       label = 90;
       break L102;
      }
      _out($0, $8, $307);
      if ($$1241339 >>> 0 >= $$0240313 >>> 0) {
       $$0240313371 = $$0240313;
       label = 90;
       break;
      } else $$1230340 = $$1230340 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 71) {
    label = 0;
    $262 = ($258 | 0) != 0 | ($260 | 0) != 0;
    $or$cond = ($$2256 | 0) != 0 | $262;
    $268 = $11 - $$0228 + (($262 ^ 1) & 1) | 0;
    $$2 = $or$cond ? $$0228 : $10;
    $$2234 = $$1233;
    $$2239 = $$1238;
    $$5 = $or$cond ? (($$2256 | 0) > ($268 | 0) ? $$2256 : $268) : 0;
    $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
    $$pre$phiZ2D = $11;
   } else if ((label | 0) == 90) {
    label = 0;
    _pad_669($0, 32, $$1260, $$0240313371, $spec$select ^ 8192);
    $$0243$ph$be = ($$1260 | 0) > ($$0240313371 | 0) ? $$1260 : $$0240313371;
    break;
   }
   $318 = $$pre$phiZ2D - $$2 | 0;
   $spec$select284 = ($$5 | 0) < ($318 | 0) ? $318 : $$5;
   $320 = $spec$select284 + $$2234 | 0;
   $$2261 = ($$1260 | 0) < ($320 | 0) ? $320 : $$1260;
   _pad_669($0, 32, $$2261, $320, $$6268);
   _out($0, $$2239, $$2234);
   _pad_669($0, 48, $$2261, $320, $$6268 ^ 65536);
   _pad_669($0, 48, $spec$select284, $318, 0);
   _out($0, $$2, $318);
   _pad_669($0, 32, $$2261, $320, $$6268 ^ 8192);
   $$0243$ph$be = $$2261;
  } while (0);
  $$0243$ph = $$0243$ph$be;
  $$0247$ph = $$1248;
  $$0269$ph = $$3272;
 }
 L124 : do if ((label | 0) == 93) if (!$0) if (!$$0269$ph) $$0 = 0; else {
  $$2242320 = 1;
  while (1) {
   $327 = HEAP32[$3 + ($$2242320 << 2) >> 2] | 0;
   if (!$327) break;
   _pop_arg($2 + ($$2242320 << 3) | 0, $327, $1);
   $330 = $$2242320 + 1 | 0;
   if ($330 >>> 0 < 10) $$2242320 = $330; else {
    $$0 = 1;
    break L124;
   }
  }
  $$3317 = $$2242320;
  $334 = 0;
  while (1) {
   $332 = $$3317 + 1 | 0;
   if ($334 | 0) {
    $$0 = -1;
    break L124;
   }
   if ($332 >>> 0 >= 10) {
    $$0 = 1;
    break L124;
   }
   $$3317 = $332;
   $334 = HEAP32[$3 + ($332 << 2) >> 2] | 0;
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _opus_encoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$02 = 0, $$2 = 0, $105 = 0, $106 = 0, $11 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $124 = 0, $125 = 0, $134 = 0, $135 = 0, $143 = 0, $144 = 0, $153 = 0, $154 = 0, $16 = 0, $162 = 0, $163 = 0, $172 = 0, $173 = 0, $181 = 0, $182 = 0, $191 = 0, $192 = 0, $2 = 0, $200 = 0, $201 = 0, $210 = 0, $211 = 0, $221 = 0, $222 = 0, $231 = 0, $232 = 0, $240 = 0, $241 = 0, $25 = 0, $250 = 0, $251 = 0, $259 = 0, $26 = 0, $260 = 0, $269 = 0, $270 = 0, $277 = 0, $278 = 0, $287 = 0, $288 = 0, $292 = 0, $3 = 0, $304 = 0, $305 = 0, $314 = 0, $315 = 0, $324 = 0, $325 = 0, $333 = 0, $334 = 0, $343 = 0, $344 = 0, $35 = 0, $351 = 0, $352 = 0, $36 = 0, $361 = 0, $362 = 0, $370 = 0, $371 = 0, $380 = 0, $381 = 0, $388 = 0, $389 = 0, $393 = 0, $395 = 0, $41 = 0, $413 = 0, $414 = 0, $424 = 0, $425 = 0, $433 = 0, $434 = 0, $442 = 0, $443 = 0, $49 = 0, $5 = 0, $50 = 0, $60 = 0, $61 = 0, $73 = 0, $74 = 0, $83 = 0, $84 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer112 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer129 = 0, $vararg_buffer135 = 0, $vararg_buffer141 = 0, $vararg_buffer49 = 0, $vararg_buffer97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $vararg_buffer141 = sp + 80 | 0;
 $vararg_buffer135 = sp + 72 | 0;
 $vararg_buffer129 = sp + 64 | 0;
 $vararg_buffer121 = sp + 56 | 0;
 $vararg_buffer118 = sp + 48 | 0;
 $vararg_buffer112 = sp + 40 | 0;
 $vararg_buffer97 = sp + 32 | 0;
 $vararg_buffer49 = sp + 24 | 0;
 $vararg_buffer = sp + 16 | 0;
 $2 = sp;
 $3 = sp + 84 | 0;
 HEAP32[$2 >> 2] = $varargs;
 $5 = $0 + (HEAP32[$0 >> 2] | 0) | 0;
 L1 : do switch ($1 | 0) {
 case 4e3:
  {
   $11 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $12 = HEAP32[$11 >> 2] | 0;
   HEAP32[$2 >> 2] = $11 + 4;
   switch ($12 | 0) {
   case 2051:
   case 2049:
   case 2048:
    break;
   default:
    {
     $$02 = -1;
     label = 104;
     break L1;
    }
   }
   $16 = $0 + 108 | 0;
   if (!(HEAP32[$0 + 14248 >> 2] | 0)) if ((HEAP32[$16 >> 2] | 0) != ($12 | 0)) {
    $$02 = -1;
    label = 104;
    break L1;
   }
   HEAP32[$16 >> 2] = $12;
   HEAP32[$0 + 192 >> 2] = $12;
   $$02 = 0;
   label = 104;
   break;
  }
 case 4001:
  {
   $25 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$2 >> 2] = $25 + 4;
   if (!$26) label = 105; else {
    HEAP32[$26 >> 2] = HEAP32[$0 + 108 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4002:
  {
   $35 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $36 = HEAP32[$35 >> 2] | 0;
   HEAP32[$2 >> 2] = $35 + 4;
   switch ($36 | 0) {
   case -1e3:
    {
     $$2 = -1e3;
     break;
    }
   case -1:
    {
     $$2 = -1;
     break;
    }
   default:
    {
     if (($36 | 0) < 1) {
      label = 105;
      break L1;
     }
     if (($36 | 0) < 501) $$2 = 500; else {
      $41 = (HEAP32[$0 + 112 >> 2] | 0) * 3e5 | 0;
      $$2 = ($36 | 0) > ($41 | 0) ? $41 : $36;
     }
    }
   }
   HEAP32[$0 + 164 >> 2] = $$2;
   $$02 = 0;
   label = 104;
   break;
  }
 case 4003:
  {
   $49 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $50 = HEAP32[$49 >> 2] | 0;
   HEAP32[$2 >> 2] = $49 + 4;
   if (!$50) label = 105; else {
    HEAP32[$50 >> 2] = _user_bitrate_to_bitrate($0, HEAP32[$0 + 14232 >> 2] | 0, 1276) | 0;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4022:
  {
   $60 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$2 >> 2] = $60 + 4;
   if (($61 | 0) < 1) {
    if (($61 | 0) != -1e3) {
     label = 105;
     break L1;
    }
   } else if (($61 | 0) > (HEAP32[$0 + 112 >> 2] | 0)) {
    label = 105;
    break L1;
   }
   HEAP32[$0 + 120 >> 2] = $61;
   $$02 = 0;
   label = 104;
   break;
  }
 case 4023:
  {
   $73 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $74 = HEAP32[$73 >> 2] | 0;
   HEAP32[$2 >> 2] = $73 + 4;
   if (!$74) label = 105; else {
    HEAP32[$74 >> 2] = HEAP32[$0 + 120 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4004:
  {
   $83 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $84 = HEAP32[$83 >> 2] | 0;
   HEAP32[$2 >> 2] = $83 + 4;
   if (($84 + -1101 | 0) >>> 0 > 4) label = 105; else {
    HEAP32[$0 + 132 >> 2] = $84;
    switch ($84 | 0) {
    case 1101:
     {
      HEAP32[$0 + 20 >> 2] = 8e3;
      $$02 = 0;
      label = 104;
      break L1;
      break;
     }
    case 1102:
     {
      HEAP32[$0 + 20 >> 2] = 12e3;
      $$02 = 0;
      label = 104;
      break L1;
      break;
     }
    default:
     {
      HEAP32[$0 + 20 >> 2] = 16e3;
      $$02 = 0;
      label = 104;
      break L1;
     }
    }
   }
   break;
  }
 case 4005:
  {
   $95 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $96 = HEAP32[$95 >> 2] | 0;
   HEAP32[$2 >> 2] = $95 + 4;
   if (!$96) label = 105; else {
    HEAP32[$96 >> 2] = HEAP32[$0 + 132 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4008:
  {
   $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $106 = HEAP32[$105 >> 2] | 0;
   HEAP32[$2 >> 2] = $105 + 4;
   if (($106 | 0) < 1101) {
    if (($106 | 0) != -1e3) {
     label = 105;
     break L1;
    }
    HEAP32[$0 + 128 >> 2] = -1e3;
    $118 = $0 + 20 | 0;
   } else {
    if (($106 | 0) > 1105) {
     label = 105;
     break L1;
    }
    HEAP32[$0 + 128 >> 2] = $106;
    if (($106 | 0) == 1101) {
     HEAP32[$0 + 20 >> 2] = 8e3;
     $$02 = 0;
     label = 104;
     break L1;
    } else $115 = $106;
    $117 = $0 + 20 | 0;
    if (($115 | 0) == 1102) {
     HEAP32[$117 >> 2] = 12e3;
     $$02 = 0;
     label = 104;
     break L1;
    } else $118 = $117;
   }
   HEAP32[$118 >> 2] = 16e3;
   $$02 = 0;
   label = 104;
   break;
  }
 case 4009:
  {
   $124 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $125 = HEAP32[$124 >> 2] | 0;
   HEAP32[$2 >> 2] = $124 + 4;
   if (!$125) label = 105; else {
    HEAP32[$125 >> 2] = HEAP32[$0 + 14236 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4016:
  {
   $134 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $135 = HEAP32[$134 >> 2] | 0;
   HEAP32[$2 >> 2] = $134 + 4;
   if ($135 >>> 0 > 1) label = 105; else {
    HEAP32[$0 + 184 >> 2] = $135;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4017:
  {
   $143 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $144 = HEAP32[$143 >> 2] | 0;
   HEAP32[$2 >> 2] = $143 + 4;
   if (!$144) label = 105; else {
    HEAP32[$144 >> 2] = HEAP32[$0 + 184 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4010:
  {
   $153 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $154 = HEAP32[$153 >> 2] | 0;
   HEAP32[$2 >> 2] = $153 + 4;
   if ($154 >>> 0 > 10) label = 105; else {
    HEAP32[$0 + 44 >> 2] = $154;
    HEAP32[$vararg_buffer >> 2] = $154;
    _opus_custom_encoder_ctl($5, 4010, $vararg_buffer) | 0;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4011:
  {
   $162 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $163 = HEAP32[$162 >> 2] | 0;
   HEAP32[$2 >> 2] = $162 + 4;
   if (!$163) label = 105; else {
    HEAP32[$163 >> 2] = HEAP32[$0 + 44 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4012:
  {
   $172 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $173 = HEAP32[$172 >> 2] | 0;
   HEAP32[$2 >> 2] = $172 + 4;
   if ($173 >>> 0 > 1) label = 105; else {
    HEAP32[$0 + 48 >> 2] = $173;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4013:
  {
   $181 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $182 = HEAP32[$181 >> 2] | 0;
   HEAP32[$2 >> 2] = $181 + 4;
   if (!$182) label = 105; else {
    HEAP32[$182 >> 2] = HEAP32[$0 + 48 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4014:
  {
   $191 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $192 = HEAP32[$191 >> 2] | 0;
   HEAP32[$2 >> 2] = $191 + 4;
   if ($192 >>> 0 > 100) label = 105; else {
    HEAP32[$0 + 40 >> 2] = $192;
    HEAP32[$vararg_buffer49 >> 2] = $192;
    _opus_custom_encoder_ctl($5, 4014, $vararg_buffer49) | 0;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4015:
  {
   $200 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $201 = HEAP32[$200 >> 2] | 0;
   HEAP32[$2 >> 2] = $200 + 4;
   if (!$201) label = 105; else {
    HEAP32[$201 >> 2] = HEAP32[$0 + 40 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4006:
  {
   $210 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $211 = HEAP32[$210 >> 2] | 0;
   HEAP32[$2 >> 2] = $210 + 4;
   if ($211 >>> 0 > 1) label = 105; else {
    HEAP32[$0 + 148 >> 2] = $211;
    HEAP32[$0 + 60 >> 2] = 1 - $211;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4007:
  {
   $221 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $222 = HEAP32[$221 >> 2] | 0;
   HEAP32[$2 >> 2] = $221 + 4;
   if (!$222) label = 105; else {
    HEAP32[$222 >> 2] = HEAP32[$0 + 148 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 11018:
  {
   $231 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $232 = HEAP32[$231 >> 2] | 0;
   HEAP32[$2 >> 2] = $231 + 4;
   if (($232 + 1 | 0) >>> 0 > 101) label = 105; else {
    HEAP32[$0 + 140 >> 2] = $232;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 11019:
  {
   $240 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $241 = HEAP32[$240 >> 2] | 0;
   HEAP32[$2 >> 2] = $240 + 4;
   if (!$241) label = 105; else {
    HEAP32[$241 >> 2] = HEAP32[$0 + 140 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4020:
  {
   $250 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $251 = HEAP32[$250 >> 2] | 0;
   HEAP32[$2 >> 2] = $250 + 4;
   if ($251 >>> 0 > 1) label = 105; else {
    HEAP32[$0 + 152 >> 2] = $251;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4021:
  {
   $259 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $260 = HEAP32[$259 >> 2] | 0;
   HEAP32[$2 >> 2] = $259 + 4;
   if (!$260) label = 105; else {
    HEAP32[$260 >> 2] = HEAP32[$0 + 152 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4024:
  {
   $269 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $270 = HEAP32[$269 >> 2] | 0;
   HEAP32[$2 >> 2] = $269 + 4;
   if (($270 | 0) < 3001) switch ($270 | 0) {
   case -1e3:
    break;
   default:
    {
     label = 105;
     break L1;
    }
   } else switch ($270 | 0) {
   case 3002:
   case 3001:
    break;
   default:
    {
     label = 105;
     break L1;
    }
   }
   HEAP32[$0 + 124 >> 2] = $270;
   $$02 = 0;
   label = 104;
   break;
  }
 case 4025:
  {
   $277 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $278 = HEAP32[$277 >> 2] | 0;
   HEAP32[$2 >> 2] = $277 + 4;
   if (!$278) label = 105; else {
    HEAP32[$278 >> 2] = HEAP32[$0 + 124 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4027:
  {
   $287 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $288 = HEAP32[$287 >> 2] | 0;
   HEAP32[$2 >> 2] = $287 + 4;
   if (!$288) label = 105; else {
    $292 = (HEAP32[$0 + 144 >> 2] | 0) / 400 | 0;
    HEAP32[$288 >> 2] = $292;
    if ((HEAP32[$0 + 108 >> 2] | 0) == 2051) {
     $$02 = 0;
     label = 104;
    } else {
     HEAP32[$288 >> 2] = $292 + (HEAP32[$0 + 116 >> 2] | 0);
     $$02 = 0;
     label = 104;
    }
   }
   break;
  }
 case 4029:
  {
   $304 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $305 = HEAP32[$304 >> 2] | 0;
   HEAP32[$2 >> 2] = $304 + 4;
   if (!$305) label = 105; else {
    HEAP32[$305 >> 2] = HEAP32[$0 + 144 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4031:
  {
   $314 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $315 = HEAP32[$314 >> 2] | 0;
   HEAP32[$2 >> 2] = $314 + 4;
   if (!$315) label = 105; else {
    HEAP32[$315 >> 2] = HEAP32[$0 + 18132 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4036:
  {
   $324 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $325 = HEAP32[$324 >> 2] | 0;
   HEAP32[$2 >> 2] = $324 + 4;
   if (($325 + -8 | 0) >>> 0 > 16) label = 105; else {
    HEAP32[$0 + 168 >> 2] = $325;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4037:
  {
   $333 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $334 = HEAP32[$333 >> 2] | 0;
   HEAP32[$2 >> 2] = $333 + 4;
   if (!$334) label = 105; else {
    HEAP32[$334 >> 2] = HEAP32[$0 + 168 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4040:
  {
   $343 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $344 = HEAP32[$343 >> 2] | 0;
   HEAP32[$2 >> 2] = $343 + 4;
   if (($344 + -5e3 | 0) >>> 0 < 10) {
    HEAP32[$0 + 156 >> 2] = $344;
    HEAP32[$vararg_buffer97 >> 2] = $344;
    _opus_custom_encoder_ctl($5, 4040, $vararg_buffer97) | 0;
    $$02 = 0;
    label = 104;
   } else label = 105;
   break;
  }
 case 4041:
  {
   $351 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $352 = HEAP32[$351 >> 2] | 0;
   HEAP32[$2 >> 2] = $351 + 4;
   if (!$352) label = 105; else {
    HEAP32[$352 >> 2] = HEAP32[$0 + 156 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4042:
  {
   $361 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $362 = HEAP32[$361 >> 2] | 0;
   HEAP32[$2 >> 2] = $361 + 4;
   if ($362 >>> 0 > 1) label = 105; else {
    HEAP32[$0 + 76 >> 2] = $362;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4043:
  {
   $370 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $371 = HEAP32[$370 >> 2] | 0;
   HEAP32[$2 >> 2] = $370 + 4;
   if (!$371) label = 105; else {
    HEAP32[$371 >> 2] = HEAP32[$0 + 76 >> 2];
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4046:
  {
   $380 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $381 = HEAP32[$380 >> 2] | 0;
   HEAP32[$2 >> 2] = $380 + 4;
   if ($381 >>> 0 > 1) label = 105; else {
    HEAP32[$vararg_buffer112 >> 2] = $381;
    _opus_custom_encoder_ctl($5, 4046, $vararg_buffer112) | 0;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4047:
  {
   $388 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $389 = HEAP32[$388 >> 2] | 0;
   HEAP32[$2 >> 2] = $388 + 4;
   if (!$389) label = 105; else {
    HEAP32[$vararg_buffer118 >> 2] = $389;
    _opus_custom_encoder_ctl($5, 4047, $vararg_buffer118) | 0;
    $$02 = 0;
    label = 104;
   }
   break;
  }
 case 4028:
  {
   $393 = $0 + (HEAP32[$0 + 4 >> 2] | 0) | 0;
   _tonality_analysis_reset($0 + 188 | 0);
   $395 = $0 + 14188 | 0;
   _memset($395 | 0, 0, 3948) | 0;
   _opus_custom_encoder_ctl($5, 4028, $vararg_buffer121) | 0;
   _silk_InitEncoder($393, HEAP32[$0 + 180 >> 2] | 0, $3) | 0;
   HEAP32[$395 >> 2] = HEAP32[$0 + 112 >> 2];
   HEAP16[$0 + 14192 >> 1] = 16384;
   HEAPF32[$0 + 14200 >> 2] = 1.0;
   HEAP32[$0 + 14248 >> 2] = 1;
   HEAP32[$0 + 14220 >> 2] = 1001;
   HEAP32[$0 + 14236 >> 2] = 1105;
   HEAP32[$0 + 14196 >> 2] = (_silk_lin2log(60) | 0) << 8;
   $$02 = 0;
   label = 104;
   break;
  }
 case 11002:
  {
   $413 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $414 = HEAP32[$413 >> 2] | 0;
   HEAP32[$2 >> 2] = $413 + 4;
   if (($414 | 0) < 1e3) {
    if (($414 | 0) != -1e3) {
     label = 105;
     break L1;
    }
   } else if (($414 | 0) > 1002) {
    label = 105;
    break L1;
   }
   HEAP32[$0 + 136 >> 2] = $414;
   $$02 = 0;
   label = 104;
   break;
  }
 case 10024:
  {
   $424 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $425 = HEAP32[$424 >> 2] | 0;
   HEAP32[$2 >> 2] = $424 + 4;
   HEAP32[$0 + 176 >> 2] = $425;
   HEAP32[$vararg_buffer129 >> 2] = $425;
   $$02 = _opus_custom_encoder_ctl($5, 10024, $vararg_buffer129) | 0;
   label = 104;
   break;
  }
 case 10026:
  {
   $433 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $434 = HEAP32[$433 >> 2] | 0;
   HEAP32[$2 >> 2] = $433 + 4;
   HEAP32[$0 + 14252 >> 2] = $434;
   HEAP32[$vararg_buffer135 >> 2] = $434;
   $$02 = _opus_custom_encoder_ctl($5, 10026, $vararg_buffer135) | 0;
   label = 104;
   break;
  }
 case 10015:
  {
   $442 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $443 = HEAP32[$442 >> 2] | 0;
   HEAP32[$2 >> 2] = $442 + 4;
   if (!$443) label = 105; else {
    HEAP32[$vararg_buffer141 >> 2] = $443;
    $$02 = _opus_custom_encoder_ctl($5, 10015, $vararg_buffer141) | 0;
    label = 104;
   }
   break;
  }
 default:
  {
   $$02 = -5;
   label = 104;
  }
 } while (0);
 if ((label | 0) == 104) {
  $$0 = $$02;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 105) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _silk_noise_shape_quantizer_del_dec($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 $23 = $23 | 0;
 $24 = $24 | 0;
 $25 = $25 | 0;
 var $$0 = 0, $$01 = 0, $$014 = 0, $$016 = 0, $$027 = 0, $$028 = 0, $$029 = 0, $$03 = 0, $$030 = 0, $$032 = 0, $$034 = 0, $$036 = 0, $$040 = 0, $$041 = 0, $$1 = 0, $$12 = 0, $$137 = 0, $$2 = 0, $$210 = 0, $$218 = 0, $$222 = 0, $$225 = 0, $$238 = 0, $$3$in = 0, $$339 = 0, $$4 = 0, $$5 = 0, $104 = 0, $106 = 0, $109 = 0, $115 = 0, $117 = 0, $120 = 0, $132 = 0, $138 = 0, $140 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $163 = 0, $164 = 0, $171 = 0, $174 = 0, $181 = 0, $184 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $204 = 0, $206 = 0, $209 = 0, $213 = 0, $221 = 0, $228 = 0, $240 = 0, $247 = 0, $249 = 0, $250 = 0, $252 = 0, $257 = 0, $260 = 0, $27 = 0, $272 = 0, $279 = 0, $28 = 0, $280 = 0, $282 = 0, $286 = 0, $287 = 0, $296 = 0, $297 = 0, $304 = 0, $306 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $328 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $335 = 0, $341 = 0, $343 = 0, $344 = 0, $345 = 0, $347 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $362 = 0, $363 = 0, $365 = 0, $367 = 0, $371 = 0, $374 = 0, $38 = 0, $381 = 0, $382 = 0, $384 = 0, $385 = 0, $39 = 0, $392 = 0, $393 = 0, $40 = 0, $401 = 0, $404 = 0, $407 = 0, $408 = 0, $41 = 0, $418 = 0, $42 = 0, $425 = 0, $43 = 0, $44 = 0, $441 = 0, $449 = 0, $45 = 0, $454 = 0, $46 = 0, $466 = 0, $471 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $76 = 0, $82 = 0, $84 = 0, $87 = 0, $93 = 0, $95 = 0, $98 = 0, $sext26 = 0, $spec$select = 0, $spec$select49 = 0, $spec$select60 = 0, $spec$select61 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 if (($23 | 0) <= 0) _celt_fatal(44474, 44455, 364);
 $27 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($23 * 56 | 0) | 0) + 15 & -16) | 0;
 $28 = $0 + 4336 | 0;
 $33 = $0 + 4332 | 0;
 $38 = $15 >> 6;
 $39 = ($2 | 0) == 2;
 $40 = $9 + 2 | 0;
 $41 = $9 + 4 | 0;
 $42 = $9 + 6 | 0;
 $43 = $9 + 8 | 0;
 $44 = ($11 | 0) > 0;
 $45 = $12 << 16 >> 16;
 $46 = $12 >> 16;
 $48 = ($20 & 1 | 0) == 0;
 $49 = $22 << 16 >> 16;
 $50 = $20 >> 1;
 $51 = $20 + -1 | 0;
 $52 = $10 + ($51 << 1) | 0;
 $53 = $13 << 16 >> 16;
 $54 = $14 << 16 >> 16;
 $55 = $14 >> 16;
 $56 = ($16 | 0) > 2048;
 $57 = ($16 | 0) / 2 | 0;
 $58 = $57 + -512 | 0;
 $59 = $17 + 944 | 0;
 $sext26 = $17 << 16;
 $61 = $16 << 16 >> 16;
 $62 = Math_imul($sext26 >> 16, $61) | 0;
 $64 = Math_imul($59 << 16 >> 16, $61) | 0;
 $65 = $17 + -944 | 0;
 $67 = Math_imul(61865984 - $sext26 >> 16, $61) | 0;
 $68 = 512 - $57 | 0;
 $69 = $27 + 4 | 0;
 $70 = $27 + 32 | 0;
 $71 = ($19 | 0) < 1;
 $$0 = $0 + 1280 + ((HEAP32[$28 >> 2] | 0) - $11 + 1 << 2) | 0;
 $$01 = $6 + ((HEAP32[$33 >> 2] | 0) - $11 + 2 << 2) | 0;
 $$040 = 0;
 L4 : while (1) {
  if (($$040 | 0) >= ($18 | 0)) break;
  if ($39) {
   $73 = HEAP32[$$01 >> 2] | 0;
   $76 = HEAP16[$9 >> 1] | 0;
   $82 = (Math_imul($73 >> 16, $76) | 0) + ((Math_imul($73 & 65535, $76) | 0) >> 16) + 2 | 0;
   $84 = HEAP32[$$01 + -4 >> 2] | 0;
   $87 = HEAP16[$40 >> 1] | 0;
   $93 = $82 + ((Math_imul($84 >> 16, $87) | 0) + ((Math_imul($84 & 65535, $87) | 0) >> 16)) | 0;
   $95 = HEAP32[$$01 + -8 >> 2] | 0;
   $98 = HEAP16[$41 >> 1] | 0;
   $104 = $93 + ((Math_imul($95 >> 16, $98) | 0) + ((Math_imul($95 & 65535, $98) | 0) >> 16)) | 0;
   $106 = HEAP32[$$01 + -12 >> 2] | 0;
   $109 = HEAP16[$42 >> 1] | 0;
   $115 = $104 + ((Math_imul($106 >> 16, $109) | 0) + ((Math_imul($106 & 65535, $109) | 0) >> 16)) | 0;
   $117 = HEAP32[$$01 + -16 >> 2] | 0;
   $120 = HEAP16[$43 >> 1] | 0;
   $$029 = $115 + ((Math_imul($117 >> 16, $120) | 0) + ((Math_imul($117 & 65535, $120) | 0) >> 16)) << 1;
   $$12 = $$01 + 4 | 0;
  } else {
   $$029 = 0;
   $$12 = $$01;
  }
  if ($44) {
   $132 = (HEAP32[$$0 >> 2] | 0) + (HEAP32[$$0 + -8 >> 2] | 0) | 0;
   $138 = (Math_imul($132 >> 16, $45) | 0) + ((Math_imul($132 & 65535, $45) | 0) >> 16) | 0;
   $140 = HEAP32[$$0 + -4 >> 2] | 0;
   $$027 = $$029 - ($138 + (Math_imul($140 >> 16, $46) | 0) + ((Math_imul($140 & 65535, $46) | 0) >> 16) << 2) | 0;
   $$1 = $$0 + 4 | 0;
  } else {
   $$027 = 0;
   $$1 = $$0;
  }
  $151 = $$040 + 15 | 0;
  $152 = $3 + ($$040 << 2) | 0;
  $$036 = 0;
  while (1) {
   if (($$036 | 0) >= ($23 | 0)) break;
   $154 = $1 + ($$036 * 1300 | 0) + 1288 | 0;
   HEAP32[$154 >> 2] = (Math_imul(HEAP32[$154 >> 2] | 0, 196314165) | 0) + 907633515;
   $160 = (_silk_noise_shape_quantizer_short_prediction_c_242($1 + ($$036 * 1300 | 0) + ($151 << 2) | 0, $8, $21) | 0) << 4;
   if (!$48) {
    label = 12;
    break L4;
   }
   $163 = $1 + ($$036 * 1300 | 0) + 1184 | 0;
   $164 = HEAP32[$163 >> 2] | 0;
   $171 = (HEAP32[$1 + ($$036 * 1300 | 0) + 1284 >> 2] | 0) + ((Math_imul($164 >> 16, $49) | 0) + ((Math_imul($164 & 65535, $49) | 0) >> 16)) | 0;
   $174 = (HEAP32[$1 + ($$036 * 1300 | 0) + 1188 >> 2] | 0) - $171 | 0;
   $181 = $164 + ((Math_imul($174 >> 16, $49) | 0) + ((Math_imul($174 & 65535, $49) | 0) >> 16)) | 0;
   HEAP32[$163 >> 2] = $171;
   $184 = HEAP16[$10 >> 1] | 0;
   $$028 = $50 + ((Math_imul($171 >> 16, $184) | 0) + ((Math_imul($171 & 65535, $184) | 0) >> 16)) | 0;
   $$03 = $181;
   $$041 = 2;
   while (1) {
    if (($$041 | 0) >= ($20 | 0)) break;
    $192 = $$041 + -1 | 0;
    $193 = $1 + ($$036 * 1300 | 0) + 1184 + ($192 << 2) | 0;
    $195 = $1 + ($$036 * 1300 | 0) + 1184 + ($$041 << 2) | 0;
    $196 = HEAP32[$195 >> 2] | 0;
    $197 = $196 - $$03 | 0;
    $204 = (HEAP32[$193 >> 2] | 0) + ((Math_imul($197 >> 16, $49) | 0) + ((Math_imul($197 & 65535, $49) | 0) >> 16)) | 0;
    HEAP32[$193 >> 2] = $$03;
    $206 = HEAP16[$10 + ($192 << 1) >> 1] | 0;
    $209 = HEAP32[$1 + ($$036 * 1300 | 0) + 1184 + (($$041 | 1) << 2) >> 2] | 0;
    HEAP32[$195 >> 2] = $204;
    $213 = $206 << 16 >> 16;
    $221 = HEAP16[$10 + ($$041 << 1) >> 1] | 0;
    $228 = $209 - $204 | 0;
    $$028 = $$028 + ((Math_imul($$03 >> 16, $213) | 0) + ((Math_imul($$03 & 65535, $213) | 0) >> 16)) + ((Math_imul($204 >> 16, $221) | 0) + ((Math_imul($204 & 65535, $221) | 0) >> 16)) | 0;
    $$03 = $196 + ((Math_imul($228 >> 16, $49) | 0) + ((Math_imul($228 & 65535, $49) | 0) >> 16)) | 0;
    $$041 = $$041 + 2 | 0;
   }
   HEAP32[$1 + ($$036 * 1300 | 0) + 1184 + ($51 << 2) >> 2] = $$03;
   $240 = HEAP16[$52 >> 1] | 0;
   $247 = $$028 + ((Math_imul($$03 >> 16, $240) | 0) + ((Math_imul($$03 & 65535, $240) | 0) >> 16)) << 1;
   $249 = HEAP32[$1 + ($$036 * 1300 | 0) + 1280 >> 2] | 0;
   $250 = $249 >> 16;
   $252 = $249 & 65535;
   $257 = $247 + ((Math_imul($250, $53) | 0) + ((Math_imul($252, $53) | 0) >> 16)) << 2;
   $260 = HEAP32[$1 + ($$036 * 1300 | 0) + 1024 + (HEAP32[$24 >> 2] << 2) >> 2] | 0;
   $272 = (Math_imul($260 >> 16, $54) | 0) + ((Math_imul($260 & 65535, $54) | 0) >> 16) + (Math_imul($250, $55) | 0) + ((Math_imul($252, $55) | 0) >> 16) << 2;
   $279 = HEAP32[$152 >> 2] | 0;
   $280 = $279 - (($$027 + $160 - ($257 + $272) >> 3) + 1 >> 1) | 0;
   $282 = (HEAP32[$154 >> 2] | 0) < 0;
   $spec$select = $282 ? 0 - $280 | 0 : $280;
   $spec$select49 = ($spec$select | 0) > -31744 ? $spec$select : -31744;
   $286 = ($spec$select49 | 0) < 30720 ? $spec$select49 : 30720;
   $287 = $286 - $17 | 0;
   do if ($56) {
    if (($287 | 0) > ($58 | 0)) {
     $$3$in = $287 - $58 | 0;
     label = 22;
     break;
    }
    if (($287 | 0) < ($68 | 0)) {
     $$3$in = $287 + $58 | 0;
     label = 22;
     break;
    } else if (($287 | 0) < 0) {
     label = 25;
     break;
    } else {
     $$2 = $59;
     $$210 = $17;
     $$222 = $64;
     $$225 = $62;
     break;
    }
   } else {
    $$3$in = $287;
    label = 22;
   } while (0);
   L29 : do if ((label | 0) == 22) {
    label = 0;
    if (($$3$in | 0) > 1023) {
     $296 = ($$3$in & -1024) + -80 + $17 | 0;
     $297 = $296 + 1024 | 0;
     $$2 = $297;
     $$210 = $296;
     $$222 = Math_imul($297 << 16 >> 16, $61) | 0;
     $$225 = Math_imul($296 << 16 >> 16, $61) | 0;
     break;
    }
    switch ($$3$in >> 10 | 0) {
    case 0:
     {
      $$2 = $59;
      $$210 = $17;
      $$222 = $64;
      $$225 = $62;
      break L29;
      break;
     }
    case -1:
     {
      label = 25;
      break L29;
      break;
     }
    default:
     {}
    }
    $304 = ($$3$in & -1024 | 80) + $17 | 0;
    $306 = $304 << 16;
    $$2 = $304 + 1024 | 0;
    $$210 = $304;
    $$222 = Math_imul(-67108864 - $306 >> 16, $61) | 0;
    $$225 = Math_imul(0 - $306 >> 16, $61) | 0;
   } while (0);
   if ((label | 0) == 25) {
    label = 0;
    $$2 = $17;
    $$210 = $65;
    $$222 = $62;
    $$225 = $67;
   }
   $312 = $286 - $$210 << 16 >> 16;
   $315 = $$225 + (Math_imul($312, $312) | 0) >> 10;
   $317 = $286 - $$2 << 16 >> 16;
   $320 = $$222 + (Math_imul($317, $317) | 0) >> 10;
   $321 = ($315 | 0) < ($320 | 0);
   $323 = HEAP32[$1 + ($$036 * 1300 | 0) + 1296 >> 2] | 0;
   $spec$select60 = $321 ? $$210 : $$2;
   $spec$select61 = $321 ? $$2 : $$210;
   HEAP32[$27 + ($$036 * 56 | 0) + 4 >> 2] = $323 + ($321 ? $315 : $320);
   HEAP32[$27 + ($$036 * 56 | 0) + 32 >> 2] = $323 + ($321 ? $320 : $315);
   HEAP32[$27 + ($$036 * 56 | 0) >> 2] = $spec$select60;
   HEAP32[$27 + ($$036 * 56 | 0) + 28 >> 2] = $spec$select61;
   $328 = $spec$select60 << 4;
   $330 = ($282 ? 0 - $328 | 0 : $328) + $$029 | 0;
   $331 = $330 + $160 | 0;
   $332 = $279 << 4;
   $333 = $331 - $332 | 0;
   HEAP32[$27 + ($$036 * 56 | 0) + 16 >> 2] = $333;
   $335 = $333 - $257 | 0;
   HEAP32[$27 + ($$036 * 56 | 0) + 20 >> 2] = $335 - $272;
   HEAP32[$27 + ($$036 * 56 | 0) + 12 >> 2] = $335;
   HEAP32[$27 + ($$036 * 56 | 0) + 24 >> 2] = $330;
   HEAP32[$27 + ($$036 * 56 | 0) + 8 >> 2] = $331;
   $341 = $spec$select61 << 4;
   $343 = ($282 ? 0 - $341 | 0 : $341) + $$029 | 0;
   $344 = $343 + $160 | 0;
   $345 = $344 - $332 | 0;
   HEAP32[$27 + ($$036 * 56 | 0) + 44 >> 2] = $345;
   $347 = $345 - $257 | 0;
   HEAP32[$27 + ($$036 * 56 | 0) + 48 >> 2] = $347 - $272;
   HEAP32[$27 + ($$036 * 56 | 0) + 40 >> 2] = $347;
   HEAP32[$27 + ($$036 * 56 | 0) + 52 >> 2] = $343;
   HEAP32[$27 + ($$036 * 56 | 0) + 36 >> 2] = $344;
   $$036 = $$036 + 1 | 0;
  }
  $356 = ((HEAP32[$24 >> 2] | 0) + -1 | 0) % 40 | 0;
  $357 = ($356 | 0) < 0;
  $358 = $356 + 40 | 0;
  HEAP32[$24 >> 2] = $357 ? $358 : $356;
  $359 = ($357 ? $358 : $356) + $25 | 0;
  $$016 = HEAP32[$69 >> 2] | 0;
  $$034 = 0;
  $$137 = 1;
  while (1) {
   if (($$137 | 0) == ($23 | 0)) break;
   $362 = HEAP32[$27 + ($$137 * 56 | 0) + 4 >> 2] | 0;
   $363 = ($362 | 0) < ($$016 | 0);
   $$016 = $363 ? $362 : $$016;
   $$034 = $363 ? $$137 : $$034;
   $$137 = $$137 + 1 | 0;
  }
  $365 = ($359 | 0) % 40 | 0;
  $367 = HEAP32[$1 + ($$034 * 1300 | 0) + 384 + ($365 << 2) >> 2] | 0;
  $$238 = 0;
  while (1) {
   if (($$238 | 0) == ($23 | 0)) break;
   if ((HEAP32[$1 + ($$238 * 1300 | 0) + 384 + ($365 << 2) >> 2] | 0) != ($367 | 0)) {
    $371 = $27 + ($$238 * 56 | 0) + 4 | 0;
    HEAP32[$371 >> 2] = (HEAP32[$371 >> 2] | 0) + 134217727;
    $374 = $27 + ($$238 * 56 | 0) + 32 | 0;
    HEAP32[$374 >> 2] = (HEAP32[$374 >> 2] | 0) + 134217727;
   }
   $$238 = $$238 + 1 | 0;
  }
  $$014 = HEAP32[$69 >> 2] | 0;
  $$030 = 0;
  $$032 = 0;
  $$218 = HEAP32[$70 >> 2] | 0;
  $$339 = 1;
  while (1) {
   if (($$339 | 0) == ($23 | 0)) break;
   $381 = HEAP32[$27 + ($$339 * 56 | 0) + 4 >> 2] | 0;
   $382 = ($381 | 0) > ($$014 | 0);
   $384 = HEAP32[$27 + ($$339 * 56 | 0) + 32 >> 2] | 0;
   $385 = ($384 | 0) < ($$218 | 0);
   $$014 = $382 ? $381 : $$014;
   $$030 = $382 ? $$339 : $$030;
   $$032 = $385 ? $$339 : $$032;
   $$218 = $385 ? $384 : $$218;
   $$339 = $$339 + 1 | 0;
  }
  if (($$218 | 0) < ($$014 | 0)) {
   _memcpy($1 + ($$030 * 1300 | 0) + ($$040 << 2) | 0, $1 + ($$032 * 1300 | 0) + ($$040 << 2) | 0, 1300 - ($$040 << 2) | 0) | 0;
   $392 = $27 + ($$030 * 56 | 0) | 0;
   $393 = $27 + ($$032 * 56 | 0) + 28 | 0;
   HEAP32[$392 >> 2] = HEAP32[$393 >> 2];
   HEAP32[$392 + 4 >> 2] = HEAP32[$393 + 4 >> 2];
   HEAP32[$392 + 8 >> 2] = HEAP32[$393 + 8 >> 2];
   HEAP32[$392 + 12 >> 2] = HEAP32[$393 + 12 >> 2];
   HEAP32[$392 + 16 >> 2] = HEAP32[$393 + 16 >> 2];
   HEAP32[$392 + 20 >> 2] = HEAP32[$393 + 20 >> 2];
   HEAP32[$392 + 24 >> 2] = HEAP32[$393 + 24 >> 2];
  }
  if (!($71 & ($$040 | 0) < ($25 | 0))) {
   $401 = $$040 - $25 | 0;
   HEAP8[$4 + $401 >> 0] = (((HEAP32[$1 + ($$034 * 1300 | 0) + 544 + ($365 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
   $404 = HEAP32[$1 + ($$034 * 1300 | 0) + 704 + ($365 << 2) >> 2] | 0;
   $407 = HEAP32[$7 + ($365 << 2) >> 2] | 0;
   $408 = $407 << 16 >> 16;
   $418 = (Math_imul($404 >> 16, $408) | 0) + ((Math_imul($404 & 65535, $408) | 0) >> 16) + (Math_imul($404, ($407 >> 15) + 1 >> 1) | 0) | 0;
   if (($418 | 0) > 8388479) $425 = 32767; else if (($418 | 0) < -8388736) $425 = -32768; else $425 = ($418 >> 7) + 1 >> 1;
   HEAP16[$5 + ($401 << 1) >> 1] = $425;
   HEAP32[$0 + 1280 + ((HEAP32[$28 >> 2] | 0) - $25 << 2) >> 2] = HEAP32[$1 + ($$034 * 1300 | 0) + 1024 + ($365 << 2) >> 2];
   HEAP32[$6 + ((HEAP32[$33 >> 2] | 0) - $25 << 2) >> 2] = HEAP32[$1 + ($$034 * 1300 | 0) + 864 + ($365 << 2) >> 2];
  }
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
  HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
  $441 = $$040 + 16 | 0;
  $$4 = 0;
  while (1) {
   if (($$4 | 0) == ($23 | 0)) break;
   HEAP32[$1 + ($$4 * 1300 | 0) + 1280 >> 2] = HEAP32[$27 + ($$4 * 56 | 0) + 12 >> 2];
   HEAP32[$1 + ($$4 * 1300 | 0) + 1284 >> 2] = HEAP32[$27 + ($$4 * 56 | 0) + 16 >> 2];
   $449 = HEAP32[$27 + ($$4 * 56 | 0) + 8 >> 2] | 0;
   HEAP32[$1 + ($$4 * 1300 | 0) + ($441 << 2) >> 2] = $449;
   HEAP32[$1 + ($$4 * 1300 | 0) + 704 + (HEAP32[$24 >> 2] << 2) >> 2] = $449;
   $454 = HEAP32[$27 + ($$4 * 56 | 0) >> 2] | 0;
   HEAP32[$1 + ($$4 * 1300 | 0) + 544 + (HEAP32[$24 >> 2] << 2) >> 2] = $454;
   HEAP32[$1 + ($$4 * 1300 | 0) + 864 + (HEAP32[$24 >> 2] << 2) >> 2] = HEAP32[$27 + ($$4 * 56 | 0) + 24 >> 2] << 1;
   HEAP32[$1 + ($$4 * 1300 | 0) + 1024 + (HEAP32[$24 >> 2] << 2) >> 2] = HEAP32[$27 + ($$4 * 56 | 0) + 20 >> 2];
   $466 = $1 + ($$4 * 1300 | 0) + 1288 | 0;
   $471 = (HEAP32[$466 >> 2] | 0) + (($454 >> 9) + 1 >> 1) | 0;
   HEAP32[$466 >> 2] = $471;
   HEAP32[$1 + ($$4 * 1300 | 0) + 384 + (HEAP32[$24 >> 2] << 2) >> 2] = $471;
   HEAP32[$1 + ($$4 * 1300 | 0) + 1296 >> 2] = HEAP32[$27 + ($$4 * 56 | 0) + 4 >> 2];
   $$4 = $$4 + 1 | 0;
  }
  HEAP32[$7 + (HEAP32[$24 >> 2] << 2) >> 2] = $38;
  $$0 = $$1;
  $$01 = $$12;
  $$040 = $$040 + 1 | 0;
 }
 if ((label | 0) == 12) _celt_fatal(44519, 44455, 422);
 $$5 = 0;
 while (1) {
  if (($$5 | 0) == ($23 | 0)) break;
  dest = $1 + ($$5 * 1300 | 0) | 0;
  src = $1 + ($$5 * 1300 | 0) + ($18 << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$5 = $$5 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_encode_frame_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$01 = 0, $$011 = 0, $$017 = 0, $$018 = 0, $$02 = 0, $$021 = 0, $$024 = 0, $$026 = 0, $$027 = 0, $$03 = 0, $$030 = 0, $$032 = 0, $$035 = 0, $$038 = 0, $$04 = 0, $$05 = 0, $$08 = 0, $$112 = 0, $$12552 = 0, $$13150 = 0, $$13948 = 0, $$21055 = 0, $$21065 = 0, $$213 = 0, $$22054 = 0, $$22353 = 0, $$22363 = 0, $$22951 = 0, $$22961 = 0, $$23449 = 0, $$23459 = 0, $$237 = 0, $$23746 = 0, $$256 = 0, $$314 = 0, $$4$in = 0, $$415 = 0, $$5 = 0, $$516 = 0, $$idx44 = 0, $$pre = 0, $$pre100 = 0, $$pre102 = 0, $$sroa$0 = 0, $$sroa$4$0 = 0, $$sroa$4$0$$sroa_idx80 = 0, $$sroa$4$0$copyload = 0, $$sroa$4$0$copyload81 = 0, $$sroa$4$1 = 0, $$sroa$4$2 = 0, $$sroa$4$3 = 0, $$sroa$4$4 = 0, $$sroa$6 = 0, $$sroa$6$0$$sroa_idx89 = 0, $10 = 0, $109 = 0, $11 = 0, $114 = 0.0, $118 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $133 = 0, $139 = 0, $14 = 0, $15 = 0, $154 = 0, $156 = 0, $16 = 0, $163 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $183 = 0, $185 = 0, $190 = 0, $198 = 0, $199 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $44 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $86 = 0, $89 = 0, $9 = 0, $spec$select115 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13584 | 0;
 $6 = sp + 12816 | 0;
 $7 = sp + 1328 | 0;
 $8 = sp + 12768 | 0;
 $$sroa$0 = sp + 4040 | 0;
 $$sroa$6 = sp + 4016 | 0;
 $9 = sp + 8416 | 0;
 $10 = sp + 4064 | 0;
 $11 = sp + 1312 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 13568 | 0;
 $15 = sp;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$13 + 12 >> 2] = 0;
 $16 = $0 + 4620 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + 1;
 $21 = $0 + 4770 | 0;
 HEAP8[$21 >> 0] = $17 & 3;
 $22 = $0 + 4592 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $0 + 7180 + ($23 << 2) | 0;
 $26 = $0 + 5098 | 0;
 $27 = $0 + 4584 | 0;
 _silk_LP_variable_cutoff($0 + 16 | 0, $26, HEAP32[$27 >> 2] | 0);
 $29 = $0 + 4576 | 0;
 _silk_short2float_array_542($24 + ((HEAP32[$29 >> 2] | 0) * 5 << 2) | 0, $26, HEAP32[$27 >> 2] | 0);
 $$011 = 0;
 while (1) {
  if (($$011 | 0) == 8) break;
  $44 = $24 + (((HEAP32[$29 >> 2] | 0) * 5 | 0) + (Math_imul($$011, HEAP32[$27 >> 2] >> 3) | 0) << 2) | 0;
  HEAPF32[$44 >> 2] = +HEAPF32[$44 >> 2] + +(1 - ($$011 & 2) | 0) * 9.999999974752427e-07;
  $$011 = $$011 + 1 | 0;
 }
 $48 = $7 + ($23 << 2) | 0;
 $49 = $0 + 4680 | 0;
 L5 : do if (!(HEAP32[$49 >> 2] | 0)) {
  _silk_find_pitch_lags_FLP($0, $6, $7, $24);
  _silk_noise_shape_analysis_FLP($0, $6, $48, $24);
  _silk_find_pred_coefs_FLP($0, $6, $48, $24, $3);
  _silk_process_gains_FLP($0, $6, $3);
  _silk_LBRR_encode_FLP($0, $6, $24, $3);
  $52 = $0 + 4736 | 0;
  $53 = $0 + 4580 | 0;
  $55 = _silk_gains_ID($52, HEAP32[$53 >> 2] | 0) | 0;
  dest = $8;
  src = $2;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $56 = $0 + 148 | 0;
  _memcpy($9 | 0, $56 | 0, 4352) | 0;
  $57 = HEAP8[$21 >> 0] | 0;
  $58 = $0 + 5772 | 0;
  $59 = HEAP16[$58 >> 1] | 0;
  $60 = $0 + 5768 | 0;
  $61 = HEAP32[$60 >> 2] | 0;
  $62 = $4 + -5 | 0;
  $63 = $0 + 4736 | 0;
  $64 = $0 + 4772 | 0;
  $65 = $6 + 692 | 0;
  $$sroa$4$0$$sroa_idx80 = $2 + 24 | 0;
  $$sroa$6$0$$sroa_idx89 = $2 + 28 | 0;
  $66 = $0 + 5748 | 0;
  $67 = $0 + 4765 | 0;
  $68 = $0 + 4766 | 0;
  $$idx44 = $2 + 20 | 0;
  $69 = $0 + 4588 | 0;
  $70 = $6 + 744 | 0;
  $71 = $0 + 7168 | 0;
  $72 = ($3 | 0) == 2;
  $73 = $72 & 1;
  $74 = ($5 | 0) != 0;
  $$017 = 0;
  $$018 = -1;
  $$021 = 0;
  $$024 = 0;
  $$026 = $55;
  $$027 = 0;
  $$030 = 0;
  $$032 = 0;
  $$038 = 0;
  $$04 = 0;
  $$05 = 256;
  $$08 = -1;
  $$sroa$4$0 = 0;
  L7 : while (1) {
   $75 = ($$026 | 0) == ($$018 | 0);
   if ($75) {
    $$237 = $$038;
    $$sroa$4$2 = $$sroa$4$0;
    label = 24;
   } else if (($$026 | 0) == ($$08 | 0)) {
    $$237 = $$032;
    $$sroa$4$2 = $$sroa$4$0;
    label = 24;
   } else {
    $77 = ($$017 | 0) == 0;
    if (!$77) {
     dest = $2;
     src = $8;
     stop = dest + 48 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     _memcpy($56 | 0, $9 | 0, 4352) | 0;
     HEAP8[$21 >> 0] = $57;
     HEAP16[$58 >> 1] = $59;
     HEAP32[$60 >> 2] = $61;
    }
    _silk_NSQ_wrapper_FLP($0, $6, $63, $56, $64, $24);
    $78 = ($$017 | 0) == 6;
    if ($78 & ($$024 | 0) == 0) {
     HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$$sroa$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$$sroa$0 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
     $$sroa$4$0$copyload = HEAP32[$$sroa$4$0$$sroa_idx80 >> 2] | 0;
     HEAP32[$$sroa$6 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 >> 2];
     HEAP32[$$sroa$6 + 4 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 4 >> 2];
     HEAP32[$$sroa$6 + 8 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 8 >> 2];
     HEAP32[$$sroa$6 + 12 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 12 >> 2];
     HEAP32[$$sroa$6 + 16 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 16 >> 2];
     $$sroa$4$1 = $$sroa$4$0$copyload;
    } else $$sroa$4$1 = $$sroa$4$0;
    _silk_encode_indices($0, $2, HEAP32[$66 >> 2] | 0, 0, $3);
    _silk_encode_pulses($2, HEAP8[$67 >> 0] | 0, HEAP8[$68 >> 0] | 0, $64, HEAP32[$27 >> 2] | 0);
    $86 = _ec_tell_543(HEAP32[$$idx44 >> 2] | 0, HEAP32[$$sroa$6$0$$sroa_idx89 >> 2] | 0) | 0;
    if ($78 & ($$024 | 0) == 0 & ($86 | 0) > ($4 | 0)) {
     HEAP32[$2 >> 2] = HEAP32[$$sroa$0 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$$sroa$0 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$$sroa$0 + 20 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx80 >> 2] = $$sroa$4$1;
     HEAP32[$$sroa$6$0$$sroa_idx89 >> 2] = HEAP32[$$sroa$6 >> 2];
     HEAP32[$$sroa$6$0$$sroa_idx89 + 4 >> 2] = HEAP32[$$sroa$6 + 4 >> 2];
     HEAP32[$$sroa$6$0$$sroa_idx89 + 8 >> 2] = HEAP32[$$sroa$6 + 8 >> 2];
     HEAP32[$$sroa$6$0$$sroa_idx89 + 12 >> 2] = HEAP32[$$sroa$6 + 12 >> 2];
     HEAP32[$$sroa$6$0$$sroa_idx89 + 16 >> 2] = HEAP32[$$sroa$6 + 16 >> 2];
     $89 = HEAP8[$70 >> 0] | 0;
     HEAP8[$71 >> 0] = $89;
     $$pre = HEAP32[$53 >> 2] | 0;
     $$112 = 0;
     while (1) {
      if (($$112 | 0) >= ($$pre | 0)) break;
      HEAP8[$0 + 4736 + $$112 >> 0] = 4;
      $$112 = $$112 + 1 | 0;
     }
     if (!$72) HEAP8[$52 >> 0] = $89;
     HEAP16[$58 >> 1] = $59;
     HEAP32[$60 >> 2] = $61;
     $$pre100 = HEAP32[$27 >> 2] | 0;
     $$213 = 0;
     while (1) {
      if (($$213 | 0) >= ($$pre100 | 0)) break;
      HEAP8[$0 + 4772 + $$213 >> 0] = 0;
      $$213 = $$213 + 1 | 0;
     }
     _silk_encode_indices($0, $2, HEAP32[$66 >> 2] | 0, 0, $3);
     _silk_encode_pulses($2, HEAP8[$67 >> 0] | 0, HEAP8[$68 >> 0] | 0, $64, HEAP32[$27 >> 2] | 0);
     $$035 = _ec_tell_543(HEAP32[$$idx44 >> 2] | 0, HEAP32[$$sroa$6$0$$sroa_idx89 >> 2] | 0) | 0;
    } else $$035 = $86;
    if ($74 | $77 ^ 1) {
     $$237 = $$035;
     $$sroa$4$2 = $$sroa$4$1;
     label = 24;
    } else if (($$035 | 0) > ($4 | 0)) {
     $$23746 = $$035;
     $$sroa$4$3 = $$sroa$4$1;
    } else break L5;
   }
   if ((label | 0) == 24) {
    label = 0;
    if (($$017 | 0) == 6) break; else {
     $$23746 = $$237;
     $$sroa$4$3 = $$sroa$4$2;
    }
   }
   $109 = ($$23746 | 0) > ($4 | 0);
   L36 : do if ($109) {
    if ($$024 | 0) {
     $$12552 = $$024;
     $$13150 = $$030;
     $$13948 = $$038;
     $$21055 = $$026;
     $$22054 = $$018;
     $$22353 = 1;
     $$22951 = $$05 << 16 >> 16;
     $$23449 = $$23746;
     $$256 = $$04;
     $$sroa$4$4 = $$sroa$4$3;
     break;
    }
    if ($$017 >>> 0 > 1) {
     $114 = +HEAPF32[$65 >> 2] * 1.5;
     HEAPF32[$65 >> 2] = $114 > 1.5 ? $114 : 1.5;
     HEAP8[$68 >> 0] = 0;
     $$21065 = -1;
     $$22363 = 0;
     $$22961 = $$027;
     $$23459 = $$032;
    } else {
     $$21065 = $$026;
     $$22363 = 1;
     $$22961 = $$05 << 16 >> 16;
     $$23459 = $$23746;
    }
    $123 = HEAP32[$53 >> 2] | 0;
    $124 = ($$017 | 0) == 0;
    $$314 = 0;
    while (1) {
     if (($$314 | 0) >= ($123 | 0)) {
      $$12552 = 0;
      $$13150 = $$030;
      $$13948 = $$038;
      $$21055 = $$21065;
      $$22054 = $$018;
      $$22353 = $$22363;
      $$22951 = $$22961;
      $$23449 = $$23459;
      $$256 = $$04;
      $$sroa$4$4 = $$sroa$4$3;
      break L36;
     }
     $126 = HEAP32[$69 >> 2] | 0;
     $128 = $$314 + 1 | 0;
     $129 = Math_imul($128, $126) | 0;
     $$02 = 0;
     $$03 = Math_imul($$314, $126) | 0;
     while (1) {
      if (($$03 | 0) >= ($129 | 0)) break;
      $133 = HEAP8[$0 + 4772 + $$03 >> 0] | 0;
      $$02 = $$02 + (($133 | 0) > -1 ? $133 : 0 - $133 | 0) | 0;
      $$03 = $$03 + 1 | 0;
     }
     $$pre102 = $15 + ($$314 << 2) | 0;
     do if ($124) label = 48; else {
      $139 = $13 + ($$314 << 2) | 0;
      if (($$02 | 0) < (HEAP32[$$pre102 >> 2] | 0)) if (!(HEAP32[$139 >> 2] | 0)) {
       label = 48;
       break;
      }
      HEAP32[$139 >> 2] = 1;
     } while (0);
     if ((label | 0) == 48) {
      label = 0;
      HEAP32[$$pre102 >> 2] = $$02;
      HEAP16[$14 + ($$314 << 1) >> 1] = $$05;
     }
     $$314 = $128;
    }
   } else {
    if (($$23746 | 0) >= ($62 | 0)) break L5;
    $118 = $$05 << 16 >> 16;
    if ($75) {
     $$12552 = 1;
     $$13150 = $118;
     $$13948 = $$23746;
     $$21055 = $$08;
     $$22054 = $$026;
     $$22353 = $$021;
     $$22951 = $$027;
     $$23449 = $$032;
     $$256 = $$04;
     $$sroa$4$4 = $$sroa$4$3;
    } else {
     HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$$sroa$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$$sroa$0 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
     $$sroa$4$0$copyload81 = HEAP32[$$sroa$4$0$$sroa_idx80 >> 2] | 0;
     HEAP32[$$sroa$6 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 >> 2];
     HEAP32[$$sroa$6 + 4 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 4 >> 2];
     HEAP32[$$sroa$6 + 8 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 8 >> 2];
     HEAP32[$$sroa$6 + 12 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 12 >> 2];
     HEAP32[$$sroa$6 + 16 >> 2] = HEAP32[$$sroa$6$0$$sroa_idx89 + 16 >> 2];
     if ($$sroa$4$0$copyload81 >>> 0 >= 1276) {
      label = 37;
      break L7;
     }
     _memcpy($12 | 0, HEAP32[$2 >> 2] | 0, $$sroa$4$0$copyload81 | 0) | 0;
     _memcpy($10 | 0, $56 | 0, 4352) | 0;
     $$12552 = 1;
     $$13150 = $118;
     $$13948 = $$23746;
     $$21055 = $$08;
     $$22054 = $$026;
     $$22353 = $$021;
     $$22951 = $$027;
     $$23449 = $$032;
     $$256 = HEAP8[$71 >> 0] | 0;
     $$sroa$4$4 = $$sroa$4$0$copyload81;
    }
   } while (0);
   do if (!($$12552 & $$22353)) {
    if (!$109) {
     $154 = _silk_log2lin((($$23746 - $4 << 7 | 0) / (HEAP32[$27 >> 2] | 0) | 0) + 2048 | 0) | 0;
     $156 = $$05 << 16 >> 16;
     $$5 = (Math_imul($154 >> 16, $156) | 0) + ((Math_imul($154 & 65535, $156) | 0) >>> 16) & 65535;
     break;
    }
    if ($$05 << 16 >> 16 < 16384) $$5 = $$05 << 16 >> 16 << 1 & 65535; else $$5 = 32767;
   } else {
    $163 = $$22951 - $$13150 | 0;
    $168 = $$13150 + ((Math_imul($163, $4 - $$13948 | 0) | 0) / ($$23449 - $$13948 | 0) | 0) | 0;
    $169 = $168 << 16 >> 16;
    $170 = $163 >> 2;
    $171 = $$13150 + $170 | 0;
    if (($169 | 0) > ($171 | 0)) $$4$in = $171; else {
     $173 = $$22951 - $170 | 0;
     $$4$in = ($169 | 0) < ($173 | 0) ? $173 : $168;
    }
    $$5 = $$4$in & 65535;
   } while (0);
   $175 = HEAP32[$53 >> 2] | 0;
   $$415 = 0;
   while (1) {
    if (($$415 | 0) >= ($175 | 0)) break;
    if (!(HEAP32[$13 + ($$415 << 2) >> 2] | 0)) $$01 = $$5; else $$01 = HEAP16[$14 + ($$415 << 1) >> 1] | 0;
    $183 = HEAP32[$6 + 728 + ($$415 << 2) >> 2] | 0;
    $185 = $$01 << 16 >> 16;
    $190 = (Math_imul($183 >> 16, $185) | 0) + ((Math_imul($183 & 65535, $185) | 0) >> 16) | 0;
    $spec$select115 = ($190 | 0) > -8388608 ? $190 : -8388608;
    HEAP32[$11 + ($$415 << 2) >> 2] = (($spec$select115 | 0) < 8388607 ? $spec$select115 : 8388607) << 8;
    $$415 = $$415 + 1 | 0;
   }
   HEAP8[$71 >> 0] = HEAP8[$70 >> 0] | 0;
   _silk_gains_quant($52, $11, $71, $73, $175);
   $198 = HEAP32[$53 >> 2] | 0;
   $199 = _silk_gains_ID($52, $198) | 0;
   $$516 = 0;
   while (1) {
    if (($$516 | 0) >= ($198 | 0)) break;
    HEAPF32[$6 + ($$516 << 2) >> 2] = +(HEAP32[$11 + ($$516 << 2) >> 2] | 0) * .0000152587890625;
    $$516 = $$516 + 1 | 0;
   }
   $$017 = $$017 + 1 | 0;
   $$018 = $$22054;
   $$021 = $$22353;
   $$024 = $$12552;
   $$026 = $199;
   $$027 = $$22951;
   $$030 = $$13150;
   $$032 = $$23449;
   $$038 = $$13948;
   $$04 = $$256;
   $$05 = $$5;
   $$08 = $$21055;
   $$sroa$4$0 = $$sroa$4$4;
  }
  if ((label | 0) == 37) _celt_fatal(46680, 46650, 281);
  if (($$024 | 0) != 0 & ($75 | ($$237 | 0) > ($4 | 0))) {
   HEAP32[$2 >> 2] = HEAP32[$$sroa$0 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$$sroa$0 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$$sroa$0 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$$sroa$0 + 12 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$$sroa$0 + 16 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAP32[$$sroa$0 + 20 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx80 >> 2] = $$sroa$4$2;
   HEAP32[$$sroa$6$0$$sroa_idx89 >> 2] = HEAP32[$$sroa$6 >> 2];
   HEAP32[$$sroa$6$0$$sroa_idx89 + 4 >> 2] = HEAP32[$$sroa$6 + 4 >> 2];
   HEAP32[$$sroa$6$0$$sroa_idx89 + 8 >> 2] = HEAP32[$$sroa$6 + 8 >> 2];
   HEAP32[$$sroa$6$0$$sroa_idx89 + 12 >> 2] = HEAP32[$$sroa$6 + 12 >> 2];
   HEAP32[$$sroa$6$0$$sroa_idx89 + 16 >> 2] = HEAP32[$$sroa$6 + 16 >> 2];
   if ($$sroa$4$2 >>> 0 < 1276) {
    _memcpy(HEAP32[$2 >> 2] | 0, $12 | 0, $$sroa$4$2 | 0) | 0;
    _memcpy($56 | 0, $10 | 0, 4352) | 0;
    HEAP8[$71 >> 0] = $$04;
    break;
   } else _celt_fatal(46603, 46650, 251);
  }
 } while (0);
 _memmove($0 + 7180 | 0, $0 + 7180 + (HEAP32[$27 >> 2] << 2) | 0, (HEAP32[$22 >> 2] | 0) + ((HEAP32[$29 >> 2] | 0) * 5 | 0) << 2 | 0) | 0;
 if (HEAP32[$49 >> 2] | 0) {
  $storemerge = 0;
  HEAP32[$1 >> 2] = $storemerge;
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$0 + 4544 >> 2] = HEAP32[$6 + 228 + ((HEAP32[$0 + 4580 >> 2] | 0) + -1 << 2) >> 2];
 HEAP8[$0 + 4541 >> 0] = HEAP8[$0 + 4765 >> 0] | 0;
 HEAP32[$0 + 4664 >> 2] = 0;
 $storemerge = (_ec_tell_543(HEAP32[$2 + 20 >> 2] | 0, HEAP32[$2 + 28 >> 2] | 0) | 0) + 7 >> 3;
 HEAP32[$1 >> 2] = $storemerge;
 STACKTOP = sp;
 return 0;
}

function _celt_decode_with_ec($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0.0, $$014 = 0, $$015 = 0, $$018 = 0, $$02 = 0, $$020 = 0, $$026 = 0, $$028 = 0.0, $$03 = 0, $$030 = 0, $$03164 = 0, $$032 = 0, $$035 = 0, $$04 = 0, $$04$idx49$val = 0, $$04$idx49$val$pre = 0, $$04$idx51 = 0, $$04$idx51$val = 0, $$04$idx52 = 0, $$04$idx53$val = 0, $$04$idx54$val = 0, $$04$idx55$val = 0, $$04$idx56$val = 0, $$04$idx57$val = 0, $$04$idx57$val77 = 0, $$04$idx57$val78 = 0, $$04$idx57$val79 = 0, $$04$idx58$val = 0, $$04$idx58$val81 = 0, $$04$idx58$val82 = 0, $$04$idx58$val83 = 0, $$07 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$116 = 0, $$119 = 0, $$121 = 0, $$127 = 0, $$129 = 0.0, $$1660 = 0, $$1662 = 0, $$18 = 0, $$2 = 0, $$211 = 0, $$22266 = 0, $$22267 = 0, $$312 = 0, $$323 = 0, $$4 = 0, $$424 = 0, $$5 = 0, $$5$1 = 0, $$525 = 0, $$6 = 0, $$6$1 = 0, $$alloca_mul19 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $11 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $145 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $168 = 0, $17 = 0, $171 = 0, $172 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $186 = 0, $188 = 0, $19 = 0, $192 = 0, $193 = 0, $195 = 0, $202 = 0, $21 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $227 = 0, $229 = 0, $23 = 0, $231 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $25 = 0, $254 = 0, $260 = 0, $262 = 0.0, $264 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $271 = 0.0, $28 = 0, $297 = 0, $30 = 0, $302 = 0, $307 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $48 = 0, $52 = 0, $53 = 0, $55 = 0, $63 = 0, $7 = 0, $72 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0.0, $84 = 0.0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $phitmp = 0, $spec$select = 0, $spec$select110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 $14 = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 $16 = HEAP32[$0 + 12 >> 2] | 0;
 _validate_celt_decoder($0);
 $17 = HEAP32[$0 >> 2] | 0;
 $19 = HEAP32[$17 + 8 >> 2] | 0;
 $21 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = HEAP32[$17 + 32 >> 2] | 0;
 $25 = HEAP32[$0 + 20 >> 2] | 0;
 $27 = HEAP32[$0 + 24 >> 2] | 0;
 $28 = $0 + 16 | 0;
 $30 = Math_imul(HEAP32[$28 >> 2] | 0, $4) | 0;
 $31 = $21 + 2048 | 0;
 $35 = $0 + 92 + ((Math_imul($31, $14) | 0) << 2) + ($14 * 24 << 2) | 0;
 $36 = $19 << 1;
 $37 = $35 + ($36 << 2) | 0;
 $38 = $37 + ($36 << 2) | 0;
 $39 = $38 + ($36 << 2) | 0;
 $40 = $17 + 44 | 0;
 $42 = HEAP32[$17 + 36 >> 2] | 0;
 $$035 = 0;
 while (1) {
  if (($$035 | 0) > ($42 | 0)) {
   $$1 = -1;
   label = 84;
   break;
  }
  if ((HEAP32[$40 >> 2] << $$035 | 0) == ($30 | 0)) break;
  $$035 = $$035 + 1 | 0;
 }
 if ((label | 0) == 84) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 $48 = 1 << $$035;
 if ($2 >>> 0 > 1275 | ($3 | 0) == 0) {
  $$1 = -1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $52 = HEAP32[$40 >> 2] << $$035;
 $53 = 0 - $52 | 0;
 $$07 = 0;
 do {
  $55 = $0 + 92 + ((Math_imul($$07, $31) | 0) << 2) | 0;
  HEAP32[$8 + ($$07 << 2) >> 2] = $55;
  HEAP32[$9 + ($$07 << 2) >> 2] = $55 + 8192 + ($53 << 2);
  $$07 = $$07 + 1 | 0;
 } while (($$07 | 0) < ($14 | 0));
 $63 = HEAP32[$17 + 12 >> 2] | 0;
 $spec$select = ($27 | 0) > ($63 | 0) ? $63 : $27;
 if (($1 | 0) == 0 | ($2 | 0) < 2) {
  _celt_decode_lost($0, $52, $$035);
  _deemphasis($9, $3, $52, $14, HEAP32[$28 >> 2] | 0, $17 + 16 | 0, $0 + 84 | 0, $6);
  $$1 = ($30 | 0) / (HEAP32[$28 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $72 = $0 + 52 | 0;
 HEAP32[$0 + 56 >> 2] = (HEAP32[$72 >> 2] | 0) != 0 & 1;
 if (!$5) {
  _ec_dec_init($7, $1, $2);
  $$04 = $7;
 } else $$04 = $5;
 $78 = ($16 | 0) == 1;
 L21 : do if ($78) {
  $$09 = 0;
  while (1) {
   if (($$09 | 0) >= ($19 | 0)) break L21;
   $80 = $35 + ($$09 << 2) | 0;
   $81 = +HEAPF32[$80 >> 2];
   $84 = +HEAPF32[$35 + ($19 + $$09 << 2) >> 2];
   HEAPF32[$80 >> 2] = $81 > $84 ? $81 : $84;
   $$09 = $$09 + 1 | 0;
  }
 } while (0);
 $87 = $2 << 3;
 $$04$idx51 = $$04 + 20 | 0;
 $$04$idx51$val = HEAP32[$$04$idx51 >> 2] | 0;
 $$04$idx52 = $$04 + 28 | 0;
 $88 = _ec_tell_40($$04$idx51$val, HEAP32[$$04$idx52 >> 2] | 0) | 0;
 if (($88 | 0) < ($87 | 0)) if (($88 | 0) == 1) {
  $91 = _ec_dec_bit_logp($$04, 15) | 0;
  if (!$91) {
   $$020 = 1;
   $$1660 = 0;
  } else {
   $$04$idx49$val$pre = HEAP32[$$04$idx51 >> 2] | 0;
   $$04$idx49$val = $$04$idx49$val$pre;
   $$1662 = $91;
   $$pre$phiZ2D = _ec_tell_40($$04$idx49$val$pre, HEAP32[$$04$idx52 >> 2] | 0) | 0;
   label = 20;
  }
 } else {
  $$020 = $88;
  $$1660 = 0;
 } else {
  $$04$idx49$val = $$04$idx51$val;
  $$1662 = 1;
  $$pre$phiZ2D = $88;
  label = 20;
 }
 if ((label | 0) == 20) {
  HEAP32[$$04$idx51 >> 2] = $$04$idx49$val + ($87 - $$pre$phiZ2D);
  $$020 = $87;
  $$1660 = $$1662;
 }
 if (($25 | 0) != 0 | ($$020 + 16 | 0) > ($87 | 0)) {
  $$121 = $$020;
  $$129 = 0.0;
  $245 = 0;
  $246 = 0;
 } else {
  if (!(_ec_dec_bit_logp($$04, 1) | 0)) {
   $$028 = 0.0;
   $$032 = 0;
   $$116 = 0;
  } else {
   $100 = _ec_dec_uint($$04, 6) | 0;
   $105 = (16 << $100) + (_ec_dec_bits($$04, $100 + 4 | 0) | 0) + -1 | 0;
   $106 = _ec_dec_bits($$04, 3) | 0;
   if (((_ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0) + 2 | 0) > ($87 | 0)) $$015 = 0; else $$015 = _ec_dec_icdf($$04, 41643, 2) | 0;
   $$028 = +($106 + 1 | 0) * .09375;
   $$032 = $105;
   $$116 = $$015;
  }
  $$121 = _ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0;
  $$129 = $$028;
  $245 = $$032;
  $246 = $$116;
 }
 $115 = ($$035 | 0) == 0;
 if ($115 | ($$121 + 3 | 0) > ($87 | 0)) {
  $$22267 = $$121;
  label = 29;
 } else {
  $118 = _ec_dec_bit_logp($$04, 3) | 0;
  $119 = _ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0;
  if (!$118) {
   $$22267 = $119;
   label = 29;
  } else {
   $$030 = $48;
   $$03164 = $118;
   $$22266 = $119;
  }
 }
 if ((label | 0) == 29) {
  $$030 = 0;
  $$03164 = 0;
  $$22266 = $$22267;
 }
 if (($$22266 + 3 | 0) > ($87 | 0)) $124 = 0; else $124 = _ec_dec_bit_logp($$04, 3) | 0;
 _unquant_coarse_energy($17, $25, $27, $35, $124, $$04, $16, $$035);
 $125 = _llvm_stacksave() | 0;
 $126 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 _tf_decode($25, $27, $$03164, $126, $$035, $$04);
 if (((_ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0) + 4 | 0) > ($87 | 0)) $$014 = 2; else $$014 = _ec_dec_icdf($$04, 41646, 5) | 0;
 $131 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 _init_caps($17, $131, $$035, $16);
 $132 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 $133 = $2 << 6;
 $$04$idx53$val = HEAP32[$$04$idx51 >> 2] | 0;
 $$04$idx54$val = HEAP32[$$04$idx52 >> 2] | 0;
 $$018 = 6;
 $$026 = $133;
 $$04$idx57$val79 = $$04$idx53$val;
 $$04$idx58$val83 = $$04$idx54$val;
 $$110 = $25;
 $$323 = _ec_tell_frac($$04$idx53$val, $$04$idx54$val) | 0;
 while (1) {
  if (($$110 | 0) >= ($27 | 0)) break;
  $136 = $$110 + 1 | 0;
  $145 = (Math_imul($16, (HEAP16[$23 + ($136 << 1) >> 1] | 0) - (HEAP16[$23 + ($$110 << 1) >> 1] | 0) | 0) | 0) << $$035;
  $146 = $145 << 3;
  $147 = ($145 | 0) < 48;
  $149 = ($146 | 0) < (($147 ? 48 : $145) | 0) ? $146 : $147 ? 48 : $145;
  $150 = $131 + ($$110 << 2) | 0;
  $$02 = 0;
  $$03 = $$018;
  $$04$idx57$val78 = $$04$idx57$val79;
  $$04$idx58$val82 = $$04$idx58$val83;
  $$127 = $$026;
  $$424 = $$323;
  while (1) {
   if (($$424 + ($$03 << 3) | 0) >= ($$127 | 0)) {
    $$04$idx57$val77 = $$04$idx57$val78;
    $$04$idx58$val81 = $$04$idx58$val82;
    $$525 = $$424;
    break;
   }
   if (($$02 | 0) >= (HEAP32[$150 >> 2] | 0)) {
    $$04$idx57$val77 = $$04$idx57$val78;
    $$04$idx58$val81 = $$04$idx58$val82;
    $$525 = $$424;
    break;
   }
   $156 = _ec_dec_bit_logp($$04, $$03) | 0;
   $$04$idx55$val = HEAP32[$$04$idx51 >> 2] | 0;
   $$04$idx56$val = HEAP32[$$04$idx52 >> 2] | 0;
   $157 = _ec_tell_frac($$04$idx55$val, $$04$idx56$val) | 0;
   if (!$156) {
    $$04$idx57$val77 = $$04$idx55$val;
    $$04$idx58$val81 = $$04$idx56$val;
    $$525 = $157;
    break;
   }
   $$02 = $$02 + $149 | 0;
   $$03 = 1;
   $$04$idx57$val78 = $$04$idx55$val;
   $$04$idx58$val82 = $$04$idx56$val;
   $$127 = $$127 - $149 | 0;
   $$424 = $157;
  }
  HEAP32[$132 + ($$110 << 2) >> 2] = $$02;
  if (($$02 | 0) > 0) $$119 = ($$018 | 0) < 3 ? 2 : $$018 + -1 | 0; else $$119 = $$018;
  $$018 = $$119;
  $$026 = $$127;
  $$04$idx57$val79 = $$04$idx57$val77;
  $$04$idx58$val83 = $$04$idx58$val81;
  $$110 = $136;
  $$323 = $$525;
 }
 $165 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 if (($$323 + 48 | 0) > ($$026 | 0)) {
  $$04$idx57$val = $$04$idx57$val79;
  $$04$idx58$val = $$04$idx58$val83;
  $181 = 5;
 } else {
  $168 = _ec_dec_icdf($$04, 41650, 7) | 0;
  $$04$idx57$val = HEAP32[$$04$idx51 >> 2] | 0;
  $$04$idx58$val = HEAP32[$$04$idx52 >> 2] | 0;
  $181 = $168;
 }
 $171 = $133 - (_ec_tell_frac($$04$idx57$val, $$04$idx58$val) | 0) + -1 | 0;
 $172 = ($$03164 | 0) == 0;
 if ($$035 >>> 0 > 1 & ($172 ^ 1)) {
  $176 = ($171 | 0) < (($$035 << 3) + 16 | 0);
  $178 = $176 ? 0 : 8;
  $307 = $176 ^ 1;
 } else {
  $178 = 0;
  $307 = 0;
 }
 $179 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 $180 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($19 << 2) | 0) + 15 & -16) | 0;
 $182 = _clt_compute_allocation($17, $25, $27, $132, $131, $181, $10, $11, $171 - $178 | 0, $12, $179, $165, $180, $16, $$035, $$04, 0, 0, 0) | 0;
 _unquant_fine_energy($17, $25, $27, $35, $165, $$04, $16);
 $186 = 2048 - $52 + (($21 | 0) / 2 | 0) << 2;
 $$18 = 0;
 do {
  $188 = HEAP32[$8 + ($$18 << 2) >> 2] | 0;
  _memmove($188 | 0, $188 + ($52 << 2) | 0, $186 | 0) | 0;
  $$18 = $$18 + 1 | 0;
 } while (($$18 | 0) < ($14 | 0));
 $192 = Math_imul($16, $19) | 0;
 $193 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $192 | 0) + 15 & -16) | 0;
 $$alloca_mul19 = (Math_imul($16, $52) | 0) << 2;
 $195 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul19 | 0) + 15 & -16) | 0;
 $202 = $0 + 40 | 0;
 _quant_all_bands(0, $17, $25, $27, $195, ($16 | 0) == 2 ? $195 + ($52 << 2) | 0 : 0, $193, 0, $179, $$030, $$014, HEAP32[$11 >> 2] | 0, HEAP32[$10 >> 2] | 0, $126, $133 - $178 | 0, HEAP32[$12 >> 2] | 0, $$04, $$035, $182, $202, 0, HEAP32[$0 + 36 >> 2] | 0, HEAP32[$0 + 32 >> 2] | 0);
 if ($307) {
  $phitmp = (_ec_dec_bits($$04, 1) | 0) == 0;
  _unquant_energy_finalise($17, $25, $27, $35, $165, $180, $87 - (_ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0) | 0, $$04, $16);
  if (!$phitmp) _anti_collapse($17, $195, $193, $$035, $16, $52, $25, $27, $35, $37, $38, $179, HEAP32[$202 >> 2] | 0);
 } else _unquant_energy_finalise($17, $25, $27, $35, $165, $180, $87 - (_ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0) | 0, $$04, $16);
 L81 : do if ($$1660 | 0) {
  $$211 = 0;
  while (1) {
   if (($$211 | 0) >= ($192 | 0)) break L81;
   HEAPF32[$35 + ($$211 << 2) >> 2] = -28.0;
   $$211 = $$211 + 1 | 0;
  }
 } while (0);
 _celt_synthesis($17, $195, $9, $35, $25, $spec$select, $16, $14, $$03164, $$035, HEAP32[$28 >> 2] | 0, $$1660);
 $218 = $0 + 60 | 0;
 $219 = $0 + 64 | 0;
 $220 = $0 + 72 | 0;
 $221 = $0 + 68 | 0;
 $222 = $0 + 80 | 0;
 $223 = $0 + 76 | 0;
 $224 = $17 + 60 | 0;
 $$2 = 0;
 do {
  $225 = HEAP32[$218 >> 2] | 0;
  $spec$select110 = ($225 | 0) > 15 ? $225 : 15;
  HEAP32[$218 >> 2] = $spec$select110;
  $227 = HEAP32[$219 >> 2] | 0;
  $229 = ($227 | 0) > 15 ? $227 : 15;
  HEAP32[$219 >> 2] = $229;
  $231 = HEAP32[$9 + ($$2 << 2) >> 2] | 0;
  _comb_filter($231, $231, $229, $spec$select110, HEAP32[$40 >> 2] | 0, +HEAPF32[$220 >> 2], +HEAPF32[$221 >> 2], HEAP32[$222 >> 2] | 0, HEAP32[$223 >> 2] | 0, HEAP32[$224 >> 2] | 0, $21);
  if (!$115) {
   $238 = HEAP32[$40 >> 2] | 0;
   $239 = $231 + ($238 << 2) | 0;
   _comb_filter($239, $239, HEAP32[$218 >> 2] | 0, $245, $52 - $238 | 0, +HEAPF32[$221 >> 2], $$129, HEAP32[$223 >> 2] | 0, $246, HEAP32[$224 >> 2] | 0, $21);
  }
  $$2 = $$2 + 1 | 0;
 } while (($$2 | 0) < ($14 | 0));
 HEAP32[$219 >> 2] = HEAP32[$218 >> 2];
 HEAP32[$220 >> 2] = HEAP32[$221 >> 2];
 HEAP32[$222 >> 2] = HEAP32[$223 >> 2];
 HEAP32[$218 >> 2] = $245;
 HEAPF32[$221 >> 2] = $$129;
 HEAP32[$223 >> 2] = $246;
 if (!$115) {
  HEAP32[$219 >> 2] = $245;
  HEAPF32[$220 >> 2] = $$129;
  HEAP32[$222 >> 2] = $246;
 }
 if ($78) _memcpy($35 + ($19 << 2) | 0, $35 | 0, $19 << 2 | 0) | 0;
 L99 : do if ($172) {
  $254 = $19 << 3;
  _memcpy($38 | 0, $37 | 0, $254 | 0) | 0;
  _memcpy($37 | 0, $35 | 0, $254 | 0) | 0;
  $$01 = (HEAP32[$72 >> 2] | 0) < 10 ? +($48 | 0) * 1.0000000474974513e-03 : 1.0;
  $$312 = 0;
  while (1) {
   if (($$312 | 0) >= ($36 | 0)) break L99;
   $260 = $39 + ($$312 << 2) | 0;
   $262 = +HEAPF32[$260 >> 2] + $$01;
   $264 = +HEAPF32[$35 + ($$312 << 2) >> 2];
   HEAPF32[$260 >> 2] = $262 < $264 ? $262 : $264;
   $$312 = $$312 + 1 | 0;
  }
 } else {
  $$4 = 0;
  while (1) {
   if (($$4 | 0) >= ($36 | 0)) break L99;
   $268 = $37 + ($$4 << 2) | 0;
   $269 = +HEAPF32[$268 >> 2];
   $271 = +HEAPF32[$35 + ($$4 << 2) >> 2];
   HEAPF32[$268 >> 2] = $269 < $271 ? $269 : $271;
   $$4 = $$4 + 1 | 0;
  }
 } while (0);
 $$5 = 0;
 while (1) {
  if (($$5 | 0) >= ($25 | 0)) break;
  HEAPF32[$35 + ($$5 << 2) >> 2] = 0.0;
  HEAPF32[$38 + ($$5 << 2) >> 2] = -28.0;
  HEAPF32[$37 + ($$5 << 2) >> 2] = -28.0;
  $$5 = $$5 + 1 | 0;
 }
 $$6 = $27;
 while (1) {
  if (($$6 | 0) >= ($19 | 0)) break;
  HEAPF32[$35 + ($$6 << 2) >> 2] = 0.0;
  HEAPF32[$38 + ($$6 << 2) >> 2] = -28.0;
  HEAPF32[$37 + ($$6 << 2) >> 2] = -28.0;
  $$6 = $$6 + 1 | 0;
 }
 $$5$1 = 0;
 while (1) {
  if (($$5$1 | 0) >= ($25 | 0)) break;
  $302 = $19 + $$5$1 | 0;
  HEAPF32[$35 + ($302 << 2) >> 2] = 0.0;
  HEAPF32[$38 + ($302 << 2) >> 2] = -28.0;
  HEAPF32[$37 + ($302 << 2) >> 2] = -28.0;
  $$5$1 = $$5$1 + 1 | 0;
 }
 $$6$1 = $27;
 while (1) {
  if (($$6$1 | 0) >= ($19 | 0)) break;
  $297 = $19 + $$6$1 | 0;
  HEAPF32[$35 + ($297 << 2) >> 2] = 0.0;
  HEAPF32[$38 + ($297 << 2) >> 2] = -28.0;
  HEAPF32[$37 + ($297 << 2) >> 2] = -28.0;
  $$6$1 = $$6$1 + 1 | 0;
 }
 HEAP32[$202 >> 2] = HEAP32[$$04$idx52 >> 2];
 _deemphasis($9, $3, $52, $14, HEAP32[$28 >> 2] | 0, $17 + 16 | 0, $0 + 84 | 0, $6);
 HEAP32[$72 >> 2] = 0;
 if ((_ec_tell_40(HEAP32[$$04$idx51 >> 2] | 0, HEAP32[$$04$idx52 >> 2] | 0) | 0) > ($87 | 0)) $$0 = -3; else {
  if (_ec_get_error_44(HEAP32[$$04 + 44 >> 2] | 0) | 0) HEAP32[$0 + 44 >> 2] = 1;
  $$0 = ($30 | 0) / (HEAP32[$28 >> 2] | 0) | 0;
 }
 _llvm_stackrestore($125 | 0);
 $$1 = $$0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _quant_all_bands($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$016 = 0, $$017 = 0, $$019 = 0, $$02 = 0, $$023 = 0, $$02531 = 0, $$026 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$11537 = 0, $$118 = 0, $$120 = 0, $$16 = 0, $$2 = 0, $$210 = 0, $$322 = 0, $$5 = 0, $$alloca_mul = 0, $$idx = 0, $$idx28 = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx42 = 0, $$sroa$3$0$copyload = 0, $$sroa$4 = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$448$0$$sroa_idx49 = 0, $$sroa$448$0$copyload = 0, $$sroa$5 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $111 = 0, $114 = 0, $117 = 0, $119 = 0, $122 = 0, $123 = 0, $139 = 0, $141 = 0, $143 = 0, $151 = 0, $154 = 0, $155 = 0, $162 = 0, $163 = 0, $170 = 0, $174 = 0, $180 = 0, $185 = 0, $191 = 0, $198 = 0, $199 = 0, $201 = 0, $208 = 0, $215 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $234 = 0, $235 = 0, $236 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $242 = 0.0, $248 = 0, $249 = 0, $25 = 0, $256 = 0, $257 = 0, $258 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $27 = 0, $279 = 0, $28 = 0, $280 = 0, $289 = 0, $29 = 0, $290 = 0, $292 = 0, $299 = 0, $30 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $phitmp = 0, $spec$select = 0, $spec$select60 = 0, $spec$select61 = 0, $spec$select71 = 0, $spec$select72 = 0, $spec$select7387 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568 | 0;
 $23 = sp + 1496 | 0;
 $$sroa$4 = sp + 1304 | 0;
 $$sroa$5 = sp + 1280 | 0;
 $24 = sp + 1448 | 0;
 $25 = sp + 1388 | 0;
 $26 = sp + 1328 | 0;
 $27 = sp;
 $28 = sp + 1320 | 0;
 $29 = $1 + 32 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = ($5 | 0) == 0;
 $32 = $31 ? 1 : 2;
 $33 = ($0 | 0) == 0;
 if ($33 | $31) {
  $55 = $33 & 1;
  $90 = 0;
 } else if (!$11) {
  $phitmp = ($20 | 0) > 7 & 1;
  $55 = $phitmp;
  $90 = $phitmp;
 } else {
  $55 = 0;
  $90 = 0;
 }
 $36 = 1 << $17;
 $spec$select = ($9 | 0) == 0 ? 1 : $36;
 $38 = $30 + ($2 << 1) | 0;
 $41 = HEAP16[$38 >> 1] << $17;
 $42 = $1 + 8 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $47 = HEAP16[$30 + ($43 + -1 << 1) >> 1] | 0;
 $48 = $47 << $17;
 $$alloca_mul = (Math_imul($32, $48 - $41 | 0) | 0) << 2;
 $51 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 $53 = 0 - $41 | 0;
 $54 = $51 + ($48 << 2) + ($53 << 2) | 0;
 if ($33 | ($55 | 0) == 0) {
  $$019 = $4 + ($48 << 2) | 0;
  $$02531 = 1;
 } else {
  $61 = (HEAP16[$30 + ($43 << 1) >> 1] | 0) - $47 << $17;
  $62 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($61 << 2) | 0) + 15 & -16) | 0;
  $$019 = $62;
  $$02531 = $61;
 }
 $64 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$02531 << 2) | 0) + 15 & -16) | 0;
 $65 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$02531 << 2) | 0) + 15 & -16) | 0;
 $66 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$02531 << 2) | 0) + 15 & -16) | 0;
 $67 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$02531 << 2) | 0) + 15 & -16) | 0;
 $68 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$02531 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$23 + 36 >> 2] = $7;
 HEAP32[$23 + 28 >> 2] = $16;
 HEAP32[$23 >> 2] = $0;
 HEAP32[$23 + 16 >> 2] = $12;
 HEAP32[$23 + 8 >> 2] = $1;
 $74 = $23 + 40 | 0;
 HEAP32[$74 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$23 + 20 >> 2] = $10;
 HEAP32[$23 + 44 >> 2] = $21;
 HEAP32[$23 + 52 >> 2] = $22;
 HEAP32[$23 + 4 >> 2] = $55;
 $79 = $23 + 48 | 0;
 HEAP32[$79 >> 2] = 0;
 $80 = ($spec$select | 0) > 1;
 $82 = $23 + 56 | 0;
 HEAP32[$82 >> 2] = $80 & 1;
 $83 = $23 + 12 | 0;
 $84 = $3 + -1 | 0;
 $$idx = $16 + 20 | 0;
 $$idx28 = $16 + 28 | 0;
 $85 = $23 + 32 | 0;
 $86 = ($55 | 0) == 0;
 $87 = $2 + 1 | 0;
 $88 = $23 + 24 | 0;
 $89 = $1 + 12 | 0;
 $91 = ($90 | 0) == 0;
 $93 = (1 << $spec$select) + -1 | 0;
 $94 = ($10 | 0) != 3;
 $$sroa$3$0$$sroa_idx42 = $16 + 4 | 0;
 $$sroa$4$0$$sroa_idx = $16 + 8 | 0;
 $$sroa$448$0$$sroa_idx49 = $16 + 24 | 0;
 $95 = $28 + 4 | 0;
 $$014 = $11;
 $$016 = 1;
 $$017 = 0;
 $$023 = $15;
 $$026 = $2;
 $$120 = $$019;
 while (1) {
  if (($$026 | 0) >= ($3 | 0)) {
   label = 61;
   break;
  }
  HEAP32[$83 >> 2] = $$026;
  $97 = ($$026 | 0) == ($84 | 0);
  $98 = $30 + ($$026 << 1) | 0;
  $101 = HEAP16[$98 >> 1] << $17;
  $102 = $4 + ($101 << 2) | 0;
  $spec$select60 = $31 ? 0 : $5 + ($101 << 2) | 0;
  $104 = $$026 + 1 | 0;
  $109 = (HEAP16[$30 + ($104 << 1) >> 1] << $17) - $101 | 0;
  if (($109 | 0) <= 0) {
   label = 10;
   break;
  }
  $111 = _ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx28 >> 2] | 0) | 0;
  $spec$select61 = $$023 - (($$026 | 0) == ($2 | 0) ? 0 : $111) | 0;
  $114 = $14 - $111 | 0;
  HEAP32[$85 >> 2] = $114 + -1;
  if (($$026 | 0) < ($18 | 0)) {
   $117 = $18 - $$026 | 0;
   $119 = _celt_sudiv($spec$select61, ($117 | 0) < 3 ? $117 : 3) | 0;
   $122 = (HEAP32[$8 + ($$026 << 2) >> 2] | 0) + $119 | 0;
   $123 = ($114 | 0) < ($122 | 0);
   if ((($123 ? $114 : $122) | 0) < 16384 & (($123 ? $114 : $122) | 0) < 0) $$013 = 0; else $$013 = (($123 ? $114 : $122) | 0) > 16383 ? 16383 : $123 ? $114 : $122;
  } else $$013 = 0;
  if ($86) $$118 = $$017; else if (($$026 | 0) == ($87 | 0) ? 1 : ((HEAP16[$98 >> 1] << $17) - $109 | 0) >= (HEAP16[$38 >> 1] << $17 | 0)) $$118 = ($$016 | 0) != 0 | ($$017 | 0) == 0 ? $$026 : $$017; else $$118 = $$017;
  $139 = ($$026 | 0) == ($87 | 0);
  if ($139) _special_hybrid_folding(HEAP32[$29 >> 2] | 0, $51, $54, $2, $36, $$014);
  $141 = HEAP32[$13 + ($$026 << 2) >> 2] | 0;
  HEAP32[$88 >> 2] = $141;
  $143 = ($$026 | 0) < (HEAP32[$89 >> 2] | 0);
  $$011 = $143 ? $102 : $51;
  $$210 = $143 ? $spec$select60 : $31 ? 0 : $51;
  $$322 = $97 & $91 ? 0 : $143 ? $$120 : 0;
  if (!$$118) {
   $$012 = -1;
   $$1 = $93;
   $$16 = $93;
  } else if ($94 | $80 | ($141 | 0) < 0) {
   $151 = (HEAP16[$30 + ($$118 << 1) >> 1] << $17) - $41 | 0;
   $spec$select71 = ($151 | 0) < ($109 | 0) ? 0 : $151 - $109 | 0;
   $154 = $spec$select71 + $41 | 0;
   $$03 = $$118;
   while (1) {
    $155 = $$03 + -1 | 0;
    if ((HEAP16[$30 + ($155 << 1) >> 1] << $17 | 0) <= ($154 | 0)) break;
    $$03 = $155;
   }
   $162 = $154 + $109 | 0;
   $$02 = $$118 + -1 | 0;
   while (1) {
    $163 = $$02 + 1 | 0;
    if (($163 | 0) >= ($$026 | 0)) break;
    if ((HEAP16[$30 + ($163 << 1) >> 1] << $17 | 0) >= ($162 | 0)) break;
    $$02 = $163;
   }
   $$01 = $155;
   $$04 = 0;
   $$05 = 0;
   while (1) {
    $170 = Math_imul($$01, $32) | 0;
    $174 = $$05 | HEAPU8[$6 + $170 >> 0];
    $180 = $$04 | HEAPU8[$6 + ($170 + $32 + -1) >> 0];
    if (($$01 | 0) < ($$02 | 0)) {
     $$01 = $$01 + 1 | 0;
     $$04 = $180;
     $$05 = $174;
    } else {
     $$012 = $spec$select71;
     $$1 = $180;
     $$16 = $174;
     break;
    }
   }
  } else {
   $$012 = -1;
   $$1 = $93;
   $$16 = $93;
  }
  L39 : do if (!$$014) label = 40; else if (($$026 | 0) == ($12 | 0)) {
   if ($86) {
    label = 40;
    break;
   }
   $185 = $30 + ($12 << 1) | 0;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) >= ((HEAP16[$185 >> 1] << $17) - $41 | 0)) {
     label = 40;
     break L39;
    }
    $191 = $51 + ($$0 << 2) | 0;
    HEAPF32[$191 >> 2] = (+HEAPF32[$191 >> 2] + +HEAPF32[$54 + ($$0 << 2) >> 2]) * .5;
    $$0 = $$0 + 1 | 0;
   }
  } else {
   $198 = ($$013 | 0) / 2 | 0;
   $199 = ($$012 | 0) == -1;
   $spec$select72 = $199 ? 0 : $51 + ($$012 << 2) | 0;
   if ($97) {
    $201 = _quant_band($23, $$011, $109, $198, $spec$select, $spec$select72, $17, 0, 1.0, $$322, $$16) | 0;
    $215 = 0;
    $306 = $201;
    $spec$select7387 = $199 ? 0 : $54 + ($$012 << 2) | 0;
   } else {
    $208 = _quant_band($23, $$011, $109, $198, $spec$select, $spec$select72, $17, $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0, 1.0, $$322, $$16) | 0;
    $215 = $54 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0;
    $306 = $208;
    $spec$select7387 = $199 ? 0 : $54 + ($$012 << 2) | 0;
   }
   $$11537 = $$014;
   $$2 = _quant_band($23, $$210, $109, $198, $spec$select, $spec$select7387, $17, $215, 1.0, $$322, $$1) | 0;
   $$5 = $306;
   break;
  } while (0);
  do if ((label | 0) == 40) {
   label = 0;
   if (!$$210) {
    if ($97) $289 = 0; else $289 = $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0;
    $290 = _quant_band($23, $$011, $109, $$013, $spec$select, ($$012 | 0) == -1 ? 0 : $51 + ($$012 << 2) | 0, $17, $289, 1.0, $$322, $$16 | $$1) | 0;
    $$11537 = 0;
    $$2 = $290;
    $$5 = $290;
    break;
   }
   if (!(($$026 | 0) < ($12 | 0) & ($91 ^ 1))) {
    HEAP32[$79 >> 2] = 0;
    if ($97) $279 = 0; else $279 = $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0;
    $280 = _quant_band_stereo($23, $$011, $$210, $109, $$013, $spec$select, ($$012 | 0) == -1 ? 0 : $51 + ($$012 << 2) | 0, $17, $279, $$322, $$16 | $$1) | 0;
    $$11537 = 0;
    $$2 = $280;
    $$5 = $280;
    break;
   }
   _compute_channel_weights(+HEAPF32[$7 + ($$026 << 2) >> 2], +HEAPF32[$7 + ($$026 + (HEAP32[$42 >> 2] | 0) << 2) >> 2], $28);
   $225 = $$16 | $$1;
   $$sroa$0$0$copyload = HEAP32[$16 >> 2] | 0;
   $$sroa$3$0$copyload = HEAP32[$$sroa$3$0$$sroa_idx42 >> 2] | 0;
   HEAP32[$$sroa$4 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx >> 2];
   HEAP32[$$sroa$4 + 4 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 4 >> 2];
   HEAP32[$$sroa$4 + 8 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 8 >> 2];
   HEAP32[$$sroa$4 + 12 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx + 12 >> 2];
   $$sroa$448$0$copyload = HEAP32[$$sroa$448$0$$sroa_idx49 >> 2] | 0;
   HEAP32[$$sroa$5 >> 2] = HEAP32[$$idx28 >> 2];
   HEAP32[$$sroa$5 + 4 >> 2] = HEAP32[$$idx28 + 4 >> 2];
   HEAP32[$$sroa$5 + 8 >> 2] = HEAP32[$$idx28 + 8 >> 2];
   HEAP32[$$sroa$5 + 12 >> 2] = HEAP32[$$idx28 + 12 >> 2];
   HEAP32[$$sroa$5 + 16 >> 2] = HEAP32[$$idx28 + 16 >> 2];
   dest = $25;
   src = $23;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $226 = $109 << 2;
   _memcpy($64 | 0, $$011 | 0, $226 | 0) | 0;
   _memcpy($65 | 0, $$210 | 0, $226 | 0) | 0;
   HEAP32[$79 >> 2] = -1;
   $227 = ($$012 | 0) == -1;
   if ($97) $234 = 0; else $234 = $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0;
   $235 = _quant_band_stereo($23, $$011, $$210, $109, $$013, $spec$select, $227 ? 0 : $51 + ($$012 << 2) | 0, $17, $234, $$322, $225) | 0;
   $236 = +HEAPF32[$28 >> 2];
   $238 = $236 * +_celt_inner_prod_c($64, $$011, $109);
   $239 = +HEAPF32[$95 >> 2];
   $242 = $238 + $239 * +_celt_inner_prod_c($65, $$210, $109);
   dest = $24;
   src = $16;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $26;
   src = $23;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($66 | 0, $$011 | 0, $226 | 0) | 0;
   _memcpy($67 | 0, $$210 | 0, $226 | 0) | 0;
   if (!$97) _memcpy($68 | 0, $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0, $226 | 0) | 0;
   $248 = $$sroa$0$0$copyload + $$sroa$448$0$copyload | 0;
   $249 = $$sroa$3$0$copyload - $$sroa$448$0$copyload | 0;
   _memcpy($27 | 0, $248 | 0, $249 | 0) | 0;
   HEAP32[$16 >> 2] = $$sroa$0$0$copyload;
   HEAP32[$$sroa$3$0$$sroa_idx42 >> 2] = $$sroa$3$0$copyload;
   HEAP32[$$sroa$4$0$$sroa_idx >> 2] = HEAP32[$$sroa$4 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 4 >> 2] = HEAP32[$$sroa$4 + 4 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 8 >> 2] = HEAP32[$$sroa$4 + 8 >> 2];
   HEAP32[$$sroa$4$0$$sroa_idx + 12 >> 2] = HEAP32[$$sroa$4 + 12 >> 2];
   HEAP32[$$sroa$448$0$$sroa_idx49 >> 2] = $$sroa$448$0$copyload;
   HEAP32[$$idx28 >> 2] = HEAP32[$$sroa$5 >> 2];
   HEAP32[$$idx28 + 4 >> 2] = HEAP32[$$sroa$5 + 4 >> 2];
   HEAP32[$$idx28 + 8 >> 2] = HEAP32[$$sroa$5 + 8 >> 2];
   HEAP32[$$idx28 + 12 >> 2] = HEAP32[$$sroa$5 + 12 >> 2];
   HEAP32[$$idx28 + 16 >> 2] = HEAP32[$$sroa$5 + 16 >> 2];
   dest = $23;
   src = $25;
   stop = dest + 60 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _memcpy($$011 | 0, $64 | 0, $226 | 0) | 0;
   _memcpy($$210 | 0, $65 | 0, $226 | 0) | 0;
   if ($139) _special_hybrid_folding(HEAP32[$29 >> 2] | 0, $51, $54, $2, $36, 0);
   HEAP32[$79 >> 2] = 1;
   if ($97) $256 = 0; else $256 = $51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0;
   $257 = _quant_band_stereo($23, $$011, $$210, $109, $$013, $spec$select, $227 ? 0 : $51 + ($$012 << 2) | 0, $17, $256, $$322, $225) | 0;
   $258 = +HEAPF32[$28 >> 2];
   $260 = $258 * +_celt_inner_prod_c($64, $$011, $109);
   $261 = +HEAPF32[$95 >> 2];
   if (!($242 >= $260 + $261 * +_celt_inner_prod_c($65, $$210, $109))) {
    $$11537 = 0;
    $$2 = $257;
    $$5 = $257;
   } else {
    dest = $16;
    src = $24;
    stop = dest + 48 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $23;
    src = $26;
    stop = dest + 60 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _memcpy($$011 | 0, $66 | 0, $226 | 0) | 0;
    _memcpy($$210 | 0, $67 | 0, $226 | 0) | 0;
    if (!$97) _memcpy($51 + (HEAP16[$98 >> 1] << $17 << 2) + ($53 << 2) | 0, $68 | 0, $226 | 0) | 0;
    _memcpy($248 | 0, $27 | 0, $249 | 0) | 0;
    $$11537 = 0;
    $$2 = $235;
    $$5 = $235;
   }
  } while (0);
  $292 = Math_imul($$026, $32) | 0;
  HEAP8[$6 + $292 >> 0] = $$5;
  HEAP8[$6 + ($292 + $32 + -1) >> 0] = $$2;
  $299 = HEAP32[$8 + ($$026 << 2) >> 2] | 0;
  HEAP32[$82 >> 2] = 0;
  $$014 = $$11537;
  $$016 = ($$013 | 0) > ($109 << 3 | 0) & 1;
  $$017 = $$118;
  $$023 = $spec$select61 + ($299 + $111) | 0;
  $$026 = $104;
  $$120 = $$322;
 }
 if ((label | 0) == 10) _celt_fatal(40303, 40213, 1495); else if ((label | 0) == 61) {
  HEAP32[$19 >> 2] = HEAP32[$74 >> 2];
  STACKTOP = sp;
  return;
 }
}

function _silk_decode_core($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$010 = 0, $$015 = 0, $$016 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$09 = 0, $$1 = 0, $$10$sroa_idx29 = 0, $$111 = 0, $$12$sroa_idx31 = 0, $$14$sroa_idx = 0, $$16$sroa_idx35 = 0, $$18$sroa_idx = 0, $$2 = 0, $$2$sroa_idx21 = 0, $$20$sroa_idx = 0, $$212 = 0, $$22$sroa_idx41 = 0, $$24$sroa_idx = 0, $$26$sroa_idx = 0, $$28$sroa_idx = 0, $$3 = 0, $$30$sroa_idx = 0, $$4 = 0, $$4$sroa_idx23 = 0, $$5 = 0, $$6$sroa_idx25 = 0, $$8$sroa_idx27 = 0, $$pre56 = 0, $102 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $144 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $184 = 0, $190 = 0, $192 = 0, $195 = 0, $201 = 0, $203 = 0, $206 = 0, $212 = 0, $214 = 0, $217 = 0, $223 = 0, $225 = 0, $228 = 0, $234 = 0, $238 = 0, $245 = 0, $248 = 0, $249 = 0, $251 = 0, $255 = 0, $257 = 0, $263 = 0, $266 = 0, $268 = 0, $274 = 0, $277 = 0, $279 = 0, $285 = 0, $288 = 0, $29 = 0, $290 = 0, $296 = 0, $299 = 0, $301 = 0, $307 = 0, $310 = 0, $312 = 0, $318 = 0, $321 = 0, $323 = 0, $329 = 0, $33 = 0, $332 = 0, $334 = 0, $340 = 0, $343 = 0, $345 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $362 = 0, $367 = 0, $369 = 0, $37 = 0, $375 = 0, $378 = 0, $38 = 0, $380 = 0, $386 = 0, $389 = 0, $39 = 0, $391 = 0, $397 = 0, $4 = 0, $400 = 0, $402 = 0, $408 = 0, $41 = 0, $411 = 0, $413 = 0, $419 = 0, $42 = 0, $421 = 0, $423 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $451 = 0, $459 = 0, $46 = 0, $466 = 0, $47 = 0, $48 = 0, $5 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp;
 $5 = $0 + 2336 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 << 1) | 0) + 15 & -16) | 0;
 $8 = $0 + 2328 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 + $9 << 2) | 0) + 15 & -16) | 0;
 $12 = $0 + 2332 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($13 << 2) | 0) + 15 & -16) | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($13 + 16 << 2) | 0) + 15 & -16) | 0;
 $17 = $0 + 2765 | 0;
 $29 = (HEAP8[$0 + 2767 >> 0] | 0) > 3;
 $33 = HEAP16[40156 + (HEAP8[$17 >> 0] >> 1 << 2) + (HEAP8[$0 + 2766 >> 0] << 1) >> 1] << 4;
 $$03 = HEAP8[$0 + 2770 >> 0] | 0;
 $$05 = 0;
 $35 = $9;
 while (1) {
  if (($$05 | 0) >= ($35 | 0)) break;
  $37 = (Math_imul($$03, 196314165) | 0) + 907633515 | 0;
  $38 = $3 + ($$05 << 1) | 0;
  $39 = HEAP16[$38 >> 1] | 0;
  $41 = $39 << 16 >> 16 << 14;
  $42 = $0 + 4 + ($$05 << 2) | 0;
  HEAP32[$42 >> 2] = $41;
  if ($39 << 16 >> 16 > 0) {
   $44 = $41 + -1280 | 0;
   HEAP32[$42 >> 2] = $44;
   $48 = $44;
  } else if ($39 << 16 >> 16 < 0) {
   $46 = $41 | 1280;
   HEAP32[$42 >> 2] = $46;
   $48 = $46;
  } else $48 = $41;
  $47 = $48 + $33 | 0;
  HEAP32[$42 >> 2] = ($37 | 0) < 0 ? 0 - $47 | 0 : $47;
  $$03 = $37 + (HEAP16[$38 >> 1] | 0) | 0;
  $$05 = $$05 + 1 | 0;
  $35 = HEAP32[$8 >> 2] | 0;
 }
 $55 = $0 + 1284 | 0;
 dest = $16;
 src = $55;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $58 = $0 + 2324 | 0;
 $59 = $0 + 2340 | 0;
 $60 = $0 + 4160 | 0;
 $$2$sroa_idx21 = $4 + 2 | 0;
 $$4$sroa_idx23 = $4 + 4 | 0;
 $$6$sroa_idx25 = $4 + 6 | 0;
 $$8$sroa_idx27 = $4 + 8 | 0;
 $$10$sroa_idx29 = $4 + 10 | 0;
 $$12$sroa_idx31 = $4 + 12 | 0;
 $$14$sroa_idx = $4 + 14 | 0;
 $$16$sroa_idx35 = $4 + 16 | 0;
 $$18$sroa_idx = $4 + 18 | 0;
 $$20$sroa_idx = $4 + 20 | 0;
 $$22$sroa_idx41 = $4 + 22 | 0;
 $$24$sroa_idx = $4 + 24 | 0;
 $$26$sroa_idx = $4 + 26 | 0;
 $$28$sroa_idx = $4 + 28 | 0;
 $$30$sroa_idx = $4 + 30 | 0;
 $61 = $0 + 4164 | 0;
 $62 = $0 + 2308 | 0;
 $63 = $1 + 136 | 0;
 $$01 = $0 + 4 | 0;
 $$010 = HEAP32[$5 >> 2] | 0;
 $$016 = $2;
 $$06 = 0;
 L10 : while (1) {
  if (($$06 | 0) >= (HEAP32[$58 >> 2] | 0)) {
   label = 52;
   break;
  }
  $67 = $1 + 32 + ($$06 >>> 1 << 5) | 0;
  _memcpy($4 | 0, $67 | 0, HEAP32[$59 >> 2] << 1 | 0) | 0;
  $71 = $1 + 96 + ($$06 * 5 << 1) | 0;
  $72 = HEAP8[$17 >> 0] | 0;
  $74 = HEAP32[$1 + 16 + ($$06 << 2) >> 2] | 0;
  $75 = $74 >>> 6;
  $76 = _silk_INVERSE32_varQ($74) | 0;
  $77 = HEAP32[$0 >> 2] | 0;
  L13 : do if (($74 | 0) == ($77 | 0)) $$04 = 65536; else {
   $79 = _silk_DIV32_varQ($77, $74) | 0;
   $80 = $79 >> 16;
   $81 = $79 & 65535;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 16) {
     $$04 = $79;
     break L13;
    }
    $82 = $16 + ($$1 << 2) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $83 << 16 >> 16;
    HEAP32[$82 >> 2] = (Math_imul($80, $84) | 0) + ((Math_imul($81, $84) | 0) >> 16) + (Math_imul($79, ($83 >> 15) + 1 >> 1) | 0);
    $$1 = $$1 + 1 | 0;
   }
  } while (0);
  HEAP32[$0 >> 2] = $74;
  if (!(HEAP32[$60 >> 2] | 0)) label = 17; else if ($72 << 24 >> 24 != 2 & (HEAP32[$61 >> 2] | 0) == 2 & $$06 >>> 0 < 2) {
   HEAP16[$71 >> 1] = 0;
   HEAP16[$71 + 2 >> 1] = 0;
   HEAP16[$71 + 4 >> 1] = 0;
   HEAP16[$71 + 6 >> 1] = 0;
   HEAP16[$71 + 8 >> 1] = 0;
   HEAP16[$71 + 4 >> 1] = 4096;
   $102 = HEAP32[$62 >> 2] | 0;
   HEAP32[$1 + ($$06 << 2) >> 2] = $102;
   $109 = $102;
   label = 19;
  } else label = 17;
  if ((label | 0) == 17) {
   label = 0;
   if ($72 << 24 >> 24 == 2) {
    $109 = HEAP32[$1 + ($$06 << 2) >> 2] | 0;
    label = 19;
   } else {
    $$0 = $$01;
    $$212 = $$010;
   }
  }
  L25 : do if ((label | 0) == 19) {
   label = 0;
   $105 = ($$06 | 0) == 0;
   L27 : do if (($105 ^ 1) & (($$06 | 0) != 2 | $29)) {
    if (($$04 | 0) != 65536) {
     $154 = $109 + 2 | 0;
     $155 = $$04 >> 16;
     $156 = $$04 & 65535;
     $$3 = 0;
     while (1) {
      if (($$3 | 0) >= ($154 | 0)) break L27;
      $160 = $11 + ($$010 - $$3 + -1 << 2) | 0;
      $161 = HEAP32[$160 >> 2] | 0;
      $162 = $161 << 16 >> 16;
      HEAP32[$160 >> 2] = (Math_imul($155, $162) | 0) + ((Math_imul($156, $162) | 0) >> 16) + (Math_imul($$04, ($161 >> 15) + 1 >> 1) | 0);
      $$3 = $$3 + 1 | 0;
     }
    }
   } else {
    $107 = HEAP32[$5 >> 2] | 0;
    $110 = HEAP32[$59 >> 2] | 0;
    $111 = $107 - $109 - $110 | 0;
    $112 = $111 + -2 | 0;
    if (($111 | 0) <= 2) {
     label = 21;
     break L10;
    }
    if (($$06 | 0) == 2) {
     _memcpy($0 + 1348 + ($107 << 1) | 0, $2 | 0, HEAP32[$12 >> 2] << 2 | 0) | 0;
     $124 = HEAP32[$5 >> 2] | 0;
     $125 = HEAP32[$59 >> 2] | 0;
    } else {
     $124 = $107;
     $125 = $110;
    }
    _silk_LPC_analysis_filter($7 + ($112 << 1) | 0, $0 + 1348 + ($112 + (Math_imul($$06, HEAP32[$12 >> 2] | 0) | 0) << 1) | 0, $67, $124 - $112 | 0, $125);
    if ($105) {
     $128 = HEAP32[$63 >> 2] << 16 >> 16;
     $$09 = (Math_imul($76 >> 16, $128) | 0) + ((Math_imul($76 & 65535, $128) | 0) >> 16) << 2;
    } else $$09 = $76;
    $135 = $109 + 2 | 0;
    $136 = $$09 >> 16;
    $137 = $$09 & 65535;
    $$2 = 0;
    while (1) {
     if (($$2 | 0) >= ($135 | 0)) break L27;
     $144 = HEAP16[$7 + ((HEAP32[$5 >> 2] | 0) - $$2 + -1 << 1) >> 1] | 0;
     HEAP32[$11 + ($$010 - $$2 + -1 << 2) >> 2] = (Math_imul($136, $144) | 0) + ((Math_imul($137, $144) | 0) >> 16);
     $$2 = $$2 + 1 | 0;
    }
   } while (0);
   $176 = $71 + 2 | 0;
   $177 = $71 + 4 | 0;
   $178 = $71 + 6 | 0;
   $179 = $71 + 8 | 0;
   $$pre56 = HEAP32[$12 >> 2] | 0;
   $$02 = $11 + ($$010 - $109 + 2 << 2) | 0;
   $$111 = $$010;
   $$4 = 0;
   while (1) {
    if (($$4 | 0) >= ($$pre56 | 0)) {
     $$0 = $14;
     $$212 = $$111;
     break L25;
    }
    $181 = HEAP32[$$02 >> 2] | 0;
    $184 = HEAP16[$71 >> 1] | 0;
    $190 = (Math_imul($181 >> 16, $184) | 0) + ((Math_imul($181 & 65535, $184) | 0) >> 16) + 2 | 0;
    $192 = HEAP32[$$02 + -4 >> 2] | 0;
    $195 = HEAP16[$176 >> 1] | 0;
    $201 = $190 + ((Math_imul($192 >> 16, $195) | 0) + ((Math_imul($192 & 65535, $195) | 0) >> 16)) | 0;
    $203 = HEAP32[$$02 + -8 >> 2] | 0;
    $206 = HEAP16[$177 >> 1] | 0;
    $212 = $201 + ((Math_imul($203 >> 16, $206) | 0) + ((Math_imul($203 & 65535, $206) | 0) >> 16)) | 0;
    $214 = HEAP32[$$02 + -12 >> 2] | 0;
    $217 = HEAP16[$178 >> 1] | 0;
    $223 = $212 + ((Math_imul($214 >> 16, $217) | 0) + ((Math_imul($214 & 65535, $217) | 0) >> 16)) | 0;
    $225 = HEAP32[$$02 + -16 >> 2] | 0;
    $228 = HEAP16[$179 >> 1] | 0;
    $234 = $223 + ((Math_imul($225 >> 16, $228) | 0) + ((Math_imul($225 & 65535, $228) | 0) >> 16)) | 0;
    $238 = (HEAP32[$$01 + ($$4 << 2) >> 2] | 0) + ($234 << 1) | 0;
    HEAP32[$14 + ($$4 << 2) >> 2] = $238;
    HEAP32[$11 + ($$111 << 2) >> 2] = $238 << 1;
    $$02 = $$02 + 4 | 0;
    $$111 = $$111 + 1 | 0;
    $$4 = $$4 + 1 | 0;
   }
  } while (0);
  $245 = $75 << 16 >> 16;
  $248 = ($74 >> 21) + 1 >> 1;
  $$5 = 0;
  while (1) {
   $249 = HEAP32[$12 >> 2] | 0;
   if (($$5 | 0) >= ($249 | 0)) break;
   $251 = HEAP32[$59 >> 2] | 0;
   switch ($251 | 0) {
   case 16:
   case 10:
    break;
   default:
    {
     label = 39;
     break L10;
    }
   }
   $255 = HEAP32[$16 + ($$5 + 15 << 2) >> 2] | 0;
   $257 = HEAP16[$4 >> 1] | 0;
   $263 = ($251 >> 1) + ((Math_imul($255 >> 16, $257) | 0) + ((Math_imul($255 & 65535, $257) | 0) >> 16)) | 0;
   $266 = HEAP32[$16 + ($$5 + 14 << 2) >> 2] | 0;
   $268 = HEAP16[$$2$sroa_idx21 >> 1] | 0;
   $274 = $263 + ((Math_imul($266 >> 16, $268) | 0) + ((Math_imul($266 & 65535, $268) | 0) >> 16)) | 0;
   $277 = HEAP32[$16 + ($$5 + 13 << 2) >> 2] | 0;
   $279 = HEAP16[$$4$sroa_idx23 >> 1] | 0;
   $285 = $274 + ((Math_imul($277 >> 16, $279) | 0) + ((Math_imul($277 & 65535, $279) | 0) >> 16)) | 0;
   $288 = HEAP32[$16 + ($$5 + 12 << 2) >> 2] | 0;
   $290 = HEAP16[$$6$sroa_idx25 >> 1] | 0;
   $296 = $285 + ((Math_imul($288 >> 16, $290) | 0) + ((Math_imul($288 & 65535, $290) | 0) >> 16)) | 0;
   $299 = HEAP32[$16 + ($$5 + 11 << 2) >> 2] | 0;
   $301 = HEAP16[$$8$sroa_idx27 >> 1] | 0;
   $307 = $296 + ((Math_imul($299 >> 16, $301) | 0) + ((Math_imul($299 & 65535, $301) | 0) >> 16)) | 0;
   $310 = HEAP32[$16 + ($$5 + 10 << 2) >> 2] | 0;
   $312 = HEAP16[$$10$sroa_idx29 >> 1] | 0;
   $318 = $307 + ((Math_imul($310 >> 16, $312) | 0) + ((Math_imul($310 & 65535, $312) | 0) >> 16)) | 0;
   $321 = HEAP32[$16 + ($$5 + 9 << 2) >> 2] | 0;
   $323 = HEAP16[$$12$sroa_idx31 >> 1] | 0;
   $329 = $318 + ((Math_imul($321 >> 16, $323) | 0) + ((Math_imul($321 & 65535, $323) | 0) >> 16)) | 0;
   $332 = HEAP32[$16 + ($$5 + 8 << 2) >> 2] | 0;
   $334 = HEAP16[$$14$sroa_idx >> 1] | 0;
   $340 = $329 + ((Math_imul($332 >> 16, $334) | 0) + ((Math_imul($332 & 65535, $334) | 0) >> 16)) | 0;
   $343 = HEAP32[$16 + ($$5 + 7 << 2) >> 2] | 0;
   $345 = HEAP16[$$16$sroa_idx35 >> 1] | 0;
   $351 = $340 + ((Math_imul($343 >> 16, $345) | 0) + ((Math_imul($343 & 65535, $345) | 0) >> 16)) | 0;
   $354 = HEAP32[$16 + ($$5 + 6 << 2) >> 2] | 0;
   $356 = HEAP16[$$18$sroa_idx >> 1] | 0;
   $362 = $351 + ((Math_imul($354 >> 16, $356) | 0) + ((Math_imul($354 & 65535, $356) | 0) >> 16)) | 0;
   if ((HEAP32[$59 >> 2] | 0) == 16) {
    $367 = HEAP32[$16 + ($$5 + 5 << 2) >> 2] | 0;
    $369 = HEAP16[$$20$sroa_idx >> 1] | 0;
    $375 = $362 + ((Math_imul($367 >> 16, $369) | 0) + ((Math_imul($367 & 65535, $369) | 0) >> 16)) | 0;
    $378 = HEAP32[$16 + ($$5 + 4 << 2) >> 2] | 0;
    $380 = HEAP16[$$22$sroa_idx41 >> 1] | 0;
    $386 = $375 + ((Math_imul($378 >> 16, $380) | 0) + ((Math_imul($378 & 65535, $380) | 0) >> 16)) | 0;
    $389 = HEAP32[$16 + ($$5 + 3 << 2) >> 2] | 0;
    $391 = HEAP16[$$24$sroa_idx >> 1] | 0;
    $397 = $386 + ((Math_imul($389 >> 16, $391) | 0) + ((Math_imul($389 & 65535, $391) | 0) >> 16)) | 0;
    $400 = HEAP32[$16 + ($$5 + 2 << 2) >> 2] | 0;
    $402 = HEAP16[$$26$sroa_idx >> 1] | 0;
    $408 = $397 + ((Math_imul($400 >> 16, $402) | 0) + ((Math_imul($400 & 65535, $402) | 0) >> 16)) | 0;
    $411 = HEAP32[$16 + ($$5 + 1 << 2) >> 2] | 0;
    $413 = HEAP16[$$28$sroa_idx >> 1] | 0;
    $419 = $408 + ((Math_imul($411 >> 16, $413) | 0) + ((Math_imul($411 & 65535, $413) | 0) >> 16)) | 0;
    $421 = HEAP32[$16 + ($$5 << 2) >> 2] | 0;
    $423 = HEAP16[$$30$sroa_idx >> 1] | 0;
    $$015 = $419 + ((Math_imul($421 >> 16, $423) | 0) + ((Math_imul($421 & 65535, $423) | 0) >> 16)) | 0;
   } else $$015 = $362;
   $431 = HEAP32[$$0 + ($$5 << 2) >> 2] | 0;
   $432 = ($$015 | 0) > 134217727;
   $438 = $432 ? 2147483632 : (($$015 | 0) > -134217728 ? $$015 : -134217728) << 4;
   if (($431 + ($432 ? 2147483632 : (($$015 | 0) > -134217728 ? $$015 : -134217728) << 4) | 0) > -1) if (($431 & $438 | 0) < 0) $451 = -2147483648; else $451 = $431 + ($432 ? 2147483632 : (($$015 | 0) > -134217728 ? $$015 : -134217728) << 4) | 0; else if (($431 | $438 | 0) > -1) $451 = 2147483647; else $451 = $431 + ($432 ? 2147483632 : (($$015 | 0) > -134217728 ? $$015 : -134217728) << 4) | 0;
   HEAP32[$16 + ($$5 + 16 << 2) >> 2] = $451;
   $459 = (Math_imul($451 >> 16, $245) | 0) + ((Math_imul($451 & 65535, $245) | 0) >> 16) + (Math_imul($451, $248) | 0) | 0;
   if (($459 | 0) > 8388479) $466 = 32767; else if (($459 | 0) < -8388736) $466 = -32768; else $466 = ($459 >> 7) + 1 >> 1;
   HEAP16[$$016 + ($$5 << 1) >> 1] = $466;
   $$5 = $$5 + 1 | 0;
  }
  dest = $16;
  src = $16 + ($249 << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$01 = $$01 + ($249 << 2) | 0;
  $$010 = $$212;
  $$016 = $$016 + ($249 << 1) | 0;
  $$06 = $$06 + 1 | 0;
 }
 if ((label | 0) == 21) _celt_fatal(44423, 42828, 144); else if ((label | 0) == 39) _celt_fatal(42847, 42828, 199); else if ((label | 0) == 52) {
  dest = $55;
  src = $16;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
}

function _silk_pitch_analysis_core_FLP($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = +$7;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$014 = 0, $$017 = 0, $$019 = 0, $$022 = 0.0, $$025 = 0.0, $$026 = 0, $$031 = 0, $$037 = 0, $$039 = 0, $$04 = 0, $$042 = 0.0, $$044 = 0.0, $$049 = 0, $$05 = 0.0, $$052 = 0, $$053 = 0.0, $$054 = 0.0, $$055 = 0.0, $$056 = 0, $$059 = 0, $$06 = 0, $$1 = 0, $$10 = 0, $$112 = 0, $$127 = 0, $$13 = 0, $$132 = 0, $$138 = 0, $$140 = 0, $$157 = 0, $$160 = 0, $$17 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$213 = 0, $$216 = 0, $$221 = 0, $$224 = 0.0, $$228 = 0, $$233 = 0, $$241 = 0, $$246 = 0.0, $$251 = 0, $$258 = 0, $$3 = 0, $$329 = 0, $$334 = 0, $$347 = 0.0, $$4 = 0, $$430 = 0, $$435 = 0, $$448 = 0.0, $$5 = 0, $$536 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0.0, $102 = 0.0, $106 = 0, $11 = 0, $112 = 0, $113 = 0.0, $12 = 0, $120 = 0, $123 = 0.0, $126 = 0.0, $13 = 0, $132 = 0, $14 = 0, $145 = 0, $15 = 0, $154 = 0, $159 = 0, $16 = 0, $166 = 0, $17 = 0, $18 = 0, $180 = 0, $19 = 0, $197 = 0.0, $20 = 0, $201 = 0, $203 = 0, $204 = 0.0, $21 = 0, $22 = 0, $223 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $23 = 0, $231 = 0, $233 = 0, $24 = 0, $243 = 0.0, $244 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $254 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $273 = 0, $284 = 0, $285 = 0, $287 = 0, $289 = 0.0, $297 = 0.0, $30 = 0, $31 = 0, $32 = 0, $323 = 0, $327 = 0, $334 = 0, $335 = 0, $34 = 0, $340 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $45 = 0, $51 = 0, $55 = 0, $58 = 0.0, $62 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $73 = 0, $79 = 0.0, $80 = 0.0, $83 = 0.0, $89 = 0, $95 = 0.0, $99 = 0.0, $or$cond10 = 0, $spec$select17 = 0, $storemerge$in = 0, $storemerge2$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13696 | 0;
 $11 = sp + 12416 | 0;
 $12 = sp + 11776 | 0;
 $13 = sp + 11136 | 0;
 $14 = sp + 10816 | 0;
 $15 = sp + 10784 | 0;
 $16 = sp + 8400 | 0;
 $17 = sp + 8128 | 0;
 $18 = sp + 8080 | 0;
 $19 = sp + 7984 | 0;
 $20 = sp + 7680 | 0;
 $21 = sp + 4960 | 0;
 $22 = sp + 2240 | 0;
 $23 = sp + 960 | 0;
 $24 = sp;
 $25 = ($8 | 0) == 8;
 switch ($8 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(47398, 47460, 112);
 }
 if (($9 | 0) <= -1) _celt_fatal(47497, 47460, 115);
 if (($9 | 0) >= 3) _celt_fatal(47549, 47460, 116);
 $30 = Math_imul(($10 * 5 | 0) + 20 | 0, $8) | 0;
 $31 = $10 * 20 | 0;
 $32 = $31 + 80 | 0;
 $34 = ($10 * 40 | 0) + 160 | 0;
 $35 = $8 * 5 | 0;
 $36 = $8 << 1;
 $37 = $8 * 18 | 0;
 $38 = $37 + -1 | 0;
 $39 = ($8 | 0) == 16;
 do if ($39) {
  _silk_float2short_array_610($23, $0, $30);
  $40 = $15;
  HEAP32[$40 >> 2] = 0;
  HEAP32[$40 + 4 >> 2] = 0;
  _silk_resampler_down2($15, $13, $23, $30);
  _silk_short2float_array_611($11, $13, $34);
  $$pre$phi3Z2D = $13;
  $$pre$phiZ2D = $15;
 } else {
  if (($8 | 0) == 12) {
   _silk_float2short_array_610($24, $0, $30);
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   HEAP32[$15 + 8 >> 2] = 0;
   HEAP32[$15 + 12 >> 2] = 0;
   HEAP32[$15 + 16 >> 2] = 0;
   HEAP32[$15 + 20 >> 2] = 0;
   _silk_resampler_down2_3($15, $13, $24, $30);
   _silk_short2float_array_611($11, $13, $34);
   $$pre$phi3Z2D = $13;
   $$pre$phiZ2D = $15;
   break;
  }
  if ($25) {
   _silk_float2short_array_610($13, $0, $34);
   $$pre$phi3Z2D = $13;
   $$pre$phiZ2D = $15;
   break;
  } else _celt_fatal(47601, 47460, 151);
 } while (0);
 $45 = $15;
 HEAP32[$45 >> 2] = 0;
 HEAP32[$45 + 4 >> 2] = 0;
 _silk_resampler_down2($$pre$phiZ2D, $14, $$pre$phi3Z2D, $34);
 _silk_short2float_array_611($12, $14, $32);
 $$026 = $31 + 79 | 0;
 while (1) {
  if (($$026 | 0) <= 0) break;
  $51 = $12 + ($$026 << 2) | 0;
  $55 = $$026 + -1 | 0;
  $58 = +HEAPF32[$12 + ($55 << 2) >> 2] + +(~~+HEAPF32[$51 >> 2] | 0);
  if ($58 > 32767.0) $62 = 32767.0; else if ($58 < -32768.0) $62 = -32768.0; else $62 = $58;
  HEAPF32[$51 >> 2] = +(~~$62 << 16 >> 16);
  $$026 = $55;
 }
 _memset($16 | 0, 0, $10 * 596 | 0) | 0;
 $66 = $10 >> 1;
 $67 = $12 + ($32 << 2) | 0;
 $68 = $17 + 256 | 0;
 $69 = $16 + 32 | 0;
 $$031 = 0;
 $$049 = $12 + 320 | 0;
 while (1) {
  if (($$031 | 0) >= ($66 | 0)) {
   label = 32;
   break;
  }
  $71 = $$049 + 160 | 0;
  if ($71 >>> 0 > $67 >>> 0) {
   label = 23;
   break;
  }
  $73 = $$049 + -32 | 0;
  if ($73 >>> 0 < $12 >>> 0) {
   label = 25;
   break;
  }
  if (($$049 + 128 | 0) >>> 0 > $67 >>> 0) {
   label = 27;
   break;
  }
  _celt_pitch_xcorr_c($$049, $$049 + -288 | 0, $17, 40, 65);
  $79 = +HEAPF32[$68 >> 2];
  $80 = +_silk_energy_FLP($$049, 40);
  $83 = $80 + +_silk_energy_FLP($73, 40) + 16.0e4;
  HEAPF32[$69 >> 2] = +HEAPF32[$69 >> 2] + $79 * 2.0 / $83;
  $$037 = 9;
  $$052 = $73;
  $$054 = $83;
  while (1) {
   if (($$037 | 0) == 73) break;
   $89 = $$052 + -4 | 0;
   $95 = +HEAPF32[$89 >> 2];
   $99 = +HEAPF32[$$052 + 156 >> 2];
   $102 = $$054 + ($95 * $95 - $99 * $99);
   $106 = $16 + ($$037 << 2) | 0;
   HEAPF32[$106 >> 2] = +HEAPF32[$106 >> 2] + +HEAPF32[$17 + (72 - $$037 << 2) >> 2] * 2.0 / $102;
   $$037 = $$037 + 1 | 0;
   $$052 = $89;
   $$054 = $102;
  }
  $$031 = $$031 + 1 | 0;
  $$049 = $71;
 }
 if ((label | 0) == 23) _celt_fatal(47631, 47460, 173); else if ((label | 0) == 25) _celt_fatal(47711, 47460, 178); else if ((label | 0) == 27) _celt_fatal(47753, 47460, 179); else if ((label | 0) == 32) {
  $$127 = 72;
  while (1) {
   if ($$127 >>> 0 <= 7) break;
   $112 = $16 + ($$127 << 2) | 0;
   $113 = +HEAPF32[$112 >> 2];
   HEAPF32[$112 >> 2] = $113 - $113 * +($$127 | 0) * .000244140625;
   $$127 = $$127 + -1 | 0;
  }
  $120 = ($9 << 1) + 4 | 0;
  if (($120 * 3 | 0) >= 25) _celt_fatal(47832, 47460, 218);
  _silk_insertion_sort_decreasing_FLP($69, $19, 65, $120);
  $123 = +HEAPF32[$69 >> 2];
  if ($123 < .20000000298023224) {
   _memset($1 | 0, 0, $10 << 2 | 0) | 0;
   HEAPF32[$4 >> 2] = 0.0;
   HEAP16[$2 >> 1] = 0;
   HEAP8[$3 >> 0] = 0;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $126 = $123 * $6;
  $$228 = 0;
  while (1) {
   if (($$228 | 0) >= ($120 | 0)) {
    $$056 = $120;
    break;
   }
   if (!(+HEAPF32[$16 + ($$228 + 8 << 2) >> 2] > $126)) {
    $$056 = $$228;
    break;
   }
   $132 = $19 + ($$228 << 2) | 0;
   HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] << 1) + 16;
   $$228 = $$228 + 1 | 0;
  }
  if (($$056 | 0) <= 0) _celt_fatal(47888, 47460, 241);
  $$329 = 11;
  while (1) {
   if (($$329 | 0) == 148) break;
   HEAP16[$20 + ($$329 << 1) >> 1] = 0;
   $$329 = $$329 + 1 | 0;
  }
  $$430 = 0;
  while (1) {
   if (($$430 | 0) == ($$056 | 0)) break;
   HEAP16[$20 + (HEAP32[$19 + ($$430 << 2) >> 2] << 1) >> 1] = 1;
   $$430 = $$430 + 1 | 0;
  }
  $$5 = 146;
  while (1) {
   if ($$5 >>> 0 <= 15) break;
   $145 = $$5 + -1 | 0;
   $154 = $20 + ($$5 << 1) | 0;
   HEAP16[$154 >> 1] = (HEAPU16[$20 + ($145 << 1) >> 1] | 0) + (HEAPU16[$20 + ($$5 + -2 << 1) >> 1] | 0) + (HEAPU16[$154 >> 1] | 0);
   $$5 = $145;
  }
  $$157 = 0;
  $$6 = 16;
  while (1) {
   if (($$6 | 0) == 144) break;
   $159 = $$6 + 1 | 0;
   if ((HEAP16[$20 + ($159 << 1) >> 1] | 0) > 0) {
    HEAP32[$19 + ($$157 << 2) >> 2] = $$6;
    $$258 = $$157 + 1 | 0;
   } else $$258 = $$157;
   $$157 = $$258;
   $$6 = $159;
  }
  $$7 = 146;
  while (1) {
   if ($$7 >>> 0 <= 15) break;
   $166 = $$7 + -1 | 0;
   $180 = $20 + ($$7 << 1) | 0;
   HEAP16[$180 >> 1] = (HEAPU16[$20 + ($166 << 1) >> 1] | 0) + (HEAPU16[$20 + ($$7 + -2 << 1) >> 1] | 0) + (HEAPU16[$20 + ($$7 + -3 << 1) >> 1] | 0) + (HEAPU16[$180 >> 1] | 0);
   $$7 = $166;
  }
  $$059 = 0;
  $$8 = 16;
  while (1) {
   if (($$8 | 0) == 147) break;
   if ((HEAP16[$20 + ($$8 << 1) >> 1] | 0) > 0) {
    HEAP16[$20 + ($$059 << 1) >> 1] = $$8 + 65534;
    $$160 = $$059 + 1 | 0;
   } else $$160 = $$059;
   $$059 = $$160;
   $$8 = $$8 + 1 | 0;
  }
  _memset($16 | 0, 0, 2384) | 0;
  $$132 = 0;
  $$251 = $25 ? $0 + 640 | 0 : $11 + 640 | 0;
  while (1) {
   if (($$132 | 0) >= ($10 | 0)) break;
   $197 = +_silk_energy_FLP($$251, 40) + 1.0;
   $$039 = 0;
   while (1) {
    if (($$039 | 0) >= ($$059 | 0)) break;
    $201 = HEAP16[$20 + ($$039 << 1) >> 1] | 0;
    $203 = $$251 + (0 - $201 << 2) | 0;
    $204 = +_silk_inner_product_FLP($203, $$251, 40);
    if ($204 > 0.0) $$sink = $204 * 2.0 / (+_silk_energy_FLP($203, 40) + $197); else $$sink = 0.0;
    HEAPF32[$16 + ($$132 * 596 | 0) + ($201 << 2) >> 2] = $$sink;
    $$039 = $$039 + 1 | 0;
   }
   $$132 = $$132 + 1 | 0;
   $$251 = $$251 + 160 | 0;
  }
  if (($5 | 0) > 0) {
   if (($8 | 0) == 12) $$19 = ($5 << 1 | 0) / 3 | 0; else $$19 = $5 >> ($39 & 1);
   $$05 = +_silk_log2_619(+($$19 | 0));
   $$210 = $$19;
  } else {
   $$05 = 0.0;
   $$210 = $5;
  }
  $223 = ($10 | 0) == 4;
  if ($223) {
   $$01 = 27072;
   $$06 = 11;
   $$13 = $25 & ($9 | 0) > 0 ? 11 : 3;
  } else {
   $$01 = 46145;
   $$06 = 3;
   $$13 = 3;
  }
  $225 = +($10 | 0);
  $226 = $225 * .20000000298023224;
  $227 = ($$210 | 0) > 0;
  $228 = $225 * $7;
  $$014 = -1;
  $$019 = 0;
  $$042 = -1.0e3;
  $$044 = 0.0;
  $$233 = 0;
  while (1) {
   if (($$233 | 0) >= ($$157 | 0)) break;
   $231 = HEAP32[$19 + ($$233 << 2) >> 2] | 0;
   $$140 = 0;
   while (1) {
    if ($$140 >>> 0 >= $$13 >>> 0) break;
    $233 = $18 + ($$140 << 2) | 0;
    HEAPF32[$233 >> 2] = 0.0;
    $$9 = 0;
    $244 = 0.0;
    while (1) {
     if (($$9 | 0) >= ($10 | 0)) break;
     $243 = $244 + +HEAPF32[$16 + ($$9 * 596 | 0) + ($231 + (HEAP8[$$01 + ((Math_imul($$9, $$06) | 0) + $$140) >> 0] | 0) << 2) >> 2];
     HEAPF32[$233 >> 2] = $243;
     $$9 = $$9 + 1 | 0;
     $244 = $243;
    }
    $$140 = $$140 + 1 | 0;
   }
   $$017 = 0;
   $$022 = -1.0e3;
   $$10 = 0;
   while (1) {
    if ($$10 >>> 0 >= $$13 >>> 0) break;
    $249 = +HEAPF32[$18 + ($$10 << 2) >> 2];
    $250 = $249 > $$022;
    $$017 = $250 ? $$10 : $$017;
    $$022 = $250 ? $249 : $$022;
    $$10 = $$10 + 1 | 0;
   }
   $254 = +_silk_log2_619(+($231 | 0));
   $256 = $$022 - $226 * $254;
   if ($227) {
    $257 = $254 - $$05;
    $258 = $257 * $257;
    $$025 = $256 - $226 * +HEAPF32[$4 >> 2] * $258 / ($258 + .5);
   } else $$025 = $256;
   $or$cond10 = $$025 > $$042 & $$022 > $228;
   $$014 = $or$cond10 ? $231 : $$014;
   $$019 = $or$cond10 ? $$017 : $$019;
   $$042 = $or$cond10 ? $$025 : $$042;
   $$044 = $or$cond10 ? $$022 : $$044;
   $$233 = $$233 + 1 | 0;
  }
  if (($$014 | 0) == -1) {
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAPF32[$4 >> 2] = 0.0;
   HEAP16[$2 >> 1] = 0;
   HEAP8[$3 >> 0] = 0;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAPF32[$4 >> 2] = $$044 / $225;
  if (($8 | 0) > 8) {
   if (($8 | 0) == 12) {
    $273 = ($$014 << 16 >> 16) * 3 | 0;
    $$216 = ($273 >> 1) + ($273 & 1) | 0;
   } else $$216 = $$014 << 1;
   if (($36 | 0) < ($37 | 0)) if (($$216 | 0) < ($37 | 0)) $284 = ($$216 | 0) < ($36 | 0) ? $36 : $$216; else $284 = $38; else if (($$216 | 0) > ($36 | 0)) $284 = $36; else $284 = ($$216 | 0) < ($38 | 0) ? $38 : $$216;
   $285 = _silk_max_int_620($284 + -2 | 0, $36) | 0;
   $287 = _silk_min_int_621($284 + 2 | 0, $38) | 0;
   _silk_P_Ana_calc_corr_st3($22, $0, $285, $35, $10, $9);
   _silk_P_Ana_calc_energy_st3($21, $0, $285, $35, $10, $9);
   $289 = .05000000074505806 / +($284 | 0);
   if ($223) {
    $$1 = 27120;
    $$17 = 34;
    $$2 = HEAP8[46155 + $9 >> 0] | 0;
   } else {
    $$1 = 27040;
    $$17 = 12;
    $$2 = 12;
   }
   $297 = +_silk_energy_FLP($0 + ($8 * 20 << 2) | 0, Math_imul($35, $10) | 0) + 1.0;
   $$011 = $284;
   $$04 = 0;
   $$138 = $285;
   $$221 = 0;
   $$246 = -1.0e3;
   while (1) {
    if (($$138 | 0) > ($287 | 0)) break;
    $$112 = $$011;
    $$241 = 0;
    $$3 = $$221;
    $$347 = $$246;
    while (1) {
     if (($$241 | 0) >= ($$2 | 0)) break;
     $$053 = 0.0;
     $$055 = $297;
     $$334 = 0;
     while (1) {
      if (($$334 | 0) >= ($10 | 0)) break;
      $$053 = $$053 + +HEAPF32[$22 + ($$334 * 680 | 0) + ($$241 * 20 | 0) + ($$04 << 2) >> 2];
      $$055 = $$055 + +HEAPF32[$21 + ($$334 * 680 | 0) + ($$241 * 20 | 0) + ($$04 << 2) >> 2];
      $$334 = $$334 + 1 | 0;
     }
     if ($$053 > 0.0) $$224 = (1.0 - $289 * +($$241 | 0)) * ($$053 * 2.0 / $$055); else $$224 = 0.0;
     if ($$224 > $$347) {
      $323 = ($$138 + (HEAP8[27120 + $$241 >> 0] | 0) | 0) < ($37 | 0);
      $$213 = $323 ? $$138 : $$112;
      $$4 = $323 ? $$241 : $$3;
      $$448 = $323 ? $$224 : $$347;
     } else {
      $$213 = $$112;
      $$4 = $$3;
      $$448 = $$347;
     }
     $$112 = $$213;
     $$241 = $$241 + 1 | 0;
     $$3 = $$4;
     $$347 = $$448;
    }
    $$011 = $$112;
    $$04 = $$04 + 1 | 0;
    $$138 = $$138 + 1 | 0;
    $$221 = $$3;
    $$246 = $$347;
   }
   $327 = ($36 | 0) > ($37 | 0);
   $$435 = 0;
   while (1) {
    if (($$435 | 0) >= ($10 | 0)) break;
    $334 = $$011 + (HEAP8[$$1 + ((Math_imul($$435, $$17) | 0) + $$221) >> 0] | 0) | 0;
    $335 = $1 + ($$435 << 2) | 0;
    HEAP32[$335 >> 2] = $334;
    if ($327) if (($334 | 0) > ($36 | 0)) $340 = $36; else $340 = ($334 | 0) < ($37 | 0) ? $37 : $334; else if (($334 | 0) > ($37 | 0)) $340 = $37; else $340 = ($334 | 0) < ($36 | 0) ? $36 : $334;
    HEAP32[$335 >> 2] = $340;
    $$435 = $$435 + 1 | 0;
   }
   $storemerge$in = $$221;
   $storemerge2$in = $$011 - $36 | 0;
  } else {
   $$536 = 0;
   while (1) {
    if (($$536 | 0) >= ($10 | 0)) break;
    $349 = $$014 + (HEAP8[$$01 + ((Math_imul($$536, $$06) | 0) + $$019) >> 0] | 0) | 0;
    $spec$select17 = ($349 | 0) > 16 ? $349 : 16;
    HEAP32[$1 + ($$536 << 2) >> 2] = ($spec$select17 | 0) < 144 ? $spec$select17 : 144;
    $$536 = $$536 + 1 | 0;
   }
   $storemerge$in = $$019;
   $storemerge2$in = $$014 + 65520 | 0;
  }
  HEAP16[$2 >> 1] = $storemerge2$in;
  HEAP8[$3 >> 0] = $storemerge$in;
  if ((HEAP16[$2 >> 1] | 0) > -1) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else _celt_fatal(47924, 47460, 474);
 }
 return 0;
}
function _silk_resampler_private_down_FIR_INTERPOL($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$3 = 0, $103 = 0, $109 = 0, $11 = 0, $111 = 0, $115 = 0, $121 = 0, $124 = 0, $126 = 0, $129 = 0, $135 = 0, $137 = 0, $14 = 0, $141 = 0, $147 = 0, $149 = 0, $153 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $17 = 0, $171 = 0, $173 = 0, $177 = 0, $183 = 0, $185 = 0, $189 = 0, $195 = 0, $197 = 0, $20 = 0, $201 = 0, $207 = 0, $209 = 0, $213 = 0, $219 = 0, $221 = 0, $225 = 0, $231 = 0, $238 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $254 = 0, $258 = 0, $261 = 0, $266 = 0, $27 = 0, $271 = 0, $274 = 0, $280 = 0, $285 = 0, $288 = 0, $294 = 0, $299 = 0, $302 = 0, $308 = 0, $31 = 0, $313 = 0, $316 = 0, $322 = 0, $327 = 0, $330 = 0, $336 = 0, $341 = 0, $344 = 0, $350 = 0, $355 = 0, $358 = 0, $364 = 0, $369 = 0, $37 = 0, $372 = 0, $378 = 0, $383 = 0, $386 = 0, $39 = 0, $392 = 0, $397 = 0, $400 = 0, $406 = 0, $411 = 0, $414 = 0, $420 = 0, $427 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $449 = 0, $453 = 0, $456 = 0, $461 = 0, $466 = 0, $469 = 0, $475 = 0, $480 = 0, $483 = 0, $489 = 0, $49 = 0, $494 = 0, $497 = 0, $503 = 0, $508 = 0, $51 = 0, $511 = 0, $517 = 0, $522 = 0, $525 = 0, $531 = 0, $536 = 0, $539 = 0, $545 = 0, $55 = 0, $550 = 0, $553 = 0, $559 = 0, $564 = 0, $567 = 0, $573 = 0, $578 = 0, $581 = 0, $587 = 0, $592 = 0, $595 = 0, $601 = 0, $606 = 0, $609 = 0, $61 = 0, $615 = 0, $620 = 0, $623 = 0, $629 = 0, $63 = 0, $634 = 0, $637 = 0, $643 = 0, $648 = 0, $651 = 0, $657 = 0, $662 = 0, $665 = 0, $67 = 0, $671 = 0, $676 = 0, $679 = 0, $685 = 0, $690 = 0, $693 = 0, $699 = 0, $7 = 0, $706 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $85 = 0, $87 = 0, $91 = 0, $97 = 0, $99 = 0;
 switch ($3 | 0) {
 case 18:
  {
   $7 = $4 << 16 >> 16;
   $8 = $4 + -1 | 0;
   $$0 = $0;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($5 | 0)) {
     $$3 = $$0;
     break;
    }
    $11 = $1 + ($$01 >> 16 << 2) | 0;
    $14 = (Math_imul($$01 & 65535, $7) | 0) >> 16;
    $16 = $2 + ($14 * 9 << 1) | 0;
    $17 = HEAP32[$11 >> 2] | 0;
    $20 = HEAP16[$16 >> 1] | 0;
    $25 = (Math_imul($17 >> 16, $20) | 0) + ((Math_imul($17 & 65535, $20) | 0) >> 16) | 0;
    $27 = HEAP32[$11 + 4 >> 2] | 0;
    $31 = HEAP16[$16 + 2 >> 1] | 0;
    $37 = $25 + ((Math_imul($27 >> 16, $31) | 0) + ((Math_imul($27 & 65535, $31) | 0) >> 16)) | 0;
    $39 = HEAP32[$11 + 8 >> 2] | 0;
    $43 = HEAP16[$16 + 4 >> 1] | 0;
    $49 = $37 + ((Math_imul($39 >> 16, $43) | 0) + ((Math_imul($39 & 65535, $43) | 0) >> 16)) | 0;
    $51 = HEAP32[$11 + 12 >> 2] | 0;
    $55 = HEAP16[$16 + 6 >> 1] | 0;
    $61 = $49 + ((Math_imul($51 >> 16, $55) | 0) + ((Math_imul($51 & 65535, $55) | 0) >> 16)) | 0;
    $63 = HEAP32[$11 + 16 >> 2] | 0;
    $67 = HEAP16[$16 + 8 >> 1] | 0;
    $73 = $61 + ((Math_imul($63 >> 16, $67) | 0) + ((Math_imul($63 & 65535, $67) | 0) >> 16)) | 0;
    $75 = HEAP32[$11 + 20 >> 2] | 0;
    $79 = HEAP16[$16 + 10 >> 1] | 0;
    $85 = $73 + ((Math_imul($75 >> 16, $79) | 0) + ((Math_imul($75 & 65535, $79) | 0) >> 16)) | 0;
    $87 = HEAP32[$11 + 24 >> 2] | 0;
    $91 = HEAP16[$16 + 12 >> 1] | 0;
    $97 = $85 + ((Math_imul($87 >> 16, $91) | 0) + ((Math_imul($87 & 65535, $91) | 0) >> 16)) | 0;
    $99 = HEAP32[$11 + 28 >> 2] | 0;
    $103 = HEAP16[$16 + 14 >> 1] | 0;
    $109 = $97 + ((Math_imul($99 >> 16, $103) | 0) + ((Math_imul($99 & 65535, $103) | 0) >> 16)) | 0;
    $111 = HEAP32[$11 + 32 >> 2] | 0;
    $115 = HEAP16[$16 + 16 >> 1] | 0;
    $121 = $109 + ((Math_imul($111 >> 16, $115) | 0) + ((Math_imul($111 & 65535, $115) | 0) >> 16)) | 0;
    $124 = $2 + (($8 - $14 | 0) * 9 << 1) | 0;
    $126 = HEAP32[$11 + 68 >> 2] | 0;
    $129 = HEAP16[$124 >> 1] | 0;
    $135 = $121 + ((Math_imul($126 >> 16, $129) | 0) + ((Math_imul($126 & 65535, $129) | 0) >> 16)) | 0;
    $137 = HEAP32[$11 + 64 >> 2] | 0;
    $141 = HEAP16[$124 + 2 >> 1] | 0;
    $147 = $135 + ((Math_imul($137 >> 16, $141) | 0) + ((Math_imul($137 & 65535, $141) | 0) >> 16)) | 0;
    $149 = HEAP32[$11 + 60 >> 2] | 0;
    $153 = HEAP16[$124 + 4 >> 1] | 0;
    $159 = $147 + ((Math_imul($149 >> 16, $153) | 0) + ((Math_imul($149 & 65535, $153) | 0) >> 16)) | 0;
    $161 = HEAP32[$11 + 56 >> 2] | 0;
    $165 = HEAP16[$124 + 6 >> 1] | 0;
    $171 = $159 + ((Math_imul($161 >> 16, $165) | 0) + ((Math_imul($161 & 65535, $165) | 0) >> 16)) | 0;
    $173 = HEAP32[$11 + 52 >> 2] | 0;
    $177 = HEAP16[$124 + 8 >> 1] | 0;
    $183 = $171 + ((Math_imul($173 >> 16, $177) | 0) + ((Math_imul($173 & 65535, $177) | 0) >> 16)) | 0;
    $185 = HEAP32[$11 + 48 >> 2] | 0;
    $189 = HEAP16[$124 + 10 >> 1] | 0;
    $195 = $183 + ((Math_imul($185 >> 16, $189) | 0) + ((Math_imul($185 & 65535, $189) | 0) >> 16)) | 0;
    $197 = HEAP32[$11 + 44 >> 2] | 0;
    $201 = HEAP16[$124 + 12 >> 1] | 0;
    $207 = $195 + ((Math_imul($197 >> 16, $201) | 0) + ((Math_imul($197 & 65535, $201) | 0) >> 16)) | 0;
    $209 = HEAP32[$11 + 40 >> 2] | 0;
    $213 = HEAP16[$124 + 14 >> 1] | 0;
    $219 = $207 + ((Math_imul($209 >> 16, $213) | 0) + ((Math_imul($209 & 65535, $213) | 0) >> 16)) | 0;
    $221 = HEAP32[$11 + 36 >> 2] | 0;
    $225 = HEAP16[$124 + 16 >> 1] | 0;
    $231 = $219 + ((Math_imul($221 >> 16, $225) | 0) + ((Math_imul($221 & 65535, $225) | 0) >> 16)) | 0;
    if (($231 | 0) > 2097119) $238 = 32767; else if (($231 | 0) < -2097184) $238 = -32768; else $238 = ($231 >> 5) + 1 >> 1;
    HEAP16[$$0 >> 1] = $238;
    $$0 = $$0 + 2 | 0;
    $$01 = $$01 + $6 | 0;
   }
   return $$3 | 0;
  }
 case 24:
  {
   $241 = $2 + 2 | 0;
   $242 = $2 + 4 | 0;
   $243 = $2 + 6 | 0;
   $244 = $2 + 8 | 0;
   $245 = $2 + 10 | 0;
   $246 = $2 + 12 | 0;
   $247 = $2 + 14 | 0;
   $248 = $2 + 16 | 0;
   $249 = $2 + 18 | 0;
   $250 = $2 + 20 | 0;
   $251 = $2 + 22 | 0;
   $$1 = $0;
   $$12 = 0;
   while (1) {
    if (($$12 | 0) >= ($5 | 0)) {
     $$3 = $$1;
     break;
    }
    $254 = $1 + ($$12 >> 16 << 2) | 0;
    $258 = (HEAP32[$254 >> 2] | 0) + (HEAP32[$254 + 92 >> 2] | 0) | 0;
    $261 = HEAP16[$2 >> 1] | 0;
    $266 = (Math_imul($258 >> 16, $261) | 0) + ((Math_imul($258 & 65535, $261) | 0) >> 16) | 0;
    $271 = (HEAP32[$254 + 4 >> 2] | 0) + (HEAP32[$254 + 88 >> 2] | 0) | 0;
    $274 = HEAP16[$241 >> 1] | 0;
    $280 = $266 + ((Math_imul($271 >> 16, $274) | 0) + ((Math_imul($271 & 65535, $274) | 0) >> 16)) | 0;
    $285 = (HEAP32[$254 + 8 >> 2] | 0) + (HEAP32[$254 + 84 >> 2] | 0) | 0;
    $288 = HEAP16[$242 >> 1] | 0;
    $294 = $280 + ((Math_imul($285 >> 16, $288) | 0) + ((Math_imul($285 & 65535, $288) | 0) >> 16)) | 0;
    $299 = (HEAP32[$254 + 12 >> 2] | 0) + (HEAP32[$254 + 80 >> 2] | 0) | 0;
    $302 = HEAP16[$243 >> 1] | 0;
    $308 = $294 + ((Math_imul($299 >> 16, $302) | 0) + ((Math_imul($299 & 65535, $302) | 0) >> 16)) | 0;
    $313 = (HEAP32[$254 + 16 >> 2] | 0) + (HEAP32[$254 + 76 >> 2] | 0) | 0;
    $316 = HEAP16[$244 >> 1] | 0;
    $322 = $308 + ((Math_imul($313 >> 16, $316) | 0) + ((Math_imul($313 & 65535, $316) | 0) >> 16)) | 0;
    $327 = (HEAP32[$254 + 20 >> 2] | 0) + (HEAP32[$254 + 72 >> 2] | 0) | 0;
    $330 = HEAP16[$245 >> 1] | 0;
    $336 = $322 + ((Math_imul($327 >> 16, $330) | 0) + ((Math_imul($327 & 65535, $330) | 0) >> 16)) | 0;
    $341 = (HEAP32[$254 + 24 >> 2] | 0) + (HEAP32[$254 + 68 >> 2] | 0) | 0;
    $344 = HEAP16[$246 >> 1] | 0;
    $350 = $336 + ((Math_imul($341 >> 16, $344) | 0) + ((Math_imul($341 & 65535, $344) | 0) >> 16)) | 0;
    $355 = (HEAP32[$254 + 28 >> 2] | 0) + (HEAP32[$254 + 64 >> 2] | 0) | 0;
    $358 = HEAP16[$247 >> 1] | 0;
    $364 = $350 + ((Math_imul($355 >> 16, $358) | 0) + ((Math_imul($355 & 65535, $358) | 0) >> 16)) | 0;
    $369 = (HEAP32[$254 + 32 >> 2] | 0) + (HEAP32[$254 + 60 >> 2] | 0) | 0;
    $372 = HEAP16[$248 >> 1] | 0;
    $378 = $364 + ((Math_imul($369 >> 16, $372) | 0) + ((Math_imul($369 & 65535, $372) | 0) >> 16)) | 0;
    $383 = (HEAP32[$254 + 36 >> 2] | 0) + (HEAP32[$254 + 56 >> 2] | 0) | 0;
    $386 = HEAP16[$249 >> 1] | 0;
    $392 = $378 + ((Math_imul($383 >> 16, $386) | 0) + ((Math_imul($383 & 65535, $386) | 0) >> 16)) | 0;
    $397 = (HEAP32[$254 + 40 >> 2] | 0) + (HEAP32[$254 + 52 >> 2] | 0) | 0;
    $400 = HEAP16[$250 >> 1] | 0;
    $406 = $392 + ((Math_imul($397 >> 16, $400) | 0) + ((Math_imul($397 & 65535, $400) | 0) >> 16)) | 0;
    $411 = (HEAP32[$254 + 44 >> 2] | 0) + (HEAP32[$254 + 48 >> 2] | 0) | 0;
    $414 = HEAP16[$251 >> 1] | 0;
    $420 = $406 + ((Math_imul($411 >> 16, $414) | 0) + ((Math_imul($411 & 65535, $414) | 0) >> 16)) | 0;
    if (($420 | 0) > 2097119) $427 = 32767; else if (($420 | 0) < -2097184) $427 = -32768; else $427 = ($420 >> 5) + 1 >> 1;
    HEAP16[$$1 >> 1] = $427;
    $$1 = $$1 + 2 | 0;
    $$12 = $$12 + $6 | 0;
   }
   return $$3 | 0;
  }
 case 36:
  {
   $430 = $2 + 2 | 0;
   $431 = $2 + 4 | 0;
   $432 = $2 + 6 | 0;
   $433 = $2 + 8 | 0;
   $434 = $2 + 10 | 0;
   $435 = $2 + 12 | 0;
   $436 = $2 + 14 | 0;
   $437 = $2 + 16 | 0;
   $438 = $2 + 18 | 0;
   $439 = $2 + 20 | 0;
   $440 = $2 + 22 | 0;
   $441 = $2 + 24 | 0;
   $442 = $2 + 26 | 0;
   $443 = $2 + 28 | 0;
   $444 = $2 + 30 | 0;
   $445 = $2 + 32 | 0;
   $446 = $2 + 34 | 0;
   $$2 = $0;
   $$23 = 0;
   while (1) {
    if (($$23 | 0) >= ($5 | 0)) {
     $$3 = $$2;
     break;
    }
    $449 = $1 + ($$23 >> 16 << 2) | 0;
    $453 = (HEAP32[$449 >> 2] | 0) + (HEAP32[$449 + 140 >> 2] | 0) | 0;
    $456 = HEAP16[$2 >> 1] | 0;
    $461 = (Math_imul($453 >> 16, $456) | 0) + ((Math_imul($453 & 65535, $456) | 0) >> 16) | 0;
    $466 = (HEAP32[$449 + 4 >> 2] | 0) + (HEAP32[$449 + 136 >> 2] | 0) | 0;
    $469 = HEAP16[$430 >> 1] | 0;
    $475 = $461 + ((Math_imul($466 >> 16, $469) | 0) + ((Math_imul($466 & 65535, $469) | 0) >> 16)) | 0;
    $480 = (HEAP32[$449 + 8 >> 2] | 0) + (HEAP32[$449 + 132 >> 2] | 0) | 0;
    $483 = HEAP16[$431 >> 1] | 0;
    $489 = $475 + ((Math_imul($480 >> 16, $483) | 0) + ((Math_imul($480 & 65535, $483) | 0) >> 16)) | 0;
    $494 = (HEAP32[$449 + 12 >> 2] | 0) + (HEAP32[$449 + 128 >> 2] | 0) | 0;
    $497 = HEAP16[$432 >> 1] | 0;
    $503 = $489 + ((Math_imul($494 >> 16, $497) | 0) + ((Math_imul($494 & 65535, $497) | 0) >> 16)) | 0;
    $508 = (HEAP32[$449 + 16 >> 2] | 0) + (HEAP32[$449 + 124 >> 2] | 0) | 0;
    $511 = HEAP16[$433 >> 1] | 0;
    $517 = $503 + ((Math_imul($508 >> 16, $511) | 0) + ((Math_imul($508 & 65535, $511) | 0) >> 16)) | 0;
    $522 = (HEAP32[$449 + 20 >> 2] | 0) + (HEAP32[$449 + 120 >> 2] | 0) | 0;
    $525 = HEAP16[$434 >> 1] | 0;
    $531 = $517 + ((Math_imul($522 >> 16, $525) | 0) + ((Math_imul($522 & 65535, $525) | 0) >> 16)) | 0;
    $536 = (HEAP32[$449 + 24 >> 2] | 0) + (HEAP32[$449 + 116 >> 2] | 0) | 0;
    $539 = HEAP16[$435 >> 1] | 0;
    $545 = $531 + ((Math_imul($536 >> 16, $539) | 0) + ((Math_imul($536 & 65535, $539) | 0) >> 16)) | 0;
    $550 = (HEAP32[$449 + 28 >> 2] | 0) + (HEAP32[$449 + 112 >> 2] | 0) | 0;
    $553 = HEAP16[$436 >> 1] | 0;
    $559 = $545 + ((Math_imul($550 >> 16, $553) | 0) + ((Math_imul($550 & 65535, $553) | 0) >> 16)) | 0;
    $564 = (HEAP32[$449 + 32 >> 2] | 0) + (HEAP32[$449 + 108 >> 2] | 0) | 0;
    $567 = HEAP16[$437 >> 1] | 0;
    $573 = $559 + ((Math_imul($564 >> 16, $567) | 0) + ((Math_imul($564 & 65535, $567) | 0) >> 16)) | 0;
    $578 = (HEAP32[$449 + 36 >> 2] | 0) + (HEAP32[$449 + 104 >> 2] | 0) | 0;
    $581 = HEAP16[$438 >> 1] | 0;
    $587 = $573 + ((Math_imul($578 >> 16, $581) | 0) + ((Math_imul($578 & 65535, $581) | 0) >> 16)) | 0;
    $592 = (HEAP32[$449 + 40 >> 2] | 0) + (HEAP32[$449 + 100 >> 2] | 0) | 0;
    $595 = HEAP16[$439 >> 1] | 0;
    $601 = $587 + ((Math_imul($592 >> 16, $595) | 0) + ((Math_imul($592 & 65535, $595) | 0) >> 16)) | 0;
    $606 = (HEAP32[$449 + 44 >> 2] | 0) + (HEAP32[$449 + 96 >> 2] | 0) | 0;
    $609 = HEAP16[$440 >> 1] | 0;
    $615 = $601 + ((Math_imul($606 >> 16, $609) | 0) + ((Math_imul($606 & 65535, $609) | 0) >> 16)) | 0;
    $620 = (HEAP32[$449 + 48 >> 2] | 0) + (HEAP32[$449 + 92 >> 2] | 0) | 0;
    $623 = HEAP16[$441 >> 1] | 0;
    $629 = $615 + ((Math_imul($620 >> 16, $623) | 0) + ((Math_imul($620 & 65535, $623) | 0) >> 16)) | 0;
    $634 = (HEAP32[$449 + 52 >> 2] | 0) + (HEAP32[$449 + 88 >> 2] | 0) | 0;
    $637 = HEAP16[$442 >> 1] | 0;
    $643 = $629 + ((Math_imul($634 >> 16, $637) | 0) + ((Math_imul($634 & 65535, $637) | 0) >> 16)) | 0;
    $648 = (HEAP32[$449 + 56 >> 2] | 0) + (HEAP32[$449 + 84 >> 2] | 0) | 0;
    $651 = HEAP16[$443 >> 1] | 0;
    $657 = $643 + ((Math_imul($648 >> 16, $651) | 0) + ((Math_imul($648 & 65535, $651) | 0) >> 16)) | 0;
    $662 = (HEAP32[$449 + 60 >> 2] | 0) + (HEAP32[$449 + 80 >> 2] | 0) | 0;
    $665 = HEAP16[$444 >> 1] | 0;
    $671 = $657 + ((Math_imul($662 >> 16, $665) | 0) + ((Math_imul($662 & 65535, $665) | 0) >> 16)) | 0;
    $676 = (HEAP32[$449 + 64 >> 2] | 0) + (HEAP32[$449 + 76 >> 2] | 0) | 0;
    $679 = HEAP16[$445 >> 1] | 0;
    $685 = $671 + ((Math_imul($676 >> 16, $679) | 0) + ((Math_imul($676 & 65535, $679) | 0) >> 16)) | 0;
    $690 = (HEAP32[$449 + 68 >> 2] | 0) + (HEAP32[$449 + 72 >> 2] | 0) | 0;
    $693 = HEAP16[$446 >> 1] | 0;
    $699 = $685 + ((Math_imul($690 >> 16, $693) | 0) + ((Math_imul($690 & 65535, $693) | 0) >> 16)) | 0;
    if (($699 | 0) > 2097119) $706 = 32767; else if (($699 | 0) < -2097184) $706 = -32768; else $706 = ($699 >> 5) + 1 >> 1;
    HEAP16[$$2 >> 1] = $706;
    $$2 = $$2 + 2 | 0;
    $$23 = $$23 + $6 | 0;
   }
   return $$3 | 0;
  }
 default:
  _celt_fatal(48340, 46293, 139);
 }
 return 0;
}

function _silk_Decode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$016 = 0, $$02 = 0, $$03$in = 0, $$04 = 0, $$08 = 0, $$117 = 0, $$16 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$218 = 0, $$27 = 0, $$3 = 0, $$311 = 0, $$319 = 0, $$4 = 0, $$412 = 0, $$420 = 0, $$513 = 0, $$521 = 0, $$614 = 0, $$622 = 0, $$715 = 0, $$pn = 0, $$pr = 0, $$pre$phi26Z2D = 0, $$pre$phi30Z2D = 0, $$pre17 = 0, $$pre19 = 0, $$pre21 = 0, $$pre22 = 0, $$sink12 = 0, $10 = 0, $103 = 0, $104 = 0, $11 = 0, $110 = 0, $118 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $148 = 0, $16 = 0, $165 = 0, $17 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $208 = 0, $220 = 0, $221 = 0, $223 = 0, $225 = 0, $23 = 0, $245 = 0, $25 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $267 = 0, $268 = 0, $270 = 0, $273 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $287 = 0, $302 = 0, $313 = 0, $336 = 0, $337 = 0, $338 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $58 = 0, $63 = 0, $65 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $81 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 $7 = sp + 660 | 0;
 $8 = sp + 656 | 0;
 $9 = sp + 648 | 0;
 $10 = sp + 640 | 0;
 $11 = sp;
 HEAP32[$7 >> 2] = 0;
 $12 = $10;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 $16 = $1 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($17 + -1 | 0) >>> 0 >= 2) _celt_fatal(43420, 43511, 107);
 L4 : do if (!$3) $25 = $17; else {
  $$08 = 0;
  $20 = $17;
  while (1) {
   if (($$08 | 0) >= ($20 | 0)) {
    $25 = $20;
    break L4;
   }
   HEAP32[$0 + ($$08 * 4264 | 0) + 2388 >> 2] = 0;
   $$08 = $$08 + 1 | 0;
   $20 = HEAP32[$16 >> 2] | 0;
  }
 } while (0);
 $23 = $0 + 8544 | 0;
 if (($25 | 0) > (HEAP32[$23 >> 2] | 0)) {
  _silk_init_decoder($0 + 4264 | 0);
  $28 = HEAP32[$16 >> 2] | 0;
 } else $28 = $25;
 if (($28 | 0) == 1) if ((HEAP32[$23 >> 2] | 0) == 2) $337 = (HEAP32[$1 + 12 >> 2] | 0) == ((HEAP32[$0 + 2316 >> 2] | 0) * 1e3 | 0); else $337 = 0; else $337 = 0;
 $38 = $0 + 2388 | 0;
 L17 : do if (!(HEAP32[$38 >> 2] | 0)) {
  $41 = $1 + 16 | 0;
  $42 = $1 + 12 | 0;
  $43 = $1 + 8 | 0;
  $$16 = 0;
  $$19 = 0;
  $45 = $28;
  L19 : while (1) {
   if (($$19 | 0) >= ($45 | 0)) {
    $$27 = $$16;
    $67 = $45;
    break L17;
   }
   switch (HEAP32[$41 >> 2] | 0) {
   case 0:
    {
     HEAP32[$0 + ($$19 * 4264 | 0) + 2392 >> 2] = 1;
     HEAP32[$0 + ($$19 * 4264 | 0) + 2324 >> 2] = 2;
     break;
    }
   case 10:
    {
     HEAP32[$0 + ($$19 * 4264 | 0) + 2392 >> 2] = 1;
     HEAP32[$0 + ($$19 * 4264 | 0) + 2324 >> 2] = 2;
     break;
    }
   case 20:
    {
     HEAP32[$0 + ($$19 * 4264 | 0) + 2392 >> 2] = 1;
     HEAP32[$0 + ($$19 * 4264 | 0) + 2324 >> 2] = 4;
     break;
    }
   case 40:
    {
     HEAP32[$0 + ($$19 * 4264 | 0) + 2392 >> 2] = 2;
     HEAP32[$0 + ($$19 * 4264 | 0) + 2324 >> 2] = 4;
     break;
    }
   case 60:
    {
     HEAP32[$0 + ($$19 * 4264 | 0) + 2392 >> 2] = 3;
     HEAP32[$0 + ($$19 * 4264 | 0) + 2324 >> 2] = 4;
     break;
    }
   default:
    {
     label = 20;
     break L19;
    }
   }
   $58 = HEAP32[$42 >> 2] >> 10;
   switch ($58 | 0) {
   case 15:
   case 11:
   case 7:
    break;
   default:
    {
     label = 23;
     break L19;
    }
   }
   $63 = $$16 + (_silk_decoder_set_fs($0 + ($$19 * 4264 | 0) | 0, $58 + 1 | 0, HEAP32[$43 >> 2] | 0) | 0) | 0;
   $$16 = $63;
   $$19 = $$19 + 1 | 0;
   $45 = HEAP32[$16 >> 2] | 0;
  }
  if ((label | 0) == 20) _celt_fatal(48340, 43511, 146); else if ((label | 0) == 23) _celt_fatal(48340, 43511, 152);
 } else {
  $$27 = 0;
  $67 = $28;
 } while (0);
 $65 = HEAP32[$1 >> 2] | 0;
 do if (($65 | 0) == 2) if (($67 | 0) == 2) {
  if ((HEAP32[$0 + 8540 >> 2] | 0) != 1) if ((HEAP32[$23 >> 2] | 0) != 1) {
   $79 = 2;
   break;
  }
  HEAP32[$0 + 8528 >> 2] = 0;
  HEAP32[$0 + 8536 >> 2] = 0;
  _memcpy($0 + 6696 | 0, $0 + 2432 | 0, 300) | 0;
  $79 = HEAP32[$1 >> 2] | 0;
 } else $79 = 2; else $79 = $65; while (0);
 HEAP32[$0 + 8540 >> 2] = $79;
 HEAP32[$23 >> 2] = HEAP32[$16 >> 2];
 $81 = $1 + 8 | 0;
 if (((HEAP32[$81 >> 2] | 0) + -8e3 | 0) >>> 0 > 4e4) {
  $$0 = -200;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $84 = ($2 | 0) == 1;
 L44 : do if (!$84) if (!(HEAP32[$38 >> 2] | 0)) {
  $$210 = 0;
  while (1) {
   $87 = HEAP32[$16 >> 2] | 0;
   if (($$210 | 0) >= ($87 | 0)) break;
   $89 = $0 + ($$210 * 4264 | 0) + 2392 | 0;
   $$016 = 0;
   while (1) {
    $91 = ($$016 | 0) < (HEAP32[$89 >> 2] | 0);
    $92 = _ec_dec_bit_logp($4, 1) | 0;
    if (!$91) break;
    HEAP32[$0 + ($$210 * 4264 | 0) + 2404 + ($$016 << 2) >> 2] = $92;
    $$016 = $$016 + 1 | 0;
   }
   HEAP32[$0 + ($$210 * 4264 | 0) + 2416 >> 2] = $92;
   $$210 = $$210 + 1 | 0;
  }
  $$311 = 0;
  $98 = $87;
  while (1) {
   if (($$311 | 0) >= ($98 | 0)) break;
   $99 = $0 + ($$311 * 4264 | 0) + 2420 | 0;
   HEAP32[$99 >> 2] = 0;
   HEAP32[$99 + 4 >> 2] = 0;
   HEAP32[$99 + 8 >> 2] = 0;
   L58 : do if (HEAP32[$0 + ($$311 * 4264 | 0) + 2416 >> 2] | 0) {
    $103 = $0 + ($$311 * 4264 | 0) + 2392 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    if (($104 | 0) == 1) {
     HEAP32[$99 >> 2] = 1;
     break;
    }
    $110 = (_ec_dec_icdf($4, HEAP32[39940 + ($104 + -2 << 2) >> 2] | 0, 8) | 0) + 1 | 0;
    $$pre19 = HEAP32[$103 >> 2] | 0;
    $$117 = 0;
    while (1) {
     if (($$117 | 0) >= ($$pre19 | 0)) break L58;
     HEAP32[$0 + ($$311 * 4264 | 0) + 2420 + ($$117 << 2) >> 2] = $110 >>> $$117 & 1;
     $$117 = $$117 + 1 | 0;
    }
   } while (0);
   $$311 = $$311 + 1 | 0;
   $98 = HEAP32[$16 >> 2] | 0;
  }
  if (!$2) {
   $118 = $0 + 2392 | 0;
   $119 = $0 + 6684 | 0;
   $$218 = 0;
   $338 = $98;
   while (1) {
    if (($$218 | 0) >= (HEAP32[$118 >> 2] | 0)) break L44;
    $122 = ($$218 | 0) == 0;
    $123 = $119 + ($$218 << 2) | 0;
    $124 = $$218 + -1 | 0;
    $$412 = 0;
    $126 = $338;
    while (1) {
     if (($$412 | 0) >= ($126 | 0)) break;
     if (!(HEAP32[$0 + ($$412 * 4264 | 0) + 2420 + ($$218 << 2) >> 2] | 0)) $$pre17 = $126; else {
      if (($126 | 0) == 2 & ($$412 | 0) == 0) {
       _silk_stereo_decode_pred($4, $10);
       if (!(HEAP32[$123 >> 2] | 0)) _silk_stereo_decode_mid_only($4, $7);
      }
      if ($122) label = 59; else if (!(HEAP32[$0 + ($$412 * 4264 | 0) + 2420 + ($124 << 2) >> 2] | 0)) label = 59; else $$02 = 2;
      if ((label | 0) == 59) {
       label = 0;
       $$02 = 0;
      }
      _silk_decode_indices($0 + ($$412 * 4264 | 0) | 0, $4, $$218, 1, $$02);
      _silk_decode_pulses($4, $11, HEAP8[$0 + ($$412 * 4264 | 0) + 2765 >> 0] | 0, HEAP8[$0 + ($$412 * 4264 | 0) + 2766 >> 0] | 0, HEAP32[$0 + ($$412 * 4264 | 0) + 2328 >> 2] | 0);
      $$pre17 = HEAP32[$16 >> 2] | 0;
     }
     $$412 = $$412 + 1 | 0;
     $126 = $$pre17;
    }
    $$218 = $$218 + 1 | 0;
    $338 = $126;
   }
  }
 } while (0);
 $148 = HEAP32[$16 >> 2] | 0;
 if (($148 | 0) == 2) {
  switch ($2 | 0) {
  case 0:
   {
    _silk_stereo_decode_pred($4, $10);
    if (!(HEAP32[$0 + 6668 + (HEAP32[$38 >> 2] << 2) >> 2] | 0)) label = 68; else label = 69;
    break;
   }
  case 2:
   {
    if ((HEAP32[$0 + 2420 + (HEAP32[$38 >> 2] << 2) >> 2] | 0) == 1) {
     _silk_stereo_decode_pred($4, $10);
     if (!(HEAP32[$0 + 6684 + (HEAP32[$38 >> 2] << 2) >> 2] | 0)) label = 68; else label = 69;
    } else label = 70;
    break;
   }
  default:
   label = 70;
  }
  L95 : do if ((label | 0) == 68) _silk_stereo_decode_mid_only($4, $7); else if ((label | 0) == 69) HEAP32[$7 >> 2] = 0; else if ((label | 0) == 70) {
   $165 = $0 + 8528 | 0;
   $$513 = 0;
   while (1) {
    if (($$513 | 0) == 2) break L95;
    HEAP32[$10 + ($$513 << 2) >> 2] = HEAP16[$165 + ($$513 << 1) >> 1];
    $$513 = $$513 + 1 | 0;
   }
  } while (0);
  $$pr = HEAP32[$16 >> 2] | 0;
  if (($$pr | 0) == 2) if (!(HEAP32[$7 >> 2] | 0)) if ((HEAP32[$0 + 8548 >> 2] | 0) == 1) {
   _memset($0 + 5548 | 0, 0, 1024) | 0;
   HEAP32[$0 + 6572 >> 2] = 100;
   HEAP8[$0 + 6576 >> 0] = 10;
   HEAP32[$0 + 8428 >> 2] = 0;
   HEAP32[$0 + 6640 >> 2] = 1;
   $185 = HEAP32[$16 >> 2] | 0;
  } else $185 = 2; else $185 = 2; else $185 = $$pr;
 } else $185 = $148;
 $184 = Math_imul(HEAP32[$1 + 12 >> 2] | 0, $185) | 0;
 $189 = ($184 | 0) < (Math_imul(HEAP32[$81 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 if ($189) {
  $190 = _llvm_stacksave() | 0;
  $$pn = $5 + (HEAP32[$0 + 2328 >> 2] << 1) | 0;
  $203 = $5;
  $336 = $190;
 } else {
  $194 = $0 + 2328 | 0;
  $197 = Math_imul($185, (HEAP32[$194 >> 2] | 0) + 2 | 0) | 0;
  $198 = _llvm_stacksave() | 0;
  $199 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($197 << 1) | 0) + 15 & -16) | 0;
  $$pn = $199 + (HEAP32[$194 >> 2] << 1) | 0;
  $203 = $199;
  $336 = $198;
 }
 $202 = $$pn + 4 | 0;
 HEAP32[$9 >> 2] = $203;
 $204 = $9 + 4 | 0;
 HEAP32[$204 >> 2] = $202;
 if (!$2) {
  $$03$in = (HEAP32[$7 >> 2] | 0) == 0;
  $$pre$phi26Z2D = $0 + 8548 | 0;
 } else {
  $208 = $0 + 8548 | 0;
  if (!(HEAP32[$208 >> 2] | 0)) {
   $$03$in = 1;
   $$pre$phi26Z2D = $208;
  } else if ((HEAP32[$16 >> 2] | 0) == 2 & ($2 | 0) == 2) {
   $$03$in = (HEAP32[$0 + 6684 + (HEAP32[$0 + 6652 >> 2] << 2) >> 2] | 0) == 1;
   $$pre$phi26Z2D = $208;
  } else {
   $$03$in = 0;
   $$pre$phi26Z2D = $208;
  }
 }
 $220 = ($2 | 0) == 2;
 $$3 = $$27;
 $$614 = 0;
 while (1) {
  $221 = HEAP32[$16 >> 2] | 0;
  if (($$614 | 0) >= ($221 | 0)) break;
  $223 = ($$614 | 0) == 0;
  if ($223 | $$03$in) {
   $225 = (HEAP32[$38 >> 2] | 0) - $$614 | 0;
   do if (($225 | 0) < 1) $$2 = 0; else {
    if ($220) {
     $$2 = (HEAP32[$0 + ($$614 * 4264 | 0) + 2420 + ($225 + -1 << 2) >> 2] | 0) == 0 ? 0 : 2;
     break;
    }
    if (!$223) if (HEAP32[$$pre$phi26Z2D >> 2] | 0) {
     $$2 = 1;
     break;
    }
    $$2 = 2;
   } while (0);
   $$4 = $$3 + (_silk_decode_frame($0 + ($$614 * 4264 | 0) | 0, $4, (HEAP32[$9 + ($$614 << 2) >> 2] | 0) + 4 | 0, $8, $2, $$2) | 0) | 0;
  } else {
   _memset((HEAP32[$9 + ($$614 << 2) >> 2] | 0) + 4 | 0, 0, HEAP32[$8 >> 2] << 1 | 0) | 0;
   $$4 = $$3;
  }
  $245 = $0 + ($$614 * 4264 | 0) + 2388 | 0;
  HEAP32[$245 >> 2] = (HEAP32[$245 >> 2] | 0) + 1;
  $$3 = $$4;
  $$614 = $$614 + 1 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 2 & ($221 | 0) == 2) {
  $253 = $0 + 2316 | 0;
  $255 = HEAP32[$8 >> 2] | 0;
  _silk_stereo_MS_to_LR($0 + 8528 | 0, $203, $202, $10, HEAP32[$253 >> 2] | 0, $255);
  $$pre$phi30Z2D = $253;
  $263 = $255;
 } else {
  $256 = $0 + 8532 | 0;
  $257 = HEAPU16[$256 >> 1] | HEAPU16[$256 + 2 >> 1] << 16;
  HEAP16[$203 >> 1] = $257;
  HEAP16[$203 + 2 >> 1] = $257 >>> 16;
  $258 = HEAP32[$8 >> 2] | 0;
  $259 = $203 + ($258 << 1) | 0;
  $260 = HEAPU16[$259 >> 1] | HEAPU16[$259 + 2 >> 1] << 16;
  HEAP16[$256 >> 1] = $260;
  HEAP16[$256 + 2 >> 1] = $260 >>> 16;
  $$pre$phi30Z2D = $0 + 2316 | 0;
  $263 = $258;
 }
 $262 = Math_imul($263, HEAP32[$81 >> 2] | 0) | 0;
 $267 = ($262 | 0) / ((HEAP32[$$pre$phi30Z2D >> 2] << 16 >> 16) * 1e3 | 0) | 0;
 HEAP32[$6 >> 2] = $267;
 $268 = HEAP32[$1 >> 2] | 0;
 if (($268 | 0) == 2) {
  $270 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($267 << 1) | 0) + 15 & -16) | 0;
  $$04 = $270;
 } else $$04 = $5;
 if ($189) {
  $273 = HEAP32[$0 + 2328 >> 2] | 0;
  $275 = Math_imul(HEAP32[$16 >> 2] | 0, $273 + 2 | 0) | 0;
  $276 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($275 << 1) | 0) + 15 & -16) | 0;
  _memcpy($276 | 0, $5 | 0, $275 << 1 | 0) | 0;
  HEAP32[$9 >> 2] = $276;
  HEAP32[$204 >> 2] = $276 + ($273 << 1) + 4;
  $302 = $276;
 } else $302 = $203;
 $$715 = 0;
 $$pre22 = $268;
 while (1) {
  $280 = HEAP32[$16 >> 2] | 0;
  if (($$715 | 0) >= ((($$pre22 | 0) < ($280 | 0) ? $$pre22 : $280) | 0)) break;
  _silk_resampler($0 + ($$715 * 4264 | 0) + 2432 | 0, $$04, (HEAP32[$9 + ($$715 << 2) >> 2] | 0) + 2 | 0, $263);
  $287 = HEAP32[$1 >> 2] | 0;
  if (($287 | 0) == 2) {
   $$319 = 0;
   while (1) {
    if (($$319 | 0) >= (HEAP32[$6 >> 2] | 0)) break;
    HEAP16[$5 + ($$715 + ($$319 << 1) << 1) >> 1] = HEAP16[$$04 + ($$319 << 1) >> 1] | 0;
    $$319 = $$319 + 1 | 0;
   }
   $$pre21 = HEAP32[$1 >> 2] | 0;
  } else $$pre21 = $287;
  $$715 = $$715 + 1 | 0;
  $$pre22 = $$pre21;
 }
 L155 : do if (($$pre22 | 0) == 2 & ($280 | 0) == 1) if ($337) {
  _silk_resampler($0 + 6696 | 0, $$04, $302 + 2 | 0, $263);
  $$420 = 0;
  while (1) {
   if (($$420 | 0) >= (HEAP32[$6 >> 2] | 0)) break L155;
   HEAP16[$5 + (($$420 << 1 | 1) << 1) >> 1] = HEAP16[$$04 + ($$420 << 1) >> 1] | 0;
   $$420 = $$420 + 1 | 0;
  }
 } else {
  $$521 = 0;
  while (1) {
   if (($$521 | 0) >= (HEAP32[$6 >> 2] | 0)) break L155;
   $313 = $$521 << 1;
   HEAP16[$5 + (($313 | 1) << 1) >> 1] = HEAP16[$5 + ($313 << 1) >> 1] | 0;
   $$521 = $$521 + 1 | 0;
  }
 } while (0);
 if ((HEAP32[$0 + 4164 >> 2] | 0) == 2) $$sink12 = Math_imul(HEAP32[$0 + 2308 >> 2] | 0, HEAP32[39800 + ((HEAP32[$$pre$phi30Z2D >> 2] | 0) + -8 >> 2 << 2) >> 2] | 0) | 0; else $$sink12 = 0;
 HEAP32[$1 + 20 >> 2] = $$sink12;
 L170 : do if ($84) {
  $$622 = 0;
  while (1) {
   if (($$622 | 0) >= (HEAP32[$23 >> 2] | 0)) break L170;
   HEAP8[$0 + ($$622 * 4264 | 0) + 2312 >> 0] = 10;
   $$622 = $$622 + 1 | 0;
  }
 } else HEAP32[$$pre$phi26Z2D >> 2] = HEAP32[$7 >> 2]; while (0);
 _llvm_stackrestore($336 | 0);
 $$0 = $$3;
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[12624] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[12625] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   HEAP32[12622] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 50520 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[12620] = HEAP32[12620] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 50784 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[12621] = HEAP32[12621] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    }
   } else if ((HEAP32[12624] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[12624] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
   } else if ((HEAP32[12624] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $113 = $2;
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[12626] | 0) == ($10 | 0)) {
   $124 = (HEAP32[12623] | 0) + $$1380 | 0;
   HEAP32[12623] = $124;
   HEAP32[12626] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[12625] | 0)) return;
   HEAP32[12625] = 0;
   HEAP32[12622] = 0;
   return;
  }
  if ((HEAP32[12625] | 0) == ($10 | 0)) {
   $132 = (HEAP32[12622] | 0) + $$1380 | 0;
   HEAP32[12622] = $132;
   HEAP32[12625] = $113;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$113 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 50520 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[12624] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[12620] = HEAP32[12620] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[12624] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[12624] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[12624] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 50784 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[12621] = HEAP32[12621] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[12624] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[12624] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[12624] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$113 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[12625] | 0)) {
   HEAP32[12622] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$113 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 50520 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[12620] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[12620] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[12624] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 50784 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[12621] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[12621] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[12624] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[12624] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[12628] | 0) + -1 | 0;
 HEAP32[12628] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 50936;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[12628] = -1;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[12624] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[12625] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[12622] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 50520 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[12620] = HEAP32[12620] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 50784 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[12621] = HEAP32[12621] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[12624] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[12624] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[12624] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[12624] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[12626] | 0) == ($2 | 0)) {
   $117 = (HEAP32[12623] | 0) + $$1416 | 0;
   HEAP32[12623] = $117;
   HEAP32[12626] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[12625] | 0)) return;
   HEAP32[12625] = 0;
   HEAP32[12622] = 0;
   return;
  }
  if ((HEAP32[12625] | 0) == ($2 | 0)) {
   $125 = (HEAP32[12622] | 0) + $$1416 | 0;
   HEAP32[12622] = $125;
   HEAP32[12625] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 50520 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[12620] = HEAP32[12620] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 50784 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[12621] = HEAP32[12621] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[12624] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[12624] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[12624] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[12625] | 0)) {
   HEAP32[12622] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 50520 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[12620] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[12620] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[12624] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 50784 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[12621] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[12621] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[12624] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[12624] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function _silk_PLC_conceal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$012 = 0, $$013 = 0, $$015 = 0, $$017 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$09 = 0, $$110 = 0, $$114 = 0, $$116 = 0, $$15 = 0, $$2 = 0, $$219 = 0, $$26 = 0, $$3 = 0, $$37 = 0, $$4 = 0, $$48 = 0, $$pn = 0, $$pre22 = 0, $$pre23 = 0, $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $121 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $131 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $161 = 0, $163 = 0, $166 = 0, $172 = 0, $174 = 0, $177 = 0, $183 = 0, $185 = 0, $188 = 0, $19 = 0, $194 = 0, $196 = 0, $199 = 0, $20 = 0, $205 = 0, $207 = 0, $21 = 0, $210 = 0, $223 = 0, $235 = 0, $246 = 0, $252 = 0, $253 = 0, $256 = 0, $259 = 0, $262 = 0, $265 = 0, $268 = 0, $271 = 0, $274 = 0, $277 = 0, $28 = 0, $280 = 0, $283 = 0, $284 = 0, $287 = 0, $288 = 0, $294 = 0, $3 = 0, $30 = 0, $301 = 0, $304 = 0, $311 = 0, $314 = 0, $321 = 0, $324 = 0, $331 = 0, $334 = 0, $341 = 0, $344 = 0, $351 = 0, $354 = 0, $361 = 0, $364 = 0, $371 = 0, $374 = 0, $381 = 0, $384 = 0, $391 = 0, $392 = 0, $393 = 0, $398 = 0, $4 = 0, $40 = 0, $402 = 0, $410 = 0, $411 = 0, $412 = 0, $418 = 0, $429 = 0, $437 = 0, $444 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $8 = 0, $86 = 0, $9 = 0, $96 = 0, $spec$select = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp;
 $8 = sp + 32 | 0;
 $9 = $0 + 2336 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $0 + 2328 | 0;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 + (HEAP32[$11 >> 2] | 0) << 2) | 0) + 15 & -16) | 0;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 HEAP32[$8 >> 2] = HEAP32[$0 + 4244 >> 2] >> 6;
 $19 = $0 + 4248 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $20 >> 6;
 HEAP32[$8 + 4 >> 2] = $21;
 if (HEAP32[$0 + 2376 >> 2] | 0) {
  dest = $0 + 4186 | 0;
  stop = dest + 32 | 0;
  do {
   HEAP16[dest >> 1] = 0;
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 $28 = $0 + 2332 | 0;
 $30 = $0 + 2324 | 0;
 _silk_PLC_energy($5, $3, $6, $4, $0 + 4 | 0, $8, HEAP32[$28 >> 2] | 0, HEAP32[$30 >> 2] | 0);
 $40 = HEAP32[$0 + 4256 >> 2] | 0;
 if ((HEAP32[$5 >> 2] >> HEAP32[$4 >> 2] | 0) < (HEAP32[$6 >> 2] >> HEAP32[$3 >> 2] | 0)) $$pn = _silk_max_int_251((Math_imul($40 + -1 | 0, HEAP32[$0 + 4260 >> 2] | 0) | 0) + -128 | 0) | 0; else $$pn = _silk_max_int_251((Math_imul($40, HEAP32[$0 + 4260 >> 2] | 0) | 0) + -128 | 0) | 0;
 $$03 = $0 + 4 + ($$pn << 2) | 0;
 $52 = $0 + 4176 | 0;
 $53 = $0 + 4228 | 0;
 $54 = HEAP16[$53 >> 1] | 0;
 $55 = $0 + 4160 | 0;
 $57 = _silk_min_int_252(HEAP32[$55 >> 2] | 0) | 0;
 $59 = HEAP16[40144 + ($57 << 1) >> 1] | 0;
 $60 = $0 + 4164 | 0;
 if ((HEAP32[$60 >> 2] | 0) == 2) $$017 = HEAP16[40148 + ($57 << 1) >> 1] | 0; else $$017 = HEAP16[40152 + ($57 << 1) >> 1] | 0;
 $69 = $0 + 4186 | 0;
 $70 = $0 + 2340 | 0;
 _silk_bwexpander($69, HEAP32[$70 >> 2] | 0, 64881);
 $72 = HEAP32[$70 >> 2] | 0;
 _memcpy($7 | 0, $69 | 0, $72 << 1 | 0) | 0;
 do if (!(HEAP32[$55 >> 2] | 0)) {
  if ((HEAP32[$60 >> 2] | 0) != 2) {
   $96 = (_silk_max_32(4194304, _silk_min_32_253(134217728, _silk_LPC_inverse_pred_gain_c($69, $72) | 0) | 0) | 0) << 3;
   $103 = (Math_imul($96 >> 16, $$017) | 0) + ((Math_imul($96 & 65528, $$017) | 0) >> 16) >> 14;
   $$2 = 16384;
   $$219 = $103;
   $114 = HEAP32[$70 >> 2] | 0;
   break;
  }
  $$0 = 16384;
  $$04 = 0;
  while (1) {
   if (($$04 | 0) == 5) break;
   $$0 = ($$0 & 65535) - (HEAPU16[$0 + 4176 + ($$04 << 1) >> 1] | 0) & 65535;
   $$04 = $$04 + 1 | 0;
  }
  $86 = (_silk_max_16($$0) | 0) << 16 >> 16;
  $$2 = (Math_imul($86, HEAP16[$0 + 4240 >> 1] | 0) | 0) >>> 14 & 65535;
  $$219 = $$017;
  $114 = $72;
 } else {
  $$2 = $54;
  $$219 = $$017;
  $114 = $72;
 } while (0);
 $104 = $0 + 4224 | 0;
 $105 = HEAP32[$104 >> 2] | 0;
 $106 = $0 + 4172 | 0;
 $110 = (HEAP32[$106 >> 2] >> 7) + 1 >> 1;
 $111 = HEAP32[$9 >> 2] | 0;
 $113 = $111 - $110 - $114 | 0;
 $115 = $113 + -2 | 0;
 if (($113 | 0) <= 2) _celt_fatal(44566, 44592, 294);
 _silk_LPC_analysis_filter($15 + ($115 << 1) | 0, $0 + 1348 + ($115 << 1) | 0, $7, $111 - $115 | 0, $114);
 $121 = _silk_INVERSE32_varQ_256(HEAP32[$19 >> 2] | 0) | 0;
 $spec$select = ($121 | 0) < 1073741823 ? $121 : 1073741823;
 $123 = HEAP32[$70 >> 2] | 0;
 $125 = HEAP32[$9 >> 2] | 0;
 $126 = $spec$select >> 16;
 $127 = $spec$select & 65535;
 $$15 = $115 + $123 | 0;
 while (1) {
  if (($$15 | 0) >= ($125 | 0)) break;
  $131 = HEAP16[$15 + ($$15 << 1) >> 1] | 0;
  HEAP32[$14 + ($$15 << 2) >> 2] = (Math_imul($126, $131) | 0) + ((Math_imul($127, $131) | 0) >> 16);
  $$15 = $$15 + 1 | 0;
 }
 $138 = $0 + 4178 | 0;
 $139 = $0 + 4180 | 0;
 $140 = $0 + 4182 | 0;
 $141 = $0 + 4184 | 0;
 $142 = $59 << 16 >> 16;
 $143 = $0 + 2765 | 0;
 $144 = $0 + 2316 | 0;
 $145 = $$219 << 16 >> 16;
 $$pre22 = HEAP32[$30 >> 2] | 0;
 $$011 = 0;
 $$012 = $110;
 $$013 = $111;
 $$015 = $105;
 $$3 = $$2;
 while (1) {
  if (($$011 | 0) >= ($$pre22 | 0)) break;
  $150 = $$3 << 16 >> 16;
  $$pre23 = HEAP32[$28 >> 2] | 0;
  $$02 = $14 + ($$013 - $$012 + 2 << 2) | 0;
  $$114 = $$013;
  $$116 = $$015;
  $$26 = 0;
  while (1) {
   if (($$26 | 0) >= ($$pre23 | 0)) break;
   $152 = HEAP32[$$02 >> 2] | 0;
   $155 = HEAP16[$52 >> 1] | 0;
   $161 = (Math_imul($152 >> 16, $155) | 0) + ((Math_imul($152 & 65535, $155) | 0) >> 16) + 2 | 0;
   $163 = HEAP32[$$02 + -4 >> 2] | 0;
   $166 = HEAP16[$138 >> 1] | 0;
   $172 = $161 + ((Math_imul($163 >> 16, $166) | 0) + ((Math_imul($163 & 65535, $166) | 0) >> 16)) | 0;
   $174 = HEAP32[$$02 + -8 >> 2] | 0;
   $177 = HEAP16[$139 >> 1] | 0;
   $183 = $172 + ((Math_imul($174 >> 16, $177) | 0) + ((Math_imul($174 & 65535, $177) | 0) >> 16)) | 0;
   $185 = HEAP32[$$02 + -12 >> 2] | 0;
   $188 = HEAP16[$140 >> 1] | 0;
   $194 = $183 + ((Math_imul($185 >> 16, $188) | 0) + ((Math_imul($185 & 65535, $188) | 0) >> 16)) | 0;
   $196 = HEAP32[$$02 + -16 >> 2] | 0;
   $199 = HEAP16[$141 >> 1] | 0;
   $205 = $194 + ((Math_imul($196 >> 16, $199) | 0) + ((Math_imul($196 & 65535, $199) | 0) >> 16)) | 0;
   $207 = (Math_imul($$116, 196314165) | 0) + 907633515 | 0;
   $210 = HEAP32[$$03 + ($207 >>> 25 << 2) >> 2] | 0;
   HEAP32[$14 + ($$114 << 2) >> 2] = $205 + ((Math_imul($210 >> 16, $150) | 0) + ((Math_imul($210 & 65535, $150) | 0) >> 16)) << 2;
   $$02 = $$02 + 4 | 0;
   $$114 = $$114 + 1 | 0;
   $$116 = $207;
   $$26 = $$26 + 1 | 0;
  }
  $$09 = 0;
  while (1) {
   if (($$09 | 0) == 5) break;
   $223 = $0 + 4176 + ($$09 << 1) | 0;
   HEAP16[$223 >> 1] = (Math_imul($142, HEAP16[$223 >> 1] | 0) | 0) >>> 15;
   $$09 = $$09 + 1 | 0;
  }
  if (!(HEAP8[$143 >> 0] | 0)) $$4 = $$3; else $$4 = (Math_imul($145, $150) | 0) >>> 15 & 65535;
  $235 = HEAP32[$106 >> 2] | 0;
  $246 = _silk_min_32_253($235 + ((($235 >> 16) * 655 | 0) + ((($235 & 65535) * 655 | 0) >>> 16)) | 0, (HEAP32[$144 >> 2] << 16 >> 16) * 4608 | 0) | 0;
  HEAP32[$106 >> 2] = $246;
  $$011 = $$011 + 1 | 0;
  $$012 = ($246 >> 7) + 1 >> 1;
  $$013 = $$114;
  $$015 = $$116;
  $$3 = $$4;
 }
 $252 = $14 + ($125 + -16 << 2) | 0;
 $253 = $0 + 1284 | 0;
 dest = $252;
 src = $253;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($123 | 0) <= 9) _celt_fatal(44603, 44592, 350);
 $256 = HEAP16[$7 >> 1] | 0;
 $259 = HEAP16[$7 + 2 >> 1] | 0;
 $262 = HEAP16[$7 + 4 >> 1] | 0;
 $265 = HEAP16[$7 + 6 >> 1] | 0;
 $268 = HEAP16[$7 + 8 >> 1] | 0;
 $271 = HEAP16[$7 + 10 >> 1] | 0;
 $274 = HEAP16[$7 + 12 >> 1] | 0;
 $277 = HEAP16[$7 + 14 >> 1] | 0;
 $280 = HEAP16[$7 + 16 >> 1] | 0;
 $283 = HEAP16[$7 + 18 >> 1] | 0;
 $284 = $21 << 16 >> 16;
 $287 = ($20 >> 21) + 1 >> 1;
 $$37 = 0;
 while (1) {
  $288 = HEAP32[$11 >> 2] | 0;
  if (($$37 | 0) >= ($288 | 0)) break;
  $294 = HEAP32[$252 + ($$37 + 15 << 2) >> 2] | 0;
  $301 = (HEAP32[$70 >> 2] >> 1) + ((Math_imul($294 >> 16, $256) | 0) + ((Math_imul($294 & 65535, $256) | 0) >> 16)) | 0;
  $304 = HEAP32[$252 + ($$37 + 14 << 2) >> 2] | 0;
  $311 = $301 + ((Math_imul($304 >> 16, $259) | 0) + ((Math_imul($304 & 65535, $259) | 0) >> 16)) | 0;
  $314 = HEAP32[$252 + ($$37 + 13 << 2) >> 2] | 0;
  $321 = $311 + ((Math_imul($314 >> 16, $262) | 0) + ((Math_imul($314 & 65535, $262) | 0) >> 16)) | 0;
  $324 = HEAP32[$252 + ($$37 + 12 << 2) >> 2] | 0;
  $331 = $321 + ((Math_imul($324 >> 16, $265) | 0) + ((Math_imul($324 & 65535, $265) | 0) >> 16)) | 0;
  $334 = HEAP32[$252 + ($$37 + 11 << 2) >> 2] | 0;
  $341 = $331 + ((Math_imul($334 >> 16, $268) | 0) + ((Math_imul($334 & 65535, $268) | 0) >> 16)) | 0;
  $344 = HEAP32[$252 + ($$37 + 10 << 2) >> 2] | 0;
  $351 = $341 + ((Math_imul($344 >> 16, $271) | 0) + ((Math_imul($344 & 65535, $271) | 0) >> 16)) | 0;
  $354 = HEAP32[$252 + ($$37 + 9 << 2) >> 2] | 0;
  $361 = $351 + ((Math_imul($354 >> 16, $274) | 0) + ((Math_imul($354 & 65535, $274) | 0) >> 16)) | 0;
  $364 = HEAP32[$252 + ($$37 + 8 << 2) >> 2] | 0;
  $371 = $361 + ((Math_imul($364 >> 16, $277) | 0) + ((Math_imul($364 & 65535, $277) | 0) >> 16)) | 0;
  $374 = HEAP32[$252 + ($$37 + 7 << 2) >> 2] | 0;
  $381 = $371 + ((Math_imul($374 >> 16, $280) | 0) + ((Math_imul($374 & 65535, $280) | 0) >> 16)) | 0;
  $384 = HEAP32[$252 + ($$37 + 6 << 2) >> 2] | 0;
  $391 = $381 + ((Math_imul($384 >> 16, $283) | 0) + ((Math_imul($384 & 65535, $283) | 0) >> 16)) | 0;
  $392 = HEAP32[$70 >> 2] | 0;
  $393 = $$37 + 16 | 0;
  $$01 = $391;
  $$110 = 10;
  while (1) {
   if (($$110 | 0) >= ($392 | 0)) break;
   $398 = HEAP32[$252 + ($393 - $$110 + -1 << 2) >> 2] | 0;
   $402 = HEAP16[$7 + ($$110 << 1) >> 1] | 0;
   $$01 = $$01 + ((Math_imul($398 >> 16, $402) | 0) + ((Math_imul($398 & 65535, $402) | 0) >> 16)) | 0;
   $$110 = $$110 + 1 | 0;
  }
  $410 = $252 + ($393 << 2) | 0;
  $411 = HEAP32[$410 >> 2] | 0;
  $412 = ($$01 | 0) > 134217727;
  $418 = $412 ? 2147483632 : (($$01 | 0) > -134217728 ? $$01 : -134217728) << 4;
  if (($411 + ($412 ? 2147483632 : (($$01 | 0) > -134217728 ? $$01 : -134217728) << 4) | 0) > -1) if (($411 & $418 | 0) < 0) $429 = -2147483648; else $429 = $411 + ($412 ? 2147483632 : (($$01 | 0) > -134217728 ? $$01 : -134217728) << 4) | 0; else if (($411 | $418 | 0) > -1) $429 = 2147483647; else $429 = $411 + ($412 ? 2147483632 : (($$01 | 0) > -134217728 ? $$01 : -134217728) << 4) | 0;
  HEAP32[$410 >> 2] = $429;
  $437 = (Math_imul($429 >> 16, $284) | 0) + ((Math_imul($429 & 65535, $284) | 0) >> 16) + (Math_imul($429, $287) | 0) | 0;
  if (($437 | 0) > 8388479) $444 = 32767; else if (($437 | 0) < -8388736) $444 = -32768; else $444 = ($437 >> 7) + 1 >> 1;
  HEAP16[$2 + ($$37 << 1) >> 1] = $444;
  $$37 = $$37 + 1 | 0;
 }
 dest = $253;
 src = $252 + ($288 << 2) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$104 >> 2] = $$015;
 HEAP16[$53 >> 1] = $$3;
 $$48 = 0;
 while (1) {
  if (($$48 | 0) == 4) break;
  HEAP32[$1 + ($$48 << 2) >> 2] = $$012;
  $$48 = $$48 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _interp_bits2pulses($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 $21 = $21 | 0;
 $22 = $22 | 0;
 $23 = $23 | 0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$011 = 0, $$013 = 0, $$014 = 0, $$015 = 0, $$019 = 0, $$021 = 0, $$023 = 0, $$025 = 0, $$027 = 0, $$04 = 0, $$07 = 0, $$08 = 0, $$1 = 0, $$11233 = 0, $$11234 = 0, $$116 = 0, $$120 = 0, $$16 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$217 = 0, $$318 = 0, $$330 = 0, $$4 = 0, $$431 = 0, $$5 = 0, $$532 = 0, $$6 = 0, $101 = 0, $120 = 0, $128 = 0, $132 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $168 = 0, $169 = 0, $174 = 0, $175 = 0, $182 = 0, $184 = 0, $188 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $204 = 0, $205 = 0, $208 = 0, $211 = 0, $212 = 0, $219 = 0, $220 = 0, $226 = 0, $229 = 0, $234 = 0, $24 = 0, $245 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $255 = 0, $256 = 0, $259 = 0, $26 = 0, $267 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $283 = 0, $29 = 0, $295 = 0, $298 = 0, $299 = 0, $301 = 0, $37 = 0, $43 = 0, $47 = 0, $49 = 0, $50 = 0, $58 = 0, $61 = 0, $62 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, $spec$select$pn = 0, $spec$select71 = 0, $spec$select74 = 0, $spec$select75 = 0, $spec$select76 = 0, $spec$select79 = 0, $spec$select80 = 0, label = 0;
 $24 = $18 << 3;
 $25 = ($18 | 0) > 1;
 $26 = $25 & 1;
 $$021 = 0;
 $$023 = 64;
 $$025 = 0;
 while (1) {
  if (($$021 | 0) == 6) break;
  $28 = $$025 + $$023 >> 1;
  $$015 = $2;
  $$027 = 0;
  $$08 = 0;
  while (1) {
   $29 = $$015 + -1 | 0;
   if (($$015 | 0) <= ($1 | 0)) break;
   $37 = (HEAP32[$4 + ($29 << 2) >> 2] | 0) + ((Math_imul($28, HEAP32[$5 + ($29 << 2) >> 2] | 0) | 0) >> 6) | 0;
   if (($$08 | 0) == 0 ? ($37 | 0) < (HEAP32[$6 + ($29 << 2) >> 2] | 0) : 0) {
    $$19 = 0;
    $spec$select$pn = ($37 | 0) < ($24 | 0) ? 0 : $24;
   } else {
    $43 = HEAP32[$7 + ($29 << 2) >> 2] | 0;
    $$19 = 1;
    $spec$select$pn = ($37 | 0) < ($43 | 0) ? $37 : $43;
   }
   $$015 = $29;
   $$027 = $$027 + $spec$select$pn | 0;
   $$08 = $$19;
  }
  $47 = ($$027 | 0) > ($8 | 0);
  $$021 = $$021 + 1 | 0;
  $$023 = $47 ? $28 : $$023;
  $$025 = $47 ? $$025 : $28;
 }
 $49 = $19 << 3;
 $$116 = $2;
 $$210 = 0;
 $$330 = 0;
 while (1) {
  $50 = $$116 + -1 | 0;
  if (($$116 | 0) <= ($1 | 0)) break;
  $58 = (HEAP32[$4 + ($50 << 2) >> 2] | 0) + ((Math_imul($$025, HEAP32[$5 + ($50 << 2) >> 2] | 0) | 0) >> 6) | 0;
  $61 = ($58 | 0) < (HEAP32[$6 + ($50 << 2) >> 2] | 0);
  $62 = ($$210 | 0) == 0;
  $$16 = $61 & $62 ? (($58 | 0) < ($24 | 0) ? 0 : $24) : $58;
  $65 = HEAP32[$7 + ($50 << 2) >> 2] | 0;
  $spec$select71 = ($$16 | 0) < ($65 | 0) ? $$16 : $65;
  HEAP32[$15 + ($50 << 2) >> 2] = $spec$select71;
  $$116 = $50;
  $$210 = ($61 & $62 ^ 1) & 1;
  $$330 = $$330 + $spec$select71 | 0;
 }
 $69 = $0 + 32 | 0;
 $70 = $24 + 8 | 0;
 $71 = ($21 | 0) == 0;
 $72 = $1 + 2 | 0;
 $$014 = $2;
 $$019 = $12;
 $$431 = $$330;
 while (1) {
  $73 = $$014 + -1 | 0;
  if (($73 | 0) <= ($3 | 0)) {
   label = 15;
   break;
  }
  $76 = $8 - $$431 | 0;
  $77 = HEAP32[$69 >> 2] | 0;
  $80 = HEAP16[$77 + ($$014 << 1) >> 1] | 0;
  $83 = HEAP16[$77 + ($1 << 1) >> 1] | 0;
  $84 = $80 - $83 | 0;
  $85 = _celt_udiv_156($76, $84) | 0;
  $87 = $76 - (Math_imul($84, $85) | 0) | 0;
  $90 = HEAP16[$77 + ($73 << 1) >> 1] | 0;
  $92 = $87 + ($83 - $90) | 0;
  $94 = $80 - $90 | 0;
  $95 = $15 + ($73 << 2) | 0;
  $96 = HEAP32[$95 >> 2] | 0;
  $99 = $96 + (Math_imul($85, $94) | 0) + (($92 | 0) > 0 ? $92 : 0) | 0;
  $101 = HEAP32[$6 + ($73 << 2) >> 2] | 0;
  if (($99 | 0) < ((($101 | 0) > ($70 | 0) ? $101 : $70) | 0)) {
   $$04 = $99;
   $$532 = $$431;
   $120 = $96;
  } else {
   if ($71) {
    if (_ec_dec_bit_logp($20, 1) | 0) {
     $$011 = $8;
     break;
    }
   } else {
    if (($$014 | 0) <= ($72 | 0)) {
     label = 20;
     break;
    }
    if (!(($73 | 0) > ($23 | 0) ? 1 : ($99 | 0) <= ((Math_imul(($$014 | 0) > 17 ? (($$014 | 0) > ($22 | 0) ? 9 : 7) : 0, $94) | 0) << $19 << 3 >> 4 | 0))) {
     label = 20;
     break;
    }
    _ec_enc_bit_logp($20, 0, 1);
   }
   $$04 = $99 + -8 | 0;
   $$532 = $$431 + 8 | 0;
   $120 = HEAP32[$95 >> 2] | 0;
  }
  if (($$019 | 0) > 0) $$120 = HEAPU8[20784 + ($73 - $1) >> 0] | 0; else $$120 = $$019;
  $128 = ($$04 | 0) < ($24 | 0);
  $$6 = $$532 - ($120 + $$019) + $$120 + ($128 ? 0 : $24) | 0;
  HEAP32[$95 >> 2] = $128 ? 0 : $24;
  $$014 = $73;
  $$019 = $$120;
  $$431 = $$6;
 }
 if ((label | 0) == 15) $$011 = $8 + $10 | 0; else if ((label | 0) == 20) {
  _ec_enc_bit_logp($20, 1, 1);
  $$011 = $8;
 }
 if (($$014 | 0) <= ($1 | 0)) _celt_fatal(42397, 42434, 391);
 do if (($$019 | 0) > 0) if ($71) {
  $140 = (_ec_dec_uint($20, $$014 + 1 - $1 | 0) | 0) + $1 | 0;
  HEAP32[$11 >> 2] = $140;
  $141 = $140;
  break;
 } else {
  $132 = HEAP32[$11 >> 2] | 0;
  $spec$select74 = ($132 | 0) < ($$014 | 0) ? $132 : $$014;
  HEAP32[$11 >> 2] = $spec$select74;
  _ec_enc_uint($20, $spec$select74 - $1 | 0, $$014 + 1 - $1 | 0);
  $141 = HEAP32[$11 >> 2] | 0;
  break;
 } else {
  HEAP32[$11 >> 2] = 0;
  $141 = 0;
 } while (0);
 do if (($141 | 0) > ($1 | 0)) if (($14 | 0) > 0) if ($71) {
  HEAP32[$13 >> 2] = _ec_dec_bit_logp($20, 1) | 0;
  $$11233 = $$011;
  break;
 } else {
  _ec_enc_bit_logp($20, HEAP32[$13 >> 2] | 0, 1);
  $$11233 = $$011;
  break;
 } else {
  $$11234 = $$011;
  label = 40;
 } else {
  $$11234 = $$011 + $14 | 0;
  label = 40;
 } while (0);
 if ((label | 0) == 40) {
  HEAP32[$13 >> 2] = 0;
  $$11233 = $$11234;
 }
 $147 = $$11233 - $$431 | 0;
 $148 = HEAP32[$69 >> 2] | 0;
 $155 = (HEAP16[$148 + ($$014 << 1) >> 1] | 0) - (HEAP16[$148 + ($1 << 1) >> 1] | 0) | 0;
 $156 = _celt_udiv_156($147, $155) | 0;
 $157 = Math_imul($155, $156) | 0;
 $$217 = $1;
 while (1) {
  if (($$217 | 0) >= ($$014 | 0)) break;
  $159 = HEAP32[$69 >> 2] | 0;
  $160 = $$217 + 1 | 0;
  $168 = Math_imul($156, (HEAP16[$159 + ($160 << 1) >> 1] | 0) - (HEAP16[$159 + ($$217 << 1) >> 1] | 0) | 0) | 0;
  $169 = $15 + ($$217 << 2) | 0;
  HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $168;
  $$217 = $160;
 }
 $$013 = $147 - $157 | 0;
 $$318 = $1;
 while (1) {
  if (($$318 | 0) >= ($$014 | 0)) break;
  $174 = HEAP32[$69 >> 2] | 0;
  $175 = $$318 + 1 | 0;
  $182 = (HEAP16[$174 + ($175 << 1) >> 1] | 0) - (HEAP16[$174 + ($$318 << 1) >> 1] | 0) | 0;
  $spec$select75 = ($$013 | 0) < ($182 | 0) ? $$013 : $182;
  $184 = $15 + ($$318 << 2) | 0;
  HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $spec$select75;
  $$013 = $$013 - $spec$select75 | 0;
  $$318 = $175;
 }
 $188 = ($18 | 0) == 2;
 $189 = $25 ? 4 : 3;
 $190 = $0 + 56 | 0;
 $$07 = 0;
 $$4 = $1;
 while (1) {
  if (($$4 | 0) >= ($$014 | 0)) {
   label = 72;
   break;
  }
  $192 = $15 + ($$4 << 2) | 0;
  $193 = HEAP32[$192 >> 2] | 0;
  if (($193 | 0) <= -1) {
   label = 50;
   break;
  }
  $195 = HEAP32[$69 >> 2] | 0;
  $196 = $$4 + 1 | 0;
  $204 = (HEAP16[$195 + ($196 << 1) >> 1] | 0) - (HEAP16[$195 + ($$4 << 1) >> 1] | 0) << $19;
  $205 = $193 + $$07 | 0;
  if (($204 | 0) > 1) {
   $208 = HEAP32[$7 + ($$4 << 2) >> 2] | 0;
   $spec$select76 = ($205 | 0) > ($208 | 0) ? $205 - $208 | 0 : 0;
   $211 = $205 - $spec$select76 | 0;
   HEAP32[$192 >> 2] = $211;
   $212 = Math_imul($204, $18) | 0;
   if ($188 & ($204 | 0) != 2) if (!(HEAP32[$13 >> 2] | 0)) $219 = ($$4 | 0) < (HEAP32[$11 >> 2] | 0); else $219 = 0; else $219 = 0;
   $220 = $212 + ($219 & 1) | 0;
   $226 = Math_imul($220, $49 + (HEAP16[(HEAP32[$190 >> 2] | 0) + ($$4 << 1) >> 1] | 0) | 0) | 0;
   $229 = ($226 >> 1) + (Math_imul($220, -21) | 0) | 0;
   if (($204 | 0) == 2) $$01 = $229 + ($220 << 3 >> 2) | 0; else $$01 = $229;
   $234 = $211 + $$01 | 0;
   if (($234 | 0) < ($220 << 4 | 0)) $$2 = $$01 + ($226 >> 2) | 0; else if (($234 | 0) < ($220 * 24 | 0)) $$2 = $$01 + ($226 >> 3) | 0; else $$2 = $$01;
   $245 = $211 + $$2 + ($220 << 2) | 0;
   $248 = (_celt_udiv_156(($245 | 0) > 0 ? $245 : 0, $220) | 0) >>> 3;
   $249 = $16 + ($$4 << 2) | 0;
   HEAP32[$249 >> 2] = $248;
   $250 = Math_imul($248, $18) | 0;
   $251 = HEAP32[$192 >> 2] | 0;
   if (($250 | 0) > ($251 >> 3 | 0)) {
    $255 = $251 >> $26 >> 3;
    HEAP32[$249 >> 2] = $255;
    $256 = $255;
   } else $256 = $248;
   $spec$select79 = ($256 | 0) < 8 ? $256 : 8;
   HEAP32[$249 >> 2] = $spec$select79;
   $259 = Math_imul($spec$select79, $220 << 3) | 0;
   HEAP32[$17 + ($$4 << 2) >> 2] = ($259 | 0) >= ((HEAP32[$192 >> 2] | 0) + $$2 | 0) & 1;
   $267 = (Math_imul(HEAP32[$249 >> 2] | 0, $18) | 0) << 3;
   HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) - $267;
   $$0 = $spec$select76;
  } else {
   $spec$select80 = ($205 | 0) < ($24 | 0) ? 0 : $205 - $24 | 0;
   HEAP32[$192 >> 2] = $205 - $spec$select80;
   HEAP32[$16 + ($$4 << 2) >> 2] = 0;
   HEAP32[$17 + ($$4 << 2) >> 2] = 1;
   $$0 = $spec$select80;
  }
  if (!$$0) $$1 = $$0; else {
   $276 = $$0 >>> $189;
   $277 = $16 + ($$4 << 2) | 0;
   $278 = HEAP32[$277 >> 2] | 0;
   $279 = 8 - $278 | 0;
   $$ = ($276 | 0) < ($279 | 0) ? $276 : $279;
   HEAP32[$277 >> 2] = $278 + $$;
   $283 = (Math_imul($$, $18) | 0) << 3;
   HEAP32[$17 + ($$4 << 2) >> 2] = ($283 | 0) >= ($$0 - $$07 | 0) & 1;
   $$1 = $$0 - $283 | 0;
  }
  if ((HEAP32[$192 >> 2] | 0) <= -1) {
   label = 68;
   break;
  }
  if ((HEAP32[$16 + ($$4 << 2) >> 2] | 0) <= -1) {
   label = 70;
   break;
  }
  $$07 = $$1;
  $$4 = $196;
 }
 if ((label | 0) == 50) _celt_fatal(42446, 42434, 442); else if ((label | 0) == 68) _celt_fatal(42446, 42434, 513); else if ((label | 0) == 70) _celt_fatal(42477, 42434, 514); else if ((label | 0) == 72) {
  HEAP32[$9 >> 2] = $$07;
  $$5 = $$4;
  while (1) {
   if (($$5 | 0) >= ($2 | 0)) {
    label = 77;
    break;
   }
   $295 = $15 + ($$5 << 2) | 0;
   $298 = HEAP32[$295 >> 2] >> $26 >> 3;
   $299 = $16 + ($$5 << 2) | 0;
   HEAP32[$299 >> 2] = $298;
   $301 = (Math_imul($298, $18) | 0) << 3;
   if (($301 | 0) != (HEAP32[$295 >> 2] | 0)) {
    label = 75;
    break;
   }
   HEAP32[$295 >> 2] = 0;
   HEAP32[$17 + ($$5 << 2) >> 2] = (HEAP32[$299 >> 2] | 0) < 1 & 1;
   $$5 = $$5 + 1 | 0;
  }
  if ((label | 0) == 75) _celt_fatal(42509, 42434, 524); else if ((label | 0) == 77) return $$014 | 0;
 }
 return 0;
}

function _silk_stereo_LR_to_MS($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$16 = 0, $$27 = 0, $$38 = 0, $$4$ph = 0, $$440$ph = 0, $$44044 = 0, $$44045 = 0, $$441 = 0, $$49 = 0, $$pre$phi51Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $138 = 0, $14 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $18 = 0, $190 = 0, $191 = 0, $204 = 0, $206 = 0, $21 = 0, $218 = 0, $221 = 0, $228 = 0, $233 = 0, $236 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $25 = 0, $250 = 0, $254 = 0, $255 = 0, $26 = 0, $262 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $284 = 0, $287 = 0, $289 = 0, $294 = 0, $301 = 0, $309 = 0, $316 = 0, $323 = 0, $327 = 0, $328 = 0, $330 = 0, $332 = 0, $34 = 0, $341 = 0, $344 = 0, $346 = 0, $350 = 0, $369 = 0, $376 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $59 = 0, $61 = 0, $67 = 0, $75 = 0, $76 = 0, $79 = 0, $85 = 0, $87 = 0, $93 = 0, $spec$select = 0, $spec$select52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = $1 + -4 | 0;
 $15 = $10 + 2 | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 1) | 0) + 15 & -16) | 0;
 $$05 = 0;
 while (1) {
  if (($$05 | 0) >= ($15 | 0)) break;
  $18 = $$05 + -2 | 0;
  $21 = HEAP16[$1 + ($18 << 1) >> 1] | 0;
  $24 = HEAP16[$2 + ($18 << 1) >> 1] | 0;
  $25 = $21 + $24 | 0;
  $26 = $21 - $24 | 0;
  HEAP16[$14 + ($$05 << 1) >> 1] = ($25 >>> 1) + ($25 & 1);
  $34 = ($26 >> 1) + ($26 & 1) | 0;
  $spec$select = ($34 | 0) > -32768 ? $34 : -32768;
  HEAP16[$16 + ($$05 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
  $$05 = $$05 + 1 | 0;
 }
 $41 = $0 + 4 | 0;
 $42 = HEAPU16[$41 >> 1] | HEAPU16[$41 + 2 >> 1] << 16;
 HEAP16[$14 >> 1] = $42;
 HEAP16[$14 + 2 >> 1] = $42 >>> 16;
 $43 = $0 + 8 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 HEAP32[$16 >> 2] = $44;
 $45 = $14 + ($10 << 1) | 0;
 $46 = HEAPU16[$45 >> 1] | HEAPU16[$45 + 2 >> 1] << 16;
 HEAP16[$41 >> 1] = $46;
 HEAP16[$41 + 2 >> 1] = $46 >>> 16;
 $47 = $16 + ($10 << 1) | 0;
 $48 = HEAPU16[$47 >> 1] | HEAPU16[$47 + 2 >> 1] << 16;
 HEAP16[$43 >> 1] = $48;
 HEAP16[$43 + 2 >> 1] = $48 >>> 16;
 $49 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $$16 = 0;
 while (1) {
  if (($$16 | 0) >= ($10 | 0)) break;
  $59 = $$16 + 1 | 0;
  $61 = HEAP16[$14 + ($59 << 1) >> 1] | 0;
  $67 = ((HEAP16[$14 + ($$16 << 1) >> 1] | 0) + (HEAP16[$1 + ($$16 << 1) >> 1] | 0) + ($61 << 16 >> 16 << 1) >> 1) + 1 >> 1;
  HEAP16[$49 + ($$16 << 1) >> 1] = $67;
  HEAP16[$50 + ($$16 << 1) >> 1] = ($61 & 65535) - $67;
  $$16 = $59;
 }
 $75 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $76 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 1) | 0) + 15 & -16) | 0;
 $$27 = 0;
 $79 = $44 & 65535;
 while (1) {
  if (($$27 | 0) >= ($10 | 0)) break;
  $85 = $$27 + 1 | 0;
  $87 = HEAP16[$16 + ($85 << 1) >> 1] | 0;
  $93 = (($79 << 16 >> 16) + (HEAP16[$16 + ($$27 + 2 << 1) >> 1] | 0) + ($87 << 16 >> 16 << 1) >> 1) + 1 >> 1;
  HEAP16[$75 + ($$27 << 1) >> 1] = $93;
  HEAP16[$76 + ($$27 << 1) >> 1] = ($87 & 65535) - $93;
  $$27 = $85;
  $79 = $87;
 }
 $101 = ($9 * 10 | 0) == ($10 | 0);
 $102 = $101 ? 328 : 655;
 $103 = $7 << 16 >> 16;
 $104 = Math_imul($103, $103) | 0;
 $110 = (Math_imul($104 >>> 16, $102) | 0) + ((Math_imul($104 & 65535, $102) | 0) >>> 16) | 0;
 $112 = _silk_stereo_find_predictor($12, $49, $75, $0 + 12 | 0, $10, $110) | 0;
 HEAP32[$11 >> 2] = $112;
 $114 = _silk_stereo_find_predictor($13, $50, $76, $0 + 20 | 0, $10, $110) | 0;
 $115 = $11 + 4 | 0;
 HEAP32[$115 >> 2] = $114;
 $120 = (HEAP32[$13 >> 2] | 0) + ((HEAP32[$12 >> 2] << 16 >> 16) * 3 | 0) | 0;
 $spec$select52 = ($120 | 0) < 65536 ? $120 : 65536;
 $123 = $6 - ($101 ? 1200 : 600) | 0;
 $$04 = ($123 | 0) > 1 ? $123 : 1;
 $127 = (($9 << 16 >> 16) * 600 | 0) + 2e3 | 0;
 $128 = $spec$select52 * 3 | 0;
 $130 = _silk_DIV32_varQ_377($$04, $128 + 851968 | 0, 19) | 0;
 HEAP32[$5 >> 2] = $130;
 if (($130 | 0) < ($127 | 0)) {
  HEAP32[$5 >> 2] = $127;
  $132 = $$04 - $127 | 0;
  HEAP32[$5 + 4 >> 2] = $132;
  $138 = $127 << 16 >> 16;
  $144 = _silk_DIV32_varQ_377(($132 << 1) - $127 | 0, (Math_imul($128 + 65536 >> 16, $138) | 0) + ((Math_imul($128 & 65535, $138) | 0) >> 16) | 0, 16) | 0;
  if (($144 | 0) > 16384) $$01 = 16384; else $$01 = ($144 | 0) > 0 ? $144 : 0;
 } else {
  HEAP32[$5 + 4 >> 2] = $$04 - $130;
  $$01 = 16384;
 }
 $149 = $0 + 28 | 0;
 $150 = HEAP16[$149 >> 1] | 0;
 $151 = $150 & 65535;
 $155 = $110 << 16 >> 16;
 HEAP16[$149 >> 1] = (Math_imul($$01 - ($150 << 16 >> 16) >> 16, $155) | 0) + ((Math_imul($$01 - $151 & 65535, $155) | 0) >>> 16) + $151;
 HEAP8[$4 >> 0] = 0;
 L18 : do if (!$8) {
  $168 = $$04 << 3;
  do if (!(HEAP16[$0 + 30 >> 1] | 0)) {
   if (($168 | 0) < ($127 * 13 | 0)) $$pre$phiZ2D = HEAP16[$149 >> 1] | 0; else {
    $173 = HEAP16[$149 >> 1] | 0;
    if (((Math_imul($spec$select52 >> 16, $173) | 0) + ((Math_imul($spec$select52 & 65535, $173) | 0) >> 16) | 0) < 819) $$pre$phiZ2D = $173; else {
     $204 = HEAP16[$149 >> 1] | 0;
     break;
    }
   }
   HEAP32[$11 >> 2] = (Math_imul($112 << 16 >> 16, $$pre$phiZ2D) | 0) >> 14;
   HEAP32[$115 >> 2] = (Math_imul($114 << 16 >> 16, $$pre$phiZ2D) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   HEAP32[$11 >> 2] = 0;
   HEAP32[$115 >> 2] = 0;
   HEAP32[$5 >> 2] = $$04;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP8[$4 >> 0] = 1;
   $$441 = 0;
   label = 30;
   break L18;
  } else {
   if (($168 | 0) < ($127 * 11 | 0)) $$pre$phi51Z2D = HEAP16[$149 >> 1] | 0; else {
    $190 = HEAP16[$149 >> 1] | 0;
    $191 = $190 << 16 >> 16;
    if (((Math_imul($spec$select52 >> 16, $191) | 0) + ((Math_imul($spec$select52 & 65535, $191) | 0) >> 16) | 0) < 328) $$pre$phi51Z2D = $191; else {
     $204 = $190;
     break;
    }
   }
   HEAP32[$11 >> 2] = (Math_imul($112 << 16 >> 16, $$pre$phi51Z2D) | 0) >> 14;
   HEAP32[$115 >> 2] = (Math_imul($114 << 16 >> 16, $$pre$phi51Z2D) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   HEAP32[$11 >> 2] = 0;
   HEAP32[$115 >> 2] = 0;
   $$4$ph = 0;
   label = 29;
   break L18;
  } while (0);
  if ($204 << 16 >> 16 > 15565) {
   _silk_stereo_quant_pred($11, $3);
   $$4$ph = 16384;
   label = 29;
   break;
  } else {
   $206 = $204 << 16 >> 16;
   HEAP32[$11 >> 2] = (Math_imul($112 << 16 >> 16, $206) | 0) >> 14;
   HEAP32[$115 >> 2] = (Math_imul($114 << 16 >> 16, $206) | 0) >> 14;
   _silk_stereo_quant_pred($11, $3);
   $$4$ph = HEAP16[$149 >> 1] | 0;
   label = 29;
   break;
  }
 } else {
  HEAP32[$11 >> 2] = 0;
  HEAP32[$115 >> 2] = 0;
  _silk_stereo_quant_pred($11, $3);
  $$4$ph = 0;
  label = 29;
 } while (0);
 if ((label | 0) == 29) if ((HEAP8[$4 >> 0] | 0) == 1) {
  $$441 = $$4$ph;
  label = 30;
 } else {
  HEAP16[$0 + 32 >> 1] = 0;
  $$440$ph = $$4$ph;
  label = 34;
 }
 do if ((label | 0) == 30) {
  $218 = $0 + 32 | 0;
  $221 = $10 - ($9 << 3) + (HEAPU16[$218 >> 1] | 0) | 0;
  HEAP16[$218 >> 1] = $221;
  if (($221 << 16 >> 16 | 0) < ($9 * 5 | 0)) {
   HEAP8[$4 >> 0] = 0;
   $$44045 = $$441;
   label = 35;
   break;
  } else {
   HEAP16[$218 >> 1] = 1e4;
   $$440$ph = $$441;
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 34) if (!(HEAP8[$4 >> 0] | 0)) {
  $$44045 = $$440$ph;
  label = 35;
 } else $$44044 = $$440$ph;
 if ((label | 0) == 35) {
  $228 = $5 + 4 | 0;
  if ((HEAP32[$228 >> 2] | 0) < 1) {
   HEAP32[$228 >> 2] = 1;
   HEAP32[$5 >> 2] = _silk_max_int_378($$04 + -1 | 0) | 0;
   $$44044 = $$44045;
  } else $$44044 = $$44045;
 }
 $233 = HEAP16[$0 >> 1] | 0;
 $236 = $0 + 2 | 0;
 $237 = HEAP16[$236 >> 1] | 0;
 $240 = $0 + 30 | 0;
 $241 = HEAP16[$240 >> 1] | 0;
 $242 = $241 << 16 >> 16;
 $244 = $9 << 3;
 $246 = HEAP32[$11 >> 2] | 0;
 $250 = (65536 / ($244 | 0) | 0) << 16 >> 16;
 $254 = ((Math_imul($246 - ($233 & 65535) << 16 >> 16, $250) | 0) >> 15) + 1 >> 1;
 $255 = HEAP32[$115 >> 2] | 0;
 $262 = ((Math_imul($255 - ($237 & 65535) << 16 >> 16, $250) | 0) >> 15) + 1 >> 1;
 $272 = (Math_imul($$44044 - $242 >> 16, $250) | 0) + ((Math_imul($$44044 - ($241 & 65535) & 65535, $250) | 0) >> 16) << 10;
 $$0 = $242 << 10;
 $$02 = 0 - ($237 << 16 >> 16) | 0;
 $$03 = 0 - ($233 << 16 >> 16) | 0;
 $$38 = 0;
 while (1) {
  if (($$38 | 0) >= ($244 | 0)) break;
  $274 = $$03 - $254 | 0;
  $275 = $$02 - $262 | 0;
  $276 = $$0 + $272 | 0;
  $284 = $$38 + 1 | 0;
  $287 = HEAP16[$14 + ($284 << 1) >> 1] | 0;
  $289 = (HEAP16[$14 + ($$38 << 1) >> 1] | 0) + (HEAP16[$1 + ($$38 << 1) >> 1] | 0) + ($287 << 1) | 0;
  $294 = HEAP16[$16 + ($284 << 1) >> 1] | 0;
  $301 = $274 << 16 >> 16;
  $309 = $275 << 16 >> 16;
  $316 = (Math_imul($276 >> 16, $294) | 0) + ((Math_imul($276 & 64512, $294) | 0) >> 16) + ((Math_imul($289 >> 7, $301) | 0) + ((Math_imul($289 << 9 & 65024, $301) | 0) >> 16)) + ((Math_imul($287 >> 5, $309) | 0) + ((Math_imul($287 << 11 & 63488, $309) | 0) >> 16)) | 0;
  if (($316 | 0) > 8388479) $323 = 32767; else if (($316 | 0) < -8388736) $323 = -32768; else $323 = ($316 >> 7) + 1 >> 1;
  HEAP16[$2 + ($$38 + -1 << 1) >> 1] = $323;
  $$0 = $276;
  $$02 = $275;
  $$03 = $274;
  $$38 = $284;
 }
 $327 = $$44044 >> 6;
 $328 = $$44044 << 10 & 64512;
 $330 = 0 - ($246 << 16) >> 16;
 $332 = 0 - ($255 << 16) >> 16;
 $$49 = $244;
 while (1) {
  if (($$49 | 0) >= ($10 | 0)) break;
  $341 = $$49 + 1 | 0;
  $344 = HEAP16[$14 + ($341 << 1) >> 1] | 0;
  $346 = (HEAP16[$14 + ($$49 << 1) >> 1] | 0) + (HEAP16[$1 + ($$49 << 1) >> 1] | 0) + ($344 << 1) | 0;
  $350 = HEAP16[$16 + ($341 << 1) >> 1] | 0;
  $369 = (Math_imul($327, $350) | 0) + ((Math_imul($328, $350) | 0) >> 16) + ((Math_imul($346 >> 7, $330) | 0) + ((Math_imul($346 << 9 & 65024, $330) | 0) >> 16)) + ((Math_imul($344 >> 5, $332) | 0) + ((Math_imul($344 << 11 & 63488, $332) | 0) >> 16)) | 0;
  if (($369 | 0) > 8388479) $376 = 32767; else if (($369 | 0) < -8388736) $376 = -32768; else $376 = ($369 >> 7) + 1 >> 1;
  HEAP16[$2 + ($$49 + -1 << 1) >> 1] = $376;
  $$49 = $341;
 }
 HEAP16[$0 >> 1] = $246;
 HEAP16[$236 >> 1] = $255;
 HEAP16[$240 >> 1] = $$44044;
 STACKTOP = sp;
 return;
}

function _dynalloc_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 $19 = $19 | 0;
 $20 = $20 | 0;
 var $$010 = 0, $$012 = 0, $$03 = 0, $$05 = 0.0, $$07 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$111 = 0, $$113 = 0, $$12 = 0, $$1215 = 0, $$13 = 0, $$14 = 0, $$1416 = 0, $$15 = 0, $$16 = 0.0, $$1617 = 0, $$17 = 0, $$1818 = 0, $$19 = 0, $$2 = 0, $$214 = 0, $$29 = 0, $$3 = 0, $$4 = 0, $$49 = 0.0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$8$in = 0, $$9 = 0, $100 = 0.0, $101 = 0, $107 = 0.0, $108 = 0, $113 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $132 = 0.0, $139 = 0.0, $142 = 0.0, $146 = 0, $147 = 0.0, $150 = 0.0, $153 = 0.0, $154 = 0, $158 = 0, $159 = 0.0, $164 = 0.0, $168 = 0.0, $169 = 0.0, $172 = 0, $173 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $185 = 0, $186 = 0.0, $190 = 0, $191 = 0.0, $193 = 0.0, $199 = 0, $200 = 0, $201 = 0.0, $202 = 0, $204 = 0.0, $206 = 0.0, $207 = 0.0, $209 = 0.0, $21 = 0, $212 = 0.0, $218 = 0.0, $22 = 0, $227 = 0, $229 = 0.0, $23 = 0, $234 = 0, $235 = 0.0, $237 = 0.0, $242 = 0.0, $255 = 0, $259 = 0, $26 = 0.0, $265 = 0, $269 = 0, $277 = 0, $286 = 0, $287 = 0, $288 = 0, $290 = 0, $291 = 0.0, $293 = 0.0, $294 = 0, $303 = 0, $305 = 0, $310 = 0, $317 = 0, $322 = 0, $37 = 0, $44 = 0, $51 = 0.0, $57 = 0, $58 = 0, $59 = 0, $68 = 0, $70 = 0, $71 = 0.0, $77 = 0.0, $82 = 0, $83 = 0.0, $87 = 0.0, $90 = 0, $92 = 0, $93 = 0.0, $97 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $21 = Math_imul($5, $2) | 0;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 _memset($6 | 0, 0, $2 << 2 | 0) | 0;
 $26 = +(9 - $7 | 0);
 $$012 = 0;
 while (1) {
  if (($$012 | 0) >= ($4 | 0)) break;
  $37 = $$012 + 5 | 0;
  HEAPF32[$23 + ($$012 << 2) >> 2] = +(HEAP16[$8 + ($$012 << 1) >> 1] | 0) * .0625 + .5 + $26 - +HEAPF32[20304 + ($$012 << 2) >> 2] + +(Math_imul($37, $37) | 0) * .006200000178068876;
  $$012 = $$012 + 1 | 0;
 }
 $$010 = 0;
 $$05 = -31.899999618530273;
 while (1) {
  $44 = Math_imul($$010, $2) | 0;
  $$113 = 0;
  $$16 = $$05;
  while (1) {
   if (($$113 | 0) >= ($4 | 0)) break;
   $51 = +HEAPF32[$0 + ($44 + $$113 << 2) >> 2] - +HEAPF32[$23 + ($$113 << 2) >> 2];
   $$113 = $$113 + 1 | 0;
   $$16 = $$16 > $51 ? $$16 : $51;
  }
  $$010 = $$010 + 1 | 0;
  if (($$010 | 0) >= ($5 | 0)) break; else $$05 = $$16;
 }
 $57 = _llvm_stacksave() | 0;
 $58 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
 $59 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
 $$214 = 0;
 while (1) {
  if (($$214 | 0) >= ($4 | 0)) break;
  HEAPF32[$58 + ($$214 << 2) >> 2] = +HEAPF32[$0 + ($$214 << 2) >> 2] - +HEAPF32[$23 + ($$214 << 2) >> 2];
  $$214 = $$214 + 1 | 0;
 }
 $68 = ($5 | 0) == 2;
 L16 : do if ($68) {
  $$3 = 0;
  while (1) {
   if (($$3 | 0) >= ($4 | 0)) break L16;
   $70 = $58 + ($$3 << 2) | 0;
   $71 = +HEAPF32[$70 >> 2];
   $77 = +HEAPF32[$0 + ($$3 + $2 << 2) >> 2] - +HEAPF32[$23 + ($$3 << 2) >> 2];
   HEAPF32[$70 >> 2] = $71 > $77 ? $71 : $77;
   $$3 = $$3 + 1 | 0;
  }
 } while (0);
 _memcpy($59 | 0, $58 | 0, $4 << 2 | 0) | 0;
 $$4 = 1;
 while (1) {
  if (($$4 | 0) >= ($4 | 0)) break;
  $82 = $58 + ($$4 << 2) | 0;
  $83 = +HEAPF32[$82 >> 2];
  $87 = +HEAPF32[$58 + ($$4 + -1 << 2) >> 2] + -2.0;
  HEAPF32[$82 >> 2] = $83 > $87 ? $83 : $87;
  $$4 = $$4 + 1 | 0;
 }
 $90 = $4 + -2 | 0;
 $$5 = $90;
 while (1) {
  if (($$5 | 0) <= -1) break;
  $92 = $58 + ($$5 << 2) | 0;
  $93 = +HEAPF32[$92 >> 2];
  $97 = +HEAPF32[$58 + ($$5 + 1 << 2) >> 2] + -3.0;
  HEAPF32[$92 >> 2] = $93 > $97 ? $93 : $97;
  $$5 = $$5 + -1 | 0;
 }
 $100 = $$16 + -12.0;
 $101 = $100 < 0.0;
 $$6 = 0;
 while (1) {
  if (($$6 | 0) >= ($4 | 0)) break;
  $107 = +HEAPF32[$58 + ($$6 << 2) >> 2];
  $108 = !(($101 ? 0.0 : $100) > $107);
  $113 = ~~+Math_floor(+(+HEAPF32[$59 + ($$6 << 2) >> 2] - ($108 | $101 ? ($108 ? $107 : 0.0) : $100) + .5));
  HEAP32[$20 + ($$6 << 2) >> 2] = ($113 | 0) < -5 ? 1 : ($113 | 0) > 0 ? 32 : 32 >>> (0 - $113 | 0);
  $$6 = $$6 + 1 | 0;
 }
 _llvm_stackrestore($57 | 0);
 if (!(($14 | 0) > 50 & ($13 | 0) > 0 & ($16 | 0) == 0)) {
  $$19 = $3;
  while (1) {
   if (($$19 | 0) >= ($4 | 0)) {
    $$29 = 0;
    break;
   }
   HEAP32[$19 + ($$19 << 2) >> 2] = 13;
   $$19 = $$19 + 1 | 0;
  }
  HEAP32[$15 >> 2] = $$29;
  STACKTOP = sp;
  return +$$16;
 }
 $123 = $4 + -1 | 0;
 $$03 = 0;
 $$111 = 0;
 while (1) {
  $124 = Math_imul($$111, $2) | 0;
  $125 = $22 + ($124 << 2) | 0;
  $126 = $1 + ($124 << 2) | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  HEAP32[$125 >> 2] = $127;
  $$14 = $$03;
  $$7 = 1;
  $139 = (HEAP32[tempDoublePtr >> 2] = $127, +HEAPF32[tempDoublePtr >> 2]);
  while (1) {
   if (($$7 | 0) >= ($4 | 0)) break;
   $130 = $124 + $$7 | 0;
   $132 = +HEAPF32[$1 + ($130 << 2) >> 2];
   $$2 = $132 > +HEAPF32[$1 + ($130 + -1 << 2) >> 2] + .5 ? $$7 : $$14;
   $142 = $139 + 1.5 < $132 ? $139 + 1.5 : $132;
   HEAPF32[$125 + ($$7 << 2) >> 2] = $142;
   $$14 = $$2;
   $$7 = $$7 + 1 | 0;
   $139 = $142;
  }
  $$8$in = $$14;
  while (1) {
   $$8 = $$8$in + -1 | 0;
   if (($$8$in | 0) <= 0) break;
   $146 = $125 + ($$8 << 2) | 0;
   $147 = +HEAPF32[$146 >> 2];
   $150 = +HEAPF32[$125 + ($$8$in << 2) >> 2] + 2.0;
   $153 = +HEAPF32[$1 + ($124 + $$8 << 2) >> 2];
   $154 = $150 < $153;
   HEAPF32[$146 >> 2] = $147 < ($154 ? $150 : $153) ? $147 : $154 ? $150 : $153;
   $$8$in = $$8;
  }
  $$9 = 2;
  while (1) {
   if (($$9 | 0) >= ($90 | 0)) break;
   $158 = $125 + ($$9 << 2) | 0;
   $159 = +HEAPF32[$158 >> 2];
   $164 = +_median_of_5($1 + ($124 + $$9 + -2 << 2) | 0) + -1.0;
   HEAPF32[$158 >> 2] = $159 > $164 ? $159 : $164;
   $$9 = $$9 + 1 | 0;
  }
  $168 = +_median_of_3($126) + -1.0;
  $169 = +HEAPF32[$125 >> 2];
  HEAPF32[$125 >> 2] = $169 > $168 ? $169 : $168;
  $172 = $125 + 4 | 0;
  $173 = +HEAPF32[$172 >> 2];
  HEAPF32[$172 >> 2] = $173 > $168 ? $173 : $168;
  $180 = +_median_of_3($1 + ($124 + $4 + -3 << 2) | 0) + -1.0;
  $181 = $125 + ($90 << 2) | 0;
  $182 = +HEAPF32[$181 >> 2];
  HEAPF32[$181 >> 2] = $182 > $180 ? $182 : $180;
  $185 = $125 + ($123 << 2) | 0;
  $186 = +HEAPF32[$185 >> 2];
  HEAPF32[$185 >> 2] = $186 > $180 ? $186 : $180;
  $$10 = 0;
  while (1) {
   if (($$10 | 0) >= ($4 | 0)) break;
   $190 = $125 + ($$10 << 2) | 0;
   $191 = +HEAPF32[$190 >> 2];
   $193 = +HEAPF32[$23 + ($$10 << 2) >> 2];
   HEAPF32[$190 >> 2] = $191 > $193 ? $191 : $193;
   $$10 = $$10 + 1 | 0;
  }
  $$111 = $$111 + 1 | 0;
  if (($$111 | 0) >= ($5 | 0)) break; else $$03 = $$14;
 }
 L60 : do if ($68) {
  $$11 = $3;
  while (1) {
   if (($$11 | 0) >= ($4 | 0)) break L60;
   $199 = $$11 + $2 | 0;
   $200 = $22 + ($199 << 2) | 0;
   $201 = +HEAPF32[$200 >> 2];
   $202 = $22 + ($$11 << 2) | 0;
   $204 = +HEAPF32[$202 >> 2] + -4.0;
   $$49 = $201 > $204 ? $201 : $204;
   HEAPF32[$200 >> 2] = $$49;
   $206 = +HEAPF32[$202 >> 2];
   $207 = $$49 + -4.0;
   $209 = $206 > $207 ? $206 : $207;
   HEAPF32[$202 >> 2] = $209;
   $212 = +HEAPF32[$0 + ($$11 << 2) >> 2] - $209;
   $218 = +HEAPF32[$0 + ($199 << 2) >> 2] - +HEAPF32[$200 >> 2];
   HEAPF32[$202 >> 2] = (($212 < 0.0 ? 0.0 : $212) + ($218 < 0.0 ? 0.0 : $218)) * .5;
   $$11 = $$11 + 1 | 0;
  }
 } else {
  $$1215 = $3;
  while (1) {
   if (($$1215 | 0) >= ($4 | 0)) break L60;
   $227 = $22 + ($$1215 << 2) | 0;
   $229 = +HEAPF32[$0 + ($$1215 << 2) >> 2] - +HEAPF32[$227 >> 2];
   HEAPF32[$227 >> 2] = $229 < 0.0 ? 0.0 : $229;
   $$1215 = $$1215 + 1 | 0;
  }
 } while (0);
 $$13 = $3;
 while (1) {
  if (($$13 | 0) >= ($4 | 0)) break;
  $234 = $22 + ($$13 << 2) | 0;
  $235 = +HEAPF32[$234 >> 2];
  $237 = +HEAPF32[$17 + ($$13 << 2) >> 2];
  HEAPF32[$234 >> 2] = $235 > $237 ? $235 : $237;
  $$13 = $$13 + 1 | 0;
 }
 $$1416 = $3;
 while (1) {
  if (($$1416 | 0) >= ($4 | 0)) break;
  $242 = +HEAPF32[$22 + ($$1416 << 2) >> 2];
  HEAP32[$19 + ($$1416 << 2) >> 2] = ~~+Math_floor(+(+Math_exp(+(($242 < 4.0 ? $242 : 4.0) * .6931471805599453)) * 13.0 + .5));
  $$1416 = $$1416 + 1 | 0;
 }
 $255 = ($10 | 0) == 0;
 L78 : do if (($255 | ($11 | 0) != 0) & ($9 | 0) == 0) {
  $$15 = $3;
  while (1) {
   if (($$15 | 0) >= ($4 | 0)) break L78;
   $259 = $22 + ($$15 << 2) | 0;
   HEAPF32[$259 >> 2] = +HEAPF32[$259 >> 2] * .5;
   $$15 = $$15 + 1 | 0;
  }
 } while (0);
 $$1617 = $3;
 while (1) {
  if (($$1617 | 0) >= ($4 | 0)) break;
  if (($$1617 | 0) < 8) {
   $265 = $22 + ($$1617 << 2) | 0;
   HEAPF32[$265 >> 2] = +HEAPF32[$265 >> 2] * 2.0;
  } else if (($$1617 | 0) > 11) {
   $269 = $22 + ($$1617 << 2) | 0;
   HEAPF32[$269 >> 2] = +HEAPF32[$269 >> 2] * .5;
  }
  $$1617 = $$1617 + 1 | 0;
 }
 L93 : do if (HEAP32[$18 >> 2] | 0) {
  $$17 = $3;
  while (1) {
   if (($$17 | 0) >= ((($4 | 0) < 19 ? $4 : 19) | 0)) break L93;
   $277 = $22 + ($$17 << 2) | 0;
   HEAPF32[$277 >> 2] = +HEAPF32[$277 >> 2] + +(HEAPU8[$18 + 44 + $$17 >> 0] | 0) * .015625;
   $$17 = $$17 + 1 | 0;
  }
 } while (0);
 $286 = ($14 << 1 | 0) / 3 | 0;
 $287 = ($11 | 0) == 0;
 $288 = ($9 | 0) != 0;
 $$07 = 0;
 $$1818 = $3;
 while (1) {
  if (($$1818 | 0) >= ($4 | 0)) {
   $$29 = $$07;
   label = 82;
   break;
  }
  $290 = $22 + ($$1818 << 2) | 0;
  $291 = +HEAPF32[$290 >> 2];
  $293 = $291 < 4.0 ? $291 : 4.0;
  HEAPF32[$290 >> 2] = $293;
  $294 = $$1818 + 1 | 0;
  $303 = (Math_imul((HEAP16[$12 + ($294 << 1) >> 1] | 0) - (HEAP16[$12 + ($$1818 << 1) >> 1] | 0) | 0, $5) | 0) << $13;
  do if (($303 | 0) < 6) {
   $305 = ~~$293;
   $$1 = (Math_imul($303, $305) | 0) << 3;
   $$12 = $305;
  } else if (($303 | 0) > 48) {
   $310 = ~~($293 * 8.0);
   $$1 = ((Math_imul($303, $310) | 0) << 3 | 0) / 8 | 0;
   $$12 = $310;
   break;
  } else {
   $317 = ~~($293 * +($303 | 0) / 6.0);
   $$1 = $317 * 48 | 0;
   $$12 = $317;
   break;
  } while (0);
  if (!(($287 | $288) & ($255 ^ 1))) if (($$07 + $$1 >> 6 | 0) > ($286 | 0)) break;
  HEAP32[$6 + ($$1818 << 2) >> 2] = $$12;
  $$07 = $$07 + $$1 | 0;
  $$1818 = $294;
 }
 if ((label | 0) == 82) {
  HEAP32[$15 >> 2] = $$29;
  STACKTOP = sp;
  return +$$16;
 }
 $322 = $286 << 6;
 HEAP32[$6 + ($$1818 << 2) >> 2] = $322 - $$07;
 $$29 = $322;
 HEAP32[$15 >> 2] = $$29;
 STACKTOP = sp;
 return +$$16;
}

function _silk_NSQ_del_dec_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$015 = 0, $$02 = 0, $$020 = 0, $$022 = 0, $$026 = 0, $$03 = 0, $$04 = 0, $$07 = 0, $$112 = 0, $$121 = 0, $$123 = 0, $$127 = 0, $$2 = 0, $$217 = 0, $$224 = 0, $$228 = 0, $$26 = 0, $$29 = 0, $$314 = 0, $$325 = 0, $$329 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $113 = 0, $114 = 0, $117 = 0, $122 = 0, $125 = 0, $126 = 0, $130 = 0, $138 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $16 = 0, $163 = 0, $17 = 0, $170 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $194 = 0, $20 = 0, $208 = 0, $21 = 0, $215 = 0, $218 = 0, $219 = 0, $229 = 0, $23 = 0, $231 = 0, $234 = 0, $237 = 0, $24 = 0, $246 = 0, $249 = 0, $25 = 0, $257 = 0, $26 = 0, $264 = 0, $27 = 0, $28 = 0, $34 = 0, $49 = 0, $50 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $spec$select = 0, $spec$select48 = 0, $spec$select51 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $15 = sp + 160 | 0;
 $16 = sp;
 $17 = $1 + 4328 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $19 = $0 + 4628 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($20 * 1300 | 0) | 0) + 15 & -16) | 0;
 _memset($21 | 0, 0, $20 * 1300 | 0) | 0;
 $23 = $2 + 34 | 0;
 $24 = $1 + 4320 | 0;
 $25 = $1 + 4324 | 0;
 $26 = $0 + 4592 | 0;
 $27 = $1 + 3840 | 0;
 $28 = $1 + 4224 | 0;
 $$022 = 0;
 while (1) {
  if (($$022 | 0) >= ($20 | 0)) break;
  $34 = $$022 + (HEAPU8[$23 >> 0] | 0) & 3;
  HEAP32[$21 + ($$022 * 1300 | 0) + 1288 >> 2] = $34;
  HEAP32[$21 + ($$022 * 1300 | 0) + 1292 >> 2] = $34;
  HEAP32[$21 + ($$022 * 1300 | 0) + 1296 >> 2] = 0;
  HEAP32[$21 + ($$022 * 1300 | 0) + 1280 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$21 + ($$022 * 1300 | 0) + 1284 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$21 + ($$022 * 1300 | 0) + 1024 >> 2] = HEAP32[$1 + 1280 + ((HEAP32[$26 >> 2] | 0) + -1 << 2) >> 2];
  dest = $21 + ($$022 * 1300 | 0) | 0;
  src = $27;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $21 + ($$022 * 1300 | 0) + 1184 | 0;
  src = $28;
  stop = dest + 96 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$022 = $$022 + 1 | 0;
 }
 $49 = $2 + 29 | 0;
 $50 = HEAP8[$49 >> 0] | 0;
 $58 = HEAP16[40156 + ($50 << 24 >> 24 >> 1 << 2) + (HEAP8[$2 + 30 >> 0] << 1) >> 1] | 0;
 HEAP32[$15 >> 2] = 0;
 $59 = $0 + 4588 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = _silk_min_int_238(40, $60) | 0;
 L5 : do if ($50 << 24 >> 24 == 2) {
  $64 = HEAP32[$0 + 4580 >> 2] | 0;
  $$04 = $61;
  $$123 = 0;
  while (1) {
   if (($$123 | 0) >= ($64 | 0)) {
    $$26 = $$04;
    break L5;
   }
   $$04 = _silk_min_int_238($$04, (HEAP32[$12 + ($$123 << 2) >> 2] | 0) + -3 | 0) | 0;
   $$123 = $$123 + 1 | 0;
  }
 } else if (($18 | 0) > 0) $$26 = _silk_min_int_238($61, $18 + -3 | 0) | 0; else $$26 = $61; while (0);
 $spec$select = (HEAP8[$2 + 31 >> 0] | 0) != 4 & 1;
 $77 = HEAP32[$26 >> 2] | 0;
 $78 = $0 + 4584 | 0;
 $80 = $77 + (HEAP32[$78 >> 2] | 0) | 0;
 $81 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($80 << 2) | 0) + 15 & -16) | 0;
 $82 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($80 << 1) | 0) + 15 & -16) | 0;
 $83 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($60 << 2) | 0) + 15 & -16) | 0;
 $85 = $1 + 4336 | 0;
 HEAP32[$85 >> 2] = $77;
 $87 = $1 + 4332 | 0;
 HEAP32[$87 >> 2] = HEAP32[$26 >> 2];
 $88 = $0 + 4580 | 0;
 $89 = $spec$select ^ 1;
 $90 = $1 + 4348 | 0;
 $92 = $spec$select << 1 ^ 3;
 $93 = $0 + 4636 | 0;
 $94 = $0 + 4640 | 0;
 $95 = $0 + 4672 | 0;
 $96 = $21 + 1296 | 0;
 $97 = $11 + 4 | 0;
 $$01 = $3;
 $$011 = 0;
 $$02 = $4;
 $$020 = $18;
 $$03 = $1 + ($77 << 1) | 0;
 $$224 = 0;
 while (1) {
  if (($$224 | 0) >= (HEAP32[$88 >> 2] | 0)) break;
  $103 = $5 + (($$224 >>> 1 | $89) << 4 << 1) | 0;
  $105 = $6 + ($$224 * 5 << 1) | 0;
  $107 = $7 + ($$224 * 24 << 1) | 0;
  $109 = HEAP32[$8 + ($$224 << 2) >> 2] | 0;
  $113 = $109 >> 2 | $109 >>> 1 << 16;
  HEAP32[$90 >> 2] = 0;
  $114 = HEAP8[$49 >> 0] | 0;
  if ($114 << 24 >> 24 == 2) {
   $117 = HEAP32[$12 + ($$224 << 2) >> 2] | 0;
   if (!($$224 & $92)) {
    L19 : do if (($$224 | 0) == 2) {
     $122 = HEAP32[$19 >> 2] | 0;
     $$0 = HEAP32[$96 >> 2] | 0;
     $$015 = 0;
     $$026 = 1;
     while (1) {
      if (($$026 | 0) >= ($122 | 0)) break;
      $125 = HEAP32[$21 + ($$026 * 1300 | 0) + 1296 >> 2] | 0;
      $126 = ($125 | 0) < ($$0 | 0);
      $$0 = $126 ? $125 : $$0;
      $$015 = $126 ? $$026 : $$015;
      $$026 = $$026 + 1 | 0;
     }
     $$127 = 0;
     while (1) {
      if (($$127 | 0) >= ($122 | 0)) break;
      if (($$127 | 0) != ($$015 | 0)) {
       $130 = $21 + ($$127 * 1300 | 0) + 1296 | 0;
       HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 134217727;
      }
      $$127 = $$127 + 1 | 0;
     }
     $$07 = (HEAP32[$15 >> 2] | 0) + $$26 | 0;
     $$228 = 0;
     while (1) {
      if (($$228 | 0) >= ($$26 | 0)) {
       $$112 = 0;
       break L19;
      }
      $138 = ($$07 + -1 | 0) % 40 | 0;
      $spec$select48 = ($138 | 0) < 0 ? $138 + 40 | 0 : $138;
      $147 = $$228 - $$26 | 0;
      HEAP8[$$02 + $147 >> 0] = (((HEAP32[$21 + ($$015 * 1300 | 0) + 544 + ($spec$select48 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
      $150 = HEAP32[$21 + ($$015 * 1300 | 0) + 704 + ($spec$select48 << 2) >> 2] | 0;
      $152 = HEAP32[$97 >> 2] | 0;
      $153 = $152 << 16 >> 16;
      $163 = (Math_imul($150 >> 16, $153) | 0) + ((Math_imul($150 & 65535, $153) | 0) >> 16) + (Math_imul($150, ($152 >> 15) + 1 >> 1) | 0) | 0;
      if (($163 | 0) > 536862719) $170 = 32767; else if (($163 | 0) < -536879104) $170 = -32768; else $170 = ($163 >> 13) + 1 >> 1;
      HEAP16[$$03 + ($147 << 1) >> 1] = $170;
      HEAP32[$1 + 1280 + ((HEAP32[$85 >> 2] | 0) - $$26 + $$228 << 2) >> 2] = HEAP32[$21 + ($$015 * 1300 | 0) + 1024 + ($spec$select48 << 2) >> 2];
      $$07 = $spec$select48;
      $$228 = $$228 + 1 | 0;
     }
    } else $$112 = $$011; while (0);
    $179 = HEAP32[$26 >> 2] | 0;
    $181 = HEAP32[$94 >> 2] | 0;
    $182 = $179 - $117 - $181 | 0;
    $183 = $182 + -2 | 0;
    if (($182 | 0) <= 2) {
     label = 30;
     break;
    }
    _silk_LPC_analysis_filter($82 + ($183 << 1) | 0, $1 + ($183 + (Math_imul($$224, HEAP32[$59 >> 2] | 0) | 0) << 1) | 0, $103, $179 - $183 | 0, $181);
    HEAP32[$87 >> 2] = HEAP32[$26 >> 2];
    HEAP32[$90 >> 2] = 1;
    $$121 = $117;
    $$314 = $$112;
    $194 = HEAP8[$49 >> 0] | 0;
   } else {
    $$121 = $117;
    $$314 = $$011;
    $194 = 2;
   }
  } else {
   $$121 = $$020;
   $$314 = $$011;
   $194 = $114;
  }
  _silk_nsq_del_dec_scale_states($0, $1, $21, $$01, $83, $82, $81, $$224, HEAP32[$19 >> 2] | 0, $14, $11, $12, $194 << 24 >> 24, $$26);
  _silk_noise_shape_quantizer_del_dec($1, $21, HEAP8[$49 >> 0] | 0, $83, $$02, $$03, $81, $16, $103, $105, $107, $$121, $113, HEAP32[$9 + ($$224 << 2) >> 2] | 0, HEAP32[$10 + ($$224 << 2) >> 2] | 0, HEAP32[$11 + ($$224 << 2) >> 2] | 0, $13, $58, HEAP32[$59 >> 2] | 0, $$314, HEAP32[$93 >> 2] | 0, HEAP32[$94 >> 2] | 0, HEAP32[$95 >> 2] | 0, HEAP32[$19 >> 2] | 0, $15, $$26);
  $208 = HEAP32[$59 >> 2] | 0;
  $$01 = $$01 + ($208 << 1) | 0;
  $$011 = $$314 + 1 | 0;
  $$02 = $$02 + $208 | 0;
  $$020 = $$121;
  $$03 = $$03 + ($208 << 1) | 0;
  $$224 = $$224 + 1 | 0;
 }
 if ((label | 0) == 30) _celt_fatal(44423, 44455, 253);
 $215 = HEAP32[$19 >> 2] | 0;
 $$2 = HEAP32[$96 >> 2] | 0;
 $$217 = 0;
 $$325 = 1;
 while (1) {
  if (($$325 | 0) >= ($215 | 0)) break;
  $218 = HEAP32[$21 + ($$325 * 1300 | 0) + 1296 >> 2] | 0;
  $219 = ($218 | 0) < ($$2 | 0);
  $$2 = $219 ? $218 : $$2;
  $$217 = $219 ? $$325 : $$217;
  $$325 = $$325 + 1 | 0;
 }
 HEAP8[$23 >> 0] = HEAP32[$21 + ($$217 * 1300 | 0) + 1292 >> 2];
 $229 = HEAP32[$11 + ((HEAP32[$88 >> 2] | 0) + -1 << 2) >> 2] | 0;
 $231 = $229 >>> 6 << 16 >> 16;
 $234 = ($229 >> 21) + 1 >> 1;
 $$29 = (HEAP32[$15 >> 2] | 0) + $$26 | 0;
 $$329 = 0;
 while (1) {
  if (($$329 | 0) >= ($$26 | 0)) break;
  $237 = ($$29 + -1 | 0) % 40 | 0;
  $spec$select51 = ($237 | 0) < 0 ? $237 + 40 | 0 : $237;
  $246 = $$329 - $$26 | 0;
  HEAP8[$$02 + $246 >> 0] = (((HEAP32[$21 + ($$217 * 1300 | 0) + 544 + ($spec$select51 << 2) >> 2] | 0) >>> 9) + 1 | 0) >>> 1;
  $249 = HEAP32[$21 + ($$217 * 1300 | 0) + 704 + ($spec$select51 << 2) >> 2] | 0;
  $257 = (Math_imul($249 >> 16, $231) | 0) + ((Math_imul($249 & 65535, $231) | 0) >> 16) + (Math_imul($249, $234) | 0) | 0;
  if (($257 | 0) > 8388479) $264 = 32767; else if (($257 | 0) < -8388736) $264 = -32768; else $264 = ($257 >> 7) + 1 >> 1;
  HEAP16[$$03 + ($246 << 1) >> 1] = $264;
  HEAP32[$1 + 1280 + ((HEAP32[$85 >> 2] | 0) - $$26 + $$329 << 2) >> 2] = HEAP32[$21 + ($$217 * 1300 | 0) + 1024 + ($spec$select51 << 2) >> 2];
  $$29 = $spec$select51;
  $$329 = $$329 + 1 | 0;
 }
 dest = $27;
 src = $21 + ($$217 * 1300 | 0) + (HEAP32[$59 >> 2] << 2) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $28;
 src = $21 + ($$217 * 1300 | 0) + 1184 | 0;
 stop = dest + 96 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$24 >> 2] = HEAP32[$21 + ($$217 * 1300 | 0) + 1280 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$21 + ($$217 * 1300 | 0) + 1284 >> 2];
 HEAP32[$17 >> 2] = HEAP32[$12 + ((HEAP32[$88 >> 2] | 0) + -1 << 2) >> 2];
 _memmove($1 | 0, $1 + (HEAP32[$78 >> 2] << 1) | 0, HEAP32[$26 >> 2] << 1 | 0) | 0;
 _memmove($1 + 1280 | 0, $1 + 1280 + (HEAP32[$78 >> 2] << 2) | 0, HEAP32[$26 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}
function _silk_CNG($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$05 = 0, $$16 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre31 = 0, $102 = 0, $114 = 0, $12 = 0, $132 = 0, $134 = 0, $137 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $152 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $167 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $182 = 0, $183 = 0, $186 = 0, $19 = 0, $192 = 0, $199 = 0, $202 = 0, $209 = 0, $212 = 0, $219 = 0, $22 = 0, $222 = 0, $229 = 0, $232 = 0, $239 = 0, $24 = 0, $242 = 0, $249 = 0, $25 = 0, $252 = 0, $259 = 0, $262 = 0, $269 = 0, $272 = 0, $279 = 0, $282 = 0, $289 = 0, $294 = 0, $301 = 0, $304 = 0, $31 = 0, $311 = 0, $314 = 0, $321 = 0, $324 = 0, $331 = 0, $334 = 0, $341 = 0, $343 = 0, $352 = 0, $353 = 0, $354 = 0, $360 = 0, $371 = 0, $372 = 0, $374 = 0, $382 = 0, $383 = 0, $389 = 0, $396 = 0, $4 = 0, $40 = 0, $403 = 0, $405 = 0, $41 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $91 = 0, $94 = 0, $96 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp;
 $5 = $0 + 2772 | 0;
 $6 = $0 + 2316 | 0;
 $8 = $0 + 4156 | 0;
 if ((HEAP32[$6 >> 2] | 0) != (HEAP32[$8 >> 2] | 0)) {
  _silk_CNG_Reset($0);
  HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
 }
 $12 = $0 + 4160 | 0;
 do if (!(HEAP32[$12 >> 2] | 0)) {
  if (!(HEAP32[$0 + 4164 >> 2] | 0)) {
   $19 = HEAP32[$0 + 2340 >> 2] | 0;
   $$05 = 0;
   while (1) {
    if (($$05 | 0) >= ($19 | 0)) break;
    $22 = HEAP16[$0 + 2344 + ($$05 << 1) >> 1] | 0;
    $24 = $0 + 4052 + ($$05 << 1) | 0;
    $25 = HEAP16[$24 >> 1] | 0;
    $31 = $25 & 65535;
    HEAP16[$24 >> 1] = ((($22 << 16 >> 16) - ($25 << 16 >> 16) >> 16) * 16348 | 0) + (((($22 & 65535) - $31 & 65535) * 16348 | 0) >>> 16) + $31;
    $$05 = $$05 + 1 | 0;
   }
   $40 = $0 + 2324 | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $$01 = 0;
   $$03 = 0;
   $$16 = 0;
   while (1) {
    if (($$16 | 0) >= ($41 | 0)) break;
    $44 = HEAP32[$1 + 16 + ($$16 << 2) >> 2] | 0;
    $45 = ($44 | 0) > ($$01 | 0);
    $$01 = $45 ? $44 : $$01;
    $$03 = $45 ? $$16 : $$03;
    $$16 = $$16 + 1 | 0;
   }
   $47 = $0 + 2332 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   _memmove($0 + 2772 + ($48 << 2) | 0, $5 | 0, (Math_imul($41 + -1 | 0, $48) | 0) << 2 | 0) | 0;
   $53 = HEAP32[$47 >> 2] | 0;
   _memcpy($5 | 0, $0 + 4 + ((Math_imul($$03, $53) | 0) << 2) | 0, $53 << 2 | 0) | 0;
   $57 = $0 + 4148 | 0;
   $$pre = HEAP32[$40 >> 2] | 0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($$pre | 0)) break;
    $61 = HEAP32[$57 >> 2] | 0;
    $62 = (HEAP32[$1 + 16 + ($$2 << 2) >> 2] | 0) - $61 | 0;
    HEAP32[$57 >> 2] = $61 + ((($62 >> 16) * 4634 | 0) + ((($62 & 65535) * 4634 | 0) >>> 16));
    $$2 = $$2 + 1 | 0;
   }
   if (HEAP32[$12 >> 2] | 0) break;
  }
  _memset($0 + 4084 | 0, 0, HEAP32[$0 + 2340 >> 2] << 2 | 0) | 0;
  STACKTOP = sp;
  return;
 } while (0);
 $73 = _llvm_stacksave() | 0;
 $74 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 + 16 << 2) | 0) + 15 & -16) | 0;
 $76 = HEAP16[$0 + 4228 >> 1] | 0;
 $77 = $76 << 16 >> 16;
 $80 = HEAP32[$0 + 4248 >> 2] | 0;
 $81 = $80 << 16 >> 16;
 $91 = (Math_imul($77 >> 16, $81) | 0) + ((Math_imul($81, $76 & 65535) | 0) >> 16) + (Math_imul(($80 >> 15) + 1 >> 1, $77) | 0) | 0;
 $$pre31 = HEAP32[$0 + 4148 >> 2] | 0;
 $94 = $91 >> 16;
 if (($91 | 0) > 2097151 | ($$pre31 | 0) > 8388608) {
  $96 = $$pre31 >> 16;
  $$0 = (_silk_SQRT_APPROX((Math_imul($96, $96) | 0) - ((Math_imul($94, $94) | 0) << 5) | 0) | 0) << 16;
 } else {
  $102 = $91 << 16 >> 16;
  $114 = $$pre31 << 16 >> 16;
  $$0 = (_silk_SQRT_APPROX((Math_imul($$pre31 >> 16, $114) | 0) + ((Math_imul($$pre31 & 65535, $114) | 0) >> 16) + (Math_imul($$pre31, ($$pre31 >> 15) + 1 >> 1) | 0) - ((Math_imul($94, $102) | 0) + ((Math_imul($91 & 65535, $102) | 0) >> 16) + (Math_imul($91, ($91 >> 15) + 1 >> 1) | 0) << 5) | 0) | 0) << 8;
 }
 _silk_CNG_exc($74 + 64 | 0, $5, $3, $0 + 4152 | 0);
 $132 = $0 + 2340 | 0;
 _silk_NLSF2A($4, $0 + 4052 | 0, HEAP32[$132 >> 2] | 0);
 $134 = $0 + 4084 | 0;
 dest = $74;
 src = $134;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 switch (HEAP32[$132 >> 2] | 0) {
 case 16:
 case 10:
  break;
 default:
  _celt_fatal(42847, 42817, 149);
 }
 $137 = HEAP16[$4 >> 1] | 0;
 $140 = HEAP16[$4 + 2 >> 1] | 0;
 $143 = HEAP16[$4 + 4 >> 1] | 0;
 $146 = HEAP16[$4 + 6 >> 1] | 0;
 $149 = HEAP16[$4 + 8 >> 1] | 0;
 $152 = HEAP16[$4 + 10 >> 1] | 0;
 $155 = HEAP16[$4 + 12 >> 1] | 0;
 $158 = HEAP16[$4 + 14 >> 1] | 0;
 $161 = HEAP16[$4 + 16 >> 1] | 0;
 $164 = HEAP16[$4 + 18 >> 1] | 0;
 $167 = HEAP16[$4 + 20 >> 1] | 0;
 $170 = HEAP16[$4 + 22 >> 1] | 0;
 $173 = HEAP16[$4 + 24 >> 1] | 0;
 $176 = HEAP16[$4 + 26 >> 1] | 0;
 $179 = HEAP16[$4 + 28 >> 1] | 0;
 $182 = HEAP16[$4 + 30 >> 1] | 0;
 $183 = $$0 << 10 >> 16;
 $186 = ($$0 >> 21) + 1 >> 1;
 $$3 = 0;
 while (1) {
  if (($$3 | 0) >= ($3 | 0)) break;
  $192 = HEAP32[$74 + ($$3 + 15 << 2) >> 2] | 0;
  $199 = (HEAP32[$132 >> 2] >> 1) + ((Math_imul($192 >> 16, $137) | 0) + ((Math_imul($192 & 65535, $137) | 0) >> 16)) | 0;
  $202 = HEAP32[$74 + ($$3 + 14 << 2) >> 2] | 0;
  $209 = $199 + ((Math_imul($202 >> 16, $140) | 0) + ((Math_imul($202 & 65535, $140) | 0) >> 16)) | 0;
  $212 = HEAP32[$74 + ($$3 + 13 << 2) >> 2] | 0;
  $219 = $209 + ((Math_imul($212 >> 16, $143) | 0) + ((Math_imul($212 & 65535, $143) | 0) >> 16)) | 0;
  $222 = HEAP32[$74 + ($$3 + 12 << 2) >> 2] | 0;
  $229 = $219 + ((Math_imul($222 >> 16, $146) | 0) + ((Math_imul($222 & 65535, $146) | 0) >> 16)) | 0;
  $232 = HEAP32[$74 + ($$3 + 11 << 2) >> 2] | 0;
  $239 = $229 + ((Math_imul($232 >> 16, $149) | 0) + ((Math_imul($232 & 65535, $149) | 0) >> 16)) | 0;
  $242 = HEAP32[$74 + ($$3 + 10 << 2) >> 2] | 0;
  $249 = $239 + ((Math_imul($242 >> 16, $152) | 0) + ((Math_imul($242 & 65535, $152) | 0) >> 16)) | 0;
  $252 = HEAP32[$74 + ($$3 + 9 << 2) >> 2] | 0;
  $259 = $249 + ((Math_imul($252 >> 16, $155) | 0) + ((Math_imul($252 & 65535, $155) | 0) >> 16)) | 0;
  $262 = HEAP32[$74 + ($$3 + 8 << 2) >> 2] | 0;
  $269 = $259 + ((Math_imul($262 >> 16, $158) | 0) + ((Math_imul($262 & 65535, $158) | 0) >> 16)) | 0;
  $272 = HEAP32[$74 + ($$3 + 7 << 2) >> 2] | 0;
  $279 = $269 + ((Math_imul($272 >> 16, $161) | 0) + ((Math_imul($272 & 65535, $161) | 0) >> 16)) | 0;
  $282 = HEAP32[$74 + ($$3 + 6 << 2) >> 2] | 0;
  $289 = $279 + ((Math_imul($282 >> 16, $164) | 0) + ((Math_imul($282 & 65535, $164) | 0) >> 16)) | 0;
  if ((HEAP32[$132 >> 2] | 0) == 16) {
   $294 = HEAP32[$74 + ($$3 + 5 << 2) >> 2] | 0;
   $301 = $289 + ((Math_imul($294 >> 16, $167) | 0) + ((Math_imul($294 & 65535, $167) | 0) >> 16)) | 0;
   $304 = HEAP32[$74 + ($$3 + 4 << 2) >> 2] | 0;
   $311 = $301 + ((Math_imul($304 >> 16, $170) | 0) + ((Math_imul($304 & 65535, $170) | 0) >> 16)) | 0;
   $314 = HEAP32[$74 + ($$3 + 3 << 2) >> 2] | 0;
   $321 = $311 + ((Math_imul($314 >> 16, $173) | 0) + ((Math_imul($314 & 65535, $173) | 0) >> 16)) | 0;
   $324 = HEAP32[$74 + ($$3 + 2 << 2) >> 2] | 0;
   $331 = $321 + ((Math_imul($324 >> 16, $176) | 0) + ((Math_imul($324 & 65535, $176) | 0) >> 16)) | 0;
   $334 = HEAP32[$74 + ($$3 + 1 << 2) >> 2] | 0;
   $341 = $331 + ((Math_imul($334 >> 16, $179) | 0) + ((Math_imul($334 & 65535, $179) | 0) >> 16)) | 0;
   $343 = HEAP32[$74 + ($$3 << 2) >> 2] | 0;
   $$02 = $341 + ((Math_imul($343 >> 16, $182) | 0) + ((Math_imul($343 & 65535, $182) | 0) >> 16)) | 0;
  } else $$02 = $289;
  $352 = $74 + ($$3 + 16 << 2) | 0;
  $353 = HEAP32[$352 >> 2] | 0;
  $354 = ($$02 | 0) > 134217727;
  $360 = $354 ? 2147483632 : (($$02 | 0) > -134217728 ? $$02 : -134217728) << 4;
  if (($353 + ($354 ? 2147483632 : (($$02 | 0) > -134217728 ? $$02 : -134217728) << 4) | 0) > -1) if (($353 & $360 | 0) < 0) $371 = -2147483648; else $371 = $353 + ($354 ? 2147483632 : (($$02 | 0) > -134217728 ? $$02 : -134217728) << 4) | 0; else if (($353 | $360 | 0) > -1) $371 = 2147483647; else $371 = $353 + ($354 ? 2147483632 : (($$02 | 0) > -134217728 ? $$02 : -134217728) << 4) | 0;
  HEAP32[$352 >> 2] = $371;
  $372 = $2 + ($$3 << 1) | 0;
  $374 = HEAP16[$372 >> 1] | 0;
  $382 = (Math_imul($371 >> 16, $183) | 0) + ((Math_imul($371 & 65535, $183) | 0) >> 16) + (Math_imul($371, $186) | 0) | 0;
  $383 = ($382 | 0) > 8388479;
  if ($383) $389 = 32767; else if (($382 | 0) < -8388736) $389 = -32768; else $389 = ($382 >> 7) + 1 >> 1;
  if (($389 + $374 | 0) > 32767) $405 = 32767; else {
   if ($383) $396 = 32767; else if (($382 | 0) < -8388736) $396 = -32768; else $396 = ($382 >> 7) + 1 >> 1;
   if (($396 + $374 | 0) < -32768) $405 = -32768; else {
    if ($383) $403 = 32767; else if (($382 | 0) < -8388736) $403 = -32768; else $403 = ($382 >> 7) + 1 >> 1;
    $405 = $403 + $374 | 0;
   }
  }
  HEAP16[$372 >> 1] = $405;
  $$3 = $$3 + 1 | 0;
 }
 dest = $134;
 src = $74 + ($3 << 2) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _llvm_stackrestore($73 | 0);
 STACKTOP = sp;
 return;
}

function _celt_decode_lost($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$011 = 0.0, $$012 = 0.0, $$014 = 0, $$015 = 0.0, $$016 = 0, $$017 = 0, $$02 = 0.0, $$03 = 0, $$04 = 0, $$09 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$110 = 0, $$113 = 0.0, $$118 = 0, $$15 = 0, $$2 = 0, $$219 = 0, $$26 = 0, $$3 = 0, $$37 = 0, $$4 = 0, $$48 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pre$phi24Z2D = 0, $10 = 0, $104 = 0, $105 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $147 = 0.0, $149 = 0.0, $155 = 0, $159 = 0.0, $16 = 0, $162 = 0.0, $17 = 0, $171 = 0.0, $175 = 0, $18 = 0, $186 = 0.0, $196 = 0, $197 = 0, $20 = 0, $201 = 0.0, $215 = 0.0, $216 = 0.0, $223 = 0, $229 = 0, $233 = 0, $235 = 0.0, $236 = 0, $257 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0.0, $56 = 0, $58 = 0, $6 = 0, $60 = 0.0, $61 = 0, $63 = 0.0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $78 = 0, $83 = 0, $85 = 0, $9 = 0, $96 = 0, $98 = 0, $spec$select28 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4416 | 0;
 $3 = sp + 4408 | 0;
 $4 = sp + 4400 | 0;
 $5 = sp + 208 | 0;
 $6 = sp + 96 | 0;
 $7 = sp;
 $9 = HEAP32[$0 + 8 >> 2] | 0;
 $10 = HEAP32[$0 >> 2] | 0;
 $12 = HEAP32[$10 + 8 >> 2] | 0;
 $14 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = HEAP32[$10 + 32 >> 2] | 0;
 $17 = $14 + 2048 | 0;
 $18 = 0 - $1 | 0;
 $$03 = 0;
 do {
  $20 = $0 + 92 + ((Math_imul($$03, $17) | 0) << 2) | 0;
  HEAP32[$3 + ($$03 << 2) >> 2] = $20;
  HEAP32[$4 + ($$03 << 2) >> 2] = $20 + 8192 + ($18 << 2);
  $$03 = $$03 + 1 | 0;
 } while (($$03 | 0) < ($9 | 0));
 $28 = $0 + 92 + ((Math_imul($17, $9) | 0) << 2) | 0;
 $30 = $28 + ($9 * 24 << 2) | 0;
 $31 = $12 << 1;
 $34 = $30 + ($31 << 2) + ($31 << 2) + ($31 << 2) | 0;
 $35 = $0 + 52 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 $38 = HEAP32[$0 + 20 >> 2] | 0;
 if (($36 | 0) < 5 & ($38 | 0) == 0) if (!(HEAP32[$0 + 56 >> 2] | 0)) {
  $104 = ($36 | 0) == 0;
  if ($104) {
   $105 = _celt_plc_pitch_search($3, $9) | 0;
   HEAP32[$0 + 48 >> 2] = $105;
   $$014 = $105;
   $$015 = 1.0;
  } else {
   $$014 = HEAP32[$0 + 48 >> 2] | 0;
   $$015 = .800000011920929;
  }
  $spec$select28 = ($$014 | 0) < 512 ? $$014 << 1 : 1024;
  $111 = _llvm_stacksave() | 0;
  $112 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($14 << 2) | 0) + 15 & -16) | 0;
  $113 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($spec$select28 << 2) | 0) + 15 & -16) | 0;
  $114 = $5 + 96 | 0;
  $116 = HEAP32[$10 + 60 >> 2] | 0;
  $119 = $5 + 4192 + (0 - $spec$select28 << 2) | 0;
  $120 = $spec$select28 << 2;
  $121 = $spec$select28 >> 1;
  $122 = 1024 - $121 | 0;
  $123 = 1024 - $spec$select28 | 0;
  $125 = 8192 - ($1 << 2) | 0;
  $126 = 1024 - $$014 | 0;
  $127 = $14 + $1 | 0;
  $128 = 2048 - $1 | 0;
  $130 = 1024 - $1 + $126 | 0;
  $131 = $128 + -1 | 0;
  $132 = $0 + 60 | 0;
  $133 = $0 + 68 | 0;
  $134 = $0 + 76 | 0;
  $135 = ($14 | 0) / 2 | 0;
  $136 = $14 + -1 | 0;
  $$4 = 0;
  do {
   $138 = HEAP32[$3 + ($$4 << 2) >> 2] | 0;
   $$26 = 0;
   while (1) {
    if (($$26 | 0) == 1048) break;
    HEAP32[$5 + ($$26 << 2) >> 2] = HEAP32[$138 + ($$26 + 1e3 << 2) >> 2];
    $$26 = $$26 + 1 | 0;
   }
   if ($104) {
    __celt_autocorr($114, $6, $116, $14, 24, 1024);
    HEAPF32[$6 >> 2] = +HEAPF32[$6 >> 2] * 1.000100016593933;
    $$37 = 1;
    while (1) {
     if (($$37 | 0) == 25) break;
     $146 = $6 + ($$37 << 2) | 0;
     $147 = +HEAPF32[$146 >> 2];
     $149 = +($$37 | 0);
     HEAPF32[$146 >> 2] = $147 - $147 * 6.400000711437315e-05 * $149 * $149;
     $$37 = $$37 + 1 | 0;
    }
    $155 = $28 + ($$4 * 24 << 2) | 0;
    __celt_lpc($155, $6, 24);
    $$pre$phi24Z2D = $155;
   } else $$pre$phi24Z2D = $28 + ($$4 * 24 << 2) | 0;
   _celt_fir_c($119, $$pre$phi24Z2D, $113, $spec$select28);
   _memcpy($119 | 0, $113 | 0, $120 | 0) | 0;
   $$01 = 1.0;
   $$02 = 1.0;
   $$48 = 0;
   while (1) {
    if (($$48 | 0) >= ($121 | 0)) break;
    $159 = +HEAPF32[$114 + ($122 + $$48 << 2) >> 2];
    $162 = +HEAPF32[$114 + ($123 + $$48 << 2) >> 2];
    $$01 = $$01 + $162 * $162;
    $$02 = $$02 + $159 * $159;
    $$48 = $$48 + 1 | 0;
   }
   $171 = +Math_sqrt(+(($$02 < $$01 ? $$02 : $$01) / $$01));
   _memmove($138 | 0, $138 + ($1 << 2) | 0, $125 | 0) | 0;
   $$011 = 0.0;
   $$012 = $$015 * $171;
   $$09 = 0;
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($127 | 0)) break;
    $175 = ($$09 | 0) < ($$014 | 0);
    $$113 = $175 ? $$012 : $$012 * $171;
    $$110 = $$09 - ($175 ? 0 : $$014) | 0;
    HEAPF32[$138 + ($128 + $$5 << 2) >> 2] = $$113 * +HEAPF32[$114 + ($126 + $$110 << 2) >> 2];
    $186 = +HEAPF32[$138 + ($130 + $$110 << 2) >> 2];
    $$011 = $$011 + $186 * $186;
    $$012 = $$113;
    $$09 = $$110 + 1 | 0;
    $$5 = $$5 + 1 | 0;
   }
   $$6 = 0;
   while (1) {
    if (($$6 | 0) == 24) break;
    HEAP32[$7 + ($$6 << 2) >> 2] = HEAP32[$138 + ($131 - $$6 << 2) >> 2];
    $$6 = $$6 + 1 | 0;
   }
   $196 = $138 + 8192 | 0;
   $197 = $196 + ($18 << 2) | 0;
   _celt_iir($197, $$pre$phi24Z2D, $197, $127, $7);
   $$0 = 0.0;
   $$7 = 0;
   while (1) {
    if (($$7 | 0) >= ($127 | 0)) break;
    $201 = +HEAPF32[$138 + ($128 + $$7 << 2) >> 2];
    $$0 = $$0 + $201 * $201;
    $$7 = $$7 + 1 | 0;
   }
   L41 : do if ($$011 > $$0 * .20000000298023224) {
    if ($$011 < $$0) {
     $215 = +Math_sqrt(+(($$011 + 1.0) / ($$0 + 1.0)));
     $216 = 1.0 - $215;
     $$9 = 0;
     while (1) {
      if (($$9 | 0) >= ($14 | 0)) break;
      $223 = $138 + ($128 + $$9 << 2) | 0;
      HEAPF32[$223 >> 2] = (1.0 - +HEAPF32[$116 + ($$9 << 2) >> 2] * $216) * +HEAPF32[$223 >> 2];
      $$9 = $$9 + 1 | 0;
     }
     $$10 = $14;
     while (1) {
      if (($$10 | 0) >= ($127 | 0)) break L41;
      $229 = $138 + ($128 + $$10 << 2) | 0;
      HEAPF32[$229 >> 2] = $215 * +HEAPF32[$229 >> 2];
      $$10 = $$10 + 1 | 0;
     }
    }
   } else {
    $$8 = 0;
    while (1) {
     if (($$8 | 0) >= ($127 | 0)) break L41;
     HEAPF32[$138 + ($128 + $$8 << 2) >> 2] = 0.0;
     $$8 = $$8 + 1 | 0;
    }
   } while (0);
   $233 = HEAP32[$132 >> 2] | 0;
   $235 = -+HEAPF32[$133 >> 2];
   $236 = HEAP32[$134 >> 2] | 0;
   _comb_filter($112, $196, $233, $233, $14, $235, $235, $236, $236, 0, 0);
   $$11 = 0;
   while (1) {
    if (($$11 | 0) >= ($135 | 0)) break;
    HEAPF32[$138 + ($$11 + 2048 << 2) >> 2] = +HEAPF32[$116 + ($$11 << 2) >> 2] * +HEAPF32[$112 + ($136 - $$11 << 2) >> 2] + +HEAPF32[$116 + ($14 - $$11 + -1 << 2) >> 2] * +HEAPF32[$112 + ($$11 << 2) >> 2];
    $$11 = $$11 + 1 | 0;
   }
   $$4 = $$4 + 1 | 0;
  } while (($$4 | 0) < ($9 | 0));
  _llvm_stackrestore($111 | 0);
  $257 = $36 + 1 | 0;
  HEAP32[$35 >> 2] = $257;
  STACKTOP = sp;
  return;
 }
 $45 = HEAP32[$0 + 24 >> 2] | 0;
 $47 = HEAP32[$10 + 12 >> 2] | 0;
 $48 = ($45 | 0) < ($47 | 0);
 $50 = ($38 | 0) > (($48 ? $45 : $47) | 0) ? $38 : $48 ? $45 : $47;
 $51 = Math_imul($9, $1) | 0;
 $52 = _llvm_stacksave() | 0;
 $53 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($51 << 2) | 0) + 15 & -16) | 0;
 $55 = ($36 | 0) == 0 ? 1.5 : .5;
 $$1 = 0;
 do {
  $56 = Math_imul($$1, $12) | 0;
  $$04 = $38;
  while (1) {
   if (($$04 | 0) >= ($45 | 0)) break;
   $58 = $56 + $$04 | 0;
   $60 = +HEAPF32[$34 + ($58 << 2) >> 2];
   $61 = $30 + ($58 << 2) | 0;
   $63 = +HEAPF32[$61 >> 2] - $55;
   HEAPF32[$61 >> 2] = $60 > $63 ? $60 : $63;
   $$04 = $$04 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 } while (($$1 | 0) < ($9 | 0));
 $68 = $0 + 40 | 0;
 $$017 = HEAP32[$68 >> 2] | 0;
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($9 | 0)) break;
  $71 = Math_imul($$2, $1) | 0;
  $$118 = $$017;
  $$15 = $38;
  while (1) {
   if (($$15 | 0) >= ($50 | 0)) break;
   $75 = HEAP16[$16 + ($$15 << 1) >> 1] | 0;
   $77 = $71 + ($75 << $2) | 0;
   $78 = $$15 + 1 | 0;
   $83 = (HEAP16[$16 + ($78 << 1) >> 1] | 0) - $75 << $2;
   $$016 = 0;
   $$219 = $$118;
   while (1) {
    if (($$016 | 0) >= ($83 | 0)) break;
    $85 = _celt_lcg_rand($$219) | 0;
    HEAPF32[$53 + ($77 + $$016 << 2) >> 2] = +($85 >> 20 | 0);
    $$016 = $$016 + 1 | 0;
    $$219 = $85;
   }
   _renormalise_vector($53 + ($77 << 2) | 0, $83, 1.0);
   $$118 = $$219;
   $$15 = $78;
  }
  $$017 = $$118;
  $$2 = $$2 + 1 | 0;
 }
 HEAP32[$68 >> 2] = $$017;
 $96 = 2048 - $1 + ($14 >>> 1) << 2;
 $$3 = 0;
 do {
  $98 = HEAP32[$3 + ($$3 << 2) >> 2] | 0;
  _memmove($98 | 0, $98 + ($1 << 2) | 0, $96 | 0) | 0;
  $$3 = $$3 + 1 | 0;
 } while (($$3 | 0) < ($9 | 0));
 _celt_synthesis($10, $53, $4, $30, $38, $50, $9, $9, 0, $2, HEAP32[$0 + 16 >> 2] | 0, 0);
 _llvm_stackrestore($52 | 0);
 $257 = $36 + 1 | 0;
 HEAP32[$35 >> 2] = $257;
 STACKTOP = sp;
 return;
}
function _update_filter($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $1 = 0, $103 = 0, $104 = 0, $105 = 0, $119 = 0.0, $126 = 0, $13 = 0, $131 = 0, $132 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $148 = 0, $151 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $180 = 0, $187 = 0, $19 = 0, $196 = 0, $197 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $214 = 0, $228 = 0, $239 = 0, $242 = 0, $245 = 0, $252 = 0, $253 = 0, $254 = 0, $258 = 0, $259 = 0, $266 = 0, $267 = 0, $271 = 0, $274 = 0, $283 = 0, $284 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0.0, $8 = 0, $80 = 0, $94 = 0.0, label = 0;
 $1 = $0 + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$0 + 36 >> 2] = ($6 >>> 0) / ($8 >>> 0) | 0;
 HEAP32[$0 + 40 >> 2] = ($6 >>> 0) % ($8 >>> 0) | 0;
 $13 = $0 + 16 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $16 = HEAP32[35440 + ($14 * 20 | 0) + 4 >> 2] | 0;
 $17 = $0 + 48 | 0;
 HEAP32[$17 >> 2] = $16;
 $19 = HEAP32[35440 + ($14 * 20 | 0) >> 2] | 0;
 HEAP32[$1 >> 2] = $19;
 if ($6 >>> 0 > $8 >>> 0) {
  HEAPF32[$0 + 44 >> 2] = +HEAPF32[35440 + ($14 * 20 | 0) + 8 >> 2] * +($8 >>> 0) / +($6 >>> 0);
  if (!(_multiply_frac($1, $19, $6, $8) | 0)) {
   $32 = (HEAP32[$1 >> 2] | 0) + 7 & -8;
   HEAP32[$1 >> 2] = $32;
   $33 = HEAP32[$7 >> 2] | 0;
   $35 = HEAP32[$5 >> 2] | 0;
   if ($33 << 1 >>> 0 < $35 >>> 0) HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) >>> 1;
   if ($33 << 2 >>> 0 < $35 >>> 0) HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) >>> 1;
   if ($33 << 3 >>> 0 < $35 >>> 0) HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) >>> 1;
   $49 = HEAP32[$17 >> 2] | 0;
   if ($33 << 4 >>> 0 < $35 >>> 0) {
    $50 = $49 >>> 1;
    HEAP32[$17 >> 2] = $50;
    $51 = $50;
   } else $51 = $49;
   if (!$51) {
    HEAP32[$17 >> 2] = 1;
    $57 = $33;
    $58 = $32;
    $60 = 1;
    label = 14;
   } else {
    $57 = $33;
    $58 = $32;
    $60 = $51;
    label = 14;
   }
  }
 } else {
  HEAP32[$0 + 44 >> 2] = HEAP32[35440 + ($14 * 20 | 0) + 12 >> 2];
  $57 = $8;
  $58 = $19;
  $60 = $16;
  label = 14;
 }
 do if ((label | 0) == 14) {
  $56 = Math_imul($58, $57) | 0;
  $61 = (Math_imul($58, $60) | 0) + 8 | 0;
  if ($56 >>> 0 > $61 >>> 0) label = 16; else if ((536870911 / ($57 >>> 0) | 0) >>> 0 < $58 >>> 0) label = 16; else {
   $$04 = $56;
   $283 = 1;
  }
  if ((label | 0) == 16) if ((536870903 / ($60 >>> 0) | 0) >>> 0 < $58 >>> 0) break; else {
   $$04 = $61;
   $283 = 0;
  }
  $67 = $0 + 80 | 0;
  if ((HEAP32[$67 >> 2] | 0) >>> 0 < $$04 >>> 0) {
   $70 = $0 + 76 | 0;
   $73 = _speex_realloc(HEAP32[$70 >> 2] | 0, $$04 << 2) | 0;
   if (!$73) break;
   HEAP32[$70 >> 2] = $73;
   HEAP32[$67 >> 2] = $$04;
  }
  $75 = $0 + 44 | 0;
  $76 = $0 + 76 | 0;
  do if ($283) {
   $$07 = 0;
   while (1) {
    if ($$07 >>> 0 >= (HEAP32[$7 >> 2] | 0) >>> 0) break;
    $79 = +($$07 >>> 0);
    $$08 = 0;
    while (1) {
     $80 = HEAP32[$1 >> 2] | 0;
     if ($$08 >>> 0 >= $80 >>> 0) break;
     $94 = +_sinc(+HEAPF32[$75 >> 2], +($$08 - (($80 | 0) / 2 | 0) + 1 | 0) - $79 / +((HEAP32[$7 >> 2] | 0) >>> 0), $80, HEAP32[35440 + ((HEAP32[$13 >> 2] | 0) * 20 | 0) + 16 >> 2] | 0);
     HEAPF32[(HEAP32[$76 >> 2] | 0) + ((Math_imul($$07, $80) | 0) + $$08 << 2) >> 2] = $94;
     $$08 = $$08 + 1 | 0;
    }
    $$07 = $$07 + 1 | 0;
   }
   $103 = $0 + 84 | 0;
   if ((HEAP32[$13 >> 2] | 0) > 8) {
    HEAP32[$103 >> 2] = 1;
    break;
   } else {
    HEAP32[$103 >> 2] = 2;
    break;
   }
  } else {
   $$09 = -4;
   while (1) {
    $104 = HEAP32[$17 >> 2] | 0;
    $105 = HEAP32[$1 >> 2] | 0;
    if (($$09 | 0) >= ((Math_imul($104, $105) | 0) + 4 | 0)) break;
    $119 = +_sinc(+HEAPF32[$75 >> 2], +($$09 | 0) / +($104 >>> 0) - +($105 >>> 1 >>> 0), $105, HEAP32[35440 + ((HEAP32[$13 >> 2] | 0) * 20 | 0) + 16 >> 2] | 0);
    HEAPF32[(HEAP32[$76 >> 2] | 0) + ($$09 + 4 << 2) >> 2] = $119;
    $$09 = $$09 + 1 | 0;
   }
   $126 = $0 + 84 | 0;
   if ((HEAP32[$13 >> 2] | 0) > 8) {
    HEAP32[$126 >> 2] = 3;
    break;
   } else {
    HEAP32[$126 >> 2] = 4;
    break;
   }
  } while (0);
  $131 = (HEAP32[$1 >> 2] | 0) + -1 + (HEAP32[$0 + 32 >> 2] | 0) | 0;
  $132 = HEAP32[$3 >> 2] | 0;
  if ($131 >>> 0 > $132 >>> 0) {
   $135 = HEAP32[$0 + 20 >> 2] | 0;
   if ((536870911 / ($135 >>> 0) | 0) >>> 0 < $131 >>> 0) break;
   $138 = $0 + 72 | 0;
   $142 = _speex_realloc(HEAP32[$138 >> 2] | 0, (Math_imul($135, $131) | 0) << 2) | 0;
   if (!$142) break;
   HEAP32[$138 >> 2] = $142;
   HEAP32[$3 >> 2] = $131;
   $284 = $131;
  } else $284 = $132;
  if (!(HEAP32[$0 + 56 >> 2] | 0)) {
   $147 = $0 + 20 | 0;
   $148 = $0 + 72 | 0;
   $$06 = 0;
   $151 = $284;
   while (1) {
    if ($$06 >>> 0 >= (Math_imul(HEAP32[$147 >> 2] | 0, $151) | 0) >>> 0) {
     $$0 = 0;
     break;
    }
    HEAPF32[(HEAP32[$148 >> 2] | 0) + ($$06 << 2) >> 2] = 0.0;
    $$06 = $$06 + 1 | 0;
    $151 = HEAP32[$3 >> 2] | 0;
   }
   return $$0 | 0;
  }
  $156 = HEAP32[$1 >> 2] | 0;
  if ($156 >>> 0 <= $2 >>> 0) {
   if ($156 >>> 0 >= $2 >>> 0) {
    $$0 = 0;
    return $$0 | 0;
   }
   $252 = $0 + 20 | 0;
   $253 = $0 + 68 | 0;
   $254 = $0 + 72 | 0;
   $$02 = 0;
   while (1) {
    if ($$02 >>> 0 >= (HEAP32[$252 >> 2] | 0) >>> 0) {
     $$0 = 0;
     break;
    }
    $258 = (HEAP32[$253 >> 2] | 0) + ($$02 << 2) | 0;
    $259 = HEAP32[$258 >> 2] | 0;
    HEAP32[$258 >> 2] = ($2 - (HEAP32[$1 >> 2] | 0) | 0) >>> 1;
    $$01 = 0;
    while (1) {
     $266 = (HEAP32[$253 >> 2] | 0) + ($$02 << 2) | 0;
     $267 = HEAP32[$266 >> 2] | 0;
     if ($$01 >>> 0 >= ((HEAP32[$1 >> 2] | 0) + -1 + $267 + $259 | 0) >>> 0) break;
     $271 = HEAP32[$254 >> 2] | 0;
     $274 = (Math_imul($$02, HEAP32[$3 >> 2] | 0) | 0) + $$01 | 0;
     HEAP32[$271 + ($274 << 2) >> 2] = HEAP32[$271 + ($274 + $267 << 2) >> 2];
     $$01 = $$01 + 1 | 0;
    }
    HEAP32[$266 >> 2] = $267 + $259;
    $$02 = $$02 + 1 | 0;
   }
   return $$0 | 0;
  }
  $160 = $0 + 68 | 0;
  $161 = $2 + -1 | 0;
  $162 = $0 + 72 | 0;
  $163 = $0 + 60 | 0;
  $$05 = HEAP32[$0 + 20 >> 2] | 0;
  while (1) {
   $164 = $$05 + -1 | 0;
   if (!$$05) {
    $$0 = 0;
    break;
   }
   $168 = HEAP32[(HEAP32[$160 >> 2] | 0) + ($164 << 2) >> 2] | 0;
   $169 = $168 << 1;
   $171 = Math_imul($164, $4) | 0;
   $$03 = $161 + $168 | 0;
   while (1) {
    $172 = $$03 + -1 | 0;
    if (!$$03) break;
    $174 = HEAP32[$162 >> 2] | 0;
    $180 = (Math_imul($164, HEAP32[$3 >> 2] | 0) | 0) + $172 | 0;
    HEAP32[$174 + ($180 + (HEAP32[(HEAP32[$160 >> 2] | 0) + ($164 << 2) >> 2] | 0) << 2) >> 2] = HEAP32[$174 + ($171 + $172 << 2) >> 2];
    $$03 = $172;
   }
   $$1 = 0;
   while (1) {
    $187 = (HEAP32[$160 >> 2] | 0) + ($164 << 2) | 0;
    if ($$1 >>> 0 >= (HEAP32[$187 >> 2] | 0) >>> 0) break;
    HEAPF32[(HEAP32[$162 >> 2] | 0) + ((Math_imul($164, HEAP32[$3 >> 2] | 0) | 0) + $$1 << 2) >> 2] = 0.0;
    $$1 = $$1 + 1 | 0;
   }
   $196 = $2 + $169 | 0;
   HEAP32[$187 >> 2] = 0;
   $197 = HEAP32[$1 >> 2] | 0;
   L88 : do if ($196 >>> 0 < $197 >>> 0) {
    $199 = $196 + -1 | 0;
    $200 = $196 + -2 | 0;
    $$2 = 0;
    while (1) {
     if (($$2 | 0) == ($199 | 0)) break;
     $201 = HEAP32[$162 >> 2] | 0;
     $203 = Math_imul($164, HEAP32[$3 >> 2] | 0) | 0;
     HEAP32[$201 + ($203 + ((HEAP32[$1 >> 2] | 0) + -2 - $$2) << 2) >> 2] = HEAP32[$201 + ($203 + ($200 - $$2) << 2) >> 2];
     $$2 = $$2 + 1 | 0;
    }
    $$3 = $199;
    while (1) {
     $214 = HEAP32[$1 >> 2] | 0;
     if ($$3 >>> 0 >= ($214 + -1 | 0) >>> 0) break;
     HEAPF32[(HEAP32[$162 >> 2] | 0) + ((Math_imul($164, HEAP32[$3 >> 2] | 0) | 0) + ($214 + -2 - $$3) << 2) >> 2] = 0.0;
     $$3 = $$3 + 1 | 0;
    }
    $228 = (HEAP32[$163 >> 2] | 0) + ($164 << 2) | 0;
    HEAP32[$228 >> 2] = (HEAP32[$228 >> 2] | 0) + (($214 - $196 | 0) >>> 1);
   } else {
    HEAP32[(HEAP32[$160 >> 2] | 0) + ($164 << 2) >> 2] = ($196 - $197 | 0) >>> 1;
    $$4 = 0;
    while (1) {
     $239 = HEAP32[(HEAP32[$160 >> 2] | 0) + ($164 << 2) >> 2] | 0;
     if ($$4 >>> 0 >= ((HEAP32[$1 >> 2] | 0) + -1 + $239 | 0) >>> 0) break L88;
     $242 = HEAP32[$162 >> 2] | 0;
     $245 = (Math_imul($164, HEAP32[$3 >> 2] | 0) | 0) + $$4 | 0;
     HEAP32[$242 + ($245 << 2) >> 2] = HEAP32[$242 + ($245 + $239 << 2) >> 2];
     $$4 = $$4 + 1 | 0;
    }
   } while (0);
   $$05 = $164;
  }
  return $$0 | 0;
 } while (0);
 HEAP32[$0 + 84 >> 2] = 5;
 HEAP32[$1 >> 2] = $2;
 $$0 = 1;
 return $$0 | 0;
}

function _compute_theta($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$017 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$110 = 0, $$12 = 0, $$14 = 0, $$1452 = 0, $$1453 = 0, $$16 = 0, $$18 = 0, $$2 = 0, $$5 = 0, $$5$ph = 0, $$554 = 0, $$555 = 0, $$628 = 0, $$62848 = 0, $$632 = 0, $$9 = 0, $$idx = 0, $$idx21 = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $118 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $141 = 0, $142 = 0, $15 = 0, $150 = 0, $151 = 0, $161 = 0, $163 = 0, $17 = 0, $174 = 0, $179 = 0, $181 = 0, $19 = 0, $195 = 0, $199 = 0, $21 = 0, $213 = 0, $217 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $28 = 0, $30 = 0, $35 = 0, $37 = 0, $39 = 0, $42 = 0, $47 = 0, $48 = 0, $49 = 0, $56 = 0, $59 = 0, $70 = 0, $71 = 0, $78 = 0, $79 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $phitmp = 0, label = 0;
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$0 + 8 >> 2] | 0;
 $15 = HEAP32[$0 + 12 >> 2] | 0;
 $17 = HEAP32[$0 + 16 >> 2] | 0;
 $19 = HEAP32[$0 + 28 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $28 = ($8 << 3) + (HEAP16[(HEAP32[$13 + 56 >> 2] | 0) + ($15 << 1) >> 1] | 0) | 0;
 $30 = ($9 | 0) == 0;
 $35 = _compute_qn($4, HEAP32[$5 >> 2] | 0, ($28 >> 1) - (($4 | 0) == 2 & ($30 ^ 1) ? 16 : 4) | 0, $28, $9) | 0;
 $$017 = $30 | ($15 | 0) < ($17 | 0) ? $35 : 1;
 $37 = ($11 | 0) == 0;
 if ($37) $$011 = 0; else $$011 = _stereo_itheta($2, $3, $9, $4) | 0;
 $$idx = $19 + 20 | 0;
 $$idx21 = $19 + 28 | 0;
 $39 = _ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx21 >> 2] | 0) | 0;
 L4 : do if (($$017 | 0) == 1) if ($30) {
  $$14 = $$011;
  $$5 = 0;
  label = 60;
 } else {
  if ($37) $$04 = 0; else {
   L9 : do if (($$011 | 0) > 8192) {
    $179 = (HEAP32[$0 + 52 >> 2] | 0) == 0;
    $phitmp = $179 & 1;
    if ($179) {
     $$0 = 0;
     while (1) {
      if (($$0 | 0) >= ($4 | 0)) {
       $231 = $phitmp;
       break L9;
      }
      $181 = $3 + ($$0 << 2) | 0;
      HEAPF32[$181 >> 2] = -+HEAPF32[$181 >> 2];
      $$0 = $$0 + 1 | 0;
     }
    } else $231 = 0;
   } else $231 = 0; while (0);
   _intensity_stereo(HEAP32[$13 + 8 >> 2] | 0, $2, $3, $21, $15, $4);
   $$04 = $231;
  }
  do if ((HEAP32[$5 >> 2] | 0) > 16) if ((HEAP32[$0 + 32 >> 2] | 0) > 16) if ($37) {
   $$2 = _ec_dec_bit_logp($19, 2) | 0;
   break;
  } else {
   _ec_enc_bit_logp($19, $$04, 2);
   $$2 = $$04;
   break;
  } else $$2 = 0; else $$2 = 0; while (0);
  $$5$ph = (HEAP32[$0 + 52 >> 2] | 0) == 0 ? $$2 : 0;
  label = 59;
 } else {
  do if ($37) if ($30) {
   $$628 = $$011;
   label = 26;
  } else {
   $$632 = $$011;
   label = 13;
  } else if ($30) {
   $47 = Math_imul($$011, $$017) | 0;
   $48 = $47 + 8192 | 0;
   $49 = $48 >> 14;
   if (!((HEAP32[$0 + 56 >> 2] | 0) != 0 & ($47 | 0) > 8191 & ($49 | 0) < ($$017 | 0))) {
    $$628 = $49;
    label = 26;
    break;
   }
   $56 = _celt_udiv($48 & -16384, $$017) | 0;
   $59 = (_bitexact_cos($56 & 65535) | 0) << 16 >> 16;
   $70 = (Math_imul(($4 << 23) + -8388608 >> 16, (_bitexact_log2tan((_bitexact_cos(16384 - $56 & 65535) | 0) << 16 >> 16, $59) | 0) << 16 >> 16) | 0) + 16384 >> 15;
   $71 = HEAP32[$5 >> 2] | 0;
   if (($70 | 0) > ($71 | 0)) {
    $$628 = $$017;
    label = 26;
    break;
   }
   $$628 = ($70 | 0) < (0 - $71 | 0) ? 0 : $49;
   label = 26;
   break;
  } else {
   $42 = HEAP32[$0 + 48 >> 2] | 0;
   if (!$42) {
    $$632 = (Math_imul($$011, $$017) | 0) + 8192 >> 14;
    label = 13;
    break;
   } else {
    $78 = (Math_imul($$011, $$017) | 0) + (((($$011 | 0) > 8192 ? 32767 : -32767) | 0) / ($$017 | 0) | 0) | 0;
    $79 = ($78 | 0) < 0;
    $$632 = (($$017 | 0) > (($79 ? 0 : $78 >> 14) | 0) ? ($79 ? 0 : $78 >> 14) : $$017 + -1 | 0) + ($42 >>> 31 ^ 1) | 0;
    label = 13;
    break;
   }
  } while (0);
  do if ((label | 0) == 13) if (($4 | 0) > 2) {
   $87 = ($$017 | 0) / 2 | 0;
   $89 = ($87 * 3 | 0) + 3 | 0;
   $90 = $89 + $87 | 0;
   if (!$37) {
    $91 = ($$632 | 0) > ($87 | 0);
    if ($91) $101 = $$632 + -1 - $87 + $89 | 0; else $101 = $$632 * 3 | 0;
    _ec_encode($19, $101, $91 ? $$632 - $87 + $89 | 0 : ($$632 * 3 | 0) + 3 | 0, $90);
    $$12 = $$632;
    break;
   }
   $102 = _ec_decode($19, $90) | 0;
   if (($102 | 0) < ($89 | 0)) $$03 = ($102 | 0) / 3 | 0; else $$03 = $87 + 1 + ($102 - $89) | 0;
   $108 = ($$03 | 0) > ($87 | 0);
   if ($108) $118 = $$03 + -1 - $87 + $89 | 0; else $118 = $$03 * 3 | 0;
   _ec_dec_update($19, $118, $108 ? $$03 - $87 + $89 | 0 : ($$03 * 3 | 0) + 3 | 0, $90);
   $$12 = $$03;
  } else {
   $$62848 = $$632;
   label = 27;
  } else if ((label | 0) == 26) if (($7 | 0) > 1 | $30 ^ 1) {
   $$62848 = $$628;
   label = 27;
  } else {
   $122 = $$017 >> 1;
   $123 = $122 + 1 | 0;
   $124 = Math_imul($123, $123) | 0;
   if ($37) {
    $142 = _ec_decode($19, $124) | 0;
    if (($142 | 0) < ((Math_imul($122, $123) | 0) >> 1 | 0)) {
     $150 = ((_isqrt32($142 << 3 | 1) | 0) + -1 | 0) >>> 1;
     $151 = $150 + 1 | 0;
     $$01 = (Math_imul($150, $151) | 0) >>> 1;
     $$02 = $151;
     $$9 = $150;
    } else {
     $161 = (($$017 << 1) + 2 - (_isqrt32(($124 - $142 << 3) + -7 | 0) | 0) | 0) >>> 1;
     $163 = $$017 + 1 - $161 | 0;
     $$01 = $124 - ((Math_imul($163, $$017 + 2 - $161 | 0) | 0) >> 1) | 0;
     $$02 = $163;
     $$9 = $161;
    }
    _ec_dec_update($19, $$01, $$01 + $$02 | 0, $124);
    $$14 = _celt_udiv($$9 << 14, $$017) | 0;
    $$5 = 0;
    label = 60;
    break L4;
   } else {
    $125 = ($$628 | 0) > ($122 | 0);
    if ($125) $141 = $124 - ((Math_imul($$017 + 1 - $$628 | 0, $$017 + 2 - $$628 | 0) | 0) >> 1) | 0; else $141 = (Math_imul($$628, $$628 + 1 | 0) | 0) >> 1;
    _ec_encode($19, $141, $141 + ($125 ? $$017 + 1 - $$628 | 0 : $$628 + 1 | 0) | 0, $124);
    $$12 = $$628;
    break;
   }
  } while (0);
  do if ((label | 0) == 27) {
   $120 = $$017 + 1 | 0;
   if ($37) {
    $$12 = _ec_dec_uint($19, $120) | 0;
    break;
   } else {
    _ec_enc_uint($19, $$62848, $120);
    $$12 = $$62848;
    break;
   }
  } while (0);
  if (($$12 | 0) <= -1) _celt_fatal(40354, 40213, 838);
  $174 = _celt_udiv($$12 << 14, $$017) | 0;
  if ($37 | $30) {
   $$14 = $174;
   $$5 = 0;
   label = 60;
  } else if (!$174) {
   _intensity_stereo(HEAP32[$13 + 8 >> 2] | 0, $2, $3, $21, $15, $4);
   $$5$ph = 0;
   label = 59;
   break;
  } else {
   _stereo_split($2, $3, $4);
   $$14 = $174;
   $$5 = 0;
   label = 60;
   break;
  }
 } while (0);
 L80 : do if ((label | 0) == 59) {
  $195 = (_ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx21 >> 2] | 0) | 0) - $39 | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - $195;
  $$1453 = 0;
  $$555 = $$5$ph;
  $232 = $195;
 } else if ((label | 0) == 60) {
  $199 = (_ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx21 >> 2] | 0) | 0) - $39 | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - $199;
  L82 : do if (($$14 | 0) < 16384) switch ($$14 | 0) {
  case 0:
   {
    $$1453 = $$14;
    $$555 = $$5;
    $232 = $199;
    break L80;
    break;
   }
  default:
   {}
  } else {
   switch ($$14 | 0) {
   case 16384:
    break;
   default:
    break L82;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & (1 << $6) + -1 << $6;
   $$110 = 16384;
   $$1452 = $$14;
   $$16 = 32767;
   $$18 = 0;
   $$554 = $$5;
   $230 = $199;
   HEAP32[$1 >> 2] = $$554;
   $225 = $1 + 4 | 0;
   HEAP32[$225 >> 2] = $$18;
   $226 = $1 + 8 | 0;
   HEAP32[$226 >> 2] = $$16;
   $227 = $1 + 12 | 0;
   HEAP32[$227 >> 2] = $$110;
   $228 = $1 + 16 | 0;
   HEAP32[$228 >> 2] = $$1452;
   $229 = $1 + 20 | 0;
   HEAP32[$229 >> 2] = $230;
   return;
  } while (0);
  $213 = (_bitexact_cos($$14 & 65535) | 0) << 16 >> 16;
  $217 = (_bitexact_cos(16384 - $$14 & 65535) | 0) << 16 >> 16;
  $$110 = (Math_imul(($4 << 23) + -8388608 >> 16, (_bitexact_log2tan($217, $213) | 0) << 16 >> 16) | 0) + 16384 >> 15;
  $$1452 = $$14;
  $$16 = $217;
  $$18 = $213;
  $$554 = $$5;
  $230 = $199;
  HEAP32[$1 >> 2] = $$554;
  $225 = $1 + 4 | 0;
  HEAP32[$225 >> 2] = $$18;
  $226 = $1 + 8 | 0;
  HEAP32[$226 >> 2] = $$16;
  $227 = $1 + 12 | 0;
  HEAP32[$227 >> 2] = $$110;
  $228 = $1 + 16 | 0;
  HEAP32[$228 >> 2] = $$1452;
  $229 = $1 + 20 | 0;
  HEAP32[$229 >> 2] = $230;
  return;
 } while (0);
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & (1 << $6) + -1;
 $$110 = -16384;
 $$1452 = $$1453;
 $$16 = 0;
 $$18 = 32767;
 $$554 = $$555;
 $230 = $232;
 HEAP32[$1 >> 2] = $$554;
 $225 = $1 + 4 | 0;
 HEAP32[$225 >> 2] = $$18;
 $226 = $1 + 8 | 0;
 HEAP32[$226 >> 2] = $$16;
 $227 = $1 + 12 | 0;
 HEAP32[$227 >> 2] = $$110;
 $228 = $1 + 16 | 0;
 HEAP32[$228 >> 2] = $$1452;
 $229 = $1 + 20 | 0;
 HEAP32[$229 >> 2] = $230;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _silk_noise_shape_quantizer($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$0 = 0, $$01 = 0, $$022 = 0, $$023 = 0, $$03 = 0, $$04$in$in = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$210 = 0, $$213 = 0, $$216 = 0, $$320$in = 0, $101 = 0, $103 = 0, $106 = 0, $112 = 0, $114 = 0, $117 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $148 = 0, $155 = 0, $161 = 0, $163 = 0, $181 = 0, $183 = 0, $189 = 0, $19 = 0, $190 = 0, $199 = 0, $200 = 0, $207 = 0, $209 = 0, $215 = 0, $219 = 0, $222 = 0, $227 = 0, $228 = 0, $233 = 0, $235 = 0, $24 = 0, $243 = 0, $250 = 0, $252 = 0, $255 = 0, $257 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $69 = 0, $70 = 0, $73 = 0, $79 = 0, $81 = 0, $84 = 0, $90 = 0, $92 = 0, $95 = 0, $sext22 = 0, $spec$select = 0, $spec$select36 = 0, $spec$select37 = 0, dest = 0, label = 0, src = 0, stop = 0;
 $19 = $0 + 4336 | 0;
 $24 = $0 + 4332 | 0;
 $31 = $0 + 4340 | 0;
 $32 = ($1 | 0) == 2;
 $33 = $7 + 2 | 0;
 $34 = $7 + 4 | 0;
 $35 = $7 + 6 | 0;
 $36 = $7 + 8 | 0;
 $38 = ($17 & 1 | 0) == 0;
 $39 = $0 + 4324 | 0;
 $40 = $0 + 4224 | 0;
 $41 = $0 + 4320 | 0;
 $42 = $11 << 16 >> 16;
 $43 = $12 << 16 >> 16;
 $44 = $12 >> 16;
 $45 = ($9 | 0) > 0;
 $46 = $10 << 16 >> 16;
 $47 = $10 >> 16;
 $48 = ($14 | 0) > 2048;
 $49 = ($14 | 0) / 2 | 0;
 $50 = $49 + -512 | 0;
 $51 = $15 + 944 | 0;
 $sext22 = $15 << 16;
 $53 = $14 << 16 >> 16;
 $54 = Math_imul($sext22 >> 16, $53) | 0;
 $56 = Math_imul($51 << 16 >> 16, $53) | 0;
 $57 = $15 + -944 | 0;
 $59 = Math_imul(61865984 - $sext22 >> 16, $53) | 0;
 $60 = 512 - $49 | 0;
 $61 = $13 >>> 6 << 16 >> 16;
 $64 = ($13 >> 21) + 1 >> 1;
 $$0 = $5 + ((HEAP32[$24 >> 2] | 0) - $9 + 2 << 2) | 0;
 $$01 = $0 + 1280 + ((HEAP32[$19 >> 2] | 0) - $9 + 1 << 2) | 0;
 $$023 = 0;
 $$03 = $0 + 3900 | 0;
 while (1) {
  if (($$023 | 0) >= ($16 | 0)) {
   label = 27;
   break;
  }
  HEAP32[$31 >> 2] = (Math_imul(HEAP32[$31 >> 2] | 0, 196314165) | 0) + 907633515;
  $69 = _silk_noise_shape_quantizer_short_prediction_c($$03, $6, $18) | 0;
  if ($32) {
   $70 = HEAP32[$$0 >> 2] | 0;
   $73 = HEAP16[$7 >> 1] | 0;
   $79 = (Math_imul($70 >> 16, $73) | 0) + ((Math_imul($70 & 65535, $73) | 0) >> 16) + 2 | 0;
   $81 = HEAP32[$$0 + -4 >> 2] | 0;
   $84 = HEAP16[$33 >> 1] | 0;
   $90 = $79 + ((Math_imul($81 >> 16, $84) | 0) + ((Math_imul($81 & 65535, $84) | 0) >> 16)) | 0;
   $92 = HEAP32[$$0 + -8 >> 2] | 0;
   $95 = HEAP16[$34 >> 1] | 0;
   $101 = $90 + ((Math_imul($92 >> 16, $95) | 0) + ((Math_imul($92 & 65535, $95) | 0) >> 16)) | 0;
   $103 = HEAP32[$$0 + -12 >> 2] | 0;
   $106 = HEAP16[$35 >> 1] | 0;
   $112 = $101 + ((Math_imul($103 >> 16, $106) | 0) + ((Math_imul($103 & 65535, $106) | 0) >> 16)) | 0;
   $114 = HEAP32[$$0 + -16 >> 2] | 0;
   $117 = HEAP16[$36 >> 1] | 0;
   $$022 = $112 + ((Math_imul($114 >> 16, $117) | 0) + ((Math_imul($114 & 65535, $117) | 0) >> 16)) | 0;
   $$1 = $$0 + 4 | 0;
  } else {
   $$022 = 0;
   $$1 = $$0;
  }
  if (!$38) {
   label = 6;
   break;
  }
  $125 = _silk_NSQ_noise_shape_feedback_loop_c(HEAP32[$39 >> 2] | 0, $40, $8, $17) | 0;
  $126 = HEAP32[$41 >> 2] | 0;
  $127 = $126 >> 16;
  $129 = $126 & 65535;
  $133 = $125 + ((Math_imul($127, $42) | 0) + ((Math_imul($129, $42) | 0) >> 16)) | 0;
  $137 = HEAP32[$0 + 1280 + ((HEAP32[$19 >> 2] | 0) + -1 << 2) >> 2] | 0;
  $148 = (Math_imul($137 >> 16, $43) | 0) + ((Math_imul($137 & 65535, $43) | 0) >> 16) + (Math_imul($127, $44) | 0) + ((Math_imul($129, $44) | 0) >> 16) | 0;
  if ($45) {
   $155 = (HEAP32[$$01 >> 2] | 0) + (HEAP32[$$01 + -8 >> 2] | 0) | 0;
   $161 = (Math_imul($155 >> 16, $46) | 0) + ((Math_imul($155 & 65535, $46) | 0) >> 16) | 0;
   $163 = HEAP32[$$01 + -4 >> 2] | 0;
   $$04$in$in = $$022 - ($161 + (Math_imul($163 >> 16, $47) | 0) + ((Math_imul($163 & 65535, $47) | 0) >> 16) << 1) + (($69 << 2) - $133 - $148 << 1) >> 2;
   $$12 = $$01 + 4 | 0;
  } else {
   if ($32) {
    label = 9;
    break;
   }
   $$04$in$in = ($69 << 2) - $133 - $148 >> 1;
   $$12 = $$01;
  }
  $181 = $2 + ($$023 << 2) | 0;
  $183 = (HEAP32[$181 >> 2] | 0) - ($$04$in$in + 1 >> 1) | 0;
  $spec$select = (HEAP32[$31 >> 2] | 0) < 0 ? 0 - $183 | 0 : $183;
  $spec$select36 = ($spec$select | 0) > -31744 ? $spec$select : -31744;
  $189 = ($spec$select36 | 0) < 30720 ? $spec$select36 : 30720;
  $190 = $189 - $15 | 0;
  do if ($48) {
   if (($190 | 0) > ($50 | 0)) {
    $$320$in = $190 - $50 | 0;
    label = 18;
    break;
   }
   if (($190 | 0) < ($60 | 0)) {
    $$320$in = $190 + $50 | 0;
    label = 18;
    break;
   } else if (($190 | 0) < 0) {
    label = 21;
    break;
   } else {
    $$2 = $56;
    $$210 = $54;
    $$213 = $51;
    $$216 = $15;
    break;
   }
  } else {
   $$320$in = $190;
   label = 18;
  } while (0);
  L21 : do if ((label | 0) == 18) {
   label = 0;
   if (($$320$in | 0) > 1023) {
    $199 = ($$320$in & -1024) + -80 + $15 | 0;
    $200 = $199 + 1024 | 0;
    $$2 = Math_imul($200 << 16 >> 16, $53) | 0;
    $$210 = Math_imul($199 << 16 >> 16, $53) | 0;
    $$213 = $200;
    $$216 = $199;
    break;
   }
   switch ($$320$in >> 10 | 0) {
   case 0:
    {
     $$2 = $56;
     $$210 = $54;
     $$213 = $51;
     $$216 = $15;
     break L21;
     break;
    }
   case -1:
    {
     label = 21;
     break L21;
     break;
    }
   default:
    {}
   }
   $207 = ($$320$in & -1024 | 80) + $15 | 0;
   $209 = $207 << 16;
   $$2 = Math_imul(-67108864 - $209 >> 16, $53) | 0;
   $$210 = Math_imul(0 - $209 >> 16, $53) | 0;
   $$213 = $207 + 1024 | 0;
   $$216 = $207;
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   $$2 = $54;
   $$210 = $59;
   $$213 = $15;
   $$216 = $57;
  }
  $215 = $189 - $$216 << 16 >> 16;
  $219 = $189 - $$213 << 16 >> 16;
  $222 = ($$2 + (Math_imul($219, $219) | 0) | 0) < ($$210 + (Math_imul($215, $215) | 0) | 0);
  $spec$select37 = $222 ? $$213 : $$216;
  $227 = $3 + $$023 | 0;
  HEAP8[$227 >> 0] = (($spec$select37 >>> 9) + 1 | 0) >>> 1;
  $228 = $spec$select37 << 4;
  $233 = ((HEAP32[$31 >> 2] | 0) < 0 ? 0 - $228 | 0 : $228) + ($$022 << 1) | 0;
  $235 = $233 + ($69 << 4) | 0;
  $243 = (Math_imul($235 >> 16, $61) | 0) + ((Math_imul($235 & 65534, $61) | 0) >> 16) + (Math_imul($235, $64) | 0) | 0;
  if (($243 | 0) > 8388479) $250 = 32767; else if (($243 | 0) < -8388736) $250 = -32768; else $250 = ($243 >> 7) + 1 >> 1;
  HEAP16[$4 + ($$023 << 1) >> 1] = $250;
  $252 = $$03 + 4 | 0;
  HEAP32[$252 >> 2] = $235;
  $255 = $235 - (HEAP32[$181 >> 2] << 4) | 0;
  HEAP32[$39 >> 2] = $255;
  $257 = $255 - ($133 << 2) | 0;
  HEAP32[$41 >> 2] = $257;
  HEAP32[$0 + 1280 + (HEAP32[$19 >> 2] << 2) >> 2] = $257 - ($148 << 2);
  HEAP32[$5 + (HEAP32[$24 >> 2] << 2) >> 2] = $233 << 1;
  HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + (HEAP8[$227 >> 0] | 0);
  $$0 = $$1;
  $$01 = $$12;
  $$023 = $$023 + 1 | 0;
  $$03 = $252;
 }
 if ((label | 0) == 6) _celt_fatal(44519, 44357, 250); else if ((label | 0) == 9) _celt_fatal(44368, 44357, 258); else if ((label | 0) == 27) {
  dest = $0 + 3840 | 0;
  src = $0 + 3840 + ($16 << 2) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
}

function _silk_NLSF_del_dec_quant($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0 = 0, $$01 = 0, $$017 = 0, $$019 = 0, $$021 = 0, $$023 = 0, $$025 = 0, $$029 = 0, $$03 = 0, $$05 = 0, $$07$in$in = 0, $$124 = 0, $$124$in = 0, $$126 = 0, $$130 = 0, $$2 = 0, $$227 = 0, $$29 = 0, $$3 = 0, $$316 = 0, $$328 = 0, $$328$sink = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$sink = 0, $10 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $119 = 0, $12 = 0, $13 = 0, $138 = 0, $14 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $17 = 0, $171 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $19 = 0, $192 = 0, $193 = 0, $195 = 0, $20 = 0, $34 = 0, $41 = 0, $42 = 0, $43 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $61 = 0, $64 = 0, $68 = 0, $71 = 0, $76 = 0, $78 = 0, $80 = 0, $87 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $10 = sp + 304 | 0;
 $11 = sp + 240 | 0;
 $12 = sp + 224 | 0;
 $13 = sp + 192 | 0;
 $14 = sp + 176 | 0;
 $15 = sp + 160 | 0;
 $16 = sp + 80 | 0;
 $17 = sp;
 $18 = $6 << 16 >> 16;
 $$023 = -10;
 while (1) {
  if (($$023 | 0) == 10) break;
  $19 = $$023 << 10;
  $20 = $19 + 1024 | 0;
  L4 : do if (($$023 | 0) > 0) {
   $$2 = ($20 << 16 >> 16) + -102 | 0;
   $$29 = ($$023 << 26 >> 16) + -102 | 0;
  } else {
   switch ($$023 | 0) {
   case 0:
    {
     $$2 = ($20 << 16 >> 16) + -102 | 0;
     $$29 = $19;
     break L4;
     break;
    }
   case -1:
    {
     $$05 = $20;
     $$07$in$in = -1024;
     break;
    }
   default:
    {
     $$05 = $20 & 64512 | 102;
     $$07$in$in = $19 & 64512;
    }
   }
   $$2 = $$05;
   $$29 = $$07$in$in | 102;
  } while (0);
  $34 = $$023 + 10 | 0;
  HEAP32[$16 + ($34 << 2) >> 2] = (Math_imul($$29 << 16 >> 16, $18) | 0) >> 16;
  HEAP32[$17 + ($34 << 2) >> 2] = (Math_imul($$2 << 16 >> 16, $18) | 0) >> 16;
  $$023 = $$023 + 1 | 0;
 }
 HEAP32[$13 >> 2] = 0;
 HEAP16[$12 >> 1] = 0;
 $41 = $9 << 16 >> 16;
 $42 = $7 << 16 >> 16;
 $43 = $8 << 16 >> 16;
 $$029 = 1;
 $$124$in = $41;
 while (1) {
  $$124 = $$124$in + -1 | 0;
  if (($$124$in | 0) <= 0) break;
  $48 = $5 + (HEAP16[$4 + ($$124 << 1) >> 1] | 0) | 0;
  $51 = HEAP16[$1 + ($$124 << 1) >> 1] | 0;
  $52 = $3 + $$124 | 0;
  $53 = $2 + ($$124 << 1) | 0;
  $$025 = 0;
  while (1) {
   if (($$025 | 0) >= ($$029 | 0)) break;
   $57 = $12 + ($$025 << 1) | 0;
   $61 = (Math_imul(HEAPU8[$52 >> 0] | 0, HEAP16[$57 >> 1] | 0) | 0) >> 8;
   $64 = Math_imul($51 - $61 << 16 >> 16, $42) | 0;
   $68 = ($64 | 0) > 655359 ? 9 : ($64 | 0) < -655360 ? -10 : $64 >> 16;
   HEAP8[$11 + ($$025 << 4) + $$124 >> 0] = $68;
   $71 = $68 + 10 | 0;
   $76 = (HEAP32[$16 + ($71 << 2) >> 2] | 0) + $61 | 0;
   $78 = (HEAP32[$17 + ($71 << 2) >> 2] | 0) + $61 | 0;
   HEAP16[$57 >> 1] = $76;
   $80 = $$025 + $$029 | 0;
   HEAP16[$12 + ($80 << 1) >> 1] = $78;
   do if (($68 | 0) > 2) if (($68 | 0) == 3) {
    $$3 = 280;
    $$316 = HEAPU8[$48 + 7 >> 0] | 0;
    break;
   } else {
    $87 = $68 * 43 | 0;
    $$3 = $87 + 151 | 0;
    $$316 = $87 + 108 | 0;
    break;
   } else {
    if (($68 | 0) >= -3) {
     $$3 = HEAPU8[$48 + ($68 + 5) >> 0] | 0;
     $$316 = HEAPU8[$48 + ($68 + 4) >> 0] | 0;
     break;
    }
    if (($68 | 0) == -4) {
     $$3 = HEAPU8[$48 + 1 >> 0] | 0;
     $$316 = 280;
     break;
    } else {
     $95 = Math_imul($68, -43) | 0;
     $$3 = $95 + 65 | 0;
     $$316 = $95 + 108 | 0;
     break;
    }
   } while (0);
   $106 = $13 + ($$025 << 2) | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $109 = $51 - $76 << 16 >> 16;
   $110 = Math_imul($109, $109) | 0;
   $112 = HEAP16[$53 >> 1] | 0;
   HEAP32[$106 >> 2] = $107 + (Math_imul($110, $112) | 0) + (Math_imul($43, $$316 << 16 >> 16) | 0);
   $119 = $51 - $78 << 16 >> 16;
   HEAP32[$13 + ($80 << 2) >> 2] = $107 + (Math_imul(Math_imul($119, $119) | 0, $112) | 0) + (Math_imul($43, $$3 << 16 >> 16) | 0);
   $$025 = $$025 + 1 | 0;
  }
  L33 : do if (($$029 | 0) < 3) {
   $$126 = 0;
   while (1) {
    if (($$126 | 0) >= ($$029 | 0)) break;
    HEAP8[$11 + ($$126 + $$029 << 4) + $$124 >> 0] = (HEAPU8[$11 + ($$126 << 4) + $$124 >> 0] | 0) + 1;
    $$126 = $$126 + 1 | 0;
   }
   $138 = $$029 << 1;
   $$227 = $138;
   while (1) {
    if (($$227 | 0) >= 4) {
     $$130 = $138;
     break L33;
    }
    HEAP8[$11 + ($$227 << 4) + $$124 >> 0] = HEAP8[$11 + ($$227 - $138 << 4) + $$124 >> 0] | 0;
    $$227 = $$227 + 1 | 0;
   }
  } else {
   $$328 = 0;
   while (1) {
    if (($$328 | 0) == 4) break;
    $145 = $13 + ($$328 << 2) | 0;
    $146 = HEAP32[$145 >> 2] | 0;
    $147 = $$328 + 4 | 0;
    $148 = $13 + ($147 << 2) | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $151 = $15 + ($$328 << 2) | 0;
    if (($146 | 0) > ($149 | 0)) {
     HEAP32[$151 >> 2] = $146;
     HEAP32[$145 >> 2] = $149;
     HEAP32[$148 >> 2] = $146;
     $152 = $12 + ($$328 << 1) | 0;
     $153 = HEAP16[$152 >> 1] | 0;
     $154 = $12 + ($147 << 1) | 0;
     HEAP16[$152 >> 1] = HEAP16[$154 >> 1] | 0;
     HEAP16[$154 >> 1] = $153;
     $$328$sink = $147;
     $$sink = $149;
    } else {
     HEAP32[$151 >> 2] = $149;
     $$328$sink = $$328;
     $$sink = $146;
    }
    HEAP32[$14 + ($$328 << 2) >> 2] = $$sink;
    HEAP32[$10 + ($$328 << 2) >> 2] = $$328$sink;
    $$328 = $$328 + 1 | 0;
   }
   while (1) {
    $$0 = 0;
    $$01 = 2147483647;
    $$017 = 0;
    $$019 = 0;
    $$4 = 0;
    while (1) {
     if (($$4 | 0) == 4) break;
     $160 = HEAP32[$15 + ($$4 << 2) >> 2] | 0;
     $161 = ($$01 | 0) > ($160 | 0);
     $163 = HEAP32[$14 + ($$4 << 2) >> 2] | 0;
     $164 = ($$0 | 0) < ($163 | 0);
     $$0 = $164 ? $163 : $$0;
     $$01 = $161 ? $160 : $$01;
     $$017 = $164 ? $$4 : $$017;
     $$019 = $161 ? $$4 : $$019;
     $$4 = $$4 + 1 | 0;
    }
    if (($$01 | 0) >= ($$0 | 0)) break;
    HEAP32[$10 + ($$017 << 2) >> 2] = HEAP32[$10 + ($$019 << 2) >> 2] ^ 4;
    $171 = $$019 + 4 | 0;
    HEAP32[$13 + ($$017 << 2) >> 2] = HEAP32[$13 + ($171 << 2) >> 2];
    HEAP16[$12 + ($$017 << 1) >> 1] = HEAP16[$12 + ($171 << 1) >> 1] | 0;
    HEAP32[$14 + ($$017 << 2) >> 2] = 0;
    HEAP32[$15 + ($$019 << 2) >> 2] = 2147483647;
    $180 = $11 + ($$017 << 4) | 0;
    $181 = $11 + ($$019 << 4) | 0;
    HEAP32[$180 >> 2] = HEAP32[$181 >> 2];
    HEAP32[$180 + 4 >> 2] = HEAP32[$181 + 4 >> 2];
    HEAP32[$180 + 8 >> 2] = HEAP32[$181 + 8 >> 2];
    HEAP32[$180 + 12 >> 2] = HEAP32[$181 + 12 >> 2];
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) == 4) {
     $$130 = $$029;
     break L33;
    }
    $185 = $11 + ($$5 << 4) + $$124 | 0;
    HEAP8[$185 >> 0] = ((HEAP32[$10 + ($$5 << 2) >> 2] | 0) >>> 2) + (HEAPU8[$185 >> 0] | 0);
    $$5 = $$5 + 1 | 0;
   }
  } while (0);
  $$029 = $$130;
  $$124$in = $$124;
 }
 $$021 = 0;
 $$03 = 2147483647;
 $$6 = 0;
 while (1) {
  if (($$6 | 0) == 8) break;
  $192 = HEAP32[$13 + ($$6 << 2) >> 2] | 0;
  $193 = ($$03 | 0) > ($192 | 0);
  $$021 = $193 ? $$6 : $$021;
  $$03 = $193 ? $192 : $$03;
  $$6 = $$6 + 1 | 0;
 }
 $195 = $$021 & 3;
 $$7 = 0;
 while (1) {
  if (($$7 | 0) >= ($41 | 0)) break;
  HEAP8[$0 + $$7 >> 0] = HEAP8[$11 + ($195 << 4) + $$7 >> 0] | 0;
  $$7 = $$7 + 1 | 0;
 }
 HEAP8[$0 >> 0] = ($$021 >>> 2) + (HEAPU8[$0 >> 0] | 0);
 STACKTOP = sp;
 return $$03 | 0;
}

function _opus_custom_encoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$01 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $123 = 0, $124 = 0, $132 = 0, $133 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $154 = 0, $157 = 0, $17 = 0, $173 = 0, $174 = 0, $18 = 0, $181 = 0, $182 = 0, $190 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $200 = 0, $209 = 0, $210 = 0, $218 = 0, $219 = 0, $228 = 0, $229 = 0, $236 = 0, $237 = 0, $30 = 0, $31 = 0, $43 = 0, $44 = 0, $57 = 0, $58 = 0, $66 = 0, $67 = 0, $74 = 0, $75 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $96 = 0, $97 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 do switch ($1 | 0) {
 case 4010:
  {
   $8 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $9 = HEAP32[$8 >> 2] | 0;
   HEAP32[$2 >> 2] = $8 + 4;
   if ($9 >>> 0 > 10) label = 43; else {
    HEAP32[$0 + 24 >> 2] = $9;
    label = 42;
   }
   break;
  }
 case 10010:
  {
   $17 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $18 = HEAP32[$17 >> 2] | 0;
   HEAP32[$2 >> 2] = $17 + 4;
   if (($18 | 0) < 0) label = 43; else if (($18 | 0) < (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$0 + 32 >> 2] = $18;
    label = 42;
   } else label = 43;
   break;
  }
 case 10012:
  {
   $30 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $31 = HEAP32[$30 >> 2] | 0;
   HEAP32[$2 >> 2] = $30 + 4;
   if (($31 | 0) < 1) label = 43; else if (($31 | 0) > (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) label = 43; else {
    HEAP32[$0 + 36 >> 2] = $31;
    label = 42;
   }
   break;
  }
 case 10002:
  {
   $43 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$2 >> 2] = $43 + 4;
   if ($44 >>> 0 > 2) label = 43; else {
    HEAP32[$0 + 20 >> 2] = ($44 | 0) != 2 & 1;
    HEAP32[$0 + 12 >> 2] = ($44 | 0) == 0 & 1;
    label = 42;
   }
   break;
  }
 case 4014:
  {
   $57 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $58 = HEAP32[$57 >> 2] | 0;
   HEAP32[$2 >> 2] = $57 + 4;
   if ($58 >>> 0 > 100) label = 43; else {
    HEAP32[$0 + 56 >> 2] = $58;
    label = 42;
   }
   break;
  }
 case 4020:
  {
   $66 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$2 >> 2] = $66 + 4;
   HEAP32[$0 + 52 >> 2] = $67;
   label = 42;
   break;
  }
 case 4006:
  {
   $74 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $75 = HEAP32[$74 >> 2] | 0;
   HEAP32[$2 >> 2] = $74 + 4;
   HEAP32[$0 + 44 >> 2] = $75;
   label = 42;
   break;
  }
 case 4002:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   if (($83 | 0) > 500 | ($83 | 0) == -1) {
    $88 = (HEAP32[$0 + 4 >> 2] | 0) * 26e4 | 0;
    HEAP32[$0 + 40 >> 2] = ($83 | 0) < ($88 | 0) ? $83 : $88;
    label = 42;
   } else label = 43;
   break;
  }
 case 10008:
  {
   $96 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $97 = HEAP32[$96 >> 2] | 0;
   HEAP32[$2 >> 2] = $96 + 4;
   if (($97 + -1 | 0) >>> 0 > 1) label = 43; else {
    HEAP32[$0 + 8 >> 2] = $97;
    label = 42;
   }
   break;
  }
 case 4036:
  {
   $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $106 = HEAP32[$105 >> 2] | 0;
   HEAP32[$2 >> 2] = $105 + 4;
   if (($106 + -8 | 0) >>> 0 > 16) label = 43; else {
    HEAP32[$0 + 60 >> 2] = $106;
    label = 42;
   }
   break;
  }
 case 4037:
  {
   $114 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $115 = HEAP32[$114 >> 2] | 0;
   HEAP32[$2 >> 2] = $114 + 4;
   HEAP32[$115 >> 2] = HEAP32[$0 + 60 >> 2];
   label = 42;
   break;
  }
 case 4046:
  {
   $123 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $124 = HEAP32[$123 >> 2] | 0;
   HEAP32[$2 >> 2] = $123 + 4;
   if ($124 >>> 0 > 1) label = 43; else {
    HEAP32[$0 + 68 >> 2] = $124;
    label = 42;
   }
   break;
  }
 case 4047:
  {
   $132 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $133 = HEAP32[$132 >> 2] | 0;
   HEAP32[$2 >> 2] = $132 + 4;
   if (!$133) label = 43; else {
    HEAP32[$133 >> 2] = HEAP32[$0 + 68 >> 2];
    label = 42;
   }
   break;
  }
 case 4028:
  {
   $137 = $0 + 4 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   $139 = HEAP32[$0 >> 2] | 0;
   $141 = HEAP32[$139 + 4 >> 2] | 0;
   $144 = $0 + 244 + ((Math_imul($138, $141 + 1024 | 0) | 0) << 2) | 0;
   $146 = HEAP32[$139 + 8 >> 2] | 0;
   $147 = Math_imul($138, $146) | 0;
   $148 = $144 + ($147 << 2) | 0;
   $149 = $148 + ($147 << 2) | 0;
   _memset($0 + 76 | 0, 0, (_opus_custom_encoder_get_size($141, $146, $138) | 0) + -76 | 0) | 0;
   $$01 = 0;
   $154 = $139;
   $157 = $138;
   while (1) {
    if (($$01 | 0) >= (Math_imul($157, HEAP32[$154 + 8 >> 2] | 0) | 0)) break;
    HEAPF32[$149 + ($$01 << 2) >> 2] = -28.0;
    HEAPF32[$148 + ($$01 << 2) >> 2] = -28.0;
    $$01 = $$01 + 1 | 0;
    $154 = HEAP32[$0 >> 2] | 0;
    $157 = HEAP32[$137 >> 2] | 0;
   }
   HEAP32[$0 + 216 >> 2] = 0;
   HEAPF32[$0 + 84 >> 2] = 1.0;
   HEAP32[$0 + 80 >> 2] = 2;
   HEAP32[$0 + 88 >> 2] = 256;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP32[$0 + 100 >> 2] = 0;
   label = 42;
   break;
  }
 case 10016:
  {
   $173 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $174 = HEAP32[$173 >> 2] | 0;
   HEAP32[$2 >> 2] = $173 + 4;
   HEAP32[$0 + 48 >> 2] = $174;
   label = 42;
   break;
  }
 case 10022:
  {
   $181 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $182 = HEAP32[$181 >> 2] | 0;
   HEAP32[$2 >> 2] = $181 + 4;
   if (!$182) label = 42; else {
    dest = $0 + 120 | 0;
    src = $182;
    stop = dest + 64 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    label = 42;
   }
   break;
  }
 case 10028:
  {
   $190 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $191 = HEAP32[$190 >> 2] | 0;
   HEAP32[$2 >> 2] = $190 + 4;
   if (!$191) label = 42; else {
    $194 = $191;
    $199 = HEAP32[$194 + 4 >> 2] | 0;
    $200 = $0 + 184 | 0;
    HEAP32[$200 >> 2] = HEAP32[$194 >> 2];
    HEAP32[$200 + 4 >> 2] = $199;
    label = 42;
   }
   break;
  }
 case 10015:
  {
   $209 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $210 = HEAP32[$209 >> 2] | 0;
   HEAP32[$2 >> 2] = $209 + 4;
   if (!$210) label = 43; else {
    HEAP32[$210 >> 2] = HEAP32[$0 >> 2];
    label = 42;
   }
   break;
  }
 case 4031:
  {
   $218 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $219 = HEAP32[$218 >> 2] | 0;
   HEAP32[$2 >> 2] = $218 + 4;
   if (!$219) label = 43; else {
    HEAP32[$219 >> 2] = HEAP32[$0 + 76 >> 2];
    label = 42;
   }
   break;
  }
 case 10024:
  {
   $228 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $229 = HEAP32[$228 >> 2] | 0;
   HEAP32[$2 >> 2] = $228 + 4;
   HEAP32[$0 + 64 >> 2] = $229;
   label = 42;
   break;
  }
 case 10026:
  {
   $236 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $237 = HEAP32[$236 >> 2] | 0;
   HEAP32[$2 >> 2] = $236 + 4;
   HEAP32[$0 + 236 >> 2] = $237;
   label = 42;
   break;
  }
 default:
  {
   $$0 = -5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 42) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 43) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _speex_realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1271$be$i$i = 0, $$1271$i$i = 0, $$1271$ph$i$i = 0, $$1274$be$i$i = 0, $$1274$i$i = 0, $$1274$ph$i$i = 0, $$3$i$i = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $11 = 0, $111 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $147 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $162 = 0, $173 = 0, $176 = 0, $183 = 0, $186 = 0, $188 = 0, $19 = 0, $193 = 0, $20 = 0, $32 = 0, $34 = 0, $45 = 0, $47 = 0, $48 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $68 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $storemerge$i$i = 0, $storemerge3$i$i = 0;
 if (!$0) {
  $$1$i = _malloc($1) | 0;
  return $$1$i | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[12760] = 12;
  $$1$i = 0;
  return $$1$i | 0;
 }
 $8 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
 $9 = $0 + -8 | 0;
 $10 = $0 + -4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 & -8;
 $13 = $9 + $12 | 0;
 $14 = HEAP32[12624] | 0;
 $16 = $11 & 3;
 if (!(($16 | 0) != 1 & $14 >>> 0 <= $9 >>> 0 & ($12 | 0) > 0)) _abort();
 $19 = $13 + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (!($20 & 1)) _abort();
 do if (!$16) {
  if (!($8 >>> 0 < 256 | $12 >>> 0 < ($8 | 4) >>> 0)) if (($12 - $8 | 0) >>> 0 <= HEAP32[12740] << 1 >>> 0) {
   $$1$i = $0;
   return $$1$i | 0;
  }
 } else {
  if ($12 >>> 0 >= $8 >>> 0) {
   $32 = $12 - $8 | 0;
   if ($32 >>> 0 <= 15) {
    $$1$i = $0;
    return $$1$i | 0;
   }
   $34 = $9 + $8 | 0;
   HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
   HEAP32[$34 + 4 >> 2] = $32 | 3;
   HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1;
   _dispose_chunk($34, $32);
   $$1$i = $0;
   return $$1$i | 0;
  }
  if ((HEAP32[12626] | 0) == ($13 | 0)) {
   $45 = (HEAP32[12623] | 0) + $12 | 0;
   $47 = $45 - $8 | 0;
   $48 = $9 + $8 | 0;
   if ($45 >>> 0 <= $8 >>> 0) break;
   HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
   HEAP32[$48 + 4 >> 2] = $47 | 1;
   HEAP32[12626] = $48;
   HEAP32[12623] = $47;
   $$1$i = $0;
   return $$1$i | 0;
  }
  if ((HEAP32[12625] | 0) == ($13 | 0)) {
   $57 = (HEAP32[12622] | 0) + $12 | 0;
   if ($57 >>> 0 < $8 >>> 0) break;
   $59 = $57 - $8 | 0;
   if ($59 >>> 0 > 15) {
    $61 = $9 + $8 | 0;
    $62 = $9 + $57 | 0;
    HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
    HEAP32[$61 + 4 >> 2] = $59 | 1;
    HEAP32[$62 >> 2] = $59;
    $68 = $62 + 4 | 0;
    HEAP32[$68 >> 2] = HEAP32[$68 >> 2] & -2;
    $storemerge$i$i = $61;
    $storemerge3$i$i = $59;
   } else {
    HEAP32[$10 >> 2] = $11 & 1 | $57 | 2;
    $75 = $9 + $57 + 4 | 0;
    HEAP32[$75 >> 2] = HEAP32[$75 >> 2] | 1;
    $storemerge$i$i = 0;
    $storemerge3$i$i = 0;
   }
   HEAP32[12622] = $storemerge3$i$i;
   HEAP32[12625] = $storemerge$i$i;
   $$1$i = $0;
   return $$1$i | 0;
  }
  if (!($20 & 2)) {
   $81 = ($20 & -8) + $12 | 0;
   if ($81 >>> 0 >= $8 >>> 0) {
    $83 = $81 - $8 | 0;
    $84 = $20 >>> 3;
    L43 : do if ($20 >>> 0 < 256) {
     $87 = HEAP32[$13 + 8 >> 2] | 0;
     $89 = HEAP32[$13 + 12 >> 2] | 0;
     $91 = 50520 + ($84 << 1 << 2) | 0;
     if (($87 | 0) != ($91 | 0)) {
      if ($14 >>> 0 > $87 >>> 0) _abort();
      if ((HEAP32[$87 + 12 >> 2] | 0) != ($13 | 0)) _abort();
     }
     if (($89 | 0) == ($87 | 0)) {
      HEAP32[12620] = HEAP32[12620] & ~(1 << $84);
      break;
     }
     if (($89 | 0) == ($91 | 0)) $$pre$phi$i$iZ2D = $89 + 8 | 0; else {
      if ($14 >>> 0 > $89 >>> 0) _abort();
      $104 = $89 + 8 | 0;
      if ((HEAP32[$104 >> 2] | 0) == ($13 | 0)) $$pre$phi$i$iZ2D = $104; else _abort();
     }
     HEAP32[$87 + 12 >> 2] = $89;
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $87;
    } else {
     $109 = HEAP32[$13 + 24 >> 2] | 0;
     $111 = HEAP32[$13 + 12 >> 2] | 0;
     do if (($111 | 0) == ($13 | 0)) {
      $122 = $13 + 16 | 0;
      $123 = $122 + 4 | 0;
      $124 = HEAP32[$123 >> 2] | 0;
      if (!$124) {
       $126 = HEAP32[$122 >> 2] | 0;
       if (!$126) {
        $$3$i$i = 0;
        break;
       } else {
        $$1271$ph$i$i = $126;
        $$1274$ph$i$i = $122;
       }
      } else {
       $$1271$ph$i$i = $124;
       $$1274$ph$i$i = $123;
      }
      $$1271$i$i = $$1271$ph$i$i;
      $$1274$i$i = $$1274$ph$i$i;
      while (1) {
       $128 = $$1271$i$i + 20 | 0;
       $129 = HEAP32[$128 >> 2] | 0;
       if (!$129) {
        $131 = $$1271$i$i + 16 | 0;
        $132 = HEAP32[$131 >> 2] | 0;
        if (!$132) break; else {
         $$1271$be$i$i = $132;
         $$1274$be$i$i = $131;
        }
       } else {
        $$1271$be$i$i = $129;
        $$1274$be$i$i = $128;
       }
       $$1271$i$i = $$1271$be$i$i;
       $$1274$i$i = $$1274$be$i$i;
      }
      if ($14 >>> 0 > $$1274$i$i >>> 0) _abort(); else {
       HEAP32[$$1274$i$i >> 2] = 0;
       $$3$i$i = $$1271$i$i;
       break;
      }
     } else {
      $114 = HEAP32[$13 + 8 >> 2] | 0;
      if ($14 >>> 0 > $114 >>> 0) _abort();
      $116 = $114 + 12 | 0;
      if ((HEAP32[$116 >> 2] | 0) != ($13 | 0)) _abort();
      $119 = $111 + 8 | 0;
      if ((HEAP32[$119 >> 2] | 0) == ($13 | 0)) {
       HEAP32[$116 >> 2] = $111;
       HEAP32[$119 >> 2] = $114;
       $$3$i$i = $111;
       break;
      } else _abort();
     } while (0);
     if ($109 | 0) {
      $137 = HEAP32[$13 + 28 >> 2] | 0;
      $138 = 50784 + ($137 << 2) | 0;
      do if ((HEAP32[$138 >> 2] | 0) == ($13 | 0)) {
       HEAP32[$138 >> 2] = $$3$i$i;
       if (!$$3$i$i) {
        HEAP32[12621] = HEAP32[12621] & ~(1 << $137);
        break L43;
       }
      } else if ((HEAP32[12624] | 0) >>> 0 > $109 >>> 0) _abort(); else {
       $147 = $109 + 16 | 0;
       HEAP32[((HEAP32[$147 >> 2] | 0) == ($13 | 0) ? $147 : $109 + 20 | 0) >> 2] = $$3$i$i;
       if (!$$3$i$i) break L43; else break;
      } while (0);
      $152 = HEAP32[12624] | 0;
      if ($152 >>> 0 > $$3$i$i >>> 0) _abort();
      HEAP32[$$3$i$i + 24 >> 2] = $109;
      $155 = $13 + 16 | 0;
      $156 = HEAP32[$155 >> 2] | 0;
      do if ($156 | 0) if ($152 >>> 0 > $156 >>> 0) _abort(); else {
       HEAP32[$$3$i$i + 16 >> 2] = $156;
       HEAP32[$156 + 24 >> 2] = $$3$i$i;
       break;
      } while (0);
      $162 = HEAP32[$155 + 4 >> 2] | 0;
      if ($162 | 0) if ((HEAP32[12624] | 0) >>> 0 > $162 >>> 0) _abort(); else {
       HEAP32[$$3$i$i + 20 >> 2] = $162;
       HEAP32[$162 + 24 >> 2] = $$3$i$i;
       break;
      }
     }
    } while (0);
    if ($83 >>> 0 < 16) {
     HEAP32[$10 >> 2] = $11 & 1 | $81 | 2;
     $173 = $9 + $81 + 4 | 0;
     HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
     $$1$i = $0;
     return $$1$i | 0;
    } else {
     $176 = $9 + $8 | 0;
     HEAP32[$10 >> 2] = $11 & 1 | $8 | 2;
     HEAP32[$176 + 4 >> 2] = $83 | 3;
     $183 = $9 + $81 + 4 | 0;
     HEAP32[$183 >> 2] = HEAP32[$183 >> 2] | 1;
     _dispose_chunk($176, $83);
     $$1$i = $0;
     return $$1$i | 0;
    }
   }
  }
 } while (0);
 $186 = _malloc($1) | 0;
 if (!$186) {
  $$1$i = 0;
  return $$1$i | 0;
 }
 $188 = HEAP32[$10 >> 2] | 0;
 $193 = ($188 & -8) - (($188 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($186 | 0, $0 | 0, ($193 >>> 0 < $1 >>> 0 ? $193 : $1) | 0) | 0;
 _free($0);
 $$1$i = $186;
 return $$1$i | 0;
}

function _quant_coarse_energy($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 var $$0114 = 0, $$02 = 0.0, $$idx = 0, $$idx$val = 0, $$idx10$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx9$val = 0, $$sroa$0$0$copyload = 0, $$sroa$030 = 0, $$sroa$2$0$$sroa_idx33 = 0, $$sroa$2$0$copyload = 0, $$sroa$3 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$323$0$copyload = 0, $$sroa$336 = 0, $$sroa$4 = 0, $21 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $41 = 0, $42 = 0, $46 = 0.0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $88 = 0.0, $spec$select43 = 0, $spec$select44 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$sroa$030 = sp + 72 | 0;
 $$sroa$336 = sp + 48 | 0;
 $$sroa$3 = sp + 24 | 0;
 $$sroa$4 = sp;
 if (!$12) if (!$14) {
  $21 = $2 - $1 | 0;
  if (+HEAPF32[$13 >> 2] > +(Math_imul($9 << 1, $21) | 0)) $42 = (Math_imul($21, $9) | 0) < ($11 | 0) & 1; else $42 = 0;
 } else $42 = 0; else $42 = 1;
 $35 = ~~(+HEAPF32[$13 >> 2] * +($6 >>> 0) * +($15 | 0) / +($9 << 9 | 0));
 $36 = $0 + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = +_loss_distortion($4, $5, $1, $3, $37, $9);
 $$idx = $8 + 20 | 0;
 $$idx$val = HEAP32[$$idx >> 2] | 0;
 $$idx6 = $8 + 28 | 0;
 $$idx6$val = HEAP32[$$idx6 >> 2] | 0;
 $39 = _ec_tell_141($$idx$val, $$idx6$val) | 0;
 $41 = ($39 + 3 | 0) >>> 0 > $6 >>> 0;
 $spec$select43 = $41 ? 0 : $42;
 if (($2 - $1 | 0) > 10) {
  $46 = +($11 | 0) * .125;
  if ($46 > 16.0) $$02 = 16.0; else $$02 = $46;
 } else $$02 = 16.0;
 $spec$select44 = ($16 | 0) == 0 ? $$02 : 3.0;
 HEAP32[$$sroa$030 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$sroa$030 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$$sroa$030 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 HEAP32[$$sroa$030 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
 HEAP32[$$sroa$030 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
 HEAP32[$$sroa$030 + 20 >> 2] = HEAP32[$8 + 20 >> 2];
 $$sroa$2$0$$sroa_idx33 = $8 + 24 | 0;
 $$sroa$2$0$copyload = HEAP32[$$sroa$2$0$$sroa_idx33 >> 2] | 0;
 HEAP32[$$sroa$336 >> 2] = HEAP32[$$idx6 >> 2];
 HEAP32[$$sroa$336 + 4 >> 2] = HEAP32[$$idx6 + 4 >> 2];
 HEAP32[$$sroa$336 + 8 >> 2] = HEAP32[$$idx6 + 8 >> 2];
 HEAP32[$$sroa$336 + 12 >> 2] = HEAP32[$$idx6 + 12 >> 2];
 HEAP32[$$sroa$336 + 16 >> 2] = HEAP32[$$idx6 + 16 >> 2];
 $49 = Math_imul($37, $9) | 0;
 $50 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($49 << 2) | 0) + 15 & -16) | 0;
 $51 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($49 << 2) | 0) + 15 & -16) | 0;
 _memcpy($50 | 0, $5 | 0, $49 << 2 | 0) | 0;
 $54 = $41 | ($14 | 0) == 0;
 if ($54) if (!$spec$select43) {
  $$0114 = 0;
  $$idx10$val = $$idx6$val;
  $$idx9$val = $$idx$val;
  $$sroa$323$0$copyload = $$sroa$2$0$copyload;
 } else {
  _quant_coarse_energy_impl($0, $1, $2, $4, $50, $6, $39, 20416 + ($10 * 84 | 0) + 42 | 0, $51, $8, $9, $10, 1, $spec$select44, $16) | 0;
  label = 17;
 } else {
  $58 = _quant_coarse_energy_impl($0, $1, $2, $4, $50, $6, $39, 20416 + ($10 * 84 | 0) + 42 | 0, $51, $8, $9, $10, 1, $spec$select44, $16) | 0;
  if (!$spec$select43) {
   $$0114 = $58;
   $$idx10$val = HEAP32[$$idx6 >> 2] | 0;
   $$idx9$val = HEAP32[$$idx >> 2] | 0;
   $$sroa$323$0$copyload = HEAP32[$$sroa$2$0$$sroa_idx33 >> 2] | 0;
  } else label = 17;
 }
 if ((label | 0) == 17) {
  _memcpy($5 | 0, $50 | 0, (Math_imul(HEAP32[$36 >> 2] | 0, $9) | 0) << 2 | 0) | 0;
  _memcpy($7 | 0, $51 | 0, (Math_imul(HEAP32[$36 >> 2] | 0, $9) | 0) << 2 | 0) | 0;
  $storemerge = $38;
  HEAPF32[$13 >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
 $60 = _ec_tell_frac($$idx9$val, $$idx10$val) | 0;
 $$sroa$0$0$copyload = HEAP32[$8 >> 2] | 0;
 $$sroa$3$0$$sroa_idx = $8 + 4 | 0;
 HEAP32[$$sroa$3 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx >> 2];
 HEAP32[$$sroa$3 + 4 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 4 >> 2];
 HEAP32[$$sroa$3 + 8 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 8 >> 2];
 HEAP32[$$sroa$3 + 12 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 12 >> 2];
 HEAP32[$$sroa$3 + 16 >> 2] = HEAP32[$$sroa$3$0$$sroa_idx + 16 >> 2];
 HEAP32[$$sroa$4 >> 2] = HEAP32[$$idx6 >> 2];
 HEAP32[$$sroa$4 + 4 >> 2] = HEAP32[$$idx6 + 4 >> 2];
 HEAP32[$$sroa$4 + 8 >> 2] = HEAP32[$$idx6 + 8 >> 2];
 HEAP32[$$sroa$4 + 12 >> 2] = HEAP32[$$idx6 + 12 >> 2];
 HEAP32[$$sroa$4 + 16 >> 2] = HEAP32[$$idx6 + 16 >> 2];
 $61 = _ec_range_bytes($$sroa$2$0$copyload) | 0;
 $63 = $$sroa$0$0$copyload + $61 | 0;
 $64 = (_ec_range_bytes($$sroa$323$0$copyload) | 0) - $61 | 0;
 $66 = _llvm_stacksave() | 0;
 $67 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($64 | 0) == 0 ? 1 : $64) | 0) + 15 & -16) | 0;
 _memcpy($67 | 0, $63 | 0, $64 | 0) | 0;
 HEAP32[$8 >> 2] = HEAP32[$$sroa$030 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$$sroa$030 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$$sroa$030 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$$sroa$030 + 12 >> 2];
 HEAP32[$8 + 16 >> 2] = HEAP32[$$sroa$030 + 16 >> 2];
 HEAP32[$8 + 20 >> 2] = HEAP32[$$sroa$030 + 20 >> 2];
 HEAP32[$$sroa$2$0$$sroa_idx33 >> 2] = $$sroa$2$0$copyload;
 HEAP32[$$idx6 >> 2] = HEAP32[$$sroa$336 >> 2];
 HEAP32[$$idx6 + 4 >> 2] = HEAP32[$$sroa$336 + 4 >> 2];
 HEAP32[$$idx6 + 8 >> 2] = HEAP32[$$sroa$336 + 8 >> 2];
 HEAP32[$$idx6 + 12 >> 2] = HEAP32[$$sroa$336 + 12 >> 2];
 HEAP32[$$idx6 + 16 >> 2] = HEAP32[$$sroa$336 + 16 >> 2];
 $69 = _quant_coarse_energy_impl($0, $1, $2, $4, $5, $6, $39, 20416 + ($10 * 84 | 0) + ($spec$select43 * 42 | 0) | 0, $7, $8, $9, $10, 0, $spec$select44, $16) | 0;
 do if (!$54) {
  if (($$0114 | 0) >= ($69 | 0)) {
   if (($$0114 | 0) != ($69 | 0)) break;
   if (((_ec_tell_frac(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx6 >> 2] | 0) | 0) + $35 | 0) <= ($60 | 0)) break;
  }
  HEAP32[$8 >> 2] = $$sroa$0$0$copyload;
  HEAP32[$$sroa$3$0$$sroa_idx >> 2] = HEAP32[$$sroa$3 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 4 >> 2] = HEAP32[$$sroa$3 + 4 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 8 >> 2] = HEAP32[$$sroa$3 + 8 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 12 >> 2] = HEAP32[$$sroa$3 + 12 >> 2];
  HEAP32[$$sroa$3$0$$sroa_idx + 16 >> 2] = HEAP32[$$sroa$3 + 16 >> 2];
  HEAP32[$$sroa$2$0$$sroa_idx33 >> 2] = $$sroa$323$0$copyload;
  HEAP32[$$idx6 >> 2] = HEAP32[$$sroa$4 >> 2];
  HEAP32[$$idx6 + 4 >> 2] = HEAP32[$$sroa$4 + 4 >> 2];
  HEAP32[$$idx6 + 8 >> 2] = HEAP32[$$sroa$4 + 8 >> 2];
  HEAP32[$$idx6 + 12 >> 2] = HEAP32[$$sroa$4 + 12 >> 2];
  HEAP32[$$idx6 + 16 >> 2] = HEAP32[$$sroa$4 + 16 >> 2];
  _memcpy($63 | 0, $67 | 0, $64 | 0) | 0;
  _memcpy($5 | 0, $50 | 0, (Math_imul(HEAP32[$36 >> 2] | 0, $9) | 0) << 2 | 0) | 0;
  _memcpy($7 | 0, $51 | 0, (Math_imul(HEAP32[$36 >> 2] | 0, $9) | 0) << 2 | 0) | 0;
  _llvm_stackrestore($66 | 0);
  $storemerge = $38;
  HEAPF32[$13 >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } while (0);
 _llvm_stackrestore($66 | 0);
 $88 = +HEAPF32[20752 + ($10 << 2) >> 2];
 $storemerge = $88 * $88 * +HEAPF32[$13 >> 2] + $38;
 HEAPF32[$13 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _opus_packet_parse_impl($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$01 = 0, $$015 = 0, $$01527 = 0, $$016 = 0, $$01625 = 0, $$01626 = 0, $$01634 = 0, $$017 = 0, $$02 = 0, $$07 = 0, $$111 = 0, $$118 = 0, $$123 = 0, $$1322 = 0, $$1821 = 0, $$2 = 0, $$219 = 0, $$24 = 0, $$29 = 0, $$2929 = 0, $$2930 = 0, $$2936 = 0, $$320 = 0, $$4 = 0, $$414 = 0, $$41428 = 0, $$41435 = 0, $$432 = 0, $$437 = 0, $$46 = 0, $$4631 = 0, $$5 = 0, $$6 = 0, $$not = 0, $101 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $64 = 0, $67 = 0, $68 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $83 = 0, $spec$select = 0, $trunc = 0, label = 0, $$01$looptemp = 0;
 if (($5 | 0) == 0 | ($1 | 0) < 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 if (!$1) {
  $$0 = -4;
  return $$0 | 0;
 }
 $trunc = HEAP8[$0 >> 0] | 0;
 $11 = _opus_packet_get_samples_per_frame($trunc, 48e3) | 0;
 $12 = $0 + 1 | 0;
 $13 = $1 + -1 | 0;
 L7 : do switch ($trunc & 3) {
 case 0:
  {
   $$015 = 0;
   $$016 = 1;
   $$29 = 0;
   $$4 = $12;
   $$414 = $13;
   $$46 = $13;
   label = 29;
   break;
  }
 case 1:
  {
   if (!$2) if (!($13 & 1)) {
    $17 = ($13 | 0) / 2 | 0;
    HEAP16[$5 >> 1] = $17;
    $$01634 = 2;
    $$2936 = 0;
    $$41435 = $17;
    $$437 = $12;
    label = 38;
    break L7;
   } else {
    $$0 = -4;
    return $$0 | 0;
   } else {
    $$01527 = 1;
    $$01625 = 2;
    $$2930 = 0;
    $$41428 = $13;
    $$432 = $12;
    $$4631 = $13;
    label = 30;
   }
   break;
  }
 case 2:
  {
   $19 = _parse_size($12, $13, $5) | 0;
   $20 = $13 - $19 | 0;
   $21 = HEAP16[$5 >> 1] | 0;
   if ($21 << 16 >> 16 < 0) {
    $$0 = -4;
    return $$0 | 0;
   }
   $23 = $21 << 16 >> 16;
   if (($20 | 0) < ($23 | 0)) {
    $$0 = -4;
    return $$0 | 0;
   } else {
    $$015 = 0;
    $$016 = 2;
    $$29 = 0;
    $$4 = $12 + $19 | 0;
    $$414 = $20 - $23 | 0;
    $$46 = $20;
    label = 29;
    break L7;
   }
   break;
  }
 default:
  {
   if (($1 | 0) < 2) {
    $$0 = -4;
    return $$0 | 0;
   }
   $28 = $0 + 2 | 0;
   $29 = HEAP8[$12 >> 0] | 0;
   $30 = $29 & 63;
   $31 = $30 & 255;
   if ($30 << 24 >> 24 == 0 | (Math_imul($11, $31) | 0) > 5760) {
    $$0 = -4;
    return $$0 | 0;
   }
   $35 = $1 + -2 | 0;
   if (!($29 & 64)) {
    $$123 = $28;
    $$1322 = $35;
    $$1821 = 0;
   } else {
    $$01 = $28;
    $$02 = $35;
    $$07 = 0;
    do {
     if (($$02 | 0) < 1) {
      $$0 = -4;
      label = 51;
      break;
     }
     $$01$looptemp = $$01;
     $$01 = $$01 + 1 | 0;
     $40 = HEAP8[$$01$looptemp >> 0] | 0;
     $42 = $40 << 24 >> 24 == -1;
     $spec$select = $42 ? 254 : $40 & 255;
     $$02 = $$02 + -1 - $spec$select | 0;
     $$07 = $$07 + $spec$select | 0;
    } while ($42);
    if ((label | 0) == 51) return $$0 | 0;
    if (($$02 | 0) < 0) {
     $$0 = -4;
     return $$0 | 0;
    } else {
     $$123 = $$01;
     $$1322 = $$02;
     $$1821 = $$07;
    }
   }
   $47 = ($29 & 255) >>> 7 ^ 1;
   $$not = $47 & 255;
   if ($47 << 24 >> 24) {
    if ($2 | 0) {
     $$01527 = $$not;
     $$01625 = $31;
     $$2930 = $$1821;
     $$41428 = $13;
     $$432 = $$123;
     $$4631 = $$1322;
     label = 30;
     break L7;
    }
    $64 = ($$1322 | 0) / ($31 | 0) | 0;
    if ((Math_imul($64, $31) | 0) != ($$1322 | 0)) {
     $$0 = -4;
     return $$0 | 0;
    }
    $67 = $31 + -1 | 0;
    $68 = $64 & 65535;
    $$118 = 0;
    while (1) {
     if (($$118 | 0) >= ($67 | 0)) {
      $$015 = $$not;
      $$016 = $31;
      $$29 = $$1821;
      $$4 = $$123;
      $$414 = $64;
      $$46 = $$1322;
      label = 29;
      break L7;
     }
     HEAP16[$5 + ($$118 << 1) >> 1] = $68;
     $$118 = $$118 + 1 | 0;
    }
   }
   $49 = $31 + -1 | 0;
   $$017 = 0;
   $$111 = $$1322;
   $$2 = $$123;
   $$24 = $$1322;
   while (1) {
    if (($$017 | 0) >= ($49 | 0)) {
     label = 23;
     break;
    }
    $51 = $5 + ($$017 << 1) | 0;
    $52 = _parse_size($$2, $$24, $51) | 0;
    $53 = $$24 - $52 | 0;
    $54 = HEAP16[$51 >> 1] | 0;
    if ($54 << 16 >> 16 < 0) {
     $$0 = -4;
     label = 51;
     break;
    }
    $56 = $54 << 16 >> 16;
    if (($53 | 0) < ($56 | 0)) {
     $$0 = -4;
     label = 51;
     break;
    }
    $$017 = $$017 + 1 | 0;
    $$111 = $$111 - ($52 + $56) | 0;
    $$2 = $$2 + $52 | 0;
    $$24 = $53;
   }
   if ((label | 0) == 23) {
    if (($$111 | 0) < 0) $$0 = -4; else {
     $$015 = $$not;
     $$016 = $31;
     $$29 = $$1821;
     $$4 = $$2;
     $$414 = $$111;
     $$46 = $$24;
     label = 29;
     break L7;
    }
    return $$0 | 0;
   } else if ((label | 0) == 51) return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 29) if (!$2) {
  $$01634 = $$016;
  $$2936 = $$29;
  $$41435 = $$414;
  $$437 = $$4;
  label = 38;
 } else {
  $$01527 = $$015;
  $$01625 = $$016;
  $$2930 = $$29;
  $$41428 = $$414;
  $$432 = $$4;
  $$4631 = $$46;
  label = 30;
 }
 L59 : do if ((label | 0) == 30) {
  $75 = _parse_size($$432, $$4631, $5 + ($$01625 << 1) + -2 | 0) | 0;
  $76 = $$4631 - $75 | 0;
  $77 = $$01625 + -1 | 0;
  $78 = $5 + ($77 << 1) | 0;
  $79 = HEAP16[$78 >> 1] | 0;
  if ($79 << 16 >> 16 < 0) {
   $$0 = -4;
   return $$0 | 0;
  }
  $81 = $79 << 16 >> 16;
  if (($76 | 0) < ($81 | 0)) {
   $$0 = -4;
   return $$0 | 0;
  }
  $83 = $$432 + $75 | 0;
  if (!$$01527) {
   if (($75 + $81 | 0) > ($$41428 | 0)) $$0 = -4; else {
    $$01626 = $$01625;
    $$2929 = $$2930;
    $$5 = $83;
    break;
   }
   return $$0 | 0;
  }
  if ((Math_imul($$01625, $81) | 0) > ($76 | 0)) {
   $$0 = -4;
   return $$0 | 0;
  }
  $$219 = 0;
  while (1) {
   if (($$219 | 0) >= ($77 | 0)) {
    $$01626 = $$01625;
    $$2929 = $$2930;
    $$5 = $83;
    break L59;
   }
   HEAP16[$5 + ($$219 << 1) >> 1] = HEAP16[$78 >> 1] | 0;
   $$219 = $$219 + 1 | 0;
  }
 } else if ((label | 0) == 38) if (($$41435 | 0) > 1275) {
  $$0 = -4;
  return $$0 | 0;
 } else {
  HEAP16[$5 + ($$01634 + -1 << 1) >> 1] = $$41435;
  $$01626 = $$01634;
  $$2929 = $$2936;
  $$5 = $$437;
  break;
 } while (0);
 if ($6 | 0) HEAP32[$6 >> 2] = $$5 - $0;
 $101 = ($4 | 0) == 0;
 $$320 = 0;
 $$6 = $$5;
 while (1) {
  if (($$320 | 0) == ($$01626 | 0)) break;
  if (!$101) HEAP32[$4 + ($$320 << 2) >> 2] = $$6;
  $106 = $$6 + (HEAP16[$5 + ($$320 << 1) >> 1] | 0) | 0;
  $$320 = $$320 + 1 | 0;
  $$6 = $106;
 }
 if ($7 | 0) HEAP32[$7 >> 2] = $$2929 + ($$6 - $0);
 if (!$3) {
  $$0 = $$01626;
  return $$0 | 0;
 }
 HEAP8[$3 >> 0] = $trunc;
 $$0 = $$01626;
 return $$0 | 0;
}

function _silk_noise_shape_analysis_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0.0, $$03 = 0, $$05 = 0.0, $$06 = 0.0, $$08 = 0.0, $$09 = 0.0, $$1 = 0.0, $$14 = 0, $$17 = 0.0, $$1718 = 0.0, $$1719 = 0.0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$pre$phi14Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $109 = 0, $11 = 0, $113 = 0, $116 = 0, $117 = 0, $119 = 0.0, $124 = 0.0, $126 = 0, $128 = 0.0, $129 = 0, $138 = 0, $14 = 0.0, $142 = 0.0, $144 = 0, $145 = 0, $15 = 0, $157 = 0, $161 = 0.0, $165 = 0, $173 = 0.0, $188 = 0.0, $190 = 0, $195 = 0, $196 = 0, $216 = 0, $217 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $223 = 0.0, $225 = 0.0, $228 = 0.0, $23 = 0, $231 = 0, $26 = 0.0, $27 = 0, $35 = 0.0, $4 = 0, $43 = 0, $5 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0.0, $71 = 0.0, $82 = 0, $85 = 0.0, $88 = 0.0, $89 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 112 | 0;
 $6 = sp;
 $10 = $3 + (0 - (HEAP32[$0 + 4600 >> 2] | 0) << 2) | 0;
 $11 = $0 + 4716 | 0;
 $14 = +(HEAP32[$11 >> 2] | 0) * .0078125;
 $15 = $0 + 4696 | 0;
 $22 = +((HEAP32[$15 >> 2] | 0) + (HEAP32[$0 + 4700 >> 2] | 0) | 0) * .5 * .000030517578125;
 $23 = $1 + 696 | 0;
 HEAPF32[$23 >> 2] = $22;
 $26 = +_silk_sigmoid(($14 + -20.0) * .25);
 $27 = $1 + 700 | 0;
 HEAPF32[$27 >> 2] = $26;
 if (!(HEAP32[$0 + 4676 >> 2] | 0)) {
  $35 = 1.0 - +(HEAP32[$0 + 4532 >> 2] | 0) * .00390625;
  $$06 = $14 - $26 * 2.0 * ($22 * .5 + .5) * $35 * $35;
 } else $$06 = $14;
 $43 = $0 + 4765 | 0;
 do if ((HEAP8[$43 >> 0] | 0) == 2) {
  $$1718 = $$06 + +HEAPF32[$0 + 10060 >> 2] * 2.0;
  HEAP8[$0 + 4766 >> 0] = 0;
  $$1719 = $$1718;
  $$pre$phi14Z2D = $0 + 4576 | 0;
  $$pre$phiZ2D = $0 + 4580 | 0;
 } else {
  $$17 = $$06 + (+(HEAP32[$11 >> 2] | 0) * -.4000000059604645 * .0078125 + 6.0) * (1.0 - $22);
  $57 = $0 + 4576 | 0;
  $59 = HEAP32[$57 >> 2] << 1;
  $60 = $0 + 4580 | 0;
  $64 = ((HEAP32[$60 >> 2] << 16 >> 16) * 5 | 0) / 2 | 0;
  $65 = +($59 | 0);
  $$0 = $2;
  $$02 = 0.0;
  $$03 = 0;
  $$05 = 0.0;
  while (1) {
   if (($$03 | 0) >= ($64 | 0)) break;
   $71 = +_silk_log2($65 + +_silk_energy_FLP($$0, $59));
   if (!$$03) $$1 = $$02; else $$1 = $$02 + +Math_abs(+($71 - $$05));
   $$0 = $$0 + ($59 << 2) | 0;
   $$02 = $$1;
   $$03 = $$03 + 1 | 0;
   $$05 = $71;
  }
  $82 = $0 + 4766 | 0;
  if ($$02 > +($64 + -1 | 0) * .6000000238418579) {
   HEAP8[$82 >> 0] = 0;
   $$1719 = $$17;
   $$pre$phi14Z2D = $57;
   $$pre$phiZ2D = $60;
   break;
  } else {
   HEAP8[$82 >> 0] = 1;
   $$1719 = $$17;
   $$pre$phi14Z2D = $57;
   $$pre$phiZ2D = $60;
   break;
  }
 } while (0);
 $85 = +HEAPF32[$1 + 704 >> 2] * 1.0000000474974513e-03;
 $88 = .9399999976158142 / ($85 * $85 + 1.0);
 $89 = $0 + 4672 | 0;
 $95 = +(HEAP32[$89 >> 2] | 0) * .0000152587890625 + +HEAPF32[$27 >> 2] * .009999999776482582;
 $96 = $0 + 4604 | 0;
 $97 = $0 + 4588 | 0;
 $98 = $0 + 4636 | 0;
 $$01 = $10;
 $$14 = 0;
 while (1) {
  $99 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  if (($$14 | 0) >= ($99 | 0)) break;
  $101 = HEAP32[$$pre$phi14Z2D >> 2] | 0;
  $102 = $101 * 3 | 0;
  $105 = ((HEAP32[$96 >> 2] | 0) - $102 | 0) / 2 | 0;
  _silk_apply_sine_window_FLP($4, $$01, 1, $105);
  _memcpy($4 + ($105 << 2) | 0, $$01 + ($105 << 2) | 0, $101 * 12 | 0) | 0;
  $109 = $105 + $102 | 0;
  _silk_apply_sine_window_FLP($4 + ($109 << 2) | 0, $$01 + ($109 << 2) | 0, 2, $105);
  $113 = $$01 + (HEAP32[$97 >> 2] << 2) | 0;
  $116 = HEAP32[$96 >> 2] | 0;
  $117 = HEAP32[$98 >> 2] | 0;
  if ((HEAP32[$89 >> 2] | 0) > 0) _silk_warped_autocorrelation_FLP($5, $4, $95, $116, $117); else _silk_autocorrelation_FLP($5, $4, $116, $117 + 1 | 0);
  $119 = +HEAPF32[$5 >> 2];
  HEAPF32[$5 >> 2] = $119 + ($119 * 2.9999999242136255e-05 + 1.0);
  $124 = +_silk_schur_FLP($6, $5, HEAP32[$98 >> 2] | 0);
  $126 = $1 + 244 + ($$14 * 24 << 2) | 0;
  _silk_k2a_FLP($126, $6, HEAP32[$98 >> 2] | 0);
  $128 = +Math_sqrt(+$124);
  $129 = $1 + ($$14 << 2) | 0;
  HEAPF32[$129 >> 2] = $128;
  if ((HEAP32[$89 >> 2] | 0) > 0) HEAPF32[$129 >> 2] = $128 * +_warped_gain($126, $95, HEAP32[$98 >> 2] | 0);
  _silk_bwexpander_FLP($126, HEAP32[$98 >> 2] | 0, $88);
  $138 = HEAP32[$98 >> 2] | 0;
  if ((HEAP32[$89 >> 2] | 0) > 0) _warped_true2monic_coefs($126, $95, $138); else _limit_coefs($126, $138);
  $$01 = $113;
  $$14 = $$14 + 1 | 0;
 }
 $142 = +_llvm_exp2_f64(+($$1719 * -.1599999964237213));
 $$2 = 0;
 $144 = $99;
 while (1) {
  if (($$2 | 0) >= ($144 | 0)) break;
  $145 = $1 + ($$2 << 2) | 0;
  HEAPF32[$145 >> 2] = +HEAPF32[$145 >> 2] * $142 + 1.2483305931091309;
  $$2 = $$2 + 1 | 0;
  $144 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 $157 = $0 + 4532 | 0;
 $161 = ((+(HEAP32[$15 >> 2] | 0) * .000030517578125 + -1.0) * .5 + 1.0) * 4.0 * (+(HEAP32[$157 >> 2] | 0) * .00390625);
 L37 : do if ((HEAP8[$43 >> 0] | 0) == 2) {
  $$3 = 0;
  $165 = $144;
  while (1) {
   if (($$3 | 0) >= ($165 | 0)) break;
   $173 = .20000000298023224 / +(HEAP32[$$pre$phi14Z2D >> 2] | 0) + 3.0 / +(HEAP32[$1 + 228 + ($$3 << 2) >> 2] | 0);
   HEAPF32[$1 + 628 + ($$3 << 2) >> 2] = $173 + -1.0;
   HEAPF32[$1 + 644 + ($$3 << 2) >> 2] = 1.0 - $173 - $173 * $161;
   $$3 = $$3 + 1 | 0;
   $165 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  }
  $$09 = -.25 - +(HEAP32[$157 >> 2] | 0) * .26249998807907104 * .00390625;
  $231 = $165;
 } else {
  $188 = 1.2999999523162842 / +(HEAP32[$$pre$phi14Z2D >> 2] | 0);
  $190 = $1 + 628 | 0;
  HEAPF32[$190 >> 2] = $188 + -1.0;
  $195 = $1 + 644 | 0;
  HEAPF32[$195 >> 2] = 1.0 - $188 - $188 * $161 * .6000000238418579;
  $$4 = 1;
  while (1) {
   $196 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   if (($$4 | 0) >= ($196 | 0)) {
    $$09 = -.25;
    $231 = $196;
    break L37;
   }
   HEAP32[$1 + 628 + ($$4 << 2) >> 2] = HEAP32[$190 >> 2];
   HEAP32[$1 + 644 + ($$4 << 2) >> 2] = HEAP32[$195 >> 2];
   $$4 = $$4 + 1 | 0;
  }
 } while (0);
 if ((HEAP8[$43 >> 0] | 0) == 2) $$08 = ((1.0 - (1.0 - +HEAPF32[$27 >> 2]) * +HEAPF32[$23 >> 2]) * .20000000298023224 + .30000001192092896) * +Math_sqrt(+(+HEAPF32[$0 + 10060 >> 2])); else $$08 = 0.0;
 $216 = $0 + 7172 | 0;
 $217 = $0 + 7176 | 0;
 $$5 = 0;
 $219 = $231;
 while (1) {
  if (($$5 | 0) >= ($219 | 0)) break;
  $220 = +HEAPF32[$216 >> 2];
  $223 = $220 + ($$08 - $220) * .4000000059604645;
  HEAPF32[$216 >> 2] = $223;
  HEAPF32[$1 + 676 + ($$5 << 2) >> 2] = $223;
  $225 = +HEAPF32[$217 >> 2];
  $228 = $225 + ($$09 - $225) * .4000000059604645;
  HEAPF32[$217 >> 2] = $228;
  HEAPF32[$1 + 660 + ($$5 << 2) >> 2] = $228;
  $$5 = $$5 + 1 | 0;
  $219 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 STACKTOP = sp;
 return;
}

function _LPC_inverse_pred_gain_QA_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01 = 0, $$01$in = 0, $$02 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $114 = 0, $116 = 0, $118 = 0, $120 = 0, $122 = 0, $123 = 0, $129 = 0, $131 = 0, $14 = 0, $141 = 0, $143 = 0, $148 = 0, $15 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $164 = 0, $167 = 0, $169 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $189 = 0, $191 = 0, $193 = 0, $196 = 0, $198 = 0, $20 = 0, $200 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $59 = 0, $69 = 0, $7 = 0, $71 = 0, $76 = 0, $79 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $97 = 0, $99 = 0, $spec$select13 = 0, $spec$select14 = 0, $spec$select20 = 0, $spec$select21 = 0, label = 0;
 $$01$in = $1;
 $14 = 1073741824;
 $15 = 0;
 L1 : while (1) {
  $$01 = $$01$in + -1 | 0;
  $4 = HEAP32[$0 + ($$01 << 2) >> 2] | 0;
  $5 = ($4 + 16773022 | 0) >>> 0 > 33546044;
  if (($$01$in | 0) <= 1) {
   label = 29;
   break;
  }
  if ($5) {
   label = 31;
   break;
  }
  $7 = 0 - ($4 << 7) | 0;
  $9 = (($7 | 0) < 0) << 31 >> 31;
  ___muldi3($7 | 0, $9 | 0, $7 | 0, $9 | 0) | 0;
  $11 = 1073741824 - tempRet0 | 0;
  $16 = ___muldi3($14 | 0, $15 | 0, $11 | 0, (($11 | 0) < 0) << 31 >> 31 | 0) | 0;
  $18 = _bitshift64Lshr($16 | 0, tempRet0 | 0, 30) | 0;
  $20 = $18 & -4;
  if (($20 | 0) < 107374) {
   label = 31;
   break;
  }
  $25 = 32 - (_silk_CLZ32_434(($11 | 0) > 0 ? $11 : 0 - $11 | 0) | 0) | 0;
  $27 = _silk_INVERSE32_varQ_435($11, $25 + 30 | 0) | 0;
  $28 = $$01$in >> 1;
  $29 = ($25 | 0) == 1;
  $31 = (($27 | 0) < 0) << 31 >> 31;
  $32 = $25 + -1 | 0;
  $$02 = 0;
  while (1) {
   if (($$02 | 0) >= ($28 | 0)) break;
   $34 = $0 + ($$02 << 2) | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   $38 = $0 + ($$01 - $$02 + -1 << 2) | 0;
   $39 = HEAP32[$38 >> 2] | 0;
   $42 = ___muldi3($39 | 0, (($39 | 0) < 0) << 31 >> 31 | 0, $7 | 0, $9 | 0) | 0;
   $44 = _bitshift64Lshr($42 | 0, tempRet0 | 0, 30) | 0;
   $46 = _i64Add($44 | 0, tempRet0 | 0, 1, 0) | 0;
   $48 = _bitshift64Lshr($46 | 0, tempRet0 | 0, 1) | 0;
   $50 = $35 - $48 | 0;
   $51 = ($50 | 0) > -1;
   if ($29) {
    if ($51) {
     $spec$select13 = ($35 & ($48 ^ -2147483648) | 0) < 0 ? -2147483648 : $50;
     $57 = ___muldi3($spec$select13 | 0, (($spec$select13 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
     $59 = _bitshift64Ashr($57 | 0, tempRet0 | 0, 1) | 0;
     $76 = ($35 & ($48 ^ -2147483648) | 0) < 0 ? -2147483648 : $50;
     $82 = $59;
     $83 = tempRet0;
    } else {
     $spec$select14 = (($35 ^ -2147483648) & $48 | 0) < 0 ? 2147483647 : $50;
     $69 = ___muldi3($spec$select14 | 0, (($spec$select14 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
     $71 = _bitshift64Ashr($69 | 0, tempRet0 | 0, 1) | 0;
     $76 = (($35 ^ -2147483648) & $48 | 0) < 0 ? 2147483647 : $50;
     $82 = $71;
     $83 = tempRet0;
    }
    $79 = ___muldi3($76 | 0, (($76 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
    $84 = _i64Add($82 | 0, $83 | 0, $79 & 1 | 0, 0) | 0;
    $103 = $84;
    $104 = tempRet0;
   } else {
    if ($51) $92 = ($35 & ($48 ^ -2147483648) | 0) < 0 ? -2147483648 : $50; else $92 = (($35 ^ -2147483648) & $48 | 0) < 0 ? 2147483647 : $50;
    $95 = ___muldi3($92 | 0, (($92 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
    $97 = _bitshift64Ashr($95 | 0, tempRet0 | 0, $32 | 0) | 0;
    $99 = _i64Add($97 | 0, tempRet0 | 0, 1, 0) | 0;
    $101 = _bitshift64Ashr($99 | 0, tempRet0 | 0, 1) | 0;
    $103 = $101;
    $104 = tempRet0;
   }
   $105 = _i64Add($103 | 0, $104 | 0, -2147483648, 0) | 0;
   $106 = tempRet0;
   if ($106 >>> 0 > 0 | ($106 | 0) == 0 & $105 >>> 0 > 4294967295) {
    label = 31;
    break L1;
   }
   HEAP32[$34 >> 2] = $103;
   $114 = ___muldi3($35 | 0, (($35 | 0) < 0) << 31 >> 31 | 0, $7 | 0, $9 | 0) | 0;
   $116 = _bitshift64Lshr($114 | 0, tempRet0 | 0, 30) | 0;
   $118 = _i64Add($116 | 0, tempRet0 | 0, 1, 0) | 0;
   $120 = _bitshift64Lshr($118 | 0, tempRet0 | 0, 1) | 0;
   $122 = $39 - $120 | 0;
   $123 = ($122 | 0) > -1;
   if ($29) {
    if ($123) {
     $spec$select20 = ($39 & ($120 ^ -2147483648) | 0) < 0 ? -2147483648 : $122;
     $129 = ___muldi3($spec$select20 | 0, (($spec$select20 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
     $131 = _bitshift64Ashr($129 | 0, tempRet0 | 0, 1) | 0;
     $148 = ($39 & ($120 ^ -2147483648) | 0) < 0 ? -2147483648 : $122;
     $154 = $131;
     $155 = tempRet0;
    } else {
     $spec$select21 = (($39 ^ -2147483648) & $120 | 0) < 0 ? 2147483647 : $122;
     $141 = ___muldi3($spec$select21 | 0, (($spec$select21 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
     $143 = _bitshift64Ashr($141 | 0, tempRet0 | 0, 1) | 0;
     $148 = (($39 ^ -2147483648) & $120 | 0) < 0 ? 2147483647 : $122;
     $154 = $143;
     $155 = tempRet0;
    }
    $151 = ___muldi3($148 | 0, (($148 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
    $156 = _i64Add($154 | 0, $155 | 0, $151 & 1 | 0, 0) | 0;
    $175 = $156;
    $176 = tempRet0;
   } else {
    if ($123) $164 = ($39 & ($120 ^ -2147483648) | 0) < 0 ? -2147483648 : $122; else $164 = (($39 ^ -2147483648) & $120 | 0) < 0 ? 2147483647 : $122;
    $167 = ___muldi3($164 | 0, (($164 | 0) < 0) << 31 >> 31 | 0, $27 | 0, $31 | 0) | 0;
    $169 = _bitshift64Ashr($167 | 0, tempRet0 | 0, $32 | 0) | 0;
    $171 = _i64Add($169 | 0, tempRet0 | 0, 1, 0) | 0;
    $173 = _bitshift64Ashr($171 | 0, tempRet0 | 0, 1) | 0;
    $175 = $173;
    $176 = tempRet0;
   }
   $177 = _i64Add($175 | 0, $176 | 0, -2147483648, 0) | 0;
   $178 = tempRet0;
   if ($178 >>> 0 > 0 | ($178 | 0) == 0 & $177 >>> 0 > 4294967295) {
    label = 31;
    break L1;
   }
   HEAP32[$38 >> 2] = $175;
   $$02 = $$02 + 1 | 0;
  }
  $$01$in = $$01;
  $14 = $20;
  $15 = (($20 | 0) < 0) << 31 >> 31;
 }
 if ((label | 0) == 29) if ($5) return 0; else {
  $189 = 0 - (HEAP32[$0 >> 2] << 7) | 0;
  $191 = (($189 | 0) < 0) << 31 >> 31;
  ___muldi3($189 | 0, $191 | 0, $189 | 0, $191 | 0) | 0;
  $193 = 1073741824 - tempRet0 | 0;
  $196 = ___muldi3($14 | 0, $15 | 0, $193 | 0, (($193 | 0) < 0) << 31 >> 31 | 0) | 0;
  $198 = _bitshift64Lshr($196 | 0, tempRet0 | 0, 30) | 0;
  $200 = $198 & -4;
  return (($200 | 0) < 107374 ? 0 : $200) | 0;
 } else if ((label | 0) == 31) return 0;
 return 0;
}

function _silk_burg_modified_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$011 = 0, $$017 = 0.0, $$018 = 0.0, $$021 = 0.0, $$022 = 0.0, $$05 = 0.0, $$06 = 0, $$09 = 0, $$1 = 0.0, $$110 = 0, $$112 = 0, $$115 = 0, $$119 = 0.0, $$12 = 0.0, $$123 = 0.0, $$14 = 0.0, $$17 = 0, $$2 = 0.0, $$213 = 0, $$216 = 0, $$220 = 0.0, $$224 = 0.0, $$28 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$in = 0, $$6 = 0, $$7 = 0, $$8 = 0, $10 = 0, $106 = 0, $11 = 0, $112 = 0.0, $113 = 0, $129 = 0.0, $13 = 0.0, $132 = 0.0, $136 = 0.0, $139 = 0, $140 = 0.0, $143 = 0, $144 = 0.0, $154 = 0, $155 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $183 = 0.0, $184 = 0, $186 = 0.0, $196 = 0.0, $20 = 0.0, $22 = 0, $27 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0.0, $42 = 0.0, $47 = 0.0, $50 = 0, $55 = 0.0, $58 = 0, $6 = 0, $62 = 0.0, $7 = 0, $75 = 0, $8 = 0, $84 = 0, $9 = 0, $94 = 0.0, $96 = 0, $indvars$iv = 0, $indvars$iv35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $6 = sp + 800 | 0;
 $7 = sp + 608 | 0;
 $8 = sp + 400 | 0;
 $9 = sp + 192 | 0;
 $10 = sp;
 $11 = Math_imul($3, $4) | 0;
 if (($11 | 0) >= 385) _celt_fatal(47307, 47367, 55);
 $13 = +_silk_energy_FLP($1, $11);
 _memset($6 | 0, 0, 192) | 0;
 $$011 = 0;
 while (1) {
  if (($$011 | 0) >= ($4 | 0)) break;
  $16 = $1 + ((Math_imul($$011, $3) | 0) << 2) | 0;
  $$09 = 1;
  while (1) {
   if (($$09 | 0) > ($5 | 0)) break;
   $20 = +_silk_inner_product_FLP($16, $16 + ($$09 << 2) | 0, $3 - $$09 | 0);
   $22 = $6 + ($$09 + -1 << 3) | 0;
   HEAPF64[$22 >> 3] = +HEAPF64[$22 >> 3] + $20;
   $$09 = $$09 + 1 | 0;
  }
  $$011 = $$011 + 1 | 0;
 }
 _memcpy($7 | 0, $6 | 0, 192) | 0;
 $27 = $13 * 9.999999747378752e-06;
 $29 = $13 + $27 + 9.999999717180685e-10;
 HEAPF64[$8 >> 3] = $29;
 HEAPF64[$9 >> 3] = $29;
 $30 = $2;
 $$018 = 1.0;
 $$110 = 0;
 $indvars$iv = 1;
 $indvars$iv35 = 2;
 while (1) {
  $31 = $indvars$iv >>> 1;
  if (($$110 | 0) >= ($5 | 0)) break;
  $33 = $3 - $$110 | 0;
  $34 = $33 + -1 | 0;
  $$112 = 0;
  while (1) {
   if (($$112 | 0) >= ($4 | 0)) break;
   $37 = $1 + ((Math_imul($$112, $3) | 0) << 2) | 0;
   $39 = +HEAPF32[$37 + ($$110 << 2) >> 2];
   $42 = +HEAPF32[$37 + ($34 << 2) >> 2];
   $$0 = $42;
   $$01 = $39;
   $$06 = 0;
   while (1) {
    if (($$110 | 0) == ($$06 | 0)) break;
    $47 = +HEAPF32[$37 + ($$110 - $$06 + -1 << 2) >> 2];
    $50 = $6 + ($$06 << 3) | 0;
    HEAPF64[$50 >> 3] = +HEAPF64[$50 >> 3] - $39 * $47;
    $55 = +HEAPF32[$37 + ($33 + $$06 << 2) >> 2];
    $58 = $7 + ($$06 << 3) | 0;
    HEAPF64[$58 >> 3] = +HEAPF64[$58 >> 3] - $42 * $55;
    $62 = +HEAPF64[$10 + ($$06 << 3) >> 3];
    $$0 = $$0 + $62 * $55;
    $$01 = $$01 + $62 * $47;
    $$06 = $$06 + 1 | 0;
   }
   $$17 = 0;
   while (1) {
    if (($$17 | 0) == ($indvars$iv | 0)) break;
    $75 = $8 + ($$17 << 3) | 0;
    HEAPF64[$75 >> 3] = +HEAPF64[$75 >> 3] - $$01 * +HEAPF32[$37 + ($$110 - $$17 << 2) >> 2];
    $84 = $9 + ($$17 << 3) | 0;
    HEAPF64[$84 >> 3] = +HEAPF64[$84 >> 3] - $$0 * +HEAPF32[$37 + ($33 + $$17 + -1 << 2) >> 2];
    $$17 = $$17 + 1 | 0;
   }
   $$112 = $$112 + 1 | 0;
  }
  $$1 = +HEAPF64[$7 + ($$110 << 3) >> 3];
  $$12 = +HEAPF64[$6 + ($$110 << 3) >> 3];
  $$28 = 0;
  while (1) {
   if (($$110 | 0) == ($$28 | 0)) break;
   $94 = +HEAPF64[$10 + ($$28 << 3) >> 3];
   $96 = $$110 - $$28 + -1 | 0;
   $$1 = $$1 + +HEAPF64[$6 + ($96 << 3) >> 3] * $94;
   $$12 = $$12 + +HEAPF64[$7 + ($96 << 3) >> 3] * $94;
   $$28 = $$28 + 1 | 0;
  }
  $106 = $$110 + 1 | 0;
  HEAPF64[$8 + ($106 << 3) >> 3] = $$12;
  HEAPF64[$9 + ($106 << 3) >> 3] = $$1;
  $$021 = $$1;
  $$022 = +HEAPF64[$8 >> 3];
  $$05 = +HEAPF64[$9 >> 3];
  $$3 = 0;
  while (1) {
   if (($$110 | 0) == ($$3 | 0)) break;
   $112 = +HEAPF64[$10 + ($$3 << 3) >> 3];
   $113 = $$3 + 1 | 0;
   $$021 = $$021 + +HEAPF64[$9 + ($$110 - $$3 << 3) >> 3] * $112;
   $$022 = $$022 + +HEAPF64[$8 + ($113 << 3) >> 3] * $112;
   $$05 = $$05 + +HEAPF64[$9 + ($113 << 3) >> 3] * $112;
   $$3 = $113;
  }
  $129 = $$021 * -2.0 / ($$022 + $$05);
  $132 = $$018 * (1.0 - $129 * $129);
  if (!($132 <= $30)) {
   $$115 = 0;
   $$119 = $132;
   $$14 = $129;
  } else {
   $136 = +Math_sqrt(+(1.0 - $30 / $$018));
   $$115 = 1;
   $$119 = $30;
   $$14 = $$021 > 0.0 ? -$136 : $136;
  }
  $$4 = 0;
  while (1) {
   if (($$4 | 0) == ($31 | 0)) break;
   $139 = $10 + ($$4 << 3) | 0;
   $140 = +HEAPF64[$139 >> 3];
   $143 = $10 + ($$110 - $$4 + -1 << 3) | 0;
   $144 = +HEAPF64[$143 >> 3];
   HEAPF64[$139 >> 3] = $140 + $$14 * $144;
   HEAPF64[$143 >> 3] = $144 + $$14 * $140;
   $$4 = $$4 + 1 | 0;
  }
  HEAPF64[$10 + ($$110 << 3) >> 3] = $$14;
  if ($$115 | 0) {
   label = 32;
   break;
  }
  $$6 = 0;
  while (1) {
   if (($$6 | 0) == ($indvars$iv35 | 0)) break;
   $154 = $8 + ($$6 << 3) | 0;
   $155 = +HEAPF64[$154 >> 3];
   $158 = $9 + ($$110 - $$6 + 1 << 3) | 0;
   $159 = +HEAPF64[$158 >> 3];
   HEAPF64[$154 >> 3] = $155 + $$14 * $159;
   HEAPF64[$158 >> 3] = $159 + $$14 * $155;
   $$6 = $$6 + 1 | 0;
  }
  $$018 = $$119;
  $$110 = $106;
  $indvars$iv = $indvars$iv + 1 | 0;
  $indvars$iv35 = $indvars$iv35 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $$5$in = $$110;
  while (1) {
   $$5 = $$5$in + 1 | 0;
   if (($$5 | 0) >= ($5 | 0)) {
    $$216 = $$115;
    $$220 = $$119;
    break;
   }
   HEAPF64[$10 + ($$5 << 3) >> 3] = 0.0;
   $$5$in = $$5;
  }
  if ($$216 | 0) {
   $$7 = 0;
   while (1) {
    if (($$7 | 0) >= ($5 | 0)) break;
    HEAPF32[$0 + ($$7 << 2) >> 2] = -+HEAPF64[$10 + ($$7 << 3) >> 3];
    $$7 = $$7 + 1 | 0;
   }
   $$017 = $13;
   $$213 = 0;
   while (1) {
    if (($$213 | 0) >= ($4 | 0)) break;
    $$017 = $$017 - +_silk_energy_FLP($1 + ((Math_imul($$213, $3) | 0) << 2) | 0, $5);
    $$213 = $$213 + 1 | 0;
   }
   $$224 = $$017 * $$220;
   $196 = $$224;
   STACKTOP = sp;
   return +$196;
  }
 }
 $$123 = +HEAPF64[$8 >> 3];
 $$2 = 1.0;
 $$8 = 0;
 while (1) {
  if (($$8 | 0) >= ($5 | 0)) break;
  $183 = +HEAPF64[$10 + ($$8 << 3) >> 3];
  $184 = $$8 + 1 | 0;
  $186 = +HEAPF64[$8 + ($184 << 3) >> 3];
  HEAPF32[$0 + ($$8 << 2) >> 2] = -$183;
  $$123 = $$123 + $186 * $183;
  $$2 = $$2 + $183 * $183;
  $$8 = $184;
 }
 $$224 = $$123 - $27 * $$2;
 $196 = $$224;
 STACKTOP = sp;
 return +$196;
}

function _silk_VAD_GetSA_Q8_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013 = 0, $$013$in = 0, $$015 = 0, $$04 = 0, $$06 = 0, $$08 = 0, $$09 = 0, $$110 = 0, $$114 = 0, $$13 = 0, $$15 = 0, $$17 = 0, $$2 = 0, $$211 = 0, $$3 = 0, $$312 = 0, $$4 = 0, $$pre$phiZ2D = 0, $$sink = 0, $104 = 0, $11 = 0, $112 = 0, $12 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $153 = 0, $155 = 0, $16 = 0, $160 = 0, $165 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $179 = 0, $18 = 0, $186 = 0, $2 = 0, $21 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $5 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0, $82 = 0, $84 = 0, $85 = 0, $97 = 0, $99 = 0, $spec$select23 = 0, $spec$select24 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $5 = $0 + 36 | 0;
 $6 = $0 + 4584 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (($7 | 0) >= 321) _celt_fatal(44761, 44820, 104);
 if (($7 | 0) != ($7 & -8 | 0)) _celt_fatal(44831, 44820, 106);
 $11 = $7 >> 1;
 $12 = $7 >> 2;
 $13 = $7 >> 3;
 HEAP32[$4 >> 2] = 0;
 $14 = $13 + $12 | 0;
 HEAP32[$4 + 4 >> 2] = $14;
 $16 = $14 + $13 | 0;
 HEAP32[$4 + 8 >> 2] = $16;
 $18 = $16 + $12 | 0;
 HEAP32[$4 + 12 >> 2] = $18;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 + $11 << 1) | 0) + 15 & -16) | 0;
 _silk_ana_filt_bank_1($1, $5, $21, $21 + ($18 << 1) | 0, $7);
 _silk_ana_filt_bank_1($21, $0 + 44 | 0, $21, $21 + ($16 << 1) | 0, $11);
 _silk_ana_filt_bank_1($21, $0 + 52 | 0, $21, $21 + ($14 << 1) | 0, $12);
 $28 = $21 + ($13 + -1 << 1) | 0;
 $31 = HEAP16[$28 >> 1] >> 1;
 $32 = $31 & 65535;
 HEAP16[$28 >> 1] = $32;
 $$013$in = $13;
 $42 = $31;
 while (1) {
  $$013 = $$013$in + -1 | 0;
  if (($$013$in | 0) <= 1) break;
  $35 = $21 + ($$013$in + -2 << 1) | 0;
  $38 = HEAP16[$35 >> 1] >> 1;
  HEAP16[$35 >> 1] = $38;
  HEAP16[$21 + ($$013 << 1) >> 1] = $42 - $38;
  $$013$in = $$013;
  $42 = $38;
 }
 $44 = $0 + 92 | 0;
 HEAP16[$21 >> 1] = (HEAPU16[$21 >> 1] | 0) - (HEAPU16[$44 >> 1] | 0);
 HEAP16[$44 >> 1] = $32;
 $$04 = 0;
 $$09 = 0;
 while (1) {
  if (($$09 | 0) == 4) break;
  $51 = HEAP32[$6 >> 2] | 0;
  $55 = $51 >> (_silk_min_int_349(4 - $$09 | 0, 3) | 0) >> 2;
  $56 = $0 + 60 + ($$09 << 2) | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  $58 = $2 + ($$09 << 2) | 0;
  HEAP32[$58 >> 2] = $57;
  $59 = $4 + ($$09 << 2) | 0;
  $$015 = 0;
  $$08 = 0;
  $$15 = $$04;
  $73 = $57;
  while (1) {
   if (($$08 | 0) == 4) break;
   $$114 = 0;
   $$2 = 0;
   while (1) {
    if (($$114 | 0) >= ($55 | 0)) break;
    $67 = HEAP16[$21 + ((HEAP32[$59 >> 2] | 0) + $$114 + $$015 << 1) >> 1] >> 3;
    $$114 = $$114 + 1 | 0;
    $$2 = $$2 + (Math_imul($67, $67) | 0) | 0;
   }
   if ($$08 >>> 0 < 3) {
    $72 = $73 + $$2 | 0;
    $storemerge = $72 >>> 0 < 2147483647 ? $72 : 2147483647;
   } else {
    $76 = $73 + ($$2 >>> 1) | 0;
    $storemerge = $76 >>> 0 < 2147483647 ? $76 : 2147483647;
   }
   HEAP32[$58 >> 2] = $storemerge;
   $$015 = $$015 + $55 | 0;
   $$08 = $$08 + 1 | 0;
   $$15 = $$2;
   $73 = $storemerge;
  }
  HEAP32[$56 >> 2] = $$15;
  $$04 = $$15;
  $$09 = $$09 + 1 | 0;
 }
 _silk_VAD_GetNoiseLevels($2, $5);
 $$06 = 0;
 $$110 = 0;
 $$3 = 0;
 while (1) {
  if (($$110 | 0) == 4) break;
  $82 = HEAP32[$2 + ($$110 << 2) >> 2] | 0;
  $84 = HEAP32[$0 + 96 + ($$110 << 2) >> 2] | 0;
  $85 = $82 - $84 | 0;
  if (($85 | 0) > 0) {
   if ($82 >>> 0 < 8388608) $$sink = ($82 << 8 | 0) / ($84 + 1 | 0) | 0; else $$sink = ($82 | 0) / (($84 >> 8) + 1 | 0) | 0;
   HEAP32[$3 + ($$110 << 2) >> 2] = $$sink;
   $97 = ((_silk_lin2log($$sink) | 0) << 16) + -67108864 >> 16;
   $99 = $$3 + (Math_imul($97, $97) | 0) | 0;
   if (($85 | 0) < 1048576) {
    $104 = Math_imul((_silk_SQRT_APPROX_350($85) | 0) << 6 >> 16, $97) | 0;
    $$pre$phiZ2D = ($104 << 16) + (Math_imul((_silk_SQRT_APPROX_350($85) | 0) << 6 & 65472, $97) | 0) >> 16;
   } else $$pre$phiZ2D = $97;
   $112 = HEAP32[26272 + ($$110 << 2) >> 2] | 0;
   $$17 = $$06 + ((Math_imul($112 >> 16, $$pre$phiZ2D) | 0) + ((Math_imul($112 & 65535, $$pre$phiZ2D) | 0) >> 16)) | 0;
   $$4 = $99;
  } else {
   HEAP32[$3 + ($$110 << 2) >> 2] = 256;
   $$17 = $$06;
   $$4 = $$3;
  }
  $$06 = $$17;
  $$110 = $$110 + 1 | 0;
  $$3 = $$4;
 }
 $127 = (((_silk_SQRT_APPROX_350(($$3 | 0) / 4 | 0) | 0) * 196608 >> 16) * 45e3 >> 16) + -128 | 0;
 HEAP32[$0 + 4712 >> 2] = ((_silk_sigm_Q15($$06) | 0) << 1) + -32768;
 $$0 = 0;
 $$211 = 0;
 while (1) {
  if (($$211 | 0) == 4) break;
  $132 = $$211 + 1 | 0;
  $$0 = $$0 + (Math_imul($132, (HEAP32[$2 + ($$211 << 2) >> 2] | 0) - (HEAP32[$0 + 96 + ($$211 << 2) >> 2] | 0) >> 4) | 0) | 0;
  $$211 = $132;
 }
 $141 = _silk_sigm_Q15($127) | 0;
 $142 = HEAP32[$6 >> 2] | 0;
 $143 = $0 + 4576 | 0;
 $144 = HEAP32[$143 >> 2] | 0;
 $spec$select23 = $$0 >> (($142 | 0) == ($144 * 20 | 0) & 1);
 if (($spec$select23 | 0) < 1) {
  $$13 = $141 >> 1;
  $172 = $144;
  $173 = $142;
 } else if (($spec$select23 | 0) < 16384) {
  $153 = (_silk_SQRT_APPROX_350($spec$select23 << 16) | 0) + 32768 | 0;
  $155 = $141 << 16 >> 16;
  $160 = (Math_imul($153 >> 16, $155) | 0) + ((Math_imul($153 & 65535, $155) | 0) >> 16) | 0;
  $$13 = $160;
  $172 = HEAP32[$143 >> 2] | 0;
  $173 = HEAP32[$6 >> 2] | 0;
 } else {
  $$13 = $141;
  $172 = $144;
  $173 = $142;
 }
 HEAP32[$0 + 4532 >> 2] = _silk_min_int_349($$13 >> 7, 255) | 0;
 $165 = $$13 << 16 >> 16;
 $170 = ((Math_imul($$13 >> 16, $165) | 0) << 16) + (Math_imul($$13 & 65535, $165) | 0) | 0;
 $spec$select24 = $170 >> (($173 | 0) == ($172 * 10 | 0) ? 21 : 20);
 $$312 = 0;
 while (1) {
  if (($$312 | 0) == 4) break;
  $175 = $0 + 76 + ($$312 << 2) | 0;
  $176 = HEAP32[$175 >> 2] | 0;
  $179 = (HEAP32[$3 + ($$312 << 2) >> 2] | 0) - $176 | 0;
  $186 = $176 + ((Math_imul($179 >> 16, $spec$select24) | 0) + ((Math_imul($179 & 65535, $spec$select24) | 0) >> 16)) | 0;
  HEAP32[$175 >> 2] = $186;
  HEAP32[$0 + 4696 + ($$312 << 2) >> 2] = _silk_sigm_Q15(((_silk_lin2log($186) | 0) * 3 | 0) + -5120 >> 4) | 0;
  $$312 = $$312 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _tf_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$010 = 0, $$011 = 0, $$015 = 0, $$017 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$112 = 0, $$116 = 0, $$118 = 0, $$15 = 0.0, $$2 = 0, $$213 = 0, $$26 = 0.0, $$314 = 0, $$sink35 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $12 = 0.0, $123 = 0, $124 = 0, $126 = 0, $130 = 0, $131 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0.0, $141 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $164 = 0, $169 = 0, $17 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0.0, $55 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $87 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $11 = sp;
 $12 = .5 - $8;
 $14 = $12 < -.25 ? -.009999999776482582 : $12 * .03999999910593033;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 $16 = $0 + 32 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $21 = $1 + -1 | 0;
 $26 = (HEAP16[$17 + ($1 << 1) >> 1] | 0) - (HEAP16[$17 + ($21 << 1) >> 1] | 0) << $7;
 $27 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($26 << 2) | 0) + 15 & -16) | 0;
 $28 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($26 << 2) | 0) + 15 & -16) | 0;
 $29 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 $30 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 $31 = Math_imul($9, $6) | 0;
 $32 = ($2 | 0) == 0;
 $33 = 1 << $7;
 $34 = $7 + 1 | 0;
 $35 = Math_imul($7, -2) | 0;
 $$011 = 0;
 while (1) {
  if (($$011 | 0) >= ($1 | 0)) break;
  $37 = HEAP32[$16 >> 2] | 0;
  $38 = $$011 + 1 | 0;
  $44 = HEAP16[$37 + ($$011 << 1) >> 1] | 0;
  $45 = (HEAP16[$37 + ($38 << 1) >> 1] | 0) - $44 | 0;
  $46 = $45 << $7;
  $47 = ($45 | 0) == 1;
  $51 = $46 << 2;
  _memcpy($27 | 0, $5 + ($31 + ($44 << $7) << 2) | 0, $51 | 0) | 0;
  if ($32) {
   $$1 = 0;
   $$15 = +_l1_metric($27, $46, 0, $14);
  } else {
   $53 = +_l1_metric($27, $46, $7, $14);
   if ($47) {
    $$1 = 0;
    $$15 = $53;
   } else {
    _memcpy($28 | 0, $27 | 0, $51 | 0) | 0;
    _haar1($28, $46 >> $7, $33);
    $55 = +_l1_metric($28, $46, $34, $14);
    if ($55 < $53) {
     $$1 = -1;
     $$15 = $55;
    } else {
     $$1 = 0;
     $$15 = $53;
    }
   }
  }
  $$08 = 0;
  $$2 = $$1;
  $$26 = $$15;
  while (1) {
   if (($$08 | 0) >= (($32 & ($47 ^ 1) & 1) + $7 | 0)) break;
   _haar1($27, $46 >> $$08, 1 << $$08);
   $66 = +_l1_metric($27, $46, $32 ? $$08 + 1 | 0 : $7 - $$08 + -1 | 0, $14);
   $67 = $66 < $$26;
   $68 = $$08 + 1 | 0;
   $$08 = $68;
   $$2 = $67 ? $68 : $$2;
   $$26 = $67 ? $66 : $$26;
  }
  $69 = Math_imul($$2, -2) | 0;
  $71 = $32 ? $69 : $$2 << 1;
  $72 = $15 + ($$011 << 2) | 0;
  HEAP32[$72 >> 2] = $71;
  if ($47) if (($71 | 0) == 0 | ($71 | 0) == ($35 | 0)) HEAP32[$72 >> 2] = $71 + -1;
  $$011 = $38;
 }
 $76 = $2 << 2;
 $$010 = 0;
 while (1) {
  if (($$010 | 0) == 2) break;
  $77 = HEAP32[$10 >> 2] | 0;
  $78 = HEAP32[$15 >> 2] | 0;
  $80 = $76 + ($$010 << 1) | 0;
  $84 = HEAP8[192 + ($7 << 3) + $80 >> 0] << 1;
  $85 = $78 - $84 | 0;
  $87 = Math_imul($77, ($85 | 0) > -1 ? $85 : 0 - $85 | 0) | 0;
  $92 = HEAP8[($80 | 1) + (192 + ($7 << 3)) >> 0] << 1;
  $93 = $78 - $92 | 0;
  $95 = Math_imul($77, ($93 | 0) > -1 ? $93 : 0 - $93 | 0) | 0;
  $$015 = $87;
  $$017 = $95 + ($32 ? $4 : 0) | 0;
  $$112 = 1;
  while (1) {
   if (($$112 | 0) >= ($1 | 0)) break;
   $98 = $$017 + $4 | 0;
   $100 = $$015 + $4 | 0;
   $104 = HEAP32[$15 + ($$112 << 2) >> 2] | 0;
   $105 = $104 - $84 | 0;
   $106 = $104 - $92 | 0;
   $108 = HEAP32[$10 + ($$112 << 2) >> 2] | 0;
   $111 = (($100 | 0) < ($$017 | 0) ? $100 : $$017) + (Math_imul($108, ($106 | 0) > -1 ? $106 : 0 - $106 | 0) | 0) | 0;
   $$015 = (($$015 | 0) < ($98 | 0) ? $$015 : $98) + (Math_imul($108, ($105 | 0) > -1 ? $105 : 0 - $105 | 0) | 0) | 0;
   $$017 = $111;
   $$112 = $$112 + 1 | 0;
  }
  HEAP32[$11 + ($$010 << 2) >> 2] = ($$015 | 0) < ($$017 | 0) ? $$015 : $$017;
  $$010 = $$010 + 1 | 0;
 }
 $$09 = (HEAP32[$11 + 4 >> 2] | 0) < (HEAP32[$11 >> 2] | 0) & ($32 ^ 1) & 1;
 $123 = HEAP32[$10 >> 2] | 0;
 $124 = HEAP32[$15 >> 2] | 0;
 $126 = $76 | $$09 << 1;
 $130 = HEAP8[192 + ($7 << 3) + $126 >> 0] << 1;
 $131 = $124 - $130 | 0;
 $133 = Math_imul($123, ($131 | 0) > -1 ? $131 : 0 - $131 | 0) | 0;
 $138 = HEAP8[($126 | 1) + (192 + ($7 << 3)) >> 0] << 1;
 $139 = $124 - $138 | 0;
 $141 = Math_imul($123, ($139 | 0) > -1 ? $139 : 0 - $139 | 0) | 0;
 $$116 = $133;
 $$118 = $141 + ($32 ? $4 : 0) | 0;
 $$213 = 1;
 while (1) {
  if (($$213 | 0) >= ($1 | 0)) break;
  $144 = $$118 + $4 | 0;
  $145 = ($$116 | 0) < ($144 | 0);
  HEAP32[$29 + ($$213 << 2) >> 2] = ($145 ^ 1) & 1;
  $147 = $$116 + $4 | 0;
  $148 = ($147 | 0) < ($$118 | 0);
  HEAP32[$30 + ($$213 << 2) >> 2] = ($148 ^ 1) & 1;
  $151 = HEAP32[$15 + ($$213 << 2) >> 2] | 0;
  $152 = $151 - $130 | 0;
  $153 = $151 - $138 | 0;
  $155 = HEAP32[$10 + ($$213 << 2) >> 2] | 0;
  $158 = ($148 ? $147 : $$118) + (Math_imul($155, ($153 | 0) > -1 ? $153 : 0 - $153 | 0) | 0) | 0;
  $$116 = ($145 ? $$116 : $144) + (Math_imul($155, ($152 | 0) > -1 ? $152 : 0 - $152 | 0) | 0) | 0;
  $$118 = $158;
  $$213 = $$213 + 1 | 0;
 }
 $164 = ($$116 | 0) >= ($$118 | 0) & 1;
 HEAP32[$3 + ($21 << 2) >> 2] = $164;
 $$314 = $1 + -2 | 0;
 $169 = $164;
 while (1) {
  if (($$314 | 0) <= -1) break;
  $$sink35 = HEAP32[(($169 | 0) == 1 ? $30 : $29) + ($$314 + 1 << 2) >> 2] | 0;
  HEAP32[$3 + ($$314 << 2) >> 2] = $$sink35;
  $$314 = $$314 + -1 | 0;
  $169 = $$sink35;
 }
 STACKTOP = sp;
 return $$09 | 0;
}

function _tonality_get_info($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$015 = 0.0, $$016 = 0.0, $$017 = 0.0, $$019 = 0.0, $$02 = 0, $$05 = 0.0, $$06 = 0.0, $$07 = 0, $$08 = 0, $$1 = 0, $$112 = 0, $$118 = 0.0, $$120 = 0.0, $$122 = 0, $$19 = 0, $$210 = 0, $$213 = 0, $$223 = 0, $$3 = 0, $$4 = 0, $$6 = 0, $$8 = 0, $10 = 0, $101 = 0.0, $103 = 0.0, $105 = 0.0, $108 = 0, $109 = 0, $115 = 0.0, $121 = 0.0, $122 = 0.0, $125 = 0.0, $130 = 0.0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $21 = 0, $22 = 0.0, $23 = 0, $25 = 0, $3 = 0, $30 = 0.0, $35 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0.0, $53 = 0.0, $6 = 0, $62 = 0.0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0.0, $79 = 0.0, $81 = 0.0, $85 = 0.0, $88 = 0, $96 = 0.0, $99 = 0.0, $spec$select = 0, $spec$select29 = 0, $spec$select30 = 0, $spec$select31 = 0, $spec$select35 = 0, $spec$select36 = 0, $spec$select38 = 0, dest = 0, src = 0, stop = 0;
 $3 = $0 + 7448 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 7444 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 - $4 | 0;
 $spec$select = ($7 | 0) < 0 ? $7 + 100 | 0 : $7;
 $10 = $0 + 8 | 0;
 if (($6 | 0) == ($4 | 0) ? 1 : ((HEAP32[$10 >> 2] | 0) / 50 | 0 | 0) >= ($2 | 0)) $$1 = $4; else {
  $15 = $4 + 1 | 0;
  $$1 = ($15 | 0) == 100 ? 0 : $15;
 }
 $spec$select29 = ($$1 | 0) == ($6 | 0) ? $6 + -1 | 0 : $$1;
 $$3 = ($spec$select29 | 0) < 0 ? 99 : $spec$select29;
 dest = $1;
 src = $0 + 7600 + ($$3 << 6) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $21 = $1 + 4 | 0;
 $22 = +HEAPF32[$21 >> 2];
 $23 = $1 + 32 | 0;
 $$02 = 6;
 $$05 = $22;
 $$06 = $22;
 $$07 = 1;
 $$08 = 0;
 $$4 = $$3;
 while (1) {
  if ($$08 >>> 0 >= 3) break;
  $25 = $$4 + 1 | 0;
  $spec$select30 = ($25 | 0) == 100 ? 0 : $25;
  if (($spec$select30 | 0) == (HEAP32[$5 >> 2] | 0)) break;
  $30 = +HEAPF32[$0 + 7600 + ($spec$select30 << 6) + 4 >> 2];
  $35 = HEAP32[$23 >> 2] | 0;
  $37 = HEAP32[$0 + 7600 + ($spec$select30 << 6) + 32 >> 2] | 0;
  HEAP32[$23 >> 2] = ($35 | 0) > ($37 | 0) ? $35 : $37;
  $$02 = $$02 + -1 | 0;
  $$05 = $$05 > $30 ? $$05 : $30;
  $$06 = $$06 + $30;
  $$07 = $$07 + 1 | 0;
  $$08 = $$08 + 1 | 0;
  $$4 = $spec$select30;
 }
 $$19 = 0;
 $$6 = $$3;
 while (1) {
  if (($$19 | 0) >= ($$02 | 0)) break;
  $spec$select31 = ($$6 | 0) < 1 ? 99 : $$6 + -1 | 0;
  if (($spec$select31 | 0) == (HEAP32[$5 >> 2] | 0)) break;
  $46 = HEAP32[$23 >> 2] | 0;
  $48 = HEAP32[$0 + 7600 + ($spec$select31 << 6) + 32 >> 2] | 0;
  HEAP32[$23 >> 2] = ($46 | 0) > ($48 | 0) ? $46 : $48;
  $$19 = $$19 + 1 | 0;
  $$6 = $spec$select31;
 }
 $52 = $$06 / +($$07 | 0);
 $53 = $$05 + -.20000000298023224;
 HEAPF32[$21 >> 2] = $52 > $53 ? $52 : $53;
 do if (($spec$select | 0) > 15) if (($$3 | 0) > 94) {
  $$112 = $$3 + (($$3 | 0) > 98 ? -99 : 1) | 0;
  $$122 = $$3 + -95 | 0;
  break;
 } else {
  $$112 = $$3 + 1 | 0;
  $$122 = $$3 + 5 | 0;
  break;
 } else {
  $$112 = $$3;
  $$122 = $$3;
 } while (0);
 $62 = +HEAPF32[$0 + 7600 + ($$112 << 6) + 36 >> 2];
 $63 = $62 < .10000000149011612;
 $69 = HEAP32[$5 >> 2] | 0;
 $$015 = ($63 ? .10000000149011612 : $62) * +HEAPF32[$0 + 7600 + ($$122 << 6) + 20 >> 2];
 $$016 = $63 ? .10000000149011612 : $62;
 $$017 = 1.0;
 $$019 = 0.0;
 $$213 = $$112;
 $$223 = $$122;
 while (1) {
  $70 = $$223 + 1 | 0;
  $spec$select35 = ($70 | 0) == 100 ? 0 : $70;
  if (($spec$select35 | 0) == ($69 | 0)) break;
  $73 = $$213 + 1 | 0;
  $spec$select36 = ($73 | 0) == 100 ? 0 : $73;
  if (($spec$select36 | 0) == ($69 | 0)) break;
  $77 = +HEAPF32[$0 + 7600 + ($spec$select36 << 6) + 36 >> 2];
  $79 = ($62 - $77) * 10.0;
  $81 = ($$015 - $79) / $$016;
  $85 = ($$015 + $79) / $$016;
  $88 = $77 < .10000000149011612;
  $$015 = $$015 + ($88 ? .10000000149011612 : $77) * +HEAPF32[$0 + 7600 + ($spec$select35 << 6) + 20 >> 2];
  $$016 = $$016 + ($88 ? .10000000149011612 : $77);
  $$017 = $81 < $$017 ? $81 : $$017;
  $$019 = $85 > $$019 ? $85 : $$019;
  $$213 = $spec$select36;
  $$223 = $spec$select35;
 }
 $96 = $$015 / $$016;
 HEAPF32[$1 + 20 >> 2] = $96;
 $99 = $96 < $$017 ? $96 : $$017;
 $101 = $96 > $$019 ? $96 : $$019;
 $103 = $99 > 0.0 ? $99 : 0.0;
 $105 = $101 < 1.0 ? $101 : 1.0;
 if (($spec$select | 0) < 10) {
  $108 = HEAP32[$0 + 7436 >> 2] | 0;
  $109 = ($108 | 0) < 16;
  $$0 = $105;
  $$01 = $103;
  $$210 = 0;
  $$8 = $$3;
  while (1) {
   if (($$210 | 0) >= (($109 ? $108 + -1 | 0 : 15) | 0)) break;
   $spec$select38 = ($$8 | 0) < 1 ? 99 : $$8 + -1 | 0;
   $115 = +HEAPF32[$0 + 7600 + ($spec$select38 << 6) + 20 >> 2];
   $$0 = $$0 > $115 ? $$0 : $115;
   $$01 = $$01 < $115 ? $$01 : $115;
   $$210 = $$210 + 1 | 0;
   $$8 = $spec$select38;
  }
  $121 = $62 * .10000000149011612;
  $122 = $$01 - $121;
  $125 = $$0 + $121;
  $130 = 1.0 - +($spec$select | 0) * .10000000149011612;
  $$118 = $103 + $130 * (($122 < 0.0 ? 0.0 : $122) - $103);
  $$120 = $105 + $130 * (($125 > 1.0 ? 1.0 : $125) - $105);
 } else {
  $$118 = $103;
  $$120 = $105;
 }
 HEAPF32[$1 + 24 >> 2] = $$118;
 HEAPF32[$1 + 28 >> 2] = $$120;
 $142 = $0 + 7452 | 0;
 $144 = (HEAP32[$142 >> 2] | 0) + (($2 | 0) / ((HEAP32[$10 >> 2] | 0) / 400 | 0 | 0) | 0) | 0;
 HEAP32[$142 >> 2] = $144;
 $145 = $144;
 while (1) {
  if (($145 | 0) <= 7) break;
  $147 = $145 + -8 | 0;
  HEAP32[$142 >> 2] = $147;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  $145 = $147;
 }
 $150 = HEAP32[$3 >> 2] | 0;
 if (($150 | 0) <= 99) return;
 HEAP32[$3 >> 2] = $150 + -100;
 return;
}

function _silk_resampler_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $107 = 0, $45 = 0, $54 = 0, $56 = 0, $57 = 0, $63 = 0, $90 = 0, $91 = 0, $92 = 0, $95 = 0, $96 = 0, $98 = 0;
 _memset($0 | 0, 0, 300) | 0;
 if (!$3) {
  L3 : do if (($1 | 0) < 12e3) {
   switch ($1 | 0) {
   case 8e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 101);
  } else if (($1 | 0) < 16e3) {
   switch ($1 | 0) {
   case 12e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 101);
  } else {
   switch ($1 | 0) {
   case 16e3:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 101);
  } while (0);
  L13 : do if (($2 | 0) < 16e3) if (($2 | 0) < 12e3) {
   switch ($2 | 0) {
   case 8e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 101);
  } else {
   switch ($2 | 0) {
   case 12e3:
    {
     break L13;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 101);
  } else {
   if (($2 | 0) < 24e3) {
    switch ($2 | 0) {
    case 16e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 101);
   }
   if (($2 | 0) < 48e3) {
    switch ($2 | 0) {
    case 24e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 101);
   } else {
    switch ($2 | 0) {
    case 48e3:
     {
      break L13;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 101);
   }
  } while (0);
  HEAP32[$0 + 292 >> 2] = HEAP8[(($2 >> 12) - (($2 | 0) > 16e3 & 1) >> (($2 | 0) > 24e3 & 1)) + -1 + (46190 + (((($1 >> 12) - (($1 | 0) > 16e3 & 1) >> (($1 | 0) > 24e3 & 1)) + -1 | 0) * 5 | 0)) >> 0];
 } else {
  L32 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
   switch ($1 | 0) {
   case 8e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 94);
  } else {
   switch ($1 | 0) {
   case 12e3:
    {
     break L32;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 94);
  } else {
   if (($1 | 0) < 24e3) {
    switch ($1 | 0) {
    case 16e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 94);
   }
   if (($1 | 0) < 48e3) {
    switch ($1 | 0) {
    case 24e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 94);
   } else {
    switch ($1 | 0) {
    case 48e3:
     {
      break L32;
      break;
     }
    default:
     {}
    }
    _celt_fatal(48340, 46158, 94);
   }
  } while (0);
  L50 : do if (($2 | 0) < 12e3) {
   switch ($2 | 0) {
   case 8e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 94);
  } else if (($2 | 0) < 16e3) {
   switch ($2 | 0) {
   case 12e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 94);
  } else {
   switch ($2 | 0) {
   case 16e3:
    {
     break L50;
     break;
    }
   default:
    {}
   }
   _celt_fatal(48340, 46158, 94);
  } while (0);
  HEAP32[$0 + 292 >> 2] = HEAP8[(($2 >> 12) - (($2 | 0) > 16e3 & 1) >> (($2 | 0) > 24e3 & 1)) + -1 + (46175 + (((($1 >> 12) - (($1 | 0) > 16e3 & 1) >> (($1 | 0) > 24e3 & 1)) + -1 | 0) * 3 | 0)) >> 0];
 }
 $45 = ($1 | 0) / 1e3 | 0;
 HEAP32[$0 + 284 >> 2] = $45;
 HEAP32[$0 + 288 >> 2] = ($2 | 0) / 1e3 | 0;
 HEAP32[$0 + 268 >> 2] = $45 * 10;
 do if (($2 | 0) > ($1 | 0)) {
  $54 = $0 + 264 | 0;
  if (($1 << 1 | 0) == ($2 | 0)) {
   HEAP32[$54 >> 2] = 1;
   $$1 = 0;
   break;
  } else {
   HEAP32[$54 >> 2] = 2;
   $$1 = 1;
   break;
  }
 } else {
  $56 = $0 + 264 | 0;
  if (($2 | 0) >= ($1 | 0)) {
   HEAP32[$56 >> 2] = 0;
   $$1 = 0;
   break;
  }
  HEAP32[$56 >> 2] = 3;
  $57 = $2 << 2;
  if (($57 | 0) == ($1 * 3 | 0)) {
   HEAP32[$0 + 280 >> 2] = 3;
   HEAP32[$0 + 276 >> 2] = 18;
   HEAP32[$0 + 296 >> 2] = 27296;
   $$1 = 0;
   break;
  }
  $63 = $2 * 3 | 0;
  if (($63 | 0) == ($1 << 1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 2;
   HEAP32[$0 + 276 >> 2] = 18;
   HEAP32[$0 + 296 >> 2] = 27360;
   $$1 = 0;
   break;
  }
  if (($2 << 1 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 24;
   HEAP32[$0 + 296 >> 2] = 27408;
   $$1 = 0;
   break;
  }
  if (($63 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27440;
   $$1 = 0;
   break;
  }
  if (($57 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27488;
   $$1 = 0;
   break;
  }
  if (($2 * 6 | 0) == ($1 | 0)) {
   HEAP32[$0 + 280 >> 2] = 1;
   HEAP32[$0 + 276 >> 2] = 36;
   HEAP32[$0 + 296 >> 2] = 27536;
   $$1 = 0;
   break;
  } else _celt_fatal(48340, 46158, 154);
 } while (0);
 $90 = (($1 << ($$1 | 14) | 0) / ($2 | 0) | 0) << 2;
 $91 = $0 + 272 | 0;
 HEAP32[$91 >> 2] = $90;
 $92 = $2 << 16 >> 16;
 $95 = ($2 >> 15) + 1 >> 1;
 $96 = $1 << $$1;
 $98 = $90;
 while (1) {
  if (((Math_imul($98 >> 16, $92) | 0) + ((Math_imul($98 & 65535, $92) | 0) >> 16) + (Math_imul($98, $95) | 0) | 0) >= ($96 | 0)) break;
  $107 = $98 + 1 | 0;
  HEAP32[$91 >> 2] = $107;
  $98 = $107;
 }
 return;
}

function _run_prefilter($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$01 = 0, $$08 = 0, $$110 = 0.0, $$19 = 0, $$2 = 0.0, $$3 = 0.0, $$36 = 0.0, $$4 = 0.0, $$47 = 0.0, $$6 = 0.0, $$alloca_mul = 0, $$pre$phi18Z2D = 0, $$pre14 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $108 = 0, $110 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0.0, $119 = 0, $12 = 0, $13 = 0, $131 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $36 = 0, $37 = 0, $45 = 0.0, $46 = 0, $48 = 0.0, $50 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $72 = 0, $73 = 0.0, $83 = 0, $88 = 0, $92 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $spec$select = 0.0, $spec$select20 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = HEAP32[$14 + 4 >> 2] | 0;
 $17 = $4 + 1024 | 0;
 $$alloca_mul = (Math_imul($17, $3) | 0) << 2;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 HEAP32[$12 >> 2] = $19;
 HEAP32[$12 + 4 >> 2] = $19 + ($17 << 2);
 $22 = $16 + $4 | 0;
 $23 = $4 << 2;
 $$08 = 0;
 do {
  $25 = HEAP32[$12 + ($$08 << 2) >> 2] | 0;
  _memcpy($25 | 0, $2 + ($$08 << 10 << 2) | 0, 4096) | 0;
  _memcpy($25 + 4096 | 0, $1 + ((Math_imul($$08, $22) | 0) << 2) + ($16 << 2) | 0, $23 | 0) | 0;
  $$08 = $$08 + 1 | 0;
 } while (($$08 | 0) < ($3 | 0));
 if (!$9) {
  HEAP32[$13 >> 2] = 15;
  $$36 = 0.0;
  $64 = 15;
 } else {
  $36 = _llvm_stacksave() | 0;
  $37 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($17 >> 1 << 2) | 0) + 15 & -16) | 0;
  _pitch_downsample($12, $37, $17, $3);
  _pitch_search($37 + 2048 | 0, $37, $4, 979, $13);
  HEAP32[$13 >> 2] = 1024 - (HEAP32[$13 >> 2] | 0);
  $45 = +_remove_doubling($37, $4, $13, HEAP32[$0 + 104 >> 2] | 0, +HEAPF32[$0 + 108 >> 2]);
  $46 = HEAP32[$13 >> 2] | 0;
  if (($46 | 0) > 1022) {
   HEAP32[$13 >> 2] = 1022;
   $139 = 1022;
  } else $139 = $46;
  $48 = $45 * .699999988079071;
  $50 = HEAP32[$0 + 56 >> 2] | 0;
  $spec$select = ($50 | 0) > 2 ? $48 * .5 : $48;
  _llvm_stackrestore($36 | 0);
  $$36 = ($50 | 0) > 8 ? 0.0 : ($50 | 0) > 4 ? $spec$select * .5 : $spec$select;
  $64 = $139;
 }
 if (!(HEAP32[$11 >> 2] | 0)) $$47 = $$36; else $$47 = $$36 * +HEAPF32[$11 + 40 >> 2];
 $61 = $0 + 104 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $64 - $62 | 0;
 $spec$select20 = ((($63 | 0) > -1 ? $63 : 0 - $63 | 0) * 10 | 0) > ($64 | 0) ? .4000000059604645 : .20000000298023224;
 if (($10 | 0) < 25) {
  $$110 = $spec$select20 + .10000000149011612;
  label = 13;
 } else if (($10 | 0) < 35) {
  $$110 = $spec$select20;
  label = 13;
 } else $$2 = $spec$select20;
 if ((label | 0) == 13) $$2 = $$110 + .10000000149011612;
 $72 = $0 + 108 | 0;
 $73 = +HEAPF32[$72 >> 2];
 $$3 = $73 > .4000000059604645 ? $$2 + -.10000000149011612 : $$2;
 $$4 = $73 > .550000011920929 ? $$3 + -.10000000149011612 : $$3;
 if ($$47 < ($$4 > .20000000298023224 ? $$4 : .20000000298023224)) {
  $$0 = 0;
  $$01 = 0;
  $$6 = 0.0;
 } else {
  $83 = +Math_abs(+($$47 - $73)) < .10000000149011612;
  $88 = ~~+Math_floor(+(($83 ? $73 : $$47) * 32.0 / 3.0 + .5));
  if (($88 | 0) > 8) {
   $140 = 7;
   label = 17;
  } else if (($88 | 0) < 1) $92 = 0; else {
   $140 = $88 + -1 | 0;
   label = 17;
  }
  if ((label | 0) == 17) $92 = $140;
  $$0 = $92;
  $$01 = 1;
  $$6 = +($92 + 1 | 0) * .09375;
 }
 $95 = $14 + 44 | 0;
 $96 = $16 << 2;
 $97 = -$$6;
 $98 = $0 + 112 | 0;
 $99 = $14 + 60 | 0;
 $100 = ($4 | 0) > 1024;
 $101 = 4096 - $23 | 0;
 $102 = 0 - $4 | 0;
 $$19 = 0;
 $105 = $62;
 while (1) {
  $104 = (HEAP32[$95 >> 2] | 0) - $16 | 0;
  HEAP32[$61 >> 2] = ($105 | 0) > 15 ? $105 : 15;
  $108 = $1 + ((Math_imul($$19, $22) | 0) << 2) | 0;
  $110 = $0 + 244 + ((Math_imul($$19, $16) | 0) << 2) | 0;
  _memcpy($108 | 0, $110 | 0, $96 | 0) | 0;
  if (!$104) {
   $$pre14 = HEAP32[$12 + ($$19 << 2) >> 2] | 0;
   $$pre$phi18Z2D = $$pre14 + 4096 | 0;
   $133 = $$pre14;
  } else {
   $114 = HEAP32[$12 + ($$19 << 2) >> 2] | 0;
   $115 = $114 + 4096 | 0;
   $116 = HEAP32[$61 >> 2] | 0;
   $118 = -+HEAPF32[$72 >> 2];
   $119 = HEAP32[$98 >> 2] | 0;
   _comb_filter($108 + ($16 << 2) | 0, $115, $116, $116, $104, $118, $118, $119, $119, 0, 0);
   $$pre$phi18Z2D = $115;
   $133 = $114;
  }
  _comb_filter($108 + ($16 << 2) + ($104 << 2) | 0, $$pre$phi18Z2D + ($104 << 2) | 0, HEAP32[$61 >> 2] | 0, $64, $4 - $104 | 0, -+HEAPF32[$72 >> 2], $97, HEAP32[$98 >> 2] | 0, $5, HEAP32[$99 >> 2] | 0, $16);
  _memcpy($110 | 0, $108 + ($4 << 2) | 0, $96 | 0) | 0;
  $131 = $2 + ($$19 << 10 << 2) | 0;
  if ($100) _memcpy($131 | 0, $133 + ($4 << 2) | 0, 4096) | 0; else {
   _memmove($131 | 0, $131 + ($4 << 2) | 0, $101 | 0) | 0;
   _memcpy($131 + 4096 + ($102 << 2) | 0, $$pre$phi18Z2D | 0, $23 | 0) | 0;
  }
  $137 = $$19 + 1 | 0;
  if (($137 | 0) >= ($3 | 0)) break;
  $$19 = $137;
  $105 = HEAP32[$61 >> 2] | 0;
 }
 HEAPF32[$7 >> 2] = $$6;
 HEAP32[$6 >> 2] = $64;
 HEAP32[$8 >> 2] = $$0;
 STACKTOP = sp;
 return $$01 | 0;
}

function _silk_nsq_del_dec_scale_states($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $102 = 0, $103 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $125 = 0, $135 = 0, $136 = 0, $137 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $173 = 0, $174 = 0, $175 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $31 = 0, $32 = 0, $43 = 0, $48 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $62 = 0, $65 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 $15 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 $16 = $10 + ($7 << 2) | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $19 = _silk_INVERSE32_varQ_244(($17 | 0) > 1 ? $17 : 1) | 0;
 $21 = ($19 >> 4) + 1 | 0;
 $23 = $0 + 4588 | 0;
 $24 = $21 >>> 1 << 16 >> 16;
 $27 = ($21 >> 16) + 1 >> 1;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= (HEAP32[$23 >> 2] | 0)) break;
  $31 = HEAP16[$3 + ($$02 << 1) >> 1] | 0;
  $32 = $31 << 16 >> 16;
  HEAP32[$4 + ($$02 << 2) >> 2] = (Math_imul($32 >> 16, $24) | 0) + ((Math_imul($24, $31 & 65535) | 0) >> 16) + (Math_imul($27, $32) | 0);
  $$02 = $$02 + 1 | 0;
 }
 $43 = $1 + 4348 | 0;
 L5 : do if (HEAP32[$43 >> 2] | 0) {
  if (!$7) {
   $48 = $9 << 16 >> 16;
   $$0 = (Math_imul($19 >> 16, $48) | 0) + ((Math_imul($19 & 65535, $48) | 0) >> 16) << 2;
  } else $$0 = $19;
  $55 = $1 + 4332 | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  $59 = $$0 >> 16;
  $60 = $$0 & 65535;
  $$1 = $56 - $15 + -2 | 0;
  $62 = $56;
  while (1) {
   if (($$1 | 0) >= ($62 | 0)) break L5;
   $65 = HEAP16[$5 + ($$1 << 1) >> 1] | 0;
   HEAP32[$6 + ($$1 << 2) >> 2] = (Math_imul($59, $65) | 0) + ((Math_imul($60, $65) | 0) >> 16);
   $$1 = $$1 + 1 | 0;
   $62 = HEAP32[$55 >> 2] | 0;
  }
 } while (0);
 $72 = HEAP32[$16 >> 2] | 0;
 $73 = $1 + 4344 | 0;
 $74 = HEAP32[$73 >> 2] | 0;
 if (($72 | 0) == ($74 | 0)) return;
 $76 = _silk_DIV32_varQ_245($74, $72) | 0;
 $77 = $1 + 4336 | 0;
 $78 = HEAP32[$77 >> 2] | 0;
 $82 = $76 >> 16;
 $83 = $76 & 65535;
 $$2 = $78 - (HEAP32[$0 + 4592 >> 2] | 0) | 0;
 $85 = $78;
 while (1) {
  if (($$2 | 0) >= ($85 | 0)) break;
  $86 = $1 + 1280 + ($$2 << 2) | 0;
  $87 = HEAP32[$86 >> 2] | 0;
  $88 = $87 << 16 >> 16;
  HEAP32[$86 >> 2] = (Math_imul($82, $88) | 0) + ((Math_imul($83, $88) | 0) >> 16) + (Math_imul($76, ($87 >> 15) + 1 >> 1) | 0);
  $$2 = $$2 + 1 | 0;
  $85 = HEAP32[$77 >> 2] | 0;
 }
 L21 : do if (($12 | 0) == 2) if (!(HEAP32[$43 >> 2] | 0)) {
  $102 = $1 + 4332 | 0;
  $103 = HEAP32[$102 >> 2] | 0;
  $$3 = $103 - $15 + -2 | 0;
  $107 = $103;
  while (1) {
   if (($$3 | 0) >= ($107 - $13 | 0)) break L21;
   $109 = $6 + ($$3 << 2) | 0;
   $110 = HEAP32[$109 >> 2] | 0;
   $111 = $110 << 16 >> 16;
   HEAP32[$109 >> 2] = (Math_imul($82, $111) | 0) + ((Math_imul($83, $111) | 0) >> 16) + (Math_imul($76, ($110 >> 15) + 1 >> 1) | 0);
   $$3 = $$3 + 1 | 0;
   $107 = HEAP32[$102 >> 2] | 0;
  }
 } while (0);
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($8 | 0)) break;
  $123 = $2 + ($$01 * 1300 | 0) + 1280 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  $125 = $124 << 16 >> 16;
  HEAP32[$123 >> 2] = (Math_imul($82, $125) | 0) + ((Math_imul($83, $125) | 0) >> 16) + (Math_imul($76, ($124 >> 15) + 1 >> 1) | 0);
  $135 = $2 + ($$01 * 1300 | 0) + 1284 | 0;
  $136 = HEAP32[$135 >> 2] | 0;
  $137 = $136 << 16 >> 16;
  HEAP32[$135 >> 2] = (Math_imul($82, $137) | 0) + ((Math_imul($83, $137) | 0) >> 16) + (Math_imul($76, ($136 >> 15) + 1 >> 1) | 0);
  $$4 = 0;
  while (1) {
   if (($$4 | 0) == 16) break;
   $147 = $2 + ($$01 * 1300 | 0) + ($$4 << 2) | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   $149 = $148 << 16 >> 16;
   HEAP32[$147 >> 2] = (Math_imul($82, $149) | 0) + ((Math_imul($83, $149) | 0) >> 16) + (Math_imul($76, ($148 >> 15) + 1 >> 1) | 0);
   $$4 = $$4 + 1 | 0;
  }
  $$5 = 0;
  while (1) {
   if (($$5 | 0) == 24) break;
   $160 = $2 + ($$01 * 1300 | 0) + 1184 + ($$5 << 2) | 0;
   $161 = HEAP32[$160 >> 2] | 0;
   $162 = $161 << 16 >> 16;
   HEAP32[$160 >> 2] = (Math_imul($82, $162) | 0) + ((Math_imul($83, $162) | 0) >> 16) + (Math_imul($76, ($161 >> 15) + 1 >> 1) | 0);
   $$5 = $$5 + 1 | 0;
  }
  $$6 = 0;
  while (1) {
   if (($$6 | 0) == 40) break;
   $173 = $2 + ($$01 * 1300 | 0) + 864 + ($$6 << 2) | 0;
   $174 = HEAP32[$173 >> 2] | 0;
   $175 = $174 << 16 >> 16;
   HEAP32[$173 >> 2] = (Math_imul($82, $175) | 0) + ((Math_imul($83, $175) | 0) >> 16) + (Math_imul($76, ($174 >> 15) + 1 >> 1) | 0);
   $185 = $2 + ($$01 * 1300 | 0) + 1024 + ($$6 << 2) | 0;
   $186 = HEAP32[$185 >> 2] | 0;
   $187 = $186 << 16 >> 16;
   HEAP32[$185 >> 2] = (Math_imul($82, $187) | 0) + ((Math_imul($83, $187) | 0) >> 16) + (Math_imul($76, ($186 >> 15) + 1 >> 1) | 0);
   $$6 = $$6 + 1 | 0;
  }
  $$01 = $$01 + 1 | 0;
 }
 HEAP32[$73 >> 2] = HEAP32[$16 >> 2];
 return;
}

function _clt_compute_allocation($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$015 = 0, $$018 = 0, $$02 = 0, $$020 = 0, $$03 = 0, $$05 = 0, $$1 = 0, $$110 = 0, $$114 = 0, $$116 = 0, $$16 = 0, $$18 = 0, $$217 = 0, $101 = 0, $105 = 0, $111 = 0, $115 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $133 = 0, $134 = 0, $140 = 0, $141 = 0, $155 = 0, $157 = 0, $161 = 0, $164 = 0, $166 = 0, $173 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $54 = 0, $58 = 0, $67 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $89 = 0, $96 = 0, $97 = 0, $spec$select23$pn = 0, sp = 0;
 sp = STACKTOP;
 $21 = HEAP32[$0 + 8 >> 2] | 0;
 $24 = ($8 | 0) > 7 ? 8 : 0;
 $25 = (($8 | 0) > 0 ? $8 : 0) - $24 | 0;
 if (($13 | 0) == 2) {
  $30 = HEAPU8[20784 + ($2 - $1) >> 0] | 0;
  if (($25 | 0) < ($30 | 0)) {
   $$110 = 0;
   $$114 = $25;
   $$18 = 0;
  } else {
   $32 = $25 - $30 | 0;
   $34 = ($32 | 0) > 7 ? 8 : 0;
   $$110 = $30;
   $$114 = $32 - $34 | 0;
   $$18 = $34;
  }
 } else {
  $$110 = 0;
  $$114 = $25;
  $$18 = 0;
 }
 $36 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $37 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $38 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $39 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($21 << 2) | 0) + 15 & -16) | 0;
 $40 = $13 << 3;
 $41 = $0 + 32 | 0;
 $43 = $5 + -5 - $14 | 0;
 $44 = $14 + 3 | 0;
 $$015 = $1;
 while (1) {
  if (($$015 | 0) >= ($2 | 0)) break;
  $46 = HEAP32[$41 >> 2] | 0;
  $47 = $$015 + 1 | 0;
  $54 = (HEAP16[$46 + ($47 << 1) >> 1] | 0) - (HEAP16[$46 + ($$015 << 1) >> 1] | 0) | 0;
  $58 = $54 * 3 << $14 << 3 >> 4;
  HEAP32[$38 + ($$015 << 2) >> 2] = ($40 | 0) > ($58 | 0) ? $40 : $58;
  $67 = (Math_imul(Math_imul(Math_imul($54, $13) | 0, $43) | 0, $2 - $$015 + -1 | 0) | 0) << $44 >> 6;
  HEAP32[$39 + ($$015 << 2) >> 2] = $67 - (($54 << $14 | 0) == 1 ? $40 : 0);
  $$015 = $47;
 }
 $73 = HEAP32[$0 + 48 >> 2] | 0;
 $75 = $0 + 52 | 0;
 $$018 = $73 + -1 | 0;
 $$020 = 1;
 do {
  $77 = $$020 + $$018 >> 1;
  $78 = Math_imul($77, $21) | 0;
  $$03 = 0;
  $$05 = 0;
  $$116 = $2;
  while (1) {
   $79 = $$116 + -1 | 0;
   if (($$116 | 0) <= ($1 | 0)) break;
   $81 = HEAP32[$41 >> 2] | 0;
   $89 = Math_imul((HEAP16[$81 + ($$116 << 1) >> 1] | 0) - (HEAP16[$81 + ($79 << 1) >> 1] | 0) | 0, $13) | 0;
   $96 = (Math_imul($89, HEAPU8[(HEAP32[$75 >> 2] | 0) + ($78 + $79) >> 0] | 0) | 0) << $14;
   $97 = $96 >> 2;
   if (($96 | 0) > 3) {
    $101 = $97 + (HEAP32[$39 + ($79 << 2) >> 2] | 0) | 0;
    $$02 = ($101 | 0) > 0 ? $101 : 0;
   } else $$02 = $97;
   $105 = $$02 + (HEAP32[$3 + ($79 << 2) >> 2] | 0) | 0;
   if (($$05 | 0) == 0 ? ($105 | 0) < (HEAP32[$38 + ($79 << 2) >> 2] | 0) : 0) {
    $$16 = 0;
    $spec$select23$pn = ($105 | 0) < ($40 | 0) ? 0 : $40;
   } else {
    $111 = HEAP32[$4 + ($79 << 2) >> 2] | 0;
    $$16 = 1;
    $spec$select23$pn = ($105 | 0) < ($111 | 0) ? $105 : $111;
   }
   $$03 = $$03 + $spec$select23$pn | 0;
   $$05 = $$16;
   $$116 = $79;
  }
  $115 = ($$03 | 0) > ($$114 | 0);
  $$020 = $115 ? $$020 : $77 + 1 | 0;
  $$018 = $115 ? $77 + -1 | 0 : $$018;
 } while (($$020 | 0) <= ($$018 | 0));
 $120 = Math_imul($$020 + -1 | 0, $21) | 0;
 $121 = Math_imul($$020, $21) | 0;
 $122 = ($$020 | 0) > 1;
 $$011 = $1;
 $$217 = $1;
 while (1) {
  if (($$217 | 0) >= ($2 | 0)) break;
  $124 = HEAP32[$41 >> 2] | 0;
  $125 = $$217 + 1 | 0;
  $133 = Math_imul((HEAP16[$124 + ($125 << 1) >> 1] | 0) - (HEAP16[$124 + ($$217 << 1) >> 1] | 0) | 0, $13) | 0;
  $134 = HEAP32[$75 >> 2] | 0;
  $140 = (Math_imul($133, HEAPU8[$134 + ($120 + $$217) >> 0] | 0) | 0) << $14;
  $141 = $140 >> 2;
  if (($$020 | 0) < ($73 | 0)) $157 = (Math_imul($133, HEAPU8[$134 + ($121 + $$217) >> 0] | 0) | 0) << $14 >> 2; else $157 = HEAP32[$4 + ($$217 << 2) >> 2] | 0;
  if (($140 | 0) > 3) {
   $155 = $141 + (HEAP32[$39 + ($$217 << 2) >> 2] | 0) | 0;
   $$01 = ($155 | 0) > 0 ? $155 : 0;
  } else $$01 = $141;
  if (($157 | 0) > 0) {
   $161 = $157 + (HEAP32[$39 + ($$217 << 2) >> 2] | 0) | 0;
   $$0 = ($161 | 0) > 0 ? $161 : 0;
  } else $$0 = $157;
  $164 = HEAP32[$3 + ($$217 << 2) >> 2] | 0;
  $$1 = $$01 + ($122 ? $164 : 0) | 0;
  $166 = $$0 + $164 | 0;
  HEAP32[$36 + ($$217 << 2) >> 2] = $$1;
  HEAP32[$37 + ($$217 << 2) >> 2] = ($166 | 0) < ($$1 | 0) ? 0 : $166 - $$1 | 0;
  $$011 = ($164 | 0) > 0 ? $$217 : $$011;
  $$217 = $125;
 }
 $173 = _interp_bits2pulses($0, $1, $2, $$011, $36, $37, $38, $4, $$114, $9, $24, $6, $$110, $7, $$18, $10, $11, $12, $13, $14, $15, $16, $17, $18) | 0;
 STACKTOP = sp;
 return $173 | 0;
}

function _silk_encode_pulses($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$012$in = 0, $$013 = 0, $$02 = 0, $$04 = 0, $$06 = 0, $$08 = 0, $$17 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$3 = 0, $$311 = 0, $$4 = 0, $$5 = 0, $$pn = 0, $10 = 0, $110 = 0, $113 = 0, $115 = 0, $117 = 0, $12 = 0, $120 = 0, $13 = 0, $16 = 0, $18 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $40 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $62 = 0, $68 = 0, $72 = 0, $85 = 0, $88 = 0, $91 = 0, $95 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $6 = $4 >> 4;
 do if (($4 & -16 | 0) < ($4 | 0)) if (($4 | 0) == 120) {
  $10 = $6 + 1 | 0;
  dest = $3 + 120 | 0;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $$013 = $10;
  break;
 } else _celt_fatal(44211, 44253, 89); else $$013 = $6; while (0);
 $12 = $$013 << 4;
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 $$06 = 0;
 while (1) {
  if (($$06 | 0) >= ($12 | 0)) break;
  $16 = HEAP8[$3 + $$06 >> 0] | 0;
  $18 = $16 << 24 >> 24;
  HEAP32[$13 + ($$06 << 2) >> 2] = $16 << 24 >> 24 > 0 ? $18 : 0 - $18 | 0;
  $22 = $$06 | 1;
  $24 = HEAP8[$3 + $22 >> 0] | 0;
  $26 = $24 << 24 >> 24;
  HEAP32[$13 + ($22 << 2) >> 2] = $24 << 24 >> 24 > 0 ? $26 : 0 - $26 | 0;
  $30 = $$06 | 2;
  $32 = HEAP8[$3 + $30 >> 0] | 0;
  $34 = $32 << 24 >> 24;
  HEAP32[$13 + ($30 << 2) >> 2] = $32 << 24 >> 24 > 0 ? $34 : 0 - $34 | 0;
  $38 = $$06 | 3;
  $40 = HEAP8[$3 + $38 >> 0] | 0;
  $42 = $40 << 24 >> 24;
  HEAP32[$13 + ($38 << 2) >> 2] = $40 << 24 >> 24 > 0 ? $42 : 0 - $42 | 0;
  $$06 = $$06 + 4 | 0;
 }
 $47 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$013 << 2) | 0) + 15 & -16) | 0;
 $48 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$013 << 2) | 0) + 15 & -16) | 0;
 $$0 = $13;
 $$17 = 0;
 while (1) {
  if (($$17 | 0) >= ($$013 | 0)) break;
  $50 = $48 + ($$17 << 2) | 0;
  HEAP32[$50 >> 2] = 0;
  $51 = $47 + ($$17 << 2) | 0;
  while (1) {
   $52 = _combine_and_check($5, $$0, 8, 8) | 0;
   $54 = $52 + (_combine_and_check($5, $5, 10, 4) | 0) | 0;
   $56 = $54 + (_combine_and_check($5, $5, 12, 2) | 0) | 0;
   if (($56 | 0) == (0 - (_combine_and_check($51, $5, 16, 1) | 0) | 0)) break;
   HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
   $$08 = 0;
   while (1) {
    if (($$08 | 0) == 16) break;
    $62 = $$0 + ($$08 << 2) | 0;
    HEAP32[$62 >> 2] = HEAP32[$62 >> 2] >> 1;
    $$08 = $$08 + 1 | 0;
   }
  }
  $$0 = $$0 + 64 | 0;
  $$17 = $$17 + 1 | 0;
 }
 $68 = $1 >> 1;
 $$02 = 2147483647;
 $$04 = 0;
 $$19 = 0;
 while (1) {
  if (($$19 | 0) == 9) break;
  $72 = 25312 + ($$19 * 18 | 0) + 17 | 0;
  $$01 = HEAPU8[25520 + ($68 * 9 | 0) + $$19 >> 0] | 0;
  $$2 = 0;
  while (1) {
   if (($$2 | 0) >= ($$013 | 0)) break;
   if ((HEAP32[$48 + ($$2 << 2) >> 2] | 0) > 0) $$pn = HEAPU8[$72 >> 0] | 0; else $$pn = HEAPU8[(HEAP32[$47 + ($$2 << 2) >> 2] | 0) + (25312 + ($$19 * 18 | 0)) >> 0] | 0;
   $$01 = $$01 + $$pn | 0;
   $$2 = $$2 + 1 | 0;
  }
  $85 = ($$01 | 0) < ($$02 | 0);
  $$02 = $85 ? $$01 : $$02;
  $$04 = $85 ? $$19 : $$04;
  $$19 = $$19 + 1 | 0;
 }
 _ec_enc_icdf($0, $$04, 25488 + ($68 * 9 | 0) | 0, 8);
 $88 = 25120 + ($$04 * 18 | 0) | 0;
 $$3 = 0;
 while (1) {
  if (($$3 | 0) >= ($$013 | 0)) break;
  $91 = HEAP32[$48 + ($$3 << 2) >> 2] | 0;
  if (!$91) _ec_enc_icdf($0, HEAP32[$47 + ($$3 << 2) >> 2] | 0, $88, 8); else {
   _ec_enc_icdf($0, 17, $88, 8);
   $95 = $91 + -1 | 0;
   $$210 = 0;
   while (1) {
    if (($$210 | 0) >= ($95 | 0)) break;
    _ec_enc_icdf($0, 17, 25282, 8);
    $$210 = $$210 + 1 | 0;
   }
   _ec_enc_icdf($0, HEAP32[$47 + ($$3 << 2) >> 2] | 0, 25282, 8);
  }
  $$3 = $$3 + 1 | 0;
 }
 $$4 = 0;
 while (1) {
  if (($$4 | 0) >= ($$013 | 0)) break;
  if ((HEAP32[$47 + ($$4 << 2) >> 2] | 0) > 0) _silk_shell_encoder($0, $13 + ($$4 << 4 << 2) | 0);
  $$4 = $$4 + 1 | 0;
 }
 $$5 = 0;
 while (1) {
  if (($$5 | 0) >= ($$013 | 0)) break;
  $110 = HEAP32[$48 + ($$5 << 2) >> 2] | 0;
  L57 : do if (($110 | 0) > 0) {
   $113 = $3 + ($$5 << 4) | 0;
   $$311 = 0;
   while (1) {
    if (($$311 | 0) == 16) break L57;
    $115 = HEAP8[$113 + $$311 >> 0] | 0;
    $117 = $115 << 24 >> 24;
    $120 = ($115 << 24 >> 24 > 0 ? $117 : 0 - $117 | 0) << 24 >> 24;
    $$012$in = $110;
    while (1) {
     $$012 = $$012$in + -1 | 0;
     if (($$012$in | 0) <= 1) break;
     _ec_enc_icdf($0, $120 >>> $$012 & 1, 44686, 8);
     $$012$in = $$012;
    }
    _ec_enc_icdf($0, $120 & 1, 44686, 8);
    $$311 = $$311 + 1 | 0;
   }
  } while (0);
  $$5 = $$5 + 1 | 0;
 }
 _silk_encode_signs($0, $3, $4, $1, $2, $47);
 STACKTOP = sp;
 return;
}

function _quant_partition($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = +$7;
 $8 = $8 | 0;
 var $$0 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$6 = 0, $10 = 0, $108 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $123 = 0, $124 = 0, $125 = 0, $130 = 0, $131 = 0, $132 = 0, $135 = 0, $14 = 0, $145 = 0, $146 = 0, $150 = 0, $153 = 0, $16 = 0, $160 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $33 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0.0, $65 = 0.0, $76 = 0, $78 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $spec$select16 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $8;
 $12 = HEAP32[$0 >> 2] | 0;
 $14 = HEAP32[$0 + 8 >> 2] | 0;
 $16 = HEAP32[$0 + 12 >> 2] | 0;
 $18 = HEAP32[$0 + 20 >> 2] | 0;
 $20 = HEAP32[$0 + 28 >> 2] | 0;
 $22 = HEAP32[$14 + 100 >> 2] | 0;
 $24 = HEAP32[$14 + 96 >> 2] | 0;
 $27 = HEAP32[$14 + 8 >> 2] | 0;
 $33 = $22 + (HEAP16[$24 + ((Math_imul($6 + 1 | 0, $27) | 0) + $16 << 1) >> 1] | 0) | 0;
 if (($6 | 0) != -1) if (($2 | 0) > 2 ? ((HEAPU8[$33 + (HEAPU8[$33 >> 0] | 0) >> 0] | 0) + 12 | 0) < ($3 | 0) : 0) {
  $43 = $2 >> 1;
  $44 = $1 + ($43 << 2) | 0;
  $45 = $6 + -1 | 0;
  if (($4 | 0) == 1) HEAP32[$10 >> 2] = $8 & 1 | $8 << 1;
  $51 = $4 + 1 >> 1;
  _compute_theta($0, $11, $1, $44, $43, $9, $51, $4, $45, 0, $10);
  $57 = HEAP32[$11 + 12 >> 2] | 0;
  $59 = HEAP32[$11 + 16 >> 2] | 0;
  $61 = HEAP32[$11 + 20 >> 2] | 0;
  $63 = +(HEAP32[$11 + 4 >> 2] | 0) * .000030517578125;
  $65 = +(HEAP32[$11 + 8 >> 2] | 0) * .000030517578125;
  do if (($4 | 0) < 2 | ($59 & 16383 | 0) == 0) $$13 = $57; else if (($59 | 0) > 8192) {
   $$13 = $57 - ($57 >> 5 - $6) | 0;
   break;
  } else {
   $76 = $57 + ($43 << 3 >> 6 - $6) | 0;
   $$13 = ($76 | 0) < 0 ? $76 : 0;
   break;
  } while (0);
  $78 = HEAP32[$9 >> 2] | 0;
  $80 = ($78 - $$13 | 0) / 2 | 0;
  $81 = ($78 | 0) < ($80 | 0);
  $83 = (($81 ? $78 : $80) | 0) < 0 ? 0 : $81 ? $78 : $80;
  $84 = $78 - $83 | 0;
  $85 = $0 + 32 | 0;
  $87 = (HEAP32[$85 >> 2] | 0) - $61 | 0;
  HEAP32[$85 >> 2] = $87;
  $spec$select16 = ($5 | 0) == 0 ? 0 : $5 + ($43 << 2) | 0;
  if (($83 | 0) < ($84 | 0)) {
   $108 = HEAP32[$10 >> 2] | 0;
   $112 = (_quant_partition($0, $44, $43, $84, $51, $spec$select16, $45, $65 * $7, $108 >> $51) | 0) << ($4 >> 1);
   $115 = $84 + ((HEAP32[$85 >> 2] | 0) - $87) | 0;
   $$6 = $112 | (_quant_partition($0, $1, $43, $83 + (($115 | 0) < 25 | ($59 | 0) == 16384 ? 0 : $115 + -24 | 0) | 0, $51, $5, $45, $63 * $7, $108) | 0);
   STACKTOP = sp;
   return $$6 | 0;
  } else {
   $92 = HEAP32[$10 >> 2] | 0;
   $93 = _quant_partition($0, $1, $43, $83, $51, $5, $45, $63 * $7, $92) | 0;
   $96 = $83 + ((HEAP32[$85 >> 2] | 0) - $87) | 0;
   $$6 = $93 | (_quant_partition($0, $44, $43, $84 + (($96 | 0) < 25 | ($59 | 0) == 0 ? 0 : $96 + -24 | 0) | 0, $51, $spec$select16, $45, $65 * $7, $92 >> $51) | 0) << ($4 >> 1);
   STACKTOP = sp;
   return $$6 | 0;
  }
 }
 $123 = _bits2pulses($27, $24, $22, $16, $6, $3) | 0;
 $124 = _pulses2bits($14, $16, $6, $123) | 0;
 $125 = $0 + 32 | 0;
 $$04 = $123;
 $$05 = $124;
 $storemerge = (HEAP32[$125 >> 2] | 0) - $124 | 0;
 while (1) {
  HEAP32[$125 >> 2] = $storemerge;
  if (!(($storemerge | 0) < 0 & ($$04 | 0) > 0)) break;
  $130 = $storemerge + $$05 | 0;
  HEAP32[$125 >> 2] = $130;
  $131 = $$04 + -1 | 0;
  $132 = _pulses2bits($14, $16, $6, $131) | 0;
  $$04 = $131;
  $$05 = $132;
  $storemerge = $130 - $132 | 0;
 }
 if ($$04 | 0) {
  $135 = _get_pulses($$04) | 0;
  if (!$12) {
   $$6 = _alg_unquant($1, $2, $135, $18, $4, $20, $7) | 0;
   STACKTOP = sp;
   return $$6 | 0;
  } else {
   $$6 = _alg_quant($1, $2, $135, $18, $4, $20, $7, HEAP32[$0 + 4 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$6 | 0;
  }
 }
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$6 = 0;
  STACKTOP = sp;
  return $$6 | 0;
 }
 $145 = (1 << $4) + -1 | 0;
 $146 = $145 & $8;
 HEAP32[$10 >> 2] = $146;
 if (!$146) {
  _memset($1 | 0, 0, $2 << 2 | 0) | 0;
  $$6 = 0;
  STACKTOP = sp;
  return $$6 | 0;
 }
 $150 = $0 + 40 | 0;
 L38 : do if (!$5) {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) {
    $$2 = $145;
    break L38;
   }
   $153 = _celt_lcg_rand(HEAP32[$150 >> 2] | 0) | 0;
   HEAP32[$150 >> 2] = $153;
   HEAPF32[$1 + ($$0 << 2) >> 2] = +($153 >> 20 | 0);
   $$0 = $$0 + 1 | 0;
  }
 } else {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($2 | 0)) {
    $$2 = $146;
    break L38;
   }
   $160 = _celt_lcg_rand(HEAP32[$150 >> 2] | 0) | 0;
   HEAP32[$150 >> 2] = $160;
   HEAPF32[$1 + ($$1 << 2) >> 2] = +HEAPF32[$5 + ($$1 << 2) >> 2] + (($160 & 32768 | 0) == 0 ? -.00390625 : .00390625);
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 _renormalise_vector($1, $2, $7);
 $$6 = $$2;
 STACKTOP = sp;
 return $$6 | 0;
}

function _silk_encode_indices($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$03 = 0, $$04 = 0, $$15 = 0, $$pre = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $107 = 0, $110 = 0, $113 = 0, $116 = 0, $118 = 0, $120 = 0, $122 = 0, $127 = 0, $136 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $31 = 0, $38 = 0, $41 = 0, $42 = 0, $5 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = ($3 | 0) == 0;
 $$0 = $7 ? $0 + 4736 | 0 : $0 + 6100 + ($2 * 36 | 0) | 0;
 $10 = $$0 + 29 | 0;
 $17 = (HEAP8[$10 >> 0] << 1) + (HEAP8[$$0 + 30 >> 0] | 0) | 0;
 if ($17 >>> 0 >= 6) _celt_fatal(44013, 44065, 59);
 $19 = ($17 | 0) > 1;
 if ($7) if ($19) label = 7; else _ec_enc_icdf($1, $17, 44695, 8); else if ($19) label = 7; else _celt_fatal(44087, 44065, 60);
 if ((label | 0) == 7) _ec_enc_icdf($1, $17 + -2 | 0, 44691, 8);
 $21 = ($4 | 0) == 2;
 $23 = HEAP8[$$0 >> 0] | 0;
 if ($21) _ec_enc_icdf($1, $23, 20848, 8); else {
  _ec_enc_icdf($1, $23 >> 3, 20816 + (HEAP8[$10 >> 0] << 3) | 0, 8);
  _ec_enc_icdf($1, HEAP8[$$0 >> 0] & 7, 44720, 8);
 }
 $31 = $0 + 4580 | 0;
 $$04 = 1;
 while (1) {
  if (($$04 | 0) >= (HEAP32[$31 >> 2] | 0)) break;
  _ec_enc_icdf($1, HEAP8[$$0 + $$04 >> 0] | 0, 20848, 8);
  $$04 = $$04 + 1 | 0;
 }
 $38 = $$0 + 8 | 0;
 $41 = $0 + 4692 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 _ec_enc_icdf($1, HEAP8[$38 >> 0] | 0, (HEAP32[$42 + 16 >> 2] | 0) + (Math_imul(HEAP8[$10 >> 0] >> 1, HEAP16[$42 >> 1] | 0) | 0) | 0, 8);
 _silk_NLSF_unpack($5, $6, HEAP32[$41 >> 2] | 0, HEAP8[$38 >> 0] | 0);
 $55 = HEAP32[$41 >> 2] | 0;
 $57 = HEAP16[$55 + 2 >> 1] | 0;
 if ((HEAP32[$0 + 4640 >> 2] | 0) != ($57 << 16 >> 16 | 0)) _celt_fatal(44141, 44065, 93);
 $$15 = 0;
 $63 = $57;
 $70 = $55;
 while (1) {
  if (($$15 | 0) >= ($63 << 16 >> 16 | 0)) break;
  $65 = $$15 + 1 | 0;
  $66 = $$0 + 8 + $65 | 0;
  $67 = HEAP8[$66 >> 0] | 0;
  do if ($67 << 24 >> 24 > 3) {
   _ec_enc_icdf($1, 8, (HEAP32[$70 + 28 >> 2] | 0) + (HEAP16[$5 + ($$15 << 1) >> 1] | 0) | 0, 8);
   _ec_enc_icdf($1, (HEAP8[$66 >> 0] | 0) + -4 | 0, 44728, 8);
  } else if ($67 << 24 >> 24 < -3) {
   _ec_enc_icdf($1, 0, (HEAP32[$70 + 28 >> 2] | 0) + (HEAP16[$5 + ($$15 << 1) >> 1] | 0) | 0, 8);
   _ec_enc_icdf($1, -4 - (HEAP8[$66 >> 0] | 0) | 0, 44728, 8);
   break;
  } else {
   _ec_enc_icdf($1, ($67 << 24 >> 24) + 4 | 0, (HEAP32[$70 + 28 >> 2] | 0) + (HEAP16[$5 + ($$15 << 1) >> 1] | 0) | 0, 8);
   break;
  } while (0);
  $$pre = HEAP32[$41 >> 2] | 0;
  $$15 = $65;
  $63 = HEAP16[$$pre + 2 >> 1] | 0;
  $70 = $$pre;
 }
 if ((HEAP32[$31 >> 2] | 0) == 4) _ec_enc_icdf($1, HEAP8[$$0 + 31 >> 0] | 0, 44697, 8);
 if ((HEAP8[$10 >> 0] | 0) != 2) {
  $153 = HEAP8[$10 >> 0] | 0;
  $154 = $153 << 24 >> 24;
  $155 = $0 + 5768 | 0;
  HEAP32[$155 >> 2] = $154;
  $156 = $$0 + 34 | 0;
  $157 = HEAP8[$156 >> 0] | 0;
  $158 = $157 << 24 >> 24;
  _ec_enc_icdf($1, $158, 44705, 8);
  STACKTOP = sp;
  return;
 }
 do if ($21) if ((HEAP32[$0 + 5768 >> 2] | 0) == 2) {
  $107 = $$0 + 26 | 0;
  $110 = $0 + 5772 | 0;
  $113 = (HEAP16[$107 >> 1] | 0) - (HEAP16[$110 >> 1] | 0) | 0;
  if (($113 + 8 | 0) >>> 0 > 19) {
   _ec_enc_icdf($1, 0, 25040, 8);
   label = 33;
   break;
  } else {
   _ec_enc_icdf($1, $113 + 9 | 0, 25040, 8);
   $$pre$phi11Z2D = $110;
   $$pre$phiZ2D = $107;
   break;
  }
 } else label = 33; else label = 33; while (0);
 if ((label | 0) == 33) {
  $116 = $$0 + 26 | 0;
  $118 = HEAP16[$116 >> 1] | 0;
  $120 = HEAP32[$0 + 4576 >> 2] | 0;
  $122 = ($118 | 0) / ($120 >> 1 | 0) | 0;
  $127 = $118 - (Math_imul($122 << 16 >> 16, $120 << 15 >> 16) | 0) | 0;
  _ec_enc_icdf($1, $122, 25008, 8);
  _ec_enc_icdf($1, $127, HEAP32[$0 + 4684 >> 2] | 0, 8);
  $$pre$phi11Z2D = $0 + 5772 | 0;
  $$pre$phiZ2D = $116;
 }
 HEAP16[$$pre$phi11Z2D >> 1] = HEAP16[$$pre$phiZ2D >> 1] | 0;
 _ec_enc_icdf($1, HEAP8[$$0 + 28 >> 0] | 0, HEAP32[$0 + 4688 >> 2] | 0, 8);
 $136 = $$0 + 32 | 0;
 _ec_enc_icdf($1, HEAP8[$136 >> 0] | 0, 44644, 8);
 $$03 = 0;
 while (1) {
  if (($$03 | 0) >= (HEAP32[$31 >> 2] | 0)) break;
  _ec_enc_icdf($1, HEAP8[$$0 + 4 + $$03 >> 0] | 0, HEAP32[39812 + (HEAP8[$136 >> 0] << 2) >> 2] | 0, 8);
  $$03 = $$03 + 1 | 0;
 }
 if ($4 | 0) {
  $153 = HEAP8[$10 >> 0] | 0;
  $154 = $153 << 24 >> 24;
  $155 = $0 + 5768 | 0;
  HEAP32[$155 >> 2] = $154;
  $156 = $$0 + 34 | 0;
  $157 = HEAP8[$156 >> 0] | 0;
  $158 = $157 << 24 >> 24;
  _ec_enc_icdf($1, $158, 44705, 8);
  STACKTOP = sp;
  return;
 }
 _ec_enc_icdf($1, HEAP8[$$0 + 33 >> 0] | 0, 44688, 8);
 $153 = HEAP8[$10 >> 0] | 0;
 $154 = $153 << 24 >> 24;
 $155 = $0 + 5768 | 0;
 HEAP32[$155 >> 2] = $154;
 $156 = $$0 + 34 | 0;
 $157 = HEAP8[$156 >> 0] | 0;
 $158 = $157 << 24 >> 24;
 _ec_enc_icdf($1, $158, 44705, 8);
 STACKTOP = sp;
 return;
}

function _remove_doubling($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$012 = 0.0, $$014 = 0.0, $$016 = 0.0, $$018 = 0.0, $$019 = 0.0, $$05 = 0, $$07 = 0, $$08 = 0, $$1 = 0.0, $$111 = 0, $$113 = 0.0, $$115 = 0.0, $$117 = 0.0, $$12 = 0.0, $$120 = 0.0, $$14 = 0, $$16 = 0, $$19 = 0, $$cast = 0.0, $101 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $21 = 0.0, $26 = 0.0, $28 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $43 = 0, $44 = 0, $47 = 0, $5 = 0, $6 = 0, $62 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0.0, $79 = 0.0, $8 = 0, $81 = 0.0, $86 = 0.0, $9 = 0, $97 = 0.0, $98 = 0.0, $spec$select = 0, $spec$select7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $5 = sp + 2072 | 0;
 $6 = sp + 2068 | 0;
 $7 = sp + 2064 | 0;
 $8 = sp + 2052 | 0;
 $9 = HEAP32[$2 >> 2] | 0;
 $11 = ($3 | 0) / 2 | 0;
 $12 = ($1 | 0) / 2 | 0;
 $13 = $0 + 2048 | 0;
 $spec$select = ($9 | 0) > 1023 ? 511 : ($9 | 0) / 2 | 0;
 HEAP32[$2 >> 2] = $spec$select;
 $15 = sp;
 _dual_inner_prod_c_119($13, $13, $13 + (0 - $spec$select << 2) | 0, $12, $6, $5);
 $18 = HEAP32[$6 >> 2] | 0;
 HEAP32[$15 >> 2] = $18;
 $$cast = (HEAP32[tempDoublePtr >> 2] = $18, +HEAPF32[tempDoublePtr >> 2]);
 $$018 = $$cast;
 $$07 = 1;
 while (1) {
  if (($$07 | 0) == 513) break;
  $21 = +HEAPF32[$13 + (0 - $$07 << 2) >> 2];
  $26 = +HEAPF32[$13 + ($12 - $$07 << 2) >> 2];
  $28 = $$018 + $21 * $21 - $26 * $26;
  HEAPF32[$15 + ($$07 << 2) >> 2] = $28 < 0.0 ? 0.0 : $28;
  $$018 = $28;
  $$07 = $$07 + 1 | 0;
 }
 $34 = +HEAPF32[$15 + ($spec$select << 2) >> 2];
 $35 = +HEAPF32[$5 >> 2];
 $36 = +_compute_pitch_gain($35, $$cast, $34);
 $37 = $spec$select << 1;
 $38 = $36 * .699999988079071;
 $39 = $36 * .8500000238418579;
 $40 = $4 * .5;
 $$012 = $36;
 $$014 = $34;
 $$019 = $35;
 $$05 = 2;
 $$08 = $spec$select;
 while (1) {
  if ($$05 >>> 0 >= 16) break;
  $43 = $$05 << 1;
  $44 = _celt_udiv_120($37 + $$05 | 0, $43) | 0;
  if (($44 | 0) < 7) break;
  if (($$05 | 0) == 2) {
   $47 = $44 + $spec$select | 0;
   $$14 = ($47 | 0) > 512 ? $spec$select : $47;
  } else $$14 = _celt_udiv_120((Math_imul(HEAP32[20240 + ($$05 << 2) >> 2] << 1, $spec$select) | 0) + $$05 | 0, $43) | 0;
  _dual_inner_prod_c_119($13, $13 + (0 - $44 << 2) | 0, $13 + (0 - $$14 << 2) | 0, $12, $5, $7);
  $62 = (+HEAPF32[$5 >> 2] + +HEAPF32[$7 >> 2]) * .5;
  HEAPF32[$5 >> 2] = $62;
  $68 = (+HEAPF32[$15 + ($44 << 2) >> 2] + +HEAPF32[$15 + ($$14 << 2) >> 2]) * .5;
  $69 = +_compute_pitch_gain($62, $$cast, $68);
  $70 = $44 - $11 | 0;
  $71 = ($70 | 0) > -1 ? $70 : 0 - $70 | 0;
  if (($71 | 0) < 2) $$12 = $4; else if (($71 | 0) == 2) {
   $76 = (Math_imul($$05 * 5 | 0, $$05) | 0) < ($spec$select | 0);
   $$12 = $76 ? $40 : 0.0;
  } else $$12 = 0.0;
  $77 = $38 - $$12;
  $79 = $77 < .30000001192092896 ? .30000001192092896 : $77;
  if (($44 | 0) < 21) {
   $81 = $39 - $$12;
   if ($81 < .4000000059604645) $$1 = .4000000059604645; else $$1 = $81;
  } else $$1 = $79;
  if ($69 > $$1) {
   $$113 = $69;
   $$115 = $68;
   $$120 = $62;
   $$19 = $44;
  } else {
   $$113 = $$012;
   $$115 = $$014;
   $$120 = $$019;
   $$19 = $$08;
  }
  $$012 = $$113;
  $$014 = $$115;
  $$019 = $$120;
  $$05 = $$05 + 1 | 0;
  $$08 = $$19;
 }
 $86 = $$019 < 0.0 ? 0.0 : $$019;
 if (!($$014 <= $86)) $$016 = $86 / ($$014 + 1.0); else $$016 = 1.0;
 $$16 = 0;
 while (1) {
  if (($$16 | 0) == 3) break;
  HEAPF32[$8 + ($$16 << 2) >> 2] = +_celt_inner_prod_c_111($13, $13 + (1 - ($$08 + $$16) << 2) | 0, $12);
  $$16 = $$16 + 1 | 0;
 }
 $97 = +HEAPF32[$8 + 8 >> 2];
 $98 = +HEAPF32[$8 >> 2];
 $101 = +HEAPF32[$8 + 4 >> 2];
 if ($97 - $98 > ($101 - $98) * .699999988079071) {
  $$111 = 1;
  $109 = $$016 > $$012;
  $$117 = $109 ? $$012 : $$016;
  $110 = $$08 << 1;
  $111 = $110 + $$111 | 0;
  $112 = ($111 | 0) > 15;
  $spec$select7 = $112 ? $111 : 15;
  HEAP32[$2 >> 2] = $spec$select7;
  STACKTOP = sp;
  return +$$117;
 }
 if ($98 - $97 > ($101 - $97) * .699999988079071) {
  $$111 = -1;
  $109 = $$016 > $$012;
  $$117 = $109 ? $$012 : $$016;
  $110 = $$08 << 1;
  $111 = $110 + $$111 | 0;
  $112 = ($111 | 0) > 15;
  $spec$select7 = $112 ? $111 : 15;
  HEAP32[$2 >> 2] = $spec$select7;
  STACKTOP = sp;
  return +$$117;
 }
 $$111 = 0;
 $109 = $$016 > $$012;
 $$117 = $109 ? $$012 : $$016;
 $110 = $$08 << 1;
 $111 = $110 + $$111 | 0;
 $112 = ($111 | 0) > 15;
 $spec$select7 = $112 ? $111 : 15;
 HEAP32[$2 >> 2] = $spec$select7;
 STACKTOP = sp;
 return +$$117;
}

function _silk_decode_indices($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01 = 0, $$03 = 0, $$04 = 0, $$15 = 0, $$2 = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$sink = 0, $101 = 0, $104 = 0, $110 = 0, $113 = 0, $117 = 0, $118 = 0, $126 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $16 = 0, $20 = 0, $29 = 0, $30 = 0, $35 = 0, $42 = 0, $43 = 0, $5 = 0, $53 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $69 = 0, $75 = 0, $82 = 0, $94 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 if (!$3) if (!(HEAP32[$0 + 2404 + ($2 << 2) >> 2] | 0)) $$01 = _ec_dec_icdf($1, 44695, 8) | 0; else label = 3; else label = 3;
 if ((label | 0) == 3) $$01 = (_ec_dec_icdf($1, 44691, 8) | 0) + 2 | 0;
 $14 = $$01 >>> 1;
 $16 = $0 + 2765 | 0;
 HEAP8[$16 >> 0] = $14;
 HEAP8[$0 + 2766 >> 0] = $$01 & 1;
 $20 = ($4 | 0) == 2;
 if ($20) HEAP8[$0 + 2736 >> 0] = _ec_dec_icdf($1, 20848, 8) | 0; else {
  $29 = $0 + 2736 | 0;
  HEAP8[$29 >> 0] = (_ec_dec_icdf($1, 20816 + ($14 << 24 >> 24 << 3) | 0, 8) | 0) << 3;
  $30 = _ec_dec_icdf($1, 44720, 8) | 0;
  HEAP8[$29 >> 0] = $30 + (HEAPU8[$29 >> 0] | 0);
 }
 $35 = $0 + 2324 | 0;
 $$04 = 1;
 while (1) {
  if (($$04 | 0) >= (HEAP32[$35 >> 2] | 0)) break;
  HEAP8[$0 + 2736 + $$04 >> 0] = _ec_dec_icdf($1, 20848, 8) | 0;
  $$04 = $$04 + 1 | 0;
 }
 $42 = $0 + 2732 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $53 = _ec_dec_icdf($1, (HEAP32[$43 + 16 >> 2] | 0) + (Math_imul(HEAP8[$16 >> 0] >> 1, HEAP16[$43 >> 1] | 0) | 0) | 0, 8) | 0;
 HEAP8[$0 + 2744 >> 0] = $53;
 _silk_NLSF_unpack($5, $6, HEAP32[$42 >> 2] | 0, $53 << 24 >> 24);
 $58 = HEAP32[$42 >> 2] | 0;
 $60 = HEAP16[$58 + 2 >> 1] | 0;
 if ((HEAP32[$0 + 2340 >> 2] | 0) != ($60 << 16 >> 16 | 0)) _celt_fatal(43121, 43183, 82);
 $$15 = 0;
 $66 = $60;
 $69 = $58;
 while (1) {
  if (($$15 | 0) >= ($66 << 16 >> 16 | 0)) break;
  $75 = _ec_dec_icdf($1, (HEAP32[$69 + 28 >> 2] | 0) + (HEAP16[$5 + ($$15 << 1) >> 1] | 0) | 0, 8) | 0;
  switch ($75 | 0) {
  case 0:
   {
    $$2 = 0 - (_ec_dec_icdf($1, 44728, 8) | 0) | 0;
    break;
   }
  case 8:
   {
    $$2 = (_ec_dec_icdf($1, 44728, 8) | 0) + 8 | 0;
    break;
   }
  default:
   $$2 = $75;
  }
  $82 = $$15 + 1 | 0;
  HEAP8[$0 + 2744 + $82 >> 0] = $$2 + 252;
  $$pre = HEAP32[$42 >> 2] | 0;
  $$15 = $82;
  $66 = HEAP16[$$pre + 2 >> 1] | 0;
  $69 = $$pre;
 }
 if ((HEAP32[$35 >> 2] | 0) == 4) $$sink = (_ec_dec_icdf($1, 44697, 8) | 0) & 255; else $$sink = 4;
 HEAP8[$0 + 2767 >> 0] = $$sink;
 if ((HEAP8[$16 >> 0] | 0) != 2) {
  $142 = HEAP8[$16 >> 0] | 0;
  $143 = $142 << 24 >> 24;
  $144 = $0 + 2396 | 0;
  HEAP32[$144 >> 2] = $143;
  $145 = _ec_dec_icdf($1, 44705, 8) | 0;
  $146 = $145 & 255;
  $147 = $0 + 2770 | 0;
  HEAP8[$147 >> 0] = $146;
  STACKTOP = sp;
  return;
 }
 if ($20) if ((HEAP32[$0 + 2396 >> 2] | 0) == 2) {
  $94 = _ec_dec_icdf($1, 25040, 8) | 0;
  if (($94 << 16 | 0) > 0) {
   $97 = $0 + 2400 | 0;
   $101 = $94 + 65527 + (HEAPU16[$97 >> 1] | 0) & 65535;
   HEAP16[$0 + 2762 >> 1] = $101;
   $$pre$phi12Z2D = $97;
   $118 = $101;
  } else label = 26;
 } else label = 26; else label = 26;
 if ((label | 0) == 26) {
  $104 = (_ec_dec_icdf($1, 25008, 8) | 0) << 16 >> 16;
  $110 = $0 + 2762 | 0;
  HEAP16[$110 >> 1] = Math_imul($104, HEAP32[$0 + 2316 >> 2] >> 1) | 0;
  $113 = _ec_dec_icdf($1, HEAP32[$0 + 2380 >> 2] | 0, 8) | 0;
  $117 = $113 + (HEAPU16[$110 >> 1] | 0) & 65535;
  HEAP16[$110 >> 1] = $117;
  $$pre$phi12Z2D = $0 + 2400 | 0;
  $118 = $117;
 }
 HEAP16[$$pre$phi12Z2D >> 1] = $118;
 HEAP8[$0 + 2764 >> 0] = _ec_dec_icdf($1, HEAP32[$0 + 2384 >> 2] | 0, 8) | 0;
 $126 = $0 + 2768 | 0;
 HEAP8[$126 >> 0] = _ec_dec_icdf($1, 44644, 8) | 0;
 $$03 = 0;
 while (1) {
  if (($$03 | 0) >= (HEAP32[$35 >> 2] | 0)) break;
  HEAP8[$0 + 2740 + $$03 >> 0] = _ec_dec_icdf($1, HEAP32[39812 + (HEAP8[$126 >> 0] << 2) >> 2] | 0, 8) | 0;
  $$03 = $$03 + 1 | 0;
 }
 if (!$4) {
  HEAP8[$0 + 2769 >> 0] = _ec_dec_icdf($1, 44688, 8) | 0;
  $142 = HEAP8[$16 >> 0] | 0;
  $143 = $142 << 24 >> 24;
  $144 = $0 + 2396 | 0;
  HEAP32[$144 >> 2] = $143;
  $145 = _ec_dec_icdf($1, 44705, 8) | 0;
  $146 = $145 & 255;
  $147 = $0 + 2770 | 0;
  HEAP8[$147 >> 0] = $146;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$0 + 2769 >> 0] = 0;
  $142 = HEAP8[$16 >> 0] | 0;
  $143 = $142 << 24 >> 24;
  $144 = $0 + 2396 | 0;
  HEAP32[$144 >> 2] = $143;
  $145 = _ec_dec_icdf($1, 44705, 8) | 0;
  $146 = $145 & 255;
  $147 = $0 + 2770 | 0;
  HEAP8[$147 >> 0] = $146;
  STACKTOP = sp;
  return;
 }
}

function _opus_repacketizer_out_range_impl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$012 = 0, $$013 = 0, $$10 = 0, $$11 = 0, $$113 = 0, $$2$ph = 0, $$214 = 0, $$3 = 0, $$315 = 0, $$36$ph = 0, $$4 = 0, $$416 = 0, $$5 = 0, $$58 = 0, $$6 = 0, $$69 = 0, $$710 = 0, $$8 = 0, $$811 = 0, $104 = 0, $109 = 0, $11 = 0, $117 = 0, $18 = 0, $19 = 0, $23 = 0, $35 = 0, $40 = 0, $53 = 0, $56 = 0, $66 = 0, $72 = 0, $76 = 0, $81 = 0, $83 = 0, $87 = 0, $89 = 0, $9 = 0, $98 = 0, label = 0;
 if (($1 | 0) < 1) {
  $$0 = -1;
  return $$0 | 0;
 }
 if ((HEAP32[$0 + 4 >> 2] | 0) < ($1 | 0)) {
  $$0 = -1;
  return $$0 | 0;
 }
 $9 = $0 + 200 | 0;
 L7 : do switch ($1 | 0) {
 case 1:
  {
   $11 = HEAP16[$9 >> 1] | 0;
   if (($11 | 0) < ($3 | 0)) {
    HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4;
    $$2$ph = $2 + 1 | 0;
    $$36$ph = $11 + 1 | 0;
    label = 11;
    break L7;
   } else {
    $$0 = -2;
    return $$0 | 0;
   }
   break;
  }
 case 2:
  {
   $18 = HEAP16[$0 + 202 >> 1] | 0;
   $19 = HEAP16[$9 >> 1] | 0;
   if ($18 << 16 >> 16 == $19 << 16 >> 16) {
    $23 = $18 << 16 >> 16 << 1 | 1;
    if (($23 | 0) > ($3 | 0)) {
     $$0 = -2;
     return $$0 | 0;
    } else {
     HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4 | 1;
     $$2$ph = $2 + 1 | 0;
     $$36$ph = $23;
     label = 11;
     break L7;
    }
   } else {
    $35 = ($19 << 16 >> 16) + ($18 << 16 >> 16) + 2 + ($19 << 16 >> 16 > 251 & 1) | 0;
    if (($35 | 0) > ($3 | 0)) {
     $$0 = -2;
     return $$0 | 0;
    } else {
     $40 = $2 + 1 | 0;
     HEAP8[$2 >> 0] = HEAP8[$0 >> 0] & -4 | 2;
     $$2$ph = $40 + (_encode_size(HEAP16[$9 >> 1] | 0, $40) | 0) | 0;
     $$36$ph = $35;
     label = 11;
     break L7;
    }
   }
   break;
  }
 default:
  label = 12;
 } while (0);
 if ((label | 0) == 11) if (($4 | 0) != 0 & ($$36$ph | 0) < ($3 | 0)) label = 12; else {
  $$8 = $$2$ph;
  $$811 = $$36$ph;
 }
 L24 : do if ((label | 0) == 12) {
  $$012 = 1;
  while (1) {
   if (($$012 | 0) >= ($1 | 0)) {
    label = 21;
    break;
   }
   if ((HEAP16[$0 + 200 + ($$012 << 1) >> 1] | 0) != (HEAP16[$9 >> 1] | 0)) {
    label = 16;
    break;
   }
   $$012 = $$012 + 1 | 0;
  }
  do if ((label | 0) == 16) {
   $53 = $1 + -1 | 0;
   $$113 = 0;
   $$58 = 2;
   while (1) {
    if (($$113 | 0) >= ($53 | 0)) break;
    $56 = HEAP16[$0 + 200 + ($$113 << 1) >> 1] | 0;
    $$113 = $$113 + 1 | 0;
    $$58 = $$58 + (($56 << 16 >> 16 > 251 ? 2 : 1) + ($56 << 16 >> 16)) | 0;
   }
   $66 = $$58 + (HEAP16[$0 + 200 + ($53 << 1) >> 1] | 0) | 0;
   if (($66 | 0) > ($3 | 0)) {
    $$0 = -2;
    return $$0 | 0;
   } else {
    HEAP8[$2 >> 0] = HEAP8[$0 >> 0] | 3;
    $72 = ($1 | 128) & 255;
    HEAP8[$2 + 1 >> 0] = $72;
    $$013 = 1;
    $$69 = $66;
    $87 = $72;
    break;
   }
  } else if ((label | 0) == 21) {
   $76 = (Math_imul(HEAP16[$9 >> 1] | 0, $1) | 0) + 2 | 0;
   if (($76 | 0) > ($3 | 0)) {
    $$0 = -2;
    return $$0 | 0;
   } else {
    HEAP8[$2 >> 0] = HEAP8[$0 >> 0] | 3;
    $81 = $1 & 255;
    HEAP8[$2 + 1 >> 0] = $81;
    $$013 = 0;
    $$69 = $76;
    $87 = $81;
    break;
   }
  } while (0);
  $$3 = $2 + 2 | 0;
  if (!$4) {
   $$5 = $$3;
   $$710 = $$69;
  } else {
   $83 = $3 - $$69 | 0;
   if (!$83) {
    $$5 = $$3;
    $$710 = $$69;
   } else {
    HEAP8[$2 + 1 >> 0] = $87 | 64;
    $89 = ($83 + -1 | 0) / 255 | 0;
    $$214 = 0;
    $$4 = $$3;
    while (1) {
     if (($$214 | 0) >= ($89 | 0)) break;
     HEAP8[$$4 >> 0] = -1;
     $$214 = $$214 + 1 | 0;
     $$4 = $$4 + 1 | 0;
    }
    HEAP8[$$4 >> 0] = $83 + (Math_imul($89, -255) | 0) + 255;
    $$5 = $$4 + 1 | 0;
    $$710 = $3;
   }
  }
  if ($$013) {
   $98 = $1 + -1 | 0;
   $$315 = 0;
   $$6 = $$5;
   while (1) {
    if (($$315 | 0) >= ($98 | 0)) {
     $$8 = $$6;
     $$811 = $$710;
     break L24;
    }
    $104 = $$6 + (_encode_size(HEAP16[$0 + 200 + ($$315 << 1) >> 1] | 0, $$6) | 0) | 0;
    $$315 = $$315 + 1 | 0;
    $$6 = $104;
   }
  } else {
   $$8 = $$5;
   $$811 = $$710;
  }
 } while (0);
 $$10 = $$8;
 $$416 = 0;
 while (1) {
  if (($$416 | 0) >= ($1 | 0)) break;
  $109 = $0 + 200 + ($$416 << 1) | 0;
  _memmove($$10 | 0, HEAP32[$0 + 8 + ($$416 << 2) >> 2] | 0, HEAP16[$109 >> 1] | 0) | 0;
  $$10 = $$10 + (HEAP16[$109 >> 1] | 0) | 0;
  $$416 = $$416 + 1 | 0;
 }
 if (!$4) {
  $$0 = $$811;
  return $$0 | 0;
 }
 $117 = $2 + $3 | 0;
 $$11 = $$10;
 while (1) {
  if ($$11 >>> 0 >= $117 >>> 0) {
   $$0 = $$811;
   break;
  }
  HEAP8[$$11 >> 0] = 0;
  $$11 = $$11 + 1 | 0;
 }
 return $$0 | 0;
}

function _silk_setup_complexity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $105 = 0, $17 = 0, $20 = 0, $21 = 0, $30 = 0, $33 = 0, $34 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $56 = 0, $59 = 0, $60 = 0, $65 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $91 = 0, $95 = 0, $96 = 0, $98 = 0;
 if ($1 >>> 0 >= 11) _celt_fatal(45325, 45379, 315);
 L4 : do switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 4644 >> 2] = 0;
   HEAP32[$0 + 4652 >> 2] = 52429;
   $5 = $0 + 4648 | 0;
   HEAP32[$5 >> 2] = 6;
   HEAP32[$0 + 4636 >> 2] = 12;
   $8 = HEAP32[$0 + 4576 >> 2] | 0;
   $9 = $8 * 3 | 0;
   HEAP32[$0 + 4600 >> 2] = $9;
   HEAP32[$0 + 4628 >> 2] = 1;
   HEAP32[$0 + 4632 >> 2] = 0;
   HEAP32[$0 + 4660 >> 2] = 2;
   HEAP32[$0 + 4672 >> 2] = 0;
   $$pre$phiZ2D = $5;
   $100 = $9;
   $105 = 0;
   $95 = 6;
   $98 = $8;
   break;
  }
 case 1:
  {
   HEAP32[$0 + 4644 >> 2] = 1;
   HEAP32[$0 + 4652 >> 2] = 49807;
   $17 = $0 + 4648 | 0;
   HEAP32[$17 >> 2] = 8;
   HEAP32[$0 + 4636 >> 2] = 14;
   $20 = HEAP32[$0 + 4576 >> 2] | 0;
   $21 = $20 * 5 | 0;
   HEAP32[$0 + 4600 >> 2] = $21;
   HEAP32[$0 + 4628 >> 2] = 1;
   HEAP32[$0 + 4632 >> 2] = 0;
   HEAP32[$0 + 4660 >> 2] = 3;
   HEAP32[$0 + 4672 >> 2] = 0;
   $$pre$phiZ2D = $17;
   $100 = $21;
   $105 = 0;
   $95 = 8;
   $98 = $20;
   break;
  }
 default:
  {
   if (($1 | 0) < 3) {
    HEAP32[$0 + 4644 >> 2] = 0;
    HEAP32[$0 + 4652 >> 2] = 52429;
    $30 = $0 + 4648 | 0;
    HEAP32[$30 >> 2] = 6;
    HEAP32[$0 + 4636 >> 2] = 12;
    $33 = HEAP32[$0 + 4576 >> 2] | 0;
    $34 = $33 * 3 | 0;
    HEAP32[$0 + 4600 >> 2] = $34;
    HEAP32[$0 + 4628 >> 2] = 2;
    HEAP32[$0 + 4632 >> 2] = 0;
    HEAP32[$0 + 4660 >> 2] = 2;
    HEAP32[$0 + 4672 >> 2] = 0;
    $$pre$phiZ2D = $30;
    $100 = $34;
    $105 = 0;
    $95 = 6;
    $98 = $33;
    break L4;
   }
   if (($1 | 0) == 3) {
    HEAP32[$0 + 4644 >> 2] = 1;
    HEAP32[$0 + 4652 >> 2] = 49807;
    $43 = $0 + 4648 | 0;
    HEAP32[$43 >> 2] = 8;
    HEAP32[$0 + 4636 >> 2] = 14;
    $46 = HEAP32[$0 + 4576 >> 2] | 0;
    $47 = $46 * 5 | 0;
    HEAP32[$0 + 4600 >> 2] = $47;
    HEAP32[$0 + 4628 >> 2] = 2;
    HEAP32[$0 + 4632 >> 2] = 0;
    HEAP32[$0 + 4660 >> 2] = 4;
    HEAP32[$0 + 4672 >> 2] = 0;
    $$pre$phiZ2D = $43;
    $100 = $47;
    $105 = 0;
    $95 = 8;
    $98 = $46;
    break L4;
   }
   if (($1 | 0) < 6) {
    HEAP32[$0 + 4644 >> 2] = 1;
    HEAP32[$0 + 4652 >> 2] = 48497;
    $56 = $0 + 4648 | 0;
    HEAP32[$56 >> 2] = 10;
    HEAP32[$0 + 4636 >> 2] = 16;
    $59 = HEAP32[$0 + 4576 >> 2] | 0;
    $60 = $59 * 5 | 0;
    HEAP32[$0 + 4600 >> 2] = $60;
    HEAP32[$0 + 4628 >> 2] = 2;
    HEAP32[$0 + 4632 >> 2] = 1;
    HEAP32[$0 + 4660 >> 2] = 6;
    $65 = $59 * 983 | 0;
    HEAP32[$0 + 4672 >> 2] = $65;
    $$pre$phiZ2D = $56;
    $100 = $60;
    $105 = $65;
    $95 = 10;
    $98 = $59;
    break L4;
   }
   $68 = $0 + 4644 | 0;
   if (($1 | 0) < 8) {
    HEAP32[$68 >> 2] = 1;
    HEAP32[$0 + 4652 >> 2] = 47186;
    $70 = $0 + 4648 | 0;
    HEAP32[$70 >> 2] = 12;
    HEAP32[$0 + 4636 >> 2] = 20;
    $73 = HEAP32[$0 + 4576 >> 2] | 0;
    $74 = $73 * 5 | 0;
    HEAP32[$0 + 4600 >> 2] = $74;
    HEAP32[$0 + 4628 >> 2] = 3;
    HEAP32[$0 + 4632 >> 2] = 1;
    HEAP32[$0 + 4660 >> 2] = 8;
    $79 = $73 * 983 | 0;
    HEAP32[$0 + 4672 >> 2] = $79;
    $$pre$phiZ2D = $70;
    $100 = $74;
    $105 = $79;
    $95 = 12;
    $98 = $73;
    break L4;
   } else {
    HEAP32[$68 >> 2] = 2;
    HEAP32[$0 + 4652 >> 2] = 45875;
    $82 = $0 + 4648 | 0;
    HEAP32[$82 >> 2] = 16;
    HEAP32[$0 + 4636 >> 2] = 24;
    $85 = HEAP32[$0 + 4576 >> 2] | 0;
    $86 = $85 * 5 | 0;
    HEAP32[$0 + 4600 >> 2] = $86;
    HEAP32[$0 + 4628 >> 2] = 4;
    HEAP32[$0 + 4632 >> 2] = 1;
    HEAP32[$0 + 4660 >> 2] = 16;
    $91 = $85 * 983 | 0;
    HEAP32[$0 + 4672 >> 2] = $91;
    $$pre$phiZ2D = $82;
    $100 = $86;
    $105 = $91;
    $95 = 16;
    $98 = $85;
    break L4;
   }
  }
 } while (0);
 $96 = _silk_min_int_396($95, HEAP32[$0 + 4640 >> 2] | 0) | 0;
 HEAP32[$$pre$phiZ2D >> 2] = $96;
 $101 = ($98 * 5 | 0) + ($100 << 1) | 0;
 HEAP32[$0 + 4604 >> 2] = $101;
 HEAP32[$0 + 4624 >> 2] = $1;
 if (($96 | 0) >= 17) _celt_fatal(45400, 45379, 393);
 if (($105 | 0) >= 32768) _celt_fatal(45478, 45379, 396);
 if (($100 | 0) >= 81) _celt_fatal(45525, 45379, 397);
 if (($101 | 0) < 241) return 0; else _celt_fatal(45576, 45379, 398);
 return 0;
}

function _opus_custom_decoder_ctl($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $$01 = 0, $103 = 0, $104 = 0, $112 = 0, $113 = 0, $120 = 0, $121 = 0, $130 = 0, $131 = 0, $139 = 0, $140 = 0, $2 = 0, $21 = 0, $22 = 0, $34 = 0, $35 = 0, $43 = 0, $44 = 0, $46 = 0, $53 = 0, $54 = 0, $65 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $9 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 do switch ($1 | 0) {
 case 10010:
  {
   $8 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $9 = HEAP32[$8 >> 2] | 0;
   HEAP32[$2 >> 2] = $8 + 4;
   if (($9 | 0) < 0) label = 30; else if (($9 | 0) < (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$0 + 20 >> 2] = $9;
    label = 29;
   } else label = 30;
   break;
  }
 case 10012:
  {
   $21 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $22 = HEAP32[$21 >> 2] | 0;
   HEAP32[$2 >> 2] = $21 + 4;
   if (($22 | 0) < 1) label = 30; else if (($22 | 0) > (HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0)) label = 30; else {
    HEAP32[$0 + 24 >> 2] = $22;
    label = 29;
   }
   break;
  }
 case 10008:
  {
   $34 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $35 = HEAP32[$34 >> 2] | 0;
   HEAP32[$2 >> 2] = $34 + 4;
   if (($35 + -1 | 0) >>> 0 > 1) label = 30; else {
    HEAP32[$0 + 12 >> 2] = $35;
    label = 29;
   }
   break;
  }
 case 10007:
  {
   $43 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$2 >> 2] = $43 + 4;
   if (!$44) label = 30; else {
    $46 = $0 + 44 | 0;
    HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
    HEAP32[$46 >> 2] = 0;
    label = 29;
   }
   break;
  }
 case 4027:
  {
   $53 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$2 >> 2] = $53 + 4;
   if (!$54) label = 30; else {
    HEAP32[$54 >> 2] = (HEAP32[$0 + 4 >> 2] | 0) / (HEAP32[$0 + 16 >> 2] | 0) | 0;
    label = 29;
   }
   break;
  }
 case 4028:
  {
   $65 = HEAP32[$0 + 8 >> 2] | 0;
   $69 = $0 + 92 + ((Math_imul((HEAP32[$0 + 4 >> 2] | 0) + 2048 | 0, $65) | 0) << 2) + ($65 * 24 << 2) | 0;
   $70 = HEAP32[$0 >> 2] | 0;
   $72 = HEAP32[$70 + 8 >> 2] | 0;
   $73 = $72 << 1;
   $74 = $69 + ($73 << 2) | 0;
   $75 = $74 + ($73 << 2) | 0;
   _memset($0 + 40 | 0, 0, (_opus_custom_decoder_get_size(HEAP32[$70 + 4 >> 2] | 0, $72, $65) | 0) + -40 | 0) | 0;
   $$01 = 0;
   $80 = $70;
   while (1) {
    if (($$01 | 0) >= (HEAP32[$80 + 8 >> 2] << 1 | 0)) break;
    HEAPF32[$75 + ($$01 << 2) >> 2] = -28.0;
    HEAPF32[$74 + ($$01 << 2) >> 2] = -28.0;
    $$01 = $$01 + 1 | 0;
    $80 = HEAP32[$0 >> 2] | 0;
   }
   HEAP32[$0 + 56 >> 2] = 1;
   label = 29;
   break;
  }
 case 4033:
  {
   $93 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $94 = HEAP32[$93 >> 2] | 0;
   HEAP32[$2 >> 2] = $93 + 4;
   if (!$94) label = 30; else {
    HEAP32[$94 >> 2] = HEAP32[$0 + 60 >> 2];
    label = 29;
   }
   break;
  }
 case 10015:
  {
   $103 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $104 = HEAP32[$103 >> 2] | 0;
   HEAP32[$2 >> 2] = $103 + 4;
   if (!$104) label = 30; else {
    HEAP32[$104 >> 2] = HEAP32[$0 >> 2];
    label = 29;
   }
   break;
  }
 case 10016:
  {
   $112 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $113 = HEAP32[$112 >> 2] | 0;
   HEAP32[$2 >> 2] = $112 + 4;
   HEAP32[$0 + 28 >> 2] = $113;
   label = 29;
   break;
  }
 case 4031:
  {
   $120 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $121 = HEAP32[$120 >> 2] | 0;
   HEAP32[$2 >> 2] = $120 + 4;
   if (!$121) label = 30; else {
    HEAP32[$121 >> 2] = HEAP32[$0 + 40 >> 2];
    label = 29;
   }
   break;
  }
 case 4046:
  {
   $130 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $131 = HEAP32[$130 >> 2] | 0;
   HEAP32[$2 >> 2] = $130 + 4;
   if ($131 >>> 0 > 1) label = 30; else {
    HEAP32[$0 + 32 >> 2] = $131;
    label = 29;
   }
   break;
  }
 case 4047:
  {
   $139 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $140 = HEAP32[$139 >> 2] | 0;
   HEAP32[$2 >> 2] = $139 + 4;
   if (!$140) label = 30; else {
    HEAP32[$140 >> 2] = HEAP32[$0 + 32 >> 2];
    label = 29;
   }
   break;
  }
 default:
  {
   $$0 = -5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 29) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 30) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _quant_band_stereo($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$1 = 0, $$17 = 0, $100 = 0, $101 = 0, $104 = 0, $11 = 0, $113 = 0, $116 = 0, $12 = 0, $128 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $51 = 0, $54 = 0, $55 = 0, $70 = 0, $74 = 0.0, $75 = 0, $78 = 0.0, $82 = 0.0, $89 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $spec$select = 0, $spec$select8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $10;
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = HEAP32[$0 + 28 >> 2] | 0;
 if (($3 | 0) == 1) {
  _quant_band_n1($0, $1, $2, $4, $8);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _compute_theta($0, $13, $1, $2, $3, $11, $5, $5, $7, 1, $12);
 $18 = HEAP32[$13 >> 2] | 0;
 $24 = HEAP32[$13 + 16 >> 2] | 0;
 $26 = HEAP32[$13 + 20 >> 2] | 0;
 $28 = +(HEAP32[$13 + 4 >> 2] | 0) * .000030517578125;
 $30 = +(HEAP32[$13 + 8 >> 2] | 0) * .000030517578125;
 $31 = ($3 | 0) == 2;
 do if ($31) {
  $32 = HEAP32[$11 >> 2] | 0;
  if (($24 | 0) < 16384) switch ($24 | 0) {
  case 0:
   {
    $$03 = 0;
    break;
   }
  default:
   label = 5;
  } else switch ($24 | 0) {
  case 16384:
   {
    $$03 = 0;
    break;
   }
  default:
   label = 5;
  }
  if ((label | 0) == 5) $$03 = 8;
  $33 = $32 - $$03 | 0;
  $34 = ($24 | 0) > 8192;
  $36 = $0 + 32 | 0;
  HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) - ($26 + $$03);
  $spec$select = $34 ? $2 : $1;
  $spec$select8 = $34 ? $1 : $2;
  do if (!$$03) $$1 = 0; else if (!$14) {
   $$1 = _ec_dec_bits($16, 1) | 0;
   break;
  } else {
   $51 = +HEAPF32[$spec$select >> 2] * +HEAPF32[$spec$select8 + 4 >> 2] - +HEAPF32[$spec$select + 4 >> 2] * +HEAPF32[$spec$select8 >> 2] < 0.0 & 1;
   _ec_enc_bits($16, $51, 1);
   $$1 = $51;
   break;
  } while (0);
  $54 = 1 - ($$1 << 1) | 0;
  $55 = _quant_band($0, $spec$select, 2, $33, $5, $6, $7, $8, 1.0, $9, $10) | 0;
  HEAPF32[$spec$select8 >> 2] = +HEAPF32[$spec$select + 4 >> 2] * +(0 - $54 | 0);
  HEAPF32[$spec$select8 + 4 >> 2] = +HEAPF32[$spec$select >> 2] * +($54 | 0);
  if (!(HEAP32[$0 + 4 >> 2] | 0)) $$17 = $55; else {
   HEAPF32[$1 >> 2] = $28 * +HEAPF32[$1 >> 2];
   $70 = $1 + 4 | 0;
   HEAPF32[$70 >> 2] = $28 * +HEAPF32[$70 >> 2];
   $74 = $30 * +HEAPF32[$2 >> 2];
   HEAPF32[$2 >> 2] = $74;
   $75 = $2 + 4 | 0;
   HEAPF32[$75 >> 2] = $30 * +HEAPF32[$75 >> 2];
   $78 = +HEAPF32[$1 >> 2];
   HEAPF32[$1 >> 2] = $78 - $74;
   HEAPF32[$2 >> 2] = $78 + +HEAPF32[$2 >> 2];
   $82 = +HEAPF32[$70 >> 2];
   HEAPF32[$70 >> 2] = $82 - +HEAPF32[$75 >> 2];
   HEAPF32[$75 >> 2] = $82 + +HEAPF32[$75 >> 2];
   $$17 = $55;
  }
 } else {
  $89 = HEAP32[$11 >> 2] | 0;
  $91 = ($89 - (HEAP32[$13 + 12 >> 2] | 0) | 0) / 2 | 0;
  $92 = ($89 | 0) < ($91 | 0);
  $94 = (($92 ? $89 : $91) | 0) < 0 ? 0 : $92 ? $89 : $91;
  $95 = $89 - $94 | 0;
  $96 = $0 + 32 | 0;
  $98 = (HEAP32[$96 >> 2] | 0) - $26 | 0;
  HEAP32[$96 >> 2] = $98;
  $100 = HEAP32[$12 >> 2] | 0;
  if (($94 | 0) < ($95 | 0)) {
   $113 = _quant_band($0, $2, $3, $95, $5, 0, $7, 0, $30, 0, $100 >> $5) | 0;
   $116 = $95 + ((HEAP32[$96 >> 2] | 0) - $98) | 0;
   $$17 = $113 | (_quant_band($0, $1, $3, $94 + (($116 | 0) < 25 | ($24 | 0) == 16384 ? 0 : $116 + -24 | 0) | 0, $5, $6, $7, $8, 1.0, $9, $100) | 0);
   break;
  } else {
   $101 = _quant_band($0, $1, $3, $94, $5, $6, $7, $8, 1.0, $9, $100) | 0;
   $104 = $94 + ((HEAP32[$96 >> 2] | 0) - $98) | 0;
   $$17 = $101 | (_quant_band($0, $2, $3, $95 + (($104 | 0) < 25 | ($24 | 0) == 0 ? 0 : $104 + -24 | 0) | 0, $5, 0, $7, 0, $30, 0, $100 >> $5) | 0);
   break;
  }
 } while (0);
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0 = $$17;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$31) _stereo_merge($1, $2, $28, $3);
 if (!$18) {
  $$0 = $$17;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) {
   $$0 = $$17;
   break;
  }
  $128 = $2 + ($$01 << 2) | 0;
  HEAPF32[$128 >> 2] = -+HEAPF32[$128 >> 2];
  $$01 = $$01 + 1 | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_A2NLSF($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$013 = 0, $$014 = 0, $$019 = 0, $$024 = 0, $$028 = 0, $$033 = 0, $$04 = 0, $$06 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$115 = 0, $$120 = 0, $$125 = 0, $$129 = 0, $$134 = 0, $$15 = 0, $$216 = 0, $$23 = 0, $$230 = 0, $$28 = 0, $$312 = 0, $$317 = 0, $$327 = 0, $$4 = 0, $$423 = 0, $$432 = 0, $$6 = 0, $13 = 0, $14 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $36 = 0, $4 = 0, $5 = 0, $51 = 0, $63 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $8 = 0, $81 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp + 64 | 0;
 $4 = sp;
 $5 = sp + 120 | 0;
 HEAP32[$5 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 $7 = $2 >> 1;
 _silk_A2NLSF_init($1, $3, $4, $7);
 $8 = _silk_A2NLSF_eval_poly($3, 8192, $7) | 0;
 if (($8 | 0) < 0) {
  HEAP16[$0 >> 1] = 0;
  $$0 = $4;
  $$014 = _silk_A2NLSF_eval_poly($4, 8192, $7) | 0;
  $$019 = 1;
 } else {
  $$0 = $3;
  $$014 = $8;
  $$019 = 0;
 }
 $$01 = 0;
 $$028 = 8192;
 $$06 = 0;
 $$09 = 1;
 $$1 = $$0;
 $$115 = $$014;
 $$120 = $$019;
 while (1) {
  $13 = HEAP16[26752 + ($$09 << 1) >> 1] | 0;
  $14 = _silk_A2NLSF_eval_poly($$1, $13, $7) | 0;
  if (($$115 | 0) < 1) if (($14 | 0) < ($$01 | 0)) if (($$115 | 0) < 0 | ($14 | 0) > (0 - $$01 | 0)) label = 21; else label = 8; else label = 8; else if (($14 | 0) > (0 - $$01 | 0)) label = 21; else label = 8;
  if ((label | 0) == 8) {
   label = 0;
   $spec$select = ($14 | 0) == 0 & 1;
   $$013 = 0;
   $$024 = -256;
   $$033 = $13;
   $$04 = $14;
   $$129 = $$028;
   $$216 = $$115;
   while (1) {
    if (($$013 | 0) == 3) break;
    $21 = $$129 + $$033 | 0;
    $24 = ($21 >> 1) + ($21 & 1) | 0;
    $25 = _silk_A2NLSF_eval_poly($$1, $24, $7) | 0;
    if (($$216 | 0) < 1) if (($25 | 0) > -1 | ($$216 | 0) == 0) {
     $$125 = $$024;
     $$134 = $24;
     $$15 = $25;
     $$230 = $$129;
     $$317 = $$216;
    } else label = 13; else if (($25 | 0) < 1) {
     $$125 = $$024;
     $$134 = $24;
     $$15 = $25;
     $$230 = $$129;
     $$317 = $$216;
    } else label = 13;
    if ((label | 0) == 13) {
     label = 0;
     $$125 = $$024 + (128 >>> $$013) | 0;
     $$134 = $$033;
     $$15 = $$04;
     $$230 = $24;
     $$317 = $25;
    }
    $$013 = $$013 + 1 | 0;
    $$024 = $$125;
    $$033 = $$134;
    $$04 = $$15;
    $$129 = $$230;
    $$216 = $$317;
   }
   $36 = $$216 - $$04 | 0;
   if (((($$216 | 0) > 0 ? $$216 : 0 - $$216 | 0) | 0) < 65536) if (!$36) $$327 = $$024; else $$327 = $$024 + ((($$216 << 5) + ($36 >> 1) | 0) / ($36 | 0) | 0) | 0; else $$327 = $$024 + (($$216 | 0) / ($36 >> 5 | 0) | 0) | 0;
   HEAP16[$0 + ($$120 << 1) >> 1] = _silk_min_32_406(($$09 << 8) + $$327 | 0) | 0;
   $51 = $$120 + 1 | 0;
   if (($51 | 0) >= ($2 | 0)) {
    label = 29;
    break;
   }
   $$23 = $spec$select;
   $$28 = $$06;
   $$312 = $$09;
   $$4 = HEAP32[$5 + (($51 & 1) << 2) >> 2] | 0;
   $$423 = $51;
   $$432 = HEAP16[26752 + ($$09 + -1 << 1) >> 1] | 0;
   $$6 = 4096 - ($51 << 12 & 8192) | 0;
  } else if ((label | 0) == 21) {
   label = 0;
   $63 = $$09 + 1 | 0;
   if (($$09 | 0) > 127) {
    $65 = $$06 + 1 | 0;
    if (($$06 | 0) > 15) break;
    _silk_bwexpander_32($1, $2, 65536 - (1 << $65) | 0);
    _silk_A2NLSF_init($1, $3, $4, $7);
    $81 = _silk_A2NLSF_eval_poly($3, 8192, $7) | 0;
    if (($81 | 0) < 0) {
     HEAP16[$0 >> 1] = 0;
     $$23 = 0;
     $$28 = $65;
     $$312 = 1;
     $$4 = $4;
     $$423 = 1;
     $$432 = 8192;
     $$6 = _silk_A2NLSF_eval_poly($4, 8192, $7) | 0;
    } else {
     $$23 = 0;
     $$28 = $65;
     $$312 = 1;
     $$4 = $3;
     $$423 = 0;
     $$432 = 8192;
     $$6 = $81;
    }
   } else {
    $$23 = 0;
    $$28 = $$06;
    $$312 = $63;
    $$4 = $$1;
    $$423 = $$120;
    $$432 = $13;
    $$6 = $14;
   }
  }
  $$01 = $$23;
  $$028 = $$432;
  $$06 = $$28;
  $$09 = $$312;
  $$1 = $$4;
  $$115 = $$6;
  $$120 = $$423;
 }
 if ((label | 0) == 29) {
  STACKTOP = sp;
  return;
 }
 $68 = 32768 / ($2 + 1 | 0) | 0;
 HEAP16[$0 >> 1] = $68;
 $$110 = 1;
 $72 = $68;
 while (1) {
  if (($$110 | 0) >= ($2 | 0)) break;
  $75 = ($72 & 65535) + (HEAPU16[$0 >> 1] | 0) | 0;
  HEAP16[$0 + ($$110 << 1) >> 1] = $75;
  $$110 = $$110 + 1 | 0;
  $72 = $75;
 }
 STACKTOP = sp;
 return;
}

function _opus_decode_native($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$pre = 0, $$val = 0, $11 = 0, $21 = 0, $26 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $64 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 100 | 0;
 $9 = sp;
 _validate_opus_decoder($0);
 if ($5 >>> 0 > 1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = ($5 | 0) == 0;
 if (($2 | 0) == 0 | $11 ^ 1 | ($1 | 0) == 0) {
  if (($4 | 0) % ((HEAP32[$0 + 12 >> 2] | 0) / 400 | 0 | 0) | 0 | 0) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($2 | 0) == 0 | ($1 | 0) == 0) {
   $21 = $0 + 8 | 0;
   $$02 = 0;
   do {
    $26 = _opus_decode_frame($0, 0, 0, $3 + ((Math_imul($$02, HEAP32[$21 >> 2] | 0) | 0) << 2) | 0, $4 - $$02 | 0, 0) | 0;
    if (($26 | 0) < 0) {
     $$0 = $26;
     label = 34;
     break;
    }
    $$02 = $$02 + $26 | 0;
   } while (($$02 | 0) < ($4 | 0));
   if ((label | 0) == 34) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($$02 | 0) != ($4 | 0)) _celt_fatal(48186, 48228, 652);
   HEAP32[$0 + 72 >> 2] = $4;
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (($2 | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$val = HEAP8[$1 >> 0] | 0;
 $33 = _opus_packet_get_mode($$val) | 0;
 $34 = _opus_packet_get_bandwidth($$val) | 0;
 $37 = _opus_packet_get_samples_per_frame($$val, HEAP32[$0 + 12 >> 2] | 0) | 0;
 $38 = _opus_packet_get_nb_channels($$val) | 0;
 $39 = _opus_packet_parse_impl($1, $2, 0, $8, 0, $9, $7, 0) | 0;
 if (($39 | 0) < 0) {
  $$0 = $39;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $42 = $1 + (HEAP32[$7 >> 2] | 0) | 0;
 if ($11) {
  if ((Math_imul($39, $37) | 0) > ($4 | 0)) {
   $$0 = -2;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$0 + 56 >> 2] = $33;
  HEAP32[$0 + 52 >> 2] = $34;
  HEAP32[$0 + 64 >> 2] = $37;
  HEAP32[$0 + 48 >> 2] = $38;
  $72 = $0 + 8 | 0;
  $$01 = $42;
  $$03 = 0;
  $$04 = 0;
  while (1) {
   if (($$04 | 0) >= ($39 | 0)) {
    label = 31;
    break;
   }
   $74 = $9 + ($$04 << 1) | 0;
   $81 = _opus_decode_frame($0, $$01, HEAP16[$74 >> 1] | 0, $3 + ((Math_imul($$03, HEAP32[$72 >> 2] | 0) | 0) << 2) | 0, $4 - $$03 | 0, 0) | 0;
   if (($81 | 0) < 0) {
    $$0 = $81;
    label = 34;
    break;
   }
   if (($81 | 0) != ($37 | 0)) {
    label = 29;
    break;
   }
   $$01 = $$01 + (HEAP16[$74 >> 1] | 0) | 0;
   $$03 = $$03 + $37 | 0;
   $$04 = $$04 + 1 | 0;
  }
  if ((label | 0) == 29) _celt_fatal(48299, 48228, 724); else if ((label | 0) == 31) {
   HEAP32[$0 + 72 >> 2] = $$03;
   if (!$6) {
    HEAPF32[$0 + 80 >> 2] = 0.0;
    HEAPF32[$0 + 76 >> 2] = 0.0;
    $$0 = $$03;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    _opus_pcm_soft_clip($3, $$03, HEAP32[$72 >> 2] | 0, $0 + 76 | 0);
    $$0 = $$03;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else if ((label | 0) == 34) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  if (!(($37 | 0) > ($4 | 0) | ($33 | 0) == 1002)) {
   $45 = $0 + 56 | 0;
   if ((HEAP32[$45 >> 2] | 0) != 1002) {
    $49 = $0 + 72 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $$pre = $4 - $37 | 0;
    do if (($37 | 0) != ($4 | 0)) {
     $52 = _opus_decode_native($0, 0, 0, $3, $$pre, 0, $6) | 0;
     if (($52 | 0) < 0) {
      HEAP32[$49 >> 2] = $50;
      $$0 = $52;
      STACKTOP = sp;
      return $$0 | 0;
     } else {
      if (($52 | 0) == ($$pre | 0)) break;
      _celt_fatal(48247, 48228, 689);
     }
    } while (0);
    HEAP32[$45 >> 2] = $33;
    HEAP32[$0 + 52 >> 2] = $34;
    HEAP32[$0 + 64 >> 2] = $37;
    HEAP32[$0 + 48 >> 2] = $38;
    $64 = _opus_decode_frame($0, $42, HEAP16[$9 >> 1] | 0, $3 + ((Math_imul(HEAP32[$0 + 8 >> 2] | 0, $$pre) | 0) << 2) | 0, $37, 1) | 0;
    if (($64 | 0) < 0) {
     $$0 = $64;
     STACKTOP = sp;
     return $$0 | 0;
    }
    HEAP32[$49 >> 2] = $4;
    $$0 = $4;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
  $$0 = _opus_decode_native($0, 0, 0, $3, $4, 0, $6) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _silk_nsq_scale_states($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $40 = 0, $45 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $99 = 0;
 $12 = HEAP32[$9 + ($6 << 2) >> 2] | 0;
 $13 = $8 + ($6 << 2) | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $16 = _silk_INVERSE32_varQ_235(($14 | 0) > 1 ? $14 : 1) | 0;
 $18 = ($16 >> 4) + 1 | 0;
 $20 = $0 + 4588 | 0;
 $21 = $18 >>> 1 << 16 >> 16;
 $24 = ($18 >> 16) + 1 >> 1;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= (HEAP32[$20 >> 2] | 0)) break;
  $28 = HEAP16[$2 + ($$01 << 1) >> 1] | 0;
  $29 = $28 << 16 >> 16;
  HEAP32[$3 + ($$01 << 2) >> 2] = (Math_imul($29 >> 16, $21) | 0) + ((Math_imul($21, $28 & 65535) | 0) >> 16) + (Math_imul($24, $29) | 0);
  $$01 = $$01 + 1 | 0;
 }
 $40 = $1 + 4348 | 0;
 L5 : do if (HEAP32[$40 >> 2] | 0) {
  if (!$6) {
   $45 = $7 << 16 >> 16;
   $$0 = (Math_imul($16 >> 16, $45) | 0) + ((Math_imul($16 & 65535, $45) | 0) >> 16) << 2;
  } else $$0 = $16;
  $52 = $1 + 4332 | 0;
  $53 = HEAP32[$52 >> 2] | 0;
  $56 = $$0 >> 16;
  $57 = $$0 & 65535;
  $$1 = $53 - $12 + -2 | 0;
  $59 = $53;
  while (1) {
   if (($$1 | 0) >= ($59 | 0)) break L5;
   $62 = HEAP16[$4 + ($$1 << 1) >> 1] | 0;
   HEAP32[$5 + ($$1 << 2) >> 2] = (Math_imul($56, $62) | 0) + ((Math_imul($57, $62) | 0) >> 16);
   $$1 = $$1 + 1 | 0;
   $59 = HEAP32[$52 >> 2] | 0;
  }
 } while (0);
 $69 = HEAP32[$13 >> 2] | 0;
 $70 = $1 + 4344 | 0;
 $71 = HEAP32[$70 >> 2] | 0;
 if (($69 | 0) == ($71 | 0)) return;
 $73 = _silk_DIV32_varQ_236($71, $69) | 0;
 $74 = $1 + 4336 | 0;
 $75 = HEAP32[$74 >> 2] | 0;
 $79 = $73 >> 16;
 $80 = $73 & 65535;
 $$2 = $75 - (HEAP32[$0 + 4592 >> 2] | 0) | 0;
 $82 = $75;
 while (1) {
  if (($$2 | 0) >= ($82 | 0)) break;
  $83 = $1 + 1280 + ($$2 << 2) | 0;
  $84 = HEAP32[$83 >> 2] | 0;
  $85 = $84 << 16 >> 16;
  HEAP32[$83 >> 2] = (Math_imul($79, $85) | 0) + ((Math_imul($80, $85) | 0) >> 16) + (Math_imul($73, ($84 >> 15) + 1 >> 1) | 0);
  $$2 = $$2 + 1 | 0;
  $82 = HEAP32[$74 >> 2] | 0;
 }
 L21 : do if (($10 | 0) == 2) if (!(HEAP32[$40 >> 2] | 0)) {
  $99 = $1 + 4332 | 0;
  $100 = HEAP32[$99 >> 2] | 0;
  $$3 = $100 - $12 + -2 | 0;
  $104 = $100;
  while (1) {
   if (($$3 | 0) >= ($104 | 0)) break L21;
   $105 = $5 + ($$3 << 2) | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   $107 = $106 << 16 >> 16;
   HEAP32[$105 >> 2] = (Math_imul($79, $107) | 0) + ((Math_imul($80, $107) | 0) >> 16) + (Math_imul($73, ($106 >> 15) + 1 >> 1) | 0);
   $$3 = $$3 + 1 | 0;
   $104 = HEAP32[$99 >> 2] | 0;
  }
 } while (0);
 $118 = $1 + 4320 | 0;
 $119 = HEAP32[$118 >> 2] | 0;
 $120 = $119 << 16 >> 16;
 HEAP32[$118 >> 2] = (Math_imul($79, $120) | 0) + ((Math_imul($80, $120) | 0) >> 16) + (Math_imul($73, ($119 >> 15) + 1 >> 1) | 0);
 $130 = $1 + 4324 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 $132 = $131 << 16 >> 16;
 HEAP32[$130 >> 2] = (Math_imul($79, $132) | 0) + ((Math_imul($80, $132) | 0) >> 16) + (Math_imul($73, ($131 >> 15) + 1 >> 1) | 0);
 $$4 = 0;
 while (1) {
  if (($$4 | 0) == 16) break;
  $142 = $1 + 3840 + ($$4 << 2) | 0;
  $143 = HEAP32[$142 >> 2] | 0;
  $144 = $143 << 16 >> 16;
  HEAP32[$142 >> 2] = (Math_imul($79, $144) | 0) + ((Math_imul($80, $144) | 0) >> 16) + (Math_imul($73, ($143 >> 15) + 1 >> 1) | 0);
  $$4 = $$4 + 1 | 0;
 }
 $$5 = 0;
 while (1) {
  if (($$5 | 0) == 24) break;
  $155 = $1 + 4224 + ($$5 << 2) | 0;
  $156 = HEAP32[$155 >> 2] | 0;
  $157 = $156 << 16 >> 16;
  HEAP32[$155 >> 2] = (Math_imul($79, $157) | 0) + ((Math_imul($80, $157) | 0) >> 16) + (Math_imul($73, ($156 >> 15) + 1 >> 1) | 0);
  $$5 = $$5 + 1 | 0;
 }
 HEAP32[$70 >> 2] = HEAP32[$13 >> 2];
 return;
}

function _silk_setup_fs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$012 = 0, $$013 = 0, $$015 = 0, $$1 = 0, $12 = 0, $20 = 0, $24 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $43 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $80 = 0, $82 = 0, $sext2 = 0, label = 0;
 $3 = $0 + 4612 | 0;
 if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) $$1 = 0; else {
  $6 = ($2 | 0) == 10;
  L3 : do if ($6) {
   $$015 = 0;
   label = 5;
  } else {
   switch ($2 | 0) {
   case 60:
   case 40:
   case 20:
    {
     $$013 = 0;
     break;
    }
   default:
    if (($2 | 0) < 11) {
     $$015 = -103;
     label = 5;
     break L3;
    } else $$013 = -103;
   }
   HEAP32[$0 + 5744 >> 2] = ($2 | 0) / 20 | 0;
   HEAP32[$0 + 4580 >> 2] = 4;
   $24 = $1 << 16 >> 16;
   HEAP32[$0 + 4584 >> 2] = $24 * 20;
   HEAP32[$0 + 4548 >> 2] = $24 * 24;
   $32 = $0 + 4688 | 0;
   if ((HEAP32[$0 + 4576 >> 2] | 0) == 8) {
    HEAP32[$32 >> 2] = 44735;
    $$012 = $$013;
    break;
   } else {
    HEAP32[$32 >> 2] = 25072;
    $$012 = $$013;
    break;
   }
  } while (0);
  do if ((label | 0) == 5) {
   HEAP32[$0 + 5744 >> 2] = 1;
   HEAP32[$0 + 4580 >> 2] = $6 ? 2 : 1;
   $12 = $1 << 16 >> 16;
   HEAP32[$0 + 4584 >> 2] = Math_imul($2 << 16 >> 16, $12) | 0;
   HEAP32[$0 + 4548 >> 2] = $12 * 14;
   $20 = $0 + 4688 | 0;
   if ((HEAP32[$0 + 4576 >> 2] | 0) == 8) {
    HEAP32[$20 >> 2] = 44758;
    $$012 = $$015;
    break;
   } else {
    HEAP32[$20 >> 2] = 44746;
    $$012 = $$015;
    break;
   }
  } while (0);
  HEAP32[$3 >> 2] = $2;
  HEAP32[$0 + 4608 >> 2] = 0;
  $$1 = $$012;
 }
 $34 = ($1 | 0) == 8;
 switch ($1 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(45638, 45379, 241);
 }
 $36 = HEAP32[$0 + 4580 >> 2] | 0;
 switch ($36 | 0) {
 case 4:
 case 2:
  break;
 default:
  _celt_fatal(45700, 45379, 242);
 }
 $37 = $0 + 4576 | 0;
 L24 : do if ((HEAP32[$37 >> 2] | 0) == ($1 | 0)) {
  $80 = HEAP32[$0 + 4588 >> 2] | 0;
  $82 = HEAP32[$0 + 4584 >> 2] | 0;
 } else {
  $40 = $0 + 7168 | 0;
  HEAP32[$40 >> 2] = 0;
  HEAP32[$40 + 4 >> 2] = 0;
  HEAP32[$40 + 8 >> 2] = 0;
  $43 = $0 + 16 | 0;
  HEAP32[$43 >> 2] = 0;
  HEAP32[$43 + 4 >> 2] = 0;
  HEAP32[$0 + 5740 >> 2] = 0;
  HEAP32[$0 + 5748 >> 2] = 0;
  HEAP32[$0 + 4608 >> 2] = 0;
  _memset($0 + 148 | 0, 0, 4384) | 0;
  HEAP32[$0 + 4544 >> 2] = 100;
  HEAP32[$0 + 4664 >> 2] = 1;
  HEAP8[$40 >> 0] = 10;
  HEAP32[$0 + 4476 >> 2] = 100;
  HEAP32[$0 + 4492 >> 2] = 65536;
  HEAP8[$0 + 4541 >> 0] = 0;
  HEAP32[$37 >> 2] = $1;
  $55 = ($36 | 0) == 4;
  $56 = $0 + 4688 | 0;
  L27 : do if ($34) if ($55) {
   HEAP32[$56 >> 2] = 44735;
   label = 26;
   break;
  } else {
   HEAP32[$56 >> 2] = 44758;
   label = 26;
   break;
  } else {
   if ($55) HEAP32[$56 >> 2] = 25072; else HEAP32[$56 >> 2] = 44746;
   switch ($1 | 0) {
   case 8:
   case 12:
    {
     label = 26;
     break L27;
     break;
    }
   default:
    {}
   }
   HEAP32[$0 + 4640 >> 2] = 16;
   HEAP32[$0 + 4692 >> 2] = 39900;
  } while (0);
  if ((label | 0) == 26) {
   HEAP32[$0 + 4640 >> 2] = 10;
   HEAP32[$0 + 4692 >> 2] = 39860;
  }
  $61 = $1 * 5 | 0;
  HEAP32[$0 + 4588 >> 2] = $61;
  $65 = Math_imul($1 * 327680 >> 16, $36 << 16 >> 16) | 0;
  HEAP32[$0 + 4584 >> 2] = $65;
  $sext2 = $1 << 16;
  $67 = $sext2 >> 16;
  HEAP32[$0 + 4592 >> 2] = $67 * 20;
  HEAP32[$0 + 4596 >> 2] = $sext2 >> 15;
  HEAP32[$0 + 4552 >> 2] = $67 * 18;
  HEAP32[$0 + 4548 >> 2] = Math_imul($67, ($36 | 0) == 4 ? 24 : 14) | 0;
  switch ($1 | 0) {
  case 16:
   {
    HEAP32[$0 + 4684 >> 2] = 44720;
    $80 = $61;
    $82 = $65;
    break L24;
    break;
   }
  case 12:
   {
    HEAP32[$0 + 4684 >> 2] = 44714;
    $80 = $61;
    $82 = $65;
    break L24;
    break;
   }
  default:
   {
    HEAP32[$0 + 4684 >> 2] = 44705;
    $80 = $61;
    $82 = $65;
    break L24;
   }
  }
 } while (0);
 if ((Math_imul($80, $36) | 0) == ($82 | 0)) return $$1 | 0; else _celt_fatal(45773, 45379, 302);
 return 0;
}

function _quant_coarse_energy_impl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = +$13;
 $14 = $14 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$idx = 0, $$idx5 = 0, $101 = 0, $15 = 0, $16 = 0, $17 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0.0, $43 = 0.0, $46 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $53 = 0, $56 = 0.0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $70 = 0, $73 = 0, $84 = 0, $87 = 0, $94 = 0.0, $95 = 0, $spec$select10 = 0, $spec$select11 = 0, $spec$select12 = 0, $spec$select14 = 0, $spec$select16 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $15 = sp;
 $16 = sp + 8 | 0;
 $17 = $15;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$17 + 4 >> 2] = 0;
 if (($6 + 3 | 0) <= ($5 | 0)) _ec_enc_bit_logp($9, $12, 3);
 if (!$12) {
  $$0 = +HEAPF32[20768 + ($11 << 2) >> 2];
  $$01 = +HEAPF32[20752 + ($11 << 2) >> 2];
 } else {
  $$0 = .149993896484375;
  $$01 = 0.0;
 }
 $28 = $0 + 8 | 0;
 $$idx = $9 + 20 | 0;
 $$idx5 = $9 + 28 | 0;
 $29 = $10 * 3 | 0;
 $30 = ($14 | 0) == 0;
 $$02 = 0;
 $$04 = $1;
 while (1) {
  if (($$04 | 0) >= ($2 | 0)) break;
  $33 = Math_imul($29, $2 - $$04 | 0) | 0;
  $34 = ($$04 | 0) != ($1 | 0);
  $35 = ($$04 | 0) < 2;
  $36 = ($$04 | 0) < 20;
  $$03 = 0;
  $$1 = $$02;
  do {
   $39 = $$04 + (Math_imul($$03, HEAP32[$28 >> 2] | 0) | 0) | 0;
   $41 = +HEAPF32[$3 + ($39 << 2) >> 2];
   $43 = +HEAPF32[$4 + ($39 << 2) >> 2];
   $46 = $$01 * ($43 < -9.0 ? -9.0 : $43);
   $48 = $15 + ($$03 << 2) | 0;
   $49 = +HEAPF32[$48 >> 2];
   $50 = $41 - $46 - $49;
   $53 = ~~+Math_floor(+($50 + .5));
   $56 = ($43 < -28.0 ? -28.0 : $43) - $13;
   if (($53 | 0) < 0 & $41 < $56) {
    $61 = $53 + ~~($56 - $41) | 0;
    $storemerge = ($61 | 0) < 0 ? $61 : 0;
   } else $storemerge = $53;
   HEAP32[$16 >> 2] = $storemerge;
   $63 = _ec_tell_141(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx5 >> 2] | 0) | 0;
   $64 = $5 - $63 | 0;
   $65 = $64 - $33 | 0;
   if ($34 & ($65 | 0) < 24) {
    $spec$select10 = ($storemerge | 0) < 1 ? $storemerge : 1;
    HEAP32[$16 >> 2] = $spec$select10;
    if (($65 | 0) < 16) {
     $spec$select11 = ($spec$select10 | 0) > -1 ? $spec$select10 : -1;
     HEAP32[$16 >> 2] = $spec$select11;
     $70 = $spec$select11;
    } else $70 = $spec$select10;
   } else $70 = $storemerge;
   if ($30 | $35) $84 = $70; else {
    $spec$select12 = ($70 | 0) < 0 ? $70 : 0;
    HEAP32[$16 >> 2] = $spec$select12;
    $84 = $spec$select12;
   }
   do if (($64 | 0) > 14) {
    $73 = ($36 ? $$04 : 20) << 1;
    _ec_laplace_encode($9, $16, (HEAPU8[$7 + $73 >> 0] | 0) << 7, (HEAPU8[$7 + ($73 | 1) >> 0] | 0) << 6);
    $95 = HEAP32[$16 >> 2] | 0;
   } else {
    if (($64 | 0) > 1) {
     $spec$select16 = ($84 | 0) > -1 ? $84 : -1;
     $87 = ($spec$select16 | 0) < 1 ? $spec$select16 : 1;
     HEAP32[$16 >> 2] = $87;
     _ec_enc_icdf($9, $87 << 1 ^ $87 >> 31, 42394, 2);
     $95 = $87;
     break;
    }
    if (($63 | 0) < ($5 | 0)) {
     $spec$select14 = ($84 | 0) < 0 ? $84 : 0;
     HEAP32[$16 >> 2] = $spec$select14;
     _ec_enc_bit_logp($9, 0 - $spec$select14 | 0, 1);
     $95 = $spec$select14;
     break;
    } else {
     HEAP32[$16 >> 2] = -1;
     $95 = -1;
     break;
    }
   } while (0);
   $94 = +($95 | 0);
   HEAPF32[$8 + ($$04 + (Math_imul($$03, HEAP32[$28 >> 2] | 0) | 0) << 2) >> 2] = $50 - $94;
   $101 = $storemerge - $95 | 0;
   $$1 = $$1 + (($101 | 0) > -1 ? $101 : 0 - $101 | 0) | 0;
   HEAPF32[$4 + ($$04 + (Math_imul($$03, HEAP32[$28 >> 2] | 0) | 0) << 2) >> 2] = $46 + $49 + $94;
   HEAPF32[$48 >> 2] = $49 + $94 - $$0 * $94;
   $$03 = $$03 + 1 | 0;
  } while (($$03 | 0) < ($10 | 0));
  $$02 = $$1;
  $$04 = $$04 + 1 | 0;
 }
 STACKTOP = sp;
 return ($30 ? $$02 : 0) | 0;
}

function _transient_analysis($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0.0, $$01 = 0, $$012 = 0.0, $$02 = 0.0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$09 = 0.0, $$1 = 0, $$110 = 0.0, $$18 = 0, $$2 = 0, $$2$in = 0, $$211 = 0.0, $$3 = 0, $10 = 0.0, $102 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $12 = 0, $14 = 0, $16 = 0, $20 = 0.0, $21 = 0.0, $27 = 0.0, $30 = 0, $32 = 0.0, $36 = 0.0, $38 = 0.0, $41 = 0.0, $46 = 0, $50 = 0.0, $60 = 0.0, $61 = 0.0, $64 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $9 = 0, $93 = 0.0, $97 = 0.0, $spec$select = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
 HEAP32[$6 >> 2] = 0;
 $8 = ($5 | 0) == 0;
 $spec$select = $8 ? .0625 : .03125;
 $9 = ($1 | 0) / 2 | 0;
 $10 = +($9 | 0);
 $11 = +($9 | 0);
 $12 = $9 + -5 | 0;
 $14 = ($9 * 6 | 0) + -102 | 0;
 $$04 = 0;
 $$05 = 0;
 while (1) {
  if (($$04 | 0) >= ($2 | 0)) {
   label = 22;
   break;
  }
  $16 = Math_imul($$04, $1) | 0;
  $$012 = 0.0;
  $$07 = 0;
  $$09 = 0.0;
  while (1) {
   if (($$07 | 0) >= ($1 | 0)) break;
   $20 = +HEAPF32[$0 + ($$07 + $16 << 2) >> 2];
   $21 = $$09 + $20;
   HEAPF32[$7 + ($$07 << 2) >> 2] = $21;
   $27 = $$012 + $21 - $20 * 2.0;
   $$012 = $20 - $21 * .5;
   $$07 = $$07 + 1 | 0;
   $$09 = $27;
  }
  dest = $7;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $$02 = 0.0;
  $$110 = 0.0;
  $$18 = 0;
  while (1) {
   if (($$18 | 0) >= ($9 | 0)) break;
   $30 = $$18 << 1;
   $32 = +HEAPF32[$7 + ($30 << 2) >> 2];
   $36 = +HEAPF32[$7 + (($30 | 1) << 2) >> 2];
   $38 = $32 * $32 + $36 * $36;
   $41 = $$110 + $spec$select * ($38 - $$110);
   HEAPF32[$7 + ($$18 << 2) >> 2] = $41;
   $$02 = $$02 + $38;
   $$110 = $41;
   $$18 = $$18 + 1 | 0;
  }
  $$0 = 0.0;
  $$2$in = $9;
  $$211 = 0.0;
  while (1) {
   $$2 = $$2$in + -1 | 0;
   if (($$2$in | 0) <= 0) break;
   $46 = $7 + ($$2 << 2) | 0;
   $50 = $$211 + (+HEAPF32[$46 >> 2] - $$211) * .125;
   HEAPF32[$46 >> 2] = $50;
   $$0 = $$0 > $50 ? $$0 : $50;
   $$2$in = $$2;
   $$211 = $50;
  }
  $60 = $11 / (+Math_sqrt(+($$02 * $$0 * .5 * $10)) + 1.0000000036274937e-15);
  $61 = +HEAPF32[$7 >> 2];
  if ($61 != $61 | 0.0 != 0.0) {
   label = 13;
   break;
  }
  if ($60 != $60 | 0.0 != 0.0) {
   label = 15;
   break;
  }
  $64 = $60 * 64.0;
  $$01 = 0;
  $$3 = 12;
  while (1) {
   if (($$3 | 0) >= ($12 | 0)) break;
   $70 = +Math_floor(+($64 * (+HEAPF32[$7 + ($$3 << 2) >> 2] + 1.0000000036274937e-15)));
   $71 = $70 > 127.0;
   $72 = $70 < 0.0;
   $$01 = $$01 + (HEAPU8[464 + ~~($72 | $71 ? ($72 & ($71 ^ 1) ? 0.0 : 127.0) : $70) >> 0] | 0) | 0;
   $$3 = $$3 + 4 | 0;
  }
  $82 = ($$01 << 8 | 0) / ($14 | 0) | 0;
  if (($82 | 0) > ($$05 | 0)) {
   HEAP32[$4 >> 2] = $$04;
   $$1 = $82;
  } else $$1 = $$05;
  $$04 = $$04 + 1 | 0;
  $$05 = $$1;
 }
 if ((label | 0) == 13) _celt_fatal(40638, 40501, 369); else if ((label | 0) == 15) _celt_fatal(40676, 40501, 370); else if ((label | 0) == 22) {
  if (($$05 + -201 | 0) >>> 0 < 399 & ($8 ^ 1)) {
   HEAP32[$6 >> 2] = 1;
   $$06 = 0;
  } else $$06 = ($$05 | 0) > 200 & 1;
  $93 = +Math_sqrt(+(+($$05 * 27 | 0))) + -42.0;
  if ($93 < 0.0) {
   $110 = 0.0;
   label = 26;
  } else if ($93 > 163.0) {
   $102 = $93;
   $97 = 163.0;
  } else {
   $110 = $93;
   label = 26;
  }
  if ((label | 0) == 26) {
   $102 = $110;
   $97 = $110;
  }
  if ($97 * .006899999920278788 + -.139 < 0.0) {
   $107 = 0.0;
   $108 = +Math_sqrt(+$107);
   $109 = $108;
   HEAPF32[$3 >> 2] = $109;
   STACKTOP = sp;
   return $$06 | 0;
  }
  $107 = ($102 > 163.0 ? 163.0 : $102) * .006899999920278788 + -.139;
  $108 = +Math_sqrt(+$107);
  $109 = $108;
  HEAPF32[$3 >> 2] = $109;
  STACKTOP = sp;
  return $$06 | 0;
 }
 return 0;
}

function _clt_mdct_forward_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$015 = 0, $$016 = 0, $$019 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$07 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$113 = 0, $$117 = 0, $$16 = 0, $$18 = 0, $$2 = 0, $$211 = 0, $$214 = 0, $$218 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0.0, $109 = 0, $116 = 0, $117 = 0, $120 = 0.0, $123 = 0.0, $125 = 0.0, $127 = 0.0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $29 = 0, $30 = 0, $32 = 0.0, $36 = 0.0, $53 = 0, $54 = 0, $8 = 0, $88 = 0, $91 = 0.0, $94 = 0.0, $96 = 0.0, $97 = 0.0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$0 + 8 + ($5 << 2) >> 2] | 0;
 $10 = +HEAPF32[$8 + 4 >> 2];
 $$012 = 0;
 $$015 = HEAP32[$0 >> 2] | 0;
 $$019 = HEAP32[$0 + 24 >> 2] | 0;
 while (1) {
  $15 = $$015 >> 1;
  if (($$012 | 0) >= ($5 | 0)) break;
  $$012 = $$012 + 1 | 0;
  $$015 = $15;
  $$019 = $$019 + ($15 << 2) | 0;
 }
 $18 = $$015 >> 2;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 3) | 0) + 15 & -16) | 0;
 $21 = $4 >> 1;
 $26 = $3 + ($21 << 2) | 0;
 $29 = $4 + 3 >> 2;
 $30 = 0 - $15 | 0;
 $$016 = $1 + ($21 << 2) | 0;
 $$04 = $26 + -4 | 0;
 $$05 = $26;
 $$07 = $19;
 $$09 = $1 + ($15 << 2) + -4 + ($21 << 2) | 0;
 $$113 = 0;
 while (1) {
  if (($$113 | 0) >= ($29 | 0)) break;
  $32 = +HEAPF32[$$04 >> 2];
  $36 = +HEAPF32[$$05 >> 2];
  HEAPF32[$$07 >> 2] = $32 * +HEAPF32[$$016 + ($15 << 2) >> 2] + $36 * +HEAPF32[$$09 >> 2];
  HEAPF32[$$07 + 4 >> 2] = $36 * +HEAPF32[$$016 >> 2] - $32 * +HEAPF32[$$09 + ($30 << 2) >> 2];
  $$016 = $$016 + 8 | 0;
  $$04 = $$04 + -8 | 0;
  $$05 = $$05 + 8 | 0;
  $$07 = $$07 + 8 | 0;
  $$09 = $$09 + -8 | 0;
  $$113 = $$113 + 1 | 0;
 }
 $53 = $3 + ($4 << 2) | 0;
 $54 = $18 - $29 | 0;
 $$110 = $$09;
 $$117 = $$016;
 $$18 = $$07;
 $$214 = $$113;
 while (1) {
  if (($$214 | 0) >= ($54 | 0)) break;
  HEAP32[$$18 >> 2] = HEAP32[$$110 >> 2];
  HEAP32[$$18 + 4 >> 2] = HEAP32[$$117 >> 2];
  $$110 = $$110 + -8 | 0;
  $$117 = $$117 + 8 | 0;
  $$18 = $$18 + 8 | 0;
  $$214 = $$214 + 1 | 0;
 }
 $$1 = $53 + -4 | 0;
 $$16 = $3;
 $$2 = $$18;
 $$211 = $$110;
 $$218 = $$117;
 $$3 = $$214;
 while (1) {
  if (($$3 | 0) >= ($18 | 0)) break;
  HEAPF32[$$2 >> 2] = +HEAPF32[$$1 >> 2] * +HEAPF32[$$211 >> 2] - +HEAPF32[$$16 >> 2] * +HEAPF32[$$218 + ($30 << 2) >> 2];
  HEAPF32[$$2 + 4 >> 2] = +HEAPF32[$$1 >> 2] * +HEAPF32[$$218 >> 2] + +HEAPF32[$$16 >> 2] * +HEAPF32[$$211 + ($15 << 2) >> 2];
  $$1 = $$1 + -8 | 0;
  $$16 = $$16 + 8 | 0;
  $$2 = $$2 + 8 | 0;
  $$211 = $$211 + -8 | 0;
  $$218 = $$218 + 8 | 0;
  $$3 = $$3 + 1 | 0;
 }
 $88 = $8 + 44 | 0;
 $$03 = $19;
 $$4 = 0;
 while (1) {
  if (($$4 | 0) >= ($18 | 0)) break;
  $91 = +HEAPF32[$$019 + ($$4 << 2) >> 2];
  $94 = +HEAPF32[$$019 + ($18 + $$4 << 2) >> 2];
  $96 = +HEAPF32[$$03 >> 2];
  $97 = +HEAPF32[$$03 + 4 >> 2];
  $109 = HEAP16[(HEAP32[$88 >> 2] | 0) + ($$4 << 1) >> 1] | 0;
  HEAPF32[$20 + ($109 << 3) >> 2] = $10 * ($96 * $91 - $97 * $94);
  HEAPF32[$20 + ($109 << 3) + 4 >> 2] = $10 * ($97 * $91 + $96 * $94);
  $$03 = $$03 + 8 | 0;
  $$4 = $$4 + 1 | 0;
 }
 _opus_fft_impl($8, $20);
 $116 = $6 << 1;
 $117 = 0 - $116 | 0;
 $$0 = $2 + ((Math_imul($15 + -1 | 0, $6) | 0) << 2) | 0;
 $$01 = $2;
 $$02 = $20;
 $$5 = 0;
 while (1) {
  if (($$5 | 0) >= ($18 | 0)) break;
  $120 = +HEAPF32[$$02 + 4 >> 2];
  $123 = +HEAPF32[$$019 + ($18 + $$5 << 2) >> 2];
  $125 = +HEAPF32[$$02 >> 2];
  $127 = +HEAPF32[$$019 + ($$5 << 2) >> 2];
  HEAPF32[$$01 >> 2] = $120 * $123 - $125 * $127;
  HEAPF32[$$0 >> 2] = $125 * $123 + $120 * $127;
  $$0 = $$0 + ($117 << 2) | 0;
  $$01 = $$01 + ($116 << 2) | 0;
  $$02 = $$02 + 8 | 0;
  $$5 = $$5 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _cwrsi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0.0, $$02 = 0, $$06 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$2 = 0, $$213 = 0.0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$6 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $24 = 0, $31 = 0, $34 = 0.0, $40 = 0, $45 = 0, $50 = 0, $52 = 0, $57 = 0, $62 = 0, $65 = 0.0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $sext = 0, $sext14 = 0;
 if (($1 | 0) <= 0) _celt_fatal(41688, 41711, 469);
 if (($0 | 0) <= 1) _celt_fatal(41747, 41711, 470);
 $$0 = $0;
 $$01 = $1;
 $$011 = 0.0;
 $$02 = $2;
 $$06 = $3;
 while (1) {
  if (($$0 | 0) <= 2) break;
  do if (($$01 | 0) < ($$0 | 0)) {
   $40 = HEAP32[(HEAP32[592 + ($$01 << 2) >> 2] | 0) + ($$0 << 2) >> 2] | 0;
   $45 = HEAP32[(HEAP32[592 + ($$01 + 1 << 2) >> 2] | 0) + ($$0 << 2) >> 2] | 0;
   if ($$02 >>> 0 >= $40 >>> 0 & $$02 >>> 0 < $45 >>> 0) {
    HEAP32[$$06 >> 2] = 0;
    $$213 = $$011;
    $$24 = $$02 - $40 | 0;
    $$6 = $$01;
    break;
   }
   $50 = ($$02 >>> 0 >= $45 >>> 0) << 31 >> 31;
   $52 = $$02 - ($45 & $50) | 0;
   $$4 = $$01;
   do {
    $$4 = $$4 + -1 | 0;
    $57 = HEAP32[(HEAP32[592 + ($$4 << 2) >> 2] | 0) + ($$0 << 2) >> 2] | 0;
   } while ($52 >>> 0 < $57 >>> 0);
   $62 = $$01 - $$4 + $50 ^ $50;
   HEAP32[$$06 >> 2] = $62 << 16 >> 16;
   $65 = +(($62 & 65535) << 16 >> 16);
   $$213 = $$011 + $65 * $65;
   $$24 = $52 - $57 | 0;
   $$6 = $$4;
  } else {
   $9 = HEAP32[592 + ($$0 << 2) >> 2] | 0;
   $12 = HEAP32[$9 + ($$01 + 1 << 2) >> 2] | 0;
   $14 = ($$02 >>> 0 >= $12 >>> 0) << 31 >> 31;
   $16 = $$02 - ($12 & $14) | 0;
   L19 : do if ((HEAP32[$9 + ($$0 << 2) >> 2] | 0) >>> 0 > $16 >>> 0) {
    $$1 = $$0;
    while (1) {
     $20 = $$1 + -1 | 0;
     $24 = HEAP32[(HEAP32[592 + ($20 << 2) >> 2] | 0) + ($$0 << 2) >> 2] | 0;
     if ($24 >>> 0 > $16 >>> 0) $$1 = $20; else {
      $$110 = $24;
      $$3 = $20;
      break;
     }
    }
   } else {
    $$2 = $$01;
    while (1) {
     $$09 = HEAP32[$9 + ($$2 << 2) >> 2] | 0;
     if ($$09 >>> 0 <= $16 >>> 0) {
      $$110 = $$09;
      $$3 = $$2;
      break L19;
     }
     $$2 = $$2 + -1 | 0;
    }
   } while (0);
   $31 = $$01 - $$3 + $14 ^ $14;
   HEAP32[$$06 >> 2] = $31 << 16 >> 16;
   $34 = +(($31 & 65535) << 16 >> 16);
   $$213 = $$011 + $34 * $34;
   $$24 = $16 - $$110 | 0;
   $$6 = $$3;
  } while (0);
  $$0 = $$0 + -1 | 0;
  $$01 = $$6;
  $$011 = $$213;
  $$02 = $$24;
  $$06 = $$06 + 4 | 0;
 }
 $70 = $$01 << 1 | 1;
 $72 = ($$02 >>> 0 >= $70 >>> 0) << 31 >> 31;
 $74 = $$02 - ($70 & $72) | 0;
 $75 = $74 + 1 | 0;
 $76 = $75 >>> 1;
 if (!$76) {
  $$35 = $74;
  $81 = $$01 - $76 | 0;
  $82 = $81 + $72 | 0;
  $83 = $82 ^ $72;
  $84 = $83 & 65535;
  $sext = $83 << 16;
  $85 = $sext >> 16;
  $86 = $$06 + 4 | 0;
  HEAP32[$$06 >> 2] = $85;
  $87 = +($84 << 16 >> 16);
  $88 = $87 * $87;
  $89 = $$011 + $88;
  $90 = 0 - $$35 | 0;
  $91 = $76 - $$35 | 0;
  $92 = $91 ^ $90;
  $93 = $92 & 65535;
  $sext14 = $92 << 16;
  $94 = $sext14 >> 16;
  HEAP32[$86 >> 2] = $94;
  $95 = +($93 << 16 >> 16);
  $96 = $95 * $95;
  $97 = $89 + $96;
  return +$97;
 }
 $$35 = $74 - (($75 & -2) + -1) | 0;
 $81 = $$01 - $76 | 0;
 $82 = $81 + $72 | 0;
 $83 = $82 ^ $72;
 $84 = $83 & 65535;
 $sext = $83 << 16;
 $85 = $sext >> 16;
 $86 = $$06 + 4 | 0;
 HEAP32[$$06 >> 2] = $85;
 $87 = +($84 << 16 >> 16);
 $88 = $87 * $87;
 $89 = $$011 + $88;
 $90 = 0 - $$35 | 0;
 $91 = $76 - $$35 | 0;
 $92 = $91 ^ $90;
 $93 = $92 & 65535;
 $sext14 = $92 << 16;
 $94 = $sext14 >> 16;
 HEAP32[$86 >> 2] = $94;
 $95 = +($93 << 16 >> 16);
 $96 = $95 * $95;
 $97 = $89 + $96;
 return +$97;
}

function _kf_bfly4($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$16 = 0, $10 = 0.0, $100 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $33 = 0.0, $34 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $55 = 0, $56 = 0.0, $58 = 0.0, $60 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $68 = 0, $69 = 0.0, $71 = 0.0, $73 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $81 = 0, $82 = 0.0, $84 = 0.0, $86 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 if (($3 | 0) == 1) {
  $$0 = $0;
  $$05 = 0;
  while (1) {
   if (($$05 | 0) >= ($4 | 0)) break;
   $8 = +HEAPF32[$$0 >> 2];
   $9 = $$0 + 16 | 0;
   $10 = +HEAPF32[$9 >> 2];
   $11 = $8 - $10;
   $12 = $$0 + 4 | 0;
   $13 = +HEAPF32[$12 >> 2];
   $14 = $$0 + 20 | 0;
   $15 = +HEAPF32[$14 >> 2];
   $16 = $13 - $15;
   $17 = $8 + $10;
   $18 = $13 + $15;
   $19 = $$0 + 8 | 0;
   $20 = +HEAPF32[$19 >> 2];
   $21 = $$0 + 24 | 0;
   $22 = +HEAPF32[$21 >> 2];
   $23 = $20 + $22;
   $24 = $$0 + 12 | 0;
   $25 = +HEAPF32[$24 >> 2];
   $26 = $$0 + 28 | 0;
   $27 = +HEAPF32[$26 >> 2];
   $28 = $25 + $27;
   HEAPF32[$9 >> 2] = $17 - $23;
   HEAPF32[$14 >> 2] = $18 - $28;
   HEAPF32[$$0 >> 2] = $17 + $23;
   HEAPF32[$12 >> 2] = $18 + $28;
   $33 = $20 - $22;
   $34 = $25 - $27;
   HEAPF32[$19 >> 2] = $11 + $34;
   HEAPF32[$24 >> 2] = $16 - $33;
   HEAPF32[$21 >> 2] = $11 - $34;
   HEAPF32[$26 >> 2] = $16 + $33;
   $$0 = $$0 + 32 | 0;
   $$05 = $$05 + 1 | 0;
  }
  return;
 }
 $41 = $3 << 1;
 $42 = $3 * 3 | 0;
 $43 = $2 + 48 | 0;
 $44 = $1 << 1;
 $45 = $1 * 3 | 0;
 $$16 = 0;
 while (1) {
  if (($$16 | 0) >= ($4 | 0)) break;
  $48 = $0 + ((Math_imul($$16, $5) | 0) << 3) | 0;
  $49 = HEAP32[$43 >> 2] | 0;
  $$01 = $49;
  $$02 = $49;
  $$03 = $49;
  $$04 = 0;
  $$1 = $48;
  while (1) {
   if (($$04 | 0) >= ($3 | 0)) break;
   $51 = $$1 + ($3 << 3) | 0;
   $52 = +HEAPF32[$51 >> 2];
   $53 = +HEAPF32[$$03 >> 2];
   $55 = $$1 + ($3 << 3) + 4 | 0;
   $56 = +HEAPF32[$55 >> 2];
   $58 = +HEAPF32[$$03 + 4 >> 2];
   $60 = $52 * $53 - $56 * $58;
   $63 = $52 * $58 + $56 * $53;
   $64 = $$1 + ($41 << 3) | 0;
   $65 = +HEAPF32[$64 >> 2];
   $66 = +HEAPF32[$$02 >> 2];
   $68 = $$1 + ($41 << 3) + 4 | 0;
   $69 = +HEAPF32[$68 >> 2];
   $71 = +HEAPF32[$$02 + 4 >> 2];
   $73 = $65 * $66 - $69 * $71;
   $76 = $65 * $71 + $69 * $66;
   $77 = $$1 + ($42 << 3) | 0;
   $78 = +HEAPF32[$77 >> 2];
   $79 = +HEAPF32[$$01 >> 2];
   $81 = $$1 + ($42 << 3) + 4 | 0;
   $82 = +HEAPF32[$81 >> 2];
   $84 = +HEAPF32[$$01 + 4 >> 2];
   $86 = $78 * $79 - $82 * $84;
   $89 = $78 * $84 + $82 * $79;
   $90 = +HEAPF32[$$1 >> 2];
   $91 = $90 - $73;
   $92 = $$1 + 4 | 0;
   $93 = +HEAPF32[$92 >> 2];
   $94 = $93 - $76;
   $95 = $90 + $73;
   HEAPF32[$$1 >> 2] = $95;
   $96 = $93 + $76;
   HEAPF32[$92 >> 2] = $96;
   $97 = $60 + $86;
   $98 = $63 + $89;
   $99 = $60 - $86;
   $100 = $63 - $89;
   HEAPF32[$64 >> 2] = $95 - $97;
   HEAPF32[$68 >> 2] = $96 - $98;
   HEAPF32[$$1 >> 2] = +HEAPF32[$$1 >> 2] + $97;
   HEAPF32[$92 >> 2] = +HEAPF32[$92 >> 2] + $98;
   HEAPF32[$51 >> 2] = $91 + $100;
   HEAPF32[$55 >> 2] = $94 - $99;
   HEAPF32[$77 >> 2] = $91 - $100;
   HEAPF32[$81 >> 2] = $94 + $99;
   $$01 = $$01 + ($45 << 3) | 0;
   $$02 = $$02 + ($44 << 3) | 0;
   $$03 = $$03 + ($1 << 3) | 0;
   $$04 = $$04 + 1 | 0;
   $$1 = $$1 + 8 | 0;
  }
  $$16 = $$16 + 1 | 0;
 }
 return;
}

function _kf_bfly5($0, $1, $$0$5$val, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $$0$5$val = $$0$5$val | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$sroa_idx25 = 0, $10 = 0, $101 = 0.0, $105 = 0.0, $108 = 0.0, $111 = 0.0, $119 = 0.0, $12 = 0.0, $123 = 0.0, $126 = 0.0, $129 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $30 = 0.0, $32 = 0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $40 = 0.0, $41 = 0.0, $43 = 0, $45 = 0.0, $47 = 0, $48 = 0.0, $5 = 0, $50 = 0.0, $52 = 0.0, $55 = 0.0, $56 = 0.0, $58 = 0, $60 = 0.0, $62 = 0, $63 = 0.0, $65 = 0.0, $67 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $73 = 0, $75 = 0.0, $77 = 0, $78 = 0.0, $8 = 0.0, $80 = 0.0, $82 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 $5 = Math_imul($1, $2) | 0;
 $7 = +HEAPF32[$$0$5$val + ($5 << 3) >> 2];
 $8 = +HEAPF32[$$0$5$val + ($5 << 3) + 4 >> 2];
 $10 = Math_imul($1 << 1, $2) | 0;
 $12 = +HEAPF32[$$0$5$val + ($10 << 3) >> 2];
 $13 = +HEAPF32[$$0$5$val + ($10 << 3) + 4 >> 2];
 $14 = $2 << 1;
 $15 = $2 * 3 | 0;
 $16 = $2 << 2;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $19 = $0 + ((Math_imul($$01, $4) | 0) << 3) | 0;
  $$0 = 0;
  $$02 = $19 + ($16 << 3) | 0;
  $$03 = $19 + ($15 << 3) | 0;
  $$04 = $19 + ($14 << 3) | 0;
  $$05 = $19;
  $$06 = $19 + ($2 << 3) | 0;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) break;
   $25 = +HEAPF32[$$05 >> 2];
   $$sroa_idx25 = $$05 + 4 | 0;
   $26 = +HEAPF32[$$sroa_idx25 >> 2];
   $27 = +HEAPF32[$$06 >> 2];
   $28 = Math_imul($$0, $1) | 0;
   $30 = +HEAPF32[$$0$5$val + ($28 << 3) >> 2];
   $32 = $$06 + 4 | 0;
   $33 = +HEAPF32[$32 >> 2];
   $35 = +HEAPF32[$$0$5$val + ($28 << 3) + 4 >> 2];
   $37 = $27 * $30 - $33 * $35;
   $40 = $27 * $35 + $33 * $30;
   $41 = +HEAPF32[$$04 >> 2];
   $43 = Math_imul($$0 << 1, $1) | 0;
   $45 = +HEAPF32[$$0$5$val + ($43 << 3) >> 2];
   $47 = $$04 + 4 | 0;
   $48 = +HEAPF32[$47 >> 2];
   $50 = +HEAPF32[$$0$5$val + ($43 << 3) + 4 >> 2];
   $52 = $41 * $45 - $48 * $50;
   $55 = $41 * $50 + $48 * $45;
   $56 = +HEAPF32[$$03 >> 2];
   $58 = Math_imul($$0 * 3 | 0, $1) | 0;
   $60 = +HEAPF32[$$0$5$val + ($58 << 3) >> 2];
   $62 = $$03 + 4 | 0;
   $63 = +HEAPF32[$62 >> 2];
   $65 = +HEAPF32[$$0$5$val + ($58 << 3) + 4 >> 2];
   $67 = $56 * $60 - $63 * $65;
   $70 = $56 * $65 + $63 * $60;
   $71 = +HEAPF32[$$02 >> 2];
   $73 = Math_imul($$0 << 2, $1) | 0;
   $75 = +HEAPF32[$$0$5$val + ($73 << 3) >> 2];
   $77 = $$02 + 4 | 0;
   $78 = +HEAPF32[$77 >> 2];
   $80 = +HEAPF32[$$0$5$val + ($73 << 3) + 4 >> 2];
   $82 = $71 * $75 - $78 * $80;
   $85 = $71 * $80 + $78 * $75;
   $86 = $37 + $82;
   $87 = $40 + $85;
   $88 = $37 - $82;
   $89 = $40 - $85;
   $90 = $52 + $67;
   $91 = $55 + $70;
   $92 = $52 - $67;
   $93 = $55 - $70;
   HEAPF32[$$05 >> 2] = $25 + ($86 + $90);
   HEAPF32[$$sroa_idx25 >> 2] = $26 + ($87 + $91);
   $101 = $25 + ($86 * $7 + $90 * $12);
   $105 = $26 + ($87 * $7 + $91 * $12);
   $108 = $89 * $8 + $93 * $13;
   $111 = $88 * $8 + $92 * $13;
   HEAPF32[$$06 >> 2] = $101 - $108;
   HEAPF32[$32 >> 2] = $105 + $111;
   HEAPF32[$$02 >> 2] = $101 + $108;
   HEAPF32[$77 >> 2] = $105 - $111;
   $119 = $25 + ($86 * $12 + $90 * $7);
   $123 = $26 + ($87 * $12 + $91 * $7);
   $126 = $93 * $8 - $89 * $13;
   $129 = $88 * $13 - $92 * $8;
   HEAPF32[$$04 >> 2] = $119 + $126;
   HEAPF32[$47 >> 2] = $123 + $129;
   HEAPF32[$$03 >> 2] = $119 - $126;
   HEAPF32[$62 >> 2] = $123 - $129;
   $$0 = $$0 + 1 | 0;
   $$02 = $$02 + 8 | 0;
   $$03 = $$03 + 8 | 0;
   $$04 = $$04 + 8 | 0;
   $$05 = $$05 + 8 | 0;
   $$06 = $$06 + 8 | 0;
  }
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _opus_encoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $32 = 0, $4 = 0, $47 = 0, $54 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $4 = sp + 12 | 0;
 L1 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) {
  switch ($1 | 0) {
  case 8e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  switch ($1 | 0) {
  case 12e3:
   {
    break L1;
    break;
   }
  default:
   $$0 = -1;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  if (($1 | 0) < 24e3) {
   switch ($1 | 0) {
   case 16e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($1 | 0) < 48e3) {
   switch ($1 | 0) {
   case 24e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   switch ($1 | 0) {
   case 48e3:
    {
     break L1;
     break;
    }
   default:
    $$0 = -1;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($2 + -1 | 0) >>> 0 >= 2) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 switch ($3 | 0) {
 case 2051:
 case 2049:
 case 2048:
  break;
 default:
  {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 _memset($0 | 0, 0, _opus_encoder_get_size($2) | 0) | 0;
 if (_silk_Get_Encoder_Size($4) | 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = _align_662(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = $9;
 $10 = _align_662(18136) | 0;
 HEAP32[$0 + 4 >> 2] = $10;
 $12 = $10 + $9 | 0;
 HEAP32[$0 >> 2] = $12;
 $14 = $0 + $12 | 0;
 HEAP32[$0 + 112 >> 2] = $2;
 HEAP32[$0 + 14188 >> 2] = $2;
 $17 = $0 + 144 | 0;
 HEAP32[$17 >> 2] = $1;
 $18 = $0 + 180 | 0;
 HEAP32[$18 >> 2] = 0;
 if (_silk_InitEncoder($0 + $10 | 0, 0, $0 + 8 | 0) | 0) {
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$0 + 20 >> 2] = 16e3;
 HEAP32[$0 + 24 >> 2] = 8e3;
 HEAP32[$0 + 28 >> 2] = 16e3;
 HEAP32[$0 + 32 >> 2] = 20;
 HEAP32[$0 + 36 >> 2] = 25e3;
 HEAP32[$0 + 40 >> 2] = 0;
 $32 = $0 + 44 | 0;
 HEAP32[$32 >> 2] = 9;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 if (_celt_encoder_init($14, $1, $2, HEAP32[$18 >> 2] | 0) | 0) {
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 0;
 _opus_custom_encoder_ctl($14, 10016, $vararg_buffer) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$32 >> 2];
 _opus_custom_encoder_ctl($14, 4010, $vararg_buffer1) | 0;
 HEAP32[$0 + 148 >> 2] = 1;
 HEAP32[$0 + 152 >> 2] = 1;
 HEAP32[$0 + 164 >> 2] = -1e3;
 HEAP32[$0 + 160 >> 2] = (Math_imul($1, $2) | 0) + 3e3;
 $47 = $0 + 108 | 0;
 HEAP32[$47 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = -1e3;
 HEAP32[$0 + 128 >> 2] = -1e3;
 HEAP32[$0 + 132 >> 2] = 1105;
 HEAP32[$0 + 120 >> 2] = -1e3;
 HEAP32[$0 + 136 >> 2] = -1e3;
 HEAP32[$0 + 140 >> 2] = -1;
 $54 = HEAP32[$17 >> 2] | 0;
 HEAP32[$0 + 172 >> 2] = ($54 | 0) / 100 | 0;
 HEAP32[$0 + 168 >> 2] = 24;
 HEAP32[$0 + 156 >> 2] = 5e3;
 HEAP32[$0 + 116 >> 2] = ($54 | 0) / 250 | 0;
 HEAP16[$0 + 14192 >> 1] = 16384;
 HEAPF32[$0 + 14200 >> 2] = 1.0;
 HEAP32[$0 + 14196 >> 2] = (_silk_lin2log(60) | 0) << 8;
 HEAP32[$0 + 14248 >> 2] = 1;
 HEAP32[$0 + 14220 >> 2] = 1001;
 HEAP32[$0 + 14236 >> 2] = 1105;
 _tonality_analysis_init($0 + 188 | 0, HEAP32[$17 >> 2] | 0);
 HEAP32[$0 + 192 >> 2] = HEAP32[$47 >> 2];
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_NLSF_stabilize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$02 = 0, $$03 = 0, $$06 = 0, $$09 = 0, $$110 = 0, $$14 = 0, $$25 = 0, $100 = 0, $105 = 0, $113 = 0, $117 = 0, $121 = 0, $127 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $30 = 0, $31 = 0, $4 = 0, $45 = 0, $48 = 0, $5 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $7 = 0, $71 = 0, $76 = 0, $77 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $spec$select = 0, $spec$select21 = 0, $spec$select25 = 0, label = 0;
 $4 = $0 + ($2 + -1 << 1) | 0;
 $5 = $1 + ($2 << 1) | 0;
 $$011 = 0;
 while (1) {
  if ($$011 >>> 0 >= 20) break;
  $7 = HEAP16[$0 >> 1] | 0;
  $9 = HEAP16[$1 >> 1] | 0;
  $$02 = ($7 << 16 >> 16) - ($9 << 16 >> 16) | 0;
  $$03 = 1;
  $$06 = 0;
  $17 = $7;
  while (1) {
   if (($$03 | 0) >= ($2 | 0)) break;
   $14 = HEAP16[$0 + ($$03 << 1) >> 1] | 0;
   $22 = ($14 << 16 >> 16) - (($17 << 16 >> 16) + (HEAP16[$1 + ($$03 << 1) >> 1] | 0)) | 0;
   $23 = ($22 | 0) < ($$02 | 0);
   $spec$select = $23 ? $$03 : $$06;
   $$02 = $23 ? $22 : $$02;
   $$03 = $$03 + 1 | 0;
   $$06 = $spec$select;
   $17 = $14;
  }
  $30 = 32768 - ((HEAP16[$4 >> 1] | 0) + (HEAP16[$5 >> 1] | 0)) | 0;
  $31 = ($30 | 0) < ($$02 | 0);
  $spec$select21 = $31 ? $2 : $$06;
  if ((($31 ? $30 : $$02) | 0) > -1) {
   label = 31;
   break;
  }
  do if (!$spec$select21) HEAP16[$0 >> 1] = $9; else {
   if (($spec$select21 | 0) == ($2 | 0)) {
    HEAP16[$4 >> 1] = 32768 - (HEAPU16[$5 >> 1] | 0);
    break;
   }
   $$01 = 0;
   $$09 = 0;
   while (1) {
    if (($$09 | 0) >= ($spec$select21 | 0)) break;
    $$01 = $$01 + (HEAP16[$1 + ($$09 << 1) >> 1] | 0) | 0;
    $$09 = $$09 + 1 | 0;
   }
   $45 = $1 + ($spec$select21 << 1) | 0;
   $48 = HEAP16[$45 >> 1] >> 1;
   $$0 = 32768;
   $$110 = $2;
   while (1) {
    if (($$110 | 0) <= ($spec$select21 | 0)) break;
    $$0 = $$0 - (HEAP16[$1 + ($$110 << 1) >> 1] | 0) | 0;
    $$110 = $$110 + -1 | 0;
   }
   $55 = $$01 + $48 | 0;
   $56 = $$0 - $48 | 0;
   $59 = $0 + ($spec$select21 + -1 << 1) | 0;
   $60 = HEAP16[$59 >> 1] | 0;
   $62 = $0 + ($spec$select21 << 1) | 0;
   $63 = HEAP16[$62 >> 1] | 0;
   $71 = (($60 << 16 >> 16) + ($63 << 16 >> 16) >> 1) + (($60 & 65535) + ($63 & 65535) & 1) | 0;
   if (($55 | 0) > ($56 | 0)) if (($71 | 0) > ($55 | 0)) $77 = $55; else $77 = ($71 | 0) < ($56 | 0) ? $56 : $71; else if (($71 | 0) > ($56 | 0)) $77 = $56; else $77 = ($71 | 0) < ($55 | 0) ? $55 : $71;
   $76 = $77 - $48 | 0;
   HEAP16[$59 >> 1] = $76;
   HEAP16[$62 >> 1] = $76 + (HEAPU16[$45 >> 1] | 0);
  } while (0);
  $$011 = $$011 + 1 | 0;
 }
 if ((label | 0) == 31) return;
 if (($$011 | 0) != 20) return;
 _silk_insertion_sort_increasing_all_values_int16($0, $2);
 $89 = _silk_max_int_444(HEAP16[$0 >> 1] | 0, HEAP16[$1 >> 1] | 0) | 0;
 HEAP16[$0 >> 1] = $89;
 $$14 = 1;
 $95 = $89;
 while (1) {
  if (($$14 | 0) >= ($2 | 0)) break;
  $92 = $0 + ($$14 << 1) | 0;
  $100 = ($95 << 16 >> 16) + (HEAP16[$1 + ($$14 << 1) >> 1] | 0) | 0;
  $spec$select25 = ($100 | 0) > -32768 ? $100 : -32768;
  $105 = _silk_max_int_444(HEAP16[$92 >> 1] | 0, (($spec$select25 | 0) < 32767 ? $spec$select25 : 32767) << 16 >> 16) | 0;
  HEAP16[$92 >> 1] = $105;
  $$14 = $$14 + 1 | 0;
  $95 = $105;
 }
 $113 = _silk_min_int_445(HEAP16[$4 >> 1] | 0, 32768 - (HEAP16[$5 >> 1] | 0) | 0) | 0;
 HEAP16[$4 >> 1] = $113;
 $$25 = $2 + -2 | 0;
 $121 = $113;
 while (1) {
  if (($$25 | 0) <= -1) break;
  $117 = $0 + ($$25 << 1) | 0;
  $127 = _silk_min_int_445(HEAP16[$117 >> 1] | 0, ($121 << 16 >> 16) - (HEAP16[$1 + ($$25 + 1 << 1) >> 1] | 0) | 0) | 0;
  HEAP16[$117 >> 1] = $127;
  $$25 = $$25 + -1 | 0;
  $121 = $127;
 }
 return;
}

function _silk_stereo_MS_to_LR($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $11 = 0, $12 = 0, $123 = 0, $13 = 0, $130 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $30 = 0, $38 = 0, $40 = 0, $41 = 0, $50 = 0, $53 = 0, $55 = 0, $57 = 0, $6 = 0, $62 = 0, $7 = 0, $70 = 0, $77 = 0, $8 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $98 = 0, $spec$select = 0, $spec$select14 = 0;
 $6 = $0 + 4 | 0;
 $7 = HEAPU16[$6 >> 1] | HEAPU16[$6 + 2 >> 1] << 16;
 HEAP16[$1 >> 1] = $7;
 HEAP16[$1 + 2 >> 1] = $7 >>> 16;
 $8 = $0 + 8 | 0;
 $9 = HEAPU16[$8 >> 1] | HEAPU16[$8 + 2 >> 1] << 16;
 HEAP16[$2 >> 1] = $9;
 HEAP16[$2 + 2 >> 1] = $9 >>> 16;
 $10 = $1 + ($5 << 1) | 0;
 $11 = HEAPU16[$10 >> 1] | HEAPU16[$10 + 2 >> 1] << 16;
 HEAP16[$6 >> 1] = $11;
 HEAP16[$6 + 2 >> 1] = $11 >>> 16;
 $12 = $2 + ($5 << 1) | 0;
 $13 = HEAPU16[$12 >> 1] | HEAPU16[$12 + 2 >> 1] << 16;
 HEAP16[$8 >> 1] = $13;
 HEAP16[$8 + 2 >> 1] = $13 >>> 16;
 $14 = HEAP16[$0 >> 1] | 0;
 $16 = $0 + 2 | 0;
 $17 = HEAP16[$16 >> 1] | 0;
 $19 = $4 << 3;
 $25 = (65536 / ($19 | 0) | 0) << 16 >> 16;
 $29 = ((Math_imul((HEAP32[$3 >> 2] | 0) - ($14 & 65535) << 16 >> 16, $25) | 0) >> 15) + 1 >> 1;
 $30 = $3 + 4 | 0;
 $38 = ((Math_imul((HEAP32[$30 >> 2] | 0) - ($17 & 65535) << 16 >> 16, $25) | 0) >> 15) + 1 >> 1;
 $$0 = $17 << 16 >> 16;
 $$01 = $14 << 16 >> 16;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($19 | 0)) break;
  $40 = $$01 + $29 | 0;
  $41 = $$0 + $38 | 0;
  $50 = $$02 + 1 | 0;
  $53 = HEAP16[$1 + ($50 << 1) >> 1] | 0;
  $55 = (HEAP16[$1 + ($$02 << 1) >> 1] | 0) + (HEAP16[$1 + ($$02 + 2 << 1) >> 1] | 0) + ($53 << 1) | 0;
  $57 = $2 + ($50 << 1) | 0;
  $62 = $40 << 16 >> 16;
  $70 = $41 << 16 >> 16;
  $77 = (HEAP16[$57 >> 1] << 8) + ((Math_imul($55 >> 7, $62) | 0) + ((Math_imul($55 << 9 & 65024, $62) | 0) >> 16)) + ((Math_imul($53 >> 5, $70) | 0) + ((Math_imul($53 << 11 & 63488, $70) | 0) >> 16)) | 0;
  if (($77 | 0) > 8388479) $84 = 32767; else if (($77 | 0) < -8388736) $84 = -32768; else $84 = ($77 >> 7) + 1 >> 1;
  HEAP16[$57 >> 1] = $84;
  $$0 = $41;
  $$01 = $40;
  $$02 = $50;
 }
 $87 = HEAP32[$3 >> 2] << 16 >> 16;
 $88 = HEAP32[$30 >> 2] << 16 >> 16;
 $$1 = $19;
 while (1) {
  if (($$1 | 0) >= ($5 | 0)) break;
  $98 = $$1 + 1 | 0;
  $101 = HEAP16[$1 + ($98 << 1) >> 1] | 0;
  $103 = (HEAP16[$1 + ($$1 << 1) >> 1] | 0) + (HEAP16[$1 + ($$1 + 2 << 1) >> 1] | 0) + ($101 << 1) | 0;
  $105 = $2 + ($98 << 1) | 0;
  $123 = (HEAP16[$105 >> 1] << 8) + ((Math_imul($103 >> 7, $87) | 0) + ((Math_imul($103 << 9 & 65024, $87) | 0) >> 16)) + ((Math_imul($101 >> 5, $88) | 0) + ((Math_imul($101 << 11 & 63488, $88) | 0) >> 16)) | 0;
  if (($123 | 0) > 8388479) $130 = 32767; else if (($123 | 0) < -8388736) $130 = -32768; else $130 = ($123 >> 7) + 1 >> 1;
  HEAP16[$105 >> 1] = $130;
  $$1 = $98;
 }
 HEAP16[$0 >> 1] = HEAP32[$3 >> 2];
 HEAP16[$16 >> 1] = HEAP32[$30 >> 2];
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($5 | 0)) break;
  $136 = $$2 + 1 | 0;
  $137 = $1 + ($136 << 1) | 0;
  $139 = HEAP16[$137 >> 1] | 0;
  $140 = $2 + ($136 << 1) | 0;
  $142 = HEAP16[$140 >> 1] | 0;
  $143 = $139 + $142 | 0;
  $144 = $139 - $142 | 0;
  $spec$select = ($143 | 0) > -32768 ? $143 : -32768;
  HEAP16[$137 >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
  $spec$select14 = ($144 | 0) > -32768 ? $144 : -32768;
  HEAP16[$140 >> 1] = ($spec$select14 | 0) < 32767 ? $spec$select14 : 32767;
  $$2 = $136;
 }
 return;
}

function _celt_synthesis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$06 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$idx = 0, $$idx1$val = 0, $$idx4 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $37 = 0, $44 = 0, $50 = 0, $54 = 0, $62 = 0, $63 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $77 = 0, $82 = 0, $85 = 0, sp = 0;
 sp = STACKTOP;
 $13 = HEAP32[$0 + 4 >> 2] | 0;
 $15 = HEAP32[$0 + 8 >> 2] | 0;
 $16 = $0 + 44 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $17 << $9;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($18 << 2) | 0) + 15 & -16) | 0;
 $20 = 1 << $9;
 $21 = ($8 | 0) == 0;
 $$02 = $21 ? 1 : $20;
 $$01 = $21 ? $18 : $17;
 $$0 = (HEAP32[$0 + 36 >> 2] | 0) - ($21 ? $9 : 0) | 0;
 switch ($7 | 0) {
 case 2:
  {
   if (($6 | 0) == 1) {
    _denormalise_bands(HEAP32[$0 + 32 >> 2] | 0, $17, $1, $19, $3, $4, $5, $20, $10, $11);
    $26 = $2 + 4 | 0;
    $29 = (HEAP32[$26 >> 2] | 0) + ((($13 | 0) / 2 | 0) << 2) | 0;
    _memcpy($29 | 0, $19 | 0, $18 << 2 | 0) | 0;
    $31 = $0 + 64 | 0;
    $32 = $0 + 60 | 0;
    $$03 = 0;
    while (1) {
     if (($$03 | 0) >= ($$02 | 0)) break;
     $37 = (HEAP32[$2 >> 2] | 0) + ((Math_imul($$01, $$03) | 0) << 2) | 0;
     _clt_mdct_backward_c($31, $29 + ($$03 << 2) | 0, $37, HEAP32[$32 >> 2] | 0, $13, $$0, $$02);
     $$03 = $$03 + 1 | 0;
    }
    $$1 = 0;
    while (1) {
     if (($$1 | 0) >= ($$02 | 0)) break;
     $44 = (HEAP32[$26 >> 2] | 0) + ((Math_imul($$01, $$1) | 0) << 2) | 0;
     _clt_mdct_backward_c($31, $19 + ($$1 << 2) | 0, $44, HEAP32[$32 >> 2] | 0, $13, $$0, $$02);
     $$1 = $$1 + 1 | 0;
    }
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 1:
  {
   if (($6 | 0) == 2) {
    $50 = (HEAP32[$2 >> 2] | 0) + ((($13 | 0) / 2 | 0) << 2) | 0;
    $$idx4 = $0 + 32 | 0;
    _denormalise_bands(HEAP32[$$idx4 >> 2] | 0, $17, $1, $19, $3, $4, $5, $20, $10, $11);
    _denormalise_bands(HEAP32[$$idx4 >> 2] | 0, HEAP32[$16 >> 2] | 0, $1 + ($18 << 2) | 0, $50, $3 + ($15 << 2) | 0, $4, $5, $20, $10, $11);
    $$04 = 0;
    while (1) {
     if (($$04 | 0) >= ($18 | 0)) break;
     $54 = $19 + ($$04 << 2) | 0;
     HEAPF32[$54 >> 2] = +HEAPF32[$54 >> 2] * .5 + +HEAPF32[$50 + ($$04 << 2) >> 2] * .5;
     $$04 = $$04 + 1 | 0;
    }
    $62 = $0 + 64 | 0;
    $63 = $0 + 60 | 0;
    $$2 = 0;
    while (1) {
     if (($$2 | 0) >= ($$02 | 0)) break;
     $68 = (HEAP32[$2 >> 2] | 0) + ((Math_imul($$01, $$2) | 0) << 2) | 0;
     _clt_mdct_backward_c($62, $19 + ($$2 << 2) | 0, $68, HEAP32[$63 >> 2] | 0, $13, $$0, $$02);
     $$2 = $$2 + 1 | 0;
    }
    STACKTOP = sp;
    return;
   }
   break;
  }
 default:
  {}
 }
 $$idx = $0 + 32 | 0;
 $71 = $0 + 64 | 0;
 $72 = $0 + 60 | 0;
 $$06 = 0;
 $$idx1$val = $17;
 while (1) {
  $74 = $1 + ((Math_imul($$06, $18) | 0) << 2) | 0;
  $76 = $3 + ((Math_imul($$06, $15) | 0) << 2) | 0;
  _denormalise_bands(HEAP32[$$idx >> 2] | 0, $$idx1$val, $74, $19, $76, $4, $5, $20, $10, $11);
  $77 = $2 + ($$06 << 2) | 0;
  $$3 = 0;
  while (1) {
   if (($$3 | 0) >= ($$02 | 0)) break;
   $82 = (HEAP32[$77 >> 2] | 0) + ((Math_imul($$01, $$3) | 0) << 2) | 0;
   _clt_mdct_backward_c($71, $19 + ($$3 << 2) | 0, $82, HEAP32[$72 >> 2] | 0, $13, $$0, $$02);
   $$3 = $$3 + 1 | 0;
  }
  $85 = $$06 + 1 | 0;
  if (($85 | 0) >= ($7 | 0)) break;
  $$06 = $85;
  $$idx1$val = HEAP32[$16 >> 2] | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_NSQ_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $104 = 0, $19 = 0, $20 = 0, $21 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $71 = 0, $72 = 0, $75 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $92 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1 + 4340 >> 2] = HEAP8[$2 + 34 >> 0];
 $19 = $1 + 4328 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $2 + 29 | 0;
 $30 = HEAP16[40156 + (HEAP8[$21 >> 0] >> 1 << 2) + (HEAP8[$2 + 30 >> 0] << 1) >> 1] | 0;
 $spec$select = (HEAP8[$2 + 31 >> 0] | 0) != 4 & 1;
 $34 = $0 + 4592 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $0 + 4584 | 0;
 $38 = $35 + (HEAP32[$36 >> 2] | 0) | 0;
 $39 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($38 << 2) | 0) + 15 & -16) | 0;
 $40 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($38 << 1) | 0) + 15 & -16) | 0;
 $41 = $0 + 4588 | 0;
 $43 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (HEAP32[$41 >> 2] << 2) | 0) + 15 & -16) | 0;
 HEAP32[$1 + 4336 >> 2] = $35;
 $46 = $1 + 4332 | 0;
 HEAP32[$46 >> 2] = HEAP32[$34 >> 2];
 $49 = $0 + 4580 | 0;
 $50 = $spec$select ^ 1;
 $51 = $1 + 4348 | 0;
 $53 = $spec$select << 1 ^ 3;
 $54 = $0 + 4636 | 0;
 $55 = $0 + 4640 | 0;
 $$0 = $1 + (HEAP32[$34 >> 2] << 1) | 0;
 $$02 = $3;
 $$03 = $4;
 $$04 = $20;
 $$05 = 0;
 while (1) {
  $56 = HEAP32[$49 >> 2] | 0;
  if (($$05 | 0) >= ($56 | 0)) {
   label = 9;
   break;
  }
  $61 = $5 + (($$05 >>> 1 | $50) << 4 << 1) | 0;
  $63 = $6 + ($$05 * 5 << 1) | 0;
  $65 = $7 + ($$05 * 24 << 1) | 0;
  $67 = HEAP32[$8 + ($$05 << 2) >> 2] | 0;
  $71 = $67 >> 2 | $67 >>> 1 << 16;
  HEAP32[$51 >> 2] = 0;
  $72 = HEAP8[$21 >> 0] | 0;
  if ($72 << 24 >> 24 == 2) {
   $75 = HEAP32[$12 + ($$05 << 2) >> 2] | 0;
   if (!($$05 & $53)) {
    $78 = HEAP32[$34 >> 2] | 0;
    $80 = HEAP32[$55 >> 2] | 0;
    $81 = $78 - $75 - $80 | 0;
    $82 = $81 + -2 | 0;
    if (($81 | 0) <= 2) {
     label = 6;
     break;
    }
    _silk_LPC_analysis_filter($40 + ($82 << 1) | 0, $1 + ($82 + (Math_imul($$05, HEAP32[$41 >> 2] | 0) | 0) << 1) | 0, $61, $78 - $82 | 0, $80);
    HEAP32[$51 >> 2] = 1;
    HEAP32[$46 >> 2] = HEAP32[$34 >> 2];
    $$1 = $75;
    $92 = HEAP8[$21 >> 0] | 0;
   } else {
    $$1 = $75;
    $92 = 2;
   }
  } else {
   $$1 = $$04;
   $92 = $72;
  }
  _silk_nsq_scale_states($0, $1, $$02, $43, $40, $39, $$05, $14, $11, $12, $92 << 24 >> 24);
  _silk_noise_shape_quantizer($1, HEAP8[$21 >> 0] | 0, $43, $$03, $$0, $39, $61, $63, $65, $$1, $71, HEAP32[$9 + ($$05 << 2) >> 2] | 0, HEAP32[$10 + ($$05 << 2) >> 2] | 0, HEAP32[$11 + ($$05 << 2) >> 2] | 0, $13, $30, HEAP32[$41 >> 2] | 0, HEAP32[$54 >> 2] | 0, HEAP32[$55 >> 2] | 0);
  $104 = HEAP32[$41 >> 2] | 0;
  $$0 = $$0 + ($104 << 1) | 0;
  $$02 = $$02 + ($104 << 1) | 0;
  $$03 = $$03 + $104 | 0;
  $$04 = $$1;
  $$05 = $$05 + 1 | 0;
 }
 if ((label | 0) == 6) _celt_fatal(44423, 44357, 146); else if ((label | 0) == 9) {
  HEAP32[$19 >> 2] = HEAP32[$12 + ($56 + -1 << 2) >> 2];
  _memmove($1 | 0, $1 + (HEAP32[$36 >> 2] << 1) | 0, HEAP32[$34 >> 2] << 1 | 0) | 0;
  _memmove($1 + 1280 | 0, $1 + 1280 + (HEAP32[$36 >> 2] << 2) | 0, HEAP32[$34 >> 2] << 2 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _xcorr_kernel_c_127($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$010 = 0.0, $$04 = 0.0, $$06 = 0.0, $$07 = 0, $$08 = 0.0, $$1 = 0, $$12 = 0, $$15 = 0.0, $$19 = 0.0, $$2 = 0, $$23 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $41 = 0.0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $51 = 0.0, $53 = 0.0, $55 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $71 = 0, $74 = 0.0, $76 = 0.0, $92 = 0.0, $94 = 0.0, $scevgep = 0, $scevgep11 = 0;
 if (($3 | 0) <= 2) _celt_fatal(42303, 42328, 69);
 $11 = $3 + -3 | 0;
 $12 = $2 + 4 | 0;
 $13 = $2 + 8 | 0;
 $14 = $2 + 12 | 0;
 $15 = $3 & -4;
 $scevgep = $1 + (($3 | 3) << 2) | 0;
 $$0 = $0;
 $$01 = $1 + 12 | 0;
 $$010 = +HEAPF32[$1 + 4 >> 2];
 $$04 = 0.0;
 $$06 = +HEAPF32[$1 + 8 >> 2];
 $$07 = 0;
 $$08 = +HEAPF32[$1 >> 2];
 while (1) {
  if (($$07 | 0) >= ($11 | 0)) break;
  $19 = +HEAPF32[$$0 >> 2];
  $21 = +HEAPF32[$$01 >> 2];
  $24 = +HEAPF32[$2 >> 2] + $19 * $$08;
  HEAPF32[$2 >> 2] = $24;
  $27 = +HEAPF32[$12 >> 2] + $19 * $$010;
  HEAPF32[$12 >> 2] = $27;
  $30 = +HEAPF32[$13 >> 2] + $19 * $$06;
  HEAPF32[$13 >> 2] = $30;
  $33 = +HEAPF32[$14 >> 2] + $19 * $21;
  HEAPF32[$14 >> 2] = $33;
  $35 = +HEAPF32[$$0 + 4 >> 2];
  $37 = +HEAPF32[$$01 + 4 >> 2];
  $39 = $24 + $35 * $$010;
  HEAPF32[$2 >> 2] = $39;
  $41 = $27 + $35 * $$06;
  HEAPF32[$12 >> 2] = $41;
  $43 = $30 + $35 * $21;
  HEAPF32[$13 >> 2] = $43;
  $45 = $33 + $35 * $37;
  HEAPF32[$14 >> 2] = $45;
  $47 = +HEAPF32[$$0 + 8 >> 2];
  $49 = +HEAPF32[$$01 + 8 >> 2];
  $51 = $39 + $47 * $$06;
  HEAPF32[$2 >> 2] = $51;
  $53 = $41 + $47 * $21;
  HEAPF32[$12 >> 2] = $53;
  $55 = $43 + $47 * $37;
  HEAPF32[$13 >> 2] = $55;
  $57 = $45 + $47 * $49;
  HEAPF32[$14 >> 2] = $57;
  $58 = +HEAPF32[$$0 + 12 >> 2];
  $59 = +HEAPF32[$$01 + 12 >> 2];
  HEAPF32[$2 >> 2] = $51 + $58 * $21;
  HEAPF32[$12 >> 2] = $53 + $58 * $37;
  HEAPF32[$13 >> 2] = $55 + $58 * $49;
  HEAPF32[$14 >> 2] = $57 + $58 * $59;
  $$0 = $$0 + 16 | 0;
  $$01 = $$01 + 16 | 0;
  $$010 = $49;
  $$04 = $21;
  $$06 = $59;
  $$07 = $$07 + 4 | 0;
  $$08 = $37;
 }
 $scevgep11 = $0 + ($15 << 2) | 0;
 $71 = $15 | 1;
 if (($15 | 0) < ($3 | 0)) {
  $74 = +HEAPF32[$scevgep11 >> 2];
  $76 = +HEAPF32[$scevgep >> 2];
  HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $74 * $$08;
  HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $74 * $$010;
  HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $74 * $$06;
  HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $74 * $76;
  $$1 = $scevgep11 + 4 | 0;
  $$12 = $scevgep + 4 | 0;
  $$15 = $76;
 } else {
  $$1 = $scevgep11;
  $$12 = $scevgep;
  $$15 = $$04;
 }
 if (($71 | 0) < ($3 | 0)) {
  $92 = +HEAPF32[$$1 >> 2];
  $94 = +HEAPF32[$$12 >> 2];
  HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $92 * $$010;
  HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $92 * $$06;
  HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $92 * $$15;
  HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $92 * $94;
  $$19 = $94;
  $$2 = $$1 + 4 | 0;
  $$23 = $$12 + 4 | 0;
 } else {
  $$19 = $$08;
  $$2 = $$1;
  $$23 = $$12;
 }
 if (($71 + 1 | 0) >= ($3 | 0)) return;
 $108 = +HEAPF32[$$2 >> 2];
 $109 = +HEAPF32[$$23 >> 2];
 HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $108 * $$06;
 HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $108 * $$15;
 HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $108 * $$19;
 HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $108 * $109;
 return;
}

function _xcorr_kernel_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$010 = 0.0, $$04 = 0.0, $$06 = 0.0, $$07 = 0, $$08 = 0.0, $$1 = 0, $$12 = 0, $$15 = 0.0, $$19 = 0.0, $$2 = 0, $$23 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $41 = 0.0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $51 = 0.0, $53 = 0.0, $55 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $71 = 0, $74 = 0.0, $76 = 0.0, $92 = 0.0, $94 = 0.0, $scevgep = 0, $scevgep11 = 0;
 if (($3 | 0) <= 2) _celt_fatal(42303, 42328, 69);
 $11 = $3 + -3 | 0;
 $12 = $2 + 4 | 0;
 $13 = $2 + 8 | 0;
 $14 = $2 + 12 | 0;
 $15 = $3 & -4;
 $scevgep = $1 + (($3 | 3) << 2) | 0;
 $$0 = $0;
 $$01 = $1 + 12 | 0;
 $$010 = +HEAPF32[$1 + 4 >> 2];
 $$04 = 0.0;
 $$06 = +HEAPF32[$1 + 8 >> 2];
 $$07 = 0;
 $$08 = +HEAPF32[$1 >> 2];
 while (1) {
  if (($$07 | 0) >= ($11 | 0)) break;
  $19 = +HEAPF32[$$0 >> 2];
  $21 = +HEAPF32[$$01 >> 2];
  $24 = +HEAPF32[$2 >> 2] + $19 * $$08;
  HEAPF32[$2 >> 2] = $24;
  $27 = +HEAPF32[$12 >> 2] + $19 * $$010;
  HEAPF32[$12 >> 2] = $27;
  $30 = +HEAPF32[$13 >> 2] + $19 * $$06;
  HEAPF32[$13 >> 2] = $30;
  $33 = +HEAPF32[$14 >> 2] + $19 * $21;
  HEAPF32[$14 >> 2] = $33;
  $35 = +HEAPF32[$$0 + 4 >> 2];
  $37 = +HEAPF32[$$01 + 4 >> 2];
  $39 = $24 + $35 * $$010;
  HEAPF32[$2 >> 2] = $39;
  $41 = $27 + $35 * $$06;
  HEAPF32[$12 >> 2] = $41;
  $43 = $30 + $35 * $21;
  HEAPF32[$13 >> 2] = $43;
  $45 = $33 + $35 * $37;
  HEAPF32[$14 >> 2] = $45;
  $47 = +HEAPF32[$$0 + 8 >> 2];
  $49 = +HEAPF32[$$01 + 8 >> 2];
  $51 = $39 + $47 * $$06;
  HEAPF32[$2 >> 2] = $51;
  $53 = $41 + $47 * $21;
  HEAPF32[$12 >> 2] = $53;
  $55 = $43 + $47 * $37;
  HEAPF32[$13 >> 2] = $55;
  $57 = $45 + $47 * $49;
  HEAPF32[$14 >> 2] = $57;
  $58 = +HEAPF32[$$0 + 12 >> 2];
  $59 = +HEAPF32[$$01 + 12 >> 2];
  HEAPF32[$2 >> 2] = $51 + $58 * $21;
  HEAPF32[$12 >> 2] = $53 + $58 * $37;
  HEAPF32[$13 >> 2] = $55 + $58 * $49;
  HEAPF32[$14 >> 2] = $57 + $58 * $59;
  $$0 = $$0 + 16 | 0;
  $$01 = $$01 + 16 | 0;
  $$010 = $49;
  $$04 = $21;
  $$06 = $59;
  $$07 = $$07 + 4 | 0;
  $$08 = $37;
 }
 $scevgep11 = $0 + ($15 << 2) | 0;
 $71 = $15 | 1;
 if (($15 | 0) < ($3 | 0)) {
  $74 = +HEAPF32[$scevgep11 >> 2];
  $76 = +HEAPF32[$scevgep >> 2];
  HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $74 * $$08;
  HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $74 * $$010;
  HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $74 * $$06;
  HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $74 * $76;
  $$1 = $scevgep11 + 4 | 0;
  $$12 = $scevgep + 4 | 0;
  $$15 = $76;
 } else {
  $$1 = $scevgep11;
  $$12 = $scevgep;
  $$15 = $$04;
 }
 if (($71 | 0) < ($3 | 0)) {
  $92 = +HEAPF32[$$1 >> 2];
  $94 = +HEAPF32[$$12 >> 2];
  HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $92 * $$010;
  HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $92 * $$06;
  HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $92 * $$15;
  HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $92 * $94;
  $$19 = $94;
  $$2 = $$1 + 4 | 0;
  $$23 = $$12 + 4 | 0;
 } else {
  $$19 = $$08;
  $$2 = $$1;
  $$23 = $$12;
 }
 if (($71 + 1 | 0) >= ($3 | 0)) return;
 $108 = +HEAPF32[$$2 >> 2];
 $109 = +HEAPF32[$$23 >> 2];
 HEAPF32[$2 >> 2] = +HEAPF32[$2 >> 2] + $108 * $$06;
 HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + $108 * $$15;
 HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + $108 * $$19;
 HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] + $108 * $109;
 return;
}

function _silk_VQ_WMat_EC_c($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$01 = 0, $101 = 0, $104 = 0, $108 = 0, $111 = 0, $118 = 0, $122 = 0, $125 = 0, $13 = 0, $132 = 0, $135 = 0, $142 = 0, $147 = 0, $151 = 0, $156 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $44 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $60 = 0, $62 = 0, $66 = 0, $69 = 0, $72 = 0, $74 = 0, $81 = 0, $84 = 0, $87 = 0, $91 = 0, $94 = 0;
 $13 = HEAP32[$5 >> 2] << 7;
 $16 = HEAP32[$5 + 4 >> 2] << 7;
 $19 = HEAP32[$5 + 8 >> 2] << 7;
 $22 = HEAP32[$5 + 12 >> 2] << 7;
 $25 = HEAP32[$5 + 16 >> 2] << 8;
 HEAP32[$2 >> 2] = 2147483647;
 HEAP32[$1 >> 2] = 2147483647;
 HEAP8[$0 >> 0] = 0;
 $26 = $4 + 4 | 0;
 $27 = $4 + 8 | 0;
 $28 = $4 + 12 | 0;
 $29 = $4 + 16 | 0;
 $30 = $4 + 28 | 0;
 $31 = $4 + 32 | 0;
 $32 = $4 + 36 | 0;
 $33 = $4 + 24 | 0;
 $34 = $4 + 52 | 0;
 $35 = $4 + 56 | 0;
 $36 = $4 + 48 | 0;
 $37 = $4 + 76 | 0;
 $38 = $4 + 72 | 0;
 $39 = $4 + 96 | 0;
 $40 = $9 << 16 >> 16;
 $$0 = $6;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($11 | 0)) break;
  $44 = HEAPU8[$7 + $$01 >> 0] | 0;
  $48 = HEAP8[$$0 + 1 >> 0] | 0;
  $50 = (Math_imul(HEAP32[$26 >> 2] | 0, $48) | 0) - $13 | 0;
  $54 = HEAP8[$$0 + 2 >> 0] | 0;
  $56 = $50 + (Math_imul(HEAP32[$27 >> 2] | 0, $54) | 0) | 0;
  $60 = HEAP8[$$0 + 3 >> 0] | 0;
  $62 = $56 + (Math_imul(HEAP32[$28 >> 2] | 0, $60) | 0) | 0;
  $66 = HEAP8[$$0 + 4 >> 0] | 0;
  $69 = $62 + (Math_imul(HEAP32[$29 >> 2] | 0, $66) | 0) << 1;
  $72 = HEAP8[$$0 >> 0] | 0;
  $74 = $69 + (Math_imul(HEAP32[$4 >> 2] | 0, $72) | 0) | 0;
  $81 = (Math_imul($74 >> 16, $72) | 0) + ((Math_imul($74 & 65535, $72) | 0) >> 16) + 32801 | 0;
  $84 = (Math_imul(HEAP32[$30 >> 2] | 0, $54) | 0) - $16 | 0;
  $87 = $84 + (Math_imul(HEAP32[$31 >> 2] | 0, $60) | 0) | 0;
  $91 = $87 + (Math_imul(HEAP32[$32 >> 2] | 0, $66) | 0) << 1;
  $94 = $91 + (Math_imul(HEAP32[$33 >> 2] | 0, $48) | 0) | 0;
  $101 = $81 + ((Math_imul($94 >> 16, $48) | 0) + ((Math_imul($94 & 65535, $48) | 0) >> 16)) | 0;
  $104 = (Math_imul(HEAP32[$34 >> 2] | 0, $60) | 0) - $19 | 0;
  $108 = $104 + (Math_imul(HEAP32[$35 >> 2] | 0, $66) | 0) << 1;
  $111 = $108 + (Math_imul(HEAP32[$36 >> 2] | 0, $54) | 0) | 0;
  $118 = $101 + ((Math_imul($111 >> 16, $54) | 0) + ((Math_imul($111 & 65535, $54) | 0) >> 16)) | 0;
  $122 = (Math_imul(HEAP32[$37 >> 2] | 0, $66) | 0) - $22 << 1;
  $125 = $122 + (Math_imul(HEAP32[$38 >> 2] | 0, $60) | 0) | 0;
  $132 = $118 + ((Math_imul($125 >> 16, $60) | 0) + ((Math_imul($125 & 65535, $60) | 0) >> 16)) | 0;
  $135 = (Math_imul(HEAP32[$39 >> 2] | 0, $66) | 0) - $25 | 0;
  $142 = $132 + ((Math_imul($135 >> 16, $66) | 0) + ((Math_imul($135 & 65535, $66) | 0) >> 16)) | 0;
  if (($142 | 0) > -1) {
   $147 = $142 + (($44 | 0) > ($10 | 0) ? $44 - $10 << 11 : 0) | 0;
   $151 = Math_imul($40, ((_silk_lin2log($147) | 0) << 16) + -125829120 >> 16) | 0;
   $156 = $151 + (HEAPU8[$8 + $$01 >> 0] << 2) | 0;
   if (($156 | 0) <= (HEAP32[$2 >> 2] | 0)) {
    HEAP32[$2 >> 2] = $156;
    HEAP32[$1 >> 2] = $147;
    HEAP8[$0 >> 0] = $$01;
    HEAP32[$3 >> 2] = $44;
   }
  }
  $$0 = $$0 + 5 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _op_pvq_search_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$011 = 0.0, $$013 = 0.0, $$016 = 0.0, $$03 = 0, $$05 = 0, $$06 = 0, $$08 = 0, $$112 = 0.0, $$114 = 0.0, $$117 = 0.0, $$17 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$215 = 0.0, $$218 = 0.0, $$3 = 0, $$319 = 0.0, $$4 = 0, $$5 = 0, $31 = 0.0, $32 = 0, $36 = 0, $38 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $46 = 0, $5 = 0, $51 = 0.0, $56 = 0.0, $6 = 0, $60 = 0.0, $62 = 0.0, $68 = 0.0, $7 = 0.0, $71 = 0.0, $72 = 0.0, $75 = 0, $79 = 0.0, $80 = 0, $81 = 0.0, $83 = 0, $89 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 $4 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($3 << 2) | 0) + 15 & -16) | 0;
 $$06 = 0;
 do {
  $6 = $0 + ($$06 << 2) | 0;
  $7 = +HEAPF32[$6 >> 2];
  HEAP32[$5 + ($$06 << 2) >> 2] = $7 < 0.0 & 1;
  HEAPF32[$6 >> 2] = +Math_abs(+$7);
  HEAP32[$1 + ($$06 << 2) >> 2] = 0;
  HEAPF32[$4 + ($$06 << 2) >> 2] = 0.0;
  $$06 = $$06 + 1 | 0;
 } while (($$06 | 0) < ($3 | 0));
 if (($3 >> 1 | 0) < ($2 | 0)) {
  $$011 = 0.0;
  $$17 = 0;
  do {
   $$011 = $$011 + +HEAPF32[$0 + ($$17 << 2) >> 2];
   $$17 = $$17 + 1 | 0;
  } while (($$17 | 0) < ($3 | 0));
  if ($$011 > 1.0000000036274937e-15 & $$011 < 64.0) $$112 = $$011; else {
   HEAPF32[$0 >> 2] = 1.0;
   $$2 = 1;
   do {
    HEAPF32[$0 + ($$2 << 2) >> 2] = 0.0;
    $$2 = $$2 + 1 | 0;
   } while (($$2 | 0) < ($3 | 0));
   $$112 = 1.0;
  }
  $31 = (+($2 | 0) + .800000011920929) * (1.0 / $$112);
  $$013 = 0.0;
  $$016 = 0.0;
  $$08 = $2;
  $$3 = 0;
  while (1) {
   $32 = $0 + ($$3 << 2) | 0;
   $36 = ~~+Math_floor(+($31 * +HEAPF32[$32 >> 2]));
   HEAP32[$1 + ($$3 << 2) >> 2] = $36;
   $38 = +($36 | 0);
   $41 = $$016 + $38 * $38;
   $44 = $$013 + +HEAPF32[$32 >> 2] * $38;
   HEAPF32[$4 + ($$3 << 2) >> 2] = $38 * 2.0;
   $46 = $$08 - $36 | 0;
   $$3 = $$3 + 1 | 0;
   if (($$3 | 0) >= ($3 | 0)) {
    $$114 = $44;
    $$117 = $41;
    $$19 = $46;
    break;
   } else {
    $$013 = $44;
    $$016 = $41;
    $$08 = $46;
   }
  }
 } else {
  $$114 = 0.0;
  $$117 = 0.0;
  $$19 = $2;
 }
 if (($$19 | 0) > ($3 + 3 | 0)) {
  $51 = +($$19 | 0);
  $56 = $$117 + $51 * $51 + +HEAPF32[$4 >> 2] * $51;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $$19;
  $$210 = 0;
  $$218 = $56;
 } else {
  $$210 = $$19;
  $$218 = $$117;
 }
 $$05 = 0;
 $$215 = $$114;
 $$319 = $$218;
 while (1) {
  if (($$05 | 0) >= ($$210 | 0)) break;
  $60 = $$319 + 1.0;
  $62 = $$215 + +HEAPF32[$0 >> 2];
  $$0 = $60 + +HEAPF32[$4 >> 2];
  $$01 = $62 * $62;
  $$03 = 0;
  $$4 = 1;
  while (1) {
   $68 = $$215 + +HEAPF32[$0 + ($$4 << 2) >> 2];
   $71 = $60 + +HEAPF32[$4 + ($$4 << 2) >> 2];
   $72 = $68 * $68;
   $75 = $$0 * $72 > $71 * $$01;
   $$03 = $75 ? $$4 : $$03;
   $$4 = $$4 + 1 | 0;
   if (($$4 | 0) >= ($3 | 0)) break; else {
    $$0 = $75 ? $71 : $$0;
    $$01 = $75 ? $72 : $$01;
   }
  }
  $79 = +HEAPF32[$0 + ($$03 << 2) >> 2];
  $80 = $4 + ($$03 << 2) | 0;
  $81 = +HEAPF32[$80 >> 2];
  HEAPF32[$80 >> 2] = $81 + 2.0;
  $83 = $1 + ($$03 << 2) | 0;
  HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
  $$05 = $$05 + 1 | 0;
  $$215 = $$215 + $79;
  $$319 = $60 + $81;
 }
 $$5 = 0;
 do {
  $89 = $1 + ($$5 << 2) | 0;
  $92 = HEAP32[$5 + ($$5 << 2) >> 2] | 0;
  HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] ^ 0 - $92) + $92;
  $$5 = $$5 + 1 | 0;
 } while (($$5 | 0) < ($3 | 0));
 STACKTOP = sp;
 return +$$319;
}

function _opus_pcm_soft_clip($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0, $$010 = 0, $$011 = 0, $$02 = 0.0, $$04 = 0, $$05 = 0, $$07 = 0, $$08 = 0.0, $$16 = 0, $$19 = 0.0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $28 = 0.0, $32 = 0.0, $39 = 0.0, $40 = 0.0, $42 = 0, $51 = 0.0, $54 = 0.0, $55 = 0, $63 = 0.0, $65 = 0.0, $70 = 0, $71 = 0.0, $77 = 0, $79 = 0.0, $8 = 0, $81 = 0.0, $83 = 0.0, $85 = 0, $87 = 0.0, $88 = 0, $89 = 0;
 if (($2 | 0) < 1 | ($1 | 0) < 1 | ($0 | 0) == 0 | ($3 | 0) == 0) return;
 $8 = Math_imul($1, $2) | 0;
 $$05 = 0;
 while (1) {
  if (($$05 | 0) >= ($8 | 0)) break;
  $10 = $0 + ($$05 << 2) | 0;
  $11 = +HEAPF32[$10 >> 2];
  $12 = $11 > 2.0;
  $13 = $11 < -2.0;
  HEAPF32[$10 >> 2] = $13 | $12 ? ($13 & ($12 ^ 1) ? -2.0 : 2.0) : $11;
  $$05 = $$05 + 1 | 0;
 }
 $$04 = 0;
 while (1) {
  if (($$04 | 0) == ($2 | 0)) break;
  $16 = $0 + ($$04 << 2) | 0;
  $17 = $3 + ($$04 << 2) | 0;
  $18 = +HEAPF32[$17 >> 2];
  $$16 = 0;
  while (1) {
   if (($$16 | 0) >= ($1 | 0)) break;
   $21 = $16 + ((Math_imul($$16, $2) | 0) << 2) | 0;
   $22 = +HEAPF32[$21 >> 2];
   $23 = $22 * $18;
   if ($23 >= 0.0) break;
   HEAPF32[$21 >> 2] = $22 + $23 * $22;
   $$16 = $$16 + 1 | 0;
  }
  $28 = +HEAPF32[$16 >> 2];
  $$011 = 0;
  while (1) {
   $$2 = $$011;
   while (1) {
    if (($$2 | 0) >= ($1 | 0)) break;
    $32 = +HEAPF32[$16 + ((Math_imul($$2, $2) | 0) << 2) >> 2];
    if ($32 > 1.0 | $32 < -1.0) break;
    $$2 = $$2 + 1 | 0;
   }
   if (($$2 | 0) == ($1 | 0)) {
    $$19 = 0.0;
    break;
   }
   $39 = +HEAPF32[$16 + ((Math_imul($$2, $2) | 0) << 2) >> 2];
   $40 = +Math_abs(+$39);
   $$010 = $$2;
   while (1) {
    if (($$010 | 0) <= 0) break;
    $42 = $$010 + -1 | 0;
    if (!($39 * +HEAPF32[$16 + ((Math_imul($42, $2) | 0) << 2) >> 2] >= 0.0)) break;
    $$010 = $42;
   }
   $$01 = $$2;
   $$02 = $40;
   $$07 = $$2;
   while (1) {
    if (($$07 | 0) >= ($1 | 0)) break;
    $51 = +HEAPF32[$16 + ((Math_imul($$07, $2) | 0) << 2) >> 2];
    if (!($39 * $51 >= 0.0)) break;
    $54 = +Math_abs(+$51);
    $55 = $54 > $$02;
    $$01 = $55 ? $$07 : $$01;
    $$02 = $55 ? $54 : $$02;
    $$07 = $$07 + 1 | 0;
   }
   if (!$$010) $77 = $39 * +HEAPF32[$16 >> 2] >= 0.0; else $77 = 0;
   $63 = ($$02 + -1.0) / ($$02 * $$02);
   $65 = $63 + $63 * 2.399999914359796e-07;
   $$08 = $39 > 0.0 ? -$65 : $65;
   $$3 = $$010;
   while (1) {
    if (($$3 | 0) >= ($$07 | 0)) break;
    $70 = $16 + ((Math_imul($$3, $2) | 0) << 2) | 0;
    $71 = +HEAPF32[$70 >> 2];
    HEAPF32[$70 >> 2] = $71 + $$08 * $71 * $71;
    $$3 = $$3 + 1 | 0;
   }
   L41 : do if ($77 & ($$01 | 0) > 1) {
    $79 = $28 - +HEAPF32[$16 >> 2];
    $81 = $79 / +($$01 | 0);
    $$0 = $79;
    $$4 = $$011;
    while (1) {
     if (($$4 | 0) >= ($$01 | 0)) break L41;
     $83 = $$0 - $81;
     $85 = $16 + ((Math_imul($$4, $2) | 0) << 2) | 0;
     $87 = +HEAPF32[$85 >> 2] + $83;
     HEAPF32[$85 >> 2] = $87;
     $88 = $87 > 1.0;
     $89 = $87 < -1.0;
     HEAPF32[$85 >> 2] = $89 | $88 ? ($89 & ($88 ^ 1) ? -1.0 : 1.0) : $87;
     $$0 = $83;
     $$4 = $$4 + 1 | 0;
    }
   } while (0);
   if (($$07 | 0) == ($1 | 0)) {
    $$19 = $$08;
    break;
   }
   $$011 = $$07;
  }
  HEAPF32[$17 >> 2] = $$19;
  $$04 = $$04 + 1 | 0;
 }
 return;
}

function _silk_noise_shape_quantizer_short_prediction_c_242($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $103 = 0, $109 = 0, $111 = 0, $115 = 0, $121 = 0, $124 = 0, $128 = 0, $13 = 0, $134 = 0, $136 = 0, $140 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $158 = 0, $160 = 0, $164 = 0, $170 = 0, $172 = 0, $176 = 0, $182 = 0, $184 = 0, $188 = 0, $19 = 0, $25 = 0, $27 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $51 = 0, $55 = 0, $61 = 0, $63 = 0, $67 = 0, $7 = 0, $73 = 0, $75 = 0, $79 = 0, $85 = 0, $87 = 0, $91 = 0, $97 = 0, $99 = 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP16[$1 >> 1] | 0;
 $13 = ($2 >> 1) + ((Math_imul($4 >> 16, $7) | 0) + ((Math_imul($4 & 65535, $7) | 0) >> 16)) | 0;
 $15 = HEAP32[$0 + -4 >> 2] | 0;
 $19 = HEAP16[$1 + 2 >> 1] | 0;
 $25 = $13 + ((Math_imul($15 >> 16, $19) | 0) + ((Math_imul($15 & 65535, $19) | 0) >> 16)) | 0;
 $27 = HEAP32[$0 + -8 >> 2] | 0;
 $31 = HEAP16[$1 + 4 >> 1] | 0;
 $37 = $25 + ((Math_imul($27 >> 16, $31) | 0) + ((Math_imul($27 & 65535, $31) | 0) >> 16)) | 0;
 $39 = HEAP32[$0 + -12 >> 2] | 0;
 $43 = HEAP16[$1 + 6 >> 1] | 0;
 $49 = $37 + ((Math_imul($39 >> 16, $43) | 0) + ((Math_imul($39 & 65535, $43) | 0) >> 16)) | 0;
 $51 = HEAP32[$0 + -16 >> 2] | 0;
 $55 = HEAP16[$1 + 8 >> 1] | 0;
 $61 = $49 + ((Math_imul($51 >> 16, $55) | 0) + ((Math_imul($51 & 65535, $55) | 0) >> 16)) | 0;
 $63 = HEAP32[$0 + -20 >> 2] | 0;
 $67 = HEAP16[$1 + 10 >> 1] | 0;
 $73 = $61 + ((Math_imul($63 >> 16, $67) | 0) + ((Math_imul($63 & 65535, $67) | 0) >> 16)) | 0;
 $75 = HEAP32[$0 + -24 >> 2] | 0;
 $79 = HEAP16[$1 + 12 >> 1] | 0;
 $85 = $73 + ((Math_imul($75 >> 16, $79) | 0) + ((Math_imul($75 & 65535, $79) | 0) >> 16)) | 0;
 $87 = HEAP32[$0 + -28 >> 2] | 0;
 $91 = HEAP16[$1 + 14 >> 1] | 0;
 $97 = $85 + ((Math_imul($87 >> 16, $91) | 0) + ((Math_imul($87 & 65535, $91) | 0) >> 16)) | 0;
 $99 = HEAP32[$0 + -32 >> 2] | 0;
 $103 = HEAP16[$1 + 16 >> 1] | 0;
 $109 = $97 + ((Math_imul($99 >> 16, $103) | 0) + ((Math_imul($99 & 65535, $103) | 0) >> 16)) | 0;
 $111 = HEAP32[$0 + -36 >> 2] | 0;
 $115 = HEAP16[$1 + 18 >> 1] | 0;
 $121 = $109 + ((Math_imul($111 >> 16, $115) | 0) + ((Math_imul($111 & 65535, $115) | 0) >> 16)) | 0;
 if (($2 | 0) != 16) {
  $$0 = $121;
  return $$0 | 0;
 }
 $124 = HEAP32[$0 + -40 >> 2] | 0;
 $128 = HEAP16[$1 + 20 >> 1] | 0;
 $134 = $121 + ((Math_imul($124 >> 16, $128) | 0) + ((Math_imul($124 & 65535, $128) | 0) >> 16)) | 0;
 $136 = HEAP32[$0 + -44 >> 2] | 0;
 $140 = HEAP16[$1 + 22 >> 1] | 0;
 $146 = $134 + ((Math_imul($136 >> 16, $140) | 0) + ((Math_imul($136 & 65535, $140) | 0) >> 16)) | 0;
 $148 = HEAP32[$0 + -48 >> 2] | 0;
 $152 = HEAP16[$1 + 24 >> 1] | 0;
 $158 = $146 + ((Math_imul($148 >> 16, $152) | 0) + ((Math_imul($148 & 65535, $152) | 0) >> 16)) | 0;
 $160 = HEAP32[$0 + -52 >> 2] | 0;
 $164 = HEAP16[$1 + 26 >> 1] | 0;
 $170 = $158 + ((Math_imul($160 >> 16, $164) | 0) + ((Math_imul($160 & 65535, $164) | 0) >> 16)) | 0;
 $172 = HEAP32[$0 + -56 >> 2] | 0;
 $176 = HEAP16[$1 + 28 >> 1] | 0;
 $182 = $170 + ((Math_imul($172 >> 16, $176) | 0) + ((Math_imul($172 & 65535, $176) | 0) >> 16)) | 0;
 $184 = HEAP32[$0 + -60 >> 2] | 0;
 $188 = HEAP16[$1 + 30 >> 1] | 0;
 $$0 = $182 + ((Math_imul($184 >> 16, $188) | 0) + ((Math_imul($184 & 65535, $188) | 0) >> 16)) | 0;
 return $$0 | 0;
}

function _silk_noise_shape_quantizer_short_prediction_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $103 = 0, $109 = 0, $111 = 0, $115 = 0, $121 = 0, $124 = 0, $128 = 0, $13 = 0, $134 = 0, $136 = 0, $140 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $158 = 0, $160 = 0, $164 = 0, $170 = 0, $172 = 0, $176 = 0, $182 = 0, $184 = 0, $188 = 0, $19 = 0, $25 = 0, $27 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $51 = 0, $55 = 0, $61 = 0, $63 = 0, $67 = 0, $7 = 0, $73 = 0, $75 = 0, $79 = 0, $85 = 0, $87 = 0, $91 = 0, $97 = 0, $99 = 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP16[$1 >> 1] | 0;
 $13 = ($2 >> 1) + ((Math_imul($4 >> 16, $7) | 0) + ((Math_imul($4 & 65535, $7) | 0) >> 16)) | 0;
 $15 = HEAP32[$0 + -4 >> 2] | 0;
 $19 = HEAP16[$1 + 2 >> 1] | 0;
 $25 = $13 + ((Math_imul($15 >> 16, $19) | 0) + ((Math_imul($15 & 65535, $19) | 0) >> 16)) | 0;
 $27 = HEAP32[$0 + -8 >> 2] | 0;
 $31 = HEAP16[$1 + 4 >> 1] | 0;
 $37 = $25 + ((Math_imul($27 >> 16, $31) | 0) + ((Math_imul($27 & 65535, $31) | 0) >> 16)) | 0;
 $39 = HEAP32[$0 + -12 >> 2] | 0;
 $43 = HEAP16[$1 + 6 >> 1] | 0;
 $49 = $37 + ((Math_imul($39 >> 16, $43) | 0) + ((Math_imul($39 & 65535, $43) | 0) >> 16)) | 0;
 $51 = HEAP32[$0 + -16 >> 2] | 0;
 $55 = HEAP16[$1 + 8 >> 1] | 0;
 $61 = $49 + ((Math_imul($51 >> 16, $55) | 0) + ((Math_imul($51 & 65535, $55) | 0) >> 16)) | 0;
 $63 = HEAP32[$0 + -20 >> 2] | 0;
 $67 = HEAP16[$1 + 10 >> 1] | 0;
 $73 = $61 + ((Math_imul($63 >> 16, $67) | 0) + ((Math_imul($63 & 65535, $67) | 0) >> 16)) | 0;
 $75 = HEAP32[$0 + -24 >> 2] | 0;
 $79 = HEAP16[$1 + 12 >> 1] | 0;
 $85 = $73 + ((Math_imul($75 >> 16, $79) | 0) + ((Math_imul($75 & 65535, $79) | 0) >> 16)) | 0;
 $87 = HEAP32[$0 + -28 >> 2] | 0;
 $91 = HEAP16[$1 + 14 >> 1] | 0;
 $97 = $85 + ((Math_imul($87 >> 16, $91) | 0) + ((Math_imul($87 & 65535, $91) | 0) >> 16)) | 0;
 $99 = HEAP32[$0 + -32 >> 2] | 0;
 $103 = HEAP16[$1 + 16 >> 1] | 0;
 $109 = $97 + ((Math_imul($99 >> 16, $103) | 0) + ((Math_imul($99 & 65535, $103) | 0) >> 16)) | 0;
 $111 = HEAP32[$0 + -36 >> 2] | 0;
 $115 = HEAP16[$1 + 18 >> 1] | 0;
 $121 = $109 + ((Math_imul($111 >> 16, $115) | 0) + ((Math_imul($111 & 65535, $115) | 0) >> 16)) | 0;
 if (($2 | 0) != 16) {
  $$0 = $121;
  return $$0 | 0;
 }
 $124 = HEAP32[$0 + -40 >> 2] | 0;
 $128 = HEAP16[$1 + 20 >> 1] | 0;
 $134 = $121 + ((Math_imul($124 >> 16, $128) | 0) + ((Math_imul($124 & 65535, $128) | 0) >> 16)) | 0;
 $136 = HEAP32[$0 + -44 >> 2] | 0;
 $140 = HEAP16[$1 + 22 >> 1] | 0;
 $146 = $134 + ((Math_imul($136 >> 16, $140) | 0) + ((Math_imul($136 & 65535, $140) | 0) >> 16)) | 0;
 $148 = HEAP32[$0 + -48 >> 2] | 0;
 $152 = HEAP16[$1 + 24 >> 1] | 0;
 $158 = $146 + ((Math_imul($148 >> 16, $152) | 0) + ((Math_imul($148 & 65535, $152) | 0) >> 16)) | 0;
 $160 = HEAP32[$0 + -52 >> 2] | 0;
 $164 = HEAP16[$1 + 26 >> 1] | 0;
 $170 = $158 + ((Math_imul($160 >> 16, $164) | 0) + ((Math_imul($160 & 65535, $164) | 0) >> 16)) | 0;
 $172 = HEAP32[$0 + -56 >> 2] | 0;
 $176 = HEAP16[$1 + 28 >> 1] | 0;
 $182 = $170 + ((Math_imul($172 >> 16, $176) | 0) + ((Math_imul($172 & 65535, $176) | 0) >> 16)) | 0;
 $184 = HEAP32[$0 + -60 >> 2] | 0;
 $188 = HEAP16[$1 + 30 >> 1] | 0;
 $$0 = $182 + ((Math_imul($184 >> 16, $188) | 0) + ((Math_imul($184 & 65535, $188) | 0) >> 16)) | 0;
 return $$0 | 0;
}

function _spreading_decision($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$013 = 0, $$02 = 0, $$06 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$17 = 0, $$2 = 0, $$211 = 0, $$28 = 0, $$3 = 0, $$4 = 0, $$6 = 0, $$sroa$0$0 = 0, $$sroa$5$0 = 0, $$sroa$9$2 = 0, $100 = 0, $105 = 0, $12 = 0, $16 = 0, $27 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0.0, $44 = 0.0, $46 = 0.0, $73 = 0, $88 = 0, $97 = 0;
 $12 = HEAP32[$0 + 32 >> 2] | 0;
 if (($7 | 0) <= 0) _celt_fatal(40226, 40213, 489);
 $16 = Math_imul(HEAP32[$0 + 44 >> 2] | 0, $9) | 0;
 if ((Math_imul((HEAP16[$12 + ($7 << 1) >> 1] | 0) - (HEAP16[$12 + ($7 + -1 << 1) >> 1] | 0) | 0, $9) | 0) < 9) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = $0 + 8 | 0;
 $$012 = 0;
 $$02 = 0;
 $$06 = 0;
 $$09 = 0;
 while (1) {
  $28 = Math_imul($$012, $16) | 0;
  $$013 = 0;
  $$1 = $$02;
  $$110 = $$09;
  $$17 = $$06;
  while (1) {
   if (($$013 | 0) == ($7 | 0)) break;
   $31 = HEAP16[$12 + ($$013 << 1) >> 1] | 0;
   $34 = $1 + ((Math_imul($31, $9) | 0) << 2) + ($28 << 2) | 0;
   $35 = $$013 + 1 | 0;
   $40 = Math_imul((HEAP16[$12 + ($35 << 1) >> 1] | 0) - $31 | 0, $9) | 0;
   if (($40 | 0) < 9) {
    $$211 = $$110;
    $$28 = $$17;
    $$3 = $$1;
   } else {
    $42 = +($40 | 0);
    $$01 = 0;
    $$sroa$0$0 = 0;
    $$sroa$5$0 = 0;
    $$sroa$9$2 = 0;
    while (1) {
     if (($$01 | 0) == ($40 | 0)) break;
     $44 = +HEAPF32[$34 + ($$01 << 2) >> 2];
     $46 = $44 * $44 * $42;
     $$01 = $$01 + 1 | 0;
     $$sroa$0$0 = $$sroa$0$0 + ($46 < .25 & 1) | 0;
     $$sroa$5$0 = $$sroa$5$0 + ($46 < .0625 & 1) | 0;
     $$sroa$9$2 = $$sroa$9$2 + ($46 < .015625 & 1) | 0;
    }
    if (($$013 | 0) > ((HEAP32[$27 >> 2] | 0) + -4 | 0)) $$2 = $$1 + (_celt_udiv($$sroa$5$0 + $$sroa$0$0 << 5, $40) | 0) | 0; else $$2 = $$1;
    $73 = HEAP32[$10 + ($$013 << 2) >> 2] | 0;
    $$211 = $$110 + (Math_imul((($$sroa$9$2 << 1 | 0) >= ($40 | 0) & 1) + (($$sroa$5$0 << 1 | 0) >= ($40 | 0) & 1) + (($$sroa$0$0 << 1 | 0) >= ($40 | 0) & 1) | 0, $73) | 0) | 0;
    $$28 = $$17 + $73 | 0;
    $$3 = $$2;
   }
   $$013 = $35;
   $$1 = $$3;
   $$110 = $$211;
   $$17 = $$28;
  }
  $$012 = $$012 + 1 | 0;
  if (($$012 | 0) >= ($8 | 0)) break; else {
   $$02 = $$1;
   $$06 = $$17;
   $$09 = $$110;
  }
 }
 if ($6 | 0) {
  if (!$$1) $$4 = 0; else $$4 = _celt_udiv($$1, Math_imul(4 - (HEAP32[$27 >> 2] | 0) + $7 | 0, $8) | 0) | 0;
  $88 = (HEAP32[$4 >> 2] | 0) + $$4 >> 1;
  HEAP32[$4 >> 2] = $88;
  switch (HEAP32[$5 >> 2] | 0) {
  case 2:
   {
    $$6 = $88 + 4 | 0;
    break;
   }
  case 0:
   {
    $$6 = $88 + -4 | 0;
    break;
   }
  default:
   $$6 = $88;
  }
  HEAP32[$5 >> 2] = ($$6 | 0) > 22 ? 2 : ($$6 | 0) > 18 & 1;
 }
 if (($$17 | 0) <= 0) _celt_fatal(40250, 40213, 545);
 if (($$110 | 0) <= -1) _celt_fatal(40278, 40213, 546);
 $97 = _celt_udiv($$110 << 8, $$17) | 0;
 $100 = $97 + (HEAP32[$2 >> 2] | 0) >> 1;
 HEAP32[$2 >> 2] = $100;
 $105 = ($100 * 3 | 0) + (384 - ($3 << 7) | 64) | 0;
 if (($105 | 0) < 318) {
  $$0 = 3;
  return $$0 | 0;
 }
 if (($105 | 0) < 1022) {
  $$0 = 2;
  return $$0 | 0;
 } else return ($105 | 0) < 1534 | 0;
 return 0;
}

function _compute_vbr($$0$2$val, $$0$5$val, $0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $$0$2$val = $$0$2$val | 0;
 $$0$5$val = $$0$5$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 $12 = +$12;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = +$15;
 $16 = +$16;
 var $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$spec$select6 = 0, $104 = 0, $105 = 0, $108 = 0, $117 = 0, $118 = 0, $125 = 0, $126 = 0, $21 = 0, $22 = 0, $30 = 0, $32 = 0.0, $46 = 0, $54 = 0.0, $58 = 0.0, $64 = 0, $69 = 0, $73 = 0.0, $77 = 0.0, $81 = 0, $86 = 0, $92 = 0, $93 = 0, $phitmp = 0, $spec$select = 0, $spec$select10 = 0, $spec$select16 = 0;
 $spec$select = ($4 | 0) == 0 ? $$0$2$val : $4;
 $21 = HEAP16[$$0$5$val + ($spec$select << 1) >> 1] << $2;
 $22 = ($5 | 0) == 2;
 if ($22) $$01 = $21 + (HEAP16[$$0$5$val + ((($spec$select | 0) > ($6 | 0) ? $6 : $spec$select) << 1) >> 1] << $2) | 0; else $$01 = $21;
 $30 = (HEAP32[$0 >> 2] | 0) == 0;
 if ($30) $$02 = $1; else {
  $32 = +HEAPF32[$0 + 16 >> 2];
  if ($32 < .4) $$02 = $1 - ~~((.4000000059604645 - $32) * +($$01 << 3 | 0)) | 0; else $$02 = $1;
 }
 if ($22) {
  $$spec$select6 = ($spec$select | 0) > ($6 | 0) ? $6 : $spec$select;
  $46 = (HEAP16[$$0$5$val + ($$spec$select6 << 1) >> 1] << $2) - $$spec$select6 | 0;
  $54 = +($46 | 0) * .800000011920929 / +($$01 | 0) * +($$02 | 0);
  $58 = (($8 < 1.0 ? $8 : 1.0) + -.10000000149011612) * +($46 << 3 | 0);
  $$1 = $$02 - ~~($54 < $58 ? $54 : $58) | 0;
 } else $$1 = $$02;
 $64 = $$1 + ($9 - (19 << $2)) | 0;
 $69 = $64 + ~~(($10 + -.04399999976158142) * +($64 | 0)) | 0;
 if (($13 | 0) == 0 & ($30 ^ 1)) {
  $73 = +HEAPF32[$0 + 4 >> 2] + -.15000000596046448;
  $77 = +($$01 << 3 | 0);
  $81 = $69 + ~~($77 * 1.2000000476837158 * ($73 < 0.0 ? -.11999999731779099 : $73 + -.11999999731779099)) | 0;
  if (!$11) $$2 = $81; else $$2 = $81 + ~~($77 * .800000011920929) | 0;
 } else $$2 = $69;
 $86 = ($14 | 0) == 0;
 if (($13 | 0) == 0 & ($86 ^ 1)) {
  $92 = $$2 + ~~(+($$01 << 3 | 0) * $15) | 0;
  $93 = ($$2 | 0) / 4 | 0;
  $$3 = ($93 | 0) > ($92 | 0) ? $93 : $92;
 } else $$3 = $$2;
 $104 = ~~(+((Math_imul(HEAP16[$$0$5$val + ($$0$2$val + -2 << 1) >> 1] << $2, $5) | 0) << 3 | 0) * $12);
 $105 = $$3 >> 2;
 $spec$select10 = ($105 | 0) < ($104 | 0) ? $104 : $105;
 $108 = ($$3 | 0) < ($spec$select10 | 0) ? $$3 : $spec$select10;
 if (($13 | 0) == 0 & ($86 ^ 1)) {
  $$5 = $108;
  $125 = $1 << 1;
  $126 = ($125 | 0) < ($$5 | 0);
  $spec$select16 = $126 ? $125 : $$5;
  return $spec$select16 | 0;
 }
 if (!$7) $$4 = $108; else $$4 = ~~(+($108 - $1 | 0) * .6700000166893005) + $1 | 0;
 if (!($86 & $10 < .20000000298023224)) {
  $$5 = $$4;
  $125 = $1 << 1;
  $126 = ($125 | 0) < ($$5 | 0);
  $spec$select16 = $126 ? $125 : $$5;
  return $spec$select16 | 0;
 }
 $117 = 96e3 - $3 | 0;
 $118 = ($117 | 0) > 32e3;
 $phitmp = ($3 | 0) > 96e3;
 $$5 = $$4 + ~~(($phitmp | $118 ? ($phitmp & ($118 ^ 1) ? 0.0 : .09919999539852142) : +($117 | 0) * 3.099999958067201e-06) * $16 * +($$4 | 0)) | 0;
 $125 = $1 << 1;
 $126 = ($125 | 0) < ($$5 | 0);
 $spec$select16 = $126 ? $125 : $$5;
 return $spec$select16 | 0;
}

function _check_control_input($0) {
 $0 = $0 | 0;
 var $27 = 0, $3 = 0, $30 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
 if (!$0) _celt_fatal(45261, 45298, 41);
 $3 = HEAP32[$0 + 8 >> 2] | 0;
 L4 : do if (($3 | 0) < 24e3) {
  if (($3 | 0) < 12e3) switch ($3 | 0) {
  case 8e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  }
  if (($3 | 0) < 16e3) switch ($3 | 0) {
  case 12e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  } else switch ($3 | 0) {
  case 16e3:
   {
    label = 4;
    break L4;
    break;
   }
  default:
   break L4;
  }
 } else if (($3 | 0) < 44100) if (($3 | 0) < 32e3) switch ($3 | 0) {
 case 24e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else switch ($3 | 0) {
 case 32e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else if (($3 | 0) < 48e3) switch ($3 | 0) {
 case 44100:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } else switch ($3 | 0) {
 case 48e3:
  {
   label = 4;
   break L4;
   break;
  }
 default:
  break L4;
 } while (0);
 L22 : do if ((label | 0) == 4) {
  $5 = HEAP32[$0 + 20 >> 2] | 0;
  L24 : do if (($5 | 0) < 12e3) switch ($5 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($5 | 0) < 16e3) switch ($5 | 0) {
  case 12e3:
   {
    break L24;
    break;
   }
  default:
   break L22;
  } else switch ($5 | 0) {
  case 16e3:
   {
    break L24;
    break;
   }
  default:
   break L22;
  } while (0);
  $7 = HEAP32[$0 + 12 >> 2] | 0;
  L31 : do if (($7 | 0) < 12e3) switch ($7 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($7 | 0) < 16e3) switch ($7 | 0) {
  case 12e3:
   {
    break L31;
    break;
   }
  default:
   break L22;
  } else switch ($7 | 0) {
  case 16e3:
   {
    break L31;
    break;
   }
  default:
   break L22;
  } while (0);
  $9 = HEAP32[$0 + 16 >> 2] | 0;
  L38 : do if (($9 | 0) < 12e3) switch ($9 | 0) {
  case 8e3:
   break;
  default:
   break L22;
  } else if (($9 | 0) < 16e3) switch ($9 | 0) {
  case 12e3:
   {
    break L38;
    break;
   }
  default:
   break L22;
  } else switch ($9 | 0) {
  case 16e3:
   {
    break L38;
    break;
   }
  default:
   break L22;
  } while (0);
  if (!(($9 | 0) > ($5 | 0) | ($7 | 0) < ($5 | 0) | ($9 | 0) > ($7 | 0))) {
   switch (HEAP32[$0 + 24 >> 2] | 0) {
   case 60:
   case 40:
   case 20:
   case 10:
    break;
   default:
    _celt_fatal(48340, 45298, 69);
   }
   if ((HEAP32[$0 + 32 >> 2] | 0) >>> 0 > 100) _celt_fatal(48340, 45298, 73);
   if ((HEAP32[$0 + 48 >> 2] | 0) >>> 0 > 1) _celt_fatal(48340, 45298, 77);
   if ((HEAP32[$0 + 52 >> 2] | 0) >>> 0 > 1) _celt_fatal(48340, 45298, 81);
   if ((HEAP32[$0 + 40 >> 2] | 0) >>> 0 > 1) _celt_fatal(48340, 45298, 85);
   $27 = HEAP32[$0 >> 2] | 0;
   if (($27 + -1 | 0) >>> 0 > 1) _celt_fatal(48340, 45298, 89);
   $30 = HEAP32[$0 + 4 >> 2] | 0;
   if (($30 + -1 | 0) >>> 0 > 1) _celt_fatal(48340, 45298, 93);
   if (($30 | 0) > ($27 | 0)) _celt_fatal(48340, 45298, 97);
   if ((HEAP32[$0 + 36 >> 2] | 0) >>> 0 > 10) _celt_fatal(48340, 45298, 101); else return;
  }
 } while (0);
 _celt_fatal(48340, 45298, 62);
}

function _alloc_trim_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = +$9;
 $10 = $10 | 0;
 $11 = +$11;
 $12 = $12 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$03 = 0, $$04 = 0.0, $$06 = 0, $$1 = 0.0, $$15 = 0.0, $$17 = 0, $$2 = 0.0, $$28 = 0, $$3 = 0.0, $108 = 0.0, $109 = 0, $114 = 0.0, $120 = 0.0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $30 = 0, $39 = 0.0, $41 = 0.0, $43 = 0, $46 = 0, $47 = 0, $51 = 0, $58 = 0.0, $61 = 0.0, $63 = 0.0, $69 = 0.0, $70 = 0.0, $76 = 0.0, $78 = 0.0, $83 = 0.0, $85 = 0.0, $87 = 0, $88 = 0, $phitmp = 0, $phitmp2 = 0;
 if (($12 | 0) < 64e3) $$1 = 4.0; else if (($12 | 0) < 8e4) $$1 = +($12 + -64e3 >> 10 | 0) * .0625 + 4.0; else $$1 = 5.0;
 if (($5 | 0) == 2) {
  $21 = $0 + 32 | 0;
  $$01 = 0.0;
  $$06 = 0;
  while (1) {
   if (($$06 | 0) == 8) break;
   $22 = HEAP32[$21 >> 2] | 0;
   $25 = HEAP16[$22 + ($$06 << 1) >> 1] | 0;
   $26 = $25 << $4;
   $30 = $$06 + 1 | 0;
   $$01 = $$01 + +_celt_inner_prod_c_23($1 + ($26 << 2) | 0, $1 + ($26 + $6 << 2) | 0, (HEAP16[$22 + ($30 << 1) >> 1] | 0) - $25 << $4);
   $$06 = $30;
  }
  $39 = +Math_abs(+($$01 * .125));
  $41 = $39 > 1.0 ? 1.0 : $39;
  $$0 = $41;
  $$17 = 8;
  while (1) {
   if (($$17 | 0) >= ($10 | 0)) break;
   $43 = HEAP32[$21 >> 2] | 0;
   $46 = HEAP16[$43 + ($$17 << 1) >> 1] | 0;
   $47 = $46 << $4;
   $51 = $$17 + 1 | 0;
   $58 = +Math_abs(+(+_celt_inner_prod_c_23($1 + ($47 << 2) | 0, $1 + ($47 + $6 << 2) | 0, (HEAP16[$43 + ($51 << 1) >> 1] | 0) - $46 << $4)));
   $$0 = $$0 < $58 ? $$0 : $58;
   $$17 = $51;
  }
  $61 = +Math_abs(+$$0);
  $63 = $61 > 1.0 ? 1.0 : $61;
  $69 = +Math_log(+(1.0010000467300415 - $41 * $41)) * 1.4426950408889634;
  $70 = $69 * .5;
  $76 = +Math_log(+(1.0010000467300415 - $63 * $63)) * 1.4426950408889634;
  $78 = $69 * .75;
  $83 = +HEAPF32[$8 >> 2] + .25;
  $85 = -(($70 > $76 ? $70 : $76) * .5);
  HEAPF32[$8 >> 2] = $83 < $85 ? $83 : $85;
  $$2 = $$1 + ($78 < -4.0 ? -4.0 : $78);
 } else $$2 = $$1;
 $87 = $3 + -1 | 0;
 $88 = $0 + 8 | 0;
 $$03 = 0;
 $$04 = 0.0;
 while (1) {
  $$15 = $$04;
  $$28 = 0;
  while (1) {
   if (($$28 | 0) >= ($87 | 0)) break;
   $$15 = $$15 + +HEAPF32[$2 + ($$28 + (Math_imul($$03, HEAP32[$88 >> 2] | 0) | 0) << 2) >> 2] * +(($$28 << 1) + 2 - $3 | 0);
   $$28 = $$28 + 1 | 0;
  }
  $$03 = $$03 + 1 | 0;
  if (($$03 | 0) >= ($5 | 0)) break; else $$04 = $$15;
 }
 $108 = ($$15 / +(Math_imul($87, $5) | 0) + 1.0) / 6.0;
 $109 = $108 > 2.0;
 $phitmp = $108 < -2.0;
 $114 = $$2 - ($phitmp | $109 ? ($phitmp & ($109 ^ 1) ? -2.0 : 2.0) : $108) - $11 - $9 * 2.0;
 if (!(HEAP32[$7 >> 2] | 0)) $$3 = $114; else {
  $120 = (+HEAPF32[$7 + 8 >> 2] + .05000000074505806) * 2.0;
  $121 = $120 > 2.0;
  $phitmp2 = $120 < -2.0;
  $$3 = $114 - ($phitmp2 | $121 ? ($phitmp2 & ($121 ^ 1) ? -2.0 : 2.0) : $120);
 }
 $126 = ~~+Math_floor(+($$3 + .5));
 if (($126 | 0) > 10) $129 = 10; else if (($126 | 0) < 0) {
  $128 = 0;
  return $128 | 0;
 } else $129 = $126;
 $128 = $129;
 return $128 | 0;
}

function _compute_stereo_width($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $$04 = 0.0, $$8 = 0.0, $10 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $106 = 0.0, $108 = 0.0, $109 = 0, $112 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $12 = 0.0, $15 = 0.0, $18 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $4 = 0, $59 = 0.0, $64 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $77 = 0.0, $79 = 0.0, $8 = 0, $81 = 0.0, $83 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $93 = 0.0, $or$cond7 = 0;
 $4 = ($2 | 0) / ($1 | 0) | 0;
 $7 = 25.0 / +((($4 | 0) > 50 ? $4 : 50) | 0);
 $8 = $1 + -3 | 0;
 $$0 = 0;
 $$01 = 0.0;
 $$02 = 0.0;
 $$04 = 0.0;
 while (1) {
  if (($$0 | 0) >= ($8 | 0)) break;
  $10 = $$0 << 1;
  $12 = +HEAPF32[$0 + ($10 << 2) >> 2];
  $15 = +HEAPF32[$0 + (($10 | 1) << 2) >> 2];
  $18 = +HEAPF32[$0 + (($10 | 2) << 2) >> 2];
  $21 = +HEAPF32[$0 + (($10 | 3) << 2) >> 2];
  $24 = +HEAPF32[$0 + (($10 | 4) << 2) >> 2];
  $27 = +HEAPF32[$0 + (($10 | 5) << 2) >> 2];
  $30 = +HEAPF32[$0 + (($10 | 6) << 2) >> 2];
  $33 = +HEAPF32[$0 + (($10 | 7) << 2) >> 2];
  $$0 = $$0 + 4 | 0;
  $$01 = $$01 + ($15 * $15 + $21 * $21 + $27 * $27 + $33 * $33);
  $$02 = $$02 + ($12 * $15 + $18 * $21 + $24 * $27 + $30 * $33);
  $$04 = $$04 + ($12 * $12 + $18 * $18 + $24 * $24 + $30 * $30);
 }
 $59 = 1.0 - $7;
 $or$cond7 = $$01 != $$01 | 0.0 != 0.0 | $$04 == $$04 & 0.0 == 0.0 & $$04 < 1.0e9 & $$01 < 1.0e9 ^ 1;
 $64 = +HEAPF32[$3 >> 2];
 $67 = $64 + $59 * (($or$cond7 ? 0.0 : $$04) - $64);
 HEAPF32[$3 >> 2] = $67;
 $68 = $3 + 4 | 0;
 $69 = +HEAPF32[$68 >> 2];
 $72 = $69 + $59 * (($or$cond7 ? 0.0 : $$02) - $69);
 HEAPF32[$68 >> 2] = $72;
 $73 = $3 + 8 | 0;
 $74 = +HEAPF32[$73 >> 2];
 $77 = $74 + $59 * (($or$cond7 ? 0.0 : $$01) - $74);
 HEAPF32[$73 >> 2] = $77;
 $79 = $67 < 0.0 ? 0.0 : $67;
 HEAPF32[$3 >> 2] = $79;
 $81 = $72 < 0.0 ? 0.0 : $72;
 HEAPF32[$68 >> 2] = $81;
 $83 = $77 < 0.0 ? 0.0 : $77;
 HEAPF32[$73 >> 2] = $83;
 if (($79 > $83 ? $79 : $83) > 7.999999797903001e-04) {
  $86 = +Math_sqrt(+$79);
  $87 = +Math_sqrt(+$83);
  $88 = +Math_sqrt(+$86);
  $89 = +Math_sqrt(+$87);
  $90 = $86 * $87;
  $$8 = $81 < $90 ? $81 : $90;
  HEAPF32[$68 >> 2] = $$8;
  $93 = $$8 / ($90 + 1.0000000036274937e-15);
  $102 = +Math_sqrt(+(1.0 - $93 * $93)) * (+Math_abs(+($88 - $89)) / ($88 + 1.0000000036274937e-15 + $89));
  $103 = $3 + 12 | 0;
  $104 = +HEAPF32[$103 >> 2];
  $106 = +($4 | 0);
  $108 = $104 + ($102 - $104) / $106;
  HEAPF32[$103 >> 2] = $108;
  $109 = $3 + 16 | 0;
  $112 = +HEAPF32[$109 >> 2] - .019999999552965164 / $106;
  $114 = $112 > $108 ? $112 : $108;
  HEAPF32[$109 >> 2] = $114;
  $116 = $114;
  $115 = $116 * 20.0;
  $117 = $115 > 1.0;
  $118 = $117 ? 1.0 : $115;
  return +$118;
 } else {
  $116 = +HEAPF32[$3 + 16 >> 2];
  $115 = $116 * 20.0;
  $117 = $115 > 1.0;
  $118 = $117 ? 1.0 : $115;
  return +$118;
 }
 return +(0.0);
}

function _silk_NSQ_wrapper_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $35 = 0, $56 = 0.0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $6 = sp + 368 | 0;
 $7 = sp + 352 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 240 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 16 | 0;
 $13 = sp;
 $15 = HEAP32[$0 + 4580 >> 2] | 0;
 $16 = $0 + 4636 | 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($15 | 0)) break;
  $18 = HEAP32[$16 >> 2] | 0;
  $19 = $$02 * 24 | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($18 | 0)) break;
   $21 = $19 + $$01 | 0;
   HEAP16[$10 + ($21 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 244 + ($21 << 2) >> 2] * 8192.0) | 0;
   $$01 = $$01 + 1 | 0;
  }
  $$02 = $$02 + 1 | 0;
 }
 $$13 = 0;
 while (1) {
  if (($$13 | 0) >= ($15 | 0)) break;
  $35 = (_silk_float2int(+HEAPF32[$1 + 644 + ($$13 << 2) >> 2] * 16384.0) | 0) << 16;
  HEAP32[$11 + ($$13 << 2) >> 2] = $35 | (_silk_float2int(+HEAPF32[$1 + 628 + ($$13 << 2) >> 2] * 16384.0) | 0) & 65535;
  HEAP32[$12 + ($$13 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + 660 + ($$13 << 2) >> 2] * 16384.0) | 0;
  HEAP32[$13 + ($$13 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + 676 + ($$13 << 2) >> 2] * 16384.0) | 0;
  $$13 = $$13 + 1 | 0;
 }
 $56 = +HEAPF32[$1 + 692 >> 2] * 1024.0;
 $57 = $15 * 5 | 0;
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($57 | 0)) break;
  HEAP16[$9 + ($$2 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 144 + ($$2 << 2) >> 2] * 16384.0) | 0;
  $$2 = $$2 + 1 | 0;
 }
 $66 = _silk_float2int($56) | 0;
 $67 = $0 + 4640 | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 2) break;
  $68 = HEAP32[$67 >> 2] | 0;
  $$3 = 0;
  while (1) {
   if (($$3 | 0) >= ($68 | 0)) break;
   HEAP16[$8 + ($$1 << 5) + ($$3 << 1) >> 1] = _silk_float2int(+HEAPF32[$1 + 16 + ($$1 << 6) + ($$3 << 2) >> 2] * 4096.0) | 0;
   $$3 = $$3 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 }
 $$4 = 0;
 while (1) {
  if (($$4 | 0) >= ($15 | 0)) break;
  HEAP32[$7 + ($$4 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + ($$4 << 2) >> 2] * 65536.0) | 0;
  $$4 = $$4 + 1 | 0;
 }
 if ((HEAP8[$2 + 29 >> 0] | 0) == 2) $$0 = HEAP16[40164 + (HEAP8[$2 + 33 >> 0] << 1) >> 1] | 0; else $$0 = 0;
 $95 = HEAP32[$0 + 4584 >> 2] | 0;
 $$5 = 0;
 while (1) {
  if (($$5 | 0) >= ($95 | 0)) break;
  HEAP16[$6 + ($$5 << 1) >> 1] = _silk_float2int(+HEAPF32[$5 + ($$5 << 2) >> 2]) | 0;
  $$5 = $$5 + 1 | 0;
 }
 if ((HEAP32[$0 + 4628 >> 2] | 0) <= 1) if ((HEAP32[$0 + 4672 >> 2] | 0) <= 0) {
  _silk_NSQ_c($0, $3, $2, $6, $4, $8, $9, $10, $13, $12, $11, $7, $1 + 228 | 0, $66, $$0);
  STACKTOP = sp;
  return;
 }
 _silk_NSQ_del_dec_c($0, $3, $2, $6, $4, $8, $9, $10, $13, $12, $11, $7, $1 + 228 | 0, $66, $$0);
 STACKTOP = sp;
 return;
}

function _anti_collapse($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 var $$0 = 0, $$02 = 0.0, $$03 = 0.0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$1 = 0, $$19 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $39 = 0.0, $40 = 0, $44 = 0.0, $45 = 0, $46 = 0, $48 = 0, $50 = 0.0, $52 = 0.0, $53 = 0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $65 = 0.0, $73 = 0.0, $77 = 0.0, $79 = 0, $85 = 0, $87 = 0, $88 = 0.0, $96 = 0, $spec$select = 0.0;
 $13 = $0 + 32 | 0;
 $14 = $0 + 8 | 0;
 $15 = ($4 | 0) == 1;
 $16 = ($3 | 0) == 3;
 $17 = 1 << $3;
 $$06 = $6;
 $$08 = $12;
 while (1) {
  if (($$06 | 0) >= ($7 | 0)) break;
  $19 = HEAP32[$13 >> 2] | 0;
  $20 = $$06 + 1 | 0;
  $27 = (HEAP16[$19 + ($20 << 1) >> 1] | 0) - (HEAP16[$19 + ($$06 << 1) >> 1] | 0) | 0;
  $39 = +Math_exp(+(+((_celt_udiv((HEAP32[$11 + ($$06 << 2) >> 2] | 0) + 1 | 0, $27) | 0) >>> $3 | 0) * -.125 * .6931471805599453)) * .5;
  $40 = $27 << $3;
  $44 = 1.0 / +Math_sqrt(+(+($40 | 0)));
  $45 = Math_imul($$06, $4) | 0;
  $$07 = 0;
  $$19 = $$08;
  while (1) {
   $46 = HEAP32[$14 >> 2] | 0;
   $48 = (Math_imul($$07, $46) | 0) + $$06 | 0;
   $50 = +HEAPF32[$9 + ($48 << 2) >> 2];
   $52 = +HEAPF32[$10 + ($48 << 2) >> 2];
   if ($15) {
    $53 = $46 + $$06 | 0;
    $55 = +HEAPF32[$9 + ($53 << 2) >> 2];
    $57 = $50 > $55 ? $50 : $55;
    $59 = +HEAPF32[$10 + ($53 << 2) >> 2];
    if ($52 > $59) {
     $$02 = $52;
     $$03 = $57;
    } else {
     $$02 = $59;
     $$03 = $57;
    }
   } else {
    $$02 = $52;
    $$03 = $50;
   }
   $65 = +HEAPF32[$8 + ($48 << 2) >> 2] - ($$03 < $$02 ? $$03 : $$02);
   $73 = +Math_exp(+(-($65 < 0.0 ? 0.0 : $65) * .6931471805599453)) * 2.0;
   $spec$select = $16 ? $73 * 1.4142135381698608 : $73;
   $77 = ($39 < $spec$select ? $39 : $spec$select) * $44;
   $79 = $1 + ((Math_imul($$07, $5) | 0) << 2) | 0;
   $85 = $79 + (HEAP16[(HEAP32[$13 >> 2] | 0) + ($$06 << 1) >> 1] << $3 << 2) | 0;
   $87 = $2 + ($45 + $$07) | 0;
   $88 = -$77;
   $$0 = 0;
   $$04 = 0;
   $$2 = $$19;
   while (1) {
    if (($$04 | 0) >= ($17 | 0)) break;
    L13 : do if (!(1 << $$04 & HEAPU8[$87 >> 0])) {
     $$05 = 0;
     $$3 = $$2;
     while (1) {
      if (($$05 | 0) >= ($27 | 0)) {
       $$1 = 1;
       $$4 = $$3;
       break L13;
      }
      $96 = _celt_lcg_rand($$3) | 0;
      HEAPF32[$85 + (($$05 << $3) + $$04 << 2) >> 2] = ($96 & 32768 | 0) == 0 ? $88 : $77;
      $$05 = $$05 + 1 | 0;
      $$3 = $96;
     }
    } else {
     $$1 = $$0;
     $$4 = $$2;
    } while (0);
    $$0 = $$1;
    $$04 = $$04 + 1 | 0;
    $$2 = $$4;
   }
   if ($$0 | 0) _renormalise_vector($85, $40, 1.0);
   $$07 = $$07 + 1 | 0;
   if (($$07 | 0) >= ($4 | 0)) break; else $$19 = $$2;
  }
  $$06 = $20;
  $$08 = $$2;
 }
 return;
}

function _quant_band($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = +$8;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$012 = 0, $$014 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$07 = 0, $$09 = 0, $$1 = 0, $$113 = 0, $$115 = 0, $$15 = 0, $$18 = 0, $$2 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $27 = 0, $28 = 0, $51 = 0, $56 = 0, $61 = 0, $67 = 0, $68 = 0, $74 = 0, $79 = 0, $83 = 0.0, $spec$select = 0;
 $11 = HEAP32[$0 >> 2] | 0;
 $13 = HEAP32[$0 + 24 >> 2] | 0;
 $15 = ($4 | 0) == 1 & 1;
 $16 = _celt_udiv($2, $4) | 0;
 if (($2 | 0) == 1) {
  _quant_band_n1($0, $1, 0, $3, $7);
  $$0 = 1;
  return $$0 | 0;
 }
 $spec$select = ($13 | 0) > 0 ? $13 : 0;
 do if (!$9) $$09 = $5; else if (!$5) $$09 = 0; else {
  if (($13 | 0) < 1) if (!(($16 & 1 | 0) == 0 & ($13 | 0) != 0 | ($4 | 0) > 1)) {
   $$09 = $5;
   break;
  }
  _memcpy($9 | 0, $5 | 0, $2 << 2 | 0) | 0;
  $$09 = $9;
 } while (0);
 $27 = ($11 | 0) == 0;
 $28 = ($$09 | 0) == 0;
 $$014 = $10;
 $$03 = 0;
 while (1) {
  if ($$03 >>> 0 >= $spec$select >>> 0) break;
  if (!$27) _haar1($1, $2 >> $$03, 1 << $$03);
  if (!$28) _haar1($$09, $2 >> $$03, 1 << $$03);
  $$014 = (HEAPU8[16 + ($$014 >> 4) >> 0] | 0) << 2 | (HEAPU8[16 + ($$014 & 15) >> 0] | 0);
  $$03 = $$03 + 1 | 0;
 }
 $$011 = 0;
 $$012 = $16 << $spec$select;
 $$02 = $13;
 $$07 = $4 >> $spec$select;
 $$115 = $$014;
 while (1) {
  if (!(($$012 & 1 | 0) == 0 & ($$02 | 0) < 0)) break;
  if (!$27) _haar1($1, $$012, $$07);
  if (!$28) _haar1($$09, $$012, $$07);
  $51 = $$115 | $$115 << $$07;
  $$011 = $$011 + 1 | 0;
  $$012 = $$012 >> 1;
  $$02 = $$02 + 1 | 0;
  $$07 = $$07 << 1;
  $$115 = $51;
 }
 $56 = ($$07 | 0) > 1;
 if ($56) {
  if (!$27) _deinterleave_hadamard($1, $$012 >> $spec$select, $$07 << $spec$select, $15);
  if (!$28) _deinterleave_hadamard($$09, $$012 >> $spec$select, $$07 << $spec$select, $15);
 }
 $61 = _quant_partition($0, $1, $2, $3, $$07, $$09, $6, $8, $$115) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0 = $61;
  return $$0 | 0;
 }
 if ($56) _interleave_hadamard($1, $$012 >> $spec$select, $$07 << $spec$select, $15);
 $$04 = $61;
 $$1 = 0;
 $$113 = $$012;
 $$18 = $$07;
 while (1) {
  if (($$1 | 0) == ($$011 | 0)) break;
  $67 = $$18 >> 1;
  $68 = $$113 << 1;
  _haar1($1, $68, $67);
  $$04 = $$04 | $$04 >>> $67;
  $$1 = $$1 + 1 | 0;
  $$113 = $68;
  $$18 = $67;
 }
 $$15 = $$04;
 $$2 = 0;
 while (1) {
  if ($$2 >>> 0 >= $spec$select >>> 0) break;
  $74 = HEAP8[32 + $$15 >> 0] | 0;
  _haar1($1, $2 >> $$2, 1 << $$2);
  $$15 = $74 & 255;
  $$2 = $$2 + 1 | 0;
 }
 $79 = $$18 << $spec$select;
 L53 : do if ($7 | 0) {
  $83 = +Math_sqrt(+(+($2 | 0)));
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($2 | 0)) break L53;
   HEAPF32[$7 + ($$01 << 2) >> 2] = +HEAPF32[$1 + ($$01 << 2) >> 2] * $83;
   $$01 = $$01 + 1 | 0;
  }
 } while (0);
 $$0 = $$15 & (1 << $79) + -1;
 return $$0 | 0;
}

function _silk_NLSF_encode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $108 = 0, $11 = 0, $15 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $63 = 0, $7 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 32 | 0;
 $11 = sp;
 if ($6 >>> 0 >= 3) _celt_fatal(44916, 44969, 63);
 $15 = $2 + 2 | 0;
 _silk_NLSF_stabilize($1, HEAP32[$2 + 36 >> 2] | 0, HEAP16[$15 >> 1] | 0);
 $18 = HEAP16[$2 >> 1] | 0;
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($18 & 65535) << 2) | 0) + 15 & -16) | 0;
 $21 = $2 + 8 | 0;
 $23 = $2 + 12 | 0;
 _silk_NLSF_VQ($20, $1, HEAP32[$21 >> 2] | 0, HEAP32[$23 >> 2] | 0, $18 << 16 >> 16, HEAP16[$15 >> 1] | 0);
 $28 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 _silk_insertion_sort_increasing($20, $28, HEAP16[$2 >> 1] | 0, $5);
 $31 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 4) | 0) + 15 & -16) | 0;
 $34 = $2 + 32 | 0;
 $35 = $2 + 4 | 0;
 $36 = $2 + 6 | 0;
 $37 = $2 + 16 | 0;
 $38 = $6 >> 1;
 $40 = $4 << 14 >> 16;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($5 | 0)) break;
  $43 = HEAP32[$28 + ($$01 << 2) >> 2] | 0;
  $46 = HEAP16[$15 >> 1] | 0;
  $47 = Math_imul($43, $46) | 0;
  $48 = (HEAP32[$21 >> 2] | 0) + $47 | 0;
  $50 = (HEAP32[$23 >> 2] | 0) + ($47 << 1) | 0;
  $$02 = 0;
  while (1) {
   if (($$02 | 0) >= ($46 | 0)) break;
   $63 = HEAP16[$50 + ($$02 << 1) >> 1] | 0;
   HEAP16[$8 + ($$02 << 1) >> 1] = (Math_imul((HEAPU16[$1 + ($$02 << 1) >> 1] | 0) - (HEAPU8[$48 + $$02 >> 0] << 7) << 16 >> 16, $63) | 0) >>> 14;
   HEAP16[$9 + ($$02 << 1) >> 1] = _silk_DIV32_varQ_361(HEAP16[$3 + ($$02 << 1) >> 1] | 0, Math_imul($63, $63) | 0) | 0;
   $$02 = $$02 + 1 | 0;
  }
  _silk_NLSF_unpack($11, $10, $2, $43);
  $83 = _silk_NLSF_del_dec_quant($33 + ($$01 << 4) | 0, $8, $9, $10, $11, HEAP32[$34 >> 2] | 0, HEAP16[$35 >> 1] | 0, HEAP16[$36 >> 1] | 0, $4, HEAP16[$15 >> 1] | 0) | 0;
  $84 = $31 + ($$01 << 2) | 0;
  HEAP32[$84 >> 2] = $83;
  $89 = (HEAP32[$37 >> 2] | 0) + (Math_imul($38, HEAP16[$2 >> 1] | 0) | 0) | 0;
  if (!$43) $$0 = 256 - (HEAPU8[$89 >> 0] | 0) | 0; else $$0 = (HEAPU8[$89 + ($43 + -1) >> 0] | 0) - (HEAPU8[$89 + $43 >> 0] | 0) | 0;
  HEAP32[$84 >> 2] = $83 + (Math_imul(67108864 - ((_silk_lin2log($$0) | 0) << 16) >> 16, $40) | 0);
  $$01 = $$01 + 1 | 0;
 }
 _silk_insertion_sort_increasing($31, $7, $5, 1);
 $108 = HEAP32[$7 >> 2] | 0;
 HEAP8[$0 >> 0] = HEAP32[$28 + ($108 << 2) >> 2];
 _memcpy($0 + 1 | 0, $33 + ($108 << 4) | 0, HEAP16[$15 >> 1] | 0) | 0;
 _silk_NLSF_decode($1, $0, $2);
 STACKTOP = sp;
 return;
}

function _silk_find_pred_coefs_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $10 = 0, $11 = 0, $23 = 0, $26 = 0, $30 = 0, $32 = 0, $39 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $7 = 0, $74 = 0.0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $5 = sp + 1664 | 0;
 $6 = sp + 1584 | 0;
 $7 = sp + 1568 | 0;
 $8 = sp + 1536 | 0;
 $9 = sp;
 $10 = $0 + 4580 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $$03 = 0;
 while (1) {
  if (($$03 | 0) >= ($11 | 0)) break;
  HEAPF32[$7 + ($$03 << 2) >> 2] = 1.0 / +HEAPF32[$1 + ($$03 << 2) >> 2];
  $$03 = $$03 + 1 | 0;
 }
 do if ((HEAP8[$0 + 4765 >> 0] | 0) == 2) {
  $23 = $0 + 4640 | 0;
  $26 = $1 + 228 | 0;
  if (((HEAP32[$0 + 4592 >> 2] | 0) - (HEAP32[$23 >> 2] | 0) | 0) < ((HEAP32[$26 >> 2] | 0) + 2 | 0)) _celt_fatal(47009, 47126, 62); else {
   $30 = $0 + 4588 | 0;
   _silk_find_LTP_FLP($5, $6, $2, $26, HEAP32[$30 >> 2] | 0, $11);
   $32 = $1 + 144 | 0;
   _silk_quant_LTP_gains_FLP($32, $0 + 4740 | 0, $0 + 4768 | 0, $0 + 4656 | 0, $1 + 708 | 0, $5, $6, HEAP32[$30 >> 2] | 0, HEAP32[$10 >> 2] | 0);
   _silk_LTP_scale_ctrl_FLP($0, $1, $4);
   $39 = HEAP32[$23 >> 2] | 0;
   _silk_LTP_analysis_filter_FLP($9, $3 + (0 - $39 << 2) | 0, $32, $26, $7, HEAP32[$30 >> 2] | 0, HEAP32[$10 >> 2] | 0, $39);
   break;
  }
 } else {
  $44 = $0 + 4640 | 0;
  $45 = HEAP32[$44 >> 2] | 0;
  $48 = $0 + 4588 | 0;
  $$01 = $9;
  $$02 = $3 + (0 - $45 << 2) | 0;
  $$1 = 0;
  $50 = $11;
  $55 = $45;
  while (1) {
   if (($$1 | 0) >= ($50 | 0)) break;
   _silk_scale_copy_vector_FLP($$01, $$02, +HEAPF32[$7 + ($$1 << 2) >> 2], (HEAP32[$48 >> 2] | 0) + $55 | 0);
   $56 = HEAP32[$48 >> 2] | 0;
   $58 = HEAP32[$44 >> 2] | 0;
   $$01 = $$01 + ($56 + $58 << 2) | 0;
   $$02 = $$02 + ($56 << 2) | 0;
   $$1 = $$1 + 1 | 0;
   $50 = HEAP32[$10 >> 2] | 0;
   $55 = $58;
  }
  _memset($1 + 144 | 0, 0, $50 * 20 | 0) | 0;
  HEAPF32[$1 + 708 >> 2] = 0.0;
  HEAP32[$0 + 4656 >> 2] = 0;
 } while (0);
 if (!(HEAP32[$0 + 4664 >> 2] | 0)) {
  $74 = +_llvm_exp2_f64(+(+HEAPF32[$1 + 708 >> 2] / 3.0)) / 1.0e4;
  $$0 = $74 / (+HEAPF32[$1 + 700 >> 2] * .75 + .25);
 } else $$0 = .009999999776482582;
 _silk_find_LPC_FLP($0, $8, $9, $$0);
 $80 = $1 + 16 | 0;
 $81 = $0 + 4500 | 0;
 _silk_process_NLSFs_FLP($0, $80, $8, $81);
 _silk_residual_energy_FLP($1 + 712 | 0, $9, $80, $1, HEAP32[$0 + 4588 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$0 + 4640 >> 2] | 0);
 HEAP32[$81 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$81 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$81 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 HEAP32[$81 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
 HEAP32[$81 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
 HEAP32[$81 + 20 >> 2] = HEAP32[$8 + 20 >> 2];
 HEAP32[$81 + 24 >> 2] = HEAP32[$8 + 24 >> 2];
 HEAP32[$81 + 28 >> 2] = HEAP32[$8 + 28 >> 2];
 STACKTOP = sp;
 return;
}

function _silk_PLC_update($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$pre = 0, $$pre9 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $23 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $51 = 0, $52 = 0, $63 = 0, $75 = 0, $77 = 0, $82 = 0, $83 = 0, $88 = 0;
 $2 = $0 + 4172 | 0;
 $4 = HEAP8[$0 + 2765 >> 0] | 0;
 HEAP32[$0 + 4164 >> 2] = $4 << 24 >> 24;
 L1 : do if ($4 << 24 >> 24 == 2) {
  $10 = $0 + 4176 | 0;
  $$pre = HEAP32[$0 + 2332 >> 2] | 0;
  $$pre9 = HEAP32[$0 + 2324 >> 2] | 0;
  $$0 = 0;
  $$02 = 0;
  while (1) {
   $11 = Math_imul($$0, $$pre) | 0;
   $12 = $$pre9 + -1 | 0;
   if (($$0 | 0) == ($$pre9 | 0) ? 1 : ($11 | 0) >= (HEAP32[$1 + ($12 << 2) >> 2] | 0)) break;
   $$01 = 0;
   $$04 = 0;
   while (1) {
    if (($$01 | 0) == 5) break;
    $23 = $$04 + (HEAP16[$1 + 96 + ((($12 - $$0 | 0) * 5 | 0) + $$01 << 1) >> 1] | 0) | 0;
    $$01 = $$01 + 1 | 0;
    $$04 = $23;
   }
   if (($$04 | 0) > ($$02 | 0)) {
    $30 = $1 + 96 + (($$pre9 + 65535 - $$0 << 16 >> 16) * 5 << 1) | 0;
    HEAP16[$10 >> 1] = HEAP16[$30 >> 1] | 0;
    HEAP16[$10 + 2 >> 1] = HEAP16[$30 + 2 >> 1] | 0;
    HEAP16[$10 + 4 >> 1] = HEAP16[$30 + 4 >> 1] | 0;
    HEAP16[$10 + 6 >> 1] = HEAP16[$30 + 6 >> 1] | 0;
    HEAP16[$10 + 8 >> 1] = HEAP16[$30 + 8 >> 1] | 0;
    HEAP32[$2 >> 2] = HEAP32[$1 + ($12 - $$0 << 2) >> 2] << 8;
    $$13 = $$04;
   } else $$13 = $$02;
   $$0 = $$0 + 1 | 0;
   $$02 = $$13;
  }
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP16[$10 + 8 >> 1] = 0;
  HEAP16[$0 + 4180 >> 1] = $$02;
  if (($$02 | 0) < 11469) {
   $41 = (11744256 / ((($$02 | 0) > 1 ? $$02 : 1) >>> 0) | 0) << 16 >> 16;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 5) {
     $75 = $$pre9;
     $88 = $$pre;
     break L1;
    }
    $42 = $0 + 4176 + ($$1 << 1) | 0;
    HEAP16[$42 >> 1] = (Math_imul($41, HEAP16[$42 >> 1] | 0) | 0) >>> 10;
    $$1 = $$1 + 1 | 0;
   }
  }
  if (($$02 | 0) > 15565) {
   $51 = (255016960 / ($$02 | 0) | 0) << 16 >> 16;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) == 5) {
     $75 = $$pre9;
     $88 = $$pre;
     break L1;
    }
    $52 = $0 + 4176 + ($$2 << 1) | 0;
    HEAP16[$52 >> 1] = (Math_imul($51, HEAP16[$52 >> 1] | 0) | 0) >>> 14;
    $$2 = $$2 + 1 | 0;
   }
  } else {
   $75 = $$pre9;
   $88 = $$pre;
  }
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$0 + 2316 >> 2] << 16 >> 16) * 4608;
  $63 = $0 + 4176 | 0;
  HEAP32[$63 >> 2] = 0;
  HEAP32[$63 + 4 >> 2] = 0;
  HEAP16[$63 + 8 >> 1] = 0;
  $75 = HEAP32[$0 + 2324 >> 2] | 0;
  $88 = HEAP32[$0 + 2332 >> 2] | 0;
 } while (0);
 _memcpy($0 + 4186 | 0, $1 + 64 | 0, HEAP32[$0 + 2340 >> 2] << 1 | 0) | 0;
 HEAP16[$0 + 4240 >> 1] = HEAP32[$1 + 136 >> 2];
 $77 = $1 + 16 + ($75 + -2 << 2) | 0;
 $82 = HEAP32[$77 + 4 >> 2] | 0;
 $83 = $0 + 4244 | 0;
 HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$83 + 4 >> 2] = $82;
 HEAP32[$0 + 4260 >> 2] = $88;
 HEAP32[$0 + 4256 >> 2] = $75;
 return;
}

function _clt_mdct_backward_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$010 = 0, $$011 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pn = 0, $$pn1 = 0, $$pn2 = 0, $11 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $29 = 0.0, $31 = 0.0, $33 = 0.0, $36 = 0.0, $42 = 0, $52 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $61 = 0.0, $68 = 0, $69 = 0.0, $70 = 0.0, $74 = 0.0, $78 = 0.0, $89 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $95 = 0.0;
 $$011 = HEAP32[$0 + 24 >> 2] | 0;
 $$08 = 0;
 $$09 = HEAP32[$0 >> 2] | 0;
 while (1) {
  $11 = $$09 >> 1;
  if (($$08 | 0) >= ($5 | 0)) break;
  $$011 = $$011 + ($11 << 2) | 0;
  $$08 = $$08 + 1 | 0;
  $$09 = $11;
 }
 $14 = $$09 >> 2;
 $17 = $1 + ((Math_imul($11 + -1 | 0, $6) | 0) << 2) | 0;
 $19 = $2 + ($4 >> 1 << 2) | 0;
 $21 = HEAP32[$0 + 8 + ($5 << 2) >> 2] | 0;
 $24 = $6 << 1;
 $25 = 0 - $24 | 0;
 $$010 = $1;
 $$06 = HEAP32[$21 + 44 >> 2] | 0;
 $$07 = $17;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) >= ($14 | 0)) break;
  $29 = +HEAPF32[$$07 >> 2];
  $31 = +HEAPF32[$$011 + ($$1 << 2) >> 2];
  $33 = +HEAPF32[$$010 >> 2];
  $36 = +HEAPF32[$$011 + ($14 + $$1 << 2) >> 2];
  $42 = HEAP16[$$06 >> 1] << 1;
  HEAPF32[$19 + (($42 | 1) << 2) >> 2] = $29 * $31 + $33 * $36;
  HEAPF32[$19 + ($42 << 2) >> 2] = $33 * $31 - $29 * $36;
  $$010 = $$010 + ($24 << 2) | 0;
  $$06 = $$06 + 2 | 0;
  $$07 = $$07 + ($25 << 2) | 0;
  $$1 = $$1 + 1 | 0;
 }
 _opus_fft_impl($21, $19);
 $52 = $14 + 1 >> 1;
 $$05 = $19;
 $$2 = 0;
 $$pn = $19 + ($11 << 2) | 0;
 while (1) {
  $$04 = $$pn + -8 | 0;
  if (($$2 | 0) >= ($52 | 0)) break;
  $54 = $$05 + 4 | 0;
  $55 = +HEAPF32[$54 >> 2];
  $56 = +HEAPF32[$$05 >> 2];
  $58 = +HEAPF32[$$011 + ($$2 << 2) >> 2];
  $61 = +HEAPF32[$$011 + ($14 + $$2 << 2) >> 2];
  $68 = $$pn + -4 | 0;
  $69 = +HEAPF32[$68 >> 2];
  $70 = +HEAPF32[$$04 >> 2];
  HEAPF32[$$05 >> 2] = $55 * $58 + $56 * $61;
  HEAPF32[$68 >> 2] = $55 * $61 - $56 * $58;
  $74 = +HEAPF32[$$011 + ($14 - $$2 + -1 << 2) >> 2];
  $78 = +HEAPF32[$$011 + ($11 - $$2 + -1 << 2) >> 2];
  HEAPF32[$$04 >> 2] = $69 * $74 + $70 * $78;
  HEAPF32[$54 >> 2] = $69 * $78 - $70 * $74;
  $$05 = $$05 + 8 | 0;
  $$2 = $$2 + 1 | 0;
  $$pn = $$04;
 }
 $89 = ($4 | 0) / 2 | 0;
 $$01 = $3;
 $$02 = $2;
 $$3 = 0;
 $$pn1 = $2 + ($4 << 2) | 0;
 $$pn2 = $3 + ($4 << 2) | 0;
 while (1) {
  $$0 = $$pn2 + -4 | 0;
  $$03 = $$pn1 + -4 | 0;
  if (($$3 | 0) >= ($89 | 0)) break;
  $91 = +HEAPF32[$$03 >> 2];
  $92 = +HEAPF32[$$02 >> 2];
  $93 = +HEAPF32[$$0 >> 2];
  $95 = +HEAPF32[$$01 >> 2];
  HEAPF32[$$02 >> 2] = $93 * $92 - $95 * $91;
  HEAPF32[$$03 >> 2] = $95 * $92 + $93 * $91;
  $$01 = $$01 + 4 | 0;
  $$02 = $$02 + 4 | 0;
  $$3 = $$3 + 1 | 0;
  $$pn1 = $$03;
  $$pn2 = $$0;
 }
 return;
}

function _celt_iir($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $37 = 0, $40 = 0, $43 = 0, $47 = 0.0, $48 = 0.0, $5 = 0, $55 = 0.0, $56 = 0.0, $6 = 0, $66 = 0.0, $67 = 0.0, $7 = 0, $8 = 0, $80 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 $7 = $3 + 24 | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($7 << 2) | 0) + 15 & -16) | 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) == 24) break;
  HEAP32[$6 + ($$02 << 2) >> 2] = HEAP32[$1 + (24 - $$02 + -1 << 2) >> 2];
  $$02 = $$02 + 1 | 0;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 24) break;
  HEAPF32[$8 + ($$1 << 2) >> 2] = -+HEAPF32[$4 + (24 - $$1 + -1 << 2) >> 2];
  $$1 = $$1 + 1 | 0;
 }
 $$2 = 24;
 while (1) {
  if (($$2 | 0) >= ($7 | 0)) break;
  HEAPF32[$8 + ($$2 << 2) >> 2] = 0.0;
  $$2 = $$2 + 1 | 0;
 }
 $25 = $3 + -3 | 0;
 $26 = $5 + 4 | 0;
 $27 = $5 + 8 | 0;
 $28 = $5 + 12 | 0;
 $29 = $1 + 4 | 0;
 $30 = $1 + 8 | 0;
 $33 = (($25 | 0) > 0 ? $25 : 0) + 3 & -4;
 $$3 = 0;
 while (1) {
  if (($$3 | 0) >= ($25 | 0)) break;
  HEAP32[$5 >> 2] = HEAP32[$0 + ($$3 << 2) >> 2];
  $37 = $$3 | 1;
  HEAP32[$26 >> 2] = HEAP32[$0 + ($37 << 2) >> 2];
  $40 = $$3 | 2;
  HEAP32[$27 >> 2] = HEAP32[$0 + ($40 << 2) >> 2];
  $43 = $$3 | 3;
  HEAP32[$28 >> 2] = HEAP32[$0 + ($43 << 2) >> 2];
  _xcorr_kernel_c_127($6, $8 + ($$3 << 2) | 0, $5, 24);
  $47 = +HEAPF32[$5 >> 2];
  $48 = -$47;
  HEAPF32[$8 + ($$3 + 24 << 2) >> 2] = $48;
  HEAPF32[$2 + ($$3 << 2) >> 2] = $47;
  $55 = +HEAPF32[$26 >> 2] + +HEAPF32[$1 >> 2] * $48;
  HEAPF32[$26 >> 2] = $55;
  $56 = -$55;
  HEAPF32[$8 + ($$3 + 25 << 2) >> 2] = $56;
  HEAPF32[$2 + ($37 << 2) >> 2] = $55;
  $66 = +HEAPF32[$27 >> 2] + +HEAPF32[$1 >> 2] * $56 + +HEAPF32[$29 >> 2] * $48;
  HEAPF32[$27 >> 2] = $66;
  $67 = -$66;
  HEAPF32[$8 + ($$3 + 26 << 2) >> 2] = $67;
  HEAPF32[$2 + ($40 << 2) >> 2] = $66;
  $80 = +HEAPF32[$28 >> 2] + +HEAPF32[$1 >> 2] * $67 + +HEAPF32[$29 >> 2] * $56 + +HEAPF32[$30 >> 2] * $48;
  HEAPF32[$28 >> 2] = $80;
  HEAPF32[$8 + ($$3 + 27 << 2) >> 2] = -$80;
  HEAPF32[$2 + ($43 << 2) >> 2] = $80;
  $$3 = $$3 + 4 | 0;
 }
 $$4 = $33;
 while (1) {
  if (($$4 | 0) >= ($3 | 0)) break;
  $$0 = +HEAPF32[$0 + ($$4 << 2) >> 2];
  $$01 = 0;
  while (1) {
   if (($$01 | 0) == 24) break;
   $$0 = $$0 - +HEAPF32[$6 + ($$01 << 2) >> 2] * +HEAPF32[$8 + ($$4 + $$01 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
  }
  HEAPF32[$8 + ($$4 + 24 << 2) >> 2] = $$0;
  HEAPF32[$2 + ($$4 << 2) >> 2] = $$0;
  $$4 = $$4 + 1 | 0;
 }
 $$5 = 0;
 while (1) {
  if (($$5 | 0) == 24) break;
  HEAP32[$4 + ($$5 << 2) >> 2] = HEAP32[$2 + ($3 - $$5 + -1 << 2) >> 2];
  $$5 = $$5 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _silk_resampler_down2_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $16 = 0, $17 = 0, $25 = 0, $26 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $58 = 0, $6 = 0, $66 = 0, $75 = 0, $82 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $96 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1936 | 0;
 $4 = sp;
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 $6 = $4 + 16 | 0;
 $$01 = $1;
 $$02 = $2;
 $$03 = $3;
 while (1) {
  $spec$select = ($$03 | 0) < 480 ? $$03 : 480;
  _silk_resampler_private_AR2($5, $6, $$02, 40170, $spec$select);
  $$0 = $4;
  $$04 = $spec$select;
  $$1 = $$01;
  while (1) {
   if (($$04 | 0) <= 2) break;
   $9 = HEAP32[$$0 >> 2] | 0;
   $16 = $$0 + 4 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $25 = $$0 + 8 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $34 = $$0 + 12 | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   $42 = (($9 >> 16) * 4697 | 0) + ((($9 & 65535) * 4697 | 0) >>> 16) + ((($17 >> 16) * 10739 | 0) + ((($17 & 65535) * 10739 | 0) >>> 16)) + ((($26 >> 16) * 8276 | 0) + ((($26 & 65535) * 8276 | 0) >>> 16)) + ((($35 >> 16) * 1567 | 0) + ((($35 & 65535) * 1567 | 0) >>> 16)) | 0;
   if (($42 | 0) > 2097119) $49 = 32767; else if (($42 | 0) < -2097184) $49 = -32768; else $49 = ($42 >> 5) + 1 >> 1;
   $50 = $$1 + 2 | 0;
   HEAP16[$$1 >> 1] = $49;
   $51 = HEAP32[$16 >> 2] | 0;
   $58 = HEAP32[$25 >> 2] | 0;
   $66 = HEAP32[$34 >> 2] | 0;
   $75 = HEAP32[$$0 + 16 >> 2] | 0;
   $82 = (($51 >> 16) * 1567 | 0) + ((($51 & 65535) * 1567 | 0) >>> 16) + ((($58 >> 16) * 8276 | 0) + ((($58 & 65535) * 8276 | 0) >>> 16)) + ((($66 >> 16) * 10739 | 0) + ((($66 & 65535) * 10739 | 0) >>> 16)) + ((($75 >> 16) * 4697 | 0) + ((($75 & 65535) * 4697 | 0) >>> 16)) | 0;
   if (($82 | 0) > 2097119) $89 = 32767; else if (($82 | 0) < -2097184) $89 = -32768; else $89 = ($82 >> 5) + 1 >> 1;
   HEAP16[$50 >> 1] = $89;
   $$0 = $34;
   $$04 = $$04 + -3 | 0;
   $$1 = $$1 + 4 | 0;
  }
  $92 = $$03 - $spec$select | 0;
  if (($92 | 0) <= 0) break;
  $95 = $4 + ($spec$select << 2) | 0;
  HEAP32[$4 >> 2] = HEAP32[$95 >> 2];
  HEAP32[$4 + 4 >> 2] = HEAP32[$95 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$95 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$95 + 12 >> 2];
  $$01 = $$1;
  $$02 = $$02 + ($spec$select << 1) | 0;
  $$03 = $92;
 }
 $96 = $4 + ($spec$select << 2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$96 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$96 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$96 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$96 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _encode_multiframe_packet($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$alloca_mul = 0, $12 = 0, $26 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $63 = 0, $64 = 0, $72 = 0, $9 = 0, $spec$select = 0, $spec$select4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $9 = sp;
 $spec$select = ($2 | 0) == 2 ? 3 : $2 << 1;
 $12 = $0 + 148 | 0;
 if (!(HEAP32[$12 >> 2] | 0)) if ((HEAP32[$0 + 164 >> 2] | 0) == -1) $$01 = $5; else {
  $26 = ((HEAP32[$0 + 160 >> 2] | 0) * 3 | 0) / (((HEAP32[$0 + 144 >> 2] | 0) * 24 | 0) / (Math_imul($3, $2) | 0) | 0 | 0) | 0;
  $$01 = ($26 | 0) < ($5 | 0) ? $26 : $5;
 } else $$01 = $5;
 $29 = ($$01 - $spec$select | 0) / ($2 | 0) | 0;
 $spec$select4 = ($29 | 0) > 1275 ? 1276 : $29 + 1 | 0;
 $$alloca_mul = Math_imul($spec$select4, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 _opus_repacketizer_init($9);
 $34 = $0 + 136 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $0 + 128 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $0 + 120 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$0 + 14220 >> 2];
 HEAP32[$36 >> 2] = HEAP32[$0 + 14236 >> 2];
 $45 = HEAP32[$0 + 14188 >> 2] | 0;
 HEAP32[$38 >> 2] = $45;
 $46 = $0 + 68 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 if (!$47) HEAP32[$0 + 14228 >> 2] = $45; else HEAP32[$38 >> 2] = 1;
 $50 = $2 + -1 | 0;
 $51 = $0 + 18128 | 0;
 $52 = ($6 | 0) != 0;
 $53 = $0 + 112 | 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($2 | 0)) {
   label = 14;
   break;
  }
  HEAP32[$46 >> 2] = 0;
  HEAP32[$51 >> 2] = ($$02 | 0) < ($50 | 0) & 1;
  if ($52 & ($$02 | 0) == ($50 | 0)) HEAP32[$34 >> 2] = 1002;
  $63 = $33 + (Math_imul($$02, $spec$select4) | 0) | 0;
  $64 = _opus_encode_native($0, $1 + ((Math_imul($$02, Math_imul(HEAP32[$53 >> 2] | 0, $3) | 0) | 0) << 2) | 0, $3, $63, $spec$select4, $7, 0, 0, 0, 0, 0, $8) | 0;
  if (($64 | 0) < 0) {
   $$0 = -3;
   label = 16;
   break;
  }
  if ((_opus_repacketizer_cat($9, $63, $64) | 0) < 0) {
   $$0 = -3;
   label = 16;
   break;
  }
  $$02 = $$02 + 1 | 0;
 }
 if ((label | 0) == 14) {
  $72 = _opus_repacketizer_out_range_impl($9, $2, $4, $$01, (HEAP32[$12 >> 2] | 0) == 0 & 1) | 0;
  if (($72 | 0) < 0) {
   $$0 = -3;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$34 >> 2] = $35;
  HEAP32[$36 >> 2] = $37;
  HEAP32[$38 >> 2] = $39;
  HEAP32[$46 >> 2] = $47;
  $$0 = $72;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 16) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _pitch_search($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01 = 0, $$03 = 0, $$12 = 0, $$2 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $47 = 0.0, $5 = 0, $51 = 0, $57 = 0.0, $59 = 0.0, $6 = 0, $62 = 0.0, $71 = 0, $72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 $6 = $5;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 if (($2 | 0) <= 0) _celt_fatal(42238, 42225, 302);
 if (($3 | 0) <= 0) _celt_fatal(42195, 42225, 303);
 $13 = $2 >> 2;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($13 << 2) | 0) + 15 & -16) | 0;
 $15 = $2 + $3 >> 2;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 $17 = $3 >> 1;
 $18 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($17 << 2) | 0) + 15 & -16) | 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($13 | 0)) break;
  HEAP32[$14 + ($$01 << 2) >> 2] = HEAP32[$0 + ($$01 << 1 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 $$12 = 0;
 while (1) {
  if (($$12 | 0) >= ($15 | 0)) break;
  HEAP32[$16 + ($$12 << 2) >> 2] = HEAP32[$1 + ($$12 << 1 << 2) >> 2];
  $$12 = $$12 + 1 | 0;
 }
 $31 = $3 >> 2;
 _celt_pitch_xcorr_c($14, $16, $18, $13, $31);
 _find_best_pitch($18, $16, $13, $31, $5);
 $33 = HEAP32[$5 >> 2] << 1;
 $36 = HEAP32[$5 + 4 >> 2] << 1;
 $37 = $2 >> 1;
 $$03 = 0;
 while (1) {
  if (($$03 | 0) >= ($17 | 0)) break;
  $39 = $18 + ($$03 << 2) | 0;
  HEAPF32[$39 >> 2] = 0.0;
  $40 = $$03 - $33 | 0;
  if (((($40 | 0) > -1 ? $40 : 0 - $40 | 0) | 0) > 2) {
   $43 = $$03 - $36 | 0;
   if (((($43 | 0) > -1 ? $43 : 0 - $43 | 0) | 0) <= 2) label = 15;
  } else label = 15;
  if ((label | 0) == 15) {
   label = 0;
   $47 = +_celt_inner_prod_c_111($0, $1 + ($$03 << 2) | 0, $37);
   HEAPF32[$39 >> 2] = $47 < -1.0 ? -1.0 : $47;
  }
  $$03 = $$03 + 1 | 0;
 }
 _find_best_pitch($18, $1, $37, $17, $5);
 $51 = HEAP32[$5 >> 2] | 0;
 if (!(($51 | 0) > 0 & ($51 | 0) < ($17 + -1 | 0))) {
  $$2 = 0;
  $71 = $51 << 1;
  $72 = $71 - $$2 | 0;
  HEAP32[$4 >> 2] = $72;
  STACKTOP = sp;
  return;
 }
 $57 = +HEAPF32[$18 + ($51 + -1 << 2) >> 2];
 $59 = +HEAPF32[$18 + ($51 << 2) >> 2];
 $62 = +HEAPF32[$18 + ($51 + 1 << 2) >> 2];
 if ($62 - $57 > ($59 - $57) * .699999988079071) {
  $$2 = 1;
  $71 = $51 << 1;
  $72 = $71 - $$2 | 0;
  HEAP32[$4 >> 2] = $72;
  STACKTOP = sp;
  return;
 }
 if ($57 - $62 > ($59 - $62) * .699999988079071) {
  $$2 = -1;
  $71 = $51 << 1;
  $72 = $71 - $$2 | 0;
  HEAP32[$4 >> 2] = $72;
  STACKTOP = sp;
  return;
 }
 $$2 = 0;
 $71 = $51 << 1;
 $72 = $71 - $$2 | 0;
 HEAP32[$4 >> 2] = $72;
 STACKTOP = sp;
 return;
}

function _speex_resampler_process_float($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$01 = 0, $$03 = 0, $$05 = 0, $$06 = 0, $$1 = 0, $$12 = 0, $$16 = 0, $$2 = 0, $10 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $44 = 0, $48 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$6 >> 2] = $4;
 $9 = HEAP32[$3 >> 2] | 0;
 $10 = HEAP32[$5 >> 2] | 0;
 $14 = HEAP32[$0 + 28 >> 2] | 0;
 $16 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul($14, $1) | 0) << 2) | 0;
 $19 = (HEAP32[$0 + 24 >> 2] | 0) + -1 | 0;
 $20 = $14 - $19 | 0;
 $22 = HEAP32[$0 + 88 >> 2] | 0;
 $23 = $0 + 68 | 0;
 if (!(HEAP32[(HEAP32[$23 >> 2] | 0) + ($1 << 2) >> 2] | 0)) $$06 = $10; else {
  $29 = $10 - (_speex_resampler_magic($0, $1, $6, $10) | 0) | 0;
  if (!(HEAP32[(HEAP32[$23 >> 2] | 0) + ($1 << 2) >> 2] | 0)) $$06 = $29; else {
   $$12 = $9;
   $$2 = $29;
   $58 = HEAP32[$3 >> 2] | 0;
   $59 = $58 - $$12 | 0;
   HEAP32[$3 >> 2] = $59;
   $60 = HEAP32[$5 >> 2] | 0;
   $61 = $60 - $$2 | 0;
   HEAP32[$5 >> 2] = $61;
   STACKTOP = sp;
   return;
  }
 }
 $30 = $0 + 92 | 0;
 $$01 = $9;
 $$03 = $2;
 $$1 = $$06;
 while (1) {
  if (!(($$01 | 0) != 0 & ($$1 | 0) != 0)) {
   $$12 = $$01;
   $$2 = $$1;
   break;
  }
  $spec$select = $$01 >>> 0 > $20 >>> 0 ? $20 : $$01;
  HEAP32[$7 >> 2] = $spec$select;
  HEAP32[$8 >> 2] = $$1;
  $34 = ($$03 | 0) == 0;
  L8 : do if ($34) {
   $$16 = 0;
   $44 = $spec$select;
   while (1) {
    if ($$16 >>> 0 >= $44 >>> 0) break L8;
    HEAPF32[$16 + ($$16 + $19 << 2) >> 2] = 0.0;
    $$16 = $$16 + 1 | 0;
    $44 = HEAP32[$7 >> 2] | 0;
   }
  } else {
   $$05 = 0;
   $36 = $spec$select;
   while (1) {
    if ($$05 >>> 0 >= $36 >>> 0) break L8;
    HEAP32[$16 + ($$05 + $19 << 2) >> 2] = HEAP32[$$03 + ((Math_imul($$05, $22) | 0) << 2) >> 2];
    $$05 = $$05 + 1 | 0;
    $36 = HEAP32[$7 >> 2] | 0;
   }
  } while (0);
  $48 = HEAP32[$6 >> 2] | 0;
  _speex_resampler_process_native($0, $1, $7, $48, $8);
  $49 = HEAP32[$7 >> 2] | 0;
  $51 = HEAP32[$8 >> 2] | 0;
  HEAP32[$6 >> 2] = $48 + ((Math_imul($51, HEAP32[$30 >> 2] | 0) | 0) << 2);
  $57 = $$03 + ((Math_imul($49, $22) | 0) << 2) | 0;
  $$01 = $$01 - $49 | 0;
  $$03 = $34 ? 0 : $57;
  $$1 = $$1 - $51 | 0;
 }
 $58 = HEAP32[$3 >> 2] | 0;
 $59 = $58 - $$12 | 0;
 HEAP32[$3 >> 2] = $59;
 $60 = HEAP32[$5 >> 2] | 0;
 $61 = $60 - $$2 | 0;
 HEAP32[$5 >> 2] = $61;
 STACKTOP = sp;
 return;
}

function _silk_control_audio_bandwidth($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$6 = 0, $$pre = 0, $11 = 0, $13 = 0, $17 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $40 = 0, $42 = 0, $46 = 0, $55 = 0, $58 = 0, $59 = 0, $73 = 0, $78 = 0, $8 = 0, $82 = 0, $83 = 0, $90 = 0, $sext = 0, $spec$select = 0;
 $3 = HEAP32[$0 + 4576 >> 2] | 0;
 if (!$3) $$0 = HEAP32[$0 + 32 >> 2] | 0; else $$0 = $3;
 $sext = $$0 << 16;
 $8 = ($sext >> 16) * 1e3 | 0;
 if (!$sext) {
  $11 = HEAP32[$0 + 4572 >> 2] | 0;
  $13 = HEAP32[$0 + 4556 >> 2] | 0;
  $$6 = ((($11 | 0) < ($13 | 0) ? $11 : $13) | 0) / 1e3 | 0;
  return $$6 | 0;
 }
 $17 = HEAP32[$0 + 4556 >> 2] | 0;
 $$pre = HEAP32[$0 + 4564 >> 2] | 0;
 if (!(($8 | 0) > ($17 | 0) | ($8 | 0) > ($$pre | 0))) if (($8 | 0) >= (HEAP32[$0 + 4568 >> 2] | 0)) {
  $29 = $0 + 24 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  if (($30 | 0) > 255) HEAP32[$0 + 28 >> 2] = 0;
  if (!(HEAP32[$0 + 4536 >> 2] | 0)) if (!(HEAP32[$1 + 64 >> 2] | 0)) {
   $$6 = $$0;
   return $$6 | 0;
  }
  $40 = HEAP32[$0 + 4572 >> 2] | 0;
  if (($8 | 0) > ($40 | 0)) {
   $42 = $0 + 28 | 0;
   if (!(HEAP32[$42 >> 2] | 0)) {
    HEAP32[$29 >> 2] = 256;
    $46 = $0 + 16 | 0;
    HEAP32[$46 >> 2] = 0;
    HEAP32[$46 + 4 >> 2] = 0;
    $55 = 256;
   } else $55 = $30;
   if (HEAP32[$1 + 64 >> 2] | 0) {
    HEAP32[$42 >> 2] = 0;
    $$6 = ($$0 | 0) == 16 ? 12 : 8;
    return $$6 | 0;
   }
   if (($55 | 0) < 1) {
    HEAP32[$1 + 88 >> 2] = 1;
    $58 = $1 + 56 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    HEAP32[$58 >> 2] = $59 - (($59 * 5 | 0) / ((HEAP32[$1 + 24 >> 2] | 0) + 5 | 0) | 0);
    $$6 = $$0;
    return $$6 | 0;
   } else {
    HEAP32[$42 >> 2] = -2;
    $$6 = $$0;
    return $$6 | 0;
   }
  }
  if (($8 | 0) >= ($40 | 0)) {
   $90 = $0 + 28 | 0;
   if ((HEAP32[$90 >> 2] | 0) >= 0) {
    $$6 = $$0;
    return $$6 | 0;
   }
   HEAP32[$90 >> 2] = 1;
   $$6 = $$0;
   return $$6 | 0;
  }
  if (HEAP32[$1 + 64 >> 2] | 0) {
   HEAP32[$29 >> 2] = 0;
   $73 = $0 + 16 | 0;
   HEAP32[$73 >> 2] = 0;
   HEAP32[$73 + 4 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 1;
   $$6 = ($$0 | 0) == 8 ? 12 : 16;
   return $$6 | 0;
  }
  $78 = $0 + 28 | 0;
  if (!(HEAP32[$78 >> 2] | 0)) {
   HEAP32[$1 + 88 >> 2] = 1;
   $82 = $1 + 56 | 0;
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$82 >> 2] = $83 - (($83 * 5 | 0) / ((HEAP32[$1 + 24 >> 2] | 0) + 5 | 0) | 0);
   $$6 = $$0;
   return $$6 | 0;
  } else {
   HEAP32[$78 >> 2] = 1;
   $$6 = $$0;
   return $$6 | 0;
  }
 }
 $spec$select = ($17 | 0) < ($$pre | 0) ? $17 : $$pre;
 $25 = HEAP32[$0 + 4568 >> 2] | 0;
 $$6 = ((($spec$select | 0) > ($25 | 0) ? $spec$select : $25) | 0) / 1e3 | 0;
 return $$6 | 0;
}

function _resampler_basic_interpolate_single($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$sroa$0$0 = 0.0, $$sroa$10$1 = 0.0, $$sroa$4$0 = 0.0, $$sroa$7$0 = 0.0, $13 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $48 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $8 = HEAP32[$0 + 24 >> 2] | 0;
 $9 = $0 + 60 | 0;
 $13 = $0 + 64 | 0;
 $18 = HEAP32[$0 + 92 >> 2] | 0;
 $20 = HEAP32[$0 + 36 >> 2] | 0;
 $22 = HEAP32[$0 + 40 >> 2] | 0;
 $23 = $0 + 12 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = $0 + 48 | 0;
 $26 = $0 + 76 | 0;
 $27 = $6 + 4 | 0;
 $28 = $6 + 8 | 0;
 $29 = $6 + 12 | 0;
 $$01 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$02 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$04 = 0;
 while (1) {
  if (($$02 | 0) >= (HEAP32[$3 >> 2] | 0)) {
   label = 8;
   break;
  }
  if (($$04 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 8;
   break;
  }
  $34 = $2 + ($$02 << 2) | 0;
  $35 = HEAP32[$25 >> 2] | 0;
  $36 = Math_imul($$01, $35) | 0;
  $37 = HEAP32[$23 >> 2] | 0;
  $38 = ($36 >>> 0) / ($37 >>> 0) | 0;
  $39 = ($36 >>> 0) % ($37 >>> 0) | 0;
  $40 = +($37 >>> 0);
  $$0 = 0;
  $$sroa$0$0 = 0.0;
  $$sroa$10$1 = 0.0;
  $$sroa$4$0 = 0.0;
  $$sroa$7$0 = 0.0;
  while (1) {
   if (($$0 | 0) >= ($8 | 0)) break;
   $43 = +HEAPF32[$34 + ($$0 << 2) >> 2];
   $44 = HEAP32[$26 >> 2] | 0;
   $45 = $$0 + 1 | 0;
   $48 = (Math_imul($45, $35) | 0) + 4 - $38 | 0;
   $$0 = $45;
   $$sroa$0$0 = $$sroa$0$0 + $43 * +HEAPF32[$44 + ($48 + -2 << 2) >> 2];
   $$sroa$10$1 = $$sroa$10$1 + $43 * +HEAPF32[$44 + ($48 + 1 << 2) >> 2];
   $$sroa$4$0 = $$sroa$4$0 + $43 * +HEAPF32[$44 + ($48 + -1 << 2) >> 2];
   $$sroa$7$0 = $$sroa$7$0 + $43 * +HEAPF32[$44 + ($48 << 2) >> 2];
  }
  _cubic_coef(+($39 >>> 0) / $40, $6);
  HEAPF32[$4 + ((Math_imul($18, $$04) | 0) << 2) >> 2] = +HEAPF32[$6 >> 2] * $$sroa$0$0 + +HEAPF32[$27 >> 2] * $$sroa$4$0 + +HEAPF32[$28 >> 2] * $$sroa$7$0 + +HEAPF32[$29 >> 2] * $$sroa$10$1;
  $85 = $$01 + $22 | 0;
  $86 = $85 >>> 0 < $24 >>> 0;
  $$01 = $85 - ($86 ? 0 : $24) | 0;
  $$02 = $$02 + $20 + (($86 ^ 1) & 1) | 0;
  $$04 = $$04 + 1 | 0;
 }
 if ((label | 0) == 8) {
  HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] = $$02;
  HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] = $$01;
  STACKTOP = sp;
  return $$04 | 0;
 }
 return 0;
}

function _resampler_basic_interpolate_double($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$sroa$0$1 = 0.0, $$sroa$10$1 = 0.0, $$sroa$4$1 = 0.0, $$sroa$7$1 = 0.0, $13 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $8 = HEAP32[$0 + 24 >> 2] | 0;
 $9 = $0 + 60 | 0;
 $13 = $0 + 64 | 0;
 $18 = HEAP32[$0 + 92 >> 2] | 0;
 $20 = HEAP32[$0 + 36 >> 2] | 0;
 $22 = HEAP32[$0 + 40 >> 2] | 0;
 $23 = $0 + 12 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = $0 + 48 | 0;
 $26 = $0 + 76 | 0;
 $27 = $6 + 4 | 0;
 $28 = $6 + 8 | 0;
 $29 = $6 + 12 | 0;
 $$01 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$02 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$04 = 0;
 while (1) {
  if (($$02 | 0) >= (HEAP32[$3 >> 2] | 0)) {
   label = 8;
   break;
  }
  if (($$04 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 8;
   break;
  }
  $34 = $2 + ($$02 << 2) | 0;
  $35 = HEAP32[$25 >> 2] | 0;
  $36 = Math_imul($$01, $35) | 0;
  $37 = HEAP32[$23 >> 2] | 0;
  $38 = ($36 >>> 0) / ($37 >>> 0) | 0;
  $39 = ($36 >>> 0) % ($37 >>> 0) | 0;
  $40 = +($37 >>> 0);
  $$0 = 0;
  $$sroa$0$1 = 0.0;
  $$sroa$10$1 = 0.0;
  $$sroa$4$1 = 0.0;
  $$sroa$7$1 = 0.0;
  while (1) {
   if (($$0 | 0) >= ($8 | 0)) break;
   $43 = +HEAPF32[$34 + ($$0 << 2) >> 2];
   $44 = HEAP32[$26 >> 2] | 0;
   $45 = $$0 + 1 | 0;
   $48 = (Math_imul($45, $35) | 0) + 4 - $38 | 0;
   $$0 = $45;
   $$sroa$0$1 = $$sroa$0$1 + $43 * +HEAPF32[$44 + ($48 + -2 << 2) >> 2];
   $$sroa$10$1 = $$sroa$10$1 + $43 * +HEAPF32[$44 + ($48 + 1 << 2) >> 2];
   $$sroa$4$1 = $$sroa$4$1 + $43 * +HEAPF32[$44 + ($48 + -1 << 2) >> 2];
   $$sroa$7$1 = $$sroa$7$1 + $43 * +HEAPF32[$44 + ($48 << 2) >> 2];
  }
  _cubic_coef(+($39 >>> 0) / $40, $6);
  HEAPF32[$4 + ((Math_imul($18, $$04) | 0) << 2) >> 2] = $$sroa$0$1 * +HEAPF32[$6 >> 2] + $$sroa$4$1 * +HEAPF32[$27 >> 2] + $$sroa$7$1 * +HEAPF32[$28 >> 2] + $$sroa$10$1 * +HEAPF32[$29 >> 2];
  $94 = $$01 + $22 | 0;
  $95 = $94 >>> 0 < $24 >>> 0;
  $$01 = $94 - ($95 ? 0 : $24) | 0;
  $$02 = $$02 + $20 + (($95 ^ 1) & 1) | 0;
  $$04 = $$04 + 1 | 0;
 }
 if ((label | 0) == 8) {
  HEAP32[(HEAP32[$9 >> 2] | 0) + ($1 << 2) >> 2] = $$02;
  HEAP32[(HEAP32[$13 >> 2] | 0) + ($1 << 2) >> 2] = $$01;
  STACKTOP = sp;
  return $$04 | 0;
 }
 return 0;
}

function _silk_process_gains_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pre$phi3Z2D = 0, $13 = 0.0, $14 = 0, $17 = 0, $3 = 0, $32 = 0.0, $33 = 0, $35 = 0, $36 = 0.0, $4 = 0, $42 = 0.0, $55 = 0, $70 = 0, $80 = 0, $84 = 0, $exp2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 4765 | 0;
 L1 : do if ((HEAP8[$4 >> 0] | 0) == 2) {
  $13 = 1.0 - +_silk_sigmoid_571((+HEAPF32[$1 + 708 >> 2] + -12.0) * .25) * .5;
  $14 = $0 + 4580 | 0;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= (HEAP32[$14 >> 2] | 0)) {
    $$pre$phi3Z2D = $14;
    break L1;
   }
   $17 = $1 + ($$0 << 2) | 0;
   HEAPF32[$17 >> 2] = +HEAPF32[$17 >> 2] * $13;
   $$0 = $$0 + 1 | 0;
  }
 } else $$pre$phi3Z2D = $0 + 4580 | 0; while (0);
 $exp2 = +_llvm_exp2_f64(+((21.0 - +(HEAP32[$0 + 4716 >> 2] | 0) * .0078125) * .33000001311302185));
 $32 = $exp2 / +(HEAP32[$0 + 4588 >> 2] | 0);
 $$1 = 0;
 while (1) {
  $33 = HEAP32[$$pre$phi3Z2D >> 2] | 0;
  if (($$1 | 0) >= ($33 | 0)) break;
  $35 = $1 + ($$1 << 2) | 0;
  $36 = +HEAPF32[$35 >> 2];
  $42 = +Math_sqrt(+($36 * $36 + +HEAPF32[$1 + 712 + ($$1 << 2) >> 2] * $32));
  HEAPF32[$35 >> 2] = $42 < 32767.0 ? $42 : 32767.0;
  $$1 = $$1 + 1 | 0;
 }
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($33 | 0)) break;
  HEAP32[$3 + ($$2 << 2) >> 2] = ~~(+HEAPF32[$1 + ($$2 << 2) >> 2] * 65536.0);
  $$2 = $$2 + 1 | 0;
 }
 _memcpy($1 + 728 | 0, $3 | 0, $33 << 2 | 0) | 0;
 $55 = $0 + 7168 | 0;
 HEAP8[$1 + 744 >> 0] = HEAP8[$55 >> 0] | 0;
 _silk_gains_quant($0 + 4736 | 0, $3, $55, ($2 | 0) == 2 & 1, HEAP32[$$pre$phi3Z2D >> 2] | 0);
 $$3 = 0;
 while (1) {
  if (($$3 | 0) >= (HEAP32[$$pre$phi3Z2D >> 2] | 0)) break;
  HEAPF32[$1 + ($$3 << 2) >> 2] = +(HEAP32[$3 + ($$3 << 2) >> 2] | 0) * .0000152587890625;
  $$3 = $$3 + 1 | 0;
 }
 $70 = HEAP8[$4 >> 0] | 0;
 do if ($70 << 24 >> 24 == 2) {
  $80 = $0 + 4766 | 0;
  if (+HEAPF32[$1 + 708 >> 2] + +(HEAP32[$0 + 4712 >> 2] | 0) * .000030517578125 > 1.0) {
   HEAP8[$80 >> 0] = 0;
   $84 = 0;
   break;
  } else {
   HEAP8[$80 >> 0] = 1;
   $84 = 1;
   break;
  }
 } else $84 = HEAP8[$0 + 4766 >> 0] | 0; while (0);
 HEAPF32[$1 + 692 >> 2] = +(HEAP32[$0 + 4628 >> 2] | 0) * -.05000000074505806 + 1.2000000476837158 + +(HEAP32[$0 + 4532 >> 2] | 0) * -.20000000298023224 * .00390625 + +HEAPF32[$1 + 696 >> 2] * -.10000000149011612 + +HEAPF32[$1 + 700 >> 2] * -.20000000298023224 + +(HEAP16[40156 + ($70 << 24 >> 24 >> 1 << 2) + ($84 << 24 >> 24 << 1) >> 1] | 0) * .0009765625 * .800000011920929;
 STACKTOP = sp;
 return;
}

function _silk_find_pitch_lags_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $34 = 0, $37 = 0.0, $4 = 0, $40 = 0.0, $42 = 0.0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1744 | 0;
 $4 = sp + 1664 | 0;
 $5 = sp + 1600 | 0;
 $6 = sp + 1536 | 0;
 $7 = sp;
 $8 = $0 + 4596 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $12 = $9 + (HEAP32[$0 + 4584 >> 2] | 0) | 0;
 $14 = HEAP32[$0 + 4592 >> 2] | 0;
 $15 = $12 + $14 | 0;
 $16 = $0 + 4548 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($15 | 0) < ($17 | 0)) _celt_fatal(46914, 46976, 59);
 $23 = $3 + ($12 << 2) + (0 - $17 << 2) | 0;
 _silk_apply_sine_window_FLP($7, $23, 1, $9);
 $24 = HEAP32[$8 >> 2] | 0;
 $25 = $7 + ($24 << 2) | 0;
 $26 = $23 + ($24 << 2) | 0;
 $29 = (HEAP32[$16 >> 2] | 0) - ($24 << 1) | 0;
 _memcpy($25 | 0, $26 | 0, $29 << 2 | 0) | 0;
 _silk_apply_sine_window_FLP($25 + ($29 << 2) | 0, $26 + ($29 << 2) | 0, 2, $24);
 $34 = $0 + 4648 | 0;
 _silk_autocorrelation_FLP($4, $7, HEAP32[$16 >> 2] | 0, (HEAP32[$34 >> 2] | 0) + 1 | 0);
 $37 = +HEAPF32[$4 >> 2];
 $40 = $37 + ($37 * 1.0000000474974513e-03 + 1.0);
 HEAPF32[$4 >> 2] = $40;
 $42 = +_silk_schur_FLP($6, $4, HEAP32[$34 >> 2] | 0);
 HEAPF32[$1 + 704 >> 2] = $40 / ($42 > 1.0 ? $42 : 1.0);
 _silk_k2a_FLP($5, $6, HEAP32[$34 >> 2] | 0);
 _silk_bwexpander_FLP($5, HEAP32[$34 >> 2] | 0, .9900000095367432);
 _silk_LPC_analysis_filter_FLP($2, $5, $3 + (0 - $14 << 2) | 0, $15, HEAP32[$34 >> 2] | 0);
 $50 = $0 + 4765 | 0;
 if (HEAP8[$50 >> 0] | 0) if (!(HEAP32[$0 + 4664 >> 2] | 0)) if (!(_silk_pitch_analysis_core_FLP($2, $1 + 228 | 0, $0 + 4762 | 0, $0 + 4764 | 0, $0 + 10060 | 0, HEAP32[$0 + 4544 >> 2] | 0, +(HEAP32[$0 + 4652 >> 2] | 0) * .0000152587890625, .6000000238418579 - +(HEAP32[$34 >> 2] | 0) * .004000000189989805 - +(HEAP32[$0 + 4532 >> 2] | 0) * .10000000149011612 * .00390625 - +(HEAP8[$0 + 4541 >> 0] >> 1 | 0) * .15000000596046448 - +(HEAP32[$0 + 4712 >> 2] | 0) * .10000000149011612 * .000030517578125, HEAP32[$0 + 4576 >> 2] | 0, HEAP32[$0 + 4644 >> 2] | 0, HEAP32[$0 + 4580 >> 2] | 0) | 0)) {
  HEAP8[$50 >> 0] = 2;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$50 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $97 = $1 + 228 | 0;
 HEAP32[$97 >> 2] = 0;
 HEAP32[$97 + 4 >> 2] = 0;
 HEAP32[$97 + 8 >> 2] = 0;
 HEAP32[$97 + 12 >> 2] = 0;
 HEAP16[$0 + 4762 >> 1] = 0;
 HEAP8[$0 + 4764 >> 0] = 0;
 HEAPF32[$0 + 10060 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _silk_stereo_find_predictor($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $44 = 0, $45 = 0, $47 = 0, $6 = 0, $64 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $spec$select = 0, $spec$select11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 _silk_sum_sqr_shift($8, $6, $1, $4);
 _silk_sum_sqr_shift($9, $7, $2, $4);
 $10 = HEAP32[$6 >> 2] | 0;
 $11 = HEAP32[$7 >> 2] | 0;
 $12 = _silk_max_int_525($10, $11) | 0;
 $14 = $12 + ($12 & 1) | 0;
 $17 = HEAP32[$9 >> 2] >> $14 - $11;
 HEAP32[$9 >> 2] = $17;
 $21 = _silk_max_int_525(HEAP32[$8 >> 2] >> $14 - $10, 1) | 0;
 HEAP32[$8 >> 2] = $21;
 $22 = _silk_inner_prod_aligned_scale($1, $2, $14, $4) | 0;
 $23 = _silk_DIV32_varQ_526($22, $21, 13) | 0;
 $spec$select = ($23 | 0) > -16384 ? $23 : -16384;
 $26 = ($spec$select | 0) < 16384 ? $spec$select : 16384;
 $28 = $26 << 16 >> 16;
 $33 = (Math_imul($26 >> 16, $28) | 0) + ((Math_imul($26 & 65535, $28) | 0) >> 16) | 0;
 $36 = _silk_max_int_525($5, ($33 | 0) > 0 ? $33 : 0 - $33 | 0) | 0;
 $37 = $14 >> 1;
 $38 = HEAP32[$3 >> 2] | 0;
 $40 = (_silk_SQRT_APPROX_527($21) | 0) << $37;
 $44 = $36 << 16 >> 16;
 $45 = Math_imul($40 - (HEAP32[$3 >> 2] | 0) >> 16, $44) | 0;
 $47 = (_silk_SQRT_APPROX_527($21) | 0) << $37;
 HEAP32[$3 >> 2] = $38 + ($45 + ((Math_imul($47 - (HEAP32[$3 >> 2] | 0) & 65535, $44) | 0) >> 16));
 $64 = $33 << 16 >> 16;
 $71 = $17 - ((Math_imul($22 >> 16, $28) | 0) + ((Math_imul($22 & 65535, $28) | 0) >> 16) << 4) + ((Math_imul($21 >> 16, $64) | 0) + ((Math_imul($21 & 65535, $64) | 0) >> 16) << 6) | 0;
 HEAP32[$9 >> 2] = $71;
 $72 = $3 + 4 | 0;
 $73 = HEAP32[$72 >> 2] | 0;
 $75 = (_silk_SQRT_APPROX_527($71) | 0) << $37;
 $79 = Math_imul($75 - (HEAP32[$72 >> 2] | 0) >> 16, $44) | 0;
 $81 = (_silk_SQRT_APPROX_527($71) | 0) << $37;
 $88 = $73 + ($79 + ((Math_imul($81 - (HEAP32[$72 >> 2] | 0) & 65535, $44) | 0) >> 16)) | 0;
 HEAP32[$72 >> 2] = $88;
 $89 = HEAP32[$3 >> 2] | 0;
 $92 = _silk_DIV32_varQ_526($88, ($89 | 0) > 1 ? $89 : 1, 14) | 0;
 $spec$select11 = ($92 | 0) > 0 ? $92 : 0;
 HEAP32[$0 >> 2] = ($spec$select11 | 0) < 32767 ? $spec$select11 : 32767;
 STACKTOP = sp;
 return $26 | 0;
}

function _compute_gru($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$03 = 0.0, $$05 = 0, $$07 = 0, $$1 = 0.0, $$12 = 0.0, $$14 = 0.0, $$16 = 0, $$18 = 0, $$2 = 0, $$29 = 0, $$3 = 0, $$310 = 0, $$4 = 0, $$5 = 0, $2 = 0, $3 = 0, $4 = 0, $92 = 0.0, $95 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 128 | 0;
 $4 = sp;
 $$05 = 0;
 while (1) {
  if (($$05 | 0) == 24) break;
  $$03 = +(HEAP8[31280 + $$05 >> 0] | 0);
  $$07 = 0;
  while (1) {
   if (($$07 | 0) == 32) break;
   $$03 = $$03 + +HEAPF32[$1 + ($$07 << 2) >> 2] * +(HEAP8[31360 + (($$07 * 72 | 0) + $$05) >> 0] | 0);
   $$07 = $$07 + 1 | 0;
  }
  $$14 = $$03;
  $$18 = 0;
  while (1) {
   if (($$18 | 0) == 24) break;
   $$14 = $$14 + +HEAPF32[$0 + ($$18 << 2) >> 2] * +(HEAP8[33664 + (($$18 * 72 | 0) + $$05) >> 0] | 0);
   $$18 = $$18 + 1 | 0;
  }
  HEAPF32[$2 + ($$05 << 2) >> 2] = +_sigmoid_approx($$14 * .0078125);
  $$05 = $$05 + 1 | 0;
 }
 $$16 = 0;
 while (1) {
  if (($$16 | 0) == 24) break;
  $$01 = +(HEAP8[31280 + ($$16 + 24) >> 0] | 0);
  $$29 = 0;
  while (1) {
   if (($$29 | 0) == 32) break;
   $$01 = $$01 + +HEAPF32[$1 + ($$29 << 2) >> 2] * +(HEAP8[31360 + (($$29 * 72 | 0) + 24 + $$16) >> 0] | 0);
   $$29 = $$29 + 1 | 0;
  }
  $$12 = $$01;
  $$310 = 0;
  while (1) {
   if (($$310 | 0) == 24) break;
   $$12 = $$12 + +HEAPF32[$0 + ($$310 << 2) >> 2] * +(HEAP8[33664 + (($$310 * 72 | 0) + 24 + $$16) >> 0] | 0);
   $$310 = $$310 + 1 | 0;
  }
  HEAPF32[$3 + ($$16 << 2) >> 2] = +_sigmoid_approx($$12 * .0078125);
  $$16 = $$16 + 1 | 0;
 }
 $$2 = 0;
 while (1) {
  if (($$2 | 0) == 24) break;
  $$0 = +(HEAP8[31280 + ($$2 + 48) >> 0] | 0);
  $$4 = 0;
  while (1) {
   if (($$4 | 0) == 32) break;
   $$0 = $$0 + +HEAPF32[$1 + ($$4 << 2) >> 2] * +(HEAP8[31360 + (($$4 * 72 | 0) + 48 + $$2) >> 0] | 0);
   $$4 = $$4 + 1 | 0;
  }
  $$1 = $$0;
  $$5 = 0;
  while (1) {
   if (($$5 | 0) == 24) break;
   $$1 = $$1 + +HEAPF32[$0 + ($$5 << 2) >> 2] * +(HEAP8[33664 + (($$5 * 72 | 0) + 48 + $$2) >> 0] | 0) * +HEAPF32[$3 + ($$5 << 2) >> 2];
   $$5 = $$5 + 1 | 0;
  }
  $92 = +HEAPF32[$2 + ($$2 << 2) >> 2];
  $95 = $92 * +HEAPF32[$0 + ($$2 << 2) >> 2];
  HEAPF32[$4 + ($$2 << 2) >> 2] = $95 + (1.0 - $92) * +_tansig_approx($$1 * .0078125);
  $$2 = $$2 + 1 | 0;
 }
 $$3 = 0;
 while (1) {
  if (($$3 | 0) == 24) break;
  HEAP32[$0 + ($$3 << 2) >> 2] = HEAP32[$4 + ($$3 << 2) >> 2];
  $$3 = $$3 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_quant_LTP_gains($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$112 = 0, $$13 = 0, $$16 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $21 = 0, $30 = 0, $33 = 0, $37 = 0, $53 = 0, $55 = 0, $56 = 0, $75 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 $$0 = 0;
 $$02 = 2147483647;
 $$05 = 0;
 $$09 = 0;
 while (1) {
  if (($$09 | 0) == 3) break;
  $14 = HEAP32[39824 + ($$09 << 2) >> 2] | 0;
  $16 = HEAP32[39836 + ($$09 << 2) >> 2] | 0;
  $18 = HEAP32[39848 + ($$09 << 2) >> 2] | 0;
  $21 = HEAP8[44671 + $$09 >> 0] | 0;
  $$01 = HEAP32[$3 >> 2] | 0;
  $$011 = 0;
  $$04 = 0;
  $$07 = $6;
  $$08 = $5;
  $$16 = 0;
  while (1) {
   if (($$011 | 0) >= ($8 | 0)) break;
   _silk_VQ_WMat_EC_c($9 + $$011 | 0, $10, $11, $12, $$08, $$07, $16, $18, $14, $7, (_silk_log2lin(5333 - $$01 + 896 | 0) | 0) + -51 | 0, $21);
   $30 = $$16 + (HEAP32[$10 >> 2] | 0) | 0;
   $33 = $$04 + (HEAP32[$11 >> 2] | 0) | 0;
   $37 = (HEAP32[$12 >> 2] | 0) + 51 | 0;
   if (($$01 + (_silk_lin2log($37) | 0) | 0) < 896) $75 = 0; else $75 = $$01 + (_silk_lin2log($37) | 0) + -896 | 0;
   $$01 = $75;
   $$011 = $$011 + 1 | 0;
   $$04 = $33 >>> 0 < 2147483647 ? $33 : 2147483647;
   $$07 = $$07 + 20 | 0;
   $$08 = $$08 + 100 | 0;
   $$16 = $30 >>> 0 < 2147483647 ? $30 : 2147483647;
  }
  if (($$04 | 0) > ($$02 | 0)) {
   $$1 = $$0;
   $$13 = $$02;
  } else {
   HEAP8[$2 >> 0] = $$09;
   _memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
   $$1 = $$01;
   $$13 = $$04;
  }
  $$0 = $$1;
  $$02 = $$13;
  $$05 = $$16;
  $$09 = $$09 + 1 | 0;
 }
 $53 = HEAP32[39836 + (HEAP8[$2 >> 0] << 2) >> 2] | 0;
 $$112 = 0;
 while (1) {
  if (($$112 | 0) >= ($8 | 0)) break;
  $55 = $1 + $$112 | 0;
  $56 = $$112 * 5 | 0;
  $$110 = 0;
  while (1) {
   if (($$110 | 0) == 5) break;
   HEAP16[$0 + ($56 + $$110 << 1) >> 1] = HEAP8[$53 + (((HEAP8[$55 >> 0] | 0) * 5 | 0) + $$110) >> 0] << 7;
   $$110 = $$110 + 1 | 0;
  }
  $$112 = $$112 + 1 | 0;
 }
 HEAP32[$3 >> 2] = $$0;
 HEAP32[$4 >> 2] = Math_imul(((_silk_lin2log($$05 >> (($8 | 0) == 2 ? 1 : 2)) | 0) << 16) + -125829120 >> 16, -3) | 0;
 STACKTOP = sp;
 return;
}

function _patch_transient_decision($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0.0, $$0 = 0.0, $$01 = 0, $$02 = 0, $$02$in = 0, $$1 = 0.0, $$13 = 0, $$13$in = 0, $$2 = 0, $$3 = 0, $14 = 0.0, $16 = 0.0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $29 = 0.0, $31 = 0.0, $34 = 0.0, $35 = 0, $40 = 0.0, $44 = 0, $45 = 0.0, $49 = 0.0, $52 = 0, $53 = 0, $54 = 0, $58 = 0.0, $6 = 0, $62 = 0.0, $65 = 0.0, $77 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $6 = sp;
 $8 = $1 + ($3 << 2) | 0;
 L1 : do if (($5 | 0) == 1) {
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$6 + ($3 << 2) >> 2] = $9;
  $$02$in = $3;
  $14 = (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
  while (1) {
   $$02 = $$02$in + 1 | 0;
   if (($$02 | 0) >= ($4 | 0)) break L1;
   $16 = +HEAPF32[$1 + ($$02 << 2) >> 2];
   $19 = $14 + -1.0 > $16 ? $14 + -1.0 : $16;
   HEAPF32[$6 + ($$02 << 2) >> 2] = $19;
   $$02$in = $$02;
   $14 = $19;
  }
 } else {
  $21 = +HEAPF32[$8 >> 2];
  $24 = +HEAPF32[$1 + ($3 + $2 << 2) >> 2];
  $$ = $21 > $24 ? $21 : $24;
  HEAPF32[$6 + ($3 << 2) >> 2] = $$;
  $$13$in = $3;
  $29 = $$;
  while (1) {
   $$13 = $$13$in + 1 | 0;
   if (($$13 | 0) >= ($4 | 0)) break L1;
   $31 = +HEAPF32[$1 + ($$13 << 2) >> 2];
   $34 = +HEAPF32[$1 + ($$13 + $2 << 2) >> 2];
   $35 = $31 > $34;
   $40 = $29 + -1.0 > ($35 ? $31 : $34) ? $29 + -1.0 : $35 ? $31 : $34;
   HEAPF32[$6 + ($$13 << 2) >> 2] = $40;
   $$13$in = $$13;
   $29 = $40;
  }
 } while (0);
 $$2 = $4 + -2 | 0;
 while (1) {
  if (($$2 | 0) < ($3 | 0)) break;
  $44 = $6 + ($$2 << 2) | 0;
  $45 = +HEAPF32[$44 >> 2];
  $49 = +HEAPF32[$6 + ($$2 + 1 << 2) >> 2] + -1.0;
  HEAPF32[$44 >> 2] = $45 > $49 ? $45 : $49;
  $$2 = $$2 + -1 | 0;
 }
 $52 = ($3 | 0) < 2;
 $53 = $4 + -1 | 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  $54 = Math_imul($$01, $2) | 0;
  $$1 = $$0;
  $$3 = $52 ? 2 : $3;
  while (1) {
   if (($$3 | 0) >= ($53 | 0)) break;
   $58 = +HEAPF32[$0 + ($$3 + $54 << 2) >> 2];
   $62 = +HEAPF32[$6 + ($$3 << 2) >> 2];
   $65 = ($58 < 0.0 ? 0.0 : $58) - ($62 < 0.0 ? 0.0 : $62);
   $$1 = $$1 + ($65 < 0.0 ? 0.0 : $65);
   $$3 = $$3 + 1 | 0;
  }
  $$01 = $$01 + 1 | 0;
  if (($$01 | 0) >= ($5 | 0)) break; else $$0 = $$1;
 }
 $77 = $$1 / +(Math_imul($53 - ($52 ? 2 : $3) | 0, $5) | 0) > 1.0 & 1;
 STACKTOP = sp;
 return $77 | 0;
}

function _silk_gains_quant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $29 = 0, $31 = 0, $34 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $69 = 0, $81 = 0, $82 = 0, $storemerge$in = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $6 = $1 + ($$0 << 2) | 0;
  _silk_lin2log(HEAP32[$6 >> 2] | 0) | 0;
  $13 = ((((_silk_lin2log(HEAP32[$6 >> 2] | 0) | 0) << 16) + -136970240 >> 16) * 2251 | 0) >>> 16;
  $14 = $13 & 255;
  $15 = $0 + $$0 | 0;
  HEAP8[$15 >> 0] = $14;
  if (($13 << 24 >> 24 | 0) < (HEAP8[$2 >> 0] | 0)) {
   $20 = $14 + 1 << 24 >> 24;
   HEAP8[$15 >> 0] = $20;
   $21 = $20;
  } else $21 = $14;
  if ($21 << 24 >> 24 > 63) $26 = 63; else $26 = ($21 << 24 >> 24 > 0 ? $21 : 0) & 255;
  HEAP8[$15 >> 0] = $26;
  $29 = HEAP8[$2 >> 0] | 0;
  if (!($$0 | $3)) {
   $31 = HEAP8[$0 >> 0] | 0;
   if ($29 << 24 >> 24 > 67) {
    $34 = ($29 << 24 >> 24) + -4 | 0;
    if (($34 | 0) < ($31 << 24 >> 24 | 0)) $44 = $34; else $44 = ($31 << 24 >> 24 > 63 ? $31 : 63) & 255;
   } else if ($31 << 24 >> 24 > 63) $44 = 63; else {
    $39 = $31 << 24 >> 24;
    $41 = ($29 << 24 >> 24) + -4 | 0;
    $44 = ($41 | 0) > ($39 | 0) ? $41 : $39;
   }
   $43 = $44 & 255;
   HEAP8[$0 >> 0] = $43;
   HEAP8[$2 >> 0] = $43;
   $82 = $43;
  } else {
   $46 = $26 - ($29 & 255) | 0;
   $47 = $46 & 255;
   HEAP8[$15 >> 0] = $47;
   $50 = (HEAP8[$2 >> 0] | 0) + 8 | 0;
   $51 = $46 << 24 >> 24;
   if (($51 | 0) > ($50 | 0)) {
    $57 = $50 + (($51 - $50 + 1 | 0) >>> 1) & 255;
    HEAP8[$15 >> 0] = $57;
    $58 = $57;
   } else $58 = $47;
   if ($58 << 24 >> 24 > 36) $63 = 36; else $63 = ($58 << 24 >> 24 > -4 ? $58 : -4) << 24 >> 24;
   HEAP8[$15 >> 0] = $63;
   if (($63 | 0) > ($50 | 0)) {
    $69 = ($63 << 1) - $50 + (HEAPU8[$2 >> 0] | 0) | 0;
    HEAP8[$2 >> 0] = $69;
    $storemerge$in = _silk_min_int($69 << 24 >> 24) | 0;
   } else $storemerge$in = ($63 & 255) + (HEAPU8[$2 >> 0] | 0) | 0;
   HEAP8[$2 >> 0] = $storemerge$in;
   HEAP8[$15 >> 0] = (HEAPU8[$15 >> 0] | 0) + 4;
   $82 = HEAP8[$2 >> 0] | 0;
  }
  $81 = $82 << 24 >> 24;
  HEAP32[$6 >> 2] = _silk_log2lin(_silk_min_32(($81 * 29 | 0) + ($81 * 7281 >> 16) + 2090 | 0) | 0) | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_decode_parameters($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$pre = 0, $10 = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $45 = 0, $66 = 0, $72 = 0, $73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 32 | 0;
 $4 = sp;
 $10 = $0 + 2324 | 0;
 _silk_gains_dequant($1 + 16 | 0, $0 + 2736 | 0, $0 + 2312 | 0, ($2 | 0) == 2 & 1, HEAP32[$10 >> 2] | 0);
 _silk_NLSF_decode($3, $0 + 2744 | 0, HEAP32[$0 + 2732 >> 2] | 0);
 $15 = $1 + 64 | 0;
 $16 = $0 + 2340 | 0;
 _silk_NLSF2A($15, $3, HEAP32[$16 >> 2] | 0);
 $21 = $0 + 2767 | 0;
 if ((HEAP32[$0 + 2376 >> 2] | 0) == 1) {
  HEAP8[$21 >> 0] = 4;
  label = 8;
 } else {
  $$pre = HEAP8[$21 >> 0] | 0;
  if ($$pre << 24 >> 24 < 4) {
   $23 = HEAP32[$16 >> 2] | 0;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($23 | 0)) break;
    $26 = HEAP16[$0 + 2344 + ($$01 << 1) >> 1] | 0;
    HEAP16[$4 + ($$01 << 1) >> 1] = ((Math_imul((HEAP16[$3 + ($$01 << 1) >> 1] | 0) - ($26 << 16 >> 16) | 0, $$pre << 24 >> 24) | 0) >>> 2) + ($26 & 65535);
    $$01 = $$01 + 1 | 0;
   }
   _silk_NLSF2A($1 + 32 | 0, $4, $23);
  } else label = 8;
 }
 if ((label | 0) == 8) _memcpy($1 + 32 | 0, $15 | 0, HEAP32[$16 >> 2] << 1 | 0) | 0;
 $45 = HEAP32[$16 >> 2] | 0;
 _memcpy($0 + 2344 | 0, $3 | 0, $45 << 1 | 0) | 0;
 if (HEAP32[$0 + 4160 >> 2] | 0) {
  _silk_bwexpander($1 + 32 | 0, $45, 63570);
  _silk_bwexpander($15, HEAP32[$16 >> 2] | 0, 63570);
 }
 if ((HEAP8[$0 + 2765 >> 0] | 0) != 2) {
  _memset($1 | 0, 0, HEAP32[$10 >> 2] << 2 | 0) | 0;
  _memset($1 + 96 | 0, 0, (HEAP32[$10 >> 2] | 0) * 10 | 0) | 0;
  HEAP8[$0 + 2768 >> 0] = 0;
  HEAP32[$1 + 136 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 _silk_decode_pitch(HEAP16[$0 + 2762 >> 1] | 0, HEAP8[$0 + 2764 >> 0] | 0, $1, HEAP32[$0 + 2316 >> 2] | 0, HEAP32[$10 >> 2] | 0);
 $66 = HEAP32[39836 + (HEAP8[$0 + 2768 >> 0] << 2) >> 2] | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  $72 = (HEAP8[$0 + 2740 + $$0 >> 0] | 0) * 5 | 0;
  $73 = $$0 * 5 | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == 5) break;
   HEAP16[$1 + 96 + ($73 + $$1 << 1) >> 1] = HEAP8[$66 + ($72 + $$1) >> 0] << 7;
   $$1 = $$1 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 HEAP32[$1 + 136 >> 2] = HEAP16[40164 + (HEAP8[$0 + 2769 >> 0] << 1) >> 1];
 STACKTOP = sp;
 return;
}

function _silk_decoder_set_fs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $15 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, label = 0;
 $3 = ($1 | 0) == 8;
 switch ($1 | 0) {
 case 8:
 case 12:
 case 16:
  break;
 default:
  _celt_fatal(45638, 43226, 43);
 }
 $4 = $0 + 2324 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 switch ($5 | 0) {
 case 2:
 case 4:
  break;
 default:
  _celt_fatal(43248, 43226, 44);
 }
 $6 = $1 << 16 >> 16;
 HEAP32[$0 + 2332 >> 2] = $6 * 5;
 $11 = Math_imul($5 << 16 >> 16, $6 * 327680 >> 16) | 0;
 $12 = $0 + 2316 | 0;
 $15 = $0 + 2320 | 0;
 if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
  $44 = 1;
  label = 8;
 } else label = 7; else label = 7;
 if ((label | 0) == 7) {
  _silk_resampler_init($0 + 2432 | 0, $6 * 1e3 | 0, $2, 0);
  HEAP32[$15 >> 2] = $2;
  $20 = (HEAP32[$12 >> 2] | 0) == ($1 | 0);
  if ($20) {
   $44 = $20;
   label = 8;
  } else {
   $45 = $20;
   label = 9;
  }
 }
 if ((label | 0) == 8) if (($11 | 0) != (HEAP32[$0 + 2328 >> 2] | 0)) {
  $45 = $44;
  label = 9;
 }
 if ((label | 0) == 9) {
  $25 = (HEAP32[$4 >> 2] | 0) == 4;
  $26 = $0 + 2384 | 0;
  do if ($3) if ($25) {
   HEAP32[$26 >> 2] = 44735;
   break;
  } else {
   HEAP32[$26 >> 2] = 44758;
   break;
  } else if ($25) {
   HEAP32[$26 >> 2] = 25072;
   break;
  } else {
   HEAP32[$26 >> 2] = 44746;
   break;
  } while (0);
  if (!$45) {
   HEAP32[$0 + 2336 >> 2] = $6 * 20;
   switch ($1 | 0) {
   case 8:
   case 12:
    {
     HEAP32[$0 + 2340 >> 2] = 10;
     HEAP32[$0 + 2732 >> 2] = 39860;
     if (($1 | 0) == 12) HEAP32[$0 + 2380 >> 2] = 44714; else label = 22;
     break;
    }
   default:
    {
     HEAP32[$0 + 2340 >> 2] = 16;
     HEAP32[$0 + 2732 >> 2] = 39900;
     if (($1 | 0) == 16) HEAP32[$0 + 2380 >> 2] = 44720; else label = 22;
    }
   }
   do if ((label | 0) == 22) if ($3) {
    HEAP32[$0 + 2380 >> 2] = 44705;
    break;
   } else _celt_fatal(48340, 43226, 89); while (0);
   HEAP32[$0 + 2376 >> 2] = 1;
   HEAP32[$0 + 2308 >> 2] = 100;
   HEAP8[$0 + 2312 >> 0] = 10;
   HEAP32[$0 + 4164 >> 2] = 0;
   _memset($0 + 1284 | 0, 0, 1024) | 0;
  }
  HEAP32[$12 >> 2] = $1;
  HEAP32[$0 + 2328 >> 2] = $11;
 }
 if (($11 + -1 | 0) >>> 0 < 320) return 0; else _celt_fatal(43335, 43226, 104);
 return 0;
}

function _warped_true2monic_coefs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $$04 = 0, $$05 = 0, $$05$in = 0, $$13 = 0, $$16 = 0, $$27 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$in = 0, $$6 = 0, $12 = 0.0, $16 = 0.0, $18 = 0, $26 = 0.0, $27 = 0, $35 = 0, $39 = 0.0, $41 = 0, $60 = 0, $66 = 0.0, $68 = 0, $8 = 0, label = 0;
 $$05$in = $2;
 while (1) {
  $$05 = $$05$in + -1 | 0;
  if (($$05$in | 0) <= 1) break;
  $8 = $0 + ($$05$in + -2 << 2) | 0;
  HEAPF32[$8 >> 2] = +HEAPF32[$8 >> 2] - +HEAPF32[$0 + ($$05 << 2) >> 2] * $1;
  $$05$in = $$05;
 }
 $12 = 1.0 - $1 * $1;
 $16 = $12 / (+HEAPF32[$0 >> 2] * $1 + 1.0);
 $$16 = 0;
 while (1) {
  if (($$16 | 0) >= ($2 | 0)) break;
  $18 = $0 + ($$16 << 2) | 0;
  HEAPF32[$18 >> 2] = +HEAPF32[$18 >> 2] * $16;
  $$16 = $$16 + 1 | 0;
 }
 $$0 = $16;
 $$02 = 0;
 $$04 = 0;
 while (1) {
  if ($$04 >>> 0 >= 10) {
   label = 26;
   break;
  }
  $$01 = -1.0;
  $$13 = $$02;
  $$27 = 0;
  while (1) {
   if (($$27 | 0) >= ($2 | 0)) break;
   $26 = +Math_abs(+(+HEAPF32[$0 + ($$27 << 2) >> 2]));
   $27 = $26 > $$01;
   $$01 = $27 ? $26 : $$01;
   $$13 = $27 ? $$27 : $$13;
   $$27 = $$27 + 1 | 0;
  }
  if ($$01 <= 3.999000072479248) {
   label = 26;
   break;
  }
  $$3 = 1;
  while (1) {
   if (($$3 | 0) >= ($2 | 0)) break;
   $35 = $0 + ($$3 + -1 << 2) | 0;
   HEAPF32[$35 >> 2] = +HEAPF32[$35 >> 2] + +HEAPF32[$0 + ($$3 << 2) >> 2] * $1;
   $$3 = $$3 + 1 | 0;
  }
  $39 = 1.0 / $$0;
  $$4 = 0;
  while (1) {
   if (($$4 | 0) >= ($2 | 0)) break;
   $41 = $0 + ($$4 << 2) | 0;
   HEAPF32[$41 >> 2] = +HEAPF32[$41 >> 2] * $39;
   $$4 = $$4 + 1 | 0;
  }
  _silk_bwexpander_FLP($0, $2, .9900000095367432 - (+($$04 | 0) * .10000000149011612 + .800000011920929) * ($$01 + -3.999000072479248) / ($$01 * +($$13 + 1 | 0)));
  $$5$in = $2;
  while (1) {
   $$5 = $$5$in + -1 | 0;
   if (($$5$in | 0) <= 1) break;
   $60 = $0 + ($$5$in + -2 << 2) | 0;
   HEAPF32[$60 >> 2] = +HEAPF32[$60 >> 2] - +HEAPF32[$0 + ($$5 << 2) >> 2] * $1;
   $$5$in = $$5;
  }
  $66 = $12 / (+HEAPF32[$0 >> 2] * $1 + 1.0);
  $$6 = 0;
  while (1) {
   if (($$6 | 0) >= ($2 | 0)) break;
   $68 = $0 + ($$6 << 2) | 0;
   HEAPF32[$68 >> 2] = +HEAPF32[$68 >> 2] * $66;
   $$6 = $$6 + 1 | 0;
  }
  $$0 = $66;
  $$02 = $$13;
  $$04 = $$04 + 1 | 0;
 }
 if ((label | 0) == 26) return;
}

function _silk_LP_interpolate_filter_taps($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $10 = 0, $13 = 0, $24 = 0, $27 = 0, $38 = 0, $41 = 0, $52 = 0, $55 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $77 = 0, $8 = 0;
 if (($2 | 0) >= 4) {
  HEAP32[$0 >> 2] = HEAP32[6236];
  HEAP32[$0 + 4 >> 2] = HEAP32[6237];
  HEAP32[$0 + 8 >> 2] = HEAP32[6238];
  $77 = $1;
  HEAP32[$77 >> 2] = 35497197;
  HEAP32[$77 + 4 >> 2] = 57401098;
  return;
 }
 if (($3 | 0) <= 0) {
  $65 = 24896 + ($2 * 12 | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$65 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$65 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$65 + 8 >> 2];
  $67 = 24960 + ($2 << 3) | 0;
  $72 = HEAP32[$67 + 4 >> 2] | 0;
  $73 = $1;
  HEAP32[$73 >> 2] = HEAP32[$67 >> 2];
  HEAP32[$73 + 4 >> 2] = $72;
  return;
 }
 $7 = $2 + 1 | 0;
 $8 = $3 << 16 >> 16;
 if (($3 | 0) < 32768) {
  $$01 = 0;
  while (1) {
   if (($$01 | 0) == 3) break;
   $10 = HEAP32[24896 + ($2 * 12 | 0) + ($$01 << 2) >> 2] | 0;
   $13 = (HEAP32[24896 + ($7 * 12 | 0) + ($$01 << 2) >> 2] | 0) - $10 | 0;
   HEAP32[$0 + ($$01 << 2) >> 2] = $10 + ((Math_imul($13 >> 16, $8) | 0) + ((Math_imul($13 & 65535, $8) | 0) >> 16));
   $$01 = $$01 + 1 | 0;
  }
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 2) break;
   $24 = HEAP32[24960 + ($2 << 3) + ($$0 << 2) >> 2] | 0;
   $27 = (HEAP32[24960 + ($7 << 3) + ($$0 << 2) >> 2] | 0) - $24 | 0;
   HEAP32[$1 + ($$0 << 2) >> 2] = $24 + ((Math_imul($27 >> 16, $8) | 0) + ((Math_imul($27 & 65535, $8) | 0) >> 16));
   $$0 = $$0 + 1 | 0;
  }
  return;
 } else {
  $$12 = 0;
  while (1) {
   if (($$12 | 0) == 3) break;
   $38 = HEAP32[24896 + ($7 * 12 | 0) + ($$12 << 2) >> 2] | 0;
   $41 = $38 - (HEAP32[24896 + ($2 * 12 | 0) + ($$12 << 2) >> 2] | 0) | 0;
   HEAP32[$0 + ($$12 << 2) >> 2] = $38 + ((Math_imul($41 >> 16, $8) | 0) + ((Math_imul($41 & 65535, $8) | 0) >> 16));
   $$12 = $$12 + 1 | 0;
  }
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == 2) break;
   $52 = HEAP32[24960 + ($7 << 3) + ($$1 << 2) >> 2] | 0;
   $55 = $52 - (HEAP32[24960 + ($2 << 3) + ($$1 << 2) >> 2] | 0) | 0;
   HEAP32[$1 + ($$1 << 2) >> 2] = $52 + ((Math_imul($55 >> 16, $8) | 0) + ((Math_imul($55 & 65535, $8) | 0) >> 16));
   $$1 = $$1 + 1 | 0;
  }
  return;
 }
}

function _pitch_downsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $62 = 0, $63 = 0.0, $65 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $75 = 0.0, $78 = 0.0, $83 = 0.0, $88 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 $6 = sp;
 $7 = $2 >> 1;
 $$01 = 1;
 while (1) {
  $9 = HEAP32[$0 >> 2] | 0;
  if (($$01 | 0) >= ($7 | 0)) break;
  $10 = $$01 << 1;
  HEAPF32[$1 + ($$01 << 2) >> 2] = ((+HEAPF32[$9 + ($10 + -1 << 2) >> 2] + +HEAPF32[$9 + (($10 | 1) << 2) >> 2]) * .5 + +HEAPF32[$9 + ($10 << 2) >> 2]) * .5;
  $$01 = $$01 + 1 | 0;
 }
 HEAPF32[$1 >> 2] = (+HEAPF32[$9 + 4 >> 2] * .5 + +HEAPF32[$9 >> 2]) * .5;
 if (($3 | 0) == 2) {
  $32 = $0 + 4 | 0;
  $$1 = 1;
  while (1) {
   $34 = HEAP32[$32 >> 2] | 0;
   if (($$1 | 0) >= ($7 | 0)) break;
   $35 = $$1 << 1;
   $48 = $1 + ($$1 << 2) | 0;
   HEAPF32[$48 >> 2] = +HEAPF32[$48 >> 2] + ((+HEAPF32[$34 + ($35 + -1 << 2) >> 2] + +HEAPF32[$34 + (($35 | 1) << 2) >> 2]) * .5 + +HEAPF32[$34 + ($35 << 2) >> 2]) * .5;
   $$1 = $$1 + 1 | 0;
  }
  HEAPF32[$1 >> 2] = +HEAPF32[$1 >> 2] + (+HEAPF32[$34 + 4 >> 2] * .5 + +HEAPF32[$34 >> 2]) * .5;
 }
 __celt_autocorr($1, $4, 0, 0, 4, $7);
 HEAPF32[$4 >> 2] = +HEAPF32[$4 >> 2] * 1.000100016593933;
 $$2 = 1;
 while (1) {
  if (($$2 | 0) == 5) break;
  $62 = $4 + ($$2 << 2) | 0;
  $63 = +HEAPF32[$62 >> 2];
  $65 = +($$2 | 0) * .00800000037997961;
  HEAPF32[$62 >> 2] = $63 - $63 * $65 * $65;
  $$2 = $$2 + 1 | 0;
 }
 __celt_lpc($5, $4, 4);
 $$0 = 1.0;
 $$3 = 0;
 while (1) {
  if (($$3 | 0) == 4) break;
  $70 = $$0 * .8999999761581421;
  $71 = $5 + ($$3 << 2) | 0;
  HEAPF32[$71 >> 2] = +HEAPF32[$71 >> 2] * $70;
  $$0 = $70;
  $$3 = $$3 + 1 | 0;
 }
 $75 = +HEAPF32[$5 >> 2];
 HEAPF32[$6 >> 2] = $75 + .800000011920929;
 $78 = +HEAPF32[$5 + 4 >> 2];
 HEAPF32[$6 + 4 >> 2] = $78 + $75 * .800000011920929;
 $83 = +HEAPF32[$5 + 8 >> 2];
 HEAPF32[$6 + 8 >> 2] = $83 + $78 * .800000011920929;
 $88 = +HEAPF32[$5 + 12 >> 2];
 HEAPF32[$6 + 12 >> 2] = $88 + $83 * .800000011920929;
 HEAPF32[$6 + 16 >> 2] = $88 * .800000011920929;
 _celt_fir5($1, $6, $7);
 STACKTOP = sp;
 return;
}

function _silk_decode_pulses($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $10 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $31 = 0, $34 = 0, $38 = 0, $41 = 0, $42 = 0, $5 = 0, $52 = 0, $6 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $5 = sp + 80 | 0;
 $6 = sp;
 $9 = _ec_dec_icdf($0, 25488 + (($2 >> 1) * 9 | 0) | 0, 8) | 0;
 $10 = $4 >> 4;
 do if (($4 & -16 | 0) < ($4 | 0)) if (($4 | 0) == 120) {
  $$01 = $10 + 1 | 0;
  break;
 } else _celt_fatal(44211, 43205, 59); else $$01 = $10; while (0);
 $15 = 25120 + ($9 * 18 | 0) | 0;
 $$04 = 0;
 while (1) {
  if (($$04 | 0) >= ($$01 | 0)) break;
  $17 = $6 + ($$04 << 2) | 0;
  HEAP32[$17 >> 2] = 0;
  $18 = _ec_dec_icdf($0, $15, 8) | 0;
  $19 = $5 + ($$04 << 2) | 0;
  HEAP32[$19 >> 2] = $18;
  $20 = $18;
  $23 = 0;
  while (1) {
   if (($20 | 0) != 17) break;
   $22 = $23 + 1 | 0;
   HEAP32[$17 >> 2] = $22;
   $20 = _ec_dec_icdf($0, 25282 + (($22 | 0) == 10 & 1) | 0, 8) | 0;
   $23 = $22;
  }
  HEAP32[$19 >> 2] = $20;
  $$04 = $$04 + 1 | 0;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) >= ($$01 | 0)) break;
  $31 = HEAP32[$5 + ($$1 << 2) >> 2] | 0;
  $34 = $1 + ($$1 << 16 >> 12 << 1) | 0;
  if (($31 | 0) > 0) _silk_shell_decoder($34, $0, $31); else {
   dest = $34;
   stop = dest + 32 | 0;
   do {
    HEAP16[dest >> 1] = 0;
    dest = dest + 2 | 0;
   } while ((dest | 0) < (stop | 0));
  }
  $$1 = $$1 + 1 | 0;
 }
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($$01 | 0)) break;
  $38 = HEAP32[$6 + ($$2 << 2) >> 2] | 0;
  if (($38 | 0) > 0) {
   $41 = $1 + ($$2 << 16 >> 12 << 1) | 0;
   $$02 = 0;
   while (1) {
    if (($$02 | 0) == 16) break;
    $42 = $41 + ($$02 << 1) | 0;
    $$0 = HEAP16[$42 >> 1] | 0;
    $$03 = 0;
    while (1) {
     if (($$03 | 0) == ($38 | 0)) break;
     $$0 = ($$0 << 1) + (_ec_dec_icdf($0, 44686, 8) | 0) | 0;
     $$03 = $$03 + 1 | 0;
    }
    HEAP16[$42 >> 1] = $$0;
    $$02 = $$02 + 1 | 0;
   }
   $52 = $5 + ($$2 << 2) | 0;
   HEAP32[$52 >> 2] = HEAP32[$52 >> 2] | $38 << 5;
  }
  $$2 = $$2 + 1 | 0;
 }
 _silk_decode_signs($0, $1, $4, $2, $3, $5);
 STACKTOP = sp;
 return;
}

function _deemphasis($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0.0, $$01 = 0, $$04 = 0, $$06 = 0, $$1 = 0.0, $$12 = 0, $$158 = 0, $$159 = 0, $$23 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $20 = 0, $21 = 0, $26 = 0.0, $34 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = ($7 | 0) == 0;
 if (($4 | 0) == 1 & ($3 | 0) == 2) {
  if (!$10) _celt_fatal(41661, 40784, 279);
  _deemphasis_stereo_simple(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $1, $2, +HEAPF32[$5 >> 2], $6);
  STACKTOP = sp;
  return;
 }
 if (!$10) _celt_fatal(41661, 40784, 279);
 $12 = _llvm_stacksave() | 0;
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($2 << 2) | 0) + 15 & -16) | 0;
 $14 = +HEAPF32[$5 >> 2];
 $15 = ($2 | 0) / ($4 | 0) | 0;
 $16 = ($4 | 0) > 1;
 $$04 = 0;
 $$06 = 0;
 while (1) {
  $17 = $6 + ($$06 << 2) | 0;
  $18 = +HEAPF32[$17 >> 2];
  $20 = HEAP32[$0 + ($$06 << 2) >> 2] | 0;
  $21 = $1 + ($$06 << 2) | 0;
  if ($16) {
   $$0 = $18;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($2 | 0)) break;
    $26 = +HEAPF32[$20 + ($$01 << 2) >> 2] + 1.0000000031710769e-30 + $$0;
    HEAPF32[$13 + ($$01 << 2) >> 2] = $26;
    $$0 = $14 * $26;
    $$01 = $$01 + 1 | 0;
   }
   HEAPF32[$17 >> 2] = $$0;
   $$158 = 1;
   label = 16;
  } else {
   $$1 = $18;
   $$12 = 0;
   while (1) {
    if (($$12 | 0) >= ($2 | 0)) break;
    $34 = +HEAPF32[$20 + ($$12 << 2) >> 2] + 1.0000000031710769e-30 + $$1;
    HEAPF32[$21 + ((Math_imul($$12, $3) | 0) << 2) >> 2] = $34 * .000030517578125;
    $$1 = $14 * $34;
    $$12 = $$12 + 1 | 0;
   }
   HEAPF32[$17 >> 2] = $$1;
   if (!$$04) $$159 = 0; else {
    $$158 = $$04;
    label = 16;
   }
  }
  L24 : do if ((label | 0) == 16) {
   label = 0;
   $$23 = 0;
   while (1) {
    if (($$23 | 0) >= ($15 | 0)) {
     $$159 = $$158;
     break L24;
    }
    HEAPF32[$21 + ((Math_imul($$23, $3) | 0) << 2) >> 2] = +HEAPF32[$13 + ((Math_imul($$23, $4) | 0) << 2) >> 2] * .000030517578125;
    $$23 = $$23 + 1 | 0;
   }
  } while (0);
  $$06 = $$06 + 1 | 0;
  if (($$06 | 0) >= ($3 | 0)) break; else $$04 = $$159;
 }
 _llvm_stackrestore($12 | 0);
 STACKTOP = sp;
 return;
}

function _validate_opus_decoder($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 >= 2) _celt_fatal(49278, 48228, 84);
 $4 = HEAP32[$0 + 12 >> 2] | 0;
 L4 : do if (($4 | 0) < 16e3) if (($4 | 0) < 12e3) {
  switch ($4 | 0) {
  case 8e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49335, 48228, 85);
 } else {
  switch ($4 | 0) {
  case 12e3:
   {
    break L4;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49335, 48228, 85);
 } else {
  if (($4 | 0) < 24e3) {
   switch ($4 | 0) {
   case 16e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(49335, 48228, 85);
  }
  if (($4 | 0) < 48e3) {
   switch ($4 | 0) {
   case 24e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(49335, 48228, 85);
  } else {
   switch ($4 | 0) {
   case 48e3:
    {
     break L4;
     break;
    }
   default:
    {}
   }
   _celt_fatal(49335, 48228, 85);
  }
 } while (0);
 if ((HEAP32[$0 + 24 >> 2] | 0) != ($4 | 0)) _celt_fatal(49444, 48228, 86);
 $9 = HEAP32[$0 + 28 >> 2] | 0;
 L25 : do if (($9 | 0) < 12e3) if (($9 | 0) < 8e3) {
  switch ($9 | 0) {
  case 0:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49502, 48228, 87);
 } else {
  switch ($9 | 0) {
  case 8e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49502, 48228, 87);
 } else if (($9 | 0) < 16e3) {
  switch ($9 | 0) {
  case 12e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49502, 48228, 87);
 } else {
  switch ($9 | 0) {
  case 16e3:
   {
    break L25;
    break;
   }
  default:
   {}
  }
  _celt_fatal(49502, 48228, 87);
 } while (0);
 if ((HEAP32[$0 + 16 >> 2] | 0) != ($2 | 0)) _celt_fatal(49696, 48228, 88);
 if ((HEAP32[$0 + 20 >> 2] | 0) >>> 0 >= 3) _celt_fatal(49758, 48228, 89);
 switch (HEAP32[$0 + 32 >> 2] | 0) {
 case 60:
 case 40:
 case 20:
 case 10:
 case 0:
  break;
 default:
  _celt_fatal(49896, 48228, 90);
 }
 $18 = HEAP32[$0 + 44 >> 2] | 0;
 if (($18 | 0) <= -1) _celt_fatal(50105, 48228, 92);
 if ($18 | 0) _celt_fatal(50137, 48228, 93);
 if (((HEAP32[$0 + 48 >> 2] | 0) + -1 | 0) >>> 0 < 2) return; else _celt_fatal(50181, 48228, 95);
}

function _comb_filter($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0.0, $$0$phi = 0.0, $$01 = 0.0, $$01$phi = 0.0, $$02 = 0.0, $$02$phi = 0.0, $$03 = 0.0, $$04 = 0, $$05 = 0, $17 = 0, $20 = 0.0, $23 = 0.0, $26 = 0.0, $29 = 0.0, $32 = 0.0, $35 = 0.0, $55 = 0.0, $57 = 0.0, $58 = 0.0, $61 = 0.0, $63 = 0, $spec$select = 0;
 if ($5 == 0.0 & $6 == 0.0) {
  if (($1 | 0) == ($0 | 0)) return;
  _memmove($0 | 0, $1 | 0, $4 << 2 | 0) | 0;
  return;
 }
 $spec$select = ($2 | 0) > 15 ? $2 : 15;
 $17 = ($3 | 0) > 15 ? $3 : 15;
 $20 = +HEAPF32[224 + ($7 * 12 | 0) >> 2] * $5;
 $23 = +HEAPF32[224 + ($7 * 12 | 0) + 4 >> 2] * $5;
 $26 = +HEAPF32[224 + ($7 * 12 | 0) + 8 >> 2] * $5;
 $29 = +HEAPF32[224 + ($8 * 12 | 0) >> 2] * $6;
 $32 = +HEAPF32[224 + ($8 * 12 | 0) + 4 >> 2] * $6;
 $35 = +HEAPF32[224 + ($8 * 12 | 0) + 8 >> 2] * $6;
 $$05 = $5 == $6 & ($spec$select | 0) == ($17 | 0) & ($7 | 0) == ($8 | 0) ? 0 : $10;
 $$0 = +HEAPF32[$1 + (-2 - $17 << 2) >> 2];
 $$01 = +HEAPF32[$1 + (~$17 << 2) >> 2];
 $$02 = +HEAPF32[$1 + (0 - $17 << 2) >> 2];
 $$03 = +HEAPF32[$1 + (1 - $17 << 2) >> 2];
 $$04 = 0;
 while (1) {
  if (($$04 | 0) >= ($$05 | 0)) break;
  $55 = +HEAPF32[$1 + ($$04 - $17 + 2 << 2) >> 2];
  $57 = +HEAPF32[$9 + ($$04 << 2) >> 2];
  $58 = $57 * $57;
  $61 = 1.0 - $58;
  $63 = $$04 - $spec$select | 0;
  HEAPF32[$0 + ($$04 << 2) >> 2] = +HEAPF32[$1 + ($$04 << 2) >> 2] + $61 * $20 * +HEAPF32[$1 + ($63 << 2) >> 2] + $61 * $23 * (+HEAPF32[$1 + ($63 + 1 << 2) >> 2] + +HEAPF32[$1 + ($63 + -1 << 2) >> 2]) + $61 * $26 * (+HEAPF32[$1 + ($63 + 2 << 2) >> 2] + +HEAPF32[$1 + ($63 + -2 << 2) >> 2]) + $58 * $29 * $$02 + $58 * $32 * ($$03 + $$01) + $58 * $35 * ($55 + $$0);
  $$02$phi = $$03;
  $$01$phi = $$02;
  $$0$phi = $$01;
  $$03 = $55;
  $$04 = $$04 + 1 | 0;
  $$02 = $$02$phi;
  $$01 = $$01$phi;
  $$0 = $$0$phi;
 }
 if (!($6 == 0.0)) {
  _comb_filter_const_c($0 + ($$04 << 2) | 0, $1 + ($$04 << 2) | 0, $17, $4 - $$04 | 0, $29, $32, $35);
  return;
 }
 if (($1 | 0) == ($0 | 0)) return;
 _memmove($0 + ($$05 << 2) | 0, $1 + ($$05 << 2) | 0, $4 - $$05 << 2 | 0) | 0;
 return;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $26 = $17;
  while (1) {
   if (($26 | 0) < 0) break;
   $$04855 = $$04855 - $26 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $26 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $26 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($26 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _denormalise_bands($$0$5$val, $$0$8$val, $0, $1, $2, $3, $4, $5, $6, $7) {
 $$0$5$val = $$0$5$val | 0;
 $$0$8$val = $$0$8$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$08 = 0, $$1 = 0, $$13 = 0, $$19 = 0, $$2 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $32 = 0, $33 = 0, $37 = 0, $42 = 0.0, $48 = 0.0, $8 = 0, $spec$select4 = 0, $spec$select5 = 0, $spec$select6 = 0, $$1$looptemp = 0, $$2$looptemp = 0;
 $8 = Math_imul($$0$8$val, $5) | 0;
 $12 = Math_imul(HEAP16[$$0$5$val + ($4 << 1) >> 1] | 0, $5) | 0;
 if (($6 | 0) == 1) $$04 = $12; else {
  $14 = ($8 | 0) / ($6 | 0) | 0;
  $$04 = ($12 | 0) < ($14 | 0) ? $12 : $14;
 }
 $16 = ($7 | 0) == 0;
 $spec$select4 = $16 ? $4 : 0;
 $spec$select5 = $16 ? $3 : 0;
 $spec$select6 = $16 ? $$04 : 0;
 $17 = $$0$5$val + ($spec$select5 << 1) | 0;
 $18 = HEAP16[$17 >> 1] | 0;
 $20 = Math_imul($18 << 16 >> 16, $5) | 0;
 $$02 = $1;
 $$08 = 0;
 $22 = $18;
 while (1) {
  if (($$08 | 0) >= (Math_imul($22 << 16 >> 16, $5) | 0)) break;
  HEAPF32[$$02 >> 2] = 0.0;
  $$02 = $$02 + 4 | 0;
  $$08 = $$08 + 1 | 0;
  $22 = HEAP16[$17 >> 1] | 0;
 }
 $$01 = $0 + ($20 << 2) | 0;
 $$13 = $$02;
 $$19 = $spec$select5;
 while (1) {
  if (($$19 | 0) >= ($spec$select4 | 0)) break;
  $32 = Math_imul(HEAP16[$$0$5$val + ($$19 << 1) >> 1] | 0, $5) | 0;
  $33 = $$19 + 1 | 0;
  $37 = Math_imul(HEAP16[$$0$5$val + ($33 << 1) >> 1] | 0, $5) | 0;
  $42 = +HEAPF32[$2 + ($$19 << 2) >> 2] + +HEAPF32[20304 + ($$19 << 2) >> 2];
  $48 = +Math_exp(+(($42 > 32.0 ? 32.0 : $42) * .6931471805599453));
  $$0 = $32;
  $$1 = $$01;
  $$2 = $$13;
  do {
   $$1$looptemp = $$1;
   $$1 = $$1 + 4 | 0;
   $$2$looptemp = $$2;
   $$2 = $$2 + 4 | 0;
   HEAPF32[$$2$looptemp >> 2] = +HEAPF32[$$1$looptemp >> 2] * $48;
   $$0 = $$0 + 1 | 0;
  } while (($$0 | 0) < ($37 | 0));
  $$01 = $$1;
  $$13 = $$2;
  $$19 = $33;
 }
 if (($spec$select5 | 0) > ($spec$select4 | 0)) _celt_fatal(40182, 40213, 263); else {
  _memset($1 + ($spec$select6 << 2) | 0, 0, $8 - $spec$select6 << 2 | 0) | 0;
  return;
 }
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _downmix_and_resample($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $$1 = 0, $$14 = 0.0, $$16 = 0, $$18 = 0, $11 = 0, $19 = 0, $20 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, sp = 0;
 sp = STACKTOP;
 if (!$4) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $11 = ($9 | 0) == 48e3;
 if ($11) {
  $$16 = $5 << 1;
  $$18 = $4 << 1;
 } else if (($9 | 0) == 16e3) {
  $$16 = ($5 << 1 | 0) / 3 | 0;
  $$18 = ($4 << 1 | 0) / 3 | 0;
 } else {
  $$16 = $5;
  $$18 = $4;
 }
 $19 = _llvm_stacksave() | 0;
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$18 << 2) | 0) + 15 & -16) | 0;
 FUNCTION_TABLE_viiiiiii[$0 & 1]($1, $20, $$18, $$16, $6, $7, $8);
 if (($7 | 0) == -2) $$14 = .000030517578125 / +($8 | 0); else $$14 = ($7 | 0) > -1 ? .0000152587890625 : .000030517578125;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($$18 | 0)) break;
  $26 = $20 + ($$02 << 2) | 0;
  HEAPF32[$26 >> 2] = +HEAPF32[$26 >> 2] * $$14;
  $$02 = $$02 + 1 | 0;
 }
 L17 : do if ($11) $$01 = +_silk_resampler_down2_hp($3, $2, $20, $$18); else {
  if (($9 | 0) >= 24e3) {
   switch ($9 | 0) {
   case 24e3:
    break;
   default:
    {
     $$01 = 0.0;
     break L17;
    }
   }
   _memcpy($2 | 0, $20 | 0, $$18 << 2 | 0) | 0;
   $$01 = 0.0;
   break;
  }
  switch ($9 | 0) {
  case 16e3:
   break;
  default:
   {
    $$01 = 0.0;
    break L17;
   }
  }
  $32 = $$18 * 3 | 0;
  $33 = _llvm_stacksave() | 0;
  $34 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($32 << 2) | 0) + 15 & -16) | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($$18 | 0)) break;
   $37 = HEAP32[$20 + ($$1 << 2) >> 2] | 0;
   $38 = $$1 * 3 | 0;
   HEAP32[$34 + ($38 << 2) >> 2] = $37;
   HEAP32[$34 + ($38 + 1 << 2) >> 2] = $37;
   HEAP32[$34 + ($38 + 2 << 2) >> 2] = $37;
   $$1 = $$1 + 1 | 0;
  }
  +_silk_resampler_down2_hp($3, $2, $34, $32);
  _llvm_stackrestore($33 | 0);
  $$01 = 0.0;
 } while (0);
 _llvm_stackrestore($19 | 0);
 $$0 = $$01;
 STACKTOP = sp;
 return +$$0;
}

function _kf_bfly2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$sroa_idx3 = 0, $10 = 0, $11 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $20 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $26 = 0, $27 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $38 = 0, $39 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $48 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $54 = 0, $55 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 if (($1 | 0) != 4) _celt_fatal(41939, 41962, 76);
 $$0 = $0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $5 = $$0 + 32 | 0;
  $6 = +HEAPF32[$5 >> 2];
  $$sroa_idx3 = $$0 + 36 | 0;
  $7 = +HEAPF32[$$sroa_idx3 >> 2];
  $8 = +HEAPF32[$$0 >> 2];
  HEAPF32[$5 >> 2] = $8 - $6;
  $10 = $$0 + 4 | 0;
  $11 = +HEAPF32[$10 >> 2];
  HEAPF32[$$sroa_idx3 >> 2] = $11 - $7;
  HEAPF32[$$0 >> 2] = $8 + $6;
  HEAPF32[$10 >> 2] = $11 + $7;
  $15 = $$0 + 40 | 0;
  $16 = +HEAPF32[$15 >> 2];
  $17 = $$0 + 44 | 0;
  $18 = +HEAPF32[$17 >> 2];
  $20 = ($16 + $18) * .7071067690849304;
  $22 = ($18 - $16) * .7071067690849304;
  $23 = $$0 + 8 | 0;
  $24 = +HEAPF32[$23 >> 2];
  HEAPF32[$15 >> 2] = $24 - $20;
  $26 = $$0 + 12 | 0;
  $27 = +HEAPF32[$26 >> 2];
  HEAPF32[$17 >> 2] = $27 - $22;
  HEAPF32[$23 >> 2] = $24 + $20;
  HEAPF32[$26 >> 2] = $27 + $22;
  $31 = $$0 + 52 | 0;
  $32 = +HEAPF32[$31 >> 2];
  $33 = $$0 + 48 | 0;
  $34 = +HEAPF32[$33 >> 2];
  $35 = $$0 + 16 | 0;
  $36 = +HEAPF32[$35 >> 2];
  HEAPF32[$33 >> 2] = $36 - $32;
  $38 = $$0 + 20 | 0;
  $39 = +HEAPF32[$38 >> 2];
  HEAPF32[$31 >> 2] = $39 + $34;
  HEAPF32[$35 >> 2] = $36 + $32;
  HEAPF32[$38 >> 2] = $39 - $34;
  $43 = $$0 + 60 | 0;
  $44 = +HEAPF32[$43 >> 2];
  $45 = $$0 + 56 | 0;
  $46 = +HEAPF32[$45 >> 2];
  $48 = ($44 - $46) * .7071067690849304;
  $50 = ($44 + $46) * -.7071067690849304;
  $51 = $$0 + 24 | 0;
  $52 = +HEAPF32[$51 >> 2];
  HEAPF32[$45 >> 2] = $52 - $48;
  $54 = $$0 + 28 | 0;
  $55 = +HEAPF32[$54 >> 2];
  HEAPF32[$43 >> 2] = $55 - $50;
  HEAPF32[$51 >> 2] = $52 + $48;
  HEAPF32[$54 >> 2] = $55 + $50;
  $$0 = $$0 + 64 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _silk_decode_frame($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $18 = 0, $19 = 0, $21 = 0, $29 = 0, $39 = 0, $40 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $6 = sp;
 $7 = $0 + 2328 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 + 136 >> 2] = 0;
 if (($8 + -1 | 0) >>> 0 >= 320) _celt_fatal(42914, 42963, 58);
 switch ($4 | 0) {
 case 0:
  {
   $$pre$phiZ2D = $0 + 2388 | 0;
   label = 6;
   break;
  }
 case 2:
  {
   $11 = $0 + 2388 | 0;
   if ((HEAP32[$0 + 2420 + (HEAP32[$11 >> 2] << 2) >> 2] | 0) == 1) {
    $$pre$phiZ2D = $11;
    label = 6;
   } else label = 9;
   break;
  }
 default:
  label = 9;
 }
 do if ((label | 0) == 6) {
  $18 = _llvm_stacksave() | 0;
  $19 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * (($8 + 15 & -16) << 1) | 0) + 15 & -16) | 0;
  _silk_decode_indices($0, $1, HEAP32[$$pre$phiZ2D >> 2] | 0, $4, $5);
  $21 = $0 + 2765 | 0;
  _silk_decode_pulses($1, $19, HEAP8[$21 >> 0] | 0, HEAP8[$0 + 2766 >> 0] | 0, HEAP32[$7 >> 2] | 0);
  _silk_decode_parameters($0, $6, $5);
  _silk_decode_core($0, $6, $2, $19);
  _silk_PLC($0, $6, $2, 0);
  HEAP32[$0 + 4160 >> 2] = 0;
  $29 = HEAP8[$21 >> 0] | 0;
  HEAP32[$0 + 4164 >> 2] = $29 << 24 >> 24;
  if (($29 & 255) < 3) {
   HEAP32[$0 + 2376 >> 2] = 0;
   _llvm_stackrestore($18 | 0);
   break;
  } else _celt_fatal(42983, 42963, 94);
 } else if ((label | 0) == 9) {
  HEAP8[$0 + 2765 >> 0] = HEAP32[$0 + 4164 >> 2];
  _silk_PLC($0, $6, $2, 1);
 } while (0);
 $39 = HEAP32[$0 + 2336 >> 2] | 0;
 $40 = HEAP32[$7 >> 2] | 0;
 if (($39 | 0) < ($40 | 0)) _celt_fatal(43058, 42963, 107); else {
  $42 = $39 - $40 | 0;
  _memmove($0 + 1348 | 0, $0 + 1348 + ($40 << 1) | 0, $42 << 1 | 0) | 0;
  _memcpy($0 + 1348 + ($42 << 1) | 0, $2 | 0, HEAP32[$7 >> 2] << 1 | 0) | 0;
  _silk_CNG($0, $6, $2, $8);
  _silk_PLC_glue_frames($0, $2, $8);
  HEAP32[$0 + 2308 >> 2] = HEAP32[$6 + ((HEAP32[$0 + 2324 >> 2] | 0) + -1 << 2) >> 2];
  HEAP32[$3 >> 2] = $8;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _resampler_basic_direct_double($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$sroa$0$1 = 0.0, $$sroa$10$1 = 0.0, $$sroa$4$1 = 0.0, $$sroa$7$1 = 0.0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $32 = 0, $40 = 0.0, $41 = 0, $49 = 0, $57 = 0, $7 = 0, $74 = 0, $75 = 0, $8 = 0, label = 0;
 $7 = HEAP32[$0 + 24 >> 2] | 0;
 $8 = $0 + 60 | 0;
 $12 = $0 + 64 | 0;
 $17 = HEAP32[$0 + 76 >> 2] | 0;
 $19 = HEAP32[$0 + 92 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $23 = HEAP32[$0 + 40 >> 2] | 0;
 $25 = HEAP32[$0 + 12 >> 2] | 0;
 $$01 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$02 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$04 = 0;
 while (1) {
  if (($$02 | 0) >= (HEAP32[$3 >> 2] | 0)) {
   label = 8;
   break;
  }
  if (($$04 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 8;
   break;
  }
  $31 = $17 + ((Math_imul($$01, $7) | 0) << 2) | 0;
  $32 = $2 + ($$02 << 2) | 0;
  $$0 = 0;
  $$sroa$0$1 = 0.0;
  $$sroa$10$1 = 0.0;
  $$sroa$4$1 = 0.0;
  $$sroa$7$1 = 0.0;
  while (1) {
   if (($$0 | 0) >= ($7 | 0)) break;
   $40 = $$sroa$0$1 + +HEAPF32[$31 + ($$0 << 2) >> 2] * +HEAPF32[$32 + ($$0 << 2) >> 2];
   $41 = $$0 | 1;
   $49 = $$0 | 2;
   $57 = $$0 | 3;
   $$0 = $$0 + 4 | 0;
   $$sroa$0$1 = $40;
   $$sroa$10$1 = $$sroa$10$1 + +HEAPF32[$31 + ($57 << 2) >> 2] * +HEAPF32[$32 + ($57 << 2) >> 2];
   $$sroa$4$1 = $$sroa$4$1 + +HEAPF32[$31 + ($41 << 2) >> 2] * +HEAPF32[$32 + ($41 << 2) >> 2];
   $$sroa$7$1 = $$sroa$7$1 + +HEAPF32[$31 + ($49 << 2) >> 2] * +HEAPF32[$32 + ($49 << 2) >> 2];
  }
  HEAPF32[$4 + ((Math_imul($19, $$04) | 0) << 2) >> 2] = $$sroa$0$1 + $$sroa$4$1 + $$sroa$7$1 + $$sroa$10$1;
  $74 = $$01 + $23 | 0;
  $75 = $74 >>> 0 < $25 >>> 0;
  $$01 = $74 - ($75 ? 0 : $25) | 0;
  $$02 = $$02 + $21 + (($75 ^ 1) & 1) | 0;
  $$04 = $$04 + 1 | 0;
 }
 if ((label | 0) == 8) {
  HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] = $$02;
  HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] = $$01;
  return $$04 | 0;
 }
 return 0;
}

function _silk_resampler_private_up2_HQ($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $72 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $91 = 0;
 $4 = $0 + 4 | 0;
 $5 = $0 + 8 | 0;
 $6 = $0 + 12 | 0;
 $7 = $0 + 16 | 0;
 $8 = $0 + 20 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $13 = HEAP16[$2 + ($$0 << 1) >> 1] << 10;
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = $13 - $14 | 0;
  $21 = (($15 >> 16) * 1746 | 0) + ((($15 & 65535) * 1746 | 0) >>> 16) | 0;
  $22 = $14 + $21 | 0;
  HEAP32[$0 >> 2] = $13 + $21;
  $24 = HEAP32[$4 >> 2] | 0;
  $25 = $22 - $24 | 0;
  $31 = (($25 >> 16) * 14986 | 0) + ((($25 & 65535) * 14986 | 0) >>> 16) | 0;
  $32 = $24 + $31 | 0;
  HEAP32[$4 >> 2] = $22 + $31;
  $35 = $32 - (HEAP32[$5 >> 2] | 0) | 0;
  $41 = (Math_imul($35 >> 16, -26453) | 0) + ((Math_imul($35 & 65535, -26453) | 0) >> 16) | 0;
  $43 = $32 + $41 | 0;
  HEAP32[$5 >> 2] = $32 + ($35 + $41);
  if (($43 | 0) > 33553919) $51 = 32767; else if (($43 | 0) < -33554944) $51 = -32768; else $51 = ($43 >> 9) + 1 >> 1;
  $52 = $$0 << 1;
  HEAP16[$1 + ($52 << 1) >> 1] = $51;
  $54 = HEAP32[$6 >> 2] | 0;
  $55 = $13 - $54 | 0;
  $61 = (($55 >> 16) * 6854 | 0) + ((($55 & 65535) * 6854 | 0) >>> 16) | 0;
  $62 = $54 + $61 | 0;
  HEAP32[$6 >> 2] = $13 + $61;
  $64 = HEAP32[$7 >> 2] | 0;
  $65 = $62 - $64 | 0;
  $71 = (($65 >> 16) * 25769 | 0) + ((($65 & 65535) * 25769 | 0) >>> 16) | 0;
  $72 = $64 + $71 | 0;
  HEAP32[$7 >> 2] = $62 + $71;
  $75 = $72 - (HEAP32[$8 >> 2] | 0) | 0;
  $81 = (Math_imul($75 >> 16, -9994) | 0) + ((Math_imul($75 & 65535, -9994) | 0) >> 16) | 0;
  $83 = $72 + $81 | 0;
  HEAP32[$8 >> 2] = $72 + ($75 + $81);
  if (($83 | 0) > 33553919) $91 = 32767; else if (($83 | 0) < -33554944) $91 = -32768; else $91 = ($83 >> 9) + 1 >> 1;
  HEAP16[$1 + (($52 | 1) << 1) >> 1] = $91;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_find_LPC_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0.0, $17 = 0, $25 = 0, $29 = 0.0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $43 = 0.0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1696 | 0;
 $4 = sp + 1632 | 0;
 $5 = sp + 1600 | 0;
 $6 = sp + 1536 | 0;
 $7 = sp;
 $10 = $0 + 4640 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = (HEAP32[$0 + 4588 >> 2] | 0) + $11 | 0;
 $13 = $0 + 4767 | 0;
 HEAP8[$13 >> 0] = 4;
 $14 = $0 + 4580 | 0;
 $16 = +_silk_burg_modified_FLP($4, $2, $3, $12, HEAP32[$14 >> 2] | 0, $11);
 $17 = $0 + 4632 | 0;
 L1 : do if (HEAP32[$17 >> 2] | 0) if (!(HEAP32[$0 + 4664 >> 2] | 0)) if ((HEAP32[$14 >> 2] | 0) == 4) {
  $25 = $12 << 1;
  $29 = $16 - +_silk_burg_modified_FLP($6, $2 + ($25 << 2) | 0, $3, $12, 2, HEAP32[$10 >> 2] | 0);
  _silk_A2NLSF_FLP($1, $6, HEAP32[$10 >> 2] | 0);
  $31 = $0 + 4500 | 0;
  $$0 = 3402823466385288598117041.0e14;
  $$01 = $29;
  $$02 = 3;
  while (1) {
   if (($$02 | 0) <= -1) break L1;
   _silk_interpolate($5, $31, $1, $$02, HEAP32[$10 >> 2] | 0);
   _silk_NLSF2A_FLP($6, $5, HEAP32[$10 >> 2] | 0);
   _silk_LPC_analysis_filter_FLP($7, $6, $2, $25, HEAP32[$10 >> 2] | 0);
   $36 = HEAP32[$10 >> 2] | 0;
   $37 = $7 + ($36 << 2) | 0;
   $38 = $12 - $36 | 0;
   $39 = +_silk_energy_FLP($37, $38);
   $43 = $39 + +_silk_energy_FLP($37 + ($12 << 2) | 0, $38);
   if ($$01 > $43) {
    HEAP8[$13 >> 0] = $$02;
    $$1 = $43;
   } else if ($$0 < $43) break L1; else $$1 = $$01;
   $$0 = $43;
   $$01 = $$1;
   $$02 = $$02 + -1 | 0;
  }
 } while (0);
 if ((HEAP8[$13 >> 0] | 0) == 4) {
  _silk_A2NLSF_FLP($1, $4, HEAP32[$10 >> 2] | 0);
  if ((HEAP8[$13 >> 0] | 0) == 4) {
   STACKTOP = sp;
   return;
  }
 }
 if (!(HEAP32[$17 >> 2] | 0)) _celt_fatal(46723, 46888, 103);
 if (HEAP32[$0 + 4664 >> 2] | 0) _celt_fatal(46723, 46888, 103);
 if ((HEAP32[$14 >> 2] | 0) == 4) {
  STACKTOP = sp;
  return;
 } else _celt_fatal(46723, 46888, 103);
}

function _silk_HP_variable_cutoff($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $28 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $53 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $72 = 0, $84 = 0, $91 = 0, $spec$select = 0, $spec$select10 = 0;
 if ((HEAP8[$0 + 4541 >> 0] | 0) != 2) return;
 $6 = Math_imul(HEAP32[$0 + 4576 >> 2] | 0, 65536e3) | 0;
 $11 = (_silk_lin2log(($6 | 0) / (HEAP32[$0 + 4544 >> 2] | 0) | 0) | 0) + -2048 | 0;
 $13 = HEAP32[$0 + 4696 >> 2] | 0;
 $15 = 0 - ($13 << 2) | 0;
 $17 = $13 << 16 >> 16;
 $18 = Math_imul($15 >> 16, $17) | 0;
 $20 = Math_imul($15 & 65532, $17) | 0;
 $28 = Math_imul($18 + ($20 >> 16) >> 16, $11 - ((_silk_lin2log(3932160) | 0) + 63488) << 16 >> 16) | 0;
 $39 = $11 + ($28 + ((Math_imul($18 + ($20 >>> 16) & 65535, $11 - ((_silk_lin2log(3932160) | 0) + 63488) << 16 >> 16) | 0) >> 16)) | 0;
 $40 = $0 + 8 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 $43 = $39 - ($41 >> 8) | 0;
 $spec$select = ($43 | 0) < 0 ? $43 * 3 | 0 : $43;
 $spec$select10 = ($spec$select | 0) > -51 ? $spec$select : -51;
 $53 = Math_imul(HEAP32[$0 + 4532 >> 2] << 16 >> 16, (($spec$select10 | 0) < 51 ? $spec$select10 : 51) << 16 >> 16) | 0;
 HEAP32[$40 >> 2] = $41 + ((($53 >> 16) * 6554 | 0) + ((($53 & 65535) * 6554 | 0) >>> 16));
 $62 = (_silk_lin2log(60) | 0) << 8;
 $65 = ($62 | 0) > ((_silk_lin2log(100) | 0) << 8 | 0);
 $66 = HEAP32[$40 >> 2] | 0;
 do if ($65) {
  if (($66 | 0) > ((_silk_lin2log(60) | 0) << 8 | 0)) {
   $91 = (_silk_lin2log(60) | 0) << 8;
   break;
  }
  $72 = HEAP32[$40 >> 2] | 0;
  if (($72 | 0) < ((_silk_lin2log(100) | 0) << 8 | 0)) {
   $91 = (_silk_lin2log(100) | 0) << 8;
   break;
  } else {
   $91 = HEAP32[$40 >> 2] | 0;
   break;
  }
 } else {
  if (($66 | 0) > ((_silk_lin2log(100) | 0) << 8 | 0)) {
   $91 = (_silk_lin2log(100) | 0) << 8;
   break;
  }
  $84 = HEAP32[$40 >> 2] | 0;
  if (($84 | 0) < ((_silk_lin2log(60) | 0) << 8 | 0)) {
   $91 = (_silk_lin2log(60) | 0) << 8;
   break;
  } else {
   $91 = HEAP32[$40 >> 2] | 0;
   break;
  }
 } while (0);
 HEAP32[$40 >> 2] = $91;
 return;
}

function _ec_enc_done($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$12 = 0, $$15 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $51 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $79 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 28 >> 2] | 0;
 $3 = Math_clz32($2 | 0) | 0;
 $4 = 2147483647 >>> $3;
 $6 = HEAP32[$0 + 32 >> 2] | 0;
 $9 = $6 + $4 & -2147483648 >> $3;
 if (($9 | $4) >>> 0 < ($6 + $2 | 0) >>> 0) {
  $$0 = $3;
  $$04 = $9;
 } else {
  $14 = $4 >>> 1;
  $$0 = $3 + 1 | 0;
  $$04 = $6 + $14 & ~$14;
 }
 $18 = ~$$0;
 $22 = $$0 + (($18 | 0) > -1 ? $18 : -1) + 8 & -8;
 $$1 = $$0;
 $$15 = $$04;
 while (1) {
  if (($$1 | 0) <= 0) break;
  _ec_enc_carry_out($0, $$15 >>> 23);
  $$1 = $$1 + -8 | 0;
  $$15 = $$15 << 8 & 2147483392;
 }
 if ((HEAP32[$0 + 40 >> 2] | 0) > -1) label = 8; else if (HEAP32[$0 + 36 >> 2] | 0) label = 8;
 if ((label | 0) == 8) _ec_enc_carry_out($0, 0);
 $37 = HEAP32[$0 + 16 >> 2] | 0;
 $38 = $0 + 44 | 0;
 $39 = ~$37;
 $43 = $37 + (($39 | 0) > -8 ? $39 : -8) + 8 & -8;
 $$01 = HEAP32[$0 + 12 >> 2] | 0;
 $$03 = $37;
 while (1) {
  if (($$03 | 0) <= 7) break;
  $46 = _ec_write_byte_at_end($0, $$01 & 255) | 0;
  HEAP32[$38 >> 2] = HEAP32[$38 >> 2] | $46;
  $$01 = $$01 >>> 8;
  $$03 = $$03 + -8 | 0;
 }
 $51 = $37 - $43 | 0;
 if (HEAP32[$38 >> 2] | 0) return;
 $55 = $0 + 24 | 0;
 $56 = HEAP32[$55 >> 2] | 0;
 $58 = $0 + 4 | 0;
 $61 = $0 + 8 | 0;
 _memset((HEAP32[$0 >> 2] | 0) + $56 | 0, 0, (HEAP32[$58 >> 2] | 0) - $56 - (HEAP32[$61 >> 2] | 0) | 0) | 0;
 if (($51 | 0) <= 0) return;
 $65 = HEAP32[$61 >> 2] | 0;
 $66 = HEAP32[$58 >> 2] | 0;
 if ($66 >>> 0 <= $65 >>> 0) {
  HEAP32[$38 >> 2] = -1;
  return;
 }
 $68 = $22 - $$0 | 0;
 if (($51 | 0) > ($68 | 0) ? ((HEAP32[$55 >> 2] | 0) + $65 | 0) >>> 0 >= $66 >>> 0 : 0) {
  HEAP32[$38 >> 2] = -1;
  $$12 = $$01 & (1 << $68) + -1;
 } else $$12 = $$01;
 $79 = (HEAP32[$0 >> 2] | 0) + ($66 - $65 + -1) | 0;
 HEAP8[$79 >> 0] = $$12 | (HEAPU8[$79 >> 0] | 0);
 return;
}

function _silk_process_NLSFs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $6 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 32 | 0;
 $6 = sp;
 $7 = $0 + 4632 | 0;
 if ((HEAP32[$7 >> 2] | 0) != 1) if ((HEAP8[$0 + 4767 >> 0] | 0) != 4) _celt_fatal(45044, 45147, 51);
 $15 = HEAP32[$0 + 4532 >> 2] << 16 >> 16;
 $20 = (Math_imul($15, -5) | 0) + ($15 * 59246 >> 16) + 3146 | 0;
 $$0 = $20 + ((HEAP32[$0 + 4580 >> 2] | 0) == 2 ? $20 >> 1 : 0) | 0;
 if (($$0 | 0) <= 0) _celt_fatal(45168, 45147, 63);
 $27 = $0 + 4640 | 0;
 _silk_NLSF_VQ_weights_laroia($5, $2, HEAP32[$27 >> 2] | 0);
 L8 : do if ((HEAP32[$7 >> 2] | 0) == 1) {
  $31 = $0 + 4767 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  if ($32 << 24 >> 24 < 4) {
   _silk_interpolate($4, $3, $2, $32 << 24 >> 24, HEAP32[$27 >> 2] | 0);
   _silk_NLSF_VQ_weights_laroia($6, $4, HEAP32[$27 >> 2] | 0);
   $38 = HEAP8[$31 >> 0] | 0;
   $40 = (Math_imul($38, $38) | 0) << 27;
   $41 = HEAP32[$27 >> 2] | 0;
   $42 = $40 >> 16;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($41 | 0)) {
     $74 = 1;
     break L8;
    }
    $44 = $5 + ($$01 << 1) | 0;
    HEAP16[$44 >> 1] = (HEAP16[$44 >> 1] >> 1) + ((Math_imul($42, HEAP16[$6 + ($$01 << 1) >> 1] | 0) | 0) >>> 16);
    $$01 = $$01 + 1 | 0;
   }
  } else $74 = 0;
 } else $74 = 0; while (0);
 _silk_NLSF_encode($0 + 4744 | 0, $2, HEAP32[$0 + 4692 >> 2] | 0, $5, $$0, HEAP32[$0 + 4660 >> 2] | 0, HEAP8[$0 + 4765 >> 0] | 0);
 $64 = $1 + 32 | 0;
 _silk_NLSF2A($64, $2, HEAP32[$27 >> 2] | 0);
 if ($74) {
  _silk_interpolate($4, $3, $2, HEAP8[$0 + 4767 >> 0] | 0, HEAP32[$27 >> 2] | 0);
  _silk_NLSF2A($1, $4, HEAP32[$27 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 $71 = HEAP32[$27 >> 2] | 0;
 if (($71 | 0) >= 17) _celt_fatal(45202, 45147, 104);
 _memcpy($1 | 0, $64 | 0, $71 << 1 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _memchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$03555 = 0, $$036$lcssa = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $13 = 0, $16 = 0, $22 = 0, $23 = 0, $32 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0;
 $5 = ($1 | 0) != 0;
 L1 : do if ($5 & ($0 & 3 | 0) != 0) {
  $$03555 = $0;
  $$03654 = $1;
  while (1) {
   if (!(HEAP8[$$03555 >> 0] | 0)) {
    $32 = $$03555;
    break L1;
   }
   $8 = $$03555 + 1 | 0;
   $9 = $$03654 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$03555 = $8;
    $$03654 = $9;
   } else {
    $$035$lcssa = $8;
    $$036$lcssa = $9;
    $$lcssa = $13;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $1;
  $$lcssa = $5;
  label = 5;
 } while (0);
 L6 : do if ((label | 0) == 5) {
  do if ($$lcssa) {
   if (!(HEAP8[$$035$lcssa >> 0] | 0)) if (!$$036$lcssa) break; else {
    $32 = $$035$lcssa;
    break L6;
   }
   L13 : do if ($$036$lcssa >>> 0 > 3) {
    $$046 = $$035$lcssa;
    $$13745 = $$036$lcssa;
    while (1) {
     $16 = HEAP32[$$046 >> 2] | 0;
     if (($16 & -2139062144 ^ -2139062144) & $16 + -16843009 | 0) {
      $$137$lcssa66 = $$13745;
      $$in = $$046;
      break L13;
     }
     $22 = $$046 + 4 | 0;
     $23 = $$13745 + -4 | 0;
     if ($23 >>> 0 > 3) {
      $$046 = $22;
      $$13745 = $23;
     } else {
      $$0$lcssa = $22;
      $$137$lcssa = $23;
      label = 11;
      break;
     }
    }
   } else {
    $$0$lcssa = $$035$lcssa;
    $$137$lcssa = $$036$lcssa;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$137$lcssa) break; else {
    $$137$lcssa66 = $$137$lcssa;
    $$in = $$0$lcssa;
   }
   $$140 = $$in;
   $$23839 = $$137$lcssa66;
   while (1) {
    if (!(HEAP8[$$140 >> 0] | 0)) {
     $32 = $$140;
     break L6;
    }
    $$23839 = $$23839 + -1 | 0;
    if (!$$23839) break; else $$140 = $$140 + 1 | 0;
   }
  } while (0);
  $32 = 0;
 } while (0);
 return $32 | 0;
}

function _kf_bfly3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $10 = 0.0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $20 = 0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $33 = 0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $51 = 0, $55 = 0.0, $56 = 0.0, $6 = 0, $7 = 0;
 $6 = $3 << 1;
 $7 = $2 + 48 | 0;
 $10 = +HEAPF32[(HEAP32[$7 >> 2] | 0) + ((Math_imul($1, $3) | 0) << 3) + 4 >> 2];
 $11 = $1 << 1;
 $$04 = 0;
 while (1) {
  if (($$04 | 0) >= ($4 | 0)) break;
  $14 = $0 + ((Math_imul($$04, $5) | 0) << 3) | 0;
  $15 = HEAP32[$7 >> 2] | 0;
  $$0 = $14;
  $$01 = $15;
  $$02 = $15;
  $$03 = $3;
  while (1) {
   $16 = $$0 + ($3 << 3) | 0;
   $17 = +HEAPF32[$16 >> 2];
   $18 = +HEAPF32[$$02 >> 2];
   $20 = $$0 + ($3 << 3) + 4 | 0;
   $21 = +HEAPF32[$20 >> 2];
   $23 = +HEAPF32[$$02 + 4 >> 2];
   $25 = $17 * $18 - $21 * $23;
   $28 = $17 * $23 + $21 * $18;
   $29 = $$0 + ($6 << 3) | 0;
   $30 = +HEAPF32[$29 >> 2];
   $31 = +HEAPF32[$$01 >> 2];
   $33 = $$0 + ($6 << 3) + 4 | 0;
   $34 = +HEAPF32[$33 >> 2];
   $36 = +HEAPF32[$$01 + 4 >> 2];
   $38 = $30 * $31 - $34 * $36;
   $41 = $30 * $36 + $34 * $31;
   $42 = $25 + $38;
   $43 = $28 + $41;
   HEAPF32[$16 >> 2] = +HEAPF32[$$0 >> 2] - $42 * .5;
   $51 = $$0 + 4 | 0;
   HEAPF32[$20 >> 2] = +HEAPF32[$51 >> 2] - $43 * .5;
   $55 = ($25 - $38) * $10;
   $56 = ($28 - $41) * $10;
   HEAPF32[$$0 >> 2] = +HEAPF32[$$0 >> 2] + $42;
   HEAPF32[$51 >> 2] = +HEAPF32[$51 >> 2] + $43;
   HEAPF32[$29 >> 2] = +HEAPF32[$16 >> 2] + $56;
   HEAPF32[$33 >> 2] = +HEAPF32[$20 >> 2] - $55;
   HEAPF32[$16 >> 2] = +HEAPF32[$16 >> 2] - $56;
   HEAPF32[$20 >> 2] = +HEAPF32[$20 >> 2] + $55;
   $$03 = $$03 + -1 | 0;
   if (!$$03) break; else {
    $$0 = $$0 + 8 | 0;
    $$01 = $$01 + ($11 << 3) | 0;
    $$02 = $$02 + ($1 << 3) | 0;
   }
  }
  $$04 = $$04 + 1 | 0;
 }
 return;
}

function _unquant_coarse_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$01 = 0.0, $$02 = 0.0, $$03 = 0, $$04 = 0, $$2 = 0, $$idx = 0, $$idx5 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $39 = 0, $47 = 0.0, $51 = 0, $52 = 0.0, $58 = 0, $61 = 0, $62 = 0.0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 $9 = $8;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 if (!$4) {
  $$01 = +HEAPF32[20768 + ($7 << 2) >> 2];
  $$02 = +HEAPF32[20752 + ($7 << 2) >> 2];
 } else {
  $$01 = .149993896484375;
  $$02 = 0.0;
 }
 $20 = HEAP32[$5 + 4 >> 2] << 3;
 $$idx = $5 + 20 | 0;
 $$idx5 = $5 + 28 | 0;
 $21 = $0 + 8 | 0;
 $$04 = $1;
 while (1) {
  if (($$04 | 0) >= ($2 | 0)) break;
  $23 = ($$04 | 0) < 20;
  $$03 = 0;
  do {
   $24 = _ec_tell_141(HEAP32[$$idx >> 2] | 0, HEAP32[$$idx5 >> 2] | 0) | 0;
   $25 = $20 - $24 | 0;
   do if (($25 | 0) > 14) {
    $27 = ($23 ? $$04 : 20) << 1;
    $$2 = _ec_laplace_decode($5, (HEAPU8[20416 + ($7 * 84 | 0) + ($4 * 42 | 0) + $27 >> 0] | 0) << 7, (HEAPU8[($27 | 1) + (20416 + ($7 * 84 | 0) + ($4 * 42 | 0)) >> 0] | 0) << 6) | 0;
   } else {
    if (($25 | 0) > 1) {
     $39 = _ec_dec_icdf($5, 42394, 2) | 0;
     $$2 = $39 >> 1 ^ 0 - ($39 & 1);
     break;
    }
    if (($20 | 0) > ($24 | 0)) $$2 = 0 - (_ec_dec_bit_logp($5, 1) | 0) | 0; else $$2 = -1;
   } while (0);
   $47 = +($$2 | 0);
   $51 = $3 + ($$04 + (Math_imul($$03, HEAP32[$21 >> 2] | 0) | 0) << 2) | 0;
   $52 = +HEAPF32[$51 >> 2];
   HEAPF32[$51 >> 2] = $52 < -9.0 ? -9.0 : $52;
   $58 = $3 + ($$04 + (Math_imul($$03, HEAP32[$21 >> 2] | 0) | 0) << 2) | 0;
   $61 = $8 + ($$03 << 2) | 0;
   $62 = +HEAPF32[$61 >> 2];
   HEAPF32[$58 >> 2] = $$02 * +HEAPF32[$58 >> 2] + $62 + $47;
   HEAPF32[$61 >> 2] = $62 + $47 - $$01 * $47;
   $$03 = $$03 + 1 | 0;
  } while (($$03 | 0) < ($6 | 0));
  $$04 = $$04 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _celt_preemphasis($0, $1, $2, $3, $4, $$val, $$1$val, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $$val = +$$val;
 $$1$val = +$$1$val;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0.0, $$01 = 0, $$1 = 0.0, $$12 = 0, $$2 = 0, $$3 = 0, $16 = 0.0, $21 = 0, $25 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $43 = 0, $44 = 0.0, $48 = 0, $7 = 0.0, $storemerge = 0.0, label = 0;
 $7 = +HEAPF32[$5 >> 2];
 do if ($$1$val == 0.0) {
  if (($4 | 0) != 1) {
   $48 = ($2 | 0) / ($4 | 0) | 0;
   label = 9;
   break;
  }
  if (!$6) {
   $$0 = $7;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($2 | 0)) {
     $storemerge = $$0;
     break;
    }
    $16 = +HEAPF32[$0 + ((Math_imul($$01, $3) | 0) << 2) >> 2] * 32768.0;
    HEAPF32[$1 + ($$01 << 2) >> 2] = $16 - $$0;
    $$0 = $16 * $$val;
    $$01 = $$01 + 1 | 0;
   }
   HEAPF32[$5 >> 2] = $storemerge;
   return;
  } else $25 = $2;
 } else {
  $21 = ($2 | 0) / ($4 | 0) | 0;
  if (($4 | 0) == 1) $25 = $21; else {
   $48 = $21;
   label = 9;
  }
 } while (0);
 if ((label | 0) == 9) {
  _memset($1 | 0, 0, $2 << 2 | 0) | 0;
  $25 = $48;
 }
 $$12 = 0;
 while (1) {
  if (($$12 | 0) >= ($25 | 0)) break;
  HEAPF32[$1 + ((Math_imul($$12, $4) | 0) << 2) >> 2] = +HEAPF32[$0 + ((Math_imul($$12, $3) | 0) << 2) >> 2] * 32768.0;
  $$12 = $$12 + 1 | 0;
 }
 L19 : do if ($6 | 0) {
  $$2 = 0;
  while (1) {
   if (($$2 | 0) >= ($25 | 0)) break L19;
   $36 = $1 + ((Math_imul($$2, $4) | 0) << 2) | 0;
   $37 = +HEAPF32[$36 >> 2];
   $38 = $37 > 65536.0;
   $39 = $37 < -65536.0;
   HEAPF32[$36 >> 2] = $39 | $38 ? ($39 & ($38 ^ 1) ? -65536.0 : 65536.0) : $37;
   $$2 = $$2 + 1 | 0;
  }
 } while (0);
 $$1 = $7;
 $$3 = 0;
 while (1) {
  if (($$3 | 0) >= ($2 | 0)) {
   $storemerge = $$1;
   break;
  }
  $43 = $1 + ($$3 << 2) | 0;
  $44 = +HEAPF32[$43 >> 2];
  HEAPF32[$43 >> 2] = $44 - $$1;
  $$1 = $44 * $$val;
  $$3 = $$3 + 1 | 0;
 }
 HEAPF32[$5 >> 2] = $storemerge;
 return;
}

function _opus_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $3 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 4 | 0;
 L1 : do if (($1 | 0) < 16e3) if (($1 | 0) < 12e3) switch ($1 | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  {
   $$0 = -1;
   break L1;
  }
 } else switch ($1 | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  {
   $$0 = -1;
   break L1;
  }
 } else {
  if (($1 | 0) < 24e3) switch ($1 | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   {
    $$0 = -1;
    break L1;
   }
  }
  if (($1 | 0) < 48e3) switch ($1 | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   {
    $$0 = -1;
    break L1;
   }
  } else switch ($1 | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   {
    $$0 = -1;
    break L1;
   }
  }
 } while (0);
 if ((label | 0) == 2) if (($2 + -1 | 0) >>> 0 < 2) {
  _memset($0 | 0, 0, _opus_decoder_get_size($2) | 0) | 0;
  if (!(_silk_Get_Decoder_Size($3) | 0)) {
   $8 = _align(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $8;
   $9 = _align(88) | 0;
   HEAP32[$0 + 4 >> 2] = $9;
   $11 = $9 + $8 | 0;
   HEAP32[$0 >> 2] = $11;
   $13 = $0 + $11 | 0;
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$0 + 48 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = $2;
   if (!(_silk_InitDecoder($0 + $9 | 0) | 0)) if (!(_celt_decoder_init($13, $1, $2) | 0)) {
    HEAP32[$vararg_buffer >> 2] = 0;
    _opus_custom_decoder_ctl($13, 10016, $vararg_buffer) | 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = ($1 | 0) / 400 | 0;
    HEAP32[$0 + 44 >> 2] = 0;
    $$0 = 0;
   } else $$0 = -3; else $$0 = -3;
  } else $$0 = -3;
 } else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_A2NLSF_eval_poly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$1 = 0, $10 = 0, $101 = 0, $19 = 0, $21 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $65 = 0, $76 = 0, $87 = 0, $98 = 0;
 $4 = HEAP32[$0 + ($2 << 2) >> 2] | 0;
 $5 = $1 << 4;
 if (($2 | 0) == 8) {
  $10 = $1 << 20 >> 16;
  $19 = ($5 >> 15) + 1 >> 1;
  $21 = (HEAP32[$0 + 28 >> 2] | 0) + ((Math_imul($4 >> 16, $10) | 0) + ((Math_imul($4 & 65535, $10) | 0) >> 16)) + (Math_imul($4, $19) | 0) | 0;
  $32 = (HEAP32[$0 + 24 >> 2] | 0) + ((Math_imul($21 >> 16, $10) | 0) + ((Math_imul($21 & 65535, $10) | 0) >> 16)) + (Math_imul($21, $19) | 0) | 0;
  $43 = (HEAP32[$0 + 20 >> 2] | 0) + ((Math_imul($32 >> 16, $10) | 0) + ((Math_imul($32 & 65535, $10) | 0) >> 16)) + (Math_imul($32, $19) | 0) | 0;
  $54 = (HEAP32[$0 + 16 >> 2] | 0) + ((Math_imul($43 >> 16, $10) | 0) + ((Math_imul($43 & 65535, $10) | 0) >> 16)) + (Math_imul($43, $19) | 0) | 0;
  $65 = (HEAP32[$0 + 12 >> 2] | 0) + ((Math_imul($54 >> 16, $10) | 0) + ((Math_imul($54 & 65535, $10) | 0) >> 16)) + (Math_imul($54, $19) | 0) | 0;
  $76 = (HEAP32[$0 + 8 >> 2] | 0) + ((Math_imul($65 >> 16, $10) | 0) + ((Math_imul($65 & 65535, $10) | 0) >> 16)) + (Math_imul($65, $19) | 0) | 0;
  $87 = (HEAP32[$0 + 4 >> 2] | 0) + ((Math_imul($76 >> 16, $10) | 0) + ((Math_imul($76 & 65535, $10) | 0) >> 16)) + (Math_imul($76, $19) | 0) | 0;
  $$1 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($87 >> 16, $10) | 0) + ((Math_imul($87 & 65535, $10) | 0) >> 16)) + (Math_imul($87, $19) | 0) | 0;
  return $$1 | 0;
 }
 $98 = $1 << 20 >> 16;
 $101 = ($5 >> 15) + 1 >> 1;
 $$0 = $4;
 $$01$in = $2;
 while (1) {
  $$01 = $$01$in + -1 | 0;
  if (($$01$in | 0) <= 0) {
   $$1 = $$0;
   break;
  }
  $$0 = (HEAP32[$0 + ($$01 << 2) >> 2] | 0) + ((Math_imul($$0 >> 16, $98) | 0) + ((Math_imul($$0 & 65535, $98) | 0) >> 16)) + (Math_imul($$0, $101) | 0) | 0;
  $$01$in = $$01;
 }
 return $$1 | 0;
}

function _compute_mdcts($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$1 = 0, $$13 = 0, $12 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $39 = 0, $49 = 0, $50 = 0.0, $52 = 0, $54 = 0, $57 = 0, $9 = 0;
 $9 = HEAP32[$0 + 4 >> 2] | 0;
 $12 = HEAP32[$0 + 44 >> 2] | 0;
 if (!$1) {
  $$04 = (HEAP32[$0 + 36 >> 2] | 0) - $6 | 0;
  $$05 = 1;
  $$06 = $12 << $6;
 } else {
  $$04 = HEAP32[$0 + 36 >> 2] | 0;
  $$05 = $1;
  $$06 = $12;
 }
 $19 = $0 + 64 | 0;
 $20 = Math_imul($$05, $$06) | 0;
 $21 = $20 + $9 | 0;
 $22 = $0 + 60 | 0;
 $$0 = 0;
 do {
  $24 = $2 + ((Math_imul($$0, $21) | 0) << 2) | 0;
  $26 = Math_imul(Math_imul($$0, $$06) | 0, $$05) | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($$05 | 0)) break;
   $29 = $24 + ((Math_imul($$01, $$06) | 0) << 2) | 0;
   _clt_mdct_forward_c($19, $29, $3 + ($$01 + $26 << 2) | 0, HEAP32[$22 >> 2] | 0, $9, $$04, $$05);
   $$01 = $$01 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($5 | 0));
 L12 : do if (($5 | 0) == 2 & ($4 | 0) == 1) {
  $$02 = 0;
  while (1) {
   if (($$02 | 0) >= ($20 | 0)) break L12;
   $39 = $3 + ($$02 << 2) | 0;
   HEAPF32[$39 >> 2] = +HEAPF32[$39 >> 2] * .5 + +HEAPF32[$3 + ($20 + $$02 << 2) >> 2] * .5;
   $$02 = $$02 + 1 | 0;
  }
 } while (0);
 if (($7 | 0) == 1) return;
 $49 = ($20 | 0) / ($7 | 0) | 0;
 $50 = +($7 | 0);
 $52 = $20 - $49 << 2;
 $$1 = 0;
 do {
  $54 = Math_imul(Math_imul($$1, $$05) | 0, $$06) | 0;
  $$13 = 0;
  while (1) {
   if (($$13 | 0) >= ($49 | 0)) break;
   $57 = $3 + ($54 + $$13 << 2) | 0;
   HEAPF32[$57 >> 2] = +HEAPF32[$57 >> 2] * $50;
   $$13 = $$13 + 1 | 0;
  }
  _memset($3 + ($54 + $49 << 2) | 0, 0, $52 | 0) | 0;
  $$1 = $$1 + 1 | 0;
 } while (($$1 | 0) < ($4 | 0));
 return;
}

function _silk_P_Ana_calc_energy_st3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0.0, $$09 = 0, $$1 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0.0, $30 = 0, $35 = 0.0, $41 = 0.0, $43 = 0.0, $47 = 0, $53 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $6 = sp;
 if (($5 | 0) <= -1) _celt_fatal(47497, 47460, 575);
 if (($5 | 0) >= 3) _celt_fatal(47549, 47460, 576);
 switch ($4 | 0) {
 case 4:
  {
   $$0 = 27120;
   $$01 = 27264 + ($5 << 3) | 0;
   $$02 = 34;
   $$03 = HEAP8[46155 + $5 >> 0] | 0;
   break;
  }
 case 2:
  {
   $$0 = 27040;
   $$01 = 46151;
   $$02 = 12;
   $$03 = 12;
   break;
  }
 default:
  _celt_fatal(47957, 47460, 584);
 }
 $$06 = $1 + ($3 << 2 << 2) | 0;
 $$09 = 0;
 while (1) {
  if (($$09 | 0) >= ($4 | 0)) break;
  $16 = $$09 << 1;
  $19 = HEAP8[$$01 + $16 >> 0] | 0;
  $22 = $$06 + (0 - ($19 + $2) << 2) | 0;
  $24 = +_silk_energy_FLP($22, $3) + .001;
  HEAPF32[$6 >> 2] = $24;
  $30 = (HEAP8[$$01 + ($16 | 1) >> 0] | 0) - $19 | 0;
  $$07 = 1;
  $$08 = $24;
  while (1) {
   if (($$07 | 0) > ($30 | 0)) break;
   $35 = +HEAPF32[$22 + ($3 - $$07 << 2) >> 2];
   $41 = +HEAPF32[$22 + (0 - $$07 << 2) >> 2];
   $43 = $$08 - $35 * $35 + $41 * $41;
   HEAPF32[$6 + ($$07 << 2) >> 2] = $43;
   $$07 = $$07 + 1 | 0;
   $$08 = $43;
  }
  $47 = Math_imul($$09, $$02) | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($$03 | 0)) break;
   $53 = (HEAP8[$$0 + ($47 + $$1) >> 0] | 0) - $19 | 0;
   $$05 = 0;
   while (1) {
    if (($$05 | 0) == 5) break;
    HEAP32[$0 + ($$09 * 680 | 0) + ($$1 * 20 | 0) + ($$05 << 2) >> 2] = HEAP32[$6 + ($53 + $$05 << 2) >> 2];
    $$05 = $$05 + 1 | 0;
   }
   $$1 = $$1 + 1 | 0;
  }
  $$06 = $$06 + ($3 << 2) | 0;
  $$09 = $$09 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_setup_resamplers($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $13 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $2 = sp;
 $3 = $0 + 4576 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) == ($1 | 0)) {
  $8 = $0 + 4556 | 0;
  if ((HEAP32[$0 + 4560 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
   $$pre$phiZ2D = $8;
   $39 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $40 = $0 + 4560 | 0;
   HEAP32[$40 >> 2] = $39;
   STACKTOP = sp;
   return 0;
  }
 }
 if (!$4) {
  $13 = $0 + 4556 | 0;
  _silk_resampler_init($0 + 5776 | 0, HEAP32[$13 >> 2] | 0, $1 * 1e3 | 0, 1);
  $$pre$phiZ2D = $13;
  $39 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $40 = $0 + 4560 | 0;
  HEAP32[$40 >> 2] = $39;
  STACKTOP = sp;
  return 0;
 } else {
  $19 = ((HEAP32[$0 + 4580 >> 2] | 0) * 10 | 0) + 5 | 0;
  $20 = Math_imul($19, $4) | 0;
  $21 = Math_imul($19, $1) | 0;
  $23 = _llvm_stacksave() | 0;
  $24 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ((($20 | 0) > ($21 | 0) ? $20 : $21) << 1) | 0) + 15 & -16) | 0;
  $25 = $0 + 7180 | 0;
  _silk_float2short_array($24, $25, $20);
  $29 = $0 + 4556 | 0;
  _silk_resampler_init($2, (HEAP32[$3 >> 2] << 16 >> 16) * 1e3 | 0, HEAP32[$29 >> 2] | 0, 0);
  $33 = Math_imul($19, (HEAP32[$29 >> 2] | 0) / 1e3 | 0) | 0;
  $34 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($33 << 1) | 0) + 15 & -16) | 0;
  _silk_resampler($2, $34, $24, $20);
  $35 = $0 + 5776 | 0;
  _silk_resampler_init($35, HEAP32[$29 >> 2] | 0, ($1 << 16 >> 16) * 1e3 | 0, 1);
  _silk_resampler($35, $24, $34, $33);
  _silk_short2float_array($25, $24, $21);
  _llvm_stackrestore($23 | 0);
  $$pre$phiZ2D = $29;
  $39 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $40 = $0 + 4560 | 0;
  HEAP32[$40 >> 2] = $39;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _silk_LBRR_encode_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $19 = 0, $20 = 0, $22 = 0, $30 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4384 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = sp + 32 | 0;
 $7 = $0 + 5748 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $0 + 6100 + ($8 * 36 | 0) | 0;
 if (!(HEAP32[$0 + 6092 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$0 + 4532 >> 2] | 0) <= 77) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 + 4724 + ($8 << 2) >> 2] = 1;
 _memcpy($6 | 0, $0 + 148 | 0, 4352) | 0;
 dest = $9;
 src = $0 + 4736 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP16[dest >> 1] = HEAP16[src >> 1] | 0;
  dest = dest + 2 | 0;
  src = src + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 $19 = $0 + 4580 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 _memcpy($5 | 0, $1 | 0, $20 << 2 | 0) | 0;
 $22 = HEAP32[$7 >> 2] | 0;
 if (!$22) label = 6; else if (!(HEAP32[$0 + 4724 + ($22 + -1 << 2) >> 2] | 0)) label = 6; else {
  $$pre$phiZ2D = $0 + 4540 | 0;
  $41 = $20;
 }
 if ((label | 0) == 6) {
  $30 = $0 + 4540 | 0;
  HEAP8[$30 >> 0] = HEAP8[$0 + 7168 >> 0] | 0;
  HEAP8[$9 >> 0] = _silk_min_int_547((HEAP32[$0 + 6096 >> 2] | 0) + (HEAPU8[$9 >> 0] | 0) << 24 >> 24) | 0;
  $$pre$phiZ2D = $30;
  $41 = HEAP32[$19 >> 2] | 0;
 }
 _silk_gains_dequant($4, $9, $$pre$phiZ2D, ($3 | 0) == 2 & 1, $41);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= (HEAP32[$19 >> 2] | 0)) break;
  HEAPF32[$1 + ($$0 << 2) >> 2] = +(HEAP32[$4 + ($$0 << 2) >> 2] | 0) * .0000152587890625;
  $$0 = $$0 + 1 | 0;
 }
 _silk_NSQ_wrapper_FLP($0, $1, $9, $6, $0 + 6208 + ((HEAP32[$7 >> 2] | 0) * 320 | 0) | 0, $2);
 _memcpy($1 | 0, $5 | 0, HEAP32[$19 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _speex_resampler_init_frac($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $13 = 0, $16 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0;
 if ($5 >>> 0 > 10 | (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0)) {
  if (!$6) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$6 >> 2] = 3;
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = _speex_alloc_820(96) | 0;
 if (!$13) {
  if (!$6) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$6 >> 2] = 1;
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = $13 + 52 | 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$13 + 56 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$13 + 12 >> 2] = 0;
 HEAP32[$13 + 16 >> 2] = -1;
 HEAP32[$13 + 80 >> 2] = 0;
 HEAP32[$13 + 28 >> 2] = 0;
 HEAP32[$13 + 24 >> 2] = 0;
 HEAP32[$13 + 72 >> 2] = 0;
 HEAP32[$13 + 84 >> 2] = 0;
 HEAPF32[$13 + 44 >> 2] = 1.0;
 HEAP32[$13 + 20 >> 2] = $0;
 HEAP32[$13 + 88 >> 2] = 1;
 HEAP32[$13 + 92 >> 2] = 1;
 HEAP32[$13 + 32 >> 2] = 160;
 $29 = $0 << 2;
 $30 = _speex_alloc_820($29) | 0;
 HEAP32[$13 + 60 >> 2] = $30;
 if ($30 | 0) {
  $33 = _speex_alloc_820($29) | 0;
  HEAP32[$13 + 68 >> 2] = $33;
  if ($33 | 0) {
   $36 = _speex_alloc_820($29) | 0;
   HEAP32[$13 + 64 >> 2] = $36;
   if ($36 | 0) {
    _speex_resampler_set_quality($13, $5);
    _speex_resampler_set_rate_frac($13, $1, $2, $3, $4);
    $39 = _update_filter($13) | 0;
    if (!$39) {
     HEAP32[$16 >> 2] = 1;
     $$01 = $13;
    } else {
     _speex_resampler_destroy($13);
     $$01 = 0;
    }
    if (!$6) {
     $$0 = $$01;
     return $$0 | 0;
    }
    HEAP32[$6 >> 2] = $39;
    $$0 = $$01;
    return $$0 | 0;
   }
  }
 }
 if ($6 | 0) HEAP32[$6 >> 2] = 1;
 _speex_resampler_destroy($13);
 $$0 = 0;
 return $$0 | 0;
}

function _find_best_pitch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0.0, $14 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $26 = 0.0, $28 = 0, $31 = 0.0, $34 = 0.0, $37 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $8 = 0.0;
 HEAP32[$4 >> 2] = 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 1;
 $$0 = 1.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $8 = +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$0 = $$0 + $8 * $8;
  $$01 = $$01 + 1 | 0;
 }
 $$02 = 0;
 $$1 = $$0;
 $19 = 0.0;
 $21 = -1.0;
 $24 = 0.0;
 $26 = -1.0;
 $28 = 0;
 $41 = -1.0;
 $42 = 0.0;
 while (1) {
  if (($$02 | 0) >= ($3 | 0)) break;
  $14 = +HEAPF32[$0 + ($$02 << 2) >> 2];
  do if ($14 > 0.0) {
   $16 = $14 * 9.999999960041972e-13;
   $17 = $16 * $16;
   if ($17 * $19 > $21 * $$1) if ($17 * $24 > $26 * $$1) {
    HEAP32[$5 >> 2] = $28;
    HEAP32[$4 >> 2] = $$02;
    $43 = $$02;
    $44 = $41;
    $45 = $17;
    $46 = $17;
    $47 = $42;
    $48 = $$1;
    $49 = $$1;
    break;
   } else {
    HEAP32[$5 >> 2] = $$02;
    $43 = $28;
    $44 = $17;
    $45 = $41;
    $46 = $26;
    $47 = $$1;
    $48 = $42;
    $49 = $24;
    break;
   } else {
    $43 = $28;
    $44 = $21;
    $45 = $41;
    $46 = $26;
    $47 = $19;
    $48 = $42;
    $49 = $24;
   }
  } else {
   $43 = $28;
   $44 = $21;
   $45 = $41;
   $46 = $26;
   $47 = $19;
   $48 = $42;
   $49 = $24;
  } while (0);
  $31 = +HEAPF32[$1 + ($$02 + $2 << 2) >> 2];
  $34 = +HEAPF32[$1 + ($$02 << 2) >> 2];
  $37 = $$1 + ($31 * $31 - $34 * $34);
  $$02 = $$02 + 1 | 0;
  $$1 = $37 < 1.0 ? 1.0 : $37;
  $19 = $47;
  $21 = $44;
  $24 = $49;
  $26 = $46;
  $28 = $43;
  $41 = $45;
  $42 = $48;
 }
 return;
}

function _silk_resampler_private_IIR_FIR($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 + 268 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($5 << 1) + 8 << 1) | 0) + 15 & -16) | 0;
 $9 = $0 + 24 | 0;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
 $11 = HEAP32[$0 + 272 >> 2] | 0;
 $12 = $8 + 16 | 0;
 $$0 = $3;
 $$01 = $1;
 $$02 = $2;
 $14 = $5;
 while (1) {
  $spec$select = ($$0 | 0) < ($14 | 0) ? $$0 : $14;
  _silk_resampler_private_up2_HQ($0, $12, $$02, $spec$select);
  $16 = _silk_resampler_private_IIR_FIR_INTERPOL($$01, $8, $spec$select << 17, $11) | 0;
  $17 = $$0 - $spec$select | 0;
  if (($17 | 0) <= 0) break;
  $21 = $8 + ($spec$select << 1 << 1) | 0;
  HEAP32[$8 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
  HEAP32[$8 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
  $$0 = $17;
  $$01 = $16;
  $$02 = $$02 + ($spec$select << 1) | 0;
  $14 = HEAP32[$4 >> 2] | 0;
 }
 $23 = $8 + ($spec$select << 1 << 1) | 0;
 HEAP16[$9 >> 1] = HEAP16[$23 >> 1] | 0;
 HEAP16[$9 + 2 >> 1] = HEAP16[$23 + 2 >> 1] | 0;
 HEAP16[$9 + 4 >> 1] = HEAP16[$23 + 4 >> 1] | 0;
 HEAP16[$9 + 6 >> 1] = HEAP16[$23 + 6 >> 1] | 0;
 HEAP16[$9 + 8 >> 1] = HEAP16[$23 + 8 >> 1] | 0;
 HEAP16[$9 + 10 >> 1] = HEAP16[$23 + 10 >> 1] | 0;
 HEAP16[$9 + 12 >> 1] = HEAP16[$23 + 12 >> 1] | 0;
 HEAP16[$9 + 14 >> 1] = HEAP16[$23 + 14 >> 1] | 0;
 STACKTOP = sp;
 return;
}

function _silk_P_Ana_calc_corr_st3($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$1 = 0, $16 = 0, $18 = 0, $21 = 0, $25 = 0, $38 = 0, $44 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $6 = sp + 96 | 0;
 $7 = sp;
 if (($5 | 0) <= -1) _celt_fatal(47497, 47460, 509);
 if (($5 | 0) >= 3) _celt_fatal(47549, 47460, 510);
 switch ($4 | 0) {
 case 4:
  {
   $$0 = 27120;
   $$01 = 27264 + ($5 << 3) | 0;
   $$02 = 34;
   $$03 = HEAP8[46155 + $5 >> 0] | 0;
   break;
  }
 case 2:
  {
   $$0 = 27040;
   $$01 = 46151;
   $$02 = 12;
   $$03 = 12;
   break;
  }
 default:
  _celt_fatal(47957, 47460, 518);
 }
 $16 = 0 - $2 | 0;
 $$05 = 0;
 $$07 = $1 + ($3 << 2 << 2) | 0;
 while (1) {
  if (($$05 | 0) >= ($4 | 0)) break;
  $18 = $$05 << 1;
  $21 = HEAP8[$$01 + $18 >> 0] | 0;
  $25 = HEAP8[$$01 + ($18 | 1) >> 0] | 0;
  _celt_pitch_xcorr_c($$07, $$07 + ($16 << 2) + (0 - $25 << 2) | 0, $7, $3, $25 - $21 + 1 | 0);
  $$04 = 0;
  $$06 = $21;
  while (1) {
   if (($$06 | 0) > ($25 | 0)) break;
   HEAP32[$6 + ($$04 << 2) >> 2] = HEAP32[$7 + ($25 - $$06 << 2) >> 2];
   $$04 = $$04 + 1 | 0;
   $$06 = $$06 + 1 | 0;
  }
  $38 = Math_imul($$05, $$02) | 0;
  $$08 = 0;
  while (1) {
   if (($$08 | 0) >= ($$03 | 0)) break;
   $44 = (HEAP8[$$0 + ($38 + $$08) >> 0] | 0) - $21 | 0;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 5) break;
    HEAP32[$0 + ($$05 * 680 | 0) + ($$08 * 20 | 0) + ($$1 << 2) >> 2] = HEAP32[$6 + ($44 + $$1 << 2) >> 2];
    $$1 = $$1 + 1 | 0;
   }
   $$08 = $$08 + 1 | 0;
  }
  $$05 = $$05 + 1 | 0;
  $$07 = $$07 + ($3 << 2) | 0;
 }
 STACKTOP = sp;
 return;
}

function _validate_celt_decoder($0) {
 $0 = $0 | 0;
 var $1 = 0, $15 = 0, $17 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $40 = 0, $44 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != (_opus_custom_mode_create() | 0)) _celt_fatal(40712, 40784, 118);
 if ((HEAP32[$0 + 4 >> 2] | 0) != 120) _celt_fatal(40804, 40784, 119);
 if (((HEAP32[$0 + 8 >> 2] | 0) + -1 | 0) >>> 0 >= 2) _celt_fatal(49278, 40784, 121);
 if (((HEAP32[$0 + 12 >> 2] | 0) + -1 | 0) >>> 0 >= 2) _celt_fatal(50181, 40784, 122);
 if ((HEAP32[$0 + 16 >> 2] | 0) <= 0) _celt_fatal(40841, 40784, 123);
 $15 = HEAP32[$0 + 20 >> 2] | 0;
 switch ($15 | 0) {
 case 17:
 case 0:
  break;
 default:
  _celt_fatal(40878, 40784, 124);
 }
 $17 = HEAP32[$0 + 24 >> 2] | 0;
 if (($15 | 0) >= ($17 | 0)) _celt_fatal(40930, 40784, 125);
 if (($17 | 0) >= 22) _celt_fatal(40968, 40784, 126);
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 if (($21 | 0) <= -1) _celt_fatal(50105, 40784, 128);
 if ($21 | 0) _celt_fatal(50137, 40784, 129);
 $25 = HEAP32[$0 + 48 >> 2] | 0;
 if (($25 | 0) >= 721) _celt_fatal(41e3, 40784, 131);
 if (!(($25 | 0) > 99 | ($25 | 0) == 0)) _celt_fatal(41060, 40784, 132);
 $30 = HEAP32[$0 + 60 >> 2] | 0;
 if (($30 | 0) >= 1024) _celt_fatal(41149, 40784, 133);
 if (!(($30 | 0) > 14 | ($30 | 0) == 0)) _celt_fatal(41202, 40784, 134);
 $35 = HEAP32[$0 + 64 >> 2] | 0;
 if (($35 | 0) >= 1024) _celt_fatal(41296, 40784, 135);
 if (!(($35 | 0) > 14 | ($35 | 0) == 0)) _celt_fatal(41353, 40784, 136);
 $40 = HEAP32[$0 + 76 >> 2] | 0;
 if (($40 | 0) >= 3) _celt_fatal(41455, 40784, 137);
 if (($40 | 0) <= -1) _celt_fatal(41500, 40784, 138);
 $44 = HEAP32[$0 + 80 >> 2] | 0;
 if (($44 | 0) >= 3) _celt_fatal(41545, 40784, 139);
 if (($44 | 0) > -1) return; else _celt_fatal(41594, 40784, 140);
}

function _silk_NLSF2A($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $12 = 0, $13 = 0, $17 = 0, $28 = 0, $3 = 0, $34 = 0, $37 = 0, $4 = 0, $42 = 0, $47 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $3 = sp + 224 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 switch ($2 | 0) {
 case 16:
 case 10:
  break;
 default:
  _celt_fatal(46001, 46034, 89);
 }
 $8 = ($2 | 0) == 16 ? 27024 : 46048;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $12 = HEAP16[$1 + ($$01 << 1) >> 1] | 0;
  $13 = $12 >> 8;
  $17 = HEAP16[26752 + ($13 << 1) >> 1] | 0;
  $28 = (($17 << 8) + (Math_imul((HEAP16[26752 + ($13 + 1 << 1) >> 1] | 0) - $17 | 0, $12 & 255) | 0) >> 3) + 1 >> 1;
  HEAP32[$3 + (HEAPU8[$8 + $$01 >> 0] << 2) >> 2] = $28;
  $$01 = $$01 + 1 | 0;
 }
 $34 = $2 >> 1;
 _silk_NLSF2A_find_poly($4, $3, $34);
 _silk_NLSF2A_find_poly($5, $3 + 4 | 0, $34);
 $$1 = 0;
 while (1) {
  if (($$1 | 0) >= ($34 | 0)) break;
  $37 = $$1 + 1 | 0;
  $42 = (HEAP32[$4 + ($37 << 2) >> 2] | 0) + (HEAP32[$4 + ($$1 << 2) >> 2] | 0) | 0;
  $47 = (HEAP32[$5 + ($37 << 2) >> 2] | 0) - (HEAP32[$5 + ($$1 << 2) >> 2] | 0) | 0;
  HEAP32[$6 + ($$1 << 2) >> 2] = 0 - $47 - $42;
  HEAP32[$6 + ($2 - $$1 + -1 << 2) >> 2] = $47 - $42;
  $$1 = $37;
 }
 _silk_LPC_fit($0, $6, $2);
 $$0 = 0;
 while (1) {
  if (!((_silk_LPC_inverse_pred_gain_c($0, $2) | 0) == 0 & $$0 >>> 0 < 16)) break;
  _silk_bwexpander_32($6, $2, 65536 - (2 << $$0) | 0);
  $$2 = 0;
  while (1) {
   if (($$2 | 0) >= ($2 | 0)) break;
   HEAP16[$0 + ($$2 << 1) >> 1] = (((HEAP32[$6 + ($$2 << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
   $$2 = $$2 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _tf_encode($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$06 = 0, $$07 = 0, $$1 = 0, $$13 = 0, $$15 = 0, $$18 = 0, $$idx11 = 0, $$idx12 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $41 = 0, $9 = 0;
 $9 = HEAP32[$6 + 4 >> 2] << 3;
 $$idx11 = $6 + 20 | 0;
 $$idx12 = $6 + 28 | 0;
 $10 = _ec_tell(HEAP32[$$idx11 >> 2] | 0, HEAP32[$$idx12 >> 2] | 0) | 0;
 $11 = ($2 | 0) == 0;
 $12 = $11 ? 4 : 2;
 if (($4 | 0) > 0) $18 = ($10 + $12 + 1 | 0) >>> 0 <= $9 >>> 0 & 1; else $18 = 0;
 $17 = $9 - $18 | 0;
 $19 = $11 ? 5 : 4;
 $$0 = $10;
 $$01 = $12;
 $$02 = 0;
 $$04 = $0;
 $$07 = 0;
 while (1) {
  if (($$04 | 0) >= ($1 | 0)) break;
  $23 = $3 + ($$04 << 2) | 0;
  if (($$0 + $$01 | 0) >>> 0 > $17 >>> 0) {
   HEAP32[$23 >> 2] = $$07;
   $$1 = $$0;
   $$13 = $$02;
   $$18 = $$07;
  } else {
   _ec_enc_bit_logp($6, HEAP32[$23 >> 2] ^ $$07, $$01);
   $26 = _ec_tell(HEAP32[$$idx11 >> 2] | 0, HEAP32[$$idx12 >> 2] | 0) | 0;
   $27 = HEAP32[$23 >> 2] | 0;
   $$1 = $26;
   $$13 = $$02 | $27;
   $$18 = $27;
  }
  $$0 = $$1;
  $$01 = $19;
  $$02 = $$13;
  $$04 = $$04 + 1 | 0;
  $$07 = $$18;
 }
 $$pre = $2 << 2;
 if (!$18) $$06 = 0; else if ((HEAP8[$$pre + $$02 + (192 + ($4 << 3)) >> 0] | 0) == (HEAP8[($$pre | 2) + $$02 + (192 + ($4 << 3)) >> 0] | 0)) $$06 = 0; else {
  _ec_enc_bit_logp($6, $5, 1);
  $$06 = $5 << 1;
 }
 $39 = $$pre + $$06 | 0;
 $$15 = $0;
 while (1) {
  if (($$15 | 0) >= ($1 | 0)) break;
  $41 = $3 + ($$15 << 2) | 0;
  HEAP32[$41 >> 2] = HEAP8[$39 + (HEAP32[$41 >> 2] | 0) + (192 + ($4 << 3)) >> 0];
  $$15 = $$15 + 1 | 0;
 }
 return;
}

function _silk_resampler($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$pre$phiZ2D = 0, $10 = 0, $15 = 0, $23 = 0, $31 = 0, $39 = 0, $4 = 0, $49 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + 284 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) > ($3 | 0)) _celt_fatal(46205, 46158, 184);
 $7 = $0 + 292 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($5 | 0) < ($8 | 0)) _celt_fatal(46245, 46158, 186);
 $10 = $5 - $8 | 0;
 _memcpy($0 + 168 + ($8 << 1) | 0, $2 | 0, $10 << 1 | 0) | 0;
 switch (HEAP32[$0 + 264 >> 2] | 0) {
 case 1:
  {
   $15 = $0 + 168 | 0;
   _silk_resampler_private_up2_HQ_wrapper($0, $1, $15, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_up2_HQ_wrapper($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   $$pre$phiZ2D = $15;
   break;
  }
 case 2:
  {
   $23 = $0 + 168 | 0;
   _silk_resampler_private_IIR_FIR($0, $1, $23, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_IIR_FIR($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   $$pre$phiZ2D = $23;
   break;
  }
 case 3:
  {
   $31 = $0 + 168 | 0;
   _silk_resampler_private_down_FIR($0, $1, $31, HEAP32[$4 >> 2] | 0);
   _silk_resampler_private_down_FIR($0, $1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) | 0);
   $$pre$phiZ2D = $31;
   break;
  }
 default:
  {
   $39 = $0 + 168 | 0;
   _memcpy($1 | 0, $39 | 0, HEAP32[$4 >> 2] << 1 | 0) | 0;
   _memcpy($1 + (HEAP32[$0 + 288 >> 2] << 1) | 0, $2 + ($10 << 1) | 0, $3 - (HEAP32[$4 >> 2] | 0) << 1 | 0) | 0;
   $$pre$phiZ2D = $39;
  }
 }
 $49 = HEAP32[$7 >> 2] | 0;
 _memcpy($$pre$phiZ2D | 0, $2 + ($3 - $49 << 1) | 0, $49 << 1 | 0) | 0;
 return;
}

function _silk_biquad_alt_stride1($0, $1, $$val, $$1$val, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $22 = 0, $29 = 0, $31 = 0, $33 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $65 = 0, $66 = 0, $79 = 0, $8 = 0, $9 = 0;
 $5 = 0 - $$val | 0;
 $6 = $5 & 16383;
 $8 = 0 - $$1$val | 0;
 $9 = $8 & 16383;
 $11 = $2 + 4 | 0;
 $12 = $5 >>> 14 << 16 >> 16;
 $13 = $1 + 4 | 0;
 $14 = $8 >>> 14 << 16 >> 16;
 $15 = $1 + 8 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $20 = HEAP32[$1 >> 2] | 0;
  $22 = HEAP16[$0 + ($$0 << 1) >> 1] | 0;
  $29 = (HEAP32[$2 >> 2] | 0) + ((Math_imul($20 >> 16, $22) | 0) + ((Math_imul($20 & 65535, $22) | 0) >> 16)) << 2;
  $31 = $29 >> 16;
  $33 = $29 & 65532;
  $45 = (HEAP32[$11 >> 2] | 0) + (((Math_imul($31, $6) | 0) + ((Math_imul($33, $6) | 0) >>> 16) >> 13) + 1 >> 1) + ((Math_imul($31, $12) | 0) + ((Math_imul($33, $12) | 0) >> 16)) | 0;
  HEAP32[$2 >> 2] = $45;
  $46 = HEAP32[$13 >> 2] | 0;
  HEAP32[$2 >> 2] = $45 + ((Math_imul($46 >> 16, $22) | 0) + ((Math_imul($46 & 65535, $22) | 0) >> 16));
  $65 = (((Math_imul($31, $9) | 0) + ((Math_imul($33, $9) | 0) >>> 16) >> 13) + 1 >> 1) + ((Math_imul($31, $14) | 0) + ((Math_imul($33, $14) | 0) >> 16)) | 0;
  HEAP32[$11 >> 2] = $65;
  $66 = HEAP32[$15 >> 2] | 0;
  HEAP32[$11 >> 2] = $65 + ((Math_imul($66 >> 16, $22) | 0) + ((Math_imul($66 & 65535, $22) | 0) >> 16));
  if (($29 | 0) > 536854528) $79 = 32767; else if (($29 | 0) < -536887295) $79 = -32768; else $79 = $29 + 16383 >> 14;
  HEAP16[$3 + ($$0 << 1) >> 1] = $79;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_PLC_glue_frames($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $54 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (HEAP32[$0 + 4160 >> 2] | 0) {
  _silk_sum_sqr_shift($0 + 4232 | 0, $0 + 4236 | 0, $1, $2);
  HEAP32[$0 + 4220 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 $11 = $0 + 4220 | 0;
 L5 : do if (HEAP32[$11 >> 2] | 0) {
  _silk_sum_sqr_shift($4, $3, $1, $2);
  $14 = HEAP32[$3 >> 2] | 0;
  $16 = HEAP32[$0 + 4236 >> 2] | 0;
  if (($14 | 0) > ($16 | 0)) {
   $18 = $0 + 4232 | 0;
   HEAP32[$18 >> 2] = HEAP32[$18 >> 2] >> $14 - $16;
  } else if (($14 | 0) < ($16 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] >> $16 - $14;
  $26 = HEAP32[$4 >> 2] | 0;
  $27 = $0 + 4232 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  if (($26 | 0) > ($28 | 0)) {
   $30 = _silk_CLZ32_258($28) | 0;
   $32 = $28 << $30 + -1;
   HEAP32[$27 >> 2] = $32;
   $35 = $26 >> (_silk_max_32(25 - $30 | 0, 0) | 0);
   HEAP32[$4 >> 2] = $35;
   $39 = (_silk_SQRT_APPROX_261(($32 | 0) / ((($35 | 0) > 1 ? $35 : 1) | 0) | 0) | 0) << 4;
   $42 = ((65536 - $39 | 0) / ($2 | 0) | 0) << 2;
   $$0 = $39;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) >= ($2 | 0)) break L5;
    $45 = $1 + ($$01 << 1) | 0;
    $47 = HEAP16[$45 >> 1] | 0;
    HEAP16[$45 >> 1] = (Math_imul($$0 >> 16, $47) | 0) + ((Math_imul($$0 & 65532, $47) | 0) >>> 16);
    $54 = $$0 + $42 | 0;
    if (($54 | 0) > 65536) break L5;
    $$0 = $54;
    $$01 = $$01 + 1 | 0;
   }
  }
 } while (0);
 HEAP32[$11 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $21 = 0, $28 = 0, $35 = 0, $42 = 0, $49 = 0, $66 = 0, $82 = 0, $9 = 0;
 if (($4 | 0) <= 5) _celt_fatal(45891, 45916, 67);
 if ($4 & 1 | 0) _celt_fatal(45943, 45916, 68);
 if (($4 | 0) > ($3 | 0)) _celt_fatal(45974, 45916, 69);
 $9 = $2 + 2 | 0;
 $10 = $2 + 4 | 0;
 $11 = $2 + 6 | 0;
 $12 = $2 + 8 | 0;
 $13 = $2 + 10 | 0;
 $$01 = $4;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $16 = $1 + ($$01 + -1 << 1) | 0;
  $21 = Math_imul(HEAP16[$16 >> 1] | 0, HEAP16[$2 >> 1] | 0) | 0;
  $28 = $21 + (Math_imul(HEAP16[$16 + -2 >> 1] | 0, HEAP16[$9 >> 1] | 0) | 0) | 0;
  $35 = $28 + (Math_imul(HEAP16[$16 + -4 >> 1] | 0, HEAP16[$10 >> 1] | 0) | 0) | 0;
  $42 = $35 + (Math_imul(HEAP16[$16 + -6 >> 1] | 0, HEAP16[$11 >> 1] | 0) | 0) | 0;
  $49 = $42 + (Math_imul(HEAP16[$16 + -8 >> 1] | 0, HEAP16[$12 >> 1] | 0) | 0) | 0;
  $$0 = $49 + (Math_imul(HEAP16[$16 + -10 >> 1] | 0, HEAP16[$13 >> 1] | 0) | 0) | 0;
  $$02 = 6;
  while (1) {
   if (($$02 | 0) >= ($4 | 0)) break;
   $66 = $$0 + (Math_imul(HEAP16[$16 + (0 - $$02 << 1) >> 1] | 0, HEAP16[$2 + ($$02 << 1) >> 1] | 0) | 0) | 0;
   $$0 = $66 + (Math_imul(HEAP16[$16 + (~$$02 << 1) >> 1] | 0, HEAP16[$2 + (($$02 | 1) << 1) >> 1] | 0) | 0) | 0;
   $$02 = $$02 + 2 | 0;
  }
  $82 = (HEAP16[$1 + ($$01 << 1) >> 1] << 12) - $$0 | 0;
  HEAP16[$0 + ($$01 << 1) >> 1] = ($82 | 0) > 134215679 ? 32767 : ($82 | 0) < -134219776 ? -32768 : (($82 >>> 11) + 1 | 0) >>> 1 & 65535;
  $$01 = $$01 + 1 | 0;
 }
 _memset($0 | 0, 0, $4 << 1 | 0) | 0;
 return;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    }
    $$090 = $63 ? $$090 : $26;
    $$094 = $63 ? $25 : $$094 - $25 | 0;
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function _silk_insertion_sort_increasing($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $10 = 0, $13 = 0, $23 = 0, $24 = 0, $27 = 0, $32 = 0, $34 = 0, $40 = 0;
 if (($3 | 0) <= 0) _celt_fatal(48091, 46327, 51);
 if (($2 | 0) <= 0) _celt_fatal(48137, 46327, 52);
 if (($2 | 0) < ($3 | 0)) _celt_fatal(48161, 46327, 53);
 $$01 = 0;
 while (1) {
  if (($$01 | 0) == ($3 | 0)) break;
  HEAP32[$1 + ($$01 << 2) >> 2] = $$01;
  $$01 = $$01 + 1 | 0;
 }
 $$12 = 1;
 while (1) {
  if (($$12 | 0) == ($3 | 0)) break;
  $10 = HEAP32[$0 + ($$12 << 2) >> 2] | 0;
  $$0$in = $$12;
  while (1) {
   $$0 = $$0$in + -1 | 0;
   if (($$0$in | 0) <= 0) break;
   $13 = HEAP32[$0 + ($$0 << 2) >> 2] | 0;
   if (($10 | 0) >= ($13 | 0)) break;
   HEAP32[$0 + ($$0$in << 2) >> 2] = $13;
   HEAP32[$1 + ($$0$in << 2) >> 2] = HEAP32[$1 + ($$0 << 2) >> 2];
   $$0$in = $$0;
  }
  HEAP32[$0 + ($$0$in << 2) >> 2] = $10;
  HEAP32[$1 + ($$0$in << 2) >> 2] = $$12;
  $$12 = $$12 + 1 | 0;
 }
 $23 = $0 + ($3 + -1 << 2) | 0;
 $24 = $3 + -2 | 0;
 $$2 = $3;
 while (1) {
  if (($$2 | 0) >= ($2 | 0)) break;
  $27 = HEAP32[$0 + ($$2 << 2) >> 2] | 0;
  if (($27 | 0) < (HEAP32[$23 >> 2] | 0)) {
   $$1 = $24;
   while (1) {
    if (($$1 | 0) <= -1) break;
    $32 = HEAP32[$0 + ($$1 << 2) >> 2] | 0;
    if (($27 | 0) >= ($32 | 0)) break;
    $34 = $$1 + 1 | 0;
    HEAP32[$0 + ($34 << 2) >> 2] = $32;
    HEAP32[$1 + ($34 << 2) >> 2] = HEAP32[$1 + ($$1 << 2) >> 2];
    $$1 = $$1 + -1 | 0;
   }
   $40 = $$1 + 1 | 0;
   HEAP32[$0 + ($40 << 2) >> 2] = $27;
   HEAP32[$1 + ($40 << 2) >> 2] = $$2;
  }
  $$2 = $$2 + 1 | 0;
 }
 return;
}

function _celt_fir_c($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $29 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if (($0 | 0) == ($2 | 0)) _celt_fatal(42262, 42287, 102);
 $6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) == 24) break;
  HEAP32[$6 + ($$02 << 2) >> 2] = HEAP32[$1 + (24 - $$02 + -1 << 2) >> 2];
  $$02 = $$02 + 1 | 0;
 }
 $13 = $3 + -3 | 0;
 $14 = $4 + 4 | 0;
 $15 = $4 + 8 | 0;
 $16 = $4 + 12 | 0;
 $19 = (($13 | 0) > 0 ? $13 : 0) + 3 & -4;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) >= ($13 | 0)) break;
  $21 = $0 + ($$1 << 2) | 0;
  HEAP32[$4 >> 2] = HEAP32[$21 >> 2];
  $23 = $$1 | 1;
  HEAP32[$14 >> 2] = HEAP32[$0 + ($23 << 2) >> 2];
  $26 = $$1 | 2;
  HEAP32[$15 >> 2] = HEAP32[$0 + ($26 << 2) >> 2];
  $29 = $$1 | 3;
  HEAP32[$16 >> 2] = HEAP32[$0 + ($29 << 2) >> 2];
  _xcorr_kernel_c_127($6, $21 + -96 | 0, $4, 24);
  HEAP32[$2 + ($$1 << 2) >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + ($23 << 2) >> 2] = HEAP32[$14 >> 2];
  HEAP32[$2 + ($26 << 2) >> 2] = HEAP32[$15 >> 2];
  HEAP32[$2 + ($29 << 2) >> 2] = HEAP32[$16 >> 2];
  $$1 = $$1 + 4 | 0;
 }
 $$2 = $19;
 while (1) {
  if (($$2 | 0) >= ($3 | 0)) break;
  $$0 = +HEAPF32[$0 + ($$2 << 2) >> 2];
  $$01 = 0;
  while (1) {
   if (($$01 | 0) == 24) break;
   $$0 = $$0 + +HEAPF32[$6 + ($$01 << 2) >> 2] * +HEAPF32[$0 + ($$2 + $$01 + -24 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
  }
  HEAPF32[$2 + ($$2 << 2) >> 2] = $$0;
  $$2 = $$2 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_insertion_sort_decreasing_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $10 = 0.0, $13 = 0.0, $23 = 0, $24 = 0, $27 = 0.0, $32 = 0.0, $34 = 0, $40 = 0;
 if (($3 | 0) <= 0) _celt_fatal(48091, 48115, 50);
 if (($2 | 0) <= 0) _celt_fatal(48137, 48115, 51);
 if (($2 | 0) < ($3 | 0)) _celt_fatal(48161, 48115, 52);
 $$01 = 0;
 while (1) {
  if (($$01 | 0) == ($3 | 0)) break;
  HEAP32[$1 + ($$01 << 2) >> 2] = $$01;
  $$01 = $$01 + 1 | 0;
 }
 $$12 = 1;
 while (1) {
  if (($$12 | 0) == ($3 | 0)) break;
  $10 = +HEAPF32[$0 + ($$12 << 2) >> 2];
  $$0$in = $$12;
  while (1) {
   $$0 = $$0$in + -1 | 0;
   if (($$0$in | 0) <= 0) break;
   $13 = +HEAPF32[$0 + ($$0 << 2) >> 2];
   if (!($10 > $13)) break;
   HEAPF32[$0 + ($$0$in << 2) >> 2] = $13;
   HEAP32[$1 + ($$0$in << 2) >> 2] = HEAP32[$1 + ($$0 << 2) >> 2];
   $$0$in = $$0;
  }
  HEAPF32[$0 + ($$0$in << 2) >> 2] = $10;
  HEAP32[$1 + ($$0$in << 2) >> 2] = $$12;
  $$12 = $$12 + 1 | 0;
 }
 $23 = $0 + ($3 + -1 << 2) | 0;
 $24 = $3 + -2 | 0;
 $$2 = $3;
 while (1) {
  if (($$2 | 0) >= ($2 | 0)) break;
  $27 = +HEAPF32[$0 + ($$2 << 2) >> 2];
  if ($27 > +HEAPF32[$23 >> 2]) {
   $$1 = $24;
   while (1) {
    if (($$1 | 0) <= -1) break;
    $32 = +HEAPF32[$0 + ($$1 << 2) >> 2];
    if (!($27 > $32)) break;
    $34 = $$1 + 1 | 0;
    HEAPF32[$0 + ($34 << 2) >> 2] = $32;
    HEAP32[$1 + ($34 << 2) >> 2] = HEAP32[$1 + ($$1 << 2) >> 2];
    $$1 = $$1 + -1 | 0;
   }
   $40 = $$1 + 1 | 0;
   HEAPF32[$0 + ($40 << 2) >> 2] = $27;
   HEAP32[$1 + ($40 << 2) >> 2] = $$2;
  }
  $$2 = $$2 + 1 | 0;
 }
 return;
}

function _tf_decode($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$07 = 0, $$1 = 0, $$13 = 0, $$16 = 0, $$18 = 0, $$idx11 = 0, $$idx12 = 0, $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $18 = 0, $23 = 0, $38 = 0, $40 = 0, $8 = 0, $9 = 0;
 $8 = HEAP32[$5 + 4 >> 2] << 3;
 $$idx11 = $5 + 20 | 0;
 $$idx12 = $5 + 28 | 0;
 $9 = _ec_tell_40(HEAP32[$$idx11 >> 2] | 0, HEAP32[$$idx12 >> 2] | 0) | 0;
 $10 = ($2 | 0) == 0;
 $11 = $10 ? 4 : 2;
 if (($4 | 0) > 0) $17 = ($9 + $11 + 1 | 0) >>> 0 <= $8 >>> 0 & 1; else $17 = 0;
 $16 = $8 - $17 | 0;
 $18 = $10 ? 5 : 4;
 $$0 = $9;
 $$01 = $11;
 $$02 = 0;
 $$05 = 0;
 $$07 = $0;
 while (1) {
  if (($$07 | 0) >= ($1 | 0)) break;
  if (($$0 + $$01 | 0) >>> 0 > $16 >>> 0) {
   $$1 = $$0;
   $$13 = $$02;
   $$16 = $$05;
  } else {
   $23 = $$05 ^ (_ec_dec_bit_logp($5, $$01) | 0);
   $$1 = _ec_tell_40(HEAP32[$$idx11 >> 2] | 0, HEAP32[$$idx12 >> 2] | 0) | 0;
   $$13 = $$02 | $23;
   $$16 = $23;
  }
  HEAP32[$3 + ($$07 << 2) >> 2] = $$16;
  $$0 = $$1;
  $$01 = $18;
  $$02 = $$13;
  $$05 = $$16;
  $$07 = $$07 + 1 | 0;
 }
 $$pre = $2 << 2;
 if (!$17) $$04 = 0; else if ((HEAP8[$$pre + $$02 + (192 + ($4 << 3)) >> 0] | 0) == (HEAP8[($$pre | 2) + $$02 + (192 + ($4 << 3)) >> 0] | 0)) $$04 = 0; else $$04 = (_ec_dec_bit_logp($5, 1) | 0) << 1;
 $38 = $$pre + $$04 | 0;
 $$18 = $0;
 while (1) {
  if (($$18 | 0) >= ($1 | 0)) break;
  $40 = $3 + ($$18 << 2) | 0;
  HEAP32[$40 >> 2] = HEAP8[$38 + (HEAP32[$40 >> 2] | 0) + (192 + ($4 << 3)) >> 0];
  $$18 = $$18 + 1 | 0;
 }
 return;
}

function _silk_warped_autocorrelation_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $20 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $27 = 0, $30 = 0, $32 = 0.0, $34 = 0, $40 = 0.0, $5 = 0, $51 = 0.0, $6 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $5 = sp + 208 | 0;
 $6 = sp;
 _memset($5 | 0, 0, 200) | 0;
 _memset($6 | 0, 0, 200) | 0;
 if ($4 & 1 | 0) _celt_fatal(47230, 47267, 49);
 $9 = $2;
 $10 = $5 + ($4 << 3) | 0;
 $11 = $6 + ($4 << 3) | 0;
 $$02 = 0;
 $51 = 0.0;
 while (1) {
  if (($$02 | 0) >= ($3 | 0)) break;
  $$0 = +HEAPF32[$1 + ($$02 << 2) >> 2];
  $$01 = 0;
  $24 = $51;
  while (1) {
   if (($$01 | 0) >= ($4 | 0)) break;
   $18 = $$01 | 1;
   $19 = $5 + ($18 << 3) | 0;
   $20 = +HEAPF64[$19 >> 3];
   $23 = $24 + ($20 - $$0) * $9;
   HEAPF64[$5 + ($$01 << 3) >> 3] = $$0;
   $25 = +HEAPF64[$5 >> 3];
   $27 = $6 + ($$01 << 3) | 0;
   HEAPF64[$27 >> 3] = +HEAPF64[$27 >> 3] + $25 * $$0;
   $30 = $$01 + 2 | 0;
   $32 = +HEAPF64[$5 + ($30 << 3) >> 3];
   HEAPF64[$19 >> 3] = $23;
   $34 = $6 + ($18 << 3) | 0;
   HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $25 * $23;
   $$0 = $20 + ($32 - $23) * $9;
   $$01 = $30;
   $24 = $32;
  }
  HEAPF64[$10 >> 3] = $$0;
  $40 = +HEAPF64[$5 >> 3];
  HEAPF64[$11 >> 3] = +HEAPF64[$11 >> 3] + $40 * $$0;
  $$02 = $$02 + 1 | 0;
  $51 = $40;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) > ($4 | 0)) break;
  HEAPF32[$0 + ($$1 << 2) >> 2] = +HEAPF64[$6 + ($$1 << 3) >> 3];
  $$1 = $$1 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_stereo_quant_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$3 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $8 = 0, $9 = 0;
 $$0 = 0;
 $$05 = 0;
 while (1) {
  if (($$05 | 0) == 2) break;
  $2 = $0 + ($$05 << 2) | 0;
  $3 = $1 + ($$05 * 3 | 0) | 0;
  $4 = $1 + ($$05 * 3 | 0) + 1 | 0;
  $$01 = 2147483647;
  $$03 = 0;
  $$1 = $$0;
  L4 : while (1) {
   if ($$03 >>> 0 >= 15) {
    $$3 = $$1;
    break;
   }
   $8 = HEAP16[24832 + ($$03 << 1) >> 1] | 0;
   $9 = $$03 + 1 | 0;
   $11 = HEAP16[24832 + ($9 << 1) >> 1] | 0;
   $21 = ((($11 << 16 >> 16) - $8 >> 16) * 6554 | 0) + (((($11 & 65535) - $8 & 65535) * 6554 | 0) >>> 16) | 0;
   $22 = $$03 & 255;
   $$04 = 0;
   $$12 = $$01;
   $$2 = $$1;
   while (1) {
    if ($$04 >>> 0 >= 5) break;
    $28 = (Math_imul($21, $$04 << 17 >> 16 | 1) | 0) + $8 | 0;
    $29 = HEAP32[$2 >> 2] | 0;
    $33 = ($29 | 0) > ($28 | 0) ? $29 - $28 | 0 : $28 - $29 | 0;
    if (($33 | 0) >= ($$12 | 0)) {
     $$3 = $$2;
     break L4;
    }
    HEAP8[$3 >> 0] = $22;
    HEAP8[$4 >> 0] = $$04;
    $$04 = $$04 + 1 | 0;
    $$12 = $33;
    $$2 = $28;
   }
   $$01 = $$12;
   $$03 = $9;
   $$1 = $$2;
  }
  $37 = HEAP8[$3 >> 0] | 0;
  $38 = ($37 << 24 >> 24) / 3 | 0;
  HEAP8[$1 + ($$05 * 3 | 0) + 2 >> 0] = $38;
  HEAP8[$3 >> 0] = (Math_imul($38 << 24 >> 24, -3) | 0) + ($37 & 255);
  HEAP32[$2 >> 2] = $$3;
  $$0 = $$3;
  $$05 = $$05 + 1 | 0;
 }
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0);
 return;
}

function _speex_resampler_magic($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $15 = 0, $17 = 0, $21 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$4 >> 2] = $3;
 $6 = $0 + 68 | 0;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2];
 $15 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul(HEAP32[$0 + 28 >> 2] | 0, $1) | 0) << 2) | 0;
 $17 = HEAP32[$0 + 24 >> 2] | 0;
 _speex_resampler_process_native($0, $1, $5, HEAP32[$2 >> 2] | 0, $4);
 $21 = (HEAP32[$6 >> 2] | 0) + ($1 << 2) | 0;
 HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) - (HEAP32[$5 >> 2] | 0);
 $26 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 if (!$26) {
  $38 = HEAP32[$4 >> 2] | 0;
  $39 = $0 + 92 | 0;
  $40 = HEAP32[$39 >> 2] | 0;
  $41 = Math_imul($38, $40) | 0;
  $42 = HEAP32[$2 >> 2] | 0;
  $43 = $42 + ($41 << 2) | 0;
  HEAP32[$2 >> 2] = $43;
  STACKTOP = sp;
  return $38 | 0;
 }
 $28 = $17 + -1 | 0;
 $$0 = 0;
 $30 = $26;
 while (1) {
  if ($$0 >>> 0 >= $30 >>> 0) break;
  $31 = $28 + $$0 | 0;
  HEAP32[$15 + ($31 << 2) >> 2] = HEAP32[$15 + ($31 + (HEAP32[$5 >> 2] | 0) << 2) >> 2];
  $$0 = $$0 + 1 | 0;
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 }
 $38 = HEAP32[$4 >> 2] | 0;
 $39 = $0 + 92 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = Math_imul($38, $40) | 0;
 $42 = HEAP32[$2 >> 2] | 0;
 $43 = $42 + ($41 << 2) | 0;
 HEAP32[$2 >> 2] = $43;
 STACKTOP = sp;
 return $38 | 0;
}

function _opus_fft_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$idx = 0, $$pre = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $6 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $spec$select = ($4 | 0) > 0 ? $4 : 0;
 HEAP32[$2 >> 2] = 1;
 $$01 = 0;
 $14 = 1;
 while (1) {
  $6 = $$01 << 1;
  $12 = HEAP16[$0 + 12 + (($6 | 1) << 1) >> 1] | 0;
  $13 = Math_imul($14, HEAP16[$0 + 12 + ($6 << 1) >> 1] | 0) | 0;
  $15 = $$01 + 1 | 0;
  HEAP32[$2 + ($15 << 2) >> 2] = $13;
  if ($12 << 16 >> 16 == 1) break;
  $$01 = $15;
  $14 = $13;
 }
 $$idx = $0 + 48 | 0;
 $$0 = $$01;
 $$03 = HEAP16[$0 + 12 + (($15 << 1) + -1 << 1) >> 1] | 0;
 while (1) {
  if (($$0 | 0) <= -1) break;
  $$pre = $$0 << 1;
  if (!$$0) $$02 = 1; else $$02 = HEAP16[$0 + 12 + ($$pre + -1 << 1) >> 1] | 0;
  switch (HEAP16[$0 + 12 + ($$pre << 1) >> 1] | 0) {
  case 2:
   {
    _kf_bfly2($1, $$03, HEAP32[$2 + ($$0 << 2) >> 2] | 0);
    break;
   }
  case 4:
   {
    $35 = HEAP32[$2 + ($$0 << 2) >> 2] | 0;
    _kf_bfly4($1, $35 << $spec$select, $0, $$03, $35, $$02);
    break;
   }
  case 3:
   {
    $38 = HEAP32[$2 + ($$0 << 2) >> 2] | 0;
    _kf_bfly3($1, $38 << $spec$select, $0, $$03, $38, $$02);
    break;
   }
  case 5:
   {
    $41 = HEAP32[$2 + ($$0 << 2) >> 2] | 0;
    _kf_bfly5($1, $41 << $spec$select, HEAP32[$$idx >> 2] | 0, $$03, $41, $$02);
    break;
   }
  default:
   {}
  }
  $$0 = $$0 + -1 | 0;
  $$03 = $$02;
 }
 STACKTOP = sp;
 return;
}

function _resampler_basic_direct_single($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0, $$03 = 0, $$05 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $32 = 0, $39 = 0.0, $45 = 0, $46 = 0, $7 = 0, $8 = 0, label = 0;
 $7 = HEAP32[$0 + 24 >> 2] | 0;
 $8 = $0 + 60 | 0;
 $12 = $0 + 64 | 0;
 $17 = HEAP32[$0 + 76 >> 2] | 0;
 $19 = HEAP32[$0 + 92 >> 2] | 0;
 $21 = HEAP32[$0 + 36 >> 2] | 0;
 $23 = HEAP32[$0 + 40 >> 2] | 0;
 $25 = HEAP32[$0 + 12 >> 2] | 0;
 $$02 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$03 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$05 = 0;
 while (1) {
  if (($$03 | 0) >= (HEAP32[$3 >> 2] | 0)) {
   label = 8;
   break;
  }
  if (($$05 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 8;
   break;
  }
  $31 = $17 + ((Math_imul($$02, $7) | 0) << 2) | 0;
  $32 = $2 + ($$03 << 2) | 0;
  $$0 = 0;
  $$01 = 0.0;
  while (1) {
   if (($$0 | 0) >= ($7 | 0)) break;
   $39 = $$01 + +HEAPF32[$31 + ($$0 << 2) >> 2] * +HEAPF32[$32 + ($$0 << 2) >> 2];
   $$0 = $$0 + 1 | 0;
   $$01 = $39;
  }
  HEAPF32[$4 + ((Math_imul($19, $$05) | 0) << 2) >> 2] = $$01;
  $45 = $$02 + $23 | 0;
  $46 = $45 >>> 0 < $25 >>> 0;
  $$02 = $45 - ($46 ? 0 : $25) | 0;
  $$03 = $$03 + $21 + (($46 ^ 1) & 1) | 0;
  $$05 = $$05 + 1 | 0;
 }
 if ((label | 0) == 8) {
  HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] = $$03;
  HEAP32[(HEAP32[$12 >> 2] | 0) + ($1 << 2) >> 2] = $$02;
  return $$05 | 0;
 }
 return 0;
}

function _silk_control_encoder($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $12 = 0, $33 = 0, $43 = 0, $46 = 0, $48 = 0, $52 = 0, $56 = 0, $61 = 0, $spec$select = 0;
 HEAP32[$0 + 6076 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$0 + 4676 >> 2] = HEAP32[$1 + 52 >> 2];
 $12 = HEAP32[$1 + 8 >> 2] | 0;
 HEAP32[$0 + 4556 >> 2] = $12;
 HEAP32[$0 + 4564 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4568 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$0 + 4572 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$0 + 6088 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$0 + 5752 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 5756 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4536 >> 2] = $2;
 HEAP32[$0 + 5760 >> 2] = $3;
 $33 = $0 + 4668 | 0;
 if (HEAP32[$33 >> 2] | 0) if (!(HEAP32[$0 + 4680 >> 2] | 0)) {
  if (($12 | 0) == (HEAP32[$0 + 4560 >> 2] | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  $43 = HEAP32[$0 + 4576 >> 2] | 0;
  if (($43 | 0) <= 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  $$0 = _silk_setup_resamplers($0, $43) | 0;
  return $$0 | 0;
 }
 $46 = _silk_control_audio_bandwidth($0, $1) | 0;
 $spec$select = ($4 | 0) == 0 ? $46 : $4;
 $48 = _silk_setup_resamplers($0, $spec$select) | 0;
 $52 = $48 + (_silk_setup_fs($0, $spec$select, HEAP32[$1 + 24 >> 2] | 0) | 0) | 0;
 $56 = $52 + (_silk_setup_complexity($0, HEAP32[$1 + 36 >> 2] | 0) | 0) | 0;
 HEAP32[$0 + 4616 >> 2] = HEAP32[$1 + 32 >> 2];
 $61 = $56 + (_silk_setup_LBRR($0, HEAP32[$1 + 44 >> 2] | 0) | 0) | 0;
 HEAP32[$33 >> 2] = 1;
 $$0 = $61;
 return $$0 | 0;
}

function _silk_NLSF2A_find_poly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $34 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $9 = 0, $storemerge = 0;
 HEAP32[$0 >> 2] = 65536;
 $5 = $0 + 4 | 0;
 $$01 = 1;
 $storemerge = 0 - (HEAP32[$1 >> 2] | 0) | 0;
 while (1) {
  HEAP32[$5 >> 2] = $storemerge;
  if (($$01 | 0) >= ($2 | 0)) break;
  $9 = HEAP32[$1 + ($$01 << 1 << 2) >> 2] | 0;
  $12 = HEAP32[$0 + ($$01 + -1 << 2) >> 2] | 0;
  $15 = (($9 | 0) < 0) << 31 >> 31;
  $17 = HEAP32[$0 + ($$01 << 2) >> 2] | 0;
  $20 = ___muldi3($9 | 0, $15 | 0, $17 | 0, (($17 | 0) < 0) << 31 >> 31 | 0) | 0;
  $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0;
  $24 = _i64Add($22 | 0, tempRet0 | 0, 1, 0) | 0;
  $26 = _bitshift64Lshr($24 | 0, tempRet0 | 0, 1) | 0;
  $29 = $$01 + 1 | 0;
  HEAP32[$0 + ($29 << 2) >> 2] = ($12 << 1) - $26;
  $$0 = $$01;
  $36 = $12;
  while (1) {
   if (($$0 | 0) <= 1) break;
   $34 = HEAP32[$0 + ($$0 + -2 << 2) >> 2] | 0;
   $39 = ___muldi3($9 | 0, $15 | 0, $36 | 0, (($36 | 0) < 0) << 31 >> 31 | 0) | 0;
   $41 = _bitshift64Lshr($39 | 0, tempRet0 | 0, 15) | 0;
   $43 = _i64Add($41 | 0, tempRet0 | 0, 1, 0) | 0;
   $45 = _bitshift64Lshr($43 | 0, tempRet0 | 0, 1) | 0;
   $48 = $0 + ($$0 << 2) | 0;
   HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + ($34 - $45);
   $$0 = $$0 + -1 | 0;
   $36 = $34;
  }
  $$01 = $29;
  $storemerge = (HEAP32[$5 >> 2] | 0) - $9 | 0;
 }
 return;
}

function _silk_VAD_GetNoiseLevels($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $52 = 0, $53 = 0, $9 = 0, $spec$select = 0;
 $2 = $1 + 108 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) < 1e3) {
  HEAP32[$2 >> 2] = $3 + 1;
  $$0 = 32767 / (($3 >> 4) + 1 | 0) | 0;
 } else $$0 = 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) == 4) break;
  $9 = $1 + 60 + ($$02 << 2) | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $15 = (HEAP32[$0 + ($$02 << 2) >> 2] | 0) + (HEAP32[$1 + 92 + ($$02 << 2) >> 2] | 0) | 0;
  $spec$select = $15 >>> 0 < 2147483647 ? $15 : 2147483647;
  $17 = 2147483647 / ($spec$select >>> 0) | 0;
  if (($spec$select | 0) > ($10 << 3 | 0)) $$1 = 128; else if (($spec$select | 0) < ($10 | 0)) $$1 = 1024; else {
   $22 = $10 << 16 >> 16;
   $23 = Math_imul($17 >>> 16, $22) | 0;
   $25 = Math_imul($17 & 65535, $22) | 0;
   $31 = Math_imul($17, ($10 >> 15) + 1 >> 1) | 0;
   $$1 = $23 + ($25 >> 16) + $31 >> 16 << 11 | ($23 + ($25 >>> 16) + $31 | 0) >>> 5 & 2047;
  }
  $41 = _silk_max_int_354($$1, $$0) | 0;
  $42 = $1 + 76 + ($$02 << 2) | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  $44 = $17 - $43 | 0;
  $46 = $41 << 16 >> 16;
  $52 = $43 + ((Math_imul($44 >> 16, $46) | 0) + ((Math_imul($44 & 65535, $46) | 0) >> 16)) | 0;
  HEAP32[$42 >> 2] = $52;
  $53 = 2147483647 / ($52 | 0) | 0;
  HEAP32[$9 >> 2] = ($53 | 0) < 16777215 ? $53 : 16777215;
  $$02 = $$02 + 1 | 0;
 }
 return;
}

function _silk_shell_decoder($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $20 = 0, $21 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = $3 + 2 | 0;
 _decode_split($3, $6, $1, $2, 26032);
 $7 = $4 + 2 | 0;
 _decode_split($4, $7, $1, HEAP16[$3 >> 1] | 0, 25872);
 $10 = $5 + 2 | 0;
 _decode_split($5, $10, $1, HEAP16[$4 >> 1] | 0, 25712);
 _decode_split($0, $0 + 2 | 0, $1, HEAP16[$5 >> 1] | 0, 25552);
 _decode_split($0 + 4 | 0, $0 + 6 | 0, $1, HEAP16[$10 >> 1] | 0, 25552);
 $20 = $5 + 4 | 0;
 $21 = $5 + 6 | 0;
 _decode_split($20, $21, $1, HEAP16[$7 >> 1] | 0, 25712);
 _decode_split($0 + 8 | 0, $0 + 10 | 0, $1, HEAP16[$20 >> 1] | 0, 25552);
 _decode_split($0 + 12 | 0, $0 + 14 | 0, $1, HEAP16[$21 >> 1] | 0, 25552);
 $32 = $4 + 4 | 0;
 $33 = $4 + 6 | 0;
 _decode_split($32, $33, $1, HEAP16[$6 >> 1] | 0, 25872);
 $36 = $5 + 8 | 0;
 $37 = $5 + 10 | 0;
 _decode_split($36, $37, $1, HEAP16[$32 >> 1] | 0, 25712);
 _decode_split($0 + 16 | 0, $0 + 18 | 0, $1, HEAP16[$36 >> 1] | 0, 25552);
 _decode_split($0 + 20 | 0, $0 + 22 | 0, $1, HEAP16[$37 >> 1] | 0, 25552);
 $48 = $5 + 12 | 0;
 $49 = $5 + 14 | 0;
 _decode_split($48, $49, $1, HEAP16[$33 >> 1] | 0, 25712);
 _decode_split($0 + 24 | 0, $0 + 26 | 0, $1, HEAP16[$48 >> 1] | 0, 25552);
 _decode_split($0 + 28 | 0, $0 + 30 | 0, $1, HEAP16[$49 >> 1] | 0, 25552);
 STACKTOP = sp;
 return;
}

function _silk_shell_encoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $26 = 0, $3 = 0, $30 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $4 = sp + 56 | 0;
 $5 = sp + 48 | 0;
 _combine_pulses($2, $1, 8);
 _combine_pulses($3, $2, 4);
 _combine_pulses($4, $3, 2);
 _combine_pulses($5, $4, 1);
 $6 = HEAP32[$4 >> 2] | 0;
 _encode_split($0, $6, HEAP32[$5 >> 2] | 0, 26032);
 $8 = HEAP32[$3 >> 2] | 0;
 _encode_split($0, $8, $6, 25872);
 $9 = HEAP32[$2 >> 2] | 0;
 _encode_split($0, $9, $8, 25712);
 _encode_split($0, HEAP32[$1 >> 2] | 0, $9, 25552);
 _encode_split($0, HEAP32[$1 + 8 >> 2] | 0, HEAP32[$2 + 4 >> 2] | 0, 25552);
 $16 = HEAP32[$2 + 8 >> 2] | 0;
 _encode_split($0, $16, HEAP32[$3 + 4 >> 2] | 0, 25712);
 _encode_split($0, HEAP32[$1 + 16 >> 2] | 0, $16, 25552);
 _encode_split($0, HEAP32[$1 + 24 >> 2] | 0, HEAP32[$2 + 12 >> 2] | 0, 25552);
 $26 = HEAP32[$3 + 8 >> 2] | 0;
 _encode_split($0, $26, HEAP32[$4 + 4 >> 2] | 0, 25872);
 $30 = HEAP32[$2 + 16 >> 2] | 0;
 _encode_split($0, $30, $26, 25712);
 _encode_split($0, HEAP32[$1 + 32 >> 2] | 0, $30, 25552);
 _encode_split($0, HEAP32[$1 + 40 >> 2] | 0, HEAP32[$2 + 20 >> 2] | 0, 25552);
 $38 = HEAP32[$2 + 24 >> 2] | 0;
 _encode_split($0, $38, HEAP32[$3 + 12 >> 2] | 0, 25712);
 _encode_split($0, HEAP32[$1 + 48 >> 2] | 0, $38, 25552);
 _encode_split($0, HEAP32[$1 + 56 >> 2] | 0, HEAP32[$2 + 28 >> 2] | 0, 25552);
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter16_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $1 + 4 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1 + 12 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 20 | 0;
 $9 = $1 + 24 | 0;
 $10 = $1 + 28 | 0;
 $11 = $1 + 32 | 0;
 $12 = $1 + 36 | 0;
 $13 = $1 + 40 | 0;
 $14 = $1 + 44 | 0;
 $15 = $1 + 48 | 0;
 $16 = $1 + 52 | 0;
 $17 = $1 + 56 | 0;
 $18 = $1 + 60 | 0;
 $$0 = 16;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $21 = $2 + ($$0 + -1 << 2) | 0;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$2 + ($$0 << 2) >> 2] - (+HEAPF32[$21 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$21 + -4 >> 2] * +HEAPF32[$4 >> 2] + +HEAPF32[$21 + -8 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$21 + -12 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$21 + -16 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$21 + -20 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$21 + -24 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$21 + -28 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$21 + -32 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$21 + -36 >> 2] * +HEAPF32[$12 >> 2] + +HEAPF32[$21 + -40 >> 2] * +HEAPF32[$13 >> 2] + +HEAPF32[$21 + -44 >> 2] * +HEAPF32[$14 >> 2] + +HEAPF32[$21 + -48 >> 2] * +HEAPF32[$15 >> 2] + +HEAPF32[$21 + -52 >> 2] * +HEAPF32[$16 >> 2] + +HEAPF32[$21 + -56 >> 2] * +HEAPF32[$17 >> 2] + +HEAPF32[$21 + -60 >> 2] * +HEAPF32[$18 >> 2]);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_LPC_fit($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$06 = 0, $$12 = 0, $$14 = 0, $$25 = 0, $10 = 0, $27 = 0, $28 = 0, $35 = 0, $6 = 0, $9 = 0, $spec$select = 0, $spec$select3 = 0;
 $$01 = 0;
 $$06 = 0;
 while (1) {
  if ($$06 >>> 0 >= 10) break;
  $$0 = 0;
  $$03 = 0;
  $$12 = $$01;
  while (1) {
   if (($$03 | 0) >= ($2 | 0)) break;
   $6 = HEAP32[$1 + ($$03 << 2) >> 2] | 0;
   $9 = ($6 | 0) > 0 ? $6 : 0 - $6 | 0;
   $10 = ($9 | 0) > ($$0 | 0);
   $spec$select = $10 ? $$03 : $$12;
   $$0 = $10 ? $9 : $$0;
   $$03 = $$03 + 1 | 0;
   $$12 = $spec$select;
  }
  if (($$0 | 0) <= 1048559) break;
  $spec$select3 = ($$0 | 0) < 5242800 ? ($$0 >> 4) + 1 >> 1 : 163838;
  _silk_bwexpander_32($1, $2, 65470 - ((($spec$select3 << 14) + -536854528 | 0) / ((Math_imul($spec$select3, $$12 + 1 | 0) | 0) >> 2 | 0) | 0) | 0);
  $$01 = $$12;
  $$06 = $$06 + 1 | 0;
 }
 if (($$06 | 0) != 10) {
  $$25 = 0;
  while (1) {
   if (($$25 | 0) >= ($2 | 0)) break;
   HEAP16[$0 + ($$25 << 1) >> 1] = (((HEAP32[$1 + ($$25 << 2) >> 2] | 0) >>> 4) + 1 | 0) >>> 1;
   $$25 = $$25 + 1 | 0;
  }
  return;
 }
 $$14 = 0;
 while (1) {
  if (($$14 | 0) >= ($2 | 0)) break;
  $27 = $1 + ($$14 << 2) | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  if (($28 | 0) > 1048559) $35 = 32767; else if (($28 | 0) < -1048592) $35 = -32768; else $35 = ($28 >> 4) + 1 >> 1;
  HEAP16[$0 + ($$14 << 1) >> 1] = $35;
  HEAP32[$27 >> 2] = $35 << 16 >> 11;
  $$14 = $$14 + 1 | 0;
 }
 return;
}

function _ec_laplace_decode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$03 = 0, $$1 = 0, $$1291317 = 0, $$14 = 0, $$3 = 0, $$3101218 = 0, $$3681416 = 0, $14 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = _ec_decode_bin($0) | 0;
 if ($3 >>> 0 < $1 >>> 0) {
  $$1291317 = $1;
  $$3101218 = 0;
  $$3681416 = 0;
 } else {
  $$0 = $1;
  $$01$in = _ec_laplace_get_freq1($1, $2) | 0;
  $$03 = 1;
  while (1) {
   $$01 = $$01$in + 1 | 0;
   if ($$01 >>> 0 <= 1) {
    label = 6;
    break;
   }
   $7 = $$01 << 1;
   $8 = $$0 + $7 | 0;
   if ($3 >>> 0 < $8 >>> 0) {
    $$1 = $$0;
    $$14 = $$03;
    break;
   }
   $$0 = $8;
   $$01$in = (Math_imul($7 + -2 | 0, $2) | 0) >>> 15;
   $$03 = $$03 + 1 | 0;
  }
  if ((label | 0) == 6) {
   $14 = $3 - $$0 | 0;
   $$1 = $$0 + ($14 & -2) | 0;
   $$14 = $$03 + ($14 >>> 1) | 0;
  }
  $19 = $$1 + $$01 | 0;
  $20 = $3 >>> 0 < $19 >>> 0;
  $$3 = $20 ? $$1 : $19;
  if ($$3 >>> 0 >= 32768) _celt_fatal(42104, 42066, 128);
  if (!$$01) _celt_fatal(42081, 42066, 129);
  if ($$3 >>> 0 > $3 >>> 0) _celt_fatal(42131, 42066, 130); else {
   $$1291317 = $$01;
   $$3101218 = $$3;
   $$3681416 = $20 ? 0 - $$14 | 0 : $$14;
  }
 }
 $25 = $$3101218 + $$1291317 | 0;
 $26 = $25 >>> 0 < 32768;
 if ($3 >>> 0 < ($26 ? $25 : 32768) >>> 0) {
  _ec_dec_update($0, $$3101218, $26 ? $25 : 32768, 32768);
  return $$3681416 | 0;
 } else _celt_fatal(42156, 42066, 131);
 return 0;
}

function _silk_LTP_analysis_filter_FLP($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $13 = 0, $15 = 0.0, $16 = 0, $25 = 0, $26 = 0, $34 = 0.0, $35 = 0.0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp;
 $9 = $5 + $7 | 0;
 $$02 = 0;
 $$03 = $0;
 $$05 = $1;
 while (1) {
  if (($$02 | 0) >= ($6 | 0)) break;
  $13 = 0 - (HEAP32[$3 + ($$02 << 2) >> 2] | 0) | 0;
  $15 = +HEAPF32[$4 + ($$02 << 2) >> 2];
  $16 = $$02 * 5 | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) == 5) break;
   HEAP32[$8 + ($$01 << 2) >> 2] = HEAP32[$2 + ($16 + $$01 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
  }
  $$04 = $$05 + ($13 << 2) | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($9 | 0)) break;
   $25 = HEAP32[$$05 + ($$1 << 2) >> 2] | 0;
   $26 = $$03 + ($$1 << 2) | 0;
   HEAP32[$26 >> 2] = $25;
   $$0 = 0;
   $35 = (HEAP32[tempDoublePtr >> 2] = $25, +HEAPF32[tempDoublePtr >> 2]);
   while (1) {
    if (($$0 | 0) == 5) break;
    $34 = $35 - +HEAPF32[$8 + ($$0 << 2) >> 2] * +HEAPF32[$$04 + (2 - $$0 << 2) >> 2];
    HEAPF32[$26 >> 2] = $34;
    $$0 = $$0 + 1 | 0;
    $35 = $34;
   }
   HEAPF32[$26 >> 2] = $35 * $15;
   $$04 = $$04 + 4 | 0;
   $$1 = $$1 + 1 | 0;
  }
  $$02 = $$02 + 1 | 0;
  $$03 = $$03 + ($9 << 2) | 0;
  $$05 = $$05 + ($5 << 2) | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_sum_sqr_shift($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$3 = 0, $13 = 0, $14 = 0, $18 = 0, $27 = 0, $34 = 0, $37 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $55 = 0, $6 = 0, $9 = 0;
 $5 = 31 - (_silk_CLZ32_509($3) | 0) | 0;
 $6 = $3 + -1 | 0;
 $9 = (($6 | 0) > 0 ? $6 : 0) + 1 & -2;
 $$0 = $3;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($6 | 0)) break;
  $13 = HEAP16[$2 + ($$01 << 1) >> 1] | 0;
  $14 = Math_imul($13, $13) | 0;
  $18 = HEAP16[$2 + (($$01 | 1) << 1) >> 1] | 0;
  $$0 = $$0 + (($14 + (Math_imul($18, $18) | 0) | 0) >>> $5) | 0;
  $$01 = $$01 + 2 | 0;
 }
 if (($9 | 0) < ($3 | 0)) {
  $27 = HEAP16[$2 + ($9 << 1) >> 1] | 0;
  $$1 = $$0 + ((Math_imul($27, $27) | 0) >>> $5) | 0;
 } else $$1 = $$0;
 $34 = _silk_max_32_510($5 + 3 - (_silk_CLZ32_509($$1) | 0) | 0) | 0;
 $37 = (($6 | 0) > 0 ? $6 : 0) + 1 & -2;
 $$12 = 0;
 $$2 = 0;
 while (1) {
  if (($$12 | 0) >= ($6 | 0)) break;
  $41 = HEAP16[$2 + ($$12 << 1) >> 1] | 0;
  $42 = Math_imul($41, $41) | 0;
  $46 = HEAP16[$2 + (($$12 | 1) << 1) >> 1] | 0;
  $$12 = $$12 + 2 | 0;
  $$2 = $$2 + (($42 + (Math_imul($46, $46) | 0) | 0) >>> $34) | 0;
 }
 if (($37 | 0) >= ($3 | 0)) {
  $$3 = $$2;
  HEAP32[$1 >> 2] = $34;
  HEAP32[$0 >> 2] = $$3;
  return;
 }
 $55 = HEAP16[$2 + ($37 << 1) >> 1] | 0;
 $$3 = $$2 + ((Math_imul($55, $55) | 0) >>> $34) | 0;
 HEAP32[$1 >> 2] = $34;
 HEAP32[$0 >> 2] = $$3;
 return;
}

function _quant_energy_finalise($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $13 = 0, $24 = 0, $34 = 0.0, $38 = 0, $44 = 0, $47 = 0;
 $10 = $0 + 8 | 0;
 $$01 = 0;
 $$03 = $7;
 while (1) {
  if (($$01 | 0) == 2) break;
  $$02 = $1;
  $$1 = $$03;
  while (1) {
   if (!(($$02 | 0) < ($2 | 0) & ($$1 | 0) >= ($9 | 0))) break;
   $13 = $5 + ($$02 << 2) | 0;
   if ((HEAP32[$13 >> 2] | 0) > 7) $$3 = $$1; else if ((HEAP32[$6 + ($$02 << 2) >> 2] | 0) == ($$01 | 0)) {
    $$0 = 0;
    $$2 = $$1;
    while (1) {
     $24 = !(+HEAPF32[$4 + ($$02 + (Math_imul($$0, HEAP32[$10 >> 2] | 0) | 0) << 2) >> 2] < 0.0);
     _ec_enc_bits($8, $24 & 1, 1);
     $34 = (+($24 & 1) + -.5) * +(1 << 14 - (HEAP32[$13 >> 2] | 0) + -1 | 0) * .00006103515625;
     $38 = $3 + ($$02 + (Math_imul($$0, HEAP32[$10 >> 2] | 0) | 0) << 2) | 0;
     HEAPF32[$38 >> 2] = +HEAPF32[$38 >> 2] + $34;
     $44 = $4 + ($$02 + (Math_imul($$0, HEAP32[$10 >> 2] | 0) | 0) << 2) | 0;
     HEAPF32[$44 >> 2] = +HEAPF32[$44 >> 2] - $34;
     $47 = $$2 + -1 | 0;
     $$0 = $$0 + 1 | 0;
     if (($$0 | 0) >= ($9 | 0)) {
      $$3 = $47;
      break;
     } else $$2 = $47;
    }
   } else $$3 = $$1;
   $$02 = $$02 + 1 | 0;
   $$1 = $$3;
  }
  $$01 = $$01 + 1 | 0;
  $$03 = $$1;
 }
 return;
}

function __celt_autocorr($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0.0, $$1 = 0, $$2 = 0, $18 = 0.0, $22 = 0, $40 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $6 = $5 - $4 | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 if (($5 | 0) <= 0) _celt_fatal(42343, 42287, 228);
 if (($3 | 0) <= -1) _celt_fatal(42365, 42287, 229);
 L7 : do if (!$3) $$0 = $0; else {
  $$02 = 0;
  while (1) {
   if (($$02 | 0) == ($5 | 0)) break;
   HEAP32[$7 + ($$02 << 2) >> 2] = HEAP32[$0 + ($$02 << 2) >> 2];
   $$02 = $$02 + 1 | 0;
  }
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == ($3 | 0)) {
    $$0 = $7;
    break L7;
   }
   $18 = +HEAPF32[$2 + ($$1 << 2) >> 2];
   HEAPF32[$7 + ($$1 << 2) >> 2] = +HEAPF32[$0 + ($$1 << 2) >> 2] * $18;
   $22 = $5 - $$1 + -1 | 0;
   HEAPF32[$7 + ($22 << 2) >> 2] = +HEAPF32[$0 + ($22 << 2) >> 2] * $18;
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 _celt_pitch_xcorr_c($$0, $$0, $1, $6, $4 + 1 | 0);
 $$01 = 0;
 while (1) {
  if (($$01 | 0) > ($4 | 0)) break;
  $$03 = 0.0;
  $$2 = $$01 + $6 | 0;
  while (1) {
   if (($$2 | 0) >= ($5 | 0)) break;
   $$03 = $$03 + +HEAPF32[$$0 + ($$2 << 2) >> 2] * +HEAPF32[$$0 + ($$2 - $$01 << 2) >> 2];
   $$2 = $$2 + 1 | 0;
  }
  $40 = $1 + ($$01 << 2) | 0;
  HEAPF32[$40 >> 2] = +HEAPF32[$40 >> 2] + $$03;
  $$01 = $$01 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _opus_encoder_create($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $9 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) switch ($0 | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($0 | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($0 | 0) < 24e3) switch ($0 | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($0 | 0) < 48e3) switch ($0 | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($0 | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 L13 : do if ((label | 0) == 2) if (($1 + -1 | 0) >>> 0 < 2) {
  switch ($2 | 0) {
  case 2051:
  case 2049:
  case 2048:
   break;
  default:
   break L13;
  }
  $6 = _opus_alloc_664(_opus_encoder_get_size($1) | 0) | 0;
  if (!$6) {
   if (!$3) {
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP32[$3 >> 2] = -7;
   $$0 = 0;
   return $$0 | 0;
  }
  $9 = _opus_encoder_init($6, $0, $1, $2) | 0;
  if ($3 | 0) HEAP32[$3 >> 2] = $9;
  if (!$9) {
   $$0 = $6;
   return $$0 | 0;
  }
  _opus_free_665($6);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$3 >> 2] = -1;
 $$0 = 0;
 return $$0 | 0;
}

function _silk_resampler_private_IIR_FIR_INTERPOL($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $15 = 0, $23 = 0, $31 = 0, $39 = 0, $43 = 0, $48 = 0, $56 = 0, $64 = 0, $7 = 0, $72 = 0, $79 = 0, $9 = 0;
 $$0 = $0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $7 = (($$01 & 65535) * 12 | 0) >>> 16;
  $9 = $1 + ($$01 >> 16 << 1) | 0;
  $15 = Math_imul(HEAP16[$9 >> 1] | 0, HEAP16[27584 + ($7 << 3) >> 1] | 0) | 0;
  $23 = $15 + (Math_imul(HEAP16[$9 + 2 >> 1] | 0, HEAP16[27584 + ($7 << 3) + 2 >> 1] | 0) | 0) | 0;
  $31 = $23 + (Math_imul(HEAP16[$9 + 4 >> 1] | 0, HEAP16[27584 + ($7 << 3) + 4 >> 1] | 0) | 0) | 0;
  $39 = $31 + (Math_imul(HEAP16[$9 + 6 >> 1] | 0, HEAP16[27584 + ($7 << 3) + 6 >> 1] | 0) | 0) | 0;
  $43 = 11 - $7 | 0;
  $48 = $39 + (Math_imul(HEAP16[$9 + 8 >> 1] | 0, HEAP16[27584 + ($43 << 3) + 6 >> 1] | 0) | 0) | 0;
  $56 = $48 + (Math_imul(HEAP16[$9 + 10 >> 1] | 0, HEAP16[27584 + ($43 << 3) + 4 >> 1] | 0) | 0) | 0;
  $64 = $56 + (Math_imul(HEAP16[$9 + 12 >> 1] | 0, HEAP16[27584 + ($43 << 3) + 2 >> 1] | 0) | 0) | 0;
  $72 = $64 + (Math_imul(HEAP16[$9 + 14 >> 1] | 0, HEAP16[27584 + ($43 << 3) >> 1] | 0) | 0) | 0;
  if (($72 | 0) > 1073725439) $79 = 32767; else if (($72 | 0) < -1073758208) $79 = -32768; else $79 = ($72 >> 14) + 1 >> 1;
  HEAP16[$$0 >> 1] = $79;
  $$0 = $$0 + 2 | 0;
  $$01 = $$01 + $3 | 0;
 }
 return $$0 | 0;
}

function _silk_resampler_private_down_FIR($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $26 = 0, $27 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 + 268 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $0 + 276 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 + $7 << 2) | 0) + 15 & -16) | 0;
 $10 = $0 + 24 | 0;
 _memcpy($9 | 0, $10 | 0, $7 << 2 | 0) | 0;
 $12 = $0 + 296 | 0;
 $14 = (HEAP32[$12 >> 2] | 0) + 4 | 0;
 $16 = HEAP32[$0 + 272 >> 2] | 0;
 $17 = $0 + 280 | 0;
 $$0 = $3;
 $$01 = $1;
 $$02 = $2;
 $19 = $5;
 $21 = $7;
 while (1) {
  $spec$select = ($$0 | 0) < ($19 | 0) ? $$0 : $19;
  _silk_resampler_private_AR2($0, $9 + ($21 << 2) | 0, $$02, HEAP32[$12 >> 2] | 0, $spec$select);
  $26 = _silk_resampler_private_down_FIR_INTERPOL($$01, $9, $14, HEAP32[$6 >> 2] | 0, HEAP32[$17 >> 2] | 0, $spec$select << 16, $16) | 0;
  $27 = $$0 - $spec$select | 0;
  if (($27 | 0) <= 1) break;
  $31 = HEAP32[$6 >> 2] | 0;
  _memcpy($9 | 0, $9 + ($spec$select << 2) | 0, $31 << 2 | 0) | 0;
  $$0 = $27;
  $$01 = $26;
  $$02 = $$02 + ($spec$select << 1) | 0;
  $19 = HEAP32[$4 >> 2] | 0;
  $21 = $31;
 }
 _memcpy($10 | 0, $9 + ($spec$select << 2) | 0, HEAP32[$6 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _silk_corrMatrix_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0, $$03 = 0, $$1 = 0.0, $$14 = 0, $12 = 0.0, $16 = 0.0, $22 = 0.0, $23 = 0.0, $27 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $8 = 0.0;
 $3 = $0 + 16 | 0;
 $4 = +_silk_energy_FLP($3, $1);
 HEAPF32[$2 >> 2] = $4;
 $$01 = $4;
 $$03 = 1;
 while (1) {
  if (($$03 | 0) == 5) break;
  $8 = +HEAPF32[$3 + (0 - $$03 << 2) >> 2];
  $12 = +HEAPF32[$3 + ($1 - $$03 << 2) >> 2];
  $16 = $$01 + ($8 * $8 - $12 * $12);
  HEAPF32[$2 + ($$03 * 6 << 2) >> 2] = $16;
  $$01 = $16;
  $$03 = $$03 + 1 | 0;
 }
 $$0 = $0 + 12 | 0;
 $$02 = 1;
 while (1) {
  if (($$02 | 0) == 5) break;
  $22 = +_silk_inner_product_FLP($3, $$0, $1);
  $23 = $22;
  HEAPF32[$2 + ($$02 * 5 << 2) >> 2] = $23;
  HEAPF32[$2 + ($$02 << 2) >> 2] = $23;
  $27 = 5 - $$02 | 0;
  $$1 = $22;
  $$14 = 1;
  while (1) {
   if ($$14 >>> 0 >= $27 >>> 0) break;
   $29 = 0 - $$14 | 0;
   $35 = $1 - $$14 | 0;
   $43 = $$1 + (+HEAPF32[$3 + ($29 << 2) >> 2] * +HEAPF32[$$0 + ($29 << 2) >> 2] - +HEAPF32[$3 + ($35 << 2) >> 2] * +HEAPF32[$$0 + ($35 << 2) >> 2]);
   $44 = $43;
   $45 = $$02 + $$14 | 0;
   HEAPF32[$2 + (($45 * 5 | 0) + $$14 << 2) >> 2] = $44;
   HEAPF32[$2 + (($$14 * 5 | 0) + $45 << 2) >> 2] = $44;
   $$1 = $43;
   $$14 = $$14 + 1 | 0;
  }
  $$0 = $$0 + -4 | 0;
  $$02 = $$02 + 1 | 0;
 }
 return;
}

function _silk_DIV32_varQ_526($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $7 = 0;
 $5 = _silk_CLZ32_529(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $12 = (_silk_CLZ32_529(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $13 = $1 << $12;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = (Math_imul($7 >> 16, $17) | 0) + ((Math_imul($7 & 65535, $17) | 0) >> 16) | 0;
 $27 = ___muldi3($13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0, $22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = $22 + ((Math_imul($32 >> 16, $17) | 0) + ((Math_imul($32 & 65535, $17) | 0) >> 16)) | 0;
 $42 = $5 + 28 - $12 - $2 | 0;
 if (($42 | 0) >= 0) return (($42 | 0) < 32 ? $39 >> $42 : 0) | 0;
 $44 = 0 - $42 | 0;
 $45 = -2147483648 >> $44;
 $46 = 2147483647 >>> $44;
 if (($45 | 0) > ($46 | 0)) {
  if (($39 | 0) > ($45 | 0)) {
   $53 = $45;
   $52 = $53 << $44;
   return $52 | 0;
  }
  $53 = ($39 | 0) < ($46 | 0) ? $46 : $39;
  $52 = $53 << $44;
  return $52 | 0;
 } else {
  if (($39 | 0) > ($46 | 0)) {
   $53 = $46;
   $52 = $53 << $44;
   return $52 | 0;
  }
  $53 = ($39 | 0) < ($45 | 0) ? $45 : $39;
  $52 = $53 << $44;
  return $52 | 0;
 }
 return 0;
}

function _silk_DIV32_varQ_377($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $7 = 0;
 $5 = _silk_CLZ32_379(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $7 = $0 << $5 + -1;
 $12 = (_silk_CLZ32_379(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $13 = $1 << $12;
 $17 = (536870911 / ($13 >> 16 | 0) | 0) << 16 >> 16;
 $22 = (Math_imul($7 >> 16, $17) | 0) + ((Math_imul($7 & 65535, $17) | 0) >> 16) | 0;
 $27 = ___muldi3($13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0, $22 | 0, (($22 | 0) < 0) << 31 >> 31 | 0) | 0;
 $29 = _bitshift64Lshr($27 | 0, tempRet0 | 0, 29) | 0;
 $32 = $7 - ($29 & -8) | 0;
 $39 = $22 + ((Math_imul($32 >> 16, $17) | 0) + ((Math_imul($32 & 65535, $17) | 0) >> 16)) | 0;
 $42 = $5 + 28 - $12 - $2 | 0;
 if (($42 | 0) >= 0) return (($42 | 0) < 32 ? $39 >> $42 : 0) | 0;
 $44 = 0 - $42 | 0;
 $45 = -2147483648 >> $44;
 $46 = 2147483647 >>> $44;
 if (($45 | 0) > ($46 | 0)) {
  if (($39 | 0) > ($45 | 0)) {
   $53 = $45;
   $52 = $53 << $44;
   return $52 | 0;
  }
  $53 = ($39 | 0) < ($46 | 0) ? $46 : $39;
  $52 = $53 << $44;
  return $52 | 0;
 } else {
  if (($39 | 0) > ($46 | 0)) {
   $53 = $46;
   $52 = $53 << $44;
   return $52 | 0;
  }
  $53 = ($39 | 0) < ($45 | 0) ? $45 : $39;
  $52 = $53 << $44;
  return $52 | 0;
 }
 return 0;
}

function _gain_fade($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $10 = 0, $15 = 0.0, $16 = 0.0, $29 = 0.0, $30 = 0.0, $34 = 0.0, $35 = 0, $40 = 0, $48 = 0, $9 = 0;
 $9 = 48e3 / ($8 | 0) | 0;
 $10 = ($4 | 0) / ($9 | 0) | 0;
 L1 : do if (($6 | 0) == 1) {
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($10 | 0)) break L1;
   $15 = +HEAPF32[$7 + ((Math_imul($$01, $9) | 0) << 2) >> 2];
   $16 = $15 * $15;
   HEAPF32[$1 + ($$01 << 2) >> 2] = ($16 * $3 + (1.0 - $16) * $2) * +HEAPF32[$0 + ($$01 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
  }
 } else {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($10 | 0)) break L1;
   $29 = +HEAPF32[$7 + ((Math_imul($$1, $9) | 0) << 2) >> 2];
   $30 = $29 * $29;
   $34 = $30 * $3 + (1.0 - $30) * $2;
   $35 = $$1 << 1;
   HEAPF32[$1 + ($35 << 2) >> 2] = $34 * +HEAPF32[$0 + ($35 << 2) >> 2];
   $40 = $35 | 1;
   HEAPF32[$1 + ($40 << 2) >> 2] = $34 * +HEAPF32[$0 + ($40 << 2) >> 2];
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 $$0 = 0;
 do {
  $$2 = $10;
  while (1) {
   if (($$2 | 0) >= ($5 | 0)) break;
   $48 = (Math_imul($$2, $6) | 0) + $$0 | 0;
   HEAPF32[$1 + ($48 << 2) >> 2] = +HEAPF32[$0 + ($48 << 2) >> 2] * $3;
   $$2 = $$2 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($6 | 0));
 return;
}

function _silk_DIV32_varQ_361($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $21 = 0, $26 = 0, $28 = 0, $31 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $6 = 0;
 $4 = _silk_CLZ32_362(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $11 = (_silk_CLZ32_362(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $12 = $1 << $11;
 $16 = (536870911 / ($12 >> 16 | 0) | 0) << 16 >> 16;
 $21 = (Math_imul($6 >> 16, $16) | 0) + ((Math_imul($6 & 65535, $16) | 0) >> 16) | 0;
 $26 = ___muldi3($12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0, $21 | 0, (($21 | 0) < 0) << 31 >> 31 | 0) | 0;
 $28 = _bitshift64Lshr($26 | 0, tempRet0 | 0, 29) | 0;
 $31 = $6 - ($28 & -8) | 0;
 $38 = $21 + ((Math_imul($31 >> 16, $16) | 0) + ((Math_imul($31 & 65535, $16) | 0) >> 16)) | 0;
 $40 = $4 + 28 - $11 | 0;
 if (($40 | 0) >= 21) return (($40 | 0) < 53 ? $38 >> $40 + -21 : 0) | 0;
 $42 = 21 - $40 | 0;
 $43 = -2147483648 >> $42;
 $44 = 2147483647 >>> $42;
 if (($43 | 0) > ($44 | 0)) {
  if (($38 | 0) > ($43 | 0)) {
   $51 = $43;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($44 | 0) ? $44 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 } else {
  if (($38 | 0) > ($44 | 0)) {
   $51 = $44;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($43 | 0) ? $43 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 }
 return 0;
}

function _silk_DIV32_varQ_245($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $21 = 0, $26 = 0, $28 = 0, $31 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $6 = 0;
 $4 = _silk_CLZ32_246(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $11 = (_silk_CLZ32_246(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $12 = $1 << $11;
 $16 = (536870911 / ($12 >> 16 | 0) | 0) << 16 >> 16;
 $21 = (Math_imul($6 >> 16, $16) | 0) + ((Math_imul($6 & 65535, $16) | 0) >> 16) | 0;
 $26 = ___muldi3($12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0, $21 | 0, (($21 | 0) < 0) << 31 >> 31 | 0) | 0;
 $28 = _bitshift64Lshr($26 | 0, tempRet0 | 0, 29) | 0;
 $31 = $6 - ($28 & -8) | 0;
 $38 = $21 + ((Math_imul($31 >> 16, $16) | 0) + ((Math_imul($31 & 65535, $16) | 0) >> 16)) | 0;
 $40 = $4 + 28 - $11 | 0;
 if (($40 | 0) >= 16) return (($40 | 0) < 48 ? $38 >> $40 + -16 : 0) | 0;
 $42 = 16 - $40 | 0;
 $43 = -2147483648 >> $42;
 $44 = 2147483647 >>> $42;
 if (($43 | 0) > ($44 | 0)) {
  if (($38 | 0) > ($43 | 0)) {
   $51 = $43;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($44 | 0) ? $44 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 } else {
  if (($38 | 0) > ($44 | 0)) {
   $51 = $44;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($43 | 0) ? $43 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 }
 return 0;
}

function _silk_DIV32_varQ_236($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $21 = 0, $26 = 0, $28 = 0, $31 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $6 = 0;
 $4 = _silk_CLZ32_237(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $11 = (_silk_CLZ32_237(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $12 = $1 << $11;
 $16 = (536870911 / ($12 >> 16 | 0) | 0) << 16 >> 16;
 $21 = (Math_imul($6 >> 16, $16) | 0) + ((Math_imul($6 & 65535, $16) | 0) >> 16) | 0;
 $26 = ___muldi3($12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0, $21 | 0, (($21 | 0) < 0) << 31 >> 31 | 0) | 0;
 $28 = _bitshift64Lshr($26 | 0, tempRet0 | 0, 29) | 0;
 $31 = $6 - ($28 & -8) | 0;
 $38 = $21 + ((Math_imul($31 >> 16, $16) | 0) + ((Math_imul($31 & 65535, $16) | 0) >> 16)) | 0;
 $40 = $4 + 28 - $11 | 0;
 if (($40 | 0) >= 16) return (($40 | 0) < 48 ? $38 >> $40 + -16 : 0) | 0;
 $42 = 16 - $40 | 0;
 $43 = -2147483648 >> $42;
 $44 = 2147483647 >>> $42;
 if (($43 | 0) > ($44 | 0)) {
  if (($38 | 0) > ($43 | 0)) {
   $51 = $43;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($44 | 0) ? $44 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 } else {
  if (($38 | 0) > ($44 | 0)) {
   $51 = $44;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($43 | 0) ? $43 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 }
 return 0;
}

function __celt_lpc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $$03 = 0, $$1 = 0, $17 = 0, $21 = 0.0, $22 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $37 = 0.0, $7 = 0, $indvars$iv = 0, label = 0;
 $3 = +HEAPF32[$1 >> 2];
 _memset($0 | 0, 0, $2 << 2 | 0) | 0;
 if (!(+HEAPF32[$1 >> 2] != 0.0)) return;
 $$01 = $3;
 $$03 = 0;
 $indvars$iv = 1;
 while (1) {
  $7 = $indvars$iv >>> 1;
  if (($$03 | 0) >= ($2 | 0)) {
   label = 12;
   break;
  }
  $$0 = 0.0;
  $$02 = 0;
  while (1) {
   if (($$03 | 0) == ($$02 | 0)) break;
   $$0 = $$0 + +HEAPF32[$0 + ($$02 << 2) >> 2] * +HEAPF32[$1 + ($$03 - $$02 << 2) >> 2];
   $$02 = $$02 + 1 | 0;
  }
  $17 = $$03 + 1 | 0;
  $21 = ($$0 + +HEAPF32[$1 + ($17 << 2) >> 2]) / $$01;
  $22 = -$21;
  HEAPF32[$0 + ($$03 << 2) >> 2] = $22;
  $24 = $$03 + -1 | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == ($7 | 0)) break;
   $25 = $0 + ($$1 << 2) | 0;
   $26 = +HEAPF32[$25 >> 2];
   $28 = $0 + ($24 - $$1 << 2) | 0;
   $29 = +HEAPF32[$28 >> 2];
   HEAPF32[$25 >> 2] = $26 + $29 * $22;
   HEAPF32[$28 >> 2] = $29 + $26 * $22;
   $$1 = $$1 + 1 | 0;
  }
  $37 = $$01 - $21 * $21 * $$01;
  if ($37 < +HEAPF32[$1 >> 2] * 1.0000000474974513e-03) {
   label = 12;
   break;
  }
  $$01 = $37;
  $$03 = $17;
  $indvars$iv = $indvars$iv + 1 | 0;
 }
 if ((label | 0) == 12) return;
}

function _silk_DIV32_varQ($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $21 = 0, $26 = 0, $28 = 0, $31 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $6 = 0;
 $4 = _silk_CLZ32_183(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $11 = (_silk_CLZ32_183(($1 | 0) > 0 ? $1 : 0 - $1 | 0) | 0) + -1 | 0;
 $12 = $1 << $11;
 $16 = (536870911 / ($12 >> 16 | 0) | 0) << 16 >> 16;
 $21 = (Math_imul($6 >> 16, $16) | 0) + ((Math_imul($6 & 65535, $16) | 0) >> 16) | 0;
 $26 = ___muldi3($12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0, $21 | 0, (($21 | 0) < 0) << 31 >> 31 | 0) | 0;
 $28 = _bitshift64Lshr($26 | 0, tempRet0 | 0, 29) | 0;
 $31 = $6 - ($28 & -8) | 0;
 $38 = $21 + ((Math_imul($31 >> 16, $16) | 0) + ((Math_imul($31 & 65535, $16) | 0) >> 16)) | 0;
 $40 = $4 + 28 - $11 | 0;
 if (($40 | 0) >= 16) return (($40 | 0) < 48 ? $38 >> $40 + -16 : 0) | 0;
 $42 = 16 - $40 | 0;
 $43 = -2147483648 >> $42;
 $44 = 2147483647 >>> $42;
 if (($43 | 0) > ($44 | 0)) {
  if (($38 | 0) > ($43 | 0)) {
   $51 = $43;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($44 | 0) ? $44 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 } else {
  if (($38 | 0) > ($44 | 0)) {
   $51 = $44;
   $50 = $51 << $42;
   return $50 | 0;
  }
  $51 = ($38 | 0) < ($43 | 0) ? $43 : $38;
  $50 = $51 << $42;
  return $50 | 0;
 }
 return 0;
}

function _stereo_fade($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $16 = 0.0, $17 = 0.0, $22 = 0, $25 = 0, $30 = 0.0, $31 = 0, $34 = 0, $39 = 0, $42 = 0, $47 = 0.0, $48 = 0, $51 = 0, $9 = 0;
 $9 = 48e3 / ($8 | 0) | 0;
 $10 = ($4 | 0) / ($9 | 0) | 0;
 $11 = 1.0 - $2;
 $12 = 1.0 - $3;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($10 | 0)) break;
  $16 = +HEAPF32[$7 + ((Math_imul($$0, $9) | 0) << 2) >> 2];
  $17 = $16 * $16;
  $22 = Math_imul($$0, $6) | 0;
  $25 = $22 + 1 | 0;
  $30 = ($17 * $12 + (1.0 - $17) * $11) * ((+HEAPF32[$0 + ($22 << 2) >> 2] - +HEAPF32[$0 + ($25 << 2) >> 2]) * .5);
  $31 = $1 + ($22 << 2) | 0;
  HEAPF32[$31 >> 2] = +HEAPF32[$31 >> 2] - $30;
  $34 = $1 + ($25 << 2) | 0;
  HEAPF32[$34 >> 2] = +HEAPF32[$34 >> 2] + $30;
  $$0 = $$0 + 1 | 0;
 }
 $$1 = $$0;
 while (1) {
  if (($$1 | 0) >= ($5 | 0)) break;
  $39 = Math_imul($$1, $6) | 0;
  $42 = $39 + 1 | 0;
  $47 = $12 * ((+HEAPF32[$0 + ($39 << 2) >> 2] - +HEAPF32[$0 + ($42 << 2) >> 2]) * .5);
  $48 = $1 + ($39 << 2) | 0;
  HEAPF32[$48 >> 2] = +HEAPF32[$48 >> 2] - $47;
  $51 = $1 + ($42 << 2) | 0;
  HEAPF32[$51 >> 2] = +HEAPF32[$51 >> 2] + $47;
  $$1 = $$1 + 1 | 0;
 }
 return;
}

function _ec_laplace_encode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $12 = 0, $21 = 0, $22 = 0, $27 = 0, $33 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if (!$4) {
  $$2 = $2;
  $$24 = 0;
  $40 = $$24 + $$2 | 0;
  _ec_encode_bin($0, $$24, $40);
  return;
 }
 $6 = $4 >> 31;
 $8 = $4 + $6 ^ $6;
 $$0 = 1;
 $$01 = _ec_laplace_get_freq1($2, $3) | 0;
 $$02 = $2;
 while (1) {
  if (!$$01) {
   label = 6;
   break;
  }
  if (($8 | 0) <= ($$0 | 0)) {
   label = 7;
   break;
  }
  $12 = $$01 << 1;
  $$0 = $$0 + 1 | 0;
  $$01 = (Math_imul($12, $3) | 0) >>> 15;
  $$02 = $$02 + ($12 + 2) | 0;
 }
 if ((label | 0) == 6) {
  $21 = $8 - $$0 | 0;
  $22 = (32768 - $$02 - $6 >> 1) + -1 | 0;
  $$ = ($21 | 0) < ($22 | 0) ? $21 : $22;
  $27 = $$02 + (($$ << 1 | 1) + $6) | 0;
  HEAP32[$1 >> 2] = $$0 + $$ + $6 ^ $6;
  $$1 = ($27 | 0) != 32768 & 1;
  $$13 = $27;
 } else if ((label | 0) == 7) {
  $33 = $$01 + 1 | 0;
  $$1 = $33;
  $$13 = $$02 + ($33 & ~$6) | 0;
 }
 if (($$13 + $$1 | 0) >>> 0 >= 32769) _celt_fatal(42035, 42066, 88);
 if (!$$1) _celt_fatal(42081, 42066, 89); else {
  $$2 = $$1;
  $$24 = $$13;
  $40 = $$24 + $$2 | 0;
  _ec_encode_bin($0, $$24, $40);
  return;
 }
}

function _deinterleave_hadamard($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $10 = 0, $15 = 0, $22 = 0, $32 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($1, $2) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 if (($2 | 0) <= 0) _celt_fatal(40327, 40213, 591);
 if (!$3) {
  $$12 = 0;
  while (1) {
   if (($$12 | 0) == ($2 | 0)) break;
   $22 = Math_imul($$12, $1) | 0;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) >= ($1 | 0)) break;
    HEAP32[$5 + ($22 + $$1 << 2) >> 2] = HEAP32[$0 + ((Math_imul($$1, $2) | 0) + $$12 << 2) >> 2];
    $$1 = $$1 + 1 | 0;
   }
   $$12 = $$12 + 1 | 0;
  }
  $32 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $9 = 48 + ($2 << 2) + -8 | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) == ($2 | 0)) break;
   $10 = $9 + ($$01 << 2) | 0;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) >= ($1 | 0)) break;
    $15 = HEAP32[$0 + ((Math_imul($$0, $2) | 0) + $$01 << 2) >> 2] | 0;
    HEAP32[$5 + ((Math_imul(HEAP32[$10 >> 2] | 0, $1) | 0) + $$0 << 2) >> 2] = $15;
    $$0 = $$0 + 1 | 0;
   }
   $$01 = $$01 + 1 | 0;
  }
  $32 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $32 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _exp_rotation($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$pre3 = 0, $16 = 0.0, $18 = 0.0, $22 = 0.0, $27 = 0.0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0;
 if (($4 << 1 | 0) >= ($1 | 0) | ($5 | 0) == 0) return;
 $16 = +($1 | 0) / +((Math_imul(HEAP32[39788 + ($5 + -1 << 2) >> 2] | 0, $4) | 0) + $1 | 0);
 $18 = $16 * $16 * .5;
 $22 = +Math_cos(+($18 * 1.5707963705062866));
 $27 = +Math_cos(+((1.0 - $18) * 1.5707963705062866));
 L4 : do if (($3 << 3 | 0) > ($1 | 0)) $$1 = 0; else {
  $30 = $3 >> 2;
  $$0 = 1;
  while (1) {
   if (((Math_imul((Math_imul($$0, $$0) | 0) + $$0 | 0, $3) | 0) + $30 | 0) >= ($1 | 0)) {
    $$1 = $$0;
    break L4;
   }
   $$0 = $$0 + 1 | 0;
  }
 } while (0);
 $37 = _celt_udiv_162($1, $3) | 0;
 $38 = ($2 | 0) < 0;
 $39 = ($$1 | 0) == 0;
 $40 = -$27;
 $41 = -$22;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $$pre3 = $0 + ((Math_imul($$01, $37) | 0) << 2) | 0;
  if ($38) {
   if (!$39) _exp_rotation1($$pre3, $37, $$1, $27, $22);
   _exp_rotation1($$pre3, $37, 1, $22, $27);
  } else {
   _exp_rotation1($$pre3, $37, 1, $22, $40);
   if (!$39) _exp_rotation1($$pre3, $37, $$1, $27, $41);
  }
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _quant_fine_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$01 = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0.0, $15 = 0, $24 = 0, $36 = 0.0, $40 = 0, $46 = 0, $8 = 0, $spec$select = 0;
 $8 = $0 + 8 | 0;
 $$02 = $1;
 while (1) {
  if (($$02 | 0) >= ($2 | 0)) break;
  $10 = $5 + ($$02 << 2) | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (($11 | 0) >= 1) {
   $13 = 65536 << $11 >> 16;
   $14 = +($13 | 0);
   $15 = $13 + -1 | 0;
   $$01 = 0;
   do {
    $24 = ~~+Math_floor(+((+HEAPF32[$4 + ($$02 + (Math_imul($$01, HEAP32[$8 >> 2] | 0) | 0) << 2) >> 2] + .5) * $14));
    $spec$select = ($13 | 0) > ($24 | 0) ? $24 : $15;
    $$1 = ($spec$select | 0) > 0 ? $spec$select : 0;
    _ec_enc_bits($6, $$1, HEAP32[$10 >> 2] | 0);
    $36 = (+($$1 | 0) + .5) * +(1 << 14 - (HEAP32[$10 >> 2] | 0) | 0) * .00006103515625 + -.5;
    $40 = $3 + ($$02 + (Math_imul($$01, HEAP32[$8 >> 2] | 0) | 0) << 2) | 0;
    HEAPF32[$40 >> 2] = +HEAPF32[$40 >> 2] + $36;
    $46 = $4 + ($$02 + (Math_imul($$01, HEAP32[$8 >> 2] | 0) | 0) << 2) | 0;
    HEAPF32[$46 >> 2] = +HEAPF32[$46 >> 2] - $36;
    $$01 = $$01 + 1 | 0;
   } while (($$01 | 0) < ($7 | 0));
  }
  $$02 = $$02 + 1 | 0;
 }
 return;
}

function _compute_silk_rate_for_hybrid($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $21 = 0, $27 = 0, $29 = 0, $40 = 0, $6 = 0, $9 = 0, $spec$select = 0, label = 0;
 $6 = ($0 | 0) / ($5 | 0) | 0;
 $9 = $2 + 1 + ($4 << 1) | 0;
 $$01 = 1;
 while (1) {
  if ($$01 >>> 0 >= 7) {
   label = 5;
   break;
  }
  $12 = HEAP32[27840 + ($$01 * 20 | 0) >> 2] | 0;
  if (($12 | 0) > ($6 | 0)) {
   $29 = $12;
   label = 8;
   break;
  }
  $$01 = $$01 + 1 | 0;
 }
 do if ((label | 0) == 5) if (($$01 | 0) == 7) {
  $$0 = (HEAP32[27960 + ($9 << 2) >> 2] | 0) + (($6 + -64e3 | 0) / 2 | 0) | 0;
  break;
 } else {
  $29 = HEAP32[27840 + ($$01 * 20 | 0) >> 2] | 0;
  label = 8;
  break;
 } while (0);
 if ((label | 0) == 8) {
  $21 = $$01 + -1 | 0;
  $27 = HEAP32[27840 + ($21 * 20 | 0) >> 2] | 0;
  $$0 = ((Math_imul(HEAP32[27840 + ($21 * 20 | 0) + ($9 << 2) >> 2] | 0, $29 - $6 | 0) | 0) + (Math_imul(HEAP32[27840 + ($$01 * 20 | 0) + ($9 << 2) >> 2] | 0, $6 - $27 | 0) | 0) | 0) / ($29 - $27 | 0) | 0;
 }
 $spec$select = ($3 | 0) == 0 ? $$0 + 100 | 0 : $$0;
 $40 = Math_imul(($1 | 0) == 1104 ? $spec$select + 300 | 0 : $spec$select, $5) | 0;
 return (($5 | 0) == 2 & ($6 | 0) > 11999 ? $40 + -1e3 | 0 : $40) | 0;
}

function _opus_decoder_create($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0, $8 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) switch ($0 | 0) {
 case 8e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else switch ($0 | 0) {
 case 12e3:
  {
   label = 2;
   break L1;
   break;
  }
 default:
  break L1;
 } else {
  if (($0 | 0) < 24e3) switch ($0 | 0) {
  case 16e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
  if (($0 | 0) < 48e3) switch ($0 | 0) {
  case 24e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  } else switch ($0 | 0) {
  case 48e3:
   {
    label = 2;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 if ((label | 0) == 2) if (($1 + -1 | 0) >>> 0 < 2) {
  $5 = _opus_alloc(_opus_decoder_get_size($1) | 0) | 0;
  if (!$5) {
   if (!$2) {
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP32[$2 >> 2] = -7;
   $$0 = 0;
   return $$0 | 0;
  }
  $8 = _opus_decoder_init($5, $0, $1) | 0;
  if ($2 | 0) HEAP32[$2 >> 2] = $8;
  if (!$8) {
   $$0 = $5;
   return $$0 | 0;
  }
  _opus_free($5);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$2 >> 2] = -1;
 $$0 = 0;
 return $$0 | 0;
}

function _speex_resampler_set_rate_frac($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$01 = 0, $18 = 0, $19 = 0, $21 = 0, $25 = 0, $26 = 0, $30 = 0, $36 = 0, $38 = 0, $9 = 0;
 if (($1 | 0) == 0 | ($2 | 0) == 0) return;
 $9 = $0 + 4 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($3 | 0)) if ((HEAP32[$9 >> 2] | 0) == ($4 | 0)) if ((HEAP32[$0 + 8 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$0 + 12 >> 2] | 0) == ($2 | 0)) return;
 $18 = $0 + 12 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 $21 = _compute_gcd($1, $2) | 0;
 HEAP32[$0 + 8 >> 2] = ($1 >>> 0) / ($21 >>> 0) | 0;
 HEAP32[$18 >> 2] = ($2 >>> 0) / ($21 >>> 0) | 0;
 L10 : do if ($19 | 0) {
  $25 = $0 + 20 | 0;
  $26 = $0 + 64 | 0;
  $$01 = 0;
  while (1) {
   if ($$01 >>> 0 >= (HEAP32[$25 >> 2] | 0) >>> 0) break L10;
   $30 = (HEAP32[$26 >> 2] | 0) + ($$01 << 2) | 0;
   if (_multiply_frac($30, HEAP32[$30 >> 2] | 0, HEAP32[$18 >> 2] | 0, $19) | 0) break;
   $36 = (HEAP32[$26 >> 2] | 0) + ($$01 << 2) | 0;
   $38 = HEAP32[$18 >> 2] | 0;
   if ((HEAP32[$36 >> 2] | 0) >>> 0 >= $38 >>> 0) HEAP32[$36 >> 2] = $38 + -1;
   $$01 = $$01 + 1 | 0;
  }
  return;
 } while (0);
 if (!(HEAP32[$0 + 52 >> 2] | 0)) return;
 _update_filter($0) | 0;
 return;
}

function _silk_NSQ_noise_shape_feedback_loop_c($$val, $0, $1, $2) {
 $$val = $$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $3 = 0, $33 = 0, $39 = 0, $41 = 0, $46 = 0, $7 = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $$val;
 $7 = HEAP16[$1 >> 1] | 0;
 $$0 = 2;
 $$01 = $3;
 $$02 = ($2 >> 1) + ((Math_imul($$val >> 16, $7) | 0) + ((Math_imul($$val & 65535, $7) | 0) >> 16)) | 0;
 while (1) {
  if (($$0 | 0) >= ($2 | 0)) break;
  $15 = $$0 + -1 | 0;
  $16 = $0 + ($15 << 2) | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  HEAP32[$16 >> 2] = $$01;
  $19 = HEAP16[$1 + ($15 << 1) >> 1] | 0;
  $20 = $0 + ($$0 << 2) | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  HEAP32[$20 >> 2] = $17;
  $25 = $19 << 16 >> 16;
  $33 = HEAP16[$1 + ($$0 << 1) >> 1] | 0;
  $39 = $$02 + ((Math_imul($$01 >> 16, $25) | 0) + ((Math_imul($$01 & 65535, $25) | 0) >> 16)) + ((Math_imul($17 >> 16, $33) | 0) + ((Math_imul($17 & 65535, $33) | 0) >> 16)) | 0;
  $$0 = $$0 + 2 | 0;
  $$01 = $21;
  $$02 = $39;
 }
 $41 = $2 + -1 | 0;
 HEAP32[$0 + ($41 << 2) >> 2] = $$01;
 $46 = HEAP16[$1 + ($41 << 1) >> 1] | 0;
 return $$02 + ((Math_imul($$01 >> 16, $46) | 0) + ((Math_imul($$01 & 65535, $46) | 0) >> 16)) << 1 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = tempRet0;
   $12 = ___muldi3($8 | 0, $9 | 0, -10, -1) | 0;
   $14 = _i64Add($8$looptemp | 0, $9$looptemp | 0, $12 | 0, tempRet0 | 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp + (Math_imul($$012, -10) | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $21 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0;
   label = 5;
  }
 } else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 3]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$141 = $0;
   $$143 = $1;
   $31 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $21 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $21 >> 0] | 0) == 10) break;
    if (!$21) {
     $$141 = $0;
     $$143 = $1;
     $31 = $14;
     break L10;
    } else $$03846 = $21;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 3]($2, $0, $$03846) | 0) >>> 0 < $$03846 >>> 0) break L5;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $31 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
 } while (0);
 return;
}

function _silk_ana_filt_bank_1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $12 = 0, $14 = 0, $20 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $39 = 0, $46 = 0, $48 = 0, $5 = 0, $55 = 0, $6 = 0, $8 = 0;
 $5 = $4 >> 1;
 $6 = $1 + 4 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($5 | 0)) break;
  $8 = $$0 << 1;
  $12 = HEAP16[$0 + ($8 << 1) >> 1] << 10;
  $14 = $12 - (HEAP32[$1 >> 2] | 0) | 0;
  $20 = (Math_imul($14 >> 16, -24290) | 0) + ((Math_imul($14 & 65535, -24290) | 0) >> 16) | 0;
  $22 = $12 + $20 | 0;
  HEAP32[$1 >> 2] = $12 + ($14 + $20);
  $28 = HEAP16[$0 + (($8 | 1) << 1) >> 1] << 10;
  $29 = HEAP32[$6 >> 2] | 0;
  $30 = $28 - $29 | 0;
  $36 = (($30 >> 16) * 10788 | 0) + ((($30 & 65535) * 10788 | 0) >>> 16) | 0;
  $37 = $29 + $36 | 0;
  HEAP32[$6 >> 2] = $28 + $36;
  $39 = $37 + $22 | 0;
  if (($39 | 0) > 67107839) $46 = 32767; else if (($39 | 0) < -67109888) $46 = -32768; else $46 = ($39 >> 10) + 1 >> 1;
  HEAP16[$2 + ($$0 << 1) >> 1] = $46;
  $48 = $37 - $22 | 0;
  if (($48 | 0) > 67107839) $55 = 32767; else if (($48 | 0) < -67109888) $55 = -32768; else $55 = ($48 >> 10) + 1 >> 1;
  HEAP16[$3 + ($$0 << 1) >> 1] = $55;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _quant_band_n1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$peel = 0, $$02 = 0, $$1 = 0, $$1$peel = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $29 = 0, $7 = 0, $8 = 0, $9 = 0;
 $7 = HEAP32[$0 + 28 >> 2] | 0;
 $8 = ($2 | 0) == 0;
 $9 = $0 + 32 | 0;
 $10 = (HEAP32[$0 >> 2] | 0) == 0;
 $11 = $0 + 4 | 0;
 $12 = $8 ? 1 : 2;
 if ((HEAP32[$9 >> 2] | 0) > 7) {
  if ($10) $$0$peel = _ec_dec_bits($7, 1) | 0; else {
   $17 = +HEAPF32[$1 >> 2] < 0.0 & 1;
   _ec_enc_bits($7, $17, 1);
   $$0$peel = $17;
  }
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -8;
  $$1$peel = $$0$peel;
 } else $$1$peel = 0;
 if (HEAP32[$11 >> 2] | 0) HEAPF32[$1 >> 2] = ($$1$peel | 0) == 0 ? 1.0 : -1.0;
 if (!$8) {
  $$02 = 1;
  do {
   if ((HEAP32[$9 >> 2] | 0) > 7) {
    if ($10) $$0 = _ec_dec_bits($7, 1) | 0; else {
     $29 = +HEAPF32[$2 >> 2] < 0.0 & 1;
     _ec_enc_bits($7, $29, 1);
     $$0 = $29;
    }
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -8;
    $$1 = $$0;
   } else $$1 = 0;
   if (HEAP32[$11 >> 2] | 0) HEAPF32[$2 >> 2] = ($$1 | 0) == 0 ? 1.0 : -1.0;
   $$02 = $$02 + 1 | 0;
  } while ($$02 >>> 0 < $12 >>> 0);
 }
 if (!$4) return;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _silk_NLSF_VQ_weights_laroia($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $30 = 0, $35 = 0, $43 = 0, $7 = 0, $9 = 0;
 if (($2 | 0) <= 0) _celt_fatal(46058, 46082, 51);
 if ($2 & 1 | 0) _celt_fatal(46112, 46082, 52);
 $7 = HEAP16[$1 >> 1] | 0;
 $9 = 131072 / (_silk_max_int_451($7) | 0) | 0;
 $15 = 131072 / (_silk_max_int_451((HEAP16[$1 + 2 >> 1] | 0) - $7 | 0) | 0) | 0;
 HEAP16[$0 >> 1] = _silk_min_int_452($9 + $15 | 0) | 0;
 $19 = $2 + -1 | 0;
 $$0 = $15;
 $$01 = 1;
 while (1) {
  if (($$01 | 0) >= ($19 | 0)) break;
  $21 = $$01 + 1 | 0;
  $22 = $1 + ($21 << 1) | 0;
  $30 = 131072 / (_silk_max_int_451((HEAP16[$22 >> 1] | 0) - (HEAP16[$1 + ($$01 << 1) >> 1] | 0) | 0) | 0) | 0;
  HEAP16[$0 + ($$01 << 1) >> 1] = _silk_min_int_452($30 + $$0 | 0) | 0;
  $35 = $$01 + 2 | 0;
  $43 = 131072 / (_silk_max_int_451((HEAP16[$1 + ($35 << 1) >> 1] | 0) - (HEAP16[$22 >> 1] | 0) | 0) | 0) | 0;
  HEAP16[$0 + ($21 << 1) >> 1] = _silk_min_int_452($30 + $43 | 0) | 0;
  $$0 = $43;
  $$01 = $35;
 }
 HEAP16[$0 + ($19 << 1) >> 1] = _silk_min_int_452((131072 / (_silk_max_int_451(32768 - (HEAP16[$1 + ($19 << 1) >> 1] | 0) | 0) | 0) | 0) + $$0 | 0) | 0;
 return;
}

function _interleave_hadamard($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $10 = 0, $23 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($1, $2) | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 2) | 0) + 15 & -16) | 0;
 if (!$3) {
  $$12 = 0;
  while (1) {
   if (($$12 | 0) >= ($2 | 0)) break;
   $23 = Math_imul($$12, $1) | 0;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) >= ($1 | 0)) break;
    HEAP32[$5 + ((Math_imul($$1, $2) | 0) + $$12 << 2) >> 2] = HEAP32[$0 + ($23 + $$1 << 2) >> 2];
    $$1 = $$1 + 1 | 0;
   }
   $$12 = $$12 + 1 | 0;
  }
  $33 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $8 = 48 + ($2 << 2) + -8 | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($2 | 0)) break;
   $10 = $8 + ($$01 << 2) | 0;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) >= ($1 | 0)) break;
    HEAP32[$5 + ((Math_imul($$0, $2) | 0) + $$01 << 2) >> 2] = HEAP32[$0 + ((Math_imul(HEAP32[$10 >> 2] | 0, $1) | 0) + $$0 << 2) >> 2];
    $$0 = $$0 + 1 | 0;
   }
   $$01 = $$01 + 1 | 0;
  }
  $33 = $4 << 2;
  _memcpy($0 | 0, $5 | 0, $33 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _dc_reject($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $$03 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $14 = 0, $16 = 0.0, $17 = 0, $19 = 0.0, $35 = 0.0, $7 = 0.0, $8 = 0.0;
 $7 = 18.900001525878906 / +($5 | 0);
 $8 = 1.0 - $7;
 $10 = +HEAPF32[$2 >> 2];
 if (($4 | 0) == 2) {
  $11 = $2 + 8 | 0;
  $$01 = +HEAPF32[$11 >> 2];
  $$02 = $10;
  $$03 = 0;
  while (1) {
   if (($$03 | 0) >= ($3 | 0)) break;
   $14 = $$03 << 1;
   $16 = +HEAPF32[$0 + ($14 << 2) >> 2];
   $17 = $14 | 1;
   $19 = +HEAPF32[$0 + ($17 << 2) >> 2];
   HEAPF32[$1 + ($14 << 2) >> 2] = $16 - $$02;
   HEAPF32[$1 + ($17 << 2) >> 2] = $19 - $$01;
   $$01 = $7 * $19 + 1.0000000031710769e-30 + $8 * $$01;
   $$02 = $7 * $16 + 1.0000000031710769e-30 + $8 * $$02;
   $$03 = $$03 + 1 | 0;
  }
  HEAPF32[$2 >> 2] = $$02;
  HEAPF32[$11 >> 2] = $$01;
  return;
 } else {
  $$0 = $10;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($3 | 0)) break;
   $35 = +HEAPF32[$0 + ($$1 << 2) >> 2];
   HEAPF32[$1 + ($$1 << 2) >> 2] = $35 - $$0;
   $$0 = $7 * $35 + 1.0000000031710769e-30 + $8 * $$0;
   $$1 = $$1 + 1 | 0;
  }
  HEAPF32[$2 >> 2] = $$0;
  return;
 }
}

function _silk_stereo_decode_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = _ec_dec_icdf($0, 24864, 8) | 0;
 $4 = ($3 | 0) / 5 | 0;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3 + (Math_imul($4, -5) | 0);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 2) break;
  HEAP32[$2 + ($$0 * 12 | 0) >> 2] = _ec_dec_icdf($0, 44702, 8) | 0;
  HEAP32[$2 + ($$0 * 12 | 0) + 4 >> 2] = _ec_dec_icdf($0, 44709, 8) | 0;
  $$0 = $$0 + 1 | 0;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 2) break;
  $17 = $2 + ($$1 * 12 | 0) | 0;
  $19 = (HEAP32[$17 >> 2] | 0) + ((HEAP32[$2 + ($$1 * 12 | 0) + 8 >> 2] | 0) * 3 | 0) | 0;
  HEAP32[$17 >> 2] = $19;
  $22 = HEAP16[24832 + ($19 << 1) >> 1] | 0;
  $25 = HEAP16[24832 + ($19 + 1 << 1) >> 1] | 0;
  HEAP32[$1 + ($$1 << 2) >> 2] = (Math_imul(((($25 << 16 >> 16) - $22 >> 16) * 6554 | 0) + (((($25 & 65535) - $22 & 65535) * 6554 | 0) >>> 16) | 0, HEAP32[$2 + ($$1 * 12 | 0) + 4 >> 2] << 17 >> 16 | 1) | 0) + $22;
  $$1 = $$1 + 1 | 0;
 }
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[$1 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _silk_schur_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $11 = 0, $12 = 0, $16 = 0.0, $19 = 0.0, $22 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $3 = sp;
 if ($2 >>> 0 >= 25) _celt_fatal(48008, 48068, 44);
 $$01 = 0;
 while (1) {
  $7 = +HEAPF32[$1 + ($$01 << 2) >> 2];
  HEAPF64[$3 + ($$01 << 4) + 8 >> 3] = $7;
  HEAPF64[$3 + ($$01 << 4) >> 3] = $7;
  if (($$01 | 0) == ($2 | 0)) break; else $$01 = $$01 + 1 | 0;
 }
 $11 = $3 + 8 | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == ($2 | 0)) break;
  $12 = $$1 + 1 | 0;
  $16 = +HEAPF64[$11 >> 3];
  $19 = -+HEAPF64[$3 + ($12 << 4) >> 3] / ($16 > 9.999999717180685e-10 ? $16 : 9.999999717180685e-10);
  HEAPF32[$0 + ($$1 << 2) >> 2] = $19;
  $22 = $2 - $$1 | 0;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($22 | 0)) break;
   $26 = $3 + ($$0 + $$1 + 1 << 4) | 0;
   $27 = +HEAPF64[$26 >> 3];
   $28 = $3 + ($$0 << 4) + 8 | 0;
   $29 = +HEAPF64[$28 >> 3];
   HEAPF64[$26 >> 3] = $27 + $29 * $19;
   HEAPF64[$28 >> 3] = $29 + $27 * $19;
   $$0 = $$0 + 1 | 0;
  }
  $$1 = $12;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$11 >> 3]);
}

function _silk_LPC_analysis_filter12_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $1 + 4 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1 + 12 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 20 | 0;
 $9 = $1 + 24 | 0;
 $10 = $1 + 28 | 0;
 $11 = $1 + 32 | 0;
 $12 = $1 + 36 | 0;
 $13 = $1 + 40 | 0;
 $14 = $1 + 44 | 0;
 $$0 = 12;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $17 = $2 + ($$0 + -1 << 2) | 0;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$2 + ($$0 << 2) >> 2] - (+HEAPF32[$17 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$17 + -4 >> 2] * +HEAPF32[$4 >> 2] + +HEAPF32[$17 + -8 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$17 + -12 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$17 + -16 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$17 + -20 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$17 + -24 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$17 + -28 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$17 + -32 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$17 + -36 >> 2] * +HEAPF32[$12 >> 2] + +HEAPF32[$17 + -40 >> 2] * +HEAPF32[$13 >> 2] + +HEAPF32[$17 + -44 >> 2] * +HEAPF32[$14 >> 2]);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _unquant_energy_finalise($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $12 = 0, $20 = 0.0, $31 = 0, $34 = 0, $9 = 0;
 $9 = $0 + 8 | 0;
 $$01 = 0;
 $$03 = $6;
 while (1) {
  if (($$01 | 0) == 2) break;
  $$02 = $1;
  $$1 = $$03;
  while (1) {
   if (!(($$02 | 0) < ($2 | 0) & ($$1 | 0) >= ($8 | 0))) break;
   $12 = $4 + ($$02 << 2) | 0;
   if ((HEAP32[$12 >> 2] | 0) > 7) $$3 = $$1; else if ((HEAP32[$5 + ($$02 << 2) >> 2] | 0) == ($$01 | 0)) {
    $$0 = 0;
    $$2 = $$1;
    while (1) {
     $20 = +(_ec_dec_bits($7, 1) | 0) + -.5;
     $31 = $3 + ($$02 + (Math_imul($$0, HEAP32[$9 >> 2] | 0) | 0) << 2) | 0;
     HEAPF32[$31 >> 2] = +HEAPF32[$31 >> 2] + $20 * +(1 << 14 - (HEAP32[$12 >> 2] | 0) + -1 | 0) * .00006103515625;
     $34 = $$2 + -1 | 0;
     $$0 = $$0 + 1 | 0;
     if (($$0 | 0) >= ($8 | 0)) {
      $$3 = $34;
      break;
     } else $$2 = $34;
    }
   } else $$3 = $$1;
   $$02 = $$02 + 1 | 0;
   $$1 = $$3;
  }
  $$01 = $$01 + 1 | 0;
  $$03 = $$1;
 }
 return;
}

function _decide_fec($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $20 = 0, $23 = 0, $30 = 0, $32 = 0, $9 = 0, label = 0;
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($3 | 0) == 1002) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$4 >> 2] | 0;
 $10 = ($1 | 0) < 25;
 $11 = 125 - $1 | 0;
 $12 = ($1 | 0) < 6;
 $14 = $9;
 while (1) {
  $13 = $14 << 1;
  $17 = HEAP32[27984 + ($13 + -2202 << 2) >> 2] | 0;
  $20 = HEAP32[27984 + ($13 + -2201 << 2) >> 2] | 0;
  switch ($2 | 0) {
  case 1:
   {
    $$1 = $17 - $20 | 0;
    break;
   }
  case 0:
   {
    $$1 = $17 + $20 | 0;
    break;
   }
  default:
   $$1 = $17;
  }
  $23 = ((Math_imul($$1, $10 ? $11 : 100) | 0) >> 16) * 655 | 0;
  $30 = ($23 + ((((Math_imul($$1, $10 ? 125 - $1 | 0 : 100) | 0) & 65535) * 655 | 0) >>> 16) | 0) < ($5 | 0);
  if ($30 | $12) {
   $$0 = $30 & 1;
   label = 10;
   break;
  }
  if (($14 | 0) <= 1101) break;
  $32 = $14 + -1 | 0;
  HEAP32[$4 >> 2] = $32;
  $14 = $32;
 }
 if ((label | 0) == 10) return $$0 | 0;
 HEAP32[$4 >> 2] = $9;
 $$0 = 0;
 return $$0 | 0;
}

function _hp_cutoff($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $29 = 0, $31 = 0, $43 = 0, $44 = 0, $53 = 0;
 $10 = (($1 << 16 >> 16) * 2471 | 0) / (($6 | 0) / 1e3 | 0 | 0) | 0;
 $12 = (Math_imul($10, -471) | 0) + 268435456 | 0;
 $14 = ($10 * 942 | 0) + -536870912 | 0;
 $15 = $12 >> 6;
 $16 = $12 >> 22;
 $18 = $10 << 16 >> 16;
 $19 = Math_imul($10 >> 16, $18) | 0;
 $21 = Math_imul($10 & 65535, $18) | 0;
 $27 = Math_imul($10, ($10 >> 15) + 1 >> 1) | 0;
 $29 = $19 + ($21 >>> 16) + $27 << 16 >> 16;
 $31 = $15 & 65535;
 $43 = (Math_imul($16, $29) | 0) + ((Math_imul($31, $29) | 0) >> 16) + (Math_imul($15, ($19 + ($21 >> 16) + $27 + -8388608 >> 15) + 1 >> 1) | 0) | 0;
 $44 = $15 << 16 >> 16;
 $53 = (Math_imul($16, $44) | 0) + ((Math_imul($31, $44) | 0) >> 16) + (Math_imul($15, ($12 >> 21) + 1 >> 1) | 0) | 0;
 _silk_biquad_float($0, $12, $14, $12, $43, $53, $3, $2, $4, $5);
 if (($5 | 0) != 2) return;
 _silk_biquad_float($0 + 4 | 0, $12, $14, $12, $43, $53, $3 + 8 | 0, $2 + 4 | 0, $4, 2);
 return;
}

function _silk_PLC_energy($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $20 = 0, $30 = 0, $35 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 << 1 << 1) | 0) + 15 & -16) | 0;
 $$0 = $9;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) == 2) break;
  $12 = Math_imul($$01 + $7 + -2 | 0, $6) | 0;
  $13 = $5 + ($$01 << 2) | 0;
  $$02 = 0;
  while (1) {
   if (($$02 | 0) >= ($6 | 0)) break;
   $17 = HEAP32[$4 + ($$02 + $12 << 2) >> 2] | 0;
   $19 = HEAP32[$13 >> 2] | 0;
   $20 = $19 << 16 >> 16;
   $30 = (Math_imul($17 >> 16, $20) | 0) + ((Math_imul($17 & 65535, $20) | 0) >> 16) + (Math_imul($17, ($19 >> 15) + 1 >> 1) | 0) | 0;
   if (($30 | 0) > 8388607) $35 = 32767; else $35 = ($30 | 0) < -8388608 ? -32768 : $30 >> 8;
   HEAP16[$$0 + ($$02 << 1) >> 1] = $35;
   $$02 = $$02 + 1 | 0;
  }
  $$0 = $$0 + ($6 << 1) | 0;
  $$01 = $$01 + 1 | 0;
 }
 _silk_sum_sqr_shift($0, $1, $9, $6);
 _silk_sum_sqr_shift($2, $3, $9 + ($6 << 1) | 0, $6);
 STACKTOP = sp;
 return;
}

function _silk_NLSF_VQ($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$05$in = 0, $10 = 0, $23 = 0, $24 = 0, $42 = 0, $43 = 0;
 if ($5 & 1 | 0) _celt_fatal(44988, 45029, 49);
 $$0 = $2;
 $$01 = $3;
 $$04 = 0;
 while (1) {
  if (($$04 | 0) >= ($4 | 0)) break;
  $$02 = 0;
  $$03 = 0;
  $$05$in = $5;
  while (1) {
   $$05 = $$05$in + -2 | 0;
   if (($$05$in | 0) <= 1) break;
   $10 = $$05$in + -1 | 0;
   $23 = Math_imul((HEAPU16[$1 + ($10 << 1) >> 1] | 0) - (HEAPU8[$$0 + $10 >> 0] << 7) << 16 >> 16, HEAP16[$$01 + ($10 << 1) >> 1] | 0) | 0;
   $24 = $$02 >> 1;
   $42 = Math_imul((HEAPU16[$1 + ($$05 << 1) >> 1] | 0) - (HEAPU8[$$0 + $$05 >> 0] << 7) << 16 >> 16, HEAP16[$$01 + ($$05 << 1) >> 1] | 0) | 0;
   $43 = $23 >> 1;
   $$02 = $42;
   $$03 = $$03 + (($23 | 0) > ($24 | 0) ? $23 - $24 | 0 : $24 - $23 | 0) + (($42 | 0) > ($43 | 0) ? $42 - $43 | 0 : $43 - $42 | 0) | 0;
   $$05$in = $$05;
  }
  HEAP32[$0 + ($$04 << 2) >> 2] = $$03;
  $$0 = $$0 + $5 | 0;
  $$01 = $$01 + ($5 << 1) | 0;
  $$04 = $$04 + 1 | 0;
 }
 return;
}

function _silk_decode_pitch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$04 = 0, $$2 = 0, $$23 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $22 = 0, $23 = 0, $28 = 0, $6 = 0, $9 = 0, $sext = 0;
 $6 = ($4 | 0) == 4;
 if (($3 | 0) == 8) if ($6) {
  $$2 = 27072;
  $$23 = 11;
 } else if (($4 | 0) == 2) {
  $$2 = 46145;
  $$23 = 3;
 } else _celt_fatal(47957, 45871, 54); else if ($6) {
  $$2 = 27120;
  $$23 = 34;
 } else if (($4 | 0) == 2) {
  $$2 = 27040;
  $$23 = 12;
 } else _celt_fatal(47957, 45871, 63);
 $sext = $3 << 16;
 $9 = $sext >> 15;
 $11 = ($sext >> 16) * 18 | 0;
 $13 = $9 + ($0 << 16 >> 16) | 0;
 $14 = $1 << 24 >> 24;
 $15 = ($9 | 0) > ($11 | 0);
 $$04 = 0;
 while (1) {
  if (($$04 | 0) >= ($4 | 0)) break;
  $22 = $13 + (HEAP8[$$2 + ((Math_imul($$04, $$23) | 0) + $14) >> 0] | 0) | 0;
  $23 = $2 + ($$04 << 2) | 0;
  HEAP32[$23 >> 2] = $22;
  if ($15) if (($22 | 0) > ($9 | 0)) $28 = $9; else $28 = ($22 | 0) < ($11 | 0) ? $11 : $22; else if (($22 | 0) > ($11 | 0)) $28 = $11; else $28 = ($22 | 0) < ($9 | 0) ? $9 : $22;
  HEAP32[$23 >> 2] = $28;
  $$04 = $$04 + 1 | 0;
 }
 return;
}

function _silk_INVERSE32_varQ_435($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = _silk_CLZ32_434(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $6 = $0 << $4 + -1;
 $7 = $6 >> 16;
 $8 = 536870911 / ($7 | 0) | 0;
 $9 = $8 << 16;
 $10 = $9 >> 16;
 $17 = 0 - ((Math_imul($7, $10) | 0) + ((Math_imul($6 & 65535, $10) | 0) >> 16) << 3) | 0;
 $29 = $9 + ((Math_imul($17 >> 16, $10) | 0) + ((Math_imul($17 & 65528, $10) | 0) >> 16)) + (Math_imul(($8 >> 15) + 1 >> 1, $17) | 0) | 0;
 $31 = 62 - $4 - $1 | 0;
 if (($31 | 0) >= 1) return (($31 | 0) < 32 ? $29 >> $31 : 0) | 0;
 $33 = 0 - $31 | 0;
 $34 = -2147483648 >> $33;
 $35 = 2147483647 >>> $33;
 if (($34 | 0) > ($35 | 0)) {
  if (($29 | 0) > ($34 | 0)) {
   $42 = $34;
   $41 = $42 << $33;
   return $41 | 0;
  }
  $42 = ($29 | 0) < ($35 | 0) ? $35 : $29;
  $41 = $42 << $33;
  return $41 | 0;
 } else {
  if (($29 | 0) > ($35 | 0)) {
   $42 = $35;
   $41 = $42 << $33;
   return $41 | 0;
  }
  $42 = ($29 | 0) < ($34 | 0) ? $34 : $29;
  $41 = $42 << $33;
  return $41 | 0;
 }
 return 0;
}

function _silk_NLSF_decode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $40 = 0, $5 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 64 | 0;
 $5 = sp;
 _silk_NLSF_unpack(sp + 32 | 0, $3, $2, HEAP8[$1 >> 0] | 0);
 $12 = $2 + 2 | 0;
 _silk_NLSF_residual_dequant($5, $1 + 1 | 0, $3, HEAP16[$2 + 4 >> 1] | 0, HEAP16[$12 >> 1] | 0);
 $18 = HEAP16[$12 >> 1] | 0;
 $20 = Math_imul(HEAP8[$1 >> 0] | 0, $18 << 16 >> 16) | 0;
 $21 = (HEAP32[$2 + 8 >> 2] | 0) + $20 | 0;
 $24 = (HEAP32[$2 + 12 >> 2] | 0) + ($20 << 1) | 0;
 $$0 = 0;
 $26 = $18;
 while (1) {
  $25 = $26 << 16 >> 16;
  if (($$0 | 0) >= ($25 | 0)) break;
  $40 = ((HEAP16[$5 + ($$0 << 1) >> 1] << 14 | 0) / (HEAP16[$24 + ($$0 << 1) >> 1] | 0) | 0) + (HEAPU8[$21 + $$0 >> 0] << 7) | 0;
  $spec$select = ($40 | 0) > 0 ? $40 : 0;
  HEAP16[$0 + ($$0 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
  $$0 = $$0 + 1 | 0;
  $26 = HEAP16[$12 >> 1] | 0;
 }
 _silk_NLSF_stabilize($0, HEAP32[$2 + 36 >> 2] | 0, $25);
 STACKTOP = sp;
 return;
}

function _silk_quant_LTP_gains_FLP($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $9 = sp + 520 | 0;
 $10 = sp + 480 | 0;
 $11 = sp + 80 | 0;
 $12 = sp;
 $13 = $8 * 25 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($13 | 0)) break;
  HEAP32[$11 + ($$0 << 2) >> 2] = _silk_float2int(+HEAPF32[$5 + ($$0 << 2) >> 2] * 131072.0) | 0;
  $$0 = $$0 + 1 | 0;
 }
 $21 = $8 * 5 | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) >= ($21 | 0)) break;
  HEAP32[$12 + ($$1 << 2) >> 2] = _silk_float2int(+HEAPF32[$6 + ($$1 << 2) >> 2] * 131072.0) | 0;
  $$1 = $$1 + 1 | 0;
 }
 _silk_quant_LTP_gains($10, $1, $2, $3, $9, $11, $12, $7, $8);
 $$2 = 0;
 while (1) {
  if (($$2 | 0) >= ($21 | 0)) break;
  HEAPF32[$0 + ($$2 << 2) >> 2] = +(HEAP16[$10 + ($$2 << 1) >> 1] | 0) * .00006103515625;
  $$2 = $$2 + 1 | 0;
 }
 HEAPF32[$4 >> 2] = +(HEAP32[$9 >> 2] | 0) * .0078125;
 STACKTOP = sp;
 return;
}

function _silk_INVERSE32_varQ_256($0) {
 $0 = $0 | 0;
 var $16 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = _silk_CLZ32_258(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $5 = $0 << $3 + -1;
 $6 = $5 >> 16;
 $7 = 536870911 / ($6 | 0) | 0;
 $8 = $7 << 16;
 $9 = $8 >> 16;
 $16 = 0 - ((Math_imul($6, $9) | 0) + ((Math_imul($5 & 65535, $9) | 0) >> 16) << 3) | 0;
 $28 = $8 + ((Math_imul($16 >> 16, $9) | 0) + ((Math_imul($16 & 65528, $9) | 0) >> 16)) + (Math_imul(($7 >> 15) + 1 >> 1, $16) | 0) | 0;
 $29 = 62 - $3 | 0;
 if (($29 | 0) >= 47) return (($29 | 0) < 78 ? $28 >> $29 + -46 : 0) | 0;
 $31 = 46 - $29 | 0;
 $32 = -2147483648 >> $31;
 $33 = 2147483647 >>> $31;
 if (($32 | 0) > ($33 | 0)) {
  if (($28 | 0) > ($32 | 0)) {
   $40 = $32;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($33 | 0) ? $33 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 } else {
  if (($28 | 0) > ($33 | 0)) {
   $40 = $33;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($32 | 0) ? $32 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 }
 return 0;
}

function _silk_INVERSE32_varQ_244($0) {
 $0 = $0 | 0;
 var $16 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = _silk_CLZ32_246(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $5 = $0 << $3 + -1;
 $6 = $5 >> 16;
 $7 = 536870911 / ($6 | 0) | 0;
 $8 = $7 << 16;
 $9 = $8 >> 16;
 $16 = 0 - ((Math_imul($6, $9) | 0) + ((Math_imul($5 & 65535, $9) | 0) >> 16) << 3) | 0;
 $28 = $8 + ((Math_imul($16 >> 16, $9) | 0) + ((Math_imul($16 & 65528, $9) | 0) >> 16)) + (Math_imul(($7 >> 15) + 1 >> 1, $16) | 0) | 0;
 $29 = 62 - $3 | 0;
 if (($29 | 0) >= 48) return (($29 | 0) < 79 ? $28 >> $29 + -47 : 0) | 0;
 $31 = 47 - $29 | 0;
 $32 = -2147483648 >> $31;
 $33 = 2147483647 >>> $31;
 if (($32 | 0) > ($33 | 0)) {
  if (($28 | 0) > ($32 | 0)) {
   $40 = $32;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($33 | 0) ? $33 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 } else {
  if (($28 | 0) > ($33 | 0)) {
   $40 = $33;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($32 | 0) ? $32 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 }
 return 0;
}

function _silk_INVERSE32_varQ_235($0) {
 $0 = $0 | 0;
 var $16 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = _silk_CLZ32_237(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $5 = $0 << $3 + -1;
 $6 = $5 >> 16;
 $7 = 536870911 / ($6 | 0) | 0;
 $8 = $7 << 16;
 $9 = $8 >> 16;
 $16 = 0 - ((Math_imul($6, $9) | 0) + ((Math_imul($5 & 65535, $9) | 0) >> 16) << 3) | 0;
 $28 = $8 + ((Math_imul($16 >> 16, $9) | 0) + ((Math_imul($16 & 65528, $9) | 0) >> 16)) + (Math_imul(($7 >> 15) + 1 >> 1, $16) | 0) | 0;
 $29 = 62 - $3 | 0;
 if (($29 | 0) >= 48) return (($29 | 0) < 79 ? $28 >> $29 + -47 : 0) | 0;
 $31 = 47 - $29 | 0;
 $32 = -2147483648 >> $31;
 $33 = 2147483647 >>> $31;
 if (($32 | 0) > ($33 | 0)) {
  if (($28 | 0) > ($32 | 0)) {
   $40 = $32;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($33 | 0) ? $33 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 } else {
  if (($28 | 0) > ($33 | 0)) {
   $40 = $33;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($32 | 0) ? $32 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 }
 return 0;
}

function _silk_INVERSE32_varQ($0) {
 $0 = $0 | 0;
 var $16 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = _silk_CLZ32_183(($0 | 0) > 0 ? $0 : 0 - $0 | 0) | 0;
 $5 = $0 << $3 + -1;
 $6 = $5 >> 16;
 $7 = 536870911 / ($6 | 0) | 0;
 $8 = $7 << 16;
 $9 = $8 >> 16;
 $16 = 0 - ((Math_imul($6, $9) | 0) + ((Math_imul($5 & 65535, $9) | 0) >> 16) << 3) | 0;
 $28 = $8 + ((Math_imul($16 >> 16, $9) | 0) + ((Math_imul($16 & 65528, $9) | 0) >> 16)) + (Math_imul(($7 >> 15) + 1 >> 1, $16) | 0) | 0;
 $29 = 62 - $3 | 0;
 if (($29 | 0) >= 48) return (($29 | 0) < 79 ? $28 >> $29 + -47 : 0) | 0;
 $31 = 47 - $29 | 0;
 $32 = -2147483648 >> $31;
 $33 = 2147483647 >>> $31;
 if (($32 | 0) > ($33 | 0)) {
  if (($28 | 0) > ($32 | 0)) {
   $40 = $32;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($33 | 0) ? $33 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 } else {
  if (($28 | 0) > ($33 | 0)) {
   $40 = $33;
   $39 = $40 << $31;
   return $39 | 0;
  }
  $40 = ($28 | 0) < ($32 | 0) ? $32 : $28;
  $39 = $40 << $31;
  return $39 | 0;
 }
 return 0;
}

function _resampler_basic_zero($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $10 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $31 = 0, $6 = 0, label = 0;
 $6 = $0 + 60 | 0;
 $10 = $0 + 64 | 0;
 $15 = HEAP32[$0 + 92 >> 2] | 0;
 $17 = HEAP32[$0 + 36 >> 2] | 0;
 $19 = HEAP32[$0 + 40 >> 2] | 0;
 $21 = HEAP32[$0 + 12 >> 2] | 0;
 $$0 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$01 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 $$03 = 0;
 while (1) {
  if (($$01 | 0) >= (HEAP32[$3 >> 2] | 0)) {
   label = 5;
   break;
  }
  if (($$03 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 5;
   break;
  }
  HEAPF32[$4 + ((Math_imul($15, $$03) | 0) << 2) >> 2] = 0.0;
  $30 = $$0 + $19 | 0;
  $31 = $30 >>> 0 < $21 >>> 0;
  $$0 = $30 - ($31 ? 0 : $21) | 0;
  $$01 = $$01 + $17 + (($31 ^ 1) & 1) | 0;
  $$03 = $$03 + 1 | 0;
 }
 if ((label | 0) == 5) {
  HEAP32[(HEAP32[$6 >> 2] | 0) + ($1 << 2) >> 2] = $$01;
  HEAP32[(HEAP32[$10 >> 2] | 0) + ($1 << 2) >> 2] = $$0;
  return $$03 | 0;
 }
 return 0;
}

function _compute_dense($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0;
 $7 = $0 + 4 | 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($6 | 0)) break;
  $$0 = +(HEAP8[(HEAP32[$0 >> 2] | 0) + $$02 >> 0] | 0);
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($4 | 0)) break;
   $$0 = $$0 + +HEAPF32[$2 + ($$01 << 2) >> 2] * +(HEAP8[(HEAP32[$7 >> 2] | 0) + ((Math_imul($$01, $6) | 0) + $$02) >> 0] | 0);
   $$01 = $$01 + 1 | 0;
  }
  HEAPF32[$1 + ($$02 << 2) >> 2] = $$0 * .0078125;
  $$02 = $$02 + 1 | 0;
 }
 if (!(HEAP32[$0 + 16 >> 2] | 0)) {
  $$2 = 0;
  while (1) {
   if (($$2 | 0) >= ($6 | 0)) break;
   $37 = $1 + ($$2 << 2) | 0;
   HEAPF32[$37 >> 2] = +_tansig_approx(+HEAPF32[$37 >> 2]);
   $$2 = $$2 + 1 | 0;
  }
  return;
 } else {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($6 | 0)) break;
   $32 = $1 + ($$1 << 2) | 0;
   HEAPF32[$32 >> 2] = +_sigmoid_approx(+HEAPF32[$32 >> 2]);
   $$1 = $$1 + 1 | 0;
  }
  return;
 }
}

function _downmix_float($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $23 = 0.0, $24 = 0, $36 = 0.0, $37 = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  HEAPF32[$1 + ($$01 << 2) >> 2] = +HEAPF32[$0 + ((Math_imul($$01 + $3 | 0, $6) | 0) + $4 << 2) >> 2] * 32768.0;
  $$01 = $$01 + 1 | 0;
 }
 if (($5 | 0) > -1) {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= ($2 | 0)) break;
   $23 = +HEAPF32[$0 + ((Math_imul($$1 + $3 | 0, $6) | 0) + $5 << 2) >> 2] * 32768.0;
   $24 = $1 + ($$1 << 2) | 0;
   HEAPF32[$24 >> 2] = +HEAPF32[$24 >> 2] + $23;
   $$1 = $$1 + 1 | 0;
  }
  return;
 }
 if (($5 | 0) != -2) return;
 $$0 = 1;
 while (1) {
  if (($$0 | 0) >= ($6 | 0)) break;
  $$2 = 0;
  while (1) {
   if (($$2 | 0) >= ($2 | 0)) break;
   $36 = +HEAPF32[$0 + ((Math_imul($$2 + $3 | 0, $6) | 0) + $$0 << 2) >> 2] * 32768.0;
   $37 = $1 + ($$2 << 2) | 0;
   HEAPF32[$37 >> 2] = +HEAPF32[$37 >> 2] + $36;
   $$2 = $$2 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _vfprintf($0) {
 $0 = $0 | 0;
 var $1 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 80 | 0;
 $4 = sp;
 dest = $2;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 if ((_printf_core(0, $1, $3, $2) | 0) < 0) {} else {
  $8 = HEAP32[10005] | 0;
  $9 = $8 & 32;
  if ((HEAP8[40094] | 0) < 1) HEAP32[10005] = $8 & -33;
  if (!(HEAP32[10017] | 0)) {
   $15 = HEAP32[10016] | 0;
   HEAP32[10016] = $4;
   HEAP32[10012] = $4;
   HEAP32[10010] = $4;
   HEAP32[10017] = 80;
   HEAP32[10009] = $4 + 80;
   _printf_core(40020, $1, $3, $2) | 0;
   if ($15 | 0) {
    FUNCTION_TABLE_iiii[HEAP32[40056 >> 2] & 3](40020, 0, 0) | 0;
    HEAP32[10016] = $15;
    HEAP32[10017] = 0;
    HEAP32[10009] = 0;
    HEAP32[10012] = 0;
    HEAP32[10010] = 0;
   }
  } else _printf_core(40020, $1, $3, $2) | 0;
  HEAP32[10005] = HEAP32[10005] | $9;
 }
 STACKTOP = sp;
 return;
}

function _silk_gains_dequant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $31 = 0, $storemerge1 = 0, $storemerge1$in = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  do if (!($$0 | $3)) $storemerge1$in = _silk_max_int(HEAP8[$1 >> 0] | 0, (HEAP8[$2 >> 0] | 0) + -16 | 0) | 0; else {
   $17 = (HEAP8[$1 + $$0 >> 0] | 0) + -4 | 0;
   $18 = HEAP8[$2 >> 0] | 0;
   $19 = $18 << 24 >> 24;
   $20 = $19 + 8 | 0;
   if (($17 | 0) > ($20 | 0)) {
    $storemerge1$in = ($17 << 1) - $20 + $19 | 0;
    break;
   } else {
    $storemerge1$in = $17 + ($18 & 255) | 0;
    break;
   }
  } while (0);
  $storemerge1 = $storemerge1$in & 255;
  HEAP8[$2 >> 0] = $storemerge1;
  if (($storemerge1$in << 24 | 0) > 1056964608) $31 = 63; else if ($storemerge1 << 24 >> 24 < 0) $31 = 0; else $31 = $storemerge1$in << 24 >> 24;
  HEAP8[$2 >> 0] = $31;
  HEAP32[$0 + ($$0 << 2) >> 2] = _silk_log2lin(_silk_min_32(($31 * 29 | 0) + ($31 * 7281 >> 16) + 2090 | 0) | 0) | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _opus_repacketizer_cat_impl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $15 = 0, $24 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($2 | 0) < 1) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
  HEAP32[$0 + 296 >> 2] = _opus_packet_get_samples_per_frame(HEAP8[$1 >> 0] | 0, 8e3) | 0;
 } else if (((HEAP8[$0 >> 0] ^ HEAP8[$1 >> 0]) & 255) > 3) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = _opus_packet_get_nb_frames($1, $2) | 0;
 if (($15 | 0) < 1) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((Math_imul($15 + $6 | 0, HEAP32[$0 + 296 >> 2] | 0) | 0) > 960) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $24 = _opus_packet_parse_impl($1, $2, 0, $3, $0 + 8 + ($6 << 2) | 0, $0 + 200 + ($6 << 1) | 0, 0, 0) | 0;
 if (($24 | 0) < 1) {
  $$0 = $24;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $15;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _stereo_merge($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $18 = 0.0, $20 = 0.0, $22 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $4 = 0, $5 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAPF32[$4 >> 2] = 0.0;
 HEAPF32[$5 >> 2] = 0.0;
 _dual_inner_prod_c($1, $0, $1, $3, $4, $5);
 $7 = +HEAPF32[$4 >> 2] * $2;
 HEAPF32[$4 >> 2] = $7;
 $10 = $2 * $2 + +HEAPF32[$5 >> 2];
 $11 = $7 * 2.0;
 $12 = $10 - $11;
 $13 = $10 + $11;
 if ($13 < 6.000000284984708e-04 | $12 < 6.000000284984708e-04) {
  _memcpy($1 | 0, $0 | 0, $3 << 2 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $18 = 1.0 / +Math_sqrt(+$12);
 $20 = 1.0 / +Math_sqrt(+$13);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $22 = $0 + ($$0 << 2) | 0;
  $24 = +HEAPF32[$22 >> 2] * $2;
  $25 = $1 + ($$0 << 2) | 0;
  $26 = +HEAPF32[$25 >> 2];
  HEAPF32[$22 >> 2] = $18 * ($24 - $26);
  HEAPF32[$25 >> 2] = $20 * ($24 + $26);
  $$0 = $$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_QueryEncoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $40 = 0, $53 = 0, $54 = 0;
 HEAP32[$1 >> 2] = HEAP32[$0 + 20192 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 20196 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 4556 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 4564 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 4568 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 4572 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 4612 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 4608 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 4616 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 4624 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 6088 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 6076 >> 2];
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 4676 >> 2];
 $40 = $0 + 4576 | 0;
 HEAP32[$1 + 72 >> 2] = (HEAP32[$40 >> 2] << 16 >> 16) * 1e3;
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 4536 >> 2];
 if ((HEAP32[$40 >> 2] | 0) != 16) {
  $54 = 0;
  $53 = $1 + 80 | 0;
  HEAP32[$53 >> 2] = $54;
  return 0;
 }
 $54 = (HEAP32[$0 + 28 >> 2] | 0) == 0 & 1;
 $53 = $1 + 80 | 0;
 HEAP32[$53 >> 2] = $54;
 return 0;
}

function _celt_pitch_xcorr_c($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 if (($4 | 0) <= 0) _celt_fatal(42195, 42225, 251);
 $7 = $4 + -3 | 0;
 $8 = $5 + 4 | 0;
 $9 = $5 + 8 | 0;
 $10 = $5 + 12 | 0;
 $11 = $4 & -4;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($7 | 0)) break;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  _xcorr_kernel_c($0, $1 + ($$0 << 2) | 0, $5, $3);
  HEAP32[$2 + ($$0 << 2) >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + (($$0 | 1) << 2) >> 2] = HEAP32[$8 >> 2];
  HEAP32[$2 + (($$0 | 2) << 2) >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + (($$0 | 3) << 2) >> 2] = HEAP32[$10 >> 2];
  $$0 = $$0 + 4 | 0;
 }
 $$1 = $11;
 while (1) {
  if (($$1 | 0) >= ($4 | 0)) break;
  HEAPF32[$2 + ($$1 << 2) >> 2] = +_celt_inner_prod_c_111($0, $1 + ($$1 << 2) | 0, $3);
  $$1 = $$1 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter10_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $1 + 4 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1 + 12 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 20 | 0;
 $9 = $1 + 24 | 0;
 $10 = $1 + 28 | 0;
 $11 = $1 + 32 | 0;
 $12 = $1 + 36 | 0;
 $$0 = 10;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $15 = $2 + ($$0 + -1 << 2) | 0;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$2 + ($$0 << 2) >> 2] - (+HEAPF32[$15 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$15 + -4 >> 2] * +HEAPF32[$4 >> 2] + +HEAPF32[$15 + -8 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$15 + -12 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$15 + -16 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$15 + -20 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$15 + -24 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$15 + -28 >> 2] * +HEAPF32[$10 >> 2] + +HEAPF32[$15 + -32 >> 2] * +HEAPF32[$11 >> 2] + +HEAPF32[$15 + -36 >> 2] * +HEAPF32[$12 >> 2]);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _normalise_bands($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0.0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $8 = 0;
 $8 = HEAP32[$0 + 32 >> 2] | 0;
 $11 = Math_imul(HEAP32[$0 + 44 >> 2] | 0, $6) | 0;
 $12 = $0 + 8 | 0;
 $$01 = 0;
 do {
  $13 = Math_imul($$01, $11) | 0;
  $$02 = 0;
  while (1) {
   if (($$02 | 0) >= ($4 | 0)) break;
   $21 = 1.0 / (+HEAPF32[$3 + ($$02 + (Math_imul($$01, HEAP32[$12 >> 2] | 0) | 0) << 2) >> 2] + 1.0000000272452012e-27);
   $25 = Math_imul(HEAP16[$8 + ($$02 << 1) >> 1] | 0, $6) | 0;
   $26 = $$02 + 1 | 0;
   $30 = Math_imul(HEAP16[$8 + ($26 << 1) >> 1] | 0, $6) | 0;
   $$0 = $25;
   while (1) {
    if (($$0 | 0) >= ($30 | 0)) break;
    $32 = $$0 + $13 | 0;
    HEAPF32[$2 + ($32 << 2) >> 2] = +HEAPF32[$1 + ($32 << 2) >> 2] * $21;
    $$0 = $$0 + 1 | 0;
   }
   $$02 = $26;
  }
  $$01 = $$01 + 1 | 0;
 } while (($$01 | 0) < ($5 | 0));
 return;
}

function _stereo_analysis($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $$05 = 0, $$1 = 0.0, $$13 = 0.0, $10 = 0, $14 = 0, $17 = 0.0, $20 = 0.0, $39 = 0, $4 = 0, $5 = 0;
 $4 = $0 + 32 | 0;
 $$01 = 1.0000000036274937e-15;
 $$02 = 1.0000000036274937e-15;
 $$05 = 0;
 while (1) {
  if (($$05 | 0) == 13) break;
  $5 = HEAP32[$4 >> 2] | 0;
  $10 = $$05 + 1 | 0;
  $14 = HEAP16[$5 + ($10 << 1) >> 1] << $2;
  $$0 = HEAP16[$5 + ($$05 << 1) >> 1] << $2;
  $$1 = $$01;
  $$13 = $$02;
  while (1) {
   if (($$0 | 0) >= ($14 | 0)) break;
   $17 = +HEAPF32[$1 + ($$0 << 2) >> 2];
   $20 = +HEAPF32[$1 + ($$0 + $3 << 2) >> 2];
   $$0 = $$0 + 1 | 0;
   $$1 = $$1 + (+Math_abs(+($17 + $20)) + +Math_abs(+($17 - $20)));
   $$13 = $$13 + (+Math_abs(+$17) + +Math_abs(+$20));
  }
  $$01 = $$1;
  $$02 = $$13;
  $$05 = $10;
 }
 $39 = HEAP16[(HEAP32[$4 >> 2] | 0) + 26 >> 1] << $2 + 1;
 return $$01 * .7071070075035095 * +($39 + (($2 | 0) < 2 ? 5 : 13) | 0) > $$02 * +($39 | 0) | 0;
}

function _silk_biquad_float($0, $$val, $$1$val, $$2$val, $$val1, $$1$val2, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $$2$val = $$2$val | 0;
 $$val1 = $$val1 | 0;
 $$1$val2 = $$1$val2 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0.0, $12 = 0.0, $14 = 0.0, $15 = 0, $17 = 0, $19 = 0.0, $22 = 0.0, $6 = 0.0, $8 = 0.0;
 $6 = +($$val1 | 0) * 3.725290298461914e-09;
 $8 = +($$1$val2 | 0) * 3.725290298461914e-09;
 $10 = +($$val | 0) * 3.725290298461914e-09;
 $12 = +($$1$val | 0) * 3.725290298461914e-09;
 $14 = +($$2$val | 0) * 3.725290298461914e-09;
 $15 = $1 + 4 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $17 = Math_imul($$0, $4) | 0;
  $19 = +HEAPF32[$0 + ($17 << 2) >> 2];
  $22 = +HEAPF32[$1 >> 2] + $10 * $19;
  HEAPF32[$1 >> 2] = +HEAPF32[$15 >> 2] - $22 * $6 + $12 * $19;
  HEAPF32[$15 >> 2] = $14 * $19 - $22 * $8 + 1.0000000031710769e-30;
  HEAPF32[$2 + ($17 << 2) >> 2] = $22;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _ec_enc_bits($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $24 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $3 = $0 + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$2) _celt_fatal(41822, 41808, 198);
 $8 = $6 + $2 | 0;
 if ($8 >>> 0 > 32) {
  $10 = $0 + 44 | 0;
  $11 = ~$6;
  $15 = $6 + (($11 | 0) > -16 ? $11 : -16) + 8 & -8;
  $$0 = $6;
  $$01 = $4;
  while (1) {
   $17 = _ec_write_byte_at_end($0, $$01 & 255) | 0;
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | $17;
   $$01 = $$01 >>> 8;
   if (($$0 | 0) <= 15) break; else $$0 = $$0 + -8 | 0;
  }
  $24 = $6 + -8 - $15 | 0;
  $$1 = $24;
  $$12 = $$01;
  $$pre$phiZ2D = $24 + $2 | 0;
 } else {
  $$1 = $6;
  $$12 = $4;
  $$pre$phiZ2D = $8;
 }
 HEAP32[$3 >> 2] = $$12 | $1 << $$1;
 HEAP32[$5 >> 2] = $$pre$phiZ2D;
 $27 = $0 + 20 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + $2;
 return;
}

function _silk_decode_signs($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $12 = 0, $14 = 0, $17 = 0, $24 = 0, $29 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP8[$6 + 1 >> 0] = 0;
 $12 = 26224 + ((($3 << 1) + $4 << 16 >> 16) * 7 | 0) | 0;
 $14 = $2 + 8 >> 4;
 $$0 = $1;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($14 | 0)) break;
  $17 = HEAP32[$5 + ($$02 << 2) >> 2] | 0;
  L4 : do if (($17 | 0) > 0) {
   HEAP8[$6 >> 0] = HEAP8[$12 + (($17 & 30) >>> 0 < 6 ? $17 & 31 : 6) >> 0] | 0;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) == 16) break L4;
    $24 = $$0 + ($$01 << 1) | 0;
    if ((HEAP16[$24 >> 1] | 0) > 0) {
     $29 = ((_ec_dec_icdf($0, $6, 8) | 0) << 1) + -1 | 0;
     HEAP16[$24 >> 1] = Math_imul($29, HEAP16[$24 >> 1] | 0) | 0;
    }
    $$01 = $$01 + 1 | 0;
   }
  } while (0);
  $$0 = $$0 + 32 | 0;
  $$02 = $$02 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _median_of_5($0) {
 $0 = $0 | 0;
 var $$ = 0.0, $$0 = 0.0, $$01 = 0.0, $$05 = 0.0, $$1 = 0.0, $$11 = 0.0, $$14 = 0.0, $$16 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $5 = 0.0, $6 = 0, $8 = 0.0;
 $2 = +HEAPF32[$0 + 8 >> 2];
 $3 = +HEAPF32[$0 >> 2];
 $5 = +HEAPF32[$0 + 4 >> 2];
 $6 = $3 > $5;
 $$ = $6 ? $3 : $5;
 $$11 = $6 ? $5 : $3;
 $8 = +HEAPF32[$0 + 12 >> 2];
 $10 = +HEAPF32[$0 + 16 >> 2];
 $11 = $8 > $10;
 $$05 = $11 ? $10 : $8;
 $$01 = $11 ? $8 : $10;
 $12 = $$11 > $$05;
 $$16 = $12 ? $$11 : $$05;
 $$14 = $12 ? $$01 : $$;
 $$1 = $12 ? $$ : $$01;
 if ($2 > $$14) if ($$14 < $$16) {
  if ($2 < $$16) {
   $$0 = $2;
   return +$$0;
  }
  $$0 = $$16;
  return +$$0;
 } else {
  if ($$1 < $$14) {
   $$0 = $$1;
   return +$$0;
  }
  $$0 = $$14;
  return +$$0;
 } else if ($2 < $$16) {
  if ($$14 < $$16) {
   $$0 = $$14;
   return +$$0;
  }
  $$0 = $$16;
  return +$$0;
 } else {
  if ($2 < $$1) {
   $$0 = $2;
   return +$$0;
  }
  $$0 = $$1;
  return +$$0;
 }
 return +(0.0);
}

function _silk_apply_sine_window_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$03 = 0, $$1 = 0.0, $$12 = 0.0, $10 = 0.0, $11 = 0, $20 = 0, $26 = 0.0, $27 = 0, $34 = 0, $8 = 0.0;
 if (($2 + -1 | 0) >>> 0 >= 2) _celt_fatal(46481, 46530, 48);
 if ($3 & 3 | 0) _celt_fatal(46565, 46530, 51);
 $8 = 3.1415927410125732 / +($3 + 1 | 0);
 $10 = 2.0 - $8 * $8;
 $11 = ($2 | 0) < 2;
 $$03 = 0;
 $$1 = $11 ? $8 : $10 * .5;
 $$12 = $11 ? 0.0 : 1.0;
 while (1) {
  if (($$03 | 0) >= ($3 | 0)) break;
  HEAPF32[$0 + ($$03 << 2) >> 2] = +HEAPF32[$1 + ($$03 << 2) >> 2] * .5 * ($$12 + $$1);
  $20 = $$03 | 1;
  HEAPF32[$0 + ($20 << 2) >> 2] = +HEAPF32[$1 + ($20 << 2) >> 2] * $$1;
  $26 = $10 * $$1 - $$12;
  $27 = $$03 | 2;
  HEAPF32[$0 + ($27 << 2) >> 2] = +HEAPF32[$1 + ($27 << 2) >> 2] * .5 * ($$1 + $26);
  $34 = $$03 | 3;
  HEAPF32[$0 + ($34 << 2) >> 2] = +HEAPF32[$1 + ($34 << 2) >> 2] * $26;
  $$03 = $$03 + 4 | 0;
  $$1 = $10 * $26 - $$1;
  $$12 = $26;
 }
 return;
}

function _silk_residual_energy_FLP($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0.0, $18 = 0.0, $21 = 0, $30 = 0.0, $38 = 0.0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768 | 0;
 $7 = sp;
 $8 = $7 + ($6 << 2) | 0;
 $9 = $6 + $4 | 0;
 $10 = $9 << 1;
 _silk_LPC_analysis_filter_FLP($7, $2, $1, $10, $6);
 $11 = +HEAPF32[$3 >> 2];
 HEAPF32[$0 >> 2] = +_silk_energy_FLP($8, $4) * ($11 * $11);
 $18 = +HEAPF32[$3 + 4 >> 2];
 $21 = $8 + ($9 << 2) | 0;
 HEAPF32[$0 + 4 >> 2] = +_silk_energy_FLP($21, $4) * ($18 * $18);
 if (($5 | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 _silk_LPC_analysis_filter_FLP($7, $2 + 64 | 0, $1 + ($10 << 2) | 0, $10, $6);
 $30 = +HEAPF32[$3 + 8 >> 2];
 HEAPF32[$0 + 8 >> 2] = +_silk_energy_FLP($8, $4) * ($30 * $30);
 $38 = +HEAPF32[$3 + 12 >> 2];
 HEAPF32[$0 + 12 >> 2] = +_silk_energy_FLP($21, $4) * ($38 * $38);
 STACKTOP = sp;
 return;
}

function _wcrtomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(HEAP32[12754] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[12760] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[12760] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _resampling_factor($0) {
 $0 = $0 | 0;
 var $$0 = 0, label = 0;
 L1 : do if (($0 | 0) < 16e3) if (($0 | 0) < 12e3) {
  switch ($0 | 0) {
  case 8e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 6;
  label = 7;
  break;
 } else {
  switch ($0 | 0) {
  case 12e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 4;
  label = 7;
  break;
 } else {
  if (($0 | 0) < 24e3) {
   switch ($0 | 0) {
   case 16e3:
    break;
   default:
    {
     label = 6;
     break L1;
    }
   }
   $$0 = 3;
   label = 7;
   break;
  }
  if (($0 | 0) >= 48e3) switch ($0 | 0) {
  case 48e3:
   {
    $$0 = 1;
    label = 7;
    break L1;
    break;
   }
  default:
   {
    label = 6;
    break L1;
   }
  }
  switch ($0 | 0) {
  case 24e3:
   break;
  default:
   {
    label = 6;
    break L1;
   }
  }
  $$0 = 2;
  label = 7;
 } while (0);
 if ((label | 0) == 6) _celt_fatal(48340, 40453, 84); else if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function _silk_resampler_down2($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $37 = 0, $4 = 0, $45 = 0, $5 = 0, $7 = 0;
 $4 = $3 >> 1;
 $5 = $0 + 4 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $7 = $$0 << 1;
  $11 = HEAP16[$2 + ($7 << 1) >> 1] << 10;
  $13 = $11 - (HEAP32[$0 >> 2] | 0) | 0;
  $19 = (Math_imul($13 >> 16, -25727) | 0) + ((Math_imul($13 & 65535, -25727) | 0) >> 16) | 0;
  HEAP32[$0 >> 2] = $11 + ($13 + $19);
  $27 = HEAP16[$2 + (($7 | 1) << 1) >> 1] << 10;
  $28 = HEAP32[$5 >> 2] | 0;
  $29 = $27 - $28 | 0;
  $35 = (($29 >> 16) * 9872 | 0) + ((($29 & 65535) * 9872 | 0) >>> 16) | 0;
  $37 = $11 + $19 + $28 + $35 | 0;
  HEAP32[$5 >> 2] = $27 + $35;
  if (($37 | 0) > 67107839) $45 = 32767; else if (($37 | 0) < -67109888) $45 = -32768; else $45 = ($37 >> 10) + 1 >> 1;
  HEAP16[$1 + ($$0 << 1) >> 1] = $45;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_resampler_down2_hp($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0, $10 = 0.0, $11 = 0.0, $13 = 0.0, $14 = 0.0, $18 = 0.0, $19 = 0.0, $21 = 0.0, $26 = 0.0, $28 = 0.0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $4 = ($3 | 0) / 2 | 0;
 $5 = $0 + 4 | 0;
 $6 = $0 + 8 | 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($4 | 0)) break;
  $8 = $$01 << 1;
  $10 = +HEAPF32[$2 + ($8 << 2) >> 2];
  $11 = +HEAPF32[$0 >> 2];
  $13 = ($10 - $11) * .6074370741844177;
  $14 = $11 + $13;
  HEAPF32[$0 >> 2] = $10 + $13;
  $18 = +HEAPF32[$2 + (($8 | 1) << 2) >> 2];
  $19 = +HEAPF32[$5 >> 2];
  $21 = ($18 - $19) * .15062999725341797;
  HEAPF32[$5 >> 2] = $18 + $21;
  $26 = +HEAPF32[$6 >> 2];
  $28 = (-$18 - $26) * .15062999725341797;
  $30 = $14 + $26 + $28;
  HEAPF32[$6 >> 2] = $28 - $18;
  HEAPF32[$1 + ($$01 << 2) >> 2] = ($14 + $19 + $21) * .5;
  $$0 = $$0 + $30 * $30;
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _opus_custom_encoder_init_arch($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ($2 >>> 0 > 2) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _memset($0 | 0, 0, _opus_custom_encoder_get_size(HEAP32[$1 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0, $2) | 0) | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = 1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 48 >> 2] = 1;
 HEAP32[$0 + 72 >> 2] = $3;
 HEAP32[$0 + 52 >> 2] = 1;
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 40 >> 2] = -1;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 5;
 HEAP32[$0 + 60 >> 2] = 24;
 _opus_custom_encoder_ctl($0, 4028, sp) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _icwrs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $16 = 0, $18 = 0, $23 = 0, $3 = 0, $5 = 0, $8 = 0, $$01$looptemp = 0;
 if (($0 | 0) <= 1) _celt_fatal(41723, 41711, 444);
 $3 = $0 + -1 | 0;
 $5 = HEAP32[$1 + ($3 << 2) >> 2] | 0;
 $$0 = ($5 | 0) > -1 ? $5 : 0 - $5 | 0;
 $$01 = $3;
 $$02 = $5 >>> 31;
 while (1) {
  $$01$looptemp = $$01;
  $$01 = $$01 + -1 | 0;
  $8 = $0 - $$01 | 0;
  $16 = $$02 + (HEAP32[(HEAP32[592 + ((($8 | 0) < ($$0 | 0) ? $8 : $$0) << 2) >> 2] | 0) + ((($8 | 0) > ($$0 | 0) ? $8 : $$0) << 2) >> 2] | 0) | 0;
  $18 = HEAP32[$1 + ($$01 << 2) >> 2] | 0;
  $$0 = $$0 + (($18 | 0) > -1 ? $18 : 0 - $18 | 0) | 0;
  if (($18 | 0) < 0) {
   $23 = $$0 + 1 | 0;
   $$1 = $16 + (HEAP32[(HEAP32[592 + ((($8 | 0) > ($$0 | 0) ? $23 : $8) << 2) >> 2] | 0) + ((($8 | 0) > ($23 | 0) ? $8 : $23) << 2) >> 2] | 0) | 0;
  } else $$1 = $16;
  if (($$01$looptemp | 0) <= 1) break; else $$02 = $$1;
 }
 return $$1 | 0;
}

function _speex_resampler_process_interleaved_float($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $7 = $0 + 88 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $0 + 92 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $0 + 20 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$9 >> 2] = $12;
 HEAP32[$7 >> 2] = $12;
 $13 = ($1 | 0) == 0;
 $$0 = 0;
 $15 = $12;
 while (1) {
  if ($$0 >>> 0 >= $15 >>> 0) break;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$2 >> 2] = $6;
  if ($13) _speex_resampler_process_float($0, $$0, 0, $2, $3 + ($$0 << 2) | 0, $4); else _speex_resampler_process_float($0, $$0, $1 + ($$0 << 2) | 0, $2, $3 + ($$0 << 2) | 0, $4);
  $$0 = $$0 + 1 | 0;
  $15 = HEAP32[$11 >> 2] | 0;
 }
 HEAP32[$7 >> 2] = $8;
 HEAP32[$9 >> 2] = $10;
 return (HEAP32[$0 + 84 >> 2] | 0) == 5 | 0;
}

function _silk_A2NLSF_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $25 = 0, $26 = 0, $31 = 0, $9 = 0;
 HEAP32[$1 + ($3 << 2) >> 2] = 65536;
 HEAP32[$2 + ($3 << 2) >> 2] = 65536;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $9 = $0 + ($3 - $$0 + -1 << 2) | 0;
  $13 = $0 + ($$0 + $3 << 2) | 0;
  HEAP32[$1 + ($$0 << 2) >> 2] = 0 - (HEAP32[$9 >> 2] | 0) - (HEAP32[$13 >> 2] | 0);
  HEAP32[$2 + ($$0 << 2) >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
  $$0 = $$0 + 1 | 0;
 }
 $$1 = $3;
 while (1) {
  if (($$1 | 0) <= 0) break;
  $25 = $$1 + -1 | 0;
  $26 = $1 + ($25 << 2) | 0;
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) - (HEAP32[$1 + ($$1 << 2) >> 2] | 0);
  $31 = $2 + ($25 << 2) | 0;
  HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + (HEAP32[$2 + ($$1 << 2) >> 2] | 0);
  $$1 = $25;
 }
 _silk_A2NLSF_trans_poly($1, $3);
 _silk_A2NLSF_trans_poly($2, $3);
 return;
}

function _speex_resampler_process_native($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $6 = 0;
 $6 = HEAP32[$0 + 24 >> 2] | 0;
 $12 = (HEAP32[$0 + 72 >> 2] | 0) + ((Math_imul(HEAP32[$0 + 28 >> 2] | 0, $1) | 0) << 2) | 0;
 HEAP32[$0 + 56 >> 2] = 1;
 $16 = FUNCTION_TABLE_iiiiiii[HEAP32[$0 + 84 >> 2] & 7]($0, $1, $12, $2, $3, $4) | 0;
 $17 = $0 + 60 | 0;
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($1 << 2) >> 2] | 0;
 if (($20 | 0) < (HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = $20;
 HEAP32[$4 >> 2] = $16;
 $25 = (HEAP32[$17 >> 2] | 0) + ($1 << 2) | 0;
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0);
 $28 = HEAP32[$2 >> 2] | 0;
 $29 = $6 + -1 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($29 | 0)) break;
  HEAP32[$12 + ($$0 << 2) >> 2] = HEAP32[$12 + ($$0 + $28 << 2) >> 2];
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_NLSF_unpack($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $37 = 0, $6 = 0, $7 = 0;
 $6 = $2 + 2 | 0;
 $7 = HEAP16[$6 >> 1] | 0;
 $12 = $2 + 20 | 0;
 $$0 = (HEAP32[$2 + 24 >> 2] | 0) + ((Math_imul($7 << 16 >> 16, $3) | 0) / 2 | 0) | 0;
 $$01 = 0;
 $14 = $7;
 while (1) {
  if (($$01 | 0) >= ($14 << 16 >> 16 | 0)) break;
  $16 = HEAP8[$$0 >> 0] | 0;
  $17 = $16 & 255;
  HEAP16[$0 + ($$01 << 1) >> 1] = ($17 >>> 1 & 7) * 9;
  HEAP8[$1 + $$01 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($$01 + ((HEAP16[$6 >> 1] | 0) + -1 & 0 - ($16 & 1))) >> 0] | 0;
  $37 = $$01 | 1;
  HEAP16[$0 + ($37 << 1) >> 1] = (($16 & 255) >>> 5) * 9 & 255;
  HEAP8[$1 + $37 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($$01 + ((HEAP16[$6 >> 1] | 0) + -1 & 0 - ($17 >>> 4 & 1)) + 1) >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 2 | 0;
  $14 = HEAP16[$6 >> 1] | 0;
 }
 return;
}

function _run_analysis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $spec$select = 0;
 $12 = $3 & -2;
 if (!$2) {
  HEAP32[$11 >> 2] = 0;
  _tonality_get_info($0, $11, $4);
  return;
 }
 $15 = ($8 * 95 | 0) / 50 | 0;
 $spec$select = ($15 | 0) < ($12 | 0) ? $15 : $12;
 $17 = $0 + 7440 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $20 = ($8 | 0) / 50 | 0;
 $$0 = $spec$select - $18 | 0;
 $$01 = $18;
 while (1) {
  if (($$0 | 0) <= 0) break;
  _tonality_analysis($0, $1, $2, ($$0 | 0) > ($20 | 0) ? $20 : $$0, $$01, $5, $6, $7, $9, $10);
  $$0 = $$0 - $20 | 0;
  $$01 = $$01 + $20 | 0;
 }
 HEAP32[$17 >> 2] = $spec$select - $4;
 HEAP32[$11 >> 2] = 0;
 _tonality_get_info($0, $11, $4);
 return;
}

function _silk_encode_signs($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $12 = 0, $14 = 0, $17 = 0, $25 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP8[$6 + 1 >> 0] = 0;
 $12 = 26224 + ((($3 << 1) + $4 << 16 >> 16) * 7 | 0) | 0;
 $14 = $2 + 8 >> 4;
 $$0 = $1;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($14 | 0)) break;
  $17 = HEAP32[$5 + ($$02 << 2) >> 2] | 0;
  L4 : do if (($17 | 0) > 0) {
   HEAP8[$6 >> 0] = HEAP8[$12 + (($17 & 30) >>> 0 < 6 ? $17 & 31 : 6) >> 0] | 0;
   $$01 = 0;
   while (1) {
    if (($$01 | 0) == 16) break L4;
    $25 = HEAP8[$$0 + $$01 >> 0] | 0;
    if ($25 << 24 >> 24) _ec_enc_icdf($0, ($25 << 24 >> 24 >> 15) + 1 | 0, $6, 8);
    $$01 = $$01 + 1 | 0;
   }
  } while (0);
  $$0 = $$0 + 16 | 0;
  $$02 = $$02 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _exp_rotation1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12$in = 0, $10 = 0.0, $20 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $5 = 0.0, $6 = 0, $8 = 0.0, $9 = 0;
 $5 = -$4;
 $6 = $1 - $2 | 0;
 $$0 = $0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($6 | 0)) break;
  $8 = +HEAPF32[$$0 >> 2];
  $9 = $$0 + ($2 << 2) | 0;
  $10 = +HEAPF32[$9 >> 2];
  HEAPF32[$9 >> 2] = $10 * $3 + $8 * $4;
  HEAPF32[$$0 >> 2] = $8 * $3 + $10 * $5;
  $$0 = $$0 + 4 | 0;
  $$01 = $$01 + 1 | 0;
 }
 $20 = $1 - ($2 << 1) | 0;
 $$1 = $0 + ($20 + -1 << 2) | 0;
 $$12$in = $20;
 while (1) {
  if (($$12$in | 0) <= 0) break;
  $24 = +HEAPF32[$$1 >> 2];
  $25 = $$1 + ($2 << 2) | 0;
  $26 = +HEAPF32[$25 >> 2];
  HEAPF32[$25 >> 2] = $26 * $3 + $24 * $4;
  HEAPF32[$$1 >> 2] = $24 * $3 + $26 * $5;
  $$1 = $$1 + -4 | 0;
  $$12$in = $$12$in + -1 | 0;
 }
 return;
}

function _compute_equiv_rate($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$5 = 0, $18 = 0;
 if (($2 | 0) > 50) $$0 = $0 - (Math_imul(($1 * 40 | 0) + 20 | 0, $2 + -50 | 0) | 0) | 0; else $$0 = $0;
 if (!$3) $$1 = $$0 - (($$0 | 0) / 12 | 0) | 0; else $$1 = $$0;
 $18 = (Math_imul($$1, $5 + 90 | 0) | 0) / 100 | 0;
 switch ($4 | 0) {
 case 1001:
 case 1e3:
  {
   if (($5 | 0) < 2) $$2 = ($18 << 2 | 0) / 5 | 0; else $$2 = $18;
   $$5 = $$2 - ((Math_imul($$2, $6) | 0) / (($6 * 6 | 0) + 10 | 0) | 0) | 0;
   return $$5 | 0;
  }
 case 1002:
  {
   if (($5 | 0) >= 5) {
    $$5 = $18;
    return $$5 | 0;
   }
   $$5 = ($18 * 9 | 0) / 10 | 0;
   return $$5 | 0;
  }
 default:
  {
   $$5 = $18 - ((Math_imul($18, $6) | 0) / (($6 * 12 | 0) + 20 | 0) | 0) | 0;
   return $$5 | 0;
  }
 }
 return 0;
}

function _celt_fir5($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$phi = 0.0, $$01 = 0.0, $$01$phi = 0.0, $$02 = 0.0, $$02$phi = 0.0, $$03 = 0, $$04 = 0.0, $$04$phi = 0.0, $$05 = 0.0, $11 = 0.0, $13 = 0, $14 = 0.0, $3 = 0.0, $5 = 0.0, $7 = 0.0, $9 = 0.0;
 $3 = +HEAPF32[$1 >> 2];
 $5 = +HEAPF32[$1 + 4 >> 2];
 $7 = +HEAPF32[$1 + 8 >> 2];
 $9 = +HEAPF32[$1 + 12 >> 2];
 $11 = +HEAPF32[$1 + 16 >> 2];
 $$0 = 0.0;
 $$01 = 0.0;
 $$02 = 0.0;
 $$03 = 0;
 $$04 = 0.0;
 $$05 = 0.0;
 while (1) {
  if (($$03 | 0) >= ($2 | 0)) break;
  $13 = $0 + ($$03 << 2) | 0;
  $14 = +HEAPF32[$13 >> 2];
  HEAPF32[$13 >> 2] = $14 + $3 * $$05 + $5 * $$04 + $7 * $$02 + $9 * $$01 + $11 * $$0;
  $$04$phi = $$05;
  $$02$phi = $$04;
  $$01$phi = $$02;
  $$0$phi = $$01;
  $$03 = $$03 + 1 | 0;
  $$05 = $14;
  $$04 = $$04$phi;
  $$02 = $$02$phi;
  $$01 = $$01$phi;
  $$0 = $$0$phi;
 }
 return;
}

function _frame_size_select($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$12 = 0, $20 = 0, $3 = 0;
 $3 = ($2 | 0) / 400 | 0;
 if (($3 | 0) > ($0 | 0)) {
  $$0 = -1;
  return $$0 | 0;
 }
 if (($1 | 0) == 5e3) $$12 = $0; else {
  if (($1 + -5001 | 0) >>> 0 >= 9) {
   $$0 = -1;
   return $$0 | 0;
  }
  if (($1 | 0) < 5006) $$1 = $3 << $1 + -5001; else $$1 = (Math_imul($1 + -5003 | 0, $2) | 0) / 50 | 0;
  if (($$1 | 0) > ($0 | 0)) {
   $$0 = -1;
   return $$0 | 0;
  } else $$12 = $$1;
 }
 if (!(($$12 * 400 | 0) == ($2 | 0) | ($$12 * 200 | 0) == ($2 | 0) | ($$12 * 100 | 0) == ($2 | 0))) {
  $20 = $$12 * 50 | 0;
  if (!(($20 | 0) == ($2 | 0) | ($$12 * 25 | 0) == ($2 | 0) | ($20 | 0) == ($2 * 3 | 0) | ($20 | 0) == ($2 << 2 | 0) | ($20 | 0) == ($2 * 5 | 0) | ($20 | 0) == ($2 * 6 | 0))) {
   $$0 = -1;
   return $$0 | 0;
  }
 }
 $$0 = $$12;
 return $$0 | 0;
}

function _stereo_itheta($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$03 = 0, $$1 = 0.0, $$12 = 0.0, $10 = 0.0, $11 = 0.0, $18 = 0.0, $7 = 0.0, $9 = 0.0;
 L1 : do if (!$2) {
  $18 = +_celt_inner_prod_c_174($0, $0, $3) + 1.0000000036274937e-15;
  $$1 = +_celt_inner_prod_c_174($1, $1, $3) + 1.0000000036274937e-15;
  $$12 = $18;
 } else {
  $$0 = 1.0000000036274937e-15;
  $$01 = 1.0000000036274937e-15;
  $$03 = 0;
  while (1) {
   if (($$03 | 0) >= ($3 | 0)) {
    $$1 = $$0;
    $$12 = $$01;
    break L1;
   }
   $7 = +HEAPF32[$0 + ($$03 << 2) >> 2];
   $9 = +HEAPF32[$1 + ($$03 << 2) >> 2];
   $10 = $7 + $9;
   $11 = $7 - $9;
   $$0 = $$0 + $11 * $11;
   $$01 = $$01 + $10 * $10;
   $$03 = $$03 + 1 | 0;
  }
 } while (0);
 return ~~+Math_floor(+(+_fast_atan2f(+Math_sqrt(+$$1), +Math_sqrt(+$$12)) * 10430.3818359375 + .5)) | 0;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $6 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[37552 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 4;
   break;
  }
  $6 = $$016 + 1 | 0;
  if (($6 | 0) == 87) {
   $$115$ph = 87;
   label = 5;
   break;
  } else $$016 = $6;
 }
 if ((label | 0) == 4) if (!$$016) $$012$lcssa = 37648; else {
  $$115$ph = $$016;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$01214 = 37648;
  $$115 = $$115$ph;
  while (1) {
   $$113 = $$01214;
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0;
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0;
   if (!$$115) {
    $$012$lcssa = $$113;
    break;
   } else $$01214 = $$113;
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}

function _silk_LPC_analysis_filter8_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $1 + 4 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1 + 12 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 20 | 0;
 $9 = $1 + 24 | 0;
 $10 = $1 + 28 | 0;
 $$0 = 8;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $13 = $2 + ($$0 + -1 << 2) | 0;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$2 + ($$0 << 2) >> 2] - (+HEAPF32[$13 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$13 + -4 >> 2] * +HEAPF32[$4 >> 2] + +HEAPF32[$13 + -8 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$13 + -12 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$13 + -16 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$13 + -20 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$13 + -24 >> 2] * +HEAPF32[$9 >> 2] + +HEAPF32[$13 + -28 >> 2] * +HEAPF32[$10 >> 2]);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_inner_product_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0, $$1 = 0.0, $$12 = 0, $15 = 0, $24 = 0, $3 = 0, $33 = 0, $6 = 0;
 $3 = $2 + -3 | 0;
 $6 = (($3 | 0) > 0 ? $3 : 0) + 3 & -4;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $15 = $$01 | 1;
  $24 = $$01 | 2;
  $33 = $$01 | 3;
  $$0 = $$0 + (+HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2] + +HEAPF32[$0 + ($15 << 2) >> 2] * +HEAPF32[$1 + ($15 << 2) >> 2] + +HEAPF32[$0 + ($24 << 2) >> 2] * +HEAPF32[$1 + ($24 << 2) >> 2] + +HEAPF32[$0 + ($33 << 2) >> 2] * +HEAPF32[$1 + ($33 << 2) >> 2]);
  $$01 = $$01 + 4 | 0;
 }
 $$1 = $$0;
 $$12 = $6;
 while (1) {
  if (($$12 | 0) >= ($2 | 0)) break;
  $$1 = $$1 + +HEAPF32[$0 + ($$12 << 2) >> 2] * +HEAPF32[$1 + ($$12 << 2) >> 2];
  $$12 = $$12 + 1 | 0;
 }
 return +$$1;
}

function _unquant_fine_energy($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $10 = 0, $12 = 0, $15 = 0.0, $26 = 0, $29 = 0, $7 = 0, $9 = 0;
 $7 = $0 + 8 | 0;
 $$01 = $1;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $9 = $4 + ($$01 << 2) | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  L4 : do if (($10 | 0) >= 1) {
   $$0 = 0;
   $12 = $10;
   while (1) {
    $15 = +(_ec_dec_bits($5, $12) | 0) + .5;
    $26 = $3 + ($$01 + (Math_imul($$0, HEAP32[$7 >> 2] | 0) | 0) << 2) | 0;
    HEAPF32[$26 >> 2] = +HEAPF32[$26 >> 2] + ($15 * +(1 << 14 - (HEAP32[$9 >> 2] | 0) | 0) * .00006103515625 + -.5);
    $29 = $$0 + 1 | 0;
    if (($29 | 0) >= ($6 | 0)) break L4;
    $$0 = $29;
    $12 = HEAP32[$9 >> 2] | 0;
   }
  } while (0);
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _silk_find_LTP_FLP($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $11 = 0, $13 = 0.0, $19 = 0.0, $22 = 0.0, $6 = 0;
 $6 = $4 + 5 | 0;
 $$0 = $0;
 $$01 = $1;
 $$02 = $2;
 $$03 = 0;
 while (1) {
  if (($$03 | 0) >= ($5 | 0)) break;
  $11 = $$02 + (-2 - (HEAP32[$3 + ($$03 << 2) >> 2] | 0) << 2) | 0;
  _silk_corrMatrix_FLP($11, $4, $$0);
  _silk_corrVector_FLP($11, $$02, $4, $$01);
  $13 = +_silk_energy_FLP($$02, $6);
  $19 = (+HEAPF32[$$0 >> 2] + +HEAPF32[$$0 + 96 >> 2]) * .014999999664723873 + 1.0;
  $22 = 1.0 / ($19 < $13 ? $13 : $19);
  _silk_scale_vector_FLP($$0, $22, 25);
  _silk_scale_vector_FLP($$01, $22, 5);
  $$0 = $$0 + 100 | 0;
  $$01 = $$01 + 20 | 0;
  $$02 = $$02 + ($4 << 2) | 0;
  $$03 = $$03 + 1 | 0;
 }
 return;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _silk_bwexpander_32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $2 + -65536 | 0;
 $4 = $1 + -1 | 0;
 $$0 = 0;
 $$01 = $2;
 while (1) {
  $6 = $$01 >> 16;
  if (($$0 | 0) >= ($4 | 0)) break;
  $7 = $0 + ($$0 << 2) | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = $8 << 16 >> 16;
  HEAP32[$7 >> 2] = (Math_imul($6, $9) | 0) + ((Math_imul($$01 & 65535, $9) | 0) >> 16) + (Math_imul($$01, ($8 >> 15) + 1 >> 1) | 0);
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + (((Math_imul($$01, $3) | 0) >> 15) + 1 >> 1) | 0;
 }
 $26 = $0 + ($4 << 2) | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $27 << 16 >> 16;
 HEAP32[$26 >> 2] = (Math_imul($6, $28) | 0) + ((Math_imul($$01 & 65535, $28) | 0) >> 16) + (Math_imul($$01, ($27 >> 15) + 1 >> 1) | 0);
 return;
}

function _compute_band_energies($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $20 = 0, $28 = 0.0, $7 = 0;
 $7 = HEAP32[$0 + 32 >> 2] | 0;
 $10 = HEAP32[$0 + 44 >> 2] << $5;
 $11 = $0 + 8 | 0;
 $$0 = 0;
 do {
  $12 = Math_imul($$0, $10) | 0;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($3 | 0)) break;
   $16 = HEAP16[$7 + ($$01 << 1) >> 1] | 0;
   $19 = $1 + ($12 + ($16 << $5) << 2) | 0;
   $20 = $$01 + 1 | 0;
   $28 = +Math_sqrt(+(+_celt_inner_prod_c($19, $19, (HEAP16[$7 + ($20 << 1) >> 1] | 0) - $16 << $5) + 1.0000000272452012e-27));
   HEAPF32[$2 + ($$01 + (Math_imul($$0, HEAP32[$11 >> 2] | 0) | 0) << 2) >> 2] = $28;
   $$01 = $20;
  }
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($4 | 0));
 return;
}

function _opus_custom_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$idx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ($2 >>> 0 > 2) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$0) {
  $$0 = -7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$idx = $1 + 4 | 0;
 _memset($0 | 0, 0, _opus_custom_decoder_get_size(HEAP32[$$idx >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0, $2) | 0) | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$$idx >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 28 >> 2] = 1;
 HEAP32[$0 + 32 >> 2] = ($2 | 0) == 1 & 1;
 HEAP32[$0 + 36 >> 2] = 0;
 _opus_custom_decoder_ctl($0, 4028, sp) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_stereo_encode_pred($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $9 = 0, label = 0;
 $9 = ((HEAP8[$1 + 2 >> 0] | 0) * 5 | 0) + (HEAP8[$1 + 5 >> 0] | 0) | 0;
 if (($9 | 0) >= 25) _celt_fatal(46339, 46364, 44);
 _ec_enc_icdf($0, $9, 24864, 8);
 $$0 = 0;
 while (1) {
  if ($$0 >>> 0 >= 2) {
   label = 10;
   break;
  }
  $13 = HEAP8[$1 + ($$0 * 3 | 0) >> 0] | 0;
  if ($13 << 24 >> 24 >= 3) {
   label = 6;
   break;
  }
  $15 = $1 + ($$0 * 3 | 0) + 1 | 0;
  if ((HEAP8[$15 >> 0] | 0) >= 5) {
   label = 8;
   break;
  }
  _ec_enc_icdf($0, $13 << 24 >> 24, 44702, 8);
  _ec_enc_icdf($0, HEAP8[$15 >> 0] | 0, 44709, 8);
  $$0 = $$0 + 1 | 0;
 }
 if ((label | 0) == 6) _celt_fatal(46390, 46364, 47); else if ((label | 0) == 8) _celt_fatal(46425, 46364, 48); else if ((label | 0) == 10) return;
}

function _comb_filter_const_c($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$0 = 0, $$01 = 0.0, $$01$phi = 0.0, $$02 = 0.0, $$02$phi = 0.0, $$03 = 0.0, $$03$phi = 0.0, $$04 = 0.0, $23 = 0.0;
 $$0 = 0;
 $$01 = +HEAPF32[$1 + (-2 - $2 << 2) >> 2];
 $$02 = +HEAPF32[$1 + (~$2 << 2) >> 2];
 $$03 = +HEAPF32[$1 + (0 - $2 << 2) >> 2];
 $$04 = +HEAPF32[$1 + (1 - $2 << 2) >> 2];
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $23 = +HEAPF32[$1 + ($$0 - $2 + 2 << 2) >> 2];
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$1 + ($$0 << 2) >> 2] + $$03 * $4 + ($$04 + $$02) * $5 + ($23 + $$01) * $6;
  $$03$phi = $$04;
  $$02$phi = $$03;
  $$01$phi = $$02;
  $$0 = $$0 + 1 | 0;
  $$04 = $23;
  $$03 = $$03$phi;
  $$02 = $$02$phi;
  $$01 = $$01$phi;
 }
 return;
}

function _bits2pulses($$0$2$val, $$0$14$1$val, $$0$14$2$val, $0, $1, $2) {
 $$0$2$val = $$0$2$val | 0;
 $$0$14$1$val = $$0$14$1$val | 0;
 $$0$14$2$val = $$0$14$2$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $12 = 0, $15 = 0, $19 = 0, $26 = 0, $9 = 0;
 $9 = $$0$14$2$val + (HEAP16[$$0$14$1$val + ((Math_imul($1 + 1 | 0, $$0$2$val) | 0) + $0 << 1) >> 1] | 0) | 0;
 $12 = $2 + -1 | 0;
 $$01 = HEAPU8[$9 >> 0] | 0;
 $$02 = 0;
 $$04 = 0;
 while (1) {
  if (($$04 | 0) == 6) break;
  $15 = $$02 + $$01 + 1 >> 1;
  $19 = ($12 | 0) > (HEAPU8[$9 + $15 >> 0] | 0);
  $$01 = $19 ? $$01 : $15;
  $$02 = $19 ? $15 : $$02;
  $$04 = $$04 + 1 | 0;
 }
 if (!$$02) $26 = -1; else $26 = HEAPU8[$9 + $$02 >> 0] | 0;
 return (($12 - $26 | 0) > ((HEAPU8[$9 + $$01 >> 0] | 0) - $12 | 0) ? $$01 : $$02) | 0;
}

function _silk_VAD_Init($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $7 = 0, dest = 0, stop = 0;
 dest = $0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  $1 = $$0 + 1 | 0;
  HEAP32[$0 + 92 + ($$0 << 2) >> 2] = _silk_max_32_344(50 / ($1 >>> 0) | 0) | 0;
  $$0 = $1;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 4) break;
  $7 = (HEAP32[$0 + 92 + ($$1 << 2) >> 2] | 0) * 100 | 0;
  HEAP32[$0 + 60 + ($$1 << 2) >> 2] = $7;
  HEAP32[$0 + 76 + ($$1 << 2) >> 2] = 2147483647 / ($7 | 0) | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP32[$0 + 108 >> 2] = 15;
 $$2 = 0;
 while (1) {
  if (($$2 | 0) == 4) break;
  HEAP32[$0 + 40 + ($$2 << 2) >> 2] = 25600;
  $$2 = $$2 + 1 | 0;
 }
 return 0;
}

function _limit_coefs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$01 = 0, $$03 = 0, $$04 = 0, $$12 = 0, $$2 = 0, $6 = 0.0, $7 = 0, label = 0;
 $$01 = 0;
 $$03 = 0;
 while (1) {
  if ($$03 >>> 0 >= 10) {
   label = 8;
   break;
  }
  $$0 = -1.0;
  $$04 = 0;
  $$12 = $$01;
  while (1) {
   if (($$04 | 0) >= ($1 | 0)) break;
   $6 = +Math_abs(+(+HEAPF32[$0 + ($$04 << 2) >> 2]));
   $7 = $6 > $$0;
   $$2 = $7 ? $$04 : $$12;
   $$0 = $7 ? $6 : $$0;
   $$04 = $$04 + 1 | 0;
   $$12 = $$2;
  }
  if ($$0 <= 3.999000072479248) {
   label = 8;
   break;
  }
  _silk_bwexpander_FLP($0, $1, .9900000095367432 - (+($$03 | 0) * .10000000149011612 + .800000011920929) * ($$0 + -3.999000072479248) / ($$0 * +($$12 + 1 | 0)));
  $$01 = $$12;
  $$03 = $$03 + 1 | 0;
 }
 if ((label | 0) == 8) return;
}

function _opus_packet_pad($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $3 = sp;
 if (($1 | 0) < 1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($1 | 0) == ($2 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($1 | 0) > ($2 | 0)) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _opus_repacketizer_init($3);
 $9 = $0 + $2 + (0 - $1) | 0;
 _memmove($9 | 0, $0 | 0, $1 | 0) | 0;
 $10 = _opus_repacketizer_cat($3, $9, $1) | 0;
 if (!$10) {
  $14 = _opus_repacketizer_out_range_impl($3, HEAP32[$3 + 4 >> 2] | 0, $0, $2, 1) | 0;
  STACKTOP = sp;
  return (($14 | 0) < 0 ? $14 : 0) | 0;
 } else {
  $$0 = $10;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _deemphasis_stereo_simple($$val, $$1$val, $0, $1, $2, $3) {
 $$val = $$val | 0;
 $$1$val = $$1$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $11 = 0.0, $15 = 0.0, $17 = 0, $5 = 0;
 $5 = $3 + 4 | 0;
 $$0 = 0;
 $$01 = +HEAPF32[$5 >> 2];
 $$02 = +HEAPF32[$3 >> 2];
 while (1) {
  if (($$0 | 0) >= ($1 | 0)) break;
  $11 = +HEAPF32[$$val + ($$0 << 2) >> 2] + 1.0000000031710769e-30 + $$02;
  $15 = +HEAPF32[$$1$val + ($$0 << 2) >> 2] + 1.0000000031710769e-30 + $$01;
  $17 = $$0 << 1;
  HEAPF32[$0 + ($17 << 2) >> 2] = $11 * .000030517578125;
  HEAPF32[$0 + (($17 | 1) << 2) >> 2] = $15 * .000030517578125;
  $$0 = $$0 + 1 | 0;
  $$01 = $15 * $2;
  $$02 = $11 * $2;
 }
 HEAPF32[$3 >> 2] = $$02;
 HEAPF32[$5 >> 2] = $$01;
 return;
}

function _alg_quant($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = $7 | 0;
 var $11 = 0, $12 = 0.0, $14 = 0, sp = 0;
 sp = STACKTOP;
 if (($2 | 0) <= 0) _celt_fatal(42557, 42616, 334);
 if (($1 | 0) <= 1) _celt_fatal(42626, 42616, 335);
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($1 + 3 << 2) | 0) + 15 & -16) | 0;
 _exp_rotation($0, $1, 1, $4, $2, $3);
 $12 = +_op_pvq_search_c($0, $11, $2, $1);
 _encode_pulses($11, $1, $2, $5);
 if (!$7) {
  $14 = _extract_collapse_mask($11, $1, $4) | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 _normalise_residual($11, $0, $1, $12, $6);
 _exp_rotation($0, $1, -1, $4, $2, $3);
 $14 = _extract_collapse_mask($11, $1, $4) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _ec_enc_carry_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (($1 | 0) == 255) {
  $25 = $0 + 36 | 0;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
  return;
 }
 $3 = $1 >> 8;
 $4 = $0 + 40 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) > -1) {
  $8 = _ec_write_byte($0, $5 + $3 | 0) | 0;
  $9 = $0 + 44 | 0;
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | $8;
 }
 $12 = $0 + 36 | 0;
 if (HEAP32[$12 >> 2] | 0) {
  $16 = $3 + 255 & 255;
  $17 = $0 + 44 | 0;
  do {
   $18 = _ec_write_byte($0, $16) | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | $18;
   $22 = (HEAP32[$12 >> 2] | 0) + -1 | 0;
   HEAP32[$12 >> 2] = $22;
  } while (($22 | 0) != 0);
 }
 HEAP32[$4 >> 2] = $1 & 255;
 return;
}

function _amp2Log2($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $10 = 0, $16 = 0.0, $6 = 0;
 $6 = $0 + 8 | 0;
 $$01 = 0;
 do {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($1 | 0)) break;
   $10 = $$0 + (Math_imul($$01, HEAP32[$6 >> 2] | 0) | 0) | 0;
   $16 = +Math_log(+(+HEAPF32[$3 + ($10 << 2) >> 2])) * 1.4426950408889634;
   HEAPF32[$4 + ($10 << 2) >> 2] = $16 - +HEAPF32[20304 + ($$0 << 2) >> 2];
   $$0 = $$0 + 1 | 0;
  }
  $$1 = $1;
  while (1) {
   if (($$1 | 0) >= ($2 | 0)) break;
   HEAPF32[$4 + ((Math_imul($$01, HEAP32[$6 >> 2] | 0) | 0) + $$1 << 2) >> 2] = -14.0;
   $$1 = $$1 + 1 | 0;
  }
  $$01 = $$01 + 1 | 0;
 } while (($$01 | 0) < ($5 | 0));
 return;
}

function _silk_NLSF_residual_dequant($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$2 = 0, $13 = 0, $15 = 0, $17 = 0, $28 = 0, $6 = 0;
 $6 = $3 << 16 >> 16;
 $$0 = 0;
 $$01$in = $4 << 16 >> 16;
 while (1) {
  $$01 = $$01$in + -1 | 0;
  if (($$01$in | 0) <= 0) break;
  $13 = (Math_imul($$0 << 16 >> 16, HEAPU8[$2 + $$01 >> 0] | 0) | 0) >> 8;
  $15 = HEAP8[$1 + $$01 >> 0] | 0;
  $17 = $15 << 24 >> 24 << 10;
  if ($15 << 24 >> 24 > 0) $$2 = $17 + -102 | 0; else $$2 = $15 << 24 >> 24 == 0 ? $17 : $17 | 102;
  $28 = $13 + ((Math_imul($$2 >> 16, $6) | 0) + ((Math_imul($$2 & 65535, $6) | 0) >> 16)) | 0;
  HEAP16[$0 + ($$01 << 1) >> 1] = $28;
  $$0 = $28;
  $$01$in = $$01;
 }
 return;
}

function _silk_scale_copy_vector_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $15 = 0, $20 = 0, $4 = 0;
 $4 = $3 & 65532;
 $$0 = 0;
 while (1) {
  if ($$0 >>> 0 >= $4 >>> 0) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$1 + ($$0 << 2) >> 2] * $2;
  $10 = $$0 | 1;
  HEAPF32[$0 + ($10 << 2) >> 2] = +HEAPF32[$1 + ($10 << 2) >> 2] * $2;
  $15 = $$0 | 2;
  HEAPF32[$0 + ($15 << 2) >> 2] = +HEAPF32[$1 + ($15 << 2) >> 2] * $2;
  $20 = $$0 | 3;
  HEAPF32[$0 + ($20 << 2) >> 2] = +HEAPF32[$1 + ($20 << 2) >> 2] * $2;
  $$0 = $$0 + 4 | 0;
 }
 $$1 = $4;
 while (1) {
  if (($$1 | 0) >= ($3 | 0)) break;
  HEAPF32[$0 + ($$1 << 2) >> 2] = +HEAPF32[$1 + ($$1 << 2) >> 2] * $2;
  $$1 = $$1 + 1 | 0;
 }
 return;
}

function _silk_energy_FLP($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$01 = 0, $$1 = 0.0, $$12 = 0, $14 = 0.0, $2 = 0, $20 = 0.0, $26 = 0.0, $34 = 0.0, $5 = 0, $9 = 0.0;
 $2 = $1 + -3 | 0;
 $5 = (($2 | 0) > 0 ? $2 : 0) + 3 & -4;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $9 = +HEAPF32[$0 + ($$01 << 2) >> 2];
  $14 = +HEAPF32[$0 + (($$01 | 1) << 2) >> 2];
  $20 = +HEAPF32[$0 + (($$01 | 2) << 2) >> 2];
  $26 = +HEAPF32[$0 + (($$01 | 3) << 2) >> 2];
  $$0 = $$0 + ($9 * $9 + $14 * $14 + $20 * $20 + $26 * $26);
  $$01 = $$01 + 4 | 0;
 }
 $$1 = $$0;
 $$12 = $5;
 while (1) {
  if (($$12 | 0) >= ($1 | 0)) break;
  $34 = +HEAPF32[$0 + ($$12 << 2) >> 2];
  $$1 = $$1 + $34 * $34;
  $$12 = $$12 + 1 | 0;
 }
 return +$$1;
}

function _silk_encode_do_VAD_FLP($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0;
 _silk_VAD_GetSA_Q8_c($0, $0 + 5098 | 0);
 $4 = $0 + 4532 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($1 | 0) == 0 & ($5 | 0) > 12) HEAP32[$4 >> 2] = 12; else if (($5 | 0) >= 13) {
  HEAP32[$0 + 6084 >> 2] = 0;
  HEAP32[$0 + 6080 >> 2] = 0;
  HEAP8[$0 + 4765 >> 0] = 1;
  HEAP8[(HEAP32[$0 + 5748 >> 2] | 0) + ($0 + 4720) >> 0] = 1;
  return;
 }
 HEAP8[$0 + 4765 >> 0] = 0;
 $10 = $0 + 6084 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $11 + 1;
 if (($11 | 0) < 10) HEAP32[$0 + 6080 >> 2] = 0; else if (($11 | 0) > 29) {
  HEAP32[$10 >> 2] = 10;
  HEAP32[$0 + 6080 >> 2] = 0;
 }
 HEAP8[(HEAP32[$0 + 5748 >> 2] | 0) + ($0 + 4720) >> 0] = 0;
 return;
}

function _silk_resampler_private_AR2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $27 = 0, $5 = 0, $6 = 0;
 $5 = $0 + 4 | 0;
 $6 = $3 + 2 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $13 = (HEAP32[$0 >> 2] | 0) + (HEAP16[$2 + ($$0 << 1) >> 1] << 8) | 0;
  HEAP32[$1 + ($$0 << 2) >> 2] = $13;
  $15 = $13 << 2;
  $17 = $15 >> 16;
  $19 = HEAP16[$3 >> 1] | 0;
  $21 = $15 & 65532;
  HEAP32[$0 >> 2] = (HEAP32[$5 >> 2] | 0) + ((Math_imul($17, $19) | 0) + ((Math_imul($21, $19) | 0) >> 16));
  $27 = HEAP16[$6 >> 1] | 0;
  HEAP32[$5 >> 2] = (Math_imul($17, $27) | 0) + ((Math_imul($21, $27) | 0) >> 16);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_scale_vector_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $17 = 0, $22 = 0, $3 = 0, $5 = 0, $9 = 0;
 $3 = $2 & 65532;
 $$0 = 0;
 while (1) {
  if ($$0 >>> 0 >= $3 >>> 0) break;
  $5 = $0 + ($$0 << 2) | 0;
  HEAPF32[$5 >> 2] = +HEAPF32[$5 >> 2] * $1;
  $9 = $0 + (($$0 | 1) << 2) | 0;
  HEAPF32[$9 >> 2] = +HEAPF32[$9 >> 2] * $1;
  $13 = $0 + (($$0 | 2) << 2) | 0;
  HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] * $1;
  $17 = $0 + (($$0 | 3) << 2) | 0;
  HEAPF32[$17 >> 2] = +HEAPF32[$17 >> 2] * $1;
  $$0 = $$0 + 4 | 0;
 }
 $$1 = $3;
 while (1) {
  if (($$1 | 0) >= ($2 | 0)) break;
  $22 = $0 + ($$1 << 2) | 0;
  HEAPF32[$22 >> 2] = +HEAPF32[$22 >> 2] * $1;
  $$1 = $$1 + 1 | 0;
 }
 return;
}

function _silk_LP_variable_cutoff($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = $0 + 12 | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $8 = $0 + 8 | 0;
 $11 = 262144 - (HEAP32[$8 >> 2] << 10) | 0;
 _silk_LP_interpolate_filter_taps($3, $4, $11 >> 16, $11 & 64512);
 $16 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0;
 $spec$select = ($16 | 0) > 0 ? $16 : 0;
 HEAP32[$8 >> 2] = ($spec$select | 0) < 256 ? $spec$select : 256;
 _silk_biquad_alt_stride1($1, $3, HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] | 0, $0, $1, $2);
 STACKTOP = sp;
 return;
}

function _silk_LPC_analysis_filter6_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = $1 + 4 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1 + 12 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 + 20 | 0;
 $$0 = 6;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $11 = $2 + ($$0 + -1 << 2) | 0;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +HEAPF32[$2 + ($$0 << 2) >> 2] - (+HEAPF32[$11 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$11 + -4 >> 2] * +HEAPF32[$4 >> 2] + +HEAPF32[$11 + -8 >> 2] * +HEAPF32[$5 >> 2] + +HEAPF32[$11 + -12 >> 2] * +HEAPF32[$6 >> 2] + +HEAPF32[$11 + -16 >> 2] * +HEAPF32[$7 >> 2] + +HEAPF32[$11 + -20 >> 2] * +HEAPF32[$8 >> 2]);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _ec_enc_patch_initial_bits($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $30 = 0, $4 = 0, $7 = 0;
 if ($2 >>> 0 >= 9) _celt_fatal(41848, 41808, 217);
 $4 = 8 - $2 | 0;
 $7 = (1 << $2) + -1 << $4;
 if (HEAP32[$0 + 24 >> 2] | 0) {
  $11 = HEAP32[$0 >> 2] | 0;
  HEAP8[$11 >> 0] = ($7 ^ 255) & (HEAPU8[$11 >> 0] | 0) | $1 << $4;
  return;
 }
 $19 = $0 + 40 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) > -1) {
  HEAP32[$19 >> 2] = $20 & ~$7 | $1 << $4;
  return;
 }
 if ((HEAP32[$0 + 28 >> 2] | 0) >>> 0 > -2147483648 >>> $2 >>> 0) {
  HEAP32[$0 + 44 >> 2] = -1;
  return;
 } else {
  $30 = $0 + 32 | 0;
  HEAP32[$30 >> 2] = HEAP32[$30 >> 2] & ~($7 << 23) | $1 << $4 + 23;
  return;
 }
}

function _silk_control_SNR($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01 = 0, $$1 = 0, $$13 = 0, $12 = 0, $20 = 0, $7 = 0;
 HEAP32[$0 + 4608 >> 2] = $1;
 $7 = HEAP32[$0 + 4576 >> 2] | 0;
 if ((HEAP32[$0 + 4580 >> 2] | 0) == 2) $$01 = $1 - ((($7 | 0) / 16 | 0) + 2e3) | 0; else $$01 = $1;
 switch ($7 | 0) {
 case 8:
  {
   $$1 = 26288;
   $$13 = 107;
   break;
  }
 case 12:
  {
   $$1 = 26400;
   $$13 = 155;
   break;
  }
 default:
  {
   $$1 = 26560;
   $$13 = 191;
  }
 }
 $12 = ($$01 + 200 | 0) / 400 | 0;
 if (($12 + -9 | 0) < ($$13 | 0)) if (($$01 | 0) < 4200) {
  HEAP32[$0 + 4716 >> 2] = 0;
  return;
 } else $20 = $12 + -10 | 0; else $20 = $$13 + -1 | 0;
 HEAP32[$0 + 4716 >> 2] = (HEAPU8[$$1 + $20 >> 0] | 0) * 21;
 return;
}

function _ec_dec_bits($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $11 = 0, $2 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ($5 >>> 0 < $1 >>> 0) {
  $11 = $5 + ((($5 | 0) > 17 ? $5 : 17) + 7 - $5 & -8) | 0;
  $$0 = $5;
  $$01 = $3;
  while (1) {
   $$01 = $$01 | (_ec_read_byte_from_end($0) | 0) << $$0;
   if (($$0 | 0) >= 17) break; else $$0 = $$0 + 8 | 0;
  }
  $$1 = $11 + 8 | 0;
  $$12 = $$01;
 } else {
  $$1 = $5;
  $$12 = $3;
 }
 HEAP32[$2 >> 2] = $$12 >>> $1;
 HEAP32[$4 >> 2] = $$1 - $1;
 $23 = $0 + 20 | 0;
 HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + $1;
 return $$12 & (1 << $1) + -1 | 0;
}

function _silk_k2a_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $12 = 0.0, $3 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $indvars$iv = 0;
 $$01 = 0;
 $indvars$iv = 1;
 while (1) {
  $3 = $indvars$iv >>> 1;
  if (($$01 | 0) >= ($2 | 0)) break;
  $6 = +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == ($3 | 0)) break;
   $7 = $0 + ($$0 << 2) | 0;
   $8 = +HEAPF32[$7 >> 2];
   $11 = $0 + ($$01 - $$0 + -1 << 2) | 0;
   $12 = +HEAPF32[$11 >> 2];
   HEAPF32[$7 >> 2] = $8 + $12 * $6;
   HEAPF32[$11 >> 2] = $12 + $8 * $6;
   $$0 = $$0 + 1 | 0;
  }
  HEAPF32[$0 + ($$01 << 2) >> 2] = -$6;
  $$01 = $$01 + 1 | 0;
  $indvars$iv = $indvars$iv + 1 | 0;
 }
 return;
}

function _ec_enc_icdf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $storemerge = 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 >>> $3;
 if (($1 | 0) > 0) {
  $9 = $2 + ($1 + -1) | 0;
  $13 = $5 - (Math_imul($6, HEAPU8[$9 >> 0] | 0) | 0) | 0;
  $14 = $0 + 32 | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $13;
  $storemerge = Math_imul($6, (HEAPU8[$9 >> 0] | 0) - (HEAPU8[$2 + $1 >> 0] | 0) | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $storemerge = $5 - (Math_imul($6, HEAPU8[$2 + $1 >> 0] | 0) | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _compute_qn($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$013 = 0, $10 = 0, $12 = 0, $17 = 0, $25 = 0, $spec$select = 0;
 $$0 = ($0 << 1) + (($4 | 0) != 0 & ($0 | 0) == 2 ? -2 : -1) | 0;
 $10 = _celt_sudiv((Math_imul($$0, $2) | 0) + $1 | 0, $$0) | 0;
 $12 = $1 - $3 + -32 | 0;
 $spec$select = ($12 | 0) < ($10 | 0) ? $12 : $10;
 if (($spec$select | 0) > 64) $17 = 64; else if (($spec$select | 0) < 4) {
  $$013 = 1;
  return $$013 | 0;
 } else $17 = $spec$select;
 $25 = (HEAP16[176 + (($17 & 7) << 1) >> 1] >> 14 - ($17 >> 3)) + 1 & -2;
 if (($25 | 0) < 257) {
  $$013 = $25;
  return $$013 | 0;
 } else _celt_fatal(40382, 40213, 669);
 return 0;
}

function _compute_func($0, $$0$0$val, $$0$1$val) {
 $0 = +$0;
 $$0$0$val = $$0$0$val | 0;
 $$0$1$val = $$0$1$val | 0;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $18 = 0.0, $2 = 0.0, $21 = 0.0, $4 = 0, $6 = 0.0, $7 = 0.0, $9 = 0.0;
 $2 = +($$0$1$val | 0) * $0;
 $4 = ~~+Math_floor(+$2);
 $6 = $2 - +($4 | 0);
 $7 = $6;
 $9 = $6 * $6;
 $11 = $9 * $6;
 $12 = $11 * .1666666667;
 $13 = $7 * -.1666666667 + $12;
 $15 = $9 * .5;
 $18 = $15 + $7 - $11 * .5;
 $21 = $7 * -.3333333333 + $15 - $12;
 return +($21 * +HEAPF64[$$0$0$val + ($4 << 3) >> 3] + (1.0 - $13 - $18 - $21) * +HEAPF64[$$0$0$val + ($4 + 1 << 3) >> 3] + $18 * +HEAPF64[$$0$0$val + ($4 + 2 << 3) >> 3] + $13 * +HEAPF64[$$0$0$val + ($4 + 3 << 3) >> 3]);
}

function _silk_LPC_analysis_filter_FLP($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (($4 | 0) > ($3 | 0)) _celt_fatal(47159, 47193, 218);
 switch ($4 | 0) {
 case 6:
  {
   _silk_LPC_analysis_filter6_FLP($0, $1, $2, $3);
   break;
  }
 case 8:
  {
   _silk_LPC_analysis_filter8_FLP($0, $1, $2, $3);
   break;
  }
 case 10:
  {
   _silk_LPC_analysis_filter10_FLP($0, $1, $2, $3);
   break;
  }
 case 12:
  {
   _silk_LPC_analysis_filter12_FLP($0, $1, $2, $3);
   break;
  }
 case 16:
  {
   _silk_LPC_analysis_filter16_FLP($0, $1, $2, $3);
   break;
  }
 default:
  _celt_fatal(48340, 47193, 242);
 }
 _memset($0 | 0, 0, $4 << 2 | 0) | 0;
 return;
}

function _fast_atan2f_756($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0.0, $26 = 0.0, $3 = 0.0;
 $2 = $1 * $1;
 $3 = $0 * $0;
 if ($2 + $3 < 1.000000045813705e-18) {
  $$0 = 0.0;
  return +$$0;
 }
 if ($2 < $3) {
  $$0 = -($1 * $0 * ($3 + $2 * .43157973885536194)) / (($3 + $2 * .6784840226173401) * ($3 + $2 * .0859554186463356)) + ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 } else {
  $26 = $1 * $0;
  $$0 = $26 * ($2 + $3 * .43157973885536194) / (($2 + $3 * .6784840226173401) * ($2 + $3 * .0859554186463356)) + ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) - ($26 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 }
 return +(0.0);
}

function _fast_atan2f($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0.0, $26 = 0.0, $3 = 0.0;
 $2 = $1 * $1;
 $3 = $0 * $0;
 if ($2 + $3 < 1.000000045813705e-18) {
  $$0 = 0.0;
  return +$$0;
 }
 if ($2 < $3) {
  $$0 = -($1 * $0 * ($3 + $2 * .43157973885536194)) / (($3 + $2 * .6784840226173401) * ($3 + $2 * .0859554186463356)) + ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 } else {
  $26 = $1 * $0;
  $$0 = $26 * ($2 + $3 * .43157973885536194) / (($2 + $3 * .6784840226173401) * ($2 + $3 * .0859554186463356)) + ($0 < 0.0 ? -1.5707963705062866 : 1.5707963705062866) - ($26 < 0.0 ? -1.5707963705062866 : 1.5707963705062866);
  return +$$0;
 }
 return +(0.0);
}

function _smooth_fade($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0.0, $13 = 0.0, $15 = 0, $7 = 0;
 $7 = 48e3 / ($6 | 0) | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= ($3 | 0)) break;
   $12 = +HEAPF32[$5 + ((Math_imul($$01, $7) | 0) << 2) >> 2];
   $13 = $12 * $12;
   $15 = (Math_imul($$01, $4) | 0) + $$0 | 0;
   HEAPF32[$2 + ($15 << 2) >> 2] = $13 * +HEAPF32[$1 + ($15 << 2) >> 2] + (1.0 - $13) * +HEAPF32[$0 + ($15 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _ec_dec_uint($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $17 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0;
 if ($1 >>> 0 <= 1) _celt_fatal(41784, 41770, 203);
 $3 = $1 + -1 | 0;
 $5 = 32 - (Math_clz32($3 | 0) | 0) | 0;
 if (($5 | 0) <= 8) {
  $17 = _ec_decode($0, $1) | 0;
  _ec_dec_update($0, $17, $17 + 1 | 0, $1);
  $$0 = $17;
  return $$0 | 0;
 }
 $7 = $5 + -8 | 0;
 $9 = ($3 >>> $7) + 1 | 0;
 $10 = _ec_decode($0, $9) | 0;
 _ec_dec_update($0, $10, $10 + 1 | 0, $9);
 $14 = $10 << $7 | (_ec_dec_bits($0, $7) | 0);
 if ($14 >>> 0 <= $3 >>> 0) {
  $$0 = $14;
  return $$0 | 0;
 }
 HEAP32[$0 + 44 >> 2] = 1;
 $$0 = $3;
 return $$0 | 0;
}

function _init_caps($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0;
 $5 = $0 + 32 | 0;
 $6 = $0 + 104 | 0;
 $9 = ($2 << 1) + $3 + -1 | 0;
 $$0 = 0;
 while (1) {
  $10 = HEAP32[$4 >> 2] | 0;
  if (($$0 | 0) >= ($10 | 0)) break;
  $12 = HEAP32[$5 >> 2] | 0;
  $13 = $$0 + 1 | 0;
  HEAP32[$1 + ($$0 << 2) >> 2] = (Math_imul(Math_imul((HEAPU8[(HEAP32[$6 >> 2] | 0) + ((Math_imul($10, $9) | 0) + $$0) >> 0] | 0) + 64 | 0, $3) | 0, (HEAP16[$12 + ($13 << 1) >> 1] | 0) - (HEAP16[$12 + ($$0 << 1) >> 1] | 0) << $2) | 0) >> 2;
  $$0 = $13;
 }
 return;
}

function _intensity_stereo($$0$2$val, $0, $1, $2, $3, $4) {
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0, $6 = 0.0, $9 = 0.0;
 $6 = +HEAPF32[$2 + ($3 << 2) >> 2];
 $9 = +HEAPF32[$2 + ($$0$2$val + $3 << 2) >> 2];
 $15 = +Math_sqrt(+($6 * $6 + 1.0000000036274937e-15 + $9 * $9)) + 1.0000000036274937e-15;
 $16 = $6 / $15;
 $17 = $9 / $15;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $19 = $0 + ($$0 << 2) | 0;
  HEAPF32[$19 >> 2] = $16 * +HEAPF32[$19 >> 2] + $17 * +HEAPF32[$1 + ($$0 << 2) >> 2];
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _haar1($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $11 = 0.0, $16 = 0, $18 = 0.0, $3 = 0, $4 = 0, $9 = 0;
 $3 = $1 >> 1;
 $4 = $2 << 1;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($3 | 0)) break;
   $9 = $0 + ((Math_imul($4, $$0) | 0) + $$01 << 2) | 0;
   $11 = +HEAPF32[$9 >> 2] * .7071067690849304;
   $16 = $0 + ((Math_imul($$0 << 1 | 1, $2) | 0) + $$01 << 2) | 0;
   $18 = +HEAPF32[$16 >> 2] * .7071067690849304;
   HEAPF32[$9 >> 2] = $11 + $18;
   HEAPF32[$16 >> 2] = $11 - $18;
   $$0 = $$0 + 1 | 0;
  }
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _special_hybrid_folding($$0$5$val, $0, $1, $2, $3, $4) {
 $$0$5$val = $$0$5$val | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0, $22 = 0, $25 = 0, $8 = 0;
 $8 = HEAP16[$$0$5$val + ($2 + 1 << 1) >> 1] | 0;
 $13 = Math_imul($8 - (HEAP16[$$0$5$val + ($2 << 1) >> 1] | 0) | 0, $3) | 0;
 $19 = Math_imul((HEAP16[$$0$5$val + ($2 + 2 << 1) >> 1] | 0) - $8 | 0, $3) | 0;
 $22 = ($13 << 1) - $19 | 0;
 $25 = $19 - $13 << 2;
 _memcpy($0 + ($13 << 2) | 0, $0 + ($22 << 2) | 0, $25 | 0) | 0;
 if (!$4) return;
 _memcpy($1 + ($13 << 2) | 0, $1 + ($22 << 2) | 0, $25 | 0) | 0;
 return;
}

function _extract_collapse_mask($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $15 = 0, $4 = 0, $5 = 0;
 if (($2 | 0) < 2) {
  $$0 = 1;
  return $$0 | 0;
 }
 $4 = _celt_udiv_162($1, $2) | 0;
 $$03 = 0;
 $$04 = 0;
 while (1) {
  $5 = Math_imul($$03, $4) | 0;
  $$01 = 0;
  $$02 = 0;
  do {
   $$01 = $$01 | HEAP32[$0 + ($5 + $$02 << 2) >> 2];
   $$02 = $$02 + 1 | 0;
  } while (($$02 | 0) < ($4 | 0));
  $15 = $$04 | (($$01 | 0) != 0 & 1) << $$03;
  $$03 = $$03 + 1 | 0;
  if (($$03 | 0) == ($2 | 0)) {
   $$0 = $15;
   break;
  } else $$04 = $15;
 }
 return $$0 | 0;
}

function _ec_encode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = _celt_udiv_72($5, $3) | 0;
 if (!$1) {
  $storemerge = $5 - (Math_imul($6, $3 - $2 | 0) | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $10 = $5 - (Math_imul($6, $3 - $1 | 0) | 0) | 0;
  $11 = $0 + 32 | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + $10;
  $storemerge = Math_imul($6, $2 - $1 | 0) | 0;
  HEAP32[$4 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _loss_distortion($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$1 = 0.0, $13 = 0.0, $6 = 0, $8 = 0;
 $$0 = 0.0;
 $$02 = 0;
 while (1) {
  $6 = Math_imul($$02, $4) | 0;
  $$01 = $2;
  $$1 = $$0;
  while (1) {
   if (($$01 | 0) >= ($3 | 0)) break;
   $8 = $$01 + $6 | 0;
   $13 = +HEAPF32[$0 + ($8 << 2) >> 2] - +HEAPF32[$1 + ($8 << 2) >> 2];
   $$01 = $$01 + 1 | 0;
   $$1 = $$1 + $13 * $13;
  }
  $$02 = $$02 + 1 | 0;
  if (($$02 | 0) >= ($5 | 0)) break; else $$0 = $$1;
 }
 return +($$1 > 200.0 ? 200.0 : $$1);
}

function _silk_insertion_sort_increasing_all_values_int16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $4 = 0, $7 = 0;
 if (($1 | 0) <= 0) _celt_fatal(48137, 46327, 144);
 $$01 = 1;
 while (1) {
  if (($$01 | 0) == ($1 | 0)) break;
  $4 = HEAP16[$0 + ($$01 << 1) >> 1] | 0;
  $$0$in = $$01;
  while (1) {
   $$0 = $$0$in + -1 | 0;
   if (($$0$in | 0) <= 0) break;
   $7 = HEAP16[$0 + ($$0 << 1) >> 1] | 0;
   if ($4 << 16 >> 16 >= $7 << 16 >> 16) break;
   HEAP16[$0 + ($$0$in << 1) >> 1] = $7;
   $$0$in = $$0;
  }
  HEAP16[$0 + ($$0$in << 1) >> 1] = $4;
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _ec_dec_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$pre$phiZ2D = 0, $14 = 0, $17 = 0, $5 = 0, $7 = 0, $8 = 0;
 $5 = HEAP32[$0 + 36 >> 2] | 0;
 $7 = Math_imul($5, $3 - $2 | 0) | 0;
 $8 = $0 + 32 | 0;
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - $7;
 if (!$1) {
  $14 = $0 + 28 | 0;
  $$pre$phiZ2D = $14;
  $17 = (HEAP32[$14 >> 2] | 0) - $7 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $17;
  _ec_dec_normalize($0);
  return;
 } else {
  $$pre$phiZ2D = $0 + 28 | 0;
  $17 = Math_imul($5, $2 - $1 | 0) | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $17;
  _ec_dec_normalize($0);
  return;
 }
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function _user_bitrate_to_bitrate($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $10 = 0, $8 = 0;
 if (!$1) $$01 = (HEAP32[$0 + 144 >> 2] | 0) / 400 | 0; else $$01 = $1;
 $8 = HEAP32[$0 + 164 >> 2] | 0;
 switch ($8 | 0) {
 case -1e3:
  {
   $10 = HEAP32[$0 + 144 >> 2] | 0;
   $$0 = (($10 * 60 | 0) / ($$01 | 0) | 0) + (Math_imul($10, HEAP32[$0 + 112 >> 2] | 0) | 0) | 0;
   return $$0 | 0;
  }
 case -1:
  {
   $$0 = (Math_imul($2 << 3, HEAP32[$0 + 144 >> 2] | 0) | 0) / ($$01 | 0) | 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = $8;
   return $$0 | 0;
  }
 }
 return 0;
}

function _pad_669($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $$011 = $9;
   do {
    _out($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $9 & 255;
  } else $$0$lcssa = $9;
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _opus_fft_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0.0, $4 = 0.0, $6 = 0;
 $4 = +HEAPF32[$0 + 4 >> 2];
 if (($1 | 0) == ($2 | 0)) _celt_fatal(41978, 41962, 580);
 $6 = $0 + 44 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= (HEAP32[$0 >> 2] | 0)) break;
  $11 = +HEAPF32[$1 + ($$0 << 3) + 4 >> 2];
  HEAPF32[$2 + (HEAP16[(HEAP32[$6 >> 2] | 0) + ($$0 << 1) >> 1] << 3) >> 2] = $4 * +HEAPF32[$1 + ($$0 << 3) >> 2];
  HEAPF32[$2 + (HEAP16[(HEAP32[$6 >> 2] | 0) + ($$0 << 1) >> 1] << 3) + 4 >> 2] = $4 * $11;
  $$0 = $$0 + 1 | 0;
 }
 _opus_fft_impl($0, $2);
 return;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _ec_encode_bin($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $storemerge = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 >>> 15;
 if (!$1) {
  $storemerge = $4 - (Math_imul($5, 32768 - $2 | 0) | 0) | 0;
  HEAP32[$3 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 } else {
  $9 = $4 - (Math_imul($5, 32768 - $1 | 0) | 0) | 0;
  $10 = $0 + 32 | 0;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $9;
  $storemerge = Math_imul($5, $2 - $1 | 0) | 0;
  HEAP32[$3 >> 2] = $storemerge;
  _ec_enc_normalize($0);
  return;
 }
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function _silk_process_NLSFs_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp;
 _silk_process_NLSFs($0, $4, $2, $3);
 $5 = $0 + 4640 | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 2) break;
  $$01 = 0;
  while (1) {
   if (($$01 | 0) >= (HEAP32[$5 >> 2] | 0)) break;
   HEAPF32[$1 + ($$0 << 6) + ($$01 << 2) >> 2] = +(HEAP16[$4 + ($$0 << 5) + ($$01 << 1) >> 1] | 0) * .000244140625;
   $$01 = $$01 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _alg_unquant($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 var $11 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (($2 | 0) <= 0) _celt_fatal(42690, 42616, 367);
 if (($1 | 0) > 1) {
  $9 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($1 << 2) | 0) + 15 & -16) | 0;
  _normalise_residual($9, $0, $1, +_decode_pulses($9, $1, $2, $5), $6);
  _exp_rotation($0, $1, -1, $4, $2, $3);
  $11 = _extract_collapse_mask($9, $1, $4) | 0;
  STACKTOP = sp;
  return $11 | 0;
 } else _celt_fatal(42751, 42616, 368);
 return 0;
}

function _hysteresis_decision($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0, $$2 = 0, $15 = 0;
 $$0 = 0;
 while (1) {
  if ($$0 >>> 0 >= 21) break;
  if (+HEAPF32[272 + ($$0 << 2) >> 2] > $0) break;
  $$0 = $$0 + 1 | 0;
 }
 if (($$0 | 0) > ($1 | 0)) if (+HEAPF32[272 + ($1 << 2) >> 2] + +HEAPF32[368 + ($1 << 2) >> 2] > $0) {
  $$2 = $1;
  return $$2 | 0;
 }
 if (($$0 | 0) >= ($1 | 0)) {
  $$2 = $$0;
  return $$2 | 0;
 }
 $15 = $1 + -1 | 0;
 if (!(+HEAPF32[272 + ($15 << 2) >> 2] - +HEAPF32[368 + ($15 << 2) >> 2] < $0)) {
  $$2 = $$0;
  return $$2 | 0;
 }
 $$2 = $1;
 return $$2 | 0;
}

function _silk_bwexpander($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $20 = 0, $3 = 0, $4 = 0, $6 = 0;
 $3 = $2 + -65536 | 0;
 $4 = $1 + -1 | 0;
 $$0 = 0;
 $$01 = $2;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $6 = $0 + ($$0 << 1) | 0;
  HEAP16[$6 >> 1] = (((Math_imul($$01, HEAP16[$6 >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + (((Math_imul($$01, $3) | 0) >> 15) + 1 >> 1) | 0;
 }
 $20 = $0 + ($4 << 1) | 0;
 HEAP16[$20 >> 1] = (((Math_imul($$01, HEAP16[$20 >> 1] | 0) | 0) >>> 15) + 1 | 0) >>> 1;
 return;
}

function _silk_sigm_Q15($0) {
 $0 = $0 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $4 = 0;
 if (($0 | 0) < 0) {
  $2 = 0 - $0 | 0;
  if (($0 | 0) < -191) {
   $$0 = 0;
   return $$0 | 0;
  }
  $4 = $2 >> 5;
  $$0 = (HEAP32[27680 + ($4 << 2) >> 2] | 0) - (Math_imul(HEAP32[27712 + ($4 << 2) >> 2] << 16 >> 16, $2 & 31) | 0) | 0;
  return $$0 | 0;
 } else {
  if (($0 | 0) > 191) {
   $$0 = 32767;
   return $$0 | 0;
  }
  $14 = $0 >> 5;
  $$0 = (HEAP32[27744 + ($14 << 2) >> 2] | 0) + (Math_imul(HEAP32[27712 + ($14 << 2) >> 2] << 16 >> 16, $0 & 31) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _opus_packet_get_samples_per_frame($$val, $0) {
 $$val = $$val | 0;
 $0 = $0 | 0;
 var $$2 = 0, $15 = 0;
 if ($$val << 24 >> 24 < 0) {
  $$2 = ($0 << (($$val & 255) >>> 3 & 3) | 0) / 400 | 0;
  return $$2 | 0;
 }
 if (($$val & 96) == 96) if (!($$val & 8)) {
  $$2 = ($0 | 0) / 100 | 0;
  return $$2 | 0;
 } else {
  $$2 = ($0 | 0) / 50 | 0;
  return $$2 | 0;
 } else {
  $15 = ($$val & 255) >>> 3 & 3;
  if (($15 | 0) == 3) {
   $$2 = ($0 * 60 | 0) / 1e3 | 0;
   return $$2 | 0;
  } else {
   $$2 = ($0 << $15 | 0) / 100 | 0;
   return $$2 | 0;
  }
 }
 return 0;
}

function _decide_dtx_mode($0, $1, $2, $3, $4, $5, $6) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $12 = 0;
 do if (!$6) {
  if ($0 < .10000000149011612) if (+_compute_frame_energy($3, $4, $5) * 316.2300109863281 <= $2) break;
  HEAP32[$1 >> 2] = 0;
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $12 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $12 + 1;
 if (($12 | 0) <= 9) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($12 | 0) < 30) {
  $$0 = 1;
  return $$0 | 0;
 }
 HEAP32[$1 >> 2] = 10;
 $$0 = 0;
 return $$0 | 0;
}

function _silk_SQRT_APPROX_527($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_CLZ_FRAC_528($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$0 = $8 + ((Math_imul($8 >> 16, $12) | 0) + ((Math_imul($8 & 65535, $12) | 0) >> 16)) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_SQRT_APPROX_350($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_CLZ_FRAC_351($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$0 = $8 + ((Math_imul($8 >> 16, $12) | 0) + ((Math_imul($8 & 65535, $12) | 0) >> 16)) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_SQRT_APPROX_261($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_CLZ_FRAC_262($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$0 = $8 + ((Math_imul($8 >> 16, $12) | 0) + ((Math_imul($8 & 65535, $12) | 0) >> 16)) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _silk_SQRT_APPROX($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (($0 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _silk_CLZ_FRAC($0, $1, $2);
 $4 = HEAP32[$1 >> 2] | 0;
 $8 = (($4 & 1 | 0) == 0 ? 46214 : 32768) >>> ($4 >> 1);
 $12 = (Math_imul(HEAP32[$2 >> 2] << 16 >> 16, 13959168) | 0) >> 16;
 $$0 = $8 + ((Math_imul($8 >> 16, $12) | 0) + ((Math_imul($8 & 65535, $12) | 0) >> 16)) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _gen_toc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01 = 0, $$03 = 0, $$1$in = 0;
 $$01 = $1;
 $$03 = 0;
 while (1) {
  if (($$01 | 0) >= 400) break;
  $$01 = $$01 << 1;
  $$03 = $$03 + 1 | 0;
 }
 switch ($0 | 0) {
 case 1e3:
  {
   $$1$in = ($2 << 5) + 96 & 224 | ($$03 << 3) + -16;
   break;
  }
 case 1002:
  {
   $$1$in = (($2 | 0) < 1102 ? 0 : ($2 << 5) + 64 & 96) | $$03 << 3 | 128;
   break;
  }
 default:
  $$1$in = $2 << 4 | ($$03 << 3) + 240 | 96;
 }
 return ($$1$in | (($3 | 0) == 2 & 1) << 2) & 255 | 0;
}

function _silk_LPC_inverse_pred_gain_c($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp;
 $$01 = 0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($1 | 0)) break;
  $6 = HEAP16[$0 + ($$02 << 1) >> 1] | 0;
  HEAP32[$2 + ($$02 << 2) >> 2] = $6 << 12;
  $$01 = $$01 + $6 | 0;
  $$02 = $$02 + 1 | 0;
 }
 if (($$01 | 0) > 4095) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _LPC_inverse_pred_gain_QA_c($2, $1) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _compute_redundancy_bytes($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $19 = 0, $5 = 0, $spec$select = 0;
 $5 = ($3 * 40 | 0) + 20 | 0;
 $10 = (((Math_imul($5, 200 - $2 | 0) | 0) + $1 | 0) * 3 | 0) / 3200 | 0;
 $19 = ((((($0 << 3) - ($5 << 1) | 0) * 240 | 0) / ((48e3 / ($2 | 0) | 0) + 240 | 0) | 0) + $5 | 0) / 8 | 0;
 $spec$select = ($10 | 0) < ($19 | 0) ? $10 : $19;
 if (($spec$select | 0) > ($3 << 3 | 4 | 0)) return (($spec$select | 0) < 257 ? $spec$select : 257) | 0; else return 0;
 return 0;
}

function _multiply_frac($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0;
 $4 = ($1 >>> 0) / ($3 >>> 0) | 0;
 $5 = ($1 >>> 0) % ($3 >>> 0) | 0;
 $6 = 4294967295 / ($2 >>> 0) | 0;
 if ($5 >>> 0 > $6 >>> 0 | $4 >>> 0 > $6 >>> 0) {
  $$0 = 5;
  return $$0 | 0;
 }
 $9 = Math_imul($4, $2) | 0;
 $11 = ((Math_imul($5, $2) | 0) >>> 0) / ($3 >>> 0) | 0;
 if ($9 >>> 0 > ~$11 >>> 0) {
  $$0 = 5;
  return $$0 | 0;
 }
 HEAP32[$0 >> 2] = $11 + $9;
 $$0 = 0;
 return $$0 | 0;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[37536 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function _combine_and_check($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $5 = 0, label = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) {
   $$0 = 0;
   label = 5;
   break;
  }
  $5 = $$01 << 1;
  $11 = (HEAP32[$1 + ($5 << 2) >> 2] | 0) + (HEAP32[$1 + (($5 | 1) << 2) >> 2] | 0) | 0;
  if (($11 | 0) > ($2 | 0)) {
   $$0 = 1;
   label = 5;
   break;
  }
  HEAP32[$0 + ($$01 << 2) >> 2] = $11;
  $$01 = $$01 + 1 | 0;
 }
 if ((label | 0) == 5) return $$0 | 0;
 return 0;
}

function _tansig_approx($0) {
 $0 = +$0;
 var $$0 = 0.0, $$01 = 0.0, $12 = 0.0, $14 = 0.0, $4 = 0, $9 = 0;
 if (!($0 < 8.0)) {
  $$0 = 1.0;
  return +$$0;
 }
 if (!($0 > -8.0)) {
  $$0 = -1.0;
  return +$$0;
 }
 if ($0 != $0 | 0.0 != 0.0) {
  $$0 = 0.0;
  return +$$0;
 }
 $4 = $0 < 0.0;
 $$01 = $4 ? -$0 : $0;
 $9 = ~~+Math_floor(+($$01 * 25.0 + .5));
 $12 = $$01 - +($9 | 0) * .03999999910593033;
 $14 = +HEAPF32[29632 + ($9 << 2) >> 2];
 $$0 = ($4 ? -1.0 : 1.0) * ($14 + $12 * (1.0 - $14 * $14) * (1.0 - $14 * $12));
 return +$$0;
}

function _silk_LTP_scale_ctrl_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $13 = 0.0, $17 = 0, $20 = 0;
 if (!$2) {
  $13 = +HEAPF32[$1 + 708 >> 2] * +((HEAP32[$0 + 4616 >> 2] | 0) + (HEAP32[$0 + 5744 >> 2] | 0) | 0) * .10000000149011612;
  if ($13 > 2.0) $17 = 2; else if ($13 < 0.0) $17 = 0; else $17 = ~~$13;
  HEAP8[$0 + 4769 >> 0] = $17;
  $20 = $17;
 } else {
  HEAP8[$0 + 4769 >> 0] = 0;
  $20 = 0;
 }
 HEAPF32[$1 + 224 >> 2] = +(HEAP16[40164 + ($20 << 24 >> 24 << 1) >> 1] | 0) * .00006103515625;
 return;
}

function _silk_interpolate($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $11 = 0, $7 = 0;
 if (($3 | 0) <= -1) _celt_fatal(44274, 44306, 45);
 if (($3 | 0) >= 5) _celt_fatal(44325, 44306, 46);
 $7 = $3 << 16 >> 16;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  $11 = HEAPU16[$1 + ($$0 << 1) >> 1] | 0;
  HEAP16[$0 + ($$0 << 1) >> 1] = ((Math_imul((HEAPU16[$2 + ($$0 << 1) >> 1] | 0) - $11 << 16 >> 16, $7) | 0) >>> 2) + $11;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_A2NLSF_trans_poly($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0, $15 = 0, $7 = 0;
 $$01 = 2;
 while (1) {
  if (($$01 | 0) > ($1 | 0)) break;
  $$0 = $1;
  while (1) {
   if (($$0 | 0) <= ($$01 | 0)) break;
   $7 = $0 + ($$0 + -2 << 2) | 0;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$0 + ($$0 << 2) >> 2] | 0);
   $$0 = $$0 + -1 | 0;
  }
  $15 = $0 + ($$01 + -2 << 2) | 0;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$0 + ($$01 << 2) >> 2] << 1);
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 if (!(_isdigit($2 << 24 >> 24) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  $12 = $1;
  $8 = $2;
  while (1) {
   $10 = ($$04 * 10 | 0) + -48 + ($8 << 24 >> 24) | 0;
   $12 = $12 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   $8 = HEAP8[$12 >> 0] | 0;
   if (!(_isdigit($8 << 24 >> 24) | 0)) {
    $$0$lcssa = $10;
    break;
   } else $$04 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function _ec_dec_normalize($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = $0 + 28 | 0;
 $2 = $0 + 20 | 0;
 $3 = $0 + 40 | 0;
 $4 = $0 + 32 | 0;
 while (1) {
  $5 = HEAP32[$1 >> 2] | 0;
  if ($5 >>> 0 >= 8388609) break;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 8;
  HEAP32[$1 >> 2] = $5 << 8;
  $10 = HEAP32[$3 >> 2] | 0;
  $11 = _ec_read_byte($0) | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$4 >> 2] = (($10 << 8 | $11) >>> 1 & 255 | HEAP32[$4 >> 2] << 8 & 2147483392) ^ 255;
 }
 return;
}

function _ec_dec_icdf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $4 >>> $2;
 $$0 = -1;
 $$01 = $4;
 while (1) {
  $$0 = $$0 + 1 | 0;
  $12 = Math_imul($7, HEAPU8[$1 + $$0 >> 0] | 0) | 0;
  if ($6 >>> 0 >= $12 >>> 0) break; else $$01 = $12;
 }
 HEAP32[$5 >> 2] = $6 - $12;
 HEAP32[$3 >> 2] = $$01 - $12;
 _ec_dec_normalize($0);
 return $$0 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _silk_InitEncoder($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01 = 0, label = 0;
 _memset($0 | 0, 0, 20216) | 0;
 $$01 = 0;
 while (1) {
  if ($$01 >>> 0 >= 2) break;
  if (_silk_init_encoder($0 + ($$01 * 10064 | 0) | 0, $1) | 0) {
   label = 4;
   break;
  }
  $$01 = $$01 + 1 | 0;
 }
 if ((label | 0) == 4) _celt_fatal(48340, 43526, 85);
 HEAP32[$0 + 20192 >> 2] = 1;
 HEAP32[$0 + 20196 >> 2] = 1;
 if (!(_silk_QueryEncoder($0, $2) | 0)) return 0; else _celt_fatal(48340, 43526, 94);
 return 0;
}

function _encode_pulses($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $5 = 0, $9 = 0;
 if (($2 | 0) > 0) {
  $5 = _icwrs($1, $0) | 0;
  $9 = ($1 | 0) > ($2 | 0);
  $13 = $2 + 1 | 0;
  _ec_enc_uint($3, $5, (HEAP32[(HEAP32[592 + ((($1 | 0) < ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) + (($9 ? $1 : $2) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + (($9 ? $13 : $1) << 2) >> 2] | 0) + ((($13 | 0) < ($1 | 0) ? $1 : $13) << 2) >> 2] | 0) | 0);
  return;
 } else _celt_fatal(41688, 41711, 459);
}

function _silk_CNG_exc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $9 = 0;
 $$0 = 255;
 while (1) {
  if (($$0 | 0) <= ($2 | 0)) break;
  $$0 = $$0 >> 1;
 }
 $$01 = 0;
 $$02 = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $9 = (Math_imul($$02, 196314165) | 0) + 907633515 | 0;
  HEAP32[$0 + ($$01 << 2) >> 2] = HEAP32[$1 + (($9 >> 24 & $$0) << 2) >> 2];
  $$01 = $$01 + 1 | 0;
  $$02 = $9;
 }
 HEAP32[$3 >> 2] = $$02;
 return;
}

function _silk_log2lin($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pn = 0, $3 = 0, $4 = 0, $5 = 0;
 if (($0 | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) > 3966) {
  $$0 = 2147483647;
  return $$0 | 0;
 }
 $3 = $0 >> 7;
 $4 = 1 << $3;
 $5 = $0 & 127;
 if (($0 | 0) < 2048) $$pn = $5 + ((Math_imul(Math_imul($5, 128 - $5 | 0) | 0, -174) | 0) >> 16) << $3 >> 7; else $$pn = Math_imul($4 >> 7, $5 + ((Math_imul(Math_imul($5, 128 - $5 | 0) | 0, -174) | 0) >> 16) | 0) | 0;
 $$0 = $4 + $$pn | 0;
 return $$0 | 0;
}

function _ec_dec_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $9 = 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 9;
 HEAP32[$0 + 24 >> 2] = 0;
 $9 = $0 + 28 | 0;
 HEAP32[$9 >> 2] = 128;
 $10 = _ec_read_byte($0) | 0;
 HEAP32[$0 + 40 >> 2] = $10;
 HEAP32[$0 + 32 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 - ($10 >> 1);
 HEAP32[$0 + 44 >> 2] = 0;
 _ec_dec_normalize($0);
 return;
}

function _dual_inner_prod_c_119($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $8 = 0.0;
 $$0 = 0.0;
 $$01 = 0.0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($3 | 0)) break;
  $8 = +HEAPF32[$0 + ($$02 << 2) >> 2];
  $$0 = $$0 + $8 * +HEAPF32[$2 + ($$02 << 2) >> 2];
  $$01 = $$01 + $8 * +HEAPF32[$1 + ($$02 << 2) >> 2];
  $$02 = $$02 + 1 | 0;
 }
 HEAPF32[$4 >> 2] = $$01;
 HEAPF32[$5 >> 2] = $$0;
 return;
}

function _opus_encoder_get_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (($0 + -1 | 0) >>> 0 > 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_silk_Get_Encoder_Size($1) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = _align_662(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $6;
 $7 = _celt_encoder_get_size($0) | 0;
 $$0 = (_align_662(18136) | 0) + $6 + $7 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _dual_inner_prod_c($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $8 = 0.0;
 $$0 = 0.0;
 $$01 = 0.0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($3 | 0)) break;
  $8 = +HEAPF32[$0 + ($$02 << 2) >> 2];
  $$0 = $$0 + $8 * +HEAPF32[$2 + ($$02 << 2) >> 2];
  $$01 = $$01 + $8 * +HEAPF32[$1 + ($$02 << 2) >> 2];
  $$02 = $$02 + 1 | 0;
 }
 HEAPF32[$4 >> 2] = $$01;
 HEAPF32[$5 >> 2] = $$0;
 return;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _opus_decoder_get_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (($0 + -1 | 0) >>> 0 > 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_silk_Get_Decoder_Size($1) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = _align(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $6;
 $7 = _celt_decoder_get_size($0) | 0;
 $$0 = (_align(88) | 0) + $6 + $7 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _sinc($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $13 = 0.0, $16 = 0.0, $21 = 0.0, $6 = 0.0, $8 = 0.0;
 $6 = +Math_abs(+$1);
 if ($6 < 1.0e-06) {
  $$0 = $0;
  return +$$0;
 }
 $8 = +($2 | 0);
 if ($8 * .5 < $6) {
  $$0 = 0.0;
  return +$$0;
 }
 $13 = $1 * $0 * 3.141592653589793;
 $16 = +Math_sin(+$13) * $0 / $13;
 $21 = +Math_abs(+($1 * 2.0 / $8));
 $$0 = $16 * +_compute_func($21, HEAP32[$3 >> 2] | 0, HEAP32[$3 + 4 >> 2] | 0);
 return +$$0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function _parse_size($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0;
 if (($1 | 0) < 1) {
  HEAP16[$2 >> 1] = -1;
  $$0 = -1;
  return $$0 | 0;
 }
 $4 = HEAP8[$0 >> 0] | 0;
 if (($4 & 255) < 252) {
  HEAP16[$2 >> 1] = $4 & 255;
  $$0 = 1;
  return $$0 | 0;
 }
 if (($1 | 0) < 2) {
  HEAP16[$2 >> 1] = -1;
  $$0 = -1;
  return $$0 | 0;
 } else {
  HEAP16[$2 >> 1] = ((HEAPU8[$0 + 1 >> 0] | 0) << 2) + ($4 & 255);
  $$0 = 2;
  return $$0 | 0;
 }
 return 0;
}

function _silk_setup_LBRR($0, $$0$11$val) {
 $0 = $0 | 0;
 $$0$11$val = $$0$11$val | 0;
 var $1 = 0, $2 = 0, $7 = 0;
 $1 = $0 + 6092 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $$0$11$val;
 if (!$$0$11$val) return 0;
 if (!$2) {
  HEAP32[$0 + 6096 >> 2] = 7;
  return 0;
 } else {
  $7 = HEAP32[$0 + 4616 >> 2] | 0;
  HEAP32[$0 + 6096 >> 2] = _silk_max_int_393(7 - ((($7 >> 16) * 26214 | 0) + ((($7 & 65535) * 26214 | 0) >>> 16)) | 0) | 0;
  return 0;
 }
 return 0;
}

function _bitexact_log2tan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $21 = 0, $3 = 0, $5 = 0;
 $3 = 32 - (Math_clz32($1 | 0) | 0) | 0;
 $5 = 32 - (Math_clz32($0 | 0) | 0) | 0;
 $12 = $0 << 15 - $5 << 16 >> 16;
 $21 = $1 << 15 - $3 << 16 >> 16;
 return ($5 - $3 << 11) + ((Math_imul($12, ((Math_imul($12, -2597) | 0) + 16384 >> 15) + 7932 | 0) | 0) + 16384 >> 15) - ((Math_imul($21, ((Math_imul($21, -2597) | 0) + 16384 >> 15) + 7932 | 0) | 0) + 16384 >> 15) | 0;
}

function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _silk_PLC($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $4 = 0, $6 = 0;
 $4 = $0 + 2316 | 0;
 $6 = $0 + 4252 | 0;
 if ((HEAP32[$4 >> 2] | 0) != (HEAP32[$6 >> 2] | 0)) {
  _silk_PLC_Reset($0);
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 }
 if (!$3) {
  _silk_PLC_update($0, $1);
  return;
 } else {
  _silk_PLC_conceal($0, $1, $2);
  $11 = $0 + 4160 | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  return;
 }
}

function _isqrt32($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = 32 - (Math_clz32($0 | 0) | 0) + -1 >> 1;
 $$0 = $0;
 $$01 = 1 << $4;
 $$02 = 0;
 $$04 = $4;
 while (1) {
  $8 = ($$02 << 1) + $$01 << $$04;
  $9 = $$0 >>> 0 < $8 >>> 0;
  $$02 = $$02 + ($9 ? 0 : $$01) | 0;
  if (($$04 | 0) <= 0) break; else {
   $$0 = $$0 - ($9 ? 0 : $8) | 0;
   $$01 = $$01 >>> 1;
   $$04 = $$04 + -1 | 0;
  }
 }
 return $$02 | 0;
}

function _ec_enc_uint($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $4 = 0, $6 = 0, $8 = 0;
 if ($2 >>> 0 <= 1) _celt_fatal(41784, 41808, 180);
 $4 = $2 + -1 | 0;
 $6 = 32 - (Math_clz32($4 | 0) | 0) | 0;
 if (($6 | 0) > 8) {
  $8 = $6 + -8 | 0;
  $11 = $1 >>> $8;
  _ec_encode($0, $11, $11 + 1 | 0, ($4 >>> $8) + 1 | 0);
  _ec_enc_bits($0, (1 << $8) + -1 & $1, $8);
  return;
 } else {
  _ec_encode($0, $1, $1 + 1 | 0, $2);
  return;
 }
}

function _ec_enc_normalize($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = $0 + 28 | 0;
 $2 = $0 + 32 | 0;
 $3 = $0 + 20 | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 while (1) {
  if ($4 >>> 0 >= 8388609) break;
  _ec_enc_carry_out($0, (HEAP32[$2 >> 2] | 0) >>> 23);
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 8 & 2147483392;
  $12 = HEAP32[$1 >> 2] << 8;
  HEAP32[$1 >> 2] = $12;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
  $4 = $12;
 }
 return;
}

function _decode_pulses($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $7 = 0;
 $7 = ($1 | 0) > ($2 | 0);
 $11 = $2 + 1 | 0;
 return +(+_cwrsi($1, $2, _ec_dec_uint($3, (HEAP32[(HEAP32[592 + ((($1 | 0) < ($2 | 0) ? $1 : $2) << 2) >> 2] | 0) + (($7 ? $1 : $2) << 2) >> 2] | 0) + (HEAP32[(HEAP32[592 + (($7 ? $11 : $1) << 2) >> 2] | 0) + ((($11 | 0) < ($1 | 0) ? $1 : $11) << 2) >> 2] | 0) | 0) | 0, $0));
}

function _silk_float2short_array_610($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$in = 0, $6 = 0, $spec$select = 0;
 $$0$in = $2;
 while (1) {
  $$0 = $$0$in + -1 | 0;
  if (($$0$in | 0) <= 0) break;
  $6 = _lrintf(+HEAPF32[$1 + ($$0 << 2) >> 2]) | 0;
  $spec$select = ($6 | 0) > -32768 ? $6 : -32768;
  HEAP16[$0 + ($$0 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
  $$0$in = $$0;
 }
 return;
}

function _decode_split($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $storemerge = 0;
 if (($3 | 0) > 0) {
  $10 = _ec_dec_icdf($2, $4 + (HEAPU8[26192 + $3 >> 0] | 0) | 0, 8) | 0;
  HEAP16[$0 >> 1] = $10;
  $storemerge = $3 - $10 & 65535;
  HEAP16[$1 >> 1] = $storemerge;
  return;
 } else {
  HEAP16[$0 >> 1] = 0;
  $storemerge = 0;
  HEAP16[$1 >> 1] = $storemerge;
  return;
 }
}

function _silk_float2short_array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$in = 0, $6 = 0, $spec$select = 0;
 $$0$in = $2;
 while (1) {
  $$0 = $$0$in + -1 | 0;
  if (($$0$in | 0) <= 0) break;
  $6 = _lrintf(+HEAPF32[$1 + ($$0 << 2) >> 2]) | 0;
  $spec$select = ($6 | 0) > -32768 ? $6 : -32768;
  HEAP16[$0 + ($$0 << 1) >> 1] = ($spec$select | 0) < 32767 ? $spec$select : 32767;
  $$0$in = $$0;
 }
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _ec_write_byte_at_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $8 = 0;
 $4 = $0 + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if (((HEAP32[$0 + 24 >> 2] | 0) + $5 | 0) >>> 0 >= $8 >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $11 = HEAP32[$0 >> 2] | 0;
 $12 = $5 + 1 | 0;
 HEAP32[$4 >> 2] = $12;
 HEAP8[$11 + ($8 - $12) >> 0] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function _stereo_split($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $6 = 0.0, $7 = 0, $9 = 0.0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($2 | 0)) break;
  $4 = $0 + ($$0 << 2) | 0;
  $6 = +HEAPF32[$4 >> 2] * .7071067690849304;
  $7 = $1 + ($$0 << 2) | 0;
  $9 = +HEAPF32[$7 >> 2] * .7071067690849304;
  HEAPF32[$4 >> 2] = $6 + $9;
  HEAPF32[$7 >> 2] = $9 - $6;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _silk_bwexpander_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$0 = 0.0, $$01 = 0, $10 = 0, $3 = 0, $5 = 0;
 $3 = $1 + -1 | 0;
 $$0 = $2;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $5 = $0 + ($$01 << 2) | 0;
  HEAPF32[$5 >> 2] = +HEAPF32[$5 >> 2] * $$0;
  $$0 = $$0 * $2;
  $$01 = $$01 + 1 | 0;
 }
 $10 = $0 + ($3 << 2) | 0;
 HEAPF32[$10 >> 2] = +HEAPF32[$10 >> 2] * $$0;
 return;
}

function _ec_enc_shrink($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $5 = 0, $8 = 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 if (((HEAP32[$0 + 24 >> 2] | 0) + $5 | 0) >>> 0 > $1 >>> 0) _celt_fatal(41886, 41808, 238); else {
  $8 = HEAP32[$0 >> 2] | 0;
  $10 = 0 - $5 | 0;
  $12 = $0 + 4 | 0;
  _memmove($8 + $1 + $10 | 0, $8 + (HEAP32[$12 >> 2] | 0) + $10 | 0, $5 | 0) | 0;
  HEAP32[$12 >> 2] = $1;
  return;
 }
}

function _ec_enc_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 33;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = -2147483648;
 HEAP32[$0 + 40 >> 2] = -1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = 0;
 return;
}

function _cubic_coef($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $11 = 0.0, $15 = 0.0, $5 = 0.0, $6 = 0.0, $8 = 0.0;
 $5 = $0 * .16666999459266663 * $0 * $0;
 $6 = $0 * -.16666999459266663 + $5;
 HEAPF32[$1 >> 2] = $6;
 $8 = $0 * .5 * $0;
 $11 = $8 + $0 - $8 * $0;
 HEAPF32[$1 + 4 >> 2] = $11;
 $15 = $0 * -.3333300054073334 + $8 - $5;
 HEAPF32[$1 + 12 >> 2] = $15;
 HEAPF32[$1 + 8 >> 2] = 1.0 - $6 - $11 - $15;
 return;
}

function _ec_dec_bit_logp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = $0 + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 32 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3 >>> $1;
 $7 = $5 >>> 0 < $6 >>> 0;
 if ($7) $11 = $6; else {
  HEAP32[$4 >> 2] = $5 - $6;
  $11 = $3 - $6 | 0;
 }
 HEAP32[$2 >> 2] = $11;
 _ec_dec_normalize($0);
 return $7 & 1 | 0;
}

function _silk_CNG_Reset($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$01 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 2340 >> 2] | 0;
 $4 = 32767 / ($2 + 1 | 0) | 0;
 $$0 = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $6 = $$0 + $4 | 0;
  HEAP16[$0 + 4052 + ($$01 << 1) >> 1] = $6;
  $$0 = $6;
  $$01 = $$01 + 1 | 0;
 }
 HEAP32[$0 + 4148 >> 2] = 0;
 HEAP32[$0 + 4152 >> 2] = 3176576;
 return;
}

function _silk_A2NLSF_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($2 | 0)) break;
  HEAP32[$3 + ($$0 << 2) >> 2] = _silk_float2int(+HEAPF32[$1 + ($$0 << 2) >> 2] * 65536.0) | 0;
  $$0 = $$0 + 1 | 0;
 }
 _silk_A2NLSF($0, $3, $2);
 STACKTOP = sp;
 return;
}

function _silk_lin2log($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 _silk_CLZ_FRAC_421($0, $1, $2);
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = Math_imul($3, 128 - $3 | 0) | 0;
 STACKTOP = sp;
 return $3 + ((($5 >> 16) * 179 | 0) + ((($5 & 65535) * 179 | 0) >>> 16)) + (3968 - (HEAP32[$1 >> 2] << 7)) | 0;
}

function _silk_NLSF2A_FLP($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 _silk_NLSF2A($3, $1, $2);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($2 | 0)) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +(HEAP16[$3 + ($$0 << 1) >> 1] | 0) * .000244140625;
  $$0 = $$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _opus_packet_get_nb_frames($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 L1 : do if (($1 | 0) < 1) $$0 = -1; else {
  switch (HEAP8[$0 >> 0] & 3) {
  case 0:
   {
    $$0 = 1;
    break L1;
    break;
   }
  case 3:
   break;
  default:
   {
    $$0 = 2;
    break L1;
   }
  }
  if (($1 | 0) < 2) $$0 = -4; else $$0 = HEAP8[$0 + 1 >> 0] & 63;
 } while (0);
 return $$0 | 0;
}

function _silk_autocorrelation_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $spec$select = 0;
 $spec$select = ($3 | 0) > ($2 | 0) ? $2 : $3;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($spec$select | 0)) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +_silk_inner_product_FLP($1, $1 + ($$0 << 2) | 0, $2 - $$0 | 0);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _celt_maxabs16_672($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $10 = 0.0, $4 = 0.0;
 $$0 = 0.0;
 $$01 = 0.0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($1 | 0)) break;
  $4 = +HEAPF32[$0 + ($$02 << 2) >> 2];
  $$0 = $$0 < $4 ? $$0 : $4;
  $$01 = $$01 > $4 ? $$01 : $4;
  $$02 = $$02 + 1 | 0;
 }
 $10 = -$$0;
 return +($$01 > $10 ? $$01 : $10);
}

function _renormalise_vector($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$0 = 0, $$01 = 0, $7 = 0.0;
 $7 = 1.0 / +Math_sqrt(+(+_celt_inner_prod_c_174($0, $0, $1) + 1.0000000036274937e-15)) * $2;
 $$0 = $0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($1 | 0)) break;
  HEAPF32[$$0 >> 2] = $7 * +HEAPF32[$$0 >> 2];
  $$0 = $$0 + 4 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _ec_enc_bit_logp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 >>> $2;
 $6 = $4 - $5 | 0;
 if (!$1) $11 = $6; else {
  $8 = $0 + 32 | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $6;
  $11 = $5;
 }
 HEAP32[$3 >> 2] = $11;
 _ec_enc_normalize($0);
 return;
}

function _celt_maxabs16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0, $10 = 0.0, $4 = 0.0;
 $$0 = 0.0;
 $$01 = 0.0;
 $$02 = 0;
 while (1) {
  if (($$02 | 0) >= ($1 | 0)) break;
  $4 = +HEAPF32[$0 + ($$02 << 2) >> 2];
  $$0 = $$0 < $4 ? $$0 : $4;
  $$01 = $$01 > $4 ? $$01 : $4;
  $$02 = $$02 + 1 | 0;
 }
 $10 = -$$0;
 return +($$01 > $10 ? $$01 : $10);
}

function _opus_packet_get_bandwidth($$val) {
 $$val = $$val | 0;
 var $$2 = 0, $3 = 0;
 if ($$val << 24 >> 24 < 0) {
  $3 = ($$val & 255) >>> 5 & 3;
  return (($3 | 0) == 0 ? 1101 : $3 + 1102 | 0) | 0;
 }
 if (($$val & 96) == 96) {
  $$2 = ($$val & 255) >>> 4 & 1 | 1104;
  return $$2 | 0;
 } else {
  $$2 = (($$val & 255) >>> 5 & 3) + 1101 | 0;
  return $$2 | 0;
 }
 return 0;
}

function _ec_write_byte($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 + (HEAP32[$0 + 8 >> 2] | 0) | 0) >>> 0 >= (HEAP32[$0 + 4 >> 2] | 0) >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $11 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + 1;
 HEAP8[$11 + $3 >> 0] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function _median_of_3($0) {
 $0 = $0 | 0;
 var $$ = 0.0, $$0 = 0.0, $$5 = 0.0, $1 = 0.0, $3 = 0.0, $4 = 0, $6 = 0.0;
 $1 = +HEAPF32[$0 >> 2];
 $3 = +HEAPF32[$0 + 4 >> 2];
 $4 = $1 > $3;
 $$ = $4 ? $3 : $1;
 $$5 = $4 ? $1 : $3;
 $6 = +HEAPF32[$0 + 8 >> 2];
 if ($$5 < $6) {
  $$0 = $$5;
  return +$$0;
 }
 if ($$ < $6) {
  $$0 = $6;
  return +$$0;
 }
 $$0 = $$;
 return +$$0;
}

function _bitexact_cos($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $6 = 0;
 $1 = $0 << 16 >> 16;
 $4 = ((Math_imul($1, $1) | 0) + 4096 | 0) >>> 13;
 $6 = $4 << 16 >> 16;
 return 32767 - $4 + (((Math_imul($6, (((Math_imul($6, ((Math_imul($6, -626) | 0) + 16384 >> 15) + 8277 | 0) | 0) + 16384 | 0) >>> 15 << 16) + -501415936 >> 16) | 0) + 16384 | 0) >>> 15) + 1 & 65535 | 0;
}

function _ec_read_byte_from_end($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 if ($2 >>> 0 >= $4 >>> 0) {
  $12 = 0;
  return $12 | 0;
 }
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $2 + 1 | 0;
 HEAP32[$1 >> 2] = $7;
 $12 = HEAPU8[$6 + ($4 - $7) >> 0] | 0;
 return $12 | 0;
}

function _silk_inner_prod_aligned_scale($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($3 | 0)) break;
  $$0 = $$0 + ((Math_imul(HEAP16[$0 + ($$01 << 1) >> 1] | 0, HEAP16[$1 + ($$01 << 1) >> 1] | 0) | 0) >> $2) | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $$0 | 0;
}

function _ec_tell_frac($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = 32 - (Math_clz32($$0$7$val | 0) | 0) | 0;
 $4 = $$0$7$val >>> ($2 + -16 | 0);
 $6 = ($4 >>> 12) + -8 | 0;
 return ($$0$5$val << 3) - (($2 << 3) + ($6 + ($4 >>> 0 > (HEAP32[5744 + ($6 << 2) >> 2] | 0) >>> 0 & 1))) | 0;
}

function _pulses2bits($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $22 = 0;
 if (!$3) {
  $22 = 0;
  return $22 | 0;
 }
 $22 = (HEAPU8[(HEAP32[$0 + 100 >> 2] | 0) + (HEAP16[(HEAP32[$0 + 96 >> 2] | 0) + ((Math_imul($2 + 1 | 0, HEAP32[$0 + 8 >> 2] | 0) | 0) + $1 << 1) >> 1] | 0) + $3 >> 0] | 0) + 1 | 0;
 return $22 | 0;
}

function _warped_gain($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0, $8 = 0.0;
 $$0 = +HEAPF32[$0 + ($2 + -1 << 2) >> 2];
 $$01 = $2 + -2 | 0;
 while (1) {
  $8 = $$0 * $1;
  if (($$01 | 0) <= -1) break;
  $$0 = +HEAPF32[$0 + ($$01 << 2) >> 2] - $8;
  $$01 = $$01 + -1 | 0;
 }
 return +(1.0 / ($8 + 1.0));
}

function _celt_encoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $5 = 0;
 $5 = _opus_custom_encoder_init_arch($0, _opus_custom_mode_create() | 0, $2, $3) | 0;
 if ($5 | 0) {
  $$0 = $5;
  return $$0 | 0;
 }
 HEAP32[$0 + 28 >> 2] = _resampling_factor($1) | 0;
 $$0 = 0;
 return $$0 | 0;
}

function _celt_fatal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $1;
 HEAP32[$vararg_buffer + 4 >> 2] = $2;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 _fprintf(0, 0, $vararg_buffer);
 _abort();
}

function _silk_InitDecoder($0) {
 $0 = $0 | 0;
 var $$01 = 0, $3 = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) == 2) break;
  _silk_init_decoder($0 + ($$01 * 4264 | 0) | 0);
  $$01 = $$01 + 1 | 0;
 }
 $3 = $0 + 8528 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$0 + 8548 >> 2] = 0;
 return 0;
}

function _celt_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0;
 $4 = _opus_custom_decoder_init($0, _opus_custom_mode_create() | 0, $2) | 0;
 if (!$4) {
  $6 = _resampling_factor($1) | 0;
  HEAP32[$0 + 16 >> 2] = $6;
  return (($6 | 0) == 0) << 31 >> 31 | 0;
 } else return $4 | 0;
 return 0;
}

function _silk_corrVector_FLP($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = $0 + 16 | 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) == 5) break;
  HEAPF32[$3 + ($$01 << 2) >> 2] = +_silk_inner_product_FLP($$0, $1, $2);
  $$0 = $$0 + -4 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return;
}

function _normalise_residual($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $7 = 0.0;
 $7 = 1.0 / +Math_sqrt(+$3) * $4;
 $$0 = 0;
 do {
  HEAPF32[$1 + ($$0 << 2) >> 2] = $7 * +(HEAP32[$0 + ($$0 << 2) >> 2] | 0);
  $$0 = $$0 + 1 | 0;
 } while (($$0 | 0) < ($2 | 0));
 return;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_560(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _celt_plc_pitch_search($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 $2 = sp + 4096 | 0;
 $3 = sp;
 _pitch_downsample($0, $3, 2048, $1);
 _pitch_search($3 + 1440 | 0, $3, 1328, 620, $2);
 STACKTOP = sp;
 return 720 - (HEAP32[$2 >> 2] | 0) | 0;
}

function _silk_init_encoder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 _memset($0 | 0, 0, 10064) | 0;
 HEAP32[$0 + 5092 >> 2] = $1;
 $5 = ((_silk_lin2log(3932160) | 0) << 8) + -524288 | 0;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $5;
 HEAP32[$0 + 4664 >> 2] = 1;
 return _silk_VAD_Init($0 + 36 | 0) | 0;
}

function _opus_encode_float($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $9 = 0;
 $9 = _frame_size_select($2, HEAP32[$0 + 156 >> 2] | 0, HEAP32[$0 + 144 >> 2] | 0) | 0;
 return _opus_encode_native($0, $1, $9, $3, $4, 24, $1, $2, -2, HEAP32[$0 + 112 >> 2] | 0, 1, 1) | 0;
}

function _combine_pulses($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($2 | 0)) break;
  $4 = $$0 << 1;
  HEAP32[$0 + ($$0 << 2) >> 2] = (HEAP32[$1 + ($4 << 2) >> 2] | 0) + (HEAP32[$1 + (($4 | 1) << 2) >> 2] | 0);
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function _l1_metric($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($1 | 0)) break;
  $$0 = $$0 + +Math_abs(+(+HEAPF32[$0 + ($$01 << 2) >> 2]));
  $$01 = $$01 + 1 | 0;
 }
 return +($$0 + +($2 | 0) * $3 * $$0);
}

function _ec_read_byte($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, $6 = 0;
 $1 = $0 + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 >= (HEAP32[$0 + 4 >> 2] | 0) >>> 0) {
  $11 = 0;
  return $11 | 0;
 }
 $6 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + 1;
 $11 = HEAPU8[$6 + $2 >> 0] | 0;
 return $11 | 0;
}

function _celt_inner_prod_c_666($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = $$0 + +HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _celt_inner_prod_c_174($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = $$0 + +HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _celt_inner_prod_c_111($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = $$0 + +HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _celt_inner_prod_c_23($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = $$0 + +HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _speex_resampler_destroy($0) {
 $0 = $0 | 0;
 _speex_free_821(HEAP32[$0 + 72 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 76 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 60 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 68 >> 2] | 0);
 _speex_free_821(HEAP32[$0 + 64 >> 2] | 0);
 _speex_free_821($0);
 return;
}

function _celt_inner_prod_c($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$01 = 0;
 $$0 = 0.0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($2 | 0)) break;
  $$0 = $$0 + +HEAPF32[$0 + ($$01 << 2) >> 2] * +HEAPF32[$1 + ($$01 << 2) >> 2];
  $$01 = $$01 + 1 | 0;
 }
 return +$$0;
}

function _silk_short2float_array_611($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$in = 0;
 $$0$in = $2;
 while (1) {
  $$0 = $$0$in + -1 | 0;
  if (($$0$in | 0) <= 0) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +(HEAP16[$1 + ($$0 << 1) >> 1] | 0);
  $$0$in = $$0;
 }
 return;
}

function _silk_short2float_array_542($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$in = 0;
 $$0$in = $2;
 while (1) {
  $$0 = $$0$in + -1 | 0;
  if (($$0$in | 0) <= 0) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +(HEAP16[$1 + ($$0 << 1) >> 1] | 0);
  $$0$in = $$0;
 }
 return;
}

function _encode_size($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 if (($0 | 0) < 252) {
  HEAP8[$1 >> 0] = $0;
  $$0 = 1;
  return $$0 | 0;
 } else {
  $4 = $0 | 252;
  HEAP8[$1 >> 0] = $4;
  HEAP8[$1 + 1 >> 0] = ($0 - ($4 & 255) | 0) >>> 2;
  $$0 = 2;
  return $$0 | 0;
 }
 return 0;
}

function _silk_short2float_array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$in = 0;
 $$0$in = $2;
 while (1) {
  $$0 = $$0$in + -1 | 0;
  if (($$0$in | 0) <= 0) break;
  HEAPF32[$0 + ($$0 << 2) >> 2] = +(HEAP16[$1 + ($$0 << 1) >> 1] | 0);
  $$0$in = $$0;
 }
 return;
}

function _ec_decode_bin($0) {
 $0 = $0 | 0;
 var $3 = 0, $7 = 0, $8 = 0;
 $3 = (HEAP32[$0 + 28 >> 2] | 0) >>> 15;
 HEAP32[$0 + 36 >> 2] = $3;
 $7 = ((HEAP32[$0 + 32 >> 2] | 0) >>> 0) / ($3 >>> 0) | 0;
 $8 = $7 + 1 | 0;
 return 32768 - ($8 + ($8 >>> 0 > 32768 ? 32767 - $7 | 0 : 0)) | 0;
}

function _speex_resampler_set_quality($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 if ($1 >>> 0 > 10) return;
 $3 = $0 + 16 | 0;
 if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) return;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$0 + 52 >> 2] | 0)) return;
 _update_filter($0) | 0;
 return;
}

function _silk_ROR32_530($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 << 0 - $1 | $0 >>> ($1 + 32 | 0);
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_423($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 << 0 - $1 | $0 >>> ($1 + 32 | 0);
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_353($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 << 0 - $1 | $0 >>> ($1 + 32 | 0);
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _silk_ROR32_263($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 << 0 - $1 | $0 >>> ($1 + 32 | 0);
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function _opus_decode_float($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0;
 if (($4 | 0) < 1) {
  $$0 = -1;
  return $$0 | 0;
 }
 $$0 = _opus_decode_native($0, $1, $2, $3, $4, $5, 0) | 0;
 return $$0 | 0;
}

function _ec_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $9 = 0;
 $4 = _celt_udiv_55(HEAP32[$0 + 28 >> 2] | 0, $1) | 0;
 HEAP32[$0 + 36 >> 2] = $4;
 $9 = (((HEAP32[$0 + 32 >> 2] | 0) >>> 0) / ($4 >>> 0) | 0) + 1 | 0;
 return $1 - ($9 >>> 0 > $1 >>> 0 ? $1 : $9) | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _silk_ROR32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = $0;
  return $$0 | 0;
 }
 if (($1 | 0) < 0) {
  $$0 = $0 << 0 - $1 | $0 >>> ($1 + 32 | 0);
  return $$0 | 0;
 } else {
  $$0 = $0 << 32 - $1 | $0 >>> $1;
  return $$0 | 0;
 }
 return 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _silk_gains_ID($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = 0;
 $$01 = 0;
 while (1) {
  if (($$01 | 0) >= ($1 | 0)) break;
  $$0 = ($$0 << 8) + (HEAP8[$0 + $$01 >> 0] | 0) | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $$0 | 0;
}

function _opus_custom_encoder_get_size($$0$1$val, $$0$2$val, $0) {
 $$0$1$val = $$0$1$val | 0;
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 return ((Math_imul($$0$1$val, $0) | 0) << 2) + 244 + ($0 << 12) + ((Math_imul($0 << 2, $$0$2$val) | 0) << 2) | 0;
}

function _compute_gcd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$phi = 0, $$01 = 0;
 $$0 = $0;
 $$01 = $1;
 while (1) {
  if (!$$01) break;
  $$0$phi = $$01;
  $$01 = ($$0 >>> 0) % ($$01 >>> 0) | 0;
  $$0 = $$0$phi;
 }
 return $$0 | 0;
}

function _fprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 _vfprintf($2);
 STACKTOP = sp;
 return;
}

function _opus_custom_decoder_get_size($$0$1$val, $$0$2$val, $0) {
 $$0$1$val = $$0$1$val | 0;
 $$0$2$val = $$0$2$val | 0;
 $0 = $0 | 0;
 return ((Math_imul($$0$1$val + 2048 | 0, $0) | 0) << 2) + 92 + ($0 * 96 | 0) + ($$0$2$val << 5) | 0;
}

function _silk_PLC_Reset($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4172 >> 2] = HEAP32[$0 + 2328 >> 2] << 7;
 HEAP32[$0 + 4244 >> 2] = 65536;
 HEAP32[$0 + 4248 >> 2] = 65536;
 HEAP32[$0 + 4260 >> 2] = 20;
 HEAP32[$0 + 4256 >> 2] = 2;
 return;
}

function _silk_CLZ_FRAC_528($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_529($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_530($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_421($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_422($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_423($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_351($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_352($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_353($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_CLZ_FRAC_262($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32_258($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32_263($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _silk_init_decoder($0) {
 $0 = $0 | 0;
 _memset($0 + 4 | 0, 0, 4260) | 0;
 HEAP32[$0 + 2376 >> 2] = 1;
 HEAP32[$0 >> 2] = 65536;
 HEAP32[$0 + 4168 >> 2] = 0;
 _silk_CNG_Reset($0);
 _silk_PLC_Reset($0);
 return;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return (($$0 | 0) == 0 ? $0 : $$0) | 0;
}

function _silk_CLZ_FRAC($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _silk_CLZ32($0) | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$2 >> 2] = (_silk_ROR32($0, 24 - $3 | 0) | 0) & 127;
 return;
}

function _FLOAT2INT16_669($0) {
 $0 = +$0;
 var $1 = 0.0, $4 = 0.0;
 $1 = $0 * 32768.0;
 if ($1 > -32768.0) if ($1 < 32767.0) $4 = $1; else $4 = 32767.0; else $4 = -32768.0;
 return (_lrintf($4) | 0) & 65535 | 0;
}

function _speex_alloc_820($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _malloc($0) | 0;
 if (!$1) return $1 | 0;
 if (!(HEAP32[$1 + -4 >> 2] & 3)) return $1 | 0;
 _memset($1 | 0, 0, $0 | 0) | 0;
 return $1 | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _compute_channel_weights($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2 | 0;
 var $5 = 0.0;
 $5 = ($0 < $1 ? $0 : $1) / 3.0;
 HEAPF32[$2 >> 2] = $5 + $0;
 HEAPF32[$2 + 4 >> 2] = $5 + $1;
 return;
}

function _encode_split($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($2 | 0) <= 0) return;
 _ec_enc_icdf($0, $1, $3 + (HEAPU8[26192 + $2 >> 0] | 0) | 0, 8);
 return;
}

function _celt_encoder_get_size($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _opus_custom_mode_create() | 0;
 return _opus_custom_encoder_get_size(HEAP32[$1 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0, $0) | 0;
}

function _celt_decoder_get_size($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _opus_custom_mode_create() | 0;
 return _opus_custom_decoder_get_size(HEAP32[$1 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0, $0) | 0;
}

function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function _speex_resampler_init($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return _speex_resampler_init_frac($0, $1, $2, $1, $2, $3, $4) | 0;
}

function _compute_frame_energy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = Math_imul($1, $2) | 0;
 return +(+_celt_inner_prod_c_666($0, $0, $3) / +($3 | 0));
}

function _is_digital_silence($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +_celt_maxabs16_672($0, Math_imul($1, $2) | 0) <= 1.0 / +(1 << $3 | 0) | 0;
}

function _silk_resampler_private_up2_HQ_wrapper($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _silk_resampler_private_up2_HQ($0, $1, $2, $3);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 3](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _ec_tell_671($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _ec_tell_644($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _ec_tell_543($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _ec_tell_213($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _ec_tell_141($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _ec_tell_40($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function _opus_packet_get_mode($$val) {
 $$val = $$val | 0;
 if ($$val << 24 >> 24 < 0) return 1002; else return (($$val & 96) == 96 ? 1001 : 1e3) | 0;
 return 0;
}

function _ec_tell($$0$5$val, $$0$7$val) {
 $$0$5$val = $$0$5$val | 0;
 $$0$7$val = $$0$7$val | 0;
 return (Math_clz32($$0$7$val | 0) | 0) + -32 + $$0$5$val | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[12760] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function _tonality_analysis_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 _tonality_analysis_reset($0);
 return;
}

function _get_pulses($0) {
 $0 = $0 | 0;
 var $7 = 0;
 if (($0 | 0) < 8) {
  $7 = $0;
  return $7 | 0;
 }
 $7 = ($0 & 7 | 8) << ($0 >> 3) + -1;
 return $7 | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function b3(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(3);
}

function b2(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(2);
 return 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function _opus_repacketizer_cat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _opus_repacketizer_cat_impl($0, $1, $2) | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1) | 0;
 return $$0 | 0;
}

function _ec_laplace_get_freq1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (Math_imul(32736 - $0 | 0, 16384 - $1 | 0) | 0) >>> 15 | 0;
}

function _silk_stereo_decode_mid_only($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = _ec_dec_icdf($0, 44674, 8) | 0;
 return;
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0);
 return;
}

function _silk_stereo_encode_mid_only($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _ec_enc_icdf($0, $1 << 24 >> 24, 44674, 8);
 return;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _compute_pitch_gain($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 return +($0 / +Math_sqrt(+($1 * $2 + 1.0)));
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 1](a1 | 0) | 0;
}

function _opus_packet_get_nb_channels($$val) {
 $$val = $$val | 0;
 return (($$val & 255) >>> 2 & 1) + 1 & 255 | 0;
}

function _silk_min_int_621($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_445($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_396($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_349($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_int_238($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_620($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_525($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_444($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int_354($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_min_32_253($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) < ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_int($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _silk_max_32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function _celt_udiv_162($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_156($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_120($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _rintf(f) {
 f = +f;
 return f - +Math_floor(f) != .5 ? +_round(f) : +_round(f / 2.0) * 2.0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function _celt_udiv_72($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_udiv_55($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _tonality_analysis_reset($0) {
 $0 = $0 | 0;
 _memset($0 + 12 | 0, 0, 13988) | 0;
 return;
}

function _celt_udiv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
}

function _celt_lcg_rand($0) {
 $0 = $0 | 0;
 return (Math_imul($0, 1664525) | 0) + 1013904223 | 0;
}

function _celt_sudiv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) / ($1 | 0) | 0 | 0;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function _silk_log2_619($0) {
 $0 = +$0;
 return +(+_llvm_log10_f64(+$0) * 3.32192809488736);
}

function _ec_get_error_44($$0$11$val) {
 $$0$11$val = $$0$11$val | 0;
 return $$0$11$val | 0;
}

function _silk_min_int_452($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 32767 ? $0 : 32767) | 0;
}

function _silk_min_32_406($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 32767 ? $0 : 32767) | 0;
}

function _silk_max_16($0) {
 $0 = $0 | 0;
 return ($0 << 16 >> 16 > 3277 ? $0 : 3277) | 0;
}

function _round(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function _ec_get_error($$0$11$val) {
 $$0$11$val = $$0$11$val | 0;
 return $$0$11$val | 0;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function _silk_log2($0) {
 $0 = +$0;
 return +(+_llvm_log10_f64(+$0) * 3.32192809488736);
}

function _silk_Get_Encoder_Size($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 20216;
 return 0;
}

function _sigmoid_approx($0) {
 $0 = +$0;
 return +(+_tansig_approx($0 * .5) * .5 + .5);
}

function _ec_range_bytes($$0$6$val) {
 $$0$6$val = $$0$6$val | 0;
 return $$0$6$val | 0;
}

function _silk_Get_Decoder_Size($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 8552;
 return 0;
}

function _opus_repacketizer_init($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return;
}

function _silk_sigmoid_571($0) {
 $0 = +$0;
 return +(1.0 / (+Math_exp(+-$0) + 1.0));
}

function _silk_min_int_547($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 63 ? $0 : 63) | 0;
}

function _silk_min_32($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 3967 ? $0 : 3967) | 0;
}

function _silk_min_int_252($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 1 ? $0 : 1) | 0;
}

function _silk_max_int_451($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 1 ? $0 : 1) | 0;
}

function _silk_max_int_393($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 2 ? $0 : 2) | 0;
}

function _silk_max_int_378($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 1 ? $0 : 1) | 0;
}

function _silk_max_int_251($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 0 ? $0 : 0) | 0;
}

function _silk_max_32_510($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 0 ? $0 : 0) | 0;
}

function _silk_max_32_344($0) {
 $0 = $0 | 0;
 return (($0 | 0) > 1 ? $0 : 1) | 0;
}

function _silk_sigmoid($0) {
 $0 = +$0;
 return +(1.0 / (+Math_exp(+-$0) + 1.0));
}

function _silk_min_int($0) {
 $0 = $0 | 0;
 return (($0 | 0) < 63 ? $0 : 63) | 0;
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, 51016) | 0;
}

function _silk_CLZ32_529($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_509($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_434($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_422($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_379($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_362($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_352($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_258($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_246($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_237($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _silk_CLZ32_183($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _opus_decoder_destroy($0) {
 $0 = $0 | 0;
 _opus_free($0);
 return;
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function _silk_CLZ32($0) {
 $0 = $0 | 0;
 return Math_clz32($0 | 0) | 0;
}

function _opus_alloc_664($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function _silk_float2int($0) {
 $0 = +$0;
 return _lrintf($0) | 0;
}

function _speex_free_821($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _opus_alloc($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function _opus_free_665($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _align_662($0) {
 $0 = $0 | 0;
 return $0 + 3 & -4 | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _lrintf($0) {
 $0 = +$0;
 return ~~+_rintf(+$0) | 0;
}

function _opus_free($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _align($0) {
 $0 = $0 | 0;
 return $0 + 3 & -4 | 0;
}

function _dummy_560($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function _opus_custom_mode_create() {
 return 39456;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdio_write,___stdio_seek,b1];
var FUNCTION_TABLE_iiiiiii = [b2,_resampler_basic_direct_double,_resampler_basic_direct_single,_resampler_basic_interpolate_double,_resampler_basic_interpolate_single,_resampler_basic_zero,b2,b2];
var FUNCTION_TABLE_viiiiiii = [b3,_downmix_float];

  return { ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _opus_decode_float: _opus_decode_float, _opus_decoder_create: _opus_decoder_create, _opus_decoder_destroy: _opus_decoder_destroy, _opus_encode_float: _opus_encode_float, _opus_encoder_create: _opus_encoder_create, _opus_encoder_ctl: _opus_encoder_ctl, _rintf: _rintf, _sbrk: _sbrk, _speex_resampler_destroy: _speex_resampler_destroy, _speex_resampler_init: _speex_resampler_init, _speex_resampler_process_interleaved_float: _speex_resampler_process_interleaved_float, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _opus_decode_float = Module["_opus_decode_float"] = asm["_opus_decode_float"];
var _opus_decoder_create = Module["_opus_decoder_create"] = asm["_opus_decoder_create"];
var _opus_decoder_destroy = Module["_opus_decoder_destroy"] = asm["_opus_decoder_destroy"];
var _opus_encode_float = Module["_opus_encode_float"] = asm["_opus_encode_float"];
var _opus_encoder_create = Module["_opus_encoder_create"] = asm["_opus_encoder_create"];
var _opus_encoder_ctl = Module["_opus_encoder_ctl"] = asm["_opus_encoder_ctl"];
var _rintf = Module["_rintf"] = asm["_rintf"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _speex_resampler_destroy = Module["_speex_resampler_destroy"] = asm["_speex_resampler_destroy"];
var _speex_resampler_init = Module["_speex_resampler_init"] = asm["_speex_resampler_init"];
var _speex_resampler_process_interleaved_float = Module["_speex_resampler_process_interleaved_float"] = asm["_speex_resampler_process_interleaved_float"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;











































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}








  return FastSound;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
    module.exports = FastSound;
  else if (typeof define === 'function' && define['amd'])
    define([], function() { return FastSound; });
  else if (typeof exports === 'object')
    exports["FastSound"] = FastSound;
  